{
    "background_story": "Juliana was a brilliant mechanical engineer with a passion for innovative designs. She spent most of her career working on automated systems, and her latest project was an autoloader for a cutting-edge manufacturing facility. The autoloader, capable of loading and unloading materials with precision and speed, was Juliana's masterpiece. She designed it from scratch, ensuring it was efficient, reliable, and adaptable to various production lines. Juliana's autoloader revolutionized the industry, significantly reducing production time and increasing output quality. Her invention earned her numerous accolades and recognition within the engineering community, solidifying her position as a leading expert in automation technology.",
    "predicates": [
        {
            "id": 0,
            "name": "optimizes_processes"
        },
        {
            "id": 1,
            "name": "develops_algorithms"
        },
        {
            "id": 2,
            "name": "writes_code"
        },
        {
            "id": 3,
            "name": "tests_prototypes"
        },
        {
            "id": 4,
            "name": "resolves_faults"
        },
        {
            "id": 5,
            "name": "design_autonomous_systems"
        },
        {
            "id": 6,
            "name": "increase_production_efficiency"
        },
        {
            "id": 7,
            "name": "builds_models"
        },
        {
            "id": 8,
            "name": "creates_machines"
        },
        {
            "id": 9,
            "name": "solves_problems"
        },
        {
            "id": 10,
            "name": "fixes_errors"
        },
        {
            "id": 11,
            "name": "troubleshoots_issues"
        },
        {
            "id": 12,
            "name": "improves_quality"
        },
        {
            "id": 13,
            "name": "reduces_costs"
        },
        {
            "id": 14,
            "name": "creates_blueprints"
        },
        {
            "id": 15,
            "name": "makes_prototypes"
        },
        {
            "id": 16,
            "name": "thinks_critically"
        },
        {
            "id": 17,
            "name": "improves_designs"
        },
        {
            "id": 18,
            "name": "improves_products"
        },
        {
            "id": 19,
            "name": "debugs_systems"
        },
        {
            "id": 20,
            "name": "repairs_machines"
        },
        {
            "id": 21,
            "name": "enhances_reliability"
        }
    ],
    "subject_name": "Juliana",
    "subject_category": "engineer",
    "keyword": "autoloader",
    "all_facts": [
        {
            "id": 0,
            "subject": "Juliana",
            "text": "Juliana optimizes processes.",
            "fol": "p_0(Juliana)",
            "str_fol": "optimizes_processes(Juliana)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Juliana",
            "text": "Juliana develops algorithms.",
            "fol": "p_1(Juliana)",
            "str_fol": "develops_algorithms(Juliana)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Juliana",
            "text": "Juliana writes code.",
            "fol": "p_2(Juliana)",
            "str_fol": "writes_code(Juliana)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Juliana",
            "text": "Juliana tests prototypes.",
            "fol": "p_3(Juliana)",
            "str_fol": "tests_prototypes(Juliana)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Juliana",
            "text": "Juliana does not resolve faults.",
            "fol": "\u00acp_4(Juliana)",
            "str_fol": "\u00acresolves_faults(Juliana)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Juliana",
            "text": "Juliana does not troubleshoot issues.",
            "fol": "\u00acp_11(Juliana)",
            "str_fol": "\u00actroubleshoots_issues(Juliana)",
            "negation": true
        },
        {
            "id": 6,
            "subject": "Juliana",
            "text": "Juliana fixes errors.",
            "fol": "p_10(Juliana)",
            "str_fol": "fixes_errors(Juliana)",
            "negation": false
        },
        {
            "id": 7,
            "subject": "Juliana",
            "text": "Juliana does not solve problems.",
            "fol": "\u00acp_9(Juliana)",
            "str_fol": "\u00acsolves_problems(Juliana)",
            "negation": true
        },
        {
            "id": 8,
            "subject": "Juliana",
            "text": "Juliana creates machines.",
            "fol": "p_8(Juliana)",
            "str_fol": "creates_machines(Juliana)",
            "negation": false
        },
        {
            "id": 9,
            "subject": "Juliana",
            "text": "Juliana builds models.",
            "fol": "p_7(Juliana)",
            "str_fol": "builds_models(Juliana)",
            "negation": false
        },
        {
            "id": 10,
            "subject": "Juliana",
            "text": "Juliana increases production efficiency.",
            "fol": "p_6(Juliana)",
            "str_fol": "increase_production_efficiency(Juliana)",
            "negation": false
        },
        {
            "id": 11,
            "subject": "Juliana",
            "text": "Juliana designs autonomous systems.",
            "fol": "p_5(Juliana)",
            "str_fol": "design_autonomous_systems(Juliana)",
            "negation": false
        }
    ],
    "context_facts": [
        {
            "id": 4,
            "subject": "Juliana",
            "text": "Juliana does not resolve faults.",
            "fol": "\u00acp_4(Juliana)",
            "str_fol": "\u00acresolves_faults(Juliana)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Juliana",
            "text": "Juliana tests prototypes.",
            "fol": "p_3(Juliana)",
            "str_fol": "tests_prototypes(Juliana)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Juliana",
            "text": "Juliana writes code.",
            "fol": "p_2(Juliana)",
            "str_fol": "writes_code(Juliana)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Juliana",
            "text": "Juliana develops algorithms.",
            "fol": "p_1(Juliana)",
            "str_fol": "develops_algorithms(Juliana)",
            "negation": false
        },
        {
            "id": 0,
            "subject": "Juliana",
            "text": "Juliana optimizes processes.",
            "fol": "p_0(Juliana)",
            "str_fol": "optimizes_processes(Juliana)",
            "negation": false
        }
    ],
    "context_rules": [
        {
            "id": 6,
            "text": "Every engineer who troubleshoots issues can resolve faults.",
            "fol": "\u2200x (p_11(x) \u2192 p_4(x))",
            "str_fol": "\u2200x (troubleshoots_issues(x) \u2192 resolves_faults(x))"
        },
        {
            "id": 5,
            "text": "If Juliana either troubleshoots issues or tests prototypes (but not both), then she fixes errors.",
            "fol": "(p_11(Juliana) \u2295 p_3(Juliana)) \u2192 p_10(Juliana)",
            "str_fol": "(troubleshoots_issues(Juliana) \u2295 tests_prototypes(Juliana)) \u2192 fixes_errors(Juliana)"
        },
        {
            "id": 4,
            "text": "If Juliana solves problems, then she either writes code or fixes errors (but not both).",
            "fol": "p_9(Juliana) \u2192 (p_2(Juliana) \u2295 p_10(Juliana))",
            "str_fol": "solves_problems(Juliana) \u2192 (writes_code(Juliana) \u2295 fixes_errors(Juliana))"
        },
        {
            "id": 3,
            "text": "For all engineers, if they either create machines or develop algorithms, then they solve problems.",
            "fol": "\u2200x ((p_8(x) \u2295 p_1(x)) \u2192 p_9(x))",
            "str_fol": "\u2200x ((creates_machines(x) \u2295 develops_algorithms(x)) \u2192 solves_problems(x))"
        },
        {
            "id": 2,
            "text": "All engineers who create machines build models.",
            "fol": "\u2200x (p_8(x) \u2192 p_7(x))",
            "str_fol": "\u2200x (creates_machines(x) \u2192 builds_models(x))"
        },
        {
            "id": 1,
            "text": "If an engineer builds models and optimizes processes, then they increase production efficiency.",
            "fol": "\u2200x ((p_7(x) \u2227 p_0(x)) \u2192 p_6(x))",
            "str_fol": "\u2200x ((builds_models(x) \u2227 optimizes_processes(x)) \u2192 increase_production_efficiency(x))"
        },
        {
            "id": 0,
            "text": "For all engineers, if they design autonomous systems, then they increase production efficiency.",
            "fol": "\u2200x (p_5(x) \u2192 p_6(x))",
            "str_fol": "\u2200x (design_autonomous_systems(x) \u2192 increase_production_efficiency(x))"
        }
    ],
    "context": [
        {
            "id": 4,
            "subject": "Juliana",
            "text": "Juliana does not resolve faults.",
            "fol": "\u00acp_4(Juliana)",
            "str_fol": "\u00acresolves_faults(Juliana)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Juliana",
            "text": "Juliana tests prototypes.",
            "fol": "p_3(Juliana)",
            "str_fol": "tests_prototypes(Juliana)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Juliana",
            "text": "Juliana writes code.",
            "fol": "p_2(Juliana)",
            "str_fol": "writes_code(Juliana)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Juliana",
            "text": "Juliana develops algorithms.",
            "fol": "p_1(Juliana)",
            "str_fol": "develops_algorithms(Juliana)",
            "negation": false
        },
        {
            "id": 0,
            "subject": "Juliana",
            "text": "Juliana optimizes processes.",
            "fol": "p_0(Juliana)",
            "str_fol": "optimizes_processes(Juliana)",
            "negation": false
        },
        {
            "id": 6,
            "text": "Every engineer who troubleshoots issues can resolve faults.",
            "fol": "\u2200x (p_11(x) \u2192 p_4(x))",
            "str_fol": "\u2200x (troubleshoots_issues(x) \u2192 resolves_faults(x))"
        },
        {
            "id": 5,
            "text": "If Juliana either troubleshoots issues or tests prototypes (but not both), then she fixes errors.",
            "fol": "(p_11(Juliana) \u2295 p_3(Juliana)) \u2192 p_10(Juliana)",
            "str_fol": "(troubleshoots_issues(Juliana) \u2295 tests_prototypes(Juliana)) \u2192 fixes_errors(Juliana)"
        },
        {
            "id": 4,
            "text": "If Juliana solves problems, then she either writes code or fixes errors (but not both).",
            "fol": "p_9(Juliana) \u2192 (p_2(Juliana) \u2295 p_10(Juliana))",
            "str_fol": "solves_problems(Juliana) \u2192 (writes_code(Juliana) \u2295 fixes_errors(Juliana))"
        },
        {
            "id": 3,
            "text": "For all engineers, if they either create machines or develop algorithms, then they solve problems.",
            "fol": "\u2200x ((p_8(x) \u2295 p_1(x)) \u2192 p_9(x))",
            "str_fol": "\u2200x ((creates_machines(x) \u2295 develops_algorithms(x)) \u2192 solves_problems(x))"
        },
        {
            "id": 2,
            "text": "All engineers who create machines build models.",
            "fol": "\u2200x (p_8(x) \u2192 p_7(x))",
            "str_fol": "\u2200x (creates_machines(x) \u2192 builds_models(x))"
        },
        {
            "id": 1,
            "text": "If an engineer builds models and optimizes processes, then they increase production efficiency.",
            "fol": "\u2200x ((p_7(x) \u2227 p_0(x)) \u2192 p_6(x))",
            "str_fol": "\u2200x ((builds_models(x) \u2227 optimizes_processes(x)) \u2192 increase_production_efficiency(x))"
        },
        {
            "id": 0,
            "text": "For all engineers, if they design autonomous systems, then they increase production efficiency.",
            "fol": "\u2200x (p_5(x) \u2192 p_6(x))",
            "str_fol": "\u2200x (design_autonomous_systems(x) \u2192 increase_production_efficiency(x))"
        }
    ],
    "context_fol": "\u00acp_4(Juliana)\np_3(Juliana)\np_2(Juliana)\np_1(Juliana)\np_0(Juliana)\n\u2200x (p_11(x) \u2192 p_4(x))\n(p_11(Juliana) \u2295 p_3(Juliana)) \u2192 p_10(Juliana)\np_9(Juliana) \u2192 (p_2(Juliana) \u2295 p_10(Juliana))\n\u2200x ((p_8(x) \u2295 p_1(x)) \u2192 p_9(x))\n\u2200x (p_8(x) \u2192 p_7(x))\n\u2200x ((p_7(x) \u2227 p_0(x)) \u2192 p_6(x))\n\u2200x (p_5(x) \u2192 p_6(x))",
    "conclusion": {
        "id": 11,
        "subject": "Juliana",
        "text": "Juliana designs autonomous systems.",
        "fol": "p_5(Juliana)",
        "str_fol": "design_autonomous_systems(Juliana)",
        "negation": false
    },
    "initial_answer": "Uncertain",
    "initial_goal": "p_5(Juliana)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 4,
                    "subject": "Juliana",
                    "text": "Juliana does not resolve faults.",
                    "fol": "\u00acp_4(Juliana)",
                    "str_fol": "\u00acresolves_faults(Juliana)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 6,
                    "text": "Every engineer who troubleshoots issues can resolve faults.",
                    "fol": "\u2200x (p_11(x) \u2192 p_4(x))",
                    "str_fol": "\u2200x (troubleshoots_issues(x) \u2192 resolves_faults(x))"
                }
            ],
            "conclusion": {
                "id": 5,
                "subject": "Juliana",
                "text": "Juliana does not troubleshoot issues.",
                "fol": "\u00acp_11(Juliana)",
                "str_fol": "\u00actroubleshoots_issues(Juliana)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 5,
                    "subject": "Juliana",
                    "text": "Juliana does not troubleshoot issues.",
                    "fol": "\u00acp_11(Juliana)",
                    "str_fol": "\u00actroubleshoots_issues(Juliana)",
                    "negation": true
                },
                {
                    "id": 3,
                    "subject": "Juliana",
                    "text": "Juliana tests prototypes.",
                    "fol": "p_3(Juliana)",
                    "str_fol": "tests_prototypes(Juliana)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "If Juliana either troubleshoots issues or tests prototypes (but not both), then she fixes errors.",
                    "fol": "(p_11(Juliana) \u2295 p_3(Juliana)) \u2192 p_10(Juliana)",
                    "str_fol": "(troubleshoots_issues(Juliana) \u2295 tests_prototypes(Juliana)) \u2192 fixes_errors(Juliana)"
                }
            ],
            "conclusion": {
                "id": 6,
                "subject": "Juliana",
                "text": "Juliana fixes errors.",
                "fol": "p_10(Juliana)",
                "str_fol": "fixes_errors(Juliana)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 2,
                    "subject": "Juliana",
                    "text": "Juliana writes code.",
                    "fol": "p_2(Juliana)",
                    "str_fol": "writes_code(Juliana)",
                    "negation": false
                },
                {
                    "id": 6,
                    "subject": "Juliana",
                    "text": "Juliana fixes errors.",
                    "fol": "p_10(Juliana)",
                    "str_fol": "fixes_errors(Juliana)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "If Juliana solves problems, then she either writes code or fixes errors (but not both).",
                    "fol": "p_9(Juliana) \u2192 (p_2(Juliana) \u2295 p_10(Juliana))",
                    "str_fol": "solves_problems(Juliana) \u2192 (writes_code(Juliana) \u2295 fixes_errors(Juliana))"
                }
            ],
            "conclusion": {
                "id": 7,
                "subject": "Juliana",
                "text": "Juliana does not solve problems.",
                "fol": "\u00acp_9(Juliana)",
                "str_fol": "\u00acsolves_problems(Juliana)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 1,
                    "subject": "Juliana",
                    "text": "Juliana develops algorithms.",
                    "fol": "p_1(Juliana)",
                    "str_fol": "develops_algorithms(Juliana)",
                    "negation": false
                },
                {
                    "id": 7,
                    "subject": "Juliana",
                    "text": "Juliana does not solve problems.",
                    "fol": "\u00acp_9(Juliana)",
                    "str_fol": "\u00acsolves_problems(Juliana)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "For all engineers, if they either create machines or develop algorithms, then they solve problems.",
                    "fol": "\u2200x ((p_8(x) \u2295 p_1(x)) \u2192 p_9(x))",
                    "str_fol": "\u2200x ((creates_machines(x) \u2295 develops_algorithms(x)) \u2192 solves_problems(x))"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Juliana",
                "text": "Juliana creates machines.",
                "fol": "p_8(Juliana)",
                "str_fol": "creates_machines(Juliana)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 8,
                    "subject": "Juliana",
                    "text": "Juliana creates machines.",
                    "fol": "p_8(Juliana)",
                    "str_fol": "creates_machines(Juliana)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "All engineers who create machines build models.",
                    "fol": "\u2200x (p_8(x) \u2192 p_7(x))",
                    "str_fol": "\u2200x (creates_machines(x) \u2192 builds_models(x))"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Juliana",
                "text": "Juliana builds models.",
                "fol": "p_7(Juliana)",
                "str_fol": "builds_models(Juliana)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 9,
                    "subject": "Juliana",
                    "text": "Juliana builds models.",
                    "fol": "p_7(Juliana)",
                    "str_fol": "builds_models(Juliana)",
                    "negation": false
                },
                {
                    "id": 0,
                    "subject": "Juliana",
                    "text": "Juliana optimizes processes.",
                    "fol": "p_0(Juliana)",
                    "str_fol": "optimizes_processes(Juliana)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "If an engineer builds models and optimizes processes, then they increase production efficiency.",
                    "fol": "\u2200x ((p_7(x) \u2227 p_0(x)) \u2192 p_6(x))",
                    "str_fol": "\u2200x ((builds_models(x) \u2227 optimizes_processes(x)) \u2192 increase_production_efficiency(x))"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Juliana",
                "text": "Juliana increases production efficiency.",
                "fol": "p_6(Juliana)",
                "str_fol": "increase_production_efficiency(Juliana)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 10,
                    "subject": "Juliana",
                    "text": "Juliana increases production efficiency.",
                    "fol": "p_6(Juliana)",
                    "str_fol": "increase_production_efficiency(Juliana)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "For all engineers, if they design autonomous systems, then they increase production efficiency.",
                    "fol": "\u2200x (p_5(x) \u2192 p_6(x))",
                    "str_fol": "\u2200x (design_autonomous_systems(x) \u2192 increase_production_efficiency(x))"
                }
            ],
            "conclusion": null
        }
    ],
    "proof_trace": null,
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "UNCERTAIN",
            "Edited Assumptions": "\u00acp_4(Juliana)\np_3(Juliana)\np_2(Juliana)\np_1(Juliana)\np_0(Juliana)\n\u2200x (p_11(x) \u2192 p_4(x))\n(p_11(Juliana) \u2295 p_3(Juliana)) \u2192 p_10(Juliana)\np_9(Juliana) \u2192 (p_2(Juliana) \u2295 p_10(Juliana))\n\u2200x ((p_8(x) \u2295 p_1(x)) \u2192 p_9(x))\n\u2200x (p_8(x) \u2192 p_7(x))\n\u2200x ((p_7(x) \u2227 p_0(x)) \u2192 p_6(x))\n\u2200x (p_5(x) \u2192 p_6(x))",
            "Initial Goal": "p_5(Juliana)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Juliana).",
                    "p_3(Juliana).",
                    "p_2(Juliana).",
                    "p_1(Juliana).",
                    "p_0(Juliana).",
                    "all x (p_11(x) -> p_4(x)).",
                    "(-(p_11(Juliana) <-> p_3(Juliana))) -> p_10(Juliana).",
                    "p_9(Juliana) -> (-(p_2(Juliana) <-> p_10(Juliana))).",
                    "all x ((-(p_8(x) <-> p_1(x))) -> p_9(x)).",
                    "all x (p_8(x) -> p_7(x)).",
                    "all x ((p_7(x) & p_0(x)) -> p_6(x)).",
                    "all x (p_5(x) -> p_6(x)).",
                    "all x (p_3(x) -> p_5(x))."
                ],
                "formulas(goals)": [
                    "p_5(Juliana)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "\u2200x (p_3(x) \u2192 p_5(x))"
                ]
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_4(Juliana)\np_3(Juliana)\np_2(Juliana)\np_1(Juliana)\np_0(Juliana)\np_5(Juliana)\n\u2200x (\u00acp_4(x) \u2192 \u00acp_11(x))\n(p_11(Juliana) \u2295 p_3(Juliana)) \u2192 p_10(Juliana)\np_9(Juliana) \u2192 (p_2(Juliana) \u2295 p_10(Juliana))\n\u2200x ((p_8(x) \u2295 p_1(x)) \u2192 p_9(x))\n\u2200x (p_8(x) \u2192 p_7(x))\n\u2200x (\u00acp_6(x) \u2192 \u00ac(p_7(x) \u2227 p_0(x)))\n\u2200x (p_5(x) \u2192 p_6(x))\np_6(Juliana)\n\u00acp_11(Juliana)",
            "Initial Goal": "p_5(Juliana)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Juliana).",
                    "p_3(Juliana).",
                    "p_2(Juliana).",
                    "p_1(Juliana).",
                    "p_0(Juliana).",
                    "p_5(Juliana).",
                    "all x (-p_4(x) -> -p_11(x)).",
                    "(-(p_11(Juliana) <-> p_3(Juliana))) -> p_10(Juliana).",
                    "p_9(Juliana) -> (-(p_2(Juliana) <-> p_10(Juliana))).",
                    "all x ((-(p_8(x) <-> p_1(x))) -> p_9(x)).",
                    "all x (p_8(x) -> p_7(x)).",
                    "all x (-p_6(x) -> (-p_7(x) | -p_0(x))).",
                    "all x (p_5(x) -> p_6(x)).",
                    "p_6(Juliana).",
                    "-p_11(Juliana)."
                ],
                "formulas(goals)": [
                    "p_5(Juliana)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u2200x (p_11(x) \u2192 p_4(x))",
                    "\u2200x ((p_7(x) \u2227 p_0(x)) \u2192 p_6(x))"
                ],
                "added_facts": [
                    "p_5(Juliana)",
                    "p_6(Juliana)",
                    "\u00acp_11(Juliana)"
                ],
                "added_rules": [
                    "\u2200x (\u00acp_4(x) \u2192 \u00acp_11(x))",
                    "\u2200x (\u00acp_6(x) \u2192 \u00ac(p_7(x) \u2227 p_0(x)))"
                ]
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_4(Juliana)\np_3(Juliana)\np_2(Juliana)\np_1(Juliana)\np_0(Juliana)\np_6(Juliana)\n\u2200x (\u00acp_4(x) \u2192 \u00acp_11(x))\n(p_11(Juliana) \u2295 p_3(Juliana)) \u2192 p_10(Juliana)\np_9(Juliana) \u2192 (p_2(Juliana) \u2295 p_10(Juliana))\n\u2200x ((p_8(x) \u2295 p_1(x)) \u2192 p_9(x))\n\u2200x (p_8(x) \u2192 p_7(x))\n\u2200x (\u00acp_6(x) \u2192 \u00ac(p_7(x) \u2227 p_0(x)))\n\u2200x (p_5(x) \u2192 p_6(x))\np_6(Juliana)\n\u00acp_11(Juliana)\n\u2200x (\u00acp_4(x) \u2192 \u00acp_5(x))",
            "Initial Goal": "p_5(Juliana)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Juliana)",
                    "p_3(Juliana)",
                    "p_2(Juliana)",
                    "p_1(Juliana)",
                    "p_0(Juliana)",
                    "p_6(Juliana)",
                    "all x (-p_4(x) -> -p_11(x))",
                    "(-(p_11(Juliana) <-> p_3(Juliana))) -> p_10(Juliana)",
                    "p_9(Juliana) -> (-(p_2(Juliana) <-> p_10(Juliana)))",
                    "all x ((-(p_8(x) <-> p_1(x))) -> p_9(x))",
                    "all x (p_8(x) -> p_7(x))",
                    "all x (-p_6(x) -> -(p_7(x) & p_0(x)))",
                    "all x (p_5(x) -> p_6(x))",
                    "p_6(Juliana)",
                    "-p_11(Juliana)",
                    "all x (-p_4(x) -> -p_5(x))"
                ],
                "formulas(goals)": [
                    "-p_5(Juliana)"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "p_5(Juliana)"
                ],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "\u2200x (\u00acp_4(x) \u2192 \u00acp_5(x))"
                ]
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_4(Juliana)\np_3(Juliana)\np_2(Juliana)\np_1(Juliana)\np_0(Juliana)\np_6(Juliana)\n\u2200x (\u00acp_4(x) \u2192 \u00acp_11(x))\n(p_11(Juliana) \u2295 p_3(Juliana)) \u2192 p_10(Juliana)\np_9(Juliana) \u2192 (p_2(Juliana) \u2295 p_10(Juliana))\n\u2200x ((p_8(x) \u2295 p_1(x)) \u2192 p_9(x))\n\u2200x (p_8(x) \u2192 p_7(x))\n\u2200x (\u00acp_6(x) \u2192 \u00ac(p_7(x) \u2227 p_0(x)))\n\u2200x (p_5(x) \u2192 p_6(x))\np_6(Juliana)\n\u00acp_11(Juliana)\n\u2200x ((p_6(x) \u2227 \u00acp_4(x)) \u2192 p_5(x))",
            "Initial Goal": "p_5(Juliana)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Juliana)",
                    "p_3(Juliana)",
                    "p_2(Juliana)",
                    "p_1(Juliana)",
                    "p_0(Juliana)",
                    "p_6(Juliana)",
                    "all x (-p_4(x) -> -p_11(x))",
                    "(-(p_11(Juliana) <-> p_3(Juliana))) -> p_10(Juliana)",
                    "p_9(Juliana) -> (-(p_2(Juliana) <-> p_10(Juliana)))",
                    "all x ((-(p_8(x) <-> p_1(x))) -> p_9(x))",
                    "all x (p_8(x) -> p_7(x))",
                    "all x (-p_6(x) -> -(p_7(x) & p_0(x)))",
                    "all x (p_5(x) -> p_6(x))",
                    "p_6(Juliana)",
                    "-p_11(Juliana)",
                    "all x ((p_6(x) & -p_4(x)) -> p_5(x))"
                ],
                "formulas(goals)": [
                    "p_5(Juliana)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u2200x (\u00acp_4(x) \u2192 \u00acp_5(x))"
                ],
                "added_facts": [],
                "added_rules": [
                    "\u2200x ((p_6(x) \u2227 \u00acp_4(x)) \u2192 p_5(x))"
                ]
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_4(Juliana)\np_3(Juliana)\np_2(Juliana)\np_1(Juliana)\np_0(Juliana)\np_6(Juliana)\n\u2200x (\u00acp_4(x) \u2192 \u00acp_11(x))\n(p_11(Juliana) \u2295 p_3(Juliana)) \u2192 p_10(Juliana)\np_9(Juliana) \u2192 (p_2(Juliana) \u2295 p_10(Juliana))\n\u2200x ((p_8(x) \u2295 p_1(x)) \u2192 p_9(x))\n\u2200x (p_8(x) \u2192 p_7(x))\n\u2200x (\u00acp_6(x) \u2192 \u00ac(p_7(x) \u2227 p_0(x)))\n\u2200x (p_5(x) \u2192 p_6(x))\np_6(Juliana)\n\u00acp_11(Juliana)\n\u2200x ((p_6(x) \u2227 \u00acp_4(x)) \u2192 p_5(x))\n\u2200x (p_6(x) \u2192 p_6(x))\n\u2200x (\u00acp_6(x) \u2228 p_4(x) \u2228 p_5(x))\np_6(Juliana) \u2227 \u00acp_4(Juliana)\n\u00acp_4(Juliana) \u2192 \u00acp_11(Juliana)\np_9(Juliana) \u2192 ((p_2(Juliana) \u2228 p_10(Juliana)) \u2227 \u00ac(p_2(Juliana) \u2227 p_10(Juliana)))",
            "Initial Goal": "p_5(Juliana)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Juliana)",
                    "p_3(Juliana)",
                    "p_2(Juliana)",
                    "p_1(Juliana)",
                    "p_0(Juliana)",
                    "p_6(Juliana)",
                    "all x (-p_4(x) -> -p_11(x))",
                    "(-(p_11(Juliana) <-> p_3(Juliana))) -> p_10(Juliana)",
                    "p_9(Juliana) -> (-(p_2(Juliana) <-> p_10(Juliana)))",
                    "all x ((-(p_8(x) <-> p_1(x))) -> p_9(x))",
                    "all x (p_8(x) -> p_7(x))",
                    "all x (-p_6(x) -> -(p_7(x) & p_0(x)))",
                    "all x (p_5(x) -> p_6(x))",
                    "p_6(Juliana)",
                    "-p_11(Juliana)",
                    "all x ((p_6(x) & -p_4(x)) -> p_5(x))",
                    "all x (p_6(x) -> p_6(x))",
                    "all x (-p_6(x) | p_4(x) | p_5(x))",
                    "p_6(Juliana) & -p_4(Juliana)",
                    "-p_4(Juliana) -> -p_11(Juliana)",
                    "p_9(Juliana) -> ((p_2(Juliana) | p_10(Juliana)) & -(p_2(Juliana) & p_10(Juliana)))"
                ],
                "formulas(goals)": [
                    "p_5(Juliana)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_6(Juliana) \u2227 \u00acp_4(Juliana)"
                ],
                "added_rules": [
                    "\u2200x (p_6(x) \u2192 p_6(x))",
                    "\u2200x (\u00acp_6(x) \u2228 p_4(x) \u2228 p_5(x))",
                    "\u00acp_4(Juliana) \u2192 \u00acp_11(Juliana)",
                    "p_9(Juliana) \u2192 ((p_2(Juliana) \u2228 p_10(Juliana)) \u2227 \u00ac(p_2(Juliana) \u2227 p_10(Juliana)))"
                ]
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_4(Juliana)\np_3(Juliana)\np_2(Juliana)\np_1(Juliana)\np_0(Juliana)\np_6(Juliana)\n\u2200x (\u00acp_4(x) \u2192 \u00acp_11(x))\n(p_11(Juliana) \u2295 p_3(Juliana)) \u2192 p_10(Juliana)\np_9(Juliana) \u2192 (p_2(Juliana) \u2295 p_10(Juliana))\n\u2200x ((p_8(x) \u2295 p_1(x)) \u2192 p_9(x))\n\u2200x (p_8(x) \u2192 p_7(x))\n\u2200x (\u00acp_6(x) \u2192 \u00ac(p_7(x) \u2227 p_0(x)))\n\u2200x (p_5(x) \u2192 p_6(x))\n\u00acp_11(Juliana)\n\u2200x ((p_6(x) \u2227 \u00acp_4(x)) \u2192 p_5(x))\n\u2200x (p_6(x) \u2192 p_6(x))\n\u2200x (\u00acp_6(x) \u2228 p_4(x) \u2228 p_5(x))\np_6(Juliana) \u2227 \u00acp_4(Juliana)\n\u00acp_4(Juliana) \u2192 \u00acp_11(Juliana)\np_9(Juliana) \u2192 ((p_2(Juliana) \u2228 p_10(Juliana)) \u2227 \u00ac(p_2(Juliana) \u2227 p_10(Juliana)))\n\u2200x (p_11(x) \u2192 p_4(x))\n(\u00acp_11(Juliana) \u2228 p_3(Juliana) \u2228 p_10(Juliana)) \u2227 (p_11(Juliana) \u2228 \u00acp_3(Juliana) \u2228 p_10(Juliana))",
            "Initial Goal": "p_5(Juliana)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Juliana)",
                    "p_3(Juliana)",
                    "p_2(Juliana)",
                    "p_1(Juliana)",
                    "p_0(Juliana)",
                    "p_6(Juliana)",
                    "all x ((-p_4(x)) -> (-p_11(x)))",
                    "(-(p_11(Juliana) <-> p_3(Juliana))) -> p_10(Juliana)",
                    "p_9(Juliana) -> (-(p_2(Juliana) <-> p_10(Juliana)))",
                    "all x ((-(p_8(x) <-> p_1(x))) -> p_9(x))",
                    "all x (p_8(x) -> p_7(x))",
                    "all x ((-p_6(x)) -> (-(p_7(x) & p_0(x))))",
                    "all x (p_5(x) -> p_6(x))",
                    "-p_11(Juliana)",
                    "all x ((p_6(x) & (-p_4(x))) -> p_5(x))",
                    "all x (p_6(x) -> p_6(x))",
                    "all x ((-p_6(x)) | p_4(x) | p_5(x))",
                    "(p_6(Juliana) & (-p_4(Juliana)))",
                    "(-p_4(Juliana)) -> (-p_11(Juliana))",
                    "p_9(Juliana) -> ((p_2(Juliana) | p_10(Juliana)) & (-(p_2(Juliana) & p_10(Juliana))))",
                    "all x (p_11(x) -> p_4(x))",
                    "((-p_11(Juliana)) | p_3(Juliana) | p_10(Juliana)) & (p_11(Juliana) | (-p_3(Juliana)) | p_10(Juliana))"
                ],
                "formulas(goals)": [
                    "p_5(Juliana)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "\u2200x (p_11(x) \u2192 p_4(x))",
                    "(\u00acp_11(Juliana) \u2228 p_3(Juliana) \u2228 p_10(Juliana)) \u2227 (p_11(Juliana) \u2228 \u00acp_3(Juliana) \u2228 p_10(Juliana))"
                ]
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_4(Juliana)\np_3(Juliana)\np_2(Juliana)\np_1(Juliana)\np_0(Juliana)\np_6(Juliana)\n\u2200x (\u00acp_4(x) \u2192 \u00acp_11(x))\n(p_11(Juliana) \u2295 p_3(Juliana)) \u2192 p_10(Juliana)\np_9(Juliana) \u2192 (p_2(Juliana) \u2295 p_10(Juliana))\n\u2200x ((p_8(x) \u2295 p_1(x)) \u2192 p_9(x))\n\u2200x (p_8(x) \u2192 p_7(x))\n\u2200x (\u00acp_6(x) \u2192 \u00ac(p_7(x) \u2227 p_0(x)))\n\u2200x (p_5(x) \u2192 p_6(x))\n\u00acp_11(Juliana)\np_6(Juliana) \u2227 \u00acp_4(Juliana)\n\u00acp_4(Juliana) \u2192 \u00acp_11(Juliana)\np_9(Juliana) \u2192 ((p_2(Juliana) \u2228 p_10(Juliana)) \u2227 \u00ac(p_2(Juliana) \u2227 p_10(Juliana)))\n\u2200x (p_11(x) \u2192 p_4(x))\n(\u00acp_11(Juliana) \u2228 p_3(Juliana) \u2228 p_10(Juliana)) \u2227 (p_11(Juliana) \u2228 \u00acp_3(Juliana) \u2228 p_10(Juliana))\n\u2200x (p_5(x) \u2192 p_11(x))",
            "Initial Goal": "p_5(Juliana)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "\u00acp_4(Juliana)",
                    "p_3(Juliana)",
                    "p_2(Juliana)",
                    "p_1(Juliana)",
                    "p_0(Juliana)",
                    "p_6(Juliana)",
                    "all x (\u00acp_4(x) -> \u00acp_11(x))",
                    "(-(p_11(Juliana) <-> p_3(Juliana))) -> p_10(Juliana)",
                    "p_9(Juliana) -> (-(p_2(Juliana) <-> p_10(Juliana)))",
                    "all x ((-(p_8(x) <-> p_1(x))) -> p_9(x))",
                    "all x (p_8(x) -> p_7(x))",
                    "all x (\u00acp_6(x) -> \u00ac(p_7(x) & p_0(x)))",
                    "all x (p_5(x) -> p_6(x))",
                    "\u00acp_11(Juliana)",
                    "p_6(Juliana) & \u00acp_4(Juliana)",
                    "\u00acp_4(Juliana) -> \u00acp_11(Juliana)",
                    "p_9(Juliana) -> ((p_2(Juliana) | p_10(Juliana)) & \u00ac(p_2(Juliana) & p_10(Juliana)))",
                    "all x (p_11(x) -> p_4(x))",
                    "(\u00acp_11(Juliana) | p_3(Juliana) | p_10(Juliana)) & (p_11(Juliana) | \u00acp_3(Juliana) | p_10(Juliana))",
                    "all x (p_5(x) -> p_11(x))"
                ],
                "formulas(goals)": [
                    "\u00acp_5(Juliana)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u2200x ((p_6(x) \u2227 \u00acp_4(x)) \u2192 p_5(x))",
                    "\u2200x (\u00acp_6(x) \u2228 p_4(x) \u2228 p_5(x))"
                ],
                "added_facts": [],
                "added_rules": [
                    "\u2200x (p_5(x) \u2192 p_11(x))"
                ]
            }
        }
    ]
}