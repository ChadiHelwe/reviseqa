{
    "background_story": "Shepard was a master craftsman, renowned for his exceptional dexterity with his right hand. As a skilled woodcarver, he could intricately shape and polish wood into beautiful works of art. His dextral nature allowed him to work with precision, creating detailed patterns and designs that seemed almost impossible to achieve by hand. Shepard's workshop was a marvel, filled with half-finished projects and an array of sharp tools that he wielded with ease. Despite being entirely right-handed, he had taught himself to perform tasks with his left hand as well, although he admitted that his right hand would always be his true artist. Shepard's dexterity had earned him a reputation as one of the finest craftsmen in the region, with people coming from afar to commission his unique pieces.",
    "predicates": [
        {
            "id": 0,
            "name": "is_craftsman"
        },
        {
            "id": 1,
            "name": "has_patience"
        },
        {
            "id": 2,
            "name": "use_tools"
        },
        {
            "id": 3,
            "name": "produce_masterpiece"
        },
        {
            "id": 4,
            "name": "shape_material"
        },
        {
            "id": 5,
            "name": "sets_goals"
        },
        {
            "id": 6,
            "name": "pay_attention"
        },
        {
            "id": 7,
            "name": "faces_challenge"
        },
        {
            "id": 8,
            "name": "seeks_help"
        },
        {
            "id": 9,
            "name": "is_right_handed"
        },
        {
            "id": 10,
            "name": "is_skilled"
        },
        {
            "id": 11,
            "name": "is_ambidextrous"
        },
        {
            "id": 12,
            "name": "create_art"
        },
        {
            "id": 13,
            "name": "makes_designs"
        },
        {
            "id": 14,
            "name": "work_precise"
        },
        {
            "id": 15,
            "name": "carve_wood"
        },
        {
            "id": 16,
            "name": "has_focus"
        },
        {
            "id": 17,
            "name": "stays_motivated"
        },
        {
            "id": 18,
            "name": "has_dexterity"
        },
        {
            "id": 19,
            "name": "has_talent"
        },
        {
            "id": 20,
            "name": "can_adapt"
        },
        {
            "id": 21,
            "name": "holds_chisel"
        },
        {
            "id": 22,
            "name": "polish_wood"
        },
        {
            "id": 23,
            "name": "thinks_creatively"
        },
        {
            "id": 24,
            "name": "works_diligently"
        },
        {
            "id": 25,
            "name": "has_skill"
        },
        {
            "id": 26,
            "name": "learn_quickly"
        },
        {
            "id": 27,
            "name": "sets_priorities"
        },
        {
            "id": 28,
            "name": "stays_disciplined"
        },
        {
            "id": 29,
            "name": "enjoys_work"
        },
        {
            "id": 30,
            "name": "sees_progress"
        }
    ],
    "subject_name": "Shepard",
    "subject_category": "human",
    "keyword": "dextral",
    "all_facts": [
        {
            "id": 0,
            "subject": "Shepard",
            "text": "Shepard is not a craftsman.",
            "fol": "\u00acp_0(Shepard)",
            "str_fol": "\u00acis_craftsman(Shepard)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Shepard",
            "text": "Shepard does not have patience.",
            "fol": "\u00acp_1(Shepard)",
            "str_fol": "\u00achas_patience(Shepard)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Shepard",
            "text": "Shepard cannot use tools.",
            "fol": "\u00acp_2(Shepard)",
            "str_fol": "\u00acuse_tools(Shepard)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Shepard",
            "text": "Shepard does not produce a masterpiece.",
            "fol": "\u00acp_3(Shepard)",
            "str_fol": "\u00acproduce_masterpiece(Shepard)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Shepard",
            "text": "Shepard cannot shape material.",
            "fol": "\u00acp_4(Shepard)",
            "str_fol": "\u00acshape_material(Shepard)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Shepard",
            "text": "Shepard sets goals.",
            "fol": "p_5(Shepard)",
            "str_fol": "sets_goals(Shepard)",
            "negation": false
        },
        {
            "id": 6,
            "subject": "Shepard",
            "text": "Shepard pays attention.",
            "fol": "p_6(Shepard)",
            "str_fol": "pay_attention(Shepard)",
            "negation": false
        },
        {
            "id": 7,
            "subject": "Shepard",
            "text": "Shepard faces a challenge.",
            "fol": "p_7(Shepard)",
            "str_fol": "faces_challenge(Shepard)",
            "negation": false
        },
        {
            "id": 8,
            "subject": "Shepard",
            "text": "Shepard does not seek help.",
            "fol": "\u00acp_8(Shepard)",
            "str_fol": "\u00acseeks_help(Shepard)",
            "negation": true
        },
        {
            "id": 9,
            "subject": "Shepard",
            "text": "Shepard stays motivated.",
            "fol": "p_17(Shepard)",
            "str_fol": "stays_motivated(Shepard)",
            "negation": false
        },
        {
            "id": 10,
            "subject": "Shepard",
            "text": "Shepard has focus.",
            "fol": "p_16(Shepard)",
            "str_fol": "has_focus(Shepard)",
            "negation": false
        },
        {
            "id": 11,
            "subject": "Shepard",
            "text": "Shepard does not carve wood.",
            "fol": "\u00acp_15(Shepard)",
            "str_fol": "\u00accarve_wood(Shepard)",
            "negation": true
        },
        {
            "id": 12,
            "subject": "Shepard",
            "text": "Shepard works with precision.",
            "fol": "p_14(Shepard)",
            "str_fol": "work_precise(Shepard)",
            "negation": false
        },
        {
            "id": 13,
            "subject": "Shepard",
            "text": "Shepard makes designs.",
            "fol": "p_13(Shepard)",
            "str_fol": "makes_designs(Shepard)",
            "negation": false
        },
        {
            "id": 14,
            "subject": "Shepard",
            "text": "Shepard is not ambidextrous.",
            "fol": "\u00acp_11(Shepard)",
            "str_fol": "\u00acis_ambidextrous(Shepard)",
            "negation": true
        },
        {
            "id": 15,
            "subject": "Shepard",
            "text": "Shepard is right-handed.",
            "fol": "p_9(Shepard)",
            "str_fol": "is_right_handed(Shepard)",
            "negation": false
        },
        {
            "id": 16,
            "subject": "Shepard",
            "text": "Shepard is not skilled.",
            "fol": "\u00acp_10(Shepard)",
            "str_fol": "\u00acis_skilled(Shepard)",
            "negation": true
        }
    ],
    "context_facts": [
        {
            "id": 7,
            "subject": "Shepard",
            "text": "Shepard faces a challenge.",
            "fol": "p_7(Shepard)",
            "str_fol": "faces_challenge(Shepard)",
            "negation": false
        },
        {
            "id": 8,
            "subject": "Shepard",
            "text": "Shepard does not seek help.",
            "fol": "\u00acp_8(Shepard)",
            "str_fol": "\u00acseeks_help(Shepard)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Shepard",
            "text": "Shepard sets goals.",
            "fol": "p_5(Shepard)",
            "str_fol": "sets_goals(Shepard)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Shepard",
            "text": "Shepard cannot shape material.",
            "fol": "\u00acp_4(Shepard)",
            "str_fol": "\u00acshape_material(Shepard)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Shepard",
            "text": "Shepard does not produce a masterpiece.",
            "fol": "\u00acp_3(Shepard)",
            "str_fol": "\u00acproduce_masterpiece(Shepard)",
            "negation": true
        },
        {
            "id": 6,
            "subject": "Shepard",
            "text": "Shepard pays attention.",
            "fol": "p_6(Shepard)",
            "str_fol": "pay_attention(Shepard)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Shepard",
            "text": "Shepard does not have patience.",
            "fol": "\u00acp_1(Shepard)",
            "str_fol": "\u00achas_patience(Shepard)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Shepard",
            "text": "Shepard cannot use tools.",
            "fol": "\u00acp_2(Shepard)",
            "str_fol": "\u00acuse_tools(Shepard)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Shepard",
            "text": "Shepard is not a craftsman.",
            "fol": "\u00acp_0(Shepard)",
            "str_fol": "\u00acis_craftsman(Shepard)",
            "negation": true
        }
    ],
    "context_rules": [
        {
            "id": 8,
            "text": "If Shepard faces a challenge, then he either stays motivated or seeks help, but not both.",
            "fol": "p_7(Shepard) \u2192 (p_17(Shepard) \u2295 p_8(Shepard))",
            "str_fol": "faces_challenge(Shepard) \u2192 (stays_motivated(Shepard) \u2295 seeks_help(Shepard))"
        },
        {
            "id": 7,
            "text": "If someone sets goals and stays motivated, then they have focus.",
            "fol": "\u2200x ((p_5(x) \u2227 p_17(x)) \u2192 p_16(x))",
            "str_fol": "\u2200x ((sets_goals(x) \u2227 stays_motivated(x)) \u2192 has_focus(x))"
        },
        {
            "id": 6,
            "text": "If Shepard can shape material or carve wood, then he can produce a masterpiece.",
            "fol": "(p_4(Shepard) \u2228 p_15(Shepard)) \u2192 p_3(Shepard)",
            "str_fol": "(shape_material(Shepard) \u2228 carve_wood(Shepard)) \u2192 produce_masterpiece(Shepard)"
        },
        {
            "id": 5,
            "text": "All individuals who have focus also pay attention and work with precision.",
            "fol": "\u2200x (p_16(x) \u2192 (p_6(x) \u2227 p_14(x)))",
            "str_fol": "\u2200x (has_focus(x) \u2192 (pay_attention(x) \u2227 work_precise(x)))"
        },
        {
            "id": 4,
            "text": "If Shepard works with precision, then he either makes designs or carves wood.",
            "fol": "p_14(Shepard) \u2192 (p_13(Shepard) \u2228 p_15(Shepard))",
            "str_fol": "work_precise(Shepard) \u2192 (makes_designs(Shepard) \u2228 carve_wood(Shepard))"
        },
        {
            "id": 3,
            "text": "For all people, if they have patience and make designs, then they can create art.",
            "fol": "\u2200x ((p_1(x) \u2227 p_13(x)) \u2192 p_12(x))",
            "str_fol": "\u2200x ((has_patience(x) \u2227 makes_designs(x)) \u2192 create_art(x))"
        },
        {
            "id": 2,
            "text": "All ambidextrous people can create art and use tools.",
            "fol": "\u2200x (p_11(x) \u2192 (p_12(x) \u2227 p_2(x)))",
            "str_fol": "\u2200x (is_ambidextrous(x) \u2192 (create_art(x) \u2227 use_tools(x)))"
        },
        {
            "id": 1,
            "text": "Shepard is either ambidextrous or right-handed, but given his ability to use both hands, he leans towards being ambidextrous, although he is predominantly right-handed.",
            "fol": "p_11(Shepard) \u2295 p_9(Shepard)",
            "str_fol": "is_ambidextrous(Shepard) \u2295 is_right_handed(Shepard)"
        },
        {
            "id": 0,
            "text": "If Shepard is right-handed and is skilled, then he is a craftsman.",
            "fol": "(p_9(Shepard) \u2227 p_10(Shepard)) \u2192 p_0(Shepard)",
            "str_fol": "(is_right_handed(Shepard) \u2227 is_skilled(Shepard)) \u2192 is_craftsman(Shepard)"
        }
    ],
    "context": [
        {
            "id": 7,
            "subject": "Shepard",
            "text": "Shepard faces a challenge.",
            "fol": "p_7(Shepard)",
            "str_fol": "faces_challenge(Shepard)",
            "negation": false
        },
        {
            "id": 8,
            "subject": "Shepard",
            "text": "Shepard does not seek help.",
            "fol": "\u00acp_8(Shepard)",
            "str_fol": "\u00acseeks_help(Shepard)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Shepard",
            "text": "Shepard sets goals.",
            "fol": "p_5(Shepard)",
            "str_fol": "sets_goals(Shepard)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Shepard",
            "text": "Shepard cannot shape material.",
            "fol": "\u00acp_4(Shepard)",
            "str_fol": "\u00acshape_material(Shepard)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Shepard",
            "text": "Shepard does not produce a masterpiece.",
            "fol": "\u00acp_3(Shepard)",
            "str_fol": "\u00acproduce_masterpiece(Shepard)",
            "negation": true
        },
        {
            "id": 6,
            "subject": "Shepard",
            "text": "Shepard pays attention.",
            "fol": "p_6(Shepard)",
            "str_fol": "pay_attention(Shepard)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Shepard",
            "text": "Shepard does not have patience.",
            "fol": "\u00acp_1(Shepard)",
            "str_fol": "\u00achas_patience(Shepard)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Shepard",
            "text": "Shepard cannot use tools.",
            "fol": "\u00acp_2(Shepard)",
            "str_fol": "\u00acuse_tools(Shepard)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Shepard",
            "text": "Shepard is not a craftsman.",
            "fol": "\u00acp_0(Shepard)",
            "str_fol": "\u00acis_craftsman(Shepard)",
            "negation": true
        },
        {
            "id": 8,
            "text": "If Shepard faces a challenge, then he either stays motivated or seeks help, but not both.",
            "fol": "p_7(Shepard) \u2192 (p_17(Shepard) \u2295 p_8(Shepard))",
            "str_fol": "faces_challenge(Shepard) \u2192 (stays_motivated(Shepard) \u2295 seeks_help(Shepard))"
        },
        {
            "id": 7,
            "text": "If someone sets goals and stays motivated, then they have focus.",
            "fol": "\u2200x ((p_5(x) \u2227 p_17(x)) \u2192 p_16(x))",
            "str_fol": "\u2200x ((sets_goals(x) \u2227 stays_motivated(x)) \u2192 has_focus(x))"
        },
        {
            "id": 6,
            "text": "If Shepard can shape material or carve wood, then he can produce a masterpiece.",
            "fol": "(p_4(Shepard) \u2228 p_15(Shepard)) \u2192 p_3(Shepard)",
            "str_fol": "(shape_material(Shepard) \u2228 carve_wood(Shepard)) \u2192 produce_masterpiece(Shepard)"
        },
        {
            "id": 5,
            "text": "All individuals who have focus also pay attention and work with precision.",
            "fol": "\u2200x (p_16(x) \u2192 (p_6(x) \u2227 p_14(x)))",
            "str_fol": "\u2200x (has_focus(x) \u2192 (pay_attention(x) \u2227 work_precise(x)))"
        },
        {
            "id": 4,
            "text": "If Shepard works with precision, then he either makes designs or carves wood.",
            "fol": "p_14(Shepard) \u2192 (p_13(Shepard) \u2228 p_15(Shepard))",
            "str_fol": "work_precise(Shepard) \u2192 (makes_designs(Shepard) \u2228 carve_wood(Shepard))"
        },
        {
            "id": 3,
            "text": "For all people, if they have patience and make designs, then they can create art.",
            "fol": "\u2200x ((p_1(x) \u2227 p_13(x)) \u2192 p_12(x))",
            "str_fol": "\u2200x ((has_patience(x) \u2227 makes_designs(x)) \u2192 create_art(x))"
        },
        {
            "id": 2,
            "text": "All ambidextrous people can create art and use tools.",
            "fol": "\u2200x (p_11(x) \u2192 (p_12(x) \u2227 p_2(x)))",
            "str_fol": "\u2200x (is_ambidextrous(x) \u2192 (create_art(x) \u2227 use_tools(x)))"
        },
        {
            "id": 1,
            "text": "Shepard is either ambidextrous or right-handed, but given his ability to use both hands, he leans towards being ambidextrous, although he is predominantly right-handed.",
            "fol": "p_11(Shepard) \u2295 p_9(Shepard)",
            "str_fol": "is_ambidextrous(Shepard) \u2295 is_right_handed(Shepard)"
        },
        {
            "id": 0,
            "text": "If Shepard is right-handed and is skilled, then he is a craftsman.",
            "fol": "(p_9(Shepard) \u2227 p_10(Shepard)) \u2192 p_0(Shepard)",
            "str_fol": "(is_right_handed(Shepard) \u2227 is_skilled(Shepard)) \u2192 is_craftsman(Shepard)"
        }
    ],
    "context_fol": "p_7(Shepard)\n\u00acp_8(Shepard)\np_5(Shepard)\n\u00acp_4(Shepard)\n\u00acp_3(Shepard)\np_6(Shepard)\n\u00acp_1(Shepard)\n\u00acp_2(Shepard)\n\u00acp_0(Shepard)\np_7(Shepard) \u2192 (p_17(Shepard) \u2295 p_8(Shepard))\n\u2200x ((p_5(x) \u2227 p_17(x)) \u2192 p_16(x))\n(p_4(Shepard) \u2228 p_15(Shepard)) \u2192 p_3(Shepard)\n\u2200x (p_16(x) \u2192 (p_6(x) \u2227 p_14(x)))\np_14(Shepard) \u2192 (p_13(Shepard) \u2228 p_15(Shepard))\n\u2200x ((p_1(x) \u2227 p_13(x)) \u2192 p_12(x))\n\u2200x (p_11(x) \u2192 (p_12(x) \u2227 p_2(x)))\np_11(Shepard) \u2295 p_9(Shepard)\n(p_9(Shepard) \u2227 p_10(Shepard)) \u2192 p_0(Shepard)",
    "conclusion": {
        "id": 16,
        "subject": "Shepard",
        "text": "Shepard is not skilled.",
        "fol": "\u00acp_10(Shepard)",
        "str_fol": "\u00acis_skilled(Shepard)",
        "negation": true
    },
    "initial_answer": "True",
    "initial_goal": "\u00acp_10(Shepard)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 7,
                    "subject": "Shepard",
                    "text": "Shepard faces a challenge.",
                    "fol": "p_7(Shepard)",
                    "str_fol": "faces_challenge(Shepard)",
                    "negation": false
                },
                {
                    "id": 8,
                    "subject": "Shepard",
                    "text": "Shepard does not seek help.",
                    "fol": "\u00acp_8(Shepard)",
                    "str_fol": "\u00acseeks_help(Shepard)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 8,
                    "text": "If Shepard faces a challenge, then he either stays motivated or seeks help, but not both.",
                    "fol": "p_7(Shepard) \u2192 (p_17(Shepard) \u2295 p_8(Shepard))",
                    "str_fol": "faces_challenge(Shepard) \u2192 (stays_motivated(Shepard) \u2295 seeks_help(Shepard))"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Shepard",
                "text": "Shepard stays motivated.",
                "fol": "p_17(Shepard)",
                "str_fol": "stays_motivated(Shepard)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 5,
                    "subject": "Shepard",
                    "text": "Shepard sets goals.",
                    "fol": "p_5(Shepard)",
                    "str_fol": "sets_goals(Shepard)",
                    "negation": false
                },
                {
                    "id": 9,
                    "subject": "Shepard",
                    "text": "Shepard stays motivated.",
                    "fol": "p_17(Shepard)",
                    "str_fol": "stays_motivated(Shepard)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 7,
                    "text": "If someone sets goals and stays motivated, then they have focus.",
                    "fol": "\u2200x ((p_5(x) \u2227 p_17(x)) \u2192 p_16(x))",
                    "str_fol": "\u2200x ((sets_goals(x) \u2227 stays_motivated(x)) \u2192 has_focus(x))"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Shepard",
                "text": "Shepard has focus.",
                "fol": "p_16(Shepard)",
                "str_fol": "has_focus(Shepard)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 4,
                    "subject": "Shepard",
                    "text": "Shepard cannot shape material.",
                    "fol": "\u00acp_4(Shepard)",
                    "str_fol": "\u00acshape_material(Shepard)",
                    "negation": true
                },
                {
                    "id": 3,
                    "subject": "Shepard",
                    "text": "Shepard does not produce a masterpiece.",
                    "fol": "\u00acp_3(Shepard)",
                    "str_fol": "\u00acproduce_masterpiece(Shepard)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 6,
                    "text": "If Shepard can shape material or carve wood, then he can produce a masterpiece.",
                    "fol": "(p_4(Shepard) \u2228 p_15(Shepard)) \u2192 p_3(Shepard)",
                    "str_fol": "(shape_material(Shepard) \u2228 carve_wood(Shepard)) \u2192 produce_masterpiece(Shepard)"
                }
            ],
            "conclusion": {
                "id": 11,
                "subject": "Shepard",
                "text": "Shepard does not carve wood.",
                "fol": "\u00acp_15(Shepard)",
                "str_fol": "\u00accarve_wood(Shepard)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 10,
                    "subject": "Shepard",
                    "text": "Shepard has focus.",
                    "fol": "p_16(Shepard)",
                    "str_fol": "has_focus(Shepard)",
                    "negation": false
                },
                {
                    "id": 6,
                    "subject": "Shepard",
                    "text": "Shepard pays attention.",
                    "fol": "p_6(Shepard)",
                    "str_fol": "pay_attention(Shepard)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "All individuals who have focus also pay attention and work with precision.",
                    "fol": "\u2200x (p_16(x) \u2192 (p_6(x) \u2227 p_14(x)))",
                    "str_fol": "\u2200x (has_focus(x) \u2192 (pay_attention(x) \u2227 work_precise(x)))"
                }
            ],
            "conclusion": {
                "id": 12,
                "subject": "Shepard",
                "text": "Shepard works with precision.",
                "fol": "p_14(Shepard)",
                "str_fol": "work_precise(Shepard)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 12,
                    "subject": "Shepard",
                    "text": "Shepard works with precision.",
                    "fol": "p_14(Shepard)",
                    "str_fol": "work_precise(Shepard)",
                    "negation": false
                },
                {
                    "id": 11,
                    "subject": "Shepard",
                    "text": "Shepard does not carve wood.",
                    "fol": "\u00acp_15(Shepard)",
                    "str_fol": "\u00accarve_wood(Shepard)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "If Shepard works with precision, then he either makes designs or carves wood.",
                    "fol": "p_14(Shepard) \u2192 (p_13(Shepard) \u2228 p_15(Shepard))",
                    "str_fol": "work_precise(Shepard) \u2192 (makes_designs(Shepard) \u2228 carve_wood(Shepard))"
                }
            ],
            "conclusion": {
                "id": 13,
                "subject": "Shepard",
                "text": "Shepard makes designs.",
                "fol": "p_13(Shepard)",
                "str_fol": "makes_designs(Shepard)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 1,
                    "subject": "Shepard",
                    "text": "Shepard does not have patience.",
                    "fol": "\u00acp_1(Shepard)",
                    "str_fol": "\u00achas_patience(Shepard)",
                    "negation": true
                },
                {
                    "id": 13,
                    "subject": "Shepard",
                    "text": "Shepard makes designs.",
                    "fol": "p_13(Shepard)",
                    "str_fol": "makes_designs(Shepard)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "For all people, if they have patience and make designs, then they can create art.",
                    "fol": "\u2200x ((p_1(x) \u2227 p_13(x)) \u2192 p_12(x))",
                    "str_fol": "\u2200x ((has_patience(x) \u2227 makes_designs(x)) \u2192 create_art(x))"
                }
            ],
            "conclusion": null
        },
        {
            "facts": [
                {
                    "id": 2,
                    "subject": "Shepard",
                    "text": "Shepard cannot use tools.",
                    "fol": "\u00acp_2(Shepard)",
                    "str_fol": "\u00acuse_tools(Shepard)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "All ambidextrous people can create art and use tools.",
                    "fol": "\u2200x (p_11(x) \u2192 (p_12(x) \u2227 p_2(x)))",
                    "str_fol": "\u2200x (is_ambidextrous(x) \u2192 (create_art(x) \u2227 use_tools(x)))"
                }
            ],
            "conclusion": {
                "id": 14,
                "subject": "Shepard",
                "text": "Shepard is not ambidextrous.",
                "fol": "\u00acp_11(Shepard)",
                "str_fol": "\u00acis_ambidextrous(Shepard)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 14,
                    "subject": "Shepard",
                    "text": "Shepard is not ambidextrous.",
                    "fol": "\u00acp_11(Shepard)",
                    "str_fol": "\u00acis_ambidextrous(Shepard)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "Shepard is either ambidextrous or right-handed, but given his ability to use both hands, he leans towards being ambidextrous, although he is predominantly right-handed.",
                    "fol": "p_11(Shepard) \u2295 p_9(Shepard)",
                    "str_fol": "is_ambidextrous(Shepard) \u2295 is_right_handed(Shepard)"
                }
            ],
            "conclusion": {
                "id": 15,
                "subject": "Shepard",
                "text": "Shepard is right-handed.",
                "fol": "p_9(Shepard)",
                "str_fol": "is_right_handed(Shepard)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 15,
                    "subject": "Shepard",
                    "text": "Shepard is right-handed.",
                    "fol": "p_9(Shepard)",
                    "str_fol": "is_right_handed(Shepard)",
                    "negation": false
                },
                {
                    "id": 0,
                    "subject": "Shepard",
                    "text": "Shepard is not a craftsman.",
                    "fol": "\u00acp_0(Shepard)",
                    "str_fol": "\u00acis_craftsman(Shepard)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "If Shepard is right-handed and is skilled, then he is a craftsman.",
                    "fol": "(p_9(Shepard) \u2227 p_10(Shepard)) \u2192 p_0(Shepard)",
                    "str_fol": "(is_right_handed(Shepard) \u2227 is_skilled(Shepard)) \u2192 is_craftsman(Shepard)"
                }
            ],
            "conclusion": {
                "id": 16,
                "subject": "Shepard",
                "text": "Shepard is not skilled.",
                "fol": "\u00acp_10(Shepard)",
                "str_fol": "\u00acis_skilled(Shepard)",
                "negation": true
            }
        }
    ],
    "proof_trace": "7 (all x (p_11(x) -> p_12(x) & p_2(x))).  [assumption].\n8 -(p_11(Shepard) <-> p_9(Shepard)).  [assumption].\n9 p_9(Shepard) & p_10(Shepard) -> p_0(Shepard).  [assumption].\n10 -p_10(Shepard).  [goal].\n21 -p_11(x) | p_2(x).  [clausify(7)].\n22 -p_2(Shepard).  [assumption].\n23 -p_9(Shepard) | -p_10(Shepard) | p_0(Shepard).  [clausify(9)].\n24 -p_0(Shepard).  [assumption].\n29 p_11(Shepard) | p_9(Shepard).  [clausify(8)].\n32 -p_11(Shepard).  [resolve(21,b,22,a)].\n33 -p_9(Shepard) | -p_10(Shepard).  [resolve(23,c,24,a)].\n34 p_10(Shepard).  [deny(10)].\n39 -p_9(Shepard).  [resolve(33,b,34,a)].\n41 p_9(Shepard).  [resolve(32,a,29,a)].\n42 $F.  [resolve(39,a,41,a)].",
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_7(Shepard)\n\u00acp_8(Shepard)\np_5(Shepard)\n\u00acp_4(Shepard)\n\u00acp_3(Shepard)\np_6(Shepard)\n\u00acp_1(Shepard)\np_2(Shepard)\n\u00acp_0(Shepard)\np_7(Shepard) \u2192 (p_17(Shepard) \u2295 p_8(Shepard))\n\u2200x ((p_5(x) \u2227 p_17(x)) \u2192 p_16(x))\n(p_4(Shepard) \u2228 p_15(Shepard)) \u2192 p_3(Shepard)\n\u2200x (p_16(x) \u2192 (p_6(x) \u2227 p_14(x)))\np_14(Shepard) \u2192 (p_13(Shepard) \u2228 p_15(Shepard))\n\u2200x ((p_1(x) \u2227 p_13(x)) \u2192 p_12(x))\n\u2200x (p_11(x) \u2192 (p_12(x) \u2227 p_2(x)))\np_11(Shepard) \u2295 p_9(Shepard)\n(p_9(Shepard) \u2227 p_10(Shepard)) \u2192 p_0(Shepard)\np_5(Shepard) \u2192 p_10(Shepard)",
            "Initial Goal": "\u00acp_10(Shepard)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_7(Shepard)",
                    "-p_8(Shepard)",
                    "p_5(Shepard)",
                    "-p_4(Shepard)",
                    "-p_3(Shepard)",
                    "p_6(Shepard)",
                    "-p_1(Shepard)",
                    "p_2(Shepard)",
                    "-p_0(Shepard)",
                    "p_7(Shepard) -> (-(p_17(Shepard) <-> p_8(Shepard)))",
                    "all x ((p_5(x) & p_17(x)) -> p_16(x))",
                    "(p_4(Shepard) | p_15(Shepard)) -> p_3(Shepard)",
                    "all x (p_16(x) -> (p_6(x) & p_14(x)))",
                    "p_14(Shepard) -> (p_13(Shepard) | p_15(Shepard))",
                    "all x ((p_1(x) & p_13(x)) -> p_12(x))",
                    "all x (p_11(x) -> (p_12(x) & p_2(x)))",
                    "-(p_11(Shepard) <-> p_9(Shepard))",
                    "(p_9(Shepard) & p_10(Shepard)) -> p_0(Shepard)",
                    "p_5(Shepard) -> p_10(Shepard)"
                ],
                "formulas(goals)": [
                    "p_10(Shepard)"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "\u00acp_2(Shepard)"
                ],
                "removed_rules": [],
                "added_facts": [
                    "p_2(Shepard)"
                ],
                "added_rules": [
                    "p_5(Shepard) \u2192 p_10(Shepard)"
                ]
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_7(Shepard)\n\u00acp_8(Shepard)\np_5(Shepard)\n\u00acp_4(Shepard)\n\u00acp_3(Shepard)\np_6(Shepard)\n\u00acp_1(Shepard)\np_2(Shepard)\n\u00acp_0(Shepard)\np_7(Shepard) \u2192 (p_17(Shepard) \u2295 p_8(Shepard))\n\u2200x ((p_5(x) \u2227 p_17(x)) \u2192 p_16(x))\n(p_4(Shepard) \u2228 p_15(Shepard)) \u2192 p_3(Shepard)\n\u2200x (p_16(x) \u2192 (p_6(x) \u2227 p_14(x)))\np_14(Shepard) \u2192 (p_13(Shepard) \u2228 p_15(Shepard))\n\u2200x ((p_1(x) \u2227 p_13(x)) \u2192 p_12(x))\n\u2200x (p_11(x) \u2192 (p_12(x) \u2227 p_2(x)))\np_11(Shepard) \u2295 p_9(Shepard)\n(p_9(Shepard) \u2227 p_10(Shepard)) \u2192 p_0(Shepard)\np_5(Shepard) \u2192 \u00acp_10(Shepard)",
            "Initial Goal": "\u00acp_10(Shepard)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_7(Shepard)",
                    "-p_8(Shepard)",
                    "p_5(Shepard)",
                    "-p_4(Shepard)",
                    "-p_3(Shepard)",
                    "p_6(Shepard)",
                    "-p_1(Shepard)",
                    "p_2(Shepard)",
                    "-p_0(Shepard)",
                    "p_7(Shepard) -> (p_17(Shepard) | p_8(Shepard)) & (-p_17(Shepard) | -p_8(Shepard))",
                    "all x ((p_5(x) & p_17(x)) -> p_16(x))",
                    "(p_4(Shepard) | p_15(Shepard)) -> p_3(Shepard)",
                    "all x (p_16(x) -> (p_6(x) & p_14(x)))",
                    "p_14(Shepard) -> (p_13(Shepard) | p_15(Shepard))",
                    "all x ((p_1(x) & p_13(x)) -> p_12(x))",
                    "all x (p_11(x) -> (p_12(x) & p_2(x)))",
                    "p_11(Shepard) | p_9(Shepard)",
                    "-p_11(Shepard) | -p_9(Shepard)",
                    "(p_9(Shepard) & p_10(Shepard)) -> p_0(Shepard)",
                    "p_5(Shepard) -> -p_10(Shepard)"
                ],
                "formulas(goals)": [
                    "-p_10(Shepard)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_5(Shepard) \u2192 p_10(Shepard)"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_5(Shepard) \u2192 \u00acp_10(Shepard)"
                ]
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_7(Shepard)\n\u00acp_8(Shepard)\np_5(Shepard)\n\u00acp_4(Shepard)\n\u00acp_3(Shepard)\np_6(Shepard)\n\u00acp_1(Shepard)\np_2(Shepard)\n\u00acp_0(Shepard)\np_7(Shepard) \u2192 (p_17(Shepard) \u2295 p_8(Shepard))\n\u2200x ((p_5(x) \u2227 p_17(x)) \u2192 p_16(x))\n(p_4(Shepard) \u2228 p_15(Shepard)) \u2192 p_3(Shepard)\n\u2200x (p_16(x) \u2192 (p_6(x) \u2227 p_14(x)))\np_14(Shepard) \u2192 (p_13(Shepard) \u2228 p_15(Shepard))\n\u2200x ((p_1(x) \u2227 p_13(x)) \u2192 p_12(x))\n\u2200x (p_11(x) \u2192 (p_12(x) \u2227 p_2(x)))\np_11(Shepard) \u2295 p_9(Shepard)\n(p_9(Shepard) \u2227 p_10(Shepard)) \u2192 p_0(Shepard)\np_5(Shepard) \u2192 \u00acp_10(Shepard)\np_5(Shepard) \u2228 \u00acp_5(Shepard)\n\u00acp_5(Shepard) \u2228 \u00acp_10(Shepard)\n\u00acp_10(Shepard)\np_17(Shepard)\np_16(Shepard)\np_14(Shepard)\np_13(Shepard) \u2228 p_15(Shepard)",
            "Initial Goal": "\u00acp_10(Shepard)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_7(Shepard)",
                    "-p_8(Shepard)",
                    "p_5(Shepard)",
                    "-p_4(Shepard)",
                    "-p_3(Shepard)",
                    "p_6(Shepard)",
                    "-p_1(Shepard)",
                    "p_2(Shepard)",
                    "-p_0(Shepard)",
                    "p_7(Shepard) -> (-(p_17(Shepard) <-> p_8(Shepard)))",
                    "all x ((p_5(x) & p_17(x)) -> p_16(x))",
                    "(p_4(Shepard) | p_15(Shepard)) -> p_3(Shepard)",
                    "all x (p_16(x) -> (p_6(x) & p_14(x)))",
                    "p_14(Shepard) -> (p_13(Shepard) | p_15(Shepard))",
                    "all x ((p_1(x) & p_13(x)) -> p_12(x))",
                    "all x (p_11(x) -> (p_12(x) & p_2(x)))",
                    "-(p_11(Shepard) <-> p_9(Shepard))",
                    "(p_9(Shepard) & p_10(Shepard)) -> p_0(Shepard)",
                    "p_5(Shepard) -> -p_10(Shepard)",
                    "p_5(Shepard) | -p_5(Shepard)",
                    "-p_5(Shepard) | -p_10(Shepard)",
                    "-p_10(Shepard)",
                    "p_17(Shepard)",
                    "p_16(Shepard)",
                    "p_14(Shepard)",
                    "p_13(Shepard) | p_15(Shepard)"
                ],
                "formulas(goals)": [
                    "-p_10(Shepard)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "\u00acp_10(Shepard)",
                    "p_17(Shepard)",
                    "p_16(Shepard)",
                    "p_14(Shepard)"
                ],
                "added_rules": [
                    "p_5(Shepard) \u2228 \u00acp_5(Shepard)",
                    "\u00acp_5(Shepard) \u2228 \u00acp_10(Shepard)",
                    "p_13(Shepard) \u2228 p_15(Shepard)"
                ]
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_7(Shepard)\n\u00acp_8(Shepard)\np_5(Shepard)\n\u00acp_4(Shepard)\n\u00acp_3(Shepard)\np_6(Shepard)\n\u00acp_1(Shepard)\np_2(Shepard)\n\u00acp_0(Shepard)\np_7(Shepard) \u2192 (p_17(Shepard) \u2295 p_8(Shepard))\n\u2200x ((p_5(x) \u2227 p_17(x)) \u2192 p_16(x))\n(p_4(Shepard) \u2228 p_15(Shepard)) \u2192 p_3(Shepard)\n\u2200x (p_16(x) \u2192 (p_6(x) \u2227 p_14(x)))\np_14(Shepard) \u2192 (p_13(Shepard) \u2228 p_15(Shepard))\n\u2200x ((p_1(x) \u2227 p_13(x)) \u2192 p_12(x))\n\u2200x (p_11(x) \u2192 (p_12(x) \u2227 p_2(x)))\np_11(Shepard) \u2295 p_9(Shepard)\n(p_9(Shepard) \u2227 p_10(Shepard)) \u2192 p_0(Shepard)\np_5(Shepard) \u2228 \u00acp_5(Shepard)\np_17(Shepard)\np_16(Shepard)\np_14(Shepard)\np_13(Shepard) \u2228 p_15(Shepard)\np_17(Shepard) \u2192 p_10(Shepard)",
            "Initial Goal": "\u00acp_10(Shepard)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_7(Shepard)",
                    "-p_8(Shepard)",
                    "p_5(Shepard)",
                    "-p_4(Shepard)",
                    "-p_3(Shepard)",
                    "p_6(Shepard)",
                    "-p_1(Shepard)",
                    "p_2(Shepard)",
                    "-p_0(Shepard)",
                    "p_7(Shepard) -> (-(p_17(Shepard) <-> p_8(Shepard)))",
                    "all x ((p_5(x) & p_17(x)) -> p_16(x))",
                    "(p_4(Shepard) | p_15(Shepard)) -> p_3(Shepard)",
                    "all x (p_16(x) -> (p_6(x) & p_14(x)))",
                    "p_14(Shepard) -> (p_13(Shepard) | p_15(Shepard))",
                    "all x ((p_1(x) & p_13(x)) -> p_12(x))",
                    "all x (p_11(x) -> (p_12(x) & p_2(x)))",
                    "-(p_11(Shepard) <-> p_9(Shepard))",
                    "(p_9(Shepard) & p_10(Shepard)) -> p_0(Shepard)",
                    "p_5(Shepard) | -p_5(Shepard)",
                    "p_17(Shepard)",
                    "p_16(Shepard)",
                    "p_14(Shepard)",
                    "p_13(Shepard) | p_15(Shepard)",
                    "p_17(Shepard) -> p_10(Shepard)"
                ],
                "formulas(goals)": [
                    "-(-p_10(Shepard))"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "\u00acp_10(Shepard)"
                ],
                "removed_rules": [
                    "\u00acp_5(Shepard) \u2228 \u00acp_10(Shepard)"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_17(Shepard) \u2192 p_10(Shepard)"
                ]
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_7(Shepard)\n\u00acp_8(Shepard)\np_5(Shepard)\n\u00acp_4(Shepard)\n\u00acp_3(Shepard)\np_6(Shepard)\n\u00acp_1(Shepard)\np_2(Shepard)\n\u00acp_0(Shepard)\np_7(Shepard) \u2192 (p_17(Shepard) \u2295 p_8(Shepard))\n\u2200x ((p_5(x) \u2227 p_17(x)) \u2192 p_16(x))\n(p_4(Shepard) \u2228 p_15(Shepard)) \u2192 p_3(Shepard)\n\u2200x (p_16(x) \u2192 (p_6(x) \u2227 p_14(x)))\np_14(Shepard) \u2192 (p_13(Shepard) \u2228 p_15(Shepard))\n\u2200x ((p_1(x) \u2227 p_13(x)) \u2192 p_12(x))\n\u2200x (p_11(x) \u2192 (p_12(x) \u2227 p_2(x)))\np_11(Shepard) \u2295 p_9(Shepard)\n(p_9(Shepard) \u2227 p_10(Shepard)) \u2192 p_0(Shepard)\np_5(Shepard) \u2228 \u00acp_5(Shepard)\np_17(Shepard)\np_16(Shepard)\np_14(Shepard)\np_13(Shepard) \u2228 p_15(Shepard)\n(p_5(Shepard) \u2227 p_17(Shepard)) \u2192 \u00acp_10(Shepard)",
            "Initial Goal": "\u00acp_10(Shepard)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_7(Shepard)",
                    "-p_8(Shepard)",
                    "p_5(Shepard)",
                    "-p_4(Shepard)",
                    "-p_3(Shepard)",
                    "p_6(Shepard)",
                    "-p_1(Shepard)",
                    "p_2(Shepard)",
                    "-p_0(Shepard)",
                    "p_7(Shepard) -> (-(p_17(Shepard) <-> p_8(Shepard)))",
                    "all x ((p_5(x) & p_17(x)) -> p_16(x))",
                    "(p_4(Shepard) | p_15(Shepard)) -> p_3(Shepard)",
                    "all x (p_16(x) -> (p_6(x) & p_14(x)))",
                    "p_14(Shepard) -> (p_13(Shepard) | p_15(Shepard))",
                    "all x ((p_1(x) & p_13(x)) -> p_12(x))",
                    "all x (p_11(x) -> (p_12(x) & p_2(x)))",
                    "-(p_11(Shepard) <-> p_9(Shepard))",
                    "(p_9(Shepard) & p_10(Shepard)) -> p_0(Shepard)",
                    "p_5(Shepard) | -p_5(Shepard)",
                    "p_17(Shepard)",
                    "p_16(Shepard)",
                    "p_14(Shepard)",
                    "p_13(Shepard) | p_15(Shepard)",
                    "(p_5(Shepard) & p_17(Shepard)) -> -p_10(Shepard)"
                ],
                "formulas(goals)": [
                    "-p_10(Shepard)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_17(Shepard) \u2192 p_10(Shepard)"
                ],
                "added_facts": [],
                "added_rules": [
                    "(p_5(Shepard) \u2227 p_17(Shepard)) \u2192 \u00acp_10(Shepard)"
                ]
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_7(Shepard)\n\u00acp_8(Shepard)\np_5(Shepard)\n\u00acp_4(Shepard)\n\u00acp_3(Shepard)\np_6(Shepard)\n\u00acp_1(Shepard)\np_2(Shepard)\n\u00acp_0(Shepard)\np_7(Shepard) \u2192 (p_17(Shepard) \u2295 p_8(Shepard))\n\u2200x ((p_5(x) \u2227 p_17(x)) \u2192 p_16(x))\n(p_4(Shepard) \u2228 p_15(Shepard)) \u2192 p_3(Shepard)\n\u2200x (p_16(x) \u2192 (p_6(x) \u2227 p_14(x)))\np_14(Shepard) \u2192 (p_13(Shepard) \u2228 p_15(Shepard))\n\u2200x ((p_1(x) \u2227 p_13(x)) \u2192 p_12(x))\n\u2200x (p_11(x) \u2192 (p_12(x) \u2227 p_2(x)))\np_11(Shepard) \u2295 p_9(Shepard)\n(p_9(Shepard) \u2227 p_10(Shepard)) \u2192 p_0(Shepard)\np_5(Shepard) \u2228 \u00acp_5(Shepard)\np_17(Shepard)\np_16(Shepard)\np_14(Shepard)\np_13(Shepard) \u2228 p_15(Shepard)\n(p_5(Shepard) \u2227 p_17(Shepard)) \u2192 \u00acp_10(Shepard)\np_5(Shepard) \u2227 p_17(Shepard)\np_6(Shepard) \u2227 p_14(Shepard)\np_10(Shepard) \u2228 \u00acp_10(Shepard)\np_5(Shepard) \u2192 (p_17(Shepard) \u2192 \u00acp_10(Shepard))",
            "Initial Goal": "\u00acp_10(Shepard)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_7(Shepard)",
                    "-p_8(Shepard)",
                    "p_5(Shepard)",
                    "-p_4(Shepard)",
                    "-p_3(Shepard)",
                    "p_6(Shepard)",
                    "-p_1(Shepard)",
                    "p_2(Shepard)",
                    "-p_0(Shepard)",
                    "p_7(Shepard) -> (-(p_17(Shepard) <-> p_8(Shepard)))",
                    "(all x ((p_5(x) & p_17(x)) -> p_16(x)))",
                    "(p_4(Shepard) | p_15(Shepard)) -> p_3(Shepard)",
                    "(all x (p_16(x) -> (p_6(x) & p_14(x))))",
                    "p_14(Shepard) -> (p_13(Shepard) | p_15(Shepard))",
                    "(all x ((p_1(x) & p_13(x)) -> p_12(x)))",
                    "(all x (p_11(x) -> (p_12(x) & p_2(x))))",
                    "-(p_11(Shepard) <-> p_9(Shepard))",
                    "(p_9(Shepard) & p_10(Shepard)) -> p_0(Shepard)",
                    "p_5(Shepard) | -p_5(Shepard)",
                    "p_17(Shepard)",
                    "p_16(Shepard)",
                    "p_14(Shepard)",
                    "p_13(Shepard) | p_15(Shepard)",
                    "(p_5(Shepard) & p_17(Shepard)) -> -p_10(Shepard)",
                    "p_5(Shepard) & p_17(Shepard)",
                    "p_6(Shepard) & p_14(Shepard)",
                    "p_10(Shepard) | -p_10(Shepard)",
                    "p_5(Shepard) -> (p_17(Shepard) -> -p_10(Shepard))"
                ],
                "formulas(goals)": [
                    "-p_10(Shepard)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_5(Shepard) \u2227 p_17(Shepard)",
                    "p_6(Shepard) \u2227 p_14(Shepard)",
                    "p_10(Shepard) \u2228 \u00acp_10(Shepard)"
                ],
                "added_rules": [
                    "p_5(Shepard) \u2192 (p_17(Shepard) \u2192 \u00acp_10(Shepard))"
                ]
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_7(Shepard)\n\u00acp_8(Shepard)\np_5(Shepard)\n\u00acp_4(Shepard)\n\u00acp_3(Shepard)\np_6(Shepard)\n\u00acp_1(Shepard)\np_2(Shepard)\n\u00acp_0(Shepard)\np_7(Shepard) \u2192 (p_17(Shepard) \u2295 p_8(Shepard))\n\u2200x ((p_5(x) \u2227 p_17(x)) \u2192 p_16(x))\n(p_4(Shepard) \u2228 p_15(Shepard)) \u2192 p_3(Shepard)\n\u2200x (p_16(x) \u2192 (p_6(x) \u2227 p_14(x)))\np_14(Shepard) \u2192 (p_13(Shepard) \u2228 p_15(Shepard))\n\u2200x ((p_1(x) \u2227 p_13(x)) \u2192 p_12(x))\n\u2200x (p_11(x) \u2192 (p_12(x) \u2227 p_2(x)))\np_11(Shepard) \u2295 p_9(Shepard)\n(p_9(Shepard) \u2227 p_10(Shepard)) \u2192 p_0(Shepard)\np_5(Shepard) \u2228 \u00acp_5(Shepard)\np_17(Shepard)\np_16(Shepard)\np_14(Shepard)\np_13(Shepard) \u2228 p_15(Shepard)\np_5(Shepard) \u2227 p_17(Shepard)\np_6(Shepard) \u2227 p_14(Shepard)\np_10(Shepard) \u2228 \u00acp_10(Shepard)\n(p_5(Shepard) \u2227 p_17(Shepard)) \u2192 p_10(Shepard)",
            "Initial Goal": "\u00acp_10(Shepard)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_7(Shepard)",
                    "-p_8(Shepard)",
                    "p_5(Shepard)",
                    "-p_4(Shepard)",
                    "-p_3(Shepard)",
                    "p_6(Shepard)",
                    "-p_1(Shepard)",
                    "p_2(Shepard)",
                    "-p_0(Shepard)",
                    "p_7(Shepard) -> (-(p_17(Shepard) <-> p_8(Shepard)))",
                    "all x ((p_5(x) & p_17(x)) -> p_16(x))",
                    "(p_4(Shepard) | p_15(Shepard)) -> p_3(Shepard)",
                    "all x (p_16(x) -> (p_6(x) & p_14(x)))",
                    "p_14(Shepard) -> (p_13(Shepard) | p_15(Shepard))",
                    "all x ((p_1(x) & p_13(x)) -> p_12(x))",
                    "all x (p_11(x) -> (p_12(x) & p_2(x)))",
                    "-(p_11(Shepard) <-> p_9(Shepard))",
                    "(p_9(Shepard) & p_10(Shepard)) -> p_0(Shepard)",
                    "p_5(Shepard) | -p_5(Shepard)",
                    "p_17(Shepard)",
                    "p_16(Shepard)",
                    "p_14(Shepard)",
                    "p_13(Shepard) | p_15(Shepard)",
                    "p_5(Shepard) & p_17(Shepard)",
                    "p_6(Shepard) & p_14(Shepard)",
                    "p_10(Shepard) | -p_10(Shepard)",
                    "(p_5(Shepard) & p_17(Shepard)) -> p_10(Shepard)"
                ],
                "formulas(goals)": [
                    "-(-p_10(Shepard))"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "(p_5(Shepard) \u2227 p_17(Shepard)) \u2192 \u00acp_10(Shepard)",
                    "p_5(Shepard) \u2192 (p_17(Shepard) \u2192 \u00acp_10(Shepard))"
                ],
                "added_facts": [],
                "added_rules": [
                    "(p_5(Shepard) \u2227 p_17(Shepard)) \u2192 p_10(Shepard)"
                ]
            }
        }
    ]
}