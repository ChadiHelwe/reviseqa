{
    "background_story": "Penny was a gentle soul with a green thumb. She spent most of her days tending to her garden, nurturing every seedling with love and care. As the seasons changed, her garden transformed into a vibrant tapestry of colors, with flowers blooming in every corner. Penny's passion for gardening was contagious, and soon her community garden became a hub for local botanical enthusiasts. Under her guidance, the garden flourished, and people would come from all around to marvel at the flowering beauty. Just like her garden, Penny's own life was a testament to the power of care and dedication, as she blossomed into a confident and compassionate leader, spreading joy and serenity to all those around her.",
    "predicates": [
        {
            "id": 0,
            "name": "love_nature"
        },
        {
            "id": 1,
            "name": "nurture_pet"
        },
        {
            "id": 2,
            "name": "pursue_art"
        },
        {
            "id": 3,
            "name": "smile"
        },
        {
            "id": 4,
            "name": "tend_to_garden"
        },
        {
            "id": 5,
            "name": "see_beauty_flourish"
        },
        {
            "id": 6,
            "name": "grow_plants"
        },
        {
            "id": 7,
            "name": "care_for_animals"
        },
        {
            "id": 8,
            "name": "is_nurturing"
        },
        {
            "id": 9,
            "name": "spread_joy"
        },
        {
            "id": 10,
            "name": "has_passion"
        },
        {
            "id": 11,
            "name": "is_happy"
        },
        {
            "id": 12,
            "name": "enjoys_outdoors"
        },
        {
            "id": 13,
            "name": "values_conservation"
        },
        {
            "id": 14,
            "name": "enjoy_outdoors"
        },
        {
            "id": 15,
            "name": "cultivate_life"
        },
        {
            "id": 16,
            "name": "own_pet"
        },
        {
            "id": 17,
            "name": "volunteer_wildlife"
        },
        {
            "id": 18,
            "name": "feed_kids"
        },
        {
            "id": 19,
            "name": "soothe_babies"
        },
        {
            "id": 20,
            "name": "is_empathetic"
        },
        {
            "id": 21,
            "name": "is_altruistic"
        },
        {
            "id": 22,
            "name": "is_optimistic"
        },
        {
            "id": 23,
            "name": "is_outgoing"
        },
        {
            "id": 24,
            "name": "finds_meaning"
        },
        {
            "id": 25,
            "name": "helps_others"
        }
    ],
    "subject_name": "Penny",
    "subject_category": "human",
    "keyword": "flowering",
    "all_facts": [
        {
            "id": 0,
            "subject": "Penny",
            "text": "Penny loves nature.",
            "fol": "p_0(Penny)",
            "str_fol": "love_nature(Penny)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Penny",
            "text": "Penny does not nurture a pet.",
            "fol": "\u00acp_1(Penny)",
            "str_fol": "\u00acnurture_pet(Penny)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Penny",
            "text": "Penny does not pursue art.",
            "fol": "\u00acp_2(Penny)",
            "str_fol": "\u00acpursue_art(Penny)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Penny",
            "text": "Penny does not smile.",
            "fol": "\u00acp_3(Penny)",
            "str_fol": "\u00acsmile(Penny)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Penny",
            "text": "Penny is not happy.",
            "fol": "\u00acp_11(Penny)",
            "str_fol": "\u00acis_happy(Penny)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Penny",
            "text": "Penny has passion.",
            "fol": "p_10(Penny)",
            "str_fol": "has_passion(Penny)",
            "negation": false
        },
        {
            "id": 6,
            "subject": "Penny",
            "text": "Penny does not spread joy to those around her.",
            "fol": "\u00acp_9(Penny)",
            "str_fol": "\u00acspread_joy(Penny)",
            "negation": true
        },
        {
            "id": 7,
            "subject": "Penny",
            "text": "Penny is not a nurturing person.",
            "fol": "\u00acp_8(Penny)",
            "str_fol": "\u00acis_nurturing(Penny)",
            "negation": true
        },
        {
            "id": 8,
            "subject": "Penny",
            "text": "Penny does not care for animals.",
            "fol": "\u00acp_7(Penny)",
            "str_fol": "\u00accare_for_animals(Penny)",
            "negation": true
        },
        {
            "id": 9,
            "subject": "Penny",
            "text": "Penny grows plants.",
            "fol": "p_6(Penny)",
            "str_fol": "grow_plants(Penny)",
            "negation": false
        },
        {
            "id": 10,
            "subject": "Penny",
            "text": "Penny does not tend to her garden.",
            "fol": "\u00acp_4(Penny)",
            "str_fol": "\u00actend_to_garden(Penny)",
            "negation": true
        },
        {
            "id": 11,
            "subject": "Penny",
            "text": "Penny sees beauty flourish.",
            "fol": "p_5(Penny)",
            "str_fol": "see_beauty_flourish(Penny)",
            "negation": false
        }
    ],
    "context_facts": [
        {
            "id": 3,
            "subject": "Penny",
            "text": "Penny does not smile.",
            "fol": "\u00acp_3(Penny)",
            "str_fol": "\u00acsmile(Penny)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Penny",
            "text": "Penny does not pursue art.",
            "fol": "\u00acp_2(Penny)",
            "str_fol": "\u00acpursue_art(Penny)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Penny",
            "text": "Penny does not nurture a pet.",
            "fol": "\u00acp_1(Penny)",
            "str_fol": "\u00acnurture_pet(Penny)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Penny",
            "text": "Penny loves nature.",
            "fol": "p_0(Penny)",
            "str_fol": "love_nature(Penny)",
            "negation": false
        }
    ],
    "context_rules": [
        {
            "id": 7,
            "text": "If someone is happy, then they smile.",
            "fol": "\u2200x (p_11(x) \u2192 p_3(x))",
            "str_fol": "\u2200x (is_happy(x) \u2192 smile(x))"
        },
        {
            "id": 6,
            "text": "A person either has passion or pursues art, but not necessarily both.",
            "fol": "\u2200x (p_10(x) \u2295 p_2(x))",
            "str_fol": "\u2200x (has_passion(x) \u2295 pursue_art(x))"
        },
        {
            "id": 5,
            "text": "If someone has passion and spreads joy, then they are happy.",
            "fol": "\u2200x ((p_10(x) \u2227 p_9(x)) \u2192 p_11(x))",
            "str_fol": "\u2200x ((has_passion(x) \u2227 spread_joy(x)) \u2192 is_happy(x))"
        },
        {
            "id": 4,
            "text": "If someone is nurturing, then they spread joy to others.",
            "fol": "\u2200x (p_8(x) \u2192 p_9(x))",
            "str_fol": "\u2200x (is_nurturing(x) \u2192 spread_joy(x))"
        },
        {
            "id": 3,
            "text": "If Penny either cares for animals or nurtures a pet (but not both), then she is a nurturing person.",
            "fol": "(p_7(Penny) \u2295 p_1(Penny)) \u2192 p_8(Penny)",
            "str_fol": "(care_for_animals(Penny) \u2295 nurture_pet(Penny)) \u2192 is_nurturing(Penny)"
        },
        {
            "id": 2,
            "text": "Either Penny cares for animals or grows plants, but she does not do both.",
            "fol": "p_7(Penny) \u2295 p_6(Penny)",
            "str_fol": "care_for_animals(Penny) \u2295 grow_plants(Penny)"
        },
        {
            "id": 1,
            "text": "If Penny loves nature, then she either tends to a garden or grows plants, but not both.",
            "fol": "p_0(Penny) \u2192 (p_4(Penny) \u2295 p_6(Penny))",
            "str_fol": "love_nature(Penny) \u2192 (tend_to_garden(Penny) \u2295 grow_plants(Penny))"
        },
        {
            "id": 0,
            "text": "For all humans, if they tend to a garden, then they see beauty flourish.",
            "fol": "\u2200x (p_4(x) \u2192 p_5(x))",
            "str_fol": "\u2200x (tend_to_garden(x) \u2192 see_beauty_flourish(x))"
        }
    ],
    "context": [
        {
            "id": 3,
            "subject": "Penny",
            "text": "Penny does not smile.",
            "fol": "\u00acp_3(Penny)",
            "str_fol": "\u00acsmile(Penny)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Penny",
            "text": "Penny does not pursue art.",
            "fol": "\u00acp_2(Penny)",
            "str_fol": "\u00acpursue_art(Penny)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Penny",
            "text": "Penny does not nurture a pet.",
            "fol": "\u00acp_1(Penny)",
            "str_fol": "\u00acnurture_pet(Penny)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Penny",
            "text": "Penny loves nature.",
            "fol": "p_0(Penny)",
            "str_fol": "love_nature(Penny)",
            "negation": false
        },
        {
            "id": 7,
            "text": "If someone is happy, then they smile.",
            "fol": "\u2200x (p_11(x) \u2192 p_3(x))",
            "str_fol": "\u2200x (is_happy(x) \u2192 smile(x))"
        },
        {
            "id": 6,
            "text": "A person either has passion or pursues art, but not necessarily both.",
            "fol": "\u2200x (p_10(x) \u2295 p_2(x))",
            "str_fol": "\u2200x (has_passion(x) \u2295 pursue_art(x))"
        },
        {
            "id": 5,
            "text": "If someone has passion and spreads joy, then they are happy.",
            "fol": "\u2200x ((p_10(x) \u2227 p_9(x)) \u2192 p_11(x))",
            "str_fol": "\u2200x ((has_passion(x) \u2227 spread_joy(x)) \u2192 is_happy(x))"
        },
        {
            "id": 4,
            "text": "If someone is nurturing, then they spread joy to others.",
            "fol": "\u2200x (p_8(x) \u2192 p_9(x))",
            "str_fol": "\u2200x (is_nurturing(x) \u2192 spread_joy(x))"
        },
        {
            "id": 3,
            "text": "If Penny either cares for animals or nurtures a pet (but not both), then she is a nurturing person.",
            "fol": "(p_7(Penny) \u2295 p_1(Penny)) \u2192 p_8(Penny)",
            "str_fol": "(care_for_animals(Penny) \u2295 nurture_pet(Penny)) \u2192 is_nurturing(Penny)"
        },
        {
            "id": 2,
            "text": "Either Penny cares for animals or grows plants, but she does not do both.",
            "fol": "p_7(Penny) \u2295 p_6(Penny)",
            "str_fol": "care_for_animals(Penny) \u2295 grow_plants(Penny)"
        },
        {
            "id": 1,
            "text": "If Penny loves nature, then she either tends to a garden or grows plants, but not both.",
            "fol": "p_0(Penny) \u2192 (p_4(Penny) \u2295 p_6(Penny))",
            "str_fol": "love_nature(Penny) \u2192 (tend_to_garden(Penny) \u2295 grow_plants(Penny))"
        },
        {
            "id": 0,
            "text": "For all humans, if they tend to a garden, then they see beauty flourish.",
            "fol": "\u2200x (p_4(x) \u2192 p_5(x))",
            "str_fol": "\u2200x (tend_to_garden(x) \u2192 see_beauty_flourish(x))"
        }
    ],
    "context_fol": "\u00acp_3(Penny)\n\u00acp_2(Penny)\n\u00acp_1(Penny)\np_0(Penny)\n\u2200x (p_11(x) \u2192 p_3(x))\n\u2200x (p_10(x) \u2295 p_2(x))\n\u2200x ((p_10(x) \u2227 p_9(x)) \u2192 p_11(x))\n\u2200x (p_8(x) \u2192 p_9(x))\n(p_7(Penny) \u2295 p_1(Penny)) \u2192 p_8(Penny)\np_7(Penny) \u2295 p_6(Penny)\np_0(Penny) \u2192 (p_4(Penny) \u2295 p_6(Penny))\n\u2200x (p_4(x) \u2192 p_5(x))",
    "conclusion": {
        "id": 11,
        "subject": "Penny",
        "text": "Penny sees beauty flourish.",
        "fol": "p_5(Penny)",
        "str_fol": "see_beauty_flourish(Penny)",
        "negation": false
    },
    "initial_answer": "Uncertain",
    "initial_goal": "p_5(Penny)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 3,
                    "subject": "Penny",
                    "text": "Penny does not smile.",
                    "fol": "\u00acp_3(Penny)",
                    "str_fol": "\u00acsmile(Penny)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 7,
                    "text": "If someone is happy, then they smile.",
                    "fol": "\u2200x (p_11(x) \u2192 p_3(x))",
                    "str_fol": "\u2200x (is_happy(x) \u2192 smile(x))"
                }
            ],
            "conclusion": {
                "id": 4,
                "subject": "Penny",
                "text": "Penny is not happy.",
                "fol": "\u00acp_11(Penny)",
                "str_fol": "\u00acis_happy(Penny)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 2,
                    "subject": "Penny",
                    "text": "Penny does not pursue art.",
                    "fol": "\u00acp_2(Penny)",
                    "str_fol": "\u00acpursue_art(Penny)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 6,
                    "text": "A person either has passion or pursues art, but not necessarily both.",
                    "fol": "\u2200x (p_10(x) \u2295 p_2(x))",
                    "str_fol": "\u2200x (has_passion(x) \u2295 pursue_art(x))"
                }
            ],
            "conclusion": {
                "id": 5,
                "subject": "Penny",
                "text": "Penny has passion.",
                "fol": "p_10(Penny)",
                "str_fol": "has_passion(Penny)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 5,
                    "subject": "Penny",
                    "text": "Penny has passion.",
                    "fol": "p_10(Penny)",
                    "str_fol": "has_passion(Penny)",
                    "negation": false
                },
                {
                    "id": 4,
                    "subject": "Penny",
                    "text": "Penny is not happy.",
                    "fol": "\u00acp_11(Penny)",
                    "str_fol": "\u00acis_happy(Penny)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "If someone has passion and spreads joy, then they are happy.",
                    "fol": "\u2200x ((p_10(x) \u2227 p_9(x)) \u2192 p_11(x))",
                    "str_fol": "\u2200x ((has_passion(x) \u2227 spread_joy(x)) \u2192 is_happy(x))"
                }
            ],
            "conclusion": {
                "id": 6,
                "subject": "Penny",
                "text": "Penny does not spread joy to those around her.",
                "fol": "\u00acp_9(Penny)",
                "str_fol": "\u00acspread_joy(Penny)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 6,
                    "subject": "Penny",
                    "text": "Penny does not spread joy to those around her.",
                    "fol": "\u00acp_9(Penny)",
                    "str_fol": "\u00acspread_joy(Penny)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "If someone is nurturing, then they spread joy to others.",
                    "fol": "\u2200x (p_8(x) \u2192 p_9(x))",
                    "str_fol": "\u2200x (is_nurturing(x) \u2192 spread_joy(x))"
                }
            ],
            "conclusion": {
                "id": 7,
                "subject": "Penny",
                "text": "Penny is not a nurturing person.",
                "fol": "\u00acp_8(Penny)",
                "str_fol": "\u00acis_nurturing(Penny)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 1,
                    "subject": "Penny",
                    "text": "Penny does not nurture a pet.",
                    "fol": "\u00acp_1(Penny)",
                    "str_fol": "\u00acnurture_pet(Penny)",
                    "negation": true
                },
                {
                    "id": 7,
                    "subject": "Penny",
                    "text": "Penny is not a nurturing person.",
                    "fol": "\u00acp_8(Penny)",
                    "str_fol": "\u00acis_nurturing(Penny)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "If Penny either cares for animals or nurtures a pet (but not both), then she is a nurturing person.",
                    "fol": "(p_7(Penny) \u2295 p_1(Penny)) \u2192 p_8(Penny)",
                    "str_fol": "(care_for_animals(Penny) \u2295 nurture_pet(Penny)) \u2192 is_nurturing(Penny)"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Penny",
                "text": "Penny does not care for animals.",
                "fol": "\u00acp_7(Penny)",
                "str_fol": "\u00accare_for_animals(Penny)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 8,
                    "subject": "Penny",
                    "text": "Penny does not care for animals.",
                    "fol": "\u00acp_7(Penny)",
                    "str_fol": "\u00accare_for_animals(Penny)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "Either Penny cares for animals or grows plants, but she does not do both.",
                    "fol": "p_7(Penny) \u2295 p_6(Penny)",
                    "str_fol": "care_for_animals(Penny) \u2295 grow_plants(Penny)"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Penny",
                "text": "Penny grows plants.",
                "fol": "p_6(Penny)",
                "str_fol": "grow_plants(Penny)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 0,
                    "subject": "Penny",
                    "text": "Penny loves nature.",
                    "fol": "p_0(Penny)",
                    "str_fol": "love_nature(Penny)",
                    "negation": false
                },
                {
                    "id": 9,
                    "subject": "Penny",
                    "text": "Penny grows plants.",
                    "fol": "p_6(Penny)",
                    "str_fol": "grow_plants(Penny)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "If Penny loves nature, then she either tends to a garden or grows plants, but not both.",
                    "fol": "p_0(Penny) \u2192 (p_4(Penny) \u2295 p_6(Penny))",
                    "str_fol": "love_nature(Penny) \u2192 (tend_to_garden(Penny) \u2295 grow_plants(Penny))"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Penny",
                "text": "Penny does not tend to her garden.",
                "fol": "\u00acp_4(Penny)",
                "str_fol": "\u00actend_to_garden(Penny)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 10,
                    "subject": "Penny",
                    "text": "Penny does not tend to her garden.",
                    "fol": "\u00acp_4(Penny)",
                    "str_fol": "\u00actend_to_garden(Penny)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "For all humans, if they tend to a garden, then they see beauty flourish.",
                    "fol": "\u2200x (p_4(x) \u2192 p_5(x))",
                    "str_fol": "\u2200x (tend_to_garden(x) \u2192 see_beauty_flourish(x))"
                }
            ],
            "conclusion": null
        }
    ],
    "proof_trace": null,
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "UNCERTAIN",
            "Edited Assumptions": "\u00acp_3(Penny)\n\u00acp_2(Penny)\n\u00acp_1(Penny)\np_0(Penny)\n\u2200x (p_11(x) \u2192 p_3(x))\n\u2200x (p_10(x) \u2295 p_2(x))\n\u2200x ((p_10(x) \u2227 p_9(x)) \u2192 p_11(x))\n\u2200x (p_8(x) \u2192 p_9(x))\n(p_7(Penny) \u2295 p_1(Penny)) \u2192 p_8(Penny)\np_7(Penny) \u2295 p_6(Penny)\np_0(Penny) \u2192 (p_4(Penny) \u2295 p_6(Penny))\n\u2200x (p_4(x) \u2192 p_5(x))",
            "Initial Goal": "p_5(Penny)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_3(Penny).",
                    "-p_2(Penny).",
                    "-p_1(Penny).",
                    "p_0(Penny).",
                    "all x (p_11(x) -> p_3(x)).",
                    "all x (-(p_10(x) <-> p_2(x))).",
                    "all x ((p_10(x) & p_9(x)) -> p_11(x)).",
                    "all x (p_8(x) -> p_9(x)).",
                    "(-(p_7(Penny) <-> p_1(Penny))) -> p_8(Penny).",
                    "-(p_7(Penny) <-> p_6(Penny)).",
                    "p_0(Penny) -> (-(p_4(Penny) <-> p_6(Penny))).",
                    "all x (p_4(x) -> p_5(x)).",
                    "-p_6(Penny)."
                ],
                "formulas(goals)": [
                    "p_5(Penny)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "\u00acp_6(Penny)"
                ],
                "added_rules": []
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_3(Penny)\n\u00acp_2(Penny)\n\u00acp_1(Penny)\np_0(Penny)\n\u2200x (p_11(x) \u2192 p_3(x))\n\u2200x (p_10(x) \u2295 p_2(x))\n\u2200x ((p_10(x) \u2227 p_9(x)) \u2192 p_11(x))\n\u2200x (p_8(x) \u2192 p_9(x))\n(p_7(Penny) \u2295 p_1(Penny)) \u2192 p_8(Penny)\np_7(Penny) \u2295 p_6(Penny)\np_0(Penny) \u2192 (p_4(Penny) \u2295 p_6(Penny))\n\u2200x (p_4(x) \u2192 p_5(x))\np_6(Penny)\n\u2200x (\u00acp_4(x) \u2192 \u00acp_5(x))",
            "Initial Goal": "p_5(Penny)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_3(Penny)",
                    "-p_2(Penny)",
                    "-p_1(Penny)",
                    "p_0(Penny)",
                    "all x (p_11(x) -> p_3(x))",
                    "all x (-(p_10(x) <-> p_2(x)))",
                    "all x ((p_10(x) & p_9(x)) -> p_11(x))",
                    "all x (p_8(x) -> p_9(x))",
                    "(-(p_7(Penny) <-> p_1(Penny))) -> p_8(Penny)",
                    "-(p_7(Penny) <-> p_6(Penny))",
                    "p_0(Penny) -> (-(p_4(Penny) <-> p_6(Penny)))",
                    "all x (p_4(x) -> p_5(x))",
                    "p_6(Penny)",
                    "all x (-p_4(x) -> -p_5(x))"
                ],
                "formulas(goals)": [
                    "-p_5(Penny)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_6(Penny)"
                ],
                "added_rules": [
                    "\u2200x (\u00acp_4(x) \u2192 \u00acp_5(x))"
                ]
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_3(Penny)\n\u00acp_2(Penny)\n\u00acp_1(Penny)\np_0(Penny)\n\u2200x (p_11(x) \u2192 p_3(x))\n\u2200x (p_10(x) \u2295 p_2(x))\n\u2200x ((p_10(x) \u2227 p_9(x)) \u2192 p_11(x))\n\u2200x (p_8(x) \u2192 p_9(x))\n(p_7(Penny) \u2295 p_1(Penny)) \u2192 p_8(Penny)\np_7(Penny) \u2295 p_6(Penny)\np_0(Penny) \u2192 (p_4(Penny) \u2295 p_6(Penny))\n\u2200x (p_4(x) \u2192 p_5(x))\np_6(Penny)\n\u2200x (\u00acp_4(x) \u2192 \u00acp_5(x))\n\u00acp_7(Penny)\n\u00acp_4(Penny)\np_10(Penny)\n\u2200x (\u00acp_3(x) \u2192 \u00acp_11(x))\n\u2200x (\u00acp_11(x) \u2192 (\u00acp_10(x) \u2228 \u00acp_9(x)))\n\u2200x (\u00acp_9(x) \u2192 \u00acp_8(x))",
            "Initial Goal": "p_5(Penny)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_3(Penny)",
                    "-p_2(Penny)",
                    "-p_1(Penny)",
                    "p_0(Penny)",
                    "all x (p_11(x) -> p_3(x))",
                    "all x (-(p_10(x) <-> p_2(x)))",
                    "all x ((p_10(x) & p_9(x)) -> p_11(x))",
                    "all x (p_8(x) -> p_9(x))",
                    "(-(p_7(Penny) <-> p_1(Penny))) -> p_8(Penny)",
                    "-(p_7(Penny) <-> p_6(Penny))",
                    "p_0(Penny) -> (-(p_4(Penny) <-> p_6(Penny)))",
                    "all x (p_4(x) -> p_5(x))",
                    "p_6(Penny)",
                    "all x (-p_4(x) -> -p_5(x))",
                    "-p_7(Penny)",
                    "-p_4(Penny)",
                    "p_10(Penny)",
                    "all x (-p_3(x) -> -p_11(x))",
                    "all x (-p_11(x) -> (-p_10(x) | -p_9(x)))",
                    "all x (-p_9(x) -> -p_8(x))"
                ],
                "formulas(goals)": [
                    "-p_5(Penny)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "\u00acp_7(Penny)",
                    "\u00acp_4(Penny)",
                    "p_10(Penny)"
                ],
                "added_rules": [
                    "\u2200x (\u00acp_3(x) \u2192 \u00acp_11(x))",
                    "\u2200x (\u00acp_11(x) \u2192 (\u00acp_10(x) \u2228 \u00acp_9(x)))",
                    "\u2200x (\u00acp_9(x) \u2192 \u00acp_8(x))"
                ]
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_3(Penny)\n\u00acp_2(Penny)\n\u00acp_1(Penny)\np_0(Penny)\n\u2200x (p_11(x) \u2192 p_3(x))\n\u2200x ((p_10(x) \u2228 p_2(x)) \u2227 (\u00acp_10(x) \u2228 \u00acp_2(x)))\n\u2200x ((p_10(x) \u2227 p_9(x)) \u2192 p_11(x))\n\u2200x (p_8(x) \u2192 p_9(x))\n((p_7(Penny) \u2228 p_1(Penny)) \u2227 (\u00acp_7(Penny) \u2228 \u00acp_1(Penny))) \u2192 p_8(Penny)\np_7(Penny) \u2295 p_6(Penny)\np_0(Penny) \u2192 (p_4(Penny) \u2295 p_6(Penny))\n\u2200x (p_4(x) \u2192 p_5(x))\np_6(Penny)\n\u2200x (\u00acp_4(x) \u2192 \u00acp_5(x))\n\u00acp_7(Penny)\n\u00acp_4(Penny)\np_10(Penny)\n\u2200x (\u00acp_3(x) \u2192 \u00acp_11(x))\n\u2200x (\u00acp_11(x) \u2192 (\u00acp_10(x) \u2228 \u00acp_9(x)))\n\u2200x (\u00acp_9(x) \u2192 \u00acp_8(x))\n\u2200x (\u00acp_5(x) \u2192 \u00acp_4(x))\n\u2200x (\u00acp_8(x) \u2228 p_9(x))\n\u2200x (p_10(x) \u2228 p_2(x))\n\u2200x (\u00acp_10(x) \u2228 \u00acp_2(x))",
            "Initial Goal": "p_5(Penny)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_3(Penny)",
                    "-p_2(Penny)",
                    "-p_1(Penny)",
                    "p_0(Penny)",
                    "all x (p_11(x) -> p_3(x))",
                    "all x ((p_10(x) | p_2(x)) & (-p_10(x) | -p_2(x)))",
                    "all x ((p_10(x) & p_9(x)) -> p_11(x))",
                    "all x (p_8(x) -> p_9(x))",
                    "((p_7(Penny) | p_1(Penny)) & (-p_7(Penny) | -p_1(Penny))) -> p_8(Penny)",
                    "-(p_7(Penny) <-> p_6(Penny))",
                    "p_0(Penny) -> (-(p_4(Penny) <-> p_6(Penny)))",
                    "all x (p_4(x) -> p_5(x))",
                    "p_6(Penny)",
                    "all x (-p_4(x) -> -p_5(x))",
                    "-p_7(Penny)",
                    "-p_4(Penny)",
                    "p_10(Penny)",
                    "all x (-p_3(x) -> -p_11(x))",
                    "all x (-p_11(x) -> (-p_10(x) | -p_9(x)))",
                    "all x (-p_9(x) -> -p_8(x))",
                    "all x (-p_5(x) -> -p_4(x))",
                    "all x (-p_8(x) | p_9(x))",
                    "all x (p_10(x) | p_2(x))",
                    "all x (-p_10(x) | -p_2(x))"
                ],
                "formulas(goals)": [
                    "-p_5(Penny)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u2200x (p_10(x) \u2295 p_2(x))",
                    "(p_7(Penny) \u2295 p_1(Penny)) \u2192 p_8(Penny)"
                ],
                "added_facts": [],
                "added_rules": [
                    "\u2200x ((p_10(x) \u2228 p_2(x)) \u2227 (\u00acp_10(x) \u2228 \u00acp_2(x)))",
                    "((p_7(Penny) \u2228 p_1(Penny)) \u2227 (\u00acp_7(Penny) \u2228 \u00acp_1(Penny))) \u2192 p_8(Penny)",
                    "\u2200x (\u00acp_5(x) \u2192 \u00acp_4(x))",
                    "\u2200x (\u00acp_8(x) \u2228 p_9(x))",
                    "\u2200x (p_10(x) \u2228 p_2(x))",
                    "\u2200x (\u00acp_10(x) \u2228 \u00acp_2(x))"
                ]
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_3(Penny)\n\u00acp_2(Penny)\n\u00acp_1(Penny)\np_0(Penny)\n\u2200x (p_11(x) \u2192 p_3(x))\n\u2200x ((p_10(x) \u2228 p_2(x)) \u2227 (\u00acp_10(x) \u2228 \u00acp_2(x)))\n\u2200x ((p_10(x) \u2227 p_9(x)) \u2192 p_11(x))\n\u2200x (p_8(x) \u2192 p_9(x))\n((p_7(Penny) \u2228 p_1(Penny)) \u2227 (\u00acp_7(Penny) \u2228 \u00acp_1(Penny))) \u2192 p_8(Penny)\np_7(Penny) \u2295 p_6(Penny)\np_0(Penny) \u2192 (p_4(Penny) \u2295 p_6(Penny))\n\u2200x (p_4(x) \u2192 p_5(x))\np_6(Penny)\n\u00acp_7(Penny)\np_10(Penny)\n\u2200x (\u00acp_3(x) \u2192 \u00acp_11(x))\n\u2200x (\u00acp_11(x) \u2192 (\u00acp_10(x) \u2228 \u00acp_9(x)))\n\u2200x (\u00acp_9(x) \u2192 \u00acp_8(x))\n\u2200x (\u00acp_5(x) \u2192 \u00acp_4(x))\n\u2200x (\u00acp_8(x) \u2228 p_9(x))\n\u2200x (p_10(x) \u2228 p_2(x))\n\u2200x (\u00acp_10(x) \u2228 \u00acp_2(x))\np_4(Penny)",
            "Initial Goal": "p_5(Penny)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_3(Penny).",
                    "-p_2(Penny).",
                    "-p_1(Penny).",
                    "p_0(Penny).",
                    "all x (p_11(x) -> p_3(x)).",
                    "all x ((p_10(x) | p_2(x)) & (-p_10(x) | -p_2(x))).",
                    "all x ((p_10(x) & p_9(x)) -> p_11(x)).",
                    "all x (p_8(x) -> p_9(x)).",
                    "((p_7(Penny) | p_1(Penny)) & (-p_7(Penny) | -p_1(Penny))) -> p_8(Penny).",
                    "-(p_7(Penny) <-> p_6(Penny)).",
                    "p_0(Penny) -> (-(p_4(Penny) <-> p_6(Penny))).",
                    "all x (p_4(x) -> p_5(x)).",
                    "p_6(Penny).",
                    "-p_7(Penny).",
                    "p_10(Penny).",
                    "all x (-p_3(x) -> -p_11(x)).",
                    "all x (-p_11(x) -> (-p_10(x) | -p_9(x))).",
                    "all x (-p_9(x) -> -p_8(x)).",
                    "all x (-p_5(x) -> -p_4(x)).",
                    "all x (-p_8(x) | p_9(x)).",
                    "all x (p_10(x) | p_2(x)).",
                    "all x (-p_10(x) | -p_2(x)).",
                    "p_4(Penny)."
                ],
                "formulas(goals)": [
                    "p_5(Penny)."
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "\u00acp_4(Penny)"
                ],
                "removed_rules": [
                    "\u2200x (\u00acp_4(x) \u2192 \u00acp_5(x))"
                ],
                "added_facts": [
                    "p_4(Penny)"
                ],
                "added_rules": []
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_3(Penny).\n\u00acp_2(Penny).\n\u00acp_1(Penny).\np_0(Penny).\n\u2200x (p_11(x) \u2192 p_3(x)).\n\u2200x ((p_10(x) \u2228 p_2(x)) \u2227 (\u00acp_10(x) \u2228 \u00acp_2(x))).\n\u2200x ((p_10(x) \u2227 p_9(x)) \u2192 p_11(x)).\n\u2200x (p_8(x) \u2192 p_9(x)).\n((p_7(Penny) \u2228 p_1(Penny)) \u2227 (\u00acp_7(Penny) \u2228 \u00acp_1(Penny))) \u2192 p_8(Penny).\n(p_7(Penny) \u2228 p_6(Penny)) \u2227 (\u00acp_7(Penny) \u2228 \u00acp_6(Penny)).\np_0(Penny) \u2192 ( (p_4(Penny) \u2228 p_6(Penny)) \u2227 (\u00acp_4(Penny) \u2228 \u00acp_6(Penny)) ).\n\u2200x (p_4(x) \u2192 p_5(x)).\np_6(Penny).\n\u00acp_7(Penny).\np_10(Penny).\n\u2200x (\u00acp_3(x) \u2192 \u00acp_11(x)).\n\u2200x (\u00acp_11(x) \u2192 (\u00acp_10(x) \u2228 \u00acp_9(x))).\n\u2200x (\u00acp_9(x) \u2192 \u00acp_8(x)).\n\u2200x (\u00acp_8(x) \u2228 p_9(x)).\n\u2200x (p_10(x) \u2228 p_2(x)).\n\u2200x (\u00acp_10(x) \u2228 \u00acp_2(x)).\n\u00acp_4(Penny).\n\u2200x (p_5(x) \u2192 p_4(x)).",
            "Initial Goal": "p_5(Penny)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_3(Penny).",
                    "-p_2(Penny).",
                    "-p_1(Penny).",
                    "p_0(Penny).",
                    "all x (p_11(x) -> p_3(x)).",
                    "all x ((p_10(x) | p_2(x)) & (-p_10(x) | -p_2(x))).",
                    "all x ((p_10(x) & p_9(x)) -> p_11(x)).",
                    "all x (p_8(x) -> p_9(x)).",
                    "((p_7(Penny) | p_1(Penny)) & (-p_7(Penny) | -p_1(Penny))) -> p_8(Penny).",
                    "(p_7(Penny) | p_6(Penny)) & (-p_7(Penny) | -p_6(Penny)).",
                    "p_0(Penny) -> ( (p_4(Penny) | p_6(Penny)) & (-p_4(Penny) | -p_6(Penny)) ).",
                    "all x (p_4(x) -> p_5(x)).",
                    "p_6(Penny).",
                    "-p_7(Penny).",
                    "p_10(Penny).",
                    "all x (-p_3(x) -> -p_11(x)).",
                    "all x (-p_11(x) -> (-p_10(x) | -p_9(x))).",
                    "all x (-p_9(x) -> -p_8(x)).",
                    "all x (-p_8(x) | p_9(x)).",
                    "all x (p_10(x) | p_2(x)).",
                    "all x (-p_10(x) | -p_2(x)).",
                    "-p_4(Penny).",
                    "all x (p_5(x) -> p_4(x))."
                ],
                "formulas(goals)": [
                    "-p_5(Penny)."
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "p_4(Penny)"
                ],
                "removed_rules": [],
                "added_facts": [
                    "\u00acp_4(Penny)"
                ],
                "added_rules": [
                    "\u2200x (p_5(x) \u2192 p_4(x))"
                ]
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_3(Penny)\n\u00acp_2(Penny)\n\u00acp_1(Penny)\np_0(Penny)\n\u2200x (p_11(x) \u2192 p_3(x))\n\u2200x ((p_10(x) \u2228 p_2(x)) \u2227 (\u00acp_10(x) \u2228 \u00acp_2(x)))\n\u2200x ((p_10(x) \u2227 p_9(x)) \u2192 p_11(x))\n\u2200x (p_8(x) \u2192 p_9(x))\n((p_7(Penny) \u2228 p_1(Penny)) \u2227 (\u00acp_7(Penny) \u2228 \u00acp_1(Penny))) \u2192 p_8(Penny)\n(p_7(Penny) \u2228 p_6(Penny)) \u2227 (\u00acp_7(Penny) \u2228 \u00acp_6(Penny))\np_0(Penny) \u2192 ((p_4(Penny) \u2228 p_6(Penny)) \u2227 (\u00acp_4(Penny) \u2228 \u00acp_6(Penny)))\n\u2200x (p_4(x) \u2192 p_5(x))\np_6(Penny)\n\u00acp_7(Penny)\np_10(Penny)\n\u2200x (\u00acp_3(x) \u2192 \u00acp_11(x))\n\u2200x (\u00acp_11(x) \u2192 (\u00acp_10(x) \u2228 \u00acp_9(x)))\n\u2200x (\u00acp_9(x) \u2192 \u00acp_8(x))\n\u2200x (\u00acp_8(x) \u2228 p_9(x))\n\u2200x (p_10(x) \u2228 p_2(x))\n\u2200x (\u00acp_10(x) \u2228 \u00acp_2(x))\n\u00acp_4(Penny)\n\u2200x (p_5(x) \u2192 p_4(x))\n\u2200x (p_4(x) \u2194 p_5(x))\np_7(Penny) \u2194 \u00acp_6(Penny)\np_0(Penny) \u2192 (p_4(Penny) \u2194 \u00acp_6(Penny))",
            "Initial Goal": "p_5(Penny)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_3(Penny).",
                    "-p_2(Penny).",
                    "-p_1(Penny).",
                    "p_0(Penny).",
                    "all x (p_11(x) -> p_3(x)).",
                    "all x ((p_10(x) | p_2(x)) & (-p_10(x) | -p_2(x))).",
                    "all x ((p_10(x) & p_9(x)) -> p_11(x)).",
                    "all x (p_8(x) -> p_9(x)).",
                    "((p_7(Penny) | p_1(Penny)) & (-p_7(Penny) | -p_1(Penny))) -> p_8(Penny).",
                    "(p_7(Penny) | p_6(Penny)) & (-p_7(Penny) | -p_6(Penny)).",
                    "p_0(Penny) -> ((p_4(Penny) | p_6(Penny)) & (-p_4(Penny) | -p_6(Penny))).",
                    "all x (p_4(x) -> p_5(x)).",
                    "p_6(Penny).",
                    "-p_7(Penny).",
                    "p_10(Penny).",
                    "all x (-p_3(x) -> -p_11(x)).",
                    "all x (-p_11(x) -> (-p_10(x) | -p_9(x))).",
                    "all x (-p_9(x) -> -p_8(x)).",
                    "all x (-p_8(x) | p_9(x)).",
                    "all x (p_10(x) | p_2(x)).",
                    "all x (-p_10(x) | -p_2(x)).",
                    "-p_4(Penny).",
                    "all x (p_5(x) -> p_4(x)).",
                    "all x (p_4(x) <-> p_5(x)).",
                    "p_7(Penny) <-> -p_6(Penny).",
                    "p_0(Penny) -> (p_4(Penny) <-> -p_6(Penny))."
                ],
                "formulas(goals)": [
                    "-(p_5(Penny))."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "\u2200x (p_4(x) \u2194 p_5(x))",
                    "(p_7(Penny) \u2194 \u00acp_6(Penny))",
                    "(p_0(Penny) \u2192 (p_4(Penny) \u2194 \u00acp_6(Penny)))"
                ]
            }
        }
    ]
}