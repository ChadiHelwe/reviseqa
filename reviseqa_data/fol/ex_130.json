{
    "background_story": "Anakin, a strain of E. coli, was a fascinating bacterium studied by microbiologists for its unique genetic makeup. Specifically, Anakin's DNA contained a complex operon that regulated the production of enzymes crucial for lactose metabolism. This operon, known as the lac operon, was a marvel of genetic engineering, allowing Anakin to adapt swiftly to changes in its environment. When lactose was present, the operon was activated, and Anakin could feast on the sugar, growing at an incredible rate. Conversely, when lactose was absent, the operon was repressed, conserving energy for the bacterium. Anakin's remarkable ability to control its gene expression made it an important subject in the study of gene regulation and bacterial physiology.",
    "predicates": [
        {
            "id": 0,
            "name": "is_hardy"
        },
        {
            "id": 1,
            "name": "survives_harsh_conditions"
        },
        {
            "id": 2,
            "name": "adapts_to_environment"
        },
        {
            "id": 3,
            "name": "consumes_sugars"
        },
        {
            "id": 4,
            "name": "is_resilient"
        },
        {
            "id": 5,
            "name": "responds_to_stimuli"
        },
        {
            "id": 6,
            "name": "optimizes_energy"
        },
        {
            "id": 7,
            "name": "replicates_rapidly"
        },
        {
            "id": 8,
            "name": "has_lac_operon"
        },
        {
            "id": 9,
            "name": "can_metabolize_lactose"
        },
        {
            "id": 10,
            "name": "regulates_genes"
        },
        {
            "id": 11,
            "name": "produces_enzymes"
        },
        {
            "id": 12,
            "name": "thrives_fast"
        },
        {
            "id": 13,
            "name": "grows_slowly"
        },
        {
            "id": 14,
            "name": "controls_growth"
        },
        {
            "id": 15,
            "name": "maintains_homeostasis"
        },
        {
            "id": 16,
            "name": "eats_lactose"
        },
        {
            "id": 17,
            "name": "has_complex_DNA"
        },
        {
            "id": 18,
            "name": "is_adaptable"
        },
        {
            "id": 19,
            "name": "has_unique_DNA"
        },
        {
            "id": 20,
            "name": "lacks_nutrients"
        },
        {
            "id": 21,
            "name": "faces_stress"
        },
        {
            "id": 22,
            "name": "is_microbe"
        },
        {
            "id": 23,
            "name": "evolves_quickly"
        },
        {
            "id": 24,
            "name": "senses_nutrients"
        },
        {
            "id": 25,
            "name": "manages_cell_cycle"
        },
        {
            "id": 26,
            "name": "monitors_pH"
        }
    ],
    "subject_name": "Anakin",
    "subject_category": "bacterium",
    "keyword": "operon",
    "all_facts": [
        {
            "id": 0,
            "subject": "Anakin",
            "text": "Anakin is hardy.",
            "fol": "p_0(Anakin)",
            "str_fol": "is_hardy(Anakin)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Anakin",
            "text": "Anakin survives harsh conditions.",
            "fol": "p_1(Anakin)",
            "str_fol": "survives_harsh_conditions(Anakin)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Anakin",
            "text": "Anakin does not adapt to its environment.",
            "fol": "\u00acp_2(Anakin)",
            "str_fol": "\u00acadapts_to_environment(Anakin)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Anakin",
            "text": "Anakin does not consume sugars.",
            "fol": "\u00acp_3(Anakin)",
            "str_fol": "\u00acconsumes_sugars(Anakin)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Anakin",
            "text": "Anakin is resilient.",
            "fol": "p_4(Anakin)",
            "str_fol": "is_resilient(Anakin)",
            "negation": false
        },
        {
            "id": 5,
            "subject": "Anakin",
            "text": "Anakin responds to stimuli.",
            "fol": "p_5(Anakin)",
            "str_fol": "responds_to_stimuli(Anakin)",
            "negation": false
        },
        {
            "id": 6,
            "subject": "Anakin",
            "text": "Anakin optimizes its energy.",
            "fol": "p_6(Anakin)",
            "str_fol": "optimizes_energy(Anakin)",
            "negation": false
        },
        {
            "id": 7,
            "subject": "Anakin",
            "text": "Anakin replicates rapidly.",
            "fol": "p_7(Anakin)",
            "str_fol": "replicates_rapidly(Anakin)",
            "negation": false
        },
        {
            "id": 8,
            "subject": "Anakin",
            "text": "Anakin does not maintain homeostasis.",
            "fol": "\u00acp_15(Anakin)",
            "str_fol": "\u00acmaintains_homeostasis(Anakin)",
            "negation": true
        },
        {
            "id": 9,
            "subject": "Anakin",
            "text": "Anakin does not control his growth.",
            "fol": "\u00acp_14(Anakin)",
            "str_fol": "\u00accontrols_growth(Anakin)",
            "negation": true
        },
        {
            "id": 10,
            "subject": "Anakin",
            "text": "Anakin regulates its genes.",
            "fol": "p_10(Anakin)",
            "str_fol": "regulates_genes(Anakin)",
            "negation": false
        },
        {
            "id": 11,
            "subject": "Anakin",
            "text": "Anakin grows slowly.",
            "fol": "p_13(Anakin)",
            "str_fol": "grows_slowly(Anakin)",
            "negation": false
        },
        {
            "id": 12,
            "subject": "Anakin",
            "text": "Anakin does not thrive fast.",
            "fol": "\u00acp_12(Anakin)",
            "str_fol": "\u00acthrives_fast(Anakin)",
            "negation": true
        },
        {
            "id": 13,
            "subject": "Anakin",
            "text": "Anakin does not produce enzymes.",
            "fol": "\u00acp_11(Anakin)",
            "str_fol": "\u00acproduces_enzymes(Anakin)",
            "negation": true
        },
        {
            "id": 14,
            "subject": "Anakin",
            "text": "Anakin can metabolize lactose.",
            "fol": "p_9(Anakin)",
            "str_fol": "can_metabolize_lactose(Anakin)",
            "negation": false
        },
        {
            "id": 15,
            "subject": "Anakin",
            "text": "Anakin has a lac operon.",
            "fol": "p_8(Anakin)",
            "str_fol": "has_lac_operon(Anakin)",
            "negation": false
        }
    ],
    "context_facts": [
        {
            "id": 7,
            "subject": "Anakin",
            "text": "Anakin replicates rapidly.",
            "fol": "p_7(Anakin)",
            "str_fol": "replicates_rapidly(Anakin)",
            "negation": false
        },
        {
            "id": 6,
            "subject": "Anakin",
            "text": "Anakin optimizes its energy.",
            "fol": "p_6(Anakin)",
            "str_fol": "optimizes_energy(Anakin)",
            "negation": false
        },
        {
            "id": 5,
            "subject": "Anakin",
            "text": "Anakin responds to stimuli.",
            "fol": "p_5(Anakin)",
            "str_fol": "responds_to_stimuli(Anakin)",
            "negation": false
        },
        {
            "id": 0,
            "subject": "Anakin",
            "text": "Anakin is hardy.",
            "fol": "p_0(Anakin)",
            "str_fol": "is_hardy(Anakin)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Anakin",
            "text": "Anakin survives harsh conditions.",
            "fol": "p_1(Anakin)",
            "str_fol": "survives_harsh_conditions(Anakin)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Anakin",
            "text": "Anakin is resilient.",
            "fol": "p_4(Anakin)",
            "str_fol": "is_resilient(Anakin)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Anakin",
            "text": "Anakin does not consume sugars.",
            "fol": "\u00acp_3(Anakin)",
            "str_fol": "\u00acconsumes_sugars(Anakin)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Anakin",
            "text": "Anakin does not adapt to its environment.",
            "fol": "\u00acp_2(Anakin)",
            "str_fol": "\u00acadapts_to_environment(Anakin)",
            "negation": true
        }
    ],
    "context_rules": [
        {
            "id": 7,
            "text": "Anakin either replicates rapidly or maintains homeostasis, but not both.",
            "fol": "p_7(Anakin) \u2295 p_15(Anakin)",
            "str_fol": "replicates_rapidly(Anakin) \u2295 maintains_homeostasis(Anakin)"
        },
        {
            "id": 6,
            "text": "For all bacteria, if a bacterium optimizes its energy and controls its growth, then it maintains homeostasis.",
            "fol": "\u2200x ((p_6(x) \u2227 p_14(x)) \u2192 p_15(x))",
            "str_fol": "\u2200x ((optimizes_energy(x) \u2227 controls_growth(x)) \u2192 maintains_homeostasis(x))"
        },
        {
            "id": 5,
            "text": "If Anakin either responds to stimuli or regulates its genes (but not both), then it controls its growth.",
            "fol": "(p_5(Anakin) \u2295 p_10(Anakin)) \u2192 p_14(Anakin)",
            "str_fol": "(responds_to_stimuli(Anakin) \u2295 regulates_genes(Anakin)) \u2192 controls_growth(Anakin)"
        },
        {
            "id": 4,
            "text": "If Anakin is hardy, then it survives harsh conditions and grows slowly.",
            "fol": "p_0(Anakin) \u2192 (p_1(Anakin) \u2227 p_13(Anakin))",
            "str_fol": "is_hardy(Anakin) \u2192 (survives_harsh_conditions(Anakin) \u2227 grows_slowly(Anakin))"
        },
        {
            "id": 3,
            "text": "If Anakin is resilient, then it either grows slowly or thrives fast, but not both.",
            "fol": "p_4(Anakin) \u2192 (p_13(Anakin) \u2295 p_12(Anakin))",
            "str_fol": "is_resilient(Anakin) \u2192 (grows_slowly(Anakin) \u2295 thrives_fast(Anakin))"
        },
        {
            "id": 2,
            "text": "If Anakin either produces enzymes or consumes sugars (but not both), then it thrives fast.",
            "fol": "(p_11(Anakin) \u2295 p_3(Anakin)) \u2192 p_12(Anakin)",
            "str_fol": "(produces_enzymes(Anakin) \u2295 consumes_sugars(Anakin)) \u2192 thrives_fast(Anakin)"
        },
        {
            "id": 1,
            "text": "If Anakin regulates its genes, then it either produces enzymes or can metabolize lactose.",
            "fol": "p_10(Anakin) \u2192 (p_11(Anakin) \u2228 p_9(Anakin))",
            "str_fol": "regulates_genes(Anakin) \u2192 (produces_enzymes(Anakin) \u2228 can_metabolize_lactose(Anakin))"
        },
        {
            "id": 0,
            "text": "For all bacteria, if a bacterium has a lac operon, then it can metabolize lactose and adapt to its environment.",
            "fol": "\u2200x (p_8(x) \u2192 (p_9(x) \u2227 p_2(x)))",
            "str_fol": "\u2200x (has_lac_operon(x) \u2192 (can_metabolize_lactose(x) \u2227 adapts_to_environment(x)))"
        }
    ],
    "context": [
        {
            "id": 7,
            "subject": "Anakin",
            "text": "Anakin replicates rapidly.",
            "fol": "p_7(Anakin)",
            "str_fol": "replicates_rapidly(Anakin)",
            "negation": false
        },
        {
            "id": 6,
            "subject": "Anakin",
            "text": "Anakin optimizes its energy.",
            "fol": "p_6(Anakin)",
            "str_fol": "optimizes_energy(Anakin)",
            "negation": false
        },
        {
            "id": 5,
            "subject": "Anakin",
            "text": "Anakin responds to stimuli.",
            "fol": "p_5(Anakin)",
            "str_fol": "responds_to_stimuli(Anakin)",
            "negation": false
        },
        {
            "id": 0,
            "subject": "Anakin",
            "text": "Anakin is hardy.",
            "fol": "p_0(Anakin)",
            "str_fol": "is_hardy(Anakin)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Anakin",
            "text": "Anakin survives harsh conditions.",
            "fol": "p_1(Anakin)",
            "str_fol": "survives_harsh_conditions(Anakin)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Anakin",
            "text": "Anakin is resilient.",
            "fol": "p_4(Anakin)",
            "str_fol": "is_resilient(Anakin)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Anakin",
            "text": "Anakin does not consume sugars.",
            "fol": "\u00acp_3(Anakin)",
            "str_fol": "\u00acconsumes_sugars(Anakin)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Anakin",
            "text": "Anakin does not adapt to its environment.",
            "fol": "\u00acp_2(Anakin)",
            "str_fol": "\u00acadapts_to_environment(Anakin)",
            "negation": true
        },
        {
            "id": 7,
            "text": "Anakin either replicates rapidly or maintains homeostasis, but not both.",
            "fol": "p_7(Anakin) \u2295 p_15(Anakin)",
            "str_fol": "replicates_rapidly(Anakin) \u2295 maintains_homeostasis(Anakin)"
        },
        {
            "id": 6,
            "text": "For all bacteria, if a bacterium optimizes its energy and controls its growth, then it maintains homeostasis.",
            "fol": "\u2200x ((p_6(x) \u2227 p_14(x)) \u2192 p_15(x))",
            "str_fol": "\u2200x ((optimizes_energy(x) \u2227 controls_growth(x)) \u2192 maintains_homeostasis(x))"
        },
        {
            "id": 5,
            "text": "If Anakin either responds to stimuli or regulates its genes (but not both), then it controls its growth.",
            "fol": "(p_5(Anakin) \u2295 p_10(Anakin)) \u2192 p_14(Anakin)",
            "str_fol": "(responds_to_stimuli(Anakin) \u2295 regulates_genes(Anakin)) \u2192 controls_growth(Anakin)"
        },
        {
            "id": 4,
            "text": "If Anakin is hardy, then it survives harsh conditions and grows slowly.",
            "fol": "p_0(Anakin) \u2192 (p_1(Anakin) \u2227 p_13(Anakin))",
            "str_fol": "is_hardy(Anakin) \u2192 (survives_harsh_conditions(Anakin) \u2227 grows_slowly(Anakin))"
        },
        {
            "id": 3,
            "text": "If Anakin is resilient, then it either grows slowly or thrives fast, but not both.",
            "fol": "p_4(Anakin) \u2192 (p_13(Anakin) \u2295 p_12(Anakin))",
            "str_fol": "is_resilient(Anakin) \u2192 (grows_slowly(Anakin) \u2295 thrives_fast(Anakin))"
        },
        {
            "id": 2,
            "text": "If Anakin either produces enzymes or consumes sugars (but not both), then it thrives fast.",
            "fol": "(p_11(Anakin) \u2295 p_3(Anakin)) \u2192 p_12(Anakin)",
            "str_fol": "(produces_enzymes(Anakin) \u2295 consumes_sugars(Anakin)) \u2192 thrives_fast(Anakin)"
        },
        {
            "id": 1,
            "text": "If Anakin regulates its genes, then it either produces enzymes or can metabolize lactose.",
            "fol": "p_10(Anakin) \u2192 (p_11(Anakin) \u2228 p_9(Anakin))",
            "str_fol": "regulates_genes(Anakin) \u2192 (produces_enzymes(Anakin) \u2228 can_metabolize_lactose(Anakin))"
        },
        {
            "id": 0,
            "text": "For all bacteria, if a bacterium has a lac operon, then it can metabolize lactose and adapt to its environment.",
            "fol": "\u2200x (p_8(x) \u2192 (p_9(x) \u2227 p_2(x)))",
            "str_fol": "\u2200x (has_lac_operon(x) \u2192 (can_metabolize_lactose(x) \u2227 adapts_to_environment(x)))"
        }
    ],
    "context_fol": "p_7(Anakin)\np_6(Anakin)\np_5(Anakin)\np_0(Anakin)\np_1(Anakin)\np_4(Anakin)\n\u00acp_3(Anakin)\n\u00acp_2(Anakin)\np_7(Anakin) \u2295 p_15(Anakin)\n\u2200x ((p_6(x) \u2227 p_14(x)) \u2192 p_15(x))\n(p_5(Anakin) \u2295 p_10(Anakin)) \u2192 p_14(Anakin)\np_0(Anakin) \u2192 (p_1(Anakin) \u2227 p_13(Anakin))\np_4(Anakin) \u2192 (p_13(Anakin) \u2295 p_12(Anakin))\n(p_11(Anakin) \u2295 p_3(Anakin)) \u2192 p_12(Anakin)\np_10(Anakin) \u2192 (p_11(Anakin) \u2228 p_9(Anakin))\n\u2200x (p_8(x) \u2192 (p_9(x) \u2227 p_2(x)))",
    "conclusion": {
        "id": 15,
        "subject": "Anakin",
        "text": "Anakin has a lac operon.",
        "fol": "p_8(Anakin)",
        "str_fol": "has_lac_operon(Anakin)",
        "negation": false
    },
    "initial_answer": "False",
    "initial_goal": "p_8(Anakin)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 7,
                    "subject": "Anakin",
                    "text": "Anakin replicates rapidly.",
                    "fol": "p_7(Anakin)",
                    "str_fol": "replicates_rapidly(Anakin)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 7,
                    "text": "Anakin either replicates rapidly or maintains homeostasis, but not both.",
                    "fol": "p_7(Anakin) \u2295 p_15(Anakin)",
                    "str_fol": "replicates_rapidly(Anakin) \u2295 maintains_homeostasis(Anakin)"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Anakin",
                "text": "Anakin does not maintain homeostasis.",
                "fol": "\u00acp_15(Anakin)",
                "str_fol": "\u00acmaintains_homeostasis(Anakin)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 6,
                    "subject": "Anakin",
                    "text": "Anakin optimizes its energy.",
                    "fol": "p_6(Anakin)",
                    "str_fol": "optimizes_energy(Anakin)",
                    "negation": false
                },
                {
                    "id": 8,
                    "subject": "Anakin",
                    "text": "Anakin does not maintain homeostasis.",
                    "fol": "\u00acp_15(Anakin)",
                    "str_fol": "\u00acmaintains_homeostasis(Anakin)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 6,
                    "text": "For all bacteria, if a bacterium optimizes its energy and controls its growth, then it maintains homeostasis.",
                    "fol": "\u2200x ((p_6(x) \u2227 p_14(x)) \u2192 p_15(x))",
                    "str_fol": "\u2200x ((optimizes_energy(x) \u2227 controls_growth(x)) \u2192 maintains_homeostasis(x))"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Anakin",
                "text": "Anakin does not control his growth.",
                "fol": "\u00acp_14(Anakin)",
                "str_fol": "\u00accontrols_growth(Anakin)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 5,
                    "subject": "Anakin",
                    "text": "Anakin responds to stimuli.",
                    "fol": "p_5(Anakin)",
                    "str_fol": "responds_to_stimuli(Anakin)",
                    "negation": false
                },
                {
                    "id": 9,
                    "subject": "Anakin",
                    "text": "Anakin does not control his growth.",
                    "fol": "\u00acp_14(Anakin)",
                    "str_fol": "\u00accontrols_growth(Anakin)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "If Anakin either responds to stimuli or regulates its genes (but not both), then it controls its growth.",
                    "fol": "(p_5(Anakin) \u2295 p_10(Anakin)) \u2192 p_14(Anakin)",
                    "str_fol": "(responds_to_stimuli(Anakin) \u2295 regulates_genes(Anakin)) \u2192 controls_growth(Anakin)"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Anakin",
                "text": "Anakin regulates its genes.",
                "fol": "p_10(Anakin)",
                "str_fol": "regulates_genes(Anakin)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 0,
                    "subject": "Anakin",
                    "text": "Anakin is hardy.",
                    "fol": "p_0(Anakin)",
                    "str_fol": "is_hardy(Anakin)",
                    "negation": false
                },
                {
                    "id": 1,
                    "subject": "Anakin",
                    "text": "Anakin survives harsh conditions.",
                    "fol": "p_1(Anakin)",
                    "str_fol": "survives_harsh_conditions(Anakin)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "If Anakin is hardy, then it survives harsh conditions and grows slowly.",
                    "fol": "p_0(Anakin) \u2192 (p_1(Anakin) \u2227 p_13(Anakin))",
                    "str_fol": "is_hardy(Anakin) \u2192 (survives_harsh_conditions(Anakin) \u2227 grows_slowly(Anakin))"
                }
            ],
            "conclusion": {
                "id": 11,
                "subject": "Anakin",
                "text": "Anakin grows slowly.",
                "fol": "p_13(Anakin)",
                "str_fol": "grows_slowly(Anakin)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 4,
                    "subject": "Anakin",
                    "text": "Anakin is resilient.",
                    "fol": "p_4(Anakin)",
                    "str_fol": "is_resilient(Anakin)",
                    "negation": false
                },
                {
                    "id": 11,
                    "subject": "Anakin",
                    "text": "Anakin grows slowly.",
                    "fol": "p_13(Anakin)",
                    "str_fol": "grows_slowly(Anakin)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "If Anakin is resilient, then it either grows slowly or thrives fast, but not both.",
                    "fol": "p_4(Anakin) \u2192 (p_13(Anakin) \u2295 p_12(Anakin))",
                    "str_fol": "is_resilient(Anakin) \u2192 (grows_slowly(Anakin) \u2295 thrives_fast(Anakin))"
                }
            ],
            "conclusion": {
                "id": 12,
                "subject": "Anakin",
                "text": "Anakin does not thrive fast.",
                "fol": "\u00acp_12(Anakin)",
                "str_fol": "\u00acthrives_fast(Anakin)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 3,
                    "subject": "Anakin",
                    "text": "Anakin does not consume sugars.",
                    "fol": "\u00acp_3(Anakin)",
                    "str_fol": "\u00acconsumes_sugars(Anakin)",
                    "negation": true
                },
                {
                    "id": 12,
                    "subject": "Anakin",
                    "text": "Anakin does not thrive fast.",
                    "fol": "\u00acp_12(Anakin)",
                    "str_fol": "\u00acthrives_fast(Anakin)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "If Anakin either produces enzymes or consumes sugars (but not both), then it thrives fast.",
                    "fol": "(p_11(Anakin) \u2295 p_3(Anakin)) \u2192 p_12(Anakin)",
                    "str_fol": "(produces_enzymes(Anakin) \u2295 consumes_sugars(Anakin)) \u2192 thrives_fast(Anakin)"
                }
            ],
            "conclusion": {
                "id": 13,
                "subject": "Anakin",
                "text": "Anakin does not produce enzymes.",
                "fol": "\u00acp_11(Anakin)",
                "str_fol": "\u00acproduces_enzymes(Anakin)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 10,
                    "subject": "Anakin",
                    "text": "Anakin regulates its genes.",
                    "fol": "p_10(Anakin)",
                    "str_fol": "regulates_genes(Anakin)",
                    "negation": false
                },
                {
                    "id": 13,
                    "subject": "Anakin",
                    "text": "Anakin does not produce enzymes.",
                    "fol": "\u00acp_11(Anakin)",
                    "str_fol": "\u00acproduces_enzymes(Anakin)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "If Anakin regulates its genes, then it either produces enzymes or can metabolize lactose.",
                    "fol": "p_10(Anakin) \u2192 (p_11(Anakin) \u2228 p_9(Anakin))",
                    "str_fol": "regulates_genes(Anakin) \u2192 (produces_enzymes(Anakin) \u2228 can_metabolize_lactose(Anakin))"
                }
            ],
            "conclusion": {
                "id": 14,
                "subject": "Anakin",
                "text": "Anakin can metabolize lactose.",
                "fol": "p_9(Anakin)",
                "str_fol": "can_metabolize_lactose(Anakin)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 14,
                    "subject": "Anakin",
                    "text": "Anakin can metabolize lactose.",
                    "fol": "p_9(Anakin)",
                    "str_fol": "can_metabolize_lactose(Anakin)",
                    "negation": false
                },
                {
                    "id": 2,
                    "subject": "Anakin",
                    "text": "Anakin does not adapt to its environment.",
                    "fol": "\u00acp_2(Anakin)",
                    "str_fol": "\u00acadapts_to_environment(Anakin)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "For all bacteria, if a bacterium has a lac operon, then it can metabolize lactose and adapt to its environment.",
                    "fol": "\u2200x (p_8(x) \u2192 (p_9(x) \u2227 p_2(x)))",
                    "str_fol": "\u2200x (has_lac_operon(x) \u2192 (can_metabolize_lactose(x) \u2227 adapts_to_environment(x)))"
                }
            ],
            "conclusion": {
                "id": 15,
                "subject": "Anakin",
                "text": "Anakin has a lac operon.",
                "fol": "p_8(Anakin)",
                "str_fol": "has_lac_operon(Anakin)",
                "negation": false
            }
        }
    ],
    "proof_trace": "8 (all x (p_8(x) -> p_9(x) & p_2(x))).  [assumption].\n9 -p_8(Anakin).  [goal].\n27 -p_8(x) | p_2(x).  [clausify(8)].\n28 -p_2(Anakin).  [assumption].\n31 p_8(Anakin).  [deny(9)].\n33 -p_8(Anakin).  [resolve(27,b,28,a)].\n40 $F.  [resolve(33,a,31,a)].",
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_7(Anakin)\np_6(Anakin)\np_5(Anakin)\np_0(Anakin)\np_1(Anakin)\np_4(Anakin)\n\u00acp_3(Anakin)\n\u00acp_2(Anakin)\np_7(Anakin) \u2295 p_15(Anakin)\n\u2200x ((p_6(x) \u2227 p_14(x)) \u2192 p_15(x))\n(p_5(Anakin) \u2295 p_10(Anakin)) \u2192 p_14(Anakin)\np_0(Anakin) \u2192 (p_1(Anakin) \u2227 p_13(Anakin))\np_4(Anakin) \u2192 (p_13(Anakin) \u2295 p_12(Anakin))\n(p_11(Anakin) \u2295 p_3(Anakin)) \u2192 p_12(Anakin)\np_10(Anakin) \u2192 (p_11(Anakin) \u2228 p_9(Anakin))\n\u2200x (p_8(x) \u2192 (p_9(x) \u2227 p_2(x)))\n\u00acp_15(Anakin)\np_13(Anakin)\n\u2200x (p_8(x) \u2192 p_2(x))",
            "Initial Goal": "p_8(Anakin)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_7(Anakin)",
                    "p_6(Anakin)",
                    "p_5(Anakin)",
                    "p_0(Anakin)",
                    "p_1(Anakin)",
                    "p_4(Anakin)",
                    "-p_3(Anakin)",
                    "-p_2(Anakin)",
                    "-(p_7(Anakin) <-> p_15(Anakin))",
                    "all x ((p_6(x) & p_14(x)) -> p_15(x))",
                    "(-(p_5(Anakin) <-> p_10(Anakin))) -> p_14(Anakin)",
                    "p_0(Anakin) -> (p_1(Anakin) & p_13(Anakin))",
                    "p_4(Anakin) -> (-(p_13(Anakin) <-> p_12(Anakin)))",
                    "(-(p_11(Anakin) <-> p_3(Anakin))) -> p_12(Anakin)",
                    "p_10(Anakin) -> (p_11(Anakin) | p_9(Anakin))",
                    "all x (p_8(x) -> (p_9(x) & p_2(x)))",
                    "-p_15(Anakin)",
                    "p_13(Anakin)",
                    "all x (p_8(x) -> p_2(x))"
                ],
                "formulas(goals)": [
                    "-p_8(Anakin)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "\u00acp_15(Anakin)",
                    "p_13(Anakin)"
                ],
                "added_rules": [
                    "\u2200x (p_8(x) \u2192 p_2(x))"
                ]
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_7(Anakin)\np_6(Anakin)\np_5(Anakin)\np_0(Anakin)\np_1(Anakin)\np_4(Anakin)\n\u00acp_3(Anakin)\np_7(Anakin) \u2295 p_15(Anakin)\n\u2200x ((p_6(x) \u2227 p_14(x)) \u2192 p_15(x))\n(p_5(Anakin) \u2295 p_10(Anakin)) \u2192 p_14(Anakin)\np_0(Anakin) \u2192 (p_1(Anakin) \u2227 p_13(Anakin))\np_4(Anakin) \u2192 (p_13(Anakin) \u2295 p_12(Anakin))\n(p_11(Anakin) \u2295 p_3(Anakin)) \u2192 p_12(Anakin)\np_10(Anakin) \u2192 (p_11(Anakin) \u2228 p_9(Anakin))\n\u2200x (p_8(x) \u2192 (p_9(x) \u2227 p_2(x)))\n\u00acp_15(Anakin)\np_13(Anakin)\n\u2200x (p_8(x) \u2192 p_2(x))\np_13(Anakin) \u2192 p_8(Anakin)",
            "Initial Goal": "p_8(Anakin)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_7(Anakin)",
                    "p_6(Anakin)",
                    "p_5(Anakin)",
                    "p_0(Anakin)",
                    "p_1(Anakin)",
                    "p_4(Anakin)",
                    "-p_3(Anakin)",
                    "-(p_7(Anakin) <-> p_15(Anakin))",
                    "(all x ((p_6(x) & p_14(x)) -> p_15(x)))",
                    "(-(p_5(Anakin) <-> p_10(Anakin))) -> p_14(Anakin)",
                    "p_0(Anakin) -> (p_1(Anakin) & p_13(Anakin))",
                    "p_4(Anakin) -> (-(p_13(Anakin) <-> p_12(Anakin)))",
                    "(-(p_11(Anakin) <-> p_3(Anakin))) -> p_12(Anakin)",
                    "p_10(Anakin) -> (p_11(Anakin) | p_9(Anakin))",
                    "all x (p_8(x) -> (p_9(x) & p_2(x)))",
                    "-p_15(Anakin)",
                    "p_13(Anakin)",
                    "all x (p_8(x) -> p_2(x))",
                    "p_13(Anakin) -> p_8(Anakin)"
                ],
                "formulas(goals)": [
                    "p_8(Anakin)"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "\u00acp_2(Anakin)"
                ],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "p_13(Anakin) \u2192 p_8(Anakin)"
                ]
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_7(Anakin)\np_6(Anakin)\np_5(Anakin)\np_0(Anakin)\np_1(Anakin)\np_4(Anakin)\n\u00acp_3(Anakin)\np_7(Anakin) \u2295 p_15(Anakin)\n\u2200x ((p_6(x) \u2227 p_14(x)) \u2192 p_15(x))\n(p_5(Anakin) \u2295 p_10(Anakin)) \u2192 p_14(Anakin)\np_0(Anakin) \u2192 (p_1(Anakin) \u2227 p_13(Anakin))\np_4(Anakin) \u2192 (p_13(Anakin) \u2295 p_12(Anakin))\n(p_11(Anakin) \u2295 p_3(Anakin)) \u2192 p_12(Anakin)\np_10(Anakin) \u2192 (p_11(Anakin) \u2228 p_9(Anakin))\n\u2200x (p_8(x) \u2192 (p_9(x) \u2227 p_2(x)))\n\u00acp_15(Anakin)\np_13(Anakin)\n\u2200x (p_8(x) \u2192 p_2(x))\np_13(Anakin) \u2192 \u00acp_8(Anakin)",
            "Initial Goal": "p_8(Anakin)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_7(Anakin).",
                    "p_6(Anakin).",
                    "p_5(Anakin).",
                    "p_0(Anakin).",
                    "p_1(Anakin).",
                    "p_4(Anakin).",
                    "-p_3(Anakin).",
                    "-(p_7(Anakin) <-> p_15(Anakin)).",
                    "all x ((p_6(x) & p_14(x)) -> p_15(x)).",
                    "(-(p_5(Anakin) <-> p_10(Anakin))) -> p_14(Anakin).",
                    "p_0(Anakin) -> (p_1(Anakin) & p_13(Anakin)).",
                    "p_4(Anakin) -> (-(p_13(Anakin) <-> p_12(Anakin))).",
                    "(-(p_11(Anakin) <-> p_3(Anakin))) -> p_12(Anakin).",
                    "p_10(Anakin) -> (p_11(Anakin) | p_9(Anakin)).",
                    "all x (p_8(x) -> (p_9(x) & p_2(x))).",
                    "-p_15(Anakin).",
                    "p_13(Anakin).",
                    "all x (p_8(x) -> p_2(x)).",
                    "p_13(Anakin) -> -p_8(Anakin)."
                ],
                "formulas(goals)": [
                    "-p_8(Anakin)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_13(Anakin) \u2192 p_8(Anakin)"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_13(Anakin) \u2192 \u00acp_8(Anakin)"
                ]
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_7(Anakin)\np_6(Anakin)\np_5(Anakin)\np_0(Anakin)\np_1(Anakin)\np_4(Anakin)\n\u00acp_3(Anakin)\np_7(Anakin) \u2295 p_15(Anakin)\n\u2200x ((p_6(x) \u2227 p_14(x)) \u2192 p_15(x))\n(p_5(Anakin) \u2295 p_10(Anakin)) \u2192 p_14(Anakin)\np_4(Anakin) \u2192 (p_13(Anakin) \u2295 p_12(Anakin))\n(p_11(Anakin) \u2295 p_3(Anakin)) \u2192 p_12(Anakin)\np_10(Anakin) \u2192 (p_11(Anakin) \u2228 p_9(Anakin))\n\u2200x (p_8(x) \u2192 (p_9(x) \u2227 p_2(x)))\n\u00acp_15(Anakin)\np_13(Anakin)\n\u2200x (p_8(x) \u2192 p_2(x))\np_13(Anakin) \u2192 \u00acp_8(Anakin)\np_13(Anakin) \u2227 p_13(Anakin)\n\u00acp_8(Anakin)\np_8(Anakin) \u2192 \u00acp_13(Anakin)\np_0(Anakin) \u2192 p_1(Anakin)\np_0(Anakin) \u2192 p_13(Anakin)\np_15(Anakin) \u2192 p_15(Anakin)",
            "Initial Goal": "p_8(Anakin)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_7(Anakin).",
                    "p_6(Anakin).",
                    "p_5(Anakin).",
                    "p_0(Anakin).",
                    "p_1(Anakin).",
                    "p_4(Anakin).",
                    "-p_3(Anakin).",
                    "-(p_7(Anakin) <-> p_15(Anakin)).",
                    "all x ((p_6(x) & p_14(x)) -> p_15(x)).",
                    "(-(p_5(Anakin) <-> p_10(Anakin))) -> p_14(Anakin).",
                    "p_4(Anakin) -> (-(p_13(Anakin) <-> p_12(Anakin))).",
                    "(-(p_11(Anakin) <-> p_3(Anakin))) -> p_12(Anakin).",
                    "p_10(Anakin) -> (p_11(Anakin) | p_9(Anakin)).",
                    "all x (p_8(x) -> (p_9(x) & p_2(x))).",
                    "-p_15(Anakin).",
                    "p_13(Anakin).",
                    "all x (p_8(x) -> p_2(x)).",
                    "p_13(Anakin) -> -p_8(Anakin).",
                    "p_13(Anakin) & p_13(Anakin).",
                    "-p_8(Anakin).",
                    "p_8(Anakin) -> -p_13(Anakin).",
                    "p_0(Anakin) -> p_1(Anakin).",
                    "p_0(Anakin) -> p_13(Anakin).",
                    "p_15(Anakin) -> p_15(Anakin)."
                ],
                "formulas(goals)": [
                    "-p_8(Anakin)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_13(Anakin) \u2227 p_13(Anakin)",
                    "\u00acp_8(Anakin)"
                ],
                "added_rules": [
                    "p_8(Anakin) \u2192 \u00acp_13(Anakin)",
                    "p_0(Anakin) \u2192 p_1(Anakin)",
                    "p_0(Anakin) \u2192 p_13(Anakin)",
                    "p_15(Anakin) \u2192 p_15(Anakin)"
                ]
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_7(Anakin)\np_6(Anakin)\np_5(Anakin)\np_0(Anakin)\np_1(Anakin)\np_4(Anakin)\n\u00acp_3(Anakin)\np_7(Anakin) \u2295 p_15(Anakin)\n\u2200x ((p_6(x) \u2227 p_14(x)) \u2192 p_15(x))\n(p_5(Anakin) \u2295 p_10(Anakin)) \u2192 p_14(Anakin)\np_4(Anakin) \u2192 (p_13(Anakin) \u2295 p_12(Anakin))\n(p_11(Anakin) \u2295 p_3(Anakin)) \u2192 p_12(Anakin)\np_10(Anakin) \u2192 (p_11(Anakin) \u2228 p_9(Anakin))\n\u2200x (p_8(x) \u2192 (p_9(x) \u2227 p_2(x)))\n\u00acp_15(Anakin)\np_13(Anakin)\n\u2200x (p_8(x) \u2192 p_2(x))\np_13(Anakin) \u2227 p_13(Anakin)\np_0(Anakin) \u2192 p_1(Anakin)\np_0(Anakin) \u2192 p_13(Anakin)\np_15(Anakin) \u2192 p_15(Anakin)\np_7(Anakin) \u2192 p_8(Anakin)",
            "Initial Goal": "p_8(Anakin)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_7(Anakin)",
                    "p_6(Anakin)",
                    "p_5(Anakin)",
                    "p_0(Anakin)",
                    "p_1(Anakin)",
                    "p_4(Anakin)",
                    "-p_3(Anakin)",
                    "-(p_7(Anakin) <-> p_15(Anakin))",
                    "all x ((p_6(x) & p_14(x)) -> p_15(x))",
                    "(-(p_5(Anakin) <-> p_10(Anakin))) -> p_14(Anakin)",
                    "p_4(Anakin) -> (-(p_13(Anakin) <-> p_12(Anakin)))",
                    "(-(p_11(Anakin) <-> p_3(Anakin))) -> p_12(Anakin)",
                    "p_10(Anakin) -> (p_11(Anakin) | p_9(Anakin))",
                    "all x (p_8(x) -> (p_9(x) & p_2(x)))",
                    "-p_15(Anakin)",
                    "p_13(Anakin)",
                    "all x (p_8(x) -> p_2(x))",
                    "p_13(Anakin) & p_13(Anakin)",
                    "p_0(Anakin) -> p_1(Anakin)",
                    "p_0(Anakin) -> p_13(Anakin)",
                    "p_15(Anakin) -> p_15(Anakin)",
                    "p_7(Anakin) -> p_8(Anakin)"
                ],
                "formulas(goals)": [
                    "p_8(Anakin)"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "\u00acp_8(Anakin)"
                ],
                "removed_rules": [
                    "p_13(Anakin) \u2192 \u00acp_8(Anakin)",
                    "p_8(Anakin) \u2192 \u00acp_13(Anakin)"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_7(Anakin) \u2192 p_8(Anakin)"
                ]
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_7(Anakin)\np_6(Anakin)\np_5(Anakin)\np_0(Anakin)\np_1(Anakin)\np_4(Anakin)\n\u00acp_3(Anakin)\np_7(Anakin) \u2295 p_15(Anakin)\n\u2200x ((p_6(x) \u2227 p_14(x)) \u2192 p_15(x))\n(p_5(Anakin) \u2295 p_10(Anakin)) \u2192 p_14(Anakin)\np_4(Anakin) \u2192 (p_13(Anakin) \u2295 p_12(Anakin))\n(p_11(Anakin) \u2295 p_3(Anakin)) \u2192 p_12(Anakin)\np_10(Anakin) \u2192 (p_11(Anakin) \u2228 p_9(Anakin))\n\u2200x (p_8(x) \u2192 (p_9(x) \u2227 p_2(x)))\n\u00acp_15(Anakin)\np_13(Anakin)\n\u2200x (p_8(x) \u2192 p_2(x))\np_13(Anakin) \u2227 p_13(Anakin)\np_0(Anakin) \u2192 p_1(Anakin)\np_0(Anakin) \u2192 p_13(Anakin)\np_15(Anakin) \u2192 p_15(Anakin)\np_7(Anakin) \u2192 p_8(Anakin)\np_7(Anakin) \u2192 p_7(Anakin)\np_8(Anakin) \u2192 p_8(Anakin)\np_7(Anakin) \u2227 p_7(Anakin)\np_13(Anakin)\np_1(Anakin)\n\u2200x (p_8(x) \u2192 p_9(x))\np_7(Anakin) \u2228 \u00acp_7(Anakin)\np_8(Anakin) \u2228 \u00acp_8(Anakin)",
            "Initial Goal": "p_8(Anakin)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_7(Anakin).",
                    "p_6(Anakin).",
                    "p_5(Anakin).",
                    "p_0(Anakin).",
                    "p_1(Anakin).",
                    "p_4(Anakin).",
                    "-p_3(Anakin).",
                    "-(p_7(Anakin) <-> p_15(Anakin)).",
                    "all x (-(p_6(x) & p_14(x)) | p_15(x)).",
                    "(-(p_5(Anakin) <-> p_10(Anakin))) -> p_14(Anakin).",
                    "p_4(Anakin) -> (-(p_13(Anakin) <-> p_12(Anakin))).",
                    "(-(p_11(Anakin) <-> p_3(Anakin))) -> p_12(Anakin).",
                    "p_10(Anakin) -> (p_11(Anakin) | p_9(Anakin)).",
                    "all x (-p_8(x) | (p_9(x) & p_2(x))).",
                    "-p_15(Anakin).",
                    "p_13(Anakin).",
                    "all x (-p_8(x) | p_2(x)).",
                    "p_13(Anakin) & p_13(Anakin).",
                    "p_0(Anakin) -> p_1(Anakin).",
                    "p_0(Anakin) -> p_13(Anakin).",
                    "p_15(Anakin) -> p_15(Anakin).",
                    "p_7(Anakin) -> p_8(Anakin).",
                    "p_7(Anakin) -> p_7(Anakin).",
                    "p_8(Anakin) -> p_8(Anakin).",
                    "p_7(Anakin) & p_7(Anakin).",
                    "p_13(Anakin).",
                    "p_1(Anakin).",
                    "all x (-p_8(x) | p_9(x)).",
                    "p_7(Anakin) | -p_7(Anakin).",
                    "p_8(Anakin) | -p_8(Anakin)."
                ],
                "formulas(goals)": [
                    "p_8(Anakin)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_13(Anakin)",
                    "p_1(Anakin)"
                ],
                "added_rules": [
                    "p_7(Anakin) \u2192 p_7(Anakin)",
                    "p_8(Anakin) \u2192 p_8(Anakin)",
                    "p_7(Anakin) \u2227 p_7(Anakin)",
                    "\u2200x (p_8(x) \u2192 p_9(x))",
                    "p_7(Anakin) \u2228 \u00acp_7(Anakin)",
                    "p_8(Anakin) \u2228 \u00acp_8(Anakin)"
                ]
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_7(Anakin)\np_6(Anakin)\np_5(Anakin)\np_0(Anakin)\np_1(Anakin)\np_4(Anakin)\n\u00acp_3(Anakin)\np_7(Anakin) \u2295 p_15(Anakin)\n\u2200x ((p_6(x) \u2227 p_14(x)) \u2192 p_15(x))\n(p_5(Anakin) \u2295 p_10(Anakin)) \u2192 p_14(Anakin)\np_4(Anakin) \u2192 (p_13(Anakin) \u2295 p_12(Anakin))\n(p_11(Anakin) \u2295 p_3(Anakin)) \u2192 p_12(Anakin)\np_10(Anakin) \u2192 (p_11(Anakin) \u2228 p_9(Anakin))\n\u2200x (p_8(x) \u2192 (p_9(x) \u2227 p_2(x)))\n\u00acp_15(Anakin)\np_13(Anakin)\n\u2200x (p_8(x) \u2192 p_2(x))\np_13(Anakin) \u2227 p_13(Anakin)\np_0(Anakin) \u2192 p_1(Anakin)\np_0(Anakin) \u2192 p_13(Anakin)\np_15(Anakin) \u2192 p_15(Anakin)\np_7(Anakin) \u2192 p_7(Anakin)\np_8(Anakin) \u2192 p_8(Anakin)\np_7(Anakin) \u2227 p_7(Anakin)\np_13(Anakin)\np_1(Anakin)\n\u2200x (p_8(x) \u2192 p_9(x))\np_7(Anakin) \u2228 \u00acp_7(Anakin)\np_8(Anakin) \u2228 \u00acp_8(Anakin)\np_7(Anakin) \u2192 \u00acp_8(Anakin)",
            "Initial Goal": "p_8(Anakin)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_7(Anakin)",
                    "p_6(Anakin)",
                    "p_5(Anakin)",
                    "p_0(Anakin)",
                    "p_1(Anakin)",
                    "p_4(Anakin)",
                    "-p_3(Anakin)",
                    "-(p_7(Anakin) <-> p_15(Anakin))",
                    "all x ((p_6(x) & p_14(x)) -> p_15(x))",
                    "(-(p_5(Anakin) <-> p_10(Anakin))) -> p_14(Anakin)",
                    "p_4(Anakin) -> (-(p_13(Anakin) <-> p_12(Anakin)))",
                    "(-(p_11(Anakin) <-> p_3(Anakin))) -> p_12(Anakin)",
                    "p_10(Anakin) -> (p_11(Anakin) | p_9(Anakin))",
                    "all x (p_8(x) -> (p_9(x) & p_2(x)))",
                    "-p_15(Anakin)",
                    "p_13(Anakin)",
                    "all x (p_8(x) -> p_2(x))",
                    "p_13(Anakin) & p_13(Anakin)",
                    "p_0(Anakin) -> p_1(Anakin)",
                    "p_0(Anakin) -> p_13(Anakin)",
                    "p_15(Anakin) -> p_15(Anakin)",
                    "p_7(Anakin) -> p_7(Anakin)",
                    "p_8(Anakin) -> p_8(Anakin)",
                    "p_7(Anakin) & p_7(Anakin)",
                    "p_13(Anakin)",
                    "p_1(Anakin)",
                    "all x (p_8(x) -> p_9(x))",
                    "p_7(Anakin) | -p_7(Anakin)",
                    "p_8(Anakin) | -p_8(Anakin)",
                    "p_7(Anakin) -> -p_8(Anakin)"
                ],
                "formulas(goals)": [
                    "-p_8(Anakin)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_7(Anakin) \u2192 p_8(Anakin)"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_7(Anakin) \u2192 \u00acp_8(Anakin)"
                ]
            }
        }
    ]
}