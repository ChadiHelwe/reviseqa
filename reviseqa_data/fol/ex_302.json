{
    "background_story": "Kinley was a brilliant and dedicated doctor who had always been drawn to the most vital and challenging cases. She spent years working in emergency rooms and intensive care units, where her skills and instincts proved invaluable. When a devastating pandemic swept through the city, Kinley's hospital was at the forefront of the response. She worked tirelessly, often for 24 hours straight, to save as many lives as possible. Her expertise in critical care and her ability to remain calm under pressure made her a vital asset to the medical team. As the crisis deepened, Kinley's selflessness and compassion inspired her colleagues, and she became a beacon of hope for the community. Her vital work saved countless lives, earning her recognition as a hero of the pandemic.",
    "predicates": [
        {
            "id": 0,
            "name": "help_others"
        },
        {
            "id": 1,
            "name": "inspire_colleagues"
        },
        {
            "id": 2,
            "name": "face_challenges"
        },
        {
            "id": 3,
            "name": "show_empathy"
        },
        {
            "id": 4,
            "name": "dedicated_doctor"
        },
        {
            "id": 5,
            "name": "save_lives"
        },
        {
            "id": 6,
            "name": "earn_recognition"
        },
        {
            "id": 7,
            "name": "care_deeply"
        },
        {
            "id": 8,
            "name": "work_tirelessly"
        },
        {
            "id": 9,
            "name": "is_compassionate"
        },
        {
            "id": 10,
            "name": "is_selfless"
        },
        {
            "id": 11,
            "name": "stay_calm"
        },
        {
            "id": 12,
            "name": "heals_patients"
        },
        {
            "id": 13,
            "name": "medical_expert"
        },
        {
            "id": 14,
            "name": "heal_patients"
        },
        {
            "id": 15,
            "name": "make_sacrifices"
        },
        {
            "id": 16,
            "name": "prioritize_patients"
        },
        {
            "id": 17,
            "name": "donate_time"
        }
    ],
    "subject_name": "Kinley",
    "subject_category": "human",
    "keyword": "vital",
    "all_facts": [
        {
            "id": 0,
            "subject": "Kinley",
            "text": "Kinley does not help others.",
            "fol": "\u00acp_0(Kinley)",
            "str_fol": "\u00achelp_others(Kinley)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Kinley",
            "text": "Kinley does not inspire her colleagues.",
            "fol": "\u00acp_1(Kinley)",
            "str_fol": "\u00acinspire_colleagues(Kinley)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Kinley",
            "text": "Kinley faces challenges.",
            "fol": "p_2(Kinley)",
            "str_fol": "face_challenges(Kinley)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Kinley",
            "text": "Kinley does not show empathy.",
            "fol": "\u00acp_3(Kinley)",
            "str_fol": "\u00acshow_empathy(Kinley)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Kinley",
            "text": "Kinley is compassionate.",
            "fol": "p_9(Kinley)",
            "str_fol": "is_compassionate(Kinley)",
            "negation": false
        },
        {
            "id": 5,
            "subject": "Kinley",
            "text": "Kinley is not selfless.",
            "fol": "\u00acp_10(Kinley)",
            "str_fol": "\u00acis_selfless(Kinley)",
            "negation": true
        },
        {
            "id": 6,
            "subject": "Kinley",
            "text": "Kinley cares deeply.",
            "fol": "p_7(Kinley)",
            "str_fol": "care_deeply(Kinley)",
            "negation": false
        },
        {
            "id": 7,
            "subject": "Kinley",
            "text": "Kinley earns recognition.",
            "fol": "p_6(Kinley)",
            "str_fol": "earn_recognition(Kinley)",
            "negation": false
        },
        {
            "id": 8,
            "subject": "Kinley",
            "text": "Kinley is a dedicated doctor.",
            "fol": "p_4(Kinley)",
            "str_fol": "dedicated_doctor(Kinley)",
            "negation": false
        },
        {
            "id": 9,
            "subject": "Kinley",
            "text": "Kinley does not save lives.",
            "fol": "\u00acp_5(Kinley)",
            "str_fol": "\u00acsave_lives(Kinley)",
            "negation": true
        }
    ],
    "context_facts": [
        {
            "id": 2,
            "subject": "Kinley",
            "text": "Kinley faces challenges.",
            "fol": "p_2(Kinley)",
            "str_fol": "face_challenges(Kinley)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Kinley",
            "text": "Kinley does not show empathy.",
            "fol": "\u00acp_3(Kinley)",
            "str_fol": "\u00acshow_empathy(Kinley)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Kinley",
            "text": "Kinley does not inspire her colleagues.",
            "fol": "\u00acp_1(Kinley)",
            "str_fol": "\u00acinspire_colleagues(Kinley)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Kinley",
            "text": "Kinley does not help others.",
            "fol": "\u00acp_0(Kinley)",
            "str_fol": "\u00achelp_others(Kinley)",
            "negation": true
        }
    ],
    "context_rules": [
        {
            "id": 5,
            "text": "If Kinley faces challenges, then she is either compassionate or shows empathy (or both).",
            "fol": "p_2(Kinley) \u2192 (p_9(Kinley) \u2228 p_3(Kinley))",
            "str_fol": "face_challenges(Kinley) \u2192 (is_compassionate(Kinley) \u2228 show_empathy(Kinley))"
        },
        {
            "id": 4,
            "text": "Anyone who is selfless or stays calm can inspire their colleagues.",
            "fol": "\u2200x ((p_10(x) \u2228 p_11(x)) \u2192 p_1(x))",
            "str_fol": "\u2200x ((is_selfless(x) \u2228 stay_calm(x)) \u2192 inspire_colleagues(x))"
        },
        {
            "id": 3,
            "text": "If Kinley is compassionate, then she either cares deeply or is selfless, but not both.",
            "fol": "p_9(Kinley) \u2192 (p_7(Kinley) \u2295 p_10(Kinley))",
            "str_fol": "is_compassionate(Kinley) \u2192 (care_deeply(Kinley) \u2295 is_selfless(Kinley))"
        },
        {
            "id": 2,
            "text": "Kinley either helps others or earns recognition.",
            "fol": "p_0(Kinley) \u2228 p_6(Kinley)",
            "str_fol": "help_others(Kinley) \u2228 earn_recognition(Kinley)"
        },
        {
            "id": 1,
            "text": "If Kinley cares deeply, then she is a dedicated doctor and works tirelessly.",
            "fol": "p_7(Kinley) \u2192 (p_4(Kinley) \u2227 p_8(Kinley))",
            "str_fol": "care_deeply(Kinley) \u2192 (dedicated_doctor(Kinley) \u2227 work_tirelessly(Kinley))"
        },
        {
            "id": 0,
            "text": "If Kinley is a dedicated doctor, then she saves lives and earns recognition.",
            "fol": "p_4(Kinley) \u2192 (p_5(Kinley) \u2227 p_6(Kinley))",
            "str_fol": "dedicated_doctor(Kinley) \u2192 (save_lives(Kinley) \u2227 earn_recognition(Kinley))"
        }
    ],
    "context": [
        {
            "id": 2,
            "subject": "Kinley",
            "text": "Kinley faces challenges.",
            "fol": "p_2(Kinley)",
            "str_fol": "face_challenges(Kinley)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Kinley",
            "text": "Kinley does not show empathy.",
            "fol": "\u00acp_3(Kinley)",
            "str_fol": "\u00acshow_empathy(Kinley)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Kinley",
            "text": "Kinley does not inspire her colleagues.",
            "fol": "\u00acp_1(Kinley)",
            "str_fol": "\u00acinspire_colleagues(Kinley)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Kinley",
            "text": "Kinley does not help others.",
            "fol": "\u00acp_0(Kinley)",
            "str_fol": "\u00achelp_others(Kinley)",
            "negation": true
        },
        {
            "id": 5,
            "text": "If Kinley faces challenges, then she is either compassionate or shows empathy (or both).",
            "fol": "p_2(Kinley) \u2192 (p_9(Kinley) \u2228 p_3(Kinley))",
            "str_fol": "face_challenges(Kinley) \u2192 (is_compassionate(Kinley) \u2228 show_empathy(Kinley))"
        },
        {
            "id": 4,
            "text": "Anyone who is selfless or stays calm can inspire their colleagues.",
            "fol": "\u2200x ((p_10(x) \u2228 p_11(x)) \u2192 p_1(x))",
            "str_fol": "\u2200x ((is_selfless(x) \u2228 stay_calm(x)) \u2192 inspire_colleagues(x))"
        },
        {
            "id": 3,
            "text": "If Kinley is compassionate, then she either cares deeply or is selfless, but not both.",
            "fol": "p_9(Kinley) \u2192 (p_7(Kinley) \u2295 p_10(Kinley))",
            "str_fol": "is_compassionate(Kinley) \u2192 (care_deeply(Kinley) \u2295 is_selfless(Kinley))"
        },
        {
            "id": 2,
            "text": "Kinley either helps others or earns recognition.",
            "fol": "p_0(Kinley) \u2228 p_6(Kinley)",
            "str_fol": "help_others(Kinley) \u2228 earn_recognition(Kinley)"
        },
        {
            "id": 1,
            "text": "If Kinley cares deeply, then she is a dedicated doctor and works tirelessly.",
            "fol": "p_7(Kinley) \u2192 (p_4(Kinley) \u2227 p_8(Kinley))",
            "str_fol": "care_deeply(Kinley) \u2192 (dedicated_doctor(Kinley) \u2227 work_tirelessly(Kinley))"
        },
        {
            "id": 0,
            "text": "If Kinley is a dedicated doctor, then she saves lives and earns recognition.",
            "fol": "p_4(Kinley) \u2192 (p_5(Kinley) \u2227 p_6(Kinley))",
            "str_fol": "dedicated_doctor(Kinley) \u2192 (save_lives(Kinley) \u2227 earn_recognition(Kinley))"
        }
    ],
    "context_fol": "p_2(Kinley)\n\u00acp_3(Kinley)\n\u00acp_1(Kinley)\n\u00acp_0(Kinley)\np_2(Kinley) \u2192 (p_9(Kinley) \u2228 p_3(Kinley))\n\u2200x ((p_10(x) \u2228 p_11(x)) \u2192 p_1(x))\np_9(Kinley) \u2192 (p_7(Kinley) \u2295 p_10(Kinley))\np_0(Kinley) \u2228 p_6(Kinley)\np_7(Kinley) \u2192 (p_4(Kinley) \u2227 p_8(Kinley))\np_4(Kinley) \u2192 (p_5(Kinley) \u2227 p_6(Kinley))",
    "conclusion": {
        "id": 9,
        "subject": "Kinley",
        "text": "Kinley does not save lives.",
        "fol": "\u00acp_5(Kinley)",
        "str_fol": "\u00acsave_lives(Kinley)",
        "negation": true
    },
    "initial_answer": "False",
    "initial_goal": "\u00acp_5(Kinley)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 2,
                    "subject": "Kinley",
                    "text": "Kinley faces challenges.",
                    "fol": "p_2(Kinley)",
                    "str_fol": "face_challenges(Kinley)",
                    "negation": false
                },
                {
                    "id": 3,
                    "subject": "Kinley",
                    "text": "Kinley does not show empathy.",
                    "fol": "\u00acp_3(Kinley)",
                    "str_fol": "\u00acshow_empathy(Kinley)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "If Kinley faces challenges, then she is either compassionate or shows empathy (or both).",
                    "fol": "p_2(Kinley) \u2192 (p_9(Kinley) \u2228 p_3(Kinley))",
                    "str_fol": "face_challenges(Kinley) \u2192 (is_compassionate(Kinley) \u2228 show_empathy(Kinley))"
                }
            ],
            "conclusion": {
                "id": 4,
                "subject": "Kinley",
                "text": "Kinley is compassionate.",
                "fol": "p_9(Kinley)",
                "str_fol": "is_compassionate(Kinley)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 1,
                    "subject": "Kinley",
                    "text": "Kinley does not inspire her colleagues.",
                    "fol": "\u00acp_1(Kinley)",
                    "str_fol": "\u00acinspire_colleagues(Kinley)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "Anyone who is selfless or stays calm can inspire their colleagues.",
                    "fol": "\u2200x ((p_10(x) \u2228 p_11(x)) \u2192 p_1(x))",
                    "str_fol": "\u2200x ((is_selfless(x) \u2228 stay_calm(x)) \u2192 inspire_colleagues(x))"
                }
            ],
            "conclusion": {
                "id": 5,
                "subject": "Kinley",
                "text": "Kinley is not selfless.",
                "fol": "\u00acp_10(Kinley)",
                "str_fol": "\u00acis_selfless(Kinley)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 4,
                    "subject": "Kinley",
                    "text": "Kinley is compassionate.",
                    "fol": "p_9(Kinley)",
                    "str_fol": "is_compassionate(Kinley)",
                    "negation": false
                },
                {
                    "id": 5,
                    "subject": "Kinley",
                    "text": "Kinley is not selfless.",
                    "fol": "\u00acp_10(Kinley)",
                    "str_fol": "\u00acis_selfless(Kinley)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "If Kinley is compassionate, then she either cares deeply or is selfless, but not both.",
                    "fol": "p_9(Kinley) \u2192 (p_7(Kinley) \u2295 p_10(Kinley))",
                    "str_fol": "is_compassionate(Kinley) \u2192 (care_deeply(Kinley) \u2295 is_selfless(Kinley))"
                }
            ],
            "conclusion": {
                "id": 6,
                "subject": "Kinley",
                "text": "Kinley cares deeply.",
                "fol": "p_7(Kinley)",
                "str_fol": "care_deeply(Kinley)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 0,
                    "subject": "Kinley",
                    "text": "Kinley does not help others.",
                    "fol": "\u00acp_0(Kinley)",
                    "str_fol": "\u00achelp_others(Kinley)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "Kinley either helps others or earns recognition.",
                    "fol": "p_0(Kinley) \u2228 p_6(Kinley)",
                    "str_fol": "help_others(Kinley) \u2228 earn_recognition(Kinley)"
                }
            ],
            "conclusion": {
                "id": 7,
                "subject": "Kinley",
                "text": "Kinley earns recognition.",
                "fol": "p_6(Kinley)",
                "str_fol": "earn_recognition(Kinley)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 6,
                    "subject": "Kinley",
                    "text": "Kinley cares deeply.",
                    "fol": "p_7(Kinley)",
                    "str_fol": "care_deeply(Kinley)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "If Kinley cares deeply, then she is a dedicated doctor and works tirelessly.",
                    "fol": "p_7(Kinley) \u2192 (p_4(Kinley) \u2227 p_8(Kinley))",
                    "str_fol": "care_deeply(Kinley) \u2192 (dedicated_doctor(Kinley) \u2227 work_tirelessly(Kinley))"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Kinley",
                "text": "Kinley is a dedicated doctor.",
                "fol": "p_4(Kinley)",
                "str_fol": "dedicated_doctor(Kinley)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 8,
                    "subject": "Kinley",
                    "text": "Kinley is a dedicated doctor.",
                    "fol": "p_4(Kinley)",
                    "str_fol": "dedicated_doctor(Kinley)",
                    "negation": false
                },
                {
                    "id": 7,
                    "subject": "Kinley",
                    "text": "Kinley earns recognition.",
                    "fol": "p_6(Kinley)",
                    "str_fol": "earn_recognition(Kinley)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "If Kinley is a dedicated doctor, then she saves lives and earns recognition.",
                    "fol": "p_4(Kinley) \u2192 (p_5(Kinley) \u2227 p_6(Kinley))",
                    "str_fol": "dedicated_doctor(Kinley) \u2192 (save_lives(Kinley) \u2227 earn_recognition(Kinley))"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Kinley",
                "text": "Kinley does not save lives.",
                "fol": "\u00acp_5(Kinley)",
                "str_fol": "\u00acsave_lives(Kinley)",
                "negation": true
            }
        }
    ],
    "proof_trace": "1 p_2(Kinley) -> p_9(Kinley) | p_3(Kinley).  [assumption].\n2 (all x (p_10(x) | p_11(x) -> p_1(x))).  [assumption].\n3 p_9(Kinley) -> -(p_7(Kinley) <-> p_10(Kinley)).  [assumption].\n4 p_7(Kinley) -> p_4(Kinley) & p_8(Kinley).  [assumption].\n5 p_4(Kinley) -> p_5(Kinley) & p_6(Kinley).  [assumption].\n6 --p_5(Kinley).  [goal].\n7 -p_2(Kinley) | p_9(Kinley) | p_3(Kinley).  [clausify(1)].\n8 p_2(Kinley).  [assumption].\n9 p_9(Kinley) | p_3(Kinley).  [resolve(7,a,8,a)].\n10 -p_3(Kinley).  [assumption].\n11 -p_10(x) | p_1(x).  [clausify(2)].\n12 -p_1(Kinley).  [assumption].\n16 p_9(Kinley).  [resolve(9,b,10,a)].\n17 -p_9(Kinley) | p_7(Kinley) | p_10(Kinley).  [clausify(3)].\n19 p_7(Kinley) | p_10(Kinley).  [resolve(16,a,17,a)].\n20 -p_7(Kinley) | p_4(Kinley).  [clausify(4)].\n22 p_10(Kinley) | p_4(Kinley).  [resolve(19,a,20,a)].\n23 -p_4(Kinley) | p_5(Kinley).  [clausify(5)].\n25 p_10(Kinley) | p_5(Kinley).  [resolve(22,b,23,a)].\n26 -p_5(Kinley).  [deny(6)].\n28 -p_10(Kinley).  [resolve(11,b,12,a)].\n30 p_10(Kinley).  [resolve(25,b,26,a)].\n31 $F.  [resolve(30,a,28,a)].",
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_2(Kinley)\n\u00acp_3(Kinley)\n\u00acp_1(Kinley)\n\u00acp_0(Kinley)\np_2(Kinley) \u2192 (p_9(Kinley) \u2228 p_3(Kinley))\n\u2200x (p_10(x) \u2192 p_1(x)) \u2227 \u2200x (p_11(x) \u2192 p_1(x))\np_9(Kinley) \u2192 (p_7(Kinley) \u2295 p_10(Kinley))\np_0(Kinley) \u2228 p_6(Kinley)\np_7(Kinley)\np_7(Kinley) \u2192 (p_4(Kinley) \u2227 p_8(Kinley))\np_4(Kinley) \u2192 (p_5(Kinley) \u2227 p_6(Kinley))",
            "Initial Goal": "\u00acp_5(Kinley)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_2(Kinley)",
                    "-p_3(Kinley)",
                    "-p_1(Kinley)",
                    "-p_0(Kinley)",
                    "p_2(Kinley) -> (p_9(Kinley) | p_3(Kinley))",
                    "(all x (p_10(x) -> p_1(x))) & (all x (p_11(x) -> p_1(x)))",
                    "p_9(Kinley) -> (-(p_7(Kinley) <-> p_10(Kinley)))",
                    "p_0(Kinley) | p_6(Kinley)",
                    "p_7(Kinley)",
                    "p_7(Kinley) -> (p_4(Kinley) & p_8(Kinley))",
                    "p_4(Kinley) -> (p_5(Kinley) & p_6(Kinley))"
                ],
                "formulas(goals)": [
                    "p_5(Kinley)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u2200x ((p_10(x) \u2228 p_11(x)) \u2192 p_1(x))"
                ],
                "added_facts": [
                    "p_7(Kinley)"
                ],
                "added_rules": [
                    "\u2200x (p_10(x) \u2192 p_1(x)) \u2227 \u2200x (p_11(x) \u2192 p_1(x))"
                ]
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_2(Kinley)\n\u00acp_3(Kinley)\n\u00acp_1(Kinley)\n\u00acp_0(Kinley)\np_2(Kinley) \u2192 (p_9(Kinley) \u2228 p_3(Kinley))\n\u2200x (p_10(x) \u2192 p_1(x))\n\u2200x (p_11(x) \u2192 p_1(x))\np_9(Kinley) \u2192 (p_7(Kinley) \u2295 p_10(Kinley))\np_0(Kinley) \u2228 p_6(Kinley)\np_7(Kinley)\np_7(Kinley) \u2192 (p_4(Kinley) \u2227 p_8(Kinley))\np_4(Kinley) \u2192 (p_5(Kinley) \u2227 p_6(Kinley))\np_5(Kinley)\np_4(Kinley) \u2192 p_5(Kinley)\np_4(Kinley) \u2192 p_6(Kinley)\np_8(Kinley)\np_6(Kinley)\np_7(Kinley) \u2192 p_4(Kinley)\np_7(Kinley) \u2192 p_8(Kinley)\np_4(Kinley)",
            "Initial Goal": "\u00acp_5(Kinley)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_2(Kinley)",
                    "-p_3(Kinley)",
                    "-p_1(Kinley)",
                    "-p_0(Kinley)",
                    "p_2(Kinley) -> (p_9(Kinley) | p_3(Kinley))",
                    "all x (p_10(x) -> p_1(x))",
                    "all x (p_11(x) -> p_1(x))",
                    "p_9(Kinley) -> (-(p_7(Kinley) <-> p_10(Kinley)))",
                    "p_0(Kinley) | p_6(Kinley)",
                    "p_7(Kinley)",
                    "p_7(Kinley) -> (p_4(Kinley) & p_8(Kinley))",
                    "p_4(Kinley) -> (p_5(Kinley) & p_6(Kinley))",
                    "p_5(Kinley)",
                    "p_4(Kinley) -> p_5(Kinley)",
                    "p_4(Kinley) -> p_6(Kinley)",
                    "p_8(Kinley)",
                    "p_6(Kinley)",
                    "p_7(Kinley) -> p_4(Kinley)",
                    "p_7(Kinley) -> p_8(Kinley)",
                    "p_4(Kinley)"
                ],
                "formulas(goals)": [
                    "--p_5(Kinley)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_5(Kinley)",
                    "p_8(Kinley)",
                    "p_6(Kinley)",
                    "p_4(Kinley)"
                ],
                "added_rules": [
                    "p_4(Kinley) \u2192 p_5(Kinley)",
                    "p_4(Kinley) \u2192 p_6(Kinley)",
                    "p_7(Kinley) \u2192 p_4(Kinley)",
                    "p_7(Kinley) \u2192 p_8(Kinley)"
                ]
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_2(Kinley)\n\u00acp_3(Kinley)\n\u00acp_1(Kinley)\n\u00acp_0(Kinley)\np_2(Kinley) \u2192 (p_9(Kinley) \u2228 p_3(Kinley))\n\u2200x (p_10(x) \u2192 p_1(x))\n\u2200x (p_11(x) \u2192 p_1(x))\np_9(Kinley) \u2192 (p_7(Kinley) \u2295 p_10(Kinley))\np_0(Kinley) \u2228 p_6(Kinley)\np_7(Kinley)\np_7(Kinley) \u2192 (p_4(Kinley) \u2227 p_8(Kinley))\np_4(Kinley) \u2192 p_5(Kinley)\np_4(Kinley) \u2192 p_6(Kinley)\np_8(Kinley)\np_6(Kinley)\np_7(Kinley) \u2192 p_4(Kinley)\np_7(Kinley) \u2192 p_8(Kinley)\np_4(Kinley)\np_4(Kinley) \u2192 \u00acp_5(Kinley)",
            "Initial Goal": "\u00acp_5(Kinley)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_2(Kinley).",
                    "-p_3(Kinley).",
                    "-p_1(Kinley).",
                    "-p_0(Kinley).",
                    "p_2(Kinley) -> (p_9(Kinley) | p_3(Kinley)).",
                    "all x (p_10(x) -> p_1(x)).",
                    "all x (p_11(x) -> p_1(x)).",
                    "p_9(Kinley) -> (-(p_7(Kinley) <-> p_10(Kinley))).",
                    "p_0(Kinley) | p_6(Kinley).",
                    "p_7(Kinley).",
                    "p_7(Kinley) -> (p_4(Kinley) & p_8(Kinley)).",
                    "p_4(Kinley) -> p_5(Kinley).",
                    "p_4(Kinley) -> p_6(Kinley).",
                    "p_8(Kinley).",
                    "p_6(Kinley).",
                    "p_7(Kinley) -> p_4(Kinley).",
                    "p_7(Kinley) -> p_8(Kinley).",
                    "p_4(Kinley).",
                    "p_4(Kinley) -> -p_5(Kinley)."
                ],
                "formulas(goals)": [
                    "-p_5(Kinley)."
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "p_5(Kinley)"
                ],
                "removed_rules": [
                    "p_4(Kinley) \u2192 (p_5(Kinley) \u2227 p_6(Kinley))"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_4(Kinley) \u2192 \u00acp_5(Kinley)"
                ]
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_2(Kinley)\n\u00acp_3(Kinley)\n\u00acp_1(Kinley)\n\u00acp_0(Kinley)\np_2(Kinley) \u2192 (p_9(Kinley) \u2228 p_3(Kinley))\n\u2200x (p_10(x) \u2192 p_1(x))\n\u2200x (p_11(x) \u2192 p_1(x))\np_9(Kinley) \u2192 (p_7(Kinley) \u2295 p_10(Kinley))\np_0(Kinley) \u2228 p_6(Kinley)\np_7(Kinley)\np_7(Kinley) \u2192 (p_4(Kinley) \u2227 p_8(Kinley))\np_4(Kinley) \u2192 p_5(Kinley)\np_4(Kinley) \u2192 p_6(Kinley)\np_8(Kinley)\np_6(Kinley)\np_7(Kinley) \u2192 p_4(Kinley)\np_7(Kinley) \u2192 p_8(Kinley)\np_4(Kinley)\np_7(Kinley) \u2192 p_5(Kinley)",
            "Initial Goal": "\u00acp_5(Kinley)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_2(Kinley)",
                    "-p_3(Kinley)",
                    "-p_1(Kinley)",
                    "-p_0(Kinley)",
                    "p_2(Kinley) -> (p_9(Kinley) | p_3(Kinley))",
                    "all x (p_10(x) -> p_1(x))",
                    "all x (p_11(x) -> p_1(x))",
                    "p_9(Kinley) -> (-(p_7(Kinley) <-> p_10(Kinley)))",
                    "p_0(Kinley) | p_6(Kinley)",
                    "p_7(Kinley)",
                    "p_7(Kinley) -> (p_4(Kinley) & p_8(Kinley))",
                    "p_4(Kinley) -> p_5(Kinley)",
                    "p_4(Kinley) -> p_6(Kinley)",
                    "p_8(Kinley)",
                    "p_6(Kinley)",
                    "p_7(Kinley) -> p_4(Kinley)",
                    "p_7(Kinley) -> p_8(Kinley)",
                    "p_4(Kinley)",
                    "p_7(Kinley) -> p_5(Kinley)"
                ],
                "formulas(goals)": [
                    "-(-p_5(Kinley))"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "p_4(Kinley) \u2192 \u00acp_5(Kinley)"
                ],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "p_7(Kinley) \u2192 p_5(Kinley)"
                ]
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_2(Kinley)\n\u00acp_3(Kinley)\n\u00acp_1(Kinley)\n\u00acp_0(Kinley)\np_2(Kinley) \u2192 (p_9(Kinley) \u2228 p_3(Kinley))\n\u2200x (p_10(x) \u2192 p_1(x))\n\u2200x (p_11(x) \u2192 p_1(x))\np_9(Kinley) \u2192 (p_7(Kinley) \u2295 p_10(Kinley))\np_0(Kinley) \u2228 p_6(Kinley)\np_7(Kinley)\np_7(Kinley) \u2192 (p_4(Kinley) \u2227 p_8(Kinley))\np_4(Kinley) \u2192 p_6(Kinley)\np_8(Kinley)\np_6(Kinley)\np_7(Kinley) \u2192 p_4(Kinley)\np_7(Kinley) \u2192 p_8(Kinley)\np_4(Kinley)\np_6(Kinley) \u2192 \u00acp_5(Kinley)",
            "Initial Goal": "\u00acp_5(Kinley)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_2(Kinley)",
                    "-p_3(Kinley)",
                    "-p_1(Kinley)",
                    "-p_0(Kinley)",
                    "p_2(Kinley) -> (p_9(Kinley) | p_3(Kinley))",
                    "all x (p_10(x) -> p_1(x))",
                    "all x (p_11(x) -> p_1(x))",
                    "p_9(Kinley) -> (-(p_7(Kinley) <-> p_10(Kinley)))",
                    "p_0(Kinley) | p_6(Kinley)",
                    "p_7(Kinley)",
                    "p_7(Kinley) -> (p_4(Kinley) & p_8(Kinley))",
                    "p_4(Kinley) -> p_6(Kinley)",
                    "p_8(Kinley)",
                    "p_6(Kinley)",
                    "p_7(Kinley) -> p_4(Kinley)",
                    "p_7(Kinley) -> p_8(Kinley)",
                    "p_4(Kinley)",
                    "p_6(Kinley) -> -p_5(Kinley)"
                ],
                "formulas(goals)": [
                    "-p_5(Kinley)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_4(Kinley) \u2192 p_5(Kinley)",
                    "p_7(Kinley) \u2192 p_5(Kinley)"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_6(Kinley) \u2192 \u00acp_5(Kinley)"
                ]
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_2(Kinley)\n\u00acp_3(Kinley)\n\u00acp_1(Kinley)\n\u00acp_0(Kinley)\np_2(Kinley) \u2192 (p_9(Kinley) \u2228 p_3(Kinley))\n\u2200x (p_10(x) \u2192 p_1(x))\n\u2200x (p_11(x) \u2192 p_1(x))\np_9(Kinley) \u2192 (p_7(Kinley) \u2295 p_10(Kinley))\np_0(Kinley) \u2228 p_6(Kinley)\np_7(Kinley)\np_7(Kinley) \u2192 (p_4(Kinley) \u2227 p_8(Kinley))\np_4(Kinley) \u2192 p_6(Kinley)\np_8(Kinley)\np_6(Kinley)\np_7(Kinley) \u2192 p_4(Kinley)\np_7(Kinley) \u2192 p_8(Kinley)\np_4(Kinley)\np_6(Kinley) \u2192 \u00acp_5(Kinley)\np_0(Kinley) \u2228 p_6(Kinley) \u2228 p_5(Kinley)",
            "Initial Goal": "\u00acp_5(Kinley)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_2(Kinley)",
                    "-p_3(Kinley)",
                    "-p_1(Kinley)",
                    "-p_0(Kinley)",
                    "p_2(Kinley) -> (p_9(Kinley) | p_3(Kinley))",
                    "all x (p_10(x) -> p_1(x))",
                    "all x (p_11(x) -> p_1(x))",
                    "p_9(Kinley) -> (-(p_7(Kinley) <-> p_10(Kinley)))",
                    "p_0(Kinley) | p_6(Kinley)",
                    "p_7(Kinley)",
                    "p_7(Kinley) -> (p_4(Kinley) & p_8(Kinley))",
                    "p_4(Kinley) -> p_6(Kinley)",
                    "p_8(Kinley)",
                    "p_6(Kinley)",
                    "p_7(Kinley) -> p_4(Kinley)",
                    "p_7(Kinley) -> p_8(Kinley)",
                    "p_4(Kinley)",
                    "p_6(Kinley) -> -p_5(Kinley)",
                    "p_0(Kinley) | p_6(Kinley) | p_5(Kinley)"
                ],
                "formulas(goals)": [
                    "-p_5(Kinley)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_0(Kinley) \u2228 p_6(Kinley) \u2228 p_5(Kinley)"
                ],
                "added_rules": []
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_2(Kinley)\n\u00acp_3(Kinley)\n\u00acp_1(Kinley)\n\u00acp_0(Kinley)\np_2(Kinley) \u2192 (p_9(Kinley) \u2228 p_3(Kinley))\n\u2200x (p_10(x) \u2192 p_1(x))\n\u2200x (p_11(x) \u2192 p_1(x))\np_9(Kinley) \u2192 (p_7(Kinley) \u2295 p_10(Kinley))\np_7(Kinley)\np_7(Kinley) \u2192 (p_4(Kinley) \u2227 p_8(Kinley))\np_8(Kinley)\np_7(Kinley) \u2192 p_4(Kinley)\np_7(Kinley) \u2192 p_8(Kinley)\np_4(Kinley)\np_0(Kinley) \u2228 p_6(Kinley) \u2228 p_5(Kinley)\np_4(Kinley) \u2192 \u00acp_6(Kinley)",
            "Initial Goal": "\u00acp_5(Kinley)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_2(Kinley)",
                    "-p_3(Kinley)",
                    "-p_1(Kinley)",
                    "-p_0(Kinley)",
                    "p_2(Kinley) -> (p_9(Kinley) | p_3(Kinley))",
                    "all x (p_10(x) -> p_1(x))",
                    "all x (p_11(x) -> p_1(x))",
                    "p_9(Kinley) -> (-(p_7(Kinley) <-> p_10(Kinley)))",
                    "p_7(Kinley)",
                    "p_7(Kinley) -> (p_4(Kinley) & p_8(Kinley))",
                    "p_8(Kinley)",
                    "p_7(Kinley) -> p_4(Kinley)",
                    "p_7(Kinley) -> p_8(Kinley)",
                    "p_4(Kinley)",
                    "p_0(Kinley) | p_6(Kinley) | p_5(Kinley)",
                    "p_4(Kinley) -> -p_6(Kinley)"
                ],
                "formulas(goals)": [
                    "p_5(Kinley)"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "p_6(Kinley)"
                ],
                "removed_rules": [
                    "p_6(Kinley) \u2192 \u00acp_5(Kinley)",
                    "p_4(Kinley) \u2192 p_6(Kinley)",
                    "p_0(Kinley) \u2228 p_6(Kinley)"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_4(Kinley) \u2192 \u00acp_6(Kinley)"
                ]
            }
        }
    ]
}