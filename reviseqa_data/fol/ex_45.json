{
    "background_story": "Kennedi was a promising young athlete, dominating in the sprinting events on her college track team. However, her remarkable performance caught the attention of doping officials, who launched an investigation into her rapid improvement. Tests revealed that Kennedi had been unknowingly taking supplements contaminated with methyltestosterone, a banned anabolic steroid. Despite her innocence, Kennedi faced a lengthy suspension, a devastating blow to her athletic career. With the support of her family and coaches, Kennedi worked tirelessly to clear her name and rebuild her strength. She eventually returned to competition, wiser and more cautious about her training regimen. Kennedi's experience served as a cautionary tale about the importance of vigilant monitoring of athletic supplements and the harsh consequences of unintentional doping.",
    "predicates": [
        {
            "id": 0,
            "name": "checks_ingredients"
        },
        {
            "id": 1,
            "name": "eats_clean"
        },
        {
            "id": 2,
            "name": "wins_events"
        },
        {
            "id": 3,
            "name": "stays_eligible"
        },
        {
            "id": 4,
            "name": "obeys_law"
        },
        {
            "id": 5,
            "name": "keeps_reputation"
        },
        {
            "id": 6,
            "name": "trains_hard"
        },
        {
            "id": 7,
            "name": "monitors_supplements"
        },
        {
            "id": 8,
            "name": "reads_labels"
        },
        {
            "id": 9,
            "name": "takes_supplements"
        },
        {
            "id": 10,
            "name": "follows_rules"
        },
        {
            "id": 11,
            "name": "avoids_steroids"
        },
        {
            "id": 12,
            "name": "tracks_nutrition"
        },
        {
            "id": 13,
            "name": "researches_products"
        },
        {
            "id": 14,
            "name": "uses_nutritionist"
        },
        {
            "id": 15,
            "name": "sets_goals"
        },
        {
            "id": 16,
            "name": "tracks_progress"
        },
        {
            "id": 17,
            "name": "boosts_performance"
        },
        {
            "id": 18,
            "name": "gains_strength"
        },
        {
            "id": 19,
            "name": "reads_guidelines"
        },
        {
            "id": 20,
            "name": "reports_usage"
        },
        {
            "id": 21,
            "name": "gets_tested"
        },
        {
            "id": 22,
            "name": "discloses_medication"
        }
    ],
    "subject_name": "Kennedi",
    "subject_category": "athlete",
    "keyword": "methyltestosterone",
    "all_facts": [
        {
            "id": 0,
            "subject": "Kennedi",
            "text": "Kennedi does not check the ingredients.",
            "fol": "\u00acp_0(Kennedi)",
            "str_fol": "\u00acchecks_ingredients(Kennedi)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Kennedi",
            "text": "Kennedi does not eat clean.",
            "fol": "\u00acp_1(Kennedi)",
            "str_fol": "\u00aceats_clean(Kennedi)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Kennedi",
            "text": "Kennedi does not win events.",
            "fol": "\u00acp_2(Kennedi)",
            "str_fol": "\u00acwins_events(Kennedi)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Kennedi",
            "text": "Kennedi does not stay eligible to compete.",
            "fol": "\u00acp_3(Kennedi)",
            "str_fol": "\u00acstays_eligible(Kennedi)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Kennedi",
            "text": "Kennedi obeys the law.",
            "fol": "p_4(Kennedi)",
            "str_fol": "obeys_law(Kennedi)",
            "negation": false
        },
        {
            "id": 5,
            "subject": "Kennedi",
            "text": "Kennedi does not keep her reputation.",
            "fol": "\u00acp_5(Kennedi)",
            "str_fol": "\u00ackeeps_reputation(Kennedi)",
            "negation": true
        },
        {
            "id": 6,
            "subject": "Kennedi",
            "text": "Kennedi does not avoid steroids.",
            "fol": "\u00acp_11(Kennedi)",
            "str_fol": "\u00acavoids_steroids(Kennedi)",
            "negation": true
        },
        {
            "id": 7,
            "subject": "Kennedi",
            "text": "Kennedi does not follow the rules.",
            "fol": "\u00acp_10(Kennedi)",
            "str_fol": "\u00acfollows_rules(Kennedi)",
            "negation": true
        },
        {
            "id": 8,
            "subject": "Kennedi",
            "text": "Kennedi takes supplements.",
            "fol": "p_9(Kennedi)",
            "str_fol": "takes_supplements(Kennedi)",
            "negation": false
        },
        {
            "id": 9,
            "subject": "Kennedi",
            "text": "Kennedi trains hard.",
            "fol": "p_6(Kennedi)",
            "str_fol": "trains_hard(Kennedi)",
            "negation": false
        },
        {
            "id": 10,
            "subject": "Kennedi",
            "text": "Kennedi reads labels.",
            "fol": "p_8(Kennedi)",
            "str_fol": "reads_labels(Kennedi)",
            "negation": false
        },
        {
            "id": 11,
            "subject": "Kennedi",
            "text": "Kennedi monitors her supplements.",
            "fol": "p_7(Kennedi)",
            "str_fol": "monitors_supplements(Kennedi)",
            "negation": false
        },
        {
            "id": 12,
            "subject": "Kennedi",
            "text": "Kennedi follows the rules and monitors her supplements.",
            "fol": "follows_rules(Kennedi) \u2227 p_7(Kennedi)",
            "str_fol": "follows_rules(Kennedi) \u2227 monitors_supplements(Kennedi)",
            "negation": false
        }
    ],
    "context_facts": [
        {
            "id": 4,
            "subject": "Kennedi",
            "text": "Kennedi obeys the law.",
            "fol": "p_4(Kennedi)",
            "str_fol": "obeys_law(Kennedi)",
            "negation": false
        },
        {
            "id": 5,
            "subject": "Kennedi",
            "text": "Kennedi does not keep her reputation.",
            "fol": "\u00acp_5(Kennedi)",
            "str_fol": "\u00ackeeps_reputation(Kennedi)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Kennedi",
            "text": "Kennedi does not stay eligible to compete.",
            "fol": "\u00acp_3(Kennedi)",
            "str_fol": "\u00acstays_eligible(Kennedi)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Kennedi",
            "text": "Kennedi does not eat clean.",
            "fol": "\u00acp_1(Kennedi)",
            "str_fol": "\u00aceats_clean(Kennedi)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Kennedi",
            "text": "Kennedi does not win events.",
            "fol": "\u00acp_2(Kennedi)",
            "str_fol": "\u00acwins_events(Kennedi)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Kennedi",
            "text": "Kennedi does not check the ingredients.",
            "fol": "\u00acp_0(Kennedi)",
            "str_fol": "\u00acchecks_ingredients(Kennedi)",
            "negation": true
        }
    ],
    "context_rules": [
        {
            "id": 5,
            "text": "If an athlete avoids steroids and obeys the law, then they keep their reputation.",
            "fol": "\u2200x ((p_11(x) \u2227 p_4(x)) \u2192 p_5(x))",
            "str_fol": "\u2200x ((avoids_steroids(x) \u2227 obeys_law(x)) \u2192 keeps_reputation(x))"
        },
        {
            "id": 4,
            "text": "For all athletes, if they either follow the rules or avoid steroids, then they stay eligible to compete.",
            "fol": "\u2200x ((p_10(x) \u2295 p_11(x)) \u2192 p_3(x))",
            "str_fol": "\u2200x ((follows_rules(x) \u2295 avoids_steroids(x)) \u2192 stays_eligible(x))"
        },
        {
            "id": 3,
            "text": "Kennedi either takes supplements or eats clean.",
            "fol": "p_9(Kennedi) \u2228 p_1(Kennedi)",
            "str_fol": "takes_supplements(Kennedi) \u2228 eats_clean(Kennedi)"
        },
        {
            "id": 2,
            "text": "Kennedi either trains hard or wins events.",
            "fol": "p_6(Kennedi) \u2228 p_2(Kennedi)",
            "str_fol": "trains_hard(Kennedi) \u2228 wins_events(Kennedi)"
        },
        {
            "id": 1,
            "text": "If Kennedi takes supplements, then she either checks the ingredients or reads labels.",
            "fol": "p_9(Kennedi) \u2192 (p_0(Kennedi) \u2228 p_8(Kennedi))",
            "str_fol": "takes_supplements(Kennedi) \u2192 (checks_ingredients(Kennedi) \u2228 reads_labels(Kennedi))"
        },
        {
            "id": 0,
            "text": "If Kennedi trains hard, then she monitors her supplements and reads labels.",
            "fol": "p_6(Kennedi) \u2192 (p_7(Kennedi) \u2227 p_8(Kennedi))",
            "str_fol": "trains_hard(Kennedi) \u2192 (monitors_supplements(Kennedi) \u2227 reads_labels(Kennedi))"
        }
    ],
    "context": [
        {
            "id": 4,
            "subject": "Kennedi",
            "text": "Kennedi obeys the law.",
            "fol": "p_4(Kennedi)",
            "str_fol": "obeys_law(Kennedi)",
            "negation": false
        },
        {
            "id": 5,
            "subject": "Kennedi",
            "text": "Kennedi does not keep her reputation.",
            "fol": "\u00acp_5(Kennedi)",
            "str_fol": "\u00ackeeps_reputation(Kennedi)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Kennedi",
            "text": "Kennedi does not stay eligible to compete.",
            "fol": "\u00acp_3(Kennedi)",
            "str_fol": "\u00acstays_eligible(Kennedi)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Kennedi",
            "text": "Kennedi does not eat clean.",
            "fol": "\u00acp_1(Kennedi)",
            "str_fol": "\u00aceats_clean(Kennedi)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Kennedi",
            "text": "Kennedi does not win events.",
            "fol": "\u00acp_2(Kennedi)",
            "str_fol": "\u00acwins_events(Kennedi)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Kennedi",
            "text": "Kennedi does not check the ingredients.",
            "fol": "\u00acp_0(Kennedi)",
            "str_fol": "\u00acchecks_ingredients(Kennedi)",
            "negation": true
        },
        {
            "id": 5,
            "text": "If an athlete avoids steroids and obeys the law, then they keep their reputation.",
            "fol": "\u2200x ((p_11(x) \u2227 p_4(x)) \u2192 p_5(x))",
            "str_fol": "\u2200x ((avoids_steroids(x) \u2227 obeys_law(x)) \u2192 keeps_reputation(x))"
        },
        {
            "id": 4,
            "text": "For all athletes, if they either follow the rules or avoid steroids, then they stay eligible to compete.",
            "fol": "\u2200x ((p_10(x) \u2295 p_11(x)) \u2192 p_3(x))",
            "str_fol": "\u2200x ((follows_rules(x) \u2295 avoids_steroids(x)) \u2192 stays_eligible(x))"
        },
        {
            "id": 3,
            "text": "Kennedi either takes supplements or eats clean.",
            "fol": "p_9(Kennedi) \u2228 p_1(Kennedi)",
            "str_fol": "takes_supplements(Kennedi) \u2228 eats_clean(Kennedi)"
        },
        {
            "id": 2,
            "text": "Kennedi either trains hard or wins events.",
            "fol": "p_6(Kennedi) \u2228 p_2(Kennedi)",
            "str_fol": "trains_hard(Kennedi) \u2228 wins_events(Kennedi)"
        },
        {
            "id": 1,
            "text": "If Kennedi takes supplements, then she either checks the ingredients or reads labels.",
            "fol": "p_9(Kennedi) \u2192 (p_0(Kennedi) \u2228 p_8(Kennedi))",
            "str_fol": "takes_supplements(Kennedi) \u2192 (checks_ingredients(Kennedi) \u2228 reads_labels(Kennedi))"
        },
        {
            "id": 0,
            "text": "If Kennedi trains hard, then she monitors her supplements and reads labels.",
            "fol": "p_6(Kennedi) \u2192 (p_7(Kennedi) \u2227 p_8(Kennedi))",
            "str_fol": "trains_hard(Kennedi) \u2192 (monitors_supplements(Kennedi) \u2227 reads_labels(Kennedi))"
        }
    ],
    "context_fol": "p_4(Kennedi)\n\u00acp_5(Kennedi)\n\u00acp_3(Kennedi)\n\u00acp_1(Kennedi)\n\u00acp_2(Kennedi)\n\u00acp_0(Kennedi)\n\u2200x ((p_11(x) \u2227 p_4(x)) \u2192 p_5(x))\n\u2200x ((p_10(x) \u2295 p_11(x)) \u2192 p_3(x))\np_9(Kennedi) \u2228 p_1(Kennedi)\np_6(Kennedi) \u2228 p_2(Kennedi)\np_9(Kennedi) \u2192 (p_0(Kennedi) \u2228 p_8(Kennedi))\np_6(Kennedi) \u2192 (p_7(Kennedi) \u2227 p_8(Kennedi))",
    "conclusion": {
        "id": 12,
        "text": "Kennedi follows the rules and monitors her supplements.",
        "fol": "p_10(Kennedi) \u2227 p_7(Kennedi)",
        "str_fol": "follows_rules(Kennedi) \u2227 monitors_supplements(Kennedi)"
    },
    "initial_answer": "False",
    "initial_goal": "p_10(Kennedi) \u2227 p_7(Kennedi)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 4,
                    "subject": "Kennedi",
                    "text": "Kennedi obeys the law.",
                    "fol": "p_4(Kennedi)",
                    "str_fol": "obeys_law(Kennedi)",
                    "negation": false
                },
                {
                    "id": 5,
                    "subject": "Kennedi",
                    "text": "Kennedi does not keep her reputation.",
                    "fol": "\u00acp_5(Kennedi)",
                    "str_fol": "\u00ackeeps_reputation(Kennedi)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "If an athlete avoids steroids and obeys the law, then they keep their reputation.",
                    "fol": "\u2200x ((p_11(x) \u2227 p_4(x)) \u2192 p_5(x))",
                    "str_fol": "\u2200x ((avoids_steroids(x) \u2227 obeys_law(x)) \u2192 keeps_reputation(x))"
                }
            ],
            "conclusion": {
                "id": 6,
                "subject": "Kennedi",
                "text": "Kennedi does not avoid steroids.",
                "fol": "\u00acp_11(Kennedi)",
                "str_fol": "\u00acavoids_steroids(Kennedi)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 6,
                    "subject": "Kennedi",
                    "text": "Kennedi does not avoid steroids.",
                    "fol": "\u00acp_11(Kennedi)",
                    "str_fol": "\u00acavoids_steroids(Kennedi)",
                    "negation": true
                },
                {
                    "id": 3,
                    "subject": "Kennedi",
                    "text": "Kennedi does not stay eligible to compete.",
                    "fol": "\u00acp_3(Kennedi)",
                    "str_fol": "\u00acstays_eligible(Kennedi)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "For all athletes, if they either follow the rules or avoid steroids, then they stay eligible to compete.",
                    "fol": "\u2200x ((p_10(x) \u2295 p_11(x)) \u2192 p_3(x))",
                    "str_fol": "\u2200x ((follows_rules(x) \u2295 avoids_steroids(x)) \u2192 stays_eligible(x))"
                }
            ],
            "conclusion": {
                "id": 7,
                "subject": "Kennedi",
                "text": "Kennedi does not follow the rules.",
                "fol": "\u00acp_10(Kennedi)",
                "str_fol": "\u00acfollows_rules(Kennedi)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 1,
                    "subject": "Kennedi",
                    "text": "Kennedi does not eat clean.",
                    "fol": "\u00acp_1(Kennedi)",
                    "str_fol": "\u00aceats_clean(Kennedi)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "Kennedi either takes supplements or eats clean.",
                    "fol": "p_9(Kennedi) \u2228 p_1(Kennedi)",
                    "str_fol": "takes_supplements(Kennedi) \u2228 eats_clean(Kennedi)"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Kennedi",
                "text": "Kennedi takes supplements.",
                "fol": "p_9(Kennedi)",
                "str_fol": "takes_supplements(Kennedi)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 2,
                    "subject": "Kennedi",
                    "text": "Kennedi does not win events.",
                    "fol": "\u00acp_2(Kennedi)",
                    "str_fol": "\u00acwins_events(Kennedi)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "Kennedi either trains hard or wins events.",
                    "fol": "p_6(Kennedi) \u2228 p_2(Kennedi)",
                    "str_fol": "trains_hard(Kennedi) \u2228 wins_events(Kennedi)"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Kennedi",
                "text": "Kennedi trains hard.",
                "fol": "p_6(Kennedi)",
                "str_fol": "trains_hard(Kennedi)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 8,
                    "subject": "Kennedi",
                    "text": "Kennedi takes supplements.",
                    "fol": "p_9(Kennedi)",
                    "str_fol": "takes_supplements(Kennedi)",
                    "negation": false
                },
                {
                    "id": 0,
                    "subject": "Kennedi",
                    "text": "Kennedi does not check the ingredients.",
                    "fol": "\u00acp_0(Kennedi)",
                    "str_fol": "\u00acchecks_ingredients(Kennedi)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "If Kennedi takes supplements, then she either checks the ingredients or reads labels.",
                    "fol": "p_9(Kennedi) \u2192 (p_0(Kennedi) \u2228 p_8(Kennedi))",
                    "str_fol": "takes_supplements(Kennedi) \u2192 (checks_ingredients(Kennedi) \u2228 reads_labels(Kennedi))"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Kennedi",
                "text": "Kennedi reads labels.",
                "fol": "p_8(Kennedi)",
                "str_fol": "reads_labels(Kennedi)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 9,
                    "subject": "Kennedi",
                    "text": "Kennedi trains hard.",
                    "fol": "p_6(Kennedi)",
                    "str_fol": "trains_hard(Kennedi)",
                    "negation": false
                },
                {
                    "id": 10,
                    "subject": "Kennedi",
                    "text": "Kennedi reads labels.",
                    "fol": "p_8(Kennedi)",
                    "str_fol": "reads_labels(Kennedi)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "If Kennedi trains hard, then she monitors her supplements and reads labels.",
                    "fol": "p_6(Kennedi) \u2192 (p_7(Kennedi) \u2227 p_8(Kennedi))",
                    "str_fol": "trains_hard(Kennedi) \u2192 (monitors_supplements(Kennedi) \u2227 reads_labels(Kennedi))"
                }
            ],
            "conclusion": {
                "id": 11,
                "subject": "Kennedi",
                "text": "Kennedi monitors her supplements.",
                "fol": "p_7(Kennedi)",
                "str_fol": "monitors_supplements(Kennedi)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 7,
                    "subject": "Kennedi",
                    "text": "Kennedi does not follow the rules.",
                    "fol": "\u00acp_10(Kennedi)",
                    "str_fol": "\u00acfollows_rules(Kennedi)",
                    "negation": true
                },
                {
                    "id": 11,
                    "subject": "Kennedi",
                    "text": "Kennedi monitors her supplements.",
                    "fol": "p_7(Kennedi)",
                    "str_fol": "monitors_supplements(Kennedi)",
                    "negation": false
                }
            ],
            "rules": [],
            "conclusion": {
                "id": 12,
                "text": "Kennedi follows the rules and monitors her supplements.",
                "fol": "p_10(Kennedi) \u2227 p_7(Kennedi)",
                "str_fol": "follows_rules(Kennedi) \u2227 monitors_supplements(Kennedi)"
            }
        }
    ],
    "proof_trace": "1 (all x (p_11(x) & p_4(x) -> p_5(x))).  [assumption].\n2 (all x (-(p_10(x) <-> p_11(x)) -> p_3(x))).  [assumption].\n5 -(p_10(Kennedi) & p_7(Kennedi)).  [goal].\n6 -p_11(x) | -p_4(x) | p_5(x).  [clausify(1)].\n7 p_4(Kennedi).  [assumption].\n8 -p_11(Kennedi) | p_5(Kennedi).  [resolve(6,b,7,a)].\n9 -p_5(Kennedi).  [assumption].\n10 -p_10(x) | p_11(x) | p_3(x).  [clausify(2)].\n11 -p_3(Kennedi).  [assumption].\n22 -p_10(Kennedi) | p_11(Kennedi).  [resolve(10,c,11,a)].\n23 p_10(Kennedi).  [deny(5)].\n24 p_11(Kennedi).  [resolve(22,a,23,a)].\n25 -p_11(Kennedi).  [resolve(8,b,9,a)].\n28 $F.  [resolve(24,a,25,a)].",
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_4(Kennedi)\n\u00acp_5(Kennedi)\n\u00acp_3(Kennedi)\n\u00acp_1(Kennedi)\n\u00acp_2(Kennedi)\n\u00acp_0(Kennedi)\n\u2200x ((p_11(x) \u2227 p_4(x)) \u2192 p_5(x))\n\u2200x (((p_10(x) \u2228 p_11(x)) \u2227 \u00ac(p_10(x) \u2227 p_11(x))) \u2192 p_3(x))\np_9(Kennedi) \u2228 p_1(Kennedi)\np_6(Kennedi) \u2228 p_2(Kennedi)\np_9(Kennedi) \u2192 (p_0(Kennedi) \u2228 p_8(Kennedi))\np_6(Kennedi) \u2192 (p_7(Kennedi) \u2227 p_8(Kennedi))\n\u2200x (\u00acp_5(x) \u2192 (\u00acp_11(x) \u2228 \u00acp_4(x)))\np_6(Kennedi) \u2192 p_7(Kennedi)\np_6(Kennedi) \u2192 p_8(Kennedi)",
            "Initial Goal": "p_10(Kennedi) \u2227 p_7(Kennedi)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_4(Kennedi)",
                    "-p_5(Kennedi)",
                    "-p_3(Kennedi)",
                    "-p_1(Kennedi)",
                    "-p_2(Kennedi)",
                    "-p_0(Kennedi)",
                    "all x ((p_11(x) & p_4(x)) -> p_5(x))",
                    "all x (((p_10(x) | p_11(x)) & -(p_10(x) & p_11(x))) -> p_3(x))",
                    "p_9(Kennedi) | p_1(Kennedi)",
                    "p_6(Kennedi) | p_2(Kennedi)",
                    "p_9(Kennedi) -> (p_0(Kennedi) | p_8(Kennedi))",
                    "p_6(Kennedi) -> (p_7(Kennedi) & p_8(Kennedi))",
                    "all x (-p_5(x) -> (-p_11(x) | -p_4(x)))",
                    "p_6(Kennedi) -> p_7(Kennedi)",
                    "p_6(Kennedi) -> p_8(Kennedi)"
                ],
                "formulas(goals)": [
                    "-(p_10(Kennedi) & p_7(Kennedi))"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "\u2200x (((p_10(x) \u2228 p_11(x)) \u2227 \u00ac(p_10(x) \u2227 p_11(x))) \u2192 p_3(x))",
                    "\u2200x (\u00acp_5(x) \u2192 (\u00acp_11(x) \u2228 \u00acp_4(x)))",
                    "p_6(Kennedi) \u2192 p_7(Kennedi)",
                    "p_6(Kennedi) \u2192 p_8(Kennedi)"
                ]
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_4(Kennedi)\n\u00acp_5(Kennedi)\n\u00acp_1(Kennedi)\n\u00acp_2(Kennedi)\n\u00acp_0(Kennedi)\n\u2200x ((p_11(x) \u2227 p_4(x)) \u2192 p_5(x))\n\u2200x (((p_10(x) \u2228 p_11(x)) \u2227 \u00ac(p_10(x) \u2227 p_11(x))) \u2192 p_3(x))\np_9(Kennedi) \u2228 p_1(Kennedi)\np_6(Kennedi) \u2228 p_2(Kennedi)\np_9(Kennedi) \u2192 (p_0(Kennedi) \u2228 p_8(Kennedi))\np_6(Kennedi) \u2192 (p_7(Kennedi) \u2227 p_8(Kennedi))\n\u2200x (\u00acp_5(x) \u2192 (\u00acp_11(x) \u2228 \u00acp_4(x)))\np_6(Kennedi) \u2192 p_7(Kennedi)\np_6(Kennedi) \u2192 p_8(Kennedi)\np_10(Kennedi)",
            "Initial Goal": "p_10(Kennedi) \u2227 p_7(Kennedi)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_4(Kennedi)",
                    "-p_5(Kennedi)",
                    "-p_1(Kennedi)",
                    "-p_2(Kennedi)",
                    "-p_0(Kennedi)",
                    "all x ((p_11(x) & p_4(x)) -> p_5(x))",
                    "all x (((p_10(x) | p_11(x)) & -(p_10(x) & p_11(x))) -> p_3(x))",
                    "p_9(Kennedi) | p_1(Kennedi)",
                    "p_6(Kennedi) | p_2(Kennedi)",
                    "p_9(Kennedi) -> (p_0(Kennedi) | p_8(Kennedi))",
                    "p_6(Kennedi) -> (p_7(Kennedi) & p_8(Kennedi))",
                    "all x (-p_5(x) -> (-p_11(x) | -p_4(x)))",
                    "p_6(Kennedi) -> p_7(Kennedi)",
                    "p_6(Kennedi) -> p_8(Kennedi)",
                    "p_10(Kennedi)"
                ],
                "formulas(goals)": [
                    "p_10(Kennedi) & p_7(Kennedi)"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "\u00acp_3(Kennedi)"
                ],
                "removed_rules": [],
                "added_facts": [
                    "p_10(Kennedi)"
                ],
                "added_rules": []
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_4(Kennedi)\n\u00acp_5(Kennedi)\n\u00acp_1(Kennedi)\n\u00acp_2(Kennedi)\n\u00acp_0(Kennedi)\n\u2200x ((p_11(x) \u2227 p_4(x)) \u2192 p_5(x))\n\u2200x (((p_10(x) \u2228 p_11(x)) \u2227 \u00ac(p_10(x) \u2227 p_11(x))) \u2192 p_3(x))\np_9(Kennedi) \u2228 p_1(Kennedi)\np_6(Kennedi) \u2228 p_2(Kennedi)\np_9(Kennedi) \u2192 (p_0(Kennedi) \u2228 p_8(Kennedi))\np_6(Kennedi) \u2192 p_7(Kennedi)\np_6(Kennedi) \u2192 p_8(Kennedi)\n\u2200x (\u00acp_5(x) \u2192 (\u00acp_11(x) \u2228 \u00acp_4(x)))\n\u00acp_10(Kennedi)",
            "Initial Goal": "p_10(Kennedi) \u2227 p_7(Kennedi)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_4(Kennedi).",
                    "-p_5(Kennedi).",
                    "-p_1(Kennedi).",
                    "-p_2(Kennedi).",
                    "-p_0(Kennedi).",
                    "all x ((p_11(x) & p_4(x)) -> p_5(x)).",
                    "all x (((p_10(x) | p_11(x)) & -(p_10(x) & p_11(x))) -> p_3(x)).",
                    "p_9(Kennedi) | p_1(Kennedi).",
                    "p_6(Kennedi) | p_2(Kennedi).",
                    "p_9(Kennedi) -> (p_0(Kennedi) | p_8(Kennedi)).",
                    "p_6(Kennedi) -> p_7(Kennedi).",
                    "p_6(Kennedi) -> p_8(Kennedi).",
                    "all x (-p_5(x) -> (-p_11(x) | -p_4(x))).",
                    "-p_10(Kennedi)."
                ],
                "formulas(goals)": [
                    "-(p_10(Kennedi) & p_7(Kennedi))."
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "p_10(Kennedi)"
                ],
                "removed_rules": [
                    "p_6(Kennedi) -> (p_7(Kennedi) \u2227 p_8(Kennedi))"
                ],
                "added_facts": [
                    "\u00acp_10(Kennedi)"
                ],
                "added_rules": []
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_4(Kennedi)\n\u00acp_5(Kennedi)\n\u00acp_1(Kennedi)\n\u00acp_2(Kennedi)\n\u00acp_0(Kennedi)\n\u2200x ((p_11(x) \u2227 p_4(x)) \u2192 p_5(x))\n\u2200x (((p_10(x) \u2228 p_11(x)) \u2227 \u00ac(p_10(x) \u2227 p_11(x))) \u2192 p_3(x))\np_9(Kennedi) \u2228 p_1(Kennedi)\np_6(Kennedi) \u2228 p_2(Kennedi)\np_9(Kennedi) \u2192 (p_0(Kennedi) \u2228 p_8(Kennedi))\np_6(Kennedi) \u2192 p_7(Kennedi)\np_6(Kennedi) \u2192 p_8(Kennedi)\n\u2200x (\u00acp_5(x) \u2192 (\u00acp_11(x) \u2228 \u00acp_4(x)))\n\u2200x (\u00acp_11(x) \u2192 p_10(x))",
            "Initial Goal": "p_10(Kennedi) \u2227 p_7(Kennedi)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_4(Kennedi)",
                    "-p_5(Kennedi)",
                    "-p_1(Kennedi)",
                    "-p_2(Kennedi)",
                    "-p_0(Kennedi)",
                    "all x ((p_11(x) & p_4(x)) -> p_5(x))",
                    "all x (((p_10(x) | p_11(x)) & -(p_10(x) & p_11(x))) -> p_3(x))",
                    "p_9(Kennedi) | p_1(Kennedi)",
                    "p_6(Kennedi) | p_2(Kennedi)",
                    "p_9(Kennedi) -> (p_0(Kennedi) | p_8(Kennedi))",
                    "p_6(Kennedi) -> p_7(Kennedi)",
                    "p_6(Kennedi) -> p_8(Kennedi)",
                    "all x (-p_5(x) -> (-p_11(x) | -p_4(x)))",
                    "all x (-p_11(x) -> p_10(x))"
                ],
                "formulas(goals)": [
                    "p_10(Kennedi) & p_7(Kennedi)"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "\u00acp_10(Kennedi)"
                ],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "\u2200x (\u00acp_11(x) \u2192 p_10(x))"
                ]
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_4(Kennedi)\n\u00acp_5(Kennedi)\n\u00acp_1(Kennedi)\n\u00acp_2(Kennedi)\n\u00acp_0(Kennedi)\np_10(Kennedi)\np_7(Kennedi)\n\u2200x (p_11(x) \u2192 (p_4(x) \u2192 p_5(x)))\n\u2200x (((p_10(x) \u2228 p_11(x)) \u2227 \u00ac(p_10(x) \u2227 p_11(x))) \u2192 p_3(x))\np_9(Kennedi) \u2228 p_1(Kennedi)\np_6(Kennedi) \u2228 p_2(Kennedi)\np_9(Kennedi) \u2192 (p_0(Kennedi) \u2228 p_8(Kennedi))\np_6(Kennedi) \u2192 p_7(Kennedi)\np_6(Kennedi) \u2192 p_8(Kennedi)\n\u2200x (\u00acp_5(x) \u2192 (\u00acp_11(x) \u2228 \u00acp_4(x)))\n\u2200x (\u00acp_11(x) \u2192 p_10(x))\n\u2200x (p_10(x) \u2228 p_11(x))",
            "Initial Goal": "p_10(Kennedi) \u2227 p_7(Kennedi)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_4(Kennedi).",
                    "-p_5(Kennedi).",
                    "-p_1(Kennedi).",
                    "-p_2(Kennedi).",
                    "-p_0(Kennedi).",
                    "p_10(Kennedi).",
                    "p_7(Kennedi).",
                    "all x (p_11(x) -> (p_4(x) -> p_5(x))).",
                    "all x (((p_10(x) | p_11(x)) & -(p_10(x) & p_11(x))) -> p_3(x)).",
                    "p_9(Kennedi) | p_1(Kennedi).",
                    "p_6(Kennedi) | p_2(Kennedi).",
                    "p_9(Kennedi) -> (p_0(Kennedi) | p_8(Kennedi)).",
                    "p_6(Kennedi) -> p_7(Kennedi).",
                    "p_6(Kennedi) -> p_8(Kennedi).",
                    "all x (-p_5(x) -> (-p_11(x) | -p_4(x))).",
                    "all x (-p_11(x) -> p_10(x)).",
                    "all x (p_10(x) | p_11(x))."
                ],
                "formulas(goals)": [
                    "p_10(Kennedi) & p_7(Kennedi)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u2200x ((p_11(x) \u2227 p_4(x)) \u2192 p_5(x))"
                ],
                "added_facts": [
                    "p_10(Kennedi)",
                    "p_7(Kennedi)"
                ],
                "added_rules": [
                    "\u2200x (p_11(x) \u2192 (p_4(x) \u2192 p_5(x)))",
                    "\u2200x (p_10(x) \u2228 p_11(x))"
                ]
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_4(Kennedi)\n\u00acp_5(Kennedi)\n\u00acp_1(Kennedi)\n\u00acp_2(Kennedi)\n\u00acp_0(Kennedi)\np_10(Kennedi)\n\u2200x (p_11(x) \u2192 (p_4(x) \u2192 p_5(x)))\n\u2200x (((p_10(x) \u2228 p_11(x)) \u2227 \u00ac(p_10(x) \u2227 p_11(x))) \u2192 p_3(x))\np_9(Kennedi) \u2228 p_1(Kennedi)\np_9(Kennedi) \u2192 (p_0(Kennedi) \u2228 p_8(Kennedi))\np_6(Kennedi) \u2192 p_7(Kennedi)\np_6(Kennedi) \u2192 p_8(Kennedi)\n\u2200x (\u00acp_5(x) \u2192 (\u00acp_11(x) \u2228 \u00acp_4(x)))\n\u2200x (\u00acp_11(x) \u2192 p_10(x))\n\u2200x (p_10(x) \u2228 p_11(x))\n\u00acp_11(Kennedi) \u2192 \u00acp_7(Kennedi)",
            "Initial Goal": "p_10(Kennedi) \u2227 p_7(Kennedi)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_4(Kennedi)",
                    "-p_5(Kennedi)",
                    "-p_1(Kennedi)",
                    "-p_2(Kennedi)",
                    "-p_0(Kennedi)",
                    "p_10(Kennedi)",
                    "all x (p_11(x) -> (p_4(x) -> p_5(x)))",
                    "all x (((p_10(x) | p_11(x)) & -(p_10(x) & p_11(x))) -> p_3(x))",
                    "p_9(Kennedi) | p_1(Kennedi)",
                    "p_9(Kennedi) -> (p_0(Kennedi) | p_8(Kennedi))",
                    "p_6(Kennedi) -> p_7(Kennedi)",
                    "p_6(Kennedi) -> p_8(Kennedi)",
                    "all x (-p_5(x) -> (-p_11(x) | -p_4(x)))",
                    "all x (-p_11(x) -> p_10(x))",
                    "all x (p_10(x) | p_11(x))",
                    "-p_11(Kennedi) -> -p_7(Kennedi)"
                ],
                "formulas(goals)": [
                    "-(p_10(Kennedi) & p_7(Kennedi))"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "p_7(Kennedi)",
                    "p_6(Kennedi) \u2228 p_2(Kennedi)"
                ],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "\u00acp_11(Kennedi) \u2192 \u00acp_7(Kennedi)"
                ]
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_4(Kennedi)\n\u00acp_5(Kennedi)\n\u00acp_1(Kennedi)\n\u00acp_2(Kennedi)\n\u00acp_0(Kennedi)\np_10(Kennedi)\n\u2200x (p_11(x) \u2192 (p_4(x) \u2192 p_5(x)))\n\u2200x (((p_10(x) \u2228 p_11(x)) \u2227 \u00ac(p_10(x) \u2227 p_11(x))) \u2192 p_3(x))\np_9(Kennedi) \u2228 p_1(Kennedi)\np_9(Kennedi) \u2192 (p_0(Kennedi) \u2228 p_8(Kennedi))\np_6(Kennedi) \u2192 p_7(Kennedi)\np_6(Kennedi) \u2192 p_8(Kennedi)\n\u2200x (\u00acp_5(x) \u2192 (\u00acp_11(x) \u2228 \u00acp_4(x)))\n\u2200x (\u00acp_11(x) \u2192 p_10(x))\n\u2200x (p_10(x) \u2228 p_11(x))\n\u00acp_11(Kennedi) \u2192 \u00acp_7(Kennedi)\n\u2200x ((p_11(x) \u2227 p_4(x)) \u2192 p_5(x))\np_9(Kennedi)\np_8(Kennedi)\np_7(Kennedi) \u2192 p_11(Kennedi)\n\u2200x ((\u00acp_5(x) \u2227 p_4(x)) \u2192 \u00acp_11(x))",
            "Initial Goal": "p_10(Kennedi) \u2227 p_7(Kennedi)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_4(Kennedi)",
                    "-p_5(Kennedi)",
                    "-p_1(Kennedi)",
                    "-p_2(Kennedi)",
                    "-p_0(Kennedi)",
                    "p_10(Kennedi)",
                    "all x (p_11(x) -> (p_4(x) -> p_5(x)))",
                    "all x (((p_10(x) | p_11(x)) & -(p_10(x) & p_11(x))) -> p_3(x))",
                    "p_9(Kennedi) | p_1(Kennedi)",
                    "p_9(Kennedi) -> (p_0(Kennedi) | p_8(Kennedi))",
                    "p_6(Kennedi) -> p_7(Kennedi)",
                    "p_6(Kennedi) -> p_8(Kennedi)",
                    "all x (-p_5(x) -> (-p_11(x) | -p_4(x)))",
                    "all x (-p_11(x) -> p_10(x))",
                    "all x (p_10(x) | p_11(x))",
                    "-p_11(Kennedi) -> -p_7(Kennedi)",
                    "all x ((p_11(x) & p_4(x)) -> p_5(x))",
                    "p_9(Kennedi)",
                    "p_8(Kennedi)",
                    "p_7(Kennedi) -> p_11(Kennedi)",
                    "all x ((-p_5(x) & p_4(x)) -> -p_11(x))"
                ],
                "formulas(goals)": [
                    "-(p_10(Kennedi) & p_7(Kennedi))"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_9(Kennedi)",
                    "p_8(Kennedi)"
                ],
                "added_rules": [
                    "\u2200x ((p_11(x) \u2227 p_4(x)) \u2192 p_5(x))",
                    "p_7(Kennedi) \u2192 p_11(Kennedi)",
                    "\u2200x ((\u00acp_5(x) \u2227 p_4(x)) \u2192 \u00acp_11(x))"
                ]
            }
        }
    ]
}