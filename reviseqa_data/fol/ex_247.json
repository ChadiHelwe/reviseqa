{
    "background_story": "Tru was a brilliant and enigmatic detective with a keen mind for unraveling the most complex mysteries. Her latest case involved a string of high-end jewelry heists, with the thief always seeming to be one step ahead. Tru's motive for solving the case wasn't just about closing the file, but about understanding the motive behind the thief's actions. As she delved deeper, she discovered that the thief was stealing to fund a local community center, a place that had been a refuge for Tru during her own troubled youth. Tru's motive shifted from mere justice to empathy and understanding, leading her to make a surprising decision that would change the course of the case and her own life forever.",
    "predicates": [
        {
            "id": 0,
            "name": "protect_community"
        },
        {
            "id": 1,
            "name": "gather_clues"
        },
        {
            "id": 2,
            "name": "close_case"
        },
        {
            "id": 3,
            "name": "arrest_suspect"
        },
        {
            "id": 4,
            "name": "read_people"
        },
        {
            "id": 5,
            "name": "solve_case"
        },
        {
            "id": 6,
            "name": "seek_justice"
        },
        {
            "id": 7,
            "name": "show_empathy"
        },
        {
            "id": 8,
            "name": "crack_code"
        },
        {
            "id": 9,
            "name": "uncover_truth"
        },
        {
            "id": 10,
            "name": "understand_motive"
        },
        {
            "id": 11,
            "name": "investigate_crime"
        },
        {
            "id": 12,
            "name": "sharp_mind"
        },
        {
            "id": 13,
            "name": "analyze_evidence"
        },
        {
            "id": 14,
            "name": "find_resolution"
        },
        {
            "id": 15,
            "name": "analyzes_evidence"
        },
        {
            "id": 16,
            "name": "profile_thief"
        }
    ],
    "subject_name": "Tru",
    "subject_category": "detective",
    "keyword": "motive",
    "all_facts": [
        {
            "id": 0,
            "subject": "Tru",
            "text": "Tru does not protect the community.",
            "fol": "\u00acp_0(Tru)",
            "str_fol": "\u00acprotect_community(Tru)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Tru",
            "text": "Tru gathers clues.",
            "fol": "p_1(Tru)",
            "str_fol": "gather_clues(Tru)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Tru",
            "text": "Tru cannot close the case.",
            "fol": "\u00acp_2(Tru)",
            "str_fol": "\u00acclose_case(Tru)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Tru",
            "text": "Tru arrests a suspect.",
            "fol": "p_3(Tru)",
            "str_fol": "arrest_suspect(Tru)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Tru",
            "text": "Tru does not read people.",
            "fol": "\u00acp_4(Tru)",
            "str_fol": "\u00acread_people(Tru)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Tru",
            "text": "Tru understands the motive.",
            "fol": "p_10(Tru)",
            "str_fol": "understand_motive(Tru)",
            "negation": false
        },
        {
            "id": 6,
            "subject": "Tru",
            "text": "Tru investigates a crime.",
            "fol": "p_11(Tru)",
            "str_fol": "investigate_crime(Tru)",
            "negation": false
        },
        {
            "id": 7,
            "subject": "Tru",
            "text": "Tru does not uncover the truth.",
            "fol": "\u00acp_9(Tru)",
            "str_fol": "\u00acuncover_truth(Tru)",
            "negation": true
        },
        {
            "id": 8,
            "subject": "Tru",
            "text": "Tru does not show empathy.",
            "fol": "\u00acp_7(Tru)",
            "str_fol": "\u00acshow_empathy(Tru)",
            "negation": true
        },
        {
            "id": 9,
            "subject": "Tru",
            "text": "Tru can crack the code.",
            "fol": "p_8(Tru)",
            "str_fol": "crack_code(Tru)",
            "negation": false
        },
        {
            "id": 10,
            "subject": "Tru",
            "text": "Tru can solve the case.",
            "fol": "p_5(Tru)",
            "str_fol": "solve_case(Tru)",
            "negation": false
        },
        {
            "id": 11,
            "subject": "Tru",
            "text": "Tru does not seek justice.",
            "fol": "\u00acp_6(Tru)",
            "str_fol": "\u00acseek_justice(Tru)",
            "negation": true
        }
    ],
    "context_facts": [
        {
            "id": 4,
            "subject": "Tru",
            "text": "Tru does not read people.",
            "fol": "\u00acp_4(Tru)",
            "str_fol": "\u00acread_people(Tru)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Tru",
            "text": "Tru does not protect the community.",
            "fol": "\u00acp_0(Tru)",
            "str_fol": "\u00acprotect_community(Tru)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Tru",
            "text": "Tru arrests a suspect.",
            "fol": "p_3(Tru)",
            "str_fol": "arrest_suspect(Tru)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Tru",
            "text": "Tru cannot close the case.",
            "fol": "\u00acp_2(Tru)",
            "str_fol": "\u00acclose_case(Tru)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Tru",
            "text": "Tru gathers clues.",
            "fol": "p_1(Tru)",
            "str_fol": "gather_clues(Tru)",
            "negation": false
        }
    ],
    "context_rules": [
        {
            "id": 6,
            "text": "Every detective either reads people or understands motives.",
            "fol": "\u2200x (p_4(x) \u2228 p_10(x))",
            "str_fol": "\u2200x (read_people(x) \u2228 understand_motive(x))"
        },
        {
            "id": 5,
            "text": "Tru either investigates a crime or protects the community, but not both.",
            "fol": "p_11(Tru) \u2295 p_0(Tru)",
            "str_fol": "investigate_crime(Tru) \u2295 protect_community(Tru)"
        },
        {
            "id": 4,
            "text": "If Tru investigates a crime, then she will either uncover the truth or arrest a suspect, but not both.",
            "fol": "p_11(Tru) \u2192 (p_9(Tru) \u2295 p_3(Tru))",
            "str_fol": "investigate_crime(Tru) \u2192 (uncover_truth(Tru) \u2295 arrest_suspect(Tru))"
        },
        {
            "id": 3,
            "text": "If Tru understands the motive and shows empathy, then she can close the case.",
            "fol": "(p_10(Tru) \u2227 p_7(Tru)) \u2192 p_2(Tru)",
            "str_fol": "(understand_motive(Tru) \u2227 show_empathy(Tru)) \u2192 close_case(Tru)"
        },
        {
            "id": 2,
            "text": "If Tru either gathers clues or cracks the code (but not both), then she will uncover the truth.",
            "fol": "(p_1(Tru) \u2295 p_8(Tru)) \u2192 p_9(Tru)",
            "str_fol": "(gather_clues(Tru) \u2295 crack_code(Tru)) \u2192 uncover_truth(Tru)"
        },
        {
            "id": 1,
            "text": "Any detective who can crack the code will solve the case.",
            "fol": "\u2200x (p_8(x) \u2192 p_5(x))",
            "str_fol": "\u2200x (crack_code(x) \u2192 solve_case(x))"
        },
        {
            "id": 0,
            "text": "If Tru can solve the case, then she will either seek justice or show empathy, but not both.",
            "fol": "p_5(Tru) \u2192 (p_6(Tru) \u2295 p_7(Tru))",
            "str_fol": "solve_case(Tru) \u2192 (seek_justice(Tru) \u2295 show_empathy(Tru))"
        }
    ],
    "context": [
        {
            "id": 4,
            "subject": "Tru",
            "text": "Tru does not read people.",
            "fol": "\u00acp_4(Tru)",
            "str_fol": "\u00acread_people(Tru)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Tru",
            "text": "Tru does not protect the community.",
            "fol": "\u00acp_0(Tru)",
            "str_fol": "\u00acprotect_community(Tru)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Tru",
            "text": "Tru arrests a suspect.",
            "fol": "p_3(Tru)",
            "str_fol": "arrest_suspect(Tru)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Tru",
            "text": "Tru cannot close the case.",
            "fol": "\u00acp_2(Tru)",
            "str_fol": "\u00acclose_case(Tru)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Tru",
            "text": "Tru gathers clues.",
            "fol": "p_1(Tru)",
            "str_fol": "gather_clues(Tru)",
            "negation": false
        },
        {
            "id": 6,
            "text": "Every detective either reads people or understands motives.",
            "fol": "\u2200x (p_4(x) \u2228 p_10(x))",
            "str_fol": "\u2200x (read_people(x) \u2228 understand_motive(x))"
        },
        {
            "id": 5,
            "text": "Tru either investigates a crime or protects the community, but not both.",
            "fol": "p_11(Tru) \u2295 p_0(Tru)",
            "str_fol": "investigate_crime(Tru) \u2295 protect_community(Tru)"
        },
        {
            "id": 4,
            "text": "If Tru investigates a crime, then she will either uncover the truth or arrest a suspect, but not both.",
            "fol": "p_11(Tru) \u2192 (p_9(Tru) \u2295 p_3(Tru))",
            "str_fol": "investigate_crime(Tru) \u2192 (uncover_truth(Tru) \u2295 arrest_suspect(Tru))"
        },
        {
            "id": 3,
            "text": "If Tru understands the motive and shows empathy, then she can close the case.",
            "fol": "(p_10(Tru) \u2227 p_7(Tru)) \u2192 p_2(Tru)",
            "str_fol": "(understand_motive(Tru) \u2227 show_empathy(Tru)) \u2192 close_case(Tru)"
        },
        {
            "id": 2,
            "text": "If Tru either gathers clues or cracks the code (but not both), then she will uncover the truth.",
            "fol": "(p_1(Tru) \u2295 p_8(Tru)) \u2192 p_9(Tru)",
            "str_fol": "(gather_clues(Tru) \u2295 crack_code(Tru)) \u2192 uncover_truth(Tru)"
        },
        {
            "id": 1,
            "text": "Any detective who can crack the code will solve the case.",
            "fol": "\u2200x (p_8(x) \u2192 p_5(x))",
            "str_fol": "\u2200x (crack_code(x) \u2192 solve_case(x))"
        },
        {
            "id": 0,
            "text": "If Tru can solve the case, then she will either seek justice or show empathy, but not both.",
            "fol": "p_5(Tru) \u2192 (p_6(Tru) \u2295 p_7(Tru))",
            "str_fol": "solve_case(Tru) \u2192 (seek_justice(Tru) \u2295 show_empathy(Tru))"
        }
    ],
    "context_fol": "\u00acp_4(Tru)\n\u00acp_0(Tru)\np_3(Tru)\n\u00acp_2(Tru)\np_1(Tru)\n\u2200x (p_4(x) \u2228 p_10(x))\np_11(Tru) \u2295 p_0(Tru)\np_11(Tru) \u2192 (p_9(Tru) \u2295 p_3(Tru))\n(p_10(Tru) \u2227 p_7(Tru)) \u2192 p_2(Tru)\n(p_1(Tru) \u2295 p_8(Tru)) \u2192 p_9(Tru)\n\u2200x (p_8(x) \u2192 p_5(x))\np_5(Tru) \u2192 (p_6(Tru) \u2295 p_7(Tru))",
    "conclusion": {
        "id": 11,
        "subject": "Tru",
        "text": "Tru does not seek justice.",
        "fol": "\u00acp_6(Tru)",
        "str_fol": "\u00acseek_justice(Tru)",
        "negation": true
    },
    "initial_answer": "False",
    "initial_goal": "\u00acp_6(Tru)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 4,
                    "subject": "Tru",
                    "text": "Tru does not read people.",
                    "fol": "\u00acp_4(Tru)",
                    "str_fol": "\u00acread_people(Tru)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 6,
                    "text": "Every detective either reads people or understands motives.",
                    "fol": "\u2200x (p_4(x) \u2228 p_10(x))",
                    "str_fol": "\u2200x (read_people(x) \u2228 understand_motive(x))"
                }
            ],
            "conclusion": {
                "id": 5,
                "subject": "Tru",
                "text": "Tru understands the motive.",
                "fol": "p_10(Tru)",
                "str_fol": "understand_motive(Tru)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 0,
                    "subject": "Tru",
                    "text": "Tru does not protect the community.",
                    "fol": "\u00acp_0(Tru)",
                    "str_fol": "\u00acprotect_community(Tru)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "Tru either investigates a crime or protects the community, but not both.",
                    "fol": "p_11(Tru) \u2295 p_0(Tru)",
                    "str_fol": "investigate_crime(Tru) \u2295 protect_community(Tru)"
                }
            ],
            "conclusion": {
                "id": 6,
                "subject": "Tru",
                "text": "Tru investigates a crime.",
                "fol": "p_11(Tru)",
                "str_fol": "investigate_crime(Tru)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 6,
                    "subject": "Tru",
                    "text": "Tru investigates a crime.",
                    "fol": "p_11(Tru)",
                    "str_fol": "investigate_crime(Tru)",
                    "negation": false
                },
                {
                    "id": 3,
                    "subject": "Tru",
                    "text": "Tru arrests a suspect.",
                    "fol": "p_3(Tru)",
                    "str_fol": "arrest_suspect(Tru)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "If Tru investigates a crime, then she will either uncover the truth or arrest a suspect, but not both.",
                    "fol": "p_11(Tru) \u2192 (p_9(Tru) \u2295 p_3(Tru))",
                    "str_fol": "investigate_crime(Tru) \u2192 (uncover_truth(Tru) \u2295 arrest_suspect(Tru))"
                }
            ],
            "conclusion": {
                "id": 7,
                "subject": "Tru",
                "text": "Tru does not uncover the truth.",
                "fol": "\u00acp_9(Tru)",
                "str_fol": "\u00acuncover_truth(Tru)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 5,
                    "subject": "Tru",
                    "text": "Tru understands the motive.",
                    "fol": "p_10(Tru)",
                    "str_fol": "understand_motive(Tru)",
                    "negation": false
                },
                {
                    "id": 2,
                    "subject": "Tru",
                    "text": "Tru cannot close the case.",
                    "fol": "\u00acp_2(Tru)",
                    "str_fol": "\u00acclose_case(Tru)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "If Tru understands the motive and shows empathy, then she can close the case.",
                    "fol": "(p_10(Tru) \u2227 p_7(Tru)) \u2192 p_2(Tru)",
                    "str_fol": "(understand_motive(Tru) \u2227 show_empathy(Tru)) \u2192 close_case(Tru)"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Tru",
                "text": "Tru does not show empathy.",
                "fol": "\u00acp_7(Tru)",
                "str_fol": "\u00acshow_empathy(Tru)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 1,
                    "subject": "Tru",
                    "text": "Tru gathers clues.",
                    "fol": "p_1(Tru)",
                    "str_fol": "gather_clues(Tru)",
                    "negation": false
                },
                {
                    "id": 7,
                    "subject": "Tru",
                    "text": "Tru does not uncover the truth.",
                    "fol": "\u00acp_9(Tru)",
                    "str_fol": "\u00acuncover_truth(Tru)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "If Tru either gathers clues or cracks the code (but not both), then she will uncover the truth.",
                    "fol": "(p_1(Tru) \u2295 p_8(Tru)) \u2192 p_9(Tru)",
                    "str_fol": "(gather_clues(Tru) \u2295 crack_code(Tru)) \u2192 uncover_truth(Tru)"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Tru",
                "text": "Tru can crack the code.",
                "fol": "p_8(Tru)",
                "str_fol": "crack_code(Tru)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 9,
                    "subject": "Tru",
                    "text": "Tru can crack the code.",
                    "fol": "p_8(Tru)",
                    "str_fol": "crack_code(Tru)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "Any detective who can crack the code will solve the case.",
                    "fol": "\u2200x (p_8(x) \u2192 p_5(x))",
                    "str_fol": "\u2200x (crack_code(x) \u2192 solve_case(x))"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Tru",
                "text": "Tru can solve the case.",
                "fol": "p_5(Tru)",
                "str_fol": "solve_case(Tru)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 10,
                    "subject": "Tru",
                    "text": "Tru can solve the case.",
                    "fol": "p_5(Tru)",
                    "str_fol": "solve_case(Tru)",
                    "negation": false
                },
                {
                    "id": 8,
                    "subject": "Tru",
                    "text": "Tru does not show empathy.",
                    "fol": "\u00acp_7(Tru)",
                    "str_fol": "\u00acshow_empathy(Tru)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "If Tru can solve the case, then she will either seek justice or show empathy, but not both.",
                    "fol": "p_5(Tru) \u2192 (p_6(Tru) \u2295 p_7(Tru))",
                    "str_fol": "solve_case(Tru) \u2192 (seek_justice(Tru) \u2295 show_empathy(Tru))"
                }
            ],
            "conclusion": {
                "id": 11,
                "subject": "Tru",
                "text": "Tru does not seek justice.",
                "fol": "\u00acp_6(Tru)",
                "str_fol": "\u00acseek_justice(Tru)",
                "negation": true
            }
        }
    ],
    "proof_trace": "1 (all x (p_4(x) | p_10(x))).  [assumption].\n2 -(p_11(Tru) <-> p_0(Tru)).  [assumption].\n3 p_11(Tru) -> -(p_9(Tru) <-> p_3(Tru)).  [assumption].\n4 p_10(Tru) & p_7(Tru) -> p_2(Tru).  [assumption].\n5 -(p_1(Tru) <-> p_8(Tru)) -> p_9(Tru).  [assumption].\n6 (all x (p_8(x) -> p_5(x))).  [assumption].\n7 p_5(Tru) -> -(p_6(Tru) <-> p_7(Tru)).  [assumption].\n8 --p_6(Tru).  [goal].\n9 p_4(x) | p_10(x).  [clausify(1)].\n10 -p_4(Tru).  [assumption].\n11 p_11(Tru) | p_0(Tru).  [clausify(2)].\n12 -p_0(Tru).  [assumption].\n14 -p_11(Tru) | -p_9(Tru) | -p_3(Tru).  [clausify(3)].\n15 p_3(Tru).  [assumption].\n17 -p_10(Tru) | -p_7(Tru) | p_2(Tru).  [clausify(4)].\n18 -p_2(Tru).  [assumption].\n19 -p_1(Tru) | p_8(Tru) | p_9(Tru).  [clausify(5)].\n20 p_1(Tru).  [assumption].\n22 p_8(Tru) | p_9(Tru).  [resolve(19,a,20,a)].\n23 -p_8(x) | p_5(x).  [clausify(6)].\n24 p_9(Tru) | p_5(Tru).  [resolve(22,a,23,a)].\n25 -p_5(Tru) | p_6(Tru) | p_7(Tru).  [clausify(7)].\n27 p_9(Tru) | p_6(Tru) | p_7(Tru).  [resolve(24,b,25,a)].\n28 -p_6(Tru).  [deny(8)].\n30 -p_10(Tru) | -p_7(Tru).  [resolve(17,c,18,a)].\n31 p_10(Tru).  [resolve(9,a,10,a)].\n32 -p_11(Tru) | -p_9(Tru).  [resolve(14,c,15,a)].\n33 p_11(Tru).  [resolve(11,b,12,a)].\n34 -p_9(Tru).  [resolve(32,a,33,a)].\n35 p_9(Tru) | p_7(Tru).  [resolve(27,b,28,a)].\n36 p_7(Tru).  [resolve(34,a,35,a)].\n37 -p_7(Tru).  [resolve(30,a,31,a)].\n38 $F.  [resolve(36,a,37,a)].",
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_4(Tru)\n\u00acp_0(Tru)\np_3(Tru)\n\u00acp_2(Tru)\np_1(Tru)\n\u2200x (p_4(x) \u2228 p_10(x))\np_11(Tru) \u2295 p_0(Tru)\np_11(Tru) \u2192 (p_9(Tru) \u2295 p_3(Tru))\n(p_10(Tru) \u2227 p_7(Tru)) \u2192 p_2(Tru)\n(p_1(Tru) \u2295 p_8(Tru)) \u2192 p_9(Tru)\n\u2200x (p_8(x) \u2192 p_5(x))\np_5(Tru) \u2192 p_7(Tru)\np_7(Tru) \u2192 \u00acp_6(Tru)",
            "Initial Goal": "\u00acp_6(Tru)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Tru).",
                    "-p_0(Tru).",
                    "p_3(Tru).",
                    "-p_2(Tru).",
                    "p_1(Tru).",
                    "all x (p_4(x) | p_10(x)).",
                    "-(p_11(Tru) <-> p_0(Tru)).",
                    "p_11(Tru) -> (-(p_9(Tru) <-> p_3(Tru))).",
                    "(p_10(Tru) & p_7(Tru)) -> p_2(Tru).",
                    "(-(p_1(Tru) <-> p_8(Tru))) -> p_9(Tru).",
                    "all x (p_8(x) -> p_5(x)).",
                    "p_5(Tru) -> p_7(Tru).",
                    "p_7(Tru) -> -p_6(Tru)."
                ],
                "formulas(goals)": [
                    "-p_6(Tru)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_5(Tru) \u2192 (p_6(Tru) \u2295 p_7(Tru))"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_5(Tru) \u2192 p_7(Tru)",
                    "p_7(Tru) \u2192 \u00acp_6(Tru)"
                ]
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_4(Tru)\n\u00acp_0(Tru)\np_3(Tru)\n\u00acp_2(Tru)\np_1(Tru)\n\u2200x (p_4(x) \u2228 p_10(x))\n(p_11(Tru) \u2228 p_0(Tru)) \u2227 \u00ac(p_11(Tru) \u2227 p_0(Tru))\np_11(Tru) \u2192 (p_9(Tru) \u2295 p_3(Tru))\n(p_10(Tru) \u2227 p_7(Tru)) \u2192 p_2(Tru)\n(p_1(Tru) \u2295 p_8(Tru)) \u2192 p_9(Tru)\n\u2200x (p_8(x) \u2192 p_5(x))\np_5(Tru) \u2192 p_7(Tru)\np_6(Tru) \u2192 \u00acp_7(Tru)\np_5(Tru) \u2192 \u00acp_6(Tru)\np_8(Tru) \u2192 \u00acp_6(Tru)",
            "Initial Goal": "\u00acp_6(Tru)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Tru).",
                    "-p_0(Tru).",
                    "p_3(Tru).",
                    "-p_2(Tru).",
                    "p_1(Tru).",
                    "all x (p_4(x) | p_10(x)).",
                    "(p_11(Tru) | p_0(Tru)) & (-(p_11(Tru) & p_0(Tru))).",
                    "p_11(Tru) -> (-(p_9(Tru) <-> p_3(Tru))).",
                    "(p_10(Tru) & p_7(Tru)) -> p_2(Tru).",
                    "(-(p_1(Tru) <-> p_8(Tru))) -> p_9(Tru).",
                    "all x (p_8(x) -> p_5(x)).",
                    "p_5(Tru) -> p_7(Tru).",
                    "p_6(Tru) -> -p_7(Tru).",
                    "p_5(Tru) -> -p_6(Tru).",
                    "p_8(Tru) -> -p_6(Tru)."
                ],
                "formulas(goals)": [
                    "-p_6(Tru)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_7(Tru) \u2192 \u00acp_6(Tru)"
                ],
                "added_facts": [],
                "added_rules": [
                    "(p_11(Tru) \u2228 p_0(Tru)) \u2227 \u00ac(p_11(Tru) \u2227 p_0(Tru))",
                    "p_6(Tru) \u2192 \u00acp_7(Tru)",
                    "p_5(Tru) \u2192 \u00acp_6(Tru)",
                    "p_8(Tru) \u2192 \u00acp_6(Tru)"
                ]
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_4(Tru)\n\u00acp_0(Tru)\np_3(Tru)\n\u00acp_2(Tru)\np_1(Tru)\n\u2200x (p_4(x) \u2228 p_10(x))\n(p_11(Tru) \u2228 p_0(Tru)) \u2227 \u00ac(p_11(Tru) \u2227 p_0(Tru))\np_11(Tru) \u2192 (p_9(Tru) \u2295 p_3(Tru))\n(p_10(Tru) \u2227 p_7(Tru)) \u2192 p_2(Tru)\n(p_1(Tru) \u2295 p_8(Tru)) \u2192 p_9(Tru)\n\u2200x (p_8(x) \u2192 p_5(x))\np_5(Tru) \u2192 p_7(Tru)\np_6(Tru) \u2192 \u00acp_7(Tru)\np_11(Tru) \u2192 p_6(Tru)",
            "Initial Goal": "\u00acp_6(Tru)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "- p_4(Tru).",
                    "- p_0(Tru).",
                    "p_3(Tru).",
                    "- p_2(Tru).",
                    "p_1(Tru).",
                    "all x (p_4(x) | p_10(x)).",
                    "(p_11(Tru) | p_0(Tru)) & (-(p_11(Tru) & p_0(Tru))).",
                    "p_11(Tru) -> -(p_9(Tru) <-> p_3(Tru)).",
                    "(p_10(Tru) & p_7(Tru)) -> p_2(Tru).",
                    "(-(p_1(Tru) <-> p_8(Tru))) -> p_9(Tru).",
                    "all x (p_8(x) -> p_5(x)).",
                    "p_5(Tru) -> p_7(Tru).",
                    "p_6(Tru) -> - p_7(Tru).",
                    "p_11(Tru) -> p_6(Tru)."
                ],
                "formulas(goals)": [
                    "p_6(Tru)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_5(Tru) \u2192 \u00acp_6(Tru)",
                    "p_8(Tru) \u2192 \u00acp_6(Tru)"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_11(Tru) \u2192 p_6(Tru)"
                ]
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_4(Tru)\n\u00acp_0(Tru)\np_3(Tru)\n\u00acp_2(Tru)\np_1(Tru)\n\u2200x (p_4(x) \u2228 p_10(x))\n(p_11(Tru) \u2228 p_0(Tru)) \u2227 \u00ac(p_11(Tru) \u2227 p_0(Tru))\np_11(Tru) \u2192 (p_9(Tru) \u2295 p_3(Tru))\n(p_10(Tru) \u2227 p_7(Tru)) \u2192 p_2(Tru)\n(p_1(Tru) \u2295 p_8(Tru)) \u2192 p_9(Tru)\n\u2200x (p_8(x) \u2192 p_5(x))\np_5(Tru) \u2192 p_7(Tru)\np_6(Tru) \u2192 \u00acp_7(Tru)\np_11(Tru) \u2192 \u00acp_6(Tru)",
            "Initial Goal": "\u00acp_6(Tru)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Tru).",
                    "-p_0(Tru).",
                    "p_3(Tru).",
                    "-p_2(Tru).",
                    "p_1(Tru).",
                    "all x (p_4(x) | p_10(x)).",
                    "(p_11(Tru) | p_0(Tru)) & (-(p_11(Tru) & p_0(Tru))).",
                    "p_11(Tru) -> (-(p_9(Tru) <-> p_3(Tru))).",
                    "p_10(Tru) & p_7(Tru) -> p_2(Tru).",
                    "(-(p_1(Tru) <-> p_8(Tru))) -> p_9(Tru).",
                    "all x (p_8(x) -> p_5(x)).",
                    "p_5(Tru) -> p_7(Tru).",
                    "p_6(Tru) -> -p_7(Tru).",
                    "p_11(Tru) -> -p_6(Tru)."
                ],
                "formulas(goals)": [
                    "-p_6(Tru)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_11(Tru) \u2192 p_6(Tru)"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_11(Tru) \u2192 \u00acp_6(Tru)"
                ]
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_4(Tru)\n\u00acp_0(Tru)\np_3(Tru)\n\u00acp_2(Tru)\np_1(Tru)\n\u2200x (p_4(x) \u2228 p_10(x))\n(p_11(Tru) \u2228 p_0(Tru)) \u2227 \u00ac(p_11(Tru) \u2227 p_0(Tru))\np_11(Tru) \u2192 (p_9(Tru) \u2295 p_3(Tru))\n(p_10(Tru) \u2227 p_7(Tru) \u2227 \u00acp_5(Tru)) \u2192 p_2(Tru)\n(p_1(Tru) \u2295 p_8(Tru)) \u2192 p_9(Tru)\n\u2200x (p_8(x) \u2192 p_5(x))\np_5(Tru) \u2192 p_7(Tru)\np_6(Tru) \u2192 \u00acp_7(Tru)\np_11(Tru) \u2192 \u00acp_6(Tru)",
            "Initial Goal": "\u00acp_6(Tru)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Tru)",
                    "-p_0(Tru)",
                    "p_3(Tru)",
                    "-p_2(Tru)",
                    "p_1(Tru)",
                    "all x (p_4(x) | p_10(x))",
                    "(p_11(Tru) | p_0(Tru)) & (-(p_11(Tru) & p_0(Tru)))",
                    "p_11(Tru) -> (-(p_9(Tru) <-> p_3(Tru)))",
                    "(p_10(Tru) & p_7(Tru) & -p_5(Tru)) -> p_2(Tru)",
                    "(-(p_1(Tru) <-> p_8(Tru))) -> p_9(Tru)",
                    "all x (p_8(x) -> p_5(x))",
                    "p_5(Tru) -> p_7(Tru)",
                    "p_6(Tru) -> -p_7(Tru)",
                    "p_11(Tru) -> -p_6(Tru)"
                ],
                "formulas(goals)": [
                    "-p_6(Tru)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "(p_10(Tru) \u2227 p_7(Tru)) \u2192 p_2(Tru)"
                ],
                "added_facts": [],
                "added_rules": [
                    "(p_10(Tru) \u2227 p_7(Tru) \u2227 \u00acp_5(Tru)) \u2192 p_2(Tru)"
                ]
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_4(Tru).\n\u00acp_0(Tru).\np_3(Tru).\n\u00acp_2(Tru).\np_1(Tru).\n\u2200x (p_4(x) \u2228 p_10(x)).\n(p_11(Tru) \u2228 p_0(Tru)) \u2227 \u00ac(p_11(Tru) \u2227 p_0(Tru)).\np_11(Tru) \u2192 (p_9(Tru) \u2295 p_3(Tru)).\n(p_10(Tru) \u2227 p_7(Tru) \u2227 \u00acp_5(Tru)) \u2192 p_2(Tru).\n(p_1(Tru) \u2295 p_8(Tru)) \u2192 p_9(Tru).\n\u2200x (p_8(x) \u2192 p_5(x)).\np_5(Tru) \u2192 p_7(Tru).\np_6(Tru) \u2192 \u00acp_7(Tru).\np_11(Tru) \u2192 p_6(Tru).",
            "Initial Goal": "\u00acp_6(Tru)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Tru).",
                    "-p_0(Tru).",
                    "p_3(Tru).",
                    "-p_2(Tru).",
                    "p_1(Tru).",
                    "all x (p_4(x) | p_10(x)).",
                    "(p_11(Tru) | p_0(Tru)) & (-(p_11(Tru) & p_0(Tru))).",
                    "p_11(Tru) -> (-(p_9(Tru) <-> p_3(Tru))).",
                    "(p_10(Tru) & p_7(Tru) & -p_5(Tru)) -> p_2(Tru).",
                    "(-(p_1(Tru) <-> p_8(Tru))) -> p_9(Tru).",
                    "all x (p_8(x) -> p_5(x)).",
                    "p_5(Tru) -> p_7(Tru).",
                    "p_6(Tru) -> -p_7(Tru).",
                    "p_11(Tru) -> p_6(Tru)."
                ],
                "formulas(goals)": [
                    "-(-p_6(Tru))."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_11(Tru) \u2192 \u00acp_6(Tru)"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_11(Tru) \u2192 p_6(Tru)"
                ]
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_4(Tru)\n\u00acp_0(Tru)\np_3(Tru)\n\u00acp_2(Tru)\np_1(Tru)\n\u2200x (p_4(x) \u2228 p_10(x))\n(p_11(Tru) \u2228 p_0(Tru)) \u2227 \u00ac(p_11(Tru) \u2227 p_0(Tru))\np_11(Tru) \u2192 (p_9(Tru) \u2228 p_3(Tru))\n(p_10(Tru) \u2227 p_7(Tru) \u2227 \u00acp_5(Tru)) \u2192 p_2(Tru)\n(p_1(Tru) \u2295 p_8(Tru)) \u2192 p_9(Tru)\n\u2200x (p_8(x) \u2192 p_5(x))\np_5(Tru) \u2192 p_7(Tru)\np_6(Tru) \u2192 \u00acp_7(Tru)\np_11(Tru) \u2192 p_6(Tru)",
            "Initial Goal": "\u00acp_6(Tru)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Tru)",
                    "-p_0(Tru)",
                    "p_3(Tru)",
                    "-p_2(Tru)",
                    "p_1(Tru)",
                    "all x (p_4(x) | p_10(x))",
                    "(p_11(Tru) | p_0(Tru)) & (-p_11(Tru) | -p_0(Tru))",
                    "-p_11(Tru) | p_9(Tru) | p_3(Tru)",
                    "-p_10(Tru) | -p_7(Tru) | p_5(Tru) | p_2(Tru)",
                    "(p_1(Tru) <-> p_8(Tru)) | p_9(Tru)",
                    "all x (-p_8(x) | p_5(x))",
                    "-p_5(Tru) | p_7(Tru)",
                    "-p_6(Tru) | -p_7(Tru)",
                    "-p_11(Tru) | p_6(Tru)"
                ],
                "formulas(goals)": [
                    "p_6(Tru)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": []
            }
        }
    ]
}