{
    "background_story": "Melanie, a passionate athlete, had always been dedicated to her soccer career. However, her life took an unexpected turn when she contracted dermatomycosis, a fungal infection of the skin, after using an unsterilized tattoo equipment. The infection spread rapidly, causing her significant discomfort and forcing her to take a break from the sport she loved. Determined to overcome this setback, Melanie worked closely with her dermatologist to manage the condition. She learned about the importance of skin hygiene, proper wound care, and the risks associated with dermatomycosis. As she recovered, Melanie became an advocate for skin health awareness, sharing her experience with her teammates and the wider community to prevent others from going through similar ordeals.",
    "predicates": [
        {
            "id": 0,
            "name": "gets_tattoo"
        },
        {
            "id": 1,
            "name": "eats_nutritiously"
        },
        {
            "id": 2,
            "name": "takes_medication"
        },
        {
            "id": 3,
            "name": "stays_active"
        },
        {
            "id": 4,
            "name": "stays_hydrated"
        },
        {
            "id": 5,
            "name": "engages_exercise"
        },
        {
            "id": 6,
            "name": "is_athlete"
        },
        {
            "id": 7,
            "name": "tracks_progress"
        },
        {
            "id": 8,
            "name": "experiences_skin_infection"
        },
        {
            "id": 9,
            "name": "seeks_medical_attention"
        },
        {
            "id": 10,
            "name": "becomes_health_advocate"
        },
        {
            "id": 11,
            "name": "prioritizes_health"
        },
        {
            "id": 12,
            "name": "has_rash"
        },
        {
            "id": 13,
            "name": "plays_sports"
        },
        {
            "id": 14,
            "name": "gets_injured"
        },
        {
            "id": 15,
            "name": "feels_pain"
        },
        {
            "id": 16,
            "name": "needs_rest"
        },
        {
            "id": 17,
            "name": "monitors_wellness"
        },
        {
            "id": 18,
            "name": "uses_unsafe_equipment"
        },
        {
            "id": 19,
            "name": "neglects_hygiene"
        },
        {
            "id": 20,
            "name": "listens_doctor"
        },
        {
            "id": 21,
            "name": "feels_ill"
        },
        {
            "id": 22,
            "name": "gets_itch"
        },
        {
            "id": 23,
            "name": "trains_hard"
        },
        {
            "id": 24,
            "name": "takes_risks"
        },
        {
            "id": 25,
            "name": "requires_recovery"
        },
        {
            "id": 26,
            "name": "enjoys_running"
        },
        {
            "id": 27,
            "name": "sets_goals"
        },
        {
            "id": 28,
            "name": "manages_stress"
        }
    ],
    "subject_name": "Melanie",
    "subject_category": "human",
    "keyword": "dermatomycosis",
    "all_facts": [
        {
            "id": 0,
            "subject": "Melanie",
            "text": "Melanie gets a tattoo.",
            "fol": "p_0(Melanie)",
            "str_fol": "gets_tattoo(Melanie)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Melanie",
            "text": "Melanie eats nutritiously.",
            "fol": "p_1(Melanie)",
            "str_fol": "eats_nutritiously(Melanie)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Melanie",
            "text": "Melanie does not take medication.",
            "fol": "\u00acp_2(Melanie)",
            "str_fol": "\u00actakes_medication(Melanie)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Melanie",
            "text": "Melanie does not stay active.",
            "fol": "\u00acp_3(Melanie)",
            "str_fol": "\u00acstays_active(Melanie)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Melanie",
            "text": "Melanie stays hydrated.",
            "fol": "p_4(Melanie)",
            "str_fol": "stays_hydrated(Melanie)",
            "negation": false
        },
        {
            "id": 5,
            "subject": "Melanie",
            "text": "Melanie engages in exercise.",
            "fol": "p_5(Melanie)",
            "str_fol": "engages_exercise(Melanie)",
            "negation": false
        },
        {
            "id": 6,
            "subject": "Melanie",
            "text": "Melanie is an athlete.",
            "fol": "p_6(Melanie)",
            "str_fol": "is_athlete(Melanie)",
            "negation": false
        },
        {
            "id": 7,
            "subject": "Melanie",
            "text": "Melanie tracks her progress.",
            "fol": "p_7(Melanie)",
            "str_fol": "tracks_progress(Melanie)",
            "negation": false
        },
        {
            "id": 8,
            "subject": "Melanie",
            "text": "Melanie does not monitor her wellness.",
            "fol": "\u00acp_17(Melanie)",
            "str_fol": "\u00acmonitors_wellness(Melanie)",
            "negation": true
        },
        {
            "id": 9,
            "subject": "Melanie",
            "text": "Melanie plays sports.",
            "fol": "p_13(Melanie)",
            "str_fol": "plays_sports(Melanie)",
            "negation": false
        },
        {
            "id": 10,
            "subject": "Melanie",
            "text": "Melanie does not need rest.",
            "fol": "\u00acp_16(Melanie)",
            "str_fol": "\u00acneeds_rest(Melanie)",
            "negation": true
        },
        {
            "id": 11,
            "subject": "Melanie",
            "text": "Melanie does not get injured.",
            "fol": "\u00acp_14(Melanie)",
            "str_fol": "\u00acgets_injured(Melanie)",
            "negation": true
        },
        {
            "id": 12,
            "subject": "Melanie",
            "text": "Melanie has a rash.",
            "fol": "p_12(Melanie)",
            "str_fol": "has_rash(Melanie)",
            "negation": false
        },
        {
            "id": 13,
            "subject": "Melanie",
            "text": "Melanie seeks medical attention.",
            "fol": "p_9(Melanie)",
            "str_fol": "seeks_medical_attention(Melanie)",
            "negation": false
        },
        {
            "id": 14,
            "subject": "Melanie",
            "text": "Melanie does not prioritize her health.",
            "fol": "\u00acp_11(Melanie)",
            "str_fol": "\u00acprioritizes_health(Melanie)",
            "negation": true
        },
        {
            "id": 15,
            "subject": "Melanie",
            "text": "Melanie experiences a skin infection.",
            "fol": "p_8(Melanie)",
            "str_fol": "experiences_skin_infection(Melanie)",
            "negation": false
        },
        {
            "id": 16,
            "subject": "Melanie",
            "text": "Melanie does not become a health advocate.",
            "fol": "\u00acp_10(Melanie)",
            "str_fol": "\u00acbecomes_health_advocate(Melanie)",
            "negation": true
        }
    ],
    "context_facts": [
        {
            "id": 6,
            "subject": "Melanie",
            "text": "Melanie is an athlete.",
            "fol": "p_6(Melanie)",
            "str_fol": "is_athlete(Melanie)",
            "negation": false
        },
        {
            "id": 7,
            "subject": "Melanie",
            "text": "Melanie tracks her progress.",
            "fol": "p_7(Melanie)",
            "str_fol": "tracks_progress(Melanie)",
            "negation": false
        },
        {
            "id": 5,
            "subject": "Melanie",
            "text": "Melanie engages in exercise.",
            "fol": "p_5(Melanie)",
            "str_fol": "engages_exercise(Melanie)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Melanie",
            "text": "Melanie stays hydrated.",
            "fol": "p_4(Melanie)",
            "str_fol": "stays_hydrated(Melanie)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Melanie",
            "text": "Melanie does not take medication.",
            "fol": "\u00acp_2(Melanie)",
            "str_fol": "\u00actakes_medication(Melanie)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Melanie",
            "text": "Melanie eats nutritiously.",
            "fol": "p_1(Melanie)",
            "str_fol": "eats_nutritiously(Melanie)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Melanie",
            "text": "Melanie does not stay active.",
            "fol": "\u00acp_3(Melanie)",
            "str_fol": "\u00acstays_active(Melanie)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Melanie",
            "text": "Melanie gets a tattoo.",
            "fol": "p_0(Melanie)",
            "str_fol": "gets_tattoo(Melanie)",
            "negation": false
        }
    ],
    "context_rules": [
        {
            "id": 8,
            "text": "If Melanie is an athlete, then she either tracks her progress or monitors her wellness, but not both.",
            "fol": "p_6(Melanie) \u2192 (p_7(Melanie) \u2295 p_17(Melanie))",
            "str_fol": "is_athlete(Melanie) \u2192 (tracks_progress(Melanie) \u2295 monitors_wellness(Melanie))"
        },
        {
            "id": 7,
            "text": "If Melanie either engages in exercise or plays sports (but not both), then she monitors her wellness.",
            "fol": "(p_5(Melanie) \u2295 p_13(Melanie)) \u2192 p_17(Melanie)",
            "str_fol": "(engages_exercise(Melanie) \u2295 plays_sports(Melanie)) \u2192 monitors_wellness(Melanie)"
        },
        {
            "id": 6,
            "text": "For Melanie, either she stays hydrated or she needs rest, but not both at the same time.",
            "fol": "p_4(Melanie) \u2295 p_16(Melanie)",
            "str_fol": "stays_hydrated(Melanie) \u2295 needs_rest(Melanie)"
        },
        {
            "id": 5,
            "text": "Any person who gets injured or feels pain needs rest.",
            "fol": "\u2200x ((p_14(x) \u2228 p_15(x)) \u2192 p_16(x))",
            "str_fol": "\u2200x ((gets_injured(x) \u2228 feels_pain(x)) \u2192 needs_rest(x))"
        },
        {
            "id": 4,
            "text": "If Melanie plays sports, then she either gets injured or has a rash (or both).",
            "fol": "p_13(Melanie) \u2192 (p_14(Melanie) \u2228 p_12(Melanie))",
            "str_fol": "plays_sports(Melanie) \u2192 (gets_injured(Melanie) \u2228 has_rash(Melanie))"
        },
        {
            "id": 3,
            "text": "If Melanie either has a rash or seeks medical attention (but not both), then she takes medication.",
            "fol": "(p_12(Melanie) \u2295 p_9(Melanie)) \u2192 p_2(Melanie)",
            "str_fol": "(has_rash(Melanie) \u2295 seeks_medical_attention(Melanie)) \u2192 takes_medication(Melanie)"
        },
        {
            "id": 2,
            "text": "If someone prioritizes their health, then they eat nutritiously and stay active.",
            "fol": "\u2200x (p_11(x) \u2192 (p_1(x) \u2227 p_3(x)))",
            "str_fol": "\u2200x (prioritizes_health(x) \u2192 (eats_nutritiously(x) \u2227 stays_active(x)))"
        },
        {
            "id": 1,
            "text": "If Melanie gets a tattoo, then she either prioritizes her health or experiences a skin infection.",
            "fol": "p_0(Melanie) \u2192 (p_11(Melanie) \u2228 p_8(Melanie))",
            "str_fol": "gets_tattoo(Melanie) \u2192 (prioritizes_health(Melanie) \u2228 experiences_skin_infection(Melanie))"
        },
        {
            "id": 0,
            "text": "If Melanie experiences a skin infection, then she seeks medical attention and becomes a health advocate.",
            "fol": "p_8(Melanie) \u2192 (p_9(Melanie) \u2227 p_10(Melanie))",
            "str_fol": "experiences_skin_infection(Melanie) \u2192 (seeks_medical_attention(Melanie) \u2227 becomes_health_advocate(Melanie))"
        }
    ],
    "context": [
        {
            "id": 6,
            "subject": "Melanie",
            "text": "Melanie is an athlete.",
            "fol": "p_6(Melanie)",
            "str_fol": "is_athlete(Melanie)",
            "negation": false
        },
        {
            "id": 7,
            "subject": "Melanie",
            "text": "Melanie tracks her progress.",
            "fol": "p_7(Melanie)",
            "str_fol": "tracks_progress(Melanie)",
            "negation": false
        },
        {
            "id": 5,
            "subject": "Melanie",
            "text": "Melanie engages in exercise.",
            "fol": "p_5(Melanie)",
            "str_fol": "engages_exercise(Melanie)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Melanie",
            "text": "Melanie stays hydrated.",
            "fol": "p_4(Melanie)",
            "str_fol": "stays_hydrated(Melanie)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Melanie",
            "text": "Melanie does not take medication.",
            "fol": "\u00acp_2(Melanie)",
            "str_fol": "\u00actakes_medication(Melanie)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Melanie",
            "text": "Melanie eats nutritiously.",
            "fol": "p_1(Melanie)",
            "str_fol": "eats_nutritiously(Melanie)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Melanie",
            "text": "Melanie does not stay active.",
            "fol": "\u00acp_3(Melanie)",
            "str_fol": "\u00acstays_active(Melanie)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Melanie",
            "text": "Melanie gets a tattoo.",
            "fol": "p_0(Melanie)",
            "str_fol": "gets_tattoo(Melanie)",
            "negation": false
        },
        {
            "id": 8,
            "text": "If Melanie is an athlete, then she either tracks her progress or monitors her wellness, but not both.",
            "fol": "p_6(Melanie) \u2192 (p_7(Melanie) \u2295 p_17(Melanie))",
            "str_fol": "is_athlete(Melanie) \u2192 (tracks_progress(Melanie) \u2295 monitors_wellness(Melanie))"
        },
        {
            "id": 7,
            "text": "If Melanie either engages in exercise or plays sports (but not both), then she monitors her wellness.",
            "fol": "(p_5(Melanie) \u2295 p_13(Melanie)) \u2192 p_17(Melanie)",
            "str_fol": "(engages_exercise(Melanie) \u2295 plays_sports(Melanie)) \u2192 monitors_wellness(Melanie)"
        },
        {
            "id": 6,
            "text": "For Melanie, either she stays hydrated or she needs rest, but not both at the same time.",
            "fol": "p_4(Melanie) \u2295 p_16(Melanie)",
            "str_fol": "stays_hydrated(Melanie) \u2295 needs_rest(Melanie)"
        },
        {
            "id": 5,
            "text": "Any person who gets injured or feels pain needs rest.",
            "fol": "\u2200x ((p_14(x) \u2228 p_15(x)) \u2192 p_16(x))",
            "str_fol": "\u2200x ((gets_injured(x) \u2228 feels_pain(x)) \u2192 needs_rest(x))"
        },
        {
            "id": 4,
            "text": "If Melanie plays sports, then she either gets injured or has a rash (or both).",
            "fol": "p_13(Melanie) \u2192 (p_14(Melanie) \u2228 p_12(Melanie))",
            "str_fol": "plays_sports(Melanie) \u2192 (gets_injured(Melanie) \u2228 has_rash(Melanie))"
        },
        {
            "id": 3,
            "text": "If Melanie either has a rash or seeks medical attention (but not both), then she takes medication.",
            "fol": "(p_12(Melanie) \u2295 p_9(Melanie)) \u2192 p_2(Melanie)",
            "str_fol": "(has_rash(Melanie) \u2295 seeks_medical_attention(Melanie)) \u2192 takes_medication(Melanie)"
        },
        {
            "id": 2,
            "text": "If someone prioritizes their health, then they eat nutritiously and stay active.",
            "fol": "\u2200x (p_11(x) \u2192 (p_1(x) \u2227 p_3(x)))",
            "str_fol": "\u2200x (prioritizes_health(x) \u2192 (eats_nutritiously(x) \u2227 stays_active(x)))"
        },
        {
            "id": 1,
            "text": "If Melanie gets a tattoo, then she either prioritizes her health or experiences a skin infection.",
            "fol": "p_0(Melanie) \u2192 (p_11(Melanie) \u2228 p_8(Melanie))",
            "str_fol": "gets_tattoo(Melanie) \u2192 (prioritizes_health(Melanie) \u2228 experiences_skin_infection(Melanie))"
        },
        {
            "id": 0,
            "text": "If Melanie experiences a skin infection, then she seeks medical attention and becomes a health advocate.",
            "fol": "p_8(Melanie) \u2192 (p_9(Melanie) \u2227 p_10(Melanie))",
            "str_fol": "experiences_skin_infection(Melanie) \u2192 (seeks_medical_attention(Melanie) \u2227 becomes_health_advocate(Melanie))"
        }
    ],
    "context_fol": "p_6(Melanie)\np_7(Melanie)\np_5(Melanie)\np_4(Melanie)\n\u00acp_2(Melanie)\np_1(Melanie)\n\u00acp_3(Melanie)\np_0(Melanie)\np_6(Melanie) \u2192 (p_7(Melanie) \u2295 p_17(Melanie))\n(p_5(Melanie) \u2295 p_13(Melanie)) \u2192 p_17(Melanie)\np_4(Melanie) \u2295 p_16(Melanie)\n\u2200x ((p_14(x) \u2228 p_15(x)) \u2192 p_16(x))\np_13(Melanie) \u2192 (p_14(Melanie) \u2228 p_12(Melanie))\n(p_12(Melanie) \u2295 p_9(Melanie)) \u2192 p_2(Melanie)\n\u2200x (p_11(x) \u2192 (p_1(x) \u2227 p_3(x)))\np_0(Melanie) \u2192 (p_11(Melanie) \u2228 p_8(Melanie))\np_8(Melanie) \u2192 (p_9(Melanie) \u2227 p_10(Melanie))",
    "conclusion": {
        "id": 16,
        "subject": "Melanie",
        "text": "Melanie does not become a health advocate.",
        "fol": "\u00acp_10(Melanie)",
        "str_fol": "\u00acbecomes_health_advocate(Melanie)",
        "negation": true
    },
    "initial_answer": "False",
    "initial_goal": "\u00acp_10(Melanie)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 6,
                    "subject": "Melanie",
                    "text": "Melanie is an athlete.",
                    "fol": "p_6(Melanie)",
                    "str_fol": "is_athlete(Melanie)",
                    "negation": false
                },
                {
                    "id": 7,
                    "subject": "Melanie",
                    "text": "Melanie tracks her progress.",
                    "fol": "p_7(Melanie)",
                    "str_fol": "tracks_progress(Melanie)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 8,
                    "text": "If Melanie is an athlete, then she either tracks her progress or monitors her wellness, but not both.",
                    "fol": "p_6(Melanie) \u2192 (p_7(Melanie) \u2295 p_17(Melanie))",
                    "str_fol": "is_athlete(Melanie) \u2192 (tracks_progress(Melanie) \u2295 monitors_wellness(Melanie))"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Melanie",
                "text": "Melanie does not monitor her wellness.",
                "fol": "\u00acp_17(Melanie)",
                "str_fol": "\u00acmonitors_wellness(Melanie)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 5,
                    "subject": "Melanie",
                    "text": "Melanie engages in exercise.",
                    "fol": "p_5(Melanie)",
                    "str_fol": "engages_exercise(Melanie)",
                    "negation": false
                },
                {
                    "id": 8,
                    "subject": "Melanie",
                    "text": "Melanie does not monitor her wellness.",
                    "fol": "\u00acp_17(Melanie)",
                    "str_fol": "\u00acmonitors_wellness(Melanie)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 7,
                    "text": "If Melanie either engages in exercise or plays sports (but not both), then she monitors her wellness.",
                    "fol": "(p_5(Melanie) \u2295 p_13(Melanie)) \u2192 p_17(Melanie)",
                    "str_fol": "(engages_exercise(Melanie) \u2295 plays_sports(Melanie)) \u2192 monitors_wellness(Melanie)"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Melanie",
                "text": "Melanie plays sports.",
                "fol": "p_13(Melanie)",
                "str_fol": "plays_sports(Melanie)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 4,
                    "subject": "Melanie",
                    "text": "Melanie stays hydrated.",
                    "fol": "p_4(Melanie)",
                    "str_fol": "stays_hydrated(Melanie)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 6,
                    "text": "For Melanie, either she stays hydrated or she needs rest, but not both at the same time.",
                    "fol": "p_4(Melanie) \u2295 p_16(Melanie)",
                    "str_fol": "stays_hydrated(Melanie) \u2295 needs_rest(Melanie)"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Melanie",
                "text": "Melanie does not need rest.",
                "fol": "\u00acp_16(Melanie)",
                "str_fol": "\u00acneeds_rest(Melanie)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 10,
                    "subject": "Melanie",
                    "text": "Melanie does not need rest.",
                    "fol": "\u00acp_16(Melanie)",
                    "str_fol": "\u00acneeds_rest(Melanie)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "Any person who gets injured or feels pain needs rest.",
                    "fol": "\u2200x ((p_14(x) \u2228 p_15(x)) \u2192 p_16(x))",
                    "str_fol": "\u2200x ((gets_injured(x) \u2228 feels_pain(x)) \u2192 needs_rest(x))"
                }
            ],
            "conclusion": {
                "id": 11,
                "subject": "Melanie",
                "text": "Melanie does not get injured.",
                "fol": "\u00acp_14(Melanie)",
                "str_fol": "\u00acgets_injured(Melanie)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 9,
                    "subject": "Melanie",
                    "text": "Melanie plays sports.",
                    "fol": "p_13(Melanie)",
                    "str_fol": "plays_sports(Melanie)",
                    "negation": false
                },
                {
                    "id": 11,
                    "subject": "Melanie",
                    "text": "Melanie does not get injured.",
                    "fol": "\u00acp_14(Melanie)",
                    "str_fol": "\u00acgets_injured(Melanie)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "If Melanie plays sports, then she either gets injured or has a rash (or both).",
                    "fol": "p_13(Melanie) \u2192 (p_14(Melanie) \u2228 p_12(Melanie))",
                    "str_fol": "plays_sports(Melanie) \u2192 (gets_injured(Melanie) \u2228 has_rash(Melanie))"
                }
            ],
            "conclusion": {
                "id": 12,
                "subject": "Melanie",
                "text": "Melanie has a rash.",
                "fol": "p_12(Melanie)",
                "str_fol": "has_rash(Melanie)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 12,
                    "subject": "Melanie",
                    "text": "Melanie has a rash.",
                    "fol": "p_12(Melanie)",
                    "str_fol": "has_rash(Melanie)",
                    "negation": false
                },
                {
                    "id": 2,
                    "subject": "Melanie",
                    "text": "Melanie does not take medication.",
                    "fol": "\u00acp_2(Melanie)",
                    "str_fol": "\u00actakes_medication(Melanie)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "If Melanie either has a rash or seeks medical attention (but not both), then she takes medication.",
                    "fol": "(p_12(Melanie) \u2295 p_9(Melanie)) \u2192 p_2(Melanie)",
                    "str_fol": "(has_rash(Melanie) \u2295 seeks_medical_attention(Melanie)) \u2192 takes_medication(Melanie)"
                }
            ],
            "conclusion": {
                "id": 13,
                "subject": "Melanie",
                "text": "Melanie seeks medical attention.",
                "fol": "p_9(Melanie)",
                "str_fol": "seeks_medical_attention(Melanie)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 1,
                    "subject": "Melanie",
                    "text": "Melanie eats nutritiously.",
                    "fol": "p_1(Melanie)",
                    "str_fol": "eats_nutritiously(Melanie)",
                    "negation": false
                },
                {
                    "id": 3,
                    "subject": "Melanie",
                    "text": "Melanie does not stay active.",
                    "fol": "\u00acp_3(Melanie)",
                    "str_fol": "\u00acstays_active(Melanie)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "If someone prioritizes their health, then they eat nutritiously and stay active.",
                    "fol": "\u2200x (p_11(x) \u2192 (p_1(x) \u2227 p_3(x)))",
                    "str_fol": "\u2200x (prioritizes_health(x) \u2192 (eats_nutritiously(x) \u2227 stays_active(x)))"
                }
            ],
            "conclusion": {
                "id": 14,
                "subject": "Melanie",
                "text": "Melanie does not prioritize her health.",
                "fol": "\u00acp_11(Melanie)",
                "str_fol": "\u00acprioritizes_health(Melanie)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 0,
                    "subject": "Melanie",
                    "text": "Melanie gets a tattoo.",
                    "fol": "p_0(Melanie)",
                    "str_fol": "gets_tattoo(Melanie)",
                    "negation": false
                },
                {
                    "id": 14,
                    "subject": "Melanie",
                    "text": "Melanie does not prioritize her health.",
                    "fol": "\u00acp_11(Melanie)",
                    "str_fol": "\u00acprioritizes_health(Melanie)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "If Melanie gets a tattoo, then she either prioritizes her health or experiences a skin infection.",
                    "fol": "p_0(Melanie) \u2192 (p_11(Melanie) \u2228 p_8(Melanie))",
                    "str_fol": "gets_tattoo(Melanie) \u2192 (prioritizes_health(Melanie) \u2228 experiences_skin_infection(Melanie))"
                }
            ],
            "conclusion": {
                "id": 15,
                "subject": "Melanie",
                "text": "Melanie experiences a skin infection.",
                "fol": "p_8(Melanie)",
                "str_fol": "experiences_skin_infection(Melanie)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 15,
                    "subject": "Melanie",
                    "text": "Melanie experiences a skin infection.",
                    "fol": "p_8(Melanie)",
                    "str_fol": "experiences_skin_infection(Melanie)",
                    "negation": false
                },
                {
                    "id": 13,
                    "subject": "Melanie",
                    "text": "Melanie seeks medical attention.",
                    "fol": "p_9(Melanie)",
                    "str_fol": "seeks_medical_attention(Melanie)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "If Melanie experiences a skin infection, then she seeks medical attention and becomes a health advocate.",
                    "fol": "p_8(Melanie) \u2192 (p_9(Melanie) \u2227 p_10(Melanie))",
                    "str_fol": "experiences_skin_infection(Melanie) \u2192 (seeks_medical_attention(Melanie) \u2227 becomes_health_advocate(Melanie))"
                }
            ],
            "conclusion": {
                "id": 16,
                "subject": "Melanie",
                "text": "Melanie does not become a health advocate.",
                "fol": "\u00acp_10(Melanie)",
                "str_fol": "\u00acbecomes_health_advocate(Melanie)",
                "negation": true
            }
        }
    ],
    "proof_trace": "7 (all x (p_11(x) -> p_1(x) & p_3(x))).  [assumption].\n8 p_0(Melanie) -> p_11(Melanie) | p_8(Melanie).  [assumption].\n9 p_8(Melanie) -> p_9(Melanie) & p_10(Melanie).  [assumption].\n10 --p_10(Melanie).  [goal].\n26 -p_11(x) | p_3(x).  [clausify(7)].\n27 -p_3(Melanie).  [assumption].\n28 -p_0(Melanie) | p_11(Melanie) | p_8(Melanie).  [clausify(8)].\n29 p_0(Melanie).  [assumption].\n32 p_11(Melanie) | p_8(Melanie).  [resolve(28,a,29,a)].\n34 -p_8(Melanie) | p_10(Melanie).  [clausify(9)].\n35 p_11(Melanie) | p_10(Melanie).  [resolve(32,b,34,a)].\n36 -p_10(Melanie).  [deny(10)].\n45 -p_11(Melanie).  [resolve(26,b,27,a)].\n46 p_11(Melanie).  [resolve(35,b,36,a)].\n49 $F.  [resolve(46,a,45,a)].",
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_6(Melanie)\np_7(Melanie)\np_5(Melanie)\np_4(Melanie)\n\u00acp_2(Melanie)\np_1(Melanie)\n\u00acp_3(Melanie)\np_0(Melanie)\np_6(Melanie) \u2192 (p_7(Melanie) \u2295 p_17(Melanie))\n(p_5(Melanie) \u2295 p_13(Melanie)) \u2192 p_17(Melanie)\np_4(Melanie) \u2295 p_16(Melanie)\n\u2200x ((p_14(x) \u2228 p_15(x)) \u2192 p_16(x))\np_13(Melanie) \u2192 (p_14(Melanie) \u2228 p_12(Melanie))\n(p_12(Melanie) \u2295 p_9(Melanie)) \u2192 p_2(Melanie)\n\u2200x (p_11(x) \u2192 (p_1(x) \u2227 p_3(x)))\np_0(Melanie) \u2192 (p_11(Melanie) \u2228 p_8(Melanie))\np_8(Melanie) \u2192 (p_9(Melanie) \u2227 p_10(Melanie))\np_8(Melanie)\np_9(Melanie)\np_10(Melanie)\n\u00acp_8(Melanie) \u2228 p_9(Melanie)\n\u00acp_8(Melanie) \u2228 p_10(Melanie)\np_11(Melanie) \u2192 p_1(Melanie)\np_11(Melanie) \u2192 p_3(Melanie)\np_0(Melanie) \u2192 p_8(Melanie)",
            "Initial Goal": "\u00acp_10(Melanie)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_6(Melanie)",
                    "p_7(Melanie)",
                    "p_5(Melanie)",
                    "p_4(Melanie)",
                    "-p_2(Melanie)",
                    "p_1(Melanie)",
                    "-p_3(Melanie)",
                    "p_0(Melanie)",
                    "p_6(Melanie) -> (-(p_7(Melanie) <-> p_17(Melanie)))",
                    "(-(p_5(Melanie) <-> p_13(Melanie))) -> p_17(Melanie)",
                    "-(p_4(Melanie) <-> p_16(Melanie))",
                    "all x ((p_14(x) | p_15(x)) -> p_16(x))",
                    "p_13(Melanie) -> (p_14(Melanie) | p_12(Melanie))",
                    "(-(p_12(Melanie) <-> p_9(Melanie))) -> p_2(Melanie)",
                    "all x (p_11(x) -> (p_1(x) & p_3(x)))",
                    "p_0(Melanie) -> (p_11(Melanie) | p_8(Melanie))",
                    "p_8(Melanie) -> (p_9(Melanie) & p_10(Melanie))",
                    "p_8(Melanie)",
                    "p_9(Melanie)",
                    "p_10(Melanie)",
                    "-p_8(Melanie) | p_9(Melanie)",
                    "-p_8(Melanie) | p_10(Melanie)",
                    "p_11(Melanie) -> p_1(Melanie)",
                    "p_11(Melanie) -> p_3(Melanie)",
                    "p_0(Melanie) -> p_8(Melanie)"
                ],
                "formulas(goals)": [
                    "p_10(Melanie)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_8(Melanie)",
                    "p_9(Melanie)",
                    "p_10(Melanie)"
                ],
                "added_rules": [
                    "\u00acp_8(Melanie) \u2228 p_9(Melanie)",
                    "\u00acp_8(Melanie) \u2228 p_10(Melanie)",
                    "p_11(Melanie) \u2192 p_1(Melanie)",
                    "p_11(Melanie) \u2192 p_3(Melanie)",
                    "p_0(Melanie) \u2192 p_8(Melanie)"
                ]
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_6(Melanie)\np_7(Melanie)\np_5(Melanie)\np_4(Melanie)\n\u00acp_2(Melanie)\np_1(Melanie)\n\u00acp_3(Melanie)\np_0(Melanie)\np_6(Melanie) \u2192 (p_7(Melanie) \u2295 p_17(Melanie))\n(p_5(Melanie) \u2295 p_13(Melanie)) \u2192 p_17(Melanie)\np_4(Melanie) \u2295 p_16(Melanie)\n\u2200x ((p_14(x) \u2228 p_15(x)) \u2192 p_16(x))\np_13(Melanie) \u2192 (p_14(Melanie) \u2228 p_12(Melanie))\n(p_12(Melanie) \u2295 p_9(Melanie)) \u2192 p_2(Melanie)\n\u2200x (p_11(x) \u2192 (p_1(x) \u2227 p_3(x)))\np_0(Melanie) \u2192 (p_11(Melanie) \u2228 p_8(Melanie))\np_8(Melanie) \u2192 (p_9(Melanie) \u2227 p_10(Melanie))\np_8(Melanie)\np_9(Melanie)\n\u00acp_8(Melanie) \u2228 p_9(Melanie)\np_11(Melanie) \u2192 p_1(Melanie)\np_11(Melanie) \u2192 p_3(Melanie)\np_0(Melanie) \u2192 p_8(Melanie)\n\u00acp_8(Melanie) \u2228 \u00acp_10(Melanie)",
            "Initial Goal": "\u00acp_10(Melanie)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_6(Melanie).",
                    "p_7(Melanie).",
                    "p_5(Melanie).",
                    "p_4(Melanie).",
                    "-p_2(Melanie).",
                    "p_1(Melanie).",
                    "-p_3(Melanie).",
                    "p_0(Melanie).",
                    "p_6(Melanie) -> (-(p_7(Melanie) <-> p_17(Melanie))).",
                    "(-(p_5(Melanie) <-> p_13(Melanie))) -> p_17(Melanie).",
                    "-(p_4(Melanie) <-> p_16(Melanie)).",
                    "all x ((p_14(x) | p_15(x)) -> p_16(x)).",
                    "p_13(Melanie) -> (p_14(Melanie) | p_12(Melanie)).",
                    "(-(p_12(Melanie) <-> p_9(Melanie))) -> p_2(Melanie).",
                    "all x (p_11(x) -> (p_1(x) & p_3(x))).",
                    "p_0(Melanie) -> (p_11(Melanie) | p_8(Melanie)).",
                    "p_8(Melanie) -> (p_9(Melanie) & p_10(Melanie)).",
                    "p_8(Melanie).",
                    "p_9(Melanie).",
                    "-p_8(Melanie) | p_9(Melanie).",
                    "p_11(Melanie) -> p_1(Melanie).",
                    "p_11(Melanie) -> p_3(Melanie).",
                    "p_0(Melanie) -> p_8(Melanie).",
                    "-p_8(Melanie) | -p_10(Melanie)."
                ],
                "formulas(goals)": [
                    "-p_10(Melanie)."
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "p_10(Melanie)"
                ],
                "removed_rules": [
                    "\u00acp_8(Melanie) \u2228 p_10(Melanie)"
                ],
                "added_facts": [],
                "added_rules": [
                    "\u00acp_8(Melanie) \u2228 \u00acp_10(Melanie)"
                ]
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_6(Melanie)\np_7(Melanie)\np_5(Melanie)\np_4(Melanie)\n\u00acp_2(Melanie)\np_1(Melanie)\n\u00acp_3(Melanie)\np_0(Melanie)\np_6(Melanie) \u2192 (p_7(Melanie) \u2295 p_17(Melanie))\n(p_5(Melanie) \u2295 p_13(Melanie)) \u2192 p_17(Melanie))\np_4(Melanie) \u2295 p_16(Melanie)\n\u2200x ((p_14(x) \u2228 p_15(x)) \u2192 p_16(x))\np_13(Melanie) \u2192 (p_14(Melanie) \u2228 p_12(Melanie))\n(p_12(Melanie) \u2295 p_9(Melanie)) \u2192 p_2(Melanie)\n\u2200x (p_11(x) \u2192 (p_1(x) \u2227 p_3(x)))\np_0(Melanie) \u2192 (p_11(Melanie) \u2228 p_8(Melanie))\np_8(Melanie)\np_9(Melanie)\n\u00acp_8(Melanie) \u2228 p_9(Melanie)\np_11(Melanie) \u2192 p_1(Melanie)\np_11(Melanie) \u2192 p_3(Melanie)\np_0(Melanie) \u2192 p_8(Melanie)\n\u00acp_8(Melanie) \u2228 \u00acp_10(Melanie)\np_10(Melanie) \u2192 \u00acp_8(Melanie)\np_8(Melanie) \u2227 p_9(Melanie)",
            "Initial Goal": "\u00acp_10(Melanie)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_6(Melanie)",
                    "p_7(Melanie)",
                    "p_5(Melanie)",
                    "p_4(Melanie)",
                    "-p_2(Melanie)",
                    "p_1(Melanie)",
                    "-p_3(Melanie)",
                    "p_0(Melanie)",
                    "p_6(Melanie) -> (-(p_7(Melanie) <-> p_17(Melanie)))",
                    "(-(p_5(Melanie) <-> p_13(Melanie))) -> p_17(Melanie)",
                    "-(p_4(Melanie) <-> p_16(Melanie))",
                    "all x ((p_14(x) | p_15(x)) -> p_16(x))",
                    "p_13(Melanie) -> (p_14(Melanie) | p_12(Melanie))",
                    "(-(p_12(Melanie) <-> p_9(Melanie))) -> p_2(Melanie)",
                    "all x (p_11(x) -> (p_1(x) & p_3(x)))",
                    "p_0(Melanie) -> (p_11(Melanie) | p_8(Melanie))",
                    "p_8(Melanie)",
                    "p_9(Melanie)",
                    "(-p_8(Melanie)) | p_9(Melanie)",
                    "p_11(Melanie) -> p_1(Melanie)",
                    "p_11(Melanie) -> p_3(Melanie)",
                    "p_0(Melanie) -> p_8(Melanie)",
                    "(-p_8(Melanie)) | (-p_10(Melanie))",
                    "p_10(Melanie) -> (-p_8(Melanie))",
                    "p_8(Melanie) & p_9(Melanie)"
                ],
                "formulas(goals)": [
                    "-p_10(Melanie)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_8(Melanie) \u2192 (p_9(Melanie) \u2227 p_10(Melanie))"
                ],
                "added_facts": [
                    "p_8(Melanie) \u2227 p_9(Melanie)"
                ],
                "added_rules": [
                    "p_10(Melanie) \u2192 \u00acp_8(Melanie)"
                ]
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_8(Melanie)\np_9(Melanie)\np_10(Melanie) \u2192 p_8(Melanie)\np_9(Melanie) \u2192 p_10(Melanie)",
            "Initial Goal": "\u00acp_10(Melanie)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_8(Melanie)",
                    "p_9(Melanie)",
                    "p_10(Melanie) -> p_8(Melanie)",
                    "p_9(Melanie) -> p_10(Melanie)"
                ],
                "formulas(goals)": [
                    "p_10(Melanie)"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "p_6(Melanie)",
                    "p_7(Melanie)",
                    "p_5(Melanie)",
                    "p_4(Melanie)",
                    "\u00acp_2(Melanie)",
                    "p_1(Melanie)",
                    "\u00acp_3(Melanie)",
                    "p_0(Melanie)"
                ],
                "removed_rules": [
                    "p_6(Melanie) \u2192 (p_7(Melanie) \u2295 p_17(Melanie))",
                    "(p_5(Melanie) \u2295 p_13(Melanie)) \u2192 p_17(Melanie)",
                    "p_4(Melanie) \u2295 p_16(Melanie)",
                    "\u2200x ((p_14(x) \u2228 p_15(x)) \u2192 p_16(x))",
                    "p_13(Melanie) \u2192 (p_14(Melanie) \u2228 p_12(Melanie))",
                    "(p_12(Melanie) \u2295 p_9(Melanie)) \u2192 p_2(Melanie)",
                    "\u2200x (p_11(x) \u2192 (p_1(x) \u2227 p_3(x)))",
                    "p_0(Melanie) \u2192 (p_11(Melanie) \u2228 p_8(Melanie))",
                    "\u00acp_8(Melanie) \u2228 p_9(Melanie)",
                    "p_11(Melanie) \u2192 p_1(Melanie)",
                    "p_11(Melanie) \u2192 p_3(Melanie)",
                    "p_0(Melanie) \u2192 p_8(Melanie)",
                    "\u00acp_8(Melanie) \u2228 \u00acp_10(Melanie)",
                    "p_10(Melanie) \u2192 \u00acp_8(Melanie)",
                    "p_8(Melanie) \u2227 p_9(Melanie)"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_10(Melanie) \u2192 p_8(Melanie)",
                    "p_9(Melanie) \u2192 p_10(Melanie)"
                ]
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_8(Melanie)\np_9(Melanie)\np_10(Melanie) \u2192 p_8(Melanie)\np_9(Melanie) \u2192 p_10(Melanie)\n\u00acp_10(Melanie) \u2192 \u00acp_9(Melanie)\np_10(Melanie) \u2228 \u00acp_10(Melanie)",
            "Initial Goal": "\u00acp_10(Melanie)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_8(Melanie)",
                    "p_9(Melanie)",
                    "p_10(Melanie) -> p_8(Melanie)",
                    "p_9(Melanie) -> p_10(Melanie)",
                    "-p_10(Melanie) -> -p_9(Melanie)",
                    "p_10(Melanie) | -p_10(Melanie)"
                ],
                "formulas(goals)": [
                    "-(-p_10(Melanie))"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "\u00acp_10(Melanie) \u2192 \u00acp_9(Melanie)",
                    "p_10(Melanie) \u2228 \u00acp_10(Melanie)"
                ]
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_8(Melanie)\np_9(Melanie)\np_10(Melanie) \u2192 p_8(Melanie)\np_10(Melanie) \u2228 \u00acp_10(Melanie)\np_8(Melanie) \u2192 \u00acp_10(Melanie)",
            "Initial Goal": "\u00acp_10(Melanie)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_8(Melanie)",
                    "p_9(Melanie)",
                    "p_10(Melanie) -> p_8(Melanie)",
                    "p_10(Melanie) | -p_10(Melanie)",
                    "p_8(Melanie) -> -p_10(Melanie)"
                ],
                "formulas(goals)": [
                    "-p_10(Melanie)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_9(Melanie) \u2192 p_10(Melanie)",
                    "\u00acp_10(Melanie) \u2192 \u00acp_9(Melanie)"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_8(Melanie) \u2192 \u00acp_10(Melanie)"
                ]
            }
        }
    ]
}