{
    "background_story": "Madeline, a dedicated veterinarian, had been working with a local animal shelter for years. One day, she encountered a severely underweight cat named Whiskers, who had been neglected by its previous owner. Madeline decided to take Whiskers under her care and prescribed Megestrol, an appetite stimulant, to help the cat regain its strength. With patience and love, Madeline nursed Whiskers back to health, and soon the cat's appetite and energy levels improved dramatically. As Whiskers flourished, Madeline realized the importance of Megestrol in treating animals with similar conditions. She began to research and educate other veterinarians about the benefits of Megestrol, ultimately improving the lives of countless animals in need.",
    "predicates": [
        {
            "id": 0,
            "name": "work_at_shelter"
        },
        {
            "id": 1,
            "name": "is_kind"
        },
        {
            "id": 2,
            "name": "provide_medication"
        },
        {
            "id": 3,
            "name": "conduct_research"
        },
        {
            "id": 4,
            "name": "save_lives"
        },
        {
            "id": 5,
            "name": "has_skills"
        },
        {
            "id": 6,
            "name": "wants_to_volunteer"
        },
        {
            "id": 7,
            "name": "care_for_animals"
        },
        {
            "id": 8,
            "name": "love_animals"
        },
        {
            "id": 9,
            "name": "treat_pets"
        },
        {
            "id": 10,
            "name": "prescribe_Megestrol"
        },
        {
            "id": 11,
            "name": "nurse_wounds"
        },
        {
            "id": 12,
            "name": "help_animals"
        },
        {
            "id": 13,
            "name": "is_veterinarian"
        },
        {
            "id": 14,
            "name": "educate_others"
        },
        {
            "id": 15,
            "name": "donate_time"
        },
        {
            "id": 16,
            "name": "understand_anatomy"
        },
        {
            "id": 17,
            "name": "assist_surgeons"
        },
        {
            "id": 18,
            "name": "use_appetite_stimulants"
        },
        {
            "id": 19,
            "name": "improve_health"
        },
        {
            "id": 20,
            "name": "owns_cat"
        },
        {
            "id": 21,
            "name": "feeds_strays"
        },
        {
            "id": 22,
            "name": "heal_injuries"
        },
        {
            "id": 23,
            "name": "feed_orphans"
        },
        {
            "id": 24,
            "name": "study_anatomy"
        },
        {
            "id": 25,
            "name": "diagnose_illness"
        },
        {
            "id": 26,
            "name": "study_biology"
        },
        {
            "id": 27,
            "name": "rescue_wildlife"
        },
        {
            "id": 28,
            "name": "own_pet"
        },
        {
            "id": 29,
            "name": "feed_strays"
        },
        {
            "id": 30,
            "name": "shares_knowledge"
        },
        {
            "id": 31,
            "name": "has_excess"
        },
        {
            "id": 32,
            "name": "feel_empathy"
        }
    ],
    "subject_name": "Madeline",
    "subject_category": "human",
    "keyword": "megestrol",
    "all_facts": [
        {
            "id": 0,
            "subject": "Madeline",
            "text": "Madeline works at an animal shelter.",
            "fol": "p_0(Madeline)",
            "str_fol": "work_at_shelter(Madeline)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Madeline",
            "text": "Madeline is not kind.",
            "fol": "\u00acp_1(Madeline)",
            "str_fol": "\u00acis_kind(Madeline)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Madeline",
            "text": "Madeline does not provide medication.",
            "fol": "\u00acp_2(Madeline)",
            "str_fol": "\u00acprovide_medication(Madeline)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Madeline",
            "text": "Madeline does not conduct research.",
            "fol": "\u00acp_3(Madeline)",
            "str_fol": "\u00acconduct_research(Madeline)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Madeline",
            "text": "Madeline saves lives.",
            "fol": "p_4(Madeline)",
            "str_fol": "save_lives(Madeline)",
            "negation": false
        },
        {
            "id": 5,
            "subject": "Madeline",
            "text": "Madeline has skills.",
            "fol": "p_5(Madeline)",
            "str_fol": "has_skills(Madeline)",
            "negation": false
        },
        {
            "id": 6,
            "subject": "Madeline",
            "text": "Madeline wants to volunteer.",
            "fol": "p_6(Madeline)",
            "str_fol": "wants_to_volunteer(Madeline)",
            "negation": false
        },
        {
            "id": 7,
            "subject": "Madeline",
            "text": "Madeline donates her time.",
            "fol": "p_15(Madeline)",
            "str_fol": "donate_time(Madeline)",
            "negation": false
        },
        {
            "id": 8,
            "subject": "Madeline",
            "text": "Madeline does not educate others.",
            "fol": "\u00acp_14(Madeline)",
            "str_fol": "\u00aceducate_others(Madeline)",
            "negation": true
        },
        {
            "id": 9,
            "subject": "Madeline",
            "text": "Madeline loves animals.",
            "fol": "p_8(Madeline)",
            "str_fol": "love_animals(Madeline)",
            "negation": false
        },
        {
            "id": 10,
            "subject": "Madeline",
            "text": "Madeline does not help animals.",
            "fol": "\u00acp_12(Madeline)",
            "str_fol": "\u00achelp_animals(Madeline)",
            "negation": true
        },
        {
            "id": 11,
            "subject": "Madeline",
            "text": "Madeline is a veterinarian.",
            "fol": "p_13(Madeline)",
            "str_fol": "is_veterinarian(Madeline)",
            "negation": false
        },
        {
            "id": 12,
            "subject": "Madeline",
            "text": "Madeline nurses wounds.",
            "fol": "p_11(Madeline)",
            "str_fol": "nurse_wounds(Madeline)",
            "negation": false
        },
        {
            "id": 13,
            "subject": "Madeline",
            "text": "Madeline treats pets.",
            "fol": "p_9(Madeline)",
            "str_fol": "treat_pets(Madeline)",
            "negation": false
        }
    ],
    "context_facts": [
        {
            "id": 5,
            "subject": "Madeline",
            "text": "Madeline has skills.",
            "fol": "p_5(Madeline)",
            "str_fol": "has_skills(Madeline)",
            "negation": false
        },
        {
            "id": 6,
            "subject": "Madeline",
            "text": "Madeline wants to volunteer.",
            "fol": "p_6(Madeline)",
            "str_fol": "wants_to_volunteer(Madeline)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Madeline",
            "text": "Madeline saves lives.",
            "fol": "p_4(Madeline)",
            "str_fol": "save_lives(Madeline)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Madeline",
            "text": "Madeline is not kind.",
            "fol": "\u00acp_1(Madeline)",
            "str_fol": "\u00acis_kind(Madeline)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Madeline",
            "text": "Madeline does not conduct research.",
            "fol": "\u00acp_3(Madeline)",
            "str_fol": "\u00acconduct_research(Madeline)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Madeline",
            "text": "Madeline does not provide medication.",
            "fol": "\u00acp_2(Madeline)",
            "str_fol": "\u00acprovide_medication(Madeline)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Madeline",
            "text": "Madeline works at an animal shelter.",
            "fol": "p_0(Madeline)",
            "str_fol": "work_at_shelter(Madeline)",
            "negation": false
        }
    ],
    "context_rules": [
        {
            "id": 8,
            "text": "If someone has skills and wants to volunteer, then they donate their time.",
            "fol": "\u2200x ((p_5(x) \u2227 p_6(x)) \u2192 p_15(x))",
            "str_fol": "\u2200x ((has_skills(x) \u2227 wants_to_volunteer(x)) \u2192 donate_time(x))"
        },
        {
            "id": 7,
            "text": "Madeline either educates others or donates her time, but not necessarily both.",
            "fol": "p_14(Madeline) \u2295 p_15(Madeline)",
            "str_fol": "educate_others(Madeline) \u2295 donate_time(Madeline)"
        },
        {
            "id": 6,
            "text": "If Madeline saves lives, then she either educates others or loves animals (or both).",
            "fol": "p_4(Madeline) \u2192 (p_14(Madeline) \u2228 p_8(Madeline))",
            "str_fol": "save_lives(Madeline) \u2192 (educate_others(Madeline) \u2228 love_animals(Madeline))"
        },
        {
            "id": 5,
            "text": "Anyone who helps animals is kind.",
            "fol": "\u2200x (p_12(x) \u2192 p_1(x))",
            "str_fol": "\u2200x (help_animals(x) \u2192 is_kind(x))"
        },
        {
            "id": 4,
            "text": "Madeline is either a veterinarian or conducts research, but not both.",
            "fol": "p_13(Madeline) \u2295 p_3(Madeline)",
            "str_fol": "is_veterinarian(Madeline) \u2295 conduct_research(Madeline)"
        },
        {
            "id": 3,
            "text": "If Madeline is a veterinarian, then she either nurses wounds or provides medication, but not both.",
            "fol": "p_13(Madeline) \u2192 (p_11(Madeline) \u2295 p_2(Madeline))",
            "str_fol": "is_veterinarian(Madeline) \u2192 (nurse_wounds(Madeline) \u2295 provide_medication(Madeline))"
        },
        {
            "id": 2,
            "text": "If Madeline either treats pets or nurses wounds (but not both), then she helps animals.",
            "fol": "(p_9(Madeline) \u2295 p_11(Madeline)) \u2192 p_12(Madeline)",
            "str_fol": "(treat_pets(Madeline) \u2295 nurse_wounds(Madeline)) \u2192 help_animals(Madeline)"
        },
        {
            "id": 1,
            "text": "Madeline either treats pets or prescribes Megestrol.",
            "fol": "p_9(Madeline) \u2228 p_10(Madeline)",
            "str_fol": "treat_pets(Madeline) \u2228 prescribe_Megestrol(Madeline)"
        },
        {
            "id": 0,
            "text": "If someone cares for animals, then they love animals.",
            "fol": "\u2200x (p_7(x) \u2192 p_8(x))",
            "str_fol": "\u2200x (care_for_animals(x) \u2192 love_animals(x))"
        }
    ],
    "context": [
        {
            "id": 5,
            "subject": "Madeline",
            "text": "Madeline has skills.",
            "fol": "p_5(Madeline)",
            "str_fol": "has_skills(Madeline)",
            "negation": false
        },
        {
            "id": 6,
            "subject": "Madeline",
            "text": "Madeline wants to volunteer.",
            "fol": "p_6(Madeline)",
            "str_fol": "wants_to_volunteer(Madeline)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Madeline",
            "text": "Madeline saves lives.",
            "fol": "p_4(Madeline)",
            "str_fol": "save_lives(Madeline)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Madeline",
            "text": "Madeline is not kind.",
            "fol": "\u00acp_1(Madeline)",
            "str_fol": "\u00acis_kind(Madeline)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Madeline",
            "text": "Madeline does not conduct research.",
            "fol": "\u00acp_3(Madeline)",
            "str_fol": "\u00acconduct_research(Madeline)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Madeline",
            "text": "Madeline does not provide medication.",
            "fol": "\u00acp_2(Madeline)",
            "str_fol": "\u00acprovide_medication(Madeline)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Madeline",
            "text": "Madeline works at an animal shelter.",
            "fol": "p_0(Madeline)",
            "str_fol": "work_at_shelter(Madeline)",
            "negation": false
        },
        {
            "id": 8,
            "text": "If someone has skills and wants to volunteer, then they donate their time.",
            "fol": "\u2200x ((p_5(x) \u2227 p_6(x)) \u2192 p_15(x))",
            "str_fol": "\u2200x ((has_skills(x) \u2227 wants_to_volunteer(x)) \u2192 donate_time(x))"
        },
        {
            "id": 7,
            "text": "Madeline either educates others or donates her time, but not necessarily both.",
            "fol": "p_14(Madeline) \u2295 p_15(Madeline)",
            "str_fol": "educate_others(Madeline) \u2295 donate_time(Madeline)"
        },
        {
            "id": 6,
            "text": "If Madeline saves lives, then she either educates others or loves animals (or both).",
            "fol": "p_4(Madeline) \u2192 (p_14(Madeline) \u2228 p_8(Madeline))",
            "str_fol": "save_lives(Madeline) \u2192 (educate_others(Madeline) \u2228 love_animals(Madeline))"
        },
        {
            "id": 5,
            "text": "Anyone who helps animals is kind.",
            "fol": "\u2200x (p_12(x) \u2192 p_1(x))",
            "str_fol": "\u2200x (help_animals(x) \u2192 is_kind(x))"
        },
        {
            "id": 4,
            "text": "Madeline is either a veterinarian or conducts research, but not both.",
            "fol": "p_13(Madeline) \u2295 p_3(Madeline)",
            "str_fol": "is_veterinarian(Madeline) \u2295 conduct_research(Madeline)"
        },
        {
            "id": 3,
            "text": "If Madeline is a veterinarian, then she either nurses wounds or provides medication, but not both.",
            "fol": "p_13(Madeline) \u2192 (p_11(Madeline) \u2295 p_2(Madeline))",
            "str_fol": "is_veterinarian(Madeline) \u2192 (nurse_wounds(Madeline) \u2295 provide_medication(Madeline))"
        },
        {
            "id": 2,
            "text": "If Madeline either treats pets or nurses wounds (but not both), then she helps animals.",
            "fol": "(p_9(Madeline) \u2295 p_11(Madeline)) \u2192 p_12(Madeline)",
            "str_fol": "(treat_pets(Madeline) \u2295 nurse_wounds(Madeline)) \u2192 help_animals(Madeline)"
        },
        {
            "id": 1,
            "text": "Madeline either treats pets or prescribes Megestrol.",
            "fol": "p_9(Madeline) \u2228 p_10(Madeline)",
            "str_fol": "treat_pets(Madeline) \u2228 prescribe_Megestrol(Madeline)"
        },
        {
            "id": 0,
            "text": "If someone cares for animals, then they love animals.",
            "fol": "\u2200x (p_7(x) \u2192 p_8(x))",
            "str_fol": "\u2200x (care_for_animals(x) \u2192 love_animals(x))"
        }
    ],
    "context_fol": "p_5(Madeline)\np_6(Madeline)\np_4(Madeline)\n\u00acp_1(Madeline)\n\u00acp_3(Madeline)\n\u00acp_2(Madeline)\np_0(Madeline)\n\u2200x ((p_5(x) \u2227 p_6(x)) \u2192 p_15(x))\np_14(Madeline) \u2295 p_15(Madeline)\np_4(Madeline) \u2192 (p_14(Madeline) \u2228 p_8(Madeline))\n\u2200x (p_12(x) \u2192 p_1(x))\np_13(Madeline) \u2295 p_3(Madeline)\np_13(Madeline) \u2192 (p_11(Madeline) \u2295 p_2(Madeline))\n(p_9(Madeline) \u2295 p_11(Madeline)) \u2192 p_12(Madeline)\np_9(Madeline) \u2228 p_10(Madeline)\n\u2200x (p_7(x) \u2192 p_8(x))",
    "conclusion": {
        "id": 18,
        "text": "Madeline cares for animals and either works at an animal shelter or prescribes Megestrol (or both).",
        "fol": "p_7(Madeline) \u2227 (p_0(Madeline) \u2228 p_10(Madeline))",
        "str_fol": "care_for_animals(Madeline) \u2227 (work_at_shelter(Madeline) \u2228 prescribe_Megestrol(Madeline))"
    },
    "initial_answer": "Uncertain",
    "initial_goal": "p_7(Madeline) \u2227 (p_0(Madeline) \u2228 p_10(Madeline))",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 5,
                    "subject": "Madeline",
                    "text": "Madeline has skills.",
                    "fol": "p_5(Madeline)",
                    "str_fol": "has_skills(Madeline)",
                    "negation": false
                },
                {
                    "id": 6,
                    "subject": "Madeline",
                    "text": "Madeline wants to volunteer.",
                    "fol": "p_6(Madeline)",
                    "str_fol": "wants_to_volunteer(Madeline)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 8,
                    "text": "If someone has skills and wants to volunteer, then they donate their time.",
                    "fol": "\u2200x ((p_5(x) \u2227 p_6(x)) \u2192 p_15(x))",
                    "str_fol": "\u2200x ((has_skills(x) \u2227 wants_to_volunteer(x)) \u2192 donate_time(x))"
                }
            ],
            "conclusion": {
                "id": 7,
                "subject": "Madeline",
                "text": "Madeline donates her time.",
                "fol": "p_15(Madeline)",
                "str_fol": "donate_time(Madeline)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 7,
                    "subject": "Madeline",
                    "text": "Madeline donates her time.",
                    "fol": "p_15(Madeline)",
                    "str_fol": "donate_time(Madeline)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 7,
                    "text": "Madeline either educates others or donates her time, but not necessarily both.",
                    "fol": "p_14(Madeline) \u2295 p_15(Madeline)",
                    "str_fol": "educate_others(Madeline) \u2295 donate_time(Madeline)"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Madeline",
                "text": "Madeline does not educate others.",
                "fol": "\u00acp_14(Madeline)",
                "str_fol": "\u00aceducate_others(Madeline)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 4,
                    "subject": "Madeline",
                    "text": "Madeline saves lives.",
                    "fol": "p_4(Madeline)",
                    "str_fol": "save_lives(Madeline)",
                    "negation": false
                },
                {
                    "id": 8,
                    "subject": "Madeline",
                    "text": "Madeline does not educate others.",
                    "fol": "\u00acp_14(Madeline)",
                    "str_fol": "\u00aceducate_others(Madeline)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 6,
                    "text": "If Madeline saves lives, then she either educates others or loves animals (or both).",
                    "fol": "p_4(Madeline) \u2192 (p_14(Madeline) \u2228 p_8(Madeline))",
                    "str_fol": "save_lives(Madeline) \u2192 (educate_others(Madeline) \u2228 love_animals(Madeline))"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Madeline",
                "text": "Madeline loves animals.",
                "fol": "p_8(Madeline)",
                "str_fol": "love_animals(Madeline)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 1,
                    "subject": "Madeline",
                    "text": "Madeline is not kind.",
                    "fol": "\u00acp_1(Madeline)",
                    "str_fol": "\u00acis_kind(Madeline)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "Anyone who helps animals is kind.",
                    "fol": "\u2200x (p_12(x) \u2192 p_1(x))",
                    "str_fol": "\u2200x (help_animals(x) \u2192 is_kind(x))"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Madeline",
                "text": "Madeline does not help animals.",
                "fol": "\u00acp_12(Madeline)",
                "str_fol": "\u00achelp_animals(Madeline)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 3,
                    "subject": "Madeline",
                    "text": "Madeline does not conduct research.",
                    "fol": "\u00acp_3(Madeline)",
                    "str_fol": "\u00acconduct_research(Madeline)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "Madeline is either a veterinarian or conducts research, but not both.",
                    "fol": "p_13(Madeline) \u2295 p_3(Madeline)",
                    "str_fol": "is_veterinarian(Madeline) \u2295 conduct_research(Madeline)"
                }
            ],
            "conclusion": {
                "id": 11,
                "subject": "Madeline",
                "text": "Madeline is a veterinarian.",
                "fol": "p_13(Madeline)",
                "str_fol": "is_veterinarian(Madeline)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 11,
                    "subject": "Madeline",
                    "text": "Madeline is a veterinarian.",
                    "fol": "p_13(Madeline)",
                    "str_fol": "is_veterinarian(Madeline)",
                    "negation": false
                },
                {
                    "id": 2,
                    "subject": "Madeline",
                    "text": "Madeline does not provide medication.",
                    "fol": "\u00acp_2(Madeline)",
                    "str_fol": "\u00acprovide_medication(Madeline)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "If Madeline is a veterinarian, then she either nurses wounds or provides medication, but not both.",
                    "fol": "p_13(Madeline) \u2192 (p_11(Madeline) \u2295 p_2(Madeline))",
                    "str_fol": "is_veterinarian(Madeline) \u2192 (nurse_wounds(Madeline) \u2295 provide_medication(Madeline))"
                }
            ],
            "conclusion": {
                "id": 12,
                "subject": "Madeline",
                "text": "Madeline nurses wounds.",
                "fol": "p_11(Madeline)",
                "str_fol": "nurse_wounds(Madeline)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 12,
                    "subject": "Madeline",
                    "text": "Madeline nurses wounds.",
                    "fol": "p_11(Madeline)",
                    "str_fol": "nurse_wounds(Madeline)",
                    "negation": false
                },
                {
                    "id": 10,
                    "subject": "Madeline",
                    "text": "Madeline does not help animals.",
                    "fol": "\u00acp_12(Madeline)",
                    "str_fol": "\u00achelp_animals(Madeline)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "If Madeline either treats pets or nurses wounds (but not both), then she helps animals.",
                    "fol": "(p_9(Madeline) \u2295 p_11(Madeline)) \u2192 p_12(Madeline)",
                    "str_fol": "(treat_pets(Madeline) \u2295 nurse_wounds(Madeline)) \u2192 help_animals(Madeline)"
                }
            ],
            "conclusion": {
                "id": 13,
                "subject": "Madeline",
                "text": "Madeline treats pets.",
                "fol": "p_9(Madeline)",
                "str_fol": "treat_pets(Madeline)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 13,
                    "subject": "Madeline",
                    "text": "Madeline treats pets.",
                    "fol": "p_9(Madeline)",
                    "str_fol": "treat_pets(Madeline)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "Madeline either treats pets or prescribes Megestrol.",
                    "fol": "p_9(Madeline) \u2228 p_10(Madeline)",
                    "str_fol": "treat_pets(Madeline) \u2228 prescribe_Megestrol(Madeline)"
                }
            ],
            "conclusion": null
        },
        {
            "facts": [
                {
                    "id": 9,
                    "subject": "Madeline",
                    "text": "Madeline loves animals.",
                    "fol": "p_8(Madeline)",
                    "str_fol": "love_animals(Madeline)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "If someone cares for animals, then they love animals.",
                    "fol": "\u2200x (p_7(x) \u2192 p_8(x))",
                    "str_fol": "\u2200x (care_for_animals(x) \u2192 love_animals(x))"
                }
            ],
            "conclusion": null
        },
        {
            "facts": [
                {
                    "id": 0,
                    "subject": "Madeline",
                    "text": "Madeline works at an animal shelter.",
                    "fol": "p_0(Madeline)",
                    "str_fol": "work_at_shelter(Madeline)",
                    "negation": false
                }
            ],
            "rules": [],
            "conclusion": null
        }
    ],
    "proof_trace": null,
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "UNCERTAIN",
            "Edited Assumptions": "p_5(Madeline)\np_6(Madeline)\np_4(Madeline)\n\u00acp_1(Madeline)\n\u00acp_3(Madeline)\n\u00acp_2(Madeline)\np_0(Madeline)\n\u2200x ((p_5(x) \u2227 p_6(x)) \u2192 p_15(x))\np_14(Madeline) \u2295 p_15(Madeline)\np_4(Madeline) \u2192 (p_14(Madeline) \u2228 p_8(Madeline))\n\u2200x (p_12(x) \u2192 p_1(x))\np_13(Madeline) \u2295 p_3(Madeline)\np_13(Madeline) \u2192 (p_11(Madeline) \u2295 p_2(Madeline))\n(p_9(Madeline) \u2295 p_11(Madeline)) \u2192 p_12(Madeline)\np_9(Madeline) \u2228 p_10(Madeline)\n\u2200x (p_7(x) \u2192 p_8(x))",
            "Initial Goal": "p_7(Madeline) \u2227 (p_0(Madeline) \u2228 p_10(Madeline))",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Madeline)",
                    "p_6(Madeline)",
                    "p_4(Madeline)",
                    "-p_1(Madeline)",
                    "-p_3(Madeline)",
                    "-p_2(Madeline)",
                    "p_0(Madeline)",
                    "all x ((p_5(x) & p_6(x)) -> p_15(x))",
                    "-(p_14(Madeline) <-> p_15(Madeline))",
                    "p_4(Madeline) -> (p_14(Madeline) | p_8(Madeline))",
                    "all x (p_12(x) -> p_1(x))",
                    "-(p_13(Madeline) <-> p_3(Madeline))",
                    "p_13(Madeline) -> (-(p_11(Madeline) <-> p_2(Madeline)))",
                    "(-(p_9(Madeline) <-> p_11(Madeline))) -> p_12(Madeline)",
                    "p_9(Madeline) | p_10(Madeline)",
                    "all x (p_7(x) -> p_8(x))",
                    "(p_5(Madeline) & p_6(Madeline)) -> p_7(Madeline)"
                ],
                "formulas(goals)": [
                    "p_7(Madeline) & (p_0(Madeline) | p_10(Madeline))"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "(p_5(Madeline) \u2227 p_6(Madeline)) \u2192 p_7(Madeline)"
                ]
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_5(Madeline)\np_6(Madeline)\np_4(Madeline)\n\u00acp_1(Madeline)\n\u00acp_3(Madeline)\n\u00acp_2(Madeline)\n\u2200x ((p_5(x) \u2227 p_6(x)) \u2192 p_15(x))\np_14(Madeline) \u2295 p_15(Madeline)\np_4(Madeline) \u2192 (p_14(Madeline) \u2228 p_8(Madeline))\n\u2200x (p_12(x) \u2192 p_1(x))\np_13(Madeline) \u2295 p_3(Madeline)\np_13(Madeline) \u2192 (p_11(Madeline) \u2295 p_2(Madeline))\n(p_9(Madeline) \u2295 p_11(Madeline)) \u2192 p_12(Madeline)\np_9(Madeline) \u2228 p_10(Madeline)\n\u2200x (p_7(x) \u2192 p_8(x))\np_15(Madeline) \u2192 \u00acp_7(Madeline)",
            "Initial Goal": "p_7(Madeline) \u2227 (p_0(Madeline) \u2228 p_10(Madeline))",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Madeline)",
                    "p_6(Madeline)",
                    "p_4(Madeline)",
                    "-p_1(Madeline)",
                    "-p_3(Madeline)",
                    "-p_2(Madeline)",
                    "all x ((p_5(x) & p_6(x)) -> p_15(x))",
                    "-(p_14(Madeline) <-> p_15(Madeline))",
                    "p_4(Madeline) -> (p_14(Madeline) | p_8(Madeline))",
                    "all x (p_12(x) -> p_1(x))",
                    "-(p_13(Madeline) <-> p_3(Madeline))",
                    "p_13(Madeline) -> (-(p_11(Madeline) <-> p_2(Madeline)))",
                    "(-(p_9(Madeline) <-> p_11(Madeline))) -> p_12(Madeline)",
                    "p_9(Madeline) | p_10(Madeline)",
                    "all x (p_7(x) -> p_8(x))",
                    "p_15(Madeline) -> -p_7(Madeline)"
                ],
                "formulas(goals)": [
                    "-(p_7(Madeline) & (p_0(Madeline) | p_10(Madeline)))"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "p_0(Madeline)"
                ],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "p_15(Madeline) \u2192 \u00acp_7(Madeline)"
                ]
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_5(Madeline)\np_6(Madeline)\np_4(Madeline)\n\u00acp_1(Madeline)\n\u00acp_3(Madeline)\n\u00acp_2(Madeline)\n\u2200x ((p_5(x) \u2227 p_6(x)) \u2192 p_15(x))\np_14(Madeline) \u2295 p_15(Madeline)\np_4(Madeline) \u2192 (p_14(Madeline) \u2228 p_8(Madeline))\n\u2200x (p_12(x) \u2192 p_1(x))\np_13(Madeline) \u2295 p_3(Madeline)\np_13(Madeline) \u2192 (p_11(Madeline) \u2295 p_2(Madeline))\n(p_9(Madeline) \u2295 p_11(Madeline)) \u2192 p_12(Madeline)\np_10(Madeline)\n\u2200x (p_7(x) \u2192 p_8(x))\np_15(Madeline) \u2192 p_7(Madeline)",
            "Initial Goal": "p_7(Madeline) \u2227 (p_0(Madeline) \u2228 p_10(Madeline))",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Madeline)",
                    "p_6(Madeline)",
                    "p_4(Madeline)",
                    "-p_1(Madeline)",
                    "-p_3(Madeline)",
                    "-p_2(Madeline)",
                    "all x ((p_5(x) & p_6(x)) -> p_15(x))",
                    "-(p_14(Madeline) <-> p_15(Madeline))",
                    "p_4(Madeline) -> (p_14(Madeline) | p_8(Madeline))",
                    "all x (p_12(x) -> p_1(x))",
                    "-(p_13(Madeline) <-> p_3(Madeline))",
                    "p_13(Madeline) -> (-(p_11(Madeline) <-> p_2(Madeline)))",
                    "(-(p_9(Madeline) <-> p_11(Madeline))) -> p_12(Madeline)",
                    "p_10(Madeline)",
                    "all x (p_7(x) -> p_8(x))",
                    "p_15(Madeline) -> p_7(Madeline)"
                ],
                "formulas(goals)": [
                    "p_7(Madeline) & (p_0(Madeline) | p_10(Madeline))"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_10(Madeline)"
                ],
                "added_rules": [
                    "p_15(Madeline) \u2192 p_7(Madeline)"
                ]
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_5(Madeline)\np_6(Madeline)\np_4(Madeline)\n\u00acp_1(Madeline)\n\u00acp_3(Madeline)\n\u00acp_2(Madeline)\n\u2200x ((p_5(x) \u2227 p_6(x)) \u2192 p_15(x))\np_14(Madeline) \u2295 p_15(Madeline)\np_4(Madeline) \u2192 (p_14(Madeline) \u2228 p_8(Madeline))\n\u2200x (p_12(x) \u2192 p_1(x))\np_13(Madeline) \u2295 p_3(Madeline)\np_13(Madeline) \u2192 (p_11(Madeline) \u2295 p_2(Madeline))\n(p_9(Madeline) \u2295 p_11(Madeline)) \u2192 p_12(Madeline)\np_10(Madeline)\n\u2200x (p_7(x) \u2192 p_8(x))\np_15(Madeline) \u2192 \u00acp_7(Madeline)",
            "Initial Goal": "p_7(Madeline) \u2227 (p_0(Madeline) \u2228 p_10(Madeline))",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Madeline)",
                    "p_6(Madeline)",
                    "p_4(Madeline)",
                    "-p_1(Madeline)",
                    "-p_3(Madeline)",
                    "-p_2(Madeline)",
                    "all x ((p_5(x) & p_6(x)) -> p_15(x))",
                    "-(p_14(Madeline) <-> p_15(Madeline))",
                    "p_4(Madeline) -> (p_14(Madeline) | p_8(Madeline))",
                    "all x (p_12(x) -> p_1(x))",
                    "-(p_13(Madeline) <-> p_3(Madeline))",
                    "p_13(Madeline) -> (-(p_11(Madeline) <-> p_2(Madeline)))",
                    "(-(p_9(Madeline) <-> p_11(Madeline))) -> p_12(Madeline)",
                    "p_10(Madeline)",
                    "all x (p_7(x) -> p_8(x))",
                    "p_15(Madeline) -> -p_7(Madeline)"
                ],
                "formulas(goals)": [
                    "-(p_7(Madeline) & (p_0(Madeline) | p_10(Madeline)))"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_15(Madeline) \u2192 p_7(Madeline)"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_15(Madeline) \u2192 \u00acp_7(Madeline)"
                ]
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_5(Madeline)\np_6(Madeline)\np_4(Madeline)\n\u00acp_1(Madeline)\n\u00acp_3(Madeline)\n\u00acp_2(Madeline)\n\u2200x ((p_5(x) \u2227 p_6(x)) \u2192 p_15(x))\np_14(Madeline) \u2295 p_15(Madeline)\np_4(Madeline) \u2192 (p_14(Madeline) \u2228 p_8(Madeline))\n\u2200x (p_12(x) \u2192 p_1(x))\np_13(Madeline) \u2295 p_3(Madeline)\np_13(Madeline) \u2192 (p_11(Madeline) \u2295 p_2(Madeline))\n(p_9(Madeline) \u2295 p_11(Madeline)) \u2192 p_12(Madeline)\np_10(Madeline)\n\u2200x (p_7(x) \u2192 p_8(x))\np_15(Madeline) \u2192 \u00acp_7(Madeline)\np_15(Madeline)\n\u00acp_7(Madeline)\n\u2200x (\u00acp_15(x) \u2192 (\u00acp_5(x) \u2228 \u00acp_6(x)))\n\u00acp_4(Madeline) \u2228 p_14(Madeline) \u2228 p_8(Madeline)\n(p_14(Madeline) \u2228 p_15(Madeline)) \u2227 (\u00acp_14(Madeline) \u2228 \u00acp_15(Madeline))\n(p_13(Madeline) \u2228 p_3(Madeline)) \u2227 (\u00acp_13(Madeline) \u2228 \u00acp_3(Madeline))",
            "Initial Goal": "p_7(Madeline) \u2227 (p_0(Madeline) \u2228 p_10(Madeline))",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Madeline)",
                    "p_6(Madeline)",
                    "p_4(Madeline)",
                    "-p_1(Madeline)",
                    "-p_3(Madeline)",
                    "-p_2(Madeline)",
                    "all x ((p_5(x) & p_6(x)) -> p_15(x))",
                    "-(p_14(Madeline) <-> p_15(Madeline))",
                    "p_4(Madeline) -> (p_14(Madeline) | p_8(Madeline))",
                    "all x (p_12(x) -> p_1(x))",
                    "-(p_13(Madeline) <-> p_3(Madeline))",
                    "p_13(Madeline) -> (-(p_11(Madeline) <-> p_2(Madeline)))",
                    "(-(p_9(Madeline) <-> p_11(Madeline))) -> p_12(Madeline)",
                    "p_10(Madeline)",
                    "all x (p_7(x) -> p_8(x))",
                    "p_15(Madeline) -> -p_7(Madeline)",
                    "p_15(Madeline)",
                    "-p_7(Madeline)",
                    "all x (-p_15(x) -> (-p_5(x) | -p_6(x)))",
                    "-p_4(Madeline) | p_14(Madeline) | p_8(Madeline)",
                    "(p_14(Madeline) | p_15(Madeline)) & (-p_14(Madeline) | -p_15(Madeline))",
                    "(p_13(Madeline) | p_3(Madeline)) & (-p_13(Madeline) | -p_3(Madeline))"
                ],
                "formulas(goals)": [
                    "-(p_7(Madeline) & (p_0(Madeline) | p_10(Madeline)))"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_15(Madeline)",
                    "\u00acp_7(Madeline)"
                ],
                "added_rules": [
                    "\u2200x (\u00acp_15(x) \u2192 (\u00acp_5(x) \u2228 \u00acp_6(x)))",
                    "\u00acp_4(Madeline) \u2228 p_14(Madeline) \u2228 p_8(Madeline)",
                    "(p_14(Madeline) \u2228 p_15(Madeline)) \u2227 (\u00acp_14(Madeline) \u2228 \u00acp_15(Madeline))",
                    "(p_13(Madeline) \u2228 p_3(Madeline)) \u2227 (\u00acp_13(Madeline) \u2228 \u00acp_3(Madeline))"
                ]
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_5(Madeline)\np_6(Madeline)\np_4(Madeline)\n\u00acp_1(Madeline)\n\u00acp_3(Madeline)\n\u00acp_2(Madeline)\n\u2200x ((p_5(x) \u2227 p_6(x)) \u2192 p_15(x))\np_14(Madeline) \u2295 p_15(Madeline)\np_4(Madeline) \u2192 (p_14(Madeline) \u2228 p_8(Madeline))\n\u2200x (p_12(x) \u2192 p_1(x))\np_13(Madeline) \u2295 p_3(Madeline)\np_13(Madeline) \u2192 (p_11(Madeline) \u2295 p_2(Madeline))\n(p_9(Madeline) \u2295 p_11(Madeline)) \u2192 p_12(Madeline)\np_10(Madeline)\n\u2200x (p_7(x) \u2192 p_8(x))\np_15(Madeline)\n\u2200x (\u00acp_15(x) \u2192 (\u00acp_5(x) \u2228 \u00acp_6(x)))\n\u00acp_4(Madeline) \u2228 p_14(Madeline) \u2228 p_8(Madeline)\n(p_14(Madeline) \u2228 p_15(Madeline)) \u2227 (\u00acp_14(Madeline) \u2228 \u00acp_15(Madeline))\n(p_13(Madeline) \u2228 p_3(Madeline)) \u2227 (\u00acp_13(Madeline) \u2228 \u00acp_3(Madeline))\np_8(Madeline) \u2192 p_7(Madeline)",
            "Initial Goal": "p_7(Madeline) \u2227 (p_0(Madeline) \u2228 p_10(Madeline))",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Madeline)",
                    "p_6(Madeline)",
                    "p_4(Madeline)",
                    "-p_1(Madeline)",
                    "-p_3(Madeline)",
                    "-p_2(Madeline)",
                    "all x ((p_5(x) & p_6(x)) -> p_15(x))",
                    "-(p_14(Madeline) <-> p_15(Madeline))",
                    "p_4(Madeline) -> (p_14(Madeline) | p_8(Madeline))",
                    "all x (p_12(x) -> p_1(x))",
                    "-(p_13(Madeline) <-> p_3(Madeline))",
                    "p_13(Madeline) -> (-(p_11(Madeline) <-> p_2(Madeline)))",
                    "(-(p_9(Madeline) <-> p_11(Madeline))) -> p_12(Madeline)",
                    "p_10(Madeline)",
                    "all x (p_7(x) -> p_8(x))",
                    "p_15(Madeline)",
                    "all x (-p_15(x) -> (-p_5(x) | -p_6(x)))",
                    "-p_4(Madeline) | p_14(Madeline) | p_8(Madeline)",
                    "(p_14(Madeline) | p_15(Madeline)) & (-p_14(Madeline) | -p_15(Madeline))",
                    "(p_13(Madeline) | p_3(Madeline)) & (-p_13(Madeline) | -p_3(Madeline))",
                    "p_8(Madeline) -> p_7(Madeline)"
                ],
                "formulas(goals)": [
                    "p_7(Madeline) & (p_0(Madeline) | p_10(Madeline))"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "\u00acp_7(Madeline)"
                ],
                "removed_rules": [
                    "p_15(Madeline) \u2192 \u00acp_7(Madeline)"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_8(Madeline) \u2192 p_7(Madeline)"
                ]
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_5(Madeline)\np_6(Madeline)\np_4(Madeline)\n\u00acp_1(Madeline)\n\u00acp_3(Madeline)\n\u00acp_2(Madeline)\n\u2200x ((p_5(x) \u2227 p_6(x)) \u2192 p_15(x))\np_14(Madeline) \u2295 p_15(Madeline)\n\u2200x (p_12(x) \u2192 p_1(x))\np_13(Madeline) \u2295 p_3(Madeline)\np_13(Madeline) \u2192 (p_11(Madeline) \u2295 p_2(Madeline))\n(p_9(Madeline) \u2295 p_11(Madeline)) \u2192 p_12(Madeline)\np_10(Madeline)\n\u2200x (p_7(x) \u2192 p_8(x))\np_15(Madeline)\n\u2200x (\u00acp_15(x) \u2192 (\u00acp_5(x) \u2228 \u00acp_6(x)))\n(p_14(Madeline) \u2228 p_15(Madeline)) \u2227 (\u00acp_14(Madeline) \u2228 \u00acp_15(Madeline))\n(p_13(Madeline) \u2228 p_3(Madeline)) \u2227 (\u00acp_13(Madeline) \u2228 \u00acp_3(Madeline))\np_8(Madeline) \u2192 p_7(Madeline)\n\u00acp_4(Madeline) \u2228 p_14(Madeline) \u2228 \u00acp_8(Madeline)",
            "Initial Goal": "p_7(Madeline) \u2227 (p_0(Madeline) \u2228 p_10(Madeline))",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Madeline)",
                    "p_6(Madeline)",
                    "p_4(Madeline)",
                    "-p_1(Madeline)",
                    "-p_3(Madeline)",
                    "-p_2(Madeline)",
                    "(all x ((p_5(x) & p_6(x)) -> p_15(x)))",
                    "(-(p_14(Madeline) <-> p_15(Madeline)))",
                    "(all x (p_12(x) -> p_1(x)))",
                    "(-(p_13(Madeline) <-> p_3(Madeline)))",
                    "(p_13(Madeline) -> (-(p_11(Madeline) <-> p_2(Madeline))))",
                    "((-(p_9(Madeline) <-> p_11(Madeline))) -> p_12(Madeline))",
                    "p_10(Madeline)",
                    "(all x (p_7(x) -> p_8(x)))",
                    "p_15(Madeline)",
                    "(all x (-p_15(x) -> (-p_5(x) | -p_6(x))))",
                    "((p_14(Madeline) | p_15(Madeline)) & (-p_14(Madeline) | -p_15(Madeline)))",
                    "((p_13(Madeline) | p_3(Madeline)) & (-p_13(Madeline) | -p_3(Madeline)))",
                    "(p_8(Madeline) -> p_7(Madeline))",
                    "(-p_4(Madeline) | p_14(Madeline) | -p_8(Madeline))"
                ],
                "formulas(goals)": [
                    "-((p_7(Madeline) & (p_0(Madeline) | p_10(Madeline))))"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_4(Madeline) \u2192 (p_14(Madeline) \u2228 p_8(Madeline))",
                    "\u00acp_4(Madeline) \u2228 p_14(Madeline) \u2228 p_8(Madeline)"
                ],
                "added_facts": [],
                "added_rules": [
                    "\u00acp_4(Madeline) \u2228 p_14(Madeline) \u2228 \u00acp_8(Madeline)"
                ]
            }
        }
    ]
}