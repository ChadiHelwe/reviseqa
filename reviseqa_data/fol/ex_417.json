{
    "background_story": "Stefan, a charming and successful businessman, had always been driven to please his family. When his parents arranged for him to marry the daughter of a prominent business partner, Stefan reluctantly agreed. The wedding was a grand affair, but from the start, it was clear that Stefan and his bride, Elizabeth, were mismatched. Elizabeth's high society expectations clashed with Stefan's more laid-back nature, leading to constant disagreements. As time passed, Stefan realized he had mismarried, prioritizing family obligations over his own happiness. The marriage became a strained, loveless bond, with Stefan feeling trapped and uncertain about how to escape the arrangement without hurting those he loved.",
    "predicates": [
        {
            "id": 0,
            "name": "lacks_passion"
        },
        {
            "id": 1,
            "name": "hide_emotions"
        },
        {
            "id": 2,
            "name": "feels_trapped"
        },
        {
            "id": 3,
            "name": "avoids_confront"
        },
        {
            "id": 4,
            "name": "is_honest"
        },
        {
            "id": 5,
            "name": "is_introspective"
        },
        {
            "id": 6,
            "name": "is_reflective"
        },
        {
            "id": 7,
            "name": "mismarried"
        },
        {
            "id": 8,
            "name": "unhappy"
        },
        {
            "id": 9,
            "name": "regretful"
        },
        {
            "id": 10,
            "name": "prioritize_others"
        },
        {
            "id": 11,
            "name": "seeks_approval"
        },
        {
            "id": 12,
            "name": "is_compliant"
        },
        {
            "id": 13,
            "name": "is_reserved"
        },
        {
            "id": 14,
            "name": "speaks_frankly"
        },
        {
            "id": 15,
            "name": "keeps_thoughts"
        },
        {
            "id": 16,
            "name": "isolated"
        },
        {
            "id": 17,
            "name": "bitter"
        },
        {
            "id": 18,
            "name": "compromise_values"
        },
        {
            "id": 19,
            "name": "feel_resentful"
        },
        {
            "id": 20,
            "name": "please_family"
        },
        {
            "id": 21,
            "name": "seek_harmony"
        },
        {
            "id": 22,
            "name": "values_harmony"
        },
        {
            "id": 23,
            "name": "craves_recognition"
        },
        {
            "id": 24,
            "name": "avoids_conflict"
        },
        {
            "id": 25,
            "name": "yields_easily"
        },
        {
            "id": 26,
            "name": "holds_back"
        },
        {
            "id": 27,
            "name": "expresses_opinion"
        },
        {
            "id": 28,
            "name": "is_disciplined"
        },
        {
            "id": 29,
            "name": "is_outspoken"
        }
    ],
    "subject_name": "Stefan",
    "subject_category": "human",
    "keyword": "mismarry",
    "all_facts": [
        {
            "id": 0,
            "subject": "Stefan",
            "text": "Stefan lacks passion.",
            "fol": "p_0(Stefan)",
            "str_fol": "lacks_passion(Stefan)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Stefan",
            "text": "Stefan hides his emotions.",
            "fol": "p_1(Stefan)",
            "str_fol": "hide_emotions(Stefan)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Stefan",
            "text": "Stefan does not feel trapped.",
            "fol": "\u00acp_2(Stefan)",
            "str_fol": "\u00acfeels_trapped(Stefan)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Stefan",
            "text": "Stefan avoids confrontation.",
            "fol": "p_3(Stefan)",
            "str_fol": "avoids_confront(Stefan)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Stefan",
            "text": "Stefan is not honest.",
            "fol": "\u00acp_4(Stefan)",
            "str_fol": "\u00acis_honest(Stefan)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Stefan",
            "text": "Stefan is introspective.",
            "fol": "p_5(Stefan)",
            "str_fol": "is_introspective(Stefan)",
            "negation": false
        },
        {
            "id": 6,
            "subject": "Stefan",
            "text": "Stefan is not reflective.",
            "fol": "\u00acp_6(Stefan)",
            "str_fol": "\u00acis_reflective(Stefan)",
            "negation": true
        },
        {
            "id": 7,
            "subject": "Stefan",
            "text": "Stefan keeps his thoughts to himself.",
            "fol": "p_15(Stefan)",
            "str_fol": "keeps_thoughts(Stefan)",
            "negation": false
        },
        {
            "id": 8,
            "subject": "Stefan",
            "text": "Stefan does not speak frankly.",
            "fol": "\u00acp_14(Stefan)",
            "str_fol": "\u00acspeaks_frankly(Stefan)",
            "negation": true
        },
        {
            "id": 9,
            "subject": "Stefan",
            "text": "Stefan is reserved.",
            "fol": "p_13(Stefan)",
            "str_fol": "is_reserved(Stefan)",
            "negation": false
        },
        {
            "id": 10,
            "subject": "Stefan",
            "text": "Stefan is compliant.",
            "fol": "p_12(Stefan)",
            "str_fol": "is_compliant(Stefan)",
            "negation": false
        },
        {
            "id": 11,
            "subject": "Stefan",
            "text": "Stefan does not seek approval.",
            "fol": "\u00acp_11(Stefan)",
            "str_fol": "\u00acseeks_approval(Stefan)",
            "negation": true
        },
        {
            "id": 12,
            "subject": "Stefan",
            "text": "Stefan prioritizes others.",
            "fol": "p_10(Stefan)",
            "str_fol": "prioritize_others(Stefan)",
            "negation": false
        },
        {
            "id": 13,
            "subject": "Stefan",
            "text": "Stefan is regretful.",
            "fol": "p_9(Stefan)",
            "str_fol": "regretful(Stefan)",
            "negation": false
        },
        {
            "id": 14,
            "subject": "Stefan",
            "text": "Stefan is unhappy.",
            "fol": "p_8(Stefan)",
            "str_fol": "unhappy(Stefan)",
            "negation": false
        },
        {
            "id": 15,
            "subject": "Stefan",
            "text": "Stefan is mismarried.",
            "fol": "p_7(Stefan)",
            "str_fol": "mismarried(Stefan)",
            "negation": false
        }
    ],
    "context_facts": [
        {
            "id": 5,
            "subject": "Stefan",
            "text": "Stefan is introspective.",
            "fol": "p_5(Stefan)",
            "str_fol": "is_introspective(Stefan)",
            "negation": false
        },
        {
            "id": 6,
            "subject": "Stefan",
            "text": "Stefan is not reflective.",
            "fol": "\u00acp_6(Stefan)",
            "str_fol": "\u00acis_reflective(Stefan)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Stefan",
            "text": "Stefan is not honest.",
            "fol": "\u00acp_4(Stefan)",
            "str_fol": "\u00acis_honest(Stefan)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Stefan",
            "text": "Stefan avoids confrontation.",
            "fol": "p_3(Stefan)",
            "str_fol": "avoids_confront(Stefan)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Stefan",
            "text": "Stefan hides his emotions.",
            "fol": "p_1(Stefan)",
            "str_fol": "hide_emotions(Stefan)",
            "negation": false
        },
        {
            "id": 0,
            "subject": "Stefan",
            "text": "Stefan lacks passion.",
            "fol": "p_0(Stefan)",
            "str_fol": "lacks_passion(Stefan)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Stefan",
            "text": "Stefan does not feel trapped.",
            "fol": "\u00acp_2(Stefan)",
            "str_fol": "\u00acfeels_trapped(Stefan)",
            "negation": true
        }
    ],
    "context_rules": [
        {
            "id": 8,
            "text": "Everyone who is introspective either keeps their thoughts to themselves or is reflective.",
            "fol": "\u2200x (p_5(x) \u2192 (p_15(x) \u2228 p_6(x)))",
            "str_fol": "\u2200x (is_introspective(x) \u2192 (keeps_thoughts(x) \u2228 is_reflective(x)))"
        },
        {
            "id": 7,
            "text": "If someone speaks frankly, then they are honest.",
            "fol": "\u2200x (p_14(x) \u2192 p_4(x))",
            "str_fol": "\u2200x (speaks_frankly(x) \u2192 is_honest(x))"
        },
        {
            "id": 6,
            "text": "If someone avoids confrontation and keeps their thoughts to themselves, then they are reserved.",
            "fol": "\u2200x ((p_3(x) \u2227 p_15(x)) \u2192 p_13(x))",
            "str_fol": "\u2200x ((avoids_confront(x) \u2227 keeps_thoughts(x)) \u2192 is_reserved(x))"
        },
        {
            "id": 5,
            "text": "Stefan is either frank in his expressions or compliant with others' expectations, but not both.",
            "fol": "p_14(Stefan) \u2295 p_12(Stefan)",
            "str_fol": "speaks_frankly(Stefan) \u2295 is_compliant(Stefan)"
        },
        {
            "id": 4,
            "text": "If Stefan is compliant, then he either seeks approval or is reserved, but not both.",
            "fol": "p_12(Stefan) \u2192 (p_11(Stefan) \u2295 p_13(Stefan))",
            "str_fol": "is_compliant(Stefan) \u2192 (seeks_approval(Stefan) \u2295 is_reserved(Stefan))"
        },
        {
            "id": 3,
            "text": "Stefan either prioritizes others or seeks approval.",
            "fol": "p_10(Stefan) \u2228 p_11(Stefan)",
            "str_fol": "prioritize_others(Stefan) \u2228 seeks_approval(Stefan)"
        },
        {
            "id": 2,
            "text": "If Stefan prioritizes others, then he hides his emotions and is regretful.",
            "fol": "p_10(Stefan) \u2192 (p_1(Stefan) \u2227 p_9(Stefan))",
            "str_fol": "prioritize_others(Stefan) \u2192 (hide_emotions(Stefan) \u2227 regretful(Stefan))"
        },
        {
            "id": 1,
            "text": "Anyone who lacks passion or feels trapped is unhappy.",
            "fol": "\u2200x ((p_0(x) \u2228 p_2(x)) \u2192 p_8(x))",
            "str_fol": "\u2200x ((lacks_passion(x) \u2228 feels_trapped(x)) \u2192 unhappy(x))"
        },
        {
            "id": 0,
            "text": "For all humans, if someone is mismarried, then they are either unhappy or regretful (or both).",
            "fol": "\u2200x (p_7(x) \u2192 (p_8(x) \u2228 p_9(x)))",
            "str_fol": "\u2200x (mismarried(x) \u2192 (unhappy(x) \u2228 regretful(x)))"
        }
    ],
    "context": [
        {
            "id": 5,
            "subject": "Stefan",
            "text": "Stefan is introspective.",
            "fol": "p_5(Stefan)",
            "str_fol": "is_introspective(Stefan)",
            "negation": false
        },
        {
            "id": 6,
            "subject": "Stefan",
            "text": "Stefan is not reflective.",
            "fol": "\u00acp_6(Stefan)",
            "str_fol": "\u00acis_reflective(Stefan)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Stefan",
            "text": "Stefan is not honest.",
            "fol": "\u00acp_4(Stefan)",
            "str_fol": "\u00acis_honest(Stefan)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Stefan",
            "text": "Stefan avoids confrontation.",
            "fol": "p_3(Stefan)",
            "str_fol": "avoids_confront(Stefan)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Stefan",
            "text": "Stefan hides his emotions.",
            "fol": "p_1(Stefan)",
            "str_fol": "hide_emotions(Stefan)",
            "negation": false
        },
        {
            "id": 0,
            "subject": "Stefan",
            "text": "Stefan lacks passion.",
            "fol": "p_0(Stefan)",
            "str_fol": "lacks_passion(Stefan)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Stefan",
            "text": "Stefan does not feel trapped.",
            "fol": "\u00acp_2(Stefan)",
            "str_fol": "\u00acfeels_trapped(Stefan)",
            "negation": true
        },
        {
            "id": 8,
            "text": "Everyone who is introspective either keeps their thoughts to themselves or is reflective.",
            "fol": "\u2200x (p_5(x) \u2192 (p_15(x) \u2228 p_6(x)))",
            "str_fol": "\u2200x (is_introspective(x) \u2192 (keeps_thoughts(x) \u2228 is_reflective(x)))"
        },
        {
            "id": 7,
            "text": "If someone speaks frankly, then they are honest.",
            "fol": "\u2200x (p_14(x) \u2192 p_4(x))",
            "str_fol": "\u2200x (speaks_frankly(x) \u2192 is_honest(x))"
        },
        {
            "id": 6,
            "text": "If someone avoids confrontation and keeps their thoughts to themselves, then they are reserved.",
            "fol": "\u2200x ((p_3(x) \u2227 p_15(x)) \u2192 p_13(x))",
            "str_fol": "\u2200x ((avoids_confront(x) \u2227 keeps_thoughts(x)) \u2192 is_reserved(x))"
        },
        {
            "id": 5,
            "text": "Stefan is either frank in his expressions or compliant with others' expectations, but not both.",
            "fol": "p_14(Stefan) \u2295 p_12(Stefan)",
            "str_fol": "speaks_frankly(Stefan) \u2295 is_compliant(Stefan)"
        },
        {
            "id": 4,
            "text": "If Stefan is compliant, then he either seeks approval or is reserved, but not both.",
            "fol": "p_12(Stefan) \u2192 (p_11(Stefan) \u2295 p_13(Stefan))",
            "str_fol": "is_compliant(Stefan) \u2192 (seeks_approval(Stefan) \u2295 is_reserved(Stefan))"
        },
        {
            "id": 3,
            "text": "Stefan either prioritizes others or seeks approval.",
            "fol": "p_10(Stefan) \u2228 p_11(Stefan)",
            "str_fol": "prioritize_others(Stefan) \u2228 seeks_approval(Stefan)"
        },
        {
            "id": 2,
            "text": "If Stefan prioritizes others, then he hides his emotions and is regretful.",
            "fol": "p_10(Stefan) \u2192 (p_1(Stefan) \u2227 p_9(Stefan))",
            "str_fol": "prioritize_others(Stefan) \u2192 (hide_emotions(Stefan) \u2227 regretful(Stefan))"
        },
        {
            "id": 1,
            "text": "Anyone who lacks passion or feels trapped is unhappy.",
            "fol": "\u2200x ((p_0(x) \u2228 p_2(x)) \u2192 p_8(x))",
            "str_fol": "\u2200x ((lacks_passion(x) \u2228 feels_trapped(x)) \u2192 unhappy(x))"
        },
        {
            "id": 0,
            "text": "For all humans, if someone is mismarried, then they are either unhappy or regretful (or both).",
            "fol": "\u2200x (p_7(x) \u2192 (p_8(x) \u2228 p_9(x)))",
            "str_fol": "\u2200x (mismarried(x) \u2192 (unhappy(x) \u2228 regretful(x)))"
        }
    ],
    "context_fol": "p_5(Stefan)\n\u00acp_6(Stefan)\n\u00acp_4(Stefan)\np_3(Stefan)\np_1(Stefan)\np_0(Stefan)\n\u00acp_2(Stefan)\n\u2200x (p_5(x) \u2192 (p_15(x) \u2228 p_6(x)))\n\u2200x (p_14(x) \u2192 p_4(x))\n\u2200x ((p_3(x) \u2227 p_15(x)) \u2192 p_13(x))\np_14(Stefan) \u2295 p_12(Stefan)\np_12(Stefan) \u2192 (p_11(Stefan) \u2295 p_13(Stefan))\np_10(Stefan) \u2228 p_11(Stefan)\np_10(Stefan) \u2192 (p_1(Stefan) \u2227 p_9(Stefan))\n\u2200x ((p_0(x) \u2228 p_2(x)) \u2192 p_8(x))\n\u2200x (p_7(x) \u2192 (p_8(x) \u2228 p_9(x)))",
    "conclusion": {
        "id": 15,
        "subject": "Stefan",
        "text": "Stefan is mismarried.",
        "fol": "p_7(Stefan)",
        "str_fol": "mismarried(Stefan)",
        "negation": false
    },
    "initial_answer": "Uncertain",
    "initial_goal": "p_7(Stefan)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 5,
                    "subject": "Stefan",
                    "text": "Stefan is introspective.",
                    "fol": "p_5(Stefan)",
                    "str_fol": "is_introspective(Stefan)",
                    "negation": false
                },
                {
                    "id": 6,
                    "subject": "Stefan",
                    "text": "Stefan is not reflective.",
                    "fol": "\u00acp_6(Stefan)",
                    "str_fol": "\u00acis_reflective(Stefan)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 8,
                    "text": "Everyone who is introspective either keeps their thoughts to themselves or is reflective.",
                    "fol": "\u2200x (p_5(x) \u2192 (p_15(x) \u2228 p_6(x)))",
                    "str_fol": "\u2200x (is_introspective(x) \u2192 (keeps_thoughts(x) \u2228 is_reflective(x)))"
                }
            ],
            "conclusion": {
                "id": 7,
                "subject": "Stefan",
                "text": "Stefan keeps his thoughts to himself.",
                "fol": "p_15(Stefan)",
                "str_fol": "keeps_thoughts(Stefan)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 4,
                    "subject": "Stefan",
                    "text": "Stefan is not honest.",
                    "fol": "\u00acp_4(Stefan)",
                    "str_fol": "\u00acis_honest(Stefan)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 7,
                    "text": "If someone speaks frankly, then they are honest.",
                    "fol": "\u2200x (p_14(x) \u2192 p_4(x))",
                    "str_fol": "\u2200x (speaks_frankly(x) \u2192 is_honest(x))"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Stefan",
                "text": "Stefan does not speak frankly.",
                "fol": "\u00acp_14(Stefan)",
                "str_fol": "\u00acspeaks_frankly(Stefan)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 3,
                    "subject": "Stefan",
                    "text": "Stefan avoids confrontation.",
                    "fol": "p_3(Stefan)",
                    "str_fol": "avoids_confront(Stefan)",
                    "negation": false
                },
                {
                    "id": 7,
                    "subject": "Stefan",
                    "text": "Stefan keeps his thoughts to himself.",
                    "fol": "p_15(Stefan)",
                    "str_fol": "keeps_thoughts(Stefan)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 6,
                    "text": "If someone avoids confrontation and keeps their thoughts to themselves, then they are reserved.",
                    "fol": "\u2200x ((p_3(x) \u2227 p_15(x)) \u2192 p_13(x))",
                    "str_fol": "\u2200x ((avoids_confront(x) \u2227 keeps_thoughts(x)) \u2192 is_reserved(x))"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Stefan",
                "text": "Stefan is reserved.",
                "fol": "p_13(Stefan)",
                "str_fol": "is_reserved(Stefan)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 8,
                    "subject": "Stefan",
                    "text": "Stefan does not speak frankly.",
                    "fol": "\u00acp_14(Stefan)",
                    "str_fol": "\u00acspeaks_frankly(Stefan)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "Stefan is either frank in his expressions or compliant with others' expectations, but not both.",
                    "fol": "p_14(Stefan) \u2295 p_12(Stefan)",
                    "str_fol": "speaks_frankly(Stefan) \u2295 is_compliant(Stefan)"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Stefan",
                "text": "Stefan is compliant.",
                "fol": "p_12(Stefan)",
                "str_fol": "is_compliant(Stefan)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 10,
                    "subject": "Stefan",
                    "text": "Stefan is compliant.",
                    "fol": "p_12(Stefan)",
                    "str_fol": "is_compliant(Stefan)",
                    "negation": false
                },
                {
                    "id": 9,
                    "subject": "Stefan",
                    "text": "Stefan is reserved.",
                    "fol": "p_13(Stefan)",
                    "str_fol": "is_reserved(Stefan)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "If Stefan is compliant, then he either seeks approval or is reserved, but not both.",
                    "fol": "p_12(Stefan) \u2192 (p_11(Stefan) \u2295 p_13(Stefan))",
                    "str_fol": "is_compliant(Stefan) \u2192 (seeks_approval(Stefan) \u2295 is_reserved(Stefan))"
                }
            ],
            "conclusion": {
                "id": 11,
                "subject": "Stefan",
                "text": "Stefan does not seek approval.",
                "fol": "\u00acp_11(Stefan)",
                "str_fol": "\u00acseeks_approval(Stefan)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 11,
                    "subject": "Stefan",
                    "text": "Stefan does not seek approval.",
                    "fol": "\u00acp_11(Stefan)",
                    "str_fol": "\u00acseeks_approval(Stefan)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "Stefan either prioritizes others or seeks approval.",
                    "fol": "p_10(Stefan) \u2228 p_11(Stefan)",
                    "str_fol": "prioritize_others(Stefan) \u2228 seeks_approval(Stefan)"
                }
            ],
            "conclusion": {
                "id": 12,
                "subject": "Stefan",
                "text": "Stefan prioritizes others.",
                "fol": "p_10(Stefan)",
                "str_fol": "prioritize_others(Stefan)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 12,
                    "subject": "Stefan",
                    "text": "Stefan prioritizes others.",
                    "fol": "p_10(Stefan)",
                    "str_fol": "prioritize_others(Stefan)",
                    "negation": false
                },
                {
                    "id": 1,
                    "subject": "Stefan",
                    "text": "Stefan hides his emotions.",
                    "fol": "p_1(Stefan)",
                    "str_fol": "hide_emotions(Stefan)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "If Stefan prioritizes others, then he hides his emotions and is regretful.",
                    "fol": "p_10(Stefan) \u2192 (p_1(Stefan) \u2227 p_9(Stefan))",
                    "str_fol": "prioritize_others(Stefan) \u2192 (hide_emotions(Stefan) \u2227 regretful(Stefan))"
                }
            ],
            "conclusion": {
                "id": 13,
                "subject": "Stefan",
                "text": "Stefan is regretful.",
                "fol": "p_9(Stefan)",
                "str_fol": "regretful(Stefan)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 0,
                    "subject": "Stefan",
                    "text": "Stefan lacks passion.",
                    "fol": "p_0(Stefan)",
                    "str_fol": "lacks_passion(Stefan)",
                    "negation": false
                },
                {
                    "id": 2,
                    "subject": "Stefan",
                    "text": "Stefan does not feel trapped.",
                    "fol": "\u00acp_2(Stefan)",
                    "str_fol": "\u00acfeels_trapped(Stefan)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "Anyone who lacks passion or feels trapped is unhappy.",
                    "fol": "\u2200x ((p_0(x) \u2228 p_2(x)) \u2192 p_8(x))",
                    "str_fol": "\u2200x ((lacks_passion(x) \u2228 feels_trapped(x)) \u2192 unhappy(x))"
                }
            ],
            "conclusion": {
                "id": 14,
                "subject": "Stefan",
                "text": "Stefan is unhappy.",
                "fol": "p_8(Stefan)",
                "str_fol": "unhappy(Stefan)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 14,
                    "subject": "Stefan",
                    "text": "Stefan is unhappy.",
                    "fol": "p_8(Stefan)",
                    "str_fol": "unhappy(Stefan)",
                    "negation": false
                },
                {
                    "id": 13,
                    "subject": "Stefan",
                    "text": "Stefan is regretful.",
                    "fol": "p_9(Stefan)",
                    "str_fol": "regretful(Stefan)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "For all humans, if someone is mismarried, then they are either unhappy or regretful (or both).",
                    "fol": "\u2200x (p_7(x) \u2192 (p_8(x) \u2228 p_9(x)))",
                    "str_fol": "\u2200x (mismarried(x) \u2192 (unhappy(x) \u2228 regretful(x)))"
                }
            ],
            "conclusion": null
        }
    ],
    "proof_trace": null,
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "UNCERTAIN",
            "Edited Assumptions": "p_5(Stefan)\n\u00acp_6(Stefan)\n\u00acp_4(Stefan)\np_3(Stefan)\np_1(Stefan)\np_0(Stefan)\n\u00acp_2(Stefan)\n\u2200x (p_5(x) \u2192 (p_15(x) \u2228 p_6(x)))\n\u2200x (p_14(x) \u2192 p_4(x))\n\u2200x ((p_3(x) \u2227 p_15(x)) \u2192 p_13(x))\np_14(Stefan) \u2295 p_12(Stefan)\np_12(Stefan) \u2192 (p_11(Stefan) \u2295 p_13(Stefan))\np_10(Stefan) \u2228 p_11(Stefan)\np_10(Stefan) \u2192 (p_1(Stefan) \u2227 p_9(Stefan))\n\u2200x ((p_0(x) \u2228 p_2(x)) \u2192 p_8(x))\n\u2200x (p_7(x) \u2192 (p_8(x) \u2228 p_9(x)))",
            "Initial Goal": "p_7(Stefan)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Stefan)",
                    "-p_6(Stefan)",
                    "-p_4(Stefan)",
                    "p_3(Stefan)",
                    "p_1(Stefan)",
                    "p_0(Stefan)",
                    "-p_2(Stefan)",
                    "all x (p_5(x) -> (p_15(x) | p_6(x)))",
                    "all x (p_14(x) -> p_4(x))",
                    "all x ((p_3(x) & p_15(x)) -> p_13(x))",
                    "-(p_14(Stefan) <-> p_12(Stefan))",
                    "p_12(Stefan) -> (-(p_11(Stefan) <-> p_13(Stefan)))",
                    "p_10(Stefan) | p_11(Stefan)",
                    "p_10(Stefan) -> (p_1(Stefan) & p_9(Stefan))",
                    "all x ((p_0(x) | p_2(x)) -> p_8(x))",
                    "all x (p_7(x) -> (p_8(x) | p_9(x)))",
                    "all x ((p_5(x) & -p_6(x) & p_3(x) & p_1(x) & p_0(x) & -p_2(x)) -> p_7(x))"
                ],
                "formulas(goals)": [
                    "p_7(Stefan)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "\u2200x ((p_5(x) \u2227 \u00acp_6(x) \u2227 p_3(x) \u2227 p_1(x) \u2227 p_0(x) \u2227 \u00acp_2(x)) \u2192 p_7(x))"
                ]
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_5(Stefan)\n\u00acp_6(Stefan)\n\u00acp_4(Stefan)\np_3(Stefan)\np_1(Stefan)\np_0(Stefan)\n\u00acp_2(Stefan)\n\u2200x (p_5(x) \u2192 (p_15(x) \u2228 p_6(x)))\n\u2200x (p_14(x) \u2192 p_4(x))\n\u2200x ((p_3(x) \u2227 p_15(x)) \u2192 p_13(x))\np_14(Stefan) \u2295 p_12(Stefan)\np_12(Stefan) \u2192 (p_11(Stefan) \u2295 p_13(Stefan))\np_10(Stefan) \u2228 p_11(Stefan)\np_10(Stefan) \u2192 (p_1(Stefan) \u2227 p_9(Stefan))\n\u2200x ((p_0(x) \u2228 p_2(x)) \u2192 p_8(x))\n\u2200x ((p_8(x) \u2228 p_9(x)) \u2192 p_7(x))\n\u2200x (\u00acp_4(x) \u2192 \u00acp_7(x))",
            "Initial Goal": "p_7(Stefan)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Stefan).",
                    "-p_6(Stefan).",
                    "-p_4(Stefan).",
                    "p_3(Stefan).",
                    "p_1(Stefan).",
                    "p_0(Stefan).",
                    "-p_2(Stefan).",
                    "all x (p_5(x) -> (p_15(x) | p_6(x))).",
                    "all x (p_14(x) -> p_4(x)).",
                    "all x ((p_3(x) & p_15(x)) -> p_13(x)).",
                    "-(p_14(Stefan) <-> p_12(Stefan)).",
                    "p_12(Stefan) -> (-(p_11(Stefan) <-> p_13(Stefan))).",
                    "p_10(Stefan) | p_11(Stefan).",
                    "p_10(Stefan) -> (p_1(Stefan) & p_9(Stefan)).",
                    "all x ((p_0(x) | p_2(x)) -> p_8(x)).",
                    "all x ((p_8(x) | p_9(x)) -> p_7(x)).",
                    "all x (-p_4(x) -> -p_7(x))."
                ],
                "formulas(goals)": [
                    "-p_7(Stefan)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "\u2200x (\u00acp_4(x) \u2192 \u00acp_7(x))"
                ]
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_5(Stefan)\n\u00acp_6(Stefan)\n\u00acp_4(Stefan)\np_3(Stefan)\np_1(Stefan)\np_0(Stefan)\n\u00acp_2(Stefan)\n\u2200x (p_5(x) \u2192 (p_15(x) \u2228 p_6(x)))\n\u2200x (p_14(x) \u2192 p_4(x))\n\u2200x ((p_3(x) \u2227 p_15(x)) \u2192 p_13(x))\np_14(Stefan) \u2295 p_12(Stefan)\n\u2200x (p_12(x) \u2192 (p_11(x) \u2295 p_13(x)))\np_10(Stefan) \u2228 p_11(Stefan)\n\u2200x (p_10(x) \u2192 (p_1(x) \u2227 p_9(x)))\n\u2200x ((p_0(x) \u2228 p_2(x)) \u2192 p_8(x))\n\u2200x (((p_8(x) \u2228 p_9(x)) \u2227 p_4(x)) \u2192 p_7(x))\n\u2200x (\u00acp_4(x) \u2192 \u00acp_7(x))",
            "Initial Goal": "p_7(Stefan)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Stefan)",
                    "-p_6(Stefan)",
                    "-p_4(Stefan)",
                    "p_3(Stefan)",
                    "p_1(Stefan)",
                    "p_0(Stefan)",
                    "-p_2(Stefan)",
                    "all x (p_5(x) -> (p_15(x) | p_6(x)))",
                    "all x (p_14(x) -> p_4(x))",
                    "all x ((p_3(x) & p_15(x)) -> p_13(x))",
                    "-(p_14(Stefan) <-> p_12(Stefan))",
                    "all x (p_12(x) -> -(p_11(x) <-> p_13(x)))",
                    "p_10(Stefan) | p_11(Stefan)",
                    "all x (p_10(x) -> (p_1(x) & p_9(x)))",
                    "all x ((p_0(x) | p_2(x)) -> p_8(x))",
                    "all x (((p_8(x) | p_9(x)) & p_4(x)) -> p_7(x))",
                    "all x (-p_4(x) -> -p_7(x))"
                ],
                "formulas(goals)": [
                    "-p_7(Stefan)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_12(Stefan) \u2192 (p_11(Stefan) \u2295 p_13(Stefan))",
                    "p_10(Stefan) \u2192 (p_1(Stefan) \u2227 p_9(Stefan))",
                    "\u2200x ((p_8(x) \u2228 p_9(x)) \u2192 p_7(x))"
                ],
                "added_facts": [],
                "added_rules": [
                    "\u2200x (p_12(x) \u2192 (p_11(x) \u2295 p_13(x)))",
                    "\u2200x (p_10(x) \u2192 (p_1(x) \u2227 p_9(x)))",
                    "\u2200x (((p_8(x) \u2228 p_9(x)) \u2227 p_4(x)) \u2192 p_7(x))"
                ]
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_5(Stefan)\n\u00acp_6(Stefan)\n\u00acp_4(Stefan)\np_3(Stefan)\np_1(Stefan)\np_0(Stefan)\n\u00acp_2(Stefan)\n\u2200x (p_5(x) \u2192 (p_15(x) \u2228 p_6(x)))\n\u2200x (p_14(x) \u2192 p_4(x))\n\u2200x ((p_3(x) \u2227 p_15(x)) \u2192 p_13(x))\np_14(Stefan) \u2295 p_12(Stefan)\n\u2200x (p_12(x) \u2192 (p_11(x) \u2295 p_13(x)))\np_10(Stefan) \u2228 p_11(Stefan)\n\u2200x (p_10(x) \u2192 (p_1(x) \u2227 p_9(x)))\n\u2200x ((p_0(x) \u2228 p_2(x)) \u2192 p_8(x))\n\u2200x (((p_8(x) \u2228 p_9(x)) \u2227 p_4(x)) \u2192 p_7(x))\n\u2200x (\u00acp_4(x) \u2192 \u00acp_7(x))\n\u2200x (p_7(x) \u2192 p_4(x))\n\u00acp_14(Stefan)\np_12(Stefan)",
            "Initial Goal": "p_7(Stefan)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Stefan)",
                    "-p_6(Stefan)",
                    "-p_4(Stefan)",
                    "p_3(Stefan)",
                    "p_1(Stefan)",
                    "p_0(Stefan)",
                    "-p_2(Stefan)",
                    "all x (p_5(x) -> (p_15(x) | p_6(x)))",
                    "all x (p_14(x) -> p_4(x))",
                    "all x ((p_3(x) & p_15(x)) -> p_13(x))",
                    "-(p_14(Stefan) <-> p_12(Stefan))",
                    "all x (p_12(x) -> -(p_11(x) <-> p_13(x)))",
                    "p_10(Stefan) | p_11(Stefan)",
                    "all x (p_10(x) -> (p_1(x) & p_9(x)))",
                    "all x ((p_0(x) | p_2(x)) -> p_8(x))",
                    "all x (((p_8(x) | p_9(x)) & p_4(x)) -> p_7(x))",
                    "all x (-p_4(x) -> -p_7(x))",
                    "all x (p_7(x) -> p_4(x))",
                    "-p_14(Stefan)",
                    "p_12(Stefan)"
                ],
                "formulas(goals)": [
                    "-p_7(Stefan)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "\u00acp_14(Stefan)",
                    "p_12(Stefan)"
                ],
                "added_rules": [
                    "\u2200x (p_7(x) \u2192 p_4(x))"
                ]
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_5(Stefan)\n\u00acp_6(Stefan)\n\u00acp_4(Stefan)\np_3(Stefan)\np_1(Stefan)\np_0(Stefan)\n\u00acp_2(Stefan)\n\u2200x (p_5(x) \u2192 (p_15(x) \u2228 p_6(x)))\n\u2200x (p_14(x) \u2192 p_4(x))\n\u2200x ((p_3(x) \u2227 p_15(x)) \u2192 p_13(x))\np_14(Stefan) \u2295 p_12(Stefan)\n\u2200x (p_12(x) \u2192 (p_11(x) \u2228 p_13(x)))\n\u2200x (p_12(x) \u2192 (\u00acp_11(x) \u2228 \u00acp_13(x)))\np_10(Stefan) \u2228 p_11(Stefan)\n\u2200x (p_10(x) \u2192 (p_1(x) \u2227 p_9(x)))\n\u2200x ((p_0(x) \u2228 p_2(x)) \u2192 p_8(x))\n\u2200x (((p_8(x) \u2228 p_9(x)) \u2227 p_4(x)) \u2192 p_7(x))\n\u2200x (\u00acp_4(x) \u2192 \u00acp_7(x))\n\u2200x (p_7(x) \u2192 p_4(x))\n\u00acp_14(Stefan)\np_12(Stefan)",
            "Initial Goal": "p_7(Stefan)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Stefan)",
                    "-p_6(Stefan)",
                    "-p_4(Stefan)",
                    "p_3(Stefan)",
                    "p_1(Stefan)",
                    "p_0(Stefan)",
                    "-p_2(Stefan)",
                    "all x (p_5(x) -> (p_15(x) | p_6(x)))",
                    "all x (p_14(x) -> p_4(x))",
                    "all x ((p_3(x) & p_15(x)) -> p_13(x))",
                    "(-p_14(Stefan) & p_12(Stefan)) | (p_14(Stefan) & -p_12(Stefan))",
                    "all x (p_12(x) -> (p_11(x) | p_13(x)))",
                    "all x (p_12(x) -> (-p_11(x) | -p_13(x)))",
                    "p_10(Stefan) | p_11(Stefan)",
                    "all x (p_10(x) -> (p_1(x) & p_9(x)))",
                    "all x ((p_0(x) | p_2(x)) -> p_8(x))",
                    "all x (((p_8(x) | p_9(x)) & p_4(x)) -> p_7(x))",
                    "all x (-p_4(x) -> -p_7(x))",
                    "all x (p_7(x) -> p_4(x))",
                    "-p_14(Stefan)",
                    "p_12(Stefan)"
                ],
                "formulas(goals)": [
                    "-p_7(Stefan)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u2200x (p_12(x) \u2192 (p_11(x) \u2295 p_13(x)))"
                ],
                "added_facts": [],
                "added_rules": [
                    "\u2200x (p_12(x) \u2192 (p_11(x) \u2228 p_13(x)))",
                    "\u2200x (p_12(x) \u2192 (\u00acp_11(x) \u2228 \u00acp_13(x)))"
                ]
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_5(Stefan)\n\u00acp_6(Stefan)\np_3(Stefan)\np_1(Stefan)\np_0(Stefan)\n\u00acp_2(Stefan)\n\u2200x (p_5(x) \u2192 (p_15(x) \u2228 p_6(x)))\n\u2200x (p_14(x) \u2192 p_4(x))\n\u2200x ((p_3(x) \u2227 p_15(x)) \u2192 p_13(x))\n\u2200x (p_12(x) \u2192 (p_11(x) \u2228 p_13(x)))\n\u2200x (p_12(x) \u2192 (\u00acp_11(x) \u2228 \u00acp_13(x)))\np_10(Stefan) \u2228 p_11(Stefan)\n\u2200x (p_10(x) \u2192 (p_1(x) \u2227 p_9(x)))\n\u2200x ((p_0(x) \u2228 p_2(x)) \u2192 p_8(x))\n\u2200x (((p_8(x) \u2228 p_9(x)) \u2227 p_4(x)) \u2192 p_7(x))\n\u2200x (\u00acp_4(x) \u2192 \u00acp_7(x))\n\u2200x (p_7(x) \u2192 p_4(x))\np_12(Stefan)\np_14(Stefan)",
            "Initial Goal": "p_7(Stefan)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Stefan)",
                    "-p_6(Stefan)",
                    "p_3(Stefan)",
                    "p_1(Stefan)",
                    "p_0(Stefan)",
                    "-p_2(Stefan)",
                    "all x (p_5(x) -> (p_15(x) | p_6(x)))",
                    "all x (p_14(x) -> p_4(x))",
                    "all x ((p_3(x) & p_15(x)) -> p_13(x))",
                    "all x (p_12(x) -> (p_11(x) | p_13(x)))",
                    "all x (p_12(x) -> (-p_11(x) | -p_13(x)))",
                    "p_10(Stefan) | p_11(Stefan)",
                    "all x (p_10(x) -> (p_1(x) & p_9(x)))",
                    "all x ((p_0(x) | p_2(x)) -> p_8(x))",
                    "all x (((p_8(x) | p_9(x)) & p_4(x)) -> p_7(x))",
                    "all x (-p_4(x) -> -p_7(x))",
                    "all x (p_7(x) -> p_4(x))",
                    "p_12(Stefan)",
                    "p_14(Stefan)"
                ],
                "formulas(goals)": [
                    "p_7(Stefan)"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "\u00acp_4(Stefan)",
                    "p_14(Stefan) \u2295 p_12(Stefan)",
                    "\u00acp_14(Stefan)"
                ],
                "removed_rules": [],
                "added_facts": [
                    "p_14(Stefan)"
                ],
                "added_rules": []
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_5(Stefan)\n\u00acp_6(Stefan)\np_3(Stefan)\np_1(Stefan)\np_0(Stefan)\n\u00acp_2(Stefan)\n\u2200x (p_5(x) \u2192 (p_15(x) \u2228 p_6(x)))\n\u2200x (p_14(x) \u2192 p_4(x))\n\u2200x (p_3(x) \u2192 (p_15(x) \u2192 p_13(x)))\n\u2200x (p_12(x) \u2192 (p_11(x) \u2228 p_13(x)))\n\u2200x (p_12(x) \u2192 \u00ac(p_11(x) \u2227 p_13(x)))\np_10(Stefan) \u2228 p_11(Stefan)\n\u2200x (p_10(x) \u2192 (p_1(x) \u2227 p_9(x)))\n\u2200x (p_0(x) \u2192 p_8(x))\n\u2200x (p_2(x) \u2192 p_8(x))\n\u2200x (((p_8(x) \u2228 p_9(x)) \u2227 p_4(x)) \u2192 p_7(x))\n\u2200x (\u00acp_4(x) \u2192 \u00acp_7(x))\n\u2200x (p_7(x) \u2192 p_4(x))\np_12(Stefan)\np_14(Stefan)\np_4(Stefan)",
            "Initial Goal": "p_7(Stefan)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Stefan)",
                    "-p_6(Stefan)",
                    "p_3(Stefan)",
                    "p_1(Stefan)",
                    "p_0(Stefan)",
                    "-p_2(Stefan)",
                    "all x (p_5(x) -> (p_15(x) | p_6(x)))",
                    "all x (p_14(x) -> p_4(x))",
                    "all x (p_3(x) -> (p_15(x) -> p_13(x)))",
                    "all x (p_12(x) -> (p_11(x) | p_13(x)))",
                    "all x (p_12(x) -> -(p_11(x) & p_13(x)))",
                    "p_10(Stefan) | p_11(Stefan)",
                    "all x (p_10(x) -> (p_1(x) & p_9(x)))",
                    "all x (p_0(x) -> p_8(x))",
                    "all x (p_2(x) -> p_8(x))",
                    "all x (((p_8(x) | p_9(x)) & p_4(x)) -> p_7(x))",
                    "all x (-p_4(x) -> -p_7(x))",
                    "all x (p_7(x) -> p_4(x))",
                    "p_12(Stefan)",
                    "p_14(Stefan)",
                    "p_4(Stefan)"
                ],
                "formulas(goals)": [
                    "p_7(Stefan)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u2200x ((p_3(x) \u2227 p_15(x)) \u2192 p_13(x))",
                    "\u2200x ((p_0(x) \u2228 p_2(x)) \u2192 p_8(x))",
                    "\u2200x (p_12(x) \u2192 (\u00acp_11(x) \u2228 \u00acp_13(x)))"
                ],
                "added_facts": [
                    "p_4(Stefan)"
                ],
                "added_rules": [
                    "\u2200x (p_3(x) \u2192 (p_15(x) \u2192 p_13(x)))",
                    "\u2200x (p_12(x) \u2192 \u00ac(p_11(x) \u2227 p_13(x)))",
                    "\u2200x (p_0(x) \u2192 p_8(x))",
                    "\u2200x (p_2(x) \u2192 p_8(x))"
                ]
            }
        }
    ]
}