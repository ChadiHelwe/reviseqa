{
    "background_story": "Keilani had always dreamed of living off the land. She left behind the city life to establish a self-sufficient homestead on a rural island. With her own two hands, she built a cozy cabin, planted a lush garden, and raised a flock of chickens. Keilani spent her days tending to her land, harvesting fresh produce, and preserving food for the winter months. As her homestead flourished, she began to share her knowledge with the local community, teaching workshops on sustainable living and organic farming. Keilani's homestead became a beacon for like-minded individuals, and soon she was surrounded by a thriving community of farmers, artisans, and environmental stewards. Her dedication to the land and her passion for simple, meaningful living inspired countless others to follow in her footsteps.",
    "predicates": [
        {
            "id": 0,
            "name": "conserves_water"
        },
        {
            "id": 1,
            "name": "owns_farm"
        },
        {
            "id": 2,
            "name": "collects_honey"
        },
        {
            "id": 3,
            "name": "loves_nature"
        },
        {
            "id": 4,
            "name": "recycles_waste"
        },
        {
            "id": 5,
            "name": "lives_off_the_land"
        },
        {
            "id": 6,
            "name": "is_self_sufficient"
        },
        {
            "id": 7,
            "name": "lives_sustainably"
        },
        {
            "id": 8,
            "name": "has_garden"
        },
        {
            "id": 9,
            "name": "raises_animals"
        },
        {
            "id": 10,
            "name": "is_environmentalist"
        },
        {
            "id": 11,
            "name": "tends_orchard"
        },
        {
            "id": 12,
            "name": "keeps_bees"
        },
        {
            "id": 13,
            "name": "grows_own_food"
        },
        {
            "id": 14,
            "name": "harvests_renewable"
        },
        {
            "id": 15,
            "name": "grows_food"
        },
        {
            "id": 16,
            "name": "reduces_waste"
        },
        {
            "id": 17,
            "name": "plants_seeds"
        },
        {
            "id": 18,
            "name": "harvests_crops"
        },
        {
            "id": 19,
            "name": "owns_chickens"
        },
        {
            "id": 20,
            "name": "keeps_goats"
        },
        {
            "id": 21,
            "name": "cultivates_trees"
        },
        {
            "id": 22,
            "name": "makes_soap"
        },
        {
            "id": 23,
            "name": "grows_flowers"
        },
        {
            "id": 24,
            "name": "fights_pollution"
        }
    ],
    "subject_name": "Keilani",
    "subject_category": "human",
    "keyword": "homestead",
    "all_facts": [
        {
            "id": 0,
            "subject": "Keilani",
            "text": "Keilani conserves water.",
            "fol": "p_0(Keilani)",
            "str_fol": "conserves_water(Keilani)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Keilani",
            "text": "Keilani owns a farm.",
            "fol": "p_1(Keilani)",
            "str_fol": "owns_farm(Keilani)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Keilani",
            "text": "Keilani does not collect honey.",
            "fol": "\u00acp_2(Keilani)",
            "str_fol": "\u00accollects_honey(Keilani)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Keilani",
            "text": "Keilani does not love nature.",
            "fol": "\u00acp_3(Keilani)",
            "str_fol": "\u00acloves_nature(Keilani)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Keilani",
            "text": "Keilani does not recycle waste.",
            "fol": "\u00acp_4(Keilani)",
            "str_fol": "\u00acrecycles_waste(Keilani)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Keilani",
            "text": "Keilani is an environmentalist.",
            "fol": "p_10(Keilani)",
            "str_fol": "is_environmentalist(Keilani)",
            "negation": false
        },
        {
            "id": 6,
            "subject": "Keilani",
            "text": "Keilani does not keep bees.",
            "fol": "\u00acp_12(Keilani)",
            "str_fol": "\u00ackeeps_bees(Keilani)",
            "negation": true
        },
        {
            "id": 7,
            "subject": "Keilani",
            "text": "Keilani tends an orchard.",
            "fol": "p_11(Keilani)",
            "str_fol": "tends_orchard(Keilani)",
            "negation": false
        },
        {
            "id": 8,
            "subject": "Keilani",
            "text": "Keilani does not raise animals.",
            "fol": "\u00acp_9(Keilani)",
            "str_fol": "\u00acraises_animals(Keilani)",
            "negation": true
        },
        {
            "id": 9,
            "subject": "Keilani",
            "text": "Keilani has a garden.",
            "fol": "p_8(Keilani)",
            "str_fol": "has_garden(Keilani)",
            "negation": false
        },
        {
            "id": 10,
            "subject": "Keilani",
            "text": "Keilani does not live sustainably.",
            "fol": "\u00acp_7(Keilani)",
            "str_fol": "\u00aclives_sustainably(Keilani)",
            "negation": true
        },
        {
            "id": 11,
            "subject": "Keilani",
            "text": "Keilani is not self-sufficient.",
            "fol": "\u00acp_6(Keilani)",
            "str_fol": "\u00acis_self_sufficient(Keilani)",
            "negation": true
        },
        {
            "id": 12,
            "subject": "Keilani",
            "text": "Keilani lives off the land.",
            "fol": "p_5(Keilani)",
            "str_fol": "lives_off_the_land(Keilani)",
            "negation": false
        }
    ],
    "context_facts": [
        {
            "id": 4,
            "subject": "Keilani",
            "text": "Keilani does not recycle waste.",
            "fol": "\u00acp_4(Keilani)",
            "str_fol": "\u00acrecycles_waste(Keilani)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Keilani",
            "text": "Keilani does not collect honey.",
            "fol": "\u00acp_2(Keilani)",
            "str_fol": "\u00accollects_honey(Keilani)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Keilani",
            "text": "Keilani does not love nature.",
            "fol": "\u00acp_3(Keilani)",
            "str_fol": "\u00acloves_nature(Keilani)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Keilani",
            "text": "Keilani conserves water.",
            "fol": "p_0(Keilani)",
            "str_fol": "conserves_water(Keilani)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Keilani",
            "text": "Keilani owns a farm.",
            "fol": "p_1(Keilani)",
            "str_fol": "owns_farm(Keilani)",
            "negation": false
        }
    ],
    "context_rules": [
        {
            "id": 7,
            "text": "Keilani is either an environmentalist or recycles waste.",
            "fol": "p_10(Keilani) \u2228 p_4(Keilani)",
            "str_fol": "is_environmentalist(Keilani) \u2228 recycles_waste(Keilani)"
        },
        {
            "id": 6,
            "text": "If Keilani either keeps bees or collects honey (but not both), then she loves nature.",
            "fol": "(p_12(Keilani) \u2295 p_2(Keilani)) \u2192 p_3(Keilani)",
            "str_fol": "(keeps_bees(Keilani) \u2295 collects_honey(Keilani)) \u2192 loves_nature(Keilani)"
        },
        {
            "id": 5,
            "text": "Either Keilani keeps bees or tends an orchard, but she does not do both.",
            "fol": "p_12(Keilani) \u2295 p_11(Keilani)",
            "str_fol": "keeps_bees(Keilani) \u2295 tends_orchard(Keilani)"
        },
        {
            "id": 4,
            "text": "If Keilani is an environmentalist, then she either tends an orchard or raises animals, but not both.",
            "fol": "p_10(Keilani) \u2192 (p_11(Keilani) \u2295 p_9(Keilani))",
            "str_fol": "is_environmentalist(Keilani) \u2192 (tends_orchard(Keilani) \u2295 raises_animals(Keilani))"
        },
        {
            "id": 3,
            "text": "A person either has a garden or raises animals, but not necessarily both.",
            "fol": "\u2200x (p_8(x) \u2295 p_9(x))",
            "str_fol": "\u2200x (has_garden(x) \u2295 raises_animals(x))"
        },
        {
            "id": 2,
            "text": "If Keilani has a garden, then she either lives sustainably or conserves water, but not both.",
            "fol": "p_8(Keilani) \u2192 (p_7(Keilani) \u2295 p_0(Keilani))",
            "str_fol": "has_garden(Keilani) \u2192 (lives_sustainably(Keilani) \u2295 conserves_water(Keilani))"
        },
        {
            "id": 1,
            "text": "For Keilani, either she owns a farm or is self-sufficient, but not necessarily both.",
            "fol": "p_1(Keilani) \u2295 p_6(Keilani)",
            "str_fol": "owns_farm(Keilani) \u2295 is_self_sufficient(Keilani)"
        },
        {
            "id": 0,
            "text": "For all humans, if someone lives off the land, then they are either self-sufficient or live sustainably (or both).",
            "fol": "\u2200x (p_5(x) \u2192 (p_6(x) \u2228 p_7(x)))",
            "str_fol": "\u2200x (lives_off_the_land(x) \u2192 (is_self_sufficient(x) \u2228 lives_sustainably(x)))"
        }
    ],
    "context": [
        {
            "id": 4,
            "subject": "Keilani",
            "text": "Keilani does not recycle waste.",
            "fol": "\u00acp_4(Keilani)",
            "str_fol": "\u00acrecycles_waste(Keilani)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Keilani",
            "text": "Keilani does not collect honey.",
            "fol": "\u00acp_2(Keilani)",
            "str_fol": "\u00accollects_honey(Keilani)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Keilani",
            "text": "Keilani does not love nature.",
            "fol": "\u00acp_3(Keilani)",
            "str_fol": "\u00acloves_nature(Keilani)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Keilani",
            "text": "Keilani conserves water.",
            "fol": "p_0(Keilani)",
            "str_fol": "conserves_water(Keilani)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Keilani",
            "text": "Keilani owns a farm.",
            "fol": "p_1(Keilani)",
            "str_fol": "owns_farm(Keilani)",
            "negation": false
        },
        {
            "id": 7,
            "text": "Keilani is either an environmentalist or recycles waste.",
            "fol": "p_10(Keilani) \u2228 p_4(Keilani)",
            "str_fol": "is_environmentalist(Keilani) \u2228 recycles_waste(Keilani)"
        },
        {
            "id": 6,
            "text": "If Keilani either keeps bees or collects honey (but not both), then she loves nature.",
            "fol": "(p_12(Keilani) \u2295 p_2(Keilani)) \u2192 p_3(Keilani)",
            "str_fol": "(keeps_bees(Keilani) \u2295 collects_honey(Keilani)) \u2192 loves_nature(Keilani)"
        },
        {
            "id": 5,
            "text": "Either Keilani keeps bees or tends an orchard, but she does not do both.",
            "fol": "p_12(Keilani) \u2295 p_11(Keilani)",
            "str_fol": "keeps_bees(Keilani) \u2295 tends_orchard(Keilani)"
        },
        {
            "id": 4,
            "text": "If Keilani is an environmentalist, then she either tends an orchard or raises animals, but not both.",
            "fol": "p_10(Keilani) \u2192 (p_11(Keilani) \u2295 p_9(Keilani))",
            "str_fol": "is_environmentalist(Keilani) \u2192 (tends_orchard(Keilani) \u2295 raises_animals(Keilani))"
        },
        {
            "id": 3,
            "text": "A person either has a garden or raises animals, but not necessarily both.",
            "fol": "\u2200x (p_8(x) \u2295 p_9(x))",
            "str_fol": "\u2200x (has_garden(x) \u2295 raises_animals(x))"
        },
        {
            "id": 2,
            "text": "If Keilani has a garden, then she either lives sustainably or conserves water, but not both.",
            "fol": "p_8(Keilani) \u2192 (p_7(Keilani) \u2295 p_0(Keilani))",
            "str_fol": "has_garden(Keilani) \u2192 (lives_sustainably(Keilani) \u2295 conserves_water(Keilani))"
        },
        {
            "id": 1,
            "text": "For Keilani, either she owns a farm or is self-sufficient, but not necessarily both.",
            "fol": "p_1(Keilani) \u2295 p_6(Keilani)",
            "str_fol": "owns_farm(Keilani) \u2295 is_self_sufficient(Keilani)"
        },
        {
            "id": 0,
            "text": "For all humans, if someone lives off the land, then they are either self-sufficient or live sustainably (or both).",
            "fol": "\u2200x (p_5(x) \u2192 (p_6(x) \u2228 p_7(x)))",
            "str_fol": "\u2200x (lives_off_the_land(x) \u2192 (is_self_sufficient(x) \u2228 lives_sustainably(x)))"
        }
    ],
    "context_fol": "\u00acp_4(Keilani)\n\u00acp_2(Keilani)\n\u00acp_3(Keilani)\np_0(Keilani)\np_1(Keilani)\np_10(Keilani) \u2228 p_4(Keilani)\n(p_12(Keilani) \u2295 p_2(Keilani)) \u2192 p_3(Keilani)\np_12(Keilani) \u2295 p_11(Keilani)\np_10(Keilani) \u2192 (p_11(Keilani) \u2295 p_9(Keilani))\n\u2200x (p_8(x) \u2295 p_9(x))\np_8(Keilani) \u2192 (p_7(Keilani) \u2295 p_0(Keilani))\np_1(Keilani) \u2295 p_6(Keilani)\n\u2200x (p_5(x) \u2192 (p_6(x) \u2228 p_7(x)))",
    "conclusion": {
        "id": 12,
        "subject": "Keilani",
        "text": "Keilani lives off the land.",
        "fol": "p_5(Keilani)",
        "str_fol": "lives_off_the_land(Keilani)",
        "negation": false
    },
    "initial_answer": "False",
    "initial_goal": "p_5(Keilani)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 4,
                    "subject": "Keilani",
                    "text": "Keilani does not recycle waste.",
                    "fol": "\u00acp_4(Keilani)",
                    "str_fol": "\u00acrecycles_waste(Keilani)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 7,
                    "text": "Keilani is either an environmentalist or recycles waste.",
                    "fol": "p_10(Keilani) \u2228 p_4(Keilani)",
                    "str_fol": "is_environmentalist(Keilani) \u2228 recycles_waste(Keilani)"
                }
            ],
            "conclusion": {
                "id": 5,
                "subject": "Keilani",
                "text": "Keilani is an environmentalist.",
                "fol": "p_10(Keilani)",
                "str_fol": "is_environmentalist(Keilani)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 2,
                    "subject": "Keilani",
                    "text": "Keilani does not collect honey.",
                    "fol": "\u00acp_2(Keilani)",
                    "str_fol": "\u00accollects_honey(Keilani)",
                    "negation": true
                },
                {
                    "id": 3,
                    "subject": "Keilani",
                    "text": "Keilani does not love nature.",
                    "fol": "\u00acp_3(Keilani)",
                    "str_fol": "\u00acloves_nature(Keilani)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 6,
                    "text": "If Keilani either keeps bees or collects honey (but not both), then she loves nature.",
                    "fol": "(p_12(Keilani) \u2295 p_2(Keilani)) \u2192 p_3(Keilani)",
                    "str_fol": "(keeps_bees(Keilani) \u2295 collects_honey(Keilani)) \u2192 loves_nature(Keilani)"
                }
            ],
            "conclusion": {
                "id": 6,
                "subject": "Keilani",
                "text": "Keilani does not keep bees.",
                "fol": "\u00acp_12(Keilani)",
                "str_fol": "\u00ackeeps_bees(Keilani)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 6,
                    "subject": "Keilani",
                    "text": "Keilani does not keep bees.",
                    "fol": "\u00acp_12(Keilani)",
                    "str_fol": "\u00ackeeps_bees(Keilani)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "Either Keilani keeps bees or tends an orchard, but she does not do both.",
                    "fol": "p_12(Keilani) \u2295 p_11(Keilani)",
                    "str_fol": "keeps_bees(Keilani) \u2295 tends_orchard(Keilani)"
                }
            ],
            "conclusion": {
                "id": 7,
                "subject": "Keilani",
                "text": "Keilani tends an orchard.",
                "fol": "p_11(Keilani)",
                "str_fol": "tends_orchard(Keilani)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 5,
                    "subject": "Keilani",
                    "text": "Keilani is an environmentalist.",
                    "fol": "p_10(Keilani)",
                    "str_fol": "is_environmentalist(Keilani)",
                    "negation": false
                },
                {
                    "id": 7,
                    "subject": "Keilani",
                    "text": "Keilani tends an orchard.",
                    "fol": "p_11(Keilani)",
                    "str_fol": "tends_orchard(Keilani)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "If Keilani is an environmentalist, then she either tends an orchard or raises animals, but not both.",
                    "fol": "p_10(Keilani) \u2192 (p_11(Keilani) \u2295 p_9(Keilani))",
                    "str_fol": "is_environmentalist(Keilani) \u2192 (tends_orchard(Keilani) \u2295 raises_animals(Keilani))"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Keilani",
                "text": "Keilani does not raise animals.",
                "fol": "\u00acp_9(Keilani)",
                "str_fol": "\u00acraises_animals(Keilani)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 8,
                    "subject": "Keilani",
                    "text": "Keilani does not raise animals.",
                    "fol": "\u00acp_9(Keilani)",
                    "str_fol": "\u00acraises_animals(Keilani)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "A person either has a garden or raises animals, but not necessarily both.",
                    "fol": "\u2200x (p_8(x) \u2295 p_9(x))",
                    "str_fol": "\u2200x (has_garden(x) \u2295 raises_animals(x))"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Keilani",
                "text": "Keilani has a garden.",
                "fol": "p_8(Keilani)",
                "str_fol": "has_garden(Keilani)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 9,
                    "subject": "Keilani",
                    "text": "Keilani has a garden.",
                    "fol": "p_8(Keilani)",
                    "str_fol": "has_garden(Keilani)",
                    "negation": false
                },
                {
                    "id": 0,
                    "subject": "Keilani",
                    "text": "Keilani conserves water.",
                    "fol": "p_0(Keilani)",
                    "str_fol": "conserves_water(Keilani)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "If Keilani has a garden, then she either lives sustainably or conserves water, but not both.",
                    "fol": "p_8(Keilani) \u2192 (p_7(Keilani) \u2295 p_0(Keilani))",
                    "str_fol": "has_garden(Keilani) \u2192 (lives_sustainably(Keilani) \u2295 conserves_water(Keilani))"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Keilani",
                "text": "Keilani does not live sustainably.",
                "fol": "\u00acp_7(Keilani)",
                "str_fol": "\u00aclives_sustainably(Keilani)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 1,
                    "subject": "Keilani",
                    "text": "Keilani owns a farm.",
                    "fol": "p_1(Keilani)",
                    "str_fol": "owns_farm(Keilani)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "For Keilani, either she owns a farm or is self-sufficient, but not necessarily both.",
                    "fol": "p_1(Keilani) \u2295 p_6(Keilani)",
                    "str_fol": "owns_farm(Keilani) \u2295 is_self_sufficient(Keilani)"
                }
            ],
            "conclusion": {
                "id": 11,
                "subject": "Keilani",
                "text": "Keilani is not self-sufficient.",
                "fol": "\u00acp_6(Keilani)",
                "str_fol": "\u00acis_self_sufficient(Keilani)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 11,
                    "subject": "Keilani",
                    "text": "Keilani is not self-sufficient.",
                    "fol": "\u00acp_6(Keilani)",
                    "str_fol": "\u00acis_self_sufficient(Keilani)",
                    "negation": true
                },
                {
                    "id": 10,
                    "subject": "Keilani",
                    "text": "Keilani does not live sustainably.",
                    "fol": "\u00acp_7(Keilani)",
                    "str_fol": "\u00aclives_sustainably(Keilani)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "For all humans, if someone lives off the land, then they are either self-sufficient or live sustainably (or both).",
                    "fol": "\u2200x (p_5(x) \u2192 (p_6(x) \u2228 p_7(x)))",
                    "str_fol": "\u2200x (lives_off_the_land(x) \u2192 (is_self_sufficient(x) \u2228 lives_sustainably(x)))"
                }
            ],
            "conclusion": {
                "id": 12,
                "subject": "Keilani",
                "text": "Keilani lives off the land.",
                "fol": "p_5(Keilani)",
                "str_fol": "lives_off_the_land(Keilani)",
                "negation": false
            }
        }
    ],
    "proof_trace": "1 -(p_12(Keilani) <-> p_2(Keilani)) -> p_3(Keilani).  [assumption].\n2 -(p_12(Keilani) <-> p_11(Keilani)).  [assumption].\n3 p_10(Keilani) -> -(p_11(Keilani) <-> p_9(Keilani)).  [assumption].\n4 (all x -(p_8(x) <-> p_9(x))).  [assumption].\n5 p_8(Keilani) -> -(p_7(Keilani) <-> p_0(Keilani)).  [assumption].\n6 -(p_1(Keilani) <-> p_6(Keilani)).  [assumption].\n7 (all x (p_5(x) -> p_6(x) | p_7(x))).  [assumption].\n8 -p_5(Keilani).  [goal].\n9 p_10(Keilani) | p_4(Keilani).  [assumption].\n10 -p_4(Keilani).  [assumption].\n11 -p_12(Keilani) | p_2(Keilani) | p_3(Keilani).  [clausify(1)].\n12 -p_2(Keilani).  [assumption].\n14 -p_12(Keilani) | p_3(Keilani).  [resolve(11,b,12,a)].\n15 -p_3(Keilani).  [assumption].\n16 -p_8(Keilani) | -p_7(Keilani) | -p_0(Keilani).  [clausify(5)].\n17 p_0(Keilani).  [assumption].\n19 -p_1(Keilani) | -p_6(Keilani).  [clausify(6)].\n20 p_1(Keilani).  [assumption].\n23 p_12(Keilani) | p_11(Keilani).  [clausify(2)].\n24 -p_12(Keilani).  [resolve(14,b,15,a)].\n25 p_10(Keilani).  [resolve(9,b,10,a)].\n27 -p_10(Keilani) | -p_11(Keilani) | -p_9(Keilani).  [clausify(3)].\n29 p_8(x) | p_9(x).  [clausify(4)].\n30 -p_8(Keilani) | -p_7(Keilani).  [resolve(16,c,17,a)].\n31 p_5(Keilani).  [deny(8)].\n32 -p_5(x) | p_6(x) | p_7(x).  [clausify(7)].\n33 p_6(Keilani) | p_7(Keilani).  [resolve(31,a,32,a)].\n34 -p_6(Keilani).  [resolve(19,a,20,a)].\n35 -p_11(Keilani) | -p_9(Keilani).  [resolve(25,a,27,a)].\n36 p_11(Keilani).  [resolve(24,a,23,a)].\n37 p_7(Keilani).  [resolve(33,a,34,a)].\n38 -p_7(Keilani) | p_9(Keilani).  [resolve(30,a,29,a)].\n39 p_9(Keilani).  [resolve(37,a,38,a)].\n40 -p_9(Keilani).  [resolve(35,a,36,a)].\n41 $F.  [resolve(39,a,40,a)].",
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_4(Keilani)\n\u00acp_2(Keilani)\np_0(Keilani)\np_1(Keilani)\np_10(Keilani) \u2228 p_4(Keilani)\n(p_12(Keilani) \u2295 p_2(Keilani)) \u2192 p_3(Keilani)\np_12(Keilani) \u2295 p_11(Keilani)\np_10(Keilani) \u2192 (p_11(Keilani) \u2295 p_9(Keilani))\n\u2200x (p_8(x) \u2295 p_9(x))\np_8(Keilani) \u2192 (p_7(Keilani) \u2295 p_0(Keilani))\np_1(Keilani) \u2295 p_6(Keilani)\n\u2200x (p_5(x) \u2192 (p_6(x) \u2228 p_7(x)))\np_7(Keilani)\n(p_6(Keilani) \u2228 p_7(Keilani)) \u2192 p_5(Keilani)",
            "Initial Goal": "p_5(Keilani)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Keilani)",
                    "-p_2(Keilani)",
                    "p_0(Keilani)",
                    "p_1(Keilani)",
                    "p_10(Keilani) | p_4(Keilani)",
                    "(-(p_12(Keilani) <-> p_2(Keilani))) -> p_3(Keilani)",
                    "-(p_12(Keilani) <-> p_11(Keilani))",
                    "p_10(Keilani) -> (-(p_11(Keilani) <-> p_9(Keilani)))",
                    "all x (-(p_8(x) <-> p_9(x)))",
                    "p_8(Keilani) -> (-(p_7(Keilani) <-> p_0(Keilani)))",
                    "-(p_1(Keilani) <-> p_6(Keilani))",
                    "all x (p_5(x) -> (p_6(x) | p_7(x)))",
                    "p_7(Keilani)",
                    "(p_6(Keilani) | p_7(Keilani)) -> p_5(Keilani)"
                ],
                "formulas(goals)": [
                    "p_5(Keilani)"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "\u00acp_3(Keilani)"
                ],
                "removed_rules": [],
                "added_facts": [
                    "p_7(Keilani)"
                ],
                "added_rules": [
                    "(p_6(Keilani) \u2228 p_7(Keilani)) \u2192 p_5(Keilani)"
                ]
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_4(Keilani)\n\u00acp_2(Keilani)\np_0(Keilani)\np_1(Keilani)\np_10(Keilani) \u2228 p_4(Keilani)\n(p_12(Keilani) \u2295 p_2(Keilani)) \u2192 p_3(Keilani)\n(p_12(Keilani) \u2228 p_11(Keilani)) \u2227 (\u00acp_12(Keilani) \u2228 \u00acp_11(Keilani))\np_10(Keilani) \u2192 (p_11(Keilani) \u2295 p_9(Keilani))\n\u2200x (p_8(x) \u2295 p_9(x))\np_8(Keilani) \u2192 (p_7(Keilani) \u2295 p_0(Keilani))\np_1(Keilani) \u2295 p_6(Keilani)\n\u2200x (p_5(x) \u2192 (p_6(x) \u2228 p_7(x)))\np_7(Keilani)\n\u00ac(p_6(Keilani) \u2228 p_7(Keilani)) \u2228 p_5(Keilani)\np_6(Keilani) \u2228 p_7(Keilani)",
            "Initial Goal": "p_5(Keilani)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Keilani)",
                    "-p_2(Keilani)",
                    "p_0(Keilani)",
                    "p_1(Keilani)",
                    "p_10(Keilani) | p_4(Keilani)",
                    "(-(p_12(Keilani) <-> p_2(Keilani))) -> p_3(Keilani)",
                    "(p_12(Keilani) | p_11(Keilani)) & (-p_12(Keilani) | -p_11(Keilani))",
                    "p_10(Keilani) -> (-(p_11(Keilani) <-> p_9(Keilani)))",
                    "all x (-(p_8(x) <-> p_9(x)))",
                    "p_8(Keilani) -> (-(p_7(Keilani) <-> p_0(Keilani)))",
                    "-(p_1(Keilani) <-> p_6(Keilani))",
                    "all x (p_5(x) -> (p_6(x) | p_7(x)))",
                    "p_7(Keilani)",
                    "(-(p_6(Keilani) | p_7(Keilani))) | p_5(Keilani)",
                    "p_6(Keilani) | p_7(Keilani)"
                ],
                "formulas(goals)": [
                    "p_5(Keilani)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_6(Keilani) \u2228 p_7(Keilani)"
                ],
                "added_rules": [
                    "(p_12(Keilani) \u2228 p_11(Keilani)) \u2227 (\u00acp_12(Keilani) \u2228 \u00acp_11(Keilani))",
                    "\u00ac(p_6(Keilani) \u2228 p_7(Keilani)) \u2228 p_5(Keilani)"
                ]
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_4(Keilani)\n\u00acp_2(Keilani)\np_0(Keilani)\np_1(Keilani)\np_10(Keilani) \u2228 p_4(Keilani)\n(p_12(Keilani) \u2295 p_2(Keilani)) \u2192 p_3(Keilani)\n(p_12(Keilani) \u2228 p_11(Keilani)) \u2227 (\u00acp_12(Keilani) \u2228 \u00acp_11(Keilani))\np_10(Keilani) \u2192 (p_11(Keilani) \u2295 p_9(Keilani))\n\u2200x (p_8(x) \u2295 p_9(x))\np_8(Keilani) \u2192 (p_7(Keilani) \u2295 p_0(Keilani))\np_1(Keilani) \u2295 p_6(Keilani)\n\u2200x (p_5(x) \u2192 (p_6(x) \u2228 p_7(x)))\np_7(Keilani)\np_6(Keilani) \u2228 p_7(Keilani)\n(p_1(Keilani) \u2227 p_7(Keilani)) \u2192 \u00acp_5(Keilani)",
            "Initial Goal": "p_5(Keilani)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Keilani)",
                    "-p_2(Keilani)",
                    "p_0(Keilani)",
                    "p_1(Keilani)",
                    "p_10(Keilani) | p_4(Keilani)",
                    "p_12(Keilani) | -p_2(Keilani) | p_3(Keilani)",
                    "p_2(Keilani) | -p_12(Keilani) | p_3(Keilani)",
                    "p_12(Keilani) | p_11(Keilani)",
                    "-p_12(Keilani) | -p_11(Keilani)",
                    "-p_10(Keilani) | -p_11(Keilani) | -p_9(Keilani)",
                    "-p_10(Keilani) | p_11(Keilani) | p_9(Keilani)",
                    "-p_8(x) | -p_9(x)",
                    "p_8(x) | p_9(x)",
                    "-p_8(Keilani) | -p_7(Keilani) | -p_0(Keilani)",
                    "-p_8(Keilani) | p_7(Keilani) | p_0(Keilani)",
                    "-p_1(Keilani) | -p_6(Keilani)",
                    "p_1(Keilani) | p_6(Keilani)",
                    "all x (-p_5(x) | p_6(x) | p_7(x))",
                    "p_7(Keilani)",
                    "p_6(Keilani) | p_7(Keilani)",
                    "-p_1(Keilani) | -p_7(Keilani) | -p_5(Keilani)"
                ],
                "formulas(goals)": [
                    "-p_5(Keilani)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u00ac(p_6(Keilani) \u2228 p_7(Keilani)) \u2228 p_5(Keilani)"
                ],
                "added_facts": [],
                "added_rules": [
                    "(p_1(Keilani) \u2227 p_7(Keilani)) \u2192 \u00acp_5(Keilani)"
                ]
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_4(Keilani)\n\u00acp_2(Keilani)\np_0(Keilani)\np_1(Keilani)\np_10(Keilani) \u2228 p_4(Keilani)\n(p_12(Keilani) \u2295 p_2(Keilani)) \u2192 p_3(Keilani)\n(p_12(Keilani) \u2228 p_11(Keilani)) \u2227 (\u00acp_12(Keilani) \u2228 \u00acp_11(Keilani))\np_10(Keilani) \u2192 (p_11(Keilani) \u2295 p_9(Keilani))\n\u2200x (p_8(x) \u2295 p_9(x))\n\u00acp_8(Keilani) \u2228 (p_7(Keilani) \u2295 p_0(Keilani))\np_1(Keilani) \u2295 p_6(Keilani)\n\u2200x (p_5(x) \u2192 (p_6(x) \u2228 p_7(x)))\np_7(Keilani)\np_6(Keilani) \u2228 p_7(Keilani)\n(p_1(Keilani) \u2227 p_7(Keilani)) \u2192 \u00acp_5(Keilani)\n\u00acp_10(Keilani) \u2192 p_4(Keilani)\np_12(Keilani) \u2295 p_11(Keilani)\np_8(Keilani) \u2295 p_9(Keilani)\np_5(Keilani) \u2192 (p_6(Keilani) \u2228 p_7(Keilani))",
            "Initial Goal": "p_5(Keilani)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Keilani)",
                    "-p_2(Keilani)",
                    "p_0(Keilani)",
                    "p_1(Keilani)",
                    "(p_10(Keilani) | p_4(Keilani))",
                    "(-(p_12(Keilani) <-> p_2(Keilani)) -> p_3(Keilani))",
                    "((p_12(Keilani) | p_11(Keilani)) & (-p_12(Keilani) | -p_11(Keilani)))",
                    "(p_10(Keilani) -> -(p_11(Keilani) <-> p_9(Keilani)))",
                    "all x (-(p_8(x) <-> p_9(x)))",
                    "(-p_8(Keilani) | -(p_7(Keilani) <-> p_0(Keilani)))",
                    "-(p_1(Keilani) <-> p_6(Keilani))",
                    "all x (p_5(x) -> (p_6(x) | p_7(x)))",
                    "p_7(Keilani)",
                    "(p_6(Keilani) | p_7(Keilani))",
                    "((p_1(Keilani) & p_7(Keilani)) -> -p_5(Keilani))",
                    "(-p_10(Keilani) -> p_4(Keilani))",
                    "-(p_12(Keilani) <-> p_11(Keilani))",
                    "-(p_8(Keilani) <-> p_9(Keilani))",
                    "(p_5(Keilani) -> (p_6(Keilani) | p_7(Keilani)))"
                ],
                "formulas(goals)": [
                    "-p_5(Keilani)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "\u00acp_10(Keilani) \u2192 p_4(Keilani)",
                    "p_12(Keilani) \u2295 p_11(Keilani)",
                    "p_8(Keilani) \u2295 p_9(Keilani)",
                    "p_5(Keilani) \u2192 (p_6(Keilani) \u2228 p_7(Keilani))"
                ],
                "added_rules": []
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_4(Keilani)\n\u00acp_2(Keilani)\np_0(Keilani)\np_1(Keilani)\np_10(Keilani) \u2228 p_4(Keilani)\n(p_12(Keilani) \u2295 p_2(Keilani)) \u2192 p_3(Keilani)\n(p_12(Keilani) \u2228 p_11(Keilani)) \u2227 (\u00acp_12(Keilani) \u2228 \u00acp_11(Keilani))\np_10(Keilani) \u2192 (p_11(Keilani) \u2295 p_9(Keilani))\n\u2200x (p_8(x) \u2295 p_9(x))\n\u00acp_8(Keilani) \u2228 (p_7(Keilani) \u2295 p_0(Keilani))\np_1(Keilani) \u2295 p_6(Keilani)\n\u2200x (p_5(x) \u2192 (p_6(x) \u2228 p_7(x)))\np_7(Keilani)\np_6(Keilani) \u2228 p_7(Keilani)\n\u00acp_10(Keilani) \u2192 p_4(Keilani)\np_12(Keilani) \u2295 p_11(Keilani)\np_8(Keilani) \u2295 p_9(Keilani)\np_5(Keilani) \u2192 (p_6(Keilani) \u2228 p_7(Keilani))\n\u00acp_6(Keilani) \u2192 p_5(Keilani)",
            "Initial Goal": "p_5(Keilani)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Keilani)",
                    "-p_2(Keilani)",
                    "p_0(Keilani)",
                    "p_1(Keilani)",
                    "p_10(Keilani) | p_4(Keilani)",
                    "(-(p_12(Keilani) <-> p_2(Keilani))) -> p_3(Keilani)",
                    "(p_12(Keilani) | p_11(Keilani)) & (-p_12(Keilani) | -p_11(Keilani))",
                    "p_10(Keilani) -> (-(p_11(Keilani) <-> p_9(Keilani)))",
                    "all x (-(p_8(x) <-> p_9(x)))",
                    "-p_8(Keilani) | (-(p_7(Keilani) <-> p_0(Keilani)))",
                    "-(p_1(Keilani) <-> p_6(Keilani))",
                    "all x (p_5(x) -> (p_6(x) | p_7(x)))",
                    "p_7(Keilani)",
                    "p_6(Keilani) | p_7(Keilani)",
                    "-p_10(Keilani) -> p_4(Keilani)",
                    "-(p_12(Keilani) <-> p_11(Keilani))",
                    "-(p_8(Keilani) <-> p_9(Keilani))",
                    "p_5(Keilani) -> (p_6(Keilani) | p_7(Keilani))",
                    "-p_6(Keilani) -> p_5(Keilani)"
                ],
                "formulas(goals)": [
                    "p_5(Keilani)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "(p_1(Keilani) \u2227 p_7(Keilani)) \u2192 \u00acp_5(Keilani)"
                ],
                "added_facts": [],
                "added_rules": [
                    "\u00acp_6(Keilani) \u2192 p_5(Keilani)"
                ]
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_4(Keilani)\n\u00acp_2(Keilani)\np_0(Keilani)\np_1(Keilani)\np_10(Keilani) \u2228 p_4(Keilani)\n(p_12(Keilani) \u2295 p_2(Keilani)) \u2192 p_3(Keilani)\n(p_12(Keilani) \u2228 p_11(Keilani)) \u2227 (\u00acp_12(Keilani) \u2228 \u00acp_11(Keilani))\np_10(Keilani) \u2192 (p_11(Keilani) \u2295 p_9(Keilani))\n\u2200x (p_8(x) \u2295 p_9(x))\n\u00acp_8(Keilani) \u2228 (p_7(Keilani) \u2295 p_0(Keilani))\np_1(Keilani) \u2295 p_6(Keilani)\n\u2200x (p_5(x) \u2192 (p_6(x) \u2228 p_7(x)))\np_7(Keilani)\np_6(Keilani) \u2228 p_7(Keilani)\n\u00acp_10(Keilani) \u2192 p_4(Keilani)\np_12(Keilani) \u2295 p_11(Keilani)\np_8(Keilani) \u2295 p_9(Keilani)\np_5(Keilani) \u2192 (p_6(Keilani) \u2228 p_7(Keilani))\n\u00acp_6(Keilani) \u2192 p_5(Keilani)\n(p_1(Keilani) \u2227 \u00acp_6(Keilani)) \u2228 (\u00acp_1(Keilani) \u2227 p_6(Keilani))\np_5(Keilani) \u2228 p_6(Keilani)",
            "Initial Goal": "p_5(Keilani)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Keilani)",
                    "-p_2(Keilani)",
                    "p_0(Keilani)",
                    "p_1(Keilani)",
                    "p_10(Keilani) | p_4(Keilani)",
                    "(-(p_12(Keilani) <-> p_2(Keilani))) -> p_3(Keilani)",
                    "(p_12(Keilani) | p_11(Keilani)) & (-p_12(Keilani) | -p_11(Keilani))",
                    "p_10(Keilani) -> (-(p_11(Keilani) <-> p_9(Keilani)))",
                    "all x (-(p_8(x) <-> p_9(x)))",
                    "-p_8(Keilani) | (-(p_7(Keilani) <-> p_0(Keilani)))",
                    "(-(p_1(Keilani) <-> p_6(Keilani)))",
                    "all x (p_5(x) -> (p_6(x) | p_7(x)))",
                    "p_7(Keilani)",
                    "p_6(Keilani) | p_7(Keilani)",
                    "-p_10(Keilani) -> p_4(Keilani)",
                    "(-(p_12(Keilani) <-> p_11(Keilani)))",
                    "(-(p_8(Keilani) <-> p_9(Keilani)))",
                    "p_5(Keilani) -> (p_6(Keilani) | p_7(Keilani))",
                    "-p_6(Keilani) -> p_5(Keilani)",
                    "(p_1(Keilani) & -p_6(Keilani)) | (-p_1(Keilani) & p_6(Keilani))",
                    "p_5(Keilani) | p_6(Keilani)"
                ],
                "formulas(goals)": [
                    "p_5(Keilani)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "(p_1(Keilani) \u2227 \u00acp_6(Keilani)) \u2228 (\u00acp_1(Keilani) \u2227 p_6(Keilani))",
                    "p_5(Keilani) \u2228 p_6(Keilani)"
                ]
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_4(Keilani)\n\u00acp_2(Keilani)\np_0(Keilani)\np_1(Keilani)\np_10(Keilani) \u2228 p_4(Keilani)\n(p_12(Keilani) \u2295 p_2(Keilani)) \u2192 p_3(Keilani)\n(p_12(Keilani) \u2228 p_11(Keilani)) \u2227 (\u00acp_12(Keilani) \u2228 \u00acp_11(Keilani))\np_10(Keilani) \u2192 (p_11(Keilani) \u2295 p_9(Keilani))\n\u2200x (p_8(x) \u2295 p_9(x))\n\u00acp_8(Keilani) \u2228 (p_7(Keilani) \u2295 p_0(Keilani))\n\u2200x (p_5(x) \u2192 (p_6(x) \u2228 p_7(x)))\np_7(Keilani)\np_6(Keilani) \u2228 p_7(Keilani)\n\u00acp_10(Keilani) \u2192 p_4(Keilani)\np_12(Keilani) \u2295 p_11(Keilani)\np_8(Keilani) \u2295 p_9(Keilani)\np_5(Keilani) \u2192 (p_6(Keilani) \u2228 p_7(Keilani))\n\u00acp_6(Keilani) \u2192 p_5(Keilani)\np_5(Keilani) \u2228 p_6(Keilani)\np_1(Keilani) \u2192 p_6(Keilani)\np_6(Keilani) \u2192 \u00acp_5(Keilani)",
            "Initial Goal": "p_5(Keilani)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Keilani)",
                    "-p_2(Keilani)",
                    "p_0(Keilani)",
                    "p_1(Keilani)",
                    "p_10(Keilani) | p_4(Keilani)",
                    "(- (p_12(Keilani) <-> p_2(Keilani))) -> p_3(Keilani)",
                    "(p_12(Keilani) | p_11(Keilani)) & (-p_12(Keilani) | -p_11(Keilani))",
                    "p_10(Keilani) -> (- (p_11(Keilani) <-> p_9(Keilani)))",
                    "all x (- (p_8(x) <-> p_9(x)))",
                    "-p_8(Keilani) | (- (p_7(Keilani) <-> p_0(Keilani)))",
                    "all x (p_5(x) -> (p_6(x) | p_7(x)))",
                    "p_7(Keilani)",
                    "p_6(Keilani) | p_7(Keilani)",
                    "-p_10(Keilani) -> p_4(Keilani)",
                    "- (p_12(Keilani) <-> p_11(Keilani))",
                    "- (p_8(Keilani) <-> p_9(Keilani))",
                    "p_5(Keilani) -> (p_6(Keilani) | p_7(Keilani))",
                    "(-p_6(Keilani)) -> p_5(Keilani)",
                    "p_5(Keilani) | p_6(Keilani)",
                    "p_1(Keilani) -> p_6(Keilani)",
                    "p_6(Keilani) -> (-p_5(Keilani))"
                ],
                "formulas(goals)": [
                    "-p_5(Keilani)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_1(Keilani) \u2295 p_6(Keilani)",
                    "(p_1(Keilani) \u2227 \u00acp_6(Keilani)) \u2228 (\u00acp_1(Keilani) \u2227 p_6(Keilani))"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_1(Keilani) \u2192 p_6(Keilani)",
                    "p_6(Keilani) \u2192 \u00acp_5(Keilani)"
                ]
            }
        }
    ]
}