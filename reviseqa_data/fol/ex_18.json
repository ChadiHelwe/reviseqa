{
    "background_story": "Kyro was a brilliant and intense young doctor with an acute mind for solving medical mysteries. His exceptional diagnostic skills and ability to think on his feet made him a valuable asset to the hospital's emergency department. One fateful night, a patient was rushed in with symptoms that baffled the entire medical team. Kyro's acute observation skills kicked in, and he noticed a minute detail that everyone else had missed. He quickly pieced together the puzzle, leading to a diagnosis that saved the patient's life. His colleagues marveled at his acute insight, and soon, Kyro was known as the go-to expert for the most complex and puzzling cases.",
    "predicates": [
        {
            "id": 0,
            "name": "stays_focused"
        },
        {
            "id": 1,
            "name": "save_lives"
        },
        {
            "id": 2,
            "name": "thinks_critically"
        },
        {
            "id": 3,
            "name": "acts_confidently"
        },
        {
            "id": 4,
            "name": "teach_others"
        },
        {
            "id": 5,
            "name": "is_a_doctor"
        },
        {
            "id": 6,
            "name": "has_acute_observation_skills"
        },
        {
            "id": 7,
            "name": "solves_medical_mysteries"
        },
        {
            "id": 8,
            "name": "works_in_hospital"
        },
        {
            "id": 9,
            "name": "makes_quick_decisions"
        },
        {
            "id": 10,
            "name": "help_patients"
        },
        {
            "id": 11,
            "name": "prescribes_treatment"
        },
        {
            "id": 12,
            "name": "examines_patients"
        },
        {
            "id": 13,
            "name": "treats_patients"
        },
        {
            "id": 14,
            "name": "is_expert"
        },
        {
            "id": 15,
            "name": "leads_team"
        },
        {
            "id": 16,
            "name": "is_resourceful"
        },
        {
            "id": 17,
            "name": "is_introspective"
        },
        {
            "id": 18,
            "name": "cares_deeply"
        },
        {
            "id": 19,
            "name": "listens_carefully"
        }
    ],
    "subject_name": "Kyro",
    "subject_category": "human",
    "keyword": "acute",
    "all_facts": [
        {
            "id": 0,
            "subject": "Kyro",
            "text": "Kyro does not stay focused.",
            "fol": "\u00acp_0(Kyro)",
            "str_fol": "\u00acstays_focused(Kyro)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Kyro",
            "text": "Kyro does not save lives.",
            "fol": "\u00acp_1(Kyro)",
            "str_fol": "\u00acsave_lives(Kyro)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Kyro",
            "text": "Kyro does not think critically.",
            "fol": "\u00acp_2(Kyro)",
            "str_fol": "\u00acthinks_critically(Kyro)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Kyro",
            "text": "Kyro does not act confidently.",
            "fol": "\u00acp_3(Kyro)",
            "str_fol": "\u00acacts_confidently(Kyro)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Kyro",
            "text": "Kyro teaches others.",
            "fol": "p_4(Kyro)",
            "str_fol": "teach_others(Kyro)",
            "negation": false
        },
        {
            "id": 5,
            "subject": "Kyro",
            "text": "Kyro does not help patients.",
            "fol": "\u00acp_10(Kyro)",
            "str_fol": "\u00achelp_patients(Kyro)",
            "negation": true
        },
        {
            "id": 6,
            "subject": "Kyro",
            "text": "Kyro does not make quick decisions.",
            "fol": "\u00acp_9(Kyro)",
            "str_fol": "\u00acmakes_quick_decisions(Kyro)",
            "negation": true
        },
        {
            "id": 7,
            "subject": "Kyro",
            "text": "Kyro does not work in a hospital.",
            "fol": "\u00acp_8(Kyro)",
            "str_fol": "\u00acworks_in_hospital(Kyro)",
            "negation": true
        },
        {
            "id": 8,
            "subject": "Kyro",
            "text": "Kyro cannot solve medical mysteries.",
            "fol": "\u00acp_7(Kyro)",
            "str_fol": "\u00acsolves_medical_mysteries(Kyro)",
            "negation": true
        },
        {
            "id": 9,
            "subject": "Kyro",
            "text": "Kyro is a doctor.",
            "fol": "p_5(Kyro)",
            "str_fol": "is_a_doctor(Kyro)",
            "negation": false
        },
        {
            "id": 10,
            "subject": "Kyro",
            "text": "Kyro has acute observation skills.",
            "fol": "p_6(Kyro)",
            "str_fol": "has_acute_observation_skills(Kyro)",
            "negation": false
        }
    ],
    "context_facts": [
        {
            "id": 4,
            "subject": "Kyro",
            "text": "Kyro teaches others.",
            "fol": "p_4(Kyro)",
            "str_fol": "teach_others(Kyro)",
            "negation": false
        },
        {
            "id": 0,
            "subject": "Kyro",
            "text": "Kyro does not stay focused.",
            "fol": "\u00acp_0(Kyro)",
            "str_fol": "\u00acstays_focused(Kyro)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Kyro",
            "text": "Kyro does not act confidently.",
            "fol": "\u00acp_3(Kyro)",
            "str_fol": "\u00acacts_confidently(Kyro)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Kyro",
            "text": "Kyro does not save lives.",
            "fol": "\u00acp_1(Kyro)",
            "str_fol": "\u00acsave_lives(Kyro)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Kyro",
            "text": "Kyro does not think critically.",
            "fol": "\u00acp_2(Kyro)",
            "str_fol": "\u00acthinks_critically(Kyro)",
            "negation": true
        }
    ],
    "context_rules": [
        {
            "id": 5,
            "text": "Either Kyro helps patients or he teaches others, but he does not do both.",
            "fol": "p_10(Kyro) \u2295 p_4(Kyro)",
            "str_fol": "help_patients(Kyro) \u2295 teach_others(Kyro)"
        },
        {
            "id": 4,
            "text": "Anyone who makes quick decisions either stays focused or acts confidently (or both).",
            "fol": "\u2200x (p_9(x) \u2192 (p_0(x) \u2228 p_3(x)))",
            "str_fol": "\u2200x (makes_quick_decisions(x) \u2192 (stays_focused(x) \u2228 acts_confidently(x)))"
        },
        {
            "id": 3,
            "text": "Everyone who works in a hospital either saves lives or helps patients.",
            "fol": "\u2200x (p_8(x) \u2192 (p_1(x) \u2228 p_10(x)))",
            "str_fol": "\u2200x (works_in_hospital(x) \u2192 (save_lives(x) \u2228 help_patients(x)))"
        },
        {
            "id": 2,
            "text": "Anyone who solves medical mysteries either thinks critically or makes quick decisions (or both).",
            "fol": "\u2200x (p_7(x) \u2192 (p_2(x) \u2228 p_9(x)))",
            "str_fol": "\u2200x (solves_medical_mysteries(x) \u2192 (thinks_critically(x) \u2228 makes_quick_decisions(x)))"
        },
        {
            "id": 1,
            "text": "Kyro is a doctor or works in a hospital.",
            "fol": "p_5(Kyro) \u2228 p_8(Kyro)",
            "str_fol": "is_a_doctor(Kyro) \u2228 works_in_hospital(Kyro)"
        },
        {
            "id": 0,
            "text": "For all humans, if a person is a doctor and has acute observation skills, then they can solve medical mysteries.",
            "fol": "\u2200x ((p_5(x) \u2227 p_6(x)) \u2192 p_7(x))",
            "str_fol": "\u2200x ((is_a_doctor(x) \u2227 has_acute_observation_skills(x)) \u2192 solves_medical_mysteries(x))"
        }
    ],
    "context": [
        {
            "id": 4,
            "subject": "Kyro",
            "text": "Kyro teaches others.",
            "fol": "p_4(Kyro)",
            "str_fol": "teach_others(Kyro)",
            "negation": false
        },
        {
            "id": 0,
            "subject": "Kyro",
            "text": "Kyro does not stay focused.",
            "fol": "\u00acp_0(Kyro)",
            "str_fol": "\u00acstays_focused(Kyro)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Kyro",
            "text": "Kyro does not act confidently.",
            "fol": "\u00acp_3(Kyro)",
            "str_fol": "\u00acacts_confidently(Kyro)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Kyro",
            "text": "Kyro does not save lives.",
            "fol": "\u00acp_1(Kyro)",
            "str_fol": "\u00acsave_lives(Kyro)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Kyro",
            "text": "Kyro does not think critically.",
            "fol": "\u00acp_2(Kyro)",
            "str_fol": "\u00acthinks_critically(Kyro)",
            "negation": true
        },
        {
            "id": 5,
            "text": "Either Kyro helps patients or he teaches others, but he does not do both.",
            "fol": "p_10(Kyro) \u2295 p_4(Kyro)",
            "str_fol": "help_patients(Kyro) \u2295 teach_others(Kyro)"
        },
        {
            "id": 4,
            "text": "Anyone who makes quick decisions either stays focused or acts confidently (or both).",
            "fol": "\u2200x (p_9(x) \u2192 (p_0(x) \u2228 p_3(x)))",
            "str_fol": "\u2200x (makes_quick_decisions(x) \u2192 (stays_focused(x) \u2228 acts_confidently(x)))"
        },
        {
            "id": 3,
            "text": "Everyone who works in a hospital either saves lives or helps patients.",
            "fol": "\u2200x (p_8(x) \u2192 (p_1(x) \u2228 p_10(x)))",
            "str_fol": "\u2200x (works_in_hospital(x) \u2192 (save_lives(x) \u2228 help_patients(x)))"
        },
        {
            "id": 2,
            "text": "Anyone who solves medical mysteries either thinks critically or makes quick decisions (or both).",
            "fol": "\u2200x (p_7(x) \u2192 (p_2(x) \u2228 p_9(x)))",
            "str_fol": "\u2200x (solves_medical_mysteries(x) \u2192 (thinks_critically(x) \u2228 makes_quick_decisions(x)))"
        },
        {
            "id": 1,
            "text": "Kyro is a doctor or works in a hospital.",
            "fol": "p_5(Kyro) \u2228 p_8(Kyro)",
            "str_fol": "is_a_doctor(Kyro) \u2228 works_in_hospital(Kyro)"
        },
        {
            "id": 0,
            "text": "For all humans, if a person is a doctor and has acute observation skills, then they can solve medical mysteries.",
            "fol": "\u2200x ((p_5(x) \u2227 p_6(x)) \u2192 p_7(x))",
            "str_fol": "\u2200x ((is_a_doctor(x) \u2227 has_acute_observation_skills(x)) \u2192 solves_medical_mysteries(x))"
        }
    ],
    "context_fol": "p_4(Kyro)\n\u00acp_0(Kyro)\n\u00acp_3(Kyro)\n\u00acp_1(Kyro)\n\u00acp_2(Kyro)\np_10(Kyro) \u2295 p_4(Kyro)\n\u2200x (p_9(x) \u2192 (p_0(x) \u2228 p_3(x)))\n\u2200x (p_8(x) \u2192 (p_1(x) \u2228 p_10(x)))\n\u2200x (p_7(x) \u2192 (p_2(x) \u2228 p_9(x)))\np_5(Kyro) \u2228 p_8(Kyro)\n\u2200x ((p_5(x) \u2227 p_6(x)) \u2192 p_7(x))",
    "conclusion": {
        "id": 10,
        "subject": "Kyro",
        "text": "Kyro has acute observation skills.",
        "fol": "p_6(Kyro)",
        "str_fol": "has_acute_observation_skills(Kyro)",
        "negation": false
    },
    "initial_answer": "False",
    "initial_goal": "p_6(Kyro)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 4,
                    "subject": "Kyro",
                    "text": "Kyro teaches others.",
                    "fol": "p_4(Kyro)",
                    "str_fol": "teach_others(Kyro)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "Either Kyro helps patients or he teaches others, but he does not do both.",
                    "fol": "p_10(Kyro) \u2295 p_4(Kyro)",
                    "str_fol": "help_patients(Kyro) \u2295 teach_others(Kyro)"
                }
            ],
            "conclusion": {
                "id": 5,
                "subject": "Kyro",
                "text": "Kyro does not help patients.",
                "fol": "\u00acp_10(Kyro)",
                "str_fol": "\u00achelp_patients(Kyro)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 0,
                    "subject": "Kyro",
                    "text": "Kyro does not stay focused.",
                    "fol": "\u00acp_0(Kyro)",
                    "str_fol": "\u00acstays_focused(Kyro)",
                    "negation": true
                },
                {
                    "id": 3,
                    "subject": "Kyro",
                    "text": "Kyro does not act confidently.",
                    "fol": "\u00acp_3(Kyro)",
                    "str_fol": "\u00acacts_confidently(Kyro)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "Anyone who makes quick decisions either stays focused or acts confidently (or both).",
                    "fol": "\u2200x (p_9(x) \u2192 (p_0(x) \u2228 p_3(x)))",
                    "str_fol": "\u2200x (makes_quick_decisions(x) \u2192 (stays_focused(x) \u2228 acts_confidently(x)))"
                }
            ],
            "conclusion": {
                "id": 6,
                "subject": "Kyro",
                "text": "Kyro does not make quick decisions.",
                "fol": "\u00acp_9(Kyro)",
                "str_fol": "\u00acmakes_quick_decisions(Kyro)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 1,
                    "subject": "Kyro",
                    "text": "Kyro does not save lives.",
                    "fol": "\u00acp_1(Kyro)",
                    "str_fol": "\u00acsave_lives(Kyro)",
                    "negation": true
                },
                {
                    "id": 5,
                    "subject": "Kyro",
                    "text": "Kyro does not help patients.",
                    "fol": "\u00acp_10(Kyro)",
                    "str_fol": "\u00achelp_patients(Kyro)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "Everyone who works in a hospital either saves lives or helps patients.",
                    "fol": "\u2200x (p_8(x) \u2192 (p_1(x) \u2228 p_10(x)))",
                    "str_fol": "\u2200x (works_in_hospital(x) \u2192 (save_lives(x) \u2228 help_patients(x)))"
                }
            ],
            "conclusion": {
                "id": 7,
                "subject": "Kyro",
                "text": "Kyro does not work in a hospital.",
                "fol": "\u00acp_8(Kyro)",
                "str_fol": "\u00acworks_in_hospital(Kyro)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 2,
                    "subject": "Kyro",
                    "text": "Kyro does not think critically.",
                    "fol": "\u00acp_2(Kyro)",
                    "str_fol": "\u00acthinks_critically(Kyro)",
                    "negation": true
                },
                {
                    "id": 6,
                    "subject": "Kyro",
                    "text": "Kyro does not make quick decisions.",
                    "fol": "\u00acp_9(Kyro)",
                    "str_fol": "\u00acmakes_quick_decisions(Kyro)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "Anyone who solves medical mysteries either thinks critically or makes quick decisions (or both).",
                    "fol": "\u2200x (p_7(x) \u2192 (p_2(x) \u2228 p_9(x)))",
                    "str_fol": "\u2200x (solves_medical_mysteries(x) \u2192 (thinks_critically(x) \u2228 makes_quick_decisions(x)))"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Kyro",
                "text": "Kyro cannot solve medical mysteries.",
                "fol": "\u00acp_7(Kyro)",
                "str_fol": "\u00acsolves_medical_mysteries(Kyro)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 7,
                    "subject": "Kyro",
                    "text": "Kyro does not work in a hospital.",
                    "fol": "\u00acp_8(Kyro)",
                    "str_fol": "\u00acworks_in_hospital(Kyro)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "Kyro is a doctor or works in a hospital.",
                    "fol": "p_5(Kyro) \u2228 p_8(Kyro)",
                    "str_fol": "is_a_doctor(Kyro) \u2228 works_in_hospital(Kyro)"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Kyro",
                "text": "Kyro is a doctor.",
                "fol": "p_5(Kyro)",
                "str_fol": "is_a_doctor(Kyro)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 9,
                    "subject": "Kyro",
                    "text": "Kyro is a doctor.",
                    "fol": "p_5(Kyro)",
                    "str_fol": "is_a_doctor(Kyro)",
                    "negation": false
                },
                {
                    "id": 8,
                    "subject": "Kyro",
                    "text": "Kyro cannot solve medical mysteries.",
                    "fol": "\u00acp_7(Kyro)",
                    "str_fol": "\u00acsolves_medical_mysteries(Kyro)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "For all humans, if a person is a doctor and has acute observation skills, then they can solve medical mysteries.",
                    "fol": "\u2200x ((p_5(x) \u2227 p_6(x)) \u2192 p_7(x))",
                    "str_fol": "\u2200x ((is_a_doctor(x) \u2227 has_acute_observation_skills(x)) \u2192 solves_medical_mysteries(x))"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Kyro",
                "text": "Kyro has acute observation skills.",
                "fol": "p_6(Kyro)",
                "str_fol": "has_acute_observation_skills(Kyro)",
                "negation": false
            }
        }
    ],
    "proof_trace": "1 -(p_10(Kyro) <-> p_4(Kyro)).  [assumption].\n2 (all x (p_9(x) -> p_0(x) | p_3(x))).  [assumption].\n3 (all x (p_8(x) -> p_1(x) | p_10(x))).  [assumption].\n4 (all x (p_7(x) -> p_2(x) | p_9(x))).  [assumption].\n5 (all x (p_5(x) & p_6(x) -> p_7(x))).  [assumption].\n6 -p_6(Kyro).  [goal].\n7 -p_10(Kyro) | -p_4(Kyro).  [clausify(1)].\n8 p_4(Kyro).  [assumption].\n10 -p_9(x) | p_0(x) | p_3(x).  [clausify(2)].\n11 -p_0(Kyro).  [assumption].\n12 -p_9(Kyro) | p_3(Kyro).  [resolve(10,b,11,a)].\n13 -p_3(Kyro).  [assumption].\n14 -p_8(x) | p_1(x) | p_10(x).  [clausify(3)].\n15 -p_1(Kyro).  [assumption].\n16 -p_7(x) | p_2(x) | p_9(x).  [clausify(4)].\n17 -p_2(Kyro).  [assumption].\n18 -p_5(x) | -p_6(x) | p_7(x).  [clausify(5)].\n19 p_5(Kyro) | p_8(Kyro).  [assumption].\n20 -p_6(Kyro) | p_7(Kyro) | p_8(Kyro).  [resolve(18,a,19,a)].\n21 p_6(Kyro).  [deny(6)].\n22 -p_8(Kyro) | p_10(Kyro).  [resolve(14,b,15,a)].\n23 -p_10(Kyro).  [resolve(7,b,8,a)].\n24 -p_7(Kyro) | p_9(Kyro).  [resolve(16,b,17,a)].\n25 -p_9(Kyro).  [resolve(12,b,13,a)].\n26 -p_7(Kyro).  [resolve(24,b,25,a)].\n27 p_7(Kyro) | p_8(Kyro).  [resolve(20,a,21,a)].\n28 p_8(Kyro).  [resolve(26,a,27,a)].\n29 -p_8(Kyro).  [resolve(22,b,23,a)].\n30 $F.  [resolve(28,a,29,a)].",
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_4(Kyro)\n\u00acp_0(Kyro)\n\u00acp_3(Kyro)\n\u00acp_1(Kyro)\n\u00acp_2(Kyro)\np_10(Kyro) \u2194 \u00acp_4(Kyro)\n\u2200x (\u00acp_0(x) \u2227 \u00acp_3(x) \u2192 \u00acp_9(x))\n\u2200x (p_8(x) \u2192 (p_1(x) \u2228 p_10(x)))\n\u2200x (p_7(x) \u2192 (p_2(x) \u2228 p_9(x)))\np_5(Kyro) \u2228 p_8(Kyro)\n\u2200x ((p_5(x) \u2227 p_6(x)) \u2192 p_7(x))",
            "Initial Goal": "p_6(Kyro)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_4(Kyro)",
                    "-p_0(Kyro)",
                    "-p_3(Kyro)",
                    "-p_1(Kyro)",
                    "-p_2(Kyro)",
                    "p_10(Kyro) <-> -p_4(Kyro)",
                    "all x (-p_0(x) & -p_3(x) -> -p_9(x))",
                    "all x (p_8(x) -> (p_1(x) | p_10(x)))",
                    "all x (p_7(x) -> (p_2(x) | p_9(x)))",
                    "p_5(Kyro) | p_8(Kyro)",
                    "all x (p_5(x) & p_6(x) -> p_7(x))"
                ],
                "formulas(goals)": [
                    "-p_6(Kyro)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u2200x (p_9(x) \u2192 (p_0(x) \u2228 p_3(x)))",
                    "p_10(Kyro) \u2295 p_4(Kyro)"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_10(Kyro) \u2194 \u00acp_4(Kyro)",
                    "\u2200x (\u00acp_0(x) \u2227 \u00acp_3(x) \u2192 \u00acp_9(x))"
                ]
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_4(Kyro)\n\u00acp_0(Kyro)\n\u00acp_3(Kyro)\n\u00acp_1(Kyro)\n\u00acp_2(Kyro)\np_10(Kyro) \u2194 \u00acp_4(Kyro)\n\u2200x (\u00acp_0(x) \u2227 \u00acp_3(x) \u2192 \u00acp_9(x))\n\u2200x (p_8(x) \u2192 (p_1(x) \u2228 p_10(x)))\n\u2200x (p_7(x) \u2192 (p_2(x) \u2228 p_9(x)))\n\u00acp_5(Kyro)\n\u00acp_8(Kyro)\n\u2200x ((p_5(x) \u2227 p_6(x)) \u2192 p_7(x))\n\u2200x (p_4(x) \u2192 p_6(x))",
            "Initial Goal": "p_6(Kyro)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_4(Kyro)",
                    "-p_0(Kyro)",
                    "-p_3(Kyro)",
                    "-p_1(Kyro)",
                    "-p_2(Kyro)",
                    "p_10(Kyro) <-> -p_4(Kyro)",
                    "all x ((-p_0(x) & -p_3(x)) -> -p_9(x))",
                    "all x (p_8(x) -> (p_1(x) | p_10(x)))",
                    "all x (p_7(x) -> (p_2(x) | p_9(x)))",
                    "-p_5(Kyro)",
                    "-p_8(Kyro)",
                    "all x ((p_5(x) & p_6(x)) -> p_7(x))",
                    "all x (p_4(x) -> p_6(x))"
                ],
                "formulas(goals)": [
                    "p_6(Kyro)"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "p_5(Kyro) \u2228 p_8(Kyro)"
                ],
                "removed_rules": [],
                "added_facts": [
                    "\u00acp_5(Kyro)",
                    "\u00acp_8(Kyro)"
                ],
                "added_rules": [
                    "\u2200x (p_4(x) \u2192 p_6(x))"
                ]
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_4(Kyro)\n\u00acp_0(Kyro)\n\u00acp_3(Kyro)\n\u00acp_1(Kyro)\n\u00acp_2(Kyro)\n(p_10(Kyro) \u2194 \u00acp_4(Kyro))\n\u2200x (\u00acp_0(x) \u2192 (\u00acp_3(x) \u2192 \u00acp_9(x)))\n\u2200x (p_8(x) \u2192 (p_1(x) \u2228 p_10(x)))\n\u2200x (p_7(x) \u2192 (p_2(x) \u2228 p_9(x)))\n\u00acp_5(Kyro)\n\u00acp_8(Kyro)\n\u2200x ((p_5(x) \u2227 p_6(x)) \u2192 p_7(x))\n\u2200x (p_4(x) \u2192 p_6(x))\np_6(Kyro)\n\u00acp_9(Kyro)\n\u00acp_10(Kyro)",
            "Initial Goal": "p_6(Kyro)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_4(Kyro)",
                    "-p_0(Kyro)",
                    "-p_3(Kyro)",
                    "-p_1(Kyro)",
                    "-p_2(Kyro)",
                    "(p_10(Kyro) <-> -p_4(Kyro))",
                    "all x (-p_0(x) -> (-p_3(x) -> -p_9(x)))",
                    "all x (p_8(x) -> (p_1(x) | p_10(x)))",
                    "all x (p_7(x) -> (p_2(x) | p_9(x)))",
                    "-p_5(Kyro)",
                    "-p_8(Kyro)",
                    "all x ((p_5(x) & p_6(x)) -> p_7(x))",
                    "all x (p_4(x) -> p_6(x))",
                    "p_6(Kyro)",
                    "-p_9(Kyro)",
                    "-p_10(Kyro)"
                ],
                "formulas(goals)": [
                    "p_6(Kyro)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u2200x (\u00acp_0(x) \u2227 \u00acp_3(x) \u2192 \u00acp_9(x))"
                ],
                "added_facts": [
                    "p_6(Kyro)",
                    "\u00acp_9(Kyro)",
                    "\u00acp_10(Kyro)"
                ],
                "added_rules": [
                    "\u2200x (\u00acp_0(x) \u2192 (\u00acp_3(x) \u2192 \u00acp_9(x)))"
                ]
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_4(Kyro)\n\u00acp_0(Kyro)\n\u00acp_3(Kyro)\n\u00acp_1(Kyro)\n\u00acp_2(Kyro)\n(p_10(Kyro) \u2194 \u00acp_4(Kyro))\n\u2200x ((\u00acp_0(x) \u2227 \u00acp_3(x)) \u2192 \u00acp_9(x))\n\u2200x ((p_8(x) \u2227 \u00acp_1(x)) \u2192 p_10(x))\n\u2200x (p_7(x) \u2192 (p_2(x) \u2228 p_9(x)))\n\u00acp_5(Kyro)\n\u00acp_8(Kyro)\n\u2200x ((p_5(x) \u2227 p_6(x)) \u2192 p_7(x))\n\u2200x (p_4(x) \u2192 p_6(x))\np_6(Kyro)\n\u00acp_9(Kyro)\n\u00acp_10(Kyro)\n\u2200x (\u00acp_6(x) \u2192 \u00acp_4(x))",
            "Initial Goal": "p_6(Kyro)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_4(Kyro)",
                    "-p_0(Kyro)",
                    "-p_3(Kyro)",
                    "-p_1(Kyro)",
                    "-p_2(Kyro)",
                    "(p_10(Kyro) <-> -p_4(Kyro))",
                    "all x ((-p_0(x) & -p_3(x)) -> -p_9(x))",
                    "all x ((p_8(x) & -p_1(x)) -> p_10(x))",
                    "all x (p_7(x) -> (p_2(x) | p_9(x)))",
                    "-p_5(Kyro)",
                    "-p_8(Kyro)",
                    "all x ((p_5(x) & p_6(x)) -> p_7(x))",
                    "all x (p_4(x) -> p_6(x))",
                    "p_6(Kyro)",
                    "-p_9(Kyro)",
                    "-p_10(Kyro)",
                    "all x (-p_6(x) -> -p_4(x))"
                ],
                "formulas(goals)": [
                    "p_6(Kyro)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u2200x (\u00acp_0(x) \u2192 (\u00acp_3(x) \u2192 \u00acp_9(x)))",
                    "\u2200x (p_8(x) \u2192 (p_1(x) \u2228 p_10(x)))"
                ],
                "added_facts": [],
                "added_rules": [
                    "\u2200x ((\u00acp_0(x) \u2227 \u00acp_3(x)) \u2192 \u00acp_9(x))",
                    "\u2200x ((p_8(x) \u2227 \u00acp_1(x)) \u2192 p_10(x))",
                    "\u2200x (\u00acp_6(x) \u2192 \u00acp_4(x))"
                ]
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_4(Kyro)\n\u00acp_0(Kyro)\n\u00acp_3(Kyro)\n\u00acp_1(Kyro)\n\u00acp_2(Kyro)\n(p_10(Kyro) \u2194 \u00acp_4(Kyro))\n\u2200x ((\u00acp_0(x) \u2227 \u00acp_3(x)) \u2192 \u00acp_9(x))\n\u2200x ((p_8(x) \u2227 \u00acp_1(x)) \u2192 p_10(x))\n\u2200x (p_7(x) \u2192 (p_2(x) \u2228 p_9(x)))\n\u00acp_5(Kyro)\n\u00acp_8(Kyro)\n\u2200x ((p_5(x) \u2227 p_6(x)) \u2192 p_7(x))\n\u00acp_9(Kyro)\n\u00acp_10(Kyro)\n\u2200x (\u00acp_6(x) \u2192 \u00acp_4(x))\n\u2200x (p_4(x) \u2192 \u00acp_6(x))",
            "Initial Goal": "p_6(Kyro)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_4(Kyro).",
                    "-p_0(Kyro).",
                    "-p_3(Kyro).",
                    "-p_1(Kyro).",
                    "-p_2(Kyro).",
                    "(p_10(Kyro) <-> -p_4(Kyro)).",
                    "all x ((-p_0(x) & -p_3(x)) -> -p_9(x)).",
                    "all x ((p_8(x) & -p_1(x)) -> p_10(x)).",
                    "all x (p_7(x) -> (p_2(x) | p_9(x))).",
                    "-p_5(Kyro).",
                    "-p_8(Kyro).",
                    "all x ((p_5(x) & p_6(x)) -> p_7(x)).",
                    "-p_9(Kyro).",
                    "-p_10(Kyro).",
                    "all x (-p_6(x) -> -p_4(x)).",
                    "all x (p_4(x) -> -p_6(x))."
                ],
                "formulas(goals)": [
                    "-p_6(Kyro)."
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "p_6(Kyro)"
                ],
                "removed_rules": [
                    "\u2200x (p_4(x) \u2192 p_6(x))"
                ],
                "added_facts": [],
                "added_rules": [
                    "\u2200x (p_4(x) \u2192 \u00acp_6(x))"
                ]
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_4(Kyro)\n\u00acp_0(Kyro)\n\u00acp_3(Kyro)\n\u00acp_1(Kyro)\n\u00acp_2(Kyro)\n(p_10(Kyro) \u2194 \u00acp_4(Kyro))\n\u2200x ((\u00acp_0(x) \u2227 \u00acp_3(x)) \u2192 \u00acp_9(x))\n\u2200x ((p_8(x) \u2227 \u00acp_1(x)) \u2192 p_10(x))\n\u2200x (p_7(x) \u2192 (p_2(x) \u2228 p_9(x)))\n\u00acp_5(Kyro)\n\u00acp_8(Kyro)\n\u2200x ((p_5(x) \u2227 p_6(x)) \u2192 p_7(x))\n\u00acp_9(Kyro)\n\u00acp_10(Kyro)\n\u2200x (\u00acp_6(x) \u2192 \u00acp_4(x))",
            "Initial Goal": "p_6(Kyro)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_4(Kyro).",
                    "-p_0(Kyro).",
                    "-p_3(Kyro).",
                    "-p_1(Kyro).",
                    "-p_2(Kyro).",
                    "(p_10(Kyro) <-> -p_4(Kyro)).",
                    "all x ((-p_0(x) & -p_3(x)) -> -p_9(x)).",
                    "all x ((p_8(x) & -p_1(x)) -> p_10(x)).",
                    "all x (p_7(x) -> (p_2(x) | p_9(x))).",
                    "-p_5(Kyro).",
                    "-p_8(Kyro).",
                    "all x ((p_5(x) & p_6(x)) -> p_7(x)).",
                    "-p_9(Kyro).",
                    "-p_10(Kyro).",
                    "all x (-p_6(x) -> -p_4(x))."
                ],
                "formulas(goals)": [
                    "p_6(Kyro)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u2200x (p_4(x) \u2192 \u00acp_6(x))"
                ],
                "added_facts": [],
                "added_rules": []
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_4(Kyro)\n\u00acp_0(Kyro)\n\u00acp_3(Kyro)\n\u00acp_1(Kyro)\n\u00acp_2(Kyro)\n(p_10(Kyro) \u2194 \u00acp_4(Kyro))\np_10(Kyro) \u2192 \u00acp_4(Kyro)\n\u00acp_4(Kyro) \u2192 p_10(Kyro)\n\u2200x ((\u00acp_0(x) \u2227 \u00acp_3(x)) \u2192 \u00acp_9(x))\n\u2200x (p_9(x) \u2192 (p_0(x) \u2228 p_3(x)))\n\u2200x ((p_8(x) \u2227 \u00acp_1(x)) \u2192 p_10(x))\n\u2200x (p_8(x) \u2192 (p_1(x) \u2228 p_10(x)))\n\u2200x (p_7(x) \u2192 (p_2(x) \u2228 p_9(x)))\n\u2200x (\u00acp_7(x) \u2228 p_2(x) \u2228 p_9(x))\n\u00acp_5(Kyro)\n\u00acp_8(Kyro)\n\u2200x ((p_5(x) \u2227 p_6(x)) \u2192 p_7(x))\n\u2200x (\u00acp_5(x) \u2228 \u00acp_6(x) \u2228 p_7(x))\n\u00acp_9(Kyro)\n\u00acp_10(Kyro)\n\u2200x (\u00acp_6(x) \u2192 \u00acp_4(x))\n\u2200x (p_4(x) \u2192 p_6(x))\np_6(Kyro)",
            "Initial Goal": "p_6(Kyro)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_4(Kyro).",
                    "-p_0(Kyro).",
                    "-p_3(Kyro).",
                    "-p_1(Kyro).",
                    "-p_2(Kyro).",
                    "(p_10(Kyro) <-> -p_4(Kyro)).",
                    "p_10(Kyro) -> -p_4(Kyro).",
                    "-p_4(Kyro) -> p_10(Kyro).",
                    "all x ((-p_0(x) & -p_3(x)) -> -p_9(x)).",
                    "all x (p_9(x) -> (p_0(x) | p_3(x))).",
                    "all x ((p_8(x) & -p_1(x)) -> p_10(x)).",
                    "all x (p_8(x) -> (p_1(x) | p_10(x))).",
                    "all x (p_7(x) -> (p_2(x) | p_9(x))).",
                    "all x (-p_7(x) | p_2(x) | p_9(x)).",
                    "-p_5(Kyro).",
                    "-p_8(Kyro).",
                    "all x ((p_5(x) & p_6(x)) -> p_7(x)).",
                    "all x (-p_5(x) | -p_6(x) | p_7(x)).",
                    "-p_9(Kyro).",
                    "-p_10(Kyro).",
                    "all x (-p_6(x) -> -p_4(x)).",
                    "all x (p_4(x) -> p_6(x)).",
                    "p_6(Kyro)."
                ],
                "formulas(goals)": [
                    "p_6(Kyro)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_6(Kyro)"
                ],
                "added_rules": [
                    "p_10(Kyro) \u2192 \u00acp_4(Kyro)",
                    "\u00acp_4(Kyro) \u2192 p_10(Kyro)",
                    "\u2200x (p_9(x) \u2192 (p_0(x) \u2228 p_3(x)))",
                    "\u2200x (p_8(x) \u2192 (p_1(x) \u2228 p_10(x)))",
                    "\u2200x (\u00acp_7(x) \u2228 p_2(x) \u2228 p_9(x))",
                    "\u2200x (\u00acp_5(x) \u2228 \u00acp_6(x) \u2228 p_7(x))",
                    "\u2200x (p_4(x) \u2192 p_6(x))"
                ]
            }
        }
    ]
}