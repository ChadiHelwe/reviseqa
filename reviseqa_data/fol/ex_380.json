{
    "background_story": "Sugar was a beautiful chestnut mare who had been diagnosed with equine palsy, a condition that affected her motor skills and balance. Despite her disability, Sugar's spirit remained unbroken. With the help of her dedicated owner, a skilled equine therapist, Sugar underwent extensive rehabilitation. Through patience, love, and careful training, Sugar learned to adapt and overcome her physical limitations. She became an inspiration to others, participating in therapeutic riding programs for children with disabilities. Sugar's gentle nature and resilience made her a beloved companion, showing everyone that even with palsy, she could still run free in her heart and bring joy to those around her.",
    "predicates": [
        {
            "id": 0,
            "name": "thrives_despite_disability"
        },
        {
            "id": 1,
            "name": "eats_nutritious_food"
        },
        {
            "id": 2,
            "name": "has_free_range"
        },
        {
            "id": 3,
            "name": "has_gentle_nature"
        },
        {
            "id": 4,
            "name": "gets_affection"
        },
        {
            "id": 5,
            "name": "brings_joy"
        },
        {
            "id": 6,
            "name": "gets_massage"
        },
        {
            "id": 7,
            "name": "has_a_good_trainer"
        },
        {
            "id": 8,
            "name": "receives_proper_care"
        },
        {
            "id": 9,
            "name": "gets_regular_exercise"
        },
        {
            "id": 10,
            "name": "stays_healthy"
        },
        {
            "id": 11,
            "name": "lives_happy_life"
        },
        {
            "id": 12,
            "name": "inspires_others"
        },
        {
            "id": 13,
            "name": "is_loved"
        },
        {
            "id": 14,
            "name": "feels_calm"
        },
        {
            "id": 15,
            "name": "runs_free"
        },
        {
            "id": 16,
            "name": "is_determined"
        },
        {
            "id": 17,
            "name": "responds_to_therapy"
        },
        {
            "id": 18,
            "name": "gets_vaccinated"
        },
        {
            "id": 19,
            "name": "gets_social"
        },
        {
            "id": 20,
            "name": "has_companions"
        },
        {
            "id": 21,
            "name": "eats_well"
        },
        {
            "id": 22,
            "name": "overcomes_challenges"
        },
        {
            "id": 23,
            "name": "has_resilient_spirit"
        },
        {
            "id": 24,
            "name": "has_kind_owner"
        },
        {
            "id": 25,
            "name": "gets_proper_treatment"
        },
        {
            "id": 26,
            "name": "gets_groomed"
        },
        {
            "id": 27,
            "name": "is_relaxed"
        },
        {
            "id": 28,
            "name": "plays_outside"
        }
    ],
    "subject_name": "Sugar",
    "subject_category": "horse",
    "keyword": "palsy",
    "all_facts": [
        {
            "id": 0,
            "subject": "Sugar",
            "text": "Sugar does not thrive despite her equine palsy.",
            "fol": "\u00acp_0(Sugar)",
            "str_fol": "\u00acthrives_despite_disability(Sugar)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Sugar",
            "text": "Sugar does not eat nutritious food.",
            "fol": "\u00acp_1(Sugar)",
            "str_fol": "\u00aceats_nutritious_food(Sugar)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Sugar",
            "text": "Sugar does not have free range to roam.",
            "fol": "\u00acp_2(Sugar)",
            "str_fol": "\u00achas_free_range(Sugar)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Sugar",
            "text": "Sugar does not have a gentle nature.",
            "fol": "\u00acp_3(Sugar)",
            "str_fol": "\u00achas_gentle_nature(Sugar)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Sugar",
            "text": "Sugar gets affection.",
            "fol": "p_4(Sugar)",
            "str_fol": "gets_affection(Sugar)",
            "negation": false
        },
        {
            "id": 5,
            "subject": "Sugar",
            "text": "Sugar does not bring joy to others.",
            "fol": "\u00acp_5(Sugar)",
            "str_fol": "\u00acbrings_joy(Sugar)",
            "negation": true
        },
        {
            "id": 6,
            "subject": "Sugar",
            "text": "Sugar gets a massage.",
            "fol": "p_6(Sugar)",
            "str_fol": "gets_massage(Sugar)",
            "negation": false
        },
        {
            "id": 7,
            "subject": "Sugar",
            "text": "Sugar does not run free.",
            "fol": "\u00acp_15(Sugar)",
            "str_fol": "\u00acruns_free(Sugar)",
            "negation": true
        },
        {
            "id": 8,
            "subject": "Sugar",
            "text": "Sugar does not feel calm.",
            "fol": "\u00acp_14(Sugar)",
            "str_fol": "\u00acfeels_calm(Sugar)",
            "negation": true
        },
        {
            "id": 9,
            "subject": "Sugar",
            "text": "Sugar is not loved.",
            "fol": "\u00acp_13(Sugar)",
            "str_fol": "\u00acis_loved(Sugar)",
            "negation": true
        },
        {
            "id": 10,
            "subject": "Sugar",
            "text": "Sugar does not inspire others.",
            "fol": "\u00acp_12(Sugar)",
            "str_fol": "\u00acinspires_others(Sugar)",
            "negation": true
        },
        {
            "id": 11,
            "subject": "Sugar",
            "text": "Sugar gets regular exercise.",
            "fol": "p_9(Sugar)",
            "str_fol": "gets_regular_exercise(Sugar)",
            "negation": false
        },
        {
            "id": 12,
            "subject": "Sugar",
            "text": "Sugar does not live a happy life.",
            "fol": "\u00acp_11(Sugar)",
            "str_fol": "\u00aclives_happy_life(Sugar)",
            "negation": true
        },
        {
            "id": 13,
            "subject": "Sugar",
            "text": "Sugar does not stay healthy.",
            "fol": "\u00acp_10(Sugar)",
            "str_fol": "\u00acstays_healthy(Sugar)",
            "negation": true
        },
        {
            "id": 14,
            "subject": "Sugar",
            "text": "Sugar does not have a good trainer.",
            "fol": "\u00acp_7(Sugar)",
            "str_fol": "\u00achas_a_good_trainer(Sugar)",
            "negation": true
        },
        {
            "id": 15,
            "subject": "Sugar",
            "text": "Sugar receives proper care.",
            "fol": "p_8(Sugar)",
            "str_fol": "receives_proper_care(Sugar)",
            "negation": false
        }
    ],
    "context_facts": [
        {
            "id": 6,
            "subject": "Sugar",
            "text": "Sugar gets a massage.",
            "fol": "p_6(Sugar)",
            "str_fol": "gets_massage(Sugar)",
            "negation": false
        },
        {
            "id": 5,
            "subject": "Sugar",
            "text": "Sugar does not bring joy to others.",
            "fol": "\u00acp_5(Sugar)",
            "str_fol": "\u00acbrings_joy(Sugar)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Sugar",
            "text": "Sugar gets affection.",
            "fol": "p_4(Sugar)",
            "str_fol": "gets_affection(Sugar)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Sugar",
            "text": "Sugar does not have free range to roam.",
            "fol": "\u00acp_2(Sugar)",
            "str_fol": "\u00achas_free_range(Sugar)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Sugar",
            "text": "Sugar does not have a gentle nature.",
            "fol": "\u00acp_3(Sugar)",
            "str_fol": "\u00achas_gentle_nature(Sugar)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Sugar",
            "text": "Sugar does not eat nutritious food.",
            "fol": "\u00acp_1(Sugar)",
            "str_fol": "\u00aceats_nutritious_food(Sugar)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Sugar",
            "text": "Sugar does not thrive despite her equine palsy.",
            "fol": "\u00acp_0(Sugar)",
            "str_fol": "\u00acthrives_despite_disability(Sugar)",
            "negation": true
        }
    ],
    "context_rules": [
        {
            "id": 8,
            "text": "Sugar either runs free or gets a massage, but not both.",
            "fol": "p_15(Sugar) \u2295 p_6(Sugar)",
            "str_fol": "runs_free(Sugar) \u2295 gets_massage(Sugar)"
        },
        {
            "id": 7,
            "text": "If Sugar feels calm, then she either runs free or brings joy to others.",
            "fol": "p_14(Sugar) \u2192 (p_15(Sugar) \u2228 p_5(Sugar))",
            "str_fol": "feels_calm(Sugar) \u2192 (runs_free(Sugar) \u2228 brings_joy(Sugar))"
        },
        {
            "id": 6,
            "text": "If a horse is loved and gets affection, then it feels calm.",
            "fol": "\u2200x ((p_13(x) \u2227 p_4(x)) \u2192 p_14(x))",
            "str_fol": "\u2200x ((is_loved(x) \u2227 gets_affection(x)) \u2192 feels_calm(x))"
        },
        {
            "id": 5,
            "text": "If Sugar inspires others, then she is loved.",
            "fol": "p_12(Sugar) \u2192 p_13(Sugar)",
            "str_fol": "inspires_others(Sugar) \u2192 is_loved(Sugar)"
        },
        {
            "id": 4,
            "text": "Sugar either gets regular exercise as part of her rehabilitation or has free range to roam, but not both due to her condition and training needs.",
            "fol": "p_9(Sugar) \u2295 p_2(Sugar)",
            "str_fol": "gets_regular_exercise(Sugar) \u2295 has_free_range(Sugar)"
        },
        {
            "id": 3,
            "text": "If Sugar lives a happy life or has a gentle nature, then she inspires others.",
            "fol": "(p_11(Sugar) \u2228 p_3(Sugar)) \u2192 p_12(Sugar)",
            "str_fol": "(lives_happy_life(Sugar) \u2228 has_gentle_nature(Sugar)) \u2192 inspires_others(Sugar)"
        },
        {
            "id": 2,
            "text": "Every horse that stays healthy either eats nutritious food or lives a happy life (or both).",
            "fol": "\u2200x (p_10(x) \u2192 (p_1(x) \u2228 p_11(x)))",
            "str_fol": "\u2200x (stays_healthy(x) \u2192 (eats_nutritious_food(x) \u2228 lives_happy_life(x)))"
        },
        {
            "id": 1,
            "text": "If a horse gets regular exercise and has a good trainer, then it stays healthy.",
            "fol": "\u2200x ((p_9(x) \u2227 p_7(x)) \u2192 p_10(x))",
            "str_fol": "\u2200x ((gets_regular_exercise(x) \u2227 has_a_good_trainer(x)) \u2192 stays_healthy(x))"
        },
        {
            "id": 0,
            "text": "For all horses, if a horse has a good trainer and receives proper care, then the horse can thrive despite a disability.",
            "fol": "\u2200x ((p_7(x) \u2227 p_8(x)) \u2192 p_0(x))",
            "str_fol": "\u2200x ((has_a_good_trainer(x) \u2227 receives_proper_care(x)) \u2192 thrives_despite_disability(x))"
        }
    ],
    "context": [
        {
            "id": 6,
            "subject": "Sugar",
            "text": "Sugar gets a massage.",
            "fol": "p_6(Sugar)",
            "str_fol": "gets_massage(Sugar)",
            "negation": false
        },
        {
            "id": 5,
            "subject": "Sugar",
            "text": "Sugar does not bring joy to others.",
            "fol": "\u00acp_5(Sugar)",
            "str_fol": "\u00acbrings_joy(Sugar)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Sugar",
            "text": "Sugar gets affection.",
            "fol": "p_4(Sugar)",
            "str_fol": "gets_affection(Sugar)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Sugar",
            "text": "Sugar does not have free range to roam.",
            "fol": "\u00acp_2(Sugar)",
            "str_fol": "\u00achas_free_range(Sugar)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Sugar",
            "text": "Sugar does not have a gentle nature.",
            "fol": "\u00acp_3(Sugar)",
            "str_fol": "\u00achas_gentle_nature(Sugar)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Sugar",
            "text": "Sugar does not eat nutritious food.",
            "fol": "\u00acp_1(Sugar)",
            "str_fol": "\u00aceats_nutritious_food(Sugar)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Sugar",
            "text": "Sugar does not thrive despite her equine palsy.",
            "fol": "\u00acp_0(Sugar)",
            "str_fol": "\u00acthrives_despite_disability(Sugar)",
            "negation": true
        },
        {
            "id": 8,
            "text": "Sugar either runs free or gets a massage, but not both.",
            "fol": "p_15(Sugar) \u2295 p_6(Sugar)",
            "str_fol": "runs_free(Sugar) \u2295 gets_massage(Sugar)"
        },
        {
            "id": 7,
            "text": "If Sugar feels calm, then she either runs free or brings joy to others.",
            "fol": "p_14(Sugar) \u2192 (p_15(Sugar) \u2228 p_5(Sugar))",
            "str_fol": "feels_calm(Sugar) \u2192 (runs_free(Sugar) \u2228 brings_joy(Sugar))"
        },
        {
            "id": 6,
            "text": "If a horse is loved and gets affection, then it feels calm.",
            "fol": "\u2200x ((p_13(x) \u2227 p_4(x)) \u2192 p_14(x))",
            "str_fol": "\u2200x ((is_loved(x) \u2227 gets_affection(x)) \u2192 feels_calm(x))"
        },
        {
            "id": 5,
            "text": "If Sugar inspires others, then she is loved.",
            "fol": "p_12(Sugar) \u2192 p_13(Sugar)",
            "str_fol": "inspires_others(Sugar) \u2192 is_loved(Sugar)"
        },
        {
            "id": 4,
            "text": "Sugar either gets regular exercise as part of her rehabilitation or has free range to roam, but not both due to her condition and training needs.",
            "fol": "p_9(Sugar) \u2295 p_2(Sugar)",
            "str_fol": "gets_regular_exercise(Sugar) \u2295 has_free_range(Sugar)"
        },
        {
            "id": 3,
            "text": "If Sugar lives a happy life or has a gentle nature, then she inspires others.",
            "fol": "(p_11(Sugar) \u2228 p_3(Sugar)) \u2192 p_12(Sugar)",
            "str_fol": "(lives_happy_life(Sugar) \u2228 has_gentle_nature(Sugar)) \u2192 inspires_others(Sugar)"
        },
        {
            "id": 2,
            "text": "Every horse that stays healthy either eats nutritious food or lives a happy life (or both).",
            "fol": "\u2200x (p_10(x) \u2192 (p_1(x) \u2228 p_11(x)))",
            "str_fol": "\u2200x (stays_healthy(x) \u2192 (eats_nutritious_food(x) \u2228 lives_happy_life(x)))"
        },
        {
            "id": 1,
            "text": "If a horse gets regular exercise and has a good trainer, then it stays healthy.",
            "fol": "\u2200x ((p_9(x) \u2227 p_7(x)) \u2192 p_10(x))",
            "str_fol": "\u2200x ((gets_regular_exercise(x) \u2227 has_a_good_trainer(x)) \u2192 stays_healthy(x))"
        },
        {
            "id": 0,
            "text": "For all horses, if a horse has a good trainer and receives proper care, then the horse can thrive despite a disability.",
            "fol": "\u2200x ((p_7(x) \u2227 p_8(x)) \u2192 p_0(x))",
            "str_fol": "\u2200x ((has_a_good_trainer(x) \u2227 receives_proper_care(x)) \u2192 thrives_despite_disability(x))"
        }
    ],
    "context_fol": "p_6(Sugar)\n\u00acp_5(Sugar)\np_4(Sugar)\n\u00acp_2(Sugar)\n\u00acp_3(Sugar)\n\u00acp_1(Sugar)\n\u00acp_0(Sugar)\np_15(Sugar) \u2295 p_6(Sugar)\np_14(Sugar) \u2192 (p_15(Sugar) \u2228 p_5(Sugar))\n\u2200x ((p_13(x) \u2227 p_4(x)) \u2192 p_14(x))\np_12(Sugar) \u2192 p_13(Sugar)\np_9(Sugar) \u2295 p_2(Sugar)\n(p_11(Sugar) \u2228 p_3(Sugar)) \u2192 p_12(Sugar)\n\u2200x (p_10(x) \u2192 (p_1(x) \u2228 p_11(x)))\n\u2200x ((p_9(x) \u2227 p_7(x)) \u2192 p_10(x))\n\u2200x ((p_7(x) \u2227 p_8(x)) \u2192 p_0(x))",
    "conclusion": {
        "id": 15,
        "subject": "Sugar",
        "text": "Sugar receives proper care.",
        "fol": "p_8(Sugar)",
        "str_fol": "receives_proper_care(Sugar)",
        "negation": false
    },
    "initial_answer": "Uncertain",
    "initial_goal": "p_8(Sugar)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 6,
                    "subject": "Sugar",
                    "text": "Sugar gets a massage.",
                    "fol": "p_6(Sugar)",
                    "str_fol": "gets_massage(Sugar)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 8,
                    "text": "Sugar either runs free or gets a massage, but not both.",
                    "fol": "p_15(Sugar) \u2295 p_6(Sugar)",
                    "str_fol": "runs_free(Sugar) \u2295 gets_massage(Sugar)"
                }
            ],
            "conclusion": {
                "id": 7,
                "subject": "Sugar",
                "text": "Sugar does not run free.",
                "fol": "\u00acp_15(Sugar)",
                "str_fol": "\u00acruns_free(Sugar)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 7,
                    "subject": "Sugar",
                    "text": "Sugar does not run free.",
                    "fol": "\u00acp_15(Sugar)",
                    "str_fol": "\u00acruns_free(Sugar)",
                    "negation": true
                },
                {
                    "id": 5,
                    "subject": "Sugar",
                    "text": "Sugar does not bring joy to others.",
                    "fol": "\u00acp_5(Sugar)",
                    "str_fol": "\u00acbrings_joy(Sugar)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 7,
                    "text": "If Sugar feels calm, then she either runs free or brings joy to others.",
                    "fol": "p_14(Sugar) \u2192 (p_15(Sugar) \u2228 p_5(Sugar))",
                    "str_fol": "feels_calm(Sugar) \u2192 (runs_free(Sugar) \u2228 brings_joy(Sugar))"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Sugar",
                "text": "Sugar does not feel calm.",
                "fol": "\u00acp_14(Sugar)",
                "str_fol": "\u00acfeels_calm(Sugar)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 4,
                    "subject": "Sugar",
                    "text": "Sugar gets affection.",
                    "fol": "p_4(Sugar)",
                    "str_fol": "gets_affection(Sugar)",
                    "negation": false
                },
                {
                    "id": 8,
                    "subject": "Sugar",
                    "text": "Sugar does not feel calm.",
                    "fol": "\u00acp_14(Sugar)",
                    "str_fol": "\u00acfeels_calm(Sugar)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 6,
                    "text": "If a horse is loved and gets affection, then it feels calm.",
                    "fol": "\u2200x ((p_13(x) \u2227 p_4(x)) \u2192 p_14(x))",
                    "str_fol": "\u2200x ((is_loved(x) \u2227 gets_affection(x)) \u2192 feels_calm(x))"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Sugar",
                "text": "Sugar is not loved.",
                "fol": "\u00acp_13(Sugar)",
                "str_fol": "\u00acis_loved(Sugar)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 9,
                    "subject": "Sugar",
                    "text": "Sugar is not loved.",
                    "fol": "\u00acp_13(Sugar)",
                    "str_fol": "\u00acis_loved(Sugar)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "If Sugar inspires others, then she is loved.",
                    "fol": "p_12(Sugar) \u2192 p_13(Sugar)",
                    "str_fol": "inspires_others(Sugar) \u2192 is_loved(Sugar)"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Sugar",
                "text": "Sugar does not inspire others.",
                "fol": "\u00acp_12(Sugar)",
                "str_fol": "\u00acinspires_others(Sugar)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 2,
                    "subject": "Sugar",
                    "text": "Sugar does not have free range to roam.",
                    "fol": "\u00acp_2(Sugar)",
                    "str_fol": "\u00achas_free_range(Sugar)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "Sugar either gets regular exercise as part of her rehabilitation or has free range to roam, but not both due to her condition and training needs.",
                    "fol": "p_9(Sugar) \u2295 p_2(Sugar)",
                    "str_fol": "gets_regular_exercise(Sugar) \u2295 has_free_range(Sugar)"
                }
            ],
            "conclusion": {
                "id": 11,
                "subject": "Sugar",
                "text": "Sugar gets regular exercise.",
                "fol": "p_9(Sugar)",
                "str_fol": "gets_regular_exercise(Sugar)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 3,
                    "subject": "Sugar",
                    "text": "Sugar does not have a gentle nature.",
                    "fol": "\u00acp_3(Sugar)",
                    "str_fol": "\u00achas_gentle_nature(Sugar)",
                    "negation": true
                },
                {
                    "id": 10,
                    "subject": "Sugar",
                    "text": "Sugar does not inspire others.",
                    "fol": "\u00acp_12(Sugar)",
                    "str_fol": "\u00acinspires_others(Sugar)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "If Sugar lives a happy life or has a gentle nature, then she inspires others.",
                    "fol": "(p_11(Sugar) \u2228 p_3(Sugar)) \u2192 p_12(Sugar)",
                    "str_fol": "(lives_happy_life(Sugar) \u2228 has_gentle_nature(Sugar)) \u2192 inspires_others(Sugar)"
                }
            ],
            "conclusion": {
                "id": 12,
                "subject": "Sugar",
                "text": "Sugar does not live a happy life.",
                "fol": "\u00acp_11(Sugar)",
                "str_fol": "\u00aclives_happy_life(Sugar)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 1,
                    "subject": "Sugar",
                    "text": "Sugar does not eat nutritious food.",
                    "fol": "\u00acp_1(Sugar)",
                    "str_fol": "\u00aceats_nutritious_food(Sugar)",
                    "negation": true
                },
                {
                    "id": 12,
                    "subject": "Sugar",
                    "text": "Sugar does not live a happy life.",
                    "fol": "\u00acp_11(Sugar)",
                    "str_fol": "\u00aclives_happy_life(Sugar)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "Every horse that stays healthy either eats nutritious food or lives a happy life (or both).",
                    "fol": "\u2200x (p_10(x) \u2192 (p_1(x) \u2228 p_11(x)))",
                    "str_fol": "\u2200x (stays_healthy(x) \u2192 (eats_nutritious_food(x) \u2228 lives_happy_life(x)))"
                }
            ],
            "conclusion": {
                "id": 13,
                "subject": "Sugar",
                "text": "Sugar does not stay healthy.",
                "fol": "\u00acp_10(Sugar)",
                "str_fol": "\u00acstays_healthy(Sugar)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 11,
                    "subject": "Sugar",
                    "text": "Sugar gets regular exercise.",
                    "fol": "p_9(Sugar)",
                    "str_fol": "gets_regular_exercise(Sugar)",
                    "negation": false
                },
                {
                    "id": 13,
                    "subject": "Sugar",
                    "text": "Sugar does not stay healthy.",
                    "fol": "\u00acp_10(Sugar)",
                    "str_fol": "\u00acstays_healthy(Sugar)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "If a horse gets regular exercise and has a good trainer, then it stays healthy.",
                    "fol": "\u2200x ((p_9(x) \u2227 p_7(x)) \u2192 p_10(x))",
                    "str_fol": "\u2200x ((gets_regular_exercise(x) \u2227 has_a_good_trainer(x)) \u2192 stays_healthy(x))"
                }
            ],
            "conclusion": {
                "id": 14,
                "subject": "Sugar",
                "text": "Sugar does not have a good trainer.",
                "fol": "\u00acp_7(Sugar)",
                "str_fol": "\u00achas_a_good_trainer(Sugar)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 14,
                    "subject": "Sugar",
                    "text": "Sugar does not have a good trainer.",
                    "fol": "\u00acp_7(Sugar)",
                    "str_fol": "\u00achas_a_good_trainer(Sugar)",
                    "negation": true
                },
                {
                    "id": 0,
                    "subject": "Sugar",
                    "text": "Sugar does not thrive despite her equine palsy.",
                    "fol": "\u00acp_0(Sugar)",
                    "str_fol": "\u00acthrives_despite_disability(Sugar)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "For all horses, if a horse has a good trainer and receives proper care, then the horse can thrive despite a disability.",
                    "fol": "\u2200x ((p_7(x) \u2227 p_8(x)) \u2192 p_0(x))",
                    "str_fol": "\u2200x ((has_a_good_trainer(x) \u2227 receives_proper_care(x)) \u2192 thrives_despite_disability(x))"
                }
            ],
            "conclusion": null
        }
    ],
    "proof_trace": null,
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "UNCERTAIN",
            "Edited Assumptions": "p_6(Sugar)\n\u00acp_5(Sugar)\np_4(Sugar)\n\u00acp_2(Sugar)\n\u00acp_3(Sugar)\n\u00acp_1(Sugar)\n\u00acp_0(Sugar)\np_15(Sugar) \u2295 p_6(Sugar)\np_14(Sugar) \u2192 (p_15(Sugar) \u2228 p_5(Sugar))\n\u2200x ((p_13(x) \u2227 p_4(x)) \u2192 p_14(x))\np_12(Sugar) \u2192 p_13(Sugar)\np_9(Sugar) \u2295 p_2(Sugar)\n(p_11(Sugar) \u2228 p_3(Sugar)) \u2192 p_12(Sugar)\n\u2200x (p_10(x) \u2192 (p_1(x) \u2228 p_11(x)))\n\u2200x ((p_9(x) \u2227 p_7(x)) \u2192 p_10(x))\n\u2200x ((p_7(x) \u2227 p_8(x)) \u2192 p_0(x))",
            "Initial Goal": "p_8(Sugar)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_6(Sugar).",
                    "-p_5(Sugar).",
                    "p_4(Sugar).",
                    "-p_2(Sugar).",
                    "-p_3(Sugar).",
                    "-p_1(Sugar).",
                    "-p_0(Sugar).",
                    "(p_15(Sugar) | p_6(Sugar)) & (-p_15(Sugar) | -p_6(Sugar)).",
                    "-p_14(Sugar) | p_15(Sugar) | p_5(Sugar).",
                    "all x (-p_13(x) | -p_4(x) | p_14(x)).",
                    "-p_12(Sugar) | p_13(Sugar).",
                    "(p_9(Sugar) | p_2(Sugar)) & (-p_9(Sugar) | -p_2(Sugar)).",
                    "(-p_11(Sugar) & -p_3(Sugar)) | p_12(Sugar).",
                    "all x (-p_10(x) | p_1(x) | p_11(x)).",
                    "all x (-p_9(x) | -p_7(x) | p_10(x)).",
                    "all x (-p_7(x) | -p_8(x) | p_0(x)).",
                    "-p_9(Sugar) | p_8(Sugar)."
                ],
                "formulas(goals)": [
                    "p_8(Sugar)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "p_9(Sugar) \u2192 p_8(Sugar)"
                ]
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_6(Sugar)\n\u00acp_5(Sugar)\np_4(Sugar)\n\u00acp_2(Sugar)\n\u00acp_3(Sugar)\n\u00acp_1(Sugar)\n\u00acp_0(Sugar)\np_15(Sugar) \u2295 p_6(Sugar)\np_14(Sugar) \u2192 (p_15(Sugar) \u2228 p_5(Sugar))\n\u2200x ((p_13(x) \u2227 p_4(x)) \u2192 p_14(x))\np_12(Sugar) \u2192 p_13(Sugar)\np_9(Sugar) \u2295 p_2(Sugar)\n(p_11(Sugar) \u2228 p_3(Sugar)) \u2192 p_12(Sugar)\n\u2200x (p_10(x) \u2192 (p_1(x) \u2228 p_11(x)))\n\u2200x ((p_9(x) \u2227 p_7(x)) \u2192 p_10(x))\n\u2200x (p_8(x) \u2192 p_0(x))",
            "Initial Goal": "p_8(Sugar)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_6(Sugar)",
                    "-p_5(Sugar)",
                    "p_4(Sugar)",
                    "-p_2(Sugar)",
                    "-p_3(Sugar)",
                    "-p_1(Sugar)",
                    "-p_0(Sugar)",
                    "-(p_15(Sugar) <-> p_6(Sugar))",
                    "p_14(Sugar) -> (p_15(Sugar) | p_5(Sugar))",
                    "all x ((p_13(x) & p_4(x)) -> p_14(x))",
                    "p_12(Sugar) -> p_13(Sugar)",
                    "-(p_9(Sugar) <-> p_2(Sugar))",
                    "(p_11(Sugar) | p_3(Sugar)) -> p_12(Sugar)",
                    "all x (p_10(x) -> (p_1(x) | p_11(x)))",
                    "all x ((p_9(x) & p_7(x)) -> p_10(x))",
                    "all x (p_8(x) -> p_0(x))"
                ],
                "formulas(goals)": [
                    "-p_8(Sugar)"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "p_6(Sugar)"
                ],
                "removed_rules": [
                    "\u2200x ((p_7(x) \u2227 p_8(x)) \u2192 p_0(x))"
                ],
                "added_facts": [
                    "\u00acp_6(Sugar)"
                ],
                "added_rules": [
                    "\u2200x (p_8(x) \u2192 p_0(x))"
                ]
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_6(Sugar)\n\u00acp_5(Sugar)\np_4(Sugar)\n\u00acp_2(Sugar)\n\u00acp_3(Sugar)\n\u00acp_1(Sugar)\n\u00acp_0(Sugar)\np_15(Sugar) \u2295 p_6(Sugar)\n(p_14(Sugar) \u2227 \u00acp_15(Sugar)) \u2192 p_5(Sugar)\n\u2200x (p_13(x) \u2192 (p_4(x) \u2192 p_14(x)))\np_12(Sugar) \u2192 p_13(Sugar)\np_9(Sugar) \u2295 p_2(Sugar)\n\u00acp_12(Sugar) \u2192 (\u00acp_11(Sugar) \u2227 \u00acp_3(Sugar))\n\u2200x (p_10(x) \u2192 (p_1(x) \u2228 p_11(x)))\n\u2200x ((p_9(x) \u2227 p_7(x)) \u2192 p_10(x))\n\u2200x (p_8(x) \u2192 p_0(x))\n(p_11(Sugar) \u2228 p_3(Sugar)) \u2192 p_13(Sugar)",
            "Initial Goal": "p_8(Sugar)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_6(Sugar)",
                    "-p_5(Sugar)",
                    "p_4(Sugar)",
                    "-p_2(Sugar)",
                    "-p_3(Sugar)",
                    "-p_1(Sugar)",
                    "-p_0(Sugar)",
                    "-(p_15(Sugar) <-> p_6(Sugar))",
                    "(p_14(Sugar) & -p_15(Sugar)) -> p_5(Sugar)",
                    "all x (p_13(x) -> (p_4(x) -> p_14(x)))",
                    "p_12(Sugar) -> p_13(Sugar)",
                    "-(p_9(Sugar) <-> p_2(Sugar))",
                    "-p_12(Sugar) -> (-p_11(Sugar) & -p_3(Sugar))",
                    "all x (p_10(x) -> (p_1(x) | p_11(x)))",
                    "all x ((p_9(x) & p_7(x)) -> p_10(x))",
                    "all x (p_8(x) -> p_0(x))",
                    "(p_11(Sugar) | p_3(Sugar)) -> p_13(Sugar)"
                ],
                "formulas(goals)": [
                    "-p_8(Sugar)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_14(Sugar) \u2192 (p_15(Sugar) \u2228 p_5(Sugar))",
                    "\u2200x ((p_13(x) \u2227 p_4(x)) \u2192 p_14(x))",
                    "(p_11(Sugar) \u2228 p_3(Sugar)) \u2192 p_12(Sugar)"
                ],
                "added_facts": [],
                "added_rules": [
                    "(p_14(Sugar) \u2227 \u00acp_15(Sugar)) \u2192 p_5(Sugar)",
                    "\u2200x (p_13(x) \u2192 (p_4(x) \u2192 p_14(x)))",
                    "\u00acp_12(Sugar) \u2192 (\u00acp_11(Sugar) \u2227 \u00acp_3(Sugar))",
                    "(p_11(Sugar) \u2228 p_3(Sugar)) \u2192 p_13(Sugar)"
                ]
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_6(Sugar)\n\u00acp_5(Sugar)\np_4(Sugar)\n\u00acp_2(Sugar)\n\u00acp_3(Sugar)\n\u00acp_1(Sugar)\n\u00acp_0(Sugar)\np_15(Sugar) \u2295 p_6(Sugar)\n(p_14(Sugar) \u2227 \u00acp_15(Sugar)) \u2192 p_5(Sugar)\n\u2200x (p_13(x) \u2192 (p_4(x) \u2192 p_14(x)))\np_12(Sugar) \u2192 p_13(Sugar)\np_9(Sugar) \u2295 p_2(Sugar)\n\u00acp_12(Sugar) \u2192 (\u00acp_11(Sugar) \u2227 \u00acp_3(Sugar))\n\u2200x (p_10(x) \u2192 (p_1(x) \u2228 p_11(x)))\n\u2200x ((p_9(x) \u2227 p_7(x)) \u2192 p_10(x))\n(p_11(Sugar) \u2228 p_3(Sugar)) \u2192 p_13(Sugar)\np_4(Sugar) \u2192 p_8(Sugar)",
            "Initial Goal": "p_8(Sugar)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_6(Sugar)",
                    "-p_5(Sugar)",
                    "p_4(Sugar)",
                    "-p_2(Sugar)",
                    "-p_3(Sugar)",
                    "-p_1(Sugar)",
                    "-p_0(Sugar)",
                    "-(p_15(Sugar) <-> p_6(Sugar))",
                    "(p_14(Sugar) & -p_15(Sugar)) -> p_5(Sugar)",
                    "all x (p_13(x) -> (p_4(x) -> p_14(x)))",
                    "p_12(Sugar) -> p_13(Sugar)",
                    "-(p_9(Sugar) <-> p_2(Sugar))",
                    "-p_12(Sugar) -> (-p_11(Sugar) & -p_3(Sugar))",
                    "all x (p_10(x) -> (p_1(x) | p_11(x)))",
                    "all x ((p_9(x) & p_7(x)) -> p_10(x))",
                    "(p_11(Sugar) | p_3(Sugar)) -> p_13(Sugar)",
                    "p_4(Sugar) -> p_8(Sugar)"
                ],
                "formulas(goals)": [
                    "p_8(Sugar)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u2200x (p_8(x) \u2192 p_0(x))"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_4(Sugar) \u2192 p_8(Sugar)"
                ]
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_6(Sugar)\n\u00acp_5(Sugar)\np_4(Sugar)\n\u00acp_2(Sugar)\n\u00acp_3(Sugar)\n\u00acp_1(Sugar)\n\u00acp_0(Sugar)\np_15(Sugar) \u2295 p_6(Sugar)\n(p_14(Sugar) \u2227 \u00acp_15(Sugar)) \u2192 p_5(Sugar)\n\u2200x (p_13(x) \u2192 (p_4(x) \u2192 p_14(x)))\np_12(Sugar) \u2192 p_13(Sugar)\np_9(Sugar) \u2295 p_2(Sugar)\n\u00acp_12(Sugar) \u2192 (\u00acp_11(Sugar) \u2227 \u00acp_3(Sugar))\n\u2200x (p_10(x) \u2192 (p_1(x) \u2228 p_11(x)))\n\u2200x ((p_9(x) \u2227 p_7(x)) \u2192 p_10(x))\n(p_11(Sugar) \u2228 p_3(Sugar)) \u2192 p_13(Sugar)\n(p_4(Sugar) \u2227 \u00acp_13(Sugar)) \u2192 p_8(Sugar)\np_13(Sugar) \u2192 \u00acp_8(Sugar)\np_7(Sugar)",
            "Initial Goal": "p_8(Sugar)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_6(Sugar).",
                    "-p_5(Sugar).",
                    "p_4(Sugar).",
                    "-p_2(Sugar).",
                    "-p_3(Sugar).",
                    "-p_1(Sugar).",
                    "-p_0(Sugar).",
                    "-(p_15(Sugar) <-> p_6(Sugar)).",
                    "(p_14(Sugar) & -p_15(Sugar)) -> p_5(Sugar).",
                    "all x (p_13(x) -> (p_4(x) -> p_14(x))).",
                    "p_12(Sugar) -> p_13(Sugar).",
                    "-(p_9(Sugar) <-> p_2(Sugar)).",
                    "-p_12(Sugar) -> (-p_11(Sugar) & -p_3(Sugar)).",
                    "all x (p_10(x) -> (p_1(x) | p_11(x))).",
                    "all x ((p_9(x) & p_7(x)) -> p_10(x)).",
                    "(p_11(Sugar) | p_3(Sugar)) -> p_13(Sugar).",
                    "(p_4(Sugar) & -p_13(Sugar)) -> p_8(Sugar).",
                    "p_13(Sugar) -> -p_8(Sugar).",
                    "p_7(Sugar)."
                ],
                "formulas(goals)": [
                    "-p_8(Sugar)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_4(Sugar) \u2192 p_8(Sugar)"
                ],
                "added_facts": [
                    "p_7(Sugar)"
                ],
                "added_rules": [
                    "(p_4(Sugar) \u2227 \u00acp_13(Sugar)) \u2192 p_8(Sugar)",
                    "p_13(Sugar) \u2192 \u00acp_8(Sugar)"
                ]
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_6(Sugar)\n\u00acp_5(Sugar)\np_4(Sugar)\n\u00acp_2(Sugar)\n\u00acp_3(Sugar)\n\u00acp_1(Sugar)\n\u00acp_0(Sugar)\np_15(Sugar) \u2295 p_6(Sugar)\n(p_14(Sugar) \u2227 \u00acp_15(Sugar)) \u2192 p_5(Sugar)\n\u2200x ((p_13(x) \u2227 p_4(x)) \u2192 p_14(x))\np_12(Sugar) \u2192 p_13(Sugar)\np_9(Sugar) \u2295 p_2(Sugar)\n\u00acp_12(Sugar) \u2192 (\u00acp_11(Sugar) \u2227 \u00acp_3(Sugar))\n\u2200x (p_10(x) \u2192 (p_1(x) \u2228 p_11(x)))\n\u2200x ((p_9(x) \u2227 p_7(x)) \u2192 p_10(x))\n(p_11(Sugar) \u2228 p_3(Sugar)) \u2192 p_13(Sugar)\n(p_4(Sugar) \u2227 \u00acp_13(Sugar)) \u2192 p_8(Sugar)\np_13(Sugar) \u2192 \u00acp_8(Sugar)\np_7(Sugar)\np_15(Sugar)\np_12(Sugar)",
            "Initial Goal": "p_8(Sugar)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_6(Sugar)",
                    "-p_5(Sugar)",
                    "p_4(Sugar)",
                    "-p_2(Sugar)",
                    "-p_3(Sugar)",
                    "-p_1(Sugar)",
                    "-p_0(Sugar)",
                    "-(p_15(Sugar) <-> p_6(Sugar))",
                    "(p_14(Sugar) & -p_15(Sugar)) -> p_5(Sugar)",
                    "all x ((p_13(x) & p_4(x)) -> p_14(x))",
                    "p_12(Sugar) -> p_13(Sugar)",
                    "-(p_9(Sugar) <-> p_2(Sugar))",
                    "-p_12(Sugar) -> (-p_11(Sugar) & -p_3(Sugar))",
                    "all x (p_10(x) -> (p_1(x) | p_11(x)))",
                    "all x ((p_9(x) & p_7(x)) -> p_10(x))",
                    "(p_11(Sugar) | p_3(Sugar)) -> p_13(Sugar)",
                    "(p_4(Sugar) & -p_13(Sugar)) -> p_8(Sugar)",
                    "p_13(Sugar) -> -p_8(Sugar)",
                    "p_7(Sugar)",
                    "p_15(Sugar)",
                    "p_12(Sugar)"
                ],
                "formulas(goals)": [
                    "-p_8(Sugar)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u2200x (p_13(x) \u2192 (p_4(x) \u2192 p_14(x)))"
                ],
                "added_facts": [
                    "p_15(Sugar)",
                    "p_12(Sugar)"
                ],
                "added_rules": [
                    "\u2200x ((p_13(x) \u2227 p_4(x)) \u2192 p_14(x))"
                ]
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_6(Sugar)\n\u00acp_5(Sugar)\np_4(Sugar)\n\u00acp_2(Sugar)\n\u00acp_3(Sugar)\n\u00acp_1(Sugar)\n\u00acp_0(Sugar)\np_15(Sugar) \u2295 p_6(Sugar)\n(p_14(Sugar) \u2227 \u00acp_15(Sugar)) \u2192 p_5(Sugar)\n\u2200x ((p_13(x) \u2227 p_4(x)) \u2192 p_14(x))\np_12(Sugar) \u2192 p_13(Sugar)\np_9(Sugar) \u2295 p_2(Sugar)\n\u00acp_12(Sugar) \u2192 (\u00acp_11(Sugar) \u2227 \u00acp_3(Sugar))\n\u2200x (p_10(x) \u2192 (p_1(x) \u2228 p_11(x)))\n\u2200x ((p_9(x) \u2227 p_7(x)) \u2192 p_10(x))\n(p_11(Sugar) \u2228 p_3(Sugar)) \u2192 p_13(Sugar)\n(p_4(Sugar) \u2227 \u00acp_13(Sugar)) \u2192 p_8(Sugar)\np_13(Sugar) \u2192 \u00acp_8(Sugar)\np_7(Sugar)\np_15(Sugar)\np_12(Sugar)\np_13(Sugar)\n\u00acp_5(Sugar) \u2192 (\u00acp_14(Sugar) \u2228 p_15(Sugar))\np_13(Sugar) \u2192 (p_13(Sugar) \u2228 p_1(Sugar))\np_12(Sugar) \u2192 (p_13(Sugar) \u2227 p_12(Sugar))\n\u2200x (\u00acp_10(x) \u2192 (\u00acp_9(x) \u2228 \u00acp_7(x)))\n(p_15(Sugar) \u2228 p_6(Sugar)) \u2227 (\u00acp_15(Sugar) \u2228 \u00acp_6(Sugar))",
            "Initial Goal": "p_8(Sugar)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_6(Sugar)",
                    "-p_5(Sugar)",
                    "p_4(Sugar)",
                    "-p_2(Sugar)",
                    "-p_3(Sugar)",
                    "-p_1(Sugar)",
                    "-p_0(Sugar)",
                    "-(p_15(Sugar) <-> p_6(Sugar))",
                    "(p_14(Sugar) & -p_15(Sugar)) -> p_5(Sugar)",
                    "all x ((p_13(x) & p_4(x)) -> p_14(x))",
                    "p_12(Sugar) -> p_13(Sugar)",
                    "-(p_9(Sugar) <-> p_2(Sugar))",
                    "-p_12(Sugar) -> (-p_11(Sugar) & -p_3(Sugar))",
                    "all x (p_10(x) -> (p_1(x) | p_11(x)))",
                    "all x ((p_9(x) & p_7(x)) -> p_10(x))",
                    "(p_11(Sugar) | p_3(Sugar)) -> p_13(Sugar)",
                    "(p_4(Sugar) & -p_13(Sugar)) -> p_8(Sugar)",
                    "p_13(Sugar) -> -p_8(Sugar)",
                    "p_7(Sugar)",
                    "p_15(Sugar)",
                    "p_12(Sugar)",
                    "p_13(Sugar)",
                    "-p_5(Sugar) -> (-p_14(Sugar) | p_15(Sugar))",
                    "p_13(Sugar) -> (p_13(Sugar) | p_1(Sugar))",
                    "p_12(Sugar) -> (p_13(Sugar) & p_12(Sugar))",
                    "all x (-p_10(x) -> (-p_9(x) | -p_7(x)))",
                    "(p_15(Sugar) | p_6(Sugar)) & (-p_15(Sugar) | -p_6(Sugar))"
                ],
                "formulas(goals)": [
                    "-p_8(Sugar)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_13(Sugar)"
                ],
                "added_rules": [
                    "\u00acp_5(Sugar) \u2192 (\u00acp_14(Sugar) \u2228 p_15(Sugar))",
                    "p_13(Sugar) \u2192 (p_13(Sugar) \u2228 p_1(Sugar))",
                    "p_12(Sugar) \u2192 (p_13(Sugar) \u2227 p_12(Sugar))",
                    "\u2200x (\u00acp_10(x) \u2192 (\u00acp_9(x) \u2228 \u00acp_7(x)))",
                    "(p_15(Sugar) \u2228 p_6(Sugar)) \u2227 (\u00acp_15(Sugar) \u2228 \u00acp_6(Sugar))"
                ]
            }
        }
    ]
}