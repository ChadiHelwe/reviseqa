{
    "background_story": "In a small, lush meadow, there lived a peculiar beetle named Dream. Unlike other beetles that fed on leaves or pollen, Dream was carpophagous, having a unique appetite for fruit. She spent her days flitting from tree to tree, sampling the ripest, juiciest fruits the meadow had to offer. Dream's favorite haunt was an ancient apple orchard, where the trees bore the sweetest, most succulent apples she had ever tasted. As she fed, she helped spread seeds, contributing to the meadow's biodiversity. The other insects looked up to Dream, not just for her exotic diet, but for her role in maintaining the delicate balance of their ecosystem. Dream's love for fruit made her a vital, albeit small, part of the meadow's vibrant tapestry.",
    "predicates": [
        {
            "id": 0,
            "name": "visits_trees"
        },
        {
            "id": 1,
            "name": "makes_honey"
        },
        {
            "id": 2,
            "name": "feeds_on_nectar"
        },
        {
            "id": 3,
            "name": "maintains_balance"
        },
        {
            "id": 4,
            "name": "eats_leaves"
        },
        {
            "id": 5,
            "name": "eats_fruits"
        },
        {
            "id": 6,
            "name": "pollinates_flowers"
        },
        {
            "id": 7,
            "name": "spreads_seeds"
        },
        {
            "id": 8,
            "name": "carries_pollen"
        },
        {
            "id": 9,
            "name": "lays_eggs"
        },
        {
            "id": 10,
            "name": "is_beneficial"
        },
        {
            "id": 11,
            "name": "lives_meadow"
        },
        {
            "id": 12,
            "name": "drinks_dew"
        },
        {
            "id": 13,
            "name": "collects_nectar"
        },
        {
            "id": 14,
            "name": "disperses_spores"
        },
        {
            "id": 15,
            "name": "sows_plants"
        },
        {
            "id": 16,
            "name": "sips_nectar"
        },
        {
            "id": 17,
            "name": "gathers_dew"
        },
        {
            "id": 18,
            "name": "is_carpophagous"
        },
        {
            "id": 19,
            "name": "has_unique_role"
        },
        {
            "id": 20,
            "name": "unique_appetite"
        },
        {
            "id": 21,
            "name": "contributes_ecosystem"
        }
    ],
    "subject_name": "Dream",
    "subject_category": "insect",
    "keyword": "carpophagous",
    "all_facts": [
        {
            "id": 0,
            "subject": "Dream",
            "text": "Dream visits trees.",
            "fol": "p_0(Dream)",
            "str_fol": "visits_trees(Dream)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Dream",
            "text": "Dream does not make honey.",
            "fol": "\u00acp_1(Dream)",
            "str_fol": "\u00acmakes_honey(Dream)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Dream",
            "text": "Dream does not feed on nectar.",
            "fol": "\u00acp_2(Dream)",
            "str_fol": "\u00acfeeds_on_nectar(Dream)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Dream",
            "text": "Dream does not maintain the ecosystem balance.",
            "fol": "\u00acp_3(Dream)",
            "str_fol": "\u00acmaintains_balance(Dream)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Dream",
            "text": "Dream is not beneficial.",
            "fol": "\u00acp_10(Dream)",
            "str_fol": "\u00acis_beneficial(Dream)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Dream",
            "text": "Dream does not lay eggs.",
            "fol": "\u00acp_9(Dream)",
            "str_fol": "\u00aclays_eggs(Dream)",
            "negation": true
        },
        {
            "id": 6,
            "subject": "Dream",
            "text": "Dream carries pollen.",
            "fol": "p_8(Dream)",
            "str_fol": "carries_pollen(Dream)",
            "negation": false
        },
        {
            "id": 7,
            "subject": "Dream",
            "text": "Dream spreads seeds.",
            "fol": "p_7(Dream)",
            "str_fol": "spreads_seeds(Dream)",
            "negation": false
        },
        {
            "id": 8,
            "subject": "Dream",
            "text": "Dream does not pollinate flowers.",
            "fol": "\u00acp_6(Dream)",
            "str_fol": "\u00acpollinates_flowers(Dream)",
            "negation": true
        },
        {
            "id": 9,
            "subject": "Dream",
            "text": "Dream eats leaves.",
            "fol": "p_4(Dream)",
            "str_fol": "eats_leaves(Dream)",
            "negation": false
        },
        {
            "id": 10,
            "subject": "Dream",
            "text": "Dream eats fruits.",
            "fol": "p_5(Dream)",
            "str_fol": "eats_fruits(Dream)",
            "negation": false
        }
    ],
    "context_facts": [
        {
            "id": 2,
            "subject": "Dream",
            "text": "Dream does not feed on nectar.",
            "fol": "\u00acp_2(Dream)",
            "str_fol": "\u00acfeeds_on_nectar(Dream)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Dream",
            "text": "Dream does not maintain the ecosystem balance.",
            "fol": "\u00acp_3(Dream)",
            "str_fol": "\u00acmaintains_balance(Dream)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Dream",
            "text": "Dream does not make honey.",
            "fol": "\u00acp_1(Dream)",
            "str_fol": "\u00acmakes_honey(Dream)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Dream",
            "text": "Dream visits trees.",
            "fol": "p_0(Dream)",
            "str_fol": "visits_trees(Dream)",
            "negation": false
        }
    ],
    "context_rules": [
        {
            "id": 6,
            "text": "If Dream is beneficial, then she either feeds on nectar or maintains the ecosystem balance.",
            "fol": "p_10(Dream) \u2192 (p_2(Dream) \u2228 p_3(Dream))",
            "str_fol": "is_beneficial(Dream) \u2192 (feeds_on_nectar(Dream) \u2228 maintains_balance(Dream))"
        },
        {
            "id": 5,
            "text": "If Dream either lays eggs or makes honey (but not both), then she is beneficial.",
            "fol": "(p_9(Dream) \u2295 p_1(Dream)) \u2192 p_10(Dream)",
            "str_fol": "(lays_eggs(Dream) \u2295 makes_honey(Dream)) \u2192 is_beneficial(Dream)"
        },
        {
            "id": 4,
            "text": "Dream either lays eggs or carries pollen, but not both.",
            "fol": "p_9(Dream) \u2295 p_8(Dream)",
            "str_fol": "lays_eggs(Dream) \u2295 carries_pollen(Dream)"
        },
        {
            "id": 3,
            "text": "If Dream visits trees and carries pollen, then she spreads seeds.",
            "fol": "(p_0(Dream) \u2227 p_8(Dream)) \u2192 p_7(Dream)",
            "str_fol": "(visits_trees(Dream) \u2227 carries_pollen(Dream)) \u2192 spreads_seeds(Dream)"
        },
        {
            "id": 2,
            "text": "Dream either pollinates flowers or spreads seeds, but not both.",
            "fol": "p_6(Dream) \u2295 p_7(Dream)",
            "str_fol": "pollinates_flowers(Dream) \u2295 spreads_seeds(Dream)"
        },
        {
            "id": 1,
            "text": "Dream either pollinates flowers or does not eat leaves.",
            "fol": "p_6(Dream) \u2295 p_4(Dream)",
            "str_fol": "pollinates_flowers(Dream) \u2295 eats_leaves(Dream)"
        },
        {
            "id": 0,
            "text": "Dream either eats leaves or eats fruits, but not both.",
            "fol": "p_4(Dream) \u2295 p_5(Dream)",
            "str_fol": "eats_leaves(Dream) \u2295 eats_fruits(Dream)"
        }
    ],
    "context": [
        {
            "id": 2,
            "subject": "Dream",
            "text": "Dream does not feed on nectar.",
            "fol": "\u00acp_2(Dream)",
            "str_fol": "\u00acfeeds_on_nectar(Dream)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Dream",
            "text": "Dream does not maintain the ecosystem balance.",
            "fol": "\u00acp_3(Dream)",
            "str_fol": "\u00acmaintains_balance(Dream)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Dream",
            "text": "Dream does not make honey.",
            "fol": "\u00acp_1(Dream)",
            "str_fol": "\u00acmakes_honey(Dream)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Dream",
            "text": "Dream visits trees.",
            "fol": "p_0(Dream)",
            "str_fol": "visits_trees(Dream)",
            "negation": false
        },
        {
            "id": 6,
            "text": "If Dream is beneficial, then she either feeds on nectar or maintains the ecosystem balance.",
            "fol": "p_10(Dream) \u2192 (p_2(Dream) \u2228 p_3(Dream))",
            "str_fol": "is_beneficial(Dream) \u2192 (feeds_on_nectar(Dream) \u2228 maintains_balance(Dream))"
        },
        {
            "id": 5,
            "text": "If Dream either lays eggs or makes honey (but not both), then she is beneficial.",
            "fol": "(p_9(Dream) \u2295 p_1(Dream)) \u2192 p_10(Dream)",
            "str_fol": "(lays_eggs(Dream) \u2295 makes_honey(Dream)) \u2192 is_beneficial(Dream)"
        },
        {
            "id": 4,
            "text": "Dream either lays eggs or carries pollen, but not both.",
            "fol": "p_9(Dream) \u2295 p_8(Dream)",
            "str_fol": "lays_eggs(Dream) \u2295 carries_pollen(Dream)"
        },
        {
            "id": 3,
            "text": "If Dream visits trees and carries pollen, then she spreads seeds.",
            "fol": "(p_0(Dream) \u2227 p_8(Dream)) \u2192 p_7(Dream)",
            "str_fol": "(visits_trees(Dream) \u2227 carries_pollen(Dream)) \u2192 spreads_seeds(Dream)"
        },
        {
            "id": 2,
            "text": "Dream either pollinates flowers or spreads seeds, but not both.",
            "fol": "p_6(Dream) \u2295 p_7(Dream)",
            "str_fol": "pollinates_flowers(Dream) \u2295 spreads_seeds(Dream)"
        },
        {
            "id": 1,
            "text": "Dream either pollinates flowers or does not eat leaves.",
            "fol": "p_6(Dream) \u2295 p_4(Dream)",
            "str_fol": "pollinates_flowers(Dream) \u2295 eats_leaves(Dream)"
        },
        {
            "id": 0,
            "text": "Dream either eats leaves or eats fruits, but not both.",
            "fol": "p_4(Dream) \u2295 p_5(Dream)",
            "str_fol": "eats_leaves(Dream) \u2295 eats_fruits(Dream)"
        }
    ],
    "context_fol": "\u00acp_2(Dream)\n\u00acp_3(Dream)\n\u00acp_1(Dream)\np_0(Dream)\np_10(Dream) \u2192 (p_2(Dream) \u2228 p_3(Dream))\n(p_9(Dream) \u2295 p_1(Dream)) \u2192 p_10(Dream)\np_9(Dream) \u2295 p_8(Dream)\n(p_0(Dream) \u2227 p_8(Dream)) \u2192 p_7(Dream)\np_6(Dream) \u2295 p_7(Dream)\np_6(Dream) \u2295 p_4(Dream)\np_4(Dream) \u2295 p_5(Dream)",
    "conclusion": {
        "id": 10,
        "subject": "Dream",
        "text": "Dream eats fruits.",
        "fol": "p_5(Dream)",
        "str_fol": "eats_fruits(Dream)",
        "negation": false
    },
    "initial_answer": "False",
    "initial_goal": "p_5(Dream)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 2,
                    "subject": "Dream",
                    "text": "Dream does not feed on nectar.",
                    "fol": "\u00acp_2(Dream)",
                    "str_fol": "\u00acfeeds_on_nectar(Dream)",
                    "negation": true
                },
                {
                    "id": 3,
                    "subject": "Dream",
                    "text": "Dream does not maintain the ecosystem balance.",
                    "fol": "\u00acp_3(Dream)",
                    "str_fol": "\u00acmaintains_balance(Dream)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 6,
                    "text": "If Dream is beneficial, then she either feeds on nectar or maintains the ecosystem balance.",
                    "fol": "p_10(Dream) \u2192 (p_2(Dream) \u2228 p_3(Dream))",
                    "str_fol": "is_beneficial(Dream) \u2192 (feeds_on_nectar(Dream) \u2228 maintains_balance(Dream))"
                }
            ],
            "conclusion": {
                "id": 4,
                "subject": "Dream",
                "text": "Dream is not beneficial.",
                "fol": "\u00acp_10(Dream)",
                "str_fol": "\u00acis_beneficial(Dream)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 1,
                    "subject": "Dream",
                    "text": "Dream does not make honey.",
                    "fol": "\u00acp_1(Dream)",
                    "str_fol": "\u00acmakes_honey(Dream)",
                    "negation": true
                },
                {
                    "id": 4,
                    "subject": "Dream",
                    "text": "Dream is not beneficial.",
                    "fol": "\u00acp_10(Dream)",
                    "str_fol": "\u00acis_beneficial(Dream)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "If Dream either lays eggs or makes honey (but not both), then she is beneficial.",
                    "fol": "(p_9(Dream) \u2295 p_1(Dream)) \u2192 p_10(Dream)",
                    "str_fol": "(lays_eggs(Dream) \u2295 makes_honey(Dream)) \u2192 is_beneficial(Dream)"
                }
            ],
            "conclusion": {
                "id": 5,
                "subject": "Dream",
                "text": "Dream does not lay eggs.",
                "fol": "\u00acp_9(Dream)",
                "str_fol": "\u00aclays_eggs(Dream)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 5,
                    "subject": "Dream",
                    "text": "Dream does not lay eggs.",
                    "fol": "\u00acp_9(Dream)",
                    "str_fol": "\u00aclays_eggs(Dream)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "Dream either lays eggs or carries pollen, but not both.",
                    "fol": "p_9(Dream) \u2295 p_8(Dream)",
                    "str_fol": "lays_eggs(Dream) \u2295 carries_pollen(Dream)"
                }
            ],
            "conclusion": {
                "id": 6,
                "subject": "Dream",
                "text": "Dream carries pollen.",
                "fol": "p_8(Dream)",
                "str_fol": "carries_pollen(Dream)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 0,
                    "subject": "Dream",
                    "text": "Dream visits trees.",
                    "fol": "p_0(Dream)",
                    "str_fol": "visits_trees(Dream)",
                    "negation": false
                },
                {
                    "id": 6,
                    "subject": "Dream",
                    "text": "Dream carries pollen.",
                    "fol": "p_8(Dream)",
                    "str_fol": "carries_pollen(Dream)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "If Dream visits trees and carries pollen, then she spreads seeds.",
                    "fol": "(p_0(Dream) \u2227 p_8(Dream)) \u2192 p_7(Dream)",
                    "str_fol": "(visits_trees(Dream) \u2227 carries_pollen(Dream)) \u2192 spreads_seeds(Dream)"
                }
            ],
            "conclusion": {
                "id": 7,
                "subject": "Dream",
                "text": "Dream spreads seeds.",
                "fol": "p_7(Dream)",
                "str_fol": "spreads_seeds(Dream)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 7,
                    "subject": "Dream",
                    "text": "Dream spreads seeds.",
                    "fol": "p_7(Dream)",
                    "str_fol": "spreads_seeds(Dream)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "Dream either pollinates flowers or spreads seeds, but not both.",
                    "fol": "p_6(Dream) \u2295 p_7(Dream)",
                    "str_fol": "pollinates_flowers(Dream) \u2295 spreads_seeds(Dream)"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Dream",
                "text": "Dream does not pollinate flowers.",
                "fol": "\u00acp_6(Dream)",
                "str_fol": "\u00acpollinates_flowers(Dream)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 8,
                    "subject": "Dream",
                    "text": "Dream does not pollinate flowers.",
                    "fol": "\u00acp_6(Dream)",
                    "str_fol": "\u00acpollinates_flowers(Dream)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "Dream either pollinates flowers or does not eat leaves.",
                    "fol": "p_6(Dream) \u2295 p_4(Dream)",
                    "str_fol": "pollinates_flowers(Dream) \u2295 eats_leaves(Dream)"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Dream",
                "text": "Dream eats leaves.",
                "fol": "p_4(Dream)",
                "str_fol": "eats_leaves(Dream)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 9,
                    "subject": "Dream",
                    "text": "Dream eats leaves.",
                    "fol": "p_4(Dream)",
                    "str_fol": "eats_leaves(Dream)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "Dream either eats leaves or eats fruits, but not both.",
                    "fol": "p_4(Dream) \u2295 p_5(Dream)",
                    "str_fol": "eats_leaves(Dream) \u2295 eats_fruits(Dream)"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Dream",
                "text": "Dream eats fruits.",
                "fol": "p_5(Dream)",
                "str_fol": "eats_fruits(Dream)",
                "negation": false
            }
        }
    ],
    "proof_trace": "1 p_10(Dream) -> p_2(Dream) | p_3(Dream).  [assumption].\n2 -(p_9(Dream) <-> p_1(Dream)) -> p_10(Dream).  [assumption].\n3 -(p_9(Dream) <-> p_8(Dream)).  [assumption].\n4 p_0(Dream) & p_8(Dream) -> p_7(Dream).  [assumption].\n5 -(p_6(Dream) <-> p_7(Dream)).  [assumption].\n6 -(p_6(Dream) <-> p_4(Dream)).  [assumption].\n7 -(p_4(Dream) <-> p_5(Dream)).  [assumption].\n8 -p_5(Dream).  [goal].\n9 -p_10(Dream) | p_2(Dream) | p_3(Dream).  [clausify(1)].\n10 -p_2(Dream).  [assumption].\n11 -p_10(Dream) | p_3(Dream).  [resolve(9,b,10,a)].\n12 -p_3(Dream).  [assumption].\n13 -p_9(Dream) | p_1(Dream) | p_10(Dream).  [clausify(2)].\n14 -p_1(Dream).  [assumption].\n16 -p_0(Dream) | -p_8(Dream) | p_7(Dream).  [clausify(4)].\n17 p_0(Dream).  [assumption].\n19 p_9(Dream) | p_8(Dream).  [clausify(3)].\n20 -p_9(Dream) | p_10(Dream).  [resolve(13,b,14,a)].\n21 -p_6(Dream) | -p_7(Dream).  [clausify(5)].\n23 p_6(Dream) | p_4(Dream).  [clausify(6)].\n25 -p_4(Dream) | -p_5(Dream).  [clausify(7)].\n27 p_4(Dream) | -p_7(Dream).  [resolve(23,a,21,a)].\n29 -p_7(Dream) | -p_5(Dream).  [resolve(27,a,25,a)].\n30 p_5(Dream).  [deny(8)].\n32 p_10(Dream) | p_8(Dream).  [resolve(20,a,19,a)].\n33 -p_10(Dream).  [resolve(11,b,12,a)].\n34 p_8(Dream).  [resolve(32,a,33,a)].\n35 -p_8(Dream) | p_7(Dream).  [resolve(16,a,17,a)].\n36 p_7(Dream).  [resolve(34,a,35,a)].\n37 -p_7(Dream).  [resolve(29,b,30,a)].\n38 $F.  [resolve(36,a,37,a)].",
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_2(Dream)\n\u00acp_3(Dream)\n\u00acp_1(Dream)\np_0(Dream)\n(\u00acp_2(Dream) \u2227 \u00acp_3(Dream)) \u2192 \u00acp_10(Dream)\n((p_9(Dream) \u2228 p_1(Dream)) \u2227 \u00ac(p_9(Dream) \u2227 p_1(Dream))) \u2192 p_10(Dream)\np_9(Dream) \u2295 p_8(Dream)\n(p_0(Dream) \u2227 p_8(Dream)) \u2192 p_7(Dream)\np_6(Dream) \u2295 p_7(Dream)\np_6(Dream) \u2295 p_4(Dream)\np_4(Dream) \u2295 p_5(Dream)\np_8(Dream)\n\u00acp_9(Dream)\n\u00acp_10(Dream)",
            "Initial Goal": "p_5(Dream)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_2(Dream)",
                    "-p_3(Dream)",
                    "-p_1(Dream)",
                    "p_0(Dream)",
                    "((-p_2(Dream) & -p_3(Dream)) -> -p_10(Dream))",
                    "(((p_9(Dream) | p_1(Dream)) & -(p_9(Dream) & p_1(Dream))) -> p_10(Dream))",
                    "(-(p_9(Dream) <-> p_8(Dream)))",
                    "((p_0(Dream) & p_8(Dream)) -> p_7(Dream))",
                    "(-(p_6(Dream) <-> p_7(Dream)))",
                    "(-(p_6(Dream) <-> p_4(Dream)))",
                    "(-(p_4(Dream) <-> p_5(Dream)))",
                    "p_8(Dream)",
                    "-p_9(Dream)",
                    "-p_10(Dream)"
                ],
                "formulas(goals)": [
                    "-p_5(Dream)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_8(Dream)",
                    "\u00acp_9(Dream)",
                    "\u00acp_10(Dream)"
                ],
                "added_rules": [
                    "(\u00acp_2(Dream) \u2227 \u00acp_3(Dream)) \u2192 \u00acp_10(Dream)",
                    "((p_9(Dream) \u2228 p_1(Dream)) \u2227 \u00ac(p_9(Dream) \u2227 p_1(Dream))) \u2192 p_10(Dream)"
                ]
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_2(Dream)\n\u00acp_3(Dream)\n\u00acp_1(Dream)\np_0(Dream)\n(\u00acp_2(Dream) \u2227 \u00acp_3(Dream)) \u2192 \u00acp_10(Dream)\n((p_9(Dream) \u2228 p_1(Dream)) \u2227 \u00ac(p_9(Dream) \u2227 p_1(Dream))) \u2192 p_10(Dream)\n(p_9(Dream) \u2228 p_8(Dream)) \u2227 \u00ac(p_9(Dream) \u2227 p_8(Dream))\n(p_0(Dream) \u2227 p_8(Dream)) \u2192 p_7(Dream)\n(p_6(Dream) \u2228 p_7(Dream)) \u2227 \u00ac(p_6(Dream) \u2227 p_7(Dream))\n(p_6(Dream) \u2228 p_4(Dream)) \u2227 \u00ac(p_6(Dream) \u2227 p_4(Dream))\n(p_4(Dream) \u2228 p_5(Dream)) \u2227 \u00ac(p_4(Dream) \u2227 p_5(Dream))\np_8(Dream)\n\u00acp_9(Dream)\n\u00acp_10(Dream)\np_10(Dream) \u2192 (p_2(Dream) \u2228 p_3(Dream))\np_7(Dream)\n\u00acp_6(Dream)\np_4(Dream)",
            "Initial Goal": "p_5(Dream)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_2(Dream)",
                    "-p_3(Dream)",
                    "-p_1(Dream)",
                    "p_0(Dream)",
                    "(-p_2(Dream) & -p_3(Dream)) -> -p_10(Dream)",
                    "((p_9(Dream) | p_1(Dream)) & -(p_9(Dream) & p_1(Dream))) -> p_10(Dream)",
                    "(p_9(Dream) | p_8(Dream)) & -(p_9(Dream) & p_8(Dream))",
                    "(p_0(Dream) & p_8(Dream)) -> p_7(Dream)",
                    "(p_6(Dream) | p_7(Dream)) & -(p_6(Dream) & p_7(Dream))",
                    "(p_6(Dream) | p_4(Dream)) & -(p_6(Dream) & p_4(Dream))",
                    "(p_4(Dream) | p_5(Dream)) & -(p_4(Dream) & p_5(Dream))",
                    "p_8(Dream)",
                    "-p_9(Dream)",
                    "-p_10(Dream)",
                    "p_10(Dream) -> (p_2(Dream) | p_3(Dream))",
                    "p_7(Dream)",
                    "-p_6(Dream)",
                    "p_4(Dream)"
                ],
                "formulas(goals)": [
                    "-p_5(Dream)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_7(Dream)",
                    "\u00acp_6(Dream)",
                    "p_4(Dream)"
                ],
                "added_rules": [
                    "p_10(Dream) \u2192 (p_2(Dream) \u2228 p_3(Dream))"
                ]
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_2(Dream)\n\u00acp_3(Dream)\n\u00acp_1(Dream)\np_0(Dream)\n(\u00acp_2(Dream) \u2227 \u00acp_3(Dream)) \u2192 \u00acp_10(Dream)\n((p_9(Dream) \u2228 p_1(Dream)) \u2227 \u00ac(p_9(Dream) \u2227 p_1(Dream))) \u2192 p_10(Dream)\n(p_9(Dream) \u2228 p_8(Dream)) \u2227 \u00ac(p_9(Dream) \u2227 p_8(Dream))\n(p_0(Dream) \u2227 p_8(Dream)) \u2192 p_7(Dream)\n(p_6(Dream) \u2228 p_7(Dream)) \u2227 \u00ac(p_6(Dream) \u2227 p_7(Dream))\n(p_6(Dream) \u2228 p_4(Dream)) \u2227 \u00ac(p_6(Dream) \u2227 p_4(Dream))\n(p_4(Dream) \u2228 p_5(Dream)) \u2227 \u00ac(p_4(Dream) \u2227 p_5(Dream))\np_8(Dream)\n\u00acp_9(Dream)\n\u00acp_10(Dream)\np_10(Dream) \u2192 (p_2(Dream) \u2228 p_3(Dream))\np_7(Dream)\n\u00acp_6(Dream)\np_4(Dream)\n\u00acp_5(Dream)",
            "Initial Goal": "p_5(Dream)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_2(Dream)",
                    "-p_3(Dream)",
                    "-p_1(Dream)",
                    "p_0(Dream)",
                    "(-p_2(Dream) & -p_3(Dream)) -> -p_10(Dream)",
                    "((p_9(Dream) | p_1(Dream)) & -(p_9(Dream) & p_1(Dream))) -> p_10(Dream)",
                    "(p_9(Dream) | p_8(Dream)) & -(p_9(Dream) & p_8(Dream))",
                    "(p_0(Dream) & p_8(Dream)) -> p_7(Dream)",
                    "(p_6(Dream) | p_7(Dream)) & -(p_6(Dream) & p_7(Dream))",
                    "(p_6(Dream) | p_4(Dream)) & -(p_6(Dream) & p_4(Dream))",
                    "(p_4(Dream) | p_5(Dream)) & -(p_4(Dream) & p_5(Dream))",
                    "p_8(Dream)",
                    "-p_9(Dream)",
                    "-p_10(Dream)",
                    "p_10(Dream) -> (p_2(Dream) | p_3(Dream))",
                    "p_7(Dream)",
                    "-p_6(Dream)",
                    "p_4(Dream)",
                    "-p_5(Dream)"
                ],
                "formulas(goals)": [
                    "-p_5(Dream)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "\u00acp_5(Dream)"
                ],
                "added_rules": []
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_2(Dream)\n\u00acp_3(Dream)\n\u00acp_1(Dream)\np_0(Dream)\n(\u00acp_2(Dream) \u2227 \u00acp_3(Dream)) \u2192 \u00acp_10(Dream)\n((p_9(Dream) \u2228 p_1(Dream)) \u2227 \u00ac(p_9(Dream) \u2227 p_1(Dream))) \u2192 p_10(Dream)\n(p_9(Dream) \u2228 p_8(Dream)) \u2227 \u00ac(p_9(Dream) \u2227 p_8(Dream))\n(p_0(Dream) \u2227 p_8(Dream)) \u2192 p_7(Dream)\n(p_6(Dream) \u2228 p_7(Dream)) \u2227 \u00ac(p_6(Dream) \u2227 p_7(Dream))\n(p_6(Dream) \u2228 p_4(Dream)) \u2227 \u00ac(p_6(Dream) \u2227 p_4(Dream))\n(p_4(Dream) \u2228 p_5(Dream)) \u2227 \u00ac(p_4(Dream) \u2227 p_5(Dream))\np_8(Dream)\n\u00acp_9(Dream)\n\u00acp_10(Dream)\np_10(Dream) \u2192 (p_2(Dream) \u2228 p_3(Dream))\np_7(Dream)\n\u00acp_6(Dream)\np_4(Dream)\n\u00acp_5(Dream)\np_4(Dream) \u2227 \u00acp_5(Dream)\np_7(Dream) \u2227 \u00acp_6(Dream)\n\u00acp_9(Dream) \u2227 p_8(Dream)\n\u00acp_2(Dream) \u2227 \u00acp_3(Dream)\np_0(Dream) \u2227 p_8(Dream)",
            "Initial Goal": "p_5(Dream)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_2(Dream)",
                    "-p_3(Dream)",
                    "-p_1(Dream)",
                    "p_0(Dream)",
                    "(-p_2(Dream) & -p_3(Dream)) -> -p_10(Dream)",
                    "((p_9(Dream) | p_1(Dream)) & -(p_9(Dream) & p_1(Dream))) -> p_10(Dream)",
                    "(p_9(Dream) | p_8(Dream)) & -(p_9(Dream) & p_8(Dream))",
                    "(p_0(Dream) & p_8(Dream)) -> p_7(Dream)",
                    "(p_6(Dream) | p_7(Dream)) & -(p_6(Dream) & p_7(Dream))",
                    "(p_6(Dream) | p_4(Dream)) & -(p_6(Dream) & p_4(Dream))",
                    "(p_4(Dream) | p_5(Dream)) & -(p_4(Dream) & p_5(Dream))",
                    "p_8(Dream)",
                    "-p_9(Dream)",
                    "-p_10(Dream)",
                    "p_10(Dream) -> (p_2(Dream) | p_3(Dream))",
                    "p_7(Dream)",
                    "-p_6(Dream)",
                    "p_4(Dream)",
                    "-p_5(Dream)",
                    "p_4(Dream) & -p_5(Dream)",
                    "p_7(Dream) & -p_6(Dream)",
                    "-p_9(Dream) & p_8(Dream)",
                    "-p_2(Dream) & -p_3(Dream)",
                    "p_0(Dream) & p_8(Dream)"
                ],
                "formulas(goals)": [
                    "-p_5(Dream)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_4(Dream) \u2227 \u00acp_5(Dream)",
                    "p_7(Dream) \u2227 \u00acp_6(Dream)",
                    "\u00acp_9(Dream) \u2227 p_8(Dream)",
                    "\u00acp_2(Dream) \u2227 \u00acp_3(Dream)",
                    "p_0(Dream) \u2227 p_8(Dream)"
                ],
                "added_rules": []
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_2(Dream)\n\u00acp_3(Dream)\n\u00acp_1(Dream)\np_0(Dream)\n(\u00acp_2(Dream) \u2227 \u00acp_3(Dream)) \u2192 \u00acp_10(Dream)\n((p_9(Dream) \u2228 p_1(Dream)) \u2227 \u00ac(p_9(Dream) \u2227 p_1(Dream))) \u2192 p_10(Dream)\n(p_9(Dream) \u2228 p_8(Dream)) \u2227 \u00ac(p_9(Dream) \u2227 p_8(Dream))\n(p_0(Dream) \u2227 p_8(Dream)) \u2192 p_7(Dream)\n(p_6(Dream) \u2228 p_7(Dream)) \u2227 \u00ac(p_6(Dream) \u2227 p_7(Dream))\n(p_6(Dream) \u2228 p_4(Dream)) \u2227 \u00ac(p_6(Dream) \u2227 p_4(Dream))\np_8(Dream)\n\u00acp_9(Dream)\n\u00acp_10(Dream)\np_10(Dream) \u2192 (p_2(Dream) \u2228 p_3(Dream))\np_7(Dream)\n\u00acp_6(Dream)\np_4(Dream)\np_7(Dream) \u2227 \u00acp_6(Dream)\n\u00acp_9(Dream) \u2227 p_8(Dream)\n\u00acp_2(Dream) \u2227 \u00acp_3(Dream)\np_0(Dream) \u2227 p_8(Dream)\np_4(Dream) \u2192 p_5(Dream)",
            "Initial Goal": "p_5(Dream)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_2(Dream).",
                    "-p_3(Dream).",
                    "-p_1(Dream).",
                    "p_0(Dream).",
                    "(-p_2(Dream) & -p_3(Dream)) -> -p_10(Dream).",
                    "((p_9(Dream) | p_1(Dream)) & -(p_9(Dream) & p_1(Dream))) -> p_10(Dream).",
                    "(p_9(Dream) | p_8(Dream)) & -(p_9(Dream) & p_8(Dream)).",
                    "(p_0(Dream) & p_8(Dream)) -> p_7(Dream).",
                    "(p_6(Dream) | p_7(Dream)) & -(p_6(Dream) & p_7(Dream)).",
                    "(p_6(Dream) | p_4(Dream)) & -(p_6(Dream) & p_4(Dream)).",
                    "p_8(Dream).",
                    "-p_9(Dream).",
                    "-p_10(Dream).",
                    "p_10(Dream) -> (p_2(Dream) | p_3(Dream)).",
                    "p_7(Dream).",
                    "-p_6(Dream).",
                    "p_4(Dream).",
                    "p_7(Dream) & -p_6(Dream).",
                    "-p_9(Dream) & p_8(Dream).",
                    "-p_2(Dream) & -p_3(Dream).",
                    "p_0(Dream) & p_8(Dream).",
                    "p_4(Dream) -> p_5(Dream)."
                ],
                "formulas(goals)": [
                    "p_5(Dream)."
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "\u00acp_5(Dream)",
                    "p_4(Dream) \u2227 \u00acp_5(Dream)",
                    "(p_4(Dream) \u2228 p_5(Dream)) \u2227 \u00ac(p_4(Dream) \u2227 p_5(Dream))"
                ],
                "removed_rules": [],
                "added_facts": [
                    "p_4(Dream) \u2192 p_5(Dream)"
                ],
                "added_rules": []
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_2(Dream)\n\u00acp_3(Dream)\n\u00acp_1(Dream)\np_0(Dream)\n(\u00acp_2(Dream) \u2227 \u00acp_3(Dream)) \u2192 \u00acp_10(Dream)\n((p_9(Dream) \u2228 p_1(Dream)) \u2227 \u00ac(p_9(Dream) \u2227 p_1(Dream))) \u2192 p_10(Dream)\n(p_9(Dream) \u2228 p_8(Dream)) \u2227 \u00ac(p_9(Dream) \u2227 p_8(Dream))\n(p_0(Dream) \u2227 p_8(Dream)) \u2192 p_7(Dream)\n(p_6(Dream) \u2228 p_7(Dream)) \u2227 \u00ac(p_6(Dream) \u2227 p_7(Dream))\n(p_6(Dream) \u2228 p_4(Dream)) \u2227 \u00ac(p_6(Dream) \u2227 p_4(Dream))\np_8(Dream)\n\u00acp_9(Dream)\n\u00acp_10(Dream)\np_10(Dream) \u2192 (p_2(Dream) \u2228 p_3(Dream))\np_7(Dream)\n\u00acp_6(Dream)\np_4(Dream)\np_7(Dream) \u2227 \u00acp_6(Dream)\n\u00acp_9(Dream) \u2227 p_8(Dream)\n\u00acp_2(Dream) \u2227 \u00acp_3(Dream)\np_0(Dream) \u2227 p_8(Dream)\np_7(Dream) \u2192 \u00acp_5(Dream)",
            "Initial Goal": "p_5(Dream)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_2(Dream).",
                    "-p_3(Dream).",
                    "-p_1(Dream).",
                    "p_0(Dream).",
                    "(-p_2(Dream) & -p_3(Dream)) -> -p_10(Dream).",
                    "((p_9(Dream) | p_1(Dream)) & -(p_9(Dream) & p_1(Dream))) -> p_10(Dream).",
                    "(p_9(Dream) | p_8(Dream)) & -(p_9(Dream) & p_8(Dream)).",
                    "(p_0(Dream) & p_8(Dream)) -> p_7(Dream).",
                    "(p_6(Dream) | p_7(Dream)) & -(p_6(Dream) & p_7(Dream)).",
                    "(p_6(Dream) | p_4(Dream)) & -(p_6(Dream) & p_4(Dream)).",
                    "p_8(Dream).",
                    "-p_9(Dream).",
                    "-p_10(Dream).",
                    "p_10(Dream) -> (p_2(Dream) | p_3(Dream)).",
                    "p_7(Dream).",
                    "-p_6(Dream).",
                    "p_4(Dream).",
                    "p_7(Dream) & -p_6(Dream).",
                    "-p_9(Dream) & p_8(Dream).",
                    "-p_2(Dream) & -p_3(Dream).",
                    "p_0(Dream) & p_8(Dream).",
                    "p_7(Dream) -> -p_5(Dream)."
                ],
                "formulas(goals)": [
                    "-p_5(Dream)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_4(Dream) \u2192 p_5(Dream)"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_7(Dream) \u2192 \u00acp_5(Dream)"
                ]
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_2(Dream)\n\u00acp_3(Dream)\n\u00acp_1(Dream)\np_0(Dream)\n(\u00acp_2(Dream) \u2227 \u00acp_3(Dream)) \u2192 \u00acp_10(Dream)\n((p_9(Dream) \u2228 p_1(Dream)) \u2227 \u00ac(p_9(Dream) \u2227 p_1(Dream))) \u2192 p_10(Dream)\n(p_9(Dream) \u2228 p_8(Dream)) \u2227 \u00ac(p_9(Dream) \u2227 p_8(Dream))\n(p_6(Dream) \u2228 p_4(Dream)) \u2227 \u00ac(p_6(Dream) \u2227 p_4(Dream))\np_8(Dream)\n\u00acp_9(Dream)\n\u00acp_10(Dream)\np_10(Dream) \u2192 (p_2(Dream) \u2228 p_3(Dream))\n\u00acp_6(Dream)\np_4(Dream)\n\u00acp_9(Dream) \u2227 p_8(Dream)\n\u00acp_2(Dream) \u2227 \u00acp_3(Dream)\np_0(Dream) \u2227 p_8(Dream)\np_4(Dream) \u2192 p_5(Dream)",
            "Initial Goal": "p_5(Dream)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_2(Dream)",
                    "-p_3(Dream)",
                    "-p_1(Dream)",
                    "p_0(Dream)",
                    "(-p_2(Dream) & -p_3(Dream)) -> -p_10(Dream)",
                    "((p_9(Dream) | p_1(Dream)) & -(p_9(Dream) & p_1(Dream))) -> p_10(Dream)",
                    "(p_9(Dream) | p_8(Dream)) & -(p_9(Dream) & p_8(Dream))",
                    "(p_6(Dream) | p_4(Dream)) & -(p_6(Dream) & p_4(Dream))",
                    "p_8(Dream)",
                    "-p_9(Dream)",
                    "-p_10(Dream)",
                    "p_10(Dream) -> (p_2(Dream) | p_3(Dream))",
                    "-p_6(Dream)",
                    "p_4(Dream)",
                    "-p_9(Dream) & p_8(Dream)",
                    "-p_2(Dream) & -p_3(Dream)",
                    "p_0(Dream) & p_8(Dream)",
                    "p_4(Dream) -> p_5(Dream)"
                ],
                "formulas(goals)": [
                    "p_5(Dream)"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "p_7(Dream)",
                    "p_7(Dream) \u2227 \u00acp_6(Dream)"
                ],
                "removed_rules": [
                    "(p_0(Dream) \u2227 p_8(Dream)) \u2192 p_7(Dream)",
                    "(p_6(Dream) \u2228 p_7(Dream)) \u2227 \u00ac(p_6(Dream) \u2227 p_7(Dream))",
                    "p_7(Dream) \u2192 \u00acp_5(Dream)"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_4(Dream) \u2192 p_5(Dream)"
                ]
            }
        }
    ]
}