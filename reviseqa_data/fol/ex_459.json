{
    "background_story": "Pandabear, whose real name is Ali, was an Iranian graffiti artist known for his vibrant and thought-provoking murals. Growing up in Tehran, he was fascinated by the rich cultural heritage and history of his country. Pandabear's art often blended traditional Persian motifs with modern themes, reflecting his own experiences as a young Iranian. His work gained international recognition, with pieces exhibited in galleries from Berlin to New York. Despite the challenges of creating art in a restrictive environment, Pandabear remained committed to his vision, using his platform to promote social change and celebrate Iranian culture. His tag, a stylized panda bear wearing a traditional Persian hat, became a symbol of creative resistance and hope for a brighter future.",
    "predicates": [
        {
            "id": 0,
            "name": "gains_recognition"
        },
        {
            "id": 1,
            "name": "paints_murals"
        },
        {
            "id": 2,
            "name": "mix_media"
        },
        {
            "id": 3,
            "name": "express_emotions"
        },
        {
            "id": 4,
            "name": "push_boundaries"
        },
        {
            "id": 5,
            "name": "convey_messages"
        },
        {
            "id": 6,
            "name": "create_thought_prooking_art"
        },
        {
            "id": 7,
            "name": "inspire_social_change"
        },
        {
            "id": 8,
            "name": "makes_beautiful_art"
        },
        {
            "id": 9,
            "name": "use_vibrant_colors"
        },
        {
            "id": 10,
            "name": "tell_stories"
        },
        {
            "id": 11,
            "name": "blend_styles"
        },
        {
            "id": 12,
            "name": "experiment_techniques"
        },
        {
            "id": 13,
            "name": "challenge_status_quo"
        },
        {
            "id": 14,
            "name": "promote_cultural_awareness"
        },
        {
            "id": 15,
            "name": "express_culture"
        },
        {
            "id": 16,
            "name": "promote_freedom"
        },
        {
            "id": 17,
            "name": "is_innovative"
        },
        {
            "id": 18,
            "name": "explores_culture"
        },
        {
            "id": 19,
            "name": "combine_patterns"
        },
        {
            "id": 20,
            "name": "merge_themes"
        },
        {
            "id": 21,
            "name": "try_new_tools"
        },
        {
            "id": 22,
            "name": "take_risks"
        }
    ],
    "subject_name": "Pandabear",
    "subject_category": "artist",
    "keyword": "iranian",
    "all_facts": [
        {
            "id": 0,
            "subject": "Pandabear",
            "text": "Pandabear does not gain recognition.",
            "fol": "\u00acp_0(Pandabear)",
            "str_fol": "\u00acgains_recognition(Pandabear)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Pandabear",
            "text": "Pandabear paints murals.",
            "fol": "p_1(Pandabear)",
            "str_fol": "paints_murals(Pandabear)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Pandabear",
            "text": "Pandabear mixes media.",
            "fol": "p_2(Pandabear)",
            "str_fol": "mix_media(Pandabear)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Pandabear",
            "text": "Pandabear does not express emotions.",
            "fol": "\u00acp_3(Pandabear)",
            "str_fol": "\u00acexpress_emotions(Pandabear)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Pandabear",
            "text": "Pandabear does not push boundaries.",
            "fol": "\u00acp_4(Pandabear)",
            "str_fol": "\u00acpush_boundaries(Pandabear)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Pandabear",
            "text": "Pandabear does not convey messages through his art.",
            "fol": "\u00acp_5(Pandabear)",
            "str_fol": "\u00acconvey_messages(Pandabear)",
            "negation": true
        },
        {
            "id": 6,
            "subject": "Pandabear",
            "text": "Pandabear does not experiment with techniques.",
            "fol": "\u00acp_12(Pandabear)",
            "str_fol": "\u00acexperiment_techniques(Pandabear)",
            "negation": true
        },
        {
            "id": 7,
            "subject": "Pandabear",
            "text": "Pandabear does not blend styles.",
            "fol": "\u00acp_11(Pandabear)",
            "str_fol": "\u00acblend_styles(Pandabear)",
            "negation": true
        },
        {
            "id": 8,
            "subject": "Pandabear",
            "text": "Pandabear uses vibrant colors.",
            "fol": "p_9(Pandabear)",
            "str_fol": "use_vibrant_colors(Pandabear)",
            "negation": false
        },
        {
            "id": 9,
            "subject": "Pandabear",
            "text": "Pandabear does not tell stories.",
            "fol": "\u00acp_10(Pandabear)",
            "str_fol": "\u00actell_stories(Pandabear)",
            "negation": true
        },
        {
            "id": 10,
            "subject": "Pandabear",
            "text": "Pandabear does not make beautiful art.",
            "fol": "\u00acp_8(Pandabear)",
            "str_fol": "\u00acmakes_beautiful_art(Pandabear)",
            "negation": true
        },
        {
            "id": 11,
            "subject": "Pandabear",
            "text": "Pandabear inspires social change.",
            "fol": "p_7(Pandabear)",
            "str_fol": "inspire_social_change(Pandabear)",
            "negation": false
        },
        {
            "id": 12,
            "subject": "Pandabear",
            "text": "Pandabear does not create thought-provoking art.",
            "fol": "\u00acp_6(Pandabear)",
            "str_fol": "\u00accreate_thought_prooking_art(Pandabear)",
            "negation": true
        }
    ],
    "context_facts": [
        {
            "id": 4,
            "subject": "Pandabear",
            "text": "Pandabear does not push boundaries.",
            "fol": "\u00acp_4(Pandabear)",
            "str_fol": "\u00acpush_boundaries(Pandabear)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Pandabear",
            "text": "Pandabear does not convey messages through his art.",
            "fol": "\u00acp_5(Pandabear)",
            "str_fol": "\u00acconvey_messages(Pandabear)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Pandabear",
            "text": "Pandabear does not express emotions.",
            "fol": "\u00acp_3(Pandabear)",
            "str_fol": "\u00acexpress_emotions(Pandabear)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Pandabear",
            "text": "Pandabear mixes media.",
            "fol": "p_2(Pandabear)",
            "str_fol": "mix_media(Pandabear)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Pandabear",
            "text": "Pandabear paints murals.",
            "fol": "p_1(Pandabear)",
            "str_fol": "paints_murals(Pandabear)",
            "negation": false
        },
        {
            "id": 0,
            "subject": "Pandabear",
            "text": "Pandabear does not gain recognition.",
            "fol": "\u00acp_0(Pandabear)",
            "str_fol": "\u00acgains_recognition(Pandabear)",
            "negation": true
        }
    ],
    "context_rules": [
        {
            "id": 6,
            "text": "If Pandabear either experiments with techniques or pushes boundaries (but not both), then he conveys messages through his art.",
            "fol": "(p_12(Pandabear) \u2295 p_4(Pandabear)) \u2192 p_5(Pandabear)",
            "str_fol": "(experiment_techniques(Pandabear) \u2295 push_boundaries(Pandabear)) \u2192 convey_messages(Pandabear)"
        },
        {
            "id": 5,
            "text": "If Pandabear either experiments with techniques or blends styles (but not both), then he expresses emotions.",
            "fol": "(p_12(Pandabear) \u2295 p_11(Pandabear)) \u2192 p_3(Pandabear)",
            "str_fol": "(experiment_techniques(Pandabear) \u2295 blend_styles(Pandabear)) \u2192 express_emotions(Pandabear)"
        },
        {
            "id": 4,
            "text": "If Pandabear either mixes media or blends styles (but not both), then he uses vibrant colors.",
            "fol": "(p_2(Pandabear) \u2295 p_11(Pandabear)) \u2192 p_9(Pandabear)",
            "str_fol": "(mix_media(Pandabear) \u2295 blend_styles(Pandabear)) \u2192 use_vibrant_colors(Pandabear)"
        },
        {
            "id": 3,
            "text": "If Pandabear paints murals and tells stories, then he gains recognition.",
            "fol": "(p_1(Pandabear) \u2227 p_10(Pandabear)) \u2192 p_0(Pandabear)",
            "str_fol": "(paints_murals(Pandabear) \u2227 tell_stories(Pandabear)) \u2192 gains_recognition(Pandabear)"
        },
        {
            "id": 2,
            "text": "If Pandabear makes beautiful art, then he uses vibrant colors and tells stories.",
            "fol": "p_8(Pandabear) \u2192 (p_9(Pandabear) \u2227 p_10(Pandabear))",
            "str_fol": "makes_beautiful_art(Pandabear) \u2192 (use_vibrant_colors(Pandabear) \u2227 tell_stories(Pandabear))"
        },
        {
            "id": 1,
            "text": "Pandabear either makes beautiful art or inspires social change.",
            "fol": "p_8(Pandabear) \u2228 p_7(Pandabear)",
            "str_fol": "makes_beautiful_art(Pandabear) \u2228 inspire_social_change(Pandabear)"
        },
        {
            "id": 0,
            "text": "If Pandabear creates thought-provoking art, then he inspires social change.",
            "fol": "p_6(Pandabear) \u2192 p_7(Pandabear)",
            "str_fol": "create_thought_prooking_art(Pandabear) \u2192 inspire_social_change(Pandabear)"
        }
    ],
    "context": [
        {
            "id": 4,
            "subject": "Pandabear",
            "text": "Pandabear does not push boundaries.",
            "fol": "\u00acp_4(Pandabear)",
            "str_fol": "\u00acpush_boundaries(Pandabear)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Pandabear",
            "text": "Pandabear does not convey messages through his art.",
            "fol": "\u00acp_5(Pandabear)",
            "str_fol": "\u00acconvey_messages(Pandabear)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Pandabear",
            "text": "Pandabear does not express emotions.",
            "fol": "\u00acp_3(Pandabear)",
            "str_fol": "\u00acexpress_emotions(Pandabear)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Pandabear",
            "text": "Pandabear mixes media.",
            "fol": "p_2(Pandabear)",
            "str_fol": "mix_media(Pandabear)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Pandabear",
            "text": "Pandabear paints murals.",
            "fol": "p_1(Pandabear)",
            "str_fol": "paints_murals(Pandabear)",
            "negation": false
        },
        {
            "id": 0,
            "subject": "Pandabear",
            "text": "Pandabear does not gain recognition.",
            "fol": "\u00acp_0(Pandabear)",
            "str_fol": "\u00acgains_recognition(Pandabear)",
            "negation": true
        },
        {
            "id": 6,
            "text": "If Pandabear either experiments with techniques or pushes boundaries (but not both), then he conveys messages through his art.",
            "fol": "(p_12(Pandabear) \u2295 p_4(Pandabear)) \u2192 p_5(Pandabear)",
            "str_fol": "(experiment_techniques(Pandabear) \u2295 push_boundaries(Pandabear)) \u2192 convey_messages(Pandabear)"
        },
        {
            "id": 5,
            "text": "If Pandabear either experiments with techniques or blends styles (but not both), then he expresses emotions.",
            "fol": "(p_12(Pandabear) \u2295 p_11(Pandabear)) \u2192 p_3(Pandabear)",
            "str_fol": "(experiment_techniques(Pandabear) \u2295 blend_styles(Pandabear)) \u2192 express_emotions(Pandabear)"
        },
        {
            "id": 4,
            "text": "If Pandabear either mixes media or blends styles (but not both), then he uses vibrant colors.",
            "fol": "(p_2(Pandabear) \u2295 p_11(Pandabear)) \u2192 p_9(Pandabear)",
            "str_fol": "(mix_media(Pandabear) \u2295 blend_styles(Pandabear)) \u2192 use_vibrant_colors(Pandabear)"
        },
        {
            "id": 3,
            "text": "If Pandabear paints murals and tells stories, then he gains recognition.",
            "fol": "(p_1(Pandabear) \u2227 p_10(Pandabear)) \u2192 p_0(Pandabear)",
            "str_fol": "(paints_murals(Pandabear) \u2227 tell_stories(Pandabear)) \u2192 gains_recognition(Pandabear)"
        },
        {
            "id": 2,
            "text": "If Pandabear makes beautiful art, then he uses vibrant colors and tells stories.",
            "fol": "p_8(Pandabear) \u2192 (p_9(Pandabear) \u2227 p_10(Pandabear))",
            "str_fol": "makes_beautiful_art(Pandabear) \u2192 (use_vibrant_colors(Pandabear) \u2227 tell_stories(Pandabear))"
        },
        {
            "id": 1,
            "text": "Pandabear either makes beautiful art or inspires social change.",
            "fol": "p_8(Pandabear) \u2228 p_7(Pandabear)",
            "str_fol": "makes_beautiful_art(Pandabear) \u2228 inspire_social_change(Pandabear)"
        },
        {
            "id": 0,
            "text": "If Pandabear creates thought-provoking art, then he inspires social change.",
            "fol": "p_6(Pandabear) \u2192 p_7(Pandabear)",
            "str_fol": "create_thought_prooking_art(Pandabear) \u2192 inspire_social_change(Pandabear)"
        }
    ],
    "context_fol": "\u00acp_4(Pandabear)\n\u00acp_5(Pandabear)\n\u00acp_3(Pandabear)\np_2(Pandabear)\np_1(Pandabear)\n\u00acp_0(Pandabear)\n(p_12(Pandabear) \u2295 p_4(Pandabear)) \u2192 p_5(Pandabear)\n(p_12(Pandabear) \u2295 p_11(Pandabear)) \u2192 p_3(Pandabear)\n(p_2(Pandabear) \u2295 p_11(Pandabear)) \u2192 p_9(Pandabear)\n(p_1(Pandabear) \u2227 p_10(Pandabear)) \u2192 p_0(Pandabear)\np_8(Pandabear) \u2192 (p_9(Pandabear) \u2227 p_10(Pandabear))\np_8(Pandabear) \u2228 p_7(Pandabear)\np_6(Pandabear) \u2192 p_7(Pandabear)",
    "conclusion": {
        "id": 12,
        "subject": "Pandabear",
        "text": "Pandabear does not create thought-provoking art.",
        "fol": "\u00acp_6(Pandabear)",
        "str_fol": "\u00accreate_thought_prooking_art(Pandabear)",
        "negation": true
    },
    "initial_answer": "Uncertain",
    "initial_goal": "\u00acp_6(Pandabear)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 4,
                    "subject": "Pandabear",
                    "text": "Pandabear does not push boundaries.",
                    "fol": "\u00acp_4(Pandabear)",
                    "str_fol": "\u00acpush_boundaries(Pandabear)",
                    "negation": true
                },
                {
                    "id": 5,
                    "subject": "Pandabear",
                    "text": "Pandabear does not convey messages through his art.",
                    "fol": "\u00acp_5(Pandabear)",
                    "str_fol": "\u00acconvey_messages(Pandabear)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 6,
                    "text": "If Pandabear either experiments with techniques or pushes boundaries (but not both), then he conveys messages through his art.",
                    "fol": "(p_12(Pandabear) \u2295 p_4(Pandabear)) \u2192 p_5(Pandabear)",
                    "str_fol": "(experiment_techniques(Pandabear) \u2295 push_boundaries(Pandabear)) \u2192 convey_messages(Pandabear)"
                }
            ],
            "conclusion": {
                "id": 6,
                "subject": "Pandabear",
                "text": "Pandabear does not experiment with techniques.",
                "fol": "\u00acp_12(Pandabear)",
                "str_fol": "\u00acexperiment_techniques(Pandabear)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 6,
                    "subject": "Pandabear",
                    "text": "Pandabear does not experiment with techniques.",
                    "fol": "\u00acp_12(Pandabear)",
                    "str_fol": "\u00acexperiment_techniques(Pandabear)",
                    "negation": true
                },
                {
                    "id": 3,
                    "subject": "Pandabear",
                    "text": "Pandabear does not express emotions.",
                    "fol": "\u00acp_3(Pandabear)",
                    "str_fol": "\u00acexpress_emotions(Pandabear)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "If Pandabear either experiments with techniques or blends styles (but not both), then he expresses emotions.",
                    "fol": "(p_12(Pandabear) \u2295 p_11(Pandabear)) \u2192 p_3(Pandabear)",
                    "str_fol": "(experiment_techniques(Pandabear) \u2295 blend_styles(Pandabear)) \u2192 express_emotions(Pandabear)"
                }
            ],
            "conclusion": {
                "id": 7,
                "subject": "Pandabear",
                "text": "Pandabear does not blend styles.",
                "fol": "\u00acp_11(Pandabear)",
                "str_fol": "\u00acblend_styles(Pandabear)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 2,
                    "subject": "Pandabear",
                    "text": "Pandabear mixes media.",
                    "fol": "p_2(Pandabear)",
                    "str_fol": "mix_media(Pandabear)",
                    "negation": false
                },
                {
                    "id": 7,
                    "subject": "Pandabear",
                    "text": "Pandabear does not blend styles.",
                    "fol": "\u00acp_11(Pandabear)",
                    "str_fol": "\u00acblend_styles(Pandabear)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "If Pandabear either mixes media or blends styles (but not both), then he uses vibrant colors.",
                    "fol": "(p_2(Pandabear) \u2295 p_11(Pandabear)) \u2192 p_9(Pandabear)",
                    "str_fol": "(mix_media(Pandabear) \u2295 blend_styles(Pandabear)) \u2192 use_vibrant_colors(Pandabear)"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Pandabear",
                "text": "Pandabear uses vibrant colors.",
                "fol": "p_9(Pandabear)",
                "str_fol": "use_vibrant_colors(Pandabear)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 1,
                    "subject": "Pandabear",
                    "text": "Pandabear paints murals.",
                    "fol": "p_1(Pandabear)",
                    "str_fol": "paints_murals(Pandabear)",
                    "negation": false
                },
                {
                    "id": 0,
                    "subject": "Pandabear",
                    "text": "Pandabear does not gain recognition.",
                    "fol": "\u00acp_0(Pandabear)",
                    "str_fol": "\u00acgains_recognition(Pandabear)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "If Pandabear paints murals and tells stories, then he gains recognition.",
                    "fol": "(p_1(Pandabear) \u2227 p_10(Pandabear)) \u2192 p_0(Pandabear)",
                    "str_fol": "(paints_murals(Pandabear) \u2227 tell_stories(Pandabear)) \u2192 gains_recognition(Pandabear)"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Pandabear",
                "text": "Pandabear does not tell stories.",
                "fol": "\u00acp_10(Pandabear)",
                "str_fol": "\u00actell_stories(Pandabear)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 8,
                    "subject": "Pandabear",
                    "text": "Pandabear uses vibrant colors.",
                    "fol": "p_9(Pandabear)",
                    "str_fol": "use_vibrant_colors(Pandabear)",
                    "negation": false
                },
                {
                    "id": 9,
                    "subject": "Pandabear",
                    "text": "Pandabear does not tell stories.",
                    "fol": "\u00acp_10(Pandabear)",
                    "str_fol": "\u00actell_stories(Pandabear)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "If Pandabear makes beautiful art, then he uses vibrant colors and tells stories.",
                    "fol": "p_8(Pandabear) \u2192 (p_9(Pandabear) \u2227 p_10(Pandabear))",
                    "str_fol": "makes_beautiful_art(Pandabear) \u2192 (use_vibrant_colors(Pandabear) \u2227 tell_stories(Pandabear))"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Pandabear",
                "text": "Pandabear does not make beautiful art.",
                "fol": "\u00acp_8(Pandabear)",
                "str_fol": "\u00acmakes_beautiful_art(Pandabear)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 10,
                    "subject": "Pandabear",
                    "text": "Pandabear does not make beautiful art.",
                    "fol": "\u00acp_8(Pandabear)",
                    "str_fol": "\u00acmakes_beautiful_art(Pandabear)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "Pandabear either makes beautiful art or inspires social change.",
                    "fol": "p_8(Pandabear) \u2228 p_7(Pandabear)",
                    "str_fol": "makes_beautiful_art(Pandabear) \u2228 inspire_social_change(Pandabear)"
                }
            ],
            "conclusion": {
                "id": 11,
                "subject": "Pandabear",
                "text": "Pandabear inspires social change.",
                "fol": "p_7(Pandabear)",
                "str_fol": "inspire_social_change(Pandabear)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 11,
                    "subject": "Pandabear",
                    "text": "Pandabear inspires social change.",
                    "fol": "p_7(Pandabear)",
                    "str_fol": "inspire_social_change(Pandabear)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "If Pandabear creates thought-provoking art, then he inspires social change.",
                    "fol": "p_6(Pandabear) \u2192 p_7(Pandabear)",
                    "str_fol": "create_thought_prooking_art(Pandabear) \u2192 inspire_social_change(Pandabear)"
                }
            ],
            "conclusion": null
        }
    ],
    "proof_trace": null,
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "UNCERTAIN",
            "Edited Assumptions": "\u00acp_4(Pandabear)\n\u00acp_5(Pandabear)\n\u00acp_3(Pandabear)\np_2(Pandabear)\np_1(Pandabear)\n\u00acp_0(Pandabear)\n(p_12(Pandabear) \u2295 p_4(Pandabear)) \u2192 p_5(Pandabear)\n(p_12(Pandabear) \u2295 p_11(Pandabear)) \u2192 p_3(Pandabear)\n(p_2(Pandabear) \u2295 p_11(Pandabear)) \u2192 p_9(Pandabear)\n(p_1(Pandabear) \u2227 p_10(Pandabear)) \u2192 p_0(Pandabear)\np_8(Pandabear) \u2192 (p_9(Pandabear) \u2227 p_10(Pandabear))\np_8(Pandabear) \u2228 p_7(Pandabear)\np_6(Pandabear) \u2192 p_7(Pandabear)",
            "Initial Goal": "\u00acp_6(Pandabear)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Pandabear)",
                    "-p_5(Pandabear)",
                    "-p_3(Pandabear)",
                    "p_2(Pandabear)",
                    "p_1(Pandabear)",
                    "-p_0(Pandabear)",
                    "(-(p_12(Pandabear) <-> p_4(Pandabear))) -> p_5(Pandabear)",
                    "(-(p_12(Pandabear) <-> p_11(Pandabear))) -> p_3(Pandabear)",
                    "(-(p_2(Pandabear) <-> p_11(Pandabear))) -> p_9(Pandabear)",
                    "(p_1(Pandabear) & p_10(Pandabear)) -> p_0(Pandabear)",
                    "p_8(Pandabear) -> (p_9(Pandabear) & p_10(Pandabear))",
                    "p_8(Pandabear) | p_7(Pandabear)",
                    "p_6(Pandabear) -> p_7(Pandabear)",
                    "p_6(Pandabear) -> p_5(Pandabear)"
                ],
                "formulas(goals)": [
                    "-p_6(Pandabear)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "p_6(Pandabear) \u2192 p_5(Pandabear)"
                ]
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_4(Pandabear)\n\u00acp_5(Pandabear)\n\u00acp_3(Pandabear)\np_2(Pandabear)\np_1(Pandabear)\n\u00acp_0(Pandabear)\n(p_12(Pandabear) \u2295 p_4(Pandabear)) \u2192 p_5(Pandabear)\n(p_12(Pandabear) \u2295 p_11(Pandabear)) \u2192 p_3(Pandabear)\n(p_2(Pandabear) \u2295 p_11(Pandabear)) \u2192 p_9(Pandabear)\n(p_1(Pandabear) \u2227 p_10(Pandabear)) \u2192 p_0(Pandabear)\n(p_8(Pandabear) \u2192 p_9(Pandabear)) \u2227 (p_8(Pandabear) \u2192 p_10(Pandabear))\np_8(Pandabear) \u2228 p_7(Pandabear)\n\u00acp_6(Pandabear) \u2228 p_7(Pandabear)\n\u00acp_6(Pandabear)\n\u00acp_11(Pandabear)\np_9(Pandabear)\np_7(Pandabear)",
            "Initial Goal": "\u00acp_6(Pandabear)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Pandabear)",
                    "-p_5(Pandabear)",
                    "-p_3(Pandabear)",
                    "p_2(Pandabear)",
                    "p_1(Pandabear)",
                    "-p_0(Pandabear)",
                    "(-(p_12(Pandabear) <-> p_4(Pandabear))) -> p_5(Pandabear)",
                    "(-(p_12(Pandabear) <-> p_11(Pandabear))) -> p_3(Pandabear)",
                    "(-(p_2(Pandabear) <-> p_11(Pandabear))) -> p_9(Pandabear)",
                    "(p_1(Pandabear) & p_10(Pandabear)) -> p_0(Pandabear)",
                    "(p_8(Pandabear) -> p_9(Pandabear)) & (p_8(Pandabear) -> p_10(Pandabear))",
                    "p_8(Pandabear) | p_7(Pandabear)",
                    "-p_6(Pandabear) | p_7(Pandabear)",
                    "-p_6(Pandabear)",
                    "-p_11(Pandabear)",
                    "p_9(Pandabear)",
                    "p_7(Pandabear)"
                ],
                "formulas(goals)": [
                    "-p_6(Pandabear)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_8(Pandabear) \u2192 (p_9(Pandabear) \u2227 p_10(Pandabear))",
                    "p_6(Pandabear) \u2192 p_7(Pandabear)"
                ],
                "added_facts": [
                    "\u00acp_6(Pandabear)",
                    "\u00acp_11(Pandabear)",
                    "p_9(Pandabear)",
                    "p_7(Pandabear)"
                ],
                "added_rules": [
                    "(p_8(Pandabear) \u2192 p_9(Pandabear)) \u2227 (p_8(Pandabear) \u2192 p_10(Pandabear))",
                    "\u00acp_6(Pandabear) \u2228 p_7(Pandabear)"
                ]
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_4(Pandabear)\n\u00acp_5(Pandabear)\n\u00acp_3(Pandabear)\np_2(Pandabear)\np_1(Pandabear)\n\u00acp_0(Pandabear)\n(p_12(Pandabear) \u2295 p_4(Pandabear)) \u2192 p_5(Pandabear)\n(p_12(Pandabear) \u2295 p_11(Pandabear)) \u2192 p_3(Pandabear)\n(p_2(Pandabear) \u2295 p_11(Pandabear)) \u2192 p_9(Pandabear)\n(p_1(Pandabear) \u2227 p_10(Pandabear)) \u2192 p_0(Pandabear)\n(p_8(Pandabear) \u2192 p_9(Pandabear)) \u2227 (p_8(Pandabear) \u2192 p_10(Pandabear))\np_8(Pandabear) \u2228 p_7(Pandabear)\n\u00acp_6(Pandabear) \u2228 p_7(Pandabear)\n\u00acp_11(Pandabear)\np_9(Pandabear)\np_7(Pandabear)\np_7(Pandabear) \u2192 p_6(Pandabear)",
            "Initial Goal": "\u00acp_6(Pandabear)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Pandabear).",
                    "-p_5(Pandabear).",
                    "-p_3(Pandabear).",
                    "p_2(Pandabear).",
                    "p_1(Pandabear).",
                    "-p_0(Pandabear).",
                    "(-(p_12(Pandabear) <-> p_4(Pandabear))) -> p_5(Pandabear).",
                    "(-(p_12(Pandabear) <-> p_11(Pandabear))) -> p_3(Pandabear).",
                    "(-(p_2(Pandabear) <-> p_11(Pandabear))) -> p_9(Pandabear).",
                    "(p_1(Pandabear) & p_10(Pandabear)) -> p_0(Pandabear).",
                    "(p_8(Pandabear) -> p_9(Pandabear)) & (p_8(Pandabear) -> p_10(Pandabear)).",
                    "p_8(Pandabear) | p_7(Pandabear).",
                    "-p_6(Pandabear) | p_7(Pandabear).",
                    "-p_11(Pandabear).",
                    "p_9(Pandabear).",
                    "p_7(Pandabear).",
                    "p_7(Pandabear) -> p_6(Pandabear)."
                ],
                "formulas(goals)": [
                    "p_6(Pandabear)."
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "\u00acp_6(Pandabear)"
                ],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "p_7(Pandabear) \u2192 p_6(Pandabear)"
                ]
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_4(Pandabear)\n\u00acp_5(Pandabear)\n\u00acp_3(Pandabear)\np_2(Pandabear)\np_1(Pandabear)\n\u00acp_0(Pandabear)\n(p_12(Pandabear) \u2295 p_4(Pandabear)) \u2192 p_5(Pandabear)\n(p_12(Pandabear) \u2295 p_11(Pandabear)) \u2192 p_3(Pandabear)\n(p_2(Pandabear) \u2295 p_11(Pandabear)) \u2192 p_9(Pandabear)\n(p_1(Pandabear) \u2227 p_10(Pandabear)) \u2192 p_0(Pandabear)\n(p_8(Pandabear) \u2192 p_9(Pandabear)) \u2227 (p_8(Pandabear) \u2192 p_10(Pandabear))\np_8(Pandabear) \u2228 p_7(Pandabear)\n\u00acp_6(Pandabear) \u2228 p_7(Pandabear)\n\u00acp_11(Pandabear)\np_9(Pandabear)\np_7(Pandabear)\np_7(Pandabear) \u2192 \u00acp_6(Pandabear)",
            "Initial Goal": "\u00acp_6(Pandabear)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Pandabear)",
                    "-p_5(Pandabear)",
                    "-p_3(Pandabear)",
                    "p_2(Pandabear)",
                    "p_1(Pandabear)",
                    "-p_0(Pandabear)",
                    "(-(p_12(Pandabear) <-> p_4(Pandabear))) -> p_5(Pandabear)",
                    "(-(p_12(Pandabear) <-> p_11(Pandabear))) -> p_3(Pandabear)",
                    "(-(p_2(Pandabear) <-> p_11(Pandabear))) -> p_9(Pandabear)",
                    "(p_1(Pandabear) & p_10(Pandabear)) -> p_0(Pandabear)",
                    "(p_8(Pandabear) -> p_9(Pandabear)) & (p_8(Pandabear) -> p_10(Pandabear))",
                    "p_8(Pandabear) | p_7(Pandabear)",
                    "-p_6(Pandabear) | p_7(Pandabear)",
                    "-p_11(Pandabear)",
                    "p_9(Pandabear)",
                    "p_7(Pandabear)",
                    "p_7(Pandabear) -> -p_6(Pandabear)"
                ],
                "formulas(goals)": [
                    "-p_6(Pandabear)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_7(Pandabear) \u2192 p_6(Pandabear)"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_7(Pandabear) \u2192 \u00acp_6(Pandabear)"
                ]
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_4(Pandabear)\n\u00acp_5(Pandabear)\n\u00acp_3(Pandabear)\np_2(Pandabear)\np_1(Pandabear)\n\u00acp_0(Pandabear)\n(p_12(Pandabear) \u2295 p_4(Pandabear)) \u2192 p_5(Pandabear)\n(p_12(Pandabear) \u2295 p_11(Pandabear)) \u2192 p_3(Pandabear)\n(p_2(Pandabear) \u2295 p_11(Pandabear)) \u2192 p_9(Pandabear)\n(p_1(Pandabear) \u2227 p_10(Pandabear)) \u2192 p_0(Pandabear)\n(p_8(Pandabear) \u2192 p_9(Pandabear)) \u2227 (p_8(Pandabear) \u2192 p_10(Pandabear))\np_8(Pandabear) \u2228 p_7(Pandabear)\n\u00acp_6(Pandabear) \u2228 p_7(Pandabear)\n\u00acp_11(Pandabear)\np_9(Pandabear)\np_7(Pandabear)\np_7(Pandabear) \u2192 p_6(Pandabear)",
            "Initial Goal": "\u00acp_6(Pandabear)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "\u00acp_4(Pandabear)",
                    "\u00acp_5(Pandabear)",
                    "\u00acp_3(Pandabear)",
                    "p_2(Pandabear)",
                    "p_1(Pandabear)",
                    "\u00acp_0(Pandabear)",
                    "(-(p_12(Pandabear) <-> p_4(Pandabear))) -> p_5(Pandabear)",
                    "(-(p_12(Pandabear) <-> p_11(Pandabear))) -> p_3(Pandabear)",
                    "(-(p_2(Pandabear) <-> p_11(Pandabear))) -> p_9(Pandabear)",
                    "(p_1(Pandabear) & p_10(Pandabear)) -> p_0(Pandabear)",
                    "(p_8(Pandabear) -> p_9(Pandabear)) & (p_8(Pandabear) -> p_10(Pandabear))",
                    "p_8(Pandabear) | p_7(Pandabear)",
                    "\u00acp_6(Pandabear) | p_7(Pandabear)",
                    "\u00acp_11(Pandabear)",
                    "p_9(Pandabear)",
                    "p_7(Pandabear)",
                    "p_7(Pandabear) -> p_6(Pandabear)"
                ],
                "formulas(goals)": [
                    "p_6(Pandabear)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "p_7(Pandabear) \u2192 p_6(Pandabear)"
                ]
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_4(Pandabear)\n\u00acp_5(Pandabear)\n\u00acp_3(Pandabear)\np_2(Pandabear)\np_1(Pandabear)\n\u00acp_0(Pandabear)\n(p_12(Pandabear) \u2295 p_4(Pandabear)) \u2192 p_5(Pandabear)\n(p_12(Pandabear) \u2295 p_11(Pandabear)) \u2192 p_3(Pandabear)\n(p_2(Pandabear) \u2295 p_11(Pandabear)) \u2192 p_9(Pandabear)\n(p_1(Pandabear) \u2227 p_10(Pandabear)) \u2192 p_0(Pandabear)\np_8(Pandabear) \u2192 (p_9(Pandabear) \u2227 p_10(Pandabear))\n\u00acp_7(Pandabear) \u2192 p_8(Pandabear)\np_6(Pandabear) \u2192 p_7(Pandabear)\n\u00acp_11(Pandabear)\np_9(Pandabear)\np_7(Pandabear)\np_7(Pandabear) \u2192 p_6(Pandabear)\np_6(Pandabear)\n\u00acp_6(Pandabear) \u2192 \u00acp_7(Pandabear)\np_6(Pandabear) \u2228 \u00acp_6(Pandabear)\np_8(Pandabear) \u2192 p_6(Pandabear)",
            "Initial Goal": "\u00acp_6(Pandabear)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Pandabear).",
                    "-p_5(Pandabear).",
                    "-p_3(Pandabear).",
                    "p_2(Pandabear).",
                    "p_1(Pandabear).",
                    "-p_0(Pandabear).",
                    "(-(p_12(Pandabear) <-> p_4(Pandabear))) -> p_5(Pandabear).",
                    "(-(p_12(Pandabear) <-> p_11(Pandabear))) -> p_3(Pandabear).",
                    "(-(p_2(Pandabear) <-> p_11(Pandabear))) -> p_9(Pandabear).",
                    "(p_1(Pandabear) & p_10(Pandabear)) -> p_0(Pandabear).",
                    "p_8(Pandabear) -> (p_9(Pandabear) & p_10(Pandabear)).",
                    "(-p_7(Pandabear)) -> p_8(Pandabear).",
                    "p_6(Pandabear) -> p_7(Pandabear).",
                    "-p_11(Pandabear).",
                    "p_9(Pandabear).",
                    "p_7(Pandabear).",
                    "p_7(Pandabear) -> p_6(Pandabear).",
                    "p_6(Pandabear).",
                    "(-p_6(Pandabear)) -> (-p_7(Pandabear)).",
                    "p_6(Pandabear) | (-p_6(Pandabear)).",
                    "p_8(Pandabear) -> p_6(Pandabear)."
                ],
                "formulas(goals)": [
                    "p_6(Pandabear)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "(p_8(Pandabear) \u2192 p_9(Pandabear)) \u2227 (p_8(Pandabear) \u2192 p_10(Pandabear))",
                    "p_8(Pandabear) \u2228 p_7(Pandabear)",
                    "\u00acp_6(Pandabear) \u2228 p_7(Pandabear)"
                ],
                "added_facts": [
                    "p_6(Pandabear)"
                ],
                "added_rules": [
                    "p_8(Pandabear) \u2192 (p_9(Pandabear) \u2227 p_10(Pandabear))",
                    "\u00acp_7(Pandabear) \u2192 p_8(Pandabear)",
                    "p_6(Pandabear) \u2192 p_7(Pandabear)",
                    "\u00acp_6(Pandabear) \u2192 \u00acp_7(Pandabear)",
                    "p_6(Pandabear) \u2228 \u00acp_6(Pandabear)",
                    "p_8(Pandabear) \u2192 p_6(Pandabear)"
                ]
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_4(Pandabear)\n\u00acp_5(Pandabear)\n\u00acp_3(Pandabear)\np_2(Pandabear)\np_1(Pandabear)\n\u00acp_0(Pandabear)\n(p_12(Pandabear) \u2295 p_4(Pandabear)) \u2192 p_5(Pandabear)\n(p_12(Pandabear) \u2295 p_11(Pandabear)) \u2192 p_3(Pandabear)\n(p_2(Pandabear) \u2295 p_11(Pandabear)) \u2192 p_9(Pandabear)\n(p_1(Pandabear) \u2227 p_10(Pandabear)) \u2192 p_0(Pandabear)\np_8(Pandabear) \u2192 (p_9(Pandabear) \u2227 p_10(Pandabear))\n\u00acp_7(Pandabear) \u2192 p_8(Pandabear)\np_6(Pandabear) \u2192 p_7(Pandabear)\n\u00acp_11(Pandabear)\np_9(Pandabear)\np_7(Pandabear)\np_7(Pandabear) \u2192 p_6(Pandabear)\np_6(Pandabear)\n\u00acp_6(Pandabear) \u2192 \u00acp_7(Pandabear)\np_6(Pandabear) \u2228 \u00acp_6(Pandabear)\np_8(Pandabear) \u2192 p_6(Pandabear)\n\u00acp_12(Pandabear)\n\u00acp_10(Pandabear)\np_2(Pandabear) \u2192 p_9(Pandabear)\np_6(Pandabear) \u2228 p_12(Pandabear)\np_6(Pandabear) \u2227 p_7(Pandabear)",
            "Initial Goal": "\u00acp_6(Pandabear)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Pandabear)",
                    "-p_5(Pandabear)",
                    "-p_3(Pandabear)",
                    "p_2(Pandabear)",
                    "p_1(Pandabear)",
                    "-p_0(Pandabear)",
                    "(-(p_12(Pandabear) <-> p_4(Pandabear))) -> p_5(Pandabear)",
                    "(-(p_12(Pandabear) <-> p_11(Pandabear))) -> p_3(Pandabear)",
                    "(-(p_2(Pandabear) <-> p_11(Pandabear))) -> p_9(Pandabear)",
                    "(p_1(Pandabear) & p_10(Pandabear)) -> p_0(Pandabear)",
                    "p_8(Pandabear) -> (p_9(Pandabear) & p_10(Pandabear))",
                    "-p_7(Pandabear) -> p_8(Pandabear)",
                    "p_6(Pandabear) -> p_7(Pandabear)",
                    "-p_11(Pandabear)",
                    "p_9(Pandabear)",
                    "p_7(Pandabear)",
                    "p_7(Pandabear) -> p_6(Pandabear)",
                    "p_6(Pandabear)",
                    "-p_6(Pandabear) -> -p_7(Pandabear)",
                    "p_6(Pandabear) | -p_6(Pandabear)",
                    "p_8(Pandabear) -> p_6(Pandabear)",
                    "-p_12(Pandabear)",
                    "-p_10(Pandabear)",
                    "p_2(Pandabear) -> p_9(Pandabear)",
                    "p_6(Pandabear) | p_12(Pandabear)",
                    "p_6(Pandabear) & p_7(Pandabear)"
                ],
                "formulas(goals)": [
                    "-(-p_6(Pandabear))"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "\u00acp_12(Pandabear)",
                    "\u00acp_10(Pandabear)",
                    "p_6(Pandabear) \u2227 p_7(Pandabear)"
                ],
                "added_rules": [
                    "p_2(Pandabear) \u2192 p_9(Pandabear)",
                    "p_6(Pandabear) \u2228 p_12(Pandabear)"
                ]
            }
        }
    ]
}