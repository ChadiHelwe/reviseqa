{
    "background_story": "Juliet was a Common Cuckoo, known scientifically as Cuculus canorus. She was a migratory bird that traveled from Africa to Europe each spring. Juliet's life was marked by her unique breeding habits, where she would lay her eggs in the nests of other birds, leaving them to raise her young. Despite this unusual approach to motherhood, Juliet was a devoted parent, carefully selecting the perfect hosts for her offspring. Her distinctive call, a repetitive 'cuckoo' sound, echoed through the forests as she searched for the ideal nest. Juliet's story is one of adaptability and resilience, as she navigated the challenges of her parasitic breeding habits, always ensuring the survival of her species.",
    "predicates": [
        {
            "id": 0,
            "name": "migrates"
        },
        {
            "id": 1,
            "name": "is_carnivore"
        },
        {
            "id": 2,
            "name": "is_omnivore"
        },
        {
            "id": 3,
            "name": "is_parent"
        },
        {
            "id": 4,
            "name": "finds_food"
        },
        {
            "id": 5,
            "name": "cares_young"
        },
        {
            "id": 6,
            "name": "builds_nest"
        },
        {
            "id": 7,
            "name": "lays_in_other_nests"
        },
        {
            "id": 8,
            "name": "is_parasite"
        },
        {
            "id": 9,
            "name": "has_no_nest"
        },
        {
            "id": 10,
            "name": "is_brood"
        },
        {
            "id": 11,
            "name": "uses_host"
        },
        {
            "id": 12,
            "name": "raises_own"
        },
        {
            "id": 13,
            "name": "is_cuckoo"
        },
        {
            "id": 14,
            "name": "searches_nests"
        },
        {
            "id": 15,
            "name": "has_distinct_call"
        },
        {
            "id": 16,
            "name": "is_social"
        },
        {
            "id": 17,
            "name": "is_orphan"
        },
        {
            "id": 18,
            "name": "is_wanderer"
        },
        {
            "id": 19,
            "name": "has_large_eggs"
        },
        {
            "id": 20,
            "name": "needs_protection"
        },
        {
            "id": 21,
            "name": "builds_home"
        },
        {
            "id": 22,
            "name": "lays_eggs"
        },
        {
            "id": 23,
            "name": "has_offspring"
        }
    ],
    "subject_name": "Juliet",
    "subject_category": "bird",
    "keyword": "cuculus",
    "all_facts": [
        {
            "id": 0,
            "subject": "Juliet",
            "text": "Juliet does not migrate.",
            "fol": "\u00acp_0(Juliet)",
            "str_fol": "\u00acmigrates(Juliet)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Juliet",
            "text": "Juliet is a carnivore.",
            "fol": "p_1(Juliet)",
            "str_fol": "is_carnivore(Juliet)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Juliet",
            "text": "Juliet is an omnivore.",
            "fol": "p_2(Juliet)",
            "str_fol": "is_omnivore(Juliet)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Juliet",
            "text": "Juliet is not a parent.",
            "fol": "\u00acp_3(Juliet)",
            "str_fol": "\u00acis_parent(Juliet)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Juliet",
            "text": "Juliet does not find food.",
            "fol": "\u00acp_4(Juliet)",
            "str_fol": "\u00acfinds_food(Juliet)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Juliet",
            "text": "Juliet does not care for her young.",
            "fol": "\u00acp_5(Juliet)",
            "str_fol": "\u00accares_young(Juliet)",
            "negation": true
        },
        {
            "id": 6,
            "subject": "Juliet",
            "text": "Juliet does not raise her own young.",
            "fol": "\u00acp_12(Juliet)",
            "str_fol": "\u00acraises_own(Juliet)",
            "negation": true
        },
        {
            "id": 7,
            "subject": "Juliet",
            "text": "Juliet is a brood parasite.",
            "fol": "p_10(Juliet)",
            "str_fol": "is_brood(Juliet)",
            "negation": false
        },
        {
            "id": 8,
            "subject": "Juliet",
            "text": "Juliet does not use a host to raise her young.",
            "fol": "\u00acp_11(Juliet)",
            "str_fol": "\u00acuses_host(Juliet)",
            "negation": true
        },
        {
            "id": 9,
            "subject": "Juliet",
            "text": "Juliet has a nest.",
            "fol": "\u00acp_9(Juliet)",
            "str_fol": "\u00achas_no_nest(Juliet)",
            "negation": true
        },
        {
            "id": 10,
            "subject": "Juliet",
            "text": "Juliet is not a parasite.",
            "fol": "\u00acp_8(Juliet)",
            "str_fol": "\u00acis_parasite(Juliet)",
            "negation": true
        },
        {
            "id": 11,
            "subject": "Juliet",
            "text": "Juliet does not build her own nest.",
            "fol": "\u00acp_6(Juliet)",
            "str_fol": "\u00acbuilds_nest(Juliet)",
            "negation": true
        }
    ],
    "context_facts": [
        {
            "id": 5,
            "subject": "Juliet",
            "text": "Juliet does not care for her young.",
            "fol": "\u00acp_5(Juliet)",
            "str_fol": "\u00accares_young(Juliet)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Juliet",
            "text": "Juliet does not find food.",
            "fol": "\u00acp_4(Juliet)",
            "str_fol": "\u00acfinds_food(Juliet)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Juliet",
            "text": "Juliet is not a parent.",
            "fol": "\u00acp_3(Juliet)",
            "str_fol": "\u00acis_parent(Juliet)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Juliet",
            "text": "Juliet is a carnivore.",
            "fol": "p_1(Juliet)",
            "str_fol": "is_carnivore(Juliet)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Juliet",
            "text": "Juliet is an omnivore.",
            "fol": "p_2(Juliet)",
            "str_fol": "is_omnivore(Juliet)",
            "negation": false
        },
        {
            "id": 0,
            "subject": "Juliet",
            "text": "Juliet does not migrate.",
            "fol": "\u00acp_0(Juliet)",
            "str_fol": "\u00acmigrates(Juliet)",
            "negation": true
        }
    ],
    "context_rules": [
        {
            "id": 6,
            "text": "All birds that raise their own young care for them.",
            "fol": "\u2200x (p_12(x) \u2192 p_5(x))",
            "str_fol": "\u2200x (raises_own(x) \u2192 cares_young(x))"
        },
        {
            "id": 5,
            "text": "Juliet is a brood parasite or finds food.",
            "fol": "p_10(Juliet) \u2228 p_4(Juliet)",
            "str_fol": "is_brood(Juliet) \u2228 finds_food(Juliet)"
        },
        {
            "id": 4,
            "text": "If Juliet either uses a host or raises her own young (but not both), then she is a parent.",
            "fol": "(p_11(Juliet) \u2295 p_12(Juliet)) \u2192 p_3(Juliet)",
            "str_fol": "(uses_host(Juliet) \u2295 raises_own(Juliet)) \u2192 is_parent(Juliet)"
        },
        {
            "id": 3,
            "text": "All birds that are brood parasites and have no nest will use a host to raise their young.",
            "fol": "\u2200x ((p_10(x) \u2227 p_9(x)) \u2192 p_11(x))",
            "str_fol": "\u2200x ((is_brood(x) \u2227 has_no_nest(x)) \u2192 uses_host(x))"
        },
        {
            "id": 2,
            "text": "All parasitic birds are either carnivores or omnivores.",
            "fol": "\u2200x (p_8(x) \u2192 (p_1(x) \u2295 p_2(x)))",
            "str_fol": "\u2200x (is_parasite(x) \u2192 (is_carnivore(x) \u2295 is_omnivore(x)))"
        },
        {
            "id": 1,
            "text": "Any bird that is a parasite or has no nest lays its eggs in other birds' nests.",
            "fol": "\u2200x ((p_8(x) \u2228 p_9(x)) \u2192 p_7(x))",
            "str_fol": "\u2200x ((is_parasite(x) \u2228 has_no_nest(x)) \u2192 lays_in_other_nests(x))"
        },
        {
            "id": 0,
            "text": "If Juliet migrates, then she either builds her own nest or lays her eggs in other birds' nests, but not both.",
            "fol": "p_0(Juliet) \u2192 (p_6(Juliet) \u2295 p_7(Juliet))",
            "str_fol": "migrates(Juliet) \u2192 (builds_nest(Juliet) \u2295 lays_in_other_nests(Juliet))"
        }
    ],
    "context": [
        {
            "id": 5,
            "subject": "Juliet",
            "text": "Juliet does not care for her young.",
            "fol": "\u00acp_5(Juliet)",
            "str_fol": "\u00accares_young(Juliet)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Juliet",
            "text": "Juliet does not find food.",
            "fol": "\u00acp_4(Juliet)",
            "str_fol": "\u00acfinds_food(Juliet)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Juliet",
            "text": "Juliet is not a parent.",
            "fol": "\u00acp_3(Juliet)",
            "str_fol": "\u00acis_parent(Juliet)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Juliet",
            "text": "Juliet is a carnivore.",
            "fol": "p_1(Juliet)",
            "str_fol": "is_carnivore(Juliet)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Juliet",
            "text": "Juliet is an omnivore.",
            "fol": "p_2(Juliet)",
            "str_fol": "is_omnivore(Juliet)",
            "negation": false
        },
        {
            "id": 0,
            "subject": "Juliet",
            "text": "Juliet does not migrate.",
            "fol": "\u00acp_0(Juliet)",
            "str_fol": "\u00acmigrates(Juliet)",
            "negation": true
        },
        {
            "id": 6,
            "text": "All birds that raise their own young care for them.",
            "fol": "\u2200x (p_12(x) \u2192 p_5(x))",
            "str_fol": "\u2200x (raises_own(x) \u2192 cares_young(x))"
        },
        {
            "id": 5,
            "text": "Juliet is a brood parasite or finds food.",
            "fol": "p_10(Juliet) \u2228 p_4(Juliet)",
            "str_fol": "is_brood(Juliet) \u2228 finds_food(Juliet)"
        },
        {
            "id": 4,
            "text": "If Juliet either uses a host or raises her own young (but not both), then she is a parent.",
            "fol": "(p_11(Juliet) \u2295 p_12(Juliet)) \u2192 p_3(Juliet)",
            "str_fol": "(uses_host(Juliet) \u2295 raises_own(Juliet)) \u2192 is_parent(Juliet)"
        },
        {
            "id": 3,
            "text": "All birds that are brood parasites and have no nest will use a host to raise their young.",
            "fol": "\u2200x ((p_10(x) \u2227 p_9(x)) \u2192 p_11(x))",
            "str_fol": "\u2200x ((is_brood(x) \u2227 has_no_nest(x)) \u2192 uses_host(x))"
        },
        {
            "id": 2,
            "text": "All parasitic birds are either carnivores or omnivores.",
            "fol": "\u2200x (p_8(x) \u2192 (p_1(x) \u2295 p_2(x)))",
            "str_fol": "\u2200x (is_parasite(x) \u2192 (is_carnivore(x) \u2295 is_omnivore(x)))"
        },
        {
            "id": 1,
            "text": "Any bird that is a parasite or has no nest lays its eggs in other birds' nests.",
            "fol": "\u2200x ((p_8(x) \u2228 p_9(x)) \u2192 p_7(x))",
            "str_fol": "\u2200x ((is_parasite(x) \u2228 has_no_nest(x)) \u2192 lays_in_other_nests(x))"
        },
        {
            "id": 0,
            "text": "If Juliet migrates, then she either builds her own nest or lays her eggs in other birds' nests, but not both.",
            "fol": "p_0(Juliet) \u2192 (p_6(Juliet) \u2295 p_7(Juliet))",
            "str_fol": "migrates(Juliet) \u2192 (builds_nest(Juliet) \u2295 lays_in_other_nests(Juliet))"
        }
    ],
    "context_fol": "\u00acp_5(Juliet)\n\u00acp_4(Juliet)\n\u00acp_3(Juliet)\np_1(Juliet)\np_2(Juliet)\n\u00acp_0(Juliet)\n\u2200x (p_12(x) \u2192 p_5(x))\np_10(Juliet) \u2228 p_4(Juliet)\n(p_11(Juliet) \u2295 p_12(Juliet)) \u2192 p_3(Juliet)\n\u2200x ((p_10(x) \u2227 p_9(x)) \u2192 p_11(x))\n\u2200x (p_8(x) \u2192 (p_1(x) \u2295 p_2(x)))\n\u2200x ((p_8(x) \u2228 p_9(x)) \u2192 p_7(x))\np_0(Juliet) \u2192 (p_6(Juliet) \u2295 p_7(Juliet))",
    "conclusion": {
        "id": 11,
        "subject": "Juliet",
        "text": "Juliet does not build her own nest.",
        "fol": "\u00acp_6(Juliet)",
        "str_fol": "\u00acbuilds_nest(Juliet)",
        "negation": true
    },
    "initial_answer": "Uncertain",
    "initial_goal": "\u00acp_6(Juliet)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 5,
                    "subject": "Juliet",
                    "text": "Juliet does not care for her young.",
                    "fol": "\u00acp_5(Juliet)",
                    "str_fol": "\u00accares_young(Juliet)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 6,
                    "text": "All birds that raise their own young care for them.",
                    "fol": "\u2200x (p_12(x) \u2192 p_5(x))",
                    "str_fol": "\u2200x (raises_own(x) \u2192 cares_young(x))"
                }
            ],
            "conclusion": {
                "id": 6,
                "subject": "Juliet",
                "text": "Juliet does not raise her own young.",
                "fol": "\u00acp_12(Juliet)",
                "str_fol": "\u00acraises_own(Juliet)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 4,
                    "subject": "Juliet",
                    "text": "Juliet does not find food.",
                    "fol": "\u00acp_4(Juliet)",
                    "str_fol": "\u00acfinds_food(Juliet)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "Juliet is a brood parasite or finds food.",
                    "fol": "p_10(Juliet) \u2228 p_4(Juliet)",
                    "str_fol": "is_brood(Juliet) \u2228 finds_food(Juliet)"
                }
            ],
            "conclusion": {
                "id": 7,
                "subject": "Juliet",
                "text": "Juliet is a brood parasite.",
                "fol": "p_10(Juliet)",
                "str_fol": "is_brood(Juliet)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 6,
                    "subject": "Juliet",
                    "text": "Juliet does not raise her own young.",
                    "fol": "\u00acp_12(Juliet)",
                    "str_fol": "\u00acraises_own(Juliet)",
                    "negation": true
                },
                {
                    "id": 3,
                    "subject": "Juliet",
                    "text": "Juliet is not a parent.",
                    "fol": "\u00acp_3(Juliet)",
                    "str_fol": "\u00acis_parent(Juliet)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "If Juliet either uses a host or raises her own young (but not both), then she is a parent.",
                    "fol": "(p_11(Juliet) \u2295 p_12(Juliet)) \u2192 p_3(Juliet)",
                    "str_fol": "(uses_host(Juliet) \u2295 raises_own(Juliet)) \u2192 is_parent(Juliet)"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Juliet",
                "text": "Juliet does not use a host to raise her young.",
                "fol": "\u00acp_11(Juliet)",
                "str_fol": "\u00acuses_host(Juliet)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 7,
                    "subject": "Juliet",
                    "text": "Juliet is a brood parasite.",
                    "fol": "p_10(Juliet)",
                    "str_fol": "is_brood(Juliet)",
                    "negation": false
                },
                {
                    "id": 8,
                    "subject": "Juliet",
                    "text": "Juliet does not use a host to raise her young.",
                    "fol": "\u00acp_11(Juliet)",
                    "str_fol": "\u00acuses_host(Juliet)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "All birds that are brood parasites and have no nest will use a host to raise their young.",
                    "fol": "\u2200x ((p_10(x) \u2227 p_9(x)) \u2192 p_11(x))",
                    "str_fol": "\u2200x ((is_brood(x) \u2227 has_no_nest(x)) \u2192 uses_host(x))"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Juliet",
                "text": "Juliet has a nest.",
                "fol": "\u00acp_9(Juliet)",
                "str_fol": "\u00achas_no_nest(Juliet)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 1,
                    "subject": "Juliet",
                    "text": "Juliet is a carnivore.",
                    "fol": "p_1(Juliet)",
                    "str_fol": "is_carnivore(Juliet)",
                    "negation": false
                },
                {
                    "id": 2,
                    "subject": "Juliet",
                    "text": "Juliet is an omnivore.",
                    "fol": "p_2(Juliet)",
                    "str_fol": "is_omnivore(Juliet)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "All parasitic birds are either carnivores or omnivores.",
                    "fol": "\u2200x (p_8(x) \u2192 (p_1(x) \u2295 p_2(x)))",
                    "str_fol": "\u2200x (is_parasite(x) \u2192 (is_carnivore(x) \u2295 is_omnivore(x)))"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Juliet",
                "text": "Juliet is not a parasite.",
                "fol": "\u00acp_8(Juliet)",
                "str_fol": "\u00acis_parasite(Juliet)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 10,
                    "subject": "Juliet",
                    "text": "Juliet is not a parasite.",
                    "fol": "\u00acp_8(Juliet)",
                    "str_fol": "\u00acis_parasite(Juliet)",
                    "negation": true
                },
                {
                    "id": 9,
                    "subject": "Juliet",
                    "text": "Juliet has a nest.",
                    "fol": "\u00acp_9(Juliet)",
                    "str_fol": "\u00achas_no_nest(Juliet)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "Any bird that is a parasite or has no nest lays its eggs in other birds' nests.",
                    "fol": "\u2200x ((p_8(x) \u2228 p_9(x)) \u2192 p_7(x))",
                    "str_fol": "\u2200x ((is_parasite(x) \u2228 has_no_nest(x)) \u2192 lays_in_other_nests(x))"
                }
            ],
            "conclusion": null
        },
        {
            "facts": [
                {
                    "id": 0,
                    "subject": "Juliet",
                    "text": "Juliet does not migrate.",
                    "fol": "\u00acp_0(Juliet)",
                    "str_fol": "\u00acmigrates(Juliet)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "If Juliet migrates, then she either builds her own nest or lays her eggs in other birds' nests, but not both.",
                    "fol": "p_0(Juliet) \u2192 (p_6(Juliet) \u2295 p_7(Juliet))",
                    "str_fol": "migrates(Juliet) \u2192 (builds_nest(Juliet) \u2295 lays_in_other_nests(Juliet))"
                }
            ],
            "conclusion": null
        }
    ],
    "proof_trace": null,
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "UNCERTAIN",
            "Edited Assumptions": "\u00acp_5(Juliet)\n\u00acp_4(Juliet)\n\u00acp_3(Juliet)\np_1(Juliet)\np_2(Juliet)\n\u00acp_0(Juliet)\n\u2200x (p_12(x) \u2192 p_5(x))\np_10(Juliet) \u2228 p_4(Juliet)\n(p_11(Juliet) \u2295 p_12(Juliet)) \u2192 p_3(Juliet)\n\u2200x ((p_10(x) \u2227 p_9(x)) \u2192 p_11(x))\n\u2200x (p_8(x) \u2192 (p_1(x) \u2295 p_2(x)))\n\u2200x ((p_8(x) \u2228 p_9(x)) \u2192 p_7(x))\np_0(Juliet) \u2192 (p_6(Juliet) \u2295 p_7(Juliet))",
            "Initial Goal": "\u00acp_6(Juliet)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_5(Juliet).",
                    "-p_4(Juliet).",
                    "-p_3(Juliet).",
                    "p_1(Juliet).",
                    "p_2(Juliet).",
                    "-p_0(Juliet).",
                    "all x (p_12(x) -> p_5(x)).",
                    "p_10(Juliet) | p_4(Juliet).",
                    "(-(p_11(Juliet) <-> p_12(Juliet))) -> p_3(Juliet).",
                    "all x ((p_10(x) & p_9(x)) -> p_11(x)).",
                    "all x (p_8(x) -> (-(p_1(x) <-> p_2(x)))).",
                    "all x ((p_8(x) | p_9(x)) -> p_7(x)).",
                    "p_0(Juliet) -> (-(p_6(Juliet) <-> p_7(Juliet))).",
                    "-p_0(Juliet) -> -p_6(Juliet)."
                ],
                "formulas(goals)": [
                    "-p_6(Juliet)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "\u00acp_0(Juliet) \u2192 \u00acp_6(Juliet)"
                ]
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_5(Juliet)\n\u00acp_4(Juliet)\n\u00acp_3(Juliet)\np_1(Juliet)\np_2(Juliet)\n\u00acp_0(Juliet)\n\u2200x (p_12(x) \u2192 p_5(x))\np_10(Juliet) \u2228 p_4(Juliet)\n(p_11(Juliet) \u2295 p_12(Juliet)) \u2192 p_3(Juliet)\n\u2200x ((p_10(x) \u2227 p_9(x)) \u2192 p_11(x))\n\u2200x (p_8(x) \u2192 (p_1(x) \u2295 p_2(x)))\n\u2200x ((p_8(x) \u2228 p_9(x)) \u2192 p_7(x))\np_0(Juliet) \u2192 (p_6(Juliet) \u2295 p_7(Juliet))\n\u00acp_0(Juliet) \u2192 \u00acp_6(Juliet)",
            "Initial Goal": "\u00acp_6(Juliet)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_5(Juliet)",
                    "-p_4(Juliet)",
                    "-p_3(Juliet)",
                    "p_1(Juliet)",
                    "p_2(Juliet)",
                    "-p_0(Juliet)",
                    "all x (p_12(x) -> p_5(x))",
                    "p_10(Juliet) | p_4(Juliet)",
                    "(-(p_11(Juliet) <-> p_12(Juliet))) -> p_3(Juliet)",
                    "all x ((p_10(x) & p_9(x)) -> p_11(x))",
                    "all x (p_8(x) -> (-(p_1(x) <-> p_2(x))))",
                    "all x ((p_8(x) | p_9(x)) -> p_7(x))",
                    "p_0(Juliet) -> (-(p_6(Juliet) <-> p_7(Juliet)))",
                    "-p_0(Juliet) -> -p_6(Juliet)"
                ],
                "formulas(goals)": [
                    "-p_6(Juliet)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "\u00acp_0(Juliet) \u2192 \u00acp_6(Juliet)"
                ]
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_5(Juliet)\n\u00acp_4(Juliet)\n\u00acp_3(Juliet)\np_1(Juliet)\np_2(Juliet)\n\u00acp_0(Juliet)\n\u2200x (p_12(x) \u2192 p_5(x))\np_10(Juliet) \u2228 p_4(Juliet)\n(p_11(Juliet) \u2295 p_12(Juliet)) \u2192 p_3(Juliet)\n\u2200x ((p_10(x) \u2227 p_9(x)) \u2192 p_11(x))\n\u2200x (p_8(x) \u2192 (p_1(x) \u2295 p_2(x)))\n\u2200x ((p_8(x) \u2228 p_9(x)) \u2192 p_7(x))\np_0(Juliet) \u2192 (p_6(Juliet) \u2295 p_7(Juliet))\n\u00acp_0(Juliet) \u2192 p_6(Juliet)",
            "Initial Goal": "\u00acp_6(Juliet)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_5(Juliet)",
                    "-p_4(Juliet)",
                    "-p_3(Juliet)",
                    "p_1(Juliet)",
                    "p_2(Juliet)",
                    "-p_0(Juliet)",
                    "all x (p_12(x) -> p_5(x))",
                    "p_10(Juliet) | p_4(Juliet)",
                    "(-(p_11(Juliet) <-> p_12(Juliet))) -> p_3(Juliet)",
                    "all x ((p_10(x) & p_9(x)) -> p_11(x))",
                    "all x (p_8(x) -> (-(p_1(x) <-> p_2(x))))",
                    "all x ((p_8(x) | p_9(x)) -> p_7(x))",
                    "p_0(Juliet) -> (-(p_6(Juliet) <-> p_7(Juliet)))",
                    "-p_0(Juliet) -> p_6(Juliet)"
                ],
                "formulas(goals)": [
                    "-(-p_6(Juliet))"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u00acp_0(Juliet) \u2192 \u00acp_6(Juliet)"
                ],
                "added_facts": [],
                "added_rules": [
                    "\u00acp_0(Juliet) \u2192 p_6(Juliet)"
                ]
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_5(Juliet)\n\u00acp_4(Juliet)\n\u00acp_3(Juliet)\np_1(Juliet)\np_2(Juliet)\n\u00acp_0(Juliet)\n\u2200x (p_12(x) \u2192 p_5(x))\np_10(Juliet) \u2228 p_4(Juliet)\n(p_11(Juliet) \u2295 p_12(Juliet)) \u2192 p_3(Juliet)\n\u2200x ((p_10(x) \u2227 p_9(x)) \u2192 p_11(x))\n\u2200x (p_8(x) \u2192 (p_1(x) \u2295 p_2(x)))\n\u2200x ((p_8(x) \u2228 p_9(x)) \u2192 p_7(x))\np_0(Juliet) \u2192 (p_6(Juliet) \u2295 p_7(Juliet))\n\u00acp_0(Juliet) \u2192 p_6(Juliet)\n\u2200x (\u00acp_5(x) \u2192 \u00acp_12(x))\np_10(Juliet)\n\u00acp_12(Juliet)",
            "Initial Goal": "\u00acp_6(Juliet)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_5(Juliet)",
                    "-p_4(Juliet)",
                    "-p_3(Juliet)",
                    "p_1(Juliet)",
                    "p_2(Juliet)",
                    "-p_0(Juliet)",
                    "all x (p_12(x) -> p_5(x))",
                    "p_10(Juliet) | p_4(Juliet)",
                    "(-(p_11(Juliet) <-> p_12(Juliet))) -> p_3(Juliet)",
                    "all x ((p_10(x) & p_9(x)) -> p_11(x))",
                    "all x (p_8(x) -> (-(p_1(x) <-> p_2(x))))",
                    "all x ((p_8(x) | p_9(x)) -> p_7(x))",
                    "p_0(Juliet) -> (-(p_6(Juliet) <-> p_7(Juliet)))",
                    "-p_0(Juliet) -> p_6(Juliet)",
                    "all x (-p_5(x) -> -p_12(x))",
                    "p_10(Juliet)",
                    "-p_12(Juliet)"
                ],
                "formulas(goals)": [
                    "-(-p_6(Juliet))"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_10(Juliet)",
                    "\u00acp_12(Juliet)"
                ],
                "added_rules": [
                    "\u2200x (\u00acp_5(x) \u2192 \u00acp_12(x))"
                ]
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_5(Juliet)\n\u00acp_4(Juliet)\n\u00acp_3(Juliet)\np_1(Juliet)\np_2(Juliet)\n\u00acp_0(Juliet)\n\u2200x (p_12(x) \u2192 p_5(x))\np_10(Juliet) \u2228 p_4(Juliet)\n((p_11(Juliet) \u2228 p_12(Juliet)) \u2227 \u00ac(p_11(Juliet) \u2227 p_12(Juliet))) \u2192 p_3(Juliet)\n\u2200x (p_10(x) \u2192 (p_9(x) \u2192 p_11(x)))\n\u2200x (p_8(x) \u2192 (p_1(x) \u2295 p_2(x)))\n\u2200x ((p_8(x) \u2228 p_9(x)) \u2192 p_7(x))\np_0(Juliet) \u2192 (p_6(Juliet) \u2295 p_7(Juliet))\n\u00acp_0(Juliet) \u2192 p_6(Juliet)\n\u2200x (\u00acp_5(x) \u2192 \u00acp_12(x))\np_10(Juliet)\n\u00acp_12(Juliet)\np_9(Juliet) \u2192 p_11(Juliet)",
            "Initial Goal": "\u00acp_6(Juliet)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_5(Juliet).",
                    "-p_4(Juliet).",
                    "-p_3(Juliet).",
                    "p_1(Juliet).",
                    "p_2(Juliet).",
                    "-p_0(Juliet).",
                    "all x (p_12(x) -> p_5(x)).",
                    "p_10(Juliet) | p_4(Juliet).",
                    "((p_11(Juliet) | p_12(Juliet)) & -(p_11(Juliet) & p_12(Juliet))) -> p_3(Juliet).",
                    "all x (p_10(x) -> (p_9(x) -> p_11(x))).",
                    "all x (p_8(x) -> (-(p_1(x) <-> p_2(x)))).",
                    "all x ((p_8(x) | p_9(x)) -> p_7(x)).",
                    "p_0(Juliet) -> (-(p_6(Juliet) <-> p_7(Juliet))).",
                    "-p_0(Juliet) -> p_6(Juliet).",
                    "all x (-p_5(x) -> -p_12(x)).",
                    "p_10(Juliet).",
                    "-p_12(Juliet).",
                    "p_9(Juliet) -> p_11(Juliet)."
                ],
                "formulas(goals)": [
                    "p_6(Juliet)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "(p_11(Juliet) \u2295 p_12(Juliet)) \u2192 p_3(Juliet)",
                    "\u2200x ((p_10(x) \u2227 p_9(x)) \u2192 p_11(x))"
                ],
                "added_facts": [],
                "added_rules": [
                    "((p_11(Juliet) \u2228 p_12(Juliet)) \u2227 \u00ac(p_11(Juliet) \u2227 p_12(Juliet))) \u2192 p_3(Juliet)",
                    "\u2200x (p_10(x) \u2192 (p_9(x) \u2192 p_11(x)))",
                    "p_9(Juliet) \u2192 p_11(Juliet)"
                ]
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_5(Juliet)\n\u00acp_4(Juliet)\n\u00acp_3(Juliet)\np_1(Juliet)\np_2(Juliet)\n\u00acp_0(Juliet)\n\u2200x (p_12(x) \u2192 p_5(x))\np_10(Juliet) \u2228 p_4(Juliet)\n((p_11(Juliet) \u2228 p_12(Juliet)) \u2227 \u00ac(p_11(Juliet) \u2227 p_12(Juliet))) \u2192 p_3(Juliet)\n\u2200x (p_10(x) \u2192 (p_9(x) \u2192 p_11(x)))\n\u2200x (p_8(x) \u2192 (p_1(x) \u2295 p_2(x)))\n\u2200x ((p_8(x) \u2228 p_9(x)) \u2192 p_7(x))\np_0(Juliet) \u2192 (p_6(Juliet) \u2295 p_7(Juliet))\n\u00acp_0(Juliet) \u2192 p_6(Juliet)\n\u2200x (\u00acp_5(x) \u2192 \u00acp_12(x))\np_10(Juliet)\n\u00acp_12(Juliet)\np_9(Juliet) \u2192 p_11(Juliet)\np_6(Juliet)\n\u2200x ((p_10(x) \u2227 p_9(x)) \u2192 p_11(x))\np_6(Juliet) \u2228 \u00acp_6(Juliet)",
            "Initial Goal": "\u00acp_6(Juliet)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_5(Juliet)",
                    "-p_4(Juliet)",
                    "-p_3(Juliet)",
                    "p_1(Juliet)",
                    "p_2(Juliet)",
                    "-p_0(Juliet)",
                    "all x (p_12(x) -> p_5(x))",
                    "p_10(Juliet) | p_4(Juliet)",
                    "((p_11(Juliet) | p_12(Juliet)) & (-(p_11(Juliet) & p_12(Juliet)))) -> p_3(Juliet)",
                    "all x (p_10(x) -> (p_9(x) -> p_11(x)))",
                    "all x (p_8(x) -> -(p_1(x) <-> p_2(x)))",
                    "all x ((p_8(x) | p_9(x)) -> p_7(x))",
                    "p_0(Juliet) -> -(p_6(Juliet) <-> p_7(Juliet))",
                    "-p_0(Juliet) -> p_6(Juliet)",
                    "all x (-p_5(x) -> -p_12(x))",
                    "p_10(Juliet)",
                    "-p_12(Juliet)",
                    "p_9(Juliet) -> p_11(Juliet)",
                    "p_6(Juliet)",
                    "all x ((p_10(x) & p_9(x)) -> p_11(x))",
                    "p_6(Juliet) | -p_6(Juliet)"
                ],
                "formulas(goals)": [
                    "p_6(Juliet)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_6(Juliet)",
                    "p_6(Juliet) \u2228 \u00acp_6(Juliet)"
                ],
                "added_rules": [
                    "\u2200x ((p_10(x) \u2227 p_9(x)) \u2192 p_11(x))"
                ]
            }
        }
    ]
}