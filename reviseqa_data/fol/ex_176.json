{
    "background_story": "Sofia was a young and fearless falconer who had a special bond with her kestrel, Zephyr. She spent most of her days in the rolling hills and countryside, learning the ancient art of falconry from her father. Sofia's patience, dedication, and gentle hands made her a natural with the birds. As she grew older, her fascination with kestrels only deepened, and she began to study their behavior, habitat, and conservation. Sofia's passion led her to become a leading expert on kestrels, working tirelessly to protect their populations and educate others about these magnificent creatures. Her nickname, 'The Kestrel Whisperer,' was well-deserved, as she could coax even the most skittish birds to perch on her arm, trusting her completely.",
    "predicates": [
        {
            "id": 0,
            "name": "respected"
        },
        {
            "id": 1,
            "name": "earns_trust"
        },
        {
            "id": 2,
            "name": "loves_animals"
        },
        {
            "id": 3,
            "name": "helps_others"
        },
        {
            "id": 4,
            "name": "teaches_others"
        },
        {
            "id": 5,
            "name": "volunteers"
        },
        {
            "id": 6,
            "name": "falconer"
        },
        {
            "id": 7,
            "name": "conservationist"
        },
        {
            "id": 8,
            "name": "handles_birds"
        },
        {
            "id": 9,
            "name": "gentle_touch"
        },
        {
            "id": 10,
            "name": "understands_nature"
        },
        {
            "id": 11,
            "name": "caring"
        },
        {
            "id": 12,
            "name": "knows_wildlife"
        },
        {
            "id": 13,
            "name": "protects_environment"
        },
        {
            "id": 14,
            "name": "supports_community"
        },
        {
            "id": 15,
            "name": "outdoorsy"
        },
        {
            "id": 16,
            "name": "patient_person"
        },
        {
            "id": 17,
            "name": "trains_animals"
        },
        {
            "id": 18,
            "name": "rides_horses"
        },
        {
            "id": 19,
            "name": "studies_wildlife"
        },
        {
            "id": 20,
            "name": "observes_habitat"
        },
        {
            "id": 21,
            "name": "moves_softly"
        },
        {
            "id": 22,
            "name": "speaks_gently"
        },
        {
            "id": 23,
            "name": "soothes_animals"
        },
        {
            "id": 24,
            "name": "nurtures_creatures"
        },
        {
            "id": 25,
            "name": "is_compassionate"
        },
        {
            "id": 26,
            "name": "fights_pollution"
        },
        {
            "id": 27,
            "name": "studies_ecology"
        },
        {
            "id": 28,
            "name": "lives_rurally"
        },
        {
            "id": 29,
            "name": "fosters_wildlife"
        }
    ],
    "subject_name": "Sofia",
    "subject_category": "human",
    "keyword": "kestrel",
    "all_facts": [
        {
            "id": 0,
            "subject": "Sofia",
            "text": "Sofia is respected.",
            "fol": "p_0(Sofia)",
            "str_fol": "respected(Sofia)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Sofia",
            "text": "Sofia can earn trust.",
            "fol": "p_1(Sofia)",
            "str_fol": "earns_trust(Sofia)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Sofia",
            "text": "Sofia loves animals.",
            "fol": "p_2(Sofia)",
            "str_fol": "loves_animals(Sofia)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Sofia",
            "text": "Sofia does not help others.",
            "fol": "\u00acp_3(Sofia)",
            "str_fol": "\u00achelps_others(Sofia)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Sofia",
            "text": "Sofia does not teach others.",
            "fol": "\u00acp_4(Sofia)",
            "str_fol": "\u00acteaches_others(Sofia)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Sofia",
            "text": "Sofia volunteers.",
            "fol": "p_5(Sofia)",
            "str_fol": "volunteers(Sofia)",
            "negation": false
        },
        {
            "id": 6,
            "subject": "Sofia",
            "text": "Sofia supports her community.",
            "fol": "p_14(Sofia)",
            "str_fol": "supports_community(Sofia)",
            "negation": false
        },
        {
            "id": 7,
            "subject": "Sofia",
            "text": "Sofia does not know wildlife.",
            "fol": "\u00acp_12(Sofia)",
            "str_fol": "\u00acknows_wildlife(Sofia)",
            "negation": true
        },
        {
            "id": 8,
            "subject": "Sofia",
            "text": "Sofia does not protect the environment.",
            "fol": "\u00acp_13(Sofia)",
            "str_fol": "\u00acprotects_environment(Sofia)",
            "negation": true
        },
        {
            "id": 9,
            "subject": "Sofia",
            "text": "Sofia is not caring.",
            "fol": "\u00acp_11(Sofia)",
            "str_fol": "\u00accaring(Sofia)",
            "negation": true
        },
        {
            "id": 10,
            "subject": "Sofia",
            "text": "Sofia does not have a gentle touch.",
            "fol": "\u00acp_9(Sofia)",
            "str_fol": "\u00acgentle_touch(Sofia)",
            "negation": true
        },
        {
            "id": 11,
            "subject": "Sofia",
            "text": "Sofia does not handle birds.",
            "fol": "\u00acp_8(Sofia)",
            "str_fol": "\u00achandles_birds(Sofia)",
            "negation": true
        },
        {
            "id": 12,
            "subject": "Sofia",
            "text": "Sofia is a conservationist.",
            "fol": "p_7(Sofia)",
            "str_fol": "conservationist(Sofia)",
            "negation": false
        }
    ],
    "context_facts": [
        {
            "id": 5,
            "subject": "Sofia",
            "text": "Sofia volunteers.",
            "fol": "p_5(Sofia)",
            "str_fol": "volunteers(Sofia)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Sofia",
            "text": "Sofia does not teach others.",
            "fol": "\u00acp_4(Sofia)",
            "str_fol": "\u00acteaches_others(Sofia)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Sofia",
            "text": "Sofia does not help others.",
            "fol": "\u00acp_3(Sofia)",
            "str_fol": "\u00achelps_others(Sofia)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Sofia",
            "text": "Sofia loves animals.",
            "fol": "p_2(Sofia)",
            "str_fol": "loves_animals(Sofia)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Sofia",
            "text": "Sofia can earn trust.",
            "fol": "p_1(Sofia)",
            "str_fol": "earns_trust(Sofia)",
            "negation": false
        },
        {
            "id": 0,
            "subject": "Sofia",
            "text": "Sofia is respected.",
            "fol": "p_0(Sofia)",
            "str_fol": "respected(Sofia)",
            "negation": false
        }
    ],
    "context_rules": [
        {
            "id": 8,
            "text": "All people who volunteer support their community.",
            "fol": "\u2200x (p_5(x) \u2192 p_14(x))",
            "str_fol": "\u2200x (volunteers(x) \u2192 supports_community(x))"
        },
        {
            "id": 7,
            "text": "If Sofia knows wildlife, then she will teach others.",
            "fol": "p_12(Sofia) \u2192 p_4(Sofia)",
            "str_fol": "knows_wildlife(Sofia) \u2192 teaches_others(Sofia)"
        },
        {
            "id": 6,
            "text": "For Sofia, either she supports her community or protects the environment, but not necessarily both.",
            "fol": "p_14(Sofia) \u2295 p_13(Sofia)",
            "str_fol": "supports_community(Sofia) \u2295 protects_environment(Sofia)"
        },
        {
            "id": 5,
            "text": "Anyone who is caring either helps others or protects the environment (or both).",
            "fol": "\u2200x (p_11(x) \u2192 (p_3(x) \u2228 p_13(x)))",
            "str_fol": "\u2200x (caring(x) \u2192 (helps_others(x) \u2228 protects_environment(x)))"
        },
        {
            "id": 4,
            "text": "If Sofia has a gentle touch, then she is caring and knows wildlife.",
            "fol": "p_9(Sofia) \u2192 (p_11(Sofia) \u2227 p_12(Sofia))",
            "str_fol": "gentle_touch(Sofia) \u2192 (caring(Sofia) \u2227 knows_wildlife(Sofia))"
        },
        {
            "id": 3,
            "text": "If Sofia understands nature, then she loves animals.",
            "fol": "p_10(Sofia) \u2192 p_2(Sofia)",
            "str_fol": "understands_nature(Sofia) \u2192 loves_animals(Sofia)"
        },
        {
            "id": 2,
            "text": "If Sofia handles birds, then she has a gentle touch and understands nature.",
            "fol": "p_8(Sofia) \u2192 (p_9(Sofia) \u2227 p_10(Sofia))",
            "str_fol": "handles_birds(Sofia) \u2192 (gentle_touch(Sofia) \u2227 understands_nature(Sofia))"
        },
        {
            "id": 1,
            "text": "If Sofia is a falconer or handles birds, then she can earn trust.",
            "fol": "(p_6(Sofia) \u2228 p_8(Sofia)) \u2192 p_1(Sofia)",
            "str_fol": "(falconer(Sofia) \u2228 handles_birds(Sofia)) \u2192 earns_trust(Sofia)"
        },
        {
            "id": 0,
            "text": "If Sofia is either a falconer or a conservationist (but not both), then she is respected.",
            "fol": "(p_6(Sofia) \u2295 p_7(Sofia)) \u2192 p_0(Sofia)",
            "str_fol": "(falconer(Sofia) \u2295 conservationist(Sofia)) \u2192 respected(Sofia)"
        }
    ],
    "context": [
        {
            "id": 5,
            "subject": "Sofia",
            "text": "Sofia volunteers.",
            "fol": "p_5(Sofia)",
            "str_fol": "volunteers(Sofia)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Sofia",
            "text": "Sofia does not teach others.",
            "fol": "\u00acp_4(Sofia)",
            "str_fol": "\u00acteaches_others(Sofia)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Sofia",
            "text": "Sofia does not help others.",
            "fol": "\u00acp_3(Sofia)",
            "str_fol": "\u00achelps_others(Sofia)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Sofia",
            "text": "Sofia loves animals.",
            "fol": "p_2(Sofia)",
            "str_fol": "loves_animals(Sofia)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Sofia",
            "text": "Sofia can earn trust.",
            "fol": "p_1(Sofia)",
            "str_fol": "earns_trust(Sofia)",
            "negation": false
        },
        {
            "id": 0,
            "subject": "Sofia",
            "text": "Sofia is respected.",
            "fol": "p_0(Sofia)",
            "str_fol": "respected(Sofia)",
            "negation": false
        },
        {
            "id": 8,
            "text": "All people who volunteer support their community.",
            "fol": "\u2200x (p_5(x) \u2192 p_14(x))",
            "str_fol": "\u2200x (volunteers(x) \u2192 supports_community(x))"
        },
        {
            "id": 7,
            "text": "If Sofia knows wildlife, then she will teach others.",
            "fol": "p_12(Sofia) \u2192 p_4(Sofia)",
            "str_fol": "knows_wildlife(Sofia) \u2192 teaches_others(Sofia)"
        },
        {
            "id": 6,
            "text": "For Sofia, either she supports her community or protects the environment, but not necessarily both.",
            "fol": "p_14(Sofia) \u2295 p_13(Sofia)",
            "str_fol": "supports_community(Sofia) \u2295 protects_environment(Sofia)"
        },
        {
            "id": 5,
            "text": "Anyone who is caring either helps others or protects the environment (or both).",
            "fol": "\u2200x (p_11(x) \u2192 (p_3(x) \u2228 p_13(x)))",
            "str_fol": "\u2200x (caring(x) \u2192 (helps_others(x) \u2228 protects_environment(x)))"
        },
        {
            "id": 4,
            "text": "If Sofia has a gentle touch, then she is caring and knows wildlife.",
            "fol": "p_9(Sofia) \u2192 (p_11(Sofia) \u2227 p_12(Sofia))",
            "str_fol": "gentle_touch(Sofia) \u2192 (caring(Sofia) \u2227 knows_wildlife(Sofia))"
        },
        {
            "id": 3,
            "text": "If Sofia understands nature, then she loves animals.",
            "fol": "p_10(Sofia) \u2192 p_2(Sofia)",
            "str_fol": "understands_nature(Sofia) \u2192 loves_animals(Sofia)"
        },
        {
            "id": 2,
            "text": "If Sofia handles birds, then she has a gentle touch and understands nature.",
            "fol": "p_8(Sofia) \u2192 (p_9(Sofia) \u2227 p_10(Sofia))",
            "str_fol": "handles_birds(Sofia) \u2192 (gentle_touch(Sofia) \u2227 understands_nature(Sofia))"
        },
        {
            "id": 1,
            "text": "If Sofia is a falconer or handles birds, then she can earn trust.",
            "fol": "(p_6(Sofia) \u2228 p_8(Sofia)) \u2192 p_1(Sofia)",
            "str_fol": "(falconer(Sofia) \u2228 handles_birds(Sofia)) \u2192 earns_trust(Sofia)"
        },
        {
            "id": 0,
            "text": "If Sofia is either a falconer or a conservationist (but not both), then she is respected.",
            "fol": "(p_6(Sofia) \u2295 p_7(Sofia)) \u2192 p_0(Sofia)",
            "str_fol": "(falconer(Sofia) \u2295 conservationist(Sofia)) \u2192 respected(Sofia)"
        }
    ],
    "context_fol": "p_5(Sofia)\n\u00acp_4(Sofia)\n\u00acp_3(Sofia)\np_2(Sofia)\np_1(Sofia)\np_0(Sofia)\n\u2200x (p_5(x) \u2192 p_14(x))\np_12(Sofia) \u2192 p_4(Sofia)\np_14(Sofia) \u2295 p_13(Sofia)\n\u2200x (p_11(x) \u2192 (p_3(x) \u2228 p_13(x)))\np_9(Sofia) \u2192 (p_11(Sofia) \u2227 p_12(Sofia))\np_10(Sofia) \u2192 p_2(Sofia)\np_8(Sofia) \u2192 (p_9(Sofia) \u2227 p_10(Sofia))\n(p_6(Sofia) \u2228 p_8(Sofia)) \u2192 p_1(Sofia)\n(p_6(Sofia) \u2295 p_7(Sofia)) \u2192 p_0(Sofia)",
    "conclusion": {
        "id": 12,
        "subject": "Sofia",
        "text": "Sofia is a conservationist.",
        "fol": "p_7(Sofia)",
        "str_fol": "conservationist(Sofia)",
        "negation": false
    },
    "initial_answer": "Uncertain",
    "initial_goal": "p_7(Sofia)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 5,
                    "subject": "Sofia",
                    "text": "Sofia volunteers.",
                    "fol": "p_5(Sofia)",
                    "str_fol": "volunteers(Sofia)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 8,
                    "text": "All people who volunteer support their community.",
                    "fol": "\u2200x (p_5(x) \u2192 p_14(x))",
                    "str_fol": "\u2200x (volunteers(x) \u2192 supports_community(x))"
                }
            ],
            "conclusion": {
                "id": 6,
                "subject": "Sofia",
                "text": "Sofia supports her community.",
                "fol": "p_14(Sofia)",
                "str_fol": "supports_community(Sofia)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 4,
                    "subject": "Sofia",
                    "text": "Sofia does not teach others.",
                    "fol": "\u00acp_4(Sofia)",
                    "str_fol": "\u00acteaches_others(Sofia)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 7,
                    "text": "If Sofia knows wildlife, then she will teach others.",
                    "fol": "p_12(Sofia) \u2192 p_4(Sofia)",
                    "str_fol": "knows_wildlife(Sofia) \u2192 teaches_others(Sofia)"
                }
            ],
            "conclusion": {
                "id": 7,
                "subject": "Sofia",
                "text": "Sofia does not know wildlife.",
                "fol": "\u00acp_12(Sofia)",
                "str_fol": "\u00acknows_wildlife(Sofia)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 6,
                    "subject": "Sofia",
                    "text": "Sofia supports her community.",
                    "fol": "p_14(Sofia)",
                    "str_fol": "supports_community(Sofia)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 6,
                    "text": "For Sofia, either she supports her community or protects the environment, but not necessarily both.",
                    "fol": "p_14(Sofia) \u2295 p_13(Sofia)",
                    "str_fol": "supports_community(Sofia) \u2295 protects_environment(Sofia)"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Sofia",
                "text": "Sofia does not protect the environment.",
                "fol": "\u00acp_13(Sofia)",
                "str_fol": "\u00acprotects_environment(Sofia)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 3,
                    "subject": "Sofia",
                    "text": "Sofia does not help others.",
                    "fol": "\u00acp_3(Sofia)",
                    "str_fol": "\u00achelps_others(Sofia)",
                    "negation": true
                },
                {
                    "id": 8,
                    "subject": "Sofia",
                    "text": "Sofia does not protect the environment.",
                    "fol": "\u00acp_13(Sofia)",
                    "str_fol": "\u00acprotects_environment(Sofia)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "Anyone who is caring either helps others or protects the environment (or both).",
                    "fol": "\u2200x (p_11(x) \u2192 (p_3(x) \u2228 p_13(x)))",
                    "str_fol": "\u2200x (caring(x) \u2192 (helps_others(x) \u2228 protects_environment(x)))"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Sofia",
                "text": "Sofia is not caring.",
                "fol": "\u00acp_11(Sofia)",
                "str_fol": "\u00accaring(Sofia)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 9,
                    "subject": "Sofia",
                    "text": "Sofia is not caring.",
                    "fol": "\u00acp_11(Sofia)",
                    "str_fol": "\u00accaring(Sofia)",
                    "negation": true
                },
                {
                    "id": 7,
                    "subject": "Sofia",
                    "text": "Sofia does not know wildlife.",
                    "fol": "\u00acp_12(Sofia)",
                    "str_fol": "\u00acknows_wildlife(Sofia)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "If Sofia has a gentle touch, then she is caring and knows wildlife.",
                    "fol": "p_9(Sofia) \u2192 (p_11(Sofia) \u2227 p_12(Sofia))",
                    "str_fol": "gentle_touch(Sofia) \u2192 (caring(Sofia) \u2227 knows_wildlife(Sofia))"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Sofia",
                "text": "Sofia does not have a gentle touch.",
                "fol": "\u00acp_9(Sofia)",
                "str_fol": "\u00acgentle_touch(Sofia)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 2,
                    "subject": "Sofia",
                    "text": "Sofia loves animals.",
                    "fol": "p_2(Sofia)",
                    "str_fol": "loves_animals(Sofia)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "If Sofia understands nature, then she loves animals.",
                    "fol": "p_10(Sofia) \u2192 p_2(Sofia)",
                    "str_fol": "understands_nature(Sofia) \u2192 loves_animals(Sofia)"
                }
            ],
            "conclusion": null
        },
        {
            "facts": [
                {
                    "id": 10,
                    "subject": "Sofia",
                    "text": "Sofia does not have a gentle touch.",
                    "fol": "\u00acp_9(Sofia)",
                    "str_fol": "\u00acgentle_touch(Sofia)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "If Sofia handles birds, then she has a gentle touch and understands nature.",
                    "fol": "p_8(Sofia) \u2192 (p_9(Sofia) \u2227 p_10(Sofia))",
                    "str_fol": "handles_birds(Sofia) \u2192 (gentle_touch(Sofia) \u2227 understands_nature(Sofia))"
                }
            ],
            "conclusion": {
                "id": 11,
                "subject": "Sofia",
                "text": "Sofia does not handle birds.",
                "fol": "\u00acp_8(Sofia)",
                "str_fol": "\u00achandles_birds(Sofia)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 11,
                    "subject": "Sofia",
                    "text": "Sofia does not handle birds.",
                    "fol": "\u00acp_8(Sofia)",
                    "str_fol": "\u00achandles_birds(Sofia)",
                    "negation": true
                },
                {
                    "id": 1,
                    "subject": "Sofia",
                    "text": "Sofia can earn trust.",
                    "fol": "p_1(Sofia)",
                    "str_fol": "earns_trust(Sofia)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "If Sofia is a falconer or handles birds, then she can earn trust.",
                    "fol": "(p_6(Sofia) \u2228 p_8(Sofia)) \u2192 p_1(Sofia)",
                    "str_fol": "(falconer(Sofia) \u2228 handles_birds(Sofia)) \u2192 earns_trust(Sofia)"
                }
            ],
            "conclusion": null
        },
        {
            "facts": [
                {
                    "id": 0,
                    "subject": "Sofia",
                    "text": "Sofia is respected.",
                    "fol": "p_0(Sofia)",
                    "str_fol": "respected(Sofia)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "If Sofia is either a falconer or a conservationist (but not both), then she is respected.",
                    "fol": "(p_6(Sofia) \u2295 p_7(Sofia)) \u2192 p_0(Sofia)",
                    "str_fol": "(falconer(Sofia) \u2295 conservationist(Sofia)) \u2192 respected(Sofia)"
                }
            ],
            "conclusion": null
        }
    ],
    "proof_trace": null,
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "UNCERTAIN",
            "Edited Assumptions": "p_5(Sofia)\n\u00acp_4(Sofia)\n\u00acp_3(Sofia)\np_2(Sofia)\np_1(Sofia)\np_0(Sofia)\n\u2200x (p_5(x) \u2192 p_14(x))\np_12(Sofia) \u2192 p_4(Sofia)\np_14(Sofia) \u2295 p_13(Sofia)\n\u2200x (p_11(x) \u2192 (p_3(x) \u2228 p_13(x)))\np_9(Sofia) \u2192 (p_11(Sofia) \u2227 p_12(Sofia))\np_10(Sofia) \u2192 p_2(Sofia)\np_8(Sofia) \u2192 (p_9(Sofia) \u2227 p_10(Sofia))\n(p_6(Sofia) \u2228 p_8(Sofia)) \u2192 p_1(Sofia)\n(p_6(Sofia) \u2295 p_7(Sofia)) \u2192 p_0(Sofia)",
            "Initial Goal": "p_7(Sofia)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Sofia)",
                    "-p_4(Sofia)",
                    "-p_3(Sofia)",
                    "p_2(Sofia)",
                    "p_1(Sofia)",
                    "p_0(Sofia)",
                    "all x (p_5(x) -> p_14(x))",
                    "(p_12(Sofia) -> p_4(Sofia))",
                    "-(p_14(Sofia) <-> p_13(Sofia))",
                    "all x (p_11(x) -> (p_3(x) | p_13(x)))",
                    "(p_9(Sofia) -> (p_11(Sofia) & p_12(Sofia)))",
                    "(p_10(Sofia) -> p_2(Sofia))",
                    "(p_8(Sofia) -> (p_9(Sofia) & p_10(Sofia)))",
                    "((p_6(Sofia) | p_8(Sofia)) -> p_1(Sofia))",
                    "(-(p_6(Sofia) <-> p_7(Sofia)) -> p_0(Sofia))",
                    "(-p_13(Sofia) -> p_7(Sofia))"
                ],
                "formulas(goals)": [
                    "p_7(Sofia)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "\u00acp_13(Sofia) \u2192 p_7(Sofia)"
                ]
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_5(Sofia)\n\u00acp_4(Sofia)\n\u00acp_3(Sofia)\np_2(Sofia)\np_1(Sofia)\np_0(Sofia)\n\u2200x (p_5(x) \u2192 p_14(x))\np_12(Sofia) \u2192 p_4(Sofia)\np_14(Sofia) \u2295 p_13(Sofia)\n\u2200x (p_11(x) \u2192 (p_3(x) \u2228 p_13(x)))\np_9(Sofia) \u2192 (p_11(Sofia) \u2227 p_12(Sofia))\np_10(Sofia) \u2192 p_2(Sofia)\np_8(Sofia) \u2192 (p_9(Sofia) \u2227 p_10(Sofia))\n(p_6(Sofia) \u2228 p_8(Sofia)) \u2192 p_1(Sofia)\n(p_6(Sofia) \u2295 p_7(Sofia)) \u2192 p_0(Sofia)\np_7(Sofia) \u2192 p_13(Sofia)",
            "Initial Goal": "p_7(Sofia)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Sofia)",
                    "-p_4(Sofia)",
                    "-p_3(Sofia)",
                    "p_2(Sofia)",
                    "p_1(Sofia)",
                    "p_0(Sofia)",
                    "all x (p_5(x) -> p_14(x))",
                    "p_12(Sofia) -> p_4(Sofia)",
                    "-(p_14(Sofia) <-> p_13(Sofia))",
                    "all x (p_11(x) -> (p_3(x) | p_13(x)))",
                    "p_9(Sofia) -> (p_11(Sofia) & p_12(Sofia))",
                    "p_10(Sofia) -> p_2(Sofia)",
                    "p_8(Sofia) -> (p_9(Sofia) & p_10(Sofia))",
                    "(p_6(Sofia) | p_8(Sofia)) -> p_1(Sofia)",
                    "(-(p_6(Sofia) <-> p_7(Sofia))) -> p_0(Sofia)",
                    "p_7(Sofia) -> p_13(Sofia)"
                ],
                "formulas(goals)": [
                    "-p_7(Sofia)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "p_7(Sofia) \u2192 p_13(Sofia)"
                ]
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_5(Sofia)\n\u00acp_4(Sofia)\n\u00acp_3(Sofia)\np_2(Sofia)\np_1(Sofia)\np_0(Sofia)\n\u2200x (p_5(x) \u2192 p_14(x))\np_12(Sofia) \u2192 p_4(Sofia)\np_14(Sofia) \u2295 p_13(Sofia)\n\u2200x (p_11(x) \u2192 (p_3(x) \u2228 p_13(x)))\np_9(Sofia) \u2192 (p_11(Sofia) \u2227 p_12(Sofia))\np_10(Sofia) \u2192 p_2(Sofia)\np_8(Sofia) \u2192 (p_9(Sofia) \u2227 p_10(Sofia))\n(p_6(Sofia) \u2228 p_8(Sofia)) \u2192 p_1(Sofia)\n(p_6(Sofia) \u2295 p_7(Sofia)) \u2192 p_0(Sofia)\np_7(Sofia) \u2192 p_13(Sofia)\np_14(Sofia)\n\u00acp_13(Sofia)\n\u00acp_12(Sofia)\np_11(Sofia) \u2192 p_13(Sofia)",
            "Initial Goal": "p_7(Sofia)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Sofia)",
                    "-p_4(Sofia)",
                    "-p_3(Sofia)",
                    "p_2(Sofia)",
                    "p_1(Sofia)",
                    "p_0(Sofia)",
                    "all x (p_5(x) -> p_14(x))",
                    "p_12(Sofia) -> p_4(Sofia)",
                    "-(p_14(Sofia) <-> p_13(Sofia))",
                    "all x (p_11(x) -> (p_3(x) | p_13(x)))",
                    "p_9(Sofia) -> (p_11(Sofia) & p_12(Sofia))",
                    "p_10(Sofia) -> p_2(Sofia)",
                    "p_8(Sofia) -> (p_9(Sofia) & p_10(Sofia))",
                    "(p_6(Sofia) | p_8(Sofia)) -> p_1(Sofia)",
                    "(-(p_6(Sofia) <-> p_7(Sofia))) -> p_0(Sofia)",
                    "p_7(Sofia) -> p_13(Sofia)",
                    "p_14(Sofia)",
                    "-p_13(Sofia)",
                    "-p_12(Sofia)",
                    "p_11(Sofia) -> p_13(Sofia)"
                ],
                "formulas(goals)": [
                    "-p_7(Sofia)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_14(Sofia)",
                    "\u00acp_13(Sofia)",
                    "\u00acp_12(Sofia)"
                ],
                "added_rules": [
                    "p_11(Sofia) \u2192 p_13(Sofia)"
                ]
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_5(Sofia)\n\u00acp_4(Sofia)\n\u00acp_3(Sofia)\np_2(Sofia)\np_1(Sofia)\np_0(Sofia)\n\u2200x (p_5(x) \u2192 p_14(x))\np_12(Sofia) \u2192 p_4(Sofia)\np_14(Sofia) \u2295 p_13(Sofia)\n\u2200x (p_11(x) \u2192 (p_3(x) \u2228 p_13(x)))\np_9(Sofia) \u2192 (p_11(Sofia) \u2227 p_12(Sofia))\np_10(Sofia) \u2192 p_2(Sofia)\np_8(Sofia) \u2192 (p_9(Sofia) \u2227 p_10(Sofia))\n(p_6(Sofia) \u2228 p_8(Sofia)) \u2192 p_1(Sofia)\n(p_6(Sofia) \u2295 p_7(Sofia)) \u2192 p_0(Sofia)\np_14(Sofia)\n\u00acp_13(Sofia)\n\u00acp_12(Sofia)\np_11(Sofia) \u2192 p_13(Sofia)\np_14(Sofia) \u2192 p_7(Sofia)",
            "Initial Goal": "p_7(Sofia)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Sofia)",
                    "-p_4(Sofia)",
                    "-p_3(Sofia)",
                    "p_2(Sofia)",
                    "p_1(Sofia)",
                    "p_0(Sofia)",
                    "all x (p_5(x) -> p_14(x))",
                    "p_12(Sofia) -> p_4(Sofia)",
                    "-(p_14(Sofia) <-> p_13(Sofia))",
                    "all x (p_11(x) -> (p_3(x) | p_13(x)))",
                    "p_9(Sofia) -> (p_11(Sofia) & p_12(Sofia))",
                    "p_10(Sofia) -> p_2(Sofia)",
                    "p_8(Sofia) -> (p_9(Sofia) & p_10(Sofia))",
                    "(p_6(Sofia) | p_8(Sofia)) -> p_1(Sofia)",
                    "(-(p_6(Sofia) <-> p_7(Sofia))) -> p_0(Sofia)",
                    "p_14(Sofia)",
                    "-p_13(Sofia)",
                    "-p_12(Sofia)",
                    "p_11(Sofia) -> p_13(Sofia)",
                    "p_14(Sofia) -> p_7(Sofia)"
                ],
                "formulas(goals)": [
                    "p_7(Sofia)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_7(Sofia) \u2192 p_13(Sofia)"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_14(Sofia) \u2192 p_7(Sofia)"
                ]
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_5(Sofia)\n\u00acp_4(Sofia)\n\u00acp_3(Sofia)\np_2(Sofia)\np_1(Sofia)\np_0(Sofia)\n\u2200x (p_5(x) \u2192 p_14(x))\np_12(Sofia) \u2192 p_4(Sofia)\np_14(Sofia) \u2295 p_13(Sofia)\n\u2200x ((p_11(x) \u2227 \u00acp_3(x)) \u2192 p_13(x))\np_9(Sofia) \u2192 (p_11(Sofia) \u2227 p_12(Sofia))\np_10(Sofia) \u2192 p_2(Sofia)\np_8(Sofia) \u2192 (p_9(Sofia) \u2227 p_10(Sofia))\n(p_6(Sofia) \u2228 p_8(Sofia)) \u2192 p_1(Sofia)\n(p_6(Sofia) \u2295 p_7(Sofia)) \u2192 p_0(Sofia)\np_14(Sofia)\n\u00acp_13(Sofia)\n\u00acp_12(Sofia)\np_11(Sofia) \u2192 p_13(Sofia)\np_14(Sofia) \u2192 p_7(Sofia)\n\u00acp_11(Sofia)",
            "Initial Goal": "p_7(Sofia)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Sofia).",
                    "-p_4(Sofia).",
                    "-p_3(Sofia).",
                    "p_2(Sofia).",
                    "p_1(Sofia).",
                    "p_0(Sofia).",
                    "all x (p_5(x) -> p_14(x)).",
                    "p_12(Sofia) -> p_4(Sofia).",
                    "-(p_14(Sofia) <-> p_13(Sofia)).",
                    "all x ((p_11(x) & -p_3(x)) -> p_13(x)).",
                    "p_9(Sofia) -> (p_11(Sofia) & p_12(Sofia)).",
                    "p_10(Sofia) -> p_2(Sofia).",
                    "p_8(Sofia) -> (p_9(Sofia) & p_10(Sofia)).",
                    "(p_6(Sofia) | p_8(Sofia)) -> p_1(Sofia).",
                    "(-(p_6(Sofia) <-> p_7(Sofia))) -> p_0(Sofia).",
                    "p_14(Sofia).",
                    "-p_13(Sofia).",
                    "-p_12(Sofia).",
                    "p_11(Sofia) -> p_13(Sofia).",
                    "p_14(Sofia) -> p_7(Sofia).",
                    "-p_11(Sofia)."
                ],
                "formulas(goals)": [
                    "p_7(Sofia)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u2200x (p_11(x) \u2192 (p_3(x) \u2228 p_13(x)))"
                ],
                "added_facts": [
                    "\u00acp_11(Sofia)"
                ],
                "added_rules": [
                    "\u2200x ((p_11(x) \u2227 \u00acp_3(x)) \u2192 p_13(x))"
                ]
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_5(Sofia)\n\u00acp_4(Sofia)\n\u00acp_3(Sofia)\np_2(Sofia)\np_1(Sofia)\np_0(Sofia)\n\u2200x (p_5(x) \u2192 p_14(x))\np_12(Sofia) \u2192 p_4(Sofia)\np_14(Sofia) \u2295 p_13(Sofia)\n\u2200x ((p_11(x) \u2227 \u00acp_3(x)) \u2192 p_13(x))\np_9(Sofia) \u2192 (p_11(Sofia) \u2227 p_12(Sofia))\np_10(Sofia) \u2192 p_2(Sofia)\np_8(Sofia) \u2192 (p_9(Sofia) \u2227 p_10(Sofia))\n(p_6(Sofia) \u2228 p_8(Sofia)) \u2192 p_1(Sofia)\n(p_6(Sofia) \u2295 p_7(Sofia)) \u2192 p_0(Sofia)\np_14(Sofia)\n\u00acp_13(Sofia)\n\u00acp_12(Sofia)\np_11(Sofia) \u2192 p_13(Sofia)\n\u00acp_11(Sofia)\np_14(Sofia) \u2192 \u00acp_7(Sofia)",
            "Initial Goal": "p_7(Sofia)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Sofia)",
                    "-p_4(Sofia)",
                    "-p_3(Sofia)",
                    "p_2(Sofia)",
                    "p_1(Sofia)",
                    "p_0(Sofia)",
                    "all x (p_5(x) -> p_14(x))",
                    "p_12(Sofia) -> p_4(Sofia)",
                    "-(p_14(Sofia) <-> p_13(Sofia))",
                    "all x ((p_11(x) & -p_3(x)) -> p_13(x))",
                    "p_9(Sofia) -> (p_11(Sofia) & p_12(Sofia))",
                    "p_10(Sofia) -> p_2(Sofia)",
                    "p_8(Sofia) -> (p_9(Sofia) & p_10(Sofia))",
                    "(p_6(Sofia) | p_8(Sofia)) -> p_1(Sofia)",
                    "(-(p_6(Sofia) <-> p_7(Sofia))) -> p_0(Sofia)",
                    "p_14(Sofia)",
                    "-p_13(Sofia)",
                    "-p_12(Sofia)",
                    "p_11(Sofia) -> p_13(Sofia)",
                    "-p_11(Sofia)",
                    "p_14(Sofia) -> -p_7(Sofia)"
                ],
                "formulas(goals)": [
                    "-p_7(Sofia)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_14(Sofia) \u2192 p_7(Sofia)"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_14(Sofia) \u2192 \u00acp_7(Sofia)"
                ]
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_5(Sofia)\n\u00acp_4(Sofia)\n\u00acp_3(Sofia)\np_2(Sofia)\np_1(Sofia)\np_0(Sofia)\n\u2200x (p_5(x) \u2192 p_14(x))\np_12(Sofia) \u2192 p_4(Sofia)\np_14(Sofia) \u2295 p_13(Sofia)\n\u2200x ((p_11(x) \u2227 \u00acp_3(x)) \u2192 p_13(x))\n(p_9(Sofia) \u2192 p_11(Sofia)) \u2227 (p_9(Sofia) \u2192 p_12(Sofia))\np_10(Sofia) \u2192 p_2(Sofia)\n(p_8(Sofia) \u2192 p_9(Sofia)) \u2227 (p_8(Sofia) \u2192 p_10(Sofia))\n(p_6(Sofia) \u2228 p_8(Sofia)) \u2192 p_1(Sofia)\n(p_6(Sofia) \u2295 p_7(Sofia)) \u2192 p_0(Sofia)\np_14(Sofia)\n\u00acp_13(Sofia)\n\u00acp_12(Sofia)\np_11(Sofia) \u2192 p_13(Sofia)\n\u00acp_11(Sofia)\n\u00acp_14(Sofia) \u2228 \u00acp_7(Sofia)\np_7(Sofia) \u2192 \u00acp_14(Sofia)\np_7(Sofia) \u2192 p_0(Sofia)\np_7(Sofia) \u2192 p_1(Sofia)",
            "Initial Goal": "p_7(Sofia)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Sofia).",
                    "-p_4(Sofia).",
                    "-p_3(Sofia).",
                    "p_2(Sofia).",
                    "p_1(Sofia).",
                    "p_0(Sofia).",
                    "all x (p_5(x) -> p_14(x)).",
                    "p_12(Sofia) -> p_4(Sofia).",
                    "-(p_14(Sofia) <-> p_13(Sofia)).",
                    "all x ((p_11(x) & -p_3(x)) -> p_13(x)).",
                    "(p_9(Sofia) -> p_11(Sofia)) & (p_9(Sofia) -> p_12(Sofia)).",
                    "p_10(Sofia) -> p_2(Sofia).",
                    "(p_8(Sofia) -> p_9(Sofia)) & (p_8(Sofia) -> p_10(Sofia)).",
                    "(p_6(Sofia) | p_8(Sofia)) -> p_1(Sofia).",
                    "(-(p_6(Sofia) <-> p_7(Sofia))) -> p_0(Sofia).",
                    "p_14(Sofia).",
                    "-p_13(Sofia).",
                    "-p_12(Sofia).",
                    "p_11(Sofia) -> p_13(Sofia).",
                    "-p_11(Sofia).",
                    "-p_14(Sofia) | -p_7(Sofia).",
                    "p_7(Sofia) -> -p_14(Sofia).",
                    "p_7(Sofia) -> p_0(Sofia).",
                    "p_7(Sofia) -> p_1(Sofia)."
                ],
                "formulas(goals)": [
                    "-p_7(Sofia)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": []
            }
        }
    ]
}