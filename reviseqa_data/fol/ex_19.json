{
    "background_story": "Kevin was a young entrepreneur with a passion for fashion. He spent years perfecting his craft, designing and manufacturing high-quality clothing. After saving up enough money, Kevin launched his own clothing line, 'KevWear', which quickly gained popularity for its unique style and comfort. As his brand grew, Kevin became synonymous with trendy and affordable fashion. His logo, a stylized 'KW', became a status symbol among young adults. Kevin's commitment to quality and customer satisfaction helped him build a loyal customer base, and soon 'KevWear' was branded as one of the top fashion labels in the industry. With his brand's success, Kevin became a household name, known for his innovative designs and business acumen.",
    "predicates": [
        {
            "id": 0,
            "name": "has_good_taste"
        },
        {
            "id": 1,
            "name": "prioritizes_comfort"
        },
        {
            "id": 2,
            "name": "is_successful"
        },
        {
            "id": 3,
            "name": "is_creative"
        },
        {
            "id": 4,
            "name": "takes_risks"
        },
        {
            "id": 5,
            "name": "makes_textiles"
        },
        {
            "id": 6,
            "name": "creates_patterns"
        },
        {
            "id": 7,
            "name": "buy_KevWear"
        },
        {
            "id": 8,
            "name": "wear_regularly"
        },
        {
            "id": 9,
            "name": "look_stylish"
        },
        {
            "id": 10,
            "name": "dresses_well"
        },
        {
            "id": 11,
            "name": "values_quality"
        },
        {
            "id": 12,
            "name": "follows_trends"
        },
        {
            "id": 13,
            "name": "designs_clothing"
        },
        {
            "id": 14,
            "name": "sets_trends"
        },
        {
            "id": 15,
            "name": "is_innovative"
        },
        {
            "id": 16,
            "name": "likes_brand"
        },
        {
            "id": 17,
            "name": "gets_compliments"
        },
        {
            "id": 18,
            "name": "chooses_color"
        },
        {
            "id": 19,
            "name": "matches_outfit"
        },
        {
            "id": 20,
            "name": "appreciate_fashion"
        },
        {
            "id": 21,
            "name": "enjoy_shopping"
        },
        {
            "id": 22,
            "name": "pays_attention"
        },
        {
            "id": 23,
            "name": "enjoys_fashion"
        },
        {
            "id": 24,
            "name": "appreciate_design"
        },
        {
            "id": 25,
            "name": "is_influencer"
        },
        {
            "id": 26,
            "name": "is_traditional"
        },
        {
            "id": 27,
            "name": "thinks_outside_box"
        },
        {
            "id": 28,
            "name": "achieves_recognition"
        },
        {
            "id": 29,
            "name": "owns_brand"
        },
        {
            "id": 30,
            "name": "focuses_on_style"
        }
    ],
    "subject_name": "Kevin",
    "subject_category": "person",
    "keyword": "branded",
    "all_facts": [
        {
            "id": 0,
            "subject": "Kevin",
            "text": "Kevin has good taste in fashion.",
            "fol": "p_0(Kevin)",
            "str_fol": "has_good_taste(Kevin)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Kevin",
            "text": "Kevin does not prioritize comfort.",
            "fol": "\u00acp_1(Kevin)",
            "str_fol": "\u00acprioritizes_comfort(Kevin)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Kevin",
            "text": "Kevin is not successful.",
            "fol": "\u00acp_2(Kevin)",
            "str_fol": "\u00acis_successful(Kevin)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Kevin",
            "text": "Kevin is creative.",
            "fol": "p_3(Kevin)",
            "str_fol": "is_creative(Kevin)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Kevin",
            "text": "Kevin does not take risks.",
            "fol": "\u00acp_4(Kevin)",
            "str_fol": "\u00actakes_risks(Kevin)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Kevin",
            "text": "Kevin does not make textiles.",
            "fol": "\u00acp_5(Kevin)",
            "str_fol": "\u00acmakes_textiles(Kevin)",
            "negation": true
        },
        {
            "id": 6,
            "subject": "Kevin",
            "text": "Kevin creates patterns.",
            "fol": "p_6(Kevin)",
            "str_fol": "creates_patterns(Kevin)",
            "negation": false
        },
        {
            "id": 7,
            "subject": "Kevin",
            "text": "Kevin designs clothing.",
            "fol": "p_13(Kevin)",
            "str_fol": "designs_clothing(Kevin)",
            "negation": false
        },
        {
            "id": 8,
            "subject": "Kevin",
            "text": "Kevin is innovative.",
            "fol": "p_15(Kevin)",
            "str_fol": "is_innovative(Kevin)",
            "negation": false
        },
        {
            "id": 9,
            "subject": "Kevin",
            "text": "Kevin does not set trends.",
            "fol": "\u00acp_14(Kevin)",
            "str_fol": "\u00acsets_trends(Kevin)",
            "negation": true
        },
        {
            "id": 10,
            "subject": "Kevin",
            "text": "Kevin follows trends.",
            "fol": "p_12(Kevin)",
            "str_fol": "follows_trends(Kevin)",
            "negation": false
        },
        {
            "id": 11,
            "subject": "Kevin",
            "text": "Kevin values quality.",
            "fol": "p_11(Kevin)",
            "str_fol": "values_quality(Kevin)",
            "negation": false
        },
        {
            "id": 12,
            "subject": "Kevin",
            "text": "Kevin buys KevWear.",
            "fol": "p_7(Kevin)",
            "str_fol": "buy_KevWear(Kevin)",
            "negation": false
        },
        {
            "id": 13,
            "subject": "Kevin",
            "text": "Kevin does not dress well.",
            "fol": "\u00acp_10(Kevin)",
            "str_fol": "\u00acdresses_well(Kevin)",
            "negation": true
        },
        {
            "id": 14,
            "subject": "Kevin",
            "text": "Kevin wears it regularly.",
            "fol": "p_8(Kevin)",
            "str_fol": "wear_regularly(Kevin)",
            "negation": false
        },
        {
            "id": 15,
            "subject": "Kevin",
            "text": "Kevin does not look stylish.",
            "fol": "\u00acp_9(Kevin)",
            "str_fol": "\u00aclook_stylish(Kevin)",
            "negation": true
        }
    ],
    "context_facts": [
        {
            "id": 5,
            "subject": "Kevin",
            "text": "Kevin does not make textiles.",
            "fol": "\u00acp_5(Kevin)",
            "str_fol": "\u00acmakes_textiles(Kevin)",
            "negation": true
        },
        {
            "id": 6,
            "subject": "Kevin",
            "text": "Kevin creates patterns.",
            "fol": "p_6(Kevin)",
            "str_fol": "creates_patterns(Kevin)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Kevin",
            "text": "Kevin is creative.",
            "fol": "p_3(Kevin)",
            "str_fol": "is_creative(Kevin)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Kevin",
            "text": "Kevin does not take risks.",
            "fol": "\u00acp_4(Kevin)",
            "str_fol": "\u00actakes_risks(Kevin)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Kevin",
            "text": "Kevin is not successful.",
            "fol": "\u00acp_2(Kevin)",
            "str_fol": "\u00acis_successful(Kevin)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Kevin",
            "text": "Kevin does not prioritize comfort.",
            "fol": "\u00acp_1(Kevin)",
            "str_fol": "\u00acprioritizes_comfort(Kevin)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Kevin",
            "text": "Kevin has good taste in fashion.",
            "fol": "p_0(Kevin)",
            "str_fol": "has_good_taste(Kevin)",
            "negation": false
        }
    ],
    "context_rules": [
        {
            "id": 8,
            "text": "If Kevin either makes textiles or creates patterns (but not both), then he designs clothing.",
            "fol": "(p_5(Kevin) \u2295 p_6(Kevin)) \u2192 p_13(Kevin)",
            "str_fol": "(makes_textiles(Kevin) \u2295 creates_patterns(Kevin)) \u2192 designs_clothing(Kevin)"
        },
        {
            "id": 7,
            "text": "If Kevin is creative, then he is either innovative or a risk-taker, but not both.",
            "fol": "p_3(Kevin) \u2192 (p_15(Kevin) \u2295 p_4(Kevin))",
            "str_fol": "is_creative(Kevin) \u2192 (is_innovative(Kevin) \u2295 takes_risks(Kevin))"
        },
        {
            "id": 6,
            "text": "If Kevin sets trends and is innovative, then he is successful.",
            "fol": "(p_14(Kevin) \u2227 p_15(Kevin)) \u2192 p_2(Kevin)",
            "str_fol": "(sets_trends(Kevin) \u2227 is_innovative(Kevin)) \u2192 is_successful(Kevin)"
        },
        {
            "id": 5,
            "text": "Kevin either follows trends or sets trends, but not both.",
            "fol": "p_12(Kevin) \u2295 p_14(Kevin)",
            "str_fol": "follows_trends(Kevin) \u2295 sets_trends(Kevin)"
        },
        {
            "id": 4,
            "text": "Every person who designs clothing either prioritizes comfort or values quality (or both).",
            "fol": "\u2200x (p_13(x) \u2192 (p_1(x) \u2228 p_11(x)))",
            "str_fol": "\u2200x (designs_clothing(x) \u2192 (prioritizes_comfort(x) \u2228 values_quality(x)))"
        },
        {
            "id": 3,
            "text": "If Kevin values quality, then he follows trends and buys KevWear.",
            "fol": "p_11(Kevin) \u2192 (p_12(Kevin) \u2227 p_7(Kevin))",
            "str_fol": "values_quality(Kevin) \u2192 (follows_trends(Kevin) \u2227 buy_KevWear(Kevin))"
        },
        {
            "id": 2,
            "text": "Kevin either dresses well or has good taste in fashion, but not both.",
            "fol": "p_10(Kevin) \u2295 p_0(Kevin)",
            "str_fol": "dresses_well(Kevin) \u2295 has_good_taste(Kevin)"
        },
        {
            "id": 1,
            "text": "Every person either dresses well or wears clothes regularly.",
            "fol": "\u2200x (p_10(x) \u2228 p_8(x))",
            "str_fol": "\u2200x (dresses_well(x) \u2228 wear_regularly(x))"
        },
        {
            "id": 0,
            "text": "If Kevin buys KevWear and wears it regularly, then he looks stylish.",
            "fol": "(p_7(Kevin) \u2227 p_8(Kevin)) \u2192 p_9(Kevin)",
            "str_fol": "(buy_KevWear(Kevin) \u2227 wear_regularly(Kevin)) \u2192 look_stylish(Kevin)"
        }
    ],
    "context": [
        {
            "id": 5,
            "subject": "Kevin",
            "text": "Kevin does not make textiles.",
            "fol": "\u00acp_5(Kevin)",
            "str_fol": "\u00acmakes_textiles(Kevin)",
            "negation": true
        },
        {
            "id": 6,
            "subject": "Kevin",
            "text": "Kevin creates patterns.",
            "fol": "p_6(Kevin)",
            "str_fol": "creates_patterns(Kevin)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Kevin",
            "text": "Kevin is creative.",
            "fol": "p_3(Kevin)",
            "str_fol": "is_creative(Kevin)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Kevin",
            "text": "Kevin does not take risks.",
            "fol": "\u00acp_4(Kevin)",
            "str_fol": "\u00actakes_risks(Kevin)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Kevin",
            "text": "Kevin is not successful.",
            "fol": "\u00acp_2(Kevin)",
            "str_fol": "\u00acis_successful(Kevin)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Kevin",
            "text": "Kevin does not prioritize comfort.",
            "fol": "\u00acp_1(Kevin)",
            "str_fol": "\u00acprioritizes_comfort(Kevin)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Kevin",
            "text": "Kevin has good taste in fashion.",
            "fol": "p_0(Kevin)",
            "str_fol": "has_good_taste(Kevin)",
            "negation": false
        },
        {
            "id": 8,
            "text": "If Kevin either makes textiles or creates patterns (but not both), then he designs clothing.",
            "fol": "(p_5(Kevin) \u2295 p_6(Kevin)) \u2192 p_13(Kevin)",
            "str_fol": "(makes_textiles(Kevin) \u2295 creates_patterns(Kevin)) \u2192 designs_clothing(Kevin)"
        },
        {
            "id": 7,
            "text": "If Kevin is creative, then he is either innovative or a risk-taker, but not both.",
            "fol": "p_3(Kevin) \u2192 (p_15(Kevin) \u2295 p_4(Kevin))",
            "str_fol": "is_creative(Kevin) \u2192 (is_innovative(Kevin) \u2295 takes_risks(Kevin))"
        },
        {
            "id": 6,
            "text": "If Kevin sets trends and is innovative, then he is successful.",
            "fol": "(p_14(Kevin) \u2227 p_15(Kevin)) \u2192 p_2(Kevin)",
            "str_fol": "(sets_trends(Kevin) \u2227 is_innovative(Kevin)) \u2192 is_successful(Kevin)"
        },
        {
            "id": 5,
            "text": "Kevin either follows trends or sets trends, but not both.",
            "fol": "p_12(Kevin) \u2295 p_14(Kevin)",
            "str_fol": "follows_trends(Kevin) \u2295 sets_trends(Kevin)"
        },
        {
            "id": 4,
            "text": "Every person who designs clothing either prioritizes comfort or values quality (or both).",
            "fol": "\u2200x (p_13(x) \u2192 (p_1(x) \u2228 p_11(x)))",
            "str_fol": "\u2200x (designs_clothing(x) \u2192 (prioritizes_comfort(x) \u2228 values_quality(x)))"
        },
        {
            "id": 3,
            "text": "If Kevin values quality, then he follows trends and buys KevWear.",
            "fol": "p_11(Kevin) \u2192 (p_12(Kevin) \u2227 p_7(Kevin))",
            "str_fol": "values_quality(Kevin) \u2192 (follows_trends(Kevin) \u2227 buy_KevWear(Kevin))"
        },
        {
            "id": 2,
            "text": "Kevin either dresses well or has good taste in fashion, but not both.",
            "fol": "p_10(Kevin) \u2295 p_0(Kevin)",
            "str_fol": "dresses_well(Kevin) \u2295 has_good_taste(Kevin)"
        },
        {
            "id": 1,
            "text": "Every person either dresses well or wears clothes regularly.",
            "fol": "\u2200x (p_10(x) \u2228 p_8(x))",
            "str_fol": "\u2200x (dresses_well(x) \u2228 wear_regularly(x))"
        },
        {
            "id": 0,
            "text": "If Kevin buys KevWear and wears it regularly, then he looks stylish.",
            "fol": "(p_7(Kevin) \u2227 p_8(Kevin)) \u2192 p_9(Kevin)",
            "str_fol": "(buy_KevWear(Kevin) \u2227 wear_regularly(Kevin)) \u2192 look_stylish(Kevin)"
        }
    ],
    "context_fol": "\u00acp_5(Kevin)\np_6(Kevin)\np_3(Kevin)\n\u00acp_4(Kevin)\n\u00acp_2(Kevin)\n\u00acp_1(Kevin)\np_0(Kevin)\n(p_5(Kevin) \u2295 p_6(Kevin)) \u2192 p_13(Kevin)\np_3(Kevin) \u2192 (p_15(Kevin) \u2295 p_4(Kevin))\n(p_14(Kevin) \u2227 p_15(Kevin)) \u2192 p_2(Kevin)\np_12(Kevin) \u2295 p_14(Kevin)\n\u2200x (p_13(x) \u2192 (p_1(x) \u2228 p_11(x)))\np_11(Kevin) \u2192 (p_12(Kevin) \u2227 p_7(Kevin))\np_10(Kevin) \u2295 p_0(Kevin)\n\u2200x (p_10(x) \u2228 p_8(x))\n(p_7(Kevin) \u2227 p_8(Kevin)) \u2192 p_9(Kevin)",
    "conclusion": {
        "id": 15,
        "subject": "Kevin",
        "text": "Kevin does not look stylish.",
        "fol": "\u00acp_9(Kevin)",
        "str_fol": "\u00aclook_stylish(Kevin)",
        "negation": true
    },
    "initial_answer": "False",
    "initial_goal": "\u00acp_9(Kevin)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 5,
                    "subject": "Kevin",
                    "text": "Kevin does not make textiles.",
                    "fol": "\u00acp_5(Kevin)",
                    "str_fol": "\u00acmakes_textiles(Kevin)",
                    "negation": true
                },
                {
                    "id": 6,
                    "subject": "Kevin",
                    "text": "Kevin creates patterns.",
                    "fol": "p_6(Kevin)",
                    "str_fol": "creates_patterns(Kevin)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 8,
                    "text": "If Kevin either makes textiles or creates patterns (but not both), then he designs clothing.",
                    "fol": "(p_5(Kevin) \u2295 p_6(Kevin)) \u2192 p_13(Kevin)",
                    "str_fol": "(makes_textiles(Kevin) \u2295 creates_patterns(Kevin)) \u2192 designs_clothing(Kevin)"
                }
            ],
            "conclusion": {
                "id": 7,
                "subject": "Kevin",
                "text": "Kevin designs clothing.",
                "fol": "p_13(Kevin)",
                "str_fol": "designs_clothing(Kevin)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 3,
                    "subject": "Kevin",
                    "text": "Kevin is creative.",
                    "fol": "p_3(Kevin)",
                    "str_fol": "is_creative(Kevin)",
                    "negation": false
                },
                {
                    "id": 4,
                    "subject": "Kevin",
                    "text": "Kevin does not take risks.",
                    "fol": "\u00acp_4(Kevin)",
                    "str_fol": "\u00actakes_risks(Kevin)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 7,
                    "text": "If Kevin is creative, then he is either innovative or a risk-taker, but not both.",
                    "fol": "p_3(Kevin) \u2192 (p_15(Kevin) \u2295 p_4(Kevin))",
                    "str_fol": "is_creative(Kevin) \u2192 (is_innovative(Kevin) \u2295 takes_risks(Kevin))"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Kevin",
                "text": "Kevin is innovative.",
                "fol": "p_15(Kevin)",
                "str_fol": "is_innovative(Kevin)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 8,
                    "subject": "Kevin",
                    "text": "Kevin is innovative.",
                    "fol": "p_15(Kevin)",
                    "str_fol": "is_innovative(Kevin)",
                    "negation": false
                },
                {
                    "id": 2,
                    "subject": "Kevin",
                    "text": "Kevin is not successful.",
                    "fol": "\u00acp_2(Kevin)",
                    "str_fol": "\u00acis_successful(Kevin)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 6,
                    "text": "If Kevin sets trends and is innovative, then he is successful.",
                    "fol": "(p_14(Kevin) \u2227 p_15(Kevin)) \u2192 p_2(Kevin)",
                    "str_fol": "(sets_trends(Kevin) \u2227 is_innovative(Kevin)) \u2192 is_successful(Kevin)"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Kevin",
                "text": "Kevin does not set trends.",
                "fol": "\u00acp_14(Kevin)",
                "str_fol": "\u00acsets_trends(Kevin)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 9,
                    "subject": "Kevin",
                    "text": "Kevin does not set trends.",
                    "fol": "\u00acp_14(Kevin)",
                    "str_fol": "\u00acsets_trends(Kevin)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "Kevin either follows trends or sets trends, but not both.",
                    "fol": "p_12(Kevin) \u2295 p_14(Kevin)",
                    "str_fol": "follows_trends(Kevin) \u2295 sets_trends(Kevin)"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Kevin",
                "text": "Kevin follows trends.",
                "fol": "p_12(Kevin)",
                "str_fol": "follows_trends(Kevin)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 7,
                    "subject": "Kevin",
                    "text": "Kevin designs clothing.",
                    "fol": "p_13(Kevin)",
                    "str_fol": "designs_clothing(Kevin)",
                    "negation": false
                },
                {
                    "id": 1,
                    "subject": "Kevin",
                    "text": "Kevin does not prioritize comfort.",
                    "fol": "\u00acp_1(Kevin)",
                    "str_fol": "\u00acprioritizes_comfort(Kevin)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "Every person who designs clothing either prioritizes comfort or values quality (or both).",
                    "fol": "\u2200x (p_13(x) \u2192 (p_1(x) \u2228 p_11(x)))",
                    "str_fol": "\u2200x (designs_clothing(x) \u2192 (prioritizes_comfort(x) \u2228 values_quality(x)))"
                }
            ],
            "conclusion": {
                "id": 11,
                "subject": "Kevin",
                "text": "Kevin values quality.",
                "fol": "p_11(Kevin)",
                "str_fol": "values_quality(Kevin)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 11,
                    "subject": "Kevin",
                    "text": "Kevin values quality.",
                    "fol": "p_11(Kevin)",
                    "str_fol": "values_quality(Kevin)",
                    "negation": false
                },
                {
                    "id": 10,
                    "subject": "Kevin",
                    "text": "Kevin follows trends.",
                    "fol": "p_12(Kevin)",
                    "str_fol": "follows_trends(Kevin)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "If Kevin values quality, then he follows trends and buys KevWear.",
                    "fol": "p_11(Kevin) \u2192 (p_12(Kevin) \u2227 p_7(Kevin))",
                    "str_fol": "values_quality(Kevin) \u2192 (follows_trends(Kevin) \u2227 buy_KevWear(Kevin))"
                }
            ],
            "conclusion": {
                "id": 12,
                "subject": "Kevin",
                "text": "Kevin buys KevWear.",
                "fol": "p_7(Kevin)",
                "str_fol": "buy_KevWear(Kevin)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 0,
                    "subject": "Kevin",
                    "text": "Kevin has good taste in fashion.",
                    "fol": "p_0(Kevin)",
                    "str_fol": "has_good_taste(Kevin)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "Kevin either dresses well or has good taste in fashion, but not both.",
                    "fol": "p_10(Kevin) \u2295 p_0(Kevin)",
                    "str_fol": "dresses_well(Kevin) \u2295 has_good_taste(Kevin)"
                }
            ],
            "conclusion": {
                "id": 13,
                "subject": "Kevin",
                "text": "Kevin does not dress well.",
                "fol": "\u00acp_10(Kevin)",
                "str_fol": "\u00acdresses_well(Kevin)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 13,
                    "subject": "Kevin",
                    "text": "Kevin does not dress well.",
                    "fol": "\u00acp_10(Kevin)",
                    "str_fol": "\u00acdresses_well(Kevin)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "Every person either dresses well or wears clothes regularly.",
                    "fol": "\u2200x (p_10(x) \u2228 p_8(x))",
                    "str_fol": "\u2200x (dresses_well(x) \u2228 wear_regularly(x))"
                }
            ],
            "conclusion": {
                "id": 14,
                "subject": "Kevin",
                "text": "Kevin wears it regularly.",
                "fol": "p_8(Kevin)",
                "str_fol": "wear_regularly(Kevin)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 12,
                    "subject": "Kevin",
                    "text": "Kevin buys KevWear.",
                    "fol": "p_7(Kevin)",
                    "str_fol": "buy_KevWear(Kevin)",
                    "negation": false
                },
                {
                    "id": 14,
                    "subject": "Kevin",
                    "text": "Kevin wears it regularly.",
                    "fol": "p_8(Kevin)",
                    "str_fol": "wear_regularly(Kevin)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "If Kevin buys KevWear and wears it regularly, then he looks stylish.",
                    "fol": "(p_7(Kevin) \u2227 p_8(Kevin)) \u2192 p_9(Kevin)",
                    "str_fol": "(buy_KevWear(Kevin) \u2227 wear_regularly(Kevin)) \u2192 look_stylish(Kevin)"
                }
            ],
            "conclusion": {
                "id": 15,
                "subject": "Kevin",
                "text": "Kevin does not look stylish.",
                "fol": "\u00acp_9(Kevin)",
                "str_fol": "\u00aclook_stylish(Kevin)",
                "negation": true
            }
        }
    ],
    "proof_trace": "1 -(p_5(Kevin) <-> p_6(Kevin)) -> p_13(Kevin).  [assumption].\n5 (all x (p_13(x) -> p_1(x) | p_11(x))).  [assumption].\n6 p_11(Kevin) -> p_12(Kevin) & p_7(Kevin).  [assumption].\n7 -(p_10(Kevin) <-> p_0(Kevin)).  [assumption].\n8 (all x (p_10(x) | p_8(x))).  [assumption].\n9 p_7(Kevin) & p_8(Kevin) -> p_9(Kevin).  [assumption].\n10 --p_9(Kevin).  [goal].\n11 p_5(Kevin) | -p_6(Kevin) | p_13(Kevin).  [clausify(1)].\n12 -p_5(Kevin).  [assumption].\n14 -p_6(Kevin) | p_13(Kevin).  [resolve(11,a,12,a)].\n15 p_6(Kevin).  [assumption].\n24 -p_13(x) | p_1(x) | p_11(x).  [clausify(5)].\n25 -p_1(Kevin).  [assumption].\n26 -p_10(Kevin) | -p_0(Kevin).  [clausify(7)].\n27 p_0(Kevin).  [assumption].\n32 -p_13(Kevin) | p_11(Kevin).  [resolve(24,b,25,a)].\n33 -p_11(Kevin) | p_7(Kevin).  [clausify(6)].\n35 -p_10(Kevin).  [resolve(26,b,27,a)].\n36 p_10(x) | p_8(x).  [clausify(8)].\n37 -p_13(Kevin) | p_7(Kevin).  [resolve(32,b,33,a)].\n38 -p_7(Kevin) | -p_8(Kevin) | p_9(Kevin).  [clausify(9)].\n39 -p_13(Kevin) | -p_8(Kevin) | p_9(Kevin).  [resolve(37,b,38,a)].\n40 -p_9(Kevin).  [deny(10)].\n42 p_13(Kevin).  [resolve(14,a,15,a)].\n43 -p_13(Kevin) | -p_8(Kevin).  [resolve(39,c,40,a)].\n46 -p_8(Kevin).  [resolve(43,a,42,a)].\n47 p_8(Kevin).  [resolve(35,a,36,a)].\n48 $F.  [resolve(46,a,47,a)].",
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_5(Kevin)\np_6(Kevin)\np_3(Kevin)\n\u00acp_4(Kevin)\n\u00acp_2(Kevin)\n\u00acp_1(Kevin)\np_0(Kevin)\n(p_5(Kevin) \u2295 p_6(Kevin)) \u2192 p_13(Kevin)\np_3(Kevin) \u2192 (p_15(Kevin) \u2295 p_4(Kevin))\n(p_14(Kevin) \u2227 p_15(Kevin)) \u2192 p_2(Kevin)\np_12(Kevin) \u2295 p_14(Kevin)\n\u2200x (p_13(x) \u2192 (p_1(x) \u2228 p_11(x)))\np_10(Kevin) \u2295 p_0(Kevin)\n\u2200x (p_10(x) \u2228 p_8(x))\n(p_7(Kevin) \u2227 p_8(Kevin)) \u2192 p_9(Kevin)\np_13(Kevin)\np_11(Kevin)\np_11(Kevin) \u2192 p_12(Kevin)\np_11(Kevin) \u2192 p_7(Kevin)",
            "Initial Goal": "\u00acp_9(Kevin)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_5(Kevin)",
                    "p_6(Kevin)",
                    "p_3(Kevin)",
                    "-p_4(Kevin)",
                    "-p_2(Kevin)",
                    "-p_1(Kevin)",
                    "p_0(Kevin)",
                    "(-(p_5(Kevin) <-> p_6(Kevin))) -> p_13(Kevin)",
                    "p_3(Kevin) -> (-(p_15(Kevin) <-> p_4(Kevin)))",
                    "(p_14(Kevin) & p_15(Kevin)) -> p_2(Kevin)",
                    "-(p_12(Kevin) <-> p_14(Kevin))",
                    "all x (p_13(x) -> (p_1(x) | p_11(x)))",
                    "-(p_10(Kevin) <-> p_0(Kevin))",
                    "all x (p_10(x) | p_8(x))",
                    "(p_7(Kevin) & p_8(Kevin)) -> p_9(Kevin)",
                    "p_13(Kevin)",
                    "p_11(Kevin)",
                    "p_11(Kevin) -> p_12(Kevin)",
                    "p_11(Kevin) -> p_7(Kevin)"
                ],
                "formulas(goals)": [
                    "p_9(Kevin)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_11(Kevin) \u2192 (p_12(Kevin) \u2227 p_7(Kevin))"
                ],
                "added_facts": [
                    "p_13(Kevin)",
                    "p_11(Kevin)"
                ],
                "added_rules": [
                    "p_11(Kevin) \u2192 p_12(Kevin)",
                    "p_11(Kevin) \u2192 p_7(Kevin)"
                ]
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_5(Kevin)\np_6(Kevin)\np_3(Kevin)\n\u00acp_4(Kevin)\n\u00acp_2(Kevin)\n\u00acp_1(Kevin)\np_0(Kevin)\n(p_5(Kevin) \u2295 p_6(Kevin)) \u2192 p_13(Kevin)\np_3(Kevin) \u2192 (p_15(Kevin) \u2295 p_4(Kevin))\n(p_14(Kevin) \u2227 p_15(Kevin)) \u2192 p_2(Kevin)\np_12(Kevin) \u2295 p_14(Kevin)\n\u2200x (p_13(x) \u2192 (p_1(x) \u2228 p_11(x)))\np_10(Kevin) \u2295 p_0(Kevin)\n\u2200x (\u00acp_10(x) \u2192 p_8(x))\n(p_7(Kevin) \u2227 p_8(Kevin)) \u2192 p_9(Kevin)\n\u00acp_9(Kevin) \u2192 \u00ac(p_7(Kevin) \u2227 p_8(Kevin))\np_13(Kevin)\np_11(Kevin)\np_11(Kevin) \u2192 p_12(Kevin)\np_11(Kevin) \u2192 p_7(Kevin)\np_7(Kevin)\np_8(Kevin)",
            "Initial Goal": "\u00acp_9(Kevin)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_5(Kevin)",
                    "p_6(Kevin)",
                    "p_3(Kevin)",
                    "-p_4(Kevin)",
                    "-p_2(Kevin)",
                    "-p_1(Kevin)",
                    "p_0(Kevin)",
                    "(-(p_5(Kevin) <-> p_6(Kevin))) -> p_13(Kevin)",
                    "p_3(Kevin) -> (-(p_15(Kevin) <-> p_4(Kevin)))",
                    "(p_14(Kevin) & p_15(Kevin)) -> p_2(Kevin)",
                    "-(p_12(Kevin) <-> p_14(Kevin))",
                    "all x (p_13(x) -> (p_1(x) | p_11(x)))",
                    "-(p_10(Kevin) <-> p_0(Kevin))",
                    "all x (-p_10(x) -> p_8(x))",
                    "(p_7(Kevin) & p_8(Kevin)) -> p_9(Kevin)",
                    "-p_9(Kevin) -> -(p_7(Kevin) & p_8(Kevin))",
                    "p_13(Kevin)",
                    "p_11(Kevin)",
                    "p_11(Kevin) -> p_12(Kevin)",
                    "p_11(Kevin) -> p_7(Kevin)",
                    "p_7(Kevin)",
                    "p_8(Kevin)"
                ],
                "formulas(goals)": [
                    "p_9(Kevin)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u2200x (p_10(x) \u2228 p_8(x))"
                ],
                "added_facts": [
                    "p_7(Kevin)",
                    "p_8(Kevin)"
                ],
                "added_rules": [
                    "\u2200x (\u00acp_10(x) \u2192 p_8(x))",
                    "\u00acp_9(Kevin) \u2192 \u00ac(p_7(Kevin) \u2227 p_8(Kevin))"
                ]
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_5(Kevin)\np_6(Kevin)\np_3(Kevin)\n\u00acp_4(Kevin)\n\u00acp_2(Kevin)\n\u00acp_1(Kevin)\np_0(Kevin)\n(p_5(Kevin) \u2295 p_6(Kevin)) \u2192 p_13(Kevin)\np_3(Kevin) \u2192 (p_15(Kevin) \u2295 p_4(Kevin))\n(p_14(Kevin) \u2227 p_15(Kevin)) \u2192 p_2(Kevin)\np_12(Kevin) \u2295 p_14(Kevin)\n\u2200x (p_13(x) \u2192 (p_1(x) \u2228 p_11(x)))\np_10(Kevin) \u2295 p_0(Kevin)\n\u2200x (\u00acp_10(x) \u2192 p_8(x))\n(p_7(Kevin) \u2227 p_8(Kevin)) \u2192 p_9(Kevin)\n\u00acp_9(Kevin) \u2192 \u00ac(p_7(Kevin) \u2227 p_8(Kevin))\np_13(Kevin)\np_11(Kevin)\np_11(Kevin) \u2192 p_12(Kevin)\n\u00acp_7(Kevin)\np_8(Kevin)\n\u00acp_7(Kevin) \u2192 \u00acp_9(Kevin)",
            "Initial Goal": "\u00acp_9(Kevin)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_5(Kevin)",
                    "p_6(Kevin)",
                    "p_3(Kevin)",
                    "-p_4(Kevin)",
                    "-p_2(Kevin)",
                    "-p_1(Kevin)",
                    "p_0(Kevin)",
                    "(-(p_5(Kevin) <-> p_6(Kevin))) -> p_13(Kevin)",
                    "p_3(Kevin) -> (-(p_15(Kevin) <-> p_4(Kevin)))",
                    "(p_14(Kevin) & p_15(Kevin)) -> p_2(Kevin)",
                    "-(p_12(Kevin) <-> p_14(Kevin))",
                    "all x (p_13(x) -> (p_1(x) | p_11(x)))",
                    "-(p_10(Kevin) <-> p_0(Kevin))",
                    "all x (-p_10(x) -> p_8(x))",
                    "(p_7(Kevin) & p_8(Kevin)) -> p_9(Kevin)",
                    "-p_9(Kevin) -> -(p_7(Kevin) & p_8(Kevin))",
                    "p_13(Kevin)",
                    "p_11(Kevin)",
                    "p_11(Kevin) -> p_12(Kevin)",
                    "-p_7(Kevin)",
                    "p_8(Kevin)",
                    "-p_7(Kevin) -> -p_9(Kevin)"
                ],
                "formulas(goals)": [
                    "-p_9(Kevin)"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "p_7(Kevin)"
                ],
                "removed_rules": [
                    "p_11(Kevin) \u2192 p_7(Kevin)"
                ],
                "added_facts": [
                    "\u00acp_7(Kevin)"
                ],
                "added_rules": [
                    "\u00acp_7(Kevin) \u2192 \u00acp_9(Kevin)"
                ]
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_5(Kevin)\np_6(Kevin)\np_3(Kevin)\n\u00acp_4(Kevin)\n\u00acp_2(Kevin)\n\u00acp_1(Kevin)\np_0(Kevin)\n(p_5(Kevin) \u2295 p_6(Kevin)) \u2192 p_13(Kevin)\np_3(Kevin) \u2192 (p_15(Kevin) \u2295 p_4(Kevin))\n(p_14(Kevin) \u2227 p_15(Kevin)) \u2192 p_2(Kevin)\np_12(Kevin) \u2295 p_14(Kevin)\n\u2200x (p_13(x) \u2192 (p_1(x) \u2228 p_11(x)))\np_10(Kevin) \u2295 p_0(Kevin)\n\u2200x (\u00acp_10(x) \u2192 p_8(x))\n(p_7(Kevin) \u2227 p_8(Kevin)) \u2192 p_9(Kevin)\n\u00acp_9(Kevin) \u2192 \u00ac(p_7(Kevin) \u2227 p_8(Kevin))\np_13(Kevin)\np_11(Kevin)\np_11(Kevin) \u2192 p_12(Kevin)\np_8(Kevin)\n\u00acp_7(Kevin) \u2192 \u00acp_9(Kevin)\np_11(Kevin) \u2192 p_7(Kevin)",
            "Initial Goal": "\u00acp_9(Kevin)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_5(Kevin)",
                    "p_6(Kevin)",
                    "p_3(Kevin)",
                    "-p_4(Kevin)",
                    "-p_2(Kevin)",
                    "-p_1(Kevin)",
                    "p_0(Kevin)",
                    "(-(p_5(Kevin) <-> p_6(Kevin))) -> p_13(Kevin)",
                    "p_3(Kevin) -> (-(p_15(Kevin) <-> p_4(Kevin)))",
                    "(p_14(Kevin) & p_15(Kevin)) -> p_2(Kevin)",
                    "(-(p_12(Kevin) <-> p_14(Kevin)))",
                    "all x (p_13(x) -> (p_1(x) | p_11(x)))",
                    "(-(p_10(Kevin) <-> p_0(Kevin)))",
                    "all x (-p_10(x) -> p_8(x))",
                    "(p_7(Kevin) & p_8(Kevin)) -> p_9(Kevin)",
                    "-p_9(Kevin) -> -(p_7(Kevin) & p_8(Kevin))",
                    "p_13(Kevin)",
                    "p_11(Kevin)",
                    "p_11(Kevin) -> p_12(Kevin)",
                    "p_8(Kevin)",
                    "-p_7(Kevin) -> -p_9(Kevin)",
                    "p_11(Kevin) -> p_7(Kevin)"
                ],
                "formulas(goals)": [
                    "-(-p_9(Kevin))"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "\u00acp_7(Kevin)"
                ],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "p_11(Kevin) \u2192 p_7(Kevin)"
                ]
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_5(Kevin)\np_6(Kevin)\np_3(Kevin)\n\u00acp_4(Kevin)\n\u00acp_2(Kevin)\n\u00acp_1(Kevin)\np_0(Kevin)\n(p_5(Kevin) \u2295 p_6(Kevin)) \u2192 p_13(Kevin)\np_3(Kevin) \u2192 (p_15(Kevin) \u2295 p_4(Kevin))\n(p_14(Kevin) \u2227 p_15(Kevin)) \u2192 p_2(Kevin)\np_12(Kevin) \u2295 p_14(Kevin)\n\u2200x (p_13(x) \u2192 (p_1(x) \u2228 p_11(x)))\np_10(Kevin) \u2295 p_0(Kevin)\n\u2200x (\u00acp_10(x) \u2192 p_8(x))\n(p_7(Kevin) \u2227 p_8(Kevin)) \u2192 p_9(Kevin)\n\u00acp_9(Kevin) \u2192 \u00ac(p_7(Kevin) \u2227 p_8(Kevin))\np_13(Kevin)\np_11(Kevin)\np_11(Kevin) \u2192 p_12(Kevin)\np_8(Kevin)\n\u00acp_7(Kevin) \u2192 \u00acp_9(Kevin)\np_11(Kevin) \u2192 p_7(Kevin)\np_12(Kevin) \u2192 \u00acp_14(Kevin)\n(p_3(Kevin) \u2227 \u00acp_4(Kevin)) \u2192 p_15(Kevin)",
            "Initial Goal": "\u00acp_9(Kevin)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_5(Kevin)",
                    "p_6(Kevin)",
                    "p_3(Kevin)",
                    "-p_4(Kevin)",
                    "-p_2(Kevin)",
                    "-p_1(Kevin)",
                    "p_0(Kevin)",
                    "(-(p_5(Kevin) <-> p_6(Kevin))) -> p_13(Kevin)",
                    "p_3(Kevin) -> (-(p_15(Kevin) <-> p_4(Kevin)))",
                    "(p_14(Kevin) & p_15(Kevin)) -> p_2(Kevin)",
                    "-(p_12(Kevin) <-> p_14(Kevin))",
                    "all x (p_13(x) -> (p_1(x) | p_11(x)))",
                    "-(p_10(Kevin) <-> p_0(Kevin))",
                    "all x (-p_10(x) -> p_8(x))",
                    "(p_7(Kevin) & p_8(Kevin)) -> p_9(Kevin)",
                    "-p_9(Kevin) -> -(p_7(Kevin) & p_8(Kevin))",
                    "p_13(Kevin)",
                    "p_11(Kevin)",
                    "p_11(Kevin) -> p_12(Kevin)",
                    "p_8(Kevin)",
                    "-p_7(Kevin) -> -p_9(Kevin)",
                    "p_11(Kevin) -> p_7(Kevin)",
                    "p_12(Kevin) -> -p_14(Kevin)",
                    "(p_3(Kevin) & -p_4(Kevin)) -> p_15(Kevin)"
                ],
                "formulas(goals)": [
                    "--p_9(Kevin)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "p_12(Kevin) \u2192 \u00acp_14(Kevin)",
                    "(p_3(Kevin) \u2227 \u00acp_4(Kevin)) \u2192 p_15(Kevin)"
                ]
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_5(Kevin)\np_6(Kevin)\np_3(Kevin)\n\u00acp_4(Kevin)\n\u00acp_2(Kevin)\n\u00acp_1(Kevin)\np_0(Kevin)\n(p_5(Kevin) \u2295 p_6(Kevin)) \u2192 p_13(Kevin)\np_3(Kevin) \u2192 (p_15(Kevin) \u2295 p_4(Kevin))\n(p_14(Kevin) \u2227 p_15(Kevin)) \u2192 p_2(Kevin)\np_12(Kevin) \u2295 p_14(Kevin)\n\u2200x (p_13(x) \u2192 (p_1(x) \u2228 p_11(x)))\np_10(Kevin) \u2295 p_0(Kevin)\n\u2200x (\u00acp_10(x) \u2192 p_8(x))\n(p_7(Kevin) \u2227 p_8(Kevin)) \u2192 p_9(Kevin)\n\u00acp_9(Kevin) \u2192 \u00ac(p_7(Kevin) \u2227 p_8(Kevin))\np_13(Kevin)\np_11(Kevin)\np_11(Kevin) \u2192 p_12(Kevin)\np_8(Kevin)\n\u00acp_7(Kevin) \u2192 \u00acp_9(Kevin)\np_12(Kevin) \u2192 \u00acp_14(Kevin)\n(p_3(Kevin) \u2227 \u00acp_4(Kevin)) \u2192 p_15(Kevin)\np_12(Kevin) \u2192 \u00acp_7(Kevin)",
            "Initial Goal": "\u00acp_9(Kevin)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_5(Kevin)",
                    "p_6(Kevin)",
                    "p_3(Kevin)",
                    "-p_4(Kevin)",
                    "-p_2(Kevin)",
                    "-p_1(Kevin)",
                    "p_0(Kevin)",
                    "(-(p_5(Kevin) <-> p_6(Kevin))) -> p_13(Kevin)",
                    "p_3(Kevin) -> (-(p_15(Kevin) <-> p_4(Kevin)))",
                    "(p_14(Kevin) & p_15(Kevin)) -> p_2(Kevin)",
                    "-(p_12(Kevin) <-> p_14(Kevin))",
                    "all x (p_13(x) -> (p_1(x) | p_11(x)))",
                    "-(p_10(Kevin) <-> p_0(Kevin))",
                    "all x (-p_10(x) -> p_8(x))",
                    "(p_7(Kevin) & p_8(Kevin)) -> p_9(Kevin)",
                    "-p_9(Kevin) -> -(p_7(Kevin) & p_8(Kevin))",
                    "p_13(Kevin)",
                    "p_11(Kevin)",
                    "p_11(Kevin) -> p_12(Kevin)",
                    "p_8(Kevin)",
                    "-p_7(Kevin) -> -p_9(Kevin)",
                    "p_12(Kevin) -> -p_14(Kevin)",
                    "(p_3(Kevin) & -p_4(Kevin)) -> p_15(Kevin)",
                    "p_12(Kevin) -> -p_7(Kevin)"
                ],
                "formulas(goals)": [
                    "-p_9(Kevin)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_11(Kevin) \u2192 p_7(Kevin)"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_12(Kevin) \u2192 \u00acp_7(Kevin)"
                ]
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_5(Kevin)\np_6(Kevin)\np_3(Kevin)\n\u00acp_4(Kevin)\n\u00acp_2(Kevin)\n\u00acp_1(Kevin)\np_0(Kevin)\n(p_5(Kevin) \u2295 p_6(Kevin)) \u2192 p_13(Kevin)\np_3(Kevin) \u2192 (p_15(Kevin) \u2295 p_4(Kevin))\n(p_14(Kevin) \u2227 p_15(Kevin)) \u2192 p_2(Kevin)\np_12(Kevin) \u2295 p_14(Kevin)\n\u2200x (p_13(x) \u2192 (p_1(x) \u2228 p_11(x)))\np_10(Kevin) \u2295 p_0(Kevin)\n\u2200x (\u00acp_10(x) \u2192 p_8(x))\n(p_7(Kevin) \u2227 p_8(Kevin)) \u2192 p_9(Kevin)\n\u00acp_9(Kevin) \u2192 \u00ac(p_7(Kevin) \u2227 p_8(Kevin))\np_13(Kevin)\np_11(Kevin)\np_11(Kevin) \u2192 p_12(Kevin)\np_8(Kevin)\n\u00acp_7(Kevin) \u2192 \u00acp_9(Kevin)\n(p_3(Kevin) \u2227 \u00acp_4(Kevin)) \u2192 p_15(Kevin)\np_12(Kevin) \u2192 \u00acp_14(Kevin)\np_7(Kevin)",
            "Initial Goal": "\u00acp_9(Kevin)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "\u00acp_5(Kevin)",
                    "p_6(Kevin)",
                    "p_3(Kevin)",
                    "\u00acp_4(Kevin)",
                    "\u00acp_2(Kevin)",
                    "\u00acp_1(Kevin)",
                    "p_0(Kevin)",
                    "(-(p_5(Kevin) <-> p_6(Kevin))) -> p_13(Kevin)",
                    "p_3(Kevin) -> (-(p_15(Kevin) <-> p_4(Kevin)))",
                    "(p_14(Kevin) & p_15(Kevin)) -> p_2(Kevin)",
                    "(-(p_12(Kevin) <-> p_14(Kevin)))",
                    "all x (p_13(x) -> (p_1(x) | p_11(x)))",
                    "(-(p_10(Kevin) <-> p_0(Kevin)))",
                    "all x (-p_10(x) -> p_8(x))",
                    "(p_7(Kevin) & p_8(Kevin)) -> p_9(Kevin)",
                    "-p_9(Kevin) -> -(p_7(Kevin) & p_8(Kevin))",
                    "p_13(Kevin)",
                    "p_11(Kevin)",
                    "p_11(Kevin) -> p_12(Kevin)",
                    "p_8(Kevin)",
                    "-p_7(Kevin) -> -p_9(Kevin)",
                    "(p_3(Kevin) & -p_4(Kevin)) -> p_15(Kevin)",
                    "p_12(Kevin) -> -p_14(Kevin)",
                    "p_7(Kevin)"
                ],
                "formulas(goals)": [
                    "-(-p_9(Kevin))"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_12(Kevin) \u2192 \u00acp_7(Kevin)"
                ],
                "added_facts": [
                    "p_7(Kevin)"
                ],
                "added_rules": []
            }
        }
    ]
}