{
    "background_story": "Amiri was a gentle soul with a green thumb, renowned for his exquisite garden in the heart of the desert. Among his prized possessions were the vibrant kniphofia plants, also known as red hot pokers, which bloomed in fiery hues against the arid backdrop. Amiri carefully tended to each plant, coaxing them to grow strong and tall. As the seasons changed, his garden became a haven for local birds and insects, drawn to the kniphofia's nectar-rich flowers. Amiri's love for these plants was more than just aesthetic; he believed they symbolized resilience and hope. He shared his knowledge and passion with the community, teaching others how to cultivate kniphofia and bring vibrancy to their own gardens. Amiri's garden, with its stunning kniphofia, became a beacon of beauty and life in the desert.",
    "predicates": [
        {
            "id": 0,
            "name": "prune_trees"
        },
        {
            "id": 1,
            "name": "share_knowledge"
        },
        {
            "id": 2,
            "name": "water_plants"
        },
        {
            "id": 3,
            "name": "appreciate_beauty"
        },
        {
            "id": 4,
            "name": "cultivate_flowers"
        },
        {
            "id": 5,
            "name": "create_harmony"
        },
        {
            "id": 6,
            "name": "tend_to_plants"
        },
        {
            "id": 7,
            "name": "grow_beautiful_garden"
        },
        {
            "id": 8,
            "name": "create_oasis"
        },
        {
            "id": 9,
            "name": "design_landscapes"
        },
        {
            "id": 10,
            "name": "nurture_life"
        },
        {
            "id": 11,
            "name": "make_beautiful"
        },
        {
            "id": 12,
            "name": "love_nature"
        },
        {
            "id": 13,
            "name": "care_for_animals"
        },
        {
            "id": 14,
            "name": "enjoy_outdoors"
        },
        {
            "id": 15,
            "name": "has_green_thumb"
        },
        {
            "id": 16,
            "name": "enjoys_gardening"
        },
        {
            "id": 17,
            "name": "know_botany"
        },
        {
            "id": 18,
            "name": "have_passion"
        },
        {
            "id": 19,
            "name": "know_soil"
        },
        {
            "id": 20,
            "name": "choose_plants"
        },
        {
            "id": 21,
            "name": "plant_seeds"
        },
        {
            "id": 22,
            "name": "respect_ecosystem"
        },
        {
            "id": 23,
            "name": "conserve_resources"
        },
        {
            "id": 24,
            "name": "protect_environment"
        },
        {
            "id": 25,
            "name": "collect_seeds"
        },
        {
            "id": 26,
            "name": "study_ecology"
        },
        {
            "id": 27,
            "name": "create_haven"
        },
        {
            "id": 28,
            "name": "bring_vibrancy"
        }
    ],
    "subject_name": "Amiri",
    "subject_category": "gardener",
    "keyword": "kniphofia",
    "all_facts": [
        {
            "id": 0,
            "subject": "Amiri",
            "text": "Amiri does not prune trees.",
            "fol": "\u00acp_0(Amiri)",
            "str_fol": "\u00acprune_trees(Amiri)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Amiri",
            "text": "Amiri does not share his knowledge.",
            "fol": "\u00acp_1(Amiri)",
            "str_fol": "\u00acshare_knowledge(Amiri)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Amiri",
            "text": "Amiri does not water plants.",
            "fol": "\u00acp_2(Amiri)",
            "str_fol": "\u00acwater_plants(Amiri)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Amiri",
            "text": "Amiri does not appreciate beauty.",
            "fol": "\u00acp_3(Amiri)",
            "str_fol": "\u00acappreciate_beauty(Amiri)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Amiri",
            "text": "Amiri does not cultivate flowers.",
            "fol": "\u00acp_4(Amiri)",
            "str_fol": "\u00accultivate_flowers(Amiri)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Amiri",
            "text": "Amiri does not create harmony.",
            "fol": "\u00acp_5(Amiri)",
            "str_fol": "\u00accreate_harmony(Amiri)",
            "negation": true
        },
        {
            "id": 6,
            "subject": "Amiri",
            "text": "Amiri does not make something beautiful.",
            "fol": "\u00acp_11(Amiri)",
            "str_fol": "\u00acmake_beautiful(Amiri)",
            "negation": true
        },
        {
            "id": 7,
            "subject": "Amiri",
            "text": "Amiri does not enjoy the outdoors.",
            "fol": "\u00acp_14(Amiri)",
            "str_fol": "\u00acenjoy_outdoors(Amiri)",
            "negation": true
        },
        {
            "id": 8,
            "subject": "Amiri",
            "text": "Amiri loves nature.",
            "fol": "p_12(Amiri)",
            "str_fol": "love_nature(Amiri)",
            "negation": false
        },
        {
            "id": 9,
            "subject": "Amiri",
            "text": "Amiri cares for animals.",
            "fol": "p_13(Amiri)",
            "str_fol": "care_for_animals(Amiri)",
            "negation": false
        },
        {
            "id": 10,
            "subject": "Amiri",
            "text": "Amiri cannot nurture life.",
            "fol": "\u00acp_10(Amiri)",
            "str_fol": "\u00acnurture_life(Amiri)",
            "negation": true
        },
        {
            "id": 11,
            "subject": "Amiri",
            "text": "Amiri does not design landscapes.",
            "fol": "\u00acp_9(Amiri)",
            "str_fol": "\u00acdesign_landscapes(Amiri)",
            "negation": true
        },
        {
            "id": 12,
            "subject": "Amiri",
            "text": "Amiri does not create an oasis.",
            "fol": "\u00acp_8(Amiri)",
            "str_fol": "\u00accreate_oasis(Amiri)",
            "negation": true
        },
        {
            "id": 13,
            "subject": "Amiri",
            "text": "Amiri does not tend to his plants.",
            "fol": "\u00acp_6(Amiri)",
            "str_fol": "\u00actend_to_plants(Amiri)",
            "negation": true
        },
        {
            "id": 14,
            "subject": "Amiri",
            "text": "Amiri grows a beautiful garden.",
            "fol": "p_7(Amiri)",
            "str_fol": "grow_beautiful_garden(Amiri)",
            "negation": false
        }
    ],
    "context_facts": [
        {
            "id": 4,
            "subject": "Amiri",
            "text": "Amiri does not cultivate flowers.",
            "fol": "\u00acp_4(Amiri)",
            "str_fol": "\u00accultivate_flowers(Amiri)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Amiri",
            "text": "Amiri does not create harmony.",
            "fol": "\u00acp_5(Amiri)",
            "str_fol": "\u00accreate_harmony(Amiri)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Amiri",
            "text": "Amiri does not share his knowledge.",
            "fol": "\u00acp_1(Amiri)",
            "str_fol": "\u00acshare_knowledge(Amiri)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Amiri",
            "text": "Amiri does not appreciate beauty.",
            "fol": "\u00acp_3(Amiri)",
            "str_fol": "\u00acappreciate_beauty(Amiri)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Amiri",
            "text": "Amiri does not water plants.",
            "fol": "\u00acp_2(Amiri)",
            "str_fol": "\u00acwater_plants(Amiri)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Amiri",
            "text": "Amiri does not prune trees.",
            "fol": "\u00acp_0(Amiri)",
            "str_fol": "\u00acprune_trees(Amiri)",
            "negation": true
        }
    ],
    "context_rules": [
        {
            "id": 8,
            "text": "If Amiri either cultivates flowers or makes something beautiful (but not both), then he creates harmony.",
            "fol": "(p_4(Amiri) \u2295 p_11(Amiri)) \u2192 p_5(Amiri)",
            "str_fol": "(cultivate_flowers(Amiri) \u2295 make_beautiful(Amiri)) \u2192 create_harmony(Amiri)"
        },
        {
            "id": 7,
            "text": "If Amiri enjoys the outdoors, then he shares his knowledge and appreciates beauty.",
            "fol": "p_14(Amiri) \u2192 (p_1(Amiri) \u2227 p_3(Amiri))",
            "str_fol": "enjoy_outdoors(Amiri) \u2192 (share_knowledge(Amiri) \u2227 appreciate_beauty(Amiri))"
        },
        {
            "id": 6,
            "text": "Every gardener enjoys the outdoors or loves nature.",
            "fol": "\u2200x (p_14(x) \u2228 p_12(x))",
            "str_fol": "\u2200x (enjoy_outdoors(x) \u2228 love_nature(x))"
        },
        {
            "id": 5,
            "text": "Amiri either cares for animals or waters plants.",
            "fol": "p_13(Amiri) \u2228 p_2(Amiri)",
            "str_fol": "care_for_animals(Amiri) \u2228 water_plants(Amiri)"
        },
        {
            "id": 4,
            "text": "If Amiri loves nature, then he either cares for animals or nurtures life, but not both.",
            "fol": "p_12(Amiri) \u2192 (p_13(Amiri) \u2295 p_10(Amiri))",
            "str_fol": "love_nature(Amiri) \u2192 (care_for_animals(Amiri) \u2295 nurture_life(Amiri))"
        },
        {
            "id": 3,
            "text": "All gardeners who design landscapes make something beautiful.",
            "fol": "\u2200x (p_9(x) \u2192 p_11(x))",
            "str_fol": "\u2200x (design_landscapes(x) \u2192 make_beautiful(x))"
        },
        {
            "id": 2,
            "text": "Any gardener who creates an oasis or designs landscapes can nurture life.",
            "fol": "\u2200x ((p_8(x) \u2228 p_9(x)) \u2192 p_10(x))",
            "str_fol": "\u2200x ((create_oasis(x) \u2228 design_landscapes(x)) \u2192 nurture_life(x))"
        },
        {
            "id": 1,
            "text": "If Amiri either tends to plants or prunes trees (but not both), then he creates an oasis.",
            "fol": "(p_6(Amiri) \u2295 p_0(Amiri)) \u2192 p_8(Amiri)",
            "str_fol": "(tend_to_plants(Amiri) \u2295 prune_trees(Amiri)) \u2192 create_oasis(Amiri)"
        },
        {
            "id": 0,
            "text": "If Amiri tends to his plants, then he grows a beautiful garden.",
            "fol": "p_6(Amiri) \u2192 p_7(Amiri)",
            "str_fol": "tend_to_plants(Amiri) \u2192 grow_beautiful_garden(Amiri)"
        }
    ],
    "context": [
        {
            "id": 4,
            "subject": "Amiri",
            "text": "Amiri does not cultivate flowers.",
            "fol": "\u00acp_4(Amiri)",
            "str_fol": "\u00accultivate_flowers(Amiri)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Amiri",
            "text": "Amiri does not create harmony.",
            "fol": "\u00acp_5(Amiri)",
            "str_fol": "\u00accreate_harmony(Amiri)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Amiri",
            "text": "Amiri does not share his knowledge.",
            "fol": "\u00acp_1(Amiri)",
            "str_fol": "\u00acshare_knowledge(Amiri)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Amiri",
            "text": "Amiri does not appreciate beauty.",
            "fol": "\u00acp_3(Amiri)",
            "str_fol": "\u00acappreciate_beauty(Amiri)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Amiri",
            "text": "Amiri does not water plants.",
            "fol": "\u00acp_2(Amiri)",
            "str_fol": "\u00acwater_plants(Amiri)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Amiri",
            "text": "Amiri does not prune trees.",
            "fol": "\u00acp_0(Amiri)",
            "str_fol": "\u00acprune_trees(Amiri)",
            "negation": true
        },
        {
            "id": 8,
            "text": "If Amiri either cultivates flowers or makes something beautiful (but not both), then he creates harmony.",
            "fol": "(p_4(Amiri) \u2295 p_11(Amiri)) \u2192 p_5(Amiri)",
            "str_fol": "(cultivate_flowers(Amiri) \u2295 make_beautiful(Amiri)) \u2192 create_harmony(Amiri)"
        },
        {
            "id": 7,
            "text": "If Amiri enjoys the outdoors, then he shares his knowledge and appreciates beauty.",
            "fol": "p_14(Amiri) \u2192 (p_1(Amiri) \u2227 p_3(Amiri))",
            "str_fol": "enjoy_outdoors(Amiri) \u2192 (share_knowledge(Amiri) \u2227 appreciate_beauty(Amiri))"
        },
        {
            "id": 6,
            "text": "Every gardener enjoys the outdoors or loves nature.",
            "fol": "\u2200x (p_14(x) \u2228 p_12(x))",
            "str_fol": "\u2200x (enjoy_outdoors(x) \u2228 love_nature(x))"
        },
        {
            "id": 5,
            "text": "Amiri either cares for animals or waters plants.",
            "fol": "p_13(Amiri) \u2228 p_2(Amiri)",
            "str_fol": "care_for_animals(Amiri) \u2228 water_plants(Amiri)"
        },
        {
            "id": 4,
            "text": "If Amiri loves nature, then he either cares for animals or nurtures life, but not both.",
            "fol": "p_12(Amiri) \u2192 (p_13(Amiri) \u2295 p_10(Amiri))",
            "str_fol": "love_nature(Amiri) \u2192 (care_for_animals(Amiri) \u2295 nurture_life(Amiri))"
        },
        {
            "id": 3,
            "text": "All gardeners who design landscapes make something beautiful.",
            "fol": "\u2200x (p_9(x) \u2192 p_11(x))",
            "str_fol": "\u2200x (design_landscapes(x) \u2192 make_beautiful(x))"
        },
        {
            "id": 2,
            "text": "Any gardener who creates an oasis or designs landscapes can nurture life.",
            "fol": "\u2200x ((p_8(x) \u2228 p_9(x)) \u2192 p_10(x))",
            "str_fol": "\u2200x ((create_oasis(x) \u2228 design_landscapes(x)) \u2192 nurture_life(x))"
        },
        {
            "id": 1,
            "text": "If Amiri either tends to plants or prunes trees (but not both), then he creates an oasis.",
            "fol": "(p_6(Amiri) \u2295 p_0(Amiri)) \u2192 p_8(Amiri)",
            "str_fol": "(tend_to_plants(Amiri) \u2295 prune_trees(Amiri)) \u2192 create_oasis(Amiri)"
        },
        {
            "id": 0,
            "text": "If Amiri tends to his plants, then he grows a beautiful garden.",
            "fol": "p_6(Amiri) \u2192 p_7(Amiri)",
            "str_fol": "tend_to_plants(Amiri) \u2192 grow_beautiful_garden(Amiri)"
        }
    ],
    "context_fol": "\u00acp_4(Amiri)\n\u00acp_5(Amiri)\n\u00acp_1(Amiri)\n\u00acp_3(Amiri)\n\u00acp_2(Amiri)\n\u00acp_0(Amiri)\n(p_4(Amiri) \u2295 p_11(Amiri)) \u2192 p_5(Amiri)\np_14(Amiri) \u2192 (p_1(Amiri) \u2227 p_3(Amiri))\n\u2200x (p_14(x) \u2228 p_12(x))\np_13(Amiri) \u2228 p_2(Amiri)\np_12(Amiri) \u2192 (p_13(Amiri) \u2295 p_10(Amiri))\n\u2200x (p_9(x) \u2192 p_11(x))\n\u2200x ((p_8(x) \u2228 p_9(x)) \u2192 p_10(x))\n(p_6(Amiri) \u2295 p_0(Amiri)) \u2192 p_8(Amiri)\np_6(Amiri) \u2192 p_7(Amiri)",
    "conclusion": {
        "id": 14,
        "subject": "Amiri",
        "text": "Amiri grows a beautiful garden.",
        "fol": "p_7(Amiri)",
        "str_fol": "grow_beautiful_garden(Amiri)",
        "negation": false
    },
    "initial_answer": "Uncertain",
    "initial_goal": "p_7(Amiri)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 4,
                    "subject": "Amiri",
                    "text": "Amiri does not cultivate flowers.",
                    "fol": "\u00acp_4(Amiri)",
                    "str_fol": "\u00accultivate_flowers(Amiri)",
                    "negation": true
                },
                {
                    "id": 5,
                    "subject": "Amiri",
                    "text": "Amiri does not create harmony.",
                    "fol": "\u00acp_5(Amiri)",
                    "str_fol": "\u00accreate_harmony(Amiri)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 8,
                    "text": "If Amiri either cultivates flowers or makes something beautiful (but not both), then he creates harmony.",
                    "fol": "(p_4(Amiri) \u2295 p_11(Amiri)) \u2192 p_5(Amiri)",
                    "str_fol": "(cultivate_flowers(Amiri) \u2295 make_beautiful(Amiri)) \u2192 create_harmony(Amiri)"
                }
            ],
            "conclusion": {
                "id": 6,
                "subject": "Amiri",
                "text": "Amiri does not make something beautiful.",
                "fol": "\u00acp_11(Amiri)",
                "str_fol": "\u00acmake_beautiful(Amiri)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 1,
                    "subject": "Amiri",
                    "text": "Amiri does not share his knowledge.",
                    "fol": "\u00acp_1(Amiri)",
                    "str_fol": "\u00acshare_knowledge(Amiri)",
                    "negation": true
                },
                {
                    "id": 3,
                    "subject": "Amiri",
                    "text": "Amiri does not appreciate beauty.",
                    "fol": "\u00acp_3(Amiri)",
                    "str_fol": "\u00acappreciate_beauty(Amiri)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 7,
                    "text": "If Amiri enjoys the outdoors, then he shares his knowledge and appreciates beauty.",
                    "fol": "p_14(Amiri) \u2192 (p_1(Amiri) \u2227 p_3(Amiri))",
                    "str_fol": "enjoy_outdoors(Amiri) \u2192 (share_knowledge(Amiri) \u2227 appreciate_beauty(Amiri))"
                }
            ],
            "conclusion": {
                "id": 7,
                "subject": "Amiri",
                "text": "Amiri does not enjoy the outdoors.",
                "fol": "\u00acp_14(Amiri)",
                "str_fol": "\u00acenjoy_outdoors(Amiri)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 7,
                    "subject": "Amiri",
                    "text": "Amiri does not enjoy the outdoors.",
                    "fol": "\u00acp_14(Amiri)",
                    "str_fol": "\u00acenjoy_outdoors(Amiri)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 6,
                    "text": "Every gardener enjoys the outdoors or loves nature.",
                    "fol": "\u2200x (p_14(x) \u2228 p_12(x))",
                    "str_fol": "\u2200x (enjoy_outdoors(x) \u2228 love_nature(x))"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Amiri",
                "text": "Amiri loves nature.",
                "fol": "p_12(Amiri)",
                "str_fol": "love_nature(Amiri)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 2,
                    "subject": "Amiri",
                    "text": "Amiri does not water plants.",
                    "fol": "\u00acp_2(Amiri)",
                    "str_fol": "\u00acwater_plants(Amiri)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "Amiri either cares for animals or waters plants.",
                    "fol": "p_13(Amiri) \u2228 p_2(Amiri)",
                    "str_fol": "care_for_animals(Amiri) \u2228 water_plants(Amiri)"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Amiri",
                "text": "Amiri cares for animals.",
                "fol": "p_13(Amiri)",
                "str_fol": "care_for_animals(Amiri)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 8,
                    "subject": "Amiri",
                    "text": "Amiri loves nature.",
                    "fol": "p_12(Amiri)",
                    "str_fol": "love_nature(Amiri)",
                    "negation": false
                },
                {
                    "id": 9,
                    "subject": "Amiri",
                    "text": "Amiri cares for animals.",
                    "fol": "p_13(Amiri)",
                    "str_fol": "care_for_animals(Amiri)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "If Amiri loves nature, then he either cares for animals or nurtures life, but not both.",
                    "fol": "p_12(Amiri) \u2192 (p_13(Amiri) \u2295 p_10(Amiri))",
                    "str_fol": "love_nature(Amiri) \u2192 (care_for_animals(Amiri) \u2295 nurture_life(Amiri))"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Amiri",
                "text": "Amiri cannot nurture life.",
                "fol": "\u00acp_10(Amiri)",
                "str_fol": "\u00acnurture_life(Amiri)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 6,
                    "subject": "Amiri",
                    "text": "Amiri does not make something beautiful.",
                    "fol": "\u00acp_11(Amiri)",
                    "str_fol": "\u00acmake_beautiful(Amiri)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "All gardeners who design landscapes make something beautiful.",
                    "fol": "\u2200x (p_9(x) \u2192 p_11(x))",
                    "str_fol": "\u2200x (design_landscapes(x) \u2192 make_beautiful(x))"
                }
            ],
            "conclusion": {
                "id": 11,
                "subject": "Amiri",
                "text": "Amiri does not design landscapes.",
                "fol": "\u00acp_9(Amiri)",
                "str_fol": "\u00acdesign_landscapes(Amiri)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 11,
                    "subject": "Amiri",
                    "text": "Amiri does not design landscapes.",
                    "fol": "\u00acp_9(Amiri)",
                    "str_fol": "\u00acdesign_landscapes(Amiri)",
                    "negation": true
                },
                {
                    "id": 10,
                    "subject": "Amiri",
                    "text": "Amiri cannot nurture life.",
                    "fol": "\u00acp_10(Amiri)",
                    "str_fol": "\u00acnurture_life(Amiri)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "Any gardener who creates an oasis or designs landscapes can nurture life.",
                    "fol": "\u2200x ((p_8(x) \u2228 p_9(x)) \u2192 p_10(x))",
                    "str_fol": "\u2200x ((create_oasis(x) \u2228 design_landscapes(x)) \u2192 nurture_life(x))"
                }
            ],
            "conclusion": {
                "id": 12,
                "subject": "Amiri",
                "text": "Amiri does not create an oasis.",
                "fol": "\u00acp_8(Amiri)",
                "str_fol": "\u00accreate_oasis(Amiri)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 0,
                    "subject": "Amiri",
                    "text": "Amiri does not prune trees.",
                    "fol": "\u00acp_0(Amiri)",
                    "str_fol": "\u00acprune_trees(Amiri)",
                    "negation": true
                },
                {
                    "id": 12,
                    "subject": "Amiri",
                    "text": "Amiri does not create an oasis.",
                    "fol": "\u00acp_8(Amiri)",
                    "str_fol": "\u00accreate_oasis(Amiri)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "If Amiri either tends to plants or prunes trees (but not both), then he creates an oasis.",
                    "fol": "(p_6(Amiri) \u2295 p_0(Amiri)) \u2192 p_8(Amiri)",
                    "str_fol": "(tend_to_plants(Amiri) \u2295 prune_trees(Amiri)) \u2192 create_oasis(Amiri)"
                }
            ],
            "conclusion": {
                "id": 13,
                "subject": "Amiri",
                "text": "Amiri does not tend to his plants.",
                "fol": "\u00acp_6(Amiri)",
                "str_fol": "\u00actend_to_plants(Amiri)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 13,
                    "subject": "Amiri",
                    "text": "Amiri does not tend to his plants.",
                    "fol": "\u00acp_6(Amiri)",
                    "str_fol": "\u00actend_to_plants(Amiri)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "If Amiri tends to his plants, then he grows a beautiful garden.",
                    "fol": "p_6(Amiri) \u2192 p_7(Amiri)",
                    "str_fol": "tend_to_plants(Amiri) \u2192 grow_beautiful_garden(Amiri)"
                }
            ],
            "conclusion": null
        }
    ],
    "proof_trace": null,
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "UNCERTAIN",
            "Edited Assumptions": "\u00acp_4(Amiri)\n\u00acp_5(Amiri)\n\u00acp_1(Amiri)\n\u00acp_3(Amiri)\n\u00acp_2(Amiri)\n\u00acp_0(Amiri)\n(p_4(Amiri) \u2295 p_11(Amiri)) \u2192 p_5(Amiri)\np_14(Amiri) \u2192 (p_1(Amiri) \u2227 p_3(Amiri))\n\u2200x (p_14(x) \u2228 p_12(x))\np_13(Amiri) \u2228 p_2(Amiri)\np_12(Amiri) \u2192 (p_13(Amiri) \u2295 p_10(Amiri))\n\u2200x (p_9(x) \u2192 p_11(x))\n\u2200x ((p_8(x) \u2228 p_9(x)) \u2192 p_10(x))\n(p_6(Amiri) \u2295 p_0(Amiri)) \u2192 p_8(Amiri)\np_6(Amiri) \u2192 p_7(Amiri)",
            "Initial Goal": "p_7(Amiri)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Amiri).",
                    "-p_5(Amiri).",
                    "-p_1(Amiri).",
                    "-p_3(Amiri).",
                    "-p_2(Amiri).",
                    "-p_0(Amiri).",
                    "(-(p_4(Amiri) <-> p_11(Amiri))) -> p_5(Amiri).",
                    "p_14(Amiri) -> (p_1(Amiri) & p_3(Amiri)).",
                    "all x (p_14(x) | p_12(x)).",
                    "p_13(Amiri) | p_2(Amiri).",
                    "p_12(Amiri) -> (-(p_13(Amiri) <-> p_10(Amiri))).",
                    "all x (p_9(x) -> p_11(x)).",
                    "all x ((p_8(x) | p_9(x)) -> p_10(x)).",
                    "(-(p_6(Amiri) <-> p_0(Amiri))) -> p_8(Amiri).",
                    "p_6(Amiri) -> p_7(Amiri).",
                    "-p_0(Amiri) -> p_7(Amiri)."
                ],
                "formulas(goals)": [
                    "p_7(Amiri)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "\u00acp_0(Amiri) \u2192 p_7(Amiri)"
                ]
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_4(Amiri)\n\u00acp_5(Amiri)\n\u00acp_1(Amiri)\n\u00acp_3(Amiri)\n\u00acp_2(Amiri)\n\u00acp_0(Amiri)\n(p_4(Amiri) \u2295 p_11(Amiri)) \u2192 p_5(Amiri)\np_14(Amiri) \u2192 (p_1(Amiri) \u2227 p_3(Amiri))\n\u2200x (p_14(x) \u2228 p_12(x))\np_13(Amiri) \u2228 p_2(Amiri)\np_12(Amiri) \u2192 (p_13(Amiri) \u2295 p_10(Amiri))\n\u2200x (p_9(x) \u2192 p_11(x))\n\u2200x ((p_8(x) \u2228 p_9(x)) \u2192 p_10(x))\n(p_6(Amiri) \u2295 p_0(Amiri)) \u2192 p_8(Amiri)\np_12(Amiri) \u2192 \u00acp_7(Amiri)\n\u00acp_6(Amiri)",
            "Initial Goal": "p_7(Amiri)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Amiri).",
                    "-p_5(Amiri).",
                    "-p_1(Amiri).",
                    "-p_3(Amiri).",
                    "-p_2(Amiri).",
                    "-p_0(Amiri).",
                    "(-(p_4(Amiri) <-> p_11(Amiri))) -> p_5(Amiri).",
                    "p_14(Amiri) -> (p_1(Amiri) & p_3(Amiri)).",
                    "all x (p_14(x) | p_12(x)).",
                    "p_13(Amiri) | p_2(Amiri).",
                    "p_12(Amiri) -> (-(p_13(Amiri) <-> p_10(Amiri))).",
                    "all x (p_9(x) -> p_11(x)).",
                    "all x ((p_8(x) | p_9(x)) -> p_10(x)).",
                    "(-(p_6(Amiri) <-> p_0(Amiri))) -> p_8(Amiri).",
                    "p_12(Amiri) -> -p_7(Amiri).",
                    "-p_6(Amiri)."
                ],
                "formulas(goals)": [
                    "-p_7(Amiri)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_6(Amiri) \u2192 p_7(Amiri)"
                ],
                "added_facts": [
                    "\u00acp_6(Amiri)"
                ],
                "added_rules": [
                    "p_12(Amiri) \u2192 \u00acp_7(Amiri)"
                ]
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_4(Amiri)\n\u00acp_5(Amiri)\n\u00acp_1(Amiri)\n\u00acp_3(Amiri)\n\u00acp_2(Amiri)\n\u00acp_0(Amiri)\n(p_4(Amiri) \u2295 p_11(Amiri)) \u2192 p_5(Amiri)\np_14(Amiri) \u2192 (p_1(Amiri) \u2227 p_3(Amiri))\n\u2200x (p_14(x) \u2228 p_12(x))\np_13(Amiri) \u2228 p_2(Amiri)\np_12(Amiri) \u2192 (p_13(Amiri) \u2295 p_10(Amiri))\n\u2200x (p_9(x) \u2192 p_11(x))\n\u2200x ((p_8(x) \u2228 p_9(x)) \u2192 p_10(x))\n(p_6(Amiri) \u2295 p_0(Amiri)) \u2192 p_8(Amiri)\n\u00acp_6(Amiri)\np_13(Amiri) \u2192 p_7(Amiri)",
            "Initial Goal": "p_7(Amiri)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(amiri)",
                    "-p_5(amiri)",
                    "-p_1(amiri)",
                    "-p_3(amiri)",
                    "-p_2(amiri)",
                    "-p_0(amiri)",
                    "(-(p_4(amiri) <-> p_11(amiri))) -> p_5(amiri)",
                    "p_14(amiri) -> (p_1(amiri) & p_3(amiri))",
                    "all x (p_14(x) | p_12(x))",
                    "p_13(amiri) | p_2(amiri)",
                    "p_12(amiri) -> (-(p_13(amiri) <-> p_10(amiri)))",
                    "all x (p_9(x) -> p_11(x))",
                    "all x ((p_8(x) | p_9(x)) -> p_10(x))",
                    "(-(p_6(amiri) <-> p_0(amiri))) -> p_8(amiri)",
                    "-p_6(amiri)",
                    "p_13(amiri) -> p_7(amiri)"
                ],
                "formulas(goals)": [
                    "p_7(amiri)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_12(Amiri) \u2192 \u00acp_7(Amiri)"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_13(Amiri) \u2192 p_7(Amiri)"
                ]
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_4(Amiri)\n\u00acp_5(Amiri)\n\u00acp_1(Amiri)\n\u00acp_3(Amiri)\n\u00acp_2(Amiri)\n\u00acp_0(Amiri)\n(p_4(Amiri) \u2295 p_11(Amiri)) \u2192 p_5(Amiri)\np_14(Amiri) \u2192 (p_1(Amiri) \u2227 p_3(Amiri))\n\u2200x (p_14(x) \u2228 p_12(x))\np_12(Amiri) \u2192 (p_13(Amiri) \u2295 p_10(Amiri))\n\u2200x (p_9(x) \u2192 p_11(x))\n\u2200x ((p_8(x) \u2228 p_9(x)) \u2192 p_10(x))\n(p_6(Amiri) \u2295 p_0(Amiri)) \u2192 p_8(Amiri)\n\u00acp_6(Amiri)\np_13(Amiri) \u2192 p_7(Amiri)\n\u00acp_13(Amiri)\n\u00acp_13(Amiri) \u2192 \u00acp_7(Amiri)",
            "Initial Goal": "p_7(Amiri)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Amiri).",
                    "-p_5(Amiri).",
                    "-p_1(Amiri).",
                    "-p_3(Amiri).",
                    "-p_2(Amiri).",
                    "-p_0(Amiri).",
                    "(-(p_4(Amiri) <-> p_11(Amiri))) -> p_5(Amiri).",
                    "p_14(Amiri) -> (p_1(Amiri) & p_3(Amiri)).",
                    "all x (p_14(x) | p_12(x)).",
                    "p_12(Amiri) -> (-(p_13(Amiri) <-> p_10(Amiri))).",
                    "all x (p_9(x) -> p_11(x)).",
                    "all x ((p_8(x) | p_9(x)) -> p_10(x)).",
                    "(-(p_6(Amiri) <-> p_0(Amiri))) -> p_8(Amiri).",
                    "-p_6(Amiri).",
                    "p_13(Amiri) -> p_7(Amiri).",
                    "-p_13(Amiri).",
                    "-p_13(Amiri) -> -p_7(Amiri)."
                ],
                "formulas(goals)": [
                    "-p_7(Amiri)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_13(Amiri) \u2228 p_2(Amiri)"
                ],
                "added_facts": [
                    "\u00acp_13(Amiri)"
                ],
                "added_rules": [
                    "\u00acp_13(Amiri) \u2192 \u00acp_7(Amiri)"
                ]
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_4(Amiri)\n\u00acp_5(Amiri)\n\u00acp_1(Amiri)\n\u00acp_3(Amiri)\n\u00acp_2(Amiri)\n\u00acp_0(Amiri)\n(p_4(Amiri) \u2295 p_11(Amiri)) \u2192 p_5(Amiri)\np_14(Amiri) \u2192 (p_1(Amiri) \u2227 p_3(Amiri))\n\u2200x (p_14(x) \u2228 p_12(x))\np_12(Amiri) \u2192 (p_13(Amiri) \u2295 p_10(Amiri))\n\u2200x (p_9(x) \u2192 p_11(x))\n\u2200x ((p_8(x) \u2228 p_9(x)) \u2192 p_10(x))\n(p_6(Amiri) \u2295 p_0(Amiri)) \u2192 p_8(Amiri)\n\u00acp_6(Amiri)\np_13(Amiri) \u2192 p_7(Amiri)\n\u00acp_13(Amiri)\n\u00acp_13(Amiri) \u2192 \u00acp_7(Amiri)\np_12(Amiri) \u2192 p_10(Amiri)",
            "Initial Goal": "p_7(Amiri)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Amiri).",
                    "-p_5(Amiri).",
                    "-p_1(Amiri).",
                    "-p_3(Amiri).",
                    "-p_2(Amiri).",
                    "-p_0(Amiri).",
                    "(-(p_4(Amiri) <-> p_11(Amiri))) -> p_5(Amiri).",
                    "p_14(Amiri) -> (p_1(Amiri) & p_3(Amiri)).",
                    "all x (p_14(x) | p_12(x)).",
                    "p_12(Amiri) -> (-(p_13(Amiri) <-> p_10(Amiri))).",
                    "all x (p_9(x) -> p_11(x)).",
                    "all x ((p_8(x) | p_9(x)) -> p_10(x)).",
                    "(-(p_6(Amiri) <-> p_0(Amiri))) -> p_8(Amiri).",
                    "-p_6(Amiri).",
                    "p_13(Amiri) -> p_7(Amiri).",
                    "-p_13(Amiri).",
                    "-p_13(Amiri) -> -p_7(Amiri).",
                    "p_12(Amiri) -> p_10(Amiri)."
                ],
                "formulas(goals)": [
                    "-p_7(Amiri)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "p_12(Amiri) \u2192 p_10(Amiri)"
                ]
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_4(Amiri)\n\u00acp_5(Amiri)\n\u00acp_1(Amiri)\n\u00acp_3(Amiri)\n\u00acp_2(Amiri)\n\u00acp_0(Amiri)\n((p_4(Amiri) \u2228 p_11(Amiri)) \u2227 (\u00acp_4(Amiri) \u2228 \u00acp_11(Amiri))) \u2192 p_5(Amiri)\np_14(Amiri) \u2192 (p_1(Amiri) \u2227 p_3(Amiri))\n\u2200x (\u00acp_12(x) \u2192 p_14(x))\np_12(Amiri) \u2192 (p_13(Amiri) \u2295 p_10(Amiri))\n\u2200x (p_9(x) \u2192 p_11(x))\n\u2200x ((p_8(x) \u2228 p_9(x)) \u2192 p_10(x))\n((p_6(Amiri) \u2228 p_0(Amiri)) \u2227 (\u00acp_6(Amiri) \u2228 \u00acp_0(Amiri))) \u2192 p_8(Amiri)\n\u00acp_6(Amiri)\np_13(Amiri) \u2192 p_7(Amiri)\n\u00acp_13(Amiri)\n\u00acp_13(Amiri) \u2192 \u00acp_7(Amiri)\np_12(Amiri) \u2192 p_10(Amiri)",
            "Initial Goal": "p_7(Amiri)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Amiri).",
                    "-p_5(Amiri).",
                    "-p_1(Amiri).",
                    "-p_3(Amiri).",
                    "-p_2(Amiri).",
                    "-p_0(Amiri).",
                    "((p_4(Amiri) | p_11(Amiri)) & (-p_4(Amiri) | -p_11(Amiri))) -> p_5(Amiri).",
                    "p_14(Amiri) -> (p_1(Amiri) & p_3(Amiri)).",
                    "all x (-p_12(x) -> p_14(x)).",
                    "p_12(Amiri) -> (-(p_13(Amiri) <-> p_10(Amiri))).",
                    "all x (p_9(x) -> p_11(x)).",
                    "all x ((p_8(x) | p_9(x)) -> p_10(x)).",
                    "((p_6(Amiri) | p_0(Amiri)) & (-p_6(Amiri) | -p_0(Amiri))) -> p_8(Amiri).",
                    "-p_6(Amiri).",
                    "p_13(Amiri) -> p_7(Amiri).",
                    "-p_13(Amiri).",
                    "-p_13(Amiri) -> -p_7(Amiri).",
                    "p_12(Amiri) -> p_10(Amiri)."
                ],
                "formulas(goals)": [
                    "-p_7(Amiri)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u2200x (p_14(x) \u2228 p_12(x))",
                    "(p_4(Amiri) \u2295 p_11(Amiri)) \u2192 p_5(Amiri)",
                    "(p_6(Amiri) \u2295 p_0(Amiri)) \u2192 p_8(Amiri)"
                ],
                "added_facts": [],
                "added_rules": [
                    "\u2200x (\u00acp_12(x) \u2192 p_14(x))",
                    "((p_4(Amiri) \u2228 p_11(Amiri)) \u2227 (\u00acp_4(Amiri) \u2228 \u00acp_11(Amiri))) \u2192 p_5(Amiri)",
                    "((p_6(Amiri) \u2228 p_0(Amiri)) \u2227 (\u00acp_6(Amiri) \u2228 \u00acp_0(Amiri))) \u2192 p_8(Amiri)"
                ]
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_4(Amiri)\n\u00acp_5(Amiri)\n\u00acp_1(Amiri)\n\u00acp_3(Amiri)\n\u00acp_2(Amiri)\n\u00acp_0(Amiri)\n((p_4(Amiri) \u2228 p_11(Amiri)) \u2227 (\u00acp_4(Amiri) \u2228 \u00acp_11(Amiri))) \u2192 p_5(Amiri)\np_14(Amiri) \u2192 (p_1(Amiri) \u2227 p_3(Amiri))\n\u2200x (\u00acp_12(x) \u2192 p_14(x))\np_12(Amiri) \u2192 (p_13(Amiri) \u2295 p_10(Amiri))\n\u2200x (p_9(x) \u2192 p_11(x))\n\u2200x ((p_8(x) \u2228 p_9(x)) \u2192 p_10(x))\n((p_6(Amiri) \u2228 p_0(Amiri)) \u2227 (\u00acp_6(Amiri) \u2228 \u00acp_0(Amiri))) \u2192 p_8(Amiri)\n\u00acp_6(Amiri)\np_13(Amiri) \u2192 p_7(Amiri)\n\u00acp_13(Amiri)\n\u00acp_13(Amiri) \u2192 p_7(Amiri)\np_12(Amiri) \u2192 p_10(Amiri)",
            "Initial Goal": "p_7(Amiri)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Amiri)",
                    "-p_5(Amiri)",
                    "-p_1(Amiri)",
                    "-p_3(Amiri)",
                    "-p_2(Amiri)",
                    "-p_0(Amiri)",
                    "((p_4(Amiri) | p_11(Amiri)) & (-p_4(Amiri) | -p_11(Amiri))) -> p_5(Amiri)",
                    "p_14(Amiri) -> (p_1(Amiri) & p_3(Amiri))",
                    "all x (-p_12(x) -> p_14(x))",
                    "p_12(Amiri) -> (-(p_13(Amiri) <-> p_10(Amiri)))",
                    "all x (p_9(x) -> p_11(x))",
                    "all x ((p_8(x) | p_9(x)) -> p_10(x))",
                    "((p_6(Amiri) | p_0(Amiri)) & (-p_6(Amiri) | -p_0(Amiri))) -> p_8(Amiri)",
                    "-p_6(Amiri)",
                    "p_13(Amiri) -> p_7(Amiri)",
                    "-p_13(Amiri)",
                    "-p_13(Amiri) -> p_7(Amiri)",
                    "p_12(Amiri) -> p_10(Amiri)"
                ],
                "formulas(goals)": [
                    "p_7(Amiri)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u00acp_13(Amiri) \u2192 \u00acp_7(Amiri)"
                ],
                "added_facts": [],
                "added_rules": [
                    "\u00acp_13(Amiri) \u2192 p_7(Amiri)"
                ]
            }
        }
    ]
}