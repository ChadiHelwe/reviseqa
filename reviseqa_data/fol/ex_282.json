{
    "background_story": "Chicken, a gentle and unusual rooster, took on a paternally protective role over the farm's newest additions - a brood of orphaned ducklings. After their mother's sudden departure, Chicken stepped in, shielding them from harm and teaching them essential survival skills. He showed them where to forage for food, how to avoid predators, and the safest spots to roost. As the ducklings grew, Chicken continued to watch over them, offering guidance and comfort whenever they needed it. The farmer, who had initially thought Chicken's behavior odd, soon grew to appreciate the rooster's paternal instincts, recognizing the unique bond he had formed with the ducklings. Under Chicken's care, the ducklings thrived, and the farm became a testament to the power of unexpected paternal love.",
    "predicates": [
        {
            "id": 0,
            "name": "is_parent"
        },
        {
            "id": 1,
            "name": "show_affection"
        },
        {
            "id": 2,
            "name": "finds_food"
        },
        {
            "id": 3,
            "name": "defend_territory"
        },
        {
            "id": 4,
            "name": "is_guardian"
        },
        {
            "id": 5,
            "name": "guides_others"
        },
        {
            "id": 6,
            "name": "offers_guidance"
        },
        {
            "id": 7,
            "name": "is_caring"
        },
        {
            "id": 8,
            "name": "care_for_young"
        },
        {
            "id": 9,
            "name": "provide_shelter"
        },
        {
            "id": 10,
            "name": "nurtures_others"
        },
        {
            "id": 11,
            "name": "teach_survival_skills"
        },
        {
            "id": 12,
            "name": "leads_group"
        },
        {
            "id": 13,
            "name": "protect_from_harm"
        },
        {
            "id": 14,
            "name": "feeds_offspring"
        },
        {
            "id": 15,
            "name": "guards_nest"
        },
        {
            "id": 16,
            "name": "keeps_warm"
        },
        {
            "id": 17,
            "name": "watches_over"
        },
        {
            "id": 18,
            "name": "keeps_safe"
        },
        {
            "id": 19,
            "name": "is_social"
        },
        {
            "id": 20,
            "name": "gives_comfort"
        },
        {
            "id": 21,
            "name": "has_experience"
        },
        {
            "id": 22,
            "name": "gives_direction"
        },
        {
            "id": 23,
            "name": "is_guardian_figure"
        },
        {
            "id": 24,
            "name": "skills"
        }
    ],
    "subject_name": "Chicken",
    "subject_category": "animal",
    "keyword": "paternally",
    "all_facts": [
        {
            "id": 0,
            "subject": "Chicken",
            "text": "Chicken is a parent.",
            "fol": "p_0(Chicken)",
            "str_fol": "is_parent(Chicken)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Chicken",
            "text": "Chicken does not show affection.",
            "fol": "\u00acp_1(Chicken)",
            "str_fol": "\u00acshow_affection(Chicken)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Chicken",
            "text": "Chicken finds food.",
            "fol": "p_2(Chicken)",
            "str_fol": "finds_food(Chicken)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Chicken",
            "text": "Chicken defends his territory.",
            "fol": "p_3(Chicken)",
            "str_fol": "defend_territory(Chicken)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Chicken",
            "text": "Chicken is not a guardian.",
            "fol": "\u00acp_4(Chicken)",
            "str_fol": "\u00acis_guardian(Chicken)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Chicken",
            "text": "Chicken does not guide others.",
            "fol": "\u00acp_5(Chicken)",
            "str_fol": "\u00acguides_others(Chicken)",
            "negation": true
        },
        {
            "id": 6,
            "subject": "Chicken",
            "text": "Chicken offers guidance.",
            "fol": "p_6(Chicken)",
            "str_fol": "offers_guidance(Chicken)",
            "negation": false
        },
        {
            "id": 7,
            "subject": "Chicken",
            "text": "Chicken is not a caring animal.",
            "fol": "\u00acp_7(Chicken)",
            "str_fol": "\u00acis_caring(Chicken)",
            "negation": true
        },
        {
            "id": 8,
            "subject": "Chicken",
            "text": "Chicken protects the young from harm.",
            "fol": "p_13(Chicken)",
            "str_fol": "protect_from_harm(Chicken)",
            "negation": false
        },
        {
            "id": 9,
            "subject": "Chicken",
            "text": "Chicken leads a group.",
            "fol": "p_12(Chicken)",
            "str_fol": "leads_group(Chicken)",
            "negation": false
        },
        {
            "id": 10,
            "subject": "Chicken",
            "text": "Chicken does not nurture others.",
            "fol": "\u00acp_10(Chicken)",
            "str_fol": "\u00acnurtures_others(Chicken)",
            "negation": true
        },
        {
            "id": 11,
            "subject": "Chicken",
            "text": "Chicken teaches the young ducklings survival skills.",
            "fol": "p_11(Chicken)",
            "str_fol": "teach_survival_skills(Chicken)",
            "negation": false
        },
        {
            "id": 12,
            "subject": "Chicken",
            "text": "Chicken provides shelter.",
            "fol": "p_9(Chicken)",
            "str_fol": "provide_shelter(Chicken)",
            "negation": false
        },
        {
            "id": 13,
            "subject": "Chicken",
            "text": "Chicken cares for the young ducklings.",
            "fol": "p_8(Chicken)",
            "str_fol": "care_for_young(Chicken)",
            "negation": false
        },
        {
            "id": 14,
            "subject": "Chicken",
            "text": "Chicken cares for the young ducklings and either protects them from harm or teaches them survival skills (or both).",
            "fol": "p_8(Chicken) \u2227 (protect_from_harm(Chicken) \u2228 teach_survival_skills(Chicken))",
            "str_fol": "care_for_young(Chicken) \u2227 (protect_from_harm(Chicken) \u2228 teach_survival_skills(Chicken))",
            "negation": false
        }
    ],
    "context_facts": [
        {
            "id": 6,
            "subject": "Chicken",
            "text": "Chicken offers guidance.",
            "fol": "p_6(Chicken)",
            "str_fol": "offers_guidance(Chicken)",
            "negation": false
        },
        {
            "id": 7,
            "subject": "Chicken",
            "text": "Chicken is not a caring animal.",
            "fol": "\u00acp_7(Chicken)",
            "str_fol": "\u00acis_caring(Chicken)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Chicken",
            "text": "Chicken does not guide others.",
            "fol": "\u00acp_5(Chicken)",
            "str_fol": "\u00acguides_others(Chicken)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Chicken",
            "text": "Chicken is a parent.",
            "fol": "p_0(Chicken)",
            "str_fol": "is_parent(Chicken)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Chicken",
            "text": "Chicken defends his territory.",
            "fol": "p_3(Chicken)",
            "str_fol": "defend_territory(Chicken)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Chicken",
            "text": "Chicken is not a guardian.",
            "fol": "\u00acp_4(Chicken)",
            "str_fol": "\u00acis_guardian(Chicken)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Chicken",
            "text": "Chicken finds food.",
            "fol": "p_2(Chicken)",
            "str_fol": "finds_food(Chicken)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Chicken",
            "text": "Chicken does not show affection.",
            "fol": "\u00acp_1(Chicken)",
            "str_fol": "\u00acshow_affection(Chicken)",
            "negation": true
        }
    ],
    "context_rules": [
        {
            "id": 5,
            "text": "Any animal that either protects others from harm or offers guidance is a caring animal.",
            "fol": "\u2200x ((p_13(x) \u2295 p_6(x)) \u2192 p_7(x))",
            "str_fol": "\u2200x ((protect_from_harm(x) \u2295 offers_guidance(x)) \u2192 is_caring(x))"
        },
        {
            "id": 4,
            "text": "Chicken either leads a group or guides others.",
            "fol": "p_12(Chicken) \u2228 p_5(Chicken)",
            "str_fol": "leads_group(Chicken) \u2228 guides_others(Chicken)"
        },
        {
            "id": 3,
            "text": "If Chicken is a parent, then he either nurtures others or leads a group, but not both.",
            "fol": "p_0(Chicken) \u2192 (p_10(Chicken) \u2295 p_12(Chicken))",
            "str_fol": "is_parent(Chicken) \u2192 (nurtures_others(Chicken) \u2295 leads_group(Chicken))"
        },
        {
            "id": 2,
            "text": "If Chicken either teaches survival skills or defends his territory (but not both), then he is a guardian.",
            "fol": "(p_11(Chicken) \u2295 p_3(Chicken)) \u2192 p_4(Chicken)",
            "str_fol": "(teach_survival_skills(Chicken) \u2295 defend_territory(Chicken)) \u2192 is_guardian(Chicken)"
        },
        {
            "id": 1,
            "text": "If Chicken either provides shelter or finds food (but not both), then he nurtures others.",
            "fol": "(p_9(Chicken) \u2295 p_2(Chicken)) \u2192 p_10(Chicken)",
            "str_fol": "(provide_shelter(Chicken) \u2295 finds_food(Chicken)) \u2192 nurtures_others(Chicken)"
        },
        {
            "id": 0,
            "text": "If Chicken either cares for the young or provides shelter (but not both), then he shows affection.",
            "fol": "(p_8(Chicken) \u2295 p_9(Chicken)) \u2192 p_1(Chicken)",
            "str_fol": "(care_for_young(Chicken) \u2295 provide_shelter(Chicken)) \u2192 show_affection(Chicken)"
        }
    ],
    "context": [
        {
            "id": 6,
            "subject": "Chicken",
            "text": "Chicken offers guidance.",
            "fol": "p_6(Chicken)",
            "str_fol": "offers_guidance(Chicken)",
            "negation": false
        },
        {
            "id": 7,
            "subject": "Chicken",
            "text": "Chicken is not a caring animal.",
            "fol": "\u00acp_7(Chicken)",
            "str_fol": "\u00acis_caring(Chicken)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Chicken",
            "text": "Chicken does not guide others.",
            "fol": "\u00acp_5(Chicken)",
            "str_fol": "\u00acguides_others(Chicken)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Chicken",
            "text": "Chicken is a parent.",
            "fol": "p_0(Chicken)",
            "str_fol": "is_parent(Chicken)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Chicken",
            "text": "Chicken defends his territory.",
            "fol": "p_3(Chicken)",
            "str_fol": "defend_territory(Chicken)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Chicken",
            "text": "Chicken is not a guardian.",
            "fol": "\u00acp_4(Chicken)",
            "str_fol": "\u00acis_guardian(Chicken)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Chicken",
            "text": "Chicken finds food.",
            "fol": "p_2(Chicken)",
            "str_fol": "finds_food(Chicken)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Chicken",
            "text": "Chicken does not show affection.",
            "fol": "\u00acp_1(Chicken)",
            "str_fol": "\u00acshow_affection(Chicken)",
            "negation": true
        },
        {
            "id": 5,
            "text": "Any animal that either protects others from harm or offers guidance is a caring animal.",
            "fol": "\u2200x ((p_13(x) \u2295 p_6(x)) \u2192 p_7(x))",
            "str_fol": "\u2200x ((protect_from_harm(x) \u2295 offers_guidance(x)) \u2192 is_caring(x))"
        },
        {
            "id": 4,
            "text": "Chicken either leads a group or guides others.",
            "fol": "p_12(Chicken) \u2228 p_5(Chicken)",
            "str_fol": "leads_group(Chicken) \u2228 guides_others(Chicken)"
        },
        {
            "id": 3,
            "text": "If Chicken is a parent, then he either nurtures others or leads a group, but not both.",
            "fol": "p_0(Chicken) \u2192 (p_10(Chicken) \u2295 p_12(Chicken))",
            "str_fol": "is_parent(Chicken) \u2192 (nurtures_others(Chicken) \u2295 leads_group(Chicken))"
        },
        {
            "id": 2,
            "text": "If Chicken either teaches survival skills or defends his territory (but not both), then he is a guardian.",
            "fol": "(p_11(Chicken) \u2295 p_3(Chicken)) \u2192 p_4(Chicken)",
            "str_fol": "(teach_survival_skills(Chicken) \u2295 defend_territory(Chicken)) \u2192 is_guardian(Chicken)"
        },
        {
            "id": 1,
            "text": "If Chicken either provides shelter or finds food (but not both), then he nurtures others.",
            "fol": "(p_9(Chicken) \u2295 p_2(Chicken)) \u2192 p_10(Chicken)",
            "str_fol": "(provide_shelter(Chicken) \u2295 finds_food(Chicken)) \u2192 nurtures_others(Chicken)"
        },
        {
            "id": 0,
            "text": "If Chicken either cares for the young or provides shelter (but not both), then he shows affection.",
            "fol": "(p_8(Chicken) \u2295 p_9(Chicken)) \u2192 p_1(Chicken)",
            "str_fol": "(care_for_young(Chicken) \u2295 provide_shelter(Chicken)) \u2192 show_affection(Chicken)"
        }
    ],
    "context_fol": "p_6(Chicken)\n\u00acp_7(Chicken)\n\u00acp_5(Chicken)\np_0(Chicken)\np_3(Chicken)\n\u00acp_4(Chicken)\np_2(Chicken)\n\u00acp_1(Chicken)\n\u2200x ((p_13(x) \u2295 p_6(x)) \u2192 p_7(x))\np_12(Chicken) \u2228 p_5(Chicken)\np_0(Chicken) \u2192 (p_10(Chicken) \u2295 p_12(Chicken))\n(p_11(Chicken) \u2295 p_3(Chicken)) \u2192 p_4(Chicken)\n(p_9(Chicken) \u2295 p_2(Chicken)) \u2192 p_10(Chicken)\n(p_8(Chicken) \u2295 p_9(Chicken)) \u2192 p_1(Chicken)",
    "conclusion": {
        "id": 12,
        "text": "Chicken cares for the young ducklings and either protects them from harm or teaches them survival skills (or both).",
        "fol": "p_8(Chicken) \u2227 (p_13(Chicken) \u2228 p_11(Chicken))",
        "str_fol": "care_for_young(Chicken) \u2227 (protect_from_harm(Chicken) \u2228 teach_survival_skills(Chicken))"
    },
    "initial_answer": "True",
    "initial_goal": "p_8(Chicken) \u2227 (p_13(Chicken) \u2228 p_11(Chicken))",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 6,
                    "subject": "Chicken",
                    "text": "Chicken offers guidance.",
                    "fol": "p_6(Chicken)",
                    "str_fol": "offers_guidance(Chicken)",
                    "negation": false
                },
                {
                    "id": 7,
                    "subject": "Chicken",
                    "text": "Chicken is not a caring animal.",
                    "fol": "\u00acp_7(Chicken)",
                    "str_fol": "\u00acis_caring(Chicken)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "Any animal that either protects others from harm or offers guidance is a caring animal.",
                    "fol": "\u2200x ((p_13(x) \u2295 p_6(x)) \u2192 p_7(x))",
                    "str_fol": "\u2200x ((protect_from_harm(x) \u2295 offers_guidance(x)) \u2192 is_caring(x))"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Chicken",
                "text": "Chicken protects the young from harm.",
                "fol": "p_13(Chicken)",
                "str_fol": "protect_from_harm(Chicken)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 5,
                    "subject": "Chicken",
                    "text": "Chicken does not guide others.",
                    "fol": "\u00acp_5(Chicken)",
                    "str_fol": "\u00acguides_others(Chicken)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "Chicken either leads a group or guides others.",
                    "fol": "p_12(Chicken) \u2228 p_5(Chicken)",
                    "str_fol": "leads_group(Chicken) \u2228 guides_others(Chicken)"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Chicken",
                "text": "Chicken leads a group.",
                "fol": "p_12(Chicken)",
                "str_fol": "leads_group(Chicken)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 0,
                    "subject": "Chicken",
                    "text": "Chicken is a parent.",
                    "fol": "p_0(Chicken)",
                    "str_fol": "is_parent(Chicken)",
                    "negation": false
                },
                {
                    "id": 9,
                    "subject": "Chicken",
                    "text": "Chicken leads a group.",
                    "fol": "p_12(Chicken)",
                    "str_fol": "leads_group(Chicken)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "If Chicken is a parent, then he either nurtures others or leads a group, but not both.",
                    "fol": "p_0(Chicken) \u2192 (p_10(Chicken) \u2295 p_12(Chicken))",
                    "str_fol": "is_parent(Chicken) \u2192 (nurtures_others(Chicken) \u2295 leads_group(Chicken))"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Chicken",
                "text": "Chicken does not nurture others.",
                "fol": "\u00acp_10(Chicken)",
                "str_fol": "\u00acnurtures_others(Chicken)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 3,
                    "subject": "Chicken",
                    "text": "Chicken defends his territory.",
                    "fol": "p_3(Chicken)",
                    "str_fol": "defend_territory(Chicken)",
                    "negation": false
                },
                {
                    "id": 4,
                    "subject": "Chicken",
                    "text": "Chicken is not a guardian.",
                    "fol": "\u00acp_4(Chicken)",
                    "str_fol": "\u00acis_guardian(Chicken)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "If Chicken either teaches survival skills or defends his territory (but not both), then he is a guardian.",
                    "fol": "(p_11(Chicken) \u2295 p_3(Chicken)) \u2192 p_4(Chicken)",
                    "str_fol": "(teach_survival_skills(Chicken) \u2295 defend_territory(Chicken)) \u2192 is_guardian(Chicken)"
                }
            ],
            "conclusion": {
                "id": 11,
                "subject": "Chicken",
                "text": "Chicken teaches the young ducklings survival skills.",
                "fol": "p_11(Chicken)",
                "str_fol": "teach_survival_skills(Chicken)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 2,
                    "subject": "Chicken",
                    "text": "Chicken finds food.",
                    "fol": "p_2(Chicken)",
                    "str_fol": "finds_food(Chicken)",
                    "negation": false
                },
                {
                    "id": 10,
                    "subject": "Chicken",
                    "text": "Chicken does not nurture others.",
                    "fol": "\u00acp_10(Chicken)",
                    "str_fol": "\u00acnurtures_others(Chicken)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "If Chicken either provides shelter or finds food (but not both), then he nurtures others.",
                    "fol": "(p_9(Chicken) \u2295 p_2(Chicken)) \u2192 p_10(Chicken)",
                    "str_fol": "(provide_shelter(Chicken) \u2295 finds_food(Chicken)) \u2192 nurtures_others(Chicken)"
                }
            ],
            "conclusion": {
                "id": 12,
                "subject": "Chicken",
                "text": "Chicken provides shelter.",
                "fol": "p_9(Chicken)",
                "str_fol": "provide_shelter(Chicken)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 12,
                    "subject": "Chicken",
                    "text": "Chicken provides shelter.",
                    "fol": "p_9(Chicken)",
                    "str_fol": "provide_shelter(Chicken)",
                    "negation": false
                },
                {
                    "id": 1,
                    "subject": "Chicken",
                    "text": "Chicken does not show affection.",
                    "fol": "\u00acp_1(Chicken)",
                    "str_fol": "\u00acshow_affection(Chicken)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "If Chicken either cares for the young or provides shelter (but not both), then he shows affection.",
                    "fol": "(p_8(Chicken) \u2295 p_9(Chicken)) \u2192 p_1(Chicken)",
                    "str_fol": "(care_for_young(Chicken) \u2295 provide_shelter(Chicken)) \u2192 show_affection(Chicken)"
                }
            ],
            "conclusion": {
                "id": 13,
                "subject": "Chicken",
                "text": "Chicken cares for the young ducklings.",
                "fol": "p_8(Chicken)",
                "str_fol": "care_for_young(Chicken)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 13,
                    "subject": "Chicken",
                    "text": "Chicken cares for the young ducklings.",
                    "fol": "p_8(Chicken)",
                    "str_fol": "care_for_young(Chicken)",
                    "negation": false
                },
                {
                    "id": 8,
                    "subject": "Chicken",
                    "text": "Chicken protects the young from harm.",
                    "fol": "p_13(Chicken)",
                    "str_fol": "protect_from_harm(Chicken)",
                    "negation": false
                },
                {
                    "id": 11,
                    "subject": "Chicken",
                    "text": "Chicken teaches the young ducklings survival skills.",
                    "fol": "p_11(Chicken)",
                    "str_fol": "teach_survival_skills(Chicken)",
                    "negation": false
                }
            ],
            "rules": [],
            "conclusion": {
                "id": 12,
                "text": "Chicken cares for the young ducklings and either protects them from harm or teaches them survival skills (or both).",
                "fol": "p_8(Chicken) \u2227 (p_13(Chicken) \u2228 p_11(Chicken))",
                "str_fol": "care_for_young(Chicken) \u2227 (protect_from_harm(Chicken) \u2228 teach_survival_skills(Chicken))"
            }
        }
    ],
    "proof_trace": "1 (all x (-(p_13(x) <-> p_6(x)) -> p_7(x))).  [assumption].\n2 p_0(Chicken) -> -(p_10(Chicken) <-> p_12(Chicken)).  [assumption].\n4 -(p_9(Chicken) <-> p_2(Chicken)) -> p_10(Chicken).  [assumption].\n5 -(p_8(Chicken) <-> p_9(Chicken)) -> p_1(Chicken).  [assumption].\n6 p_8(Chicken) & (p_13(Chicken) | p_11(Chicken)).  [goal].\n7 p_13(x) | -p_6(x) | p_7(x).  [clausify(1)].\n8 p_6(Chicken).  [assumption].\n10 p_13(Chicken) | p_7(Chicken).  [resolve(7,b,8,a)].\n11 -p_7(Chicken).  [assumption].\n12 p_12(Chicken) | p_5(Chicken).  [assumption].\n13 -p_5(Chicken).  [assumption].\n15 p_0(Chicken).  [assumption].\n16 -p_0(Chicken) | -p_10(Chicken) | -p_12(Chicken).  [clausify(2)].\n22 p_9(Chicken) | -p_2(Chicken) | p_10(Chicken).  [clausify(4)].\n23 p_2(Chicken).  [assumption].\n26 -p_1(Chicken).  [assumption].\n27 p_8(Chicken) | -p_9(Chicken) | p_1(Chicken).  [clausify(5)].\n28 p_8(Chicken) | -p_9(Chicken).  [resolve(27,c,26,a)].\n29 -p_8(Chicken) | -p_13(Chicken).  [deny(6)].\n32 -p_9(Chicken) | -p_13(Chicken).  [resolve(28,a,29,a)].\n33 p_13(Chicken).  [resolve(10,b,11,a)].\n34 -p_10(Chicken) | -p_12(Chicken).  [resolve(16,a,15,a)].\n35 p_12(Chicken).  [resolve(12,b,13,a)].\n38 -p_9(Chicken).  [resolve(32,b,33,a)].\n39 p_9(Chicken) | p_10(Chicken).  [resolve(22,b,23,a)].\n40 p_10(Chicken).  [resolve(38,a,39,a)].\n41 -p_10(Chicken).  [resolve(34,b,35,a)].\n42 $F.  [resolve(40,a,41,a)].",
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_6(Chicken)\n\u00acp_7(Chicken)\n\u00acp_5(Chicken)\np_0(Chicken)\np_3(Chicken)\n\u00acp_4(Chicken)\np_2(Chicken)\n\u00acp_1(Chicken)\n\u2200x ((p_13(x) \u2295 p_6(x)) \u2192 p_7(x))\np_12(Chicken) \u2228 p_5(Chicken)\np_0(Chicken) \u2192 (p_10(Chicken) \u2295 p_12(Chicken))\n(p_11(Chicken) \u2295 p_3(Chicken)) \u2192 p_4(Chicken)\n(p_9(Chicken) \u2295 p_2(Chicken)) \u2192 p_10(Chicken)\np_8(Chicken) \u2192 p_1(Chicken)",
            "Initial Goal": "p_8(Chicken) \u2227 (p_13(Chicken) \u2228 p_11(Chicken))",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_6(Chicken)",
                    "-p_7(Chicken)",
                    "-p_5(Chicken)",
                    "p_0(Chicken)",
                    "p_3(Chicken)",
                    "-p_4(Chicken)",
                    "p_2(Chicken)",
                    "-p_1(Chicken)",
                    "all x (-(p_13(x) <-> p_6(x)) -> p_7(x))",
                    "p_12(Chicken) | p_5(Chicken)",
                    "p_0(Chicken) -> -(p_10(Chicken) <-> p_12(Chicken))",
                    "-(p_11(Chicken) <-> p_3(Chicken)) -> p_4(Chicken)",
                    "-(p_9(Chicken) <-> p_2(Chicken)) -> p_10(Chicken)",
                    "p_8(Chicken) -> p_1(Chicken)"
                ],
                "formulas(goals)": [
                    "-(p_8(Chicken) & (p_13(Chicken) | p_11(Chicken)))"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "(p_8(Chicken) \u2295 p_9(Chicken)) \u2192 p_1(Chicken)"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_8(Chicken) \u2192 p_1(Chicken)"
                ]
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_6(Chicken)\n\u00acp_7(Chicken)\n\u00acp_5(Chicken)\np_0(Chicken)\np_3(Chicken)\n\u00acp_4(Chicken)\np_2(Chicken)\n\u00acp_1(Chicken)\n\u2200x (((p_13(x) \u2228 p_6(x)) \u2227 \u00ac(p_13(x) \u2227 p_6(x))) \u2192 p_7(x))\np_12(Chicken) \u2228 p_5(Chicken)\np_0(Chicken) \u2192 (p_10(Chicken) \u2295 p_12(Chicken))\n(p_11(Chicken) \u2295 p_3(Chicken)) \u2192 p_4(Chicken)\n(p_9(Chicken) \u2295 p_2(Chicken)) \u2192 p_10(Chicken)\np_8(Chicken) \u2192 p_1(Chicken)\n\u00acp_8(Chicken)\np_12(Chicken)\n\u00acp_10(Chicken)",
            "Initial Goal": "p_8(Chicken) \u2227 (p_13(Chicken) \u2228 p_11(Chicken))",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_6(Chicken).",
                    "-p_7(Chicken).",
                    "-p_5(Chicken).",
                    "p_0(Chicken).",
                    "p_3(Chicken).",
                    "-p_4(Chicken).",
                    "p_2(Chicken).",
                    "-p_1(Chicken).",
                    "all x (((p_13(x) | p_6(x)) & -(p_13(x) & p_6(x))) -> p_7(x)).",
                    "p_12(Chicken) | p_5(Chicken).",
                    "p_0(Chicken) -> (-(p_10(Chicken) <-> p_12(Chicken))).",
                    "(-(p_11(Chicken) <-> p_3(Chicken))) -> p_4(Chicken).",
                    "(-(p_9(Chicken) <-> p_2(Chicken))) -> p_10(Chicken).",
                    "p_8(Chicken) -> p_1(Chicken).",
                    "-p_8(Chicken).",
                    "p_12(Chicken).",
                    "-p_10(Chicken)."
                ],
                "formulas(goals)": [
                    "-(p_8(Chicken) & (p_13(Chicken) | p_11(Chicken)))."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u2200x ((p_13(x) \u2295 p_6(x)) \u2192 p_7(x))"
                ],
                "added_facts": [
                    "\u00acp_8(Chicken)",
                    "p_12(Chicken)",
                    "\u00acp_10(Chicken)"
                ],
                "added_rules": [
                    "\u2200x (((p_13(x) \u2228 p_6(x)) \u2227 \u00ac(p_13(x) \u2227 p_6(x))) \u2192 p_7(x))"
                ]
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_6(Chicken)\n\u00acp_7(Chicken)\n\u00acp_5(Chicken)\np_0(Chicken)\np_3(Chicken)\n\u00acp_4(Chicken)\np_2(Chicken)\n\u00acp_1(Chicken)\n\u2200x ((p_13(x) \u2295 p_6(x)) \u2192 p_7(x))\np_12(Chicken) \u2228 p_5(Chicken)\np_0(Chicken) \u2192 (p_10(Chicken) \u2295 p_12(Chicken))\n(p_11(Chicken) \u2295 p_3(Chicken)) \u2192 p_4(Chicken)\n(p_9(Chicken) \u2295 p_2(Chicken)) \u2192 p_10(Chicken)\np_8(Chicken) \u2192 p_1(Chicken)\n\u00acp_8(Chicken)\np_12(Chicken)\n\u00acp_10(Chicken)",
            "Initial Goal": "p_8(Chicken) \u2227 (p_13(Chicken) \u2228 p_11(Chicken))",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_6(Chicken)",
                    "-p_7(Chicken)",
                    "-p_5(Chicken)",
                    "p_0(Chicken)",
                    "p_3(Chicken)",
                    "-p_4(Chicken)",
                    "p_2(Chicken)",
                    "-p_1(Chicken)",
                    "all x ((-(p_13(x) <-> p_6(x))) -> p_7(x))",
                    "p_12(Chicken) | p_5(Chicken)",
                    "p_0(Chicken) -> (-(p_10(Chicken) <-> p_12(Chicken)))",
                    "(-(p_11(Chicken) <-> p_3(Chicken))) -> p_4(Chicken)",
                    "(-(p_9(Chicken) <-> p_2(Chicken))) -> p_10(Chicken)",
                    "p_8(Chicken) -> p_1(Chicken)",
                    "-p_8(Chicken)",
                    "p_12(Chicken)",
                    "-p_10(Chicken)"
                ],
                "formulas(goals)": [
                    "-(p_8(Chicken) & (p_13(Chicken) | p_11(Chicken)))"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u2200x (((p_13(x) \u2228 p_6(x)) \u2227 \u00ac(p_13(x) \u2227 p_6(x))) \u2192 p_7(x))"
                ],
                "added_facts": [],
                "added_rules": [
                    "\u2200x ((p_13(x) \u2295 p_6(x)) \u2192 p_7(x))"
                ]
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_6(Chicken)\n\u00acp_7(Chicken)\n\u00acp_5(Chicken)\np_0(Chicken)\np_3(Chicken)\n\u00acp_4(Chicken)\np_2(Chicken)\n\u00acp_1(Chicken)\n\u2200x ((p_13(x) \u2295 p_6(x)) \u2192 p_7(x))\np_12(Chicken) \u2228 p_5(Chicken)\np_0(Chicken) \u2192 (p_10(Chicken) \u2295 p_12(Chicken))\n(p_11(Chicken) \u2295 p_3(Chicken)) \u2192 p_4(Chicken)\n(p_9(Chicken) \u2295 p_2(Chicken)) \u2192 p_10(Chicken)\np_8(Chicken) \u2228 p_1(Chicken)\np_12(Chicken)\n\u00acp_10(Chicken)",
            "Initial Goal": "p_8(Chicken) \u2227 (p_13(Chicken) \u2228 p_11(Chicken))",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_6(Chicken)",
                    "-p_7(Chicken)",
                    "-p_5(Chicken)",
                    "p_0(Chicken)",
                    "p_3(Chicken)",
                    "-p_4(Chicken)",
                    "p_2(Chicken)",
                    "-p_1(Chicken)",
                    "all x (-(p_13(x) <-> p_6(x)) -> p_7(x))",
                    "p_12(Chicken) | p_5(Chicken)",
                    "p_0(Chicken) -> (-(p_10(Chicken) <-> p_12(Chicken)))",
                    "(-(p_11(Chicken) <-> p_3(Chicken))) -> p_4(Chicken)",
                    "(-(p_9(Chicken) <-> p_2(Chicken))) -> p_10(Chicken)",
                    "p_8(Chicken) | p_1(Chicken)",
                    "p_12(Chicken)",
                    "-p_10(Chicken)"
                ],
                "formulas(goals)": [
                    "p_8(Chicken) & (p_13(Chicken) | p_11(Chicken))"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "\u00acp_8(Chicken)"
                ],
                "removed_rules": [
                    "p_8(Chicken) \u2192 p_1(Chicken)"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_8(Chicken) \u2228 p_1(Chicken)"
                ]
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_6(Chicken)\n\u00acp_7(Chicken)\n\u00acp_5(Chicken)\np_0(Chicken)\np_3(Chicken)\n\u00acp_4(Chicken)\np_2(Chicken)\n\u00acp_1(Chicken)\n\u2200x ((p_13(x) \u2295 p_6(x)) \u2192 p_7(x))\np_12(Chicken) \u2228 p_5(Chicken)\np_0(Chicken) \u2192 (p_10(Chicken) \u2295 p_12(Chicken))\n((p_11(Chicken) \u2228 p_3(Chicken)) \u2227 (\u00acp_11(Chicken) \u2228 \u00acp_3(Chicken))) \u2192 p_4(Chicken)\n(p_9(Chicken) \u2295 p_2(Chicken)) \u2192 p_10(Chicken)\np_8(Chicken) \u2228 p_1(Chicken)\np_12(Chicken)\n\u00acp_10(Chicken)\np_13(Chicken)\np_8(Chicken)",
            "Initial Goal": "p_8(Chicken) \u2227 (p_13(Chicken) \u2228 p_11(Chicken))",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_6(Chicken)",
                    "-p_7(Chicken)",
                    "-p_5(Chicken)",
                    "p_0(Chicken)",
                    "p_3(Chicken)",
                    "-p_4(Chicken)",
                    "p_2(Chicken)",
                    "-p_1(Chicken)",
                    "all x (-(p_13(x) <-> p_6(x)) -> p_7(x))",
                    "p_12(Chicken) | p_5(Chicken)",
                    "p_0(Chicken) -> (-(p_10(Chicken) <-> p_12(Chicken)))",
                    "((p_11(Chicken) | p_3(Chicken)) & (-p_11(Chicken) | -p_3(Chicken))) -> p_4(Chicken)",
                    "(-(p_9(Chicken) <-> p_2(Chicken))) -> p_10(Chicken)",
                    "p_8(Chicken) | p_1(Chicken)",
                    "p_12(Chicken)",
                    "-p_10(Chicken)",
                    "p_13(Chicken)",
                    "p_8(Chicken)"
                ],
                "formulas(goals)": [
                    "p_8(Chicken) & (p_13(Chicken) | p_11(Chicken))"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_13(Chicken)",
                    "p_8(Chicken)"
                ],
                "added_rules": [
                    "((p_11(Chicken) \u2228 p_3(Chicken)) \u2227 (\u00acp_11(Chicken) \u2228 \u00acp_3(Chicken))) \u2192 p_4(Chicken)"
                ]
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_6(Chicken)\n\u00acp_7(Chicken)\n\u00acp_5(Chicken)\np_0(Chicken)\np_3(Chicken)\n\u00acp_4(Chicken)\np_2(Chicken)\n\u00acp_1(Chicken)\n\u2200x ((p_13(x) \u2295 p_6(x)) \u2192 p_7(x))\np_12(Chicken) \u2228 p_5(Chicken)\n\u00acp_0(Chicken) \u2228 ((p_10(Chicken) \u2228 p_12(Chicken)) \u2227 (\u00acp_10(Chicken) \u2228 \u00acp_12(Chicken)))\n((p_11(Chicken) \u2228 p_3(Chicken)) \u2227 (\u00acp_11(Chicken) \u2228 \u00acp_3(Chicken))) \u2192 p_4(Chicken)\n(p_9(Chicken) \u2295 p_2(Chicken)) \u2192 p_10(Chicken)\np_8(Chicken) \u2228 p_1(Chicken)\np_12(Chicken)\n\u00acp_10(Chicken)\np_13(Chicken)\np_8(Chicken)\np_9(Chicken)\np_13(Chicken) \u2194 p_6(Chicken)",
            "Initial Goal": "p_8(Chicken) \u2227 (p_13(Chicken) \u2228 p_11(Chicken))",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_6(Chicken)",
                    "-p_7(Chicken)",
                    "-p_5(Chicken)",
                    "p_0(Chicken)",
                    "p_3(Chicken)",
                    "-p_4(Chicken)",
                    "p_2(Chicken)",
                    "-p_1(Chicken)",
                    "all x (-(-(p_13(x) <-> p_6(x))) | p_7(x))",
                    "p_12(Chicken) | p_5(Chicken)",
                    "-p_0(Chicken) | ((p_10(Chicken) | p_12(Chicken)) & (-p_10(Chicken) | -p_12(Chicken)))",
                    "(-((p_11(Chicken) | p_3(Chicken)) & (-p_11(Chicken) | -p_3(Chicken)))) | p_4(Chicken)",
                    "(-(-(p_9(Chicken) <-> p_2(Chicken)))) | p_10(Chicken)",
                    "p_8(Chicken) | p_1(Chicken)",
                    "p_12(Chicken)",
                    "-p_10(Chicken)",
                    "p_13(Chicken)",
                    "p_8(Chicken)",
                    "p_9(Chicken)",
                    "p_13(Chicken) <-> p_6(Chicken)"
                ],
                "formulas(goals)": [
                    "p_8(Chicken) & (p_13(Chicken) | p_11(Chicken))"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_9(Chicken)",
                    "p_13(Chicken) \u2194 p_6(Chicken)"
                ],
                "added_rules": [
                    "\u00acp_0(Chicken) \u2228 ((p_10(Chicken) \u2228 p_12(Chicken)) \u2227 (\u00acp_10(Chicken) \u2228 \u00acp_12(Chicken)))"
                ]
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_6(Chicken)\n\u00acp_7(Chicken)\n\u00acp_5(Chicken)\np_0(Chicken)\np_3(Chicken)\n\u00acp_4(Chicken)\np_2(Chicken)\n\u00acp_1(Chicken)\n\u2200x ((p_13(x) \u2295 p_6(x)) \u2192 p_7(x))\np_12(Chicken) \u2228 p_5(Chicken)\n\u00acp_0(Chicken) \u2228 ((p_10(Chicken) \u2228 p_12(Chicken)) \u2227 (\u00acp_10(Chicken) \u2228 \u00acp_12(Chicken)))\n((p_11(Chicken) \u2228 p_3(Chicken)) \u2227 (\u00acp_11(Chicken) \u2228 \u00acp_3(Chicken))) \u2192 p_4(Chicken)\n(p_9(Chicken) \u2295 p_2(Chicken)) \u2192 p_10(Chicken)\np_8(Chicken) \u2228 p_1(Chicken)\np_12(Chicken)\n\u00acp_10(Chicken)\np_8(Chicken)\np_9(Chicken)\np_13(Chicken) \u2194 p_6(Chicken)\n(p_3(Chicken) \u2227 \u00acp_4(Chicken)) \u2192 \u00acp_11(Chicken)",
            "Initial Goal": "p_8(Chicken) \u2227 (p_13(Chicken) \u2228 p_11(Chicken))",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_6(Chicken).",
                    "-p_7(Chicken).",
                    "-p_5(Chicken).",
                    "p_0(Chicken).",
                    "p_3(Chicken).",
                    "-p_4(Chicken).",
                    "p_2(Chicken).",
                    "-p_1(Chicken).",
                    "all x ((-(p_13(x) <-> p_6(x)) -> p_7(x))).",
                    "p_12(Chicken) | p_5(Chicken).",
                    "-p_0(Chicken) | ((p_10(Chicken) | p_12(Chicken)) & (-p_10(Chicken) | -p_12(Chicken))).",
                    "((p_11(Chicken) | p_3(Chicken)) & (-p_11(Chicken) | -p_3(Chicken))) -> p_4(Chicken).",
                    "(-(p_9(Chicken) <-> p_2(Chicken))) -> p_10(Chicken).",
                    "p_8(Chicken) | p_1(Chicken).",
                    "p_12(Chicken).",
                    "-p_10(Chicken).",
                    "p_8(Chicken).",
                    "p_9(Chicken).",
                    "p_13(Chicken) <-> p_6(Chicken).",
                    "(p_3(Chicken) & -p_4(Chicken)) -> -p_11(Chicken)."
                ],
                "formulas(goals)": [
                    "-(p_8(Chicken) & (p_13(Chicken) | p_11(Chicken)))."
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "p_13(Chicken)"
                ],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "(p_3(Chicken) \u2227 \u00acp_4(Chicken)) \u2192 \u00acp_11(Chicken)"
                ]
            }
        }
    ]
}