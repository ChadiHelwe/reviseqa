{
    "background_story": "Legacy, a remarkable lizard, possessed the extraordinary ability of autotomy. This unique skill allowed her to detach her tail as a defense mechanism, distracting predators and giving her time to escape. One fateful day, while basking in the warm sunlight, Legacy found herself face to face with a hungry hawk. With lightning speed, she released her tail, which wriggled and twitched, capturing the hawk's attention. As the hawk pounced on the severed tail, Legacy seized the opportunity to flee, saving her life. Though it would take time for her tail to regrow, Legacy had ensured her survival, earning her name as a testament to her remarkable ability to preserve her legacy through autotomy.",
    "predicates": [
        {
            "id": 0,
            "name": "can_camouflage"
        },
        {
            "id": 1,
            "name": "is_vigilant"
        },
        {
            "id": 2,
            "name": "fights_back"
        },
        {
            "id": 3,
            "name": "has_keen_senses"
        },
        {
            "id": 4,
            "name": "grow_strong"
        },
        {
            "id": 5,
            "name": "has_autotomy"
        },
        {
            "id": 6,
            "name": "can_distract_predators"
        },
        {
            "id": 7,
            "name": "can_escape_danger"
        },
        {
            "id": 8,
            "name": "is_threatened"
        },
        {
            "id": 9,
            "name": "regrow_tail"
        },
        {
            "id": 10,
            "name": "sees_predator"
        },
        {
            "id": 11,
            "name": "is_alive"
        },
        {
            "id": 12,
            "name": "bask_sun"
        },
        {
            "id": 13,
            "name": "faces_predator"
        },
        {
            "id": 14,
            "name": "can_release_tail"
        },
        {
            "id": 15,
            "name": "runs_fast"
        },
        {
            "id": 16,
            "name": "flees_fast"
        },
        {
            "id": 17,
            "name": "hides_quick"
        },
        {
            "id": 18,
            "name": "loses_tail"
        },
        {
            "id": 19,
            "name": "hunts_food"
        },
        {
            "id": 20,
            "name": "shed_skin"
        }
    ],
    "subject_name": "Legacy",
    "subject_category": "lizard",
    "keyword": "autotomy",
    "all_facts": [
        {
            "id": 0,
            "subject": "Legacy",
            "text": "Legacy cannot camouflage.",
            "fol": "\u00acp_0(Legacy)",
            "str_fol": "\u00accan_camouflage(Legacy)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Legacy",
            "text": "Legacy is vigilant.",
            "fol": "p_1(Legacy)",
            "str_fol": "is_vigilant(Legacy)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Legacy",
            "text": "Legacy does not fight back.",
            "fol": "\u00acp_2(Legacy)",
            "str_fol": "\u00acfights_back(Legacy)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Legacy",
            "text": "Legacy has keen senses.",
            "fol": "p_3(Legacy)",
            "str_fol": "has_keen_senses(Legacy)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Legacy",
            "text": "Legacy does not grow strong.",
            "fol": "\u00acp_4(Legacy)",
            "str_fol": "\u00acgrow_strong(Legacy)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Legacy",
            "text": "Legacy is not alive.",
            "fol": "\u00acp_11(Legacy)",
            "str_fol": "\u00acis_alive(Legacy)",
            "negation": true
        },
        {
            "id": 6,
            "subject": "Legacy",
            "text": "Legacy sees a predator.",
            "fol": "p_10(Legacy)",
            "str_fol": "sees_predator(Legacy)",
            "negation": false
        },
        {
            "id": 7,
            "subject": "Legacy",
            "text": "Legacy cannot regrow her tail.",
            "fol": "\u00acp_9(Legacy)",
            "str_fol": "\u00acregrow_tail(Legacy)",
            "negation": true
        },
        {
            "id": 8,
            "subject": "Legacy",
            "text": "Legacy is threatened.",
            "fol": "p_8(Legacy)",
            "str_fol": "is_threatened(Legacy)",
            "negation": false
        },
        {
            "id": 9,
            "subject": "Legacy",
            "text": "Legacy can escape danger.",
            "fol": "p_7(Legacy)",
            "str_fol": "can_escape_danger(Legacy)",
            "negation": false
        },
        {
            "id": 10,
            "subject": "Legacy",
            "text": "Legacy has autotomy.",
            "fol": "p_5(Legacy)",
            "str_fol": "has_autotomy(Legacy)",
            "negation": false
        },
        {
            "id": 11,
            "subject": "Legacy",
            "text": "Legacy cannot distract predators.",
            "fol": "\u00acp_6(Legacy)",
            "str_fol": "\u00accan_distract_predators(Legacy)",
            "negation": true
        }
    ],
    "context_facts": [
        {
            "id": 4,
            "subject": "Legacy",
            "text": "Legacy does not grow strong.",
            "fol": "\u00acp_4(Legacy)",
            "str_fol": "\u00acgrow_strong(Legacy)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Legacy",
            "text": "Legacy is vigilant.",
            "fol": "p_1(Legacy)",
            "str_fol": "is_vigilant(Legacy)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Legacy",
            "text": "Legacy has keen senses.",
            "fol": "p_3(Legacy)",
            "str_fol": "has_keen_senses(Legacy)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Legacy",
            "text": "Legacy does not fight back.",
            "fol": "\u00acp_2(Legacy)",
            "str_fol": "\u00acfights_back(Legacy)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Legacy",
            "text": "Legacy cannot camouflage.",
            "fol": "\u00acp_0(Legacy)",
            "str_fol": "\u00accan_camouflage(Legacy)",
            "negation": true
        }
    ],
    "context_rules": [
        {
            "id": 6,
            "text": "If Legacy is alive, then she basks in the sun and grows strong.",
            "fol": "p_11(Legacy) \u2192 (p_12(Legacy) \u2227 p_4(Legacy))",
            "str_fol": "is_alive(Legacy) \u2192 (bask_sun(Legacy) \u2227 grow_strong(Legacy))"
        },
        {
            "id": 5,
            "text": "If Legacy is vigilant and has keen senses, then she sees a predator.",
            "fol": "(p_1(Legacy) \u2227 p_3(Legacy)) \u2192 p_10(Legacy)",
            "str_fol": "(is_vigilant(Legacy) \u2227 has_keen_senses(Legacy)) \u2192 sees_predator(Legacy)"
        },
        {
            "id": 4,
            "text": "If a lizard can regrow its tail, then it is alive.",
            "fol": "\u2200x (p_9(x) \u2192 p_11(x))",
            "str_fol": "\u2200x (regrow_tail(x) \u2192 is_alive(x))"
        },
        {
            "id": 3,
            "text": "If Legacy either sees a predator or fights back (but not both), then she is threatened.",
            "fol": "(p_10(Legacy) \u2295 p_2(Legacy)) \u2192 p_8(Legacy)",
            "str_fol": "(sees_predator(Legacy) \u2295 fights_back(Legacy)) \u2192 is_threatened(Legacy)"
        },
        {
            "id": 2,
            "text": "A lizard either can escape danger or regrow its tail, but not necessarily both at the same time.",
            "fol": "\u2200x (p_7(x) \u2295 p_9(x))",
            "str_fol": "\u2200x (can_escape_danger(x) \u2295 regrow_tail(x))"
        },
        {
            "id": 1,
            "text": "If a lizard is threatened, then it either has autotomy or can camouflage, but not both.",
            "fol": "p_8(Legacy) \u2192 (p_5(Legacy) \u2295 p_0(Legacy))",
            "str_fol": "is_threatened(Legacy) \u2192 (has_autotomy(Legacy) \u2295 can_camouflage(Legacy))"
        },
        {
            "id": 0,
            "text": "For all lizards, if a lizard has autotomy, then it can distract predators and can escape danger.",
            "fol": "\u2200x (p_5(x) \u2192 (p_6(x) \u2227 p_7(x)))",
            "str_fol": "\u2200x (has_autotomy(x) \u2192 (can_distract_predators(x) \u2227 can_escape_danger(x)))"
        }
    ],
    "context": [
        {
            "id": 4,
            "subject": "Legacy",
            "text": "Legacy does not grow strong.",
            "fol": "\u00acp_4(Legacy)",
            "str_fol": "\u00acgrow_strong(Legacy)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Legacy",
            "text": "Legacy is vigilant.",
            "fol": "p_1(Legacy)",
            "str_fol": "is_vigilant(Legacy)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Legacy",
            "text": "Legacy has keen senses.",
            "fol": "p_3(Legacy)",
            "str_fol": "has_keen_senses(Legacy)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Legacy",
            "text": "Legacy does not fight back.",
            "fol": "\u00acp_2(Legacy)",
            "str_fol": "\u00acfights_back(Legacy)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Legacy",
            "text": "Legacy cannot camouflage.",
            "fol": "\u00acp_0(Legacy)",
            "str_fol": "\u00accan_camouflage(Legacy)",
            "negation": true
        },
        {
            "id": 6,
            "text": "If Legacy is alive, then she basks in the sun and grows strong.",
            "fol": "p_11(Legacy) \u2192 (p_12(Legacy) \u2227 p_4(Legacy))",
            "str_fol": "is_alive(Legacy) \u2192 (bask_sun(Legacy) \u2227 grow_strong(Legacy))"
        },
        {
            "id": 5,
            "text": "If Legacy is vigilant and has keen senses, then she sees a predator.",
            "fol": "(p_1(Legacy) \u2227 p_3(Legacy)) \u2192 p_10(Legacy)",
            "str_fol": "(is_vigilant(Legacy) \u2227 has_keen_senses(Legacy)) \u2192 sees_predator(Legacy)"
        },
        {
            "id": 4,
            "text": "If a lizard can regrow its tail, then it is alive.",
            "fol": "\u2200x (p_9(x) \u2192 p_11(x))",
            "str_fol": "\u2200x (regrow_tail(x) \u2192 is_alive(x))"
        },
        {
            "id": 3,
            "text": "If Legacy either sees a predator or fights back (but not both), then she is threatened.",
            "fol": "(p_10(Legacy) \u2295 p_2(Legacy)) \u2192 p_8(Legacy)",
            "str_fol": "(sees_predator(Legacy) \u2295 fights_back(Legacy)) \u2192 is_threatened(Legacy)"
        },
        {
            "id": 2,
            "text": "A lizard either can escape danger or regrow its tail, but not necessarily both at the same time.",
            "fol": "\u2200x (p_7(x) \u2295 p_9(x))",
            "str_fol": "\u2200x (can_escape_danger(x) \u2295 regrow_tail(x))"
        },
        {
            "id": 1,
            "text": "If a lizard is threatened, then it either has autotomy or can camouflage, but not both.",
            "fol": "p_8(Legacy) \u2192 (p_5(Legacy) \u2295 p_0(Legacy))",
            "str_fol": "is_threatened(Legacy) \u2192 (has_autotomy(Legacy) \u2295 can_camouflage(Legacy))"
        },
        {
            "id": 0,
            "text": "For all lizards, if a lizard has autotomy, then it can distract predators and can escape danger.",
            "fol": "\u2200x (p_5(x) \u2192 (p_6(x) \u2227 p_7(x)))",
            "str_fol": "\u2200x (has_autotomy(x) \u2192 (can_distract_predators(x) \u2227 can_escape_danger(x)))"
        }
    ],
    "context_fol": "\u00acp_4(Legacy)\np_1(Legacy)\np_3(Legacy)\n\u00acp_2(Legacy)\n\u00acp_0(Legacy)\np_11(Legacy) \u2192 (p_12(Legacy) \u2227 p_4(Legacy))\n(p_1(Legacy) \u2227 p_3(Legacy)) \u2192 p_10(Legacy)\n\u2200x (p_9(x) \u2192 p_11(x))\n(p_10(Legacy) \u2295 p_2(Legacy)) \u2192 p_8(Legacy)\n\u2200x (p_7(x) \u2295 p_9(x))\np_8(Legacy) \u2192 (p_5(Legacy) \u2295 p_0(Legacy))\n\u2200x (p_5(x) \u2192 (p_6(x) \u2227 p_7(x)))",
    "conclusion": {
        "id": 11,
        "subject": "Legacy",
        "text": "Legacy cannot distract predators.",
        "fol": "\u00acp_6(Legacy)",
        "str_fol": "\u00accan_distract_predators(Legacy)",
        "negation": true
    },
    "initial_answer": "False",
    "initial_goal": "\u00acp_6(Legacy)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 4,
                    "subject": "Legacy",
                    "text": "Legacy does not grow strong.",
                    "fol": "\u00acp_4(Legacy)",
                    "str_fol": "\u00acgrow_strong(Legacy)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 6,
                    "text": "If Legacy is alive, then she basks in the sun and grows strong.",
                    "fol": "p_11(Legacy) \u2192 (p_12(Legacy) \u2227 p_4(Legacy))",
                    "str_fol": "is_alive(Legacy) \u2192 (bask_sun(Legacy) \u2227 grow_strong(Legacy))"
                }
            ],
            "conclusion": {
                "id": 5,
                "subject": "Legacy",
                "text": "Legacy is not alive.",
                "fol": "\u00acp_11(Legacy)",
                "str_fol": "\u00acis_alive(Legacy)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 1,
                    "subject": "Legacy",
                    "text": "Legacy is vigilant.",
                    "fol": "p_1(Legacy)",
                    "str_fol": "is_vigilant(Legacy)",
                    "negation": false
                },
                {
                    "id": 3,
                    "subject": "Legacy",
                    "text": "Legacy has keen senses.",
                    "fol": "p_3(Legacy)",
                    "str_fol": "has_keen_senses(Legacy)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "If Legacy is vigilant and has keen senses, then she sees a predator.",
                    "fol": "(p_1(Legacy) \u2227 p_3(Legacy)) \u2192 p_10(Legacy)",
                    "str_fol": "(is_vigilant(Legacy) \u2227 has_keen_senses(Legacy)) \u2192 sees_predator(Legacy)"
                }
            ],
            "conclusion": {
                "id": 6,
                "subject": "Legacy",
                "text": "Legacy sees a predator.",
                "fol": "p_10(Legacy)",
                "str_fol": "sees_predator(Legacy)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 5,
                    "subject": "Legacy",
                    "text": "Legacy is not alive.",
                    "fol": "\u00acp_11(Legacy)",
                    "str_fol": "\u00acis_alive(Legacy)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "If a lizard can regrow its tail, then it is alive.",
                    "fol": "\u2200x (p_9(x) \u2192 p_11(x))",
                    "str_fol": "\u2200x (regrow_tail(x) \u2192 is_alive(x))"
                }
            ],
            "conclusion": {
                "id": 7,
                "subject": "Legacy",
                "text": "Legacy cannot regrow her tail.",
                "fol": "\u00acp_9(Legacy)",
                "str_fol": "\u00acregrow_tail(Legacy)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 6,
                    "subject": "Legacy",
                    "text": "Legacy sees a predator.",
                    "fol": "p_10(Legacy)",
                    "str_fol": "sees_predator(Legacy)",
                    "negation": false
                },
                {
                    "id": 2,
                    "subject": "Legacy",
                    "text": "Legacy does not fight back.",
                    "fol": "\u00acp_2(Legacy)",
                    "str_fol": "\u00acfights_back(Legacy)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "If Legacy either sees a predator or fights back (but not both), then she is threatened.",
                    "fol": "(p_10(Legacy) \u2295 p_2(Legacy)) \u2192 p_8(Legacy)",
                    "str_fol": "(sees_predator(Legacy) \u2295 fights_back(Legacy)) \u2192 is_threatened(Legacy)"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Legacy",
                "text": "Legacy is threatened.",
                "fol": "p_8(Legacy)",
                "str_fol": "is_threatened(Legacy)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 7,
                    "subject": "Legacy",
                    "text": "Legacy cannot regrow her tail.",
                    "fol": "\u00acp_9(Legacy)",
                    "str_fol": "\u00acregrow_tail(Legacy)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "A lizard either can escape danger or regrow its tail, but not necessarily both at the same time.",
                    "fol": "\u2200x (p_7(x) \u2295 p_9(x))",
                    "str_fol": "\u2200x (can_escape_danger(x) \u2295 regrow_tail(x))"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Legacy",
                "text": "Legacy can escape danger.",
                "fol": "p_7(Legacy)",
                "str_fol": "can_escape_danger(Legacy)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 8,
                    "subject": "Legacy",
                    "text": "Legacy is threatened.",
                    "fol": "p_8(Legacy)",
                    "str_fol": "is_threatened(Legacy)",
                    "negation": false
                },
                {
                    "id": 0,
                    "subject": "Legacy",
                    "text": "Legacy cannot camouflage.",
                    "fol": "\u00acp_0(Legacy)",
                    "str_fol": "\u00accan_camouflage(Legacy)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "If a lizard is threatened, then it either has autotomy or can camouflage, but not both.",
                    "fol": "p_8(Legacy) \u2192 (p_5(Legacy) \u2295 p_0(Legacy))",
                    "str_fol": "is_threatened(Legacy) \u2192 (has_autotomy(Legacy) \u2295 can_camouflage(Legacy))"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Legacy",
                "text": "Legacy has autotomy.",
                "fol": "p_5(Legacy)",
                "str_fol": "has_autotomy(Legacy)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 10,
                    "subject": "Legacy",
                    "text": "Legacy has autotomy.",
                    "fol": "p_5(Legacy)",
                    "str_fol": "has_autotomy(Legacy)",
                    "negation": false
                },
                {
                    "id": 9,
                    "subject": "Legacy",
                    "text": "Legacy can escape danger.",
                    "fol": "p_7(Legacy)",
                    "str_fol": "can_escape_danger(Legacy)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "For all lizards, if a lizard has autotomy, then it can distract predators and can escape danger.",
                    "fol": "\u2200x (p_5(x) \u2192 (p_6(x) \u2227 p_7(x)))",
                    "str_fol": "\u2200x (has_autotomy(x) \u2192 (can_distract_predators(x) \u2227 can_escape_danger(x)))"
                }
            ],
            "conclusion": {
                "id": 11,
                "subject": "Legacy",
                "text": "Legacy cannot distract predators.",
                "fol": "\u00acp_6(Legacy)",
                "str_fol": "\u00accan_distract_predators(Legacy)",
                "negation": true
            }
        }
    ],
    "proof_trace": "2 p_1(Legacy) & p_3(Legacy) -> p_10(Legacy).  [assumption].\n4 -(p_10(Legacy) <-> p_2(Legacy)) -> p_8(Legacy).  [assumption].\n6 p_8(Legacy) -> -(p_5(Legacy) <-> p_0(Legacy)).  [assumption].\n7 (all x (p_5(x) -> p_6(x) & p_7(x))).  [assumption].\n8 --p_6(Legacy).  [goal].\n11 -p_1(Legacy) | -p_3(Legacy) | p_10(Legacy).  [clausify(2)].\n12 p_1(Legacy).  [assumption].\n13 -p_3(Legacy) | p_10(Legacy).  [resolve(11,a,12,a)].\n14 p_3(Legacy).  [assumption].\n15 -p_10(Legacy) | p_2(Legacy) | p_8(Legacy).  [clausify(4)].\n16 -p_2(Legacy).  [assumption].\n18 -p_8(Legacy) | p_5(Legacy) | p_0(Legacy).  [clausify(6)].\n19 -p_0(Legacy).  [assumption].\n27 -p_8(Legacy) | p_5(Legacy).  [resolve(18,c,19,a)].\n28 -p_5(x) | p_6(x).  [clausify(7)].\n30 -p_8(Legacy) | p_6(Legacy).  [resolve(27,b,28,a)].\n31 -p_6(Legacy).  [deny(8)].\n32 -p_10(Legacy) | p_8(Legacy).  [resolve(15,b,16,a)].\n33 p_10(Legacy).  [resolve(13,a,14,a)].\n34 p_8(Legacy).  [resolve(32,a,33,a)].\n35 -p_8(Legacy).  [resolve(30,b,31,a)].\n36 $F.  [resolve(34,a,35,a)].",
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_4(Legacy)\np_1(Legacy)\np_3(Legacy)\n\u00acp_2(Legacy)\n\u00acp_0(Legacy)\np_11(Legacy) \u2192 (p_12(Legacy) \u2227 p_4(Legacy))\n(p_3(Legacy) \u2227 p_1(Legacy)) \u2192 p_10(Legacy)\n\u2200x (p_9(x) \u2192 p_11(x))\n(p_10(Legacy) \u2295 p_2(Legacy)) \u2192 p_8(Legacy)\n\u2200x (p_7(x) \u2295 p_9(x))\np_8(Legacy) \u2192 (p_5(Legacy) \u2295 p_0(Legacy))\n\u2200x (p_5(x) \u2192 (p_6(x) \u2227 p_7(x)))\np_10(Legacy)\n\u2200x (p_5(x) \u2192 p_6(x))",
            "Initial Goal": "\u00acp_6(Legacy)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Legacy)",
                    "p_1(Legacy)",
                    "p_3(Legacy)",
                    "-p_2(Legacy)",
                    "-p_0(Legacy)",
                    "p_11(Legacy) -> (p_12(Legacy) & p_4(Legacy))",
                    "(p_3(Legacy) & p_1(Legacy)) -> p_10(Legacy)",
                    "all x (p_9(x) -> p_11(x))",
                    "(-(p_10(Legacy) <-> p_2(Legacy))) -> p_8(Legacy)",
                    "all x (-(p_7(x) <-> p_9(x)))",
                    "p_8(Legacy) -> (-(p_5(Legacy) <-> p_0(Legacy)))",
                    "all x (p_5(x) -> (p_6(x) & p_7(x)))",
                    "p_10(Legacy)",
                    "all x (p_5(x) -> p_6(x))"
                ],
                "formulas(goals)": [
                    "p_6(Legacy)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "(p_1(Legacy) \u2227 p_3(Legacy)) \u2192 p_10(Legacy)"
                ],
                "added_facts": [
                    "p_10(Legacy)"
                ],
                "added_rules": [
                    "(p_3(Legacy) \u2227 p_1(Legacy)) \u2192 p_10(Legacy)",
                    "\u2200x (p_5(x) \u2192 p_6(x))"
                ]
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_4(Legacy)\np_1(Legacy)\np_3(Legacy)\n\u00acp_2(Legacy)\n\u00acp_0(Legacy)\np_11(Legacy) \u2192 (p_12(Legacy) \u2227 p_4(Legacy))\n\u00acp_3(Legacy) \u2228 \u00acp_1(Legacy) \u2228 p_10(Legacy)\n\u2200x (p_9(x) \u2192 p_11(x))\n(p_10(Legacy) \u2295 p_2(Legacy)) \u2192 p_8(Legacy)\n\u2200x (p_7(x) \u2295 p_9(x))\np_8(Legacy) \u2192 (p_5(Legacy) \u2295 p_0(Legacy))\n\u2200x (p_5(x) \u2192 (p_6(x) \u2227 p_7(x)))\np_10(Legacy)\n\u2200x (p_5(x) \u2192 p_6(x))\n\u00acp_11(Legacy)",
            "Initial Goal": "\u00acp_6(Legacy)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Legacy)",
                    "p_1(Legacy)",
                    "p_3(Legacy)",
                    "-p_2(Legacy)",
                    "-p_0(Legacy)",
                    "p_11(Legacy) -> (p_12(Legacy) & p_4(Legacy))",
                    "(-p_3(Legacy) | -p_1(Legacy) | p_10(Legacy))",
                    "all x (p_9(x) -> p_11(x))",
                    "(-(p_10(Legacy) <-> p_2(Legacy))) -> p_8(Legacy)",
                    "all x (-(p_7(x) <-> p_9(x)))",
                    "p_8(Legacy) -> (-(p_5(Legacy) <-> p_0(Legacy)))",
                    "all x (p_5(x) -> (p_6(x) & p_7(x)))",
                    "p_10(Legacy)",
                    "all x (p_5(x) -> p_6(x))",
                    "-p_11(Legacy)"
                ],
                "formulas(goals)": [
                    "--p_6(Legacy)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "\u00acp_11(Legacy)"
                ],
                "added_rules": [
                    "\u00acp_3(Legacy) \u2228 \u00acp_1(Legacy) \u2228 p_10(Legacy)"
                ]
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_4(Legacy)\np_1(Legacy)\np_3(Legacy)\n\u00acp_2(Legacy)\n\u00acp_0(Legacy)\np_11(Legacy) \u2192 (p_12(Legacy) \u2227 p_4(Legacy))\np_3(Legacy) \u2227 p_1(Legacy) \u2192 p_10(Legacy)\n\u2200x (p_9(x) \u2192 p_11(x))\n(p_10(Legacy) \u2295 p_2(Legacy)) \u2192 p_8(Legacy)\n\u2200x (\u00acp_7(x) \u2194 p_9(x))\np_8(Legacy) \u2192 ((p_5(Legacy) \u2228 p_0(Legacy)) \u2227 \u00ac(p_5(Legacy) \u2227 p_0(Legacy)))\n\u2200x (p_5(x) \u2192 (p_6(x) \u2227 p_7(x)))\np_10(Legacy)\n\u2200x (p_5(x) \u2192 p_6(x))\n\u00acp_11(Legacy)\n\u2200x (p_5(x) \u2192 p_7(x))\n\u00acp_9(Legacy)\np_8(Legacy) \u2192 p_5(Legacy)",
            "Initial Goal": "\u00acp_6(Legacy)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Legacy)",
                    "p_1(Legacy)",
                    "p_3(Legacy)",
                    "-p_2(Legacy)",
                    "-p_0(Legacy)",
                    "p_11(Legacy) -> (p_12(Legacy) & p_4(Legacy))",
                    "(p_3(Legacy) & p_1(Legacy)) -> p_10(Legacy)",
                    "all x (p_9(x) -> p_11(x))",
                    "(-(p_10(Legacy) <-> p_2(Legacy))) -> p_8(Legacy)",
                    "all x (-p_7(x) <-> p_9(x))",
                    "p_8(Legacy) -> ((p_5(Legacy) | p_0(Legacy)) & -(p_5(Legacy) & p_0(Legacy)))",
                    "all x (p_5(x) -> (p_6(x) & p_7(x)))",
                    "p_10(Legacy)",
                    "all x (p_5(x) -> p_6(x))",
                    "-p_11(Legacy)",
                    "all x (p_5(x) -> p_7(x))",
                    "-p_9(Legacy)",
                    "p_8(Legacy) -> p_5(Legacy)"
                ],
                "formulas(goals)": [
                    "-(-p_6(Legacy))"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u00acp_3(Legacy) \u2228 \u00acp_1(Legacy) \u2228 p_10(Legacy)",
                    "\u2200x (p_7(x) \u2295 p_9(x))",
                    "p_8(Legacy) \u2192 (p_5(Legacy) \u2295 p_0(Legacy))"
                ],
                "added_facts": [
                    "\u00acp_9(Legacy)"
                ],
                "added_rules": [
                    "p_3(Legacy) \u2227 p_1(Legacy) \u2192 p_10(Legacy)",
                    "\u2200x (\u00acp_7(x) \u2194 p_9(x))",
                    "p_8(Legacy) \u2192 ((p_5(Legacy) \u2228 p_0(Legacy)) \u2227 \u00ac(p_5(Legacy) \u2227 p_0(Legacy)))",
                    "\u2200x (p_5(x) \u2192 p_7(x))",
                    "p_8(Legacy) \u2192 p_5(Legacy)"
                ]
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_4(Legacy)\np_1(Legacy)\np_3(Legacy)\n\u00acp_2(Legacy)\n\u00acp_0(Legacy)\np_11(Legacy) \u2192 (p_12(Legacy) \u2227 p_4(Legacy))\n(p_3(Legacy) \u2227 p_1(Legacy)) \u2192 p_10(Legacy)\n\u2200x (p_9(x) \u2192 p_11(x))\n\u2200x (\u00acp_7(x) \u2194 p_9(x))\np_8(Legacy) \u2192 ((p_5(Legacy) \u2228 p_0(Legacy)) \u2227 \u00ac(p_5(Legacy) \u2227 p_0(Legacy)))\n\u2200x (p_5(x) \u2192 (p_6(x) \u2227 p_7(x)))\np_10(Legacy)\n\u2200x (p_5(x) \u2192 p_6(x))\n\u00acp_11(Legacy)\n\u2200x (p_5(x) \u2192 p_7(x))\n\u00acp_9(Legacy)\np_8(Legacy) \u2192 p_5(Legacy)\np_10(Legacy) \u2192 \u00acp_6(Legacy)",
            "Initial Goal": "\u00acp_6(Legacy)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Legacy)",
                    "p_1(Legacy)",
                    "p_3(Legacy)",
                    "-p_2(Legacy)",
                    "-p_0(Legacy)",
                    "p_11(Legacy) -> (p_12(Legacy) & p_4(Legacy))",
                    "(p_3(Legacy) & p_1(Legacy)) -> p_10(Legacy)",
                    "all x (p_9(x) -> p_11(x))",
                    "all x (-p_7(x) <-> p_9(x))",
                    "p_8(Legacy) -> ((p_5(Legacy) | p_0(Legacy)) & -(p_5(Legacy) & p_0(Legacy)))",
                    "all x (p_5(x) -> (p_6(x) & p_7(x)))",
                    "p_10(Legacy)",
                    "all x (p_5(x) -> p_6(x))",
                    "-p_11(Legacy)",
                    "all x (p_5(x) -> p_7(x))",
                    "-p_9(Legacy)",
                    "p_8(Legacy) -> p_5(Legacy)",
                    "p_10(Legacy) -> -p_6(Legacy)"
                ],
                "formulas(goals)": [
                    "-p_6(Legacy)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "(p_10(Legacy) \u2295 p_2(Legacy)) \u2192 p_8(Legacy)"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_10(Legacy) \u2192 \u00acp_6(Legacy)"
                ]
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_4(Legacy)\np_1(Legacy)\np_3(Legacy)\n\u00acp_2(Legacy)\n\u00acp_0(Legacy)\np_11(Legacy) \u2192 (p_12(Legacy) \u2227 p_4(Legacy))\n\u2200x (p_9(x) \u2192 p_11(x))\n\u2200x (\u00acp_7(x) \u2194 p_9(x))\np_8(Legacy) \u2192 ((p_5(Legacy) \u2228 p_0(Legacy)) \u2227 \u00ac(p_5(Legacy) \u2227 p_0(Legacy)))\n\u2200x (p_5(x) \u2192 (p_6(x) \u2227 p_7(x)))\n\u2200x (p_5(x) \u2192 p_6(x))\n\u00acp_11(Legacy)\n\u2200x (p_5(x) \u2192 p_7(x))\n\u00acp_9(Legacy)\np_8(Legacy) \u2192 p_5(Legacy)\np_10(Legacy) \u2192 \u00acp_6(Legacy)\np_5(Legacy)",
            "Initial Goal": "\u00acp_6(Legacy)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "\u00acp_4(Legacy)",
                    "p_1(Legacy)",
                    "p_3(Legacy)",
                    "\u00acp_2(Legacy)",
                    "\u00acp_0(Legacy)",
                    "p_11(Legacy) -> (p_12(Legacy) & p_4(Legacy))",
                    "all x (p_9(x) -> p_11(x))",
                    "all x (-p_7(x) <-> p_9(x))",
                    "p_8(Legacy) -> ((p_5(Legacy) | p_0(Legacy)) & -(p_5(Legacy) & p_0(Legacy)))",
                    "all x (p_5(x) -> (p_6(x) & p_7(x)))",
                    "all x (p_5(x) -> p_6(x))",
                    "\u00acp_11(Legacy)",
                    "all x (p_5(x) -> p_7(x))",
                    "\u00acp_9(Legacy)",
                    "p_8(Legacy) -> p_5(Legacy)",
                    "p_10(Legacy) -> \u00acp_6(Legacy)",
                    "p_5(Legacy)"
                ],
                "formulas(goals)": [
                    "\u00ac(\u00acp_6(Legacy))"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "p_10(Legacy)"
                ],
                "removed_rules": [
                    "(p_3(Legacy) \u2227 p_1(Legacy)) \u2192 p_10(Legacy)"
                ],
                "added_facts": [
                    "p_5(Legacy)"
                ],
                "added_rules": []
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_4(Legacy)\np_1(Legacy)\np_3(Legacy)\n\u00acp_2(Legacy)\n\u00acp_0(Legacy)\np_11(Legacy) \u2192 (p_12(Legacy) \u2227 p_4(Legacy))\n\u2200x (p_9(x) \u2192 p_11(x))\n\u2200x (\u00acp_7(x) \u2194 p_9(x))\np_8(Legacy) \u2192 ((p_5(Legacy) \u2228 p_0(Legacy)) \u2227 \u00ac(p_5(Legacy) \u2227 p_0(Legacy)))\n\u00acp_11(Legacy)\n\u2200x (p_5(x) \u2192 p_7(x))\n\u00acp_9(Legacy)\np_8(Legacy) \u2192 p_5(Legacy)\np_10(Legacy) \u2192 \u00acp_6(Legacy)\np_5(Legacy)\np_7(Legacy) \u2192 \u00acp_6(Legacy)",
            "Initial Goal": "\u00acp_6(Legacy)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Legacy)",
                    "p_1(Legacy)",
                    "p_3(Legacy)",
                    "-p_2(Legacy)",
                    "-p_0(Legacy)",
                    "p_11(Legacy) -> (p_12(Legacy) & p_4(Legacy))",
                    "all x (p_9(x) -> p_11(x))",
                    "all x (-p_7(x) <-> p_9(x))",
                    "p_8(Legacy) -> ((p_5(Legacy) | p_0(Legacy)) & (-(p_5(Legacy) & p_0(Legacy))))",
                    "-p_11(Legacy)",
                    "all x (p_5(x) -> p_7(x))",
                    "-p_9(Legacy)",
                    "p_8(Legacy) -> p_5(Legacy)",
                    "p_10(Legacy) -> -p_6(Legacy)",
                    "p_5(Legacy)",
                    "p_7(Legacy) -> -p_6(Legacy)"
                ],
                "formulas(goals)": [
                    "-p_6(Legacy)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u2200x (p_5(x) \u2192 (p_6(x) \u2227 p_7(x)))",
                    "\u2200x (p_5(x) \u2192 p_6(x))"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_7(Legacy) \u2192 \u00acp_6(Legacy)"
                ]
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_4(Legacy)\np_1(Legacy)\np_3(Legacy)\n\u00acp_2(Legacy)\n\u00acp_0(Legacy)\np_11(Legacy) \u2192 (p_12(Legacy) \u2227 p_4(Legacy))\n\u2200x (p_9(x) \u2192 p_11(x))\n\u2200x (\u00acp_7(x) \u2194 p_9(x))\np_8(Legacy) \u2192 ((p_5(Legacy) \u2228 p_0(Legacy)) \u2227 \u00ac(p_5(Legacy) \u2227 p_0(Legacy)))\n\u00acp_11(Legacy)\n\u2200x (p_5(x) \u2192 p_7(x))\n\u00acp_9(Legacy)\np_8(Legacy) \u2192 p_5(Legacy)\np_10(Legacy) \u2192 \u00acp_6(Legacy)\np_5(Legacy)\n(p_7(Legacy) \u2227 \u00acp_5(Legacy)) \u2192 \u00acp_6(Legacy)\np_5(Legacy) \u2192 p_6(Legacy)",
            "Initial Goal": "\u00acp_6(Legacy)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Legacy).",
                    "p_1(Legacy).",
                    "p_3(Legacy).",
                    "-p_2(Legacy).",
                    "-p_0(Legacy).",
                    "p_11(Legacy) -> (p_12(Legacy) & p_4(Legacy)).",
                    "all x (p_9(x) -> p_11(x)).",
                    "all x (-p_7(x) <-> p_9(x)).",
                    "p_8(Legacy) -> ((p_5(Legacy) | p_0(Legacy)) & -(p_5(Legacy) & p_0(Legacy))).",
                    "-p_11(Legacy).",
                    "all x (p_5(x) -> p_7(x)).",
                    "-p_9(Legacy).",
                    "p_8(Legacy) -> p_5(Legacy).",
                    "p_10(Legacy) -> -p_6(Legacy).",
                    "p_5(Legacy).",
                    "(p_7(Legacy) & -p_5(Legacy)) -> -p_6(Legacy).",
                    "p_5(Legacy) -> p_6(Legacy)."
                ],
                "formulas(goals)": [
                    "--p_6(Legacy)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_7(Legacy) \u2192 \u00acp_6(Legacy)"
                ],
                "added_facts": [],
                "added_rules": [
                    "(p_7(Legacy) \u2227 \u00acp_5(Legacy)) \u2192 \u00acp_6(Legacy)",
                    "p_5(Legacy) \u2192 p_6(Legacy)"
                ]
            }
        }
    ]
}