{
    "background_story": "Capri was the lead singer of a local rock band known for their electrifying performances. She had a voice that could shatter glass, and her screaming vocals were the hallmark of their unique sound. On stage, Capri transformed into a whirlwind of energy, her screaming melodies sending the crowd into a frenzy. Her passion and intensity were contagious, drawing in fans from all over the city. But Capri's screaming wasn't just about the music; it was also her way of releasing pent-up emotions and telling her story. Through her powerful voice, she conveyed the pain and struggle of her past, connecting with listeners on a deep level. Capri's screaming became a beacon of hope and catharsis for all who experienced it.",
    "predicates": [
        {
            "id": 0,
            "name": "plays_instruments"
        },
        {
            "id": 1,
            "name": "dances_wild"
        },
        {
            "id": 2,
            "name": "is_dedicated"
        },
        {
            "id": 3,
            "name": "tells_story"
        },
        {
            "id": 4,
            "name": "connects_audience"
        },
        {
            "id": 5,
            "name": "speaks_fast"
        },
        {
            "id": 6,
            "name": "performs_live"
        },
        {
            "id": 7,
            "name": "writes_poetry"
        },
        {
            "id": 8,
            "name": "has_passion"
        },
        {
            "id": 9,
            "name": "is_energetic"
        },
        {
            "id": 10,
            "name": "sings_loud"
        },
        {
            "id": 11,
            "name": "sings_soft"
        },
        {
            "id": 12,
            "name": "conveys_emotion"
        },
        {
            "id": 13,
            "name": "expressive"
        },
        {
            "id": 14,
            "name": "performs_music"
        },
        {
            "id": 15,
            "name": "writes_songs"
        },
        {
            "id": 16,
            "name": "is_vocalist"
        },
        {
            "id": 17,
            "name": "raps_fast"
        },
        {
            "id": 18,
            "name": "feels_deeply"
        },
        {
            "id": 19,
            "name": "acts_intensely"
        },
        {
            "id": 20,
            "name": "creative"
        },
        {
            "id": 21,
            "name": "confident"
        },
        {
            "id": 22,
            "name": "moves_fast"
        },
        {
            "id": 23,
            "name": "acts_bold"
        }
    ],
    "subject_name": "Capri",
    "subject_category": "human",
    "keyword": "screaming",
    "all_facts": [
        {
            "id": 0,
            "subject": "Capri",
            "text": "Capri plays instruments.",
            "fol": "p_0(Capri)",
            "str_fol": "plays_instruments(Capri)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Capri",
            "text": "Capri does not dance wildly.",
            "fol": "\u00acp_1(Capri)",
            "str_fol": "\u00acdances_wild(Capri)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Capri",
            "text": "Capri is not dedicated.",
            "fol": "\u00acp_2(Capri)",
            "str_fol": "\u00acis_dedicated(Capri)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Capri",
            "text": "Capri does not tell a story.",
            "fol": "\u00acp_3(Capri)",
            "str_fol": "\u00actells_story(Capri)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Capri",
            "text": "Capri cannot connect with her audience.",
            "fol": "\u00acp_4(Capri)",
            "str_fol": "\u00acconnects_audience(Capri)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Capri",
            "text": "Capri does not speak quickly.",
            "fol": "\u00acp_5(Capri)",
            "str_fol": "\u00acspeaks_fast(Capri)",
            "negation": true
        },
        {
            "id": 6,
            "subject": "Capri",
            "text": "Capri performs live.",
            "fol": "p_6(Capri)",
            "str_fol": "performs_live(Capri)",
            "negation": false
        },
        {
            "id": 7,
            "subject": "Capri",
            "text": "Capri does not write poetry.",
            "fol": "\u00acp_7(Capri)",
            "str_fol": "\u00acwrites_poetry(Capri)",
            "negation": true
        },
        {
            "id": 8,
            "subject": "Capri",
            "text": "Capri conveys emotion.",
            "fol": "p_12(Capri)",
            "str_fol": "conveys_emotion(Capri)",
            "negation": false
        },
        {
            "id": 9,
            "subject": "Capri",
            "text": "Capri is not energetic.",
            "fol": "\u00acp_9(Capri)",
            "str_fol": "\u00acis_energetic(Capri)",
            "negation": true
        },
        {
            "id": 10,
            "subject": "Capri",
            "text": "Capri is not expressive.",
            "fol": "\u00acp_13(Capri)",
            "str_fol": "\u00acexpressive(Capri)",
            "negation": true
        },
        {
            "id": 11,
            "subject": "Capri",
            "text": "Capri has passion.",
            "fol": "p_8(Capri)",
            "str_fol": "has_passion(Capri)",
            "negation": false
        },
        {
            "id": 12,
            "subject": "Capri",
            "text": "Capri sings loud.",
            "fol": "p_10(Capri)",
            "str_fol": "sings_loud(Capri)",
            "negation": false
        }
    ],
    "context_facts": [
        {
            "id": 6,
            "subject": "Capri",
            "text": "Capri performs live.",
            "fol": "p_6(Capri)",
            "str_fol": "performs_live(Capri)",
            "negation": false
        },
        {
            "id": 7,
            "subject": "Capri",
            "text": "Capri does not write poetry.",
            "fol": "\u00acp_7(Capri)",
            "str_fol": "\u00acwrites_poetry(Capri)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Capri",
            "text": "Capri does not dance wildly.",
            "fol": "\u00acp_1(Capri)",
            "str_fol": "\u00acdances_wild(Capri)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Capri",
            "text": "Capri does not speak quickly.",
            "fol": "\u00acp_5(Capri)",
            "str_fol": "\u00acspeaks_fast(Capri)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Capri",
            "text": "Capri does not tell a story.",
            "fol": "\u00acp_3(Capri)",
            "str_fol": "\u00actells_story(Capri)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Capri",
            "text": "Capri cannot connect with her audience.",
            "fol": "\u00acp_4(Capri)",
            "str_fol": "\u00acconnects_audience(Capri)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Capri",
            "text": "Capri is not dedicated.",
            "fol": "\u00acp_2(Capri)",
            "str_fol": "\u00acis_dedicated(Capri)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Capri",
            "text": "Capri plays instruments.",
            "fol": "p_0(Capri)",
            "str_fol": "plays_instruments(Capri)",
            "negation": false
        }
    ],
    "context_rules": [
        {
            "id": 5,
            "text": "If Capri performs live, then she either conveys emotion or writes poetry (but not both).",
            "fol": "p_6(Capri) \u2192 (p_12(Capri) \u2295 p_7(Capri))",
            "str_fol": "performs_live(Capri) \u2192 (conveys_emotion(Capri) \u2295 writes_poetry(Capri))"
        },
        {
            "id": 4,
            "text": "If Capri is energetic, then she either dances wildly or speaks quickly, but not both.",
            "fol": "p_9(Capri) \u2192 (p_1(Capri) \u2295 p_5(Capri))",
            "str_fol": "is_energetic(Capri) \u2192 (dances_wild(Capri) \u2295 speaks_fast(Capri))"
        },
        {
            "id": 3,
            "text": "Anyone who tells a story or is expressive can connect with their audience.",
            "fol": "\u2200x ((p_3(x) \u2228 p_13(x)) \u2192 p_4(x))",
            "str_fol": "\u2200x ((tells_story(x) \u2228 expressive(x)) \u2192 connects_audience(x))"
        },
        {
            "id": 2,
            "text": "Capri has passion or is dedicated.",
            "fol": "p_8(Capri) \u2228 p_2(Capri)",
            "str_fol": "has_passion(Capri) \u2228 is_dedicated(Capri)"
        },
        {
            "id": 1,
            "text": "If Capri either plays instruments or sings soft (but not both), then she conveys emotion.",
            "fol": "(p_0(Capri) \u2295 p_11(Capri)) \u2192 p_12(Capri)",
            "str_fol": "(plays_instruments(Capri) \u2295 sings_soft(Capri)) \u2192 conveys_emotion(Capri)"
        },
        {
            "id": 0,
            "text": "If Capri has passion or is energetic, then she can sing loud.",
            "fol": "(p_8(Capri) \u2228 p_9(Capri)) \u2192 p_10(Capri)",
            "str_fol": "(has_passion(Capri) \u2228 is_energetic(Capri)) \u2192 sings_loud(Capri)"
        }
    ],
    "context": [
        {
            "id": 6,
            "subject": "Capri",
            "text": "Capri performs live.",
            "fol": "p_6(Capri)",
            "str_fol": "performs_live(Capri)",
            "negation": false
        },
        {
            "id": 7,
            "subject": "Capri",
            "text": "Capri does not write poetry.",
            "fol": "\u00acp_7(Capri)",
            "str_fol": "\u00acwrites_poetry(Capri)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Capri",
            "text": "Capri does not dance wildly.",
            "fol": "\u00acp_1(Capri)",
            "str_fol": "\u00acdances_wild(Capri)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Capri",
            "text": "Capri does not speak quickly.",
            "fol": "\u00acp_5(Capri)",
            "str_fol": "\u00acspeaks_fast(Capri)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Capri",
            "text": "Capri does not tell a story.",
            "fol": "\u00acp_3(Capri)",
            "str_fol": "\u00actells_story(Capri)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Capri",
            "text": "Capri cannot connect with her audience.",
            "fol": "\u00acp_4(Capri)",
            "str_fol": "\u00acconnects_audience(Capri)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Capri",
            "text": "Capri is not dedicated.",
            "fol": "\u00acp_2(Capri)",
            "str_fol": "\u00acis_dedicated(Capri)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Capri",
            "text": "Capri plays instruments.",
            "fol": "p_0(Capri)",
            "str_fol": "plays_instruments(Capri)",
            "negation": false
        },
        {
            "id": 5,
            "text": "If Capri performs live, then she either conveys emotion or writes poetry (but not both).",
            "fol": "p_6(Capri) \u2192 (p_12(Capri) \u2295 p_7(Capri))",
            "str_fol": "performs_live(Capri) \u2192 (conveys_emotion(Capri) \u2295 writes_poetry(Capri))"
        },
        {
            "id": 4,
            "text": "If Capri is energetic, then she either dances wildly or speaks quickly, but not both.",
            "fol": "p_9(Capri) \u2192 (p_1(Capri) \u2295 p_5(Capri))",
            "str_fol": "is_energetic(Capri) \u2192 (dances_wild(Capri) \u2295 speaks_fast(Capri))"
        },
        {
            "id": 3,
            "text": "Anyone who tells a story or is expressive can connect with their audience.",
            "fol": "\u2200x ((p_3(x) \u2228 p_13(x)) \u2192 p_4(x))",
            "str_fol": "\u2200x ((tells_story(x) \u2228 expressive(x)) \u2192 connects_audience(x))"
        },
        {
            "id": 2,
            "text": "Capri has passion or is dedicated.",
            "fol": "p_8(Capri) \u2228 p_2(Capri)",
            "str_fol": "has_passion(Capri) \u2228 is_dedicated(Capri)"
        },
        {
            "id": 1,
            "text": "If Capri either plays instruments or sings soft (but not both), then she conveys emotion.",
            "fol": "(p_0(Capri) \u2295 p_11(Capri)) \u2192 p_12(Capri)",
            "str_fol": "(plays_instruments(Capri) \u2295 sings_soft(Capri)) \u2192 conveys_emotion(Capri)"
        },
        {
            "id": 0,
            "text": "If Capri has passion or is energetic, then she can sing loud.",
            "fol": "(p_8(Capri) \u2228 p_9(Capri)) \u2192 p_10(Capri)",
            "str_fol": "(has_passion(Capri) \u2228 is_energetic(Capri)) \u2192 sings_loud(Capri)"
        }
    ],
    "context_fol": "p_6(Capri)\n\u00acp_7(Capri)\n\u00acp_1(Capri)\n\u00acp_5(Capri)\n\u00acp_3(Capri)\n\u00acp_4(Capri)\n\u00acp_2(Capri)\np_0(Capri)\np_6(Capri) \u2192 (p_12(Capri) \u2295 p_7(Capri))\np_9(Capri) \u2192 (p_1(Capri) \u2295 p_5(Capri))\n\u2200x ((p_3(x) \u2228 p_13(x)) \u2192 p_4(x))\np_8(Capri) \u2228 p_2(Capri)\n(p_0(Capri) \u2295 p_11(Capri)) \u2192 p_12(Capri)\n(p_8(Capri) \u2228 p_9(Capri)) \u2192 p_10(Capri)",
    "conclusion": {
        "id": 12,
        "text": "If Capri either sings loud or sings soft (but not both), then she is expressive.",
        "fol": "(p_10(Capri) \u2295 p_11(Capri)) \u2192 p_13(Capri)",
        "str_fol": "(sings_loud(Capri) \u2295 sings_soft(Capri)) \u2192 expressive(Capri)"
    },
    "initial_answer": "Uncertain",
    "initial_goal": "(p_10(Capri) \u2295 p_11(Capri)) \u2192 p_13(Capri)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 6,
                    "subject": "Capri",
                    "text": "Capri performs live.",
                    "fol": "p_6(Capri)",
                    "str_fol": "performs_live(Capri)",
                    "negation": false
                },
                {
                    "id": 7,
                    "subject": "Capri",
                    "text": "Capri does not write poetry.",
                    "fol": "\u00acp_7(Capri)",
                    "str_fol": "\u00acwrites_poetry(Capri)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "If Capri performs live, then she either conveys emotion or writes poetry (but not both).",
                    "fol": "p_6(Capri) \u2192 (p_12(Capri) \u2295 p_7(Capri))",
                    "str_fol": "performs_live(Capri) \u2192 (conveys_emotion(Capri) \u2295 writes_poetry(Capri))"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Capri",
                "text": "Capri conveys emotion.",
                "fol": "p_12(Capri)",
                "str_fol": "conveys_emotion(Capri)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 1,
                    "subject": "Capri",
                    "text": "Capri does not dance wildly.",
                    "fol": "\u00acp_1(Capri)",
                    "str_fol": "\u00acdances_wild(Capri)",
                    "negation": true
                },
                {
                    "id": 5,
                    "subject": "Capri",
                    "text": "Capri does not speak quickly.",
                    "fol": "\u00acp_5(Capri)",
                    "str_fol": "\u00acspeaks_fast(Capri)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "If Capri is energetic, then she either dances wildly or speaks quickly, but not both.",
                    "fol": "p_9(Capri) \u2192 (p_1(Capri) \u2295 p_5(Capri))",
                    "str_fol": "is_energetic(Capri) \u2192 (dances_wild(Capri) \u2295 speaks_fast(Capri))"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Capri",
                "text": "Capri is not energetic.",
                "fol": "\u00acp_9(Capri)",
                "str_fol": "\u00acis_energetic(Capri)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 3,
                    "subject": "Capri",
                    "text": "Capri does not tell a story.",
                    "fol": "\u00acp_3(Capri)",
                    "str_fol": "\u00actells_story(Capri)",
                    "negation": true
                },
                {
                    "id": 4,
                    "subject": "Capri",
                    "text": "Capri cannot connect with her audience.",
                    "fol": "\u00acp_4(Capri)",
                    "str_fol": "\u00acconnects_audience(Capri)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "Anyone who tells a story or is expressive can connect with their audience.",
                    "fol": "\u2200x ((p_3(x) \u2228 p_13(x)) \u2192 p_4(x))",
                    "str_fol": "\u2200x ((tells_story(x) \u2228 expressive(x)) \u2192 connects_audience(x))"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Capri",
                "text": "Capri is not expressive.",
                "fol": "\u00acp_13(Capri)",
                "str_fol": "\u00acexpressive(Capri)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 2,
                    "subject": "Capri",
                    "text": "Capri is not dedicated.",
                    "fol": "\u00acp_2(Capri)",
                    "str_fol": "\u00acis_dedicated(Capri)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "Capri has passion or is dedicated.",
                    "fol": "p_8(Capri) \u2228 p_2(Capri)",
                    "str_fol": "has_passion(Capri) \u2228 is_dedicated(Capri)"
                }
            ],
            "conclusion": {
                "id": 11,
                "subject": "Capri",
                "text": "Capri has passion.",
                "fol": "p_8(Capri)",
                "str_fol": "has_passion(Capri)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 0,
                    "subject": "Capri",
                    "text": "Capri plays instruments.",
                    "fol": "p_0(Capri)",
                    "str_fol": "plays_instruments(Capri)",
                    "negation": false
                },
                {
                    "id": 8,
                    "subject": "Capri",
                    "text": "Capri conveys emotion.",
                    "fol": "p_12(Capri)",
                    "str_fol": "conveys_emotion(Capri)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "If Capri either plays instruments or sings soft (but not both), then she conveys emotion.",
                    "fol": "(p_0(Capri) \u2295 p_11(Capri)) \u2192 p_12(Capri)",
                    "str_fol": "(plays_instruments(Capri) \u2295 sings_soft(Capri)) \u2192 conveys_emotion(Capri)"
                }
            ],
            "conclusion": null
        },
        {
            "facts": [
                {
                    "id": 11,
                    "subject": "Capri",
                    "text": "Capri has passion.",
                    "fol": "p_8(Capri)",
                    "str_fol": "has_passion(Capri)",
                    "negation": false
                },
                {
                    "id": 9,
                    "subject": "Capri",
                    "text": "Capri is not energetic.",
                    "fol": "\u00acp_9(Capri)",
                    "str_fol": "\u00acis_energetic(Capri)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "If Capri has passion or is energetic, then she can sing loud.",
                    "fol": "(p_8(Capri) \u2228 p_9(Capri)) \u2192 p_10(Capri)",
                    "str_fol": "(has_passion(Capri) \u2228 is_energetic(Capri)) \u2192 sings_loud(Capri)"
                }
            ],
            "conclusion": {
                "id": 12,
                "subject": "Capri",
                "text": "Capri sings loud.",
                "fol": "p_10(Capri)",
                "str_fol": "sings_loud(Capri)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 12,
                    "subject": "Capri",
                    "text": "Capri sings loud.",
                    "fol": "p_10(Capri)",
                    "str_fol": "sings_loud(Capri)",
                    "negation": false
                },
                {
                    "id": 10,
                    "subject": "Capri",
                    "text": "Capri is not expressive.",
                    "fol": "\u00acp_13(Capri)",
                    "str_fol": "\u00acexpressive(Capri)",
                    "negation": true
                }
            ],
            "rules": [],
            "conclusion": null
        }
    ],
    "proof_trace": null,
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "UNCERTAIN",
            "Edited Assumptions": "p_6(Capri)\n\u00acp_7(Capri)\n\u00acp_1(Capri)\n\u00acp_5(Capri)\n\u00acp_3(Capri)\n\u00acp_4(Capri)\n\u00acp_2(Capri)\np_0(Capri)\np_6(Capri) \u2192 (p_12(Capri) \u2295 p_7(Capri))\np_9(Capri) \u2192 (p_1(Capri) \u2295 p_5(Capri))\n\u2200x ((p_3(x) \u2228 p_13(x)) \u2192 p_4(x))\np_8(Capri) \u2228 p_2(Capri)\n(p_0(Capri) \u2295 p_11(Capri)) \u2192 p_12(Capri)\n(p_8(Capri) \u2228 p_9(Capri)) \u2192 p_10(Capri)",
            "Initial Goal": "(p_10(Capri) \u2295 p_11(Capri)) \u2192 p_13(Capri)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_6(Capri).",
                    "-p_7(Capri).",
                    "-p_1(Capri).",
                    "-p_5(Capri).",
                    "-p_3(Capri).",
                    "-p_4(Capri).",
                    "-p_2(Capri).",
                    "p_0(Capri).",
                    "p_6(Capri) -> (-(p_12(Capri) <-> p_7(Capri))).",
                    "p_9(Capri) -> (-(p_1(Capri) <-> p_5(Capri))).",
                    "all x ((p_3(x) | p_13(x)) -> p_4(x)).",
                    "p_8(Capri) | p_2(Capri).",
                    "(-(p_0(Capri) <-> p_11(Capri))) -> p_12(Capri).",
                    "(p_8(Capri) | p_9(Capri)) -> p_10(Capri).",
                    "p_8(Capri) -> p_11(Capri)."
                ],
                "formulas(goals)": [
                    "(-(p_10(Capri) <-> p_11(Capri))) -> p_13(Capri)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "p_8(Capri) \u2192 p_11(Capri)"
                ]
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_6(Capri)\n\u00acp_7(Capri)\n\u00acp_1(Capri)\n\u00acp_5(Capri)\n\u00acp_3(Capri)\n\u00acp_4(Capri)\n\u00acp_2(Capri)\np_0(Capri)\np_6(Capri) \u2192 (p_12(Capri) \u2295 p_7(Capri))\np_9(Capri) \u2192 (p_1(Capri) \u2295 p_5(Capri))\n\u2200x ((p_3(x) \u2228 p_13(x)) \u2192 p_4(x))\np_8(Capri) \u2228 p_2(Capri)\n(p_0(Capri) \u2295 p_11(Capri)) \u2192 p_12(Capri)\n(p_8(Capri) \u2228 p_9(Capri)) \u2192 p_10(Capri)\np_11(Capri)",
            "Initial Goal": "(p_10(Capri) \u2295 p_11(Capri)) \u2192 p_13(Capri)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_6(Capri)",
                    "-p_7(Capri)",
                    "-p_1(Capri)",
                    "-p_5(Capri)",
                    "-p_3(Capri)",
                    "-p_4(Capri)",
                    "-p_2(Capri)",
                    "p_0(Capri)",
                    "p_6(Capri) -> (-(p_12(Capri) <-> p_7(Capri)))",
                    "p_9(Capri) -> (-(p_1(Capri) <-> p_5(Capri)))",
                    "all x ((p_3(x) | p_13(x)) -> p_4(x))",
                    "p_8(Capri) | p_2(Capri)",
                    "(-(p_0(Capri) <-> p_11(Capri))) -> p_12(Capri)",
                    "(p_8(Capri) | p_9(Capri)) -> p_10(Capri)",
                    "p_11(Capri)"
                ],
                "formulas(goals)": [
                    "(-(p_10(Capri) <-> p_11(Capri))) -> p_13(Capri)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_11(Capri)"
                ],
                "added_rules": []
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_6(Capri)\n\u00acp_7(Capri)\n\u00acp_1(Capri)\n\u00acp_5(Capri)\n\u00acp_3(Capri)\n\u00acp_4(Capri)\n\u00acp_2(Capri)\np_0(Capri)\np_6(Capri) \u2192 (p_12(Capri) \u2295 p_7(Capri))\np_9(Capri) \u2192 (p_1(Capri) \u2295 p_5(Capri))\n\u2200x ((p_3(x) \u2228 p_13(x)) \u2192 p_4(x))\np_8(Capri) \u2192 p_2(Capri)\n(p_0(Capri) \u2295 p_11(Capri)) \u2192 p_12(Capri)\n(p_8(Capri) \u2228 p_9(Capri)) \u2192 p_10(Capri)\np_11(Capri)\np_12(Capri) \u2192 \u00acp_10(Capri)",
            "Initial Goal": "(p_10(Capri) \u2295 p_11(Capri)) \u2192 p_13(Capri)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_6(Capri)",
                    "-p_7(Capri)",
                    "-p_1(Capri)",
                    "-p_5(Capri)",
                    "-p_3(Capri)",
                    "-p_4(Capri)",
                    "-p_2(Capri)",
                    "p_0(Capri)",
                    "p_6(Capri) -> (-(p_12(Capri) <-> p_7(Capri)))",
                    "p_9(Capri) -> (-(p_1(Capri) <-> p_5(Capri)))",
                    "(all x ((p_3(x) | p_13(x)) -> p_4(x)))",
                    "p_8(Capri) -> p_2(Capri)",
                    "(-(p_0(Capri) <-> p_11(Capri))) -> p_12(Capri)",
                    "(p_8(Capri) | p_9(Capri)) -> p_10(Capri)",
                    "p_11(Capri)",
                    "p_12(Capri) -> -p_10(Capri)"
                ],
                "formulas(goals)": [
                    "(-(p_10(Capri) <-> p_11(Capri))) & -p_13(Capri)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_8(Capri) \u2228 p_2(Capri)"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_8(Capri) \u2192 p_2(Capri)",
                    "p_12(Capri) \u2192 \u00acp_10(Capri)"
                ]
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_6(Capri)\n\u00acp_7(Capri)\n\u00acp_1(Capri)\n\u00acp_5(Capri)\n\u00acp_3(Capri)\n\u00acp_4(Capri)\n\u00acp_2(Capri)\np_0(Capri)\np_6(Capri) \u2192 (p_12(Capri) \u2295 p_7(Capri))\np_9(Capri) \u2192 (p_1(Capri) \u2295 p_5(Capri))\n\u2200x (\u00acp_4(x) \u2192 (\u00acp_3(x) \u2227 \u00acp_13(x)))\np_8(Capri) \u2192 p_2(Capri)\n(p_0(Capri) \u2295 p_11(Capri)) \u2192 p_12(Capri)\n\u00acp_10(Capri) \u2192 (\u00acp_8(Capri) \u2227 \u00acp_9(Capri))\np_11(Capri)\np_12(Capri) \u2192 \u00acp_10(Capri)\np_12(Capri)\n\u00acp_13(Capri)\n\u00acp_10(Capri)\n\u00acp_8(Capri)\n\u00acp_9(Capri)",
            "Initial Goal": "(p_10(Capri) \u2295 p_11(Capri)) \u2192 p_13(Capri)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_6(Capri)",
                    "-p_7(Capri)",
                    "-p_1(Capri)",
                    "-p_5(Capri)",
                    "-p_3(Capri)",
                    "-p_4(Capri)",
                    "-p_2(Capri)",
                    "p_0(Capri)",
                    "p_6(Capri) -> (-(p_12(Capri) <-> p_7(Capri)))",
                    "p_9(Capri) -> (-(p_1(Capri) <-> p_5(Capri)))",
                    "all x (-p_4(x) -> (-p_3(x) & -p_13(x)))",
                    "p_8(Capri) -> p_2(Capri)",
                    "(-(p_0(Capri) <-> p_11(Capri))) -> p_12(Capri)",
                    "-p_10(Capri) -> (-p_8(Capri) & -p_9(Capri))",
                    "p_11(Capri)",
                    "p_12(Capri) -> -p_10(Capri)",
                    "p_12(Capri)",
                    "-p_13(Capri)",
                    "-p_10(Capri)",
                    "-p_8(Capri)",
                    "-p_9(Capri)"
                ],
                "formulas(goals)": [
                    "-(p_10(Capri) <-> p_11(Capri))"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u2200x ((p_3(x) \u2228 p_13(x)) \u2192 p_4(x))",
                    "(p_8(Capri) \u2228 p_9(Capri)) \u2192 p_10(Capri)"
                ],
                "added_facts": [
                    "p_12(Capri)",
                    "\u00acp_13(Capri)",
                    "\u00acp_10(Capri)",
                    "\u00acp_8(Capri)",
                    "\u00acp_9(Capri)"
                ],
                "added_rules": [
                    "\u2200x (\u00acp_4(x) \u2192 (\u00acp_3(x) \u2227 \u00acp_13(x)))",
                    "\u00acp_10(Capri) \u2192 (\u00acp_8(Capri) \u2227 \u00acp_9(Capri))"
                ]
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_6(Capri)\n\u00acp_7(Capri)\n\u00acp_1(Capri)\n\u00acp_5(Capri)\n\u00acp_3(Capri)\n\u00acp_4(Capri)\n\u00acp_2(Capri)\np_0(Capri)\np_6(Capri) \u2192 (p_12(Capri) \u2295 p_7(Capri))\np_9(Capri) \u2192 (p_1(Capri) \u2295 p_5(Capri))\n\u2200x (\u00acp_4(x) \u2192 (\u00acp_3(x) \u2227 \u00acp_13(x)))\np_8(Capri) \u2192 p_2(Capri)\n(p_0(Capri) \u2295 p_11(Capri)) \u2192 p_12(Capri)\n\u00acp_10(Capri) \u2192 (\u00acp_8(Capri) \u2227 \u00acp_9(Capri))\np_12(Capri) \u2192 \u00acp_10(Capri)\np_12(Capri)\n\u00acp_13(Capri)\n\u00acp_10(Capri)\n\u00acp_8(Capri)\n\u00acp_9(Capri)\n\u00acp_11(Capri)",
            "Initial Goal": "(p_10(Capri) \u2295 p_11(Capri)) \u2192 p_13(Capri)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_6(Capri)",
                    "-p_7(Capri)",
                    "-p_1(Capri)",
                    "-p_5(Capri)",
                    "-p_3(Capri)",
                    "-p_4(Capri)",
                    "-p_2(Capri)",
                    "p_0(Capri)",
                    "p_6(Capri) -> (-(p_12(Capri) <-> p_7(Capri)))",
                    "p_9(Capri) -> (-(p_1(Capri) <-> p_5(Capri)))",
                    "all x (-p_4(x) -> (-p_3(x) & -p_13(x)))",
                    "p_8(Capri) -> p_2(Capri)",
                    "(-(p_0(Capri) <-> p_11(Capri))) -> p_12(Capri)",
                    "-p_10(Capri) -> (-p_8(Capri) & -p_9(Capri))",
                    "p_12(Capri) -> -p_10(Capri)",
                    "p_12(Capri)",
                    "-p_13(Capri)",
                    "-p_10(Capri)",
                    "-p_8(Capri)",
                    "-p_9(Capri)",
                    "-p_11(Capri)"
                ],
                "formulas(goals)": [
                    "(-(p_10(Capri) <-> p_11(Capri))) -> p_13(Capri)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": []
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_6(Capri)\n\u00acp_7(Capri)\n\u00acp_1(Capri)\n\u00acp_5(Capri)\n\u00acp_3(Capri)\n\u00acp_4(Capri)\n\u00acp_2(Capri)\np_0(Capri)\np_6(Capri) \u2192 (p_12(Capri) \u2295 p_7(Capri))\np_9(Capri) \u2192 (p_1(Capri) \u2295 p_5(Capri))\n\u2200x (\u00acp_4(x) \u2192 (\u00acp_3(x) \u2227 \u00acp_13(x)))\np_8(Capri) \u2192 p_2(Capri)\n(p_0(Capri) \u2295 p_11(Capri)) \u2192 p_12(Capri)\n\u00acp_10(Capri) \u2192 (\u00acp_8(Capri) \u2227 \u00acp_9(Capri))\np_12(Capri)\n\u00acp_13(Capri)\n\u00acp_8(Capri)\n\u00acp_9(Capri)\n\u00acp_11(Capri)\np_10(Capri)",
            "Initial Goal": "(p_10(Capri) \u2295 p_11(Capri)) \u2192 p_13(Capri)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_6(Capri)",
                    "-p_7(Capri)",
                    "-p_1(Capri)",
                    "-p_5(Capri)",
                    "-p_3(Capri)",
                    "-p_4(Capri)",
                    "-p_2(Capri)",
                    "p_0(Capri)",
                    "p_6(Capri) -> (-(p_12(Capri) <-> p_7(Capri)))",
                    "p_9(Capri) -> (-(p_1(Capri) <-> p_5(Capri)))",
                    "all x (-p_4(x) -> (-p_3(x) & -p_13(x)))",
                    "p_8(Capri) -> p_2(Capri)",
                    "(-(p_0(Capri) <-> p_11(Capri))) -> p_12(Capri)",
                    "-p_10(Capri) -> (-p_8(Capri) & -p_9(Capri))",
                    "p_12(Capri)",
                    "-p_13(Capri)",
                    "-p_8(Capri)",
                    "-p_9(Capri)",
                    "-p_11(Capri)",
                    "p_10(Capri)"
                ],
                "formulas(goals)": [
                    "-((-(p_10(Capri) <-> p_11(Capri))) -> p_13(Capri))"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "\u00acp_10(Capri)"
                ],
                "removed_rules": [
                    "p_12(Capri) \u2192 \u00acp_10(Capri)"
                ],
                "added_facts": [
                    "p_10(Capri)"
                ],
                "added_rules": []
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_6(Capri)\n\u00acp_7(Capri)\n\u00acp_1(Capri)\n\u00acp_5(Capri)\n\u00acp_3(Capri)\n\u00acp_4(Capri)\n\u00acp_2(Capri)\np_0(Capri)\np_6(Capri) \u2192 (p_12(Capri) \u2295 p_7(Capri))\np_9(Capri) \u2192 (p_1(Capri) \u2295 p_5(Capri))\n\u2200x (\u00acp_4(x) \u2192 (\u00acp_3(x) \u2227 \u00acp_13(x)))\np_8(Capri) \u2192 p_2(Capri)\n(p_0(Capri) \u2295 p_11(Capri)) \u2192 p_12(Capri)\n\u00acp_10(Capri) \u2192 (\u00acp_8(Capri) \u2227 \u00acp_9(Capri))\np_12(Capri)\n\u00acp_13(Capri)\n\u00acp_8(Capri)\n\u00acp_9(Capri)\n\u00acp_11(Capri)\np_10(Capri)\np_8(Capri) \u2228 p_9(Capri) \u2228 p_10(Capri)\n\u00acp_9(Capri) \u2228 (p_1(Capri) \u2295 p_5(Capri))\n\u00acp_8(Capri) \u2228 p_2(Capri)",
            "Initial Goal": "(p_10(Capri) \u2295 p_11(Capri)) \u2192 p_13(Capri)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_6(Capri).",
                    "-p_7(Capri).",
                    "-p_1(Capri).",
                    "-p_5(Capri).",
                    "-p_3(Capri).",
                    "-p_4(Capri).",
                    "-p_2(Capri).",
                    "p_0(Capri).",
                    "p_6(Capri) -> (-(p_12(Capri) <-> p_7(Capri))).",
                    "p_9(Capri) -> (-(p_1(Capri) <-> p_5(Capri))).",
                    "all x (-p_4(x) -> (-p_3(x) & -p_13(x))).",
                    "p_8(Capri) -> p_2(Capri).",
                    "(-(p_0(Capri) <-> p_11(Capri))) -> p_12(Capri).",
                    "-p_10(Capri) -> (-p_8(Capri) & -p_9(Capri)).",
                    "p_12(Capri).",
                    "-p_13(Capri).",
                    "-p_8(Capri).",
                    "-p_9(Capri).",
                    "-p_11(Capri).",
                    "p_10(Capri).",
                    "(p_8(Capri) | p_9(Capri) | p_10(Capri)).",
                    "(-p_9(Capri) | (-(p_1(Capri) <-> p_5(Capri)))).",
                    "(-p_8(Capri) | p_2(Capri))."
                ],
                "formulas(goals)": [
                    "-((-(p_10(Capri) <-> p_11(Capri))) -> p_13(Capri))."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_8(Capri) \u2228 p_9(Capri) \u2228 p_10(Capri)",
                    "\u00acp_9(Capri) \u2228 (p_1(Capri) \u2295 p_5(Capri))",
                    "\u00acp_8(Capri) \u2228 p_2(Capri)"
                ],
                "added_rules": []
            }
        }
    ]
}