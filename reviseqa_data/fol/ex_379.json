{
    "background_story": "Allen was a seasoned hiker and outdoorsman who always emphasized the importance of precaution. Before every trek, he would meticulously check his gear, forecast the weather, and research the terrain. His friends often teased him about being overly cautious, but Allen's diligence had saved them from potential disasters on more than one occasion. One fateful day, while hiking in the mountains, Allen's precautionary measures paid off when he predicted a sudden storm and led his group to safety just as a landslide occurred. His foresight and preparedness earned him the respect and gratitude of his companions, and they never underestimated the value of precaution again.",
    "predicates": [
        {
            "id": 0,
            "name": "is_adventurous"
        },
        {
            "id": 1,
            "name": "stays_safe"
        },
        {
            "id": 2,
            "name": "hikes_alone"
        },
        {
            "id": 3,
            "name": "travels_frequently"
        },
        {
            "id": 4,
            "name": "owns_gps"
        },
        {
            "id": 5,
            "name": "experienced"
        },
        {
            "id": 6,
            "name": "prepared"
        },
        {
            "id": 7,
            "name": "outdoorsman"
        },
        {
            "id": 8,
            "name": "skilled"
        },
        {
            "id": 9,
            "name": "knows_first_aid"
        },
        {
            "id": 10,
            "name": "carries_map"
        },
        {
            "id": 11,
            "name": "has_compass"
        },
        {
            "id": 12,
            "name": "plans_ahead"
        },
        {
            "id": 13,
            "name": "anticipates_dangers"
        },
        {
            "id": 14,
            "name": "loves_nature"
        },
        {
            "id": 15,
            "name": "checks_weather"
        },
        {
            "id": 16,
            "name": "reads_manuals"
        },
        {
            "id": 17,
            "name": "practices_often"
        },
        {
            "id": 18,
            "name": "trains_medical"
        },
        {
            "id": 19,
            "name": "plans_route"
        }
    ],
    "subject_name": "Allen",
    "subject_category": "human",
    "keyword": "precaution",
    "all_facts": [
        {
            "id": 0,
            "subject": "Allen",
            "text": "Allen is not adventurous.",
            "fol": "\u00acp_0(Allen)",
            "str_fol": "\u00acis_adventurous(Allen)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Allen",
            "text": "Allen does not stay safe.",
            "fol": "\u00acp_1(Allen)",
            "str_fol": "\u00acstays_safe(Allen)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Allen",
            "text": "Allen hikes alone.",
            "fol": "p_2(Allen)",
            "str_fol": "hikes_alone(Allen)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Allen",
            "text": "Allen travels frequently.",
            "fol": "p_3(Allen)",
            "str_fol": "travels_frequently(Allen)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Allen",
            "text": "Allen owns a GPS.",
            "fol": "p_4(Allen)",
            "str_fol": "owns_gps(Allen)",
            "negation": false
        },
        {
            "id": 5,
            "subject": "Allen",
            "text": "Allen does not have a compass.",
            "fol": "\u00acp_11(Allen)",
            "str_fol": "\u00achas_compass(Allen)",
            "negation": true
        },
        {
            "id": 6,
            "subject": "Allen",
            "text": "Allen carries a map.",
            "fol": "p_10(Allen)",
            "str_fol": "carries_map(Allen)",
            "negation": false
        },
        {
            "id": 7,
            "subject": "Allen",
            "text": "Allen does not know first aid.",
            "fol": "\u00acp_9(Allen)",
            "str_fol": "\u00acknows_first_aid(Allen)",
            "negation": true
        },
        {
            "id": 8,
            "subject": "Allen",
            "text": "Allen is not skilled.",
            "fol": "\u00acp_8(Allen)",
            "str_fol": "\u00acskilled(Allen)",
            "negation": true
        },
        {
            "id": 9,
            "subject": "Allen",
            "text": "Allen is an outdoorsman.",
            "fol": "p_7(Allen)",
            "str_fol": "outdoorsman(Allen)",
            "negation": false
        },
        {
            "id": 10,
            "subject": "Allen",
            "text": "Allen is prepared.",
            "fol": "p_6(Allen)",
            "str_fol": "prepared(Allen)",
            "negation": false
        },
        {
            "id": 11,
            "subject": "Allen",
            "text": "Allen is experienced.",
            "fol": "p_5(Allen)",
            "str_fol": "experienced(Allen)",
            "negation": false
        }
    ],
    "context_facts": [
        {
            "id": 3,
            "subject": "Allen",
            "text": "Allen travels frequently.",
            "fol": "p_3(Allen)",
            "str_fol": "travels_frequently(Allen)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Allen",
            "text": "Allen owns a GPS.",
            "fol": "p_4(Allen)",
            "str_fol": "owns_gps(Allen)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Allen",
            "text": "Allen hikes alone.",
            "fol": "p_2(Allen)",
            "str_fol": "hikes_alone(Allen)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Allen",
            "text": "Allen does not stay safe.",
            "fol": "\u00acp_1(Allen)",
            "str_fol": "\u00acstays_safe(Allen)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Allen",
            "text": "Allen is not adventurous.",
            "fol": "\u00acp_0(Allen)",
            "str_fol": "\u00acis_adventurous(Allen)",
            "negation": true
        }
    ],
    "context_rules": [
        {
            "id": 6,
            "text": "If Allen travels frequently, then he either has a compass or owns a GPS, but not both.",
            "fol": "p_3(Allen) \u2192 (p_11(Allen) \u2295 p_4(Allen))",
            "str_fol": "travels_frequently(Allen) \u2192 (has_compass(Allen) \u2295 owns_gps(Allen))"
        },
        {
            "id": 5,
            "text": "If Allen hikes alone, then he either has a compass or carries a map, but not both.",
            "fol": "p_2(Allen) \u2192 (p_11(Allen) \u2295 p_10(Allen))",
            "str_fol": "hikes_alone(Allen) \u2192 (has_compass(Allen) \u2295 carries_map(Allen))"
        },
        {
            "id": 4,
            "text": "For Allen, either he carries a map or he knows first aid, but not both, which helps him in emergency situations.",
            "fol": "p_10(Allen) \u2295 p_9(Allen)",
            "str_fol": "carries_map(Allen) \u2295 knows_first_aid(Allen)"
        },
        {
            "id": 3,
            "text": "If Allen is either skilled or knows first aid (but not both), then he stays safe.",
            "fol": "(p_8(Allen) \u2295 p_9(Allen)) \u2192 p_1(Allen)",
            "str_fol": "(skilled(Allen) \u2295 knows_first_aid(Allen)) \u2192 stays_safe(Allen)"
        },
        {
            "id": 2,
            "text": "Allen is either adventurous or an outdoorsman, but not both.",
            "fol": "p_0(Allen) \u2295 p_7(Allen)",
            "str_fol": "is_adventurous(Allen) \u2295 outdoorsman(Allen)"
        },
        {
            "id": 1,
            "text": "If Allen is an outdoorsman, then he is either skilled or prepared, but not both.",
            "fol": "p_7(Allen) \u2192 (p_8(Allen) \u2295 p_6(Allen))",
            "str_fol": "outdoorsman(Allen) \u2192 (skilled(Allen) \u2295 prepared(Allen))"
        },
        {
            "id": 0,
            "text": "Allen is either experienced or prepared (or both).",
            "fol": "p_5(Allen) \u2228 p_6(Allen)",
            "str_fol": "experienced(Allen) \u2228 prepared(Allen)"
        }
    ],
    "context": [
        {
            "id": 3,
            "subject": "Allen",
            "text": "Allen travels frequently.",
            "fol": "p_3(Allen)",
            "str_fol": "travels_frequently(Allen)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Allen",
            "text": "Allen owns a GPS.",
            "fol": "p_4(Allen)",
            "str_fol": "owns_gps(Allen)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Allen",
            "text": "Allen hikes alone.",
            "fol": "p_2(Allen)",
            "str_fol": "hikes_alone(Allen)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Allen",
            "text": "Allen does not stay safe.",
            "fol": "\u00acp_1(Allen)",
            "str_fol": "\u00acstays_safe(Allen)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Allen",
            "text": "Allen is not adventurous.",
            "fol": "\u00acp_0(Allen)",
            "str_fol": "\u00acis_adventurous(Allen)",
            "negation": true
        },
        {
            "id": 6,
            "text": "If Allen travels frequently, then he either has a compass or owns a GPS, but not both.",
            "fol": "p_3(Allen) \u2192 (p_11(Allen) \u2295 p_4(Allen))",
            "str_fol": "travels_frequently(Allen) \u2192 (has_compass(Allen) \u2295 owns_gps(Allen))"
        },
        {
            "id": 5,
            "text": "If Allen hikes alone, then he either has a compass or carries a map, but not both.",
            "fol": "p_2(Allen) \u2192 (p_11(Allen) \u2295 p_10(Allen))",
            "str_fol": "hikes_alone(Allen) \u2192 (has_compass(Allen) \u2295 carries_map(Allen))"
        },
        {
            "id": 4,
            "text": "For Allen, either he carries a map or he knows first aid, but not both, which helps him in emergency situations.",
            "fol": "p_10(Allen) \u2295 p_9(Allen)",
            "str_fol": "carries_map(Allen) \u2295 knows_first_aid(Allen)"
        },
        {
            "id": 3,
            "text": "If Allen is either skilled or knows first aid (but not both), then he stays safe.",
            "fol": "(p_8(Allen) \u2295 p_9(Allen)) \u2192 p_1(Allen)",
            "str_fol": "(skilled(Allen) \u2295 knows_first_aid(Allen)) \u2192 stays_safe(Allen)"
        },
        {
            "id": 2,
            "text": "Allen is either adventurous or an outdoorsman, but not both.",
            "fol": "p_0(Allen) \u2295 p_7(Allen)",
            "str_fol": "is_adventurous(Allen) \u2295 outdoorsman(Allen)"
        },
        {
            "id": 1,
            "text": "If Allen is an outdoorsman, then he is either skilled or prepared, but not both.",
            "fol": "p_7(Allen) \u2192 (p_8(Allen) \u2295 p_6(Allen))",
            "str_fol": "outdoorsman(Allen) \u2192 (skilled(Allen) \u2295 prepared(Allen))"
        },
        {
            "id": 0,
            "text": "Allen is either experienced or prepared (or both).",
            "fol": "p_5(Allen) \u2228 p_6(Allen)",
            "str_fol": "experienced(Allen) \u2228 prepared(Allen)"
        }
    ],
    "context_fol": "p_3(Allen)\np_4(Allen)\np_2(Allen)\n\u00acp_1(Allen)\n\u00acp_0(Allen)\np_3(Allen) \u2192 (p_11(Allen) \u2295 p_4(Allen))\np_2(Allen) \u2192 (p_11(Allen) \u2295 p_10(Allen))\np_10(Allen) \u2295 p_9(Allen)\n(p_8(Allen) \u2295 p_9(Allen)) \u2192 p_1(Allen)\np_0(Allen) \u2295 p_7(Allen)\np_7(Allen) \u2192 (p_8(Allen) \u2295 p_6(Allen))\np_5(Allen) \u2228 p_6(Allen)",
    "conclusion": {
        "id": 11,
        "subject": "Allen",
        "text": "Allen is experienced.",
        "fol": "p_5(Allen)",
        "str_fol": "experienced(Allen)",
        "negation": false
    },
    "initial_answer": "Uncertain",
    "initial_goal": "p_5(Allen)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 3,
                    "subject": "Allen",
                    "text": "Allen travels frequently.",
                    "fol": "p_3(Allen)",
                    "str_fol": "travels_frequently(Allen)",
                    "negation": false
                },
                {
                    "id": 4,
                    "subject": "Allen",
                    "text": "Allen owns a GPS.",
                    "fol": "p_4(Allen)",
                    "str_fol": "owns_gps(Allen)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 6,
                    "text": "If Allen travels frequently, then he either has a compass or owns a GPS, but not both.",
                    "fol": "p_3(Allen) \u2192 (p_11(Allen) \u2295 p_4(Allen))",
                    "str_fol": "travels_frequently(Allen) \u2192 (has_compass(Allen) \u2295 owns_gps(Allen))"
                }
            ],
            "conclusion": {
                "id": 5,
                "subject": "Allen",
                "text": "Allen does not have a compass.",
                "fol": "\u00acp_11(Allen)",
                "str_fol": "\u00achas_compass(Allen)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 2,
                    "subject": "Allen",
                    "text": "Allen hikes alone.",
                    "fol": "p_2(Allen)",
                    "str_fol": "hikes_alone(Allen)",
                    "negation": false
                },
                {
                    "id": 5,
                    "subject": "Allen",
                    "text": "Allen does not have a compass.",
                    "fol": "\u00acp_11(Allen)",
                    "str_fol": "\u00achas_compass(Allen)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "If Allen hikes alone, then he either has a compass or carries a map, but not both.",
                    "fol": "p_2(Allen) \u2192 (p_11(Allen) \u2295 p_10(Allen))",
                    "str_fol": "hikes_alone(Allen) \u2192 (has_compass(Allen) \u2295 carries_map(Allen))"
                }
            ],
            "conclusion": {
                "id": 6,
                "subject": "Allen",
                "text": "Allen carries a map.",
                "fol": "p_10(Allen)",
                "str_fol": "carries_map(Allen)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 6,
                    "subject": "Allen",
                    "text": "Allen carries a map.",
                    "fol": "p_10(Allen)",
                    "str_fol": "carries_map(Allen)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "For Allen, either he carries a map or he knows first aid, but not both, which helps him in emergency situations.",
                    "fol": "p_10(Allen) \u2295 p_9(Allen)",
                    "str_fol": "carries_map(Allen) \u2295 knows_first_aid(Allen)"
                }
            ],
            "conclusion": {
                "id": 7,
                "subject": "Allen",
                "text": "Allen does not know first aid.",
                "fol": "\u00acp_9(Allen)",
                "str_fol": "\u00acknows_first_aid(Allen)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 7,
                    "subject": "Allen",
                    "text": "Allen does not know first aid.",
                    "fol": "\u00acp_9(Allen)",
                    "str_fol": "\u00acknows_first_aid(Allen)",
                    "negation": true
                },
                {
                    "id": 1,
                    "subject": "Allen",
                    "text": "Allen does not stay safe.",
                    "fol": "\u00acp_1(Allen)",
                    "str_fol": "\u00acstays_safe(Allen)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "If Allen is either skilled or knows first aid (but not both), then he stays safe.",
                    "fol": "(p_8(Allen) \u2295 p_9(Allen)) \u2192 p_1(Allen)",
                    "str_fol": "(skilled(Allen) \u2295 knows_first_aid(Allen)) \u2192 stays_safe(Allen)"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Allen",
                "text": "Allen is not skilled.",
                "fol": "\u00acp_8(Allen)",
                "str_fol": "\u00acskilled(Allen)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 0,
                    "subject": "Allen",
                    "text": "Allen is not adventurous.",
                    "fol": "\u00acp_0(Allen)",
                    "str_fol": "\u00acis_adventurous(Allen)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "Allen is either adventurous or an outdoorsman, but not both.",
                    "fol": "p_0(Allen) \u2295 p_7(Allen)",
                    "str_fol": "is_adventurous(Allen) \u2295 outdoorsman(Allen)"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Allen",
                "text": "Allen is an outdoorsman.",
                "fol": "p_7(Allen)",
                "str_fol": "outdoorsman(Allen)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 9,
                    "subject": "Allen",
                    "text": "Allen is an outdoorsman.",
                    "fol": "p_7(Allen)",
                    "str_fol": "outdoorsman(Allen)",
                    "negation": false
                },
                {
                    "id": 8,
                    "subject": "Allen",
                    "text": "Allen is not skilled.",
                    "fol": "\u00acp_8(Allen)",
                    "str_fol": "\u00acskilled(Allen)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "If Allen is an outdoorsman, then he is either skilled or prepared, but not both.",
                    "fol": "p_7(Allen) \u2192 (p_8(Allen) \u2295 p_6(Allen))",
                    "str_fol": "outdoorsman(Allen) \u2192 (skilled(Allen) \u2295 prepared(Allen))"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Allen",
                "text": "Allen is prepared.",
                "fol": "p_6(Allen)",
                "str_fol": "prepared(Allen)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 10,
                    "subject": "Allen",
                    "text": "Allen is prepared.",
                    "fol": "p_6(Allen)",
                    "str_fol": "prepared(Allen)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "Allen is either experienced or prepared (or both).",
                    "fol": "p_5(Allen) \u2228 p_6(Allen)",
                    "str_fol": "experienced(Allen) \u2228 prepared(Allen)"
                }
            ],
            "conclusion": null
        }
    ],
    "proof_trace": null,
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "UNCERTAIN",
            "Edited Assumptions": "p_3(Allen)\np_4(Allen)\np_2(Allen)\n\u00acp_1(Allen)\n\u00acp_0(Allen)\np_3(Allen) \u2192 (p_11(Allen) \u2295 p_4(Allen))\np_2(Allen) \u2192 (p_11(Allen) \u2295 p_10(Allen))\np_10(Allen) \u2295 p_9(Allen)\n(p_8(Allen) \u2295 p_9(Allen)) \u2192 p_1(Allen)\np_0(Allen) \u2295 p_7(Allen)\np_7(Allen) \u2192 (p_8(Allen) \u2295 p_6(Allen))\np_5(Allen) \u2228 p_6(Allen)",
            "Initial Goal": "p_5(Allen)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_3(Allen)",
                    "p_4(Allen)",
                    "p_2(Allen)",
                    "-p_1(Allen)",
                    "-p_0(Allen)",
                    "p_3(Allen) -> (-(p_11(Allen) <-> p_4(Allen)))",
                    "p_2(Allen) -> (-(p_11(Allen) <-> p_10(Allen)))",
                    "-(p_10(Allen) <-> p_9(Allen))",
                    "(-(p_8(Allen) <-> p_9(Allen))) -> p_1(Allen)",
                    "-(p_0(Allen) <-> p_7(Allen))",
                    "p_7(Allen) -> (-(p_8(Allen) <-> p_6(Allen)))",
                    "p_5(Allen) | p_6(Allen)",
                    "p_6(Allen) -> p_5(Allen)"
                ],
                "formulas(goals)": [
                    "p_5(Allen)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "p_6(Allen) \u2192 p_5(Allen)"
                ]
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_3(Allen)\np_4(Allen)\np_2(Allen)\n\u00acp_1(Allen)\n\u00acp_0(Allen)\np_3(Allen) \u2192 (p_11(Allen) \u2295 p_4(Allen))\np_2(Allen) \u2192 (p_11(Allen) \u2295 p_10(Allen))\np_10(Allen) \u2295 p_9(Allen)\n(p_8(Allen) \u2295 p_9(Allen)) \u2192 p_1(Allen)\np_0(Allen) \u2295 p_7(Allen)\np_7(Allen) \u2192 ((p_8(Allen) \u2228 p_6(Allen)) \u2227 (\u00acp_8(Allen) \u2228 \u00acp_6(Allen)))\np_5(Allen) \u2228 p_6(Allen)\np_5(Allen)\np_11(Allen) \u2192 p_5(Allen)",
            "Initial Goal": "p_5(Allen)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_3(Allen)",
                    "p_4(Allen)",
                    "p_2(Allen)",
                    "-p_1(Allen)",
                    "-p_0(Allen)",
                    "p_3(Allen) -> (-(p_11(Allen) <-> p_4(Allen)))",
                    "p_2(Allen) -> (-(p_11(Allen) <-> p_10(Allen)))",
                    "-(p_10(Allen) <-> p_9(Allen))",
                    "(-(p_8(Allen) <-> p_9(Allen))) -> p_1(Allen)",
                    "-(p_0(Allen) <-> p_7(Allen))",
                    "p_7(Allen) -> ((p_8(Allen) | p_6(Allen)) & (-(p_8(Allen)) | -(p_6(Allen))))",
                    "p_5(Allen) | p_6(Allen)",
                    "p_5(Allen)",
                    "p_11(Allen) -> p_5(Allen)"
                ],
                "formulas(goals)": [
                    "p_5(Allen)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_7(Allen) \u2192 (p_8(Allen) \u2295 p_6(Allen))"
                ],
                "added_facts": [
                    "p_5(Allen)"
                ],
                "added_rules": [
                    "p_11(Allen) \u2192 p_5(Allen)",
                    "p_7(Allen) \u2192 ((p_8(Allen) \u2228 p_6(Allen)) \u2227 (\u00acp_8(Allen) \u2228 \u00acp_6(Allen)))"
                ]
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_3(Allen)\np_4(Allen)\np_2(Allen)\n\u00acp_1(Allen)\n\u00acp_0(Allen)\np_3(Allen) \u2192 (p_11(Allen) \u2295 p_4(Allen))\np_2(Allen) \u2192 (p_11(Allen) \u2295 p_10(Allen))\np_10(Allen) \u2295 p_9(Allen)\n(p_8(Allen) \u2295 p_9(Allen)) \u2192 p_1(Allen)\np_0(Allen) \u2295 p_7(Allen)\np_7(Allen) \u2192 ((p_8(Allen) \u2228 p_6(Allen)) \u2227 (\u00acp_8(Allen) \u2228 \u00acp_6(Allen)))\np_5(Allen) \u2228 p_6(Allen)\np_5(Allen)\np_11(Allen) \u2192 p_5(Allen)\np_7(Allen)\np_8(Allen) \u2295 p_6(Allen)",
            "Initial Goal": "p_5(Allen)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_3(Allen)",
                    "p_4(Allen)",
                    "p_2(Allen)",
                    "-p_1(Allen)",
                    "-p_0(Allen)",
                    "p_3(Allen) -> -(p_11(Allen) <-> p_4(Allen))",
                    "p_2(Allen) -> -(p_11(Allen) <-> p_10(Allen))",
                    "-(p_10(Allen) <-> p_9(Allen))",
                    "(-(p_8(Allen) <-> p_9(Allen))) -> p_1(Allen)",
                    "-(p_0(Allen) <-> p_7(Allen))",
                    "p_7(Allen) -> ((p_8(Allen) | p_6(Allen)) & (-p_8(Allen) | -p_6(Allen)))",
                    "p_5(Allen) | p_6(Allen)",
                    "p_5(Allen)",
                    "p_11(Allen) -> p_5(Allen)",
                    "p_7(Allen)",
                    "-(p_8(Allen) <-> p_6(Allen))"
                ],
                "formulas(goals)": [
                    "p_5(Allen)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_7(Allen)",
                    "p_8(Allen) \u2295 p_6(Allen)"
                ],
                "added_rules": []
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_3(Allen)\np_4(Allen)\np_2(Allen)\n\u00acp_1(Allen)\n\u00acp_0(Allen)\np_3(Allen) \u2192 (p_11(Allen) \u2295 p_4(Allen))\np_2(Allen) \u2192 (p_11(Allen) \u2295 p_10(Allen))\np_10(Allen) \u2194 \u00acp_9(Allen)\n(p_8(Allen) \u2194 \u00acp_9(Allen)) \u2192 p_1(Allen)\np_0(Allen) \u2295 p_7(Allen)\np_7(Allen) \u2192 ((p_8(Allen) \u2228 p_6(Allen)) \u2227 (\u00acp_8(Allen) \u2228 \u00acp_6(Allen)))\np_5(Allen) \u2228 p_6(Allen)\np_5(Allen)\np_11(Allen) \u2192 p_5(Allen)\n\u00acp_5(Allen) \u2192 \u00acp_11(Allen)\np_7(Allen)\np_8(Allen) \u2295 p_6(Allen)",
            "Initial Goal": "p_5(Allen)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_3(Allen)",
                    "p_4(Allen)",
                    "p_2(Allen)",
                    "-p_1(Allen)",
                    "-p_0(Allen)",
                    "p_3(Allen) -> (-(p_11(Allen) <-> p_4(Allen)))",
                    "p_2(Allen) -> (-(p_11(Allen) <-> p_10(Allen)))",
                    "p_10(Allen) <-> -p_9(Allen)",
                    "(p_8(Allen) <-> -p_9(Allen)) -> p_1(Allen)",
                    "-(p_0(Allen) <-> p_7(Allen))",
                    "p_7(Allen) -> ((p_8(Allen) | p_6(Allen)) & (-p_8(Allen) | -p_6(Allen)))",
                    "p_5(Allen) | p_6(Allen)",
                    "p_5(Allen)",
                    "p_11(Allen) -> p_5(Allen)",
                    "-p_5(Allen) -> -p_11(Allen)",
                    "p_7(Allen)",
                    "-(p_8(Allen) <-> p_6(Allen))"
                ],
                "formulas(goals)": [
                    "p_5(Allen)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "\u00acp_5(Allen) \u2192 \u00acp_11(Allen)"
                ]
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_3(Allen)\np_4(Allen)\np_2(Allen)\n\u00acp_1(Allen)\n\u00acp_0(Allen)\np_3(Allen) \u2192 (p_11(Allen) \u2295 p_4(Allen))\np_2(Allen) \u2192 (p_11(Allen) \u2295 p_10(Allen))\np_10(Allen) \u2194 \u00acp_9(Allen)\n(p_8(Allen) \u2194 \u00acp_9(Allen)) \u2192 p_1(Allen)\np_0(Allen) \u2295 p_7(Allen)\n(\u00acp_7(Allen) \u2228 (p_8(Allen) \u2228 p_6(Allen))) \u2227 (\u00acp_7(Allen) \u2228 (\u00acp_8(Allen) \u2228 \u00acp_6(Allen)))\np_5(Allen) \u2228 p_6(Allen)\np_5(Allen)\np_11(Allen) \u2192 p_5(Allen)\n\u00acp_5(Allen) \u2192 \u00acp_11(Allen)\np_7(Allen)\np_8(Allen) \u2295 p_6(Allen)\np_5(Allen) \u2228 \u00acp_4(Allen)",
            "Initial Goal": "p_5(Allen)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_3(Allen)",
                    "p_4(Allen)",
                    "p_2(Allen)",
                    "-p_1(Allen)",
                    "-p_0(Allen)",
                    "p_3(Allen) -> (-(p_11(Allen) <-> p_4(Allen)))",
                    "p_2(Allen) -> (-(p_11(Allen) <-> p_10(Allen)))",
                    "p_10(Allen) <-> -p_9(Allen)",
                    "(p_8(Allen) <-> -p_9(Allen)) -> p_1(Allen)",
                    "-(p_0(Allen) <-> p_7(Allen))",
                    "(-p_7(Allen) | (p_8(Allen) | p_6(Allen))) & (-p_7(Allen) | (-p_8(Allen) | -p_6(Allen)))",
                    "p_5(Allen) | p_6(Allen)",
                    "p_5(Allen)",
                    "p_11(Allen) -> p_5(Allen)",
                    "-p_5(Allen) -> -p_11(Allen)",
                    "p_7(Allen)",
                    "-(p_8(Allen) <-> p_6(Allen))",
                    "p_5(Allen) | -p_4(Allen)"
                ],
                "formulas(goals)": [
                    "p_5(Allen)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_5(Allen) \u2228 \u00acp_4(Allen)"
                ],
                "added_rules": [
                    "(\u00acp_7(Allen) \u2228 (p_8(Allen) \u2228 p_6(Allen))) \u2227 (\u00acp_7(Allen) \u2228 (\u00acp_8(Allen) \u2228 \u00acp_6(Allen)))"
                ]
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_3(Allen)\np_4(Allen)\np_2(Allen)\n\u00acp_1(Allen)\n\u00acp_0(Allen)\np_3(Allen) \u2192 (p_11(Allen) \u2295 p_4(Allen))\np_2(Allen) \u2192 (p_11(Allen) \u2295 p_10(Allen))\np_10(Allen) \u2194 \u00acp_9(Allen)\n(p_8(Allen) \u2194 \u00acp_9(Allen)) \u2192 p_1(Allen)\np_0(Allen) \u2295 p_7(Allen)\n(\u00acp_7(Allen) \u2228 (p_8(Allen) \u2228 p_6(Allen))) \u2227 (\u00acp_7(Allen) \u2228 (\u00acp_8(Allen) \u2228 \u00acp_6(Allen)))\np_5(Allen) \u2228 p_6(Allen)\np_11(Allen) \u2192 p_5(Allen)\n\u00acp_5(Allen) \u2192 \u00acp_11(Allen)\np_7(Allen)\np_8(Allen) \u2295 p_6(Allen)\np_4(Allen) \u2192 \u00acp_5(Allen)",
            "Initial Goal": "p_5(Allen)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_3(Allen)",
                    "p_4(Allen)",
                    "p_2(Allen)",
                    "-p_1(Allen)",
                    "-p_0(Allen)",
                    "p_3(Allen) -> (-(p_11(Allen) <-> p_4(Allen)))",
                    "p_2(Allen) -> (-(p_11(Allen) <-> p_10(Allen)))",
                    "p_10(Allen) <-> -p_9(Allen)",
                    "(p_8(Allen) <-> -p_9(Allen)) -> p_1(Allen)",
                    "-(p_0(Allen) <-> p_7(Allen))",
                    "(-p_7(Allen) | (p_8(Allen) | p_6(Allen))) & (-p_7(Allen) | (-p_8(Allen) | -p_6(Allen)))",
                    "p_5(Allen) | p_6(Allen)",
                    "p_11(Allen) -> p_5(Allen)",
                    "-p_5(Allen) -> -p_11(Allen)",
                    "p_7(Allen)",
                    "-(p_8(Allen) <-> p_6(Allen))",
                    "p_4(Allen) -> -p_5(Allen)"
                ],
                "formulas(goals)": [
                    "-p_5(Allen)"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "p_5(Allen)"
                ],
                "removed_rules": [
                    "p_5(Allen) \u2228 \u00acp_4(Allen)"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_4(Allen) \u2192 \u00acp_5(Allen)"
                ]
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_3(Allen)\np_4(Allen)\np_2(Allen)\n\u00acp_1(Allen)\n\u00acp_0(Allen)\np_3(Allen) \u2192 ((p_11(Allen) \u2228 p_4(Allen)) \u2227 (\u00acp_11(Allen) \u2228 \u00acp_4(Allen)))\np_2(Allen) \u2192 ((p_11(Allen) \u2228 p_10(Allen)) \u2227 (\u00acp_11(Allen) \u2228 \u00acp_10(Allen)))\np_10(Allen) \u2194 \u00acp_9(Allen)\n(p_8(Allen) \u2194 \u00acp_9(Allen)) \u2192 p_1(Allen)\np_0(Allen) \u2295 p_7(Allen)\n(\u00acp_7(Allen) \u2228 (p_8(Allen) \u2228 p_6(Allen))) \u2227 (\u00acp_7(Allen) \u2228 (\u00acp_8(Allen) \u2228 \u00acp_6(Allen)))\np_5(Allen) \u2228 p_6(Allen)\np_11(Allen) \u2192 p_5(Allen)\n\u00acp_5(Allen) \u2192 \u00acp_11(Allen)\np_7(Allen)\np_8(Allen) \u2295 p_6(Allen)\np_4(Allen) \u2192 \u00acp_5(Allen)\n\u00acp_11(Allen)",
            "Initial Goal": "p_5(Allen)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_3(Allen)",
                    "p_4(Allen)",
                    "p_2(Allen)",
                    "-p_1(Allen)",
                    "-p_0(Allen)",
                    "p_3(Allen) -> ((p_11(Allen) | p_4(Allen)) & (-p_11(Allen) | -p_4(Allen)))",
                    "p_2(Allen) -> ((p_11(Allen) | p_10(Allen)) & (-p_11(Allen) | -p_10(Allen)))",
                    "p_10(Allen) <-> -p_9(Allen)",
                    "(p_8(Allen) <-> -p_9(Allen)) -> p_1(Allen)",
                    "-(p_0(Allen) <-> p_7(Allen))",
                    "(-p_7(Allen) | (p_8(Allen) | p_6(Allen))) & (-p_7(Allen) | (-p_8(Allen) | -p_6(Allen)))",
                    "p_5(Allen) | p_6(Allen)",
                    "p_11(Allen) -> p_5(Allen)",
                    "-p_5(Allen) -> -p_11(Allen)",
                    "p_7(Allen)",
                    "-(p_8(Allen) <-> p_6(Allen))",
                    "p_4(Allen) -> -p_5(Allen)",
                    "-p_11(Allen)"
                ],
                "formulas(goals)": [
                    "-p_5(Allen)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "\u00acp_11(Allen)"
                ],
                "added_rules": [
                    "p_3(Allen) \u2192 ((p_11(Allen) \u2228 p_4(Allen)) \u2227 (\u00acp_11(Allen) \u2228 \u00acp_4(Allen)))",
                    "p_2(Allen) \u2192 ((p_11(Allen) \u2228 p_10(Allen)) \u2227 (\u00acp_11(Allen) \u2228 \u00acp_10(Allen)))"
                ]
            }
        }
    ]
}