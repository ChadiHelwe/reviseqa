{
    "background_story": "Axton was a 19th-century sailor who spent his life at sea. During his voyages, he became fascinated with the whales he encountered, particularly the massive bowhead whales that roamed the Arctic waters. Axton noticed the unique properties of whalebone, also known as baleen, which the whales used to filter tiny crustaceans from the water. He saw an opportunity to use this versatile material in his community, where it could be used in corsets, umbrellas, and even furniture. Axton established a thriving trade, harvesting whalebone in a sustainable manner and creating a new industry that brought prosperity to his coastal town. His respect for the whales and their habitat ensured that his business practices were environmentally conscious, earning him the respect of his peers and the whales that had inspired his endeavors.",
    "predicates": [
        {
            "id": 0,
            "name": "harvest_whalebone"
        },
        {
            "id": 1,
            "name": "helps_community"
        },
        {
            "id": 2,
            "name": "succeeds_business"
        },
        {
            "id": 3,
            "name": "create_jobs"
        },
        {
            "id": 4,
            "name": "support_local"
        },
        {
            "id": 5,
            "name": "loves_animals"
        },
        {
            "id": 6,
            "name": "thrive_professionally"
        },
        {
            "id": 7,
            "name": "use_sustainably"
        },
        {
            "id": 8,
            "name": "prosper"
        },
        {
            "id": 9,
            "name": "manage_resources"
        },
        {
            "id": 10,
            "name": "conserve_nature"
        },
        {
            "id": 11,
            "name": "respect_environment"
        },
        {
            "id": 12,
            "name": "protect_wildlife"
        },
        {
            "id": 13,
            "name": "exploit_sea"
        },
        {
            "id": 14,
            "name": "preserve_oceans"
        },
        {
            "id": 15,
            "name": "cares_depthly"
        },
        {
            "id": 16,
            "name": "values_ecology"
        },
        {
            "id": 17,
            "name": "plans_ahead"
        },
        {
            "id": 18,
            "name": "values_biodiversity"
        },
        {
            "id": 19,
            "name": "reduces_waste"
        },
        {
            "id": 20,
            "name": "is_ecoaware"
        },
        {
            "id": 21,
            "name": "reduce_waste"
        },
        {
            "id": 22,
            "name": "seeks_profit"
        },
        {
            "id": 23,
            "name": "ignores_laws"
        },
        {
            "id": 24,
            "name": "save_marine"
        },
        {
            "id": 25,
            "name": "is_ecofriendly"
        },
        {
            "id": 26,
            "name": "values_wildlife"
        },
        {
            "id": 27,
            "name": "innovate_products"
        }
    ],
    "subject_name": "Axton",
    "subject_category": "human",
    "keyword": "whalebone",
    "all_facts": [
        {
            "id": 0,
            "subject": "Axton",
            "text": "Axton does not harvest whalebone.",
            "fol": "\u00acp_0(Axton)",
            "str_fol": "\u00acharvest_whalebone(Axton)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Axton",
            "text": "Axton does not help his community.",
            "fol": "\u00acp_1(Axton)",
            "str_fol": "\u00achelps_community(Axton)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Axton",
            "text": "Axton does not succeed in business.",
            "fol": "\u00acp_2(Axton)",
            "str_fol": "\u00acsucceeds_business(Axton)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Axton",
            "text": "Axton does not create jobs.",
            "fol": "\u00acp_3(Axton)",
            "str_fol": "\u00accreate_jobs(Axton)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Axton",
            "text": "Axton supports his local community.",
            "fol": "p_4(Axton)",
            "str_fol": "support_local(Axton)",
            "negation": false
        },
        {
            "id": 5,
            "subject": "Axton",
            "text": "Axton loves animals.",
            "fol": "p_5(Axton)",
            "str_fol": "loves_animals(Axton)",
            "negation": false
        },
        {
            "id": 6,
            "subject": "Axton",
            "text": "Axton does not thrive professionally.",
            "fol": "\u00acp_6(Axton)",
            "str_fol": "\u00acthrive_professionally(Axton)",
            "negation": true
        },
        {
            "id": 7,
            "subject": "Axton",
            "text": "Axton cares deeply.",
            "fol": "p_15(Axton)",
            "str_fol": "cares_depthly(Axton)",
            "negation": false
        },
        {
            "id": 8,
            "subject": "Axton",
            "text": "Axton does not preserve oceans.",
            "fol": "\u00acp_14(Axton)",
            "str_fol": "\u00acpreserve_oceans(Axton)",
            "negation": true
        },
        {
            "id": 9,
            "subject": "Axton",
            "text": "Axton exploits the sea.",
            "fol": "p_13(Axton)",
            "str_fol": "exploit_sea(Axton)",
            "negation": false
        },
        {
            "id": 10,
            "subject": "Axton",
            "text": "Axton will conserve nature.",
            "fol": "p_10(Axton)",
            "str_fol": "conserve_nature(Axton)",
            "negation": false
        },
        {
            "id": 11,
            "subject": "Axton",
            "text": "Axton does not protect wildlife.",
            "fol": "\u00acp_12(Axton)",
            "str_fol": "\u00acprotect_wildlife(Axton)",
            "negation": true
        },
        {
            "id": 12,
            "subject": "Axton",
            "text": "Axton does not manage resources.",
            "fol": "\u00acp_9(Axton)",
            "str_fol": "\u00acmanage_resources(Axton)",
            "negation": true
        },
        {
            "id": 13,
            "subject": "Axton",
            "text": "Axton will prosper.",
            "fol": "p_8(Axton)",
            "str_fol": "prosper(Axton)",
            "negation": false
        }
    ],
    "context_facts": [
        {
            "id": 5,
            "subject": "Axton",
            "text": "Axton loves animals.",
            "fol": "p_5(Axton)",
            "str_fol": "loves_animals(Axton)",
            "negation": false
        },
        {
            "id": 6,
            "subject": "Axton",
            "text": "Axton does not thrive professionally.",
            "fol": "\u00acp_6(Axton)",
            "str_fol": "\u00acthrive_professionally(Axton)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Axton",
            "text": "Axton does not create jobs.",
            "fol": "\u00acp_3(Axton)",
            "str_fol": "\u00accreate_jobs(Axton)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Axton",
            "text": "Axton supports his local community.",
            "fol": "p_4(Axton)",
            "str_fol": "support_local(Axton)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Axton",
            "text": "Axton does not succeed in business.",
            "fol": "\u00acp_2(Axton)",
            "str_fol": "\u00acsucceeds_business(Axton)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Axton",
            "text": "Axton does not help his community.",
            "fol": "\u00acp_1(Axton)",
            "str_fol": "\u00achelps_community(Axton)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Axton",
            "text": "Axton does not harvest whalebone.",
            "fol": "\u00acp_0(Axton)",
            "str_fol": "\u00acharvest_whalebone(Axton)",
            "negation": true
        }
    ],
    "context_rules": [
        {
            "id": 8,
            "text": "If Axton either loves animals or cares deeply, then he thrives professionally.",
            "fol": "(p_5(Axton) \u2295 p_15(Axton)) \u2192 p_6(Axton)",
            "str_fol": "(loves_animals(Axton) \u2295 cares_depthly(Axton)) \u2192 thrive_professionally(Axton)"
        },
        {
            "id": 7,
            "text": "If Axton respects the environment, then he either creates jobs or supports his local community.",
            "fol": "p_11(Axton) \u2192 (p_3(Axton) \u2228 p_4(Axton))",
            "str_fol": "respect_environment(Axton) \u2192 (create_jobs(Axton) \u2228 support_local(Axton))"
        },
        {
            "id": 6,
            "text": "If Axton cares deeply and preserves oceans, then he succeeds in business.",
            "fol": "(p_15(Axton) \u2227 p_14(Axton)) \u2192 p_2(Axton)",
            "str_fol": "(cares_depthly(Axton) \u2227 preserve_oceans(Axton)) \u2192 succeeds_business(Axton)"
        },
        {
            "id": 5,
            "text": "Axton either exploits the sea or preserves oceans.",
            "fol": "p_13(Axton) \u2228 p_14(Axton)",
            "str_fol": "exploit_sea(Axton) \u2228 preserve_oceans(Axton)"
        },
        {
            "id": 4,
            "text": "Axton either conserves nature or helps his community.",
            "fol": "p_10(Axton) \u2228 p_1(Axton)",
            "str_fol": "conserve_nature(Axton) \u2228 helps_community(Axton)"
        },
        {
            "id": 3,
            "text": "Either Axton protects wildlife or he exploits the sea, but he does not do both.",
            "fol": "p_12(Axton) \u2295 p_13(Axton)",
            "str_fol": "protect_wildlife(Axton) \u2295 exploit_sea(Axton)"
        },
        {
            "id": 2,
            "text": "Any person who respects the environment or manages resources will protect wildlife.",
            "fol": "\u2200x ((p_11(x) \u2228 p_9(x)) \u2192 p_12(x))",
            "str_fol": "\u2200x ((respect_environment(x) \u2228 manage_resources(x)) \u2192 protect_wildlife(x))"
        },
        {
            "id": 1,
            "text": "Anyone who manages resources or uses sustainably will conserve nature.",
            "fol": "\u2200x ((p_9(x) \u2228 p_7(x)) \u2192 p_10(x))",
            "str_fol": "\u2200x ((manage_resources(x) \u2228 use_sustainably(x)) \u2192 conserve_nature(x))"
        },
        {
            "id": 0,
            "text": "If Axton harvests whalebone and uses it sustainably, then he will prosper.",
            "fol": "(p_0(Axton) \u2227 p_7(Axton)) \u2192 p_8(Axton)",
            "str_fol": "(harvest_whalebone(Axton) \u2227 use_sustainably(Axton)) \u2192 prosper(Axton)"
        }
    ],
    "context": [
        {
            "id": 5,
            "subject": "Axton",
            "text": "Axton loves animals.",
            "fol": "p_5(Axton)",
            "str_fol": "loves_animals(Axton)",
            "negation": false
        },
        {
            "id": 6,
            "subject": "Axton",
            "text": "Axton does not thrive professionally.",
            "fol": "\u00acp_6(Axton)",
            "str_fol": "\u00acthrive_professionally(Axton)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Axton",
            "text": "Axton does not create jobs.",
            "fol": "\u00acp_3(Axton)",
            "str_fol": "\u00accreate_jobs(Axton)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Axton",
            "text": "Axton supports his local community.",
            "fol": "p_4(Axton)",
            "str_fol": "support_local(Axton)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Axton",
            "text": "Axton does not succeed in business.",
            "fol": "\u00acp_2(Axton)",
            "str_fol": "\u00acsucceeds_business(Axton)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Axton",
            "text": "Axton does not help his community.",
            "fol": "\u00acp_1(Axton)",
            "str_fol": "\u00achelps_community(Axton)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Axton",
            "text": "Axton does not harvest whalebone.",
            "fol": "\u00acp_0(Axton)",
            "str_fol": "\u00acharvest_whalebone(Axton)",
            "negation": true
        },
        {
            "id": 8,
            "text": "If Axton either loves animals or cares deeply, then he thrives professionally.",
            "fol": "(p_5(Axton) \u2295 p_15(Axton)) \u2192 p_6(Axton)",
            "str_fol": "(loves_animals(Axton) \u2295 cares_depthly(Axton)) \u2192 thrive_professionally(Axton)"
        },
        {
            "id": 7,
            "text": "If Axton respects the environment, then he either creates jobs or supports his local community.",
            "fol": "p_11(Axton) \u2192 (p_3(Axton) \u2228 p_4(Axton))",
            "str_fol": "respect_environment(Axton) \u2192 (create_jobs(Axton) \u2228 support_local(Axton))"
        },
        {
            "id": 6,
            "text": "If Axton cares deeply and preserves oceans, then he succeeds in business.",
            "fol": "(p_15(Axton) \u2227 p_14(Axton)) \u2192 p_2(Axton)",
            "str_fol": "(cares_depthly(Axton) \u2227 preserve_oceans(Axton)) \u2192 succeeds_business(Axton)"
        },
        {
            "id": 5,
            "text": "Axton either exploits the sea or preserves oceans.",
            "fol": "p_13(Axton) \u2228 p_14(Axton)",
            "str_fol": "exploit_sea(Axton) \u2228 preserve_oceans(Axton)"
        },
        {
            "id": 4,
            "text": "Axton either conserves nature or helps his community.",
            "fol": "p_10(Axton) \u2228 p_1(Axton)",
            "str_fol": "conserve_nature(Axton) \u2228 helps_community(Axton)"
        },
        {
            "id": 3,
            "text": "Either Axton protects wildlife or he exploits the sea, but he does not do both.",
            "fol": "p_12(Axton) \u2295 p_13(Axton)",
            "str_fol": "protect_wildlife(Axton) \u2295 exploit_sea(Axton)"
        },
        {
            "id": 2,
            "text": "Any person who respects the environment or manages resources will protect wildlife.",
            "fol": "\u2200x ((p_11(x) \u2228 p_9(x)) \u2192 p_12(x))",
            "str_fol": "\u2200x ((respect_environment(x) \u2228 manage_resources(x)) \u2192 protect_wildlife(x))"
        },
        {
            "id": 1,
            "text": "Anyone who manages resources or uses sustainably will conserve nature.",
            "fol": "\u2200x ((p_9(x) \u2228 p_7(x)) \u2192 p_10(x))",
            "str_fol": "\u2200x ((manage_resources(x) \u2228 use_sustainably(x)) \u2192 conserve_nature(x))"
        },
        {
            "id": 0,
            "text": "If Axton harvests whalebone and uses it sustainably, then he will prosper.",
            "fol": "(p_0(Axton) \u2227 p_7(Axton)) \u2192 p_8(Axton)",
            "str_fol": "(harvest_whalebone(Axton) \u2227 use_sustainably(Axton)) \u2192 prosper(Axton)"
        }
    ],
    "context_fol": "p_5(Axton)\n\u00acp_6(Axton)\n\u00acp_3(Axton)\np_4(Axton)\n\u00acp_2(Axton)\n\u00acp_1(Axton)\n\u00acp_0(Axton)\n(p_5(Axton) \u2295 p_15(Axton)) \u2192 p_6(Axton)\np_11(Axton) \u2192 (p_3(Axton) \u2228 p_4(Axton))\n(p_15(Axton) \u2227 p_14(Axton)) \u2192 p_2(Axton)\np_13(Axton) \u2228 p_14(Axton)\np_10(Axton) \u2228 p_1(Axton)\np_12(Axton) \u2295 p_13(Axton)\n\u2200x ((p_11(x) \u2228 p_9(x)) \u2192 p_12(x))\n\u2200x ((p_9(x) \u2228 p_7(x)) \u2192 p_10(x))\n(p_0(Axton) \u2227 p_7(Axton)) \u2192 p_8(Axton)",
    "conclusion": {
        "id": 13,
        "subject": "Axton",
        "text": "Axton will prosper.",
        "fol": "p_8(Axton)",
        "str_fol": "prosper(Axton)",
        "negation": false
    },
    "initial_answer": "Uncertain",
    "initial_goal": "p_8(Axton)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 5,
                    "subject": "Axton",
                    "text": "Axton loves animals.",
                    "fol": "p_5(Axton)",
                    "str_fol": "loves_animals(Axton)",
                    "negation": false
                },
                {
                    "id": 6,
                    "subject": "Axton",
                    "text": "Axton does not thrive professionally.",
                    "fol": "\u00acp_6(Axton)",
                    "str_fol": "\u00acthrive_professionally(Axton)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 8,
                    "text": "If Axton either loves animals or cares deeply, then he thrives professionally.",
                    "fol": "(p_5(Axton) \u2295 p_15(Axton)) \u2192 p_6(Axton)",
                    "str_fol": "(loves_animals(Axton) \u2295 cares_depthly(Axton)) \u2192 thrive_professionally(Axton)"
                }
            ],
            "conclusion": {
                "id": 7,
                "subject": "Axton",
                "text": "Axton cares deeply.",
                "fol": "p_15(Axton)",
                "str_fol": "cares_depthly(Axton)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 3,
                    "subject": "Axton",
                    "text": "Axton does not create jobs.",
                    "fol": "\u00acp_3(Axton)",
                    "str_fol": "\u00accreate_jobs(Axton)",
                    "negation": true
                },
                {
                    "id": 4,
                    "subject": "Axton",
                    "text": "Axton supports his local community.",
                    "fol": "p_4(Axton)",
                    "str_fol": "support_local(Axton)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 7,
                    "text": "If Axton respects the environment, then he either creates jobs or supports his local community.",
                    "fol": "p_11(Axton) \u2192 (p_3(Axton) \u2228 p_4(Axton))",
                    "str_fol": "respect_environment(Axton) \u2192 (create_jobs(Axton) \u2228 support_local(Axton))"
                }
            ],
            "conclusion": null
        },
        {
            "facts": [
                {
                    "id": 7,
                    "subject": "Axton",
                    "text": "Axton cares deeply.",
                    "fol": "p_15(Axton)",
                    "str_fol": "cares_depthly(Axton)",
                    "negation": false
                },
                {
                    "id": 2,
                    "subject": "Axton",
                    "text": "Axton does not succeed in business.",
                    "fol": "\u00acp_2(Axton)",
                    "str_fol": "\u00acsucceeds_business(Axton)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 6,
                    "text": "If Axton cares deeply and preserves oceans, then he succeeds in business.",
                    "fol": "(p_15(Axton) \u2227 p_14(Axton)) \u2192 p_2(Axton)",
                    "str_fol": "(cares_depthly(Axton) \u2227 preserve_oceans(Axton)) \u2192 succeeds_business(Axton)"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Axton",
                "text": "Axton does not preserve oceans.",
                "fol": "\u00acp_14(Axton)",
                "str_fol": "\u00acpreserve_oceans(Axton)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 8,
                    "subject": "Axton",
                    "text": "Axton does not preserve oceans.",
                    "fol": "\u00acp_14(Axton)",
                    "str_fol": "\u00acpreserve_oceans(Axton)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "Axton either exploits the sea or preserves oceans.",
                    "fol": "p_13(Axton) \u2228 p_14(Axton)",
                    "str_fol": "exploit_sea(Axton) \u2228 preserve_oceans(Axton)"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Axton",
                "text": "Axton exploits the sea.",
                "fol": "p_13(Axton)",
                "str_fol": "exploit_sea(Axton)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 1,
                    "subject": "Axton",
                    "text": "Axton does not help his community.",
                    "fol": "\u00acp_1(Axton)",
                    "str_fol": "\u00achelps_community(Axton)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "Axton either conserves nature or helps his community.",
                    "fol": "p_10(Axton) \u2228 p_1(Axton)",
                    "str_fol": "conserve_nature(Axton) \u2228 helps_community(Axton)"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Axton",
                "text": "Axton will conserve nature.",
                "fol": "p_10(Axton)",
                "str_fol": "conserve_nature(Axton)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 9,
                    "subject": "Axton",
                    "text": "Axton exploits the sea.",
                    "fol": "p_13(Axton)",
                    "str_fol": "exploit_sea(Axton)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "Either Axton protects wildlife or he exploits the sea, but he does not do both.",
                    "fol": "p_12(Axton) \u2295 p_13(Axton)",
                    "str_fol": "protect_wildlife(Axton) \u2295 exploit_sea(Axton)"
                }
            ],
            "conclusion": {
                "id": 11,
                "subject": "Axton",
                "text": "Axton does not protect wildlife.",
                "fol": "\u00acp_12(Axton)",
                "str_fol": "\u00acprotect_wildlife(Axton)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 11,
                    "subject": "Axton",
                    "text": "Axton does not protect wildlife.",
                    "fol": "\u00acp_12(Axton)",
                    "str_fol": "\u00acprotect_wildlife(Axton)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "Any person who respects the environment or manages resources will protect wildlife.",
                    "fol": "\u2200x ((p_11(x) \u2228 p_9(x)) \u2192 p_12(x))",
                    "str_fol": "\u2200x ((respect_environment(x) \u2228 manage_resources(x)) \u2192 protect_wildlife(x))"
                }
            ],
            "conclusion": {
                "id": 12,
                "subject": "Axton",
                "text": "Axton does not manage resources.",
                "fol": "\u00acp_9(Axton)",
                "str_fol": "\u00acmanage_resources(Axton)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 12,
                    "subject": "Axton",
                    "text": "Axton does not manage resources.",
                    "fol": "\u00acp_9(Axton)",
                    "str_fol": "\u00acmanage_resources(Axton)",
                    "negation": true
                },
                {
                    "id": 10,
                    "subject": "Axton",
                    "text": "Axton will conserve nature.",
                    "fol": "p_10(Axton)",
                    "str_fol": "conserve_nature(Axton)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "Anyone who manages resources or uses sustainably will conserve nature.",
                    "fol": "\u2200x ((p_9(x) \u2228 p_7(x)) \u2192 p_10(x))",
                    "str_fol": "\u2200x ((manage_resources(x) \u2228 use_sustainably(x)) \u2192 conserve_nature(x))"
                }
            ],
            "conclusion": null
        },
        {
            "facts": [
                {
                    "id": 0,
                    "subject": "Axton",
                    "text": "Axton does not harvest whalebone.",
                    "fol": "\u00acp_0(Axton)",
                    "str_fol": "\u00acharvest_whalebone(Axton)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "If Axton harvests whalebone and uses it sustainably, then he will prosper.",
                    "fol": "(p_0(Axton) \u2227 p_7(Axton)) \u2192 p_8(Axton)",
                    "str_fol": "(harvest_whalebone(Axton) \u2227 use_sustainably(Axton)) \u2192 prosper(Axton)"
                }
            ],
            "conclusion": null
        }
    ],
    "proof_trace": null,
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "UNCERTAIN",
            "Edited Assumptions": "p_5(Axton)\n\u00acp_6(Axton)\n\u00acp_3(Axton)\np_4(Axton)\n\u00acp_2(Axton)\n\u00acp_1(Axton)\n\u00acp_0(Axton)\n(p_5(Axton) \u2295 p_15(Axton)) \u2192 p_6(Axton)\np_11(Axton) \u2192 (p_3(Axton) \u2228 p_4(Axton))\n(p_15(Axton) \u2227 p_14(Axton)) \u2192 p_2(Axton)\np_13(Axton) \u2228 p_14(Axton)\np_10(Axton) \u2228 p_1(Axton)\np_12(Axton) \u2295 p_13(Axton)\n\u2200x ((p_11(x) \u2228 p_9(x)) \u2192 p_12(x))\n\u2200x ((p_9(x) \u2228 p_7(x)) \u2192 p_10(x))\n(p_0(Axton) \u2227 p_7(Axton)) \u2192 p_8(Axton)",
            "Initial Goal": "p_8(Axton)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Axton).",
                    "-p_6(Axton).",
                    "-p_3(Axton).",
                    "p_4(Axton).",
                    "-p_2(Axton).",
                    "-p_1(Axton).",
                    "-p_0(Axton).",
                    "(-(p_5(Axton) <-> p_15(Axton))) -> p_6(Axton).",
                    "p_11(Axton) -> (p_3(Axton) | p_4(Axton)).",
                    "(p_15(Axton) & p_14(Axton)) -> p_2(Axton).",
                    "p_13(Axton) | p_14(Axton).",
                    "p_10(Axton) | p_1(Axton).",
                    "-(p_12(Axton) <-> p_13(Axton)).",
                    "all x ((p_11(x) | p_9(x)) -> p_12(x)).",
                    "all x ((p_9(x) | p_7(x)) -> p_10(x)).",
                    "(p_0(Axton) & p_7(Axton)) -> p_8(Axton).",
                    "(p_4(Axton) & p_5(Axton)) -> p_8(Axton)."
                ],
                "formulas(goals)": [
                    "p_8(Axton)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "(p_4(Axton) \u2227 p_5(Axton)) \u2192 p_8(Axton)"
                ]
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_5(Axton)\n\u00acp_6(Axton)\n\u00acp_3(Axton)\np_4(Axton)\n\u00acp_2(Axton)\n\u00acp_1(Axton)\n\u00acp_0(Axton)\n(p_5(Axton) \u2295 p_15(Axton)) \u2192 p_6(Axton)\np_11(Axton) \u2192 (p_3(Axton) \u2228 p_4(Axton))\n(p_15(Axton) \u2227 p_14(Axton)) \u2192 p_2(Axton)\np_13(Axton) \u2228 p_14(Axton)\np_10(Axton) \u2228 p_1(Axton)\np_12(Axton) \u2295 p_13(Axton)\n\u2200x ((p_11(x) \u2228 p_9(x)) \u2192 p_12(x))\n\u2200x ((p_9(x) \u2228 p_7(x)) \u2192 p_10(x))\n(p_0(Axton) \u2227 p_7(Axton)) \u2192 p_8(Axton)\n(p_4(Axton) \u2227 \u00acp_3(Axton)) \u2192 \u00ac(p_8(Axton))",
            "Initial Goal": "p_8(Axton)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Axton)",
                    "-p_6(Axton)",
                    "-p_3(Axton)",
                    "p_4(Axton)",
                    "-p_2(Axton)",
                    "-p_1(Axton)",
                    "-p_0(Axton)",
                    "(-(p_5(Axton) <-> p_15(Axton))) -> p_6(Axton)",
                    "p_11(Axton) -> (p_3(Axton) | p_4(Axton))",
                    "(p_15(Axton) & p_14(Axton)) -> p_2(Axton)",
                    "p_13(Axton) | p_14(Axton)",
                    "p_10(Axton) | p_1(Axton)",
                    "-(p_12(Axton) <-> p_13(Axton))",
                    "all x ((p_11(x) | p_9(x)) -> p_12(x))",
                    "all x ((p_9(x) | p_7(x)) -> p_10(x))",
                    "(p_0(Axton) & p_7(Axton)) -> p_8(Axton)",
                    "(p_4(Axton) & -p_3(Axton)) -> -p_8(Axton)"
                ],
                "formulas(goals)": [
                    "-p_8(Axton)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "(p_4(Axton) \u2227 \u00acp_3(Axton)) \u2192 \u00ac(p_8(Axton))"
                ]
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_5(Axton)\n\u00acp_6(Axton)\n\u00acp_3(Axton)\np_4(Axton)\n\u00acp_2(Axton)\n\u00acp_1(Axton)\n\u00acp_0(Axton)\n(p_5(Axton) \u2295 p_15(Axton)) \u2192 p_6(Axton)\np_11(Axton) \u2192 (p_3(Axton) \u2228 p_4(Axton))\n(p_15(Axton) \u2227 p_14(Axton)) \u2192 p_2(Axton)\np_13(Axton) \u2228 p_14(Axton)\np_10(Axton) \u2228 p_1(Axton)\np_12(Axton) \u2295 p_13(Axton)\n\u2200x ((p_11(x) \u2228 p_9(x)) \u2192 p_12(x))\n\u2200x ((p_9(x) \u2228 p_7(x)) \u2192 p_10(x))\n(p_0(Axton) \u2227 p_7(Axton)) \u2192 p_8(Axton)\n(p_4(Axton) \u2227 \u00acp_3(Axton)) \u2192 \u00acp_8(Axton)\np_4(Axton) \u2228 \u00acp_4(Axton)\n\u2200x (p_4(x) \u2192 p_4(x))",
            "Initial Goal": "p_8(Axton)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Axton).",
                    "-p_6(Axton).",
                    "-p_3(Axton).",
                    "p_4(Axton).",
                    "-p_2(Axton).",
                    "-p_1(Axton).",
                    "-p_0(Axton).",
                    "(-(p_5(Axton) <-> p_15(Axton))) -> p_6(Axton).",
                    "p_11(Axton) -> (p_3(Axton) | p_4(Axton)).",
                    "(p_15(Axton) & p_14(Axton)) -> p_2(Axton).",
                    "p_13(Axton) | p_14(Axton).",
                    "p_10(Axton) | p_1(Axton).",
                    "-(p_12(Axton) <-> p_13(Axton)).",
                    "all x ((p_11(x) | p_9(x)) -> p_12(x)).",
                    "all x ((p_9(x) | p_7(x)) -> p_10(x)).",
                    "(p_0(Axton) & p_7(Axton)) -> p_8(Axton).",
                    "(p_4(Axton) & -p_3(Axton)) -> -p_8(Axton).",
                    "p_4(Axton) | -p_4(Axton).",
                    "all x (p_4(x) -> p_4(x))."
                ],
                "formulas(goals)": [
                    "-p_8(Axton)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_4(Axton) \u2228 \u00acp_4(Axton)"
                ],
                "added_rules": [
                    "\u2200x (p_4(x) \u2192 p_4(x))"
                ]
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_5(Axton)\n\u00acp_6(Axton)\n\u00acp_3(Axton)\np_4(Axton)\n\u00acp_2(Axton)\n\u00acp_1(Axton)\n\u00acp_0(Axton)\n((p_5(Axton) \u2228 p_15(Axton)) \u2227 \u00ac(p_5(Axton) \u2227 p_15(Axton))) \u2192 p_6(Axton)\np_11(Axton) \u2192 (p_3(Axton) \u2228 p_4(Axton))\np_11(Axton) \u2192 (p_3(Axton) \u2228 p_4(Axton) \u2228 p_15(Axton))\n(p_15(Axton) \u2227 p_14(Axton)) \u2192 p_2(Axton)\np_15(Axton) \u2192 (p_14(Axton) \u2192 p_2(Axton))\np_13(Axton) \u2228 p_14(Axton)\np_10(Axton) \u2228 p_1(Axton)\np_12(Axton) \u2295 p_13(Axton)\n\u2200x ((p_11(x) \u2228 p_9(x)) \u2192 p_12(x))\n\u2200x ((p_9(x) \u2228 p_7(x)) \u2192 p_10(x))\n(p_0(Axton) \u2227 p_7(Axton)) \u2192 p_8(Axton)\n(p_4(Axton) \u2227 \u00acp_3(Axton)) \u2192 \u00acp_8(Axton)\np_4(Axton) \u2228 \u00acp_4(Axton)\n\u2200x (p_4(x) \u2192 p_4(x))\np_4(Axton) \u2192 (p_4(Axton) \u2228 p_8(Axton))",
            "Initial Goal": "p_8(Axton)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Axton)",
                    "-p_6(Axton)",
                    "-p_3(Axton)",
                    "p_4(Axton)",
                    "-p_2(Axton)",
                    "-p_1(Axton)",
                    "-p_0(Axton)",
                    "((p_5(Axton) | p_15(Axton)) & -(p_5(Axton) & p_15(Axton))) -> p_6(Axton)",
                    "p_11(Axton) -> (p_3(Axton) | p_4(Axton))",
                    "p_11(Axton) -> (p_3(Axton) | p_4(Axton) | p_15(Axton))",
                    "(p_15(Axton) & p_14(Axton)) -> p_2(Axton)",
                    "p_15(Axton) -> (p_14(Axton) -> p_2(Axton))",
                    "p_13(Axton) | p_14(Axton)",
                    "p_10(Axton) | p_1(Axton)",
                    "-(p_12(Axton) <-> p_13(Axton))",
                    "all x ((p_11(x) | p_9(x)) -> p_12(x))",
                    "all x ((p_9(x) | p_7(x)) -> p_10(x))",
                    "(p_0(Axton) & p_7(Axton)) -> p_8(Axton)",
                    "(p_4(Axton) & -p_3(Axton)) -> -p_8(Axton)",
                    "p_4(Axton) | -p_4(Axton)",
                    "all x (p_4(x) -> p_4(x))",
                    "p_4(Axton) -> (p_4(Axton) | p_8(Axton))"
                ],
                "formulas(goals)": [
                    "-p_8(Axton)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "p_11(Axton) \u2192 (p_3(Axton) \u2228 p_4(Axton) \u2228 p_15(Axton))",
                    "p_15(Axton) \u2192 (p_14(Axton) \u2192 p_2(Axton))",
                    "p_4(Axton) \u2192 (p_4(Axton) \u2228 p_8(Axton))"
                ]
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_5(Axton)\n\u00acp_6(Axton)\n\u00acp_3(Axton)\np_4(Axton)\n\u00acp_2(Axton)\n\u00acp_1(Axton)\n\u00acp_0(Axton)\n((p_5(Axton) \u2228 p_15(Axton)) \u2227 \u00ac(p_5(Axton) \u2227 p_15(Axton))) \u2192 p_6(Axton)\np_11(Axton) \u2192 (p_3(Axton) \u2228 p_4(Axton))\np_11(Axton) \u2192 (p_3(Axton) \u2228 p_4(Axton) \u2228 p_15(Axton))\n(p_15(Axton) \u2227 p_14(Axton)) \u2192 p_2(Axton)\np_15(Axton) \u2192 (p_14(Axton) \u2192 p_2(Axton))\np_13(Axton) \u2228 p_14(Axton)\np_10(Axton) \u2228 p_1(Axton)\np_12(Axton) \u2295 p_13(Axton)\n\u2200x ((p_11(x) \u2228 p_9(x)) \u2192 p_12(x))\n\u2200x ((p_9(x) \u2228 p_7(x)) \u2192 p_10(x))\n(p_0(Axton) \u2227 p_7(Axton)) \u2192 p_8(Axton)\n(p_4(Axton) \u2227 \u00acp_3(Axton)) \u2192 p_8(Axton)\np_4(Axton) \u2228 \u00acp_4(Axton)\n\u2200x (p_4(x) \u2192 p_4(x))\np_4(Axton) \u2192 (p_4(Axton) \u2228 p_8(Axton))",
            "Initial Goal": "p_8(Axton)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Axton)",
                    "-p_6(Axton)",
                    "-p_3(Axton)",
                    "p_4(Axton)",
                    "-p_2(Axton)",
                    "-p_1(Axton)",
                    "-p_0(Axton)",
                    "((p_5(Axton) | p_15(Axton)) & -(p_5(Axton) & p_15(Axton))) -> p_6(Axton)",
                    "p_11(Axton) -> (p_3(Axton) | p_4(Axton))",
                    "p_11(Axton) -> (p_3(Axton) | p_4(Axton) | p_15(Axton))",
                    "(p_15(Axton) & p_14(Axton)) -> p_2(Axton)",
                    "p_15(Axton) -> (p_14(Axton) -> p_2(Axton))",
                    "p_13(Axton) | p_14(Axton)",
                    "p_10(Axton) | p_1(Axton)",
                    "-(p_12(Axton) <-> p_13(Axton))",
                    "all x ((p_11(x) | p_9(x)) -> p_12(x))",
                    "all x ((p_9(x) | p_7(x)) -> p_10(x))",
                    "(p_0(Axton) & p_7(Axton)) -> p_8(Axton)",
                    "(p_4(Axton) & -p_3(Axton)) -> p_8(Axton)",
                    "p_4(Axton) | -p_4(Axton)",
                    "all x (p_4(x) -> p_4(x))",
                    "p_4(Axton) -> (p_4(Axton) | p_8(Axton))"
                ],
                "formulas(goals)": [
                    "p_8(Axton)"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "(p_4(Axton) \u2227 \u00acp_3(Axton)) \u2192 \u00acp_8(Axton)"
                ],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "(p_4(Axton) \u2227 \u00acp_3(Axton)) \u2192 p_8(Axton)"
                ]
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_5(Axton)\n\u00acp_6(Axton)\n\u00acp_3(Axton)\np_4(Axton)\n\u00acp_2(Axton)\n\u00acp_1(Axton)\n\u00acp_0(Axton)\n((p_5(Axton) \u2228 p_15(Axton)) \u2227 \u00ac(p_5(Axton) \u2227 p_15(Axton))) \u2192 p_6(Axton)\np_11(Axton) \u2192 (p_3(Axton) \u2228 p_4(Axton))\np_11(Axton) \u2192 (p_3(Axton) \u2228 p_4(Axton) \u2228 p_15(Axton))\n(p_15(Axton) \u2227 p_14(Axton)) \u2192 p_2(Axton)\np_15(Axton) \u2192 (p_14(Axton) \u2192 p_2(Axton))\np_13(Axton) \u2228 p_14(Axton)\np_10(Axton) \u2228 p_1(Axton)\np_12(Axton) \u2295 p_13(Axton)\n\u2200x ((p_11(x) \u2228 p_9(x)) \u2192 p_12(x))\n\u2200x ((p_9(x) \u2228 p_7(x)) \u2192 p_10(x))\n(p_0(Axton) \u2227 p_7(Axton)) \u2192 p_8(Axton)\n(p_4(Axton) \u2227 \u00acp_3(Axton)) \u2192 p_8(Axton)\np_4(Axton) \u2228 \u00acp_4(Axton)\n\u2200x (p_4(x) \u2192 p_4(x))\np_4(Axton) \u2192 (p_4(Axton) \u2228 p_8(Axton))\n(p_4(Axton) \u2227 \u00acp_3(Axton) \u2227 p_11(Axton)) \u2192 p_8(Axton)",
            "Initial Goal": "p_8(Axton)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Axton).",
                    "-p_6(Axton).",
                    "-p_3(Axton).",
                    "p_4(Axton).",
                    "-p_2(Axton).",
                    "-p_1(Axton).",
                    "-p_0(Axton).",
                    "((p_5(Axton) | p_15(Axton)) & -(p_5(Axton) & p_15(Axton))) -> p_6(Axton).",
                    "p_11(Axton) -> (p_3(Axton) | p_4(Axton)).",
                    "p_11(Axton) -> (p_3(Axton) | p_4(Axton) | p_15(Axton)).",
                    "(p_15(Axton) & p_14(Axton)) -> p_2(Axton).",
                    "p_15(Axton) -> (p_14(Axton) -> p_2(Axton)).",
                    "p_13(Axton) | p_14(Axton).",
                    "p_10(Axton) | p_1(Axton).",
                    "-(p_12(Axton) <-> p_13(Axton)).",
                    "all x ((p_11(x) | p_9(x)) -> p_12(x)).",
                    "all x ((p_9(x) | p_7(x)) -> p_10(x)).",
                    "(p_0(Axton) & p_7(Axton)) -> p_8(Axton).",
                    "(p_4(Axton) & -p_3(Axton)) -> p_8(Axton).",
                    "p_4(Axton) | -p_4(Axton).",
                    "all x (p_4(x) -> p_4(x)).",
                    "p_4(Axton) -> (p_4(Axton) | p_8(Axton)).",
                    "(p_4(Axton) & -p_3(Axton) & p_11(Axton)) -> p_8(Axton)."
                ],
                "formulas(goals)": [
                    "p_8(Axton)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "(p_4(Axton) \u2227 \u00acp_3(Axton) \u2227 p_11(Axton)) \u2192 p_8(Axton)"
                ]
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_5(Axton)\n\u00acp_6(Axton)\np_3(Axton)\np_4(Axton)\n\u00acp_2(Axton)\n\u00acp_1(Axton)\n\u00acp_0(Axton)\n((p_5(Axton) \u2228 p_15(Axton)) \u2227 \u00ac(p_5(Axton) \u2227 p_15(Axton))) \u2192 p_6(Axton)\np_11(Axton) \u2192 (p_3(Axton) \u2228 p_4(Axton))\np_11(Axton) \u2192 (p_3(Axton) \u2228 p_4(Axton) \u2228 p_15(Axton))\n(p_15(Axton) \u2227 p_14(Axton)) \u2192 p_2(Axton)\np_15(Axton) \u2192 (p_14(Axton) \u2192 p_2(Axton))\np_13(Axton) \u2228 p_14(Axton)\np_10(Axton) \u2228 p_1(Axton)\np_12(Axton) \u2295 p_13(Axton)\n\u2200x ((p_11(x) \u2228 p_9(x)) \u2192 p_12(x))\n\u2200x ((p_9(x) \u2228 p_7(x)) \u2192 p_10(x))\n(p_0(Axton) \u2227 p_7(Axton)) \u2192 p_8(Axton)\n(p_4(Axton) \u2227 \u00acp_3(Axton)) \u2192 p_8(Axton)\np_4(Axton) \u2228 \u00acp_4(Axton)\n\u2200x (p_4(x) \u2192 p_4(x))\np_4(Axton) \u2192 (p_4(Axton) \u2228 p_8(Axton))\n(p_4(Axton) \u2227 \u00acp_3(Axton) \u2227 p_11(Axton)) \u2192 p_8(Axton)\np_3(Axton) \u2192 \u00acp_8(Axton)",
            "Initial Goal": "p_8(Axton)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Axton)",
                    "-p_6(Axton)",
                    "p_3(Axton)",
                    "p_4(Axton)",
                    "-p_2(Axton)",
                    "-p_1(Axton)",
                    "-p_0(Axton)",
                    "((p_5(Axton) | p_15(Axton)) & (-(p_5(Axton) & p_15(Axton)))) -> p_6(Axton)",
                    "p_11(Axton) -> (p_3(Axton) | p_4(Axton))",
                    "p_11(Axton) -> (p_3(Axton) | p_4(Axton) | p_15(Axton))",
                    "(p_15(Axton) & p_14(Axton)) -> p_2(Axton)",
                    "p_15(Axton) -> (p_14(Axton) -> p_2(Axton))",
                    "p_13(Axton) | p_14(Axton)",
                    "p_10(Axton) | p_1(Axton)",
                    "-(p_12(Axton) <-> p_13(Axton))",
                    "(all x ((p_11(x) | p_9(x)) -> p_12(x)))",
                    "(all x ((p_9(x) | p_7(x)) -> p_10(x)))",
                    "(p_0(Axton) & p_7(Axton)) -> p_8(Axton)",
                    "(p_4(Axton) & -p_3(Axton)) -> p_8(Axton)",
                    "p_4(Axton) | -p_4(Axton)",
                    "(all x (p_4(x) -> p_4(x)))",
                    "p_4(Axton) -> (p_4(Axton) | p_8(Axton))",
                    "(p_4(Axton) & -p_3(Axton) & p_11(Axton)) -> p_8(Axton)",
                    "p_3(Axton) -> -p_8(Axton)"
                ],
                "formulas(goals)": [
                    "-p_8(Axton)"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "\u00acp_3(Axton)"
                ],
                "removed_rules": [],
                "added_facts": [
                    "p_3(Axton)"
                ],
                "added_rules": [
                    "p_3(Axton) \u2192 \u00acp_8(Axton)"
                ]
            }
        }
    ]
}