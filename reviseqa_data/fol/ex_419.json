{
    "background_story": "In the ancient lore of the mystical realm, Zander was a fearsome dragon known for his unstoppable rampage. Born from the heart of a volcano, he was forged in fire and destruction. With scales as black as coal and eyes that glowed like embers, Zander terrorized villages and cities, leaving nothing but ashes in his wake. His roar could be heard for miles, striking fear into the hearts of all who heard it. The legendary dragon's rampage lasted for centuries, with many brave warriors attempting to defeat him but failing. Zander's power was a force of nature, unrelenting and merciless, earning him the title of the most feared creature in the realm's history.",
    "predicates": [
        {
            "id": 0,
            "name": "feared_by_all"
        },
        {
            "id": 1,
            "name": "breathes_fire"
        },
        {
            "id": 2,
            "name": "has_majestic_roar"
        },
        {
            "id": 3,
            "name": "demand_loyalty"
        },
        {
            "id": 4,
            "name": "has_sharp_claws"
        },
        {
            "id": 5,
            "name": "is_formidable"
        },
        {
            "id": 6,
            "name": "possess_great_power"
        },
        {
            "id": 7,
            "name": "leave_lasting_legacy"
        },
        {
            "id": 8,
            "name": "wield_elemental_fury"
        },
        {
            "id": 9,
            "name": "inspire_legends"
        },
        {
            "id": 10,
            "name": "is_ancient"
        },
        {
            "id": 11,
            "name": "command_respect"
        },
        {
            "id": 12,
            "name": "is_remembered"
        },
        {
            "id": 13,
            "name": "has_noble_pride"
        },
        {
            "id": 14,
            "name": "roam_wild"
        },
        {
            "id": 15,
            "name": "shape_history"
        },
        {
            "id": 16,
            "name": "cause_destruction"
        },
        {
            "id": 17,
            "name": "spread_terror"
        },
        {
            "id": 18,
            "name": "lives_centuries"
        },
        {
            "id": 19,
            "name": "is_legendary"
        },
        {
            "id": 20,
            "name": "has_regal_presence"
        },
        {
            "id": 21,
            "name": "create_chaos"
        },
        {
            "id": 22,
            "name": "earn_respect"
        },
        {
            "id": 23,
            "name": "lives_free"
        }
    ],
    "subject_name": "Zander",
    "subject_category": "legendary creature",
    "keyword": "rampage",
    "all_facts": [
        {
            "id": 0,
            "subject": "Zander",
            "text": "Zander is feared by all.",
            "fol": "p_0(Zander)",
            "str_fol": "feared_by_all(Zander)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Zander",
            "text": "Zander does not breathe fire.",
            "fol": "\u00acp_1(Zander)",
            "str_fol": "\u00acbreathes_fire(Zander)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Zander",
            "text": "Zander has a majestic roar.",
            "fol": "p_2(Zander)",
            "str_fol": "has_majestic_roar(Zander)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Zander",
            "text": "Zander does not demand loyalty.",
            "fol": "\u00acp_3(Zander)",
            "str_fol": "\u00acdemand_loyalty(Zander)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Zander",
            "text": "Zander does not have sharp claws.",
            "fol": "\u00acp_4(Zander)",
            "str_fol": "\u00achas_sharp_claws(Zander)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Zander",
            "text": "Zander is not formidable.",
            "fol": "\u00acp_5(Zander)",
            "str_fol": "\u00acis_formidable(Zander)",
            "negation": true
        },
        {
            "id": 6,
            "subject": "Zander",
            "text": "Zander does not roam wild.",
            "fol": "\u00acp_14(Zander)",
            "str_fol": "\u00acroam_wild(Zander)",
            "negation": true
        },
        {
            "id": 7,
            "subject": "Zander",
            "text": "Zander is not remembered.",
            "fol": "\u00acp_12(Zander)",
            "str_fol": "\u00acis_remembered(Zander)",
            "negation": true
        },
        {
            "id": 8,
            "subject": "Zander",
            "text": "Zander does not command respect.",
            "fol": "\u00acp_11(Zander)",
            "str_fol": "\u00accommand_respect(Zander)",
            "negation": true
        },
        {
            "id": 9,
            "subject": "Zander",
            "text": "Zander does not inspire legends.",
            "fol": "\u00acp_9(Zander)",
            "str_fol": "\u00acinspire_legends(Zander)",
            "negation": true
        },
        {
            "id": 10,
            "subject": "Zander",
            "text": "Zander is an ancient legendary creature.",
            "fol": "p_10(Zander)",
            "str_fol": "is_ancient(Zander)",
            "negation": false
        },
        {
            "id": 11,
            "subject": "Zander",
            "text": "Zander wields elemental fury.",
            "fol": "p_8(Zander)",
            "str_fol": "wield_elemental_fury(Zander)",
            "negation": false
        },
        {
            "id": 12,
            "subject": "Zander",
            "text": "Zander leaves a lasting legacy.",
            "fol": "p_7(Zander)",
            "str_fol": "leave_lasting_legacy(Zander)",
            "negation": false
        },
        {
            "id": 13,
            "subject": "Zander",
            "text": "Zander possesses great power.",
            "fol": "p_6(Zander)",
            "str_fol": "possess_great_power(Zander)",
            "negation": false
        }
    ],
    "context_facts": [
        {
            "id": 4,
            "subject": "Zander",
            "text": "Zander does not have sharp claws.",
            "fol": "\u00acp_4(Zander)",
            "str_fol": "\u00achas_sharp_claws(Zander)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Zander",
            "text": "Zander is not formidable.",
            "fol": "\u00acp_5(Zander)",
            "str_fol": "\u00acis_formidable(Zander)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Zander",
            "text": "Zander does not demand loyalty.",
            "fol": "\u00acp_3(Zander)",
            "str_fol": "\u00acdemand_loyalty(Zander)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Zander",
            "text": "Zander has a majestic roar.",
            "fol": "p_2(Zander)",
            "str_fol": "has_majestic_roar(Zander)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Zander",
            "text": "Zander does not breathe fire.",
            "fol": "\u00acp_1(Zander)",
            "str_fol": "\u00acbreathes_fire(Zander)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Zander",
            "text": "Zander is feared by all.",
            "fol": "p_0(Zander)",
            "str_fol": "feared_by_all(Zander)",
            "negation": false
        }
    ],
    "context_rules": [
        {
            "id": 7,
            "text": "Any legendary creature that has sharp claws or roams wild is formidable.",
            "fol": "\u2200x ((p_4(x) \u2228 p_14(x)) \u2192 p_5(x))",
            "str_fol": "\u2200x ((has_sharp_claws(x) \u2228 roam_wild(x)) \u2192 is_formidable(x))"
        },
        {
            "id": 6,
            "text": "If Zander is remembered, then he roams wild.",
            "fol": "p_12(Zander) \u2192 p_14(Zander)",
            "str_fol": "is_remembered(Zander) \u2192 roam_wild(Zander)"
        },
        {
            "id": 5,
            "text": "If Zander commands respect or has noble pride, then he demands loyalty.",
            "fol": "(p_11(Zander) \u2228 p_13(Zander)) \u2192 p_3(Zander)",
            "str_fol": "(command_respect(Zander) \u2228 has_noble_pride(Zander)) \u2192 demand_loyalty(Zander)"
        },
        {
            "id": 4,
            "text": "All legendary creatures that inspire legends are remembered.",
            "fol": "\u2200x (p_9(x) \u2192 p_12(x))",
            "str_fol": "\u2200x (inspire_legends(x) \u2192 is_remembered(x))"
        },
        {
            "id": 3,
            "text": "If Zander either has a majestic roar or breathes fire (but not both), then he is ancient.",
            "fol": "(p_2(Zander) \u2295 p_1(Zander)) \u2192 p_10(Zander)",
            "str_fol": "(has_majestic_roar(Zander) \u2295 breathes_fire(Zander)) \u2192 is_ancient(Zander)"
        },
        {
            "id": 2,
            "text": "If Zander is an ancient legendary creature, then he either commands respect or wields elemental fury, but not both.",
            "fol": "p_10(Zander) \u2192 (p_11(Zander) \u2295 p_8(Zander))",
            "str_fol": "is_ancient(Zander) \u2192 (command_respect(Zander) \u2295 wield_elemental_fury(Zander))"
        },
        {
            "id": 1,
            "text": "Every legendary creature that wields elemental fury either leaves a lasting legacy or inspires legends.",
            "fol": "\u2200x (p_8(x) \u2192 (p_7(x) \u2228 p_9(x)))",
            "str_fol": "\u2200x (wield_elemental_fury(x) \u2192 (leave_lasting_legacy(x) \u2228 inspire_legends(x)))"
        },
        {
            "id": 0,
            "text": "For all legendary creatures, if a creature is feared by all, then it possesses great power and leaves a lasting legacy.",
            "fol": "\u2200x (p_0(x) \u2192 (p_6(x) \u2227 p_7(x)))",
            "str_fol": "\u2200x (feared_by_all(x) \u2192 (possess_great_power(x) \u2227 leave_lasting_legacy(x)))"
        }
    ],
    "context": [
        {
            "id": 4,
            "subject": "Zander",
            "text": "Zander does not have sharp claws.",
            "fol": "\u00acp_4(Zander)",
            "str_fol": "\u00achas_sharp_claws(Zander)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Zander",
            "text": "Zander is not formidable.",
            "fol": "\u00acp_5(Zander)",
            "str_fol": "\u00acis_formidable(Zander)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Zander",
            "text": "Zander does not demand loyalty.",
            "fol": "\u00acp_3(Zander)",
            "str_fol": "\u00acdemand_loyalty(Zander)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Zander",
            "text": "Zander has a majestic roar.",
            "fol": "p_2(Zander)",
            "str_fol": "has_majestic_roar(Zander)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Zander",
            "text": "Zander does not breathe fire.",
            "fol": "\u00acp_1(Zander)",
            "str_fol": "\u00acbreathes_fire(Zander)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Zander",
            "text": "Zander is feared by all.",
            "fol": "p_0(Zander)",
            "str_fol": "feared_by_all(Zander)",
            "negation": false
        },
        {
            "id": 7,
            "text": "Any legendary creature that has sharp claws or roams wild is formidable.",
            "fol": "\u2200x ((p_4(x) \u2228 p_14(x)) \u2192 p_5(x))",
            "str_fol": "\u2200x ((has_sharp_claws(x) \u2228 roam_wild(x)) \u2192 is_formidable(x))"
        },
        {
            "id": 6,
            "text": "If Zander is remembered, then he roams wild.",
            "fol": "p_12(Zander) \u2192 p_14(Zander)",
            "str_fol": "is_remembered(Zander) \u2192 roam_wild(Zander)"
        },
        {
            "id": 5,
            "text": "If Zander commands respect or has noble pride, then he demands loyalty.",
            "fol": "(p_11(Zander) \u2228 p_13(Zander)) \u2192 p_3(Zander)",
            "str_fol": "(command_respect(Zander) \u2228 has_noble_pride(Zander)) \u2192 demand_loyalty(Zander)"
        },
        {
            "id": 4,
            "text": "All legendary creatures that inspire legends are remembered.",
            "fol": "\u2200x (p_9(x) \u2192 p_12(x))",
            "str_fol": "\u2200x (inspire_legends(x) \u2192 is_remembered(x))"
        },
        {
            "id": 3,
            "text": "If Zander either has a majestic roar or breathes fire (but not both), then he is ancient.",
            "fol": "(p_2(Zander) \u2295 p_1(Zander)) \u2192 p_10(Zander)",
            "str_fol": "(has_majestic_roar(Zander) \u2295 breathes_fire(Zander)) \u2192 is_ancient(Zander)"
        },
        {
            "id": 2,
            "text": "If Zander is an ancient legendary creature, then he either commands respect or wields elemental fury, but not both.",
            "fol": "p_10(Zander) \u2192 (p_11(Zander) \u2295 p_8(Zander))",
            "str_fol": "is_ancient(Zander) \u2192 (command_respect(Zander) \u2295 wield_elemental_fury(Zander))"
        },
        {
            "id": 1,
            "text": "Every legendary creature that wields elemental fury either leaves a lasting legacy or inspires legends.",
            "fol": "\u2200x (p_8(x) \u2192 (p_7(x) \u2228 p_9(x)))",
            "str_fol": "\u2200x (wield_elemental_fury(x) \u2192 (leave_lasting_legacy(x) \u2228 inspire_legends(x)))"
        },
        {
            "id": 0,
            "text": "For all legendary creatures, if a creature is feared by all, then it possesses great power and leaves a lasting legacy.",
            "fol": "\u2200x (p_0(x) \u2192 (p_6(x) \u2227 p_7(x)))",
            "str_fol": "\u2200x (feared_by_all(x) \u2192 (possess_great_power(x) \u2227 leave_lasting_legacy(x)))"
        }
    ],
    "context_fol": "\u00acp_4(Zander)\n\u00acp_5(Zander)\n\u00acp_3(Zander)\np_2(Zander)\n\u00acp_1(Zander)\np_0(Zander)\n\u2200x ((p_4(x) \u2228 p_14(x)) \u2192 p_5(x))\np_12(Zander) \u2192 p_14(Zander)\n(p_11(Zander) \u2228 p_13(Zander)) \u2192 p_3(Zander)\n\u2200x (p_9(x) \u2192 p_12(x))\n(p_2(Zander) \u2295 p_1(Zander)) \u2192 p_10(Zander)\np_10(Zander) \u2192 (p_11(Zander) \u2295 p_8(Zander))\n\u2200x (p_8(x) \u2192 (p_7(x) \u2228 p_9(x)))\n\u2200x (p_0(x) \u2192 (p_6(x) \u2227 p_7(x)))",
    "conclusion": {
        "id": 13,
        "subject": "Zander",
        "text": "Zander possesses great power.",
        "fol": "p_6(Zander)",
        "str_fol": "possess_great_power(Zander)",
        "negation": false
    },
    "initial_answer": "True",
    "initial_goal": "p_6(Zander)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 4,
                    "subject": "Zander",
                    "text": "Zander does not have sharp claws.",
                    "fol": "\u00acp_4(Zander)",
                    "str_fol": "\u00achas_sharp_claws(Zander)",
                    "negation": true
                },
                {
                    "id": 5,
                    "subject": "Zander",
                    "text": "Zander is not formidable.",
                    "fol": "\u00acp_5(Zander)",
                    "str_fol": "\u00acis_formidable(Zander)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 7,
                    "text": "Any legendary creature that has sharp claws or roams wild is formidable.",
                    "fol": "\u2200x ((p_4(x) \u2228 p_14(x)) \u2192 p_5(x))",
                    "str_fol": "\u2200x ((has_sharp_claws(x) \u2228 roam_wild(x)) \u2192 is_formidable(x))"
                }
            ],
            "conclusion": {
                "id": 6,
                "subject": "Zander",
                "text": "Zander does not roam wild.",
                "fol": "\u00acp_14(Zander)",
                "str_fol": "\u00acroam_wild(Zander)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 6,
                    "subject": "Zander",
                    "text": "Zander does not roam wild.",
                    "fol": "\u00acp_14(Zander)",
                    "str_fol": "\u00acroam_wild(Zander)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 6,
                    "text": "If Zander is remembered, then he roams wild.",
                    "fol": "p_12(Zander) \u2192 p_14(Zander)",
                    "str_fol": "is_remembered(Zander) \u2192 roam_wild(Zander)"
                }
            ],
            "conclusion": {
                "id": 7,
                "subject": "Zander",
                "text": "Zander is not remembered.",
                "fol": "\u00acp_12(Zander)",
                "str_fol": "\u00acis_remembered(Zander)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 3,
                    "subject": "Zander",
                    "text": "Zander does not demand loyalty.",
                    "fol": "\u00acp_3(Zander)",
                    "str_fol": "\u00acdemand_loyalty(Zander)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "If Zander commands respect or has noble pride, then he demands loyalty.",
                    "fol": "(p_11(Zander) \u2228 p_13(Zander)) \u2192 p_3(Zander)",
                    "str_fol": "(command_respect(Zander) \u2228 has_noble_pride(Zander)) \u2192 demand_loyalty(Zander)"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Zander",
                "text": "Zander does not command respect.",
                "fol": "\u00acp_11(Zander)",
                "str_fol": "\u00accommand_respect(Zander)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 7,
                    "subject": "Zander",
                    "text": "Zander is not remembered.",
                    "fol": "\u00acp_12(Zander)",
                    "str_fol": "\u00acis_remembered(Zander)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "All legendary creatures that inspire legends are remembered.",
                    "fol": "\u2200x (p_9(x) \u2192 p_12(x))",
                    "str_fol": "\u2200x (inspire_legends(x) \u2192 is_remembered(x))"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Zander",
                "text": "Zander does not inspire legends.",
                "fol": "\u00acp_9(Zander)",
                "str_fol": "\u00acinspire_legends(Zander)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 2,
                    "subject": "Zander",
                    "text": "Zander has a majestic roar.",
                    "fol": "p_2(Zander)",
                    "str_fol": "has_majestic_roar(Zander)",
                    "negation": false
                },
                {
                    "id": 1,
                    "subject": "Zander",
                    "text": "Zander does not breathe fire.",
                    "fol": "\u00acp_1(Zander)",
                    "str_fol": "\u00acbreathes_fire(Zander)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "If Zander either has a majestic roar or breathes fire (but not both), then he is ancient.",
                    "fol": "(p_2(Zander) \u2295 p_1(Zander)) \u2192 p_10(Zander)",
                    "str_fol": "(has_majestic_roar(Zander) \u2295 breathes_fire(Zander)) \u2192 is_ancient(Zander)"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Zander",
                "text": "Zander is an ancient legendary creature.",
                "fol": "p_10(Zander)",
                "str_fol": "is_ancient(Zander)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 10,
                    "subject": "Zander",
                    "text": "Zander is an ancient legendary creature.",
                    "fol": "p_10(Zander)",
                    "str_fol": "is_ancient(Zander)",
                    "negation": false
                },
                {
                    "id": 8,
                    "subject": "Zander",
                    "text": "Zander does not command respect.",
                    "fol": "\u00acp_11(Zander)",
                    "str_fol": "\u00accommand_respect(Zander)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "If Zander is an ancient legendary creature, then he either commands respect or wields elemental fury, but not both.",
                    "fol": "p_10(Zander) \u2192 (p_11(Zander) \u2295 p_8(Zander))",
                    "str_fol": "is_ancient(Zander) \u2192 (command_respect(Zander) \u2295 wield_elemental_fury(Zander))"
                }
            ],
            "conclusion": {
                "id": 11,
                "subject": "Zander",
                "text": "Zander wields elemental fury.",
                "fol": "p_8(Zander)",
                "str_fol": "wield_elemental_fury(Zander)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 11,
                    "subject": "Zander",
                    "text": "Zander wields elemental fury.",
                    "fol": "p_8(Zander)",
                    "str_fol": "wield_elemental_fury(Zander)",
                    "negation": false
                },
                {
                    "id": 9,
                    "subject": "Zander",
                    "text": "Zander does not inspire legends.",
                    "fol": "\u00acp_9(Zander)",
                    "str_fol": "\u00acinspire_legends(Zander)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "Every legendary creature that wields elemental fury either leaves a lasting legacy or inspires legends.",
                    "fol": "\u2200x (p_8(x) \u2192 (p_7(x) \u2228 p_9(x)))",
                    "str_fol": "\u2200x (wield_elemental_fury(x) \u2192 (leave_lasting_legacy(x) \u2228 inspire_legends(x)))"
                }
            ],
            "conclusion": {
                "id": 12,
                "subject": "Zander",
                "text": "Zander leaves a lasting legacy.",
                "fol": "p_7(Zander)",
                "str_fol": "leave_lasting_legacy(Zander)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 0,
                    "subject": "Zander",
                    "text": "Zander is feared by all.",
                    "fol": "p_0(Zander)",
                    "str_fol": "feared_by_all(Zander)",
                    "negation": false
                },
                {
                    "id": 12,
                    "subject": "Zander",
                    "text": "Zander leaves a lasting legacy.",
                    "fol": "p_7(Zander)",
                    "str_fol": "leave_lasting_legacy(Zander)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "For all legendary creatures, if a creature is feared by all, then it possesses great power and leaves a lasting legacy.",
                    "fol": "\u2200x (p_0(x) \u2192 (p_6(x) \u2227 p_7(x)))",
                    "str_fol": "\u2200x (feared_by_all(x) \u2192 (possess_great_power(x) \u2227 leave_lasting_legacy(x)))"
                }
            ],
            "conclusion": {
                "id": 13,
                "subject": "Zander",
                "text": "Zander possesses great power.",
                "fol": "p_6(Zander)",
                "str_fol": "possess_great_power(Zander)",
                "negation": false
            }
        }
    ],
    "proof_trace": "8 (all x (p_0(x) -> p_6(x) & p_7(x))).  [assumption].\n9 p_6(Zander).  [goal].\n20 -p_0(x) | p_6(x).  [clausify(8)].\n21 p_0(Zander).  [assumption].\n31 p_6(Zander).  [resolve(20,a,21,a)].\n32 -p_6(Zander).  [deny(9)].\n37 $F.  [resolve(31,a,32,a)].",
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_4(Zander)\n\u00acp_5(Zander)\n\u00acp_3(Zander)\np_2(Zander)\n\u00acp_1(Zander)\np_0(Zander)\n\u2200x ((p_4(x) \u2228 p_14(x)) \u2192 p_5(x))\n\u00acp_12(Zander) \u2228 p_14(Zander)\n(p_11(Zander) \u2228 p_13(Zander)) \u2192 p_3(Zander)\n\u2200x (p_9(x) \u2192 p_12(x))\n\u2200x (\u00acp_12(x) \u2192 \u00acp_9(x))\n(p_2(Zander) \u2295 p_1(Zander)) \u2192 p_10(Zander)\np_10(Zander) \u2192 (p_11(Zander) \u2295 p_8(Zander))\n\u2200x (p_8(x) \u2192 (p_7(x) \u2228 p_9(x)))\n\u2200x (p_0(x) \u2192 (p_6(x) \u2227 p_7(x)))\np_6(Zander)\n\u2200x (p_0(x) \u2192 p_0(x))",
            "Initial Goal": "p_6(Zander)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Zander).",
                    "-p_5(Zander).",
                    "-p_3(Zander).",
                    "p_2(Zander).",
                    "-p_1(Zander).",
                    "p_0(Zander).",
                    "all x ((p_4(x) | p_14(x)) -> p_5(x)).",
                    "(-p_12(Zander)) | p_14(Zander).",
                    "(p_11(Zander) | p_13(Zander)) -> p_3(Zander).",
                    "all x (p_9(x) -> p_12(x)).",
                    "all x ((-p_12(x)) -> (-p_9(x))).",
                    "(-(p_2(Zander) <-> p_1(Zander))) -> p_10(Zander).",
                    "p_10(Zander) -> (-(p_11(Zander) <-> p_8(Zander))).",
                    "all x (p_8(x) -> (p_7(x) | p_9(x))).",
                    "all x (p_0(x) -> (p_6(x) & p_7(x))).",
                    "p_6(Zander).",
                    "all x (p_0(x) -> p_0(x))."
                ],
                "formulas(goals)": [
                    "p_6(Zander)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_6(Zander)"
                ],
                "added_rules": [
                    "\u2200x (\u00acp_12(x) \u2192 \u00acp_9(x))",
                    "\u2200x (p_0(x) \u2192 p_0(x))"
                ]
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_4(Zander)\n\u00acp_5(Zander)\n\u00acp_3(Zander)\np_2(Zander)\n\u00acp_1(Zander)\np_0(Zander)\n\u2200x ((p_4(x) \u2228 p_14(x)) \u2192 p_5(x))\n\u00acp_12(Zander) \u2228 p_14(Zander)\n(p_11(Zander) \u2228 p_13(Zander)) \u2192 p_3(Zander)\n\u2200x (p_9(x) \u2192 p_12(x))\n\u2200x (\u00acp_12(x) \u2192 \u00acp_9(x))\n(p_2(Zander) \u2295 p_1(Zander)) \u2192 p_10(Zander)\np_10(Zander) \u2192 (p_11(Zander) \u2295 p_8(Zander))\n\u2200x (p_8(x) \u2192 (p_7(x) \u2228 p_9(x)))\n\u2200x (p_0(x) \u2192 p_7(x))\n\u2200x (p_7(x) \u2192 \u00acp_6(x))\n\u2200x (p_0(x) \u2192 p_0(x))",
            "Initial Goal": "p_6(Zander)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Zander)",
                    "-p_5(Zander)",
                    "-p_3(Zander)",
                    "p_2(Zander)",
                    "-p_1(Zander)",
                    "p_0(Zander)",
                    "all x ((p_4(x) | p_14(x)) -> p_5(x))",
                    "-p_12(Zander) | p_14(Zander)",
                    "(p_11(Zander) | p_13(Zander)) -> p_3(Zander)",
                    "all x (p_9(x) -> p_12(x))",
                    "all x (-p_12(x) -> -p_9(x))",
                    "(- (p_2(Zander) <-> p_1(Zander))) -> p_10(Zander)",
                    "p_10(Zander) -> (- (p_11(Zander) <-> p_8(Zander)))",
                    "all x (p_8(x) -> (p_7(x) | p_9(x)))",
                    "all x (p_0(x) -> p_7(x))",
                    "all x (p_7(x) -> -p_6(x))",
                    "all x (p_0(x) -> p_0(x))"
                ],
                "formulas(goals)": [
                    "-p_6(Zander)"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "p_6(Zander)"
                ],
                "removed_rules": [
                    "\u2200x (p_0(x) \u2192 (p_6(x) \u2227 p_7(x)))"
                ],
                "added_facts": [],
                "added_rules": [
                    "\u2200x (p_0(x) \u2192 p_7(x))",
                    "\u2200x (p_7(x) \u2192 \u00acp_6(x))"
                ]
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_4(Zander)\n\u00acp_5(Zander)\n\u00acp_3(Zander)\np_2(Zander)\n\u00acp_1(Zander)\np_0(Zander)\n\u2200x ((p_4(x) \u2228 p_14(x)) \u2192 p_5(x))\n\u00acp_12(Zander) \u2228 p_14(Zander)\n(p_11(Zander) \u2228 p_13(Zander)) \u2192 p_3(Zander)\n\u2200x (p_9(x) \u2192 p_12(x))\n\u2200x (\u00acp_12(x) \u2192 \u00acp_9(x))\n(p_2(Zander) \u2295 p_1(Zander)) \u2192 p_10(Zander)\np_10(Zander) \u2192 (p_11(Zander) \u2295 p_8(Zander))\n\u2200x (p_8(x) \u2192 (p_7(x) \u2228 p_9(x)))\n\u2200x (p_0(x) \u2192 p_7(x))\n\u2200x (\u00acp_7(x) \u2228 \u00acp_6(x))\n\u2200x (p_0(x) \u2192 p_0(x))",
            "Initial Goal": "p_6(Zander)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Zander)",
                    "-p_5(Zander)",
                    "-p_3(Zander)",
                    "p_2(Zander)",
                    "-p_1(Zander)",
                    "p_0(Zander)",
                    "all x ((p_4(x) | p_14(x)) -> p_5(x))",
                    "-p_12(Zander) | p_14(Zander)",
                    "(p_11(Zander) | p_13(Zander)) -> p_3(Zander)",
                    "all x (p_9(x) -> p_12(x))",
                    "all x (-p_12(x) -> -p_9(x))",
                    "(-(p_2(Zander) <-> p_1(Zander))) -> p_10(Zander)",
                    "p_10(Zander) -> (-(p_11(Zander) <-> p_8(Zander)))",
                    "all x (p_8(x) -> (p_7(x) | p_9(x)))",
                    "all x (p_0(x) -> p_7(x))",
                    "all x (-p_7(x) | -p_6(x))",
                    "all x (p_0(x) -> p_0(x))"
                ],
                "formulas(goals)": [
                    "-p_6(Zander)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u2200x (p_7(x) \u2192 \u00acp_6(x))"
                ],
                "added_facts": [],
                "added_rules": [
                    "\u2200x (\u00acp_7(x) \u2228 \u00acp_6(x))"
                ]
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_4(Zander)\n\u00acp_5(Zander)\n\u00acp_3(Zander)\np_2(Zander)\n\u00acp_1(Zander)\np_0(Zander)\n\u2200x (\u00acp_5(x) \u2192 (\u00acp_4(x) \u2227 \u00acp_14(x)))\n\u00acp_12(Zander) \u2228 p_14(Zander)\n(p_11(Zander) \u2228 p_13(Zander)) \u2192 p_3(Zander)\n\u2200x (p_9(x) \u2192 p_12(x))\n\u2200x (\u00acp_12(x) \u2192 \u00acp_9(x))\n(p_2(Zander) \u2295 p_1(Zander)) \u2192 p_10(Zander)\np_10(Zander) \u2192 (p_11(Zander) \u2295 p_8(Zander))\n\u2200x (p_8(x) \u2192 (p_7(x) \u2228 p_9(x)))\n\u2200x (p_0(x) \u2192 p_7(x))\n\u2200x (\u00acp_7(x) \u2228 \u00acp_6(x))\n\u2200x (p_0(x) \u2192 p_0(x))\np_6(Zander) \u2228 \u00acp_6(Zander)\n\u2200x \u00ac(p_7(x) \u2227 p_6(x))\np_10(Zander)",
            "Initial Goal": "p_6(Zander)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Zander)",
                    "-p_5(Zander)",
                    "-p_3(Zander)",
                    "p_2(Zander)",
                    "-p_1(Zander)",
                    "p_0(Zander)",
                    "all x (-p_5(x) -> (-p_4(x) & -p_14(x)))",
                    "-p_12(Zander) | p_14(Zander)",
                    "(p_11(Zander) | p_13(Zander)) -> p_3(Zander)",
                    "all x (p_9(x) -> p_12(x))",
                    "all x (-p_12(x) -> -p_9(x))",
                    "(-(p_2(Zander) <-> p_1(Zander))) -> p_10(Zander)",
                    "p_10(Zander) -> (-(p_11(Zander) <-> p_8(Zander)))",
                    "all x (p_8(x) -> (p_7(x) | p_9(x)))",
                    "all x (p_0(x) -> p_7(x))",
                    "all x (-p_7(x) | -p_6(x))",
                    "all x (p_0(x) -> p_0(x))",
                    "p_6(Zander) | -p_6(Zander)",
                    "all x (-(p_7(x) & p_6(x)))",
                    "p_10(Zander)"
                ],
                "formulas(goals)": [
                    "-p_6(Zander)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_6(Zander) \u2228 \u00acp_6(Zander)",
                    "p_10(Zander)"
                ],
                "added_rules": [
                    "\u2200x (\u00acp_5(x) \u2192 (\u00acp_4(x) \u2227 \u00acp_14(x)))",
                    "\u2200x \u00ac(p_7(x) \u2227 p_6(x))"
                ]
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_4(Zander)\n\u00acp_5(Zander)\n\u00acp_3(Zander)\np_2(Zander)\n\u00acp_1(Zander)\np_0(Zander)\n\u2200x (\u00acp_5(x) \u2192 (\u00acp_4(x) \u2227 \u00acp_14(x)))\n\u00acp_12(Zander) \u2228 p_14(Zander)\n(p_11(Zander) \u2228 p_13(Zander)) \u2192 p_3(Zander)\n\u2200x (p_9(x) \u2192 p_12(x))\n\u2200x (\u00acp_12(x) \u2192 \u00acp_9(x))\n(p_2(Zander) \u2295 p_1(Zander)) \u2192 p_10(Zander)\np_10(Zander) \u2192 (p_11(Zander) \u2295 p_8(Zander))\n\u2200x (p_8(x) \u2192 (p_7(x) \u2228 p_9(x)))\n\u2200x (p_0(x) \u2192 p_7(x))\n\u2200x (p_7(x) \u2192 \u00acp_6(x))\n\u2200x (p_0(x) \u2192 p_0(x))\np_6(Zander) \u2192 p_6(Zander)\n\u2200x \u00ac(p_7(x) \u2227 p_6(x))\np_10(Zander)\np_7(Zander)\n\u00acp_6(Zander)\n\u00ac(p_7(Zander) \u2227 p_6(Zander))",
            "Initial Goal": "p_6(Zander)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Zander)",
                    "-p_5(Zander)",
                    "-p_3(Zander)",
                    "p_2(Zander)",
                    "-p_1(Zander)",
                    "p_0(Zander)",
                    "all x (-p_5(x) -> (-p_4(x) & -p_14(x)))",
                    "-p_12(Zander) | p_14(Zander)",
                    "(p_11(Zander) | p_13(Zander)) -> p_3(Zander)",
                    "all x (p_9(x) -> p_12(x))",
                    "all x (-p_12(x) -> -p_9(x))",
                    "(-(p_2(Zander) <-> p_1(Zander))) -> p_10(Zander)",
                    "p_10(Zander) -> (-(p_11(Zander) <-> p_8(Zander)))",
                    "all x (p_8(x) -> (p_7(x) | p_9(x)))",
                    "all x (p_0(x) -> p_7(x))",
                    "all x (p_7(x) -> -p_6(x))",
                    "all x (p_0(x) -> p_0(x))",
                    "p_6(Zander) -> p_6(Zander)",
                    "all x (-(p_7(x) & p_6(x)))",
                    "p_10(Zander)",
                    "p_7(Zander)",
                    "-p_6(Zander)",
                    "-(p_7(Zander) & p_6(Zander))"
                ],
                "formulas(goals)": [
                    "-p_6(Zander)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_7(Zander)",
                    "\u00acp_6(Zander)",
                    "\u00ac(p_7(Zander) \u2227 p_6(Zander))"
                ],
                "added_rules": [
                    "\u2200x (p_7(x) \u2192 \u00acp_6(x))",
                    "p_6(Zander) \u2192 p_6(Zander)"
                ]
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_4(Zander)\n\u00acp_5(Zander)\n\u00acp_3(Zander)\np_2(Zander)\n\u00acp_1(Zander)\np_0(Zander)\n\u2200x (\u00acp_5(x) \u2192 (\u00acp_4(x) \u2227 \u00acp_14(x)))\n\u00acp_12(Zander) \u2228 p_14(Zander)\n(p_11(Zander) \u2228 p_13(Zander)) \u2192 p_3(Zander)\n\u2200x (p_9(x) \u2192 p_12(x))\n\u2200x (\u00acp_12(x) \u2192 \u00acp_9(x))\n(p_2(Zander) \u2295 p_1(Zander)) \u2192 p_10(Zander)\np_10(Zander) \u2192 (p_11(Zander) \u2295 p_8(Zander))\n\u2200x (p_8(x) \u2192 (p_7(x) \u2228 p_9(x)))\n\u2200x (p_0(x) \u2192 p_7(x))\n\u2200x (p_7(x) \u2192 \u00acp_6(x))\n\u2200x (p_0(x) \u2192 p_0(x))\np_6(Zander) \u2192 p_6(Zander)\n\u2200x \u00ac(p_7(x) \u2227 p_6(x))\np_10(Zander)\np_7(Zander)\n\u00acp_6(Zander)\n\u00ac(p_7(Zander) \u2227 p_6(Zander))\np_6(Zander) \u2192 \u00acp_7(Zander)\n\u00acp_14(Zander)\n\u00acp_12(Zander)\n\u00acp_9(Zander)\np_8(Zander) \u2192 p_7(Zander)\n\u00acp_11(Zander)\n\u00acp_13(Zander)",
            "Initial Goal": "p_6(Zander)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Zander)",
                    "-p_5(Zander)",
                    "-p_3(Zander)",
                    "p_2(Zander)",
                    "-p_1(Zander)",
                    "p_0(Zander)",
                    "all x (-p_5(x) -> (-p_4(x) & -p_14(x)))",
                    "-p_12(Zander) | p_14(Zander)",
                    "(p_11(Zander) | p_13(Zander)) -> p_3(Zander)",
                    "all x (p_9(x) -> p_12(x))",
                    "all x (-p_12(x) -> -p_9(x))",
                    "(-(p_2(Zander) <-> p_1(Zander))) -> p_10(Zander)",
                    "p_10(Zander) -> (-(p_11(Zander) <-> p_8(Zander)))",
                    "all x (p_8(x) -> (p_7(x) | p_9(x)))",
                    "all x (p_0(x) -> p_7(x))",
                    "all x (p_7(x) -> -p_6(x))",
                    "all x (p_0(x) -> p_0(x))",
                    "p_6(Zander) -> p_6(Zander)",
                    "all x (-(p_7(x) & p_6(x)))",
                    "p_10(Zander)",
                    "p_7(Zander)",
                    "-p_6(Zander)",
                    "-(p_7(Zander) & p_6(Zander))",
                    "p_6(Zander) -> -p_7(Zander)",
                    "-p_14(Zander)",
                    "-p_12(Zander)",
                    "-p_9(Zander)",
                    "p_8(Zander) -> p_7(Zander)",
                    "-p_11(Zander)",
                    "-p_13(Zander)"
                ],
                "formulas(goals)": [
                    "-p_6(Zander)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "\u00acp_14(Zander)",
                    "\u00acp_12(Zander)",
                    "\u00acp_9(Zander)",
                    "\u00acp_11(Zander)",
                    "\u00acp_13(Zander)"
                ],
                "added_rules": [
                    "p_6(Zander) \u2192 \u00acp_7(Zander)",
                    "p_8(Zander) \u2192 p_7(Zander)"
                ]
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_4(Zander)\n\u00acp_5(Zander)\n\u00acp_3(Zander)\np_2(Zander)\n\u00acp_1(Zander)\np_0(Zander)\n\u2200x (\u00acp_5(x) \u2192 (\u00acp_4(x) \u2227 \u00acp_14(x)))\n\u00acp_12(Zander) \u2228 p_14(Zander)\n(p_11(Zander) \u2228 p_13(Zander)) \u2192 p_3(Zander)\n\u2200x (p_9(x) \u2192 p_12(x))\n\u2200x (\u00acp_12(x) \u2192 \u00acp_9(x))\n(p_2(Zander) \u2295 p_1(Zander)) \u2192 p_10(Zander)\np_10(Zander) \u2192 (p_11(Zander) \u2295 p_8(Zander))\n\u2200x (p_8(x) \u2192 (p_7(x) \u2228 p_9(x)))\n\u2200x (p_0(x) \u2192 p_7(x))\n\u2200x (p_7(x) \u2192 p_6(x))\n\u2200x (p_0(x) \u2192 p_0(x))\np_6(Zander) \u2192 p_6(Zander)\np_10(Zander)\np_7(Zander)\n\u00acp_12(Zander)\n\u00acp_9(Zander)\np_8(Zander) \u2192 p_7(Zander)\n\u00acp_11(Zander)\n\u00acp_13(Zander)",
            "Initial Goal": "p_6(Zander)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Zander)",
                    "-p_5(Zander)",
                    "-p_3(Zander)",
                    "p_2(Zander)",
                    "-p_1(Zander)",
                    "p_0(Zander)",
                    "all x (-p_5(x) -> (-p_4(x) & -p_14(x)))",
                    "-p_12(Zander) | p_14(Zander)",
                    "(p_11(Zander) | p_13(Zander)) -> p_3(Zander)",
                    "all x (p_9(x) -> p_12(x))",
                    "all x (-p_12(x) -> -p_9(x))",
                    "(p_2(Zander) <-> -p_1(Zander)) -> p_10(Zander)",
                    "p_10(Zander) -> (p_11(Zander) <-> -p_8(Zander))",
                    "all x (p_8(x) -> (p_7(x) | p_9(x)))",
                    "all x (p_0(x) -> p_7(x))",
                    "all x (p_7(x) -> p_6(x))",
                    "all x (p_0(x) -> p_0(x))",
                    "p_6(Zander) -> p_6(Zander)",
                    "p_10(Zander)",
                    "p_7(Zander)",
                    "-p_12(Zander)",
                    "-p_9(Zander)",
                    "p_8(Zander) -> p_7(Zander)",
                    "-p_11(Zander)",
                    "-p_13(Zander)"
                ],
                "formulas(goals)": [
                    "p_6(Zander)"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "\u00acp_6(Zander)"
                ],
                "removed_rules": [
                    "\u2200x \u00ac(p_7(x) \u2227 p_6(x))",
                    "p_6(Zander) \u2192 \u00acp_7(Zander)",
                    "\u00ac(p_7(Zander) \u2227 p_6(Zander))",
                    "\u00acp_14(Zander)"
                ],
                "added_facts": [],
                "added_rules": [
                    "\u2200x (p_7(x) \u2192 p_6(x))"
                ]
            }
        }
    ]
}