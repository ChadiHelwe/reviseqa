{
    "background_story": "Lian was a rising star in the professional gaming scene, known for his unflappable calm under pressure. Nothing seemed to faze him, whether it was a high-stakes tournament or a grueling practice session. His teammates often joked that he had ice in his veins, given his ability to remain focused and composed even in the most intense moments. During the championship finals, Lian's team was down by a significant margin with only minutes to go. While his teammates were on edge, Lian remained serene, methodically executing his strategy and leading his team to a stunning comeback victory. His ability to stay unfazed in the face of adversity earned him the respect and admiration of his peers, cementing his reputation as a clutch player.",
    "predicates": [
        {
            "id": 0,
            "name": "stays_calm"
        },
        {
            "id": 1,
            "name": "loses_composure"
        },
        {
            "id": 2,
            "name": "tenses_up"
        },
        {
            "id": 3,
            "name": "makes_strategic_moves"
        },
        {
            "id": 4,
            "name": "plays_safe"
        },
        {
            "id": 5,
            "name": "takes_risks"
        },
        {
            "id": 6,
            "name": "faces_pressure"
        },
        {
            "id": 7,
            "name": "leads_team"
        },
        {
            "id": 8,
            "name": "executes_strategy"
        },
        {
            "id": 9,
            "name": "is_adaptable"
        },
        {
            "id": 10,
            "name": "experienced"
        },
        {
            "id": 11,
            "name": "sweats_under"
        },
        {
            "id": 12,
            "name": "nervous"
        },
        {
            "id": 13,
            "name": "focused"
        },
        {
            "id": 14,
            "name": "quick_thinker"
        },
        {
            "id": 15,
            "name": "gets_rattled"
        },
        {
            "id": 16,
            "name": "wins_games"
        },
        {
            "id": 17,
            "name": "remains_serene"
        },
        {
            "id": 18,
            "name": "trains_hard"
        },
        {
            "id": 19,
            "name": "learns_fast"
        },
        {
            "id": 20,
            "name": "in_exams"
        },
        {
            "id": 21,
            "name": "meditates"
        },
        {
            "id": 22,
            "name": "feels_anxious"
        },
        {
            "id": 23,
            "name": "gets_distracted"
        },
        {
            "id": 24,
            "name": "stays_alert"
        },
        {
            "id": 25,
            "name": "thinks_critically"
        },
        {
            "id": 26,
            "name": "thinks_critical"
        },
        {
            "id": 27,
            "name": "stays_cool"
        }
    ],
    "subject_name": "Lian",
    "subject_category": "human",
    "keyword": "faze",
    "all_facts": [
        {
            "id": 0,
            "subject": "Lian",
            "text": "Lian is able to stay calm during intense competitions.",
            "fol": "p_0(Lian)",
            "str_fol": "stays_calm(Lian)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Lian",
            "text": "Lian does not lose composure.",
            "fol": "\u00acp_1(Lian)",
            "str_fol": "\u00acloses_composure(Lian)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Lian",
            "text": "Lian tenses up.",
            "fol": "p_2(Lian)",
            "str_fol": "tenses_up(Lian)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Lian",
            "text": "Lian makes strategic moves.",
            "fol": "p_3(Lian)",
            "str_fol": "makes_strategic_moves(Lian)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Lian",
            "text": "Lian plays it safe.",
            "fol": "p_4(Lian)",
            "str_fol": "plays_safe(Lian)",
            "negation": false
        },
        {
            "id": 5,
            "subject": "Lian",
            "text": "Lian takes risks.",
            "fol": "p_5(Lian)",
            "str_fol": "takes_risks(Lian)",
            "negation": false
        },
        {
            "id": 6,
            "subject": "Lian",
            "text": "Lian faces pressure.",
            "fol": "p_6(Lian)",
            "str_fol": "faces_pressure(Lian)",
            "negation": false
        },
        {
            "id": 7,
            "subject": "Lian",
            "text": "Lian does not lead his team.",
            "fol": "\u00acp_7(Lian)",
            "str_fol": "\u00acleads_team(Lian)",
            "negation": true
        },
        {
            "id": 8,
            "subject": "Lian",
            "text": "Lian does not execute his strategy effectively.",
            "fol": "\u00acp_8(Lian)",
            "str_fol": "\u00acexecutes_strategy(Lian)",
            "negation": true
        },
        {
            "id": 9,
            "subject": "Lian",
            "text": "Lian does not remain serene.",
            "fol": "\u00acp_17(Lian)",
            "str_fol": "\u00acremains_serene(Lian)",
            "negation": true
        },
        {
            "id": 10,
            "subject": "Lian",
            "text": "Lian gets rattled.",
            "fol": "p_15(Lian)",
            "str_fol": "gets_rattled(Lian)",
            "negation": false
        },
        {
            "id": 11,
            "subject": "Lian",
            "text": "Lian does not win games.",
            "fol": "\u00acp_16(Lian)",
            "str_fol": "\u00acwins_games(Lian)",
            "negation": true
        },
        {
            "id": 12,
            "subject": "Lian",
            "text": "Lian is not a quick thinker.",
            "fol": "\u00acp_14(Lian)",
            "str_fol": "\u00acquick_thinker(Lian)",
            "negation": true
        },
        {
            "id": 13,
            "subject": "Lian",
            "text": "Lian sweats under pressure.",
            "fol": "p_11(Lian)",
            "str_fol": "sweats_under(Lian)",
            "negation": false
        },
        {
            "id": 14,
            "subject": "Lian",
            "text": "Lian is not focused.",
            "fol": "\u00acp_13(Lian)",
            "str_fol": "\u00acfocused(Lian)",
            "negation": true
        },
        {
            "id": 15,
            "subject": "Lian",
            "text": "Lian is not adaptable in his approach to gaming competitions.",
            "fol": "\u00acp_9(Lian)",
            "str_fol": "\u00acis_adaptable(Lian)",
            "negation": true
        },
        {
            "id": 16,
            "subject": "Lian",
            "text": "Lian is experienced.",
            "fol": "p_10(Lian)",
            "str_fol": "experienced(Lian)",
            "negation": false
        }
    ],
    "context_facts": [
        {
            "id": 7,
            "subject": "Lian",
            "text": "Lian does not lead his team.",
            "fol": "\u00acp_7(Lian)",
            "str_fol": "\u00acleads_team(Lian)",
            "negation": true
        },
        {
            "id": 8,
            "subject": "Lian",
            "text": "Lian does not execute his strategy effectively.",
            "fol": "\u00acp_8(Lian)",
            "str_fol": "\u00acexecutes_strategy(Lian)",
            "negation": true
        },
        {
            "id": 6,
            "subject": "Lian",
            "text": "Lian faces pressure.",
            "fol": "p_6(Lian)",
            "str_fol": "faces_pressure(Lian)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Lian",
            "text": "Lian plays it safe.",
            "fol": "p_4(Lian)",
            "str_fol": "plays_safe(Lian)",
            "negation": false
        },
        {
            "id": 5,
            "subject": "Lian",
            "text": "Lian takes risks.",
            "fol": "p_5(Lian)",
            "str_fol": "takes_risks(Lian)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Lian",
            "text": "Lian does not lose composure.",
            "fol": "\u00acp_1(Lian)",
            "str_fol": "\u00acloses_composure(Lian)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Lian",
            "text": "Lian makes strategic moves.",
            "fol": "p_3(Lian)",
            "str_fol": "makes_strategic_moves(Lian)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Lian",
            "text": "Lian tenses up.",
            "fol": "p_2(Lian)",
            "str_fol": "tenses_up(Lian)",
            "negation": false
        },
        {
            "id": 0,
            "subject": "Lian",
            "text": "Lian is able to stay calm during intense competitions.",
            "fol": "p_0(Lian)",
            "str_fol": "stays_calm(Lian)",
            "negation": false
        }
    ],
    "context_rules": [
        {
            "id": 8,
            "text": "If Lian remains serene, then he either leads his team or executes his strategy effectively.",
            "fol": "p_17(Lian) \u2192 (p_7(Lian) \u2228 p_8(Lian))",
            "str_fol": "remains_serene(Lian) \u2192 (leads_team(Lian) \u2228 executes_strategy(Lian))"
        },
        {
            "id": 7,
            "text": "Anyone who faces pressure either remains serene or gets rattled (or both).",
            "fol": "\u2200x (p_6(x) \u2192 (p_17(x) \u2228 p_15(x)))",
            "str_fol": "\u2200x (faces_pressure(x) \u2192 (remains_serene(x) \u2228 gets_rattled(x)))"
        },
        {
            "id": 6,
            "text": "If Lian wins games, then he either plays it safe or takes risks, but not both.",
            "fol": "p_16(Lian) \u2192 (p_4(Lian) \u2295 p_5(Lian))",
            "str_fol": "wins_games(Lian) \u2192 (plays_safe(Lian) \u2295 takes_risks(Lian))"
        },
        {
            "id": 5,
            "text": "If Lian is a quick thinker, then he will win games.",
            "fol": "p_14(Lian) \u2192 p_16(Lian)",
            "str_fol": "quick_thinker(Lian) \u2192 wins_games(Lian)"
        },
        {
            "id": 4,
            "text": "If a person either sweats under pressure or gets rattled (but not both), then they lose composure.",
            "fol": "\u2200x ((p_11(x) \u2295 p_15(x)) \u2192 p_1(x))",
            "str_fol": "\u2200x ((sweats_under(x) \u2295 gets_rattled(x)) \u2192 loses_composure(x))"
        },
        {
            "id": 3,
            "text": "If Lian is focused, then he is a quick thinker and makes strategic moves.",
            "fol": "p_13(Lian) \u2192 (p_14(Lian) \u2227 p_3(Lian))",
            "str_fol": "focused(Lian) \u2192 (quick_thinker(Lian) \u2227 makes_strategic_moves(Lian))"
        },
        {
            "id": 2,
            "text": "If Lian either sweats under pressure or tenses up (but not both), then he is nervous.",
            "fol": "(p_11(Lian) \u2295 p_2(Lian)) \u2192 p_12(Lian)",
            "str_fol": "(sweats_under(Lian) \u2295 tenses_up(Lian)) \u2192 nervous(Lian)"
        },
        {
            "id": 1,
            "text": "Lian is either adaptable in his gaming strategy or able to stay calm during intense competitions, but not both.",
            "fol": "p_9(Lian) \u2295 p_0(Lian)",
            "str_fol": "is_adaptable(Lian) \u2295 stays_calm(Lian)"
        },
        {
            "id": 0,
            "text": "Lian is either adaptable or experienced, but not both, in his approach to gaming competitions.",
            "fol": "p_9(Lian) \u2295 p_10(Lian)",
            "str_fol": "is_adaptable(Lian) \u2295 experienced(Lian)"
        }
    ],
    "context": [
        {
            "id": 7,
            "subject": "Lian",
            "text": "Lian does not lead his team.",
            "fol": "\u00acp_7(Lian)",
            "str_fol": "\u00acleads_team(Lian)",
            "negation": true
        },
        {
            "id": 8,
            "subject": "Lian",
            "text": "Lian does not execute his strategy effectively.",
            "fol": "\u00acp_8(Lian)",
            "str_fol": "\u00acexecutes_strategy(Lian)",
            "negation": true
        },
        {
            "id": 6,
            "subject": "Lian",
            "text": "Lian faces pressure.",
            "fol": "p_6(Lian)",
            "str_fol": "faces_pressure(Lian)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Lian",
            "text": "Lian plays it safe.",
            "fol": "p_4(Lian)",
            "str_fol": "plays_safe(Lian)",
            "negation": false
        },
        {
            "id": 5,
            "subject": "Lian",
            "text": "Lian takes risks.",
            "fol": "p_5(Lian)",
            "str_fol": "takes_risks(Lian)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Lian",
            "text": "Lian does not lose composure.",
            "fol": "\u00acp_1(Lian)",
            "str_fol": "\u00acloses_composure(Lian)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Lian",
            "text": "Lian makes strategic moves.",
            "fol": "p_3(Lian)",
            "str_fol": "makes_strategic_moves(Lian)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Lian",
            "text": "Lian tenses up.",
            "fol": "p_2(Lian)",
            "str_fol": "tenses_up(Lian)",
            "negation": false
        },
        {
            "id": 0,
            "subject": "Lian",
            "text": "Lian is able to stay calm during intense competitions.",
            "fol": "p_0(Lian)",
            "str_fol": "stays_calm(Lian)",
            "negation": false
        },
        {
            "id": 8,
            "text": "If Lian remains serene, then he either leads his team or executes his strategy effectively.",
            "fol": "p_17(Lian) \u2192 (p_7(Lian) \u2228 p_8(Lian))",
            "str_fol": "remains_serene(Lian) \u2192 (leads_team(Lian) \u2228 executes_strategy(Lian))"
        },
        {
            "id": 7,
            "text": "Anyone who faces pressure either remains serene or gets rattled (or both).",
            "fol": "\u2200x (p_6(x) \u2192 (p_17(x) \u2228 p_15(x)))",
            "str_fol": "\u2200x (faces_pressure(x) \u2192 (remains_serene(x) \u2228 gets_rattled(x)))"
        },
        {
            "id": 6,
            "text": "If Lian wins games, then he either plays it safe or takes risks, but not both.",
            "fol": "p_16(Lian) \u2192 (p_4(Lian) \u2295 p_5(Lian))",
            "str_fol": "wins_games(Lian) \u2192 (plays_safe(Lian) \u2295 takes_risks(Lian))"
        },
        {
            "id": 5,
            "text": "If Lian is a quick thinker, then he will win games.",
            "fol": "p_14(Lian) \u2192 p_16(Lian)",
            "str_fol": "quick_thinker(Lian) \u2192 wins_games(Lian)"
        },
        {
            "id": 4,
            "text": "If a person either sweats under pressure or gets rattled (but not both), then they lose composure.",
            "fol": "\u2200x ((p_11(x) \u2295 p_15(x)) \u2192 p_1(x))",
            "str_fol": "\u2200x ((sweats_under(x) \u2295 gets_rattled(x)) \u2192 loses_composure(x))"
        },
        {
            "id": 3,
            "text": "If Lian is focused, then he is a quick thinker and makes strategic moves.",
            "fol": "p_13(Lian) \u2192 (p_14(Lian) \u2227 p_3(Lian))",
            "str_fol": "focused(Lian) \u2192 (quick_thinker(Lian) \u2227 makes_strategic_moves(Lian))"
        },
        {
            "id": 2,
            "text": "If Lian either sweats under pressure or tenses up (but not both), then he is nervous.",
            "fol": "(p_11(Lian) \u2295 p_2(Lian)) \u2192 p_12(Lian)",
            "str_fol": "(sweats_under(Lian) \u2295 tenses_up(Lian)) \u2192 nervous(Lian)"
        },
        {
            "id": 1,
            "text": "Lian is either adaptable in his gaming strategy or able to stay calm during intense competitions, but not both.",
            "fol": "p_9(Lian) \u2295 p_0(Lian)",
            "str_fol": "is_adaptable(Lian) \u2295 stays_calm(Lian)"
        },
        {
            "id": 0,
            "text": "Lian is either adaptable or experienced, but not both, in his approach to gaming competitions.",
            "fol": "p_9(Lian) \u2295 p_10(Lian)",
            "str_fol": "is_adaptable(Lian) \u2295 experienced(Lian)"
        }
    ],
    "context_fol": "\u00acp_7(Lian)\n\u00acp_8(Lian)\np_6(Lian)\np_4(Lian)\np_5(Lian)\n\u00acp_1(Lian)\np_3(Lian)\np_2(Lian)\np_0(Lian)\np_17(Lian) \u2192 (p_7(Lian) \u2228 p_8(Lian))\n\u2200x (p_6(x) \u2192 (p_17(x) \u2228 p_15(x)))\np_16(Lian) \u2192 (p_4(Lian) \u2295 p_5(Lian))\np_14(Lian) \u2192 p_16(Lian)\n\u2200x ((p_11(x) \u2295 p_15(x)) \u2192 p_1(x))\np_13(Lian) \u2192 (p_14(Lian) \u2227 p_3(Lian))\n(p_11(Lian) \u2295 p_2(Lian)) \u2192 p_12(Lian)\np_9(Lian) \u2295 p_0(Lian)\np_9(Lian) \u2295 p_10(Lian)",
    "conclusion": {
        "id": 18,
        "text": "If Lian is either experienced or nervous (but not both), then he is focused.",
        "fol": "(p_10(Lian) \u2295 p_12(Lian)) \u2192 p_13(Lian)",
        "str_fol": "(experienced(Lian) \u2295 nervous(Lian)) \u2192 focused(Lian)"
    },
    "initial_answer": "Uncertain",
    "initial_goal": "(p_10(Lian) \u2295 p_12(Lian)) \u2192 p_13(Lian)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 7,
                    "subject": "Lian",
                    "text": "Lian does not lead his team.",
                    "fol": "\u00acp_7(Lian)",
                    "str_fol": "\u00acleads_team(Lian)",
                    "negation": true
                },
                {
                    "id": 8,
                    "subject": "Lian",
                    "text": "Lian does not execute his strategy effectively.",
                    "fol": "\u00acp_8(Lian)",
                    "str_fol": "\u00acexecutes_strategy(Lian)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 8,
                    "text": "If Lian remains serene, then he either leads his team or executes his strategy effectively.",
                    "fol": "p_17(Lian) \u2192 (p_7(Lian) \u2228 p_8(Lian))",
                    "str_fol": "remains_serene(Lian) \u2192 (leads_team(Lian) \u2228 executes_strategy(Lian))"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Lian",
                "text": "Lian does not remain serene.",
                "fol": "\u00acp_17(Lian)",
                "str_fol": "\u00acremains_serene(Lian)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 6,
                    "subject": "Lian",
                    "text": "Lian faces pressure.",
                    "fol": "p_6(Lian)",
                    "str_fol": "faces_pressure(Lian)",
                    "negation": false
                },
                {
                    "id": 9,
                    "subject": "Lian",
                    "text": "Lian does not remain serene.",
                    "fol": "\u00acp_17(Lian)",
                    "str_fol": "\u00acremains_serene(Lian)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 7,
                    "text": "Anyone who faces pressure either remains serene or gets rattled (or both).",
                    "fol": "\u2200x (p_6(x) \u2192 (p_17(x) \u2228 p_15(x)))",
                    "str_fol": "\u2200x (faces_pressure(x) \u2192 (remains_serene(x) \u2228 gets_rattled(x)))"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Lian",
                "text": "Lian gets rattled.",
                "fol": "p_15(Lian)",
                "str_fol": "gets_rattled(Lian)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 4,
                    "subject": "Lian",
                    "text": "Lian plays it safe.",
                    "fol": "p_4(Lian)",
                    "str_fol": "plays_safe(Lian)",
                    "negation": false
                },
                {
                    "id": 5,
                    "subject": "Lian",
                    "text": "Lian takes risks.",
                    "fol": "p_5(Lian)",
                    "str_fol": "takes_risks(Lian)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 6,
                    "text": "If Lian wins games, then he either plays it safe or takes risks, but not both.",
                    "fol": "p_16(Lian) \u2192 (p_4(Lian) \u2295 p_5(Lian))",
                    "str_fol": "wins_games(Lian) \u2192 (plays_safe(Lian) \u2295 takes_risks(Lian))"
                }
            ],
            "conclusion": {
                "id": 11,
                "subject": "Lian",
                "text": "Lian does not win games.",
                "fol": "\u00acp_16(Lian)",
                "str_fol": "\u00acwins_games(Lian)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 11,
                    "subject": "Lian",
                    "text": "Lian does not win games.",
                    "fol": "\u00acp_16(Lian)",
                    "str_fol": "\u00acwins_games(Lian)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "If Lian is a quick thinker, then he will win games.",
                    "fol": "p_14(Lian) \u2192 p_16(Lian)",
                    "str_fol": "quick_thinker(Lian) \u2192 wins_games(Lian)"
                }
            ],
            "conclusion": {
                "id": 12,
                "subject": "Lian",
                "text": "Lian is not a quick thinker.",
                "fol": "\u00acp_14(Lian)",
                "str_fol": "\u00acquick_thinker(Lian)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 10,
                    "subject": "Lian",
                    "text": "Lian gets rattled.",
                    "fol": "p_15(Lian)",
                    "str_fol": "gets_rattled(Lian)",
                    "negation": false
                },
                {
                    "id": 1,
                    "subject": "Lian",
                    "text": "Lian does not lose composure.",
                    "fol": "\u00acp_1(Lian)",
                    "str_fol": "\u00acloses_composure(Lian)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "If a person either sweats under pressure or gets rattled (but not both), then they lose composure.",
                    "fol": "\u2200x ((p_11(x) \u2295 p_15(x)) \u2192 p_1(x))",
                    "str_fol": "\u2200x ((sweats_under(x) \u2295 gets_rattled(x)) \u2192 loses_composure(x))"
                }
            ],
            "conclusion": {
                "id": 13,
                "subject": "Lian",
                "text": "Lian sweats under pressure.",
                "fol": "p_11(Lian)",
                "str_fol": "sweats_under(Lian)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 12,
                    "subject": "Lian",
                    "text": "Lian is not a quick thinker.",
                    "fol": "\u00acp_14(Lian)",
                    "str_fol": "\u00acquick_thinker(Lian)",
                    "negation": true
                },
                {
                    "id": 3,
                    "subject": "Lian",
                    "text": "Lian makes strategic moves.",
                    "fol": "p_3(Lian)",
                    "str_fol": "makes_strategic_moves(Lian)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "If Lian is focused, then he is a quick thinker and makes strategic moves.",
                    "fol": "p_13(Lian) \u2192 (p_14(Lian) \u2227 p_3(Lian))",
                    "str_fol": "focused(Lian) \u2192 (quick_thinker(Lian) \u2227 makes_strategic_moves(Lian))"
                }
            ],
            "conclusion": {
                "id": 14,
                "subject": "Lian",
                "text": "Lian is not focused.",
                "fol": "\u00acp_13(Lian)",
                "str_fol": "\u00acfocused(Lian)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 13,
                    "subject": "Lian",
                    "text": "Lian sweats under pressure.",
                    "fol": "p_11(Lian)",
                    "str_fol": "sweats_under(Lian)",
                    "negation": false
                },
                {
                    "id": 2,
                    "subject": "Lian",
                    "text": "Lian tenses up.",
                    "fol": "p_2(Lian)",
                    "str_fol": "tenses_up(Lian)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "If Lian either sweats under pressure or tenses up (but not both), then he is nervous.",
                    "fol": "(p_11(Lian) \u2295 p_2(Lian)) \u2192 p_12(Lian)",
                    "str_fol": "(sweats_under(Lian) \u2295 tenses_up(Lian)) \u2192 nervous(Lian)"
                }
            ],
            "conclusion": null
        },
        {
            "facts": [
                {
                    "id": 0,
                    "subject": "Lian",
                    "text": "Lian is able to stay calm during intense competitions.",
                    "fol": "p_0(Lian)",
                    "str_fol": "stays_calm(Lian)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "Lian is either adaptable in his gaming strategy or able to stay calm during intense competitions, but not both.",
                    "fol": "p_9(Lian) \u2295 p_0(Lian)",
                    "str_fol": "is_adaptable(Lian) \u2295 stays_calm(Lian)"
                }
            ],
            "conclusion": {
                "id": 15,
                "subject": "Lian",
                "text": "Lian is not adaptable in his approach to gaming competitions.",
                "fol": "\u00acp_9(Lian)",
                "str_fol": "\u00acis_adaptable(Lian)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 15,
                    "subject": "Lian",
                    "text": "Lian is not adaptable in his approach to gaming competitions.",
                    "fol": "\u00acp_9(Lian)",
                    "str_fol": "\u00acis_adaptable(Lian)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "Lian is either adaptable or experienced, but not both, in his approach to gaming competitions.",
                    "fol": "p_9(Lian) \u2295 p_10(Lian)",
                    "str_fol": "is_adaptable(Lian) \u2295 experienced(Lian)"
                }
            ],
            "conclusion": {
                "id": 16,
                "subject": "Lian",
                "text": "Lian is experienced.",
                "fol": "p_10(Lian)",
                "str_fol": "experienced(Lian)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 16,
                    "subject": "Lian",
                    "text": "Lian is experienced.",
                    "fol": "p_10(Lian)",
                    "str_fol": "experienced(Lian)",
                    "negation": false
                },
                {
                    "id": 14,
                    "subject": "Lian",
                    "text": "Lian is not focused.",
                    "fol": "\u00acp_13(Lian)",
                    "str_fol": "\u00acfocused(Lian)",
                    "negation": true
                }
            ],
            "rules": [],
            "conclusion": null
        }
    ],
    "proof_trace": null,
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "UNCERTAIN",
            "Edited Assumptions": "\u00acp_7(Lian)\n\u00acp_8(Lian)\np_6(Lian)\np_4(Lian)\np_5(Lian)\n\u00acp_1(Lian)\np_3(Lian)\np_2(Lian)\np_0(Lian)\np_17(Lian) \u2192 (p_7(Lian) \u2228 p_8(Lian))\n\u2200x (p_6(x) \u2192 (p_17(x) \u2228 p_15(x)))\np_16(Lian) \u2192 (p_4(Lian) \u2295 p_5(Lian))\np_14(Lian) \u2192 p_16(Lian)\n\u2200x ((p_11(x) \u2295 p_15(x)) \u2192 p_1(x))\np_13(Lian) \u2192 (p_14(Lian) \u2227 p_3(Lian))\n(p_11(Lian) \u2295 p_2(Lian)) \u2192 p_12(Lian)\np_9(Lian) \u2295 p_0(Lian)\np_9(Lian) \u2295 p_10(Lian)",
            "Initial Goal": "(p_10(Lian) \u2295 p_12(Lian)) \u2192 p_13(Lian)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_7(Lian)",
                    "-p_8(Lian)",
                    "p_6(Lian)",
                    "p_4(Lian)",
                    "p_5(Lian)",
                    "-p_1(Lian)",
                    "p_3(Lian)",
                    "p_2(Lian)",
                    "p_0(Lian)",
                    "p_17(Lian) -> (p_7(Lian) | p_8(Lian))",
                    "all x (p_6(x) -> (p_17(x) | p_15(x)))",
                    "p_16(Lian) -> (-(p_4(Lian) <-> p_5(Lian)))",
                    "p_14(Lian) -> p_16(Lian)",
                    "all x (-(p_11(x) <-> p_15(x)) -> p_1(x))",
                    "p_13(Lian) -> (p_14(Lian) & p_3(Lian))",
                    "(-(p_11(Lian) <-> p_2(Lian))) -> p_12(Lian)",
                    "(-(p_9(Lian) <-> p_0(Lian)))",
                    "(-(p_9(Lian) <-> p_10(Lian)))",
                    "p_11(Lian) -> p_12(Lian)"
                ],
                "formulas(goals)": [
                    "(-(p_10(Lian) <-> p_12(Lian))) -> p_13(Lian)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "p_11(Lian) \u2192 p_12(Lian)"
                ]
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_7(Lian)\n\u00acp_8(Lian)\np_6(Lian)\np_4(Lian)\np_5(Lian)\n\u00acp_1(Lian)\np_3(Lian)\np_2(Lian)\np_0(Lian)\n\u00acp_17(Lian)\np_15(Lian)\np_11(Lian)\n\u00acp_9(Lian)\np_10(Lian)\n\u00acp_17(Lian) \u2228 p_7(Lian) \u2228 p_8(Lian)\n\u2200x (\u00acp_6(x) \u2228 p_17(x) \u2228 p_15(x))\n\u00acp_16(Lian) \u2228 \u00ac(p_4(Lian) \u2194 p_5(Lian))\n\u00acp_14(Lian) \u2228 p_16(Lian)\n\u2200x (\u00ac(p_11(x) \u2194 \u00acp_15(x)) \u2228 p_1(x))\n\u00acp_13(Lian) \u2228 (p_14(Lian) \u2227 p_3(Lian))\n\u00ac(p_11(Lian) \u2194 \u00acp_2(Lian)) \u2228 p_12(Lian)\n\u00ac(p_9(Lian) \u2194 \u00acp_0(Lian))\n\u00ac(p_9(Lian) \u2194 \u00acp_10(Lian))\np_12(Lian) \u2192 p_1(Lian)\np_13(Lian) \u2192 p_1(Lian)",
            "Initial Goal": "(p_10(Lian) \u2295 p_12(Lian)) \u2192 p_13(Lian)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_7(Lian).",
                    "-p_8(Lian).",
                    "p_6(Lian).",
                    "p_4(Lian).",
                    "p_5(Lian).",
                    "-p_1(Lian).",
                    "p_3(Lian).",
                    "p_2(Lian).",
                    "p_0(Lian).",
                    "-p_17(Lian).",
                    "p_15(Lian).",
                    "p_11(Lian).",
                    "-p_9(Lian).",
                    "p_10(Lian).",
                    "-p_17(Lian) | p_7(Lian) | p_8(Lian).",
                    "all x (-p_6(x) | p_17(x) | p_15(x)).",
                    "-p_16(Lian) | -(p_4(Lian) <-> p_5(Lian)).",
                    "-p_14(Lian) | p_16(Lian).",
                    "all x (-(p_11(x) <-> -p_15(x)) | p_1(x)).",
                    "-p_13(Lian) | (p_14(Lian) & p_3(Lian)).",
                    "-(p_11(Lian) <-> -p_2(Lian)) | p_12(Lian).",
                    "-(p_9(Lian) <-> -p_0(Lian)).",
                    "-(p_9(Lian) <-> -p_10(Lian)).",
                    "p_12(Lian) -> p_1(Lian).",
                    "p_13(Lian) -> p_1(Lian)."
                ],
                "formulas(goals)": [
                    "-(p_10(Lian) <-> -p_12(Lian)) -> p_13(Lian)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "\u00acp_17(Lian)",
                    "p_15(Lian)",
                    "p_11(Lian)",
                    "\u00acp_9(Lian)",
                    "p_10(Lian)"
                ],
                "added_rules": [
                    "p_12(Lian) \u2192 p_1(Lian)",
                    "p_13(Lian) \u2192 p_1(Lian)"
                ]
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_7(Lian).\n\u00acp_8(Lian).\np_6(Lian).\np_4(Lian).\np_5(Lian).\n\u00acp_1(Lian).\np_3(Lian).\np_2(Lian).\np_0(Lian).\n\u00acp_17(Lian).\np_15(Lian).\np_11(Lian).\n\u00acp_9(Lian).\np_10(Lian).\n(\u00acp_17(Lian) \u2228 p_8(Lian) \u2228 p_7(Lian)).\n\u2200x (\u00acp_6(x) \u2228 p_17(x) \u2228 p_15(x)).\n(\u00acp_16(Lian) \u2228 \u00ac(p_5(Lian) \u2194 p_4(Lian))).\n(\u00acp_14(Lian) \u2228 p_16(Lian)).\n\u2200x (\u00ac(p_11(x) \u2194 \u00acp_15(x)) \u2228 p_1(x)).\n(\u00acp_13(Lian) \u2228 (p_14(Lian) \u2227 p_3(Lian))).\n(\u00ac(p_11(Lian) \u2194 \u00acp_2(Lian)) \u2228 p_12(Lian)).\n\u00ac(p_9(Lian) \u2194 \u00acp_0(Lian)).\n\u00ac(p_9(Lian) \u2194 \u00acp_10(Lian)).\n(\u00acp_12(Lian) \u2228 p_1(Lian)).\n(\u00acp_13(Lian) \u2228 p_1(Lian)).\n(p_11(Lian) \u2228 p_11(Lian)).\n(p_0(Lian) \u2228 p_0(Lian)).\n(\u00acp_17(Lian) \u2228 p_8(Lian) \u2228 p_7(Lian)).\n(\u00acp_16(Lian) \u2228 \u00ac(p_5(Lian) \u2194 p_4(Lian))).\n(\u00acp_17(Lian) \u2228 p_7(Lian) \u2228 p_8(Lian) \u2228 p_7(Lian)).",
            "Initial Goal": "(p_10(Lian) \u2295 p_12(Lian)) \u2192 p_13(Lian)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_7(Lian).",
                    "-p_8(Lian).",
                    "p_6(Lian).",
                    "p_4(Lian).",
                    "p_5(Lian).",
                    "-p_1(Lian).",
                    "p_3(Lian).",
                    "p_2(Lian).",
                    "p_0(Lian).",
                    "-p_17(Lian).",
                    "p_15(Lian).",
                    "p_11(Lian).",
                    "-p_9(Lian).",
                    "p_10(Lian).",
                    "(-p_17(Lian) | p_8(Lian) | p_7(Lian)).",
                    "all x (-p_6(x) | p_17(x) | p_15(x)).",
                    "(-p_16(Lian) | -((p_5(Lian) <-> p_4(Lian)))).",
                    "(-p_14(Lian) | p_16(Lian)).",
                    "all x (-(p_11(x) <-> -p_15(x)) | p_1(x)).",
                    "(-p_13(Lian) | (p_14(Lian) & p_3(Lian))).",
                    "(-(p_11(Lian) <-> -p_2(Lian)) | p_12(Lian)).",
                    "-(p_9(Lian) <-> -p_0(Lian)).",
                    "-(p_9(Lian) <-> -p_10(Lian)).",
                    "(-p_12(Lian) | p_1(Lian)).",
                    "(-p_13(Lian) | p_1(Lian)).",
                    "(p_11(Lian) | p_11(Lian)).",
                    "(p_0(Lian) | p_0(Lian)).",
                    "(-p_17(Lian) | p_8(Lian) | p_7(Lian)).",
                    "(-p_16(Lian) | -((p_5(Lian) <-> p_4(Lian)))).",
                    "(-p_17(Lian) | p_7(Lian) | p_8(Lian) | p_7(Lian))."
                ],
                "formulas(goals)": [
                    "(-(-(p_10(Lian) <-> p_12(Lian))) | p_13(Lian))."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_11(Lian) \u2228 p_11(Lian)",
                    "p_0(Lian) \u2228 p_0(Lian)"
                ],
                "added_rules": [
                    "\u00acp_17(Lian) \u2228 p_8(Lian) \u2228 p_7(Lian)",
                    "\u00acp_16(Lian) \u2228 \u00ac(p_5(Lian) \u2194 p_4(Lian))",
                    "\u00acp_17(Lian) \u2228 p_7(Lian) \u2228 p_8(Lian) \u2228 p_7(Lian)"
                ]
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_7(Lian)\n\u00acp_8(Lian)\np_6(Lian)\np_4(Lian)\np_5(Lian)\n\u00acp_1(Lian)\np_3(Lian)\np_2(Lian)\np_0(Lian)\n\u00acp_17(Lian)\np_15(Lian)\np_11(Lian)\n\u00acp_9(Lian)\np_10(Lian)\n(\u00acp_17(Lian) \u2228 p_8(Lian) \u2228 p_7(Lian))\n\u2200x (\u00acp_6(x) \u2228 p_17(x) \u2228 p_15(x))\n(\u00acp_16(Lian) \u2228 \u00ac(p_5(Lian) \u2194 p_4(Lian)))\n(\u00acp_14(Lian) \u2228 p_16(Lian))\n\u2200x (\u00ac(p_11(x) \u2194 \u00acp_15(x)) \u2228 p_1(x))\n(\u00acp_13(Lian) \u2228 (p_14(Lian) \u2227 p_3(Lian)))\n(\u00ac(p_11(Lian) \u2194 \u00acp_2(Lian)) \u2228 p_12(Lian))\n\u00ac(p_9(Lian) \u2194 \u00acp_0(Lian))\n\u00ac(p_9(Lian) \u2194 \u00acp_10(Lian))\n(\u00acp_12(Lian) \u2228 p_1(Lian))\n(\u00acp_13(Lian) \u2228 p_1(Lian))\n(p_11(Lian) \u2228 p_11(Lian))\n(p_0(Lian) \u2228 p_0(Lian))\n(\u00acp_17(Lian) \u2228 p_8(Lian) \u2228 p_7(Lian))\n(\u00acp_16(Lian) \u2228 \u00ac(p_5(Lian) \u2194 p_4(Lian)))\n(\u00acp_17(Lian) \u2228 p_7(Lian) \u2228 p_8(Lian) \u2228 p_7(Lian))\n(p_17(Lian) \u2228 p_15(Lian))\n(\u00acp_6(Lian) \u2228 p_17(Lian) \u2228 p_15(Lian))\n(\u00acp_17(Lian) \u2228 p_8(Lian) \u2228 p_7(Lian) \u2228 p_8(Lian))\n(p_11(Lian) \u2228 \u00acp_11(Lian))",
            "Initial Goal": "(p_10(Lian) \u2295 p_12(Lian)) \u2192 p_13(Lian)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_7(Lian).",
                    "-p_8(Lian).",
                    "p_6(Lian).",
                    "p_4(Lian).",
                    "p_5(Lian).",
                    "-p_1(Lian).",
                    "p_3(Lian).",
                    "p_2(Lian).",
                    "p_0(Lian).",
                    "-p_17(Lian).",
                    "p_15(Lian).",
                    "p_11(Lian).",
                    "-p_9(Lian).",
                    "p_10(Lian).",
                    "(-p_17(Lian) | p_8(Lian) | p_7(Lian)).",
                    "all x (-p_6(x) | p_17(x) | p_15(x)).",
                    "(-p_16(Lian) | -(p_5(Lian) <-> p_4(Lian))).",
                    "(-p_14(Lian) | p_16(Lian)).",
                    "all x (-(p_11(x) <-> -p_15(x)) | p_1(x)).",
                    "(-p_13(Lian) | (p_14(Lian) & p_3(Lian))).",
                    "(-(p_11(Lian) <-> -p_2(Lian)) | p_12(Lian)).",
                    "-(p_9(Lian) <-> -p_0(Lian)).",
                    "-(p_9(Lian) <-> -p_10(Lian)).",
                    "(-p_12(Lian) | p_1(Lian)).",
                    "(-p_13(Lian) | p_1(Lian)).",
                    "(p_11(Lian) | p_11(Lian)).",
                    "(p_0(Lian) | p_0(Lian)).",
                    "(-p_17(Lian) | p_8(Lian) | p_7(Lian)).",
                    "(-p_16(Lian) | -(p_5(Lian) <-> p_4(Lian))).",
                    "(-p_17(Lian) | p_7(Lian) | p_8(Lian) | p_7(Lian)).",
                    "(p_17(Lian) | p_15(Lian)).",
                    "(-p_6(Lian) | p_17(Lian) | p_15(Lian)).",
                    "(-p_17(Lian) | p_8(Lian) | p_7(Lian) | p_8(Lian)).",
                    "(p_11(Lian) | -p_11(Lian))."
                ],
                "formulas(goals)": [
                    "(-(p_10(Lian) <-> p_12(Lian))) -> p_13(Lian)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "p_17(Lian) \u2228 p_15(Lian)",
                    "\u00acp_6(Lian) \u2228 p_17(Lian) \u2228 p_15(Lian)",
                    "\u00acp_17(Lian) \u2228 p_8(Lian) \u2228 p_7(Lian) \u2228 p_8(Lian)",
                    "p_11(Lian) \u2228 \u00acp_11(Lian)"
                ]
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_13(Lian)",
            "Initial Goal": "(p_10(Lian) \u2295 p_12(Lian)) \u2192 p_13(Lian)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_13(Lian)"
                ],
                "formulas(goals)": [
                    "(-(p_10(Lian) <-> p_12(Lian))) -> p_13(Lian)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_13(Lian)"
                ],
                "added_rules": []
            }
        }
    ]
}