{
    "background_story": "Anna was a quirky and creative entrepreneur who turned her passion into a unique business venture. She opened a small, vintage-inspired candy shop specializing in handmade gums and quirky confections. Anna's gum creations, ranging from classic spearmint to innovative flavors like strawberry-balsamic, quickly gained a loyal following. Her shop became a local favorite, not just for the delicious treats but also for the cozy atmosphere and Anna's infectious enthusiasm. As her brand grew, Anna remained committed to using only the finest, natural ingredients and supporting local artisans. Her love for gum had brought the community together, one piece of chewy, sugary goodness at a time, earning her the title of the 'Gum Guru' of the town.",
    "predicates": [
        {
            "id": 0,
            "name": "pursues_dream"
        },
        {
            "id": 1,
            "name": "makes_chocolate"
        },
        {
            "id": 2,
            "name": "takes_risks"
        },
        {
            "id": 3,
            "name": "achieves_success"
        },
        {
            "id": 4,
            "name": "donates_time"
        },
        {
            "id": 5,
            "name": "earns_respect"
        },
        {
            "id": 6,
            "name": "passionate_entrepreneur"
        },
        {
            "id": 7,
            "name": "create_unique_products"
        },
        {
            "id": 8,
            "name": "build_loyal_customer_base"
        },
        {
            "id": 9,
            "name": "makes_people_happy"
        },
        {
            "id": 10,
            "name": "owns_business"
        },
        {
            "id": 11,
            "name": "helps_others"
        },
        {
            "id": 12,
            "name": "sells_candy"
        },
        {
            "id": 13,
            "name": "is_innovative"
        },
        {
            "id": 14,
            "name": "value_quality"
        },
        {
            "id": 15,
            "name": "support_local"
        },
        {
            "id": 16,
            "name": "shares_joy"
        },
        {
            "id": 17,
            "name": "brings_smiles"
        },
        {
            "id": 18,
            "name": "visionary"
        },
        {
            "id": 19,
            "name": "foster_community"
        },
        {
            "id": 20,
            "name": "has_ideas"
        },
        {
            "id": 21,
            "name": "works_hard"
        },
        {
            "id": 22,
            "name": "runs_store"
        },
        {
            "id": 23,
            "name": "thinks_outside_box"
        },
        {
            "id": 24,
            "name": "develops_new_ideas"
        },
        {
            "id": 25,
            "name": "shares_knowledge"
        },
        {
            "id": 26,
            "name": "supports_community"
        }
    ],
    "subject_name": "Anna",
    "subject_category": "human",
    "keyword": "gum",
    "all_facts": [
        {
            "id": 0,
            "subject": "Anna",
            "text": "Anna pursues her dream.",
            "fol": "p_0(Anna)",
            "str_fol": "pursues_dream(Anna)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Anna",
            "text": "Anna makes chocolate.",
            "fol": "p_1(Anna)",
            "str_fol": "makes_chocolate(Anna)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Anna",
            "text": "Anna takes risks.",
            "fol": "p_2(Anna)",
            "str_fol": "takes_risks(Anna)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Anna",
            "text": "Anna does not achieve success.",
            "fol": "\u00acp_3(Anna)",
            "str_fol": "\u00acachieves_success(Anna)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Anna",
            "text": "Anna does not donate her time.",
            "fol": "\u00acp_4(Anna)",
            "str_fol": "\u00acdonates_time(Anna)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Anna",
            "text": "Anna does not earn respect.",
            "fol": "\u00acp_5(Anna)",
            "str_fol": "\u00acearns_respect(Anna)",
            "negation": true
        },
        {
            "id": 6,
            "subject": "Anna",
            "text": "Anna does not help others.",
            "fol": "\u00acp_11(Anna)",
            "str_fol": "\u00achelps_others(Anna)",
            "negation": true
        },
        {
            "id": 7,
            "subject": "Anna",
            "text": "Anna is not innovative.",
            "fol": "\u00acp_13(Anna)",
            "str_fol": "\u00acis_innovative(Anna)",
            "negation": true
        },
        {
            "id": 8,
            "subject": "Anna",
            "text": "Anna sells candy.",
            "fol": "p_12(Anna)",
            "str_fol": "sells_candy(Anna)",
            "negation": false
        },
        {
            "id": 9,
            "subject": "Anna",
            "text": "Anna owns a business.",
            "fol": "p_10(Anna)",
            "str_fol": "owns_business(Anna)",
            "negation": false
        },
        {
            "id": 10,
            "subject": "Anna",
            "text": "Anna is a passionate entrepreneur.",
            "fol": "p_6(Anna)",
            "str_fol": "passionate_entrepreneur(Anna)",
            "negation": false
        },
        {
            "id": 11,
            "subject": "Anna",
            "text": "Anna makes people happy.",
            "fol": "p_9(Anna)",
            "str_fol": "makes_people_happy(Anna)",
            "negation": false
        },
        {
            "id": 12,
            "subject": "Anna",
            "text": "Anna does not create unique products.",
            "fol": "\u00acp_7(Anna)",
            "str_fol": "\u00accreate_unique_products(Anna)",
            "negation": true
        }
    ],
    "context_facts": [
        {
            "id": 4,
            "subject": "Anna",
            "text": "Anna does not donate her time.",
            "fol": "\u00acp_4(Anna)",
            "str_fol": "\u00acdonates_time(Anna)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Anna",
            "text": "Anna does not earn respect.",
            "fol": "\u00acp_5(Anna)",
            "str_fol": "\u00acearns_respect(Anna)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Anna",
            "text": "Anna takes risks.",
            "fol": "p_2(Anna)",
            "str_fol": "takes_risks(Anna)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Anna",
            "text": "Anna does not achieve success.",
            "fol": "\u00acp_3(Anna)",
            "str_fol": "\u00acachieves_success(Anna)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Anna",
            "text": "Anna makes chocolate.",
            "fol": "p_1(Anna)",
            "str_fol": "makes_chocolate(Anna)",
            "negation": false
        },
        {
            "id": 0,
            "subject": "Anna",
            "text": "Anna pursues her dream.",
            "fol": "p_0(Anna)",
            "str_fol": "pursues_dream(Anna)",
            "negation": false
        }
    ],
    "context_rules": [
        {
            "id": 7,
            "text": "Anyone who helps others or donates their time earns respect.",
            "fol": "\u2200x ((p_11(x) \u2228 p_4(x)) \u2192 p_5(x))",
            "str_fol": "\u2200x ((helps_others(x) \u2228 donates_time(x)) \u2192 earns_respect(x))"
        },
        {
            "id": 6,
            "text": "If Anna is innovative and takes risks, then she achieves success.",
            "fol": "(p_13(Anna) \u2227 p_2(Anna)) \u2192 p_3(Anna)",
            "str_fol": "(is_innovative(Anna) \u2227 takes_risks(Anna)) \u2192 achieves_success(Anna)"
        },
        {
            "id": 5,
            "text": "If Anna either makes chocolate or sells candy (but not both), then she is innovative.",
            "fol": "(p_1(Anna) \u2295 p_12(Anna)) \u2192 p_13(Anna)",
            "str_fol": "(makes_chocolate(Anna) \u2295 sells_candy(Anna)) \u2192 is_innovative(Anna)"
        },
        {
            "id": 4,
            "text": "If Anna sells candy, then she owns a business.",
            "fol": "p_12(Anna) \u2192 p_10(Anna)",
            "str_fol": "sells_candy(Anna) \u2192 owns_business(Anna)"
        },
        {
            "id": 3,
            "text": "If Anna pursues her dream, then she is a passionate entrepreneur.",
            "fol": "p_0(Anna) \u2192 p_6(Anna)",
            "str_fol": "pursues_dream(Anna) \u2192 passionate_entrepreneur(Anna)"
        },
        {
            "id": 2,
            "text": "If Anna owns a business, then she either makes people happy or helps others, but not both.",
            "fol": "p_10(Anna) \u2192 (p_9(Anna) \u2295 p_11(Anna))",
            "str_fol": "owns_business(Anna) \u2192 (makes_people_happy(Anna) \u2295 helps_others(Anna))"
        },
        {
            "id": 1,
            "text": "Anna either builds a loyal customer base or makes people happy.",
            "fol": "p_8(Anna) \u2228 p_9(Anna)",
            "str_fol": "build_loyal_customer_base(Anna) \u2228 makes_people_happy(Anna)"
        },
        {
            "id": 0,
            "text": "If Anna is a passionate entrepreneur, then she creates unique products and builds a loyal customer base.",
            "fol": "p_6(Anna) \u2192 (p_7(Anna) \u2227 p_8(Anna))",
            "str_fol": "passionate_entrepreneur(Anna) \u2192 (create_unique_products(Anna) \u2227 build_loyal_customer_base(Anna))"
        }
    ],
    "context": [
        {
            "id": 4,
            "subject": "Anna",
            "text": "Anna does not donate her time.",
            "fol": "\u00acp_4(Anna)",
            "str_fol": "\u00acdonates_time(Anna)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Anna",
            "text": "Anna does not earn respect.",
            "fol": "\u00acp_5(Anna)",
            "str_fol": "\u00acearns_respect(Anna)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Anna",
            "text": "Anna takes risks.",
            "fol": "p_2(Anna)",
            "str_fol": "takes_risks(Anna)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Anna",
            "text": "Anna does not achieve success.",
            "fol": "\u00acp_3(Anna)",
            "str_fol": "\u00acachieves_success(Anna)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Anna",
            "text": "Anna makes chocolate.",
            "fol": "p_1(Anna)",
            "str_fol": "makes_chocolate(Anna)",
            "negation": false
        },
        {
            "id": 0,
            "subject": "Anna",
            "text": "Anna pursues her dream.",
            "fol": "p_0(Anna)",
            "str_fol": "pursues_dream(Anna)",
            "negation": false
        },
        {
            "id": 7,
            "text": "Anyone who helps others or donates their time earns respect.",
            "fol": "\u2200x ((p_11(x) \u2228 p_4(x)) \u2192 p_5(x))",
            "str_fol": "\u2200x ((helps_others(x) \u2228 donates_time(x)) \u2192 earns_respect(x))"
        },
        {
            "id": 6,
            "text": "If Anna is innovative and takes risks, then she achieves success.",
            "fol": "(p_13(Anna) \u2227 p_2(Anna)) \u2192 p_3(Anna)",
            "str_fol": "(is_innovative(Anna) \u2227 takes_risks(Anna)) \u2192 achieves_success(Anna)"
        },
        {
            "id": 5,
            "text": "If Anna either makes chocolate or sells candy (but not both), then she is innovative.",
            "fol": "(p_1(Anna) \u2295 p_12(Anna)) \u2192 p_13(Anna)",
            "str_fol": "(makes_chocolate(Anna) \u2295 sells_candy(Anna)) \u2192 is_innovative(Anna)"
        },
        {
            "id": 4,
            "text": "If Anna sells candy, then she owns a business.",
            "fol": "p_12(Anna) \u2192 p_10(Anna)",
            "str_fol": "sells_candy(Anna) \u2192 owns_business(Anna)"
        },
        {
            "id": 3,
            "text": "If Anna pursues her dream, then she is a passionate entrepreneur.",
            "fol": "p_0(Anna) \u2192 p_6(Anna)",
            "str_fol": "pursues_dream(Anna) \u2192 passionate_entrepreneur(Anna)"
        },
        {
            "id": 2,
            "text": "If Anna owns a business, then she either makes people happy or helps others, but not both.",
            "fol": "p_10(Anna) \u2192 (p_9(Anna) \u2295 p_11(Anna))",
            "str_fol": "owns_business(Anna) \u2192 (makes_people_happy(Anna) \u2295 helps_others(Anna))"
        },
        {
            "id": 1,
            "text": "Anna either builds a loyal customer base or makes people happy.",
            "fol": "p_8(Anna) \u2228 p_9(Anna)",
            "str_fol": "build_loyal_customer_base(Anna) \u2228 makes_people_happy(Anna)"
        },
        {
            "id": 0,
            "text": "If Anna is a passionate entrepreneur, then she creates unique products and builds a loyal customer base.",
            "fol": "p_6(Anna) \u2192 (p_7(Anna) \u2227 p_8(Anna))",
            "str_fol": "passionate_entrepreneur(Anna) \u2192 (create_unique_products(Anna) \u2227 build_loyal_customer_base(Anna))"
        }
    ],
    "context_fol": "\u00acp_4(Anna)\n\u00acp_5(Anna)\np_2(Anna)\n\u00acp_3(Anna)\np_1(Anna)\np_0(Anna)\n\u2200x ((p_11(x) \u2228 p_4(x)) \u2192 p_5(x))\n(p_13(Anna) \u2227 p_2(Anna)) \u2192 p_3(Anna)\n(p_1(Anna) \u2295 p_12(Anna)) \u2192 p_13(Anna)\np_12(Anna) \u2192 p_10(Anna)\np_0(Anna) \u2192 p_6(Anna)\np_10(Anna) \u2192 (p_9(Anna) \u2295 p_11(Anna))\np_8(Anna) \u2228 p_9(Anna)\np_6(Anna) \u2192 (p_7(Anna) \u2227 p_8(Anna))",
    "conclusion": {
        "id": 12,
        "subject": "Anna",
        "text": "Anna does not create unique products.",
        "fol": "\u00acp_7(Anna)",
        "str_fol": "\u00accreate_unique_products(Anna)",
        "negation": true
    },
    "initial_answer": "False",
    "initial_goal": "\u00acp_7(Anna)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 4,
                    "subject": "Anna",
                    "text": "Anna does not donate her time.",
                    "fol": "\u00acp_4(Anna)",
                    "str_fol": "\u00acdonates_time(Anna)",
                    "negation": true
                },
                {
                    "id": 5,
                    "subject": "Anna",
                    "text": "Anna does not earn respect.",
                    "fol": "\u00acp_5(Anna)",
                    "str_fol": "\u00acearns_respect(Anna)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 7,
                    "text": "Anyone who helps others or donates their time earns respect.",
                    "fol": "\u2200x ((p_11(x) \u2228 p_4(x)) \u2192 p_5(x))",
                    "str_fol": "\u2200x ((helps_others(x) \u2228 donates_time(x)) \u2192 earns_respect(x))"
                }
            ],
            "conclusion": {
                "id": 6,
                "subject": "Anna",
                "text": "Anna does not help others.",
                "fol": "\u00acp_11(Anna)",
                "str_fol": "\u00achelps_others(Anna)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 2,
                    "subject": "Anna",
                    "text": "Anna takes risks.",
                    "fol": "p_2(Anna)",
                    "str_fol": "takes_risks(Anna)",
                    "negation": false
                },
                {
                    "id": 3,
                    "subject": "Anna",
                    "text": "Anna does not achieve success.",
                    "fol": "\u00acp_3(Anna)",
                    "str_fol": "\u00acachieves_success(Anna)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 6,
                    "text": "If Anna is innovative and takes risks, then she achieves success.",
                    "fol": "(p_13(Anna) \u2227 p_2(Anna)) \u2192 p_3(Anna)",
                    "str_fol": "(is_innovative(Anna) \u2227 takes_risks(Anna)) \u2192 achieves_success(Anna)"
                }
            ],
            "conclusion": {
                "id": 7,
                "subject": "Anna",
                "text": "Anna is not innovative.",
                "fol": "\u00acp_13(Anna)",
                "str_fol": "\u00acis_innovative(Anna)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 1,
                    "subject": "Anna",
                    "text": "Anna makes chocolate.",
                    "fol": "p_1(Anna)",
                    "str_fol": "makes_chocolate(Anna)",
                    "negation": false
                },
                {
                    "id": 7,
                    "subject": "Anna",
                    "text": "Anna is not innovative.",
                    "fol": "\u00acp_13(Anna)",
                    "str_fol": "\u00acis_innovative(Anna)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "If Anna either makes chocolate or sells candy (but not both), then she is innovative.",
                    "fol": "(p_1(Anna) \u2295 p_12(Anna)) \u2192 p_13(Anna)",
                    "str_fol": "(makes_chocolate(Anna) \u2295 sells_candy(Anna)) \u2192 is_innovative(Anna)"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Anna",
                "text": "Anna sells candy.",
                "fol": "p_12(Anna)",
                "str_fol": "sells_candy(Anna)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 8,
                    "subject": "Anna",
                    "text": "Anna sells candy.",
                    "fol": "p_12(Anna)",
                    "str_fol": "sells_candy(Anna)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "If Anna sells candy, then she owns a business.",
                    "fol": "p_12(Anna) \u2192 p_10(Anna)",
                    "str_fol": "sells_candy(Anna) \u2192 owns_business(Anna)"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Anna",
                "text": "Anna owns a business.",
                "fol": "p_10(Anna)",
                "str_fol": "owns_business(Anna)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 0,
                    "subject": "Anna",
                    "text": "Anna pursues her dream.",
                    "fol": "p_0(Anna)",
                    "str_fol": "pursues_dream(Anna)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "If Anna pursues her dream, then she is a passionate entrepreneur.",
                    "fol": "p_0(Anna) \u2192 p_6(Anna)",
                    "str_fol": "pursues_dream(Anna) \u2192 passionate_entrepreneur(Anna)"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Anna",
                "text": "Anna is a passionate entrepreneur.",
                "fol": "p_6(Anna)",
                "str_fol": "passionate_entrepreneur(Anna)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 9,
                    "subject": "Anna",
                    "text": "Anna owns a business.",
                    "fol": "p_10(Anna)",
                    "str_fol": "owns_business(Anna)",
                    "negation": false
                },
                {
                    "id": 6,
                    "subject": "Anna",
                    "text": "Anna does not help others.",
                    "fol": "\u00acp_11(Anna)",
                    "str_fol": "\u00achelps_others(Anna)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "If Anna owns a business, then she either makes people happy or helps others, but not both.",
                    "fol": "p_10(Anna) \u2192 (p_9(Anna) \u2295 p_11(Anna))",
                    "str_fol": "owns_business(Anna) \u2192 (makes_people_happy(Anna) \u2295 helps_others(Anna))"
                }
            ],
            "conclusion": {
                "id": 11,
                "subject": "Anna",
                "text": "Anna makes people happy.",
                "fol": "p_9(Anna)",
                "str_fol": "makes_people_happy(Anna)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 11,
                    "subject": "Anna",
                    "text": "Anna makes people happy.",
                    "fol": "p_9(Anna)",
                    "str_fol": "makes_people_happy(Anna)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "Anna either builds a loyal customer base or makes people happy.",
                    "fol": "p_8(Anna) \u2228 p_9(Anna)",
                    "str_fol": "build_loyal_customer_base(Anna) \u2228 makes_people_happy(Anna)"
                }
            ],
            "conclusion": null
        },
        {
            "facts": [
                {
                    "id": 10,
                    "subject": "Anna",
                    "text": "Anna is a passionate entrepreneur.",
                    "fol": "p_6(Anna)",
                    "str_fol": "passionate_entrepreneur(Anna)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "If Anna is a passionate entrepreneur, then she creates unique products and builds a loyal customer base.",
                    "fol": "p_6(Anna) \u2192 (p_7(Anna) \u2227 p_8(Anna))",
                    "str_fol": "passionate_entrepreneur(Anna) \u2192 (create_unique_products(Anna) \u2227 build_loyal_customer_base(Anna))"
                }
            ],
            "conclusion": {
                "id": 12,
                "subject": "Anna",
                "text": "Anna does not create unique products.",
                "fol": "\u00acp_7(Anna)",
                "str_fol": "\u00accreate_unique_products(Anna)",
                "negation": true
            }
        }
    ],
    "proof_trace": "5 p_0(Anna) -> p_6(Anna).  [assumption].\n7 p_6(Anna) -> p_7(Anna) & p_8(Anna).  [assumption].\n8 --p_7(Anna).  [goal].\n18 -p_0(Anna) | p_6(Anna).  [clausify(5)].\n19 p_0(Anna).  [assumption].\n25 p_6(Anna).  [resolve(18,a,19,a)].\n26 -p_6(Anna) | p_7(Anna).  [clausify(7)].\n27 p_7(Anna).  [resolve(25,a,26,a)].\n28 -p_7(Anna).  [deny(8)].\n32 $F.  [resolve(27,a,28,a)].",
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_4(Anna)\n\u00acp_5(Anna)\np_2(Anna)\n\u00acp_3(Anna)\np_1(Anna)\np_0(Anna)\n\u00acp_13(Anna)\np_8(Anna)\np_7(Anna) \u2228 p_12(Anna)\n\u2200x ((p_11(x) \u2192 p_5(x)) \u2227 (p_4(x) \u2192 p_5(x)))\n(p_13(Anna) \u2227 p_2(Anna)) \u2192 p_3(Anna)\n\u00ac(p_1(Anna) \u2194 p_12(Anna)) \u2192 p_13(Anna)\n\u00acp_10(Anna) \u2192 \u00acp_12(Anna)\np_0(Anna) \u2192 p_6(Anna)\np_10(Anna) \u2192 \u00ac(p_9(Anna) \u2194 p_11(Anna))\np_8(Anna) \u2228 p_9(Anna)\np_6(Anna) \u2192 (p_7(Anna) \u2227 p_8(Anna))",
            "Initial Goal": "\u00acp_7(Anna)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Anna)",
                    "-p_5(Anna)",
                    "p_2(Anna)",
                    "-p_3(Anna)",
                    "p_1(Anna)",
                    "p_0(Anna)",
                    "-p_13(Anna)",
                    "p_8(Anna)",
                    "p_7(Anna) | p_12(Anna)",
                    "all x ((p_11(x) -> p_5(x)) & (p_4(x) -> p_5(x)))",
                    "(p_13(Anna) & p_2(Anna)) -> p_3(Anna)",
                    "(-(p_1(Anna) <-> p_12(Anna))) -> p_13(Anna)",
                    "-p_10(Anna) -> -p_12(Anna)",
                    "p_0(Anna) -> p_6(Anna)",
                    "p_10(Anna) -> (-(p_9(Anna) <-> p_11(Anna)))",
                    "p_8(Anna) | p_9(Anna)",
                    "p_6(Anna) -> (p_7(Anna) & p_8(Anna))"
                ],
                "formulas(goals)": [
                    "p_7(Anna)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u2200x ((p_11(x) \u2228 p_4(x)) \u2192 p_5(x))",
                    "p_12(Anna) \u2192 p_10(Anna)"
                ],
                "added_facts": [
                    "\u00acp_13(Anna)",
                    "p_8(Anna)",
                    "p_7(Anna) \u2228 p_12(Anna)"
                ],
                "added_rules": [
                    "\u2200x ((p_11(x) \u2192 p_5(x)) \u2227 (p_4(x) \u2192 p_5(x)))",
                    "\u00acp_10(Anna) \u2192 \u00acp_12(Anna)"
                ]
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_4(Anna)\n\u00acp_5(Anna)\np_2(Anna)\n\u00acp_3(Anna)\np_1(Anna)\np_0(Anna)\n\u00acp_13(Anna)\np_8(Anna)\n\u00acp_7(Anna) \u2192 p_12(Anna)\n\u2200x ((p_11(x) \u2192 p_5(x)) \u2227 (p_4(x) \u2192 p_5(x)))\n(p_13(Anna) \u2227 p_2(Anna)) \u2192 p_3(Anna)\n\u00ac(p_1(Anna) \u2194 p_12(Anna)) \u2192 p_13(Anna)\n\u00acp_10(Anna) \u2192 \u00acp_12(Anna)\np_0(Anna) \u2192 p_6(Anna)\np_10(Anna) \u2192 ((p_9(Anna) \u2227 \u00acp_11(Anna)) \u2228 (\u00acp_9(Anna) \u2227 p_11(Anna)))\np_8(Anna) \u2228 p_9(Anna)\np_6(Anna) \u2192 (p_7(Anna) \u2227 p_8(Anna))\np_6(Anna)\np_7(Anna) \u2227 p_8(Anna)",
            "Initial Goal": "\u00acp_7(Anna)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Anna)",
                    "-p_5(Anna)",
                    "p_2(Anna)",
                    "-p_3(Anna)",
                    "p_1(Anna)",
                    "p_0(Anna)",
                    "-p_13(Anna)",
                    "p_8(Anna)",
                    "(-p_7(Anna) -> p_12(Anna))",
                    "(all x ((p_11(x) -> p_5(x)) & (p_4(x) -> p_5(x))))",
                    "((p_13(Anna) & p_2(Anna)) -> p_3(Anna))",
                    "(-(p_1(Anna) <-> p_12(Anna)) -> p_13(Anna))",
                    "(-p_10(Anna) -> -p_12(Anna))",
                    "(p_0(Anna) -> p_6(Anna))",
                    "(p_10(Anna) -> ((p_9(Anna) & -p_11(Anna)) | (-p_9(Anna) & p_11(Anna))))",
                    "(p_8(Anna) | p_9(Anna))",
                    "(p_6(Anna) -> (p_7(Anna) & p_8(Anna)))",
                    "p_6(Anna)",
                    "(p_7(Anna) & p_8(Anna))"
                ],
                "formulas(goals)": [
                    "- -p_7(Anna)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_7(Anna) \u2228 p_12(Anna)",
                    "p_10(Anna) \u2192 \u00ac(p_9(Anna) \u2194 p_11(Anna))"
                ],
                "added_facts": [
                    "p_6(Anna)",
                    "p_7(Anna) \u2227 p_8(Anna)"
                ],
                "added_rules": [
                    "\u00acp_7(Anna) \u2192 p_12(Anna)",
                    "p_10(Anna) \u2192 ((p_9(Anna) \u2227 \u00acp_11(Anna)) \u2228 (\u00acp_9(Anna) \u2227 p_11(Anna)))"
                ]
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_4(Anna).\n\u00acp_5(Anna).\np_2(Anna).\n\u00acp_3(Anna).\np_1(Anna).\np_0(Anna).\n\u00acp_13(Anna).\np_8(Anna).\n(\u00acp_7(Anna)) \u2192 p_12(Anna).\n\u2200x ((p_11(x) \u2192 p_5(x)) \u2227 (p_4(x) \u2192 p_5(x))).\n((p_13(Anna) \u2227 p_2(Anna)) \u2192 p_3(Anna)).\n(\u00ac(p_1(Anna) \u2194 p_12(Anna))) \u2192 p_13(Anna).\n(\u00acp_10(Anna)) \u2192 (\u00acp_12(Anna)).\np_0(Anna) \u2192 p_6(Anna).\np_10(Anna) \u2192 ((p_9(Anna) \u2227 \u00acp_11(Anna)) \u2228 (\u00acp_9(Anna) \u2227 p_11(Anna))).\np_8(Anna) \u2228 p_9(Anna).\np_6(Anna).\np_6(Anna) \u2192 \u00acp_7(Anna).",
            "Initial Goal": "\u00acp_7(Anna)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "- p_4(Anna).",
                    "- p_5(Anna).",
                    "p_2(Anna).",
                    "- p_3(Anna).",
                    "p_1(Anna).",
                    "p_0(Anna).",
                    "- p_13(Anna).",
                    "p_8(Anna).",
                    "(- p_7(Anna)) -> p_12(Anna).",
                    "(all x ((p_11(x) -> p_5(x)) & (p_4(x) -> p_5(x)))).",
                    "((p_13(Anna) & p_2(Anna)) -> p_3(Anna)).",
                    "(-(p_1(Anna) <-> p_12(Anna))) -> p_13(Anna).",
                    "(- p_10(Anna)) -> (- p_12(Anna)).",
                    "p_0(Anna) -> p_6(Anna).",
                    "p_10(Anna) -> ((p_9(Anna) & - p_11(Anna)) | (- p_9(Anna) & p_11(Anna))).",
                    "p_8(Anna) | p_9(Anna).",
                    "p_6(Anna).",
                    "p_6(Anna) -> (- p_7(Anna))."
                ],
                "formulas(goals)": [
                    "- p_7(Anna)."
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "p_7(Anna) \u2227 p_8(Anna)"
                ],
                "removed_rules": [
                    "p_6(Anna) \u2192 (p_7(Anna) \u2227 p_8(Anna))"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_6(Anna) \u2192 \u00acp_7(Anna)"
                ]
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_4(Anna)\n\u00acp_5(Anna)\np_2(Anna)\n\u00acp_3(Anna)\np_1(Anna)\np_0(Anna)\n\u00acp_13(Anna)\np_8(Anna)\n(\u00acp_7(Anna)) \u2192 p_12(Anna)\n\u2200x ((p_11(x) \u2192 p_5(x)) \u2227 (p_4(x) \u2192 p_5(x)))\n((p_13(Anna) \u2227 p_2(Anna)) \u2192 p_3(Anna))\n(\u00acp_10(Anna)) \u2192 (\u00acp_12(Anna))\np_0(Anna) \u2192 p_6(Anna)\np_10(Anna) \u2192 ((p_9(Anna) \u2227 \u00acp_11(Anna)) \u2228 (\u00acp_9(Anna) \u2227 p_11(Anna)))\np_8(Anna) \u2228 p_9(Anna)\np_6(Anna)\np_8(Anna) \u2192 \u00acp_9(Anna)",
            "Initial Goal": "\u00acp_7(Anna)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Anna)",
                    "-p_5(Anna)",
                    "p_2(Anna)",
                    "-p_3(Anna)",
                    "p_1(Anna)",
                    "p_0(Anna)",
                    "-p_13(Anna)",
                    "p_8(Anna)",
                    "(-p_7(Anna)) -> p_12(Anna)",
                    "all x ((p_11(x) -> p_5(x)) & (p_4(x) -> p_5(x)))",
                    "((p_13(Anna) & p_2(Anna)) -> p_3(Anna))",
                    "(-p_10(Anna)) -> (-p_12(Anna))",
                    "p_0(Anna) -> p_6(Anna)",
                    "p_10(Anna) -> ((p_9(Anna) & -p_11(Anna)) | (-p_9(Anna) & p_11(Anna)))",
                    "p_8(Anna) | p_9(Anna)",
                    "p_6(Anna)",
                    "p_8(Anna) -> -p_9(Anna)"
                ],
                "formulas(goals)": [
                    "p_7(Anna)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "(\u00ac(p_1(Anna) \u2194 p_12(Anna))) \u2192 p_13(Anna)",
                    "p_6(Anna) \u2192 \u00acp_7(Anna)"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_8(Anna) \u2192 \u00acp_9(Anna)"
                ]
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_4(Anna)\n\u00acp_5(Anna)\np_2(Anna)\n\u00acp_3(Anna)\np_1(Anna)\np_0(Anna)\n\u00acp_13(Anna)\np_8(Anna)\n\u2200x ((p_11(x) \u2192 p_5(x)) \u2227 (p_4(x) \u2192 p_5(x)))\n((p_13(Anna) \u2227 p_2(Anna)) \u2192 p_3(Anna))\n(\u00acp_10(Anna)) \u2192 (\u00acp_12(Anna))\np_0(Anna) \u2192 p_6(Anna)\np_10(Anna) \u2192 ((p_9(Anna) \u2227 \u00acp_11(Anna)) \u2228 (\u00acp_9(Anna) \u2227 p_11(Anna)))\np_8(Anna) \u2228 p_9(Anna)\np_6(Anna)\np_8(Anna) \u2192 \u00acp_9(Anna)\np_7(Anna) \u2192 p_12(Anna)",
            "Initial Goal": "\u00acp_7(Anna)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Anna)",
                    "-p_5(Anna)",
                    "p_2(Anna)",
                    "-p_3(Anna)",
                    "p_1(Anna)",
                    "p_0(Anna)",
                    "-p_13(Anna)",
                    "p_8(Anna)",
                    "all x ((p_11(x) -> p_5(x)) & (p_4(x) -> p_5(x)))",
                    "(p_13(Anna) & p_2(Anna)) -> p_3(Anna)",
                    "(-p_10(Anna)) -> (-p_12(Anna))",
                    "p_0(Anna) -> p_6(Anna)",
                    "p_10(Anna) -> ((p_9(Anna) & -p_11(Anna)) | (-p_9(Anna) & p_11(Anna)))",
                    "p_8(Anna) | p_9(Anna)",
                    "p_6(Anna)",
                    "p_8(Anna) -> -p_9(Anna)",
                    "p_7(Anna) -> p_12(Anna)"
                ],
                "formulas(goals)": [
                    "-p_7(Anna)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "(\u00acp_7(Anna)) \u2192 p_12(Anna)"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_7(Anna) \u2192 p_12(Anna)"
                ]
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_4(Anna)\n\u00acp_5(Anna)\np_2(Anna)\n\u00acp_3(Anna)\np_1(Anna)\np_0(Anna)\n\u00acp_13(Anna)\np_8(Anna)\n\u2200x ((p_11(x) \u2192 p_5(x)) \u2227 (p_4(x) \u2192 p_5(x)))\n((p_13(Anna) \u2227 p_2(Anna)) \u2192 p_3(Anna))\n(\u00acp_10(Anna)) \u2192 (\u00acp_12(Anna))\np_0(Anna) \u2192 p_6(Anna)\np_10(Anna) \u2192 ((p_9(Anna) \u2227 \u00acp_11(Anna)) \u2228 (\u00acp_9(Anna) \u2227 p_11(Anna)))\np_8(Anna) \u2228 p_9(Anna)\np_6(Anna)\np_8(Anna) \u2192 \u00acp_9(Anna)\n\u00acp_12(Anna) \u2192 p_7(Anna)",
            "Initial Goal": "\u00acp_7(Anna)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Anna)",
                    "-p_5(Anna)",
                    "p_2(Anna)",
                    "-p_3(Anna)",
                    "p_1(Anna)",
                    "p_0(Anna)",
                    "-p_13(Anna)",
                    "p_8(Anna)",
                    "all x ((p_11(x) -> p_5(x)) & (p_4(x) -> p_5(x)))",
                    "((p_13(Anna) & p_2(Anna)) -> p_3(Anna))",
                    "(-p_10(Anna) -> -p_12(Anna))",
                    "(p_0(Anna) -> p_6(Anna))",
                    "(p_10(Anna) -> ((p_9(Anna) & -p_11(Anna)) | (-p_9(Anna) & p_11(Anna))))",
                    "(p_8(Anna) | p_9(Anna))",
                    "p_6(Anna)",
                    "(p_8(Anna) -> -p_9(Anna))",
                    "(-p_12(Anna) -> p_7(Anna))"
                ],
                "formulas(goals)": [
                    "-(-p_7(Anna))"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_7(Anna) \u2192 p_12(Anna)"
                ],
                "added_facts": [],
                "added_rules": [
                    "\u00acp_12(Anna) \u2192 p_7(Anna)"
                ]
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_4(Anna)\n\u00acp_5(Anna)\np_2(Anna)\n\u00acp_3(Anna)\np_1(Anna)\np_0(Anna)\n\u00acp_13(Anna)\np_8(Anna)\n\u2200x ((p_11(x) \u2192 p_5(x)) \u2227 (p_4(x) \u2192 p_5(x)))\n((p_13(Anna) \u2227 p_2(Anna)) \u2192 p_3(Anna))\n(\u00acp_10(Anna) \u2192 \u00acp_12(Anna))\n(p_0(Anna) \u2192 p_6(Anna))\n(p_10(Anna) \u2192 ((p_9(Anna) \u2227 \u00acp_11(Anna)) \u2228 (\u00acp_9(Anna) \u2227 p_11(Anna))))\n(p_8(Anna) \u2228 p_9(Anna))\np_6(Anna)\n(p_8(Anna) \u2192 \u00acp_9(Anna))\n(p_8(Anna) \u2192 \u00acp_7(Anna))",
            "Initial Goal": "\u00acp_7(Anna)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Anna)",
                    "-p_5(Anna)",
                    "p_2(Anna)",
                    "-p_3(Anna)",
                    "p_1(Anna)",
                    "p_0(Anna)",
                    "-p_13(Anna)",
                    "p_8(Anna)",
                    "all x ((p_11(x) -> p_5(x)) & (p_4(x) -> p_5(x)))",
                    "((p_13(Anna) & p_2(Anna)) -> p_3(Anna))",
                    "(-p_10(Anna) -> -p_12(Anna))",
                    "(p_0(Anna) -> p_6(Anna))",
                    "(p_10(Anna) -> ((p_9(Anna) & -p_11(Anna)) | (-p_9(Anna) & p_11(Anna))))",
                    "(p_8(Anna) | p_9(Anna))",
                    "p_6(Anna)",
                    "(p_8(Anna) -> -p_9(Anna))",
                    "(p_8(Anna) -> -p_7(Anna))"
                ],
                "formulas(goals)": [
                    "-p_7(Anna)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u00acp_12(Anna) \u2192 p_7(Anna)"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_8(Anna) \u2192 \u00acp_7(Anna)"
                ]
            }
        }
    ]
}