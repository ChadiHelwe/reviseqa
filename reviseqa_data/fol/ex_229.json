{
    "background_story": "Chick was no ordinary hen. She lived on a small farm where the farmer would often challenge the animals to simple puzzles in exchange for treats. Chick, with her calculating mind, quickly rose to the top, solving complex problems with ease. She could count up to twenty, recognize patterns, and even perform basic arithmetic. The farmer was amazed by her intelligence and began to rely on her to manage the farm's feeding schedules and inventory. Chick would carefully calculate the amount of feed needed for each animal, ensuring everyone was well-fed and happy. Her calculating nature made her the farm's unofficial manager, and the other animals looked up to her for her wisdom and precision.",
    "predicates": [
        {
            "id": 0,
            "name": "lives_on_farm"
        },
        {
            "id": 1,
            "name": "lay_eggs"
        },
        {
            "id": 2,
            "name": "is_domestic"
        },
        {
            "id": 3,
            "name": "thinks_logically"
        },
        {
            "id": 4,
            "name": "has_wings"
        },
        {
            "id": 5,
            "name": "is_bird"
        },
        {
            "id": 6,
            "name": "intelligent"
        },
        {
            "id": 7,
            "name": "solve_problems"
        },
        {
            "id": 8,
            "name": "manage_resources"
        },
        {
            "id": 9,
            "name": "peck_grains"
        },
        {
            "id": 10,
            "name": "has_feathers"
        },
        {
            "id": 11,
            "name": "can_fly"
        },
        {
            "id": 12,
            "name": "recognizes_patterns"
        },
        {
            "id": 13,
            "name": "performs_arithmetic"
        },
        {
            "id": 14,
            "name": "forages_food"
        },
        {
            "id": 15,
            "name": "clucks_loud"
        },
        {
            "id": 16,
            "name": "scratches_ground"
        },
        {
            "id": 17,
            "name": "calculates_well"
        },
        {
            "id": 18,
            "name": "leads_others"
        },
        {
            "id": 19,
            "name": "is_pet"
        },
        {
            "id": 20,
            "name": "has_beak"
        }
    ],
    "subject_name": "Chick",
    "subject_category": "chicken",
    "keyword": "calculating",
    "all_facts": [
        {
            "id": 0,
            "subject": "Chick",
            "text": "Chick does not live on a farm.",
            "fol": "\u00acp_0(Chick)",
            "str_fol": "\u00aclives_on_farm(Chick)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Chick",
            "text": "Chick lays eggs.",
            "fol": "p_1(Chick)",
            "str_fol": "lay_eggs(Chick)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Chick",
            "text": "Chick is a domestic chicken.",
            "fol": "p_2(Chick)",
            "str_fol": "is_domestic(Chick)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Chick",
            "text": "Chick does not think logically.",
            "fol": "\u00acp_3(Chick)",
            "str_fol": "\u00acthinks_logically(Chick)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Chick",
            "text": "Chick has wings.",
            "fol": "p_4(Chick)",
            "str_fol": "has_wings(Chick)",
            "negation": false
        },
        {
            "id": 5,
            "subject": "Chick",
            "text": "Chick is not a bird.",
            "fol": "\u00acp_5(Chick)",
            "str_fol": "\u00acis_bird(Chick)",
            "negation": true
        },
        {
            "id": 6,
            "subject": "Chick",
            "text": "Chick cannot fly.",
            "fol": "\u00acp_11(Chick)",
            "str_fol": "\u00accan_fly(Chick)",
            "negation": true
        },
        {
            "id": 7,
            "subject": "Chick",
            "text": "Chick is not intelligent.",
            "fol": "\u00acp_6(Chick)",
            "str_fol": "\u00acintelligent(Chick)",
            "negation": true
        },
        {
            "id": 8,
            "subject": "Chick",
            "text": "The Chick has feathers.",
            "fol": "p_10(Chick)",
            "str_fol": "has_feathers(Chick)",
            "negation": false
        },
        {
            "id": 9,
            "subject": "Chick",
            "text": "Chick does not peck grains.",
            "fol": "\u00acp_9(Chick)",
            "str_fol": "\u00acpeck_grains(Chick)",
            "negation": true
        },
        {
            "id": 10,
            "subject": "Chick",
            "text": "Chick can manage resources.",
            "fol": "p_8(Chick)",
            "str_fol": "manage_resources(Chick)",
            "negation": false
        }
    ],
    "context_facts": [
        {
            "id": 4,
            "subject": "Chick",
            "text": "Chick has wings.",
            "fol": "p_4(Chick)",
            "str_fol": "has_wings(Chick)",
            "negation": false
        },
        {
            "id": 5,
            "subject": "Chick",
            "text": "Chick is not a bird.",
            "fol": "\u00acp_5(Chick)",
            "str_fol": "\u00acis_bird(Chick)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Chick",
            "text": "Chick does not think logically.",
            "fol": "\u00acp_3(Chick)",
            "str_fol": "\u00acthinks_logically(Chick)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Chick",
            "text": "Chick is a domestic chicken.",
            "fol": "p_2(Chick)",
            "str_fol": "is_domestic(Chick)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Chick",
            "text": "Chick lays eggs.",
            "fol": "p_1(Chick)",
            "str_fol": "lay_eggs(Chick)",
            "negation": false
        },
        {
            "id": 0,
            "subject": "Chick",
            "text": "Chick does not live on a farm.",
            "fol": "\u00acp_0(Chick)",
            "str_fol": "\u00aclives_on_farm(Chick)",
            "negation": true
        }
    ],
    "context_rules": [
        {
            "id": 5,
            "text": "All chickens that can fly and have wings are birds.",
            "fol": "\u2200x ((p_11(x) \u2227 p_4(x)) \u2192 p_5(x))",
            "str_fol": "\u2200x ((can_fly(x) \u2227 has_wings(x)) \u2192 is_bird(x))"
        },
        {
            "id": 4,
            "text": "If a chicken is intelligent, then it thinks logically.",
            "fol": "p_6(Chick) \u2192 p_3(Chick)",
            "str_fol": "intelligent(Chick) \u2192 thinks_logically(Chick)"
        },
        {
            "id": 3,
            "text": "If Chick is a domestic chicken, then she either has feathers or can fly, but not both.",
            "fol": "p_2(Chick) \u2192 (p_10(Chick) \u2295 p_11(Chick))",
            "str_fol": "is_domestic(Chick) \u2192 (has_feathers(Chick) \u2295 can_fly(Chick))"
        },
        {
            "id": 2,
            "text": "If a chicken has feathers, then it either peck grains or lay eggs, but not both.",
            "fol": "p_10(Chick) \u2192 (p_9(Chick) \u2295 p_1(Chick))",
            "str_fol": "has_feathers(Chick) \u2192 (peck_grains(Chick) \u2295 lay_eggs(Chick))"
        },
        {
            "id": 1,
            "text": "If a chicken lives on a farm, then it either solves problems or pecks grains, but not both.",
            "fol": "p_0(Chick) \u2192 (p_7(Chick) \u2295 p_9(Chick))",
            "str_fol": "lives_on_farm(Chick) \u2192 (solve_problems(Chick) \u2295 peck_grains(Chick))"
        },
        {
            "id": 0,
            "text": "If Chick is intelligent, then she can solve problems and manage resources.",
            "fol": "p_6(Chick) \u2192 (p_7(Chick) \u2227 p_8(Chick))",
            "str_fol": "intelligent(Chick) \u2192 (solve_problems(Chick) \u2227 manage_resources(Chick))"
        }
    ],
    "context": [
        {
            "id": 4,
            "subject": "Chick",
            "text": "Chick has wings.",
            "fol": "p_4(Chick)",
            "str_fol": "has_wings(Chick)",
            "negation": false
        },
        {
            "id": 5,
            "subject": "Chick",
            "text": "Chick is not a bird.",
            "fol": "\u00acp_5(Chick)",
            "str_fol": "\u00acis_bird(Chick)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Chick",
            "text": "Chick does not think logically.",
            "fol": "\u00acp_3(Chick)",
            "str_fol": "\u00acthinks_logically(Chick)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Chick",
            "text": "Chick is a domestic chicken.",
            "fol": "p_2(Chick)",
            "str_fol": "is_domestic(Chick)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Chick",
            "text": "Chick lays eggs.",
            "fol": "p_1(Chick)",
            "str_fol": "lay_eggs(Chick)",
            "negation": false
        },
        {
            "id": 0,
            "subject": "Chick",
            "text": "Chick does not live on a farm.",
            "fol": "\u00acp_0(Chick)",
            "str_fol": "\u00aclives_on_farm(Chick)",
            "negation": true
        },
        {
            "id": 5,
            "text": "All chickens that can fly and have wings are birds.",
            "fol": "\u2200x ((p_11(x) \u2227 p_4(x)) \u2192 p_5(x))",
            "str_fol": "\u2200x ((can_fly(x) \u2227 has_wings(x)) \u2192 is_bird(x))"
        },
        {
            "id": 4,
            "text": "If a chicken is intelligent, then it thinks logically.",
            "fol": "p_6(Chick) \u2192 p_3(Chick)",
            "str_fol": "intelligent(Chick) \u2192 thinks_logically(Chick)"
        },
        {
            "id": 3,
            "text": "If Chick is a domestic chicken, then she either has feathers or can fly, but not both.",
            "fol": "p_2(Chick) \u2192 (p_10(Chick) \u2295 p_11(Chick))",
            "str_fol": "is_domestic(Chick) \u2192 (has_feathers(Chick) \u2295 can_fly(Chick))"
        },
        {
            "id": 2,
            "text": "If a chicken has feathers, then it either peck grains or lay eggs, but not both.",
            "fol": "p_10(Chick) \u2192 (p_9(Chick) \u2295 p_1(Chick))",
            "str_fol": "has_feathers(Chick) \u2192 (peck_grains(Chick) \u2295 lay_eggs(Chick))"
        },
        {
            "id": 1,
            "text": "If a chicken lives on a farm, then it either solves problems or pecks grains, but not both.",
            "fol": "p_0(Chick) \u2192 (p_7(Chick) \u2295 p_9(Chick))",
            "str_fol": "lives_on_farm(Chick) \u2192 (solve_problems(Chick) \u2295 peck_grains(Chick))"
        },
        {
            "id": 0,
            "text": "If Chick is intelligent, then she can solve problems and manage resources.",
            "fol": "p_6(Chick) \u2192 (p_7(Chick) \u2227 p_8(Chick))",
            "str_fol": "intelligent(Chick) \u2192 (solve_problems(Chick) \u2227 manage_resources(Chick))"
        }
    ],
    "context_fol": "p_4(Chick)\n\u00acp_5(Chick)\n\u00acp_3(Chick)\np_2(Chick)\np_1(Chick)\n\u00acp_0(Chick)\n\u2200x ((p_11(x) \u2227 p_4(x)) \u2192 p_5(x))\np_6(Chick) \u2192 p_3(Chick)\np_2(Chick) \u2192 (p_10(Chick) \u2295 p_11(Chick))\np_10(Chick) \u2192 (p_9(Chick) \u2295 p_1(Chick))\np_0(Chick) \u2192 (p_7(Chick) \u2295 p_9(Chick))\np_6(Chick) \u2192 (p_7(Chick) \u2227 p_8(Chick))",
    "conclusion": {
        "id": 10,
        "subject": "Chick",
        "text": "Chick can manage resources.",
        "fol": "p_8(Chick)",
        "str_fol": "manage_resources(Chick)",
        "negation": false
    },
    "initial_answer": "Uncertain",
    "initial_goal": "p_8(Chick)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 4,
                    "subject": "Chick",
                    "text": "Chick has wings.",
                    "fol": "p_4(Chick)",
                    "str_fol": "has_wings(Chick)",
                    "negation": false
                },
                {
                    "id": 5,
                    "subject": "Chick",
                    "text": "Chick is not a bird.",
                    "fol": "\u00acp_5(Chick)",
                    "str_fol": "\u00acis_bird(Chick)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "All chickens that can fly and have wings are birds.",
                    "fol": "\u2200x ((p_11(x) \u2227 p_4(x)) \u2192 p_5(x))",
                    "str_fol": "\u2200x ((can_fly(x) \u2227 has_wings(x)) \u2192 is_bird(x))"
                }
            ],
            "conclusion": {
                "id": 6,
                "subject": "Chick",
                "text": "Chick cannot fly.",
                "fol": "\u00acp_11(Chick)",
                "str_fol": "\u00accan_fly(Chick)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 3,
                    "subject": "Chick",
                    "text": "Chick does not think logically.",
                    "fol": "\u00acp_3(Chick)",
                    "str_fol": "\u00acthinks_logically(Chick)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "If a chicken is intelligent, then it thinks logically.",
                    "fol": "p_6(Chick) \u2192 p_3(Chick)",
                    "str_fol": "intelligent(Chick) \u2192 thinks_logically(Chick)"
                }
            ],
            "conclusion": {
                "id": 7,
                "subject": "Chick",
                "text": "Chick is not intelligent.",
                "fol": "\u00acp_6(Chick)",
                "str_fol": "\u00acintelligent(Chick)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 2,
                    "subject": "Chick",
                    "text": "Chick is a domestic chicken.",
                    "fol": "p_2(Chick)",
                    "str_fol": "is_domestic(Chick)",
                    "negation": false
                },
                {
                    "id": 6,
                    "subject": "Chick",
                    "text": "Chick cannot fly.",
                    "fol": "\u00acp_11(Chick)",
                    "str_fol": "\u00accan_fly(Chick)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "If Chick is a domestic chicken, then she either has feathers or can fly, but not both.",
                    "fol": "p_2(Chick) \u2192 (p_10(Chick) \u2295 p_11(Chick))",
                    "str_fol": "is_domestic(Chick) \u2192 (has_feathers(Chick) \u2295 can_fly(Chick))"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Chick",
                "text": "The Chick has feathers.",
                "fol": "p_10(Chick)",
                "str_fol": "has_feathers(Chick)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 8,
                    "subject": "Chick",
                    "text": "The Chick has feathers.",
                    "fol": "p_10(Chick)",
                    "str_fol": "has_feathers(Chick)",
                    "negation": false
                },
                {
                    "id": 1,
                    "subject": "Chick",
                    "text": "Chick lays eggs.",
                    "fol": "p_1(Chick)",
                    "str_fol": "lay_eggs(Chick)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "If a chicken has feathers, then it either peck grains or lay eggs, but not both.",
                    "fol": "p_10(Chick) \u2192 (p_9(Chick) \u2295 p_1(Chick))",
                    "str_fol": "has_feathers(Chick) \u2192 (peck_grains(Chick) \u2295 lay_eggs(Chick))"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Chick",
                "text": "Chick does not peck grains.",
                "fol": "\u00acp_9(Chick)",
                "str_fol": "\u00acpeck_grains(Chick)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 0,
                    "subject": "Chick",
                    "text": "Chick does not live on a farm.",
                    "fol": "\u00acp_0(Chick)",
                    "str_fol": "\u00aclives_on_farm(Chick)",
                    "negation": true
                },
                {
                    "id": 9,
                    "subject": "Chick",
                    "text": "Chick does not peck grains.",
                    "fol": "\u00acp_9(Chick)",
                    "str_fol": "\u00acpeck_grains(Chick)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "If a chicken lives on a farm, then it either solves problems or pecks grains, but not both.",
                    "fol": "p_0(Chick) \u2192 (p_7(Chick) \u2295 p_9(Chick))",
                    "str_fol": "lives_on_farm(Chick) \u2192 (solve_problems(Chick) \u2295 peck_grains(Chick))"
                }
            ],
            "conclusion": null
        },
        {
            "facts": [
                {
                    "id": 7,
                    "subject": "Chick",
                    "text": "Chick is not intelligent.",
                    "fol": "\u00acp_6(Chick)",
                    "str_fol": "\u00acintelligent(Chick)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "If Chick is intelligent, then she can solve problems and manage resources.",
                    "fol": "p_6(Chick) \u2192 (p_7(Chick) \u2227 p_8(Chick))",
                    "str_fol": "intelligent(Chick) \u2192 (solve_problems(Chick) \u2227 manage_resources(Chick))"
                }
            ],
            "conclusion": null
        }
    ],
    "proof_trace": null,
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "UNCERTAIN",
            "Edited Assumptions": "p_4(Chick)\n\u00acp_5(Chick)\n\u00acp_3(Chick)\np_2(Chick)\np_1(Chick)\n\u00acp_0(Chick)\n\u2200x ((p_11(x) \u2227 p_4(x)) \u2192 p_5(x))\np_6(Chick) \u2192 p_3(Chick)\np_2(Chick) \u2192 (p_10(Chick) \u2295 p_11(Chick))\np_10(Chick) \u2192 (p_9(Chick) \u2295 p_1(Chick))\np_0(Chick) \u2192 (p_7(Chick) \u2295 p_9(Chick))\np_6(Chick) \u2192 (p_7(Chick) \u2227 p_8(Chick))",
            "Initial Goal": "p_8(Chick)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_4(Chick).",
                    "-p_5(Chick).",
                    "-p_3(Chick).",
                    "p_2(Chick).",
                    "p_1(Chick).",
                    "-p_0(Chick).",
                    "all x ((p_11(x) & p_4(x)) -> p_5(x)).",
                    "p_6(Chick) -> p_3(Chick).",
                    "p_2(Chick) -> (-(p_10(Chick) <-> p_11(Chick))).",
                    "p_10(Chick) -> (-(p_9(Chick) <-> p_1(Chick))).",
                    "p_0(Chick) -> (-(p_7(Chick) <-> p_9(Chick))).",
                    "p_6(Chick) -> (p_7(Chick) & p_8(Chick)).",
                    "p_10(Chick) -> p_8(Chick)."
                ],
                "formulas(goals)": [
                    "p_8(Chick)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "p_10(Chick) \u2192 p_8(Chick)"
                ]
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_4(Chick)\n\u00acp_5(Chick)\n\u00acp_3(Chick)\np_2(Chick)\np_1(Chick)\n\u00acp_0(Chick)\n\u2200x ((p_11(x) \u2227 p_4(x)) \u2192 p_5(x))\np_6(Chick) \u2192 p_3(Chick)\np_2(Chick) \u2192 (p_10(Chick) \u2295 p_11(Chick))\np_10(Chick) \u2192 (p_9(Chick) \u2295 p_1(Chick))\np_0(Chick) \u2192 (p_7(Chick) \u2295 p_9(Chick))\np_4(Chick) \u2192 \u00acp_8(Chick)",
            "Initial Goal": "p_8(Chick)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_4(Chick)",
                    "-p_5(Chick)",
                    "-p_3(Chick)",
                    "p_2(Chick)",
                    "p_1(Chick)",
                    "-p_0(Chick)",
                    "all x ((p_11(x) & p_4(x)) -> p_5(x))",
                    "p_6(Chick) -> p_3(Chick)",
                    "p_2(Chick) -> (-(p_10(Chick) <-> p_11(Chick)))",
                    "p_10(Chick) -> (-(p_9(Chick) <-> p_1(Chick)))",
                    "p_0(Chick) -> (-(p_7(Chick) <-> p_9(Chick)))",
                    "p_4(Chick) -> -p_8(Chick)"
                ],
                "formulas(goals)": [
                    "-p_8(Chick)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_6(Chick) \u2192 (p_7(Chick) \u2227 p_8(Chick))"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_4(Chick) \u2192 \u00acp_8(Chick)"
                ]
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_4(Chick)\n\u00acp_5(Chick)\n\u00acp_3(Chick)\np_2(Chick)\np_1(Chick)\n\u00acp_0(Chick)\n\u2200x ((p_11(x) \u2227 p_4(x)) \u2192 p_5(x))\np_6(Chick) \u2192 p_3(Chick)\np_2(Chick) \u2192 (p_10(Chick) \u2295 p_11(Chick))\np_10(Chick) \u2192 (p_9(Chick) \u2295 p_1(Chick))\np_0(Chick) \u2192 (p_7(Chick) \u2295 p_9(Chick))\n\u00acp_11(Chick) \u2192 p_8(Chick)",
            "Initial Goal": "p_8(Chick)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_4(Chick)",
                    "-p_5(Chick)",
                    "-p_3(Chick)",
                    "p_2(Chick)",
                    "p_1(Chick)",
                    "-p_0(Chick)",
                    "all x ((p_11(x) & p_4(x)) -> p_5(x))",
                    "p_6(Chick) -> p_3(Chick)",
                    "p_2(Chick) -> (-(p_10(Chick) <-> p_11(Chick)))",
                    "p_10(Chick) -> (-(p_9(Chick) <-> p_1(Chick)))",
                    "p_0(Chick) -> (-(p_7(Chick) <-> p_9(Chick)))",
                    "-p_11(Chick) -> p_8(Chick)"
                ],
                "formulas(goals)": [
                    "p_8(Chick)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_4(Chick) \u2192 \u00acp_8(Chick)"
                ],
                "added_facts": [],
                "added_rules": [
                    "\u00acp_11(Chick) \u2192 p_8(Chick)"
                ]
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_4(Chick)\n\u00acp_5(Chick)\n\u00acp_3(Chick)\np_2(Chick)\np_1(Chick)\n\u00acp_0(Chick)\n\u2200x ((p_11(x) \u2227 p_4(x)) \u2192 p_5(x))\np_6(Chick) \u2192 p_3(Chick)\np_2(Chick) \u2192 (p_10(Chick) \u2295 p_11(Chick))\np_10(Chick) \u2192 (p_9(Chick) \u2295 p_1(Chick))\np_0(Chick) \u2192 (p_7(Chick) \u2295 p_9(Chick))\np_10(Chick) \u2192 \u00acp_8(Chick)",
            "Initial Goal": "p_8(Chick)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_4(Chick)",
                    "-p_5(Chick)",
                    "-p_3(Chick)",
                    "p_2(Chick)",
                    "p_1(Chick)",
                    "-p_0(Chick)",
                    "all x ((p_11(x) & p_4(x)) -> p_5(x))",
                    "p_6(Chick) -> p_3(Chick)",
                    "p_2(Chick) -> (-(p_10(Chick) <-> p_11(Chick)))",
                    "p_10(Chick) -> (-(p_9(Chick) <-> p_1(Chick)))",
                    "p_0(Chick) -> (-(p_7(Chick) <-> p_9(Chick)))",
                    "p_10(Chick) -> -p_8(Chick)"
                ],
                "formulas(goals)": [
                    "-p_8(Chick)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u00acp_11(Chick) \u2192 p_8(Chick)"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_10(Chick) \u2192 \u00acp_8(Chick)"
                ]
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_4(Chick)\n\u00acp_5(Chick)\n\u00acp_3(Chick)\np_2(Chick)\np_1(Chick)\n\u00acp_0(Chick)\n\u2200x (\u00acp_5(x) \u2192 (\u00acp_11(x) \u2228 \u00acp_4(x)))\n\u00acp_6(Chick)\np_2(Chick) \u2192 (p_10(Chick) \u2295 p_11(Chick))\np_10(Chick) \u2192 (p_9(Chick) \u2295 p_1(Chick))\np_0(Chick) \u2192 (p_7(Chick) \u2295 p_9(Chick))\np_8(Chick) \u2192 \u00acp_10(Chick)\np_10(Chick)\n\u00acp_11(Chick)",
            "Initial Goal": "p_8(Chick)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_4(Chick)",
                    "-p_5(Chick)",
                    "-p_3(Chick)",
                    "p_2(Chick)",
                    "p_1(Chick)",
                    "-p_0(Chick)",
                    "all x (-p_5(x) -> (-p_11(x) | -p_4(x)))",
                    "-p_6(Chick)",
                    "p_2(Chick) -> (-(p_10(Chick) <-> p_11(Chick)))",
                    "p_10(Chick) -> (-(p_9(Chick) <-> p_1(Chick)))",
                    "p_0(Chick) -> (-(p_7(Chick) <-> p_9(Chick)))",
                    "p_8(Chick) -> -p_10(Chick)",
                    "p_10(Chick)",
                    "-p_11(Chick)"
                ],
                "formulas(goals)": [
                    "-p_8(Chick)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_6(Chick) \u2192 p_3(Chick)",
                    "\u2200x ((p_11(x) \u2227 p_4(x)) \u2192 p_5(x))",
                    "p_10(Chick) \u2192 \u00acp_8(Chick)"
                ],
                "added_facts": [
                    "p_10(Chick)",
                    "\u00acp_11(Chick)",
                    "\u00acp_6(Chick)"
                ],
                "added_rules": [
                    "\u2200x (\u00acp_5(x) \u2192 (\u00acp_11(x) \u2228 \u00acp_4(x)))",
                    "p_8(Chick) \u2192 \u00acp_10(Chick)"
                ]
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_4(Chick)\n\u00acp_5(Chick)\n\u00acp_3(Chick)\np_2(Chick)\np_1(Chick)\n\u00acp_0(Chick)\n\u2200x (\u00acp_5(x) \u2192 (\u00acp_11(x) \u2228 \u00acp_4(x)))\n\u00acp_6(Chick)\np_2(Chick) \u2192 (p_10(Chick) \u2228 p_11(Chick))\np_2(Chick) \u2192 (\u00acp_10(Chick) \u2228 \u00acp_11(Chick))\np_10(Chick) \u2192 (p_9(Chick) \u2228 p_1(Chick))\np_10(Chick) \u2192 (\u00acp_9(Chick) \u2228 \u00acp_1(Chick))\np_0(Chick) \u2192 (p_7(Chick) \u2295 p_9(Chick))\np_8(Chick) \u2192 \u00acp_10(Chick)\np_10(Chick)\n\u00acp_11(Chick)",
            "Initial Goal": "p_8(Chick)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_4(Chick)",
                    "-p_5(Chick)",
                    "-p_3(Chick)",
                    "p_2(Chick)",
                    "p_1(Chick)",
                    "-p_0(Chick)",
                    "all x (-p_5(x) -> (-p_11(x) | -p_4(x)))",
                    "-p_6(Chick)",
                    "p_2(Chick) -> (p_10(Chick) | p_11(Chick))",
                    "p_2(Chick) -> (-p_10(Chick) | -p_11(Chick))",
                    "p_10(Chick) -> (p_9(Chick) | p_1(Chick))",
                    "p_10(Chick) -> (-p_9(Chick) | -p_1(Chick))",
                    "p_0(Chick) -> -(p_7(Chick) <-> p_9(Chick))",
                    "p_8(Chick) -> -p_10(Chick)",
                    "p_10(Chick)",
                    "-p_11(Chick)"
                ],
                "formulas(goals)": [
                    "-p_8(Chick)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_2(Chick) \u2192 (p_10(Chick) \u2295 p_11(Chick))",
                    "p_10(Chick) \u2192 (p_9(Chick) \u2295 p_1(Chick))"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_2(Chick) \u2192 (p_10(Chick) \u2228 p_11(Chick))",
                    "p_2(Chick) \u2192 (\u00acp_10(Chick) \u2228 \u00acp_11(Chick))",
                    "p_10(Chick) \u2192 (p_9(Chick) \u2228 p_1(Chick))",
                    "p_10(Chick) \u2192 (\u00acp_9(Chick) \u2228 \u00acp_1(Chick))"
                ]
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_4(Chick).\n\u00acp_5(Chick).\n\u00acp_3(Chick).\np_2(Chick).\np_1(Chick).\n\u00acp_0(Chick).\n\u2200x (\u00acp_5(x) \u2192 (\u00acp_11(x) \u2228 \u00acp_4(x))).\n\u00acp_6(Chick).\np_2(Chick) \u2192 (p_10(Chick) \u2228 p_11(Chick)).\np_2(Chick) \u2192 (\u00acp_10(Chick) \u2228 \u00acp_11(Chick)).\np_10(Chick) \u2192 (p_9(Chick) \u2228 p_1(Chick)).\np_10(Chick) \u2192 (\u00acp_9(Chick) \u2228 \u00acp_1(Chick)).\np_0(Chick) \u2192 (p_7(Chick) \u2295 p_9(Chick)).\np_8(Chick) \u2192 \u00acp_10(Chick).\np_10(Chick).\n\u00acp_11(Chick).\n\u00acp_9(Chick).",
            "Initial Goal": "p_8(Chick)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_4(Chick).",
                    "-p_5(Chick).",
                    "-p_3(Chick).",
                    "p_2(Chick).",
                    "p_1(Chick).",
                    "-p_0(Chick).",
                    "all x (-p_5(x) -> (-p_11(x) | -p_4(x))).",
                    "-p_6(Chick).",
                    "p_2(Chick) -> (p_10(Chick) | p_11(Chick)).",
                    "p_2(Chick) -> (-p_10(Chick) | -p_11(Chick)).",
                    "p_10(Chick) -> (p_9(Chick) | p_1(Chick)).",
                    "p_10(Chick) -> (-p_9(Chick) | -p_1(Chick)).",
                    "p_0(Chick) -> (-(p_7(Chick) <-> p_9(Chick))).",
                    "p_8(Chick) -> -p_10(Chick).",
                    "p_10(Chick).",
                    "-p_11(Chick).",
                    "-p_9(Chick)."
                ],
                "formulas(goals)": [
                    "-p_8(Chick)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "\u00acp_9(Chick)"
                ],
                "added_rules": []
            }
        }
    ]
}