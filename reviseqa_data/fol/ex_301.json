{
    "background_story": "Camden was a renowned marine geologist who had spent his career studying the ocean's depths. His life's work took a dramatic turn when he experienced a massive seaquake while on a research vessel in the Pacific. The violent disturbance of the seafloor triggered a tsunami that threatened to engulf the ship. Camden's quick thinking and expertise helped the crew navigate the treacherous waters to safety. The event sparked a new area of research for Camden, focusing on the prediction and mitigation of seaquakes and their devastating effects. His work has since become crucial in protecting coastal communities from these underwater earthquakes, earning him international recognition and accolades.",
    "predicates": [
        {
            "id": 0,
            "name": "stay_calm"
        },
        {
            "id": 1,
            "name": "advance_knowledge"
        },
        {
            "id": 2,
            "name": "earn_recognition"
        },
        {
            "id": 3,
            "name": "find_solutions"
        },
        {
            "id": 4,
            "name": "face_challenges"
        },
        {
            "id": 5,
            "name": "inform_public"
        },
        {
            "id": 6,
            "name": "is_respected"
        },
        {
            "id": 7,
            "name": "expert"
        },
        {
            "id": 8,
            "name": "quick_thinker"
        },
        {
            "id": 9,
            "name": "save_lives"
        },
        {
            "id": 10,
            "name": "predict_dangers"
        },
        {
            "id": 11,
            "name": "warn_others"
        },
        {
            "id": 12,
            "name": "make_difference"
        },
        {
            "id": 13,
            "name": "protect_communities"
        },
        {
            "id": 14,
            "name": "help_people"
        },
        {
            "id": 15,
            "name": "serve_society"
        },
        {
            "id": 16,
            "name": "acts_decisively"
        },
        {
            "id": 17,
            "name": "acts_fast"
        },
        {
            "id": 18,
            "name": "thinks_clearly"
        },
        {
            "id": 19,
            "name": "contributes_research"
        },
        {
            "id": 20,
            "name": "develops_new_methods"
        },
        {
            "id": 21,
            "name": "study_ocean"
        },
        {
            "id": 22,
            "name": "care_environment"
        },
        {
            "id": 23,
            "name": "study_seafloor"
        },
        {
            "id": 24,
            "name": "understand_tsunami"
        },
        {
            "id": 25,
            "name": "has_knowledge"
        },
        {
            "id": 26,
            "name": "takes_action"
        },
        {
            "id": 27,
            "name": "study_oceans"
        },
        {
            "id": 28,
            "name": "map_seafloor"
        },
        {
            "id": 29,
            "name": "conduct_research"
        },
        {
            "id": 30,
            "name": "teach_students"
        }
    ],
    "subject_name": "Camden",
    "subject_category": "person",
    "keyword": "seaquake",
    "all_facts": [
        {
            "id": 0,
            "subject": "Camden",
            "text": "Camden does not stay calm.",
            "fol": "\u00acp_0(Camden)",
            "str_fol": "\u00acstay_calm(Camden)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Camden",
            "text": "Camden does not advance knowledge.",
            "fol": "\u00acp_1(Camden)",
            "str_fol": "\u00acadvance_knowledge(Camden)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Camden",
            "text": "Camden does not earn recognition.",
            "fol": "\u00acp_2(Camden)",
            "str_fol": "\u00acearn_recognition(Camden)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Camden",
            "text": "Camden does not find solutions.",
            "fol": "\u00acp_3(Camden)",
            "str_fol": "\u00acfind_solutions(Camden)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Camden",
            "text": "Camden faces challenges.",
            "fol": "p_4(Camden)",
            "str_fol": "face_challenges(Camden)",
            "negation": false
        },
        {
            "id": 5,
            "subject": "Camden",
            "text": "Camden does not inform the public.",
            "fol": "\u00acp_5(Camden)",
            "str_fol": "\u00acinform_public(Camden)",
            "negation": true
        },
        {
            "id": 6,
            "subject": "Camden",
            "text": "Camden is not respected.",
            "fol": "\u00acp_6(Camden)",
            "str_fol": "\u00acis_respected(Camden)",
            "negation": true
        },
        {
            "id": 7,
            "subject": "Camden",
            "text": "Camden does not serve society.",
            "fol": "\u00acp_15(Camden)",
            "str_fol": "\u00acserve_society(Camden)",
            "negation": true
        },
        {
            "id": 8,
            "subject": "Camden",
            "text": "Camden does not protect communities.",
            "fol": "\u00acp_13(Camden)",
            "str_fol": "\u00acprotect_communities(Camden)",
            "negation": true
        },
        {
            "id": 9,
            "subject": "Camden",
            "text": "Camden helps people.",
            "fol": "p_14(Camden)",
            "str_fol": "help_people(Camden)",
            "negation": false
        },
        {
            "id": 10,
            "subject": "Camden",
            "text": "Camden does not make a difference.",
            "fol": "\u00acp_12(Camden)",
            "str_fol": "\u00acmake_difference(Camden)",
            "negation": true
        },
        {
            "id": 11,
            "subject": "Camden",
            "text": "Camden does not predict dangers.",
            "fol": "\u00acp_10(Camden)",
            "str_fol": "\u00acpredict_dangers(Camden)",
            "negation": true
        },
        {
            "id": 12,
            "subject": "Camden",
            "text": "Camden cannot save lives.",
            "fol": "\u00acp_9(Camden)",
            "str_fol": "\u00acsave_lives(Camden)",
            "negation": true
        },
        {
            "id": 13,
            "subject": "Camden",
            "text": "Camden is not a quick thinker.",
            "fol": "\u00acp_8(Camden)",
            "str_fol": "\u00acquick_thinker(Camden)",
            "negation": true
        },
        {
            "id": 14,
            "subject": "Camden",
            "text": "Camden is not an expert in marine geology.",
            "fol": "\u00acp_7(Camden)",
            "str_fol": "\u00acexpert(Camden)",
            "negation": true
        }
    ],
    "context_facts": [
        {
            "id": 6,
            "subject": "Camden",
            "text": "Camden is not respected.",
            "fol": "\u00acp_6(Camden)",
            "str_fol": "\u00acis_respected(Camden)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Camden",
            "text": "Camden does not inform the public.",
            "fol": "\u00acp_5(Camden)",
            "str_fol": "\u00acinform_public(Camden)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Camden",
            "text": "Camden faces challenges.",
            "fol": "p_4(Camden)",
            "str_fol": "face_challenges(Camden)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Camden",
            "text": "Camden does not find solutions.",
            "fol": "\u00acp_3(Camden)",
            "str_fol": "\u00acfind_solutions(Camden)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Camden",
            "text": "Camden does not advance knowledge.",
            "fol": "\u00acp_1(Camden)",
            "str_fol": "\u00acadvance_knowledge(Camden)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Camden",
            "text": "Camden does not earn recognition.",
            "fol": "\u00acp_2(Camden)",
            "str_fol": "\u00acearn_recognition(Camden)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Camden",
            "text": "Camden does not stay calm.",
            "fol": "\u00acp_0(Camden)",
            "str_fol": "\u00acstay_calm(Camden)",
            "negation": true
        }
    ],
    "context_rules": [
        {
            "id": 8,
            "text": "Anyone who serves society is respected.",
            "fol": "\u2200x (p_15(x) \u2192 p_6(x))",
            "str_fol": "\u2200x (serve_society(x) \u2192 is_respected(x))"
        },
        {
            "id": 7,
            "text": "If Camden either protects communities or informs the public (but not both), then he serves society.",
            "fol": "(p_13(Camden) \u2295 p_5(Camden)) \u2192 p_15(Camden)",
            "str_fol": "(protect_communities(Camden) \u2295 inform_public(Camden)) \u2192 serve_society(Camden)"
        },
        {
            "id": 6,
            "text": "If Camden faces challenges, then he either finds solutions or helps people, but not both.",
            "fol": "p_4(Camden) \u2192 (p_3(Camden) \u2295 p_14(Camden))",
            "str_fol": "face_challenges(Camden) \u2192 (find_solutions(Camden) \u2295 help_people(Camden))"
        },
        {
            "id": 5,
            "text": "Camden either warns others or helps people.",
            "fol": "p_11(Camden) \u2228 p_14(Camden)",
            "str_fol": "warn_others(Camden) \u2228 help_people(Camden)"
        },
        {
            "id": 4,
            "text": "If Camden makes a difference, then he either protects communities or advances knowledge.",
            "fol": "p_12(Camden) \u2192 (p_13(Camden) \u2228 p_1(Camden))",
            "str_fol": "make_difference(Camden) \u2192 (protect_communities(Camden) \u2228 advance_knowledge(Camden))"
        },
        {
            "id": 3,
            "text": "Anyone who predicts dangers or warns others can make a difference.",
            "fol": "\u2200x ((p_10(x) \u2228 p_11(x)) \u2192 p_12(x))",
            "str_fol": "\u2200x ((predict_dangers(x) \u2228 warn_others(x)) \u2192 make_difference(x))"
        },
        {
            "id": 2,
            "text": "Anyone who predicts dangers or saves lives will earn recognition.",
            "fol": "\u2200x ((p_10(x) \u2228 p_9(x)) \u2192 p_2(x))",
            "str_fol": "\u2200x ((predict_dangers(x) \u2228 save_lives(x)) \u2192 earn_recognition(x))"
        },
        {
            "id": 1,
            "text": "If Camden is a quick thinker, then he can save lives and stay calm.",
            "fol": "p_8(Camden) \u2192 (p_9(Camden) \u2227 p_0(Camden))",
            "str_fol": "quick_thinker(Camden) \u2192 (save_lives(Camden) \u2227 stay_calm(Camden))"
        },
        {
            "id": 0,
            "text": "Camden is either an expert in marine geology or a quick thinker (or both).",
            "fol": "p_7(Camden) \u2228 p_8(Camden)",
            "str_fol": "expert(Camden) \u2228 quick_thinker(Camden)"
        }
    ],
    "context": [
        {
            "id": 6,
            "subject": "Camden",
            "text": "Camden is not respected.",
            "fol": "\u00acp_6(Camden)",
            "str_fol": "\u00acis_respected(Camden)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Camden",
            "text": "Camden does not inform the public.",
            "fol": "\u00acp_5(Camden)",
            "str_fol": "\u00acinform_public(Camden)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Camden",
            "text": "Camden faces challenges.",
            "fol": "p_4(Camden)",
            "str_fol": "face_challenges(Camden)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Camden",
            "text": "Camden does not find solutions.",
            "fol": "\u00acp_3(Camden)",
            "str_fol": "\u00acfind_solutions(Camden)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Camden",
            "text": "Camden does not advance knowledge.",
            "fol": "\u00acp_1(Camden)",
            "str_fol": "\u00acadvance_knowledge(Camden)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Camden",
            "text": "Camden does not earn recognition.",
            "fol": "\u00acp_2(Camden)",
            "str_fol": "\u00acearn_recognition(Camden)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Camden",
            "text": "Camden does not stay calm.",
            "fol": "\u00acp_0(Camden)",
            "str_fol": "\u00acstay_calm(Camden)",
            "negation": true
        },
        {
            "id": 8,
            "text": "Anyone who serves society is respected.",
            "fol": "\u2200x (p_15(x) \u2192 p_6(x))",
            "str_fol": "\u2200x (serve_society(x) \u2192 is_respected(x))"
        },
        {
            "id": 7,
            "text": "If Camden either protects communities or informs the public (but not both), then he serves society.",
            "fol": "(p_13(Camden) \u2295 p_5(Camden)) \u2192 p_15(Camden)",
            "str_fol": "(protect_communities(Camden) \u2295 inform_public(Camden)) \u2192 serve_society(Camden)"
        },
        {
            "id": 6,
            "text": "If Camden faces challenges, then he either finds solutions or helps people, but not both.",
            "fol": "p_4(Camden) \u2192 (p_3(Camden) \u2295 p_14(Camden))",
            "str_fol": "face_challenges(Camden) \u2192 (find_solutions(Camden) \u2295 help_people(Camden))"
        },
        {
            "id": 5,
            "text": "Camden either warns others or helps people.",
            "fol": "p_11(Camden) \u2228 p_14(Camden)",
            "str_fol": "warn_others(Camden) \u2228 help_people(Camden)"
        },
        {
            "id": 4,
            "text": "If Camden makes a difference, then he either protects communities or advances knowledge.",
            "fol": "p_12(Camden) \u2192 (p_13(Camden) \u2228 p_1(Camden))",
            "str_fol": "make_difference(Camden) \u2192 (protect_communities(Camden) \u2228 advance_knowledge(Camden))"
        },
        {
            "id": 3,
            "text": "Anyone who predicts dangers or warns others can make a difference.",
            "fol": "\u2200x ((p_10(x) \u2228 p_11(x)) \u2192 p_12(x))",
            "str_fol": "\u2200x ((predict_dangers(x) \u2228 warn_others(x)) \u2192 make_difference(x))"
        },
        {
            "id": 2,
            "text": "Anyone who predicts dangers or saves lives will earn recognition.",
            "fol": "\u2200x ((p_10(x) \u2228 p_9(x)) \u2192 p_2(x))",
            "str_fol": "\u2200x ((predict_dangers(x) \u2228 save_lives(x)) \u2192 earn_recognition(x))"
        },
        {
            "id": 1,
            "text": "If Camden is a quick thinker, then he can save lives and stay calm.",
            "fol": "p_8(Camden) \u2192 (p_9(Camden) \u2227 p_0(Camden))",
            "str_fol": "quick_thinker(Camden) \u2192 (save_lives(Camden) \u2227 stay_calm(Camden))"
        },
        {
            "id": 0,
            "text": "Camden is either an expert in marine geology or a quick thinker (or both).",
            "fol": "p_7(Camden) \u2228 p_8(Camden)",
            "str_fol": "expert(Camden) \u2228 quick_thinker(Camden)"
        }
    ],
    "context_fol": "\u00acp_6(Camden)\n\u00acp_5(Camden)\np_4(Camden)\n\u00acp_3(Camden)\n\u00acp_1(Camden)\n\u00acp_2(Camden)\n\u00acp_0(Camden)\n\u2200x (p_15(x) \u2192 p_6(x))\n(p_13(Camden) \u2295 p_5(Camden)) \u2192 p_15(Camden)\np_4(Camden) \u2192 (p_3(Camden) \u2295 p_14(Camden))\np_11(Camden) \u2228 p_14(Camden)\np_12(Camden) \u2192 (p_13(Camden) \u2228 p_1(Camden))\n\u2200x ((p_10(x) \u2228 p_11(x)) \u2192 p_12(x))\n\u2200x ((p_10(x) \u2228 p_9(x)) \u2192 p_2(x))\np_8(Camden) \u2192 (p_9(Camden) \u2227 p_0(Camden))\np_7(Camden) \u2228 p_8(Camden)",
    "conclusion": {
        "id": 14,
        "subject": "Camden",
        "text": "Camden is not an expert in marine geology.",
        "fol": "\u00acp_7(Camden)",
        "str_fol": "\u00acexpert(Camden)",
        "negation": true
    },
    "initial_answer": "False",
    "initial_goal": "\u00acp_7(Camden)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 6,
                    "subject": "Camden",
                    "text": "Camden is not respected.",
                    "fol": "\u00acp_6(Camden)",
                    "str_fol": "\u00acis_respected(Camden)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 8,
                    "text": "Anyone who serves society is respected.",
                    "fol": "\u2200x (p_15(x) \u2192 p_6(x))",
                    "str_fol": "\u2200x (serve_society(x) \u2192 is_respected(x))"
                }
            ],
            "conclusion": {
                "id": 7,
                "subject": "Camden",
                "text": "Camden does not serve society.",
                "fol": "\u00acp_15(Camden)",
                "str_fol": "\u00acserve_society(Camden)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 5,
                    "subject": "Camden",
                    "text": "Camden does not inform the public.",
                    "fol": "\u00acp_5(Camden)",
                    "str_fol": "\u00acinform_public(Camden)",
                    "negation": true
                },
                {
                    "id": 7,
                    "subject": "Camden",
                    "text": "Camden does not serve society.",
                    "fol": "\u00acp_15(Camden)",
                    "str_fol": "\u00acserve_society(Camden)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 7,
                    "text": "If Camden either protects communities or informs the public (but not both), then he serves society.",
                    "fol": "(p_13(Camden) \u2295 p_5(Camden)) \u2192 p_15(Camden)",
                    "str_fol": "(protect_communities(Camden) \u2295 inform_public(Camden)) \u2192 serve_society(Camden)"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Camden",
                "text": "Camden does not protect communities.",
                "fol": "\u00acp_13(Camden)",
                "str_fol": "\u00acprotect_communities(Camden)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 4,
                    "subject": "Camden",
                    "text": "Camden faces challenges.",
                    "fol": "p_4(Camden)",
                    "str_fol": "face_challenges(Camden)",
                    "negation": false
                },
                {
                    "id": 3,
                    "subject": "Camden",
                    "text": "Camden does not find solutions.",
                    "fol": "\u00acp_3(Camden)",
                    "str_fol": "\u00acfind_solutions(Camden)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 6,
                    "text": "If Camden faces challenges, then he either finds solutions or helps people, but not both.",
                    "fol": "p_4(Camden) \u2192 (p_3(Camden) \u2295 p_14(Camden))",
                    "str_fol": "face_challenges(Camden) \u2192 (find_solutions(Camden) \u2295 help_people(Camden))"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Camden",
                "text": "Camden helps people.",
                "fol": "p_14(Camden)",
                "str_fol": "help_people(Camden)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 9,
                    "subject": "Camden",
                    "text": "Camden helps people.",
                    "fol": "p_14(Camden)",
                    "str_fol": "help_people(Camden)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "Camden either warns others or helps people.",
                    "fol": "p_11(Camden) \u2228 p_14(Camden)",
                    "str_fol": "warn_others(Camden) \u2228 help_people(Camden)"
                }
            ],
            "conclusion": null
        },
        {
            "facts": [
                {
                    "id": 8,
                    "subject": "Camden",
                    "text": "Camden does not protect communities.",
                    "fol": "\u00acp_13(Camden)",
                    "str_fol": "\u00acprotect_communities(Camden)",
                    "negation": true
                },
                {
                    "id": 1,
                    "subject": "Camden",
                    "text": "Camden does not advance knowledge.",
                    "fol": "\u00acp_1(Camden)",
                    "str_fol": "\u00acadvance_knowledge(Camden)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "If Camden makes a difference, then he either protects communities or advances knowledge.",
                    "fol": "p_12(Camden) \u2192 (p_13(Camden) \u2228 p_1(Camden))",
                    "str_fol": "make_difference(Camden) \u2192 (protect_communities(Camden) \u2228 advance_knowledge(Camden))"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Camden",
                "text": "Camden does not make a difference.",
                "fol": "\u00acp_12(Camden)",
                "str_fol": "\u00acmake_difference(Camden)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 10,
                    "subject": "Camden",
                    "text": "Camden does not make a difference.",
                    "fol": "\u00acp_12(Camden)",
                    "str_fol": "\u00acmake_difference(Camden)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "Anyone who predicts dangers or warns others can make a difference.",
                    "fol": "\u2200x ((p_10(x) \u2228 p_11(x)) \u2192 p_12(x))",
                    "str_fol": "\u2200x ((predict_dangers(x) \u2228 warn_others(x)) \u2192 make_difference(x))"
                }
            ],
            "conclusion": {
                "id": 11,
                "subject": "Camden",
                "text": "Camden does not predict dangers.",
                "fol": "\u00acp_10(Camden)",
                "str_fol": "\u00acpredict_dangers(Camden)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 11,
                    "subject": "Camden",
                    "text": "Camden does not predict dangers.",
                    "fol": "\u00acp_10(Camden)",
                    "str_fol": "\u00acpredict_dangers(Camden)",
                    "negation": true
                },
                {
                    "id": 2,
                    "subject": "Camden",
                    "text": "Camden does not earn recognition.",
                    "fol": "\u00acp_2(Camden)",
                    "str_fol": "\u00acearn_recognition(Camden)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "Anyone who predicts dangers or saves lives will earn recognition.",
                    "fol": "\u2200x ((p_10(x) \u2228 p_9(x)) \u2192 p_2(x))",
                    "str_fol": "\u2200x ((predict_dangers(x) \u2228 save_lives(x)) \u2192 earn_recognition(x))"
                }
            ],
            "conclusion": {
                "id": 12,
                "subject": "Camden",
                "text": "Camden cannot save lives.",
                "fol": "\u00acp_9(Camden)",
                "str_fol": "\u00acsave_lives(Camden)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 12,
                    "subject": "Camden",
                    "text": "Camden cannot save lives.",
                    "fol": "\u00acp_9(Camden)",
                    "str_fol": "\u00acsave_lives(Camden)",
                    "negation": true
                },
                {
                    "id": 0,
                    "subject": "Camden",
                    "text": "Camden does not stay calm.",
                    "fol": "\u00acp_0(Camden)",
                    "str_fol": "\u00acstay_calm(Camden)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "If Camden is a quick thinker, then he can save lives and stay calm.",
                    "fol": "p_8(Camden) \u2192 (p_9(Camden) \u2227 p_0(Camden))",
                    "str_fol": "quick_thinker(Camden) \u2192 (save_lives(Camden) \u2227 stay_calm(Camden))"
                }
            ],
            "conclusion": {
                "id": 13,
                "subject": "Camden",
                "text": "Camden is not a quick thinker.",
                "fol": "\u00acp_8(Camden)",
                "str_fol": "\u00acquick_thinker(Camden)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 13,
                    "subject": "Camden",
                    "text": "Camden is not a quick thinker.",
                    "fol": "\u00acp_8(Camden)",
                    "str_fol": "\u00acquick_thinker(Camden)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "Camden is either an expert in marine geology or a quick thinker (or both).",
                    "fol": "p_7(Camden) \u2228 p_8(Camden)",
                    "str_fol": "expert(Camden) \u2228 quick_thinker(Camden)"
                }
            ],
            "conclusion": {
                "id": 14,
                "subject": "Camden",
                "text": "Camden is not an expert in marine geology.",
                "fol": "\u00acp_7(Camden)",
                "str_fol": "\u00acexpert(Camden)",
                "negation": true
            }
        }
    ],
    "proof_trace": "7 p_8(Camden) -> p_9(Camden) & p_0(Camden).  [assumption].\n8 --p_7(Camden).  [goal].\n25 -p_8(Camden) | p_0(Camden).  [clausify(7)].\n26 -p_0(Camden).  [assumption].\n29 p_7(Camden) | p_8(Camden).  [assumption].\n31 -p_8(Camden).  [resolve(25,b,26,a)].\n33 -p_7(Camden).  [deny(8)].\n34 p_7(Camden).  [resolve(31,a,29,b)].\n39 $F.  [resolve(34,a,33,a)].",
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_6(Camden)\n\u00acp_5(Camden)\np_4(Camden)\n\u00acp_3(Camden)\n\u00acp_1(Camden)\n\u00acp_2(Camden)\n\u00acp_0(Camden)\n\u2200x (p_15(x) \u2192 p_6(x))\n(p_13(Camden) \u2295 p_5(Camden)) \u2192 p_15(Camden)\np_4(Camden) \u2192 (p_3(Camden) \u2295 p_14(Camden))\np_11(Camden) \u2228 p_14(Camden)\np_12(Camden) \u2192 (p_13(Camden) \u2228 p_1(Camden))\n\u2200x ((p_10(x) \u2228 p_11(x)) \u2192 p_12(x))\n\u2200x ((p_10(x) \u2228 p_9(x)) \u2192 p_2(x))\np_8(Camden) \u2192 (p_9(Camden) \u2227 p_0(Camden))\n\u00acp_7(Camden) \u2228 p_8(Camden)",
            "Initial Goal": "\u00acp_7(Camden)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_6(Camden)",
                    "-p_5(Camden)",
                    "p_4(Camden)",
                    "-p_3(Camden)",
                    "-p_1(Camden)",
                    "-p_2(Camden)",
                    "-p_0(Camden)",
                    "all x (p_15(x) -> p_6(x))",
                    "(-(p_13(Camden) <-> p_5(Camden))) -> p_15(Camden)",
                    "p_4(Camden) -> (-(p_3(Camden) <-> p_14(Camden)))",
                    "p_11(Camden) | p_14(Camden)",
                    "p_12(Camden) -> (p_13(Camden) | p_1(Camden))",
                    "all x ((p_10(x) | p_11(x)) -> p_12(x))",
                    "all x ((p_10(x) | p_9(x)) -> p_2(x))",
                    "p_8(Camden) -> (p_9(Camden) & p_0(Camden))",
                    "-p_7(Camden) | p_8(Camden)"
                ],
                "formulas(goals)": [
                    "-p_7(Camden)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_7(Camden) \u2228 p_8(Camden)"
                ],
                "added_facts": [],
                "added_rules": [
                    "\u00acp_7(Camden) \u2228 p_8(Camden)"
                ]
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_6(Camden)\n\u00acp_5(Camden)\np_4(Camden)\n\u00acp_3(Camden)\n\u00acp_1(Camden)\n\u00acp_2(Camden)\n\u00acp_0(Camden)\n\u2200x (p_15(x) \u2192 p_6(x))\n(p_13(Camden) \u2295 p_5(Camden)) \u2192 p_15(Camden)\np_4(Camden) \u2192 (p_3(Camden) \u2295 p_14(Camden))\np_11(Camden) \u2228 p_14(Camden)\np_12(Camden) \u2192 (p_13(Camden) \u2228 p_1(Camden))\n\u2200x ((p_10(x) \u2228 p_11(x)) \u2192 p_12(x))\n\u2200x ((p_10(x) \u2228 p_9(x)) \u2192 p_2(x))\np_8(Camden) \u2192 (p_9(Camden) \u2227 p_0(Camden))\np_7(Camden) \u2228 p_8(Camden)",
            "Initial Goal": "\u00acp_7(Camden)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_6(Camden).",
                    "-p_5(Camden).",
                    "p_4(Camden).",
                    "-p_3(Camden).",
                    "-p_1(Camden).",
                    "-p_2(Camden).",
                    "-p_0(Camden).",
                    "all x (p_15(x) -> p_6(x)).",
                    "(-(p_13(Camden) <-> p_5(Camden))) -> p_15(Camden).",
                    "p_4(Camden) -> (-(p_3(Camden) <-> p_14(Camden))).",
                    "p_11(Camden) | p_14(Camden).",
                    "p_12(Camden) -> (p_13(Camden) | p_1(Camden)).",
                    "all x ((p_10(x) | p_11(x)) -> p_12(x)).",
                    "all x ((p_10(x) | p_9(x)) -> p_2(x)).",
                    "p_8(Camden) -> (p_9(Camden) & p_0(Camden)).",
                    "p_7(Camden) | p_8(Camden)."
                ],
                "formulas(goals)": [
                    "p_7(Camden)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u00acp_7(Camden) \u2228 p_8(Camden)"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_7(Camden) \u2228 p_8(Camden)"
                ]
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_6(Camden).\n\u00acp_5(Camden).\np_4(Camden).\n\u00acp_3(Camden).\n\u00acp_1(Camden).\n\u00acp_2(Camden).\n\u00acp_0(Camden).\n\u2200x (p_15(x) \u2192 p_6(x)).\np_13(Camden) \u2192 p_15(Camden).\np_4(Camden) \u2192 (p_3(Camden) \u2295 p_14(Camden)).\np_11(Camden) \u2228 p_14(Camden).\np_12(Camden) \u2192 (p_13(Camden) \u2228 p_1(Camden)).\n\u2200x ((p_10(x) \u2228 p_11(x)) \u2192 p_12(x)).\n\u2200x ((p_10(x) \u2228 p_9(x)) \u2192 p_2(x)).\np_8(Camden) \u2192 (p_9(Camden) \u2227 p_0(Camden)).\np_7(Camden) \u2228 p_8(Camden).\np_14(Camden).\n\u00acp_15(Camden).\n\u00acp_8(Camden).",
            "Initial Goal": "\u00acp_7(Camden)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_6(Camden).",
                    "-p_5(Camden).",
                    "p_4(Camden).",
                    "-p_3(Camden).",
                    "-p_1(Camden).",
                    "-p_2(Camden).",
                    "-p_0(Camden).",
                    "all x (p_15(x) -> p_6(x)).",
                    "p_13(Camden) -> p_15(Camden).",
                    "p_4(Camden) -> -(p_3(Camden) <-> p_14(Camden)).",
                    "p_11(Camden) | p_14(Camden).",
                    "p_12(Camden) -> (p_13(Camden) | p_1(Camden)).",
                    "all x ((p_10(x) | p_11(x)) -> p_12(x)).",
                    "all x ((p_10(x) | p_9(x)) -> p_2(x)).",
                    "p_8(Camden) -> (p_9(Camden) & p_0(Camden)).",
                    "p_7(Camden) | p_8(Camden).",
                    "p_14(Camden).",
                    "-p_15(Camden).",
                    "-p_8(Camden)."
                ],
                "formulas(goals)": [
                    "-(-p_7(Camden))."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "(p_13(Camden) \u2295 p_5(Camden)) \u2192 p_15(Camden)"
                ],
                "added_facts": [
                    "p_14(Camden)",
                    "\u00acp_15(Camden)",
                    "\u00acp_8(Camden)"
                ],
                "added_rules": [
                    "p_13(Camden) \u2192 p_15(Camden)"
                ]
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_6(Camden)\n\u00acp_5(Camden)\np_4(Camden)\n\u00acp_3(Camden)\n\u00acp_1(Camden)\n\u00acp_2(Camden)\n\u00acp_0(Camden)\n\u2200x (p_15(x) \u2192 p_6(x))\np_13(Camden) \u2192 p_15(Camden)\np_4(Camden) \u2192 (p_3(Camden) \u2295 p_14(Camden))\np_11(Camden) \u2228 p_14(Camden)\np_12(Camden) \u2192 (p_13(Camden) \u2228 p_1(Camden))\n\u2200x ((p_10(x) \u2228 p_11(x)) \u2192 p_12(x))\n\u2200x ((p_10(x) \u2228 p_9(x)) \u2192 p_2(x))\np_8(Camden) \u2192 (p_9(Camden) \u2227 p_0(Camden))\np_14(Camden)\n\u00acp_15(Camden)\n\u00acp_8(Camden)\np_7(Camden) \u2192 p_8(Camden)",
            "Initial Goal": "\u00acp_7(Camden)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "\u00acp_6(Camden)",
                    "\u00acp_5(Camden)",
                    "p_4(Camden)",
                    "\u00acp_3(Camden)",
                    "\u00acp_1(Camden)",
                    "\u00acp_2(Camden)",
                    "\u00acp_0(Camden)",
                    "all x (p_15(x) -> p_6(x))",
                    "p_13(Camden) -> p_15(Camden)",
                    "p_4(Camden) -> (-(p_3(Camden) <-> p_14(Camden)))",
                    "p_11(Camden) | p_14(Camden)",
                    "p_12(Camden) -> (p_13(Camden) | p_1(Camden))",
                    "all x ((p_10(x) | p_11(x)) -> p_12(x))",
                    "all x ((p_10(x) | p_9(x)) -> p_2(x))",
                    "p_8(Camden) -> (p_9(Camden) & p_0(Camden))",
                    "p_14(Camden)",
                    "\u00acp_15(Camden)",
                    "\u00acp_8(Camden)",
                    "p_7(Camden) -> p_8(Camden)"
                ],
                "formulas(goals)": [
                    "\u00acp_7(Camden)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_7(Camden) \u2228 p_8(Camden)"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_7(Camden) \u2192 p_8(Camden)"
                ]
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_6(Camden)\n\u00acp_5(Camden)\np_4(Camden)\n\u00acp_3(Camden)\n\u00acp_1(Camden)\n\u00acp_2(Camden)\n\u00acp_0(Camden)\n\u2200x (p_15(x) \u2192 p_6(x))\np_13(Camden) \u2192 p_15(Camden)\np_4(Camden) \u2192 (p_3(Camden) \u2295 p_14(Camden))\np_11(Camden) \u2228 p_14(Camden)\np_12(Camden) \u2192 (p_13(Camden) \u2228 p_1(Camden))\n\u2200x ((p_10(x) \u2228 p_11(x)) \u2192 p_12(x))\n\u2200x ((p_10(x) \u2228 p_9(x)) \u2192 p_2(x))\np_14(Camden)\n\u00acp_15(Camden)\np_7(Camden) \u2192 p_8(Camden)\np_14(Camden) \u2192 p_7(Camden)",
            "Initial Goal": "\u00acp_7(Camden)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_6(Camden)",
                    "-p_5(Camden)",
                    "p_4(Camden)",
                    "-p_3(Camden)",
                    "-p_1(Camden)",
                    "-p_2(Camden)",
                    "-p_0(Camden)",
                    "all x (p_15(x) -> p_6(x))",
                    "p_13(Camden) -> p_15(Camden)",
                    "p_4(Camden) -> (-(p_3(Camden) <-> p_14(Camden)))",
                    "p_11(Camden) | p_14(Camden)",
                    "p_12(Camden) -> (p_13(Camden) | p_1(Camden))",
                    "all x ((p_10(x) | p_11(x)) -> p_12(x))",
                    "all x ((p_10(x) | p_9(x)) -> p_2(x))",
                    "p_14(Camden)",
                    "-p_15(Camden)",
                    "p_7(Camden) -> p_8(Camden)",
                    "p_14(Camden) -> p_7(Camden)"
                ],
                "formulas(goals)": [
                    "p_7(Camden)"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "\u00acp_8(Camden)"
                ],
                "removed_rules": [
                    "p_8(Camden) \u2192 (p_9(Camden) \u2227 p_0(Camden))"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_14(Camden) \u2192 p_7(Camden)"
                ]
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_6(Camden)\n\u00acp_5(Camden)\np_4(Camden)\n\u00acp_3(Camden)\n\u00acp_1(Camden)\n\u00acp_2(Camden)\n\u00acp_0(Camden)\n\u2200x (p_15(x) \u2192 p_6(x))\np_13(Camden) \u2192 p_15(Camden)\np_4(Camden) \u2192 (p_3(Camden) \u2295 p_14(Camden))\np_11(Camden) \u2228 p_14(Camden)\np_12(Camden) \u2192 (p_13(Camden) \u2228 p_1(Camden))\n\u2200x ((p_10(x) \u2228 p_11(x)) \u2192 p_12(x))\n\u2200x ((p_10(x) \u2228 p_9(x)) \u2192 p_2(x))\np_14(Camden)\n\u00acp_15(Camden)\np_7(Camden) \u2192 p_8(Camden)\np_14(Camden) \u2192 p_7(Camden)\n\u00acp_7(Camden) \u2192 \u00acp_14(Camden)\np_7(Camden)\n\u2200x (\u00acp_6(x) \u2192 \u00acp_15(x))\n\u00acp_15(Camden) \u2192 \u00acp_13(Camden)",
            "Initial Goal": "\u00acp_7(Camden)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_6(Camden)",
                    "-p_5(Camden)",
                    "p_4(Camden)",
                    "-p_3(Camden)",
                    "-p_1(Camden)",
                    "-p_2(Camden)",
                    "-p_0(Camden)",
                    "all x (p_15(x) -> p_6(x))",
                    "p_13(Camden) -> p_15(Camden)",
                    "p_4(Camden) -> (-(p_3(Camden) <-> p_14(Camden)))",
                    "p_11(Camden) | p_14(Camden)",
                    "p_12(Camden) -> (p_13(Camden) | p_1(Camden))",
                    "all x ((p_10(x) | p_11(x)) -> p_12(x))",
                    "all x ((p_10(x) | p_9(x)) -> p_2(x))",
                    "p_14(Camden)",
                    "-p_15(Camden)",
                    "p_7(Camden) -> p_8(Camden)",
                    "p_14(Camden) -> p_7(Camden)",
                    "-p_7(Camden) -> -p_14(Camden)",
                    "p_7(Camden)",
                    "all x (-p_6(x) -> -p_15(x))",
                    "-p_15(Camden) -> -p_13(Camden)"
                ],
                "formulas(goals)": [
                    "--p_7(Camden)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_7(Camden)"
                ],
                "added_rules": [
                    "\u00acp_7(Camden) \u2192 \u00acp_14(Camden)",
                    "\u2200x (\u00acp_6(x) \u2192 \u00acp_15(x))",
                    "\u00acp_15(Camden) \u2192 \u00acp_13(Camden)"
                ]
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_6(Camden).\n\u00acp_5(Camden).\np_4(Camden).\n\u00acp_3(Camden).\n\u00acp_1(Camden).\n\u00acp_2(Camden).\n\u00acp_0(Camden).\n\u2200x (p_15(x) \u2192 p_6(x)).\np_13(Camden) \u2192 p_15(Camden).\np_4(Camden) \u2192 (p_3(Camden) \u2295 p_14(Camden)).\n\u00acp_11(Camden) \u2192 p_14(Camden).\np_12(Camden) \u2192 (p_13(Camden) \u2228 p_1(Camden)).\n\u2200x ((p_10(x) \u2228 p_11(x)) \u2192 p_12(x)).\n\u2200x ((p_10(x) \u2228 p_9(x)) \u2192 p_2(x)).\np_14(Camden).\n\u00acp_15(Camden).\np_7(Camden) \u2192 p_8(Camden).\np_14(Camden) \u2192 p_7(Camden).\n\u00acp_7(Camden) \u2192 \u00acp_14(Camden).\np_7(Camden).\n\u2200x (\u00acp_6(x) \u2192 \u00acp_15(x)).\n\u00acp_15(Camden) \u2192 \u00acp_13(Camden).\np_7(Camden) \u2227 p_14(Camden).\np_4(Camden) \u2227 \u00acp_3(Camden).",
            "Initial Goal": "\u00acp_7(Camden)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_6(Camden).",
                    "-p_5(Camden).",
                    "p_4(Camden).",
                    "-p_3(Camden).",
                    "-p_1(Camden).",
                    "-p_2(Camden).",
                    "-p_0(Camden).",
                    "all x (p_15(x) -> p_6(x)).",
                    "p_13(Camden) -> p_15(Camden).",
                    "p_4(Camden) -> (-(p_3(Camden) <-> p_14(Camden))).",
                    "(-p_11(Camden)) -> p_14(Camden).",
                    "p_12(Camden) -> (p_13(Camden) | p_1(Camden)).",
                    "all x ((p_10(x) | p_11(x)) -> p_12(x)).",
                    "all x ((p_10(x) | p_9(x)) -> p_2(x)).",
                    "p_14(Camden).",
                    "-p_15(Camden).",
                    "p_7(Camden) -> p_8(Camden).",
                    "p_14(Camden) -> p_7(Camden).",
                    "(-p_7(Camden)) -> (-p_14(Camden)).",
                    "p_7(Camden).",
                    "all x ((-p_6(x)) -> (-p_15(x))).",
                    "(-p_15(Camden)) -> (-p_13(Camden)).",
                    "p_7(Camden) & p_14(Camden).",
                    "p_4(Camden) & (-p_3(Camden))."
                ],
                "formulas(goals)": [
                    "-(-p_7(Camden))."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_11(Camden) \u2228 p_14(Camden)"
                ],
                "added_facts": [
                    "p_7(Camden) \u2227 p_14(Camden)",
                    "p_4(Camden) \u2227 \u00acp_3(Camden)"
                ],
                "added_rules": [
                    "\u00acp_11(Camden) \u2192 p_14(Camden)"
                ]
            }
        }
    ]
}