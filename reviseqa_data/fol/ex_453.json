{
    "background_story": "Stevie, a talented musician, had always dreamed of performing on the grand stages of the world. Diagnosed with a terminal illness, his time was running out. Determined to leave a lasting legacy, Stevie poured his heart and soul into composing one final, magnificent piece of music. As his health declined, he found solace in the terminal ward's small piano, where he would play for the other patients, bringing them comfort and joy. With the help of the hospital staff, Stevie's music was recorded and released, becoming an unexpected sensation. Though his own journey was coming to an end, Stevie's music would live on, a testament to the human spirit's capacity to create beauty even in the darkest of times.",
    "predicates": [
        {
            "id": 0,
            "name": "help_others"
        },
        {
            "id": 1,
            "name": "touch_hearts"
        },
        {
            "id": 2,
            "name": "is_artistic"
        },
        {
            "id": 3,
            "name": "express_emotions"
        },
        {
            "id": 4,
            "name": "have_passion"
        },
        {
            "id": 5,
            "name": "face_challenges"
        },
        {
            "id": 6,
            "name": "overcome_adversity"
        },
        {
            "id": 7,
            "name": "remain_optimistic"
        },
        {
            "id": 8,
            "name": "create_music"
        },
        {
            "id": 9,
            "name": "bring_joy"
        },
        {
            "id": 10,
            "name": "leave_legacy"
        },
        {
            "id": 11,
            "name": "find_serenity"
        },
        {
            "id": 12,
            "name": "play_piano"
        },
        {
            "id": 13,
            "name": "write_lyrics"
        },
        {
            "id": 14,
            "name": "compose_symphonies"
        },
        {
            "id": 15,
            "name": "stay_positive"
        },
        {
            "id": 16,
            "name": "share_talent"
        },
        {
            "id": 17,
            "name": "show_care"
        },
        {
            "id": 18,
            "name": "face_struggles"
        },
        {
            "id": 19,
            "name": "find_solace"
        },
        {
            "id": 20,
            "name": "pursue_dreams"
        },
        {
            "id": 21,
            "name": "inspire_others"
        },
        {
            "id": 22,
            "name": "feel_deeply"
        },
        {
            "id": 23,
            "name": "think_creatively"
        },
        {
            "id": 24,
            "name": "have_harmony"
        },
        {
            "id": 25,
            "name": "hear_melody"
        },
        {
            "id": 26,
            "name": "read_scores"
        },
        {
            "id": 27,
            "name": "make_melodies"
        },
        {
            "id": 28,
            "name": "find_hope"
        }
    ],
    "subject_name": "Stevie",
    "subject_category": "human",
    "keyword": "terminal",
    "all_facts": [
        {
            "id": 0,
            "subject": "Stevie",
            "text": "Stevie helps others.",
            "fol": "p_0(Stevie)",
            "str_fol": "help_others(Stevie)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Stevie",
            "text": "Stevie does not touch hearts.",
            "fol": "\u00acp_1(Stevie)",
            "str_fol": "\u00actouch_hearts(Stevie)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Stevie",
            "text": "Stevie is artistic.",
            "fol": "p_2(Stevie)",
            "str_fol": "is_artistic(Stevie)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Stevie",
            "text": "Stevie does not express emotions.",
            "fol": "\u00acp_3(Stevie)",
            "str_fol": "\u00acexpress_emotions(Stevie)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Stevie",
            "text": "Stevie does not have passion.",
            "fol": "\u00acp_4(Stevie)",
            "str_fol": "\u00achave_passion(Stevie)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Stevie",
            "text": "Stevie faces challenges.",
            "fol": "p_5(Stevie)",
            "str_fol": "face_challenges(Stevie)",
            "negation": false
        },
        {
            "id": 6,
            "subject": "Stevie",
            "text": "Stevie does not overcome adversity.",
            "fol": "\u00acp_6(Stevie)",
            "str_fol": "\u00acovercome_adversity(Stevie)",
            "negation": true
        },
        {
            "id": 7,
            "subject": "Stevie",
            "text": "Stevie remains optimistic.",
            "fol": "p_7(Stevie)",
            "str_fol": "remain_optimistic(Stevie)",
            "negation": false
        },
        {
            "id": 8,
            "subject": "Stevie",
            "text": "Stevie plays the piano.",
            "fol": "p_12(Stevie)",
            "str_fol": "play_piano(Stevie)",
            "negation": false
        },
        {
            "id": 9,
            "subject": "Stevie",
            "text": "Stevie does not compose symphonies.",
            "fol": "\u00acp_14(Stevie)",
            "str_fol": "\u00accompose_symphonies(Stevie)",
            "negation": true
        },
        {
            "id": 10,
            "subject": "Stevie",
            "text": "Stevie writes lyrics.",
            "fol": "p_13(Stevie)",
            "str_fol": "write_lyrics(Stevie)",
            "negation": false
        },
        {
            "id": 11,
            "subject": "Stevie",
            "text": "Stevie creates music.",
            "fol": "p_8(Stevie)",
            "str_fol": "create_music(Stevie)",
            "negation": false
        },
        {
            "id": 12,
            "subject": "Stevie",
            "text": "Stevie finds serenity.",
            "fol": "p_11(Stevie)",
            "str_fol": "find_serenity(Stevie)",
            "negation": false
        },
        {
            "id": 13,
            "subject": "Stevie",
            "text": "Stevie does not bring joy to others through his music.",
            "fol": "\u00acp_9(Stevie)",
            "str_fol": "\u00acbring_joy(Stevie)",
            "negation": true
        },
        {
            "id": 14,
            "subject": "Stevie",
            "text": "Stevie does not leave a lasting legacy.",
            "fol": "\u00acp_10(Stevie)",
            "str_fol": "\u00acleave_legacy(Stevie)",
            "negation": true
        }
    ],
    "context_facts": [
        {
            "id": 6,
            "subject": "Stevie",
            "text": "Stevie does not overcome adversity.",
            "fol": "\u00acp_6(Stevie)",
            "str_fol": "\u00acovercome_adversity(Stevie)",
            "negation": true
        },
        {
            "id": 7,
            "subject": "Stevie",
            "text": "Stevie remains optimistic.",
            "fol": "p_7(Stevie)",
            "str_fol": "remain_optimistic(Stevie)",
            "negation": false
        },
        {
            "id": 5,
            "subject": "Stevie",
            "text": "Stevie faces challenges.",
            "fol": "p_5(Stevie)",
            "str_fol": "face_challenges(Stevie)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Stevie",
            "text": "Stevie does not express emotions.",
            "fol": "\u00acp_3(Stevie)",
            "str_fol": "\u00acexpress_emotions(Stevie)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Stevie",
            "text": "Stevie does not have passion.",
            "fol": "\u00acp_4(Stevie)",
            "str_fol": "\u00achave_passion(Stevie)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Stevie",
            "text": "Stevie is artistic.",
            "fol": "p_2(Stevie)",
            "str_fol": "is_artistic(Stevie)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Stevie",
            "text": "Stevie does not touch hearts.",
            "fol": "\u00acp_1(Stevie)",
            "str_fol": "\u00actouch_hearts(Stevie)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Stevie",
            "text": "Stevie helps others.",
            "fol": "p_0(Stevie)",
            "str_fol": "help_others(Stevie)",
            "negation": false
        }
    ],
    "context_rules": [
        {
            "id": 7,
            "text": "If Stevie overcomes adversity, then he is either optimistic or positive, but not both.",
            "fol": "p_6(Stevie) \u2192 (p_7(Stevie) \u2295 p_15(Stevie))",
            "str_fol": "overcome_adversity(Stevie) \u2192 (remain_optimistic(Stevie) \u2295 stay_positive(Stevie))"
        },
        {
            "id": 6,
            "text": "If Stevie faces challenges, then he plays the piano and stays positive.",
            "fol": "p_5(Stevie) \u2192 (p_12(Stevie) \u2227 p_15(Stevie))",
            "str_fol": "face_challenges(Stevie) \u2192 (play_piano(Stevie) \u2227 stay_positive(Stevie))"
        },
        {
            "id": 5,
            "text": "If someone composes symphonies, then they express emotions and have passion.",
            "fol": "\u2200x (p_14(x) \u2192 (p_3(x) \u2227 p_4(x)))",
            "str_fol": "\u2200x (compose_symphonies(x) \u2192 (express_emotions(x) \u2227 have_passion(x)))"
        },
        {
            "id": 4,
            "text": "If Stevie is artistic, then he either composes symphonies or writes lyrics, but not both.",
            "fol": "p_2(Stevie) \u2192 (p_14(Stevie) \u2295 p_13(Stevie))",
            "str_fol": "is_artistic(Stevie) \u2192 (compose_symphonies(Stevie) \u2295 write_lyrics(Stevie))"
        },
        {
            "id": 3,
            "text": "For all humans, if they either write lyrics or create music, then they touch hearts.",
            "fol": "\u2200x ((p_13(x) \u2295 p_8(x)) \u2192 p_1(x))",
            "str_fol": "\u2200x ((write_lyrics(x) \u2295 create_music(x)) \u2192 touch_hearts(x))"
        },
        {
            "id": 2,
            "text": "Any person who plays the piano or helps others can find serenity.",
            "fol": "\u2200x ((p_12(x) \u2228 p_0(x)) \u2192 p_11(x))",
            "str_fol": "\u2200x ((play_piano(x) \u2228 help_others(x)) \u2192 find_serenity(x))"
        },
        {
            "id": 1,
            "text": "For Stevie, either he finds serenity or he brings joy to others, but not both.",
            "fol": "p_11(Stevie) \u2295 p_9(Stevie)",
            "str_fol": "find_serenity(Stevie) \u2295 bring_joy(Stevie)"
        },
        {
            "id": 0,
            "text": "If Stevie creates music, then he can either bring joy to others or leave a lasting legacy, but not both.",
            "fol": "p_8(Stevie) \u2192 (p_9(Stevie) \u2295 p_10(Stevie))",
            "str_fol": "create_music(Stevie) \u2192 (bring_joy(Stevie) \u2295 leave_legacy(Stevie))"
        }
    ],
    "context": [
        {
            "id": 6,
            "subject": "Stevie",
            "text": "Stevie does not overcome adversity.",
            "fol": "\u00acp_6(Stevie)",
            "str_fol": "\u00acovercome_adversity(Stevie)",
            "negation": true
        },
        {
            "id": 7,
            "subject": "Stevie",
            "text": "Stevie remains optimistic.",
            "fol": "p_7(Stevie)",
            "str_fol": "remain_optimistic(Stevie)",
            "negation": false
        },
        {
            "id": 5,
            "subject": "Stevie",
            "text": "Stevie faces challenges.",
            "fol": "p_5(Stevie)",
            "str_fol": "face_challenges(Stevie)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Stevie",
            "text": "Stevie does not express emotions.",
            "fol": "\u00acp_3(Stevie)",
            "str_fol": "\u00acexpress_emotions(Stevie)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Stevie",
            "text": "Stevie does not have passion.",
            "fol": "\u00acp_4(Stevie)",
            "str_fol": "\u00achave_passion(Stevie)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Stevie",
            "text": "Stevie is artistic.",
            "fol": "p_2(Stevie)",
            "str_fol": "is_artistic(Stevie)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Stevie",
            "text": "Stevie does not touch hearts.",
            "fol": "\u00acp_1(Stevie)",
            "str_fol": "\u00actouch_hearts(Stevie)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Stevie",
            "text": "Stevie helps others.",
            "fol": "p_0(Stevie)",
            "str_fol": "help_others(Stevie)",
            "negation": false
        },
        {
            "id": 7,
            "text": "If Stevie overcomes adversity, then he is either optimistic or positive, but not both.",
            "fol": "p_6(Stevie) \u2192 (p_7(Stevie) \u2295 p_15(Stevie))",
            "str_fol": "overcome_adversity(Stevie) \u2192 (remain_optimistic(Stevie) \u2295 stay_positive(Stevie))"
        },
        {
            "id": 6,
            "text": "If Stevie faces challenges, then he plays the piano and stays positive.",
            "fol": "p_5(Stevie) \u2192 (p_12(Stevie) \u2227 p_15(Stevie))",
            "str_fol": "face_challenges(Stevie) \u2192 (play_piano(Stevie) \u2227 stay_positive(Stevie))"
        },
        {
            "id": 5,
            "text": "If someone composes symphonies, then they express emotions and have passion.",
            "fol": "\u2200x (p_14(x) \u2192 (p_3(x) \u2227 p_4(x)))",
            "str_fol": "\u2200x (compose_symphonies(x) \u2192 (express_emotions(x) \u2227 have_passion(x)))"
        },
        {
            "id": 4,
            "text": "If Stevie is artistic, then he either composes symphonies or writes lyrics, but not both.",
            "fol": "p_2(Stevie) \u2192 (p_14(Stevie) \u2295 p_13(Stevie))",
            "str_fol": "is_artistic(Stevie) \u2192 (compose_symphonies(Stevie) \u2295 write_lyrics(Stevie))"
        },
        {
            "id": 3,
            "text": "For all humans, if they either write lyrics or create music, then they touch hearts.",
            "fol": "\u2200x ((p_13(x) \u2295 p_8(x)) \u2192 p_1(x))",
            "str_fol": "\u2200x ((write_lyrics(x) \u2295 create_music(x)) \u2192 touch_hearts(x))"
        },
        {
            "id": 2,
            "text": "Any person who plays the piano or helps others can find serenity.",
            "fol": "\u2200x ((p_12(x) \u2228 p_0(x)) \u2192 p_11(x))",
            "str_fol": "\u2200x ((play_piano(x) \u2228 help_others(x)) \u2192 find_serenity(x))"
        },
        {
            "id": 1,
            "text": "For Stevie, either he finds serenity or he brings joy to others, but not both.",
            "fol": "p_11(Stevie) \u2295 p_9(Stevie)",
            "str_fol": "find_serenity(Stevie) \u2295 bring_joy(Stevie)"
        },
        {
            "id": 0,
            "text": "If Stevie creates music, then he can either bring joy to others or leave a lasting legacy, but not both.",
            "fol": "p_8(Stevie) \u2192 (p_9(Stevie) \u2295 p_10(Stevie))",
            "str_fol": "create_music(Stevie) \u2192 (bring_joy(Stevie) \u2295 leave_legacy(Stevie))"
        }
    ],
    "context_fol": "\u00acp_6(Stevie)\np_7(Stevie)\np_5(Stevie)\n\u00acp_3(Stevie)\n\u00acp_4(Stevie)\np_2(Stevie)\n\u00acp_1(Stevie)\np_0(Stevie)\np_6(Stevie) \u2192 (p_7(Stevie) \u2295 p_15(Stevie))\np_5(Stevie) \u2192 (p_12(Stevie) \u2227 p_15(Stevie))\n\u2200x (p_14(x) \u2192 (p_3(x) \u2227 p_4(x)))\np_2(Stevie) \u2192 (p_14(Stevie) \u2295 p_13(Stevie))\n\u2200x ((p_13(x) \u2295 p_8(x)) \u2192 p_1(x))\n\u2200x ((p_12(x) \u2228 p_0(x)) \u2192 p_11(x))\np_11(Stevie) \u2295 p_9(Stevie)\np_8(Stevie) \u2192 (p_9(Stevie) \u2295 p_10(Stevie))",
    "conclusion": {
        "id": 14,
        "subject": "Stevie",
        "text": "Stevie does not leave a lasting legacy.",
        "fol": "\u00acp_10(Stevie)",
        "str_fol": "\u00acleave_legacy(Stevie)",
        "negation": true
    },
    "initial_answer": "False",
    "initial_goal": "\u00acp_10(Stevie)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 6,
                    "subject": "Stevie",
                    "text": "Stevie does not overcome adversity.",
                    "fol": "\u00acp_6(Stevie)",
                    "str_fol": "\u00acovercome_adversity(Stevie)",
                    "negation": true
                },
                {
                    "id": 7,
                    "subject": "Stevie",
                    "text": "Stevie remains optimistic.",
                    "fol": "p_7(Stevie)",
                    "str_fol": "remain_optimistic(Stevie)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 7,
                    "text": "If Stevie overcomes adversity, then he is either optimistic or positive, but not both.",
                    "fol": "p_6(Stevie) \u2192 (p_7(Stevie) \u2295 p_15(Stevie))",
                    "str_fol": "overcome_adversity(Stevie) \u2192 (remain_optimistic(Stevie) \u2295 stay_positive(Stevie))"
                }
            ],
            "conclusion": null
        },
        {
            "facts": [
                {
                    "id": 5,
                    "subject": "Stevie",
                    "text": "Stevie faces challenges.",
                    "fol": "p_5(Stevie)",
                    "str_fol": "face_challenges(Stevie)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 6,
                    "text": "If Stevie faces challenges, then he plays the piano and stays positive.",
                    "fol": "p_5(Stevie) \u2192 (p_12(Stevie) \u2227 p_15(Stevie))",
                    "str_fol": "face_challenges(Stevie) \u2192 (play_piano(Stevie) \u2227 stay_positive(Stevie))"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Stevie",
                "text": "Stevie plays the piano.",
                "fol": "p_12(Stevie)",
                "str_fol": "play_piano(Stevie)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 3,
                    "subject": "Stevie",
                    "text": "Stevie does not express emotions.",
                    "fol": "\u00acp_3(Stevie)",
                    "str_fol": "\u00acexpress_emotions(Stevie)",
                    "negation": true
                },
                {
                    "id": 4,
                    "subject": "Stevie",
                    "text": "Stevie does not have passion.",
                    "fol": "\u00acp_4(Stevie)",
                    "str_fol": "\u00achave_passion(Stevie)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "If someone composes symphonies, then they express emotions and have passion.",
                    "fol": "\u2200x (p_14(x) \u2192 (p_3(x) \u2227 p_4(x)))",
                    "str_fol": "\u2200x (compose_symphonies(x) \u2192 (express_emotions(x) \u2227 have_passion(x)))"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Stevie",
                "text": "Stevie does not compose symphonies.",
                "fol": "\u00acp_14(Stevie)",
                "str_fol": "\u00accompose_symphonies(Stevie)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 2,
                    "subject": "Stevie",
                    "text": "Stevie is artistic.",
                    "fol": "p_2(Stevie)",
                    "str_fol": "is_artistic(Stevie)",
                    "negation": false
                },
                {
                    "id": 9,
                    "subject": "Stevie",
                    "text": "Stevie does not compose symphonies.",
                    "fol": "\u00acp_14(Stevie)",
                    "str_fol": "\u00accompose_symphonies(Stevie)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "If Stevie is artistic, then he either composes symphonies or writes lyrics, but not both.",
                    "fol": "p_2(Stevie) \u2192 (p_14(Stevie) \u2295 p_13(Stevie))",
                    "str_fol": "is_artistic(Stevie) \u2192 (compose_symphonies(Stevie) \u2295 write_lyrics(Stevie))"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Stevie",
                "text": "Stevie writes lyrics.",
                "fol": "p_13(Stevie)",
                "str_fol": "write_lyrics(Stevie)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 10,
                    "subject": "Stevie",
                    "text": "Stevie writes lyrics.",
                    "fol": "p_13(Stevie)",
                    "str_fol": "write_lyrics(Stevie)",
                    "negation": false
                },
                {
                    "id": 1,
                    "subject": "Stevie",
                    "text": "Stevie does not touch hearts.",
                    "fol": "\u00acp_1(Stevie)",
                    "str_fol": "\u00actouch_hearts(Stevie)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "For all humans, if they either write lyrics or create music, then they touch hearts.",
                    "fol": "\u2200x ((p_13(x) \u2295 p_8(x)) \u2192 p_1(x))",
                    "str_fol": "\u2200x ((write_lyrics(x) \u2295 create_music(x)) \u2192 touch_hearts(x))"
                }
            ],
            "conclusion": {
                "id": 11,
                "subject": "Stevie",
                "text": "Stevie creates music.",
                "fol": "p_8(Stevie)",
                "str_fol": "create_music(Stevie)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 8,
                    "subject": "Stevie",
                    "text": "Stevie plays the piano.",
                    "fol": "p_12(Stevie)",
                    "str_fol": "play_piano(Stevie)",
                    "negation": false
                },
                {
                    "id": 0,
                    "subject": "Stevie",
                    "text": "Stevie helps others.",
                    "fol": "p_0(Stevie)",
                    "str_fol": "help_others(Stevie)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "Any person who plays the piano or helps others can find serenity.",
                    "fol": "\u2200x ((p_12(x) \u2228 p_0(x)) \u2192 p_11(x))",
                    "str_fol": "\u2200x ((play_piano(x) \u2228 help_others(x)) \u2192 find_serenity(x))"
                }
            ],
            "conclusion": {
                "id": 12,
                "subject": "Stevie",
                "text": "Stevie finds serenity.",
                "fol": "p_11(Stevie)",
                "str_fol": "find_serenity(Stevie)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 12,
                    "subject": "Stevie",
                    "text": "Stevie finds serenity.",
                    "fol": "p_11(Stevie)",
                    "str_fol": "find_serenity(Stevie)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "For Stevie, either he finds serenity or he brings joy to others, but not both.",
                    "fol": "p_11(Stevie) \u2295 p_9(Stevie)",
                    "str_fol": "find_serenity(Stevie) \u2295 bring_joy(Stevie)"
                }
            ],
            "conclusion": {
                "id": 13,
                "subject": "Stevie",
                "text": "Stevie does not bring joy to others through his music.",
                "fol": "\u00acp_9(Stevie)",
                "str_fol": "\u00acbring_joy(Stevie)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 11,
                    "subject": "Stevie",
                    "text": "Stevie creates music.",
                    "fol": "p_8(Stevie)",
                    "str_fol": "create_music(Stevie)",
                    "negation": false
                },
                {
                    "id": 13,
                    "subject": "Stevie",
                    "text": "Stevie does not bring joy to others through his music.",
                    "fol": "\u00acp_9(Stevie)",
                    "str_fol": "\u00acbring_joy(Stevie)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "If Stevie creates music, then he can either bring joy to others or leave a lasting legacy, but not both.",
                    "fol": "p_8(Stevie) \u2192 (p_9(Stevie) \u2295 p_10(Stevie))",
                    "str_fol": "create_music(Stevie) \u2192 (bring_joy(Stevie) \u2295 leave_legacy(Stevie))"
                }
            ],
            "conclusion": {
                "id": 14,
                "subject": "Stevie",
                "text": "Stevie does not leave a lasting legacy.",
                "fol": "\u00acp_10(Stevie)",
                "str_fol": "\u00acleave_legacy(Stevie)",
                "negation": true
            }
        }
    ],
    "proof_trace": "3 (all x (p_14(x) -> p_3(x) & p_4(x))).  [assumption].\n4 p_2(Stevie) -> -(p_14(Stevie) <-> p_13(Stevie)).  [assumption].\n5 (all x (-(p_13(x) <-> p_8(x)) -> p_1(x))).  [assumption].\n6 (all x (p_12(x) | p_0(x) -> p_11(x))).  [assumption].\n7 -(p_11(Stevie) <-> p_9(Stevie)).  [assumption].\n8 p_8(Stevie) -> -(p_9(Stevie) <-> p_10(Stevie)).  [assumption].\n9 --p_10(Stevie).  [goal].\n13 -p_14(x) | p_3(x).  [clausify(3)].\n14 -p_3(Stevie).  [assumption].\n17 -p_2(Stevie) | p_14(Stevie) | p_13(Stevie).  [clausify(4)].\n18 p_2(Stevie).  [assumption].\n20 -p_13(x) | p_8(x) | p_1(x).  [clausify(5)].\n21 -p_1(Stevie).  [assumption].\n23 -p_0(x) | p_11(x).  [clausify(6)].\n24 p_0(Stevie).  [assumption].\n27 -p_11(Stevie) | -p_9(Stevie).  [clausify(7)].\n29 p_11(Stevie).  [resolve(23,a,24,a)].\n30 -p_13(Stevie) | p_8(Stevie).  [resolve(20,c,21,a)].\n31 -p_8(Stevie) | p_9(Stevie) | p_10(Stevie).  [clausify(8)].\n34 -p_13(Stevie) | p_9(Stevie) | p_10(Stevie).  [resolve(30,b,31,a)].\n35 -p_10(Stevie).  [deny(9)].\n36 p_14(Stevie) | p_13(Stevie).  [resolve(17,a,18,a)].\n37 -p_14(Stevie).  [resolve(13,b,14,a)].\n38 -p_13(Stevie) | p_9(Stevie).  [resolve(34,c,35,a)].\n39 -p_9(Stevie).  [resolve(29,a,27,a)].\n40 -p_13(Stevie).  [resolve(38,b,39,a)].\n41 p_13(Stevie).  [resolve(36,a,37,a)].\n42 $F.  [resolve(40,a,41,a)].",
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_6(Stevie)\np_7(Stevie)\np_5(Stevie)\n\u00acp_3(Stevie)\n\u00acp_4(Stevie)\np_2(Stevie)\n\u00acp_1(Stevie)\np_0(Stevie)\np_6(Stevie) \u2192 (p_7(Stevie) \u2295 p_15(Stevie))\np_5(Stevie) \u2192 \u00acp_10(Stevie)\n\u2200x (p_14(x) \u2192 (p_3(x) \u2227 p_4(x)))\n\u2200x ((p_13(x) \u2295 p_8(x)) \u2192 p_1(x))\n\u2200x ((p_12(x) \u2228 p_0(x)) \u2192 p_11(x))\np_11(Stevie) \u2295 p_9(Stevie)\np_8(Stevie) \u2192 (p_9(Stevie) \u2295 p_10(Stevie))",
            "Initial Goal": "\u00acp_10(Stevie)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_6(Stevie)",
                    "p_7(Stevie)",
                    "p_5(Stevie)",
                    "-p_3(Stevie)",
                    "-p_4(Stevie)",
                    "p_2(Stevie)",
                    "-p_1(Stevie)",
                    "p_0(Stevie)",
                    "p_6(Stevie) -> (-(p_7(Stevie) <-> p_15(Stevie)))",
                    "p_5(Stevie) -> -p_10(Stevie)",
                    "all x (p_14(x) -> (p_3(x) & p_4(x)))",
                    "all x (-(p_13(x) <-> p_8(x)) -> p_1(x))",
                    "all x ((p_12(x) | p_0(x)) -> p_11(x))",
                    "-(p_11(Stevie) <-> p_9(Stevie))",
                    "p_8(Stevie) -> (-(p_9(Stevie) <-> p_10(Stevie)))"
                ],
                "formulas(goals)": [
                    "-p_10(Stevie)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_2(Stevie) \u2192 (p_14(Stevie) \u2295 p_13(Stevie))"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_5(Stevie) \u2192 \u00acp_10(Stevie)"
                ]
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_6(Stevie)\np_7(Stevie)\np_5(Stevie)\n\u00acp_3(Stevie)\n\u00acp_4(Stevie)\np_2(Stevie)\n\u00acp_1(Stevie)\np_0(Stevie)\np_6(Stevie) \u2192 (p_7(Stevie) \u2295 p_15(Stevie))\np_10(Stevie) \u2192 \u00acp_5(Stevie)\n\u2200x (p_14(x) \u2192 (p_3(x) \u2227 p_4(x)))\n\u2200x ((p_13(x) \u2295 p_8(x)) \u2192 p_1(x))\n\u2200x ((p_12(x) \u2228 p_0(x)) \u2192 p_11(x))\np_11(Stevie) \u2295 p_9(Stevie)\np_8(Stevie) \u2192 (p_9(Stevie) \u2295 p_10(Stevie))\n\u00acp_10(Stevie)\np_11(Stevie)\n\u00acp_9(Stevie)",
            "Initial Goal": "\u00acp_10(Stevie)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_6(Stevie)",
                    "p_7(Stevie)",
                    "p_5(Stevie)",
                    "-p_3(Stevie)",
                    "-p_4(Stevie)",
                    "p_2(Stevie)",
                    "-p_1(Stevie)",
                    "p_0(Stevie)",
                    "p_6(Stevie) -> (-(p_7(Stevie) <-> p_15(Stevie)))",
                    "p_10(Stevie) -> -p_5(Stevie)",
                    "all x (p_14(x) -> (p_3(x) & p_4(x)))",
                    "all x ((-(p_13(x) <-> p_8(x))) -> p_1(x))",
                    "all x ((p_12(x) | p_0(x)) -> p_11(x))",
                    "-(p_11(Stevie) <-> p_9(Stevie))",
                    "p_8(Stevie) -> (-(p_9(Stevie) <-> p_10(Stevie)))",
                    "-p_10(Stevie)",
                    "p_11(Stevie)",
                    "-p_9(Stevie)"
                ],
                "formulas(goals)": [
                    "-p_10(Stevie)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_5(Stevie) \u2192 \u00acp_10(Stevie)"
                ],
                "added_facts": [
                    "\u00acp_10(Stevie)",
                    "p_11(Stevie)",
                    "\u00acp_9(Stevie)"
                ],
                "added_rules": [
                    "p_10(Stevie) \u2192 \u00acp_5(Stevie)"
                ]
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_6(Stevie).\np_7(Stevie).\np_5(Stevie).\n\u00acp_3(Stevie).\n\u00acp_4(Stevie).\np_2(Stevie).\n\u00acp_1(Stevie).\np_0(Stevie).\np_6(Stevie) \u2192 (\u00ac(p_7(Stevie) \u2194 p_15(Stevie))).\n\u2200x (p_14(x) \u2192 (p_3(x) \u2227 p_4(x))).\n\u2200x ((\u00ac(p_13(x) \u2194 p_8(x))) \u2192 p_1(x)).\n\u2200x ((p_12(x) \u2228 p_0(x)) \u2192 p_11(x)).\n\u00ac(p_11(Stevie) \u2194 p_9(Stevie)).\np_8(Stevie) \u2192 (\u00ac(p_9(Stevie) \u2194 p_10(Stevie))).\np_11(Stevie).\n\u00acp_9(Stevie).\np_5(Stevie) \u2192 p_10(Stevie).",
            "Initial Goal": "\u00acp_10(Stevie)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_6(Stevie).",
                    "p_7(Stevie).",
                    "p_5(Stevie).",
                    "-p_3(Stevie).",
                    "-p_4(Stevie).",
                    "p_2(Stevie).",
                    "-p_1(Stevie).",
                    "p_0(Stevie).",
                    "p_6(Stevie) -> (-(p_7(Stevie) <-> p_15(Stevie))).",
                    "all x (p_14(x) -> (p_3(x) & p_4(x))).",
                    "all x ((-(p_13(x) <-> p_8(x))) -> p_1(x)).",
                    "all x ((p_12(x) | p_0(x)) -> p_11(x)).",
                    "-(p_11(Stevie) <-> p_9(Stevie)).",
                    "p_8(Stevie) -> (-(p_9(Stevie) <-> p_10(Stevie))).",
                    "p_11(Stevie).",
                    "-p_9(Stevie).",
                    "p_5(Stevie) -> p_10(Stevie)."
                ],
                "formulas(goals)": [
                    "p_10(Stevie)."
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "\u00acp_10(Stevie)"
                ],
                "removed_rules": [
                    "p_10(Stevie) \u2192 \u00acp_5(Stevie)"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_5(Stevie) \u2192 p_10(Stevie)"
                ]
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_6(Stevie)\np_7(Stevie)\np_5(Stevie)\n\u00acp_3(Stevie)\n\u00acp_4(Stevie)\np_2(Stevie)\n\u00acp_1(Stevie)\np_0(Stevie)\np_6(Stevie) \u2192 \u00ac(p_7(Stevie) \u2194 p_15(Stevie))\n\u2200x (p_14(x) \u2192 (p_3(x) \u2227 p_4(x)))\n\u2200x (\u00ac(p_13(x) \u2194 p_8(x)) \u2192 p_1(x))\n\u2200x ((p_12(x) \u2228 p_0(x)) \u2192 p_11(x))\n\u00ac(p_11(Stevie) \u2194 p_9(Stevie))\np_8(Stevie) \u2192 \u00ac(p_9(Stevie) \u2194 p_10(Stevie))\np_11(Stevie)\n\u00acp_9(Stevie)\n(p_5(Stevie) \u2227 p_7(Stevie)) \u2192 \u00acp_10(Stevie)",
            "Initial Goal": "\u00acp_10(Stevie)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_6(Stevie).",
                    "p_7(Stevie).",
                    "p_5(Stevie).",
                    "-p_3(Stevie).",
                    "-p_4(Stevie).",
                    "p_2(Stevie).",
                    "-p_1(Stevie).",
                    "p_0(Stevie).",
                    "p_6(Stevie) -> (-(p_7(Stevie) <-> p_15(Stevie))).",
                    "(all x (p_14(x) -> (p_3(x) & p_4(x)))).",
                    "(all x ((-(p_13(x) <-> p_8(x))) -> p_1(x))).",
                    "(all x ((p_12(x) | p_0(x)) -> p_11(x))).",
                    "-(p_11(Stevie) <-> p_9(Stevie)).",
                    "p_8(Stevie) -> (-(p_9(Stevie) <-> p_10(Stevie))).",
                    "p_11(Stevie).",
                    "-p_9(Stevie).",
                    "(p_5(Stevie) & p_7(Stevie)) -> -p_10(Stevie)."
                ],
                "formulas(goals)": [
                    "-p_10(Stevie)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_5(Stevie) \u2192 p_10(Stevie)"
                ],
                "added_facts": [],
                "added_rules": [
                    "(p_5(Stevie) \u2227 p_7(Stevie)) \u2192 \u00acp_10(Stevie)"
                ]
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_6(Stevie)\np_7(Stevie)\np_5(Stevie)\n\u00acp_3(Stevie)\n\u00acp_4(Stevie)\np_2(Stevie)\n\u00acp_1(Stevie)\np_0(Stevie)\np_6(Stevie) \u2192 \u00ac(p_7(Stevie) \u2194 p_15(Stevie))\n\u2200x (p_14(x) \u2192 (p_3(x) \u2227 p_4(x)))\n\u2200x (\u00ac(p_13(x) \u2194 p_8(x)) \u2192 p_1(x))\n\u2200x ((p_12(x) \u2228 p_0(x)) \u2192 p_11(x))\n\u00ac(p_11(Stevie) \u2194 p_9(Stevie))\np_8(Stevie) \u2192 \u00ac(p_9(Stevie) \u2194 p_10(Stevie))\np_11(Stevie)\n\u00acp_9(Stevie)\n(p_5(Stevie) \u2227 p_7(Stevie)) \u2192 \u00acp_10(Stevie)\np_10(Stevie) \u2192 \u00ac(p_5(Stevie) \u2227 p_7(Stevie))\n(p_11(Stevie) \u2227 \u00acp_9(Stevie))\n\u00acp_14(Stevie)\n(p_13(Stevie) \u2194 p_8(Stevie))\n(p_9(Stevie) \u2194 p_10(Stevie)) \u2192 \u00acp_8(Stevie)",
            "Initial Goal": "\u00acp_10(Stevie)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_6(Stevie)",
                    "p_7(Stevie)",
                    "p_5(Stevie)",
                    "-p_3(Stevie)",
                    "-p_4(Stevie)",
                    "p_2(Stevie)",
                    "-p_1(Stevie)",
                    "p_0(Stevie)",
                    "p_6(Stevie) -> -(p_7(Stevie) <-> p_15(Stevie))",
                    "all x (p_14(x) -> (p_3(x) & p_4(x)))",
                    "all x (-(p_13(x) <-> p_8(x)) -> p_1(x))",
                    "all x ((p_12(x) | p_0(x)) -> p_11(x))",
                    "-(p_11(Stevie) <-> p_9(Stevie))",
                    "p_8(Stevie) -> -(p_9(Stevie) <-> p_10(Stevie))",
                    "p_11(Stevie)",
                    "-p_9(Stevie)",
                    "(p_5(Stevie) & p_7(Stevie)) -> -p_10(Stevie)",
                    "p_10(Stevie) -> -(p_5(Stevie) & p_7(Stevie))",
                    "(p_11(Stevie) & -p_9(Stevie))",
                    "-p_14(Stevie)",
                    "p_13(Stevie) <-> p_8(Stevie)",
                    "(p_9(Stevie) <-> p_10(Stevie)) -> -p_8(Stevie)"
                ],
                "formulas(goals)": [
                    "-p_10(Stevie)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "\u00acp_14(Stevie)",
                    "(p_11(Stevie) \u2227 \u00acp_9(Stevie))"
                ],
                "added_rules": [
                    "p_10(Stevie) \u2192 \u00ac(p_5(Stevie) \u2227 p_7(Stevie))",
                    "(p_13(Stevie) \u2194 p_8(Stevie))",
                    "(p_9(Stevie) \u2194 p_10(Stevie)) \u2192 \u00acp_8(Stevie)"
                ]
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_6(Stevie)\np_7(Stevie)\np_5(Stevie)\n\u00acp_3(Stevie)\n\u00acp_4(Stevie)\np_2(Stevie)\n\u00acp_1(Stevie)\np_0(Stevie)\np_6(Stevie) \u2192 ((p_7(Stevie) \u2227 \u00acp_15(Stevie)) \u2228 (\u00acp_7(Stevie) \u2227 p_15(Stevie)))\n\u2200x (p_14(x) \u2192 (p_3(x) \u2227 p_4(x)))\n\u2200x (\u00ac(p_13(x) \u2194 p_8(x)) \u2192 p_1(x))\n\u2200x ((p_12(x) \u2228 p_0(x)) \u2192 p_11(x))\n\u00ac(p_11(Stevie) \u2194 p_9(Stevie))\np_8(Stevie) \u2192 \u00ac(p_9(Stevie) \u2194 p_10(Stevie))\np_11(Stevie)\n\u00acp_9(Stevie)\n(p_5(Stevie) \u2227 p_7(Stevie)) \u2192 \u00acp_10(Stevie)\np_10(Stevie) \u2192 (\u00acp_5(Stevie) \u2228 \u00acp_7(Stevie))\n(p_11(Stevie) \u2227 \u00acp_9(Stevie))\n\u00acp_14(Stevie)\n(p_13(Stevie) \u2192 p_8(Stevie)) \u2227 (p_8(Stevie) \u2192 p_13(Stevie))\n(p_9(Stevie) \u2194 p_10(Stevie)) \u2192 \u00acp_8(Stevie)\np_5(Stevie) \u2227 p_7(Stevie)",
            "Initial Goal": "\u00acp_10(Stevie)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_6(Stevie)",
                    "p_7(Stevie)",
                    "p_5(Stevie)",
                    "-p_3(Stevie)",
                    "-p_4(Stevie)",
                    "p_2(Stevie)",
                    "-p_1(Stevie)",
                    "p_0(Stevie)",
                    "p_6(Stevie) -> ((p_7(Stevie) & -p_15(Stevie)) | (-p_7(Stevie) & p_15(Stevie)))",
                    "all x (p_14(x) -> (p_3(x) & p_4(x)))",
                    "all x (-(p_13(x) <-> p_8(x)) -> p_1(x))",
                    "all x ((p_12(x) | p_0(x)) -> p_11(x))",
                    "-(p_11(Stevie) <-> p_9(Stevie))",
                    "p_8(Stevie) -> -(p_9(Stevie) <-> p_10(Stevie))",
                    "p_11(Stevie)",
                    "-p_9(Stevie)",
                    "(p_5(Stevie) & p_7(Stevie)) -> -p_10(Stevie)",
                    "p_10(Stevie) -> (-p_5(Stevie) | -p_7(Stevie))",
                    "(p_11(Stevie) & -p_9(Stevie))",
                    "-p_14(Stevie)",
                    "(p_13(Stevie) -> p_8(Stevie)) & (p_8(Stevie) -> p_13(Stevie))",
                    "(p_9(Stevie) <-> p_10(Stevie)) -> -p_8(Stevie)",
                    "p_5(Stevie) & p_7(Stevie)"
                ],
                "formulas(goals)": [
                    "-p_10(Stevie)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_5(Stevie) \u2227 p_7(Stevie)"
                ],
                "added_rules": [
                    "p_6(Stevie) \u2192 ((p_7(Stevie) \u2227 \u00acp_15(Stevie)) \u2228 (\u00acp_7(Stevie) \u2227 p_15(Stevie)))",
                    "p_10(Stevie) \u2192 (\u00acp_5(Stevie) \u2228 \u00acp_7(Stevie))",
                    "(p_13(Stevie) \u2192 p_8(Stevie)) \u2227 (p_8(Stevie) \u2192 p_13(Stevie))"
                ]
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_6(Stevie)\np_7(Stevie)\np_5(Stevie)\n\u00acp_3(Stevie)\n\u00acp_4(Stevie)\np_2(Stevie)\n\u00acp_1(Stevie)\np_0(Stevie)\np_6(Stevie) \u2192 ((p_7(Stevie) \u2227 \u00acp_15(Stevie)) \u2228 (\u00acp_7(Stevie) \u2227 p_15(Stevie)))\n\u2200x (p_14(x) \u2192 (p_3(x) \u2227 p_4(x)))\n\u2200x (\u00ac(p_13(x) \u2194 p_8(x)) \u2192 p_1(x))\n\u2200x ((p_12(x) \u2228 p_0(x)) \u2192 p_11(x))\n\u00ac(p_11(Stevie) \u2194 p_9(Stevie))\np_8(Stevie) \u2192 \u00ac(p_9(Stevie) \u2194 p_10(Stevie))\np_11(Stevie)\n\u00acp_9(Stevie)\n(p_5(Stevie) \u2227 p_7(Stevie)) \u2192 \u00acp_10(Stevie)\np_10(Stevie) \u2192 (\u00acp_5(Stevie) \u2228 \u00acp_7(Stevie))\n(p_11(Stevie) \u2227 \u00acp_9(Stevie))\n\u00acp_14(Stevie)\n(p_13(Stevie) \u2192 p_8(Stevie)) \u2227 (p_8(Stevie) \u2192 p_13(Stevie))\n(p_9(Stevie) \u2194 p_10(Stevie)) \u2192 \u00acp_8(Stevie)\np_5(Stevie) \u2227 p_7(Stevie)\np_10(Stevie) \u2192 \u00acp_5(Stevie)\np_10(Stevie) \u2192 \u00acp_7(Stevie)",
            "Initial Goal": "\u00acp_10(Stevie)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_6(Stevie)",
                    "p_7(Stevie)",
                    "p_5(Stevie)",
                    "-p_3(Stevie)",
                    "-p_4(Stevie)",
                    "p_2(Stevie)",
                    "-p_1(Stevie)",
                    "p_0(Stevie)",
                    "p_6(Stevie) -> ((p_7(Stevie) & -p_15(Stevie)) | (-p_7(Stevie) & p_15(Stevie)))",
                    "all x (p_14(x) -> (p_3(x) & p_4(x)))",
                    "all x (-(p_13(x) <-> p_8(x)) -> p_1(x))",
                    "all x ((p_12(x) | p_0(x)) -> p_11(x))",
                    "-(p_11(Stevie) <-> p_9(Stevie))",
                    "p_8(Stevie) -> -(p_9(Stevie) <-> p_10(Stevie))",
                    "p_11(Stevie)",
                    "-p_9(Stevie)",
                    "(p_5(Stevie) & p_7(Stevie)) -> -p_10(Stevie)",
                    "p_10(Stevie) -> (-p_5(Stevie) | -p_7(Stevie))",
                    "(p_11(Stevie) & -p_9(Stevie))",
                    "-p_14(Stevie)",
                    "(p_13(Stevie) -> p_8(Stevie)) & (p_8(Stevie) -> p_13(Stevie))",
                    "(p_9(Stevie) <-> p_10(Stevie)) -> -p_8(Stevie)",
                    "p_5(Stevie) & p_7(Stevie)",
                    "p_10(Stevie) -> -p_5(Stevie)",
                    "p_10(Stevie) -> -p_7(Stevie)"
                ],
                "formulas(goals)": [
                    "-p_10(Stevie)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "p_10(Stevie) \u2192 \u00acp_5(Stevie)",
                    "p_10(Stevie) \u2192 \u00acp_7(Stevie)"
                ]
            }
        }
    ]
}