{
    "background_story": "Roger was a sailing enthusiast who spent most of his summers on the water. He was particularly fond of his pair of Sperry Top-Siders, which had been his trusted companions for countless voyages. The shoes had been a gift from his grandfather, a seasoned sailor who had introduced Roger to the world of sailing. Over the years, Roger's Sperrys had become a symbol of his love for the sea and his family's sailing traditions. He wore them on every trip, from casual cruises to competitive regattas. As Roger navigated through life's challenges, his Sperrys reminded him of the importance of staying grounded and connected to his roots.",
    "predicates": [
        {
            "id": 0,
            "name": "enjoys_boating"
        },
        {
            "id": 1,
            "name": "have_sailing_experience"
        },
        {
            "id": 2,
            "name": "lives_coastal"
        },
        {
            "id": 3,
            "name": "likes_hiking"
        },
        {
            "id": 4,
            "name": "cooks_meals"
        },
        {
            "id": 5,
            "name": "lives_near_port"
        },
        {
            "id": 6,
            "name": "is_mariner"
        },
        {
            "id": 7,
            "name": "sailing_enthusiast"
        },
        {
            "id": 8,
            "name": "own_sailing_gear"
        },
        {
            "id": 9,
            "name": "loves_water"
        },
        {
            "id": 10,
            "name": "goes_sailing"
        },
        {
            "id": 11,
            "name": "is_fisherman"
        },
        {
            "id": 12,
            "name": "eats_seafood"
        },
        {
            "id": 13,
            "name": "owns_boat"
        },
        {
            "id": 14,
            "name": "knows_knots"
        },
        {
            "id": 15,
            "name": "reads_charts"
        },
        {
            "id": 16,
            "name": "buys_equipment"
        },
        {
            "id": 17,
            "name": "joins_regattas"
        },
        {
            "id": 18,
            "name": "enjoys_outdoors"
        },
        {
            "id": 19,
            "name": "lives_near_ocean"
        },
        {
            "id": 20,
            "name": "has_water_passion"
        },
        {
            "id": 21,
            "name": "owns_net"
        },
        {
            "id": 22,
            "name": "knows_tides"
        },
        {
            "id": 23,
            "name": "lives_near_beach"
        },
        {
            "id": 24,
            "name": "enjoys_fishing"
        },
        {
            "id": 25,
            "name": "ties_knots"
        }
    ],
    "subject_name": "Roger",
    "subject_category": "human",
    "keyword": "sperry",
    "all_facts": [
        {
            "id": 0,
            "subject": "Roger",
            "text": "Roger enjoys boating.",
            "fol": "p_0(Roger)",
            "str_fol": "enjoys_boating(Roger)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Roger",
            "text": "Roger does not have sailing experience.",
            "fol": "\u00acp_1(Roger)",
            "str_fol": "\u00achave_sailing_experience(Roger)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Roger",
            "text": "Roger lives in a coastal area.",
            "fol": "p_2(Roger)",
            "str_fol": "lives_coastal(Roger)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Roger",
            "text": "Roger likes hiking.",
            "fol": "p_3(Roger)",
            "str_fol": "likes_hiking(Roger)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Roger",
            "text": "Roger does not cook meals.",
            "fol": "\u00acp_4(Roger)",
            "str_fol": "\u00accooks_meals(Roger)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Roger",
            "text": "Roger does not live near a port.",
            "fol": "\u00acp_5(Roger)",
            "str_fol": "\u00aclives_near_port(Roger)",
            "negation": true
        },
        {
            "id": 6,
            "subject": "Roger",
            "text": "Roger is not a mariner.",
            "fol": "\u00acp_6(Roger)",
            "str_fol": "\u00acis_mariner(Roger)",
            "negation": true
        },
        {
            "id": 7,
            "subject": "Roger",
            "text": "Roger does not own a boat.",
            "fol": "\u00acp_13(Roger)",
            "str_fol": "\u00acowns_boat(Roger)",
            "negation": true
        },
        {
            "id": 8,
            "subject": "Roger",
            "text": "Roger eats seafood.",
            "fol": "p_12(Roger)",
            "str_fol": "eats_seafood(Roger)",
            "negation": false
        },
        {
            "id": 9,
            "subject": "Roger",
            "text": "Roger is a fisherman.",
            "fol": "p_11(Roger)",
            "str_fol": "is_fisherman(Roger)",
            "negation": false
        },
        {
            "id": 10,
            "subject": "Roger",
            "text": "Roger does not go sailing.",
            "fol": "\u00acp_10(Roger)",
            "str_fol": "\u00acgoes_sailing(Roger)",
            "negation": true
        },
        {
            "id": 11,
            "subject": "Roger",
            "text": "Roger does not love the water.",
            "fol": "\u00acp_9(Roger)",
            "str_fol": "\u00acloves_water(Roger)",
            "negation": true
        }
    ],
    "context_facts": [
        {
            "id": 5,
            "subject": "Roger",
            "text": "Roger does not live near a port.",
            "fol": "\u00acp_5(Roger)",
            "str_fol": "\u00aclives_near_port(Roger)",
            "negation": true
        },
        {
            "id": 6,
            "subject": "Roger",
            "text": "Roger is not a mariner.",
            "fol": "\u00acp_6(Roger)",
            "str_fol": "\u00acis_mariner(Roger)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Roger",
            "text": "Roger does not cook meals.",
            "fol": "\u00acp_4(Roger)",
            "str_fol": "\u00accooks_meals(Roger)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Roger",
            "text": "Roger lives in a coastal area.",
            "fol": "p_2(Roger)",
            "str_fol": "lives_coastal(Roger)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Roger",
            "text": "Roger likes hiking.",
            "fol": "p_3(Roger)",
            "str_fol": "likes_hiking(Roger)",
            "negation": false
        },
        {
            "id": 0,
            "subject": "Roger",
            "text": "Roger enjoys boating.",
            "fol": "p_0(Roger)",
            "str_fol": "enjoys_boating(Roger)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Roger",
            "text": "Roger does not have sailing experience.",
            "fol": "\u00acp_1(Roger)",
            "str_fol": "\u00achave_sailing_experience(Roger)",
            "negation": true
        }
    ],
    "context_rules": [
        {
            "id": 6,
            "text": "If Roger either lives near a port or owns a boat (but not both), then he is a mariner.",
            "fol": "(p_5(Roger) \u2295 p_13(Roger)) \u2192 p_6(Roger)",
            "str_fol": "(lives_near_port(Roger) \u2295 owns_boat(Roger)) \u2192 is_mariner(Roger)"
        },
        {
            "id": 5,
            "text": "Roger either cooks meals or eats seafood.",
            "fol": "p_4(Roger) \u2228 p_12(Roger)",
            "str_fol": "cooks_meals(Roger) \u2228 eats_seafood(Roger)"
        },
        {
            "id": 4,
            "text": "If Roger either eats seafood or owns a boat (but not both), then he is a fisherman.",
            "fol": "(p_12(Roger) \u2295 p_13(Roger)) \u2192 p_11(Roger)",
            "str_fol": "(eats_seafood(Roger) \u2295 owns_boat(Roger)) \u2192 is_fisherman(Roger)"
        },
        {
            "id": 3,
            "text": "If Roger lives in a coastal area, then he either goes sailing or is a fisherman, but not both.",
            "fol": "p_2(Roger) \u2192 (p_10(Roger) \u2295 p_11(Roger))",
            "str_fol": "lives_coastal(Roger) \u2192 (goes_sailing(Roger) \u2295 is_fisherman(Roger))"
        },
        {
            "id": 2,
            "text": "Roger either loves water or likes hiking, but not both.",
            "fol": "p_9(Roger) \u2295 p_3(Roger)",
            "str_fol": "loves_water(Roger) \u2295 likes_hiking(Roger)"
        },
        {
            "id": 1,
            "text": "If Roger owns sailing gear and loves the water, then he goes sailing.",
            "fol": "(p_8(Roger) \u2227 p_9(Roger)) \u2192 p_10(Roger)",
            "str_fol": "(own_sailing_gear(Roger) \u2227 loves_water(Roger)) \u2192 goes_sailing(Roger)"
        },
        {
            "id": 0,
            "text": "Roger enjoys boating or is a sailing enthusiast.",
            "fol": "p_0(Roger) \u2228 p_7(Roger)",
            "str_fol": "enjoys_boating(Roger) \u2228 sailing_enthusiast(Roger)"
        }
    ],
    "context": [
        {
            "id": 5,
            "subject": "Roger",
            "text": "Roger does not live near a port.",
            "fol": "\u00acp_5(Roger)",
            "str_fol": "\u00aclives_near_port(Roger)",
            "negation": true
        },
        {
            "id": 6,
            "subject": "Roger",
            "text": "Roger is not a mariner.",
            "fol": "\u00acp_6(Roger)",
            "str_fol": "\u00acis_mariner(Roger)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Roger",
            "text": "Roger does not cook meals.",
            "fol": "\u00acp_4(Roger)",
            "str_fol": "\u00accooks_meals(Roger)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Roger",
            "text": "Roger lives in a coastal area.",
            "fol": "p_2(Roger)",
            "str_fol": "lives_coastal(Roger)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Roger",
            "text": "Roger likes hiking.",
            "fol": "p_3(Roger)",
            "str_fol": "likes_hiking(Roger)",
            "negation": false
        },
        {
            "id": 0,
            "subject": "Roger",
            "text": "Roger enjoys boating.",
            "fol": "p_0(Roger)",
            "str_fol": "enjoys_boating(Roger)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Roger",
            "text": "Roger does not have sailing experience.",
            "fol": "\u00acp_1(Roger)",
            "str_fol": "\u00achave_sailing_experience(Roger)",
            "negation": true
        },
        {
            "id": 6,
            "text": "If Roger either lives near a port or owns a boat (but not both), then he is a mariner.",
            "fol": "(p_5(Roger) \u2295 p_13(Roger)) \u2192 p_6(Roger)",
            "str_fol": "(lives_near_port(Roger) \u2295 owns_boat(Roger)) \u2192 is_mariner(Roger)"
        },
        {
            "id": 5,
            "text": "Roger either cooks meals or eats seafood.",
            "fol": "p_4(Roger) \u2228 p_12(Roger)",
            "str_fol": "cooks_meals(Roger) \u2228 eats_seafood(Roger)"
        },
        {
            "id": 4,
            "text": "If Roger either eats seafood or owns a boat (but not both), then he is a fisherman.",
            "fol": "(p_12(Roger) \u2295 p_13(Roger)) \u2192 p_11(Roger)",
            "str_fol": "(eats_seafood(Roger) \u2295 owns_boat(Roger)) \u2192 is_fisherman(Roger)"
        },
        {
            "id": 3,
            "text": "If Roger lives in a coastal area, then he either goes sailing or is a fisherman, but not both.",
            "fol": "p_2(Roger) \u2192 (p_10(Roger) \u2295 p_11(Roger))",
            "str_fol": "lives_coastal(Roger) \u2192 (goes_sailing(Roger) \u2295 is_fisherman(Roger))"
        },
        {
            "id": 2,
            "text": "Roger either loves water or likes hiking, but not both.",
            "fol": "p_9(Roger) \u2295 p_3(Roger)",
            "str_fol": "loves_water(Roger) \u2295 likes_hiking(Roger)"
        },
        {
            "id": 1,
            "text": "If Roger owns sailing gear and loves the water, then he goes sailing.",
            "fol": "(p_8(Roger) \u2227 p_9(Roger)) \u2192 p_10(Roger)",
            "str_fol": "(own_sailing_gear(Roger) \u2227 loves_water(Roger)) \u2192 goes_sailing(Roger)"
        },
        {
            "id": 0,
            "text": "Roger enjoys boating or is a sailing enthusiast.",
            "fol": "p_0(Roger) \u2228 p_7(Roger)",
            "str_fol": "enjoys_boating(Roger) \u2228 sailing_enthusiast(Roger)"
        }
    ],
    "context_fol": "\u00acp_5(Roger)\n\u00acp_6(Roger)\n\u00acp_4(Roger)\np_2(Roger)\np_3(Roger)\np_0(Roger)\n\u00acp_1(Roger)\n(p_5(Roger) \u2295 p_13(Roger)) \u2192 p_6(Roger)\np_4(Roger) \u2228 p_12(Roger)\n(p_12(Roger) \u2295 p_13(Roger)) \u2192 p_11(Roger)\np_2(Roger) \u2192 (p_10(Roger) \u2295 p_11(Roger))\np_9(Roger) \u2295 p_3(Roger)\n(p_8(Roger) \u2227 p_9(Roger)) \u2192 p_10(Roger)\np_0(Roger) \u2228 p_7(Roger)",
    "conclusion": {
        "id": 14,
        "text": "If Roger is a sailing enthusiast, then he either owns sailing gear or has sailing experience (or both).",
        "fol": "p_7(Roger) \u2192 (p_8(Roger) \u2228 p_1(Roger))",
        "str_fol": "sailing_enthusiast(Roger) \u2192 (own_sailing_gear(Roger) \u2228 have_sailing_experience(Roger))"
    },
    "initial_answer": "Uncertain",
    "initial_goal": "p_7(Roger) \u2192 (p_8(Roger) \u2228 p_1(Roger))",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 5,
                    "subject": "Roger",
                    "text": "Roger does not live near a port.",
                    "fol": "\u00acp_5(Roger)",
                    "str_fol": "\u00aclives_near_port(Roger)",
                    "negation": true
                },
                {
                    "id": 6,
                    "subject": "Roger",
                    "text": "Roger is not a mariner.",
                    "fol": "\u00acp_6(Roger)",
                    "str_fol": "\u00acis_mariner(Roger)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 6,
                    "text": "If Roger either lives near a port or owns a boat (but not both), then he is a mariner.",
                    "fol": "(p_5(Roger) \u2295 p_13(Roger)) \u2192 p_6(Roger)",
                    "str_fol": "(lives_near_port(Roger) \u2295 owns_boat(Roger)) \u2192 is_mariner(Roger)"
                }
            ],
            "conclusion": {
                "id": 7,
                "subject": "Roger",
                "text": "Roger does not own a boat.",
                "fol": "\u00acp_13(Roger)",
                "str_fol": "\u00acowns_boat(Roger)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 4,
                    "subject": "Roger",
                    "text": "Roger does not cook meals.",
                    "fol": "\u00acp_4(Roger)",
                    "str_fol": "\u00accooks_meals(Roger)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "Roger either cooks meals or eats seafood.",
                    "fol": "p_4(Roger) \u2228 p_12(Roger)",
                    "str_fol": "cooks_meals(Roger) \u2228 eats_seafood(Roger)"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Roger",
                "text": "Roger eats seafood.",
                "fol": "p_12(Roger)",
                "str_fol": "eats_seafood(Roger)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 8,
                    "subject": "Roger",
                    "text": "Roger eats seafood.",
                    "fol": "p_12(Roger)",
                    "str_fol": "eats_seafood(Roger)",
                    "negation": false
                },
                {
                    "id": 7,
                    "subject": "Roger",
                    "text": "Roger does not own a boat.",
                    "fol": "\u00acp_13(Roger)",
                    "str_fol": "\u00acowns_boat(Roger)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "If Roger either eats seafood or owns a boat (but not both), then he is a fisherman.",
                    "fol": "(p_12(Roger) \u2295 p_13(Roger)) \u2192 p_11(Roger)",
                    "str_fol": "(eats_seafood(Roger) \u2295 owns_boat(Roger)) \u2192 is_fisherman(Roger)"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Roger",
                "text": "Roger is a fisherman.",
                "fol": "p_11(Roger)",
                "str_fol": "is_fisherman(Roger)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 2,
                    "subject": "Roger",
                    "text": "Roger lives in a coastal area.",
                    "fol": "p_2(Roger)",
                    "str_fol": "lives_coastal(Roger)",
                    "negation": false
                },
                {
                    "id": 9,
                    "subject": "Roger",
                    "text": "Roger is a fisherman.",
                    "fol": "p_11(Roger)",
                    "str_fol": "is_fisherman(Roger)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "If Roger lives in a coastal area, then he either goes sailing or is a fisherman, but not both.",
                    "fol": "p_2(Roger) \u2192 (p_10(Roger) \u2295 p_11(Roger))",
                    "str_fol": "lives_coastal(Roger) \u2192 (goes_sailing(Roger) \u2295 is_fisherman(Roger))"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Roger",
                "text": "Roger does not go sailing.",
                "fol": "\u00acp_10(Roger)",
                "str_fol": "\u00acgoes_sailing(Roger)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 3,
                    "subject": "Roger",
                    "text": "Roger likes hiking.",
                    "fol": "p_3(Roger)",
                    "str_fol": "likes_hiking(Roger)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "Roger either loves water or likes hiking, but not both.",
                    "fol": "p_9(Roger) \u2295 p_3(Roger)",
                    "str_fol": "loves_water(Roger) \u2295 likes_hiking(Roger)"
                }
            ],
            "conclusion": {
                "id": 11,
                "subject": "Roger",
                "text": "Roger does not love the water.",
                "fol": "\u00acp_9(Roger)",
                "str_fol": "\u00acloves_water(Roger)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 11,
                    "subject": "Roger",
                    "text": "Roger does not love the water.",
                    "fol": "\u00acp_9(Roger)",
                    "str_fol": "\u00acloves_water(Roger)",
                    "negation": true
                },
                {
                    "id": 10,
                    "subject": "Roger",
                    "text": "Roger does not go sailing.",
                    "fol": "\u00acp_10(Roger)",
                    "str_fol": "\u00acgoes_sailing(Roger)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "If Roger owns sailing gear and loves the water, then he goes sailing.",
                    "fol": "(p_8(Roger) \u2227 p_9(Roger)) \u2192 p_10(Roger)",
                    "str_fol": "(own_sailing_gear(Roger) \u2227 loves_water(Roger)) \u2192 goes_sailing(Roger)"
                }
            ],
            "conclusion": null
        },
        {
            "facts": [
                {
                    "id": 0,
                    "subject": "Roger",
                    "text": "Roger enjoys boating.",
                    "fol": "p_0(Roger)",
                    "str_fol": "enjoys_boating(Roger)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "Roger enjoys boating or is a sailing enthusiast.",
                    "fol": "p_0(Roger) \u2228 p_7(Roger)",
                    "str_fol": "enjoys_boating(Roger) \u2228 sailing_enthusiast(Roger)"
                }
            ],
            "conclusion": null
        },
        {
            "facts": [
                {
                    "id": 1,
                    "subject": "Roger",
                    "text": "Roger does not have sailing experience.",
                    "fol": "\u00acp_1(Roger)",
                    "str_fol": "\u00achave_sailing_experience(Roger)",
                    "negation": true
                }
            ],
            "rules": [],
            "conclusion": null
        }
    ],
    "proof_trace": null,
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "UNCERTAIN",
            "Edited Assumptions": "\u00acp_5(Roger)\n\u00acp_6(Roger)\n\u00acp_4(Roger)\np_2(Roger)\np_3(Roger)\np_0(Roger)\n\u00acp_1(Roger)\n(p_5(Roger) \u2295 p_13(Roger)) \u2192 p_6(Roger)\np_4(Roger) \u2228 p_12(Roger)\n(p_12(Roger) \u2295 p_13(Roger)) \u2192 p_11(Roger)\np_2(Roger) \u2192 (p_10(Roger) \u2295 p_11(Roger))\np_9(Roger) \u2295 p_3(Roger)\n(p_8(Roger) \u2227 p_9(Roger)) \u2192 p_10(Roger)\np_0(Roger) \u2228 p_7(Roger)",
            "Initial Goal": "p_7(Roger) \u2192 (p_8(Roger) \u2228 p_1(Roger))",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_5(Roger)",
                    "-p_6(Roger)",
                    "-p_4(Roger)",
                    "p_2(Roger)",
                    "p_3(Roger)",
                    "p_0(Roger)",
                    "-p_1(Roger)",
                    "(-(p_5(Roger) <-> p_13(Roger))) -> p_6(Roger)",
                    "p_4(Roger) | p_12(Roger)",
                    "(-(p_12(Roger) <-> p_13(Roger))) -> p_11(Roger)",
                    "p_2(Roger) -> (-(p_10(Roger) <-> p_11(Roger)))",
                    "-(p_9(Roger) <-> p_3(Roger))",
                    "(p_8(Roger) & p_9(Roger)) -> p_10(Roger)",
                    "p_0(Roger) | p_7(Roger)",
                    "p_7(Roger) -> p_8(Roger)"
                ],
                "formulas(goals)": [
                    "p_7(Roger) -> (p_8(Roger) | p_1(Roger))"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "p_7(Roger) \u2192 p_8(Roger)"
                ]
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_5(Roger)\n\u00acp_6(Roger)\n\u00acp_4(Roger)\np_2(Roger)\np_3(Roger)\np_0(Roger)\n\u00acp_1(Roger)\n(p_5(Roger) \u2295 p_13(Roger)) \u2192 p_6(Roger)\np_4(Roger) \u2228 p_12(Roger)\n(p_12(Roger) \u2295 p_13(Roger)) \u2192 p_11(Roger)\np_2(Roger) \u2192 (p_10(Roger) \u2295 p_11(Roger))\np_9(Roger) \u2295 p_3(Roger)\n(p_8(Roger) \u2227 p_9(Roger)) \u2192 p_10(Roger)\np_0(Roger) \u2228 p_7(Roger)\np_0(Roger) \u2192 p_7(Roger)\np_8(Roger) \u2192 p_9(Roger)",
            "Initial Goal": "p_7(Roger) \u2192 (p_8(Roger) \u2228 p_1(Roger))",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_5(Roger)",
                    "-p_6(Roger)",
                    "-p_4(Roger)",
                    "p_2(Roger)",
                    "p_3(Roger)",
                    "p_0(Roger)",
                    "-p_1(Roger)",
                    "(-(p_5(Roger) <-> p_13(Roger))) -> p_6(Roger)",
                    "p_4(Roger) | p_12(Roger)",
                    "(-(p_12(Roger) <-> p_13(Roger))) -> p_11(Roger)",
                    "p_2(Roger) -> (-(p_10(Roger) <-> p_11(Roger)))",
                    "-(p_9(Roger) <-> p_3(Roger))",
                    "(p_8(Roger) & p_9(Roger)) -> p_10(Roger)",
                    "p_0(Roger) | p_7(Roger)",
                    "p_0(Roger) -> p_7(Roger)",
                    "p_8(Roger) -> p_9(Roger)"
                ],
                "formulas(goals)": [
                    "-(p_7(Roger) -> (p_8(Roger) | p_1(Roger)))"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "p_0(Roger) \u2192 p_7(Roger)",
                    "p_8(Roger) \u2192 p_9(Roger)"
                ]
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_5(Roger)\n\u00acp_6(Roger)\n\u00acp_4(Roger)\np_2(Roger)\np_3(Roger)\np_0(Roger)\n\u00acp_1(Roger)\n(p_5(Roger) \u2295 p_13(Roger)) \u2192 p_6(Roger)\np_4(Roger) \u2228 p_12(Roger)\n(p_12(Roger) \u2295 p_13(Roger)) \u2192 p_11(Roger)\np_2(Roger) \u2192 (p_10(Roger) \u2295 p_11(Roger))\np_9(Roger) \u2295 p_3(Roger)\n(p_8(Roger) \u2227 p_9(Roger)) \u2192 p_10(Roger)\np_0(Roger) \u2228 p_7(Roger)\n\u00acp_7(Roger)\np_8(Roger) \u2192 p_9(Roger)",
            "Initial Goal": "p_7(Roger) \u2192 (p_8(Roger) \u2228 p_1(Roger))",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_5(Roger)",
                    "-p_6(Roger)",
                    "-p_4(Roger)",
                    "p_2(Roger)",
                    "p_3(Roger)",
                    "p_0(Roger)",
                    "-p_1(Roger)",
                    "(-(p_5(Roger) <-> p_13(Roger))) -> p_6(Roger)",
                    "p_4(Roger) | p_12(Roger)",
                    "(-(p_12(Roger) <-> p_13(Roger))) -> p_11(Roger)",
                    "p_2(Roger) -> (-(p_10(Roger) <-> p_11(Roger)))",
                    "-(p_9(Roger) <-> p_3(Roger))",
                    "(p_8(Roger) & p_9(Roger)) -> p_10(Roger)",
                    "p_0(Roger) | p_7(Roger)",
                    "-p_7(Roger)",
                    "p_8(Roger) -> p_9(Roger)"
                ],
                "formulas(goals)": [
                    "p_7(Roger) -> (p_8(Roger) | p_1(Roger))"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_0(Roger) \u2192 p_7(Roger)"
                ],
                "added_facts": [
                    "\u00acp_7(Roger)"
                ],
                "added_rules": []
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_5(Roger)\n\u00acp_6(Roger)\n\u00acp_4(Roger)\np_2(Roger)\np_3(Roger)\np_0(Roger)\n\u00acp_1(Roger)\n(p_5(Roger) \u2295 p_13(Roger)) \u2192 p_6(Roger)\np_4(Roger) \u2228 p_12(Roger)\n(p_12(Roger) \u2295 p_13(Roger)) \u2192 p_11(Roger)\np_2(Roger) \u2192 (p_10(Roger) \u2295 p_11(Roger))\np_9(Roger) \u2295 p_3(Roger)\n(p_8(Roger) \u2227 p_9(Roger)) \u2192 p_10(Roger)\np_0(Roger) \u2228 p_7(Roger)\n\u00acp_7(Roger)\np_8(Roger) \u2192 p_9(Roger)\np_3(Roger) \u2192 \u00acp_9(Roger)\n\u00acp_9(Roger) \u2192 \u00acp_8(Roger)\np_2(Roger) \u2192 (p_10(Roger) \u2228 p_11(Roger))",
            "Initial Goal": "p_7(Roger) \u2192 (p_8(Roger) \u2228 p_1(Roger))",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_5(Roger)",
                    "-p_6(Roger)",
                    "-p_4(Roger)",
                    "p_2(Roger)",
                    "p_3(Roger)",
                    "p_0(Roger)",
                    "-p_1(Roger)",
                    "(-(p_5(Roger) <-> p_13(Roger))) -> p_6(Roger)",
                    "p_4(Roger) | p_12(Roger)",
                    "(-(p_12(Roger) <-> p_13(Roger))) -> p_11(Roger)",
                    "p_2(Roger) -> (-(p_10(Roger) <-> p_11(Roger)))",
                    "-(p_9(Roger) <-> p_3(Roger))",
                    "(p_8(Roger) & p_9(Roger)) -> p_10(Roger)",
                    "p_0(Roger) | p_7(Roger)",
                    "-p_7(Roger)",
                    "p_8(Roger) -> p_9(Roger)",
                    "p_3(Roger) -> -p_9(Roger)",
                    "-p_9(Roger) -> -p_8(Roger)",
                    "p_2(Roger) -> (p_10(Roger) | p_11(Roger))"
                ],
                "formulas(goals)": [
                    "p_7(Roger) -> (p_8(Roger) | p_1(Roger))"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "p_3(Roger) \u2192 \u00acp_9(Roger)",
                    "\u00acp_9(Roger) \u2192 \u00acp_8(Roger)",
                    "p_2(Roger) \u2192 (p_10(Roger) \u2228 p_11(Roger))"
                ]
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_5(Roger)\n\u00acp_6(Roger)\n\u00acp_4(Roger)\np_2(Roger)\np_3(Roger)\np_0(Roger)\n\u00acp_1(Roger)\n(p_5(Roger) \u2295 p_13(Roger)) \u2192 p_6(Roger)\np_4(Roger) \u2228 p_12(Roger)\n(p_12(Roger) \u2295 p_13(Roger)) \u2192 p_11(Roger)\np_2(Roger) \u2192 (p_10(Roger) \u2295 p_11(Roger))\np_9(Roger) \u2295 p_3(Roger)\n(p_8(Roger) \u2227 p_9(Roger)) \u2192 p_10(Roger)\np_0(Roger) \u2228 p_7(Roger)\n\u00acp_7(Roger)\np_8(Roger) \u2192 p_9(Roger)\np_3(Roger) \u2192 \u00acp_9(Roger)\n\u00acp_9(Roger) \u2192 \u00acp_8(Roger)\np_2(Roger) \u2192 (p_10(Roger) \u2228 p_11(Roger))\n\u00acp_9(Roger)\np_9(Roger) \u2228 p_3(Roger)\n\u00ac(p_9(Roger) \u2227 p_3(Roger))\n\u00acp_8(Roger)\np_10(Roger) \u2295 p_11(Roger)",
            "Initial Goal": "p_7(Roger) \u2192 (p_8(Roger) \u2228 p_1(Roger))",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_5(Roger)",
                    "-p_6(Roger)",
                    "-p_4(Roger)",
                    "p_2(Roger)",
                    "p_3(Roger)",
                    "p_0(Roger)",
                    "-p_1(Roger)",
                    "(-(p_5(Roger) <-> p_13(Roger))) -> p_6(Roger)",
                    "p_4(Roger) | p_12(Roger)",
                    "(-(p_12(Roger) <-> p_13(Roger))) -> p_11(Roger)",
                    "p_2(Roger) -> (-(p_10(Roger) <-> p_11(Roger)))",
                    "(-(p_9(Roger) <-> p_3(Roger)))",
                    "(p_8(Roger) & p_9(Roger)) -> p_10(Roger)",
                    "p_0(Roger) | p_7(Roger)",
                    "-p_7(Roger)",
                    "p_8(Roger) -> p_9(Roger)",
                    "p_3(Roger) -> -p_9(Roger)",
                    "-p_9(Roger) -> -p_8(Roger)",
                    "p_2(Roger) -> (p_10(Roger) | p_11(Roger))",
                    "-p_9(Roger)",
                    "p_9(Roger) | p_3(Roger)",
                    "-(p_9(Roger) & p_3(Roger))",
                    "-p_8(Roger)",
                    "(-(p_10(Roger) <-> p_11(Roger)))"
                ],
                "formulas(goals)": [
                    "p_7(Roger) -> (p_8(Roger) | p_1(Roger))"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "\u00acp_9(Roger)",
                    "\u00acp_8(Roger)"
                ],
                "added_rules": [
                    "p_9(Roger) \u2228 p_3(Roger)",
                    "\u00ac(p_9(Roger) \u2227 p_3(Roger))",
                    "p_10(Roger) \u2295 p_11(Roger)"
                ]
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_5(Roger)\n\u00acp_6(Roger)\n\u00acp_4(Roger)\np_2(Roger)\np_3(Roger)\np_0(Roger)\n\u00acp_1(Roger)\n(p_5(Roger) \u2295 p_13(Roger)) \u2192 p_6(Roger)\np_4(Roger) \u2228 p_12(Roger)\n(p_12(Roger) \u2295 p_13(Roger)) \u2192 p_11(Roger)\np_2(Roger) \u2192 (p_10(Roger) \u2295 p_11(Roger))\np_9(Roger) \u2295 p_3(Roger)\n(p_8(Roger) \u2227 p_9(Roger)) \u2192 p_10(Roger)\np_0(Roger) \u2228 p_7(Roger)\n\u00acp_7(Roger)\np_8(Roger) \u2192 p_9(Roger)\np_3(Roger) \u2192 \u00acp_9(Roger)\n\u00acp_9(Roger) \u2192 \u00acp_8(Roger)\np_2(Roger) \u2192 (p_10(Roger) \u2228 p_11(Roger))\n\u00acp_9(Roger)\np_9(Roger) \u2228 p_3(Roger)\n\u00ac(p_9(Roger) \u2227 p_3(Roger))\n\u00acp_8(Roger)\np_10(Roger) \u2295 p_11(Roger)\n\u00acp_9(Roger) \u2228 \u00acp_3(Roger)\np_2(Roger) \u2227 p_3(Roger)\np_12(Roger)\np_10(Roger) \u2228 p_11(Roger)",
            "Initial Goal": "p_7(Roger) \u2192 (p_8(Roger) \u2228 p_1(Roger))",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_5(Roger).",
                    "-p_6(Roger).",
                    "-p_4(Roger).",
                    "p_2(Roger).",
                    "p_3(Roger).",
                    "p_0(Roger).",
                    "-p_1(Roger).",
                    "(-(p_5(Roger) <-> p_13(Roger))) -> p_6(Roger).",
                    "p_4(Roger) | p_12(Roger).",
                    "(-(p_12(Roger) <-> p_13(Roger))) -> p_11(Roger).",
                    "p_2(Roger) -> (-(p_10(Roger) <-> p_11(Roger))).",
                    "-(p_9(Roger) <-> p_3(Roger)).",
                    "(p_8(Roger) & p_9(Roger)) -> p_10(Roger).",
                    "p_0(Roger) | p_7(Roger).",
                    "-p_7(Roger).",
                    "p_8(Roger) -> p_9(Roger).",
                    "p_3(Roger) -> -p_9(Roger).",
                    "-p_9(Roger) -> -p_8(Roger).",
                    "p_2(Roger) -> (p_10(Roger) | p_11(Roger)).",
                    "-p_9(Roger).",
                    "p_9(Roger) | p_3(Roger).",
                    "-(p_9(Roger) & p_3(Roger)).",
                    "-p_8(Roger).",
                    "-(p_10(Roger) <-> p_11(Roger)).",
                    "-p_9(Roger) | -p_3(Roger).",
                    "p_2(Roger) & p_3(Roger).",
                    "p_12(Roger).",
                    "p_10(Roger) | p_11(Roger)."
                ],
                "formulas(goals)": [
                    "p_7(Roger) -> (p_8(Roger) | p_1(Roger))."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "\u00acp_9(Roger) \u2228 \u00acp_3(Roger)",
                    "p_2(Roger) \u2227 p_3(Roger)",
                    "p_12(Roger)",
                    "p_10(Roger) \u2228 p_11(Roger)"
                ],
                "added_rules": []
            }
        }
    ]
}