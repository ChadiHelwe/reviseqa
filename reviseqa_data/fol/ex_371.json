{
    "background_story": "Remi was a third-generation farmer who took great pride in his family's rural heritage. Every summer, he would spend long days haying in the fields, carefully cutting, drying, and baling the golden wheat and hay to store for the winter. Remi's farm was renowned for its high-quality hay, sought after by neighboring farmers and horse owners alike. He worked tirelessly from dawn till dusk, often with the help of his loyal farmhand, Jacques. Remi's dedication to haying was not just about providing for his community, but also about preserving the traditional farming practices that had been passed down through his family. As the sun set over the rolling hills, Remi would look out over his fields, feeling a deep sense of satisfaction and connection to the land.",
    "predicates": [
        {
            "id": 0,
            "name": "raise_livestock"
        },
        {
            "id": 1,
            "name": "own_farm"
        },
        {
            "id": 2,
            "name": "produce_high_quality_hay"
        },
        {
            "id": 3,
            "name": "work_tirelessly"
        },
        {
            "id": 4,
            "name": "use_traditional_practices"
        },
        {
            "id": 5,
            "name": "tend_crops"
        },
        {
            "id": 6,
            "name": "care_for_land"
        },
        {
            "id": 7,
            "name": "feed_community"
        },
        {
            "id": 8,
            "name": "harvest_crops"
        },
        {
            "id": 9,
            "name": "maintain_equipment"
        },
        {
            "id": 10,
            "name": "respect_ancestors"
        },
        {
            "id": 11,
            "name": "plow_fields"
        },
        {
            "id": 12,
            "name": "harvest_grains"
        },
        {
            "id": 13,
            "name": "irrigate_fields"
        },
        {
            "id": 14,
            "name": "grow_produce"
        }
    ],
    "subject_name": "Remi",
    "subject_category": "farmer",
    "keyword": "haying",
    "all_facts": [
        {
            "id": 0,
            "subject": "Remi",
            "text": "Remi does not raise livestock.",
            "fol": "\u00acp_0(Remi)",
            "str_fol": "\u00acraise_livestock(Remi)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Remi",
            "text": "Remi owns a farm.",
            "fol": "p_1(Remi)",
            "str_fol": "own_farm(Remi)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Remi",
            "text": "Remi does not feed the community.",
            "fol": "\u00acp_7(Remi)",
            "str_fol": "\u00acfeed_community(Remi)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Remi",
            "text": "Remi cares for the land.",
            "fol": "p_6(Remi)",
            "str_fol": "care_for_land(Remi)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Remi",
            "text": "Remi does not tend crops.",
            "fol": "\u00acp_5(Remi)",
            "str_fol": "\u00actend_crops(Remi)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Remi",
            "text": "Remi works tirelessly.",
            "fol": "p_3(Remi)",
            "str_fol": "work_tirelessly(Remi)",
            "negation": false
        },
        {
            "id": 6,
            "subject": "Remi",
            "text": "Remi uses traditional practices.",
            "fol": "p_4(Remi)",
            "str_fol": "use_traditional_practices(Remi)",
            "negation": false
        }
    ],
    "context_facts": [
        {
            "id": 1,
            "subject": "Remi",
            "text": "Remi owns a farm.",
            "fol": "p_1(Remi)",
            "str_fol": "own_farm(Remi)",
            "negation": false
        },
        {
            "id": 0,
            "subject": "Remi",
            "text": "Remi does not raise livestock.",
            "fol": "\u00acp_0(Remi)",
            "str_fol": "\u00acraise_livestock(Remi)",
            "negation": true
        }
    ],
    "context_rules": [
        {
            "id": 5,
            "text": "For any farmer, either they feed the community or they own a farm, but it's possible for a farmer to do both.",
            "fol": "\u2200x (p_7(x) \u2295 p_1(x))",
            "str_fol": "\u2200x (feed_community(x) \u2295 own_farm(x))"
        },
        {
            "id": 4,
            "text": "Remi either raises livestock or cares for the land, but not necessarily both.",
            "fol": "p_0(Remi) \u2295 p_6(Remi)",
            "str_fol": "raise_livestock(Remi) \u2295 care_for_land(Remi)"
        },
        {
            "id": 3,
            "text": "Every farmer who tends crops will feed the community.",
            "fol": "\u2200x (p_5(x) \u2192 p_7(x))",
            "str_fol": "\u2200x (tend_crops(x) \u2192 feed_community(x))"
        },
        {
            "id": 2,
            "text": "If a farmer produces high-quality hay, then they care for the land.",
            "fol": "\u2200x (p_2(x) \u2192 p_6(x))",
            "str_fol": "\u2200x (produce_high_quality_hay(x) \u2192 care_for_land(x))"
        },
        {
            "id": 1,
            "text": "Every farmer tends crops or works tirelessly.",
            "fol": "\u2200x (p_5(x) \u2228 p_3(x))",
            "str_fol": "\u2200x (tend_crops(x) \u2228 work_tirelessly(x))"
        },
        {
            "id": 0,
            "text": "For all farmers, if a farmer produces high-quality hay, then they either work tirelessly or use traditional practices (or both).",
            "fol": "\u2200x (p_2(x) \u2192 (p_3(x) \u2228 p_4(x)))",
            "str_fol": "\u2200x (produce_high_quality_hay(x) \u2192 (work_tirelessly(x) \u2228 use_traditional_practices(x)))"
        }
    ],
    "context": [
        {
            "id": 1,
            "subject": "Remi",
            "text": "Remi owns a farm.",
            "fol": "p_1(Remi)",
            "str_fol": "own_farm(Remi)",
            "negation": false
        },
        {
            "id": 0,
            "subject": "Remi",
            "text": "Remi does not raise livestock.",
            "fol": "\u00acp_0(Remi)",
            "str_fol": "\u00acraise_livestock(Remi)",
            "negation": true
        },
        {
            "id": 5,
            "text": "For any farmer, either they feed the community or they own a farm, but it's possible for a farmer to do both.",
            "fol": "\u2200x (p_7(x) \u2295 p_1(x))",
            "str_fol": "\u2200x (feed_community(x) \u2295 own_farm(x))"
        },
        {
            "id": 4,
            "text": "Remi either raises livestock or cares for the land, but not necessarily both.",
            "fol": "p_0(Remi) \u2295 p_6(Remi)",
            "str_fol": "raise_livestock(Remi) \u2295 care_for_land(Remi)"
        },
        {
            "id": 3,
            "text": "Every farmer who tends crops will feed the community.",
            "fol": "\u2200x (p_5(x) \u2192 p_7(x))",
            "str_fol": "\u2200x (tend_crops(x) \u2192 feed_community(x))"
        },
        {
            "id": 2,
            "text": "If a farmer produces high-quality hay, then they care for the land.",
            "fol": "\u2200x (p_2(x) \u2192 p_6(x))",
            "str_fol": "\u2200x (produce_high_quality_hay(x) \u2192 care_for_land(x))"
        },
        {
            "id": 1,
            "text": "Every farmer tends crops or works tirelessly.",
            "fol": "\u2200x (p_5(x) \u2228 p_3(x))",
            "str_fol": "\u2200x (tend_crops(x) \u2228 work_tirelessly(x))"
        },
        {
            "id": 0,
            "text": "For all farmers, if a farmer produces high-quality hay, then they either work tirelessly or use traditional practices (or both).",
            "fol": "\u2200x (p_2(x) \u2192 (p_3(x) \u2228 p_4(x)))",
            "str_fol": "\u2200x (produce_high_quality_hay(x) \u2192 (work_tirelessly(x) \u2228 use_traditional_practices(x)))"
        }
    ],
    "context_fol": "p_1(Remi)\n\u00acp_0(Remi)\n\u2200x (p_7(x) \u2295 p_1(x))\np_0(Remi) \u2295 p_6(Remi)\n\u2200x (p_5(x) \u2192 p_7(x))\n\u2200x (p_2(x) \u2192 p_6(x))\n\u2200x (p_5(x) \u2228 p_3(x))\n\u2200x (p_2(x) \u2192 (p_3(x) \u2228 p_4(x)))",
    "conclusion": {
        "id": 6,
        "subject": "Remi",
        "text": "Remi uses traditional practices.",
        "fol": "p_4(Remi)",
        "str_fol": "use_traditional_practices(Remi)",
        "negation": false
    },
    "initial_answer": "Uncertain",
    "initial_goal": "p_4(Remi)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 1,
                    "subject": "Remi",
                    "text": "Remi owns a farm.",
                    "fol": "p_1(Remi)",
                    "str_fol": "own_farm(Remi)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "For any farmer, either they feed the community or they own a farm, but it's possible for a farmer to do both.",
                    "fol": "\u2200x (p_7(x) \u2295 p_1(x))",
                    "str_fol": "\u2200x (feed_community(x) \u2295 own_farm(x))"
                }
            ],
            "conclusion": {
                "id": 2,
                "subject": "Remi",
                "text": "Remi does not feed the community.",
                "fol": "\u00acp_7(Remi)",
                "str_fol": "\u00acfeed_community(Remi)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 0,
                    "subject": "Remi",
                    "text": "Remi does not raise livestock.",
                    "fol": "\u00acp_0(Remi)",
                    "str_fol": "\u00acraise_livestock(Remi)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "Remi either raises livestock or cares for the land, but not necessarily both.",
                    "fol": "p_0(Remi) \u2295 p_6(Remi)",
                    "str_fol": "raise_livestock(Remi) \u2295 care_for_land(Remi)"
                }
            ],
            "conclusion": {
                "id": 3,
                "subject": "Remi",
                "text": "Remi cares for the land.",
                "fol": "p_6(Remi)",
                "str_fol": "care_for_land(Remi)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 2,
                    "subject": "Remi",
                    "text": "Remi does not feed the community.",
                    "fol": "\u00acp_7(Remi)",
                    "str_fol": "\u00acfeed_community(Remi)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "Every farmer who tends crops will feed the community.",
                    "fol": "\u2200x (p_5(x) \u2192 p_7(x))",
                    "str_fol": "\u2200x (tend_crops(x) \u2192 feed_community(x))"
                }
            ],
            "conclusion": {
                "id": 4,
                "subject": "Remi",
                "text": "Remi does not tend crops.",
                "fol": "\u00acp_5(Remi)",
                "str_fol": "\u00actend_crops(Remi)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 3,
                    "subject": "Remi",
                    "text": "Remi cares for the land.",
                    "fol": "p_6(Remi)",
                    "str_fol": "care_for_land(Remi)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "If a farmer produces high-quality hay, then they care for the land.",
                    "fol": "\u2200x (p_2(x) \u2192 p_6(x))",
                    "str_fol": "\u2200x (produce_high_quality_hay(x) \u2192 care_for_land(x))"
                }
            ],
            "conclusion": null
        },
        {
            "facts": [
                {
                    "id": 4,
                    "subject": "Remi",
                    "text": "Remi does not tend crops.",
                    "fol": "\u00acp_5(Remi)",
                    "str_fol": "\u00actend_crops(Remi)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "Every farmer tends crops or works tirelessly.",
                    "fol": "\u2200x (p_5(x) \u2228 p_3(x))",
                    "str_fol": "\u2200x (tend_crops(x) \u2228 work_tirelessly(x))"
                }
            ],
            "conclusion": {
                "id": 5,
                "subject": "Remi",
                "text": "Remi works tirelessly.",
                "fol": "p_3(Remi)",
                "str_fol": "work_tirelessly(Remi)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 5,
                    "subject": "Remi",
                    "text": "Remi works tirelessly.",
                    "fol": "p_3(Remi)",
                    "str_fol": "work_tirelessly(Remi)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "For all farmers, if a farmer produces high-quality hay, then they either work tirelessly or use traditional practices (or both).",
                    "fol": "\u2200x (p_2(x) \u2192 (p_3(x) \u2228 p_4(x)))",
                    "str_fol": "\u2200x (produce_high_quality_hay(x) \u2192 (work_tirelessly(x) \u2228 use_traditional_practices(x)))"
                }
            ],
            "conclusion": null
        }
    ],
    "proof_trace": null,
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "UNCERTAIN",
            "Edited Assumptions": "p_1(Remi)\n\u00acp_0(Remi)\n\u2200x (p_7(x) \u2295 p_1(x))\np_0(Remi) \u2295 p_6(Remi)\n\u2200x (p_5(x) \u2192 p_7(x))\n\u2200x (p_2(x) \u2192 p_6(x))\n\u2200x (p_5(x) \u2228 p_3(x))\n\u2200x (p_2(x) \u2192 (p_3(x) \u2228 p_4(x)))",
            "Initial Goal": "p_4(Remi)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_1(Remi)",
                    "-p_0(Remi)",
                    "all x (-(p_7(x) <-> p_1(x)))",
                    "-(p_0(Remi) <-> p_6(Remi))",
                    "all x (p_5(x) -> p_7(x))",
                    "all x (p_2(x) -> p_6(x))",
                    "all x (p_5(x) | p_3(x))",
                    "all x (p_2(x) -> (p_3(x) | p_4(x)))",
                    "all x (p_6(x) -> p_4(x))"
                ],
                "formulas(goals)": [
                    "p_4(Remi)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "\u2200x (p_6(x) \u2192 p_4(x))"
                ]
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_1(Remi)\n\u00acp_0(Remi)\n\u2200x (p_7(x) \u2295 p_1(x))\np_0(Remi) \u2295 p_6(Remi)\n\u2200x (p_5(x) \u2192 p_7(x))\n\u2200x (p_2(x) \u2192 p_6(x))\n\u2200x (p_5(x) \u2228 p_3(x))\n\u2200x (p_2(x) \u2192 (p_3(x) \u2228 p_4(x)))\n\u2200x (p_3(x) \u2192 \u00acp_4(x))",
            "Initial Goal": "p_4(Remi)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_1(Remi)",
                    "-p_0(Remi)",
                    "all x (-(p_7(x) <-> p_1(x)))",
                    "-(p_0(Remi) <-> p_6(Remi))",
                    "all x (p_5(x) -> p_7(x))",
                    "all x (p_2(x) -> p_6(x))",
                    "all x (p_5(x) | p_3(x))",
                    "all x (p_2(x) -> (p_3(x) | p_4(x)))",
                    "all x (p_3(x) -> -p_4(x))"
                ],
                "formulas(goals)": [
                    "-p_4(Remi)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "\u2200x (p_3(x) \u2192 \u00acp_4(x))"
                ]
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_1(Remi)\n\u00acp_0(Remi)\n\u2200x (p_7(x) \u2295 p_1(x))\np_0(Remi) \u2295 p_6(Remi)\n\u2200x (p_5(x) \u2192 p_7(x))\n\u2200x (p_2(x) \u2192 p_6(x))\n\u2200x (p_5(x) \u2228 p_3(x))\n\u2200x (p_2(x) \u2192 (p_3(x) \u2228 p_4(x)))\np_2(Remi)\n\u2200x (p_2(x) \u2192 p_4(x))",
            "Initial Goal": "p_4(Remi)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_1(Remi)",
                    "-p_0(Remi)",
                    "all x (p_7(x) <-> -p_1(x))",
                    "(p_0(Remi) <-> -p_6(Remi))",
                    "all x (p_5(x) -> p_7(x))",
                    "all x (p_2(x) -> p_6(x))",
                    "all x (p_5(x) | p_3(x))",
                    "all x (p_2(x) -> (p_3(x) | p_4(x)))",
                    "p_2(Remi)",
                    "all x (p_2(x) -> p_4(x))"
                ],
                "formulas(goals)": [
                    "p_4(Remi)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u2200x (p_3(x) \u2192 \u00acp_4(x))"
                ],
                "added_facts": [
                    "p_2(Remi)"
                ],
                "added_rules": [
                    "\u2200x (p_2(x) \u2192 p_4(x))"
                ]
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_1(Remi)\n\u00acp_0(Remi)\n\u2200x (p_7(x) \u2295 p_1(x))\np_0(Remi) \u2295 p_6(Remi)\n\u2200x (p_5(x) \u2192 p_7(x))\n\u2200x (p_2(x) \u2192 p_6(x))\n\u2200x (p_5(x) \u2228 p_3(x))\n\u2200x (\u00acp_2(x) \u2228 p_3(x) \u2228 p_4(x))\np_2(Remi)\n\u2200x (\u00acp_2(x) \u2228 p_4(x))\np_6(Remi)\n\u00acp_7(Remi)\n\u00acp_5(Remi)\np_3(Remi)",
            "Initial Goal": "p_4(Remi)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_1(Remi)",
                    "-p_0(Remi)",
                    "all x (-(p_7(x) <-> p_1(x)))",
                    "-(p_0(Remi) <-> p_6(Remi))",
                    "all x (p_5(x) -> p_7(x))",
                    "all x (p_2(x) -> p_6(x))",
                    "all x (p_5(x) | p_3(x))",
                    "all x (-p_2(x) | p_3(x) | p_4(x))",
                    "p_2(Remi)",
                    "all x (-p_2(x) | p_4(x))",
                    "p_6(Remi)",
                    "-p_7(Remi)",
                    "-p_5(Remi)",
                    "p_3(Remi)"
                ],
                "formulas(goals)": [
                    "p_4(Remi)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u2200x (p_2(x) \u2192 (p_3(x) \u2228 p_4(x)))",
                    "\u2200x (p_2(x) \u2192 p_4(x))"
                ],
                "added_facts": [
                    "p_6(Remi)",
                    "\u00acp_7(Remi)",
                    "\u00acp_5(Remi)",
                    "p_3(Remi)"
                ],
                "added_rules": [
                    "\u2200x (\u00acp_2(x) \u2228 p_3(x) \u2228 p_4(x))",
                    "\u2200x (\u00acp_2(x) \u2228 p_4(x))"
                ]
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_1(Remi)\n\u00acp_0(Remi)\n\u2200x (p_7(x) \u2295 p_1(x))\np_0(Remi) \u2295 p_6(Remi)\n\u2200x (p_5(x) \u2192 p_7(x))\n\u2200x (p_2(x) \u2192 p_6(x))\n\u2200x (p_5(x) \u2228 p_3(x))\n\u2200x (\u00acp_2(x) \u2228 p_3(x) \u2228 p_4(x))\n\u2200x (\u00acp_2(x) \u2228 p_4(x))\np_6(Remi)\n\u00acp_7(Remi)\n\u00acp_5(Remi)\np_3(Remi)\n\u2200x (p_3(x) \u2192 \u00acp_4(x))",
            "Initial Goal": "p_4(Remi)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_1(Remi)",
                    "-p_0(Remi)",
                    "all x (-(p_7(x) <-> p_1(x)))",
                    "-(p_0(Remi) <-> p_6(Remi))",
                    "all x (p_5(x) -> p_7(x))",
                    "all x (p_2(x) -> p_6(x))",
                    "all x (p_5(x) | p_3(x))",
                    "all x (-p_2(x) | p_3(x) | p_4(x))",
                    "all x (-p_2(x) | p_4(x))",
                    "p_6(Remi)",
                    "-p_7(Remi)",
                    "-p_5(Remi)",
                    "p_3(Remi)",
                    "all x (p_3(x) -> -p_4(x))"
                ],
                "formulas(goals)": [
                    "-p_4(Remi)"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "p_2(Remi)"
                ],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "\u2200x (p_3(x) \u2192 \u00acp_4(x))"
                ]
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p\u2081(Remi)\n\u00acp\u2080(Remi)\n\u2200x (p\u2087(x) \u2295 p\u2081(x))\np\u2080(Remi) \u2295 p\u2086(Remi)\n\u2200x (p\u2085(x) \u2192 p\u2087(x))\n\u2200x (p\u2082(x) \u2192 p\u2086(x))\n\u2200x (p\u2085(x) \u2228 p\u2083(x))\n\u2200x (\u00acp\u2082(x) \u2228 p\u2083(x) \u2228 p\u2084(x))\n\u2200x (\u00acp\u2082(x) \u2228 p\u2084(x))\np\u2086(Remi)\n\u00acp\u2087(Remi)\n\u00acp\u2085(Remi)\np\u2083(Remi)\n\u2200x (p\u2083(x) \u2192 \u00acp\u2084(x))\n\u2200x (p\u2083(x) \u2228 \u00acp\u2083(x))\n\u2200x (p\u2082(x) \u2192 p\u2084(x))\n\u2200x (\u00acp\u2087(x) \u2192 \u00acp\u2085(x))\n\u2200x (p\u2084(x) \u2228 \u00acp\u2084(x))",
            "Initial Goal": "p_4(Remi)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_1(Remi)",
                    "-p_0(Remi)",
                    "all x (-(p_7(x) <-> p_1(x)))",
                    "-(p_0(Remi) <-> p_6(Remi))",
                    "all x (p_5(x) -> p_7(x))",
                    "all x (p_2(x) -> p_6(x))",
                    "all x (p_5(x) | p_3(x))",
                    "all x (-p_2(x) | p_3(x) | p_4(x))",
                    "all x (-p_2(x) | p_4(x))",
                    "p_6(Remi)",
                    "-p_7(Remi)",
                    "-p_5(Remi)",
                    "p_3(Remi)",
                    "all x (p_3(x) -> -p_4(x))",
                    "all x (p_3(x) | -p_3(x))",
                    "all x (p_2(x) -> p_4(x))",
                    "all x (-p_7(x) -> -p_5(x))",
                    "all x (p_4(x) | -p_4(x))"
                ],
                "formulas(goals)": [
                    "-p_4(Remi)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "\u2200x (p_3(x) \u2228 \u00acp_3(x))",
                    "\u2200x (p_2(x) \u2192 p_4(x))",
                    "\u2200x (\u00acp_7(x) \u2192 \u00acp_5(x))",
                    "\u2200x (p_4(x) \u2228 \u00acp_4(x))"
                ]
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p\u2081(Remi)\n\u00acp\u2080(Remi)\n\u2200x (p\u2087(x) \u2295 p\u2081(x))\np\u2080(Remi) \u2295 p\u2086(Remi)\n\u2200x (p\u2085(x) \u2192 p\u2087(x))\n\u2200x (p\u2082(x) \u2192 p\u2086(x))\n\u2200x (p\u2085(x) \u2228 p\u2083(x))\n\u2200x (\u00acp\u2082(x) \u2228 p\u2083(x) \u2228 p\u2084(x))\n\u2200x (\u00acp\u2082(x) \u2228 p\u2084(x))\np\u2086(Remi)\n\u00acp\u2087(Remi)\n\u00acp\u2085(Remi)\np\u2083(Remi)\n\u2200x (p\u2083(x) \u2228 \u00acp\u2083(x))\n\u2200x (p\u2082(x) \u2192 p\u2084(x))\n\u2200x (\u00acp\u2087(x) \u2192 \u00acp\u2085(x))\n\u2200x (p\u2084(x) \u2228 \u00acp\u2084(x))\np\u2082(Remi)",
            "Initial Goal": "p_4(Remi)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_1(Remi).",
                    "-p_0(Remi).",
                    "all x (-(p_7(x) <-> p_1(x))).",
                    "-(p_0(Remi) <-> p_6(Remi)).",
                    "all x (p_5(x) -> p_7(x)).",
                    "all x (p_2(x) -> p_6(x)).",
                    "all x (p_5(x) | p_3(x)).",
                    "all x (-p_2(x) | p_3(x) | p_4(x)).",
                    "all x (-p_2(x) | p_4(x)).",
                    "p_6(Remi).",
                    "-p_7(Remi).",
                    "-p_5(Remi).",
                    "p_3(Remi).",
                    "all x (p_3(x) | -p_3(x)).",
                    "all x (p_2(x) -> p_4(x)).",
                    "all x (-p_7(x) -> -p_5(x)).",
                    "all x (p_4(x) | -p_4(x)).",
                    "p_2(Remi)."
                ],
                "formulas(goals)": [
                    "p_4(Remi)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u2200x (p\u2083(x) \u2192 \u00acp\u2084(x))"
                ],
                "added_facts": [
                    "p\u2082(Remi)"
                ],
                "added_rules": []
            }
        }
    ]
}