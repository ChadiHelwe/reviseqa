{
    "background_story": "Samir was a talented musician who drew inspiration from the legendary Paul McCartney. Growing up, he spent hours listening to The Beatles and Wings, studying McCartney's songwriting techniques and melodic sensibilities. As the lead singer of his own band, Samir channeled McCartney's eclectic style, blending rock, pop, and classical elements into his music. His big break came when he was invited to perform at a McCartney tribute concert, where he caught the attention of a prominent record producer. Soon, Samir was touring the world, sharing his unique sound with fans of all ages. Though he never forgot his idol, Samir carved out his own path, earning critical acclaim and a loyal following. He remained humble, always acknowledging the debt he owed to McCartney, the master who had inspired him to pursue his dreams.",
    "predicates": [
        {
            "id": 0,
            "name": "writes_lyrics"
        },
        {
            "id": 1,
            "name": "is_innovative"
        },
        {
            "id": 2,
            "name": "records_albums"
        },
        {
            "id": 3,
            "name": "gains_recognition"
        },
        {
            "id": 4,
            "name": "classically_trained"
        },
        {
            "id": 5,
            "name": "self_taught"
        },
        {
            "id": 6,
            "name": "plays_rock"
        },
        {
            "id": 7,
            "name": "is_versatile"
        },
        {
            "id": 8,
            "name": "plays_jazz"
        },
        {
            "id": 9,
            "name": "composes_pop"
        },
        {
            "id": 10,
            "name": "plays_folk"
        },
        {
            "id": 11,
            "name": "has_passion"
        },
        {
            "id": 12,
            "name": "creates_harmony"
        },
        {
            "id": 13,
            "name": "performs_live"
        },
        {
            "id": 14,
            "name": "learns_online"
        },
        {
            "id": 15,
            "name": "inspired_by_legends"
        },
        {
            "id": 16,
            "name": "makes_hit_songs"
        },
        {
            "id": 17,
            "name": "expresses_emotion"
        },
        {
            "id": 18,
            "name": "plays_blues"
        },
        {
            "id": 19,
            "name": "blends_genres"
        },
        {
            "id": 20,
            "name": "writes_catchy"
        },
        {
            "id": 21,
            "name": "is_experienced"
        },
        {
            "id": 22,
            "name": "makes_music"
        },
        {
            "id": 23,
            "name": "sings_soul"
        },
        {
            "id": 24,
            "name": "tour_world"
        }
    ],
    "subject_name": "Samir",
    "subject_category": "musician",
    "keyword": "mccartney",
    "all_facts": [
        {
            "id": 0,
            "subject": "Samir",
            "text": "Samir writes lyrics.",
            "fol": "p_0(Samir)",
            "str_fol": "writes_lyrics(Samir)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Samir",
            "text": "Samir is not innovative.",
            "fol": "\u00acp_1(Samir)",
            "str_fol": "\u00acis_innovative(Samir)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Samir",
            "text": "Samir records albums.",
            "fol": "p_2(Samir)",
            "str_fol": "records_albums(Samir)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Samir",
            "text": "Samir does not gain recognition.",
            "fol": "\u00acp_3(Samir)",
            "str_fol": "\u00acgains_recognition(Samir)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Samir",
            "text": "Samir performs live in front of audiences.",
            "fol": "p_13(Samir)",
            "str_fol": "performs_live(Samir)",
            "negation": false
        },
        {
            "id": 5,
            "subject": "Samir",
            "text": "Samir does not have passion.",
            "fol": "\u00acp_11(Samir)",
            "str_fol": "\u00achas_passion(Samir)",
            "negation": true
        },
        {
            "id": 6,
            "subject": "Samir",
            "text": "Samir does not play folk.",
            "fol": "\u00acp_10(Samir)",
            "str_fol": "\u00acplays_folk(Samir)",
            "negation": true
        },
        {
            "id": 7,
            "subject": "Samir",
            "text": "Samir does not compose pop music.",
            "fol": "\u00acp_9(Samir)",
            "str_fol": "\u00accomposes_pop(Samir)",
            "negation": true
        },
        {
            "id": 8,
            "subject": "Samir",
            "text": "Samir does not play jazz.",
            "fol": "\u00acp_8(Samir)",
            "str_fol": "\u00acplays_jazz(Samir)",
            "negation": true
        },
        {
            "id": 9,
            "subject": "Samir",
            "text": "Samir is a versatile musician.",
            "fol": "p_7(Samir)",
            "str_fol": "is_versatile(Samir)",
            "negation": false
        },
        {
            "id": 10,
            "subject": "Samir",
            "text": "Samir plays rock music.",
            "fol": "p_6(Samir)",
            "str_fol": "plays_rock(Samir)",
            "negation": false
        },
        {
            "id": 11,
            "subject": "Samir",
            "text": "Samir is not classically trained.",
            "fol": "\u00acp_4(Samir)",
            "str_fol": "\u00acclassically_trained(Samir)",
            "negation": true
        },
        {
            "id": 12,
            "subject": "Samir",
            "text": "Samir is not self-taught.",
            "fol": "\u00acp_5(Samir)",
            "str_fol": "\u00acself_taught(Samir)",
            "negation": true
        }
    ],
    "context_facts": [
        {
            "id": 2,
            "subject": "Samir",
            "text": "Samir records albums.",
            "fol": "p_2(Samir)",
            "str_fol": "records_albums(Samir)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Samir",
            "text": "Samir does not gain recognition.",
            "fol": "\u00acp_3(Samir)",
            "str_fol": "\u00acgains_recognition(Samir)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Samir",
            "text": "Samir writes lyrics.",
            "fol": "p_0(Samir)",
            "str_fol": "writes_lyrics(Samir)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Samir",
            "text": "Samir is not innovative.",
            "fol": "\u00acp_1(Samir)",
            "str_fol": "\u00acis_innovative(Samir)",
            "negation": true
        }
    ],
    "context_rules": [
        {
            "id": 8,
            "text": "If Samir either records albums or performs live (but not both), then he gains recognition.",
            "fol": "(p_2(Samir) \u2295 p_13(Samir)) \u2192 p_3(Samir)",
            "str_fol": "(records_albums(Samir) \u2295 performs_live(Samir)) \u2192 gains_recognition(Samir)"
        },
        {
            "id": 7,
            "text": "A musician either has passion or performs live, but not necessarily both.",
            "fol": "\u2200x (p_11(x) \u2295 p_13(x))",
            "str_fol": "\u2200x (has_passion(x) \u2295 performs_live(x))"
        },
        {
            "id": 6,
            "text": "If Samir plays folk music, then he has passion and creates harmony.",
            "fol": "p_10(Samir) \u2192 (p_11(Samir) \u2227 p_12(Samir))",
            "str_fol": "plays_folk(Samir) \u2192 (has_passion(Samir) \u2227 creates_harmony(Samir))"
        },
        {
            "id": 5,
            "text": "Samir either writes lyrics or composes pop music, but not both.",
            "fol": "p_0(Samir) \u2295 p_9(Samir)",
            "str_fol": "writes_lyrics(Samir) \u2295 composes_pop(Samir)"
        },
        {
            "id": 4,
            "text": "If Samir either plays folk or plays jazz (but not both), then he is innovative.",
            "fol": "(p_10(Samir) \u2295 p_8(Samir)) \u2192 p_1(Samir)",
            "str_fol": "(plays_folk(Samir) \u2295 plays_jazz(Samir)) \u2192 is_innovative(Samir)"
        },
        {
            "id": 3,
            "text": "Samir is either a versatile musician or composes pop music, but not both.",
            "fol": "p_9(Samir) \u2295 p_7(Samir)",
            "str_fol": "composes_pop(Samir) \u2295 is_versatile(Samir)"
        },
        {
            "id": 2,
            "text": "If Samir is a versatile musician, then he either plays jazz or plays rock music, but not both.",
            "fol": "p_7(Samir) \u2192 (p_8(Samir) \u2295 p_6(Samir))",
            "str_fol": "is_versatile(Samir) \u2192 (plays_jazz(Samir) \u2295 plays_rock(Samir))"
        },
        {
            "id": 1,
            "text": "Samir either plays rock music or is classically trained, but not both.",
            "fol": "p_6(Samir) \u2295 p_4(Samir)",
            "str_fol": "plays_rock(Samir) \u2295 classically_trained(Samir)"
        },
        {
            "id": 0,
            "text": "For every musician like Samir, they are either classically trained or self-taught, but not both.",
            "fol": "p_4(Samir) \u2295 p_5(Samir)",
            "str_fol": "classically_trained(Samir) \u2295 self_taught(Samir)"
        }
    ],
    "context": [
        {
            "id": 2,
            "subject": "Samir",
            "text": "Samir records albums.",
            "fol": "p_2(Samir)",
            "str_fol": "records_albums(Samir)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Samir",
            "text": "Samir does not gain recognition.",
            "fol": "\u00acp_3(Samir)",
            "str_fol": "\u00acgains_recognition(Samir)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Samir",
            "text": "Samir writes lyrics.",
            "fol": "p_0(Samir)",
            "str_fol": "writes_lyrics(Samir)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Samir",
            "text": "Samir is not innovative.",
            "fol": "\u00acp_1(Samir)",
            "str_fol": "\u00acis_innovative(Samir)",
            "negation": true
        },
        {
            "id": 8,
            "text": "If Samir either records albums or performs live (but not both), then he gains recognition.",
            "fol": "(p_2(Samir) \u2295 p_13(Samir)) \u2192 p_3(Samir)",
            "str_fol": "(records_albums(Samir) \u2295 performs_live(Samir)) \u2192 gains_recognition(Samir)"
        },
        {
            "id": 7,
            "text": "A musician either has passion or performs live, but not necessarily both.",
            "fol": "\u2200x (p_11(x) \u2295 p_13(x))",
            "str_fol": "\u2200x (has_passion(x) \u2295 performs_live(x))"
        },
        {
            "id": 6,
            "text": "If Samir plays folk music, then he has passion and creates harmony.",
            "fol": "p_10(Samir) \u2192 (p_11(Samir) \u2227 p_12(Samir))",
            "str_fol": "plays_folk(Samir) \u2192 (has_passion(Samir) \u2227 creates_harmony(Samir))"
        },
        {
            "id": 5,
            "text": "Samir either writes lyrics or composes pop music, but not both.",
            "fol": "p_0(Samir) \u2295 p_9(Samir)",
            "str_fol": "writes_lyrics(Samir) \u2295 composes_pop(Samir)"
        },
        {
            "id": 4,
            "text": "If Samir either plays folk or plays jazz (but not both), then he is innovative.",
            "fol": "(p_10(Samir) \u2295 p_8(Samir)) \u2192 p_1(Samir)",
            "str_fol": "(plays_folk(Samir) \u2295 plays_jazz(Samir)) \u2192 is_innovative(Samir)"
        },
        {
            "id": 3,
            "text": "Samir is either a versatile musician or composes pop music, but not both.",
            "fol": "p_9(Samir) \u2295 p_7(Samir)",
            "str_fol": "composes_pop(Samir) \u2295 is_versatile(Samir)"
        },
        {
            "id": 2,
            "text": "If Samir is a versatile musician, then he either plays jazz or plays rock music, but not both.",
            "fol": "p_7(Samir) \u2192 (p_8(Samir) \u2295 p_6(Samir))",
            "str_fol": "is_versatile(Samir) \u2192 (plays_jazz(Samir) \u2295 plays_rock(Samir))"
        },
        {
            "id": 1,
            "text": "Samir either plays rock music or is classically trained, but not both.",
            "fol": "p_6(Samir) \u2295 p_4(Samir)",
            "str_fol": "plays_rock(Samir) \u2295 classically_trained(Samir)"
        },
        {
            "id": 0,
            "text": "For every musician like Samir, they are either classically trained or self-taught, but not both.",
            "fol": "p_4(Samir) \u2295 p_5(Samir)",
            "str_fol": "classically_trained(Samir) \u2295 self_taught(Samir)"
        }
    ],
    "context_fol": "p_2(Samir)\n\u00acp_3(Samir)\np_0(Samir)\n\u00acp_1(Samir)\n(p_2(Samir) \u2295 p_13(Samir)) \u2192 p_3(Samir)\n\u2200x (p_11(x) \u2295 p_13(x))\np_10(Samir) \u2192 (p_11(Samir) \u2227 p_12(Samir))\np_0(Samir) \u2295 p_9(Samir)\n(p_10(Samir) \u2295 p_8(Samir)) \u2192 p_1(Samir)\np_9(Samir) \u2295 p_7(Samir)\np_7(Samir) \u2192 (p_8(Samir) \u2295 p_6(Samir))\np_6(Samir) \u2295 p_4(Samir)\np_4(Samir) \u2295 p_5(Samir)",
    "conclusion": {
        "id": 12,
        "subject": "Samir",
        "text": "Samir is not self-taught.",
        "fol": "\u00acp_5(Samir)",
        "str_fol": "\u00acself_taught(Samir)",
        "negation": true
    },
    "initial_answer": "False",
    "initial_goal": "\u00acp_5(Samir)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 2,
                    "subject": "Samir",
                    "text": "Samir records albums.",
                    "fol": "p_2(Samir)",
                    "str_fol": "records_albums(Samir)",
                    "negation": false
                },
                {
                    "id": 3,
                    "subject": "Samir",
                    "text": "Samir does not gain recognition.",
                    "fol": "\u00acp_3(Samir)",
                    "str_fol": "\u00acgains_recognition(Samir)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 8,
                    "text": "If Samir either records albums or performs live (but not both), then he gains recognition.",
                    "fol": "(p_2(Samir) \u2295 p_13(Samir)) \u2192 p_3(Samir)",
                    "str_fol": "(records_albums(Samir) \u2295 performs_live(Samir)) \u2192 gains_recognition(Samir)"
                }
            ],
            "conclusion": {
                "id": 4,
                "subject": "Samir",
                "text": "Samir performs live in front of audiences.",
                "fol": "p_13(Samir)",
                "str_fol": "performs_live(Samir)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 4,
                    "subject": "Samir",
                    "text": "Samir performs live in front of audiences.",
                    "fol": "p_13(Samir)",
                    "str_fol": "performs_live(Samir)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 7,
                    "text": "A musician either has passion or performs live, but not necessarily both.",
                    "fol": "\u2200x (p_11(x) \u2295 p_13(x))",
                    "str_fol": "\u2200x (has_passion(x) \u2295 performs_live(x))"
                }
            ],
            "conclusion": {
                "id": 5,
                "subject": "Samir",
                "text": "Samir does not have passion.",
                "fol": "\u00acp_11(Samir)",
                "str_fol": "\u00achas_passion(Samir)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 5,
                    "subject": "Samir",
                    "text": "Samir does not have passion.",
                    "fol": "\u00acp_11(Samir)",
                    "str_fol": "\u00achas_passion(Samir)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 6,
                    "text": "If Samir plays folk music, then he has passion and creates harmony.",
                    "fol": "p_10(Samir) \u2192 (p_11(Samir) \u2227 p_12(Samir))",
                    "str_fol": "plays_folk(Samir) \u2192 (has_passion(Samir) \u2227 creates_harmony(Samir))"
                }
            ],
            "conclusion": {
                "id": 6,
                "subject": "Samir",
                "text": "Samir does not play folk.",
                "fol": "\u00acp_10(Samir)",
                "str_fol": "\u00acplays_folk(Samir)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 0,
                    "subject": "Samir",
                    "text": "Samir writes lyrics.",
                    "fol": "p_0(Samir)",
                    "str_fol": "writes_lyrics(Samir)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "Samir either writes lyrics or composes pop music, but not both.",
                    "fol": "p_0(Samir) \u2295 p_9(Samir)",
                    "str_fol": "writes_lyrics(Samir) \u2295 composes_pop(Samir)"
                }
            ],
            "conclusion": {
                "id": 7,
                "subject": "Samir",
                "text": "Samir does not compose pop music.",
                "fol": "\u00acp_9(Samir)",
                "str_fol": "\u00accomposes_pop(Samir)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 6,
                    "subject": "Samir",
                    "text": "Samir does not play folk.",
                    "fol": "\u00acp_10(Samir)",
                    "str_fol": "\u00acplays_folk(Samir)",
                    "negation": true
                },
                {
                    "id": 1,
                    "subject": "Samir",
                    "text": "Samir is not innovative.",
                    "fol": "\u00acp_1(Samir)",
                    "str_fol": "\u00acis_innovative(Samir)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "If Samir either plays folk or plays jazz (but not both), then he is innovative.",
                    "fol": "(p_10(Samir) \u2295 p_8(Samir)) \u2192 p_1(Samir)",
                    "str_fol": "(plays_folk(Samir) \u2295 plays_jazz(Samir)) \u2192 is_innovative(Samir)"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Samir",
                "text": "Samir does not play jazz.",
                "fol": "\u00acp_8(Samir)",
                "str_fol": "\u00acplays_jazz(Samir)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 7,
                    "subject": "Samir",
                    "text": "Samir does not compose pop music.",
                    "fol": "\u00acp_9(Samir)",
                    "str_fol": "\u00accomposes_pop(Samir)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "Samir is either a versatile musician or composes pop music, but not both.",
                    "fol": "p_9(Samir) \u2295 p_7(Samir)",
                    "str_fol": "composes_pop(Samir) \u2295 is_versatile(Samir)"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Samir",
                "text": "Samir is a versatile musician.",
                "fol": "p_7(Samir)",
                "str_fol": "is_versatile(Samir)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 9,
                    "subject": "Samir",
                    "text": "Samir is a versatile musician.",
                    "fol": "p_7(Samir)",
                    "str_fol": "is_versatile(Samir)",
                    "negation": false
                },
                {
                    "id": 8,
                    "subject": "Samir",
                    "text": "Samir does not play jazz.",
                    "fol": "\u00acp_8(Samir)",
                    "str_fol": "\u00acplays_jazz(Samir)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "If Samir is a versatile musician, then he either plays jazz or plays rock music, but not both.",
                    "fol": "p_7(Samir) \u2192 (p_8(Samir) \u2295 p_6(Samir))",
                    "str_fol": "is_versatile(Samir) \u2192 (plays_jazz(Samir) \u2295 plays_rock(Samir))"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Samir",
                "text": "Samir plays rock music.",
                "fol": "p_6(Samir)",
                "str_fol": "plays_rock(Samir)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 10,
                    "subject": "Samir",
                    "text": "Samir plays rock music.",
                    "fol": "p_6(Samir)",
                    "str_fol": "plays_rock(Samir)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "Samir either plays rock music or is classically trained, but not both.",
                    "fol": "p_6(Samir) \u2295 p_4(Samir)",
                    "str_fol": "plays_rock(Samir) \u2295 classically_trained(Samir)"
                }
            ],
            "conclusion": {
                "id": 11,
                "subject": "Samir",
                "text": "Samir is not classically trained.",
                "fol": "\u00acp_4(Samir)",
                "str_fol": "\u00acclassically_trained(Samir)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 11,
                    "subject": "Samir",
                    "text": "Samir is not classically trained.",
                    "fol": "\u00acp_4(Samir)",
                    "str_fol": "\u00acclassically_trained(Samir)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "For every musician like Samir, they are either classically trained or self-taught, but not both.",
                    "fol": "p_4(Samir) \u2295 p_5(Samir)",
                    "str_fol": "classically_trained(Samir) \u2295 self_taught(Samir)"
                }
            ],
            "conclusion": {
                "id": 12,
                "subject": "Samir",
                "text": "Samir is not self-taught.",
                "fol": "\u00acp_5(Samir)",
                "str_fol": "\u00acself_taught(Samir)",
                "negation": true
            }
        }
    ],
    "proof_trace": "1 -(p_2(Samir) <-> p_13(Samir)) -> p_3(Samir).  [assumption].\n2 (all x -(p_11(x) <-> p_13(x))).  [assumption].\n3 p_10(Samir) -> p_11(Samir) & p_12(Samir).  [assumption].\n4 -(p_0(Samir) <-> p_9(Samir)).  [assumption].\n5 -(p_10(Samir) <-> p_8(Samir)) -> p_1(Samir).  [assumption].\n6 -(p_9(Samir) <-> p_7(Samir)).  [assumption].\n7 p_7(Samir) -> -(p_8(Samir) <-> p_6(Samir)).  [assumption].\n8 -(p_6(Samir) <-> p_4(Samir)).  [assumption].\n9 -(p_4(Samir) <-> p_5(Samir)).  [assumption].\n10 --p_5(Samir).  [goal].\n11 -p_2(Samir) | p_13(Samir) | p_3(Samir).  [clausify(1)].\n12 p_2(Samir).  [assumption].\n14 p_13(Samir) | p_3(Samir).  [resolve(11,a,12,a)].\n15 -p_3(Samir).  [assumption].\n16 -p_0(Samir) | -p_9(Samir).  [clausify(4)].\n17 p_0(Samir).  [assumption].\n20 -p_1(Samir).  [assumption].\n21 p_10(Samir) | -p_8(Samir) | p_1(Samir).  [clausify(5)].\n22 -p_11(x) | -p_13(x).  [clausify(2)].\n24 -p_10(Samir) | p_11(Samir).  [clausify(3)].\n25 p_10(Samir) | -p_8(Samir).  [resolve(21,c,20,a)].\n28 -p_10(Samir) | -p_13(Samir).  [resolve(24,b,22,a)].\n30 p_9(Samir) | p_7(Samir).  [clausify(6)].\n31 -p_9(Samir).  [resolve(16,a,17,a)].\n32 p_7(Samir).  [resolve(31,a,30,a)].\n33 -p_7(Samir) | p_8(Samir) | p_6(Samir).  [clausify(7)].\n35 -p_6(Samir) | -p_4(Samir).  [clausify(8)].\n37 p_8(Samir) | p_6(Samir).  [resolve(32,a,33,a)].\n40 p_4(Samir) | p_5(Samir).  [clausify(9)].\n41 p_8(Samir) | -p_4(Samir).  [resolve(37,b,35,a)].\n43 p_8(Samir) | p_5(Samir).  [resolve(41,b,40,a)].\n44 -p_5(Samir).  [deny(10)].\n46 -p_13(Samir) | -p_8(Samir).  [resolve(28,a,25,a)].\n47 p_13(Samir).  [resolve(14,b,15,a)].\n48 p_8(Samir).  [resolve(43,b,44,a)].\n50 -p_8(Samir).  [resolve(46,a,47,a)].\n51 $F.  [resolve(50,a,48,a)].",
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_2(Samir)\n\u00acp_3(Samir)\np_0(Samir)\n\u00acp_1(Samir)\n(p_2(Samir) \u2295 p_13(Samir)) \u2192 p_3(Samir)\n\u2200x (p_11(x) \u2295 p_13(x))\np_10(Samir) \u2192 (p_11(Samir) \u2227 p_12(Samir))\np_0(Samir) \u2295 p_9(Samir)\n(p_10(Samir) \u2295 p_8(Samir)) \u2192 p_1(Samir)\np_9(Samir) \u2295 p_7(Samir)\np_7(Samir) \u2192 (p_8(Samir) \u2295 p_6(Samir))\np_6(Samir) \u2295 p_4(Samir)\np_4(Samir) \u2295 p_5(Samir)\n\u00acp_11(Samir)",
            "Initial Goal": "\u00acp_5(Samir)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_2(Samir)",
                    "-p_3(Samir)",
                    "p_0(Samir)",
                    "-p_1(Samir)",
                    "(-(p_2(Samir) <-> p_13(Samir))) -> p_3(Samir)",
                    "all x (-(p_11(x) <-> p_13(x)))",
                    "p_10(Samir) -> (p_11(Samir) & p_12(Samir))",
                    "-(p_0(Samir) <-> p_9(Samir))",
                    "(-(p_10(Samir) <-> p_8(Samir))) -> p_1(Samir)",
                    "-(p_9(Samir) <-> p_7(Samir))",
                    "p_7(Samir) -> (-(p_8(Samir) <-> p_6(Samir)))",
                    "-(p_6(Samir) <-> p_4(Samir))",
                    "-(p_4(Samir) <-> p_5(Samir))",
                    "-p_11(Samir)"
                ],
                "formulas(goals)": [
                    "p_5(Samir)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "\u00acp_11(Samir)"
                ],
                "added_rules": []
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_2(Samir)\n\u00acp_3(Samir)\n\u00acp_1(Samir)\n(p_2(Samir) \u2295 p_13(Samir)) \u2192 p_3(Samir)\n\u2200x (p_11(x) \u2295 p_13(x))\np_10(Samir) \u2192 (p_11(Samir) \u2227 p_12(Samir))\np_0(Samir) \u2295 p_9(Samir)\n(p_10(Samir) \u2295 p_8(Samir)) \u2192 p_1(Samir)\np_9(Samir) \u2295 p_7(Samir)\np_7(Samir) \u2192 (p_8(Samir) \u2295 p_6(Samir))\np_6(Samir) \u2295 p_4(Samir)\np_4(Samir) \u2295 p_5(Samir)\n\u00acp_11(Samir)\np_4(Samir)",
            "Initial Goal": "\u00acp_5(Samir)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_2(Samir)",
                    "-p_3(Samir)",
                    "-p_1(Samir)",
                    "(-(p_2(Samir) <-> p_13(Samir))) -> p_3(Samir)",
                    "all x (-(p_11(x) <-> p_13(x)))",
                    "p_10(Samir) -> (p_11(Samir) & p_12(Samir))",
                    "-(p_0(Samir) <-> p_9(Samir))",
                    "(-(p_10(Samir) <-> p_8(Samir))) -> p_1(Samir)",
                    "-(p_9(Samir) <-> p_7(Samir))",
                    "p_7(Samir) -> (-(p_8(Samir) <-> p_6(Samir)))",
                    "-(p_6(Samir) <-> p_4(Samir))",
                    "-(p_4(Samir) <-> p_5(Samir))",
                    "-p_11(Samir)",
                    "p_4(Samir)"
                ],
                "formulas(goals)": [
                    "-p_5(Samir)"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "p_0(Samir)"
                ],
                "removed_rules": [],
                "added_facts": [
                    "p_4(Samir)"
                ],
                "added_rules": []
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_2(Samir)\n\u00acp_3(Samir)\n\u00acp_1(Samir)\n(p_2(Samir) \u2295 p_13(Samir)) \u2192 p_3(Samir)\n\u2200x (p_11(x) \u2295 p_13(x))\np_10(Samir) \u2192 (p_11(Samir) \u2227 p_12(Samir))\np_0(Samir) \u2295 p_9(Samir)\n(p_10(Samir) \u2295 p_8(Samir)) \u2192 p_1(Samir)\np_9(Samir) \u2295 p_7(Samir)\np_7(Samir) \u2192 (p_8(Samir) \u2295 p_6(Samir))\np_6(Samir) \u2295 p_4(Samir)\np_4(Samir) \u2295 p_5(Samir)\n\u00acp_11(Samir)\np_4(Samir)\np_13(Samir)",
            "Initial Goal": "\u00acp_5(Samir)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_2(Samir)",
                    "-p_3(Samir)",
                    "-p_1(Samir)",
                    "(-(p_2(Samir) <-> p_13(Samir))) -> p_3(Samir)",
                    "all x (-(p_11(x) <-> p_13(x)))",
                    "p_10(Samir) -> (p_11(Samir) & p_12(Samir))",
                    "-(p_0(Samir) <-> p_9(Samir))",
                    "(-(p_10(Samir) <-> p_8(Samir))) -> p_1(Samir)",
                    "-(p_9(Samir) <-> p_7(Samir))",
                    "p_7(Samir) -> (-(p_8(Samir) <-> p_6(Samir)))",
                    "-(p_6(Samir) <-> p_4(Samir))",
                    "-(p_4(Samir) <-> p_5(Samir))",
                    "-p_11(Samir)",
                    "p_4(Samir)",
                    "p_13(Samir)"
                ],
                "formulas(goals)": [
                    "-p_5(Samir)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_13(Samir)"
                ],
                "added_rules": []
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_2(Samir)\n\u00acp_3(Samir)\n\u00acp_1(Samir)\n((p_2(Samir) \u2295 p_13(Samir)) \u2192 p_3(Samir))\n\u2200x (p_11(x) \u2295 p_13(x))\n(p_10(Samir) \u2192 (p_11(Samir) \u2227 p_12(Samir)))\np_0(Samir) \u2295 p_9(Samir)\n((p_10(Samir) \u2295 p_8(Samir)) \u2192 p_1(Samir))\np_9(Samir) \u2295 p_7(Samir)\n(p_7(Samir) \u2192 (p_8(Samir) \u2295 p_6(Samir)))\np_6(Samir) \u2295 p_4(Samir)\np_4(Samir) \u2295 p_5(Samir)\n\u00acp_11(Samir)\n\u00acp_4(Samir)\np_13(Samir)",
            "Initial Goal": "\u00acp_5(Samir)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_2(Samir).",
                    "-p_3(Samir).",
                    "-p_1(Samir).",
                    "(-(p_2(Samir) <-> p_13(Samir))) -> p_3(Samir).",
                    "all x (-(p_11(x) <-> p_13(x))).",
                    "p_10(Samir) -> (p_11(Samir) & p_12(Samir)).",
                    "-(p_0(Samir) <-> p_9(Samir)).",
                    "(-(p_10(Samir) <-> p_8(Samir))) -> p_1(Samir).",
                    "-(p_9(Samir) <-> p_7(Samir)).",
                    "p_7(Samir) -> (-(p_8(Samir) <-> p_6(Samir))).",
                    "-(p_6(Samir) <-> p_4(Samir)).",
                    "-(p_4(Samir) <-> p_5(Samir)).",
                    "-p_11(Samir).",
                    "-p_4(Samir).",
                    "p_13(Samir)."
                ],
                "formulas(goals)": [
                    "-(-p_5(Samir))."
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "p_4(Samir)"
                ],
                "removed_rules": [],
                "added_facts": [
                    "\u00acp_4(Samir)"
                ],
                "added_rules": []
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_2(Samir)\n\u00acp_3(Samir)\n\u00acp_1(Samir)\n((p_2(Samir) \u2295 p_13(Samir)) \u2192 p_3(Samir))\n\u2200x (p_11(x) \u2295 p_13(x))\n(\u00acp_10(Samir) \u2228 (p_11(Samir) \u2227 p_12(Samir)))\np_0(Samir) \u2295 p_9(Samir)\n((p_10(Samir) \u2295 p_8(Samir)) \u2192 p_1(Samir))\n(p_9(Samir) \u2227 \u00acp_7(Samir)) \u2228 (\u00acp_9(Samir) \u2227 p_7(Samir))\n(p_7(Samir) \u2192 (p_8(Samir) \u2295 p_6(Samir)))\n(p_6(Samir) \u2228 p_4(Samir)) \u2227 (\u00acp_6(Samir) \u2228 \u00acp_4(Samir))\n(p_4(Samir) \u2228 p_5(Samir)) \u2227 (\u00acp_4(Samir) \u2228 \u00acp_5(Samir))\n\u00acp_11(Samir)\n\u00acp_4(Samir)\np_13(Samir)\np_5(Samir)\np_6(Samir)",
            "Initial Goal": "\u00acp_5(Samir)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_2(Samir)",
                    "-p_3(Samir)",
                    "-p_1(Samir)",
                    "(-(p_2(Samir) <-> p_13(Samir))) -> p_3(Samir)",
                    "all x (-(p_11(x) <-> p_13(x)))",
                    "(-p_10(Samir)) | (p_11(Samir) & p_12(Samir))",
                    "-(p_0(Samir) <-> p_9(Samir))",
                    "(-(p_10(Samir) <-> p_8(Samir))) -> p_1(Samir)",
                    "(p_9(Samir) & -p_7(Samir)) | (-p_9(Samir) & p_7(Samir))",
                    "p_7(Samir) -> (-(p_8(Samir) <-> p_6(Samir)))",
                    "(p_6(Samir) | p_4(Samir)) & (-p_6(Samir) | -p_4(Samir))",
                    "(p_4(Samir) | p_5(Samir)) & (-p_4(Samir) | -p_5(Samir))",
                    "-p_11(Samir)",
                    "-p_4(Samir)",
                    "p_13(Samir)",
                    "p_5(Samir)",
                    "p_6(Samir)"
                ],
                "formulas(goals)": [
                    "--p_5(Samir)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "(p_10(Samir) \u2192 (p_11(Samir) \u2227 p_12(Samir)))",
                    "p_9(Samir) \u2295 p_7(Samir)",
                    "p_6(Samir) \u2295 p_4(Samir)",
                    "p_4(Samir) \u2295 p_5(Samir)"
                ],
                "added_facts": [
                    "p_5(Samir)",
                    "p_6(Samir)"
                ],
                "added_rules": [
                    "(\u00acp_10(Samir) \u2228 (p_11(Samir) \u2227 p_12(Samir)))",
                    "((p_9(Samir) \u2227 \u00acp_7(Samir)) \u2228 (\u00acp_9(Samir) \u2227 p_7(Samir)))",
                    "((p_6(Samir) \u2228 p_4(Samir)) \u2227 (\u00acp_6(Samir) \u2228 \u00acp_4(Samir)))",
                    "((p_4(Samir) \u2228 p_5(Samir)) \u2227 (\u00acp_4(Samir) \u2228 \u00acp_5(Samir)))"
                ]
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_2(Samir)\n\u00acp_3(Samir)\n\u00acp_1(Samir)\n((p_2(Samir) \u2295 p_13(Samir)) \u2192 p_3(Samir))\n\u2200x (p_11(x) \u2295 p_13(x))\n(\u00acp_10(Samir) \u2228 (p_11(Samir) \u2227 p_12(Samir)))\np_0(Samir) \u2295 p_9(Samir)\n((p_10(Samir) \u2295 p_8(Samir)) \u2192 p_1(Samir))\n(p_9(Samir) \u2227 \u00acp_7(Samir)) \u2228 (\u00acp_9(Samir) \u2227 p_7(Samir))\n(p_7(Samir) \u2192 (p_8(Samir) \u2295 p_6(Samir)))\n(p_6(Samir) \u2228 p_4(Samir)) \u2227 (\u00acp_6(Samir) \u2228 \u00acp_4(Samir))\n\u00acp_5(Samir)\n\u00acp_11(Samir)\n\u00acp_4(Samir)\np_13(Samir)\np_6(Samir)",
            "Initial Goal": "\u00acp_5(Samir)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_2(Samir)",
                    "-p_3(Samir)",
                    "-p_1(Samir)",
                    "(-(p_2(Samir) <-> p_13(Samir)) -> p_3(Samir))",
                    "all x (-(p_11(x) <-> p_13(x)))",
                    "(-p_10(Samir) | (p_11(Samir) & p_12(Samir)))",
                    "-(p_0(Samir) <-> p_9(Samir))",
                    "(-(p_10(Samir) <-> p_8(Samir)) -> p_1(Samir))",
                    "(p_9(Samir) & -p_7(Samir)) | (-p_9(Samir) & p_7(Samir))",
                    "(p_7(Samir) -> -(p_8(Samir) <-> p_6(Samir)))",
                    "(p_6(Samir) | p_4(Samir)) & (-p_6(Samir) | -p_4(Samir))",
                    "-p_5(Samir)",
                    "-p_11(Samir)",
                    "-p_4(Samir)",
                    "p_13(Samir)",
                    "p_6(Samir)"
                ],
                "formulas(goals)": [
                    "-p_5(Samir)"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "p_5(Samir)"
                ],
                "removed_rules": [
                    "(p_4(Samir) \u2228 p_5(Samir)) \u2227 (\u00acp_4(Samir) \u2228 \u00acp_5(Samir))"
                ],
                "added_facts": [
                    "\u00acp_5(Samir)"
                ],
                "added_rules": []
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_2(Samir)\n\u00acp_3(Samir)\n\u00acp_1(Samir)\n((p_2(Samir) \u2295 p_13(Samir)) \u2192 p_3(Samir))\n\u2200x (p_11(x) \u2295 p_13(x))\n(\u00acp_10(Samir) \u2228 (p_11(Samir) \u2227 p_12(Samir)))\np_0(Samir) \u2295 p_9(Samir)\n((p_10(Samir) \u2295 p_8(Samir)) \u2192 p_1(Samir))\n(p_9(Samir) \u2227 \u00acp_7(Samir)) \u2228 (\u00acp_9(Samir) \u2227 p_7(Samir))\n(p_7(Samir) \u2192 (p_8(Samir) \u2295 p_6(Samir)))\n(p_6(Samir) \u2228 p_4(Samir)) \u2227 (\u00acp_6(Samir) \u2228 \u00acp_4(Samir))\n\u00acp_5(Samir)\n\u00acp_11(Samir)\n\u00acp_4(Samir)\np_13(Samir)\np_6(Samir)\np_6(Samir) \u2295 p_4(Samir)\np_9(Samir) \u2295 p_7(Samir)\np_11(Samir) \u2228 p_13(Samir)\n\u00acp_11(Samir) \u2228 \u00acp_13(Samir)",
            "Initial Goal": "\u00acp_5(Samir)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_2(Samir)",
                    "-p_3(Samir)",
                    "-p_1(Samir)",
                    "(-(p_2(Samir) <-> p_13(Samir)) -> p_3(Samir))",
                    "all x (-(p_11(x) <-> p_13(x)))",
                    "(-p_10(Samir) | (p_11(Samir) & p_12(Samir)))",
                    "-(p_0(Samir) <-> p_9(Samir))",
                    "(-(p_10(Samir) <-> p_8(Samir)) -> p_1(Samir))",
                    "(p_9(Samir) & -p_7(Samir)) | (-p_9(Samir) & p_7(Samir))",
                    "(p_7(Samir) -> -(p_8(Samir) <-> p_6(Samir)))",
                    "(p_6(Samir) | p_4(Samir)) & (-p_6(Samir) | -p_4(Samir))",
                    "-p_5(Samir)",
                    "-p_11(Samir)",
                    "-p_4(Samir)",
                    "p_13(Samir)",
                    "p_6(Samir)",
                    "-(p_6(Samir) <-> p_4(Samir))",
                    "-(p_9(Samir) <-> p_7(Samir))",
                    "p_11(Samir) | p_13(Samir)",
                    "-p_11(Samir) | -p_13(Samir)"
                ],
                "formulas(goals)": [
                    "-p_5(Samir)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "p_6(Samir) \u2295 p_4(Samir)",
                    "p_9(Samir) \u2295 p_7(Samir)",
                    "p_11(Samir) \u2228 p_13(Samir)",
                    "\u00acp_11(Samir) \u2228 \u00acp_13(Samir)"
                ]
            }
        }
    ]
}