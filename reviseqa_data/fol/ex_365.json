{
    "background_story": "Abram was a skilled emergency responder who had dedicated his life to saving others. As a firefighter, he had seen his fair share of crises, but he never hesitated to respond to any call for help. His quick thinking and decisive actions had saved countless lives over the years. One fateful night, a massive fire broke out in a high-rise building, trapping several people inside. Abram sprang into action, rushing into the inferno to respond to the desperate cries for help. With his expertise and bravery, he managed to rescue everyone, earning him a medal for valor. Abram's ability to respond under pressure made him a hero in the eyes of his community.",
    "predicates": [
        {
            "id": 0,
            "name": "emergency_responder"
        },
        {
            "id": 1,
            "name": "seeks_fame"
        },
        {
            "id": 2,
            "name": "takes_action"
        },
        {
            "id": 3,
            "name": "is_reliable"
        },
        {
            "id": 4,
            "name": "brave"
        },
        {
            "id": 5,
            "name": "save_lives"
        },
        {
            "id": 6,
            "name": "earn_recognition"
        },
        {
            "id": 7,
            "name": "quick_thinker"
        },
        {
            "id": 8,
            "name": "stay_calm"
        },
        {
            "id": 9,
            "name": "expert_leader"
        },
        {
            "id": 10,
            "name": "makes_decisions"
        },
        {
            "id": 11,
            "name": "solves_crises"
        },
        {
            "id": 12,
            "name": "put_others_first"
        },
        {
            "id": 13,
            "name": "thinks_critically"
        },
        {
            "id": 14,
            "name": "face_dangers"
        },
        {
            "id": 15,
            "name": "help_others"
        },
        {
            "id": 16,
            "name": "acts_fast"
        },
        {
            "id": 17,
            "name": "thinks_clearly"
        },
        {
            "id": 18,
            "name": "leads_team"
        },
        {
            "id": 19,
            "name": "act_selfless"
        },
        {
            "id": 20,
            "name": "show_courage"
        },
        {
            "id": 21,
            "name": "is_selfless"
        },
        {
            "id": 22,
            "name": "is_humble"
        },
        {
            "id": 23,
            "name": "has_experience"
        },
        {
            "id": 24,
            "name": "is_confident"
        },
        {
            "id": 25,
            "name": "has_expertise"
        },
        {
            "id": 26,
            "name": "stays_focused"
        }
    ],
    "subject_name": "Abram",
    "subject_category": "human",
    "keyword": "respond",
    "all_facts": [
        {
            "id": 0,
            "subject": "Abram",
            "text": "Abram is an emergency responder.",
            "fol": "p_0(Abram)",
            "str_fol": "emergency_responder(Abram)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Abram",
            "text": "Abram seeks fame.",
            "fol": "p_1(Abram)",
            "str_fol": "seeks_fame(Abram)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Abram",
            "text": "Abram does not take action.",
            "fol": "\u00acp_2(Abram)",
            "str_fol": "\u00actakes_action(Abram)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Abram",
            "text": "Abram is not reliable.",
            "fol": "\u00acp_3(Abram)",
            "str_fol": "\u00acis_reliable(Abram)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Abram",
            "text": "Abram cannot solve crises.",
            "fol": "\u00acp_11(Abram)",
            "str_fol": "\u00acsolves_crises(Abram)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Abram",
            "text": "Abram makes decisions.",
            "fol": "p_10(Abram)",
            "str_fol": "makes_decisions(Abram)",
            "negation": false
        },
        {
            "id": 6,
            "subject": "Abram",
            "text": "Abram does not put others first.",
            "fol": "\u00acp_12(Abram)",
            "str_fol": "\u00acput_others_first(Abram)",
            "negation": true
        },
        {
            "id": 7,
            "subject": "Abram",
            "text": "Abram earns recognition.",
            "fol": "p_6(Abram)",
            "str_fol": "earn_recognition(Abram)",
            "negation": false
        },
        {
            "id": 8,
            "subject": "Abram",
            "text": "Abram is not an expert leader.",
            "fol": "\u00acp_9(Abram)",
            "str_fol": "\u00acexpert_leader(Abram)",
            "negation": true
        },
        {
            "id": 9,
            "subject": "Abram",
            "text": "Abram is a quick thinker.",
            "fol": "p_7(Abram)",
            "str_fol": "quick_thinker(Abram)",
            "negation": false
        },
        {
            "id": 10,
            "subject": "Abram",
            "text": "Abram is brave.",
            "fol": "p_4(Abram)",
            "str_fol": "brave(Abram)",
            "negation": false
        },
        {
            "id": 11,
            "subject": "Abram",
            "text": "Abram saves lives.",
            "fol": "p_5(Abram)",
            "str_fol": "save_lives(Abram)",
            "negation": false
        }
    ],
    "context_facts": [
        {
            "id": 3,
            "subject": "Abram",
            "text": "Abram is not reliable.",
            "fol": "\u00acp_3(Abram)",
            "str_fol": "\u00acis_reliable(Abram)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Abram",
            "text": "Abram does not take action.",
            "fol": "\u00acp_2(Abram)",
            "str_fol": "\u00actakes_action(Abram)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Abram",
            "text": "Abram seeks fame.",
            "fol": "p_1(Abram)",
            "str_fol": "seeks_fame(Abram)",
            "negation": false
        },
        {
            "id": 0,
            "subject": "Abram",
            "text": "Abram is an emergency responder.",
            "fol": "p_0(Abram)",
            "str_fol": "emergency_responder(Abram)",
            "negation": false
        }
    ],
    "context_rules": [
        {
            "id": 7,
            "text": "Anyone who solves crises or thinks critically is reliable.",
            "fol": "\u2200x ((p_11(x) \u2228 p_13(x)) \u2192 p_3(x))",
            "str_fol": "\u2200x ((solves_crises(x) \u2228 thinks_critically(x)) \u2192 is_reliable(x))"
        },
        {
            "id": 6,
            "text": "Everyone makes decisions or takes action.",
            "fol": "\u2200x (p_10(x) \u2228 p_2(x))",
            "str_fol": "\u2200x (makes_decisions(x) \u2228 takes_action(x))"
        },
        {
            "id": 5,
            "text": "For any person, seeking fame and putting others first are distinct and separate pursuits.",
            "fol": "\u2200x (p_1(x) \u2295 p_12(x))",
            "str_fol": "\u2200x (seeks_fame(x) \u2295 put_others_first(x))"
        },
        {
            "id": 4,
            "text": "Everyone who earns recognition does not necessarily put others first, and everyone who puts others first does not necessarily earn recognition.",
            "fol": "\u2200x (p_6(x) \u2295 p_12(x))",
            "str_fol": "\u2200x (earn_recognition(x) \u2295 put_others_first(x))"
        },
        {
            "id": 3,
            "text": "If someone is an expert leader and makes decisions, then they can solve crises.",
            "fol": "\u2200x ((p_9(x) \u2227 p_10(x)) \u2192 p_11(x))",
            "str_fol": "\u2200x ((expert_leader(x) \u2227 makes_decisions(x)) \u2192 solves_crises(x))"
        },
        {
            "id": 2,
            "text": "If Abram is an emergency responder, then he is either a quick thinker or an expert leader, but not both.",
            "fol": "p_0(Abram) \u2192 (p_7(Abram) \u2295 p_9(Abram))",
            "str_fol": "emergency_responder(Abram) \u2192 (quick_thinker(Abram) \u2295 expert_leader(Abram))"
        },
        {
            "id": 1,
            "text": "If Abram is a quick thinker, then he stays calm and is brave.",
            "fol": "p_7(Abram) \u2192 (p_8(Abram) \u2227 p_4(Abram))",
            "str_fol": "quick_thinker(Abram) \u2192 (stay_calm(Abram) \u2227 brave(Abram))"
        },
        {
            "id": 0,
            "text": "If Abram is brave, then he saves lives and earns recognition.",
            "fol": "p_4(Abram) \u2192 (p_5(Abram) \u2227 p_6(Abram))",
            "str_fol": "brave(Abram) \u2192 (save_lives(Abram) \u2227 earn_recognition(Abram))"
        }
    ],
    "context": [
        {
            "id": 3,
            "subject": "Abram",
            "text": "Abram is not reliable.",
            "fol": "\u00acp_3(Abram)",
            "str_fol": "\u00acis_reliable(Abram)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Abram",
            "text": "Abram does not take action.",
            "fol": "\u00acp_2(Abram)",
            "str_fol": "\u00actakes_action(Abram)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Abram",
            "text": "Abram seeks fame.",
            "fol": "p_1(Abram)",
            "str_fol": "seeks_fame(Abram)",
            "negation": false
        },
        {
            "id": 0,
            "subject": "Abram",
            "text": "Abram is an emergency responder.",
            "fol": "p_0(Abram)",
            "str_fol": "emergency_responder(Abram)",
            "negation": false
        },
        {
            "id": 7,
            "text": "Anyone who solves crises or thinks critically is reliable.",
            "fol": "\u2200x ((p_11(x) \u2228 p_13(x)) \u2192 p_3(x))",
            "str_fol": "\u2200x ((solves_crises(x) \u2228 thinks_critically(x)) \u2192 is_reliable(x))"
        },
        {
            "id": 6,
            "text": "Everyone makes decisions or takes action.",
            "fol": "\u2200x (p_10(x) \u2228 p_2(x))",
            "str_fol": "\u2200x (makes_decisions(x) \u2228 takes_action(x))"
        },
        {
            "id": 5,
            "text": "For any person, seeking fame and putting others first are distinct and separate pursuits.",
            "fol": "\u2200x (p_1(x) \u2295 p_12(x))",
            "str_fol": "\u2200x (seeks_fame(x) \u2295 put_others_first(x))"
        },
        {
            "id": 4,
            "text": "Everyone who earns recognition does not necessarily put others first, and everyone who puts others first does not necessarily earn recognition.",
            "fol": "\u2200x (p_6(x) \u2295 p_12(x))",
            "str_fol": "\u2200x (earn_recognition(x) \u2295 put_others_first(x))"
        },
        {
            "id": 3,
            "text": "If someone is an expert leader and makes decisions, then they can solve crises.",
            "fol": "\u2200x ((p_9(x) \u2227 p_10(x)) \u2192 p_11(x))",
            "str_fol": "\u2200x ((expert_leader(x) \u2227 makes_decisions(x)) \u2192 solves_crises(x))"
        },
        {
            "id": 2,
            "text": "If Abram is an emergency responder, then he is either a quick thinker or an expert leader, but not both.",
            "fol": "p_0(Abram) \u2192 (p_7(Abram) \u2295 p_9(Abram))",
            "str_fol": "emergency_responder(Abram) \u2192 (quick_thinker(Abram) \u2295 expert_leader(Abram))"
        },
        {
            "id": 1,
            "text": "If Abram is a quick thinker, then he stays calm and is brave.",
            "fol": "p_7(Abram) \u2192 (p_8(Abram) \u2227 p_4(Abram))",
            "str_fol": "quick_thinker(Abram) \u2192 (stay_calm(Abram) \u2227 brave(Abram))"
        },
        {
            "id": 0,
            "text": "If Abram is brave, then he saves lives and earns recognition.",
            "fol": "p_4(Abram) \u2192 (p_5(Abram) \u2227 p_6(Abram))",
            "str_fol": "brave(Abram) \u2192 (save_lives(Abram) \u2227 earn_recognition(Abram))"
        }
    ],
    "context_fol": "\u00acp_3(Abram)\n\u00acp_2(Abram)\np_1(Abram)\np_0(Abram)\n\u2200x ((p_11(x) \u2228 p_13(x)) \u2192 p_3(x))\n\u2200x (p_10(x) \u2228 p_2(x))\n\u2200x (p_1(x) \u2295 p_12(x))\n\u2200x (p_6(x) \u2295 p_12(x))\n\u2200x ((p_9(x) \u2227 p_10(x)) \u2192 p_11(x))\np_0(Abram) \u2192 (p_7(Abram) \u2295 p_9(Abram))\np_7(Abram) \u2192 (p_8(Abram) \u2227 p_4(Abram))\np_4(Abram) \u2192 (p_5(Abram) \u2227 p_6(Abram))",
    "conclusion": {
        "id": 11,
        "subject": "Abram",
        "text": "Abram saves lives.",
        "fol": "p_5(Abram)",
        "str_fol": "save_lives(Abram)",
        "negation": false
    },
    "initial_answer": "True",
    "initial_goal": "p_5(Abram)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 3,
                    "subject": "Abram",
                    "text": "Abram is not reliable.",
                    "fol": "\u00acp_3(Abram)",
                    "str_fol": "\u00acis_reliable(Abram)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 7,
                    "text": "Anyone who solves crises or thinks critically is reliable.",
                    "fol": "\u2200x ((p_11(x) \u2228 p_13(x)) \u2192 p_3(x))",
                    "str_fol": "\u2200x ((solves_crises(x) \u2228 thinks_critically(x)) \u2192 is_reliable(x))"
                }
            ],
            "conclusion": {
                "id": 4,
                "subject": "Abram",
                "text": "Abram cannot solve crises.",
                "fol": "\u00acp_11(Abram)",
                "str_fol": "\u00acsolves_crises(Abram)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 2,
                    "subject": "Abram",
                    "text": "Abram does not take action.",
                    "fol": "\u00acp_2(Abram)",
                    "str_fol": "\u00actakes_action(Abram)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 6,
                    "text": "Everyone makes decisions or takes action.",
                    "fol": "\u2200x (p_10(x) \u2228 p_2(x))",
                    "str_fol": "\u2200x (makes_decisions(x) \u2228 takes_action(x))"
                }
            ],
            "conclusion": {
                "id": 5,
                "subject": "Abram",
                "text": "Abram makes decisions.",
                "fol": "p_10(Abram)",
                "str_fol": "makes_decisions(Abram)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 1,
                    "subject": "Abram",
                    "text": "Abram seeks fame.",
                    "fol": "p_1(Abram)",
                    "str_fol": "seeks_fame(Abram)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "For any person, seeking fame and putting others first are distinct and separate pursuits.",
                    "fol": "\u2200x (p_1(x) \u2295 p_12(x))",
                    "str_fol": "\u2200x (seeks_fame(x) \u2295 put_others_first(x))"
                }
            ],
            "conclusion": {
                "id": 6,
                "subject": "Abram",
                "text": "Abram does not put others first.",
                "fol": "\u00acp_12(Abram)",
                "str_fol": "\u00acput_others_first(Abram)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 6,
                    "subject": "Abram",
                    "text": "Abram does not put others first.",
                    "fol": "\u00acp_12(Abram)",
                    "str_fol": "\u00acput_others_first(Abram)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "Everyone who earns recognition does not necessarily put others first, and everyone who puts others first does not necessarily earn recognition.",
                    "fol": "\u2200x (p_6(x) \u2295 p_12(x))",
                    "str_fol": "\u2200x (earn_recognition(x) \u2295 put_others_first(x))"
                }
            ],
            "conclusion": {
                "id": 7,
                "subject": "Abram",
                "text": "Abram earns recognition.",
                "fol": "p_6(Abram)",
                "str_fol": "earn_recognition(Abram)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 5,
                    "subject": "Abram",
                    "text": "Abram makes decisions.",
                    "fol": "p_10(Abram)",
                    "str_fol": "makes_decisions(Abram)",
                    "negation": false
                },
                {
                    "id": 4,
                    "subject": "Abram",
                    "text": "Abram cannot solve crises.",
                    "fol": "\u00acp_11(Abram)",
                    "str_fol": "\u00acsolves_crises(Abram)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "If someone is an expert leader and makes decisions, then they can solve crises.",
                    "fol": "\u2200x ((p_9(x) \u2227 p_10(x)) \u2192 p_11(x))",
                    "str_fol": "\u2200x ((expert_leader(x) \u2227 makes_decisions(x)) \u2192 solves_crises(x))"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Abram",
                "text": "Abram is not an expert leader.",
                "fol": "\u00acp_9(Abram)",
                "str_fol": "\u00acexpert_leader(Abram)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 0,
                    "subject": "Abram",
                    "text": "Abram is an emergency responder.",
                    "fol": "p_0(Abram)",
                    "str_fol": "emergency_responder(Abram)",
                    "negation": false
                },
                {
                    "id": 8,
                    "subject": "Abram",
                    "text": "Abram is not an expert leader.",
                    "fol": "\u00acp_9(Abram)",
                    "str_fol": "\u00acexpert_leader(Abram)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "If Abram is an emergency responder, then he is either a quick thinker or an expert leader, but not both.",
                    "fol": "p_0(Abram) \u2192 (p_7(Abram) \u2295 p_9(Abram))",
                    "str_fol": "emergency_responder(Abram) \u2192 (quick_thinker(Abram) \u2295 expert_leader(Abram))"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Abram",
                "text": "Abram is a quick thinker.",
                "fol": "p_7(Abram)",
                "str_fol": "quick_thinker(Abram)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 9,
                    "subject": "Abram",
                    "text": "Abram is a quick thinker.",
                    "fol": "p_7(Abram)",
                    "str_fol": "quick_thinker(Abram)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "If Abram is a quick thinker, then he stays calm and is brave.",
                    "fol": "p_7(Abram) \u2192 (p_8(Abram) \u2227 p_4(Abram))",
                    "str_fol": "quick_thinker(Abram) \u2192 (stay_calm(Abram) \u2227 brave(Abram))"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Abram",
                "text": "Abram is brave.",
                "fol": "p_4(Abram)",
                "str_fol": "brave(Abram)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 10,
                    "subject": "Abram",
                    "text": "Abram is brave.",
                    "fol": "p_4(Abram)",
                    "str_fol": "brave(Abram)",
                    "negation": false
                },
                {
                    "id": 7,
                    "subject": "Abram",
                    "text": "Abram earns recognition.",
                    "fol": "p_6(Abram)",
                    "str_fol": "earn_recognition(Abram)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "If Abram is brave, then he saves lives and earns recognition.",
                    "fol": "p_4(Abram) \u2192 (p_5(Abram) \u2227 p_6(Abram))",
                    "str_fol": "brave(Abram) \u2192 (save_lives(Abram) \u2227 earn_recognition(Abram))"
                }
            ],
            "conclusion": {
                "id": 11,
                "subject": "Abram",
                "text": "Abram saves lives.",
                "fol": "p_5(Abram)",
                "str_fol": "save_lives(Abram)",
                "negation": false
            }
        }
    ],
    "proof_trace": "1 (all x (p_11(x) | p_13(x) -> p_3(x))).  [assumption].\n2 (all x (p_10(x) | p_2(x))).  [assumption].\n5 (all x (p_9(x) & p_10(x) -> p_11(x))).  [assumption].\n6 p_0(Abram) -> -(p_7(Abram) <-> p_9(Abram)).  [assumption].\n7 p_7(Abram) -> p_8(Abram) & p_4(Abram).  [assumption].\n8 p_4(Abram) -> p_5(Abram) & p_6(Abram).  [assumption].\n9 p_5(Abram).  [goal].\n10 -p_11(x) | p_3(x).  [clausify(1)].\n11 -p_3(Abram).  [assumption].\n13 p_10(x) | p_2(x).  [clausify(2)].\n14 -p_2(Abram).  [assumption].\n18 -p_0(Abram) | p_7(Abram) | p_9(Abram).  [clausify(6)].\n19 p_0(Abram).  [assumption].\n24 p_7(Abram) | p_9(Abram).  [resolve(18,a,19,a)].\n25 -p_9(x) | -p_10(x) | p_11(x).  [clausify(5)].\n27 p_7(Abram) | -p_10(Abram) | p_11(Abram).  [resolve(24,b,25,a)].\n29 -p_7(Abram) | p_4(Abram).  [clausify(7)].\n30 -p_10(Abram) | p_11(Abram) | p_4(Abram).  [resolve(27,a,29,a)].\n31 -p_4(Abram) | p_5(Abram).  [clausify(8)].\n32 -p_10(Abram) | p_11(Abram) | p_5(Abram).  [resolve(30,c,31,a)].\n33 -p_5(Abram).  [deny(9)].\n35 -p_11(Abram).  [resolve(10,b,11,a)].\n36 -p_10(Abram) | p_11(Abram).  [resolve(32,c,33,a)].\n38 p_10(Abram).  [resolve(13,b,14,a)].\n39 -p_10(Abram).  [resolve(36,b,35,a)].\n40 $F.  [resolve(39,a,38,a)].",
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_3(Abram)\n\u00acp_2(Abram)\np_1(Abram)\np_0(Abram)\n\u2200x ((p_11(x) \u2192 p_3(x)) \u2227 (p_13(x) \u2192 p_3(x)))\n\u2200x (p_10(x) \u2228 p_2(x))\n\u2200x (p_1(x) \u2295 p_12(x))\n\u2200x (p_6(x) \u2295 p_12(x))\n\u2200x ((p_9(x) \u2227 p_10(x)) \u2192 p_11(x))\np_0(Abram) \u2192 (p_7(Abram) \u2295 p_9(Abram))\np_7(Abram) \u2192 (p_8(Abram) \u2227 p_4(Abram))\np_4(Abram) \u2192 (p_5(Abram) \u2227 p_6(Abram))\np_6(Abram)\n\u00acp_12(Abram)\n\u00acp_9(Abram)",
            "Initial Goal": "p_5(Abram)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_3(Abram)",
                    "-p_2(Abram)",
                    "p_1(Abram)",
                    "p_0(Abram)",
                    "all x ((p_11(x) -> p_3(x)) & (p_13(x) -> p_3(x)))",
                    "all x (p_10(x) | p_2(x))",
                    "all x (-(p_1(x) <-> p_12(x)))",
                    "all x (-(p_6(x) <-> p_12(x)))",
                    "all x ((p_9(x) & p_10(x)) -> p_11(x))",
                    "p_0(Abram) -> (-(p_7(Abram) <-> p_9(Abram)))",
                    "p_7(Abram) -> (p_8(Abram) & p_4(Abram))",
                    "p_4(Abram) -> (p_5(Abram) & p_6(Abram))",
                    "p_6(Abram)",
                    "-p_12(Abram)",
                    "-p_9(Abram)"
                ],
                "formulas(goals)": [
                    "p_5(Abram)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u2200x ((p_11(x) \u2228 p_13(x)) \u2192 p_3(x))"
                ],
                "added_facts": [
                    "p_6(Abram)",
                    "\u00acp_12(Abram)",
                    "\u00acp_9(Abram)"
                ],
                "added_rules": [
                    "\u2200x ((p_11(x) \u2192 p_3(x)) \u2227 (p_13(x) \u2192 p_3(x)))"
                ]
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_3(Abram)\n\u00acp_2(Abram)\np_1(Abram)\np_0(Abram)\n\u2200x ((p_11(x) \u2192 p_3(x)) \u2227 (p_13(x) \u2192 p_3(x)))\n\u2200x (p_10(x) \u2228 p_2(x))\n\u2200x (p_1(x) \u2295 p_12(x))\n\u2200x (p_6(x) \u2295 p_12(x))\n\u2200x ((p_9(x) \u2227 p_10(x)) \u2192 p_11(x))\np_0(Abram) \u2192 (p_7(Abram) \u2295 p_9(Abram))\np_7(Abram) \u2192 (p_8(Abram) \u2227 p_4(Abram))\np_4(Abram) \u2192 (p_5(Abram) \u2227 p_6(Abram))\np_6(Abram)\n\u00acp_12(Abram)\n\u00acp_9(Abram)\np_10(Abram)\n\u00acp_11(Abram)\n\u2200x (p_1(x) \u2194 p_6(x))",
            "Initial Goal": "p_5(Abram)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_3(Abram)",
                    "-p_2(Abram)",
                    "p_1(Abram)",
                    "p_0(Abram)",
                    "all x ((p_11(x) -> p_3(x)) & (p_13(x) -> p_3(x)))",
                    "all x (p_10(x) | p_2(x))",
                    "all x (-(p_1(x) <-> p_12(x)))",
                    "all x (-(p_6(x) <-> p_12(x)))",
                    "all x ((p_9(x) & p_10(x)) -> p_11(x))",
                    "p_0(Abram) -> (-(p_7(Abram) <-> p_9(Abram)))",
                    "p_7(Abram) -> (p_8(Abram) & p_4(Abram))",
                    "p_4(Abram) -> (p_5(Abram) & p_6(Abram))",
                    "p_6(Abram)",
                    "-p_12(Abram)",
                    "-p_9(Abram)",
                    "p_10(Abram)",
                    "-p_11(Abram)",
                    "all x (p_1(x) <-> p_6(x))"
                ],
                "formulas(goals)": [
                    "p_5(Abram)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_10(Abram)",
                    "\u00acp_11(Abram)"
                ],
                "added_rules": [
                    "\u2200x (p_1(x) \u2194 p_6(x))"
                ]
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_3(Abram)\n\u00acp_2(Abram)\np_1(Abram)\np_0(Abram)\n\u2200x (\u00acp_11(x) \u2228 p_3(x))\n\u2200x (\u00acp_13(x) \u2228 p_3(x))\n\u2200x (p_10(x) \u2228 p_2(x))\n\u2200x (p_1(x) \u2295 p_12(x))\n\u2200x (p_6(x) \u2295 p_12(x))\n\u2200x ((p_9(x) \u2227 p_10(x)) \u2192 p_11(x))\np_0(Abram) \u2192 (p_7(Abram) \u2295 p_9(Abram))\n\u00acp_7(Abram) \u2228 (p_8(Abram) \u2227 p_4(Abram))\n\u00acp_4(Abram) \u2228 (p_5(Abram) \u2227 p_6(Abram))\np_6(Abram)\n\u00acp_12(Abram)\n\u00acp_9(Abram)\np_10(Abram)\n\u00acp_11(Abram)\n\u2200x (p_1(x) \u2194 p_6(x))\np_4(Abram)\np_5(Abram)",
            "Initial Goal": "p_5(Abram)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_3(Abram)",
                    "-p_2(Abram)",
                    "p_1(Abram)",
                    "p_0(Abram)",
                    "all x (-p_11(x) | p_3(x))",
                    "all x (-p_13(x) | p_3(x))",
                    "all x (p_10(x) | p_2(x))",
                    "all x (-(p_1(x) <-> p_12(x)))",
                    "all x (-(p_6(x) <-> p_12(x)))",
                    "all x (-(p_9(x) & p_10(x)) | p_11(x))",
                    "p_0(Abram) -> (-(p_7(Abram) <-> p_9(Abram)))",
                    "-p_7(Abram) | (p_8(Abram) & p_4(Abram))",
                    "-p_4(Abram) | (p_5(Abram) & p_6(Abram))",
                    "p_6(Abram)",
                    "-p_12(Abram)",
                    "-p_9(Abram)",
                    "p_10(Abram)",
                    "-p_11(Abram)",
                    "all x (p_1(x) <-> p_6(x))",
                    "p_4(Abram)",
                    "p_5(Abram)"
                ],
                "formulas(goals)": [
                    "p_5(Abram)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u2200x ((p_11(x) \u2192 p_3(x)) \u2227 (p_13(x) \u2192 p_3(x)))"
                ],
                "added_facts": [
                    "p_4(Abram)",
                    "p_5(Abram)"
                ],
                "added_rules": [
                    "\u2200x (\u00acp_11(x) \u2228 p_3(x))",
                    "\u2200x (\u00acp_13(x) \u2228 p_3(x))"
                ]
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_3(Abram)\n\u00acp_2(Abram)\np_1(Abram)\np_0(Abram)\n\u2200x (\u00acp_11(x) \u2228 p_3(x))\n\u2200x (\u00acp_13(x) \u2228 p_3(x))\n\u2200x (p_10(x) \u2228 p_2(x))\n\u2200x \u00ac(p_1(x) \u2194 p_12(x))\n\u2200x \u00ac(p_6(x) \u2194 p_12(x))\n\u2200x ((p_9(x) \u2227 p_10(x)) \u2192 p_11(x))\np_0(Abram) \u2192 \u00ac(p_7(Abram) \u2194 p_9(Abram))\n\u00acp_7(Abram) \u2228 (p_8(Abram) \u2227 p_4(Abram))\n\u00acp_4(Abram) \u2228 (\u00acp_5(Abram) \u2227 p_6(Abram))\np_6(Abram)\n\u00acp_12(Abram)\n\u00acp_9(Abram)\np_10(Abram)\n\u00acp_11(Abram)\n\u2200x (p_1(x) \u2194 p_6(x))\np_4(Abram)",
            "Initial Goal": "p_5(Abram)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_3(Abram)",
                    "-p_2(Abram)",
                    "p_1(Abram)",
                    "p_0(Abram)",
                    "all x (-p_11(x) | p_3(x))",
                    "all x (-p_13(x) | p_3(x))",
                    "all x (p_10(x) | p_2(x))",
                    "all x (-(p_1(x) <-> p_12(x)))",
                    "all x (-(p_6(x) <-> p_12(x)))",
                    "all x ((p_9(x) & p_10(x)) -> p_11(x))",
                    "p_0(Abram) -> -(p_7(Abram) <-> p_9(Abram))",
                    "-p_7(Abram) | (p_8(Abram) & p_4(Abram))",
                    "-p_4(Abram) | (-p_5(Abram) & p_6(Abram))",
                    "p_6(Abram)",
                    "-p_12(Abram)",
                    "-p_9(Abram)",
                    "p_10(Abram)",
                    "-p_11(Abram)",
                    "all x (p_1(x) <-> p_6(x))",
                    "p_4(Abram)"
                ],
                "formulas(goals)": [
                    "-p_5(Abram)"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "p_5(Abram)"
                ],
                "removed_rules": [
                    "\u00acp_4(Abram) \u2228 (p_5(Abram) \u2227 p_6(Abram))"
                ],
                "added_facts": [],
                "added_rules": [
                    "\u00acp_4(Abram) \u2228 (\u00acp_5(Abram) \u2227 p_6(Abram))"
                ]
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_3(Abram)\n\u00acp_2(Abram)\np_1(Abram)\np_0(Abram)\n\u2200x (\u00acp_11(x) \u2228 p_3(x))\n\u2200x (\u00acp_13(x) \u2228 p_3(x))\n\u2200x (p_10(x) \u2228 p_2(x))\n\u2200x \u00ac(p_1(x) \u2194 p_12(x))\n\u2200x \u00ac(p_6(x) \u2194 p_12(x))\n\u2200x ((p_9(x) \u2227 p_10(x)) \u2192 p_11(x))\np_0(Abram) \u2192 \u00ac(p_7(Abram) \u2194 p_9(Abram))\n\u00acp_7(Abram) \u2228 (p_8(Abram) \u2227 p_4(Abram))\np_6(Abram)\n\u00acp_12(Abram)\n\u00acp_9(Abram)\np_10(Abram)\n\u00acp_11(Abram)\n\u2200x (p_1(x) \u2194 p_6(x))\np_4(Abram)\n\u00acp_4(Abram) \u2228 p_5(Abram)",
            "Initial Goal": "p_5(Abram)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "\u00acp_3(Abram)",
                    "\u00acp_2(Abram)",
                    "p_1(Abram)",
                    "p_0(Abram)",
                    "all x (\u00acp_11(x) | p_3(x))",
                    "all x (\u00acp_13(x) | p_3(x))",
                    "all x (p_10(x) | p_2(x))",
                    "all x \u00ac(p_1(x) <-> p_12(x))",
                    "all x \u00ac(p_6(x) <-> p_12(x))",
                    "all x ((p_9(x) & p_10(x)) -> p_11(x))",
                    "p_0(Abram) -> \u00ac(p_7(Abram) <-> p_9(Abram))",
                    "\u00acp_7(Abram) | (p_8(Abram) & p_4(Abram))",
                    "p_6(Abram)",
                    "\u00acp_12(Abram)",
                    "\u00acp_9(Abram)",
                    "p_10(Abram)",
                    "\u00acp_11(Abram)",
                    "all x (p_1(x) <-> p_6(x))",
                    "p_4(Abram)",
                    "\u00acp_4(Abram) | p_5(Abram)"
                ],
                "formulas(goals)": [
                    "p_5(Abram)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u00acp_4(Abram) \u2228 (\u00acp_5(Abram) \u2227 p_6(Abram))"
                ],
                "added_facts": [],
                "added_rules": [
                    "\u00acp_4(Abram) \u2228 p_5(Abram)"
                ]
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_3(Abram)\n\u00acp_2(Abram)\np_1(Abram)\np_0(Abram)\n\u2200x (\u00acp_11(x) \u2228 p_3(x))\n\u2200x (\u00acp_13(x) \u2228 p_3(x))\n\u2200x (p_10(x) \u2228 p_2(x))\n\u2200x \u00ac(p_1(x) \u2194 p_12(x))\n\u2200x \u00ac(p_6(x) \u2194 p_12(x))\n\u2200x ((p_9(x) \u2227 p_10(x)) \u2192 p_11(x))\np_0(Abram) \u2192 \u00ac(p_7(Abram) \u2194 p_9(Abram))\n\u00acp_7(Abram) \u2228 (p_8(Abram) \u2227 p_4(Abram))\np_6(Abram)\n\u00acp_12(Abram)\n\u00acp_9(Abram)\np_10(Abram)\n\u00acp_11(Abram)\n\u2200x (p_1(x) \u2194 p_6(x))\np_4(Abram)\n\u00acp_4(Abram) \u2228 p_5(Abram)\n\u2200x (\u00acp_2(x) \u2192 p_10(x))\n\u2200x (\u00acp_3(x) \u2192 \u00acp_13(x))\n\u2200x ((p_1(x) \u2228 p_12(x)) \u2227 (\u00acp_1(x) \u2228 \u00acp_12(x)))\n\u00acp_7(Abram) \u2228 p_8(Abram)",
            "Initial Goal": "p_5(Abram)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_3(Abram)",
                    "-p_2(Abram)",
                    "p_1(Abram)",
                    "p_0(Abram)",
                    "all x (-p_11(x) | p_3(x))",
                    "all x (-p_13(x) | p_3(x))",
                    "all x (p_10(x) | p_2(x))",
                    "all x (-(p_1(x) <-> p_12(x)))",
                    "all x (-(p_6(x) <-> p_12(x)))",
                    "all x ((p_9(x) & p_10(x)) -> p_11(x))",
                    "p_0(Abram) -> -(p_7(Abram) <-> p_9(Abram))",
                    "-p_7(Abram) | (p_8(Abram) & p_4(Abram))",
                    "p_6(Abram)",
                    "-p_12(Abram)",
                    "-p_9(Abram)",
                    "p_10(Abram)",
                    "-p_11(Abram)",
                    "all x (p_1(x) <-> p_6(x))",
                    "p_4(Abram)",
                    "-p_4(Abram) | p_5(Abram)",
                    "all x (-p_2(x) -> p_10(x))",
                    "all x (-p_3(x) -> -p_13(x))",
                    "all x ((p_1(x) | p_12(x)) & (-p_1(x) | -p_12(x)))",
                    "-p_7(Abram) | p_8(Abram)"
                ],
                "formulas(goals)": [
                    "p_5(Abram)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "\u2200x (\u00acp_2(x) \u2192 p_10(x))",
                    "\u2200x (\u00acp_3(x) \u2192 \u00acp_13(x))",
                    "\u2200x ((p_1(x) \u2228 p_12(x)) \u2227 (\u00acp_1(x) \u2228 \u00acp_12(x)))",
                    "\u00acp_7(Abram) \u2228 p_8(Abram)"
                ]
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_3(Abram)\n\u00acp_2(Abram)\np_1(Abram)\np_0(Abram)\n\u2200x (\u00acp_11(x) \u2228 p_3(x))\n\u2200x (\u00acp_13(x) \u2228 p_3(x))\n\u2200x (p_10(x) \u2228 p_2(x))\n\u2200x \u00ac(p_1(x) \u2194 p_12(x))\n\u2200x \u00ac(p_6(x) \u2194 p_12(x))\n\u2200x ((p_9(x) \u2227 p_10(x)) \u2192 p_11(x))\np_0(Abram) \u2192 \u00ac(p_7(Abram) \u2194 p_9(Abram))\n\u00acp_7(Abram) \u2228 (p_8(Abram) \u2227 p_4(Abram))\np_6(Abram)\n\u00acp_12(Abram)\n\u00acp_9(Abram)\np_10(Abram)\n\u00acp_11(Abram)\n\u2200x (p_1(x) \u2194 p_6(x))\np_4(Abram)\n\u00acp_4(Abram) \u2228 \u00acp_5(Abram)\n\u2200x (\u00acp_2(x) \u2192 p_10(x))\n\u2200x (\u00acp_3(x) \u2192 \u00acp_13(x))\n\u2200x ((p_1(x) \u2228 p_12(x)) \u2227 (\u00acp_1(x) \u2228 \u00acp_12(x)))\n\u00acp_7(Abram) \u2228 p_8(Abram)",
            "Initial Goal": "p_5(Abram)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "\u00acp_3(Abram)",
                    "\u00acp_2(Abram)",
                    "p_1(Abram)",
                    "p_0(Abram)",
                    "all x (\u00acp_11(x) | p_3(x))",
                    "all x (\u00acp_13(x) | p_3(x))",
                    "all x (p_10(x) | p_2(x))",
                    "all x \u00ac(p_1(x) <-> p_12(x))",
                    "all x \u00ac(p_6(x) <-> p_12(x))",
                    "all x ((p_9(x) & p_10(x)) -> p_11(x))",
                    "p_0(Abram) -> -(p_7(Abram) <-> p_9(Abram))",
                    "\u00acp_7(Abram) | (p_8(Abram) & p_4(Abram))",
                    "p_6(Abram)",
                    "\u00acp_12(Abram)",
                    "\u00acp_9(Abram)",
                    "p_10(Abram)",
                    "\u00acp_11(Abram)",
                    "all x (p_1(x) <-> p_6(x))",
                    "p_4(Abram)",
                    "\u00acp_4(Abram) | \u00acp_5(Abram)",
                    "all x (\u00acp_2(x) -> p_10(x))",
                    "all x (\u00acp_3(x) -> \u00acp_13(x))",
                    "all x ((p_1(x) | p_12(x)) & (\u00acp_1(x) | \u00acp_12(x)))",
                    "\u00acp_7(Abram) | p_8(Abram)"
                ],
                "formulas(goals)": [
                    "\u00acp_5(Abram)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u00acp_4(Abram) \u2228 p_5(Abram)"
                ],
                "added_facts": [],
                "added_rules": [
                    "\u00acp_4(Abram) \u2228 \u00acp_5(Abram)"
                ]
            }
        }
    ]
}