{
    "background_story": "Ronan, a young warrior, was born in the ancient kingdom of Macedon. He grew up under the rule of Philip II, father of Alexander the Great. Ronan was trained in the phalanx formation, a tactic that would become the hallmark of Macedonian warfare. He quickly proved himself to be a skilled and fearless fighter, earning the respect of his comrades. As Alexander's conquests expanded the empire, Ronan marched alongside him, battling through Persia and beyond. Though he was not of royal blood, Ronan's bravery and unwavering dedication to the Macedonian cause earned him a place among the elite companions of Alexander. His name became synonymous with valor and loyalty in the annals of Macedonian history.",
    "predicates": [
        {
            "id": 0,
            "name": "leave_legacy"
        },
        {
            "id": 1,
            "name": "face_adversity"
        },
        {
            "id": 2,
            "name": "demonstrate_honor"
        },
        {
            "id": 3,
            "name": "charge_forward"
        },
        {
            "id": 4,
            "name": "win_battles"
        },
        {
            "id": 5,
            "name": "achieve_glory"
        },
        {
            "id": 6,
            "name": "hold_power"
        },
        {
            "id": 7,
            "name": "fight_bravely"
        },
        {
            "id": 8,
            "name": "remain_loyal"
        },
        {
            "id": 9,
            "name": "earn_respect"
        },
        {
            "id": 10,
            "name": "lead_troops"
        },
        {
            "id": 11,
            "name": "gain_recognition"
        },
        {
            "id": 12,
            "name": "inspire_others"
        },
        {
            "id": 13,
            "name": "show_courage"
        },
        {
            "id": 14,
            "name": "become_legend"
        },
        {
            "id": 15,
            "name": "defend_king"
        },
        {
            "id": 16,
            "name": "uphold_oath"
        },
        {
            "id": 17,
            "name": "serve_country"
        },
        {
            "id": 18,
            "name": "excel_skills"
        },
        {
            "id": 19,
            "name": "mobilize_army"
        },
        {
            "id": 20,
            "name": "unify_people"
        },
        {
            "id": 21,
            "name": "lead_army"
        },
        {
            "id": 22,
            "name": "charge_into_battle"
        },
        {
            "id": 23,
            "name": "defend_comrades"
        },
        {
            "id": 24,
            "name": "unite_people"
        },
        {
            "id": 25,
            "name": "make_history"
        },
        {
            "id": 26,
            "name": "command_armies"
        },
        {
            "id": 27,
            "name": "march_forward"
        }
    ],
    "subject_name": "Ronan",
    "subject_category": "historical figure",
    "keyword": "macedon",
    "all_facts": [
        {
            "id": 0,
            "subject": "Ronan",
            "text": "Ronan does not leave a legacy.",
            "fol": "\u00acp_0(Ronan)",
            "str_fol": "\u00acleave_legacy(Ronan)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Ronan",
            "text": "Ronan faces adversity.",
            "fol": "p_1(Ronan)",
            "str_fol": "face_adversity(Ronan)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Ronan",
            "text": "Ronan does not demonstrate honor.",
            "fol": "\u00acp_2(Ronan)",
            "str_fol": "\u00acdemonstrate_honor(Ronan)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Ronan",
            "text": "Ronan does not charge forward.",
            "fol": "\u00acp_3(Ronan)",
            "str_fol": "\u00accharge_forward(Ronan)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Ronan",
            "text": "Ronan does not win battles.",
            "fol": "\u00acp_4(Ronan)",
            "str_fol": "\u00acwin_battles(Ronan)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Ronan",
            "text": "Ronan does not achieve glory.",
            "fol": "\u00acp_5(Ronan)",
            "str_fol": "\u00acachieve_glory(Ronan)",
            "negation": true
        },
        {
            "id": 6,
            "subject": "Ronan",
            "text": "Ronan does not hold power.",
            "fol": "\u00acp_6(Ronan)",
            "str_fol": "\u00achold_power(Ronan)",
            "negation": true
        },
        {
            "id": 7,
            "subject": "Ronan",
            "text": "Ronan does not lead troops.",
            "fol": "\u00acp_10(Ronan)",
            "str_fol": "\u00aclead_troops(Ronan)",
            "negation": true
        },
        {
            "id": 8,
            "subject": "Ronan",
            "text": "Ronan does not become a legend.",
            "fol": "\u00acp_14(Ronan)",
            "str_fol": "\u00acbecome_legend(Ronan)",
            "negation": true
        },
        {
            "id": 9,
            "subject": "Ronan",
            "text": "Ronan does not fight bravely.",
            "fol": "\u00acp_7(Ronan)",
            "str_fol": "\u00acfight_bravely(Ronan)",
            "negation": true
        },
        {
            "id": 10,
            "subject": "Ronan",
            "text": "Ronan shows courage.",
            "fol": "p_13(Ronan)",
            "str_fol": "show_courage(Ronan)",
            "negation": false
        },
        {
            "id": 11,
            "subject": "Ronan",
            "text": "Ronan does not inspire others.",
            "fol": "\u00acp_12(Ronan)",
            "str_fol": "\u00acinspire_others(Ronan)",
            "negation": true
        },
        {
            "id": 12,
            "subject": "Ronan",
            "text": "Ronan does not gain recognition.",
            "fol": "\u00acp_11(Ronan)",
            "str_fol": "\u00acgain_recognition(Ronan)",
            "negation": true
        },
        {
            "id": 13,
            "subject": "Ronan",
            "text": "Ronan does not remain loyal.",
            "fol": "\u00acp_8(Ronan)",
            "str_fol": "\u00acremain_loyal(Ronan)",
            "negation": true
        },
        {
            "id": 14,
            "subject": "Ronan",
            "text": "Ronan does not earn respect.",
            "fol": "\u00acp_9(Ronan)",
            "str_fol": "\u00acearn_respect(Ronan)",
            "negation": true
        }
    ],
    "context_facts": [
        {
            "id": 6,
            "subject": "Ronan",
            "text": "Ronan does not hold power.",
            "fol": "\u00acp_6(Ronan)",
            "str_fol": "\u00achold_power(Ronan)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Ronan",
            "text": "Ronan does not achieve glory.",
            "fol": "\u00acp_5(Ronan)",
            "str_fol": "\u00acachieve_glory(Ronan)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Ronan",
            "text": "Ronan does not charge forward.",
            "fol": "\u00acp_3(Ronan)",
            "str_fol": "\u00accharge_forward(Ronan)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Ronan",
            "text": "Ronan does not win battles.",
            "fol": "\u00acp_4(Ronan)",
            "str_fol": "\u00acwin_battles(Ronan)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Ronan",
            "text": "Ronan faces adversity.",
            "fol": "p_1(Ronan)",
            "str_fol": "face_adversity(Ronan)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Ronan",
            "text": "Ronan does not demonstrate honor.",
            "fol": "\u00acp_2(Ronan)",
            "str_fol": "\u00acdemonstrate_honor(Ronan)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Ronan",
            "text": "Ronan does not leave a legacy.",
            "fol": "\u00acp_0(Ronan)",
            "str_fol": "\u00acleave_legacy(Ronan)",
            "negation": true
        }
    ],
    "context_rules": [
        {
            "id": 7,
            "text": "All historical figures who lead troops hold power.",
            "fol": "\u2200x (p_10(x) \u2192 p_6(x))",
            "str_fol": "\u2200x (lead_troops(x) \u2192 hold_power(x))"
        },
        {
            "id": 6,
            "text": "All legends achieve glory.",
            "fol": "\u2200x (p_14(x) \u2192 p_5(x))",
            "str_fol": "\u2200x (become_legend(x) \u2192 achieve_glory(x))"
        },
        {
            "id": 5,
            "text": "If Ronan either charges forward or fights bravely (but not both), then he wins battles.",
            "fol": "(p_3(Ronan) \u2295 p_7(Ronan)) \u2192 p_4(Ronan)",
            "str_fol": "(charge_forward(Ronan) \u2295 fight_bravely(Ronan)) \u2192 win_battles(Ronan)"
        },
        {
            "id": 4,
            "text": "If Ronan faces adversity, then he either shows courage or demonstrates honor, but not both.",
            "fol": "p_1(Ronan) \u2192 (p_13(Ronan) \u2295 p_2(Ronan))",
            "str_fol": "face_adversity(Ronan) \u2192 (show_courage(Ronan) \u2295 demonstrate_honor(Ronan))"
        },
        {
            "id": 3,
            "text": "If Ronan shows courage and inspires others, then he will become a legend.",
            "fol": "(p_13(Ronan) \u2227 p_12(Ronan)) \u2192 p_14(Ronan)",
            "str_fol": "(show_courage(Ronan) \u2227 inspire_others(Ronan)) \u2192 become_legend(Ronan)"
        },
        {
            "id": 2,
            "text": "Any historical figure who gains recognition or inspires others will leave a legacy.",
            "fol": "\u2200x ((p_11(x) \u2228 p_12(x)) \u2192 p_0(x))",
            "str_fol": "\u2200x ((gain_recognition(x) \u2228 inspire_others(x)) \u2192 leave_legacy(x))"
        },
        {
            "id": 1,
            "text": "If Ronan either leads troops or remains loyal (but not both), then he gains recognition.",
            "fol": "(p_10(Ronan) \u2295 p_8(Ronan)) \u2192 p_11(Ronan)",
            "str_fol": "(lead_troops(Ronan) \u2295 remain_loyal(Ronan)) \u2192 gain_recognition(Ronan)"
        },
        {
            "id": 0,
            "text": "For all historical figures, if they fight bravely and remain loyal, then they earn respect.",
            "fol": "\u2200x ((p_7(x) \u2227 p_8(x)) \u2192 p_9(x))",
            "str_fol": "\u2200x ((fight_bravely(x) \u2227 remain_loyal(x)) \u2192 earn_respect(x))"
        }
    ],
    "context": [
        {
            "id": 6,
            "subject": "Ronan",
            "text": "Ronan does not hold power.",
            "fol": "\u00acp_6(Ronan)",
            "str_fol": "\u00achold_power(Ronan)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Ronan",
            "text": "Ronan does not achieve glory.",
            "fol": "\u00acp_5(Ronan)",
            "str_fol": "\u00acachieve_glory(Ronan)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Ronan",
            "text": "Ronan does not charge forward.",
            "fol": "\u00acp_3(Ronan)",
            "str_fol": "\u00accharge_forward(Ronan)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Ronan",
            "text": "Ronan does not win battles.",
            "fol": "\u00acp_4(Ronan)",
            "str_fol": "\u00acwin_battles(Ronan)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Ronan",
            "text": "Ronan faces adversity.",
            "fol": "p_1(Ronan)",
            "str_fol": "face_adversity(Ronan)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Ronan",
            "text": "Ronan does not demonstrate honor.",
            "fol": "\u00acp_2(Ronan)",
            "str_fol": "\u00acdemonstrate_honor(Ronan)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Ronan",
            "text": "Ronan does not leave a legacy.",
            "fol": "\u00acp_0(Ronan)",
            "str_fol": "\u00acleave_legacy(Ronan)",
            "negation": true
        },
        {
            "id": 7,
            "text": "All historical figures who lead troops hold power.",
            "fol": "\u2200x (p_10(x) \u2192 p_6(x))",
            "str_fol": "\u2200x (lead_troops(x) \u2192 hold_power(x))"
        },
        {
            "id": 6,
            "text": "All legends achieve glory.",
            "fol": "\u2200x (p_14(x) \u2192 p_5(x))",
            "str_fol": "\u2200x (become_legend(x) \u2192 achieve_glory(x))"
        },
        {
            "id": 5,
            "text": "If Ronan either charges forward or fights bravely (but not both), then he wins battles.",
            "fol": "(p_3(Ronan) \u2295 p_7(Ronan)) \u2192 p_4(Ronan)",
            "str_fol": "(charge_forward(Ronan) \u2295 fight_bravely(Ronan)) \u2192 win_battles(Ronan)"
        },
        {
            "id": 4,
            "text": "If Ronan faces adversity, then he either shows courage or demonstrates honor, but not both.",
            "fol": "p_1(Ronan) \u2192 (p_13(Ronan) \u2295 p_2(Ronan))",
            "str_fol": "face_adversity(Ronan) \u2192 (show_courage(Ronan) \u2295 demonstrate_honor(Ronan))"
        },
        {
            "id": 3,
            "text": "If Ronan shows courage and inspires others, then he will become a legend.",
            "fol": "(p_13(Ronan) \u2227 p_12(Ronan)) \u2192 p_14(Ronan)",
            "str_fol": "(show_courage(Ronan) \u2227 inspire_others(Ronan)) \u2192 become_legend(Ronan)"
        },
        {
            "id": 2,
            "text": "Any historical figure who gains recognition or inspires others will leave a legacy.",
            "fol": "\u2200x ((p_11(x) \u2228 p_12(x)) \u2192 p_0(x))",
            "str_fol": "\u2200x ((gain_recognition(x) \u2228 inspire_others(x)) \u2192 leave_legacy(x))"
        },
        {
            "id": 1,
            "text": "If Ronan either leads troops or remains loyal (but not both), then he gains recognition.",
            "fol": "(p_10(Ronan) \u2295 p_8(Ronan)) \u2192 p_11(Ronan)",
            "str_fol": "(lead_troops(Ronan) \u2295 remain_loyal(Ronan)) \u2192 gain_recognition(Ronan)"
        },
        {
            "id": 0,
            "text": "For all historical figures, if they fight bravely and remain loyal, then they earn respect.",
            "fol": "\u2200x ((p_7(x) \u2227 p_8(x)) \u2192 p_9(x))",
            "str_fol": "\u2200x ((fight_bravely(x) \u2227 remain_loyal(x)) \u2192 earn_respect(x))"
        }
    ],
    "context_fol": "\u00acp_6(Ronan)\n\u00acp_5(Ronan)\n\u00acp_3(Ronan)\n\u00acp_4(Ronan)\np_1(Ronan)\n\u00acp_2(Ronan)\n\u00acp_0(Ronan)\n\u2200x (p_10(x) \u2192 p_6(x))\n\u2200x (p_14(x) \u2192 p_5(x))\n(p_3(Ronan) \u2295 p_7(Ronan)) \u2192 p_4(Ronan)\np_1(Ronan) \u2192 (p_13(Ronan) \u2295 p_2(Ronan))\n(p_13(Ronan) \u2227 p_12(Ronan)) \u2192 p_14(Ronan)\n\u2200x ((p_11(x) \u2228 p_12(x)) \u2192 p_0(x))\n(p_10(Ronan) \u2295 p_8(Ronan)) \u2192 p_11(Ronan)\n\u2200x ((p_7(x) \u2227 p_8(x)) \u2192 p_9(x))",
    "conclusion": {
        "id": 14,
        "subject": "Ronan",
        "text": "Ronan does not earn respect.",
        "fol": "\u00acp_9(Ronan)",
        "str_fol": "\u00acearn_respect(Ronan)",
        "negation": true
    },
    "initial_answer": "Uncertain",
    "initial_goal": "\u00acp_9(Ronan)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 6,
                    "subject": "Ronan",
                    "text": "Ronan does not hold power.",
                    "fol": "\u00acp_6(Ronan)",
                    "str_fol": "\u00achold_power(Ronan)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 7,
                    "text": "All historical figures who lead troops hold power.",
                    "fol": "\u2200x (p_10(x) \u2192 p_6(x))",
                    "str_fol": "\u2200x (lead_troops(x) \u2192 hold_power(x))"
                }
            ],
            "conclusion": {
                "id": 7,
                "subject": "Ronan",
                "text": "Ronan does not lead troops.",
                "fol": "\u00acp_10(Ronan)",
                "str_fol": "\u00aclead_troops(Ronan)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 5,
                    "subject": "Ronan",
                    "text": "Ronan does not achieve glory.",
                    "fol": "\u00acp_5(Ronan)",
                    "str_fol": "\u00acachieve_glory(Ronan)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 6,
                    "text": "All legends achieve glory.",
                    "fol": "\u2200x (p_14(x) \u2192 p_5(x))",
                    "str_fol": "\u2200x (become_legend(x) \u2192 achieve_glory(x))"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Ronan",
                "text": "Ronan does not become a legend.",
                "fol": "\u00acp_14(Ronan)",
                "str_fol": "\u00acbecome_legend(Ronan)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 3,
                    "subject": "Ronan",
                    "text": "Ronan does not charge forward.",
                    "fol": "\u00acp_3(Ronan)",
                    "str_fol": "\u00accharge_forward(Ronan)",
                    "negation": true
                },
                {
                    "id": 4,
                    "subject": "Ronan",
                    "text": "Ronan does not win battles.",
                    "fol": "\u00acp_4(Ronan)",
                    "str_fol": "\u00acwin_battles(Ronan)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "If Ronan either charges forward or fights bravely (but not both), then he wins battles.",
                    "fol": "(p_3(Ronan) \u2295 p_7(Ronan)) \u2192 p_4(Ronan)",
                    "str_fol": "(charge_forward(Ronan) \u2295 fight_bravely(Ronan)) \u2192 win_battles(Ronan)"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Ronan",
                "text": "Ronan does not fight bravely.",
                "fol": "\u00acp_7(Ronan)",
                "str_fol": "\u00acfight_bravely(Ronan)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 1,
                    "subject": "Ronan",
                    "text": "Ronan faces adversity.",
                    "fol": "p_1(Ronan)",
                    "str_fol": "face_adversity(Ronan)",
                    "negation": false
                },
                {
                    "id": 2,
                    "subject": "Ronan",
                    "text": "Ronan does not demonstrate honor.",
                    "fol": "\u00acp_2(Ronan)",
                    "str_fol": "\u00acdemonstrate_honor(Ronan)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "If Ronan faces adversity, then he either shows courage or demonstrates honor, but not both.",
                    "fol": "p_1(Ronan) \u2192 (p_13(Ronan) \u2295 p_2(Ronan))",
                    "str_fol": "face_adversity(Ronan) \u2192 (show_courage(Ronan) \u2295 demonstrate_honor(Ronan))"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Ronan",
                "text": "Ronan shows courage.",
                "fol": "p_13(Ronan)",
                "str_fol": "show_courage(Ronan)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 10,
                    "subject": "Ronan",
                    "text": "Ronan shows courage.",
                    "fol": "p_13(Ronan)",
                    "str_fol": "show_courage(Ronan)",
                    "negation": false
                },
                {
                    "id": 8,
                    "subject": "Ronan",
                    "text": "Ronan does not become a legend.",
                    "fol": "\u00acp_14(Ronan)",
                    "str_fol": "\u00acbecome_legend(Ronan)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "If Ronan shows courage and inspires others, then he will become a legend.",
                    "fol": "(p_13(Ronan) \u2227 p_12(Ronan)) \u2192 p_14(Ronan)",
                    "str_fol": "(show_courage(Ronan) \u2227 inspire_others(Ronan)) \u2192 become_legend(Ronan)"
                }
            ],
            "conclusion": {
                "id": 11,
                "subject": "Ronan",
                "text": "Ronan does not inspire others.",
                "fol": "\u00acp_12(Ronan)",
                "str_fol": "\u00acinspire_others(Ronan)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 11,
                    "subject": "Ronan",
                    "text": "Ronan does not inspire others.",
                    "fol": "\u00acp_12(Ronan)",
                    "str_fol": "\u00acinspire_others(Ronan)",
                    "negation": true
                },
                {
                    "id": 0,
                    "subject": "Ronan",
                    "text": "Ronan does not leave a legacy.",
                    "fol": "\u00acp_0(Ronan)",
                    "str_fol": "\u00acleave_legacy(Ronan)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "Any historical figure who gains recognition or inspires others will leave a legacy.",
                    "fol": "\u2200x ((p_11(x) \u2228 p_12(x)) \u2192 p_0(x))",
                    "str_fol": "\u2200x ((gain_recognition(x) \u2228 inspire_others(x)) \u2192 leave_legacy(x))"
                }
            ],
            "conclusion": {
                "id": 12,
                "subject": "Ronan",
                "text": "Ronan does not gain recognition.",
                "fol": "\u00acp_11(Ronan)",
                "str_fol": "\u00acgain_recognition(Ronan)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 7,
                    "subject": "Ronan",
                    "text": "Ronan does not lead troops.",
                    "fol": "\u00acp_10(Ronan)",
                    "str_fol": "\u00aclead_troops(Ronan)",
                    "negation": true
                },
                {
                    "id": 12,
                    "subject": "Ronan",
                    "text": "Ronan does not gain recognition.",
                    "fol": "\u00acp_11(Ronan)",
                    "str_fol": "\u00acgain_recognition(Ronan)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "If Ronan either leads troops or remains loyal (but not both), then he gains recognition.",
                    "fol": "(p_10(Ronan) \u2295 p_8(Ronan)) \u2192 p_11(Ronan)",
                    "str_fol": "(lead_troops(Ronan) \u2295 remain_loyal(Ronan)) \u2192 gain_recognition(Ronan)"
                }
            ],
            "conclusion": {
                "id": 13,
                "subject": "Ronan",
                "text": "Ronan does not remain loyal.",
                "fol": "\u00acp_8(Ronan)",
                "str_fol": "\u00acremain_loyal(Ronan)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 9,
                    "subject": "Ronan",
                    "text": "Ronan does not fight bravely.",
                    "fol": "\u00acp_7(Ronan)",
                    "str_fol": "\u00acfight_bravely(Ronan)",
                    "negation": true
                },
                {
                    "id": 13,
                    "subject": "Ronan",
                    "text": "Ronan does not remain loyal.",
                    "fol": "\u00acp_8(Ronan)",
                    "str_fol": "\u00acremain_loyal(Ronan)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "For all historical figures, if they fight bravely and remain loyal, then they earn respect.",
                    "fol": "\u2200x ((p_7(x) \u2227 p_8(x)) \u2192 p_9(x))",
                    "str_fol": "\u2200x ((fight_bravely(x) \u2227 remain_loyal(x)) \u2192 earn_respect(x))"
                }
            ],
            "conclusion": null
        }
    ],
    "proof_trace": null,
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "UNCERTAIN",
            "Edited Assumptions": "\u00acp_6(Ronan)\n\u00acp_5(Ronan)\n\u00acp_3(Ronan)\n\u00acp_4(Ronan)\np_1(Ronan)\n\u00acp_2(Ronan)\n\u00acp_0(Ronan)\n\u2200x (p_10(x) \u2192 p_6(x))\n\u2200x (p_14(x) \u2192 p_5(x))\n(p_3(Ronan) \u2295 p_7(Ronan)) \u2192 p_4(Ronan)\np_1(Ronan) \u2192 (p_13(Ronan) \u2295 p_2(Ronan))\n(p_13(Ronan) \u2227 p_12(Ronan)) \u2192 p_14(Ronan)\n\u2200x ((p_11(x) \u2228 p_12(x)) \u2192 p_0(x))\n(p_10(Ronan) \u2295 p_8(Ronan)) \u2192 p_11(Ronan)\n\u2200x ((p_7(x) \u2227 p_8(x)) \u2192 p_9(x))",
            "Initial Goal": "\u00acp_9(Ronan)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "- p_6(Ronan).",
                    "- p_5(Ronan).",
                    "- p_3(Ronan).",
                    "- p_4(Ronan).",
                    "p_1(Ronan).",
                    "- p_2(Ronan).",
                    "- p_0(Ronan).",
                    "all x (p_10(x) -> p_6(x)).",
                    "all x (p_14(x) -> p_5(x)).",
                    "(-(p_3(Ronan) <-> p_7(Ronan))) -> p_4(Ronan).",
                    "p_1(Ronan) -> (-(p_13(Ronan) <-> p_2(Ronan))).",
                    "(p_13(Ronan) & p_12(Ronan)) -> p_14(Ronan).",
                    "all x ((p_11(x) | p_12(x)) -> p_0(x)).",
                    "(-(p_10(Ronan) <-> p_8(Ronan))) -> p_11(Ronan).",
                    "all x ((p_7(x) & p_8(x)) -> p_9(x)).",
                    "- p_7(Ronan).",
                    "- p_7(Ronan) -> - p_9(Ronan)."
                ],
                "formulas(goals)": [
                    "- p_9(Ronan)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "\u00acp_7(Ronan)"
                ],
                "added_rules": [
                    "\u00acp_7(Ronan) \u2192 \u00acp_9(Ronan)"
                ]
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_6(Ronan)\n\u00acp_5(Ronan)\n\u00acp_3(Ronan)\n\u00acp_4(Ronan)\np_1(Ronan)\n\u00acp_2(Ronan)\n\u00acp_0(Ronan)\n\u2200x (p_10(x) \u2192 p_6(x))\n\u2200x (p_14(x) \u2192 p_5(x))\n(p_3(Ronan) \u2295 p_7(Ronan)) \u2192 p_4(Ronan)\np_1(Ronan) \u2192 (p_13(Ronan) \u2295 p_2(Ronan))\n(p_13(Ronan) \u2227 p_12(Ronan)) \u2192 p_14(Ronan)\n\u2200x ((p_11(x) \u2228 p_12(x)) \u2192 p_0(x))\n(p_10(Ronan) \u2295 p_8(Ronan)) \u2192 p_11(Ronan)\n\u2200x ((p_7(x) \u2227 p_8(x)) \u2192 p_9(x))\np_13(Ronan) \u2192 p_9(Ronan)",
            "Initial Goal": "\u00acp_9(Ronan)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_6(Ronan)",
                    "-p_5(Ronan)",
                    "-p_3(Ronan)",
                    "-p_4(Ronan)",
                    "p_1(Ronan)",
                    "-p_2(Ronan)",
                    "-p_0(Ronan)",
                    "all x (p_10(x) -> p_6(x))",
                    "all x (p_14(x) -> p_5(x))",
                    "(-(p_3(Ronan) <-> p_7(Ronan))) -> p_4(Ronan)",
                    "p_1(Ronan) -> (-(p_13(Ronan) <-> p_2(Ronan)))",
                    "(p_13(Ronan) & p_12(Ronan)) -> p_14(Ronan)",
                    "all x ((p_11(x) | p_12(x)) -> p_0(x))",
                    "(-(p_10(Ronan) <-> p_8(Ronan))) -> p_11(Ronan)",
                    "all x ((p_7(x) & p_8(x)) -> p_9(x))",
                    "p_13(Ronan) -> p_9(Ronan)"
                ],
                "formulas(goals)": [
                    "--p_9(Ronan)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "p_13(Ronan) \u2192 p_9(Ronan)"
                ]
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_6(Ronan)\n\u00acp_5(Ronan)\n\u00acp_3(Ronan)\n\u00acp_4(Ronan)\np_1(Ronan)\n\u00acp_2(Ronan)\n\u00acp_0(Ronan)\n\u2200x (p_10(x) \u2192 p_6(x))\n\u2200x (p_14(x) \u2192 p_5(x))\n(p_3(Ronan) \u2295 p_7(Ronan)) \u2192 p_4(Ronan)\n(p_13(Ronan) \u2227 p_12(Ronan)) \u2192 p_14(Ronan)\n\u2200x ((p_11(x) \u2228 p_12(x)) \u2192 p_0(x))\n(p_10(Ronan) \u2295 p_8(Ronan)) \u2192 p_11(Ronan)\n\u2200x ((p_7(x) \u2227 p_8(x)) \u2192 p_9(x))\n\u00acp_7(Ronan) \u2192 \u00acp_9(Ronan)",
            "Initial Goal": "\u00acp_9(Ronan)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_6(Ronan)",
                    "-p_5(Ronan)",
                    "-p_3(Ronan)",
                    "-p_4(Ronan)",
                    "p_1(Ronan)",
                    "-p_2(Ronan)",
                    "-p_0(Ronan)",
                    "all x (p_10(x) -> p_6(x))",
                    "all x (p_14(x) -> p_5(x))",
                    "(-(p_3(Ronan) <-> p_7(Ronan))) -> p_4(Ronan)",
                    "(p_13(Ronan) & p_12(Ronan)) -> p_14(Ronan)",
                    "all x ((p_11(x) | p_12(x)) -> p_0(x))",
                    "(-(p_10(Ronan) <-> p_8(Ronan))) -> p_11(Ronan)",
                    "all x ((p_7(x) & p_8(x)) -> p_9(x))",
                    "-p_7(Ronan) -> -p_9(Ronan)"
                ],
                "formulas(goals)": [
                    "-p_9(Ronan)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_1(Ronan) \u2192 (p_13(Ronan) \u2295 p_2(Ronan))",
                    "p_13(Ronan) \u2192 p_9(Ronan)"
                ],
                "added_facts": [],
                "added_rules": [
                    "\u00acp_7(Ronan) \u2192 \u00acp_9(Ronan)"
                ]
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_6(Ronan)\n\u00acp_5(Ronan)\n\u00acp_3(Ronan)\n\u00acp_4(Ronan)\np_1(Ronan)\n\u00acp_2(Ronan)\n\u00acp_0(Ronan)\n\u2200x (p_10(x) \u2192 p_6(x))\n\u2200x (p_14(x) \u2192 p_5(x))\n((p_3(Ronan) \u2228 p_7(Ronan)) \u2227 \u00ac(p_3(Ronan) \u2227 p_7(Ronan))) \u2192 p_4(Ronan)\n(p_13(Ronan) \u2227 p_12(Ronan)) \u2192 p_14(Ronan)\n\u2200x ((p_11(x) \u2228 p_12(x)) \u2192 p_0(x))\n(p_10(Ronan) \u2295 p_8(Ronan)) \u2192 p_11(Ronan)\n\u2200x ((p_7(x) \u2227 p_8(x)) \u2192 p_9(x))\np_9(Ronan) \u2192 p_7(Ronan)\n\u00acp_7(Ronan)",
            "Initial Goal": "\u00acp_9(Ronan)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_6(Ronan)",
                    "-p_5(Ronan)",
                    "-p_3(Ronan)",
                    "-p_4(Ronan)",
                    "p_1(Ronan)",
                    "-p_2(Ronan)",
                    "-p_0(Ronan)",
                    "all x (p_10(x) -> p_6(x))",
                    "all x (p_14(x) -> p_5(x))",
                    "((p_3(Ronan) | p_7(Ronan)) & (-(p_3(Ronan) & p_7(Ronan)))) -> p_4(Ronan)",
                    "(p_13(Ronan) & p_12(Ronan)) -> p_14(Ronan)",
                    "all x ((p_11(x) | p_12(x)) -> p_0(x))",
                    "(-(p_10(Ronan) <-> p_8(Ronan))) -> p_11(Ronan)",
                    "all x ((p_7(x) & p_8(x)) -> p_9(x))",
                    "p_9(Ronan) -> p_7(Ronan)",
                    "-p_7(Ronan)"
                ],
                "formulas(goals)": [
                    "-p_9(Ronan)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "(p_3(Ronan) \u2295 p_7(Ronan)) \u2192 p_4(Ronan)",
                    "\u00acp_7(Ronan) \u2192 \u00acp_9(Ronan)"
                ],
                "added_facts": [
                    "\u00acp_7(Ronan)"
                ],
                "added_rules": [
                    "((p_3(Ronan) \u2228 p_7(Ronan)) \u2227 \u00ac(p_3(Ronan) \u2227 p_7(Ronan))) \u2192 p_4(Ronan)",
                    "p_9(Ronan) \u2192 p_7(Ronan)"
                ]
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_9(Ronan)",
            "Initial Goal": "\u00acp_9(Ronan)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_9(Ronan)"
                ],
                "formulas(goals)": [
                    "p_9(Ronan)"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "\u00acp_7(Ronan)"
                ],
                "removed_rules": [
                    "p_9(Ronan) \u2192 p_7(Ronan)"
                ],
                "added_facts": [
                    "p_9(Ronan)"
                ],
                "added_rules": []
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_9(Ronan)",
            "Initial Goal": "\u00acp_9(Ronan)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_9(Ronan)"
                ],
                "formulas(goals)": [
                    "-p_9(Ronan)"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "p_9(Ronan)"
                ],
                "removed_rules": [],
                "added_facts": [
                    "\u00acp_9(Ronan)"
                ],
                "added_rules": []
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_9(Ronan) \u2192 p_9(Ronan)",
            "Initial Goal": "\u00acp_9(Ronan)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_9(Ronan) -> p_9(Ronan)"
                ],
                "formulas(goals)": [
                    "--p_9(Ronan)"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "\u00acp_9(Ronan)"
                ],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "\u00acp_9(Ronan) \u2192 p_9(Ronan)"
                ]
            }
        }
    ]
}