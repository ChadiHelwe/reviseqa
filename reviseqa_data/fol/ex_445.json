{
    "background_story": "Soren was a master woodworker known for crafting exquisite furniture with precision and care. He skillfully manipulated wood, bringing out the hidden beauty in every grain and knot. With years of practice, Soren developed a keen eye for design and a deep understanding of the material he worked with. His workshop was a testament to his dedication, filled with half-finished projects and the sweet scent of sawdust. Soren's skillful hands moved deftly, shaping and sanding each piece into a work of art. From intricate clockwork mechanisms to elegant dining tables, every item that left his workshop was a reflection of his skill and passion. Soren's craft was not just about creating functional pieces, but about telling stories through the wood, skillfully weaving tales of tradition, innovation, and beauty.",
    "predicates": [
        {
            "id": 0,
            "name": "creates_beauty"
        },
        {
            "id": 1,
            "name": "is_dedicated"
        },
        {
            "id": 2,
            "name": "is_experienced"
        },
        {
            "id": 3,
            "name": "is_artistic"
        },
        {
            "id": 4,
            "name": "is_imaginative"
        },
        {
            "id": 5,
            "name": "has_patience"
        },
        {
            "id": 6,
            "name": "learns_quickly"
        },
        {
            "id": 7,
            "name": "master_craftsman"
        },
        {
            "id": 8,
            "name": "attentive_to_detail"
        },
        {
            "id": 9,
            "name": "produces_quality_work"
        },
        {
            "id": 10,
            "name": "works_precisely"
        },
        {
            "id": 11,
            "name": "is_innovative"
        },
        {
            "id": 12,
            "name": "has_passion"
        },
        {
            "id": 13,
            "name": "tells_stories"
        },
        {
            "id": 14,
            "name": "is_skilled"
        },
        {
            "id": 15,
            "name": "has_creativity"
        },
        {
            "id": 16,
            "name": "works_hard"
        },
        {
            "id": 17,
            "name": "thinks_outside_box"
        },
        {
            "id": 18,
            "name": "enjoys_challenge"
        },
        {
            "id": 19,
            "name": "values_tradition"
        },
        {
            "id": 20,
            "name": "uses_tools"
        },
        {
            "id": 21,
            "name": "follows_plans"
        },
        {
            "id": 22,
            "name": "makes_furniture"
        },
        {
            "id": 23,
            "name": "enjoys_challenges"
        },
        {
            "id": 24,
            "name": "solves_problems"
        }
    ],
    "subject_name": "Soren",
    "subject_category": "human",
    "keyword": "skillfully",
    "all_facts": [
        {
            "id": 0,
            "subject": "Soren",
            "text": "Soren does not create beauty.",
            "fol": "\u00acp_0(Soren)",
            "str_fol": "\u00accreates_beauty(Soren)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Soren",
            "text": "Soren is dedicated.",
            "fol": "p_1(Soren)",
            "str_fol": "is_dedicated(Soren)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Soren",
            "text": "Soren is experienced.",
            "fol": "p_2(Soren)",
            "str_fol": "is_experienced(Soren)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Soren",
            "text": "Soren is artistic.",
            "fol": "p_3(Soren)",
            "str_fol": "is_artistic(Soren)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Soren",
            "text": "Soren is not imaginative.",
            "fol": "\u00acp_4(Soren)",
            "str_fol": "\u00acis_imaginative(Soren)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Soren",
            "text": "Soren has patience.",
            "fol": "p_5(Soren)",
            "str_fol": "has_patience(Soren)",
            "negation": false
        },
        {
            "id": 6,
            "subject": "Soren",
            "text": "Soren does not learn quickly.",
            "fol": "\u00acp_6(Soren)",
            "str_fol": "\u00aclearns_quickly(Soren)",
            "negation": true
        },
        {
            "id": 7,
            "subject": "Soren",
            "text": "Soren is skilled.",
            "fol": "p_14(Soren)",
            "str_fol": "is_skilled(Soren)",
            "negation": false
        },
        {
            "id": 8,
            "subject": "Soren",
            "text": "Soren has creativity.",
            "fol": "p_15(Soren)",
            "str_fol": "has_creativity(Soren)",
            "negation": false
        },
        {
            "id": 9,
            "subject": "Soren",
            "text": "Soren does not tell stories through his craft.",
            "fol": "\u00acp_13(Soren)",
            "str_fol": "\u00actells_stories(Soren)",
            "negation": true
        },
        {
            "id": 10,
            "subject": "Soren",
            "text": "Soren works precisely.",
            "fol": "p_10(Soren)",
            "str_fol": "works_precisely(Soren)",
            "negation": false
        },
        {
            "id": 11,
            "subject": "Soren",
            "text": "Soren has passion.",
            "fol": "p_12(Soren)",
            "str_fol": "has_passion(Soren)",
            "negation": false
        },
        {
            "id": 12,
            "subject": "Soren",
            "text": "Soren is not innovative.",
            "fol": "\u00acp_11(Soren)",
            "str_fol": "\u00acis_innovative(Soren)",
            "negation": true
        },
        {
            "id": 13,
            "subject": "Soren",
            "text": "Soren does not produce quality work.",
            "fol": "\u00acp_9(Soren)",
            "str_fol": "\u00acproduces_quality_work(Soren)",
            "negation": true
        },
        {
            "id": 14,
            "subject": "Soren",
            "text": "Soren is not a master craftsman.",
            "fol": "\u00acp_7(Soren)",
            "str_fol": "\u00acmaster_craftsman(Soren)",
            "negation": true
        }
    ],
    "context_facts": [
        {
            "id": 5,
            "subject": "Soren",
            "text": "Soren has patience.",
            "fol": "p_5(Soren)",
            "str_fol": "has_patience(Soren)",
            "negation": false
        },
        {
            "id": 6,
            "subject": "Soren",
            "text": "Soren does not learn quickly.",
            "fol": "\u00acp_6(Soren)",
            "str_fol": "\u00aclearns_quickly(Soren)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Soren",
            "text": "Soren is artistic.",
            "fol": "p_3(Soren)",
            "str_fol": "is_artistic(Soren)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Soren",
            "text": "Soren is not imaginative.",
            "fol": "\u00acp_4(Soren)",
            "str_fol": "\u00acis_imaginative(Soren)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Soren",
            "text": "Soren is experienced.",
            "fol": "p_2(Soren)",
            "str_fol": "is_experienced(Soren)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Soren",
            "text": "Soren is dedicated.",
            "fol": "p_1(Soren)",
            "str_fol": "is_dedicated(Soren)",
            "negation": false
        },
        {
            "id": 0,
            "subject": "Soren",
            "text": "Soren does not create beauty.",
            "fol": "\u00acp_0(Soren)",
            "str_fol": "\u00accreates_beauty(Soren)",
            "negation": true
        }
    ],
    "context_rules": [
        {
            "id": 7,
            "text": "If Soren has patience, then he is either skilled or learns quickly, but not both.",
            "fol": "p_5(Soren) \u2192 (p_14(Soren) \u2295 p_6(Soren))",
            "str_fol": "has_patience(Soren) \u2192 (is_skilled(Soren) \u2295 learns_quickly(Soren))"
        },
        {
            "id": 6,
            "text": "If Soren is artistic, then he is either creative or imaginative, but not both.",
            "fol": "p_3(Soren) \u2192 (p_15(Soren) \u2295 p_4(Soren))",
            "str_fol": "is_artistic(Soren) \u2192 (has_creativity(Soren) \u2295 is_imaginative(Soren))"
        },
        {
            "id": 5,
            "text": "If Soren is experienced, then he either has creativity or tells stories through his craft, but not both.",
            "fol": "p_2(Soren) \u2192 (p_15(Soren) \u2295 p_13(Soren))",
            "str_fol": "is_experienced(Soren) \u2192 (has_creativity(Soren) \u2295 tells_stories(Soren))"
        },
        {
            "id": 4,
            "text": "If someone is skilled, then they work precisely.",
            "fol": "\u2200x (p_14(x) \u2192 p_10(x))",
            "str_fol": "\u2200x (is_skilled(x) \u2192 works_precisely(x))"
        },
        {
            "id": 3,
            "text": "Everyone who is dedicated either tells stories through their work or has passion (or both).",
            "fol": "\u2200x (p_1(x) \u2192 (p_13(x) \u2228 p_12(x)))",
            "str_fol": "\u2200x (is_dedicated(x) \u2192 (tells_stories(x) \u2228 has_passion(x)))"
        },
        {
            "id": 2,
            "text": "If someone is innovative and has passion, then they create beauty.",
            "fol": "\u2200x ((p_11(x) \u2227 p_12(x)) \u2192 p_0(x))",
            "str_fol": "\u2200x ((is_innovative(x) \u2227 has_passion(x)) \u2192 creates_beauty(x))"
        },
        {
            "id": 1,
            "text": "If Soren works precisely and produces quality work, then he is innovative.",
            "fol": "(p_10(Soren) \u2227 p_9(Soren)) \u2192 p_11(Soren)",
            "str_fol": "(works_precisely(Soren) \u2227 produces_quality_work(Soren)) \u2192 is_innovative(Soren)"
        },
        {
            "id": 0,
            "text": "For all humans, if someone is a master craftsman, then they are attentive to detail and produce quality work.",
            "fol": "\u2200x (p_7(x) \u2192 (p_8(x) \u2227 p_9(x)))",
            "str_fol": "\u2200x (master_craftsman(x) \u2192 (attentive_to_detail(x) \u2227 produces_quality_work(x)))"
        }
    ],
    "context": [
        {
            "id": 5,
            "subject": "Soren",
            "text": "Soren has patience.",
            "fol": "p_5(Soren)",
            "str_fol": "has_patience(Soren)",
            "negation": false
        },
        {
            "id": 6,
            "subject": "Soren",
            "text": "Soren does not learn quickly.",
            "fol": "\u00acp_6(Soren)",
            "str_fol": "\u00aclearns_quickly(Soren)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Soren",
            "text": "Soren is artistic.",
            "fol": "p_3(Soren)",
            "str_fol": "is_artistic(Soren)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Soren",
            "text": "Soren is not imaginative.",
            "fol": "\u00acp_4(Soren)",
            "str_fol": "\u00acis_imaginative(Soren)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Soren",
            "text": "Soren is experienced.",
            "fol": "p_2(Soren)",
            "str_fol": "is_experienced(Soren)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Soren",
            "text": "Soren is dedicated.",
            "fol": "p_1(Soren)",
            "str_fol": "is_dedicated(Soren)",
            "negation": false
        },
        {
            "id": 0,
            "subject": "Soren",
            "text": "Soren does not create beauty.",
            "fol": "\u00acp_0(Soren)",
            "str_fol": "\u00accreates_beauty(Soren)",
            "negation": true
        },
        {
            "id": 7,
            "text": "If Soren has patience, then he is either skilled or learns quickly, but not both.",
            "fol": "p_5(Soren) \u2192 (p_14(Soren) \u2295 p_6(Soren))",
            "str_fol": "has_patience(Soren) \u2192 (is_skilled(Soren) \u2295 learns_quickly(Soren))"
        },
        {
            "id": 6,
            "text": "If Soren is artistic, then he is either creative or imaginative, but not both.",
            "fol": "p_3(Soren) \u2192 (p_15(Soren) \u2295 p_4(Soren))",
            "str_fol": "is_artistic(Soren) \u2192 (has_creativity(Soren) \u2295 is_imaginative(Soren))"
        },
        {
            "id": 5,
            "text": "If Soren is experienced, then he either has creativity or tells stories through his craft, but not both.",
            "fol": "p_2(Soren) \u2192 (p_15(Soren) \u2295 p_13(Soren))",
            "str_fol": "is_experienced(Soren) \u2192 (has_creativity(Soren) \u2295 tells_stories(Soren))"
        },
        {
            "id": 4,
            "text": "If someone is skilled, then they work precisely.",
            "fol": "\u2200x (p_14(x) \u2192 p_10(x))",
            "str_fol": "\u2200x (is_skilled(x) \u2192 works_precisely(x))"
        },
        {
            "id": 3,
            "text": "Everyone who is dedicated either tells stories through their work or has passion (or both).",
            "fol": "\u2200x (p_1(x) \u2192 (p_13(x) \u2228 p_12(x)))",
            "str_fol": "\u2200x (is_dedicated(x) \u2192 (tells_stories(x) \u2228 has_passion(x)))"
        },
        {
            "id": 2,
            "text": "If someone is innovative and has passion, then they create beauty.",
            "fol": "\u2200x ((p_11(x) \u2227 p_12(x)) \u2192 p_0(x))",
            "str_fol": "\u2200x ((is_innovative(x) \u2227 has_passion(x)) \u2192 creates_beauty(x))"
        },
        {
            "id": 1,
            "text": "If Soren works precisely and produces quality work, then he is innovative.",
            "fol": "(p_10(Soren) \u2227 p_9(Soren)) \u2192 p_11(Soren)",
            "str_fol": "(works_precisely(Soren) \u2227 produces_quality_work(Soren)) \u2192 is_innovative(Soren)"
        },
        {
            "id": 0,
            "text": "For all humans, if someone is a master craftsman, then they are attentive to detail and produce quality work.",
            "fol": "\u2200x (p_7(x) \u2192 (p_8(x) \u2227 p_9(x)))",
            "str_fol": "\u2200x (master_craftsman(x) \u2192 (attentive_to_detail(x) \u2227 produces_quality_work(x)))"
        }
    ],
    "context_fol": "p_5(Soren)\n\u00acp_6(Soren)\np_3(Soren)\n\u00acp_4(Soren)\np_2(Soren)\np_1(Soren)\n\u00acp_0(Soren)\np_5(Soren) \u2192 (p_14(Soren) \u2295 p_6(Soren))\np_3(Soren) \u2192 (p_15(Soren) \u2295 p_4(Soren))\np_2(Soren) \u2192 (p_15(Soren) \u2295 p_13(Soren))\n\u2200x (p_14(x) \u2192 p_10(x))\n\u2200x (p_1(x) \u2192 (p_13(x) \u2228 p_12(x)))\n\u2200x ((p_11(x) \u2227 p_12(x)) \u2192 p_0(x))\n(p_10(Soren) \u2227 p_9(Soren)) \u2192 p_11(Soren)\n\u2200x (p_7(x) \u2192 (p_8(x) \u2227 p_9(x)))",
    "conclusion": {
        "id": 14,
        "subject": "Soren",
        "text": "Soren is not a master craftsman.",
        "fol": "\u00acp_7(Soren)",
        "str_fol": "\u00acmaster_craftsman(Soren)",
        "negation": true
    },
    "initial_answer": "True",
    "initial_goal": "\u00acp_7(Soren)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 5,
                    "subject": "Soren",
                    "text": "Soren has patience.",
                    "fol": "p_5(Soren)",
                    "str_fol": "has_patience(Soren)",
                    "negation": false
                },
                {
                    "id": 6,
                    "subject": "Soren",
                    "text": "Soren does not learn quickly.",
                    "fol": "\u00acp_6(Soren)",
                    "str_fol": "\u00aclearns_quickly(Soren)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 7,
                    "text": "If Soren has patience, then he is either skilled or learns quickly, but not both.",
                    "fol": "p_5(Soren) \u2192 (p_14(Soren) \u2295 p_6(Soren))",
                    "str_fol": "has_patience(Soren) \u2192 (is_skilled(Soren) \u2295 learns_quickly(Soren))"
                }
            ],
            "conclusion": {
                "id": 7,
                "subject": "Soren",
                "text": "Soren is skilled.",
                "fol": "p_14(Soren)",
                "str_fol": "is_skilled(Soren)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 3,
                    "subject": "Soren",
                    "text": "Soren is artistic.",
                    "fol": "p_3(Soren)",
                    "str_fol": "is_artistic(Soren)",
                    "negation": false
                },
                {
                    "id": 4,
                    "subject": "Soren",
                    "text": "Soren is not imaginative.",
                    "fol": "\u00acp_4(Soren)",
                    "str_fol": "\u00acis_imaginative(Soren)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 6,
                    "text": "If Soren is artistic, then he is either creative or imaginative, but not both.",
                    "fol": "p_3(Soren) \u2192 (p_15(Soren) \u2295 p_4(Soren))",
                    "str_fol": "is_artistic(Soren) \u2192 (has_creativity(Soren) \u2295 is_imaginative(Soren))"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Soren",
                "text": "Soren has creativity.",
                "fol": "p_15(Soren)",
                "str_fol": "has_creativity(Soren)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 2,
                    "subject": "Soren",
                    "text": "Soren is experienced.",
                    "fol": "p_2(Soren)",
                    "str_fol": "is_experienced(Soren)",
                    "negation": false
                },
                {
                    "id": 8,
                    "subject": "Soren",
                    "text": "Soren has creativity.",
                    "fol": "p_15(Soren)",
                    "str_fol": "has_creativity(Soren)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "If Soren is experienced, then he either has creativity or tells stories through his craft, but not both.",
                    "fol": "p_2(Soren) \u2192 (p_15(Soren) \u2295 p_13(Soren))",
                    "str_fol": "is_experienced(Soren) \u2192 (has_creativity(Soren) \u2295 tells_stories(Soren))"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Soren",
                "text": "Soren does not tell stories through his craft.",
                "fol": "\u00acp_13(Soren)",
                "str_fol": "\u00actells_stories(Soren)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 7,
                    "subject": "Soren",
                    "text": "Soren is skilled.",
                    "fol": "p_14(Soren)",
                    "str_fol": "is_skilled(Soren)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "If someone is skilled, then they work precisely.",
                    "fol": "\u2200x (p_14(x) \u2192 p_10(x))",
                    "str_fol": "\u2200x (is_skilled(x) \u2192 works_precisely(x))"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Soren",
                "text": "Soren works precisely.",
                "fol": "p_10(Soren)",
                "str_fol": "works_precisely(Soren)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 1,
                    "subject": "Soren",
                    "text": "Soren is dedicated.",
                    "fol": "p_1(Soren)",
                    "str_fol": "is_dedicated(Soren)",
                    "negation": false
                },
                {
                    "id": 9,
                    "subject": "Soren",
                    "text": "Soren does not tell stories through his craft.",
                    "fol": "\u00acp_13(Soren)",
                    "str_fol": "\u00actells_stories(Soren)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "Everyone who is dedicated either tells stories through their work or has passion (or both).",
                    "fol": "\u2200x (p_1(x) \u2192 (p_13(x) \u2228 p_12(x)))",
                    "str_fol": "\u2200x (is_dedicated(x) \u2192 (tells_stories(x) \u2228 has_passion(x)))"
                }
            ],
            "conclusion": {
                "id": 11,
                "subject": "Soren",
                "text": "Soren has passion.",
                "fol": "p_12(Soren)",
                "str_fol": "has_passion(Soren)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 11,
                    "subject": "Soren",
                    "text": "Soren has passion.",
                    "fol": "p_12(Soren)",
                    "str_fol": "has_passion(Soren)",
                    "negation": false
                },
                {
                    "id": 0,
                    "subject": "Soren",
                    "text": "Soren does not create beauty.",
                    "fol": "\u00acp_0(Soren)",
                    "str_fol": "\u00accreates_beauty(Soren)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "If someone is innovative and has passion, then they create beauty.",
                    "fol": "\u2200x ((p_11(x) \u2227 p_12(x)) \u2192 p_0(x))",
                    "str_fol": "\u2200x ((is_innovative(x) \u2227 has_passion(x)) \u2192 creates_beauty(x))"
                }
            ],
            "conclusion": {
                "id": 12,
                "subject": "Soren",
                "text": "Soren is not innovative.",
                "fol": "\u00acp_11(Soren)",
                "str_fol": "\u00acis_innovative(Soren)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 10,
                    "subject": "Soren",
                    "text": "Soren works precisely.",
                    "fol": "p_10(Soren)",
                    "str_fol": "works_precisely(Soren)",
                    "negation": false
                },
                {
                    "id": 12,
                    "subject": "Soren",
                    "text": "Soren is not innovative.",
                    "fol": "\u00acp_11(Soren)",
                    "str_fol": "\u00acis_innovative(Soren)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "If Soren works precisely and produces quality work, then he is innovative.",
                    "fol": "(p_10(Soren) \u2227 p_9(Soren)) \u2192 p_11(Soren)",
                    "str_fol": "(works_precisely(Soren) \u2227 produces_quality_work(Soren)) \u2192 is_innovative(Soren)"
                }
            ],
            "conclusion": {
                "id": 13,
                "subject": "Soren",
                "text": "Soren does not produce quality work.",
                "fol": "\u00acp_9(Soren)",
                "str_fol": "\u00acproduces_quality_work(Soren)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 13,
                    "subject": "Soren",
                    "text": "Soren does not produce quality work.",
                    "fol": "\u00acp_9(Soren)",
                    "str_fol": "\u00acproduces_quality_work(Soren)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "For all humans, if someone is a master craftsman, then they are attentive to detail and produce quality work.",
                    "fol": "\u2200x (p_7(x) \u2192 (p_8(x) \u2227 p_9(x)))",
                    "str_fol": "\u2200x (master_craftsman(x) \u2192 (attentive_to_detail(x) \u2227 produces_quality_work(x)))"
                }
            ],
            "conclusion": {
                "id": 14,
                "subject": "Soren",
                "text": "Soren is not a master craftsman.",
                "fol": "\u00acp_7(Soren)",
                "str_fol": "\u00acmaster_craftsman(Soren)",
                "negation": true
            }
        }
    ],
    "proof_trace": "1 p_5(Soren) -> -(p_14(Soren) <-> p_6(Soren)).  [assumption].\n2 p_3(Soren) -> -(p_15(Soren) <-> p_4(Soren)).  [assumption].\n3 p_2(Soren) -> -(p_15(Soren) <-> p_13(Soren)).  [assumption].\n4 (all x (p_14(x) -> p_10(x))).  [assumption].\n5 (all x (p_1(x) -> p_13(x) | p_12(x))).  [assumption].\n6 (all x (p_11(x) & p_12(x) -> p_0(x))).  [assumption].\n7 p_10(Soren) & p_9(Soren) -> p_11(Soren).  [assumption].\n8 (all x (p_7(x) -> p_8(x) & p_9(x))).  [assumption].\n9 -p_7(Soren).  [goal].\n10 -p_5(Soren) | p_14(Soren) | p_6(Soren).  [clausify(1)].\n11 p_5(Soren).  [assumption].\n13 p_14(Soren) | p_6(Soren).  [resolve(10,a,11,a)].\n14 -p_6(Soren).  [assumption].\n16 -p_3(Soren) | p_15(Soren) | p_4(Soren).  [clausify(2)].\n17 p_3(Soren).  [assumption].\n19 p_15(Soren) | p_4(Soren).  [resolve(16,a,17,a)].\n20 -p_4(Soren).  [assumption].\n23 p_2(Soren).  [assumption].\n24 -p_2(Soren) | -p_15(Soren) | -p_13(Soren).  [clausify(3)].\n25 -p_1(x) | p_13(x) | p_12(x).  [clausify(5)].\n26 p_1(Soren).  [assumption].\n27 -p_11(x) | -p_12(x) | p_0(x).  [clausify(6)].\n28 -p_0(Soren).  [assumption].\n29 p_14(Soren).  [resolve(13,b,14,a)].\n30 -p_14(x) | p_10(x).  [clausify(4)].\n31 p_10(Soren).  [resolve(29,a,30,a)].\n32 -p_10(Soren) | -p_9(Soren) | p_11(Soren).  [clausify(7)].\n33 p_7(Soren).  [deny(9)].\n35 -p_7(x) | p_9(x).  [clausify(8)].\n36 -p_15(Soren) | -p_13(Soren).  [resolve(24,a,23,a)].\n37 p_15(Soren).  [resolve(19,b,20,a)].\n38 -p_13(Soren).  [resolve(36,a,37,a)].\n39 p_13(Soren) | p_12(Soren).  [resolve(25,a,26,a)].\n40 -p_9(Soren) | p_11(Soren).  [resolve(31,a,32,a)].\n41 -p_11(Soren) | -p_12(Soren).  [resolve(27,c,28,a)].\n42 -p_9(Soren) | -p_12(Soren).  [resolve(40,b,41,a)].\n43 p_9(Soren).  [resolve(33,a,35,a)].\n44 -p_12(Soren).  [resolve(42,a,43,a)].\n45 p_12(Soren).  [resolve(38,a,39,a)].\n46 $F.  [resolve(44,a,45,a)].",
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_5(Soren)\n\u00acp_6(Soren)\np_3(Soren)\n\u00acp_4(Soren)\np_2(Soren)\np_1(Soren)\n\u00acp_0(Soren)\np_5(Soren) \u2192 (p_14(Soren) \u2295 p_6(Soren))\np_3(Soren) \u2192 (p_15(Soren) \u2295 p_4(Soren))\np_2(Soren) \u2192 (p_15(Soren) \u2295 p_13(Soren))\n\u2200x (\u00acp_10(x) \u2192 \u00acp_14(x))\n\u2200x (p_1(x) \u2192 (\u00acp_13(x) \u2192 p_12(x)))\n\u2200x (p_11(x) \u2192 (p_12(x) \u2192 p_0(x)))\n\u00acp_11(Soren) \u2192 (\u00acp_10(Soren) \u2228 \u00acp_9(Soren))\n\u2200x (p_7(x) \u2192 p_8(x))\n\u2200x (p_7(x) \u2192 p_9(x))\np_14(Soren)\np_10(Soren)\np_15(Soren)\n\u00acp_13(Soren)\np_12(Soren)",
            "Initial Goal": "\u00acp_7(Soren)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Soren)",
                    "-p_6(Soren)",
                    "p_3(Soren)",
                    "-p_4(Soren)",
                    "p_2(Soren)",
                    "p_1(Soren)",
                    "-p_0(Soren)",
                    "p_5(Soren) -> (-(p_14(Soren) <-> p_6(Soren)))",
                    "p_3(Soren) -> (-(p_15(Soren) <-> p_4(Soren)))",
                    "p_2(Soren) -> (-(p_15(Soren) <-> p_13(Soren)))",
                    "all x (-p_10(x) -> -p_14(x))",
                    "all x (p_1(x) -> (-p_13(x) -> p_12(x)))",
                    "all x (p_11(x) -> (p_12(x) -> p_0(x)))",
                    "-p_11(Soren) -> (-p_10(Soren) | -p_9(Soren))",
                    "all x (p_7(x) -> p_8(x))",
                    "all x (p_7(x) -> p_9(x))",
                    "p_14(Soren)",
                    "p_10(Soren)",
                    "p_15(Soren)",
                    "-p_13(Soren)",
                    "p_12(Soren)"
                ],
                "formulas(goals)": [
                    "-p_7(Soren)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u2200x (p_14(x) \u2192 p_10(x))",
                    "\u2200x (p_1(x) \u2192 (p_13(x) \u2228 p_12(x)))",
                    "\u2200x ((p_11(x) \u2227 p_12(x)) \u2192 p_0(x))",
                    "(p_10(Soren) \u2227 p_9(Soren)) \u2192 p_11(Soren)",
                    "\u2200x (p_7(x) \u2192 (p_8(x) \u2227 p_9(x)))"
                ],
                "added_facts": [
                    "p_14(Soren)",
                    "p_10(Soren)",
                    "p_15(Soren)",
                    "\u00acp_13(Soren)",
                    "p_12(Soren)"
                ],
                "added_rules": [
                    "\u2200x (\u00acp_10(x) \u2192 \u00acp_14(x))",
                    "\u2200x (p_1(x) \u2192 (\u00acp_13(x) \u2192 p_12(x)))",
                    "\u2200x (p_11(x) \u2192 (p_12(x) \u2192 p_0(x)))",
                    "\u00acp_11(Soren) \u2192 (\u00acp_10(Soren) \u2228 \u00acp_9(Soren))",
                    "\u2200x (p_7(x) \u2192 p_8(x))",
                    "\u2200x (p_7(x) \u2192 p_9(x))"
                ]
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_5(Soren).\n\u00acp_6(Soren).\np_3(Soren).\n\u00acp_4(Soren).\np_2(Soren).\np_1(Soren).\n\u00acp_0(Soren).\np_5(Soren) \u2192 (p_14(Soren) \u2295 p_6(Soren)).\np_3(Soren) \u2192 (p_15(Soren) \u2295 p_4(Soren)).\np_2(Soren) \u2192 (p_15(Soren) \u2295 p_13(Soren)).\n\u2200x (\u00acp_10(x) \u2192 \u00acp_14(x)).\n\u2200x (p_1(x) \u2192 (\u00acp_13(x) \u2192 p_12(x))).\n\u2200x (p_11(x) \u2192 (p_12(x) \u2192 p_0(x))).\n(\u00acp_11(Soren) \u2227 p_10(Soren)) \u2192 \u00acp_9(Soren).\n\u2200x (p_7(x) \u2192 p_8(x)).\n\u2200x (\u00acp_9(x) \u2192 \u00acp_7(x)).\np_14(Soren).\np_10(Soren).\np_15(Soren).\n\u00acp_13(Soren).\np_12(Soren).\n\u00acp_11(Soren).\n\u00acp_9(Soren).",
            "Initial Goal": "\u00acp_7(Soren)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Soren).",
                    "-p_6(Soren).",
                    "p_3(Soren).",
                    "-p_4(Soren).",
                    "p_2(Soren).",
                    "p_1(Soren).",
                    "-p_0(Soren).",
                    "p_5(Soren) -> (-(p_14(Soren) <-> p_6(Soren))).",
                    "p_3(Soren) -> (-(p_15(Soren) <-> p_4(Soren))).",
                    "p_2(Soren) -> (-(p_15(Soren) <-> p_13(Soren))).",
                    "all x (-p_10(x) -> -p_14(x)).",
                    "all x (p_1(x) -> (-p_13(x) -> p_12(x))).",
                    "all x (p_11(x) -> (p_12(x) -> p_0(x))).",
                    "(-p_11(Soren) & p_10(Soren)) -> -p_9(Soren).",
                    "all x (p_7(x) -> p_8(x)).",
                    "all x (-p_9(x) -> -p_7(x)).",
                    "p_14(Soren).",
                    "p_10(Soren).",
                    "p_15(Soren).",
                    "-p_13(Soren).",
                    "p_12(Soren).",
                    "-p_11(Soren).",
                    "-p_9(Soren)."
                ],
                "formulas(goals)": [
                    "-p_7(Soren)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u00acp_11(Soren) \u2192 (\u00acp_10(Soren) \u2228 \u00acp_9(Soren))",
                    "\u2200x (p_7(x) \u2192 p_9(x))"
                ],
                "added_facts": [
                    "\u00acp_11(Soren)",
                    "\u00acp_9(Soren)"
                ],
                "added_rules": [
                    "(\u00acp_11(Soren) \u2227 p_10(Soren)) \u2192 \u00acp_9(Soren)",
                    "\u2200x (\u00acp_9(x) \u2192 \u00acp_7(x))"
                ]
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_5(Soren)\n\u00acp_6(Soren)\np_3(Soren)\n\u00acp_4(Soren)\np_2(Soren)\np_1(Soren)\n\u00acp_0(Soren)\np_5(Soren) \u2192 (p_14(Soren) \u2295 p_6(Soren))\np_3(Soren) \u2192 (p_15(Soren) \u2295 p_4(Soren))\np_2(Soren) \u2192 (p_15(Soren) \u2295 p_13(Soren))\n\u2200x (\u00acp_10(x) \u2192 \u00acp_14(x))\n\u2200x (p_1(x) \u2227 \u00acp_13(x) \u2192 p_12(x))\n\u2200x (p_11(x) \u2227 p_12(x) \u2192 p_0(x))\n(\u00acp_11(Soren) \u2227 p_10(Soren)) \u2192 \u00acp_9(Soren)\n\u2200x (p_7(x) \u2192 p_8(x))\n\u2200x (\u00acp_9(x) \u2192 \u00acp_7(x))\np_14(Soren)\np_10(Soren)\np_15(Soren)\n\u00acp_13(Soren)\np_12(Soren)\n\u00acp_11(Soren)\n\u00acp_9(Soren)\n\u2200x (p_7(x) \u2192 p_9(x))\np_12(Soren) \u2228 p_11(Soren)",
            "Initial Goal": "\u00acp_7(Soren)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Soren).",
                    "-p_6(Soren).",
                    "p_3(Soren).",
                    "-p_4(Soren).",
                    "p_2(Soren).",
                    "p_1(Soren).",
                    "-p_0(Soren).",
                    "p_5(Soren) -> (-(p_14(Soren) <-> p_6(Soren))).",
                    "p_3(Soren) -> (-(p_15(Soren) <-> p_4(Soren))).",
                    "p_2(Soren) -> (-(p_15(Soren) <-> p_13(Soren))).",
                    "all x (-p_10(x) -> -p_14(x)).",
                    "all x (p_1(x) & -p_13(x) -> p_12(x)).",
                    "all x (p_11(x) & p_12(x) -> p_0(x)).",
                    "(-p_11(Soren) & p_10(Soren)) -> -p_9(Soren).",
                    "all x (p_7(x) -> p_8(x)).",
                    "all x (-p_9(x) -> -p_7(x)).",
                    "p_14(Soren).",
                    "p_10(Soren).",
                    "p_15(Soren).",
                    "-p_13(Soren).",
                    "p_12(Soren).",
                    "-p_11(Soren).",
                    "-p_9(Soren).",
                    "all x (p_7(x) -> p_9(x)).",
                    "p_12(Soren) | p_11(Soren)."
                ],
                "formulas(goals)": [
                    "-p_7(Soren)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_12(Soren) \u2228 p_11(Soren)"
                ],
                "added_rules": [
                    "\u2200x (p_1(x) \u2227 \u00acp_13(x) \u2192 p_12(x))",
                    "\u2200x (p_11(x) \u2227 p_12(x) \u2192 p_0(x))",
                    "\u2200x (p_7(x) \u2192 p_9(x))"
                ]
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_5(Soren)\n\u00acp_6(Soren)\np_3(Soren)\n\u00acp_4(Soren)\np_2(Soren)\np_1(Soren)\n\u00acp_0(Soren)\np_5(Soren) \u2192 (p_14(Soren) \u2295 p_6(Soren))\np_3(Soren) \u2192 (p_15(Soren) \u2295 p_4(Soren))\np_2(Soren) \u2192 (p_15(Soren) \u2295 p_13(Soren))\n\u2200x (\u00acp_10(x) \u2192 \u00acp_14(x))\n\u2200x (p_1(x) \u2227 \u00acp_13(x) \u2192 p_12(x))\n\u2200x (p_11(x) \u2227 p_12(x) \u2192 p_0(x))\n(\u00acp_11(Soren) \u2227 p_10(Soren)) \u2192 \u00acp_9(Soren)\n\u2200x (p_7(x) \u2192 p_8(x))\np_14(Soren)\np_10(Soren)\np_15(Soren)\n\u00acp_13(Soren)\np_12(Soren)\n\u00acp_11(Soren)\n\u2200x (p_7(x) \u2192 p_9(x))\np_12(Soren) \u2228 p_11(Soren)\np_9(Soren)\np_9(Soren) \u2192 p_7(Soren)",
            "Initial Goal": "\u00acp_7(Soren)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Soren).",
                    "-p_6(Soren).",
                    "p_3(Soren).",
                    "-p_4(Soren).",
                    "p_2(Soren).",
                    "p_1(Soren).",
                    "-p_0(Soren).",
                    "p_5(Soren) -> (-(p_14(Soren) <-> p_6(Soren))).",
                    "p_3(Soren) -> (-(p_15(Soren) <-> p_4(Soren))).",
                    "p_2(Soren) -> (-(p_15(Soren) <-> p_13(Soren))).",
                    "all x (-p_10(x) -> -p_14(x)).",
                    "all x ((p_1(x) & -p_13(x)) -> p_12(x)).",
                    "all x ((p_11(x) & p_12(x)) -> p_0(x)).",
                    "(-p_11(Soren) & p_10(Soren)) -> -p_9(Soren).",
                    "all x (p_7(x) -> p_8(x)).",
                    "p_14(Soren).",
                    "p_10(Soren).",
                    "p_15(Soren).",
                    "-p_13(Soren).",
                    "p_12(Soren).",
                    "-p_11(Soren).",
                    "all x (p_7(x) -> p_9(x)).",
                    "p_12(Soren) | p_11(Soren).",
                    "p_9(Soren).",
                    "p_9(Soren) -> p_7(Soren)."
                ],
                "formulas(goals)": [
                    "p_7(Soren)."
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "\u00acp_9(Soren)"
                ],
                "removed_rules": [
                    "\u2200x (\u00acp_9(x) \u2192 \u00acp_7(x))"
                ],
                "added_facts": [
                    "p_9(Soren)"
                ],
                "added_rules": [
                    "p_9(Soren) \u2192 p_7(Soren)"
                ]
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_5(Soren)\n\u00acp_6(Soren)\np_3(Soren)\n\u00acp_4(Soren)\np_2(Soren)\np_1(Soren)\n\u00acp_0(Soren)\np_5(Soren) \u2192 (p_14(Soren) \u2295 p_6(Soren))\np_3(Soren) \u2192 (p_15(Soren) \u2295 p_4(Soren))\np_2(Soren) \u2192 (p_15(Soren) \u2295 p_13(Soren))\n\u2200x (\u00acp_10(x) \u2192 \u00acp_14(x))\n\u2200x (p_1(x) \u2227 \u00acp_13(x) \u2192 p_12(x))\n\u2200x (p_11(x) \u2227 p_12(x) \u2192 p_0(x))\n\u2200x (p_7(x) \u2192 p_8(x))\np_14(Soren)\np_10(Soren)\np_15(Soren)\n\u00acp_13(Soren)\np_12(Soren)\n\u00acp_11(Soren)\n\u2200x (p_7(x) \u2192 p_9(x))\np_12(Soren) \u2228 p_11(Soren)\np_9(Soren)\np_9(Soren) \u2192 \u00acp_7(Soren)",
            "Initial Goal": "\u00acp_7(Soren)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Soren).",
                    "-p_6(Soren).",
                    "p_3(Soren).",
                    "-p_4(Soren).",
                    "p_2(Soren).",
                    "p_1(Soren).",
                    "-p_0(Soren).",
                    "p_5(Soren) -> (-(p_14(Soren) <-> p_6(Soren))).",
                    "p_3(Soren) -> (-(p_15(Soren) <-> p_4(Soren))).",
                    "p_2(Soren) -> (-(p_15(Soren) <-> p_13(Soren))).",
                    "all x (-p_10(x) -> -p_14(x)).",
                    "all x (p_1(x) & -p_13(x) -> p_12(x)).",
                    "all x (p_11(x) & p_12(x) -> p_0(x)).",
                    "all x (p_7(x) -> p_8(x)).",
                    "p_14(Soren).",
                    "p_10(Soren).",
                    "p_15(Soren).",
                    "-p_13(Soren).",
                    "p_12(Soren).",
                    "-p_11(Soren).",
                    "all x (p_7(x) -> p_9(x)).",
                    "p_12(Soren) | p_11(Soren).",
                    "p_9(Soren).",
                    "p_9(Soren) -> -p_7(Soren)."
                ],
                "formulas(goals)": [
                    "-p_7(Soren)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "(\u00acp_11(Soren) \u2227 p_10(Soren)) \u2192 \u00acp_9(Soren)"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_9(Soren) \u2192 \u00acp_7(Soren)"
                ]
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_5(Soren)\n\u00acp_6(Soren)\np_3(Soren)\n\u00acp_4(Soren)\np_2(Soren)\np_1(Soren)\n\u00acp_0(Soren)\np_5(Soren) \u2192 (p_14(Soren) \u2295 p_6(Soren))\np_3(Soren) \u2192 (p_15(Soren) \u2295 p_4(Soren))\np_2(Soren) \u2192 (p_15(Soren) \u2295 p_13(Soren))\n\u2200x (\u00acp_10(x) \u2192 \u00acp_14(x))\n\u2200x ((p_1(x) \u2227 \u00acp_13(x)) \u2192 p_12(x))\n\u2200x ((p_11(x) \u2227 p_12(x)) \u2192 p_0(x))\n\u2200x (p_7(x) \u2192 p_8(x))\np_14(Soren)\np_10(Soren)\np_15(Soren)\n\u00acp_13(Soren)\np_12(Soren)\n\u00acp_11(Soren)\n\u2200x (p_7(x) \u2192 p_9(x))\np_12(Soren) \u2228 p_11(Soren)\np_9(Soren)\np_9(Soren) \u2192 \u00acp_7(Soren)\np_7(Soren) \u2192 \u00acp_9(Soren)\n\u2200x (p_7(x) \u2192 (p_8(x) \u2227 p_9(x)))",
            "Initial Goal": "\u00acp_7(Soren)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Soren)",
                    "-p_6(Soren)",
                    "p_3(Soren)",
                    "-p_4(Soren)",
                    "p_2(Soren)",
                    "p_1(Soren)",
                    "-p_0(Soren)",
                    "p_5(Soren) -> (-(p_14(Soren) <-> p_6(Soren)))",
                    "p_3(Soren) -> (-(p_15(Soren) <-> p_4(Soren)))",
                    "p_2(Soren) -> (-(p_15(Soren) <-> p_13(Soren)))",
                    "all x (-p_10(x) -> -p_14(x))",
                    "all x ((p_1(x) & -p_13(x)) -> p_12(x))",
                    "all x ((p_11(x) & p_12(x)) -> p_0(x))",
                    "all x (p_7(x) -> p_8(x))",
                    "p_14(Soren)",
                    "p_10(Soren)",
                    "p_15(Soren)",
                    "-p_13(Soren)",
                    "p_12(Soren)",
                    "-p_11(Soren)",
                    "all x (p_7(x) -> p_9(x))",
                    "p_12(Soren) | p_11(Soren)",
                    "p_9(Soren)",
                    "p_9(Soren) -> -p_7(Soren)",
                    "p_7(Soren) -> -p_9(Soren)",
                    "all x (p_7(x) -> (p_8(x) & p_9(x)))"
                ],
                "formulas(goals)": [
                    "-p_7(Soren)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "p_7(Soren) \u2192 \u00acp_9(Soren)",
                    "\u2200x (p_7(x) \u2192 (p_8(x) \u2227 p_9(x)))"
                ]
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_5(Soren)\n\u00acp_6(Soren)\np_3(Soren)\n\u00acp_4(Soren)\np_2(Soren)\np_1(Soren)\n\u00acp_0(Soren)\n\u00ac(p_14(Soren) \u2194 p_6(Soren))\n\u00ac(p_15(Soren) \u2194 p_4(Soren))\n\u00ac(p_15(Soren) \u2194 p_13(Soren))\n\u2200x (\u00ac\u00acp_10(x) \u2192 \u00acp_14(x))\n\u2200x ((p_1(x) \u2227 \u00acp_13(x)) \u2192 p_12(x))\n\u2200x ((p_11(x) \u2227 p_12(x)) \u2192 p_0(x))\n\u2200x (p_7(x) \u2192 p_8(x))\np_14(Soren)\np_10(Soren)\np_15(Soren)\n\u00acp_13(Soren)\np_12(Soren)\n\u00acp_11(Soren)\n\u2200x (p_7(x) \u2192 p_9(x))\np_5(Soren) \u2192 p_7(Soren)",
            "Initial Goal": "\u00acp_7(Soren)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Soren)",
                    "-p_6(Soren)",
                    "p_3(Soren)",
                    "-p_4(Soren)",
                    "p_2(Soren)",
                    "p_1(Soren)",
                    "-p_0(Soren)",
                    "-(p_14(Soren) <-> p_6(Soren))",
                    "-(p_15(Soren) <-> p_4(Soren))",
                    "-(p_15(Soren) <-> p_13(Soren))",
                    "- -p_10(x) | -p_14(x)",
                    "-p_1(x) | p_13(x) | p_12(x)",
                    "-p_11(x) | -p_12(x) | p_0(x)",
                    "-p_7(x) | p_8(x)",
                    "p_14(Soren)",
                    "p_10(Soren)",
                    "p_15(Soren)",
                    "-p_13(Soren)",
                    "p_12(Soren)",
                    "-p_11(Soren)",
                    "-p_7(x) | p_9(x)",
                    "-p_5(Soren) | p_7(Soren)"
                ],
                "formulas(goals)": [
                    "--p_7(Soren)"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "p_9(Soren)"
                ],
                "removed_rules": [
                    "p_9(Soren) \u2192 \u00acp_7(Soren)",
                    "p_7(Soren) \u2192 \u00acp_9(Soren)",
                    "\u2200x (p_7(x) \u2192 (p_8(x) \u2227 p_9(x)))"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_5(Soren) \u2192 p_7(Soren)"
                ]
            }
        }
    ]
}