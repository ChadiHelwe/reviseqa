{
    "background_story": "Brecken was a free-spirited young woman who embodied the spirit of independence. Growing up in a small town, she always felt stifled by the conventional expectations placed upon her. So, at the age of 21, Brecken decided to take a leap of faith and travel the world, solo. She backpacked across Europe, Asia, and South America, immersing herself in different cultures and meeting people from all walks of life. Along the way, she discovered her passion for photography and writing, and began to build a career as a travel journalist. Brecken's journey was not without its challenges, but she thrived on the freedom and autonomy that came with making her own way. She returned home after five years, with a newfound sense of confidence and a portfolio that showcased her incredible adventures.",
    "predicates": [
        {
            "id": 0,
            "name": "be_open_minded"
        },
        {
            "id": 1,
            "name": "leads_others"
        },
        {
            "id": 2,
            "name": "grows_personally"
        },
        {
            "id": 3,
            "name": "faces_challenges"
        },
        {
            "id": 4,
            "name": "inspires_others"
        },
        {
            "id": 5,
            "name": "is_adventurous"
        },
        {
            "id": 6,
            "name": "is_curious"
        },
        {
            "id": 7,
            "name": "paints_beautifully"
        },
        {
            "id": 8,
            "name": "travel_alone"
        },
        {
            "id": 9,
            "name": "become_independent"
        },
        {
            "id": 10,
            "name": "self_reliant"
        },
        {
            "id": 11,
            "name": "takes_risks"
        },
        {
            "id": 12,
            "name": "is_confident"
        },
        {
            "id": 13,
            "name": "speaks_frankly"
        },
        {
            "id": 14,
            "name": "thinks_critically"
        },
        {
            "id": 15,
            "name": "writes_creatively"
        },
        {
            "id": 16,
            "name": "embraces_uncertainty"
        },
        {
            "id": 17,
            "name": "values_freedom"
        },
        {
            "id": 18,
            "name": "makes_own_rules"
        },
        {
            "id": 19,
            "name": "solves_own_problems"
        },
        {
            "id": 20,
            "name": "has_passion"
        },
        {
            "id": 21,
            "name": "seeks_experience"
        },
        {
            "id": 22,
            "name": "makes_decisions"
        },
        {
            "id": 23,
            "name": "seeks_opportunities"
        },
        {
            "id": 24,
            "name": "has_opinion"
        },
        {
            "id": 25,
            "name": "expresses_honestly"
        },
        {
            "id": 26,
            "name": "learns_quickly"
        },
        {
            "id": 27,
            "name": "explore_world"
        },
        {
            "id": 28,
            "name": "tell_stories"
        }
    ],
    "subject_name": "Brecken",
    "subject_category": "human",
    "keyword": "independence",
    "all_facts": [
        {
            "id": 0,
            "subject": "Brecken",
            "text": "Brecken is open-minded.",
            "fol": "p_0(Brecken)",
            "str_fol": "be_open_minded(Brecken)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Brecken",
            "text": "Brecken does not lead others.",
            "fol": "\u00acp_1(Brecken)",
            "str_fol": "\u00acleads_others(Brecken)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Brecken",
            "text": "Brecken does not grow personally.",
            "fol": "\u00acp_2(Brecken)",
            "str_fol": "\u00acgrows_personally(Brecken)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Brecken",
            "text": "Brecken faces challenges.",
            "fol": "p_3(Brecken)",
            "str_fol": "faces_challenges(Brecken)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Brecken",
            "text": "Brecken does not inspire others.",
            "fol": "\u00acp_4(Brecken)",
            "str_fol": "\u00acinspires_others(Brecken)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Brecken",
            "text": "Brecken is adventurous.",
            "fol": "p_5(Brecken)",
            "str_fol": "is_adventurous(Brecken)",
            "negation": false
        },
        {
            "id": 6,
            "subject": "Brecken",
            "text": "Brecken is curious.",
            "fol": "p_6(Brecken)",
            "str_fol": "is_curious(Brecken)",
            "negation": false
        },
        {
            "id": 7,
            "subject": "Brecken",
            "text": "Brecken does not paint beautifully.",
            "fol": "\u00acp_7(Brecken)",
            "str_fol": "\u00acpaints_beautifully(Brecken)",
            "negation": true
        },
        {
            "id": 8,
            "subject": "Brecken",
            "text": "Brecken writes creatively.",
            "fol": "p_15(Brecken)",
            "str_fol": "writes_creatively(Brecken)",
            "negation": false
        },
        {
            "id": 9,
            "subject": "Brecken",
            "text": "Brecken does not think critically.",
            "fol": "\u00acp_14(Brecken)",
            "str_fol": "\u00acthinks_critically(Brecken)",
            "negation": true
        },
        {
            "id": 10,
            "subject": "Brecken",
            "text": "Brecken does not speak frankly.",
            "fol": "\u00acp_13(Brecken)",
            "str_fol": "\u00acspeaks_frankly(Brecken)",
            "negation": true
        },
        {
            "id": 11,
            "subject": "Brecken",
            "text": "Brecken is not confident.",
            "fol": "\u00acp_12(Brecken)",
            "str_fol": "\u00acis_confident(Brecken)",
            "negation": true
        },
        {
            "id": 12,
            "subject": "Brecken",
            "text": "Brecken does not take risks.",
            "fol": "\u00acp_11(Brecken)",
            "str_fol": "\u00actakes_risks(Brecken)",
            "negation": true
        },
        {
            "id": 13,
            "subject": "Brecken",
            "text": "Brecken is not self-reliant.",
            "fol": "\u00acp_10(Brecken)",
            "str_fol": "\u00acself_reliant(Brecken)",
            "negation": true
        },
        {
            "id": 14,
            "subject": "Brecken",
            "text": "Brecken does not become independent.",
            "fol": "\u00acp_9(Brecken)",
            "str_fol": "\u00acbecome_independent(Brecken)",
            "negation": true
        },
        {
            "id": 15,
            "subject": "Brecken",
            "text": "Brecken travels alone.",
            "fol": "p_8(Brecken)",
            "str_fol": "travel_alone(Brecken)",
            "negation": false
        }
    ],
    "context_facts": [
        {
            "id": 6,
            "subject": "Brecken",
            "text": "Brecken is curious.",
            "fol": "p_6(Brecken)",
            "str_fol": "is_curious(Brecken)",
            "negation": false
        },
        {
            "id": 7,
            "subject": "Brecken",
            "text": "Brecken does not paint beautifully.",
            "fol": "\u00acp_7(Brecken)",
            "str_fol": "\u00acpaints_beautifully(Brecken)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Brecken",
            "text": "Brecken is adventurous.",
            "fol": "p_5(Brecken)",
            "str_fol": "is_adventurous(Brecken)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Brecken",
            "text": "Brecken does not inspire others.",
            "fol": "\u00acp_4(Brecken)",
            "str_fol": "\u00acinspires_others(Brecken)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Brecken",
            "text": "Brecken does not lead others.",
            "fol": "\u00acp_1(Brecken)",
            "str_fol": "\u00acleads_others(Brecken)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Brecken",
            "text": "Brecken faces challenges.",
            "fol": "p_3(Brecken)",
            "str_fol": "faces_challenges(Brecken)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Brecken",
            "text": "Brecken does not grow personally.",
            "fol": "\u00acp_2(Brecken)",
            "str_fol": "\u00acgrows_personally(Brecken)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Brecken",
            "text": "Brecken is open-minded.",
            "fol": "p_0(Brecken)",
            "str_fol": "be_open_minded(Brecken)",
            "negation": false
        }
    ],
    "context_rules": [
        {
            "id": 7,
            "text": "If Brecken is curious, then she either paints beautifully or writes creatively, but not both.",
            "fol": "p_6(Brecken) \u2192 (p_7(Brecken) \u2295 p_15(Brecken))",
            "str_fol": "is_curious(Brecken) \u2192 (paints_beautifully(Brecken) \u2295 writes_creatively(Brecken))"
        },
        {
            "id": 6,
            "text": "If Brecken is adventurous, then she either thinks critically or writes creatively, but not both.",
            "fol": "p_5(Brecken) \u2192 (p_14(Brecken) \u2295 p_15(Brecken))",
            "str_fol": "is_adventurous(Brecken) \u2192 (thinks_critically(Brecken) \u2295 writes_creatively(Brecken))"
        },
        {
            "id": 5,
            "text": "If Brecken either thinks critically or speaks frankly (but not both), then she inspires others.",
            "fol": "(p_14(Brecken) \u2295 p_13(Brecken)) \u2192 p_4(Brecken)",
            "str_fol": "(thinks_critically(Brecken) \u2295 speaks_frankly(Brecken)) \u2192 inspires_others(Brecken)"
        },
        {
            "id": 4,
            "text": "If Brecken is either confident or speaks frankly, then she leads others.",
            "fol": "(p_12(Brecken) \u2295 p_13(Brecken)) \u2192 p_1(Brecken)",
            "str_fol": "(is_confident(Brecken) \u2295 speaks_frankly(Brecken)) \u2192 leads_others(Brecken)"
        },
        {
            "id": 3,
            "text": "If someone takes risks and faces challenges, then they grow personally.",
            "fol": "\u2200x ((p_11(x) \u2227 p_3(x)) \u2192 p_2(x))",
            "str_fol": "\u2200x ((takes_risks(x) \u2227 faces_challenges(x)) \u2192 grows_personally(x))"
        },
        {
            "id": 2,
            "text": "If Brecken is either self-reliant or takes risks, then she is confident.",
            "fol": "(p_10(Brecken) \u2295 p_11(Brecken)) \u2192 p_12(Brecken)",
            "str_fol": "(self_reliant(Brecken) \u2295 takes_risks(Brecken)) \u2192 is_confident(Brecken)"
        },
        {
            "id": 1,
            "text": "If someone becomes independent, then they are self-reliant.",
            "fol": "\u2200x (p_9(x) \u2192 p_10(x))",
            "str_fol": "\u2200x (become_independent(x) \u2192 self_reliant(x))"
        },
        {
            "id": 0,
            "text": "For all humans, if they travel alone and are open-minded, then they will become independent.",
            "fol": "\u2200x ((p_8(x) \u2227 p_0(x)) \u2192 p_9(x))",
            "str_fol": "\u2200x ((travel_alone(x) \u2227 be_open_minded(x)) \u2192 become_independent(x))"
        }
    ],
    "context": [
        {
            "id": 6,
            "subject": "Brecken",
            "text": "Brecken is curious.",
            "fol": "p_6(Brecken)",
            "str_fol": "is_curious(Brecken)",
            "negation": false
        },
        {
            "id": 7,
            "subject": "Brecken",
            "text": "Brecken does not paint beautifully.",
            "fol": "\u00acp_7(Brecken)",
            "str_fol": "\u00acpaints_beautifully(Brecken)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Brecken",
            "text": "Brecken is adventurous.",
            "fol": "p_5(Brecken)",
            "str_fol": "is_adventurous(Brecken)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Brecken",
            "text": "Brecken does not inspire others.",
            "fol": "\u00acp_4(Brecken)",
            "str_fol": "\u00acinspires_others(Brecken)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Brecken",
            "text": "Brecken does not lead others.",
            "fol": "\u00acp_1(Brecken)",
            "str_fol": "\u00acleads_others(Brecken)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Brecken",
            "text": "Brecken faces challenges.",
            "fol": "p_3(Brecken)",
            "str_fol": "faces_challenges(Brecken)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Brecken",
            "text": "Brecken does not grow personally.",
            "fol": "\u00acp_2(Brecken)",
            "str_fol": "\u00acgrows_personally(Brecken)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Brecken",
            "text": "Brecken is open-minded.",
            "fol": "p_0(Brecken)",
            "str_fol": "be_open_minded(Brecken)",
            "negation": false
        },
        {
            "id": 7,
            "text": "If Brecken is curious, then she either paints beautifully or writes creatively, but not both.",
            "fol": "p_6(Brecken) \u2192 (p_7(Brecken) \u2295 p_15(Brecken))",
            "str_fol": "is_curious(Brecken) \u2192 (paints_beautifully(Brecken) \u2295 writes_creatively(Brecken))"
        },
        {
            "id": 6,
            "text": "If Brecken is adventurous, then she either thinks critically or writes creatively, but not both.",
            "fol": "p_5(Brecken) \u2192 (p_14(Brecken) \u2295 p_15(Brecken))",
            "str_fol": "is_adventurous(Brecken) \u2192 (thinks_critically(Brecken) \u2295 writes_creatively(Brecken))"
        },
        {
            "id": 5,
            "text": "If Brecken either thinks critically or speaks frankly (but not both), then she inspires others.",
            "fol": "(p_14(Brecken) \u2295 p_13(Brecken)) \u2192 p_4(Brecken)",
            "str_fol": "(thinks_critically(Brecken) \u2295 speaks_frankly(Brecken)) \u2192 inspires_others(Brecken)"
        },
        {
            "id": 4,
            "text": "If Brecken is either confident or speaks frankly, then she leads others.",
            "fol": "(p_12(Brecken) \u2295 p_13(Brecken)) \u2192 p_1(Brecken)",
            "str_fol": "(is_confident(Brecken) \u2295 speaks_frankly(Brecken)) \u2192 leads_others(Brecken)"
        },
        {
            "id": 3,
            "text": "If someone takes risks and faces challenges, then they grow personally.",
            "fol": "\u2200x ((p_11(x) \u2227 p_3(x)) \u2192 p_2(x))",
            "str_fol": "\u2200x ((takes_risks(x) \u2227 faces_challenges(x)) \u2192 grows_personally(x))"
        },
        {
            "id": 2,
            "text": "If Brecken is either self-reliant or takes risks, then she is confident.",
            "fol": "(p_10(Brecken) \u2295 p_11(Brecken)) \u2192 p_12(Brecken)",
            "str_fol": "(self_reliant(Brecken) \u2295 takes_risks(Brecken)) \u2192 is_confident(Brecken)"
        },
        {
            "id": 1,
            "text": "If someone becomes independent, then they are self-reliant.",
            "fol": "\u2200x (p_9(x) \u2192 p_10(x))",
            "str_fol": "\u2200x (become_independent(x) \u2192 self_reliant(x))"
        },
        {
            "id": 0,
            "text": "For all humans, if they travel alone and are open-minded, then they will become independent.",
            "fol": "\u2200x ((p_8(x) \u2227 p_0(x)) \u2192 p_9(x))",
            "str_fol": "\u2200x ((travel_alone(x) \u2227 be_open_minded(x)) \u2192 become_independent(x))"
        }
    ],
    "context_fol": "p_6(Brecken)\n\u00acp_7(Brecken)\np_5(Brecken)\n\u00acp_4(Brecken)\n\u00acp_1(Brecken)\np_3(Brecken)\n\u00acp_2(Brecken)\np_0(Brecken)\np_6(Brecken) \u2192 (p_7(Brecken) \u2295 p_15(Brecken))\np_5(Brecken) \u2192 (p_14(Brecken) \u2295 p_15(Brecken))\n(p_14(Brecken) \u2295 p_13(Brecken)) \u2192 p_4(Brecken)\n(p_12(Brecken) \u2295 p_13(Brecken)) \u2192 p_1(Brecken)\n\u2200x ((p_11(x) \u2227 p_3(x)) \u2192 p_2(x))\n(p_10(Brecken) \u2295 p_11(Brecken)) \u2192 p_12(Brecken)\n\u2200x (p_9(x) \u2192 p_10(x))\n\u2200x ((p_8(x) \u2227 p_0(x)) \u2192 p_9(x))",
    "conclusion": {
        "id": 15,
        "subject": "Brecken",
        "text": "Brecken travels alone.",
        "fol": "p_8(Brecken)",
        "str_fol": "travel_alone(Brecken)",
        "negation": false
    },
    "initial_answer": "False",
    "initial_goal": "p_8(Brecken)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 6,
                    "subject": "Brecken",
                    "text": "Brecken is curious.",
                    "fol": "p_6(Brecken)",
                    "str_fol": "is_curious(Brecken)",
                    "negation": false
                },
                {
                    "id": 7,
                    "subject": "Brecken",
                    "text": "Brecken does not paint beautifully.",
                    "fol": "\u00acp_7(Brecken)",
                    "str_fol": "\u00acpaints_beautifully(Brecken)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 7,
                    "text": "If Brecken is curious, then she either paints beautifully or writes creatively, but not both.",
                    "fol": "p_6(Brecken) \u2192 (p_7(Brecken) \u2295 p_15(Brecken))",
                    "str_fol": "is_curious(Brecken) \u2192 (paints_beautifully(Brecken) \u2295 writes_creatively(Brecken))"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Brecken",
                "text": "Brecken writes creatively.",
                "fol": "p_15(Brecken)",
                "str_fol": "writes_creatively(Brecken)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 5,
                    "subject": "Brecken",
                    "text": "Brecken is adventurous.",
                    "fol": "p_5(Brecken)",
                    "str_fol": "is_adventurous(Brecken)",
                    "negation": false
                },
                {
                    "id": 8,
                    "subject": "Brecken",
                    "text": "Brecken writes creatively.",
                    "fol": "p_15(Brecken)",
                    "str_fol": "writes_creatively(Brecken)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 6,
                    "text": "If Brecken is adventurous, then she either thinks critically or writes creatively, but not both.",
                    "fol": "p_5(Brecken) \u2192 (p_14(Brecken) \u2295 p_15(Brecken))",
                    "str_fol": "is_adventurous(Brecken) \u2192 (thinks_critically(Brecken) \u2295 writes_creatively(Brecken))"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Brecken",
                "text": "Brecken does not think critically.",
                "fol": "\u00acp_14(Brecken)",
                "str_fol": "\u00acthinks_critically(Brecken)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 9,
                    "subject": "Brecken",
                    "text": "Brecken does not think critically.",
                    "fol": "\u00acp_14(Brecken)",
                    "str_fol": "\u00acthinks_critically(Brecken)",
                    "negation": true
                },
                {
                    "id": 4,
                    "subject": "Brecken",
                    "text": "Brecken does not inspire others.",
                    "fol": "\u00acp_4(Brecken)",
                    "str_fol": "\u00acinspires_others(Brecken)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "If Brecken either thinks critically or speaks frankly (but not both), then she inspires others.",
                    "fol": "(p_14(Brecken) \u2295 p_13(Brecken)) \u2192 p_4(Brecken)",
                    "str_fol": "(thinks_critically(Brecken) \u2295 speaks_frankly(Brecken)) \u2192 inspires_others(Brecken)"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Brecken",
                "text": "Brecken does not speak frankly.",
                "fol": "\u00acp_13(Brecken)",
                "str_fol": "\u00acspeaks_frankly(Brecken)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 10,
                    "subject": "Brecken",
                    "text": "Brecken does not speak frankly.",
                    "fol": "\u00acp_13(Brecken)",
                    "str_fol": "\u00acspeaks_frankly(Brecken)",
                    "negation": true
                },
                {
                    "id": 1,
                    "subject": "Brecken",
                    "text": "Brecken does not lead others.",
                    "fol": "\u00acp_1(Brecken)",
                    "str_fol": "\u00acleads_others(Brecken)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "If Brecken is either confident or speaks frankly, then she leads others.",
                    "fol": "(p_12(Brecken) \u2295 p_13(Brecken)) \u2192 p_1(Brecken)",
                    "str_fol": "(is_confident(Brecken) \u2295 speaks_frankly(Brecken)) \u2192 leads_others(Brecken)"
                }
            ],
            "conclusion": {
                "id": 11,
                "subject": "Brecken",
                "text": "Brecken is not confident.",
                "fol": "\u00acp_12(Brecken)",
                "str_fol": "\u00acis_confident(Brecken)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 3,
                    "subject": "Brecken",
                    "text": "Brecken faces challenges.",
                    "fol": "p_3(Brecken)",
                    "str_fol": "faces_challenges(Brecken)",
                    "negation": false
                },
                {
                    "id": 2,
                    "subject": "Brecken",
                    "text": "Brecken does not grow personally.",
                    "fol": "\u00acp_2(Brecken)",
                    "str_fol": "\u00acgrows_personally(Brecken)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "If someone takes risks and faces challenges, then they grow personally.",
                    "fol": "\u2200x ((p_11(x) \u2227 p_3(x)) \u2192 p_2(x))",
                    "str_fol": "\u2200x ((takes_risks(x) \u2227 faces_challenges(x)) \u2192 grows_personally(x))"
                }
            ],
            "conclusion": {
                "id": 12,
                "subject": "Brecken",
                "text": "Brecken does not take risks.",
                "fol": "\u00acp_11(Brecken)",
                "str_fol": "\u00actakes_risks(Brecken)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 12,
                    "subject": "Brecken",
                    "text": "Brecken does not take risks.",
                    "fol": "\u00acp_11(Brecken)",
                    "str_fol": "\u00actakes_risks(Brecken)",
                    "negation": true
                },
                {
                    "id": 11,
                    "subject": "Brecken",
                    "text": "Brecken is not confident.",
                    "fol": "\u00acp_12(Brecken)",
                    "str_fol": "\u00acis_confident(Brecken)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "If Brecken is either self-reliant or takes risks, then she is confident.",
                    "fol": "(p_10(Brecken) \u2295 p_11(Brecken)) \u2192 p_12(Brecken)",
                    "str_fol": "(self_reliant(Brecken) \u2295 takes_risks(Brecken)) \u2192 is_confident(Brecken)"
                }
            ],
            "conclusion": {
                "id": 13,
                "subject": "Brecken",
                "text": "Brecken is not self-reliant.",
                "fol": "\u00acp_10(Brecken)",
                "str_fol": "\u00acself_reliant(Brecken)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 13,
                    "subject": "Brecken",
                    "text": "Brecken is not self-reliant.",
                    "fol": "\u00acp_10(Brecken)",
                    "str_fol": "\u00acself_reliant(Brecken)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "If someone becomes independent, then they are self-reliant.",
                    "fol": "\u2200x (p_9(x) \u2192 p_10(x))",
                    "str_fol": "\u2200x (become_independent(x) \u2192 self_reliant(x))"
                }
            ],
            "conclusion": {
                "id": 14,
                "subject": "Brecken",
                "text": "Brecken does not become independent.",
                "fol": "\u00acp_9(Brecken)",
                "str_fol": "\u00acbecome_independent(Brecken)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 0,
                    "subject": "Brecken",
                    "text": "Brecken is open-minded.",
                    "fol": "p_0(Brecken)",
                    "str_fol": "be_open_minded(Brecken)",
                    "negation": false
                },
                {
                    "id": 14,
                    "subject": "Brecken",
                    "text": "Brecken does not become independent.",
                    "fol": "\u00acp_9(Brecken)",
                    "str_fol": "\u00acbecome_independent(Brecken)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "For all humans, if they travel alone and are open-minded, then they will become independent.",
                    "fol": "\u2200x ((p_8(x) \u2227 p_0(x)) \u2192 p_9(x))",
                    "str_fol": "\u2200x ((travel_alone(x) \u2227 be_open_minded(x)) \u2192 become_independent(x))"
                }
            ],
            "conclusion": {
                "id": 15,
                "subject": "Brecken",
                "text": "Brecken travels alone.",
                "fol": "p_8(Brecken)",
                "str_fol": "travel_alone(Brecken)",
                "negation": false
            }
        }
    ],
    "proof_trace": "1 p_6(Brecken) -> -(p_7(Brecken) <-> p_15(Brecken)).  [assumption].\n2 p_5(Brecken) -> -(p_14(Brecken) <-> p_15(Brecken)).  [assumption].\n3 -(p_14(Brecken) <-> p_13(Brecken)) -> p_4(Brecken).  [assumption].\n4 -(p_12(Brecken) <-> p_13(Brecken)) -> p_1(Brecken).  [assumption].\n5 (all x (p_11(x) & p_3(x) -> p_2(x))).  [assumption].\n6 -(p_10(Brecken) <-> p_11(Brecken)) -> p_12(Brecken).  [assumption].\n7 (all x (p_9(x) -> p_10(x))).  [assumption].\n8 (all x (p_8(x) & p_0(x) -> p_9(x))).  [assumption].\n9 -p_8(Brecken).  [goal].\n10 -p_6(Brecken) | p_7(Brecken) | p_15(Brecken).  [clausify(1)].\n11 p_6(Brecken).  [assumption].\n13 p_7(Brecken) | p_15(Brecken).  [resolve(10,a,11,a)].\n14 -p_7(Brecken).  [assumption].\n17 p_5(Brecken).  [assumption].\n18 -p_5(Brecken) | -p_14(Brecken) | -p_15(Brecken).  [clausify(2)].\n20 -p_4(Brecken).  [assumption].\n21 p_14(Brecken) | -p_13(Brecken) | p_4(Brecken).  [clausify(3)].\n22 -p_12(Brecken) | p_13(Brecken) | p_1(Brecken).  [clausify(4)].\n23 -p_1(Brecken).  [assumption].\n25 -p_11(x) | -p_3(x) | p_2(x).  [clausify(5)].\n26 p_3(Brecken).  [assumption].\n27 -p_11(Brecken) | p_2(Brecken).  [resolve(25,b,26,a)].\n28 -p_2(Brecken).  [assumption].\n29 -p_8(x) | -p_0(x) | p_9(x).  [clausify(8)].\n30 p_0(Brecken).  [assumption].\n32 -p_10(Brecken) | p_11(Brecken) | p_12(Brecken).  [clausify(6)].\n33 -p_9(x) | p_10(x).  [clausify(7)].\n34 -p_8(Brecken) | p_9(Brecken).  [resolve(29,b,30,a)].\n35 p_8(Brecken).  [deny(9)].\n36 -p_14(Brecken) | -p_15(Brecken).  [resolve(18,a,17,a)].\n37 p_15(Brecken).  [resolve(13,a,14,a)].\n38 p_14(Brecken) | -p_13(Brecken).  [resolve(21,c,20,a)].\n40 -p_14(Brecken).  [resolve(36,b,37,a)].\n42 -p_12(Brecken) | p_13(Brecken).  [resolve(22,c,23,a)].\n43 -p_9(Brecken) | p_11(Brecken) | p_12(Brecken).  [resolve(33,b,32,a)].\n44 -p_9(Brecken) | p_11(Brecken) | p_13(Brecken).  [resolve(43,c,42,a)].\n45 -p_11(Brecken).  [resolve(27,b,28,a)].\n46 -p_9(Brecken) | p_13(Brecken).  [resolve(44,b,45,a)].\n47 p_9(Brecken).  [resolve(34,a,35,a)].\n48 p_13(Brecken).  [resolve(46,a,47,a)].\n49 -p_13(Brecken).  [resolve(40,a,38,a)].\n50 $F.  [resolve(48,a,49,a)].",
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_6(Brecken)\n\u00acp_7(Brecken)\np_5(Brecken)\n\u00acp_4(Brecken)\n\u00acp_1(Brecken)\np_3(Brecken)\n\u00acp_2(Brecken)\np_0(Brecken)\np_15(Brecken)\np_6(Brecken) \u2192 (p_7(Brecken) \u2295 p_15(Brecken))\np_6(Brecken) \u2192 p_15(Brecken)\np_5(Brecken) \u2192 (p_14(Brecken) \u2295 p_15(Brecken))\np_5(Brecken) \u2192 \u00acp_14(Brecken)\n(p_14(Brecken) \u2295 p_13(Brecken)) \u2192 p_4(Brecken)\n(p_12(Brecken) \u2295 p_13(Brecken)) \u2192 p_1(Brecken)\n\u2200x (\u00ac(p_11(x) \u2227 p_3(x)) \u2228 p_2(x))\n(p_10(Brecken) \u2295 p_11(Brecken)) \u2192 p_12(Brecken)\n\u2200x (\u00acp_9(x) \u2228 p_10(x))\n\u2200x ((p_8(x) \u2227 p_0(x)) \u2192 p_9(x))",
            "Initial Goal": "p_8(Brecken)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_6(Brecken)",
                    "-p_7(Brecken)",
                    "p_5(Brecken)",
                    "-p_4(Brecken)",
                    "-p_1(Brecken)",
                    "p_3(Brecken)",
                    "-p_2(Brecken)",
                    "p_0(Brecken)",
                    "p_15(Brecken)",
                    "p_6(Brecken) -> (-(p_7(Brecken) <-> p_15(Brecken)))",
                    "p_6(Brecken) -> p_15(Brecken)",
                    "p_5(Brecken) -> (-(p_14(Brecken) <-> p_15(Brecken)))",
                    "p_5(Brecken) -> -p_14(Brecken)",
                    "(-(p_14(Brecken) <-> p_13(Brecken))) -> p_4(Brecken)",
                    "(-(p_12(Brecken) <-> p_13(Brecken))) -> p_1(Brecken)",
                    "all x (-(p_11(x) & p_3(x)) | p_2(x))",
                    "(-(p_10(Brecken) <-> p_11(Brecken))) -> p_12(Brecken)",
                    "all x (-p_9(x) | p_10(x))",
                    "all x ((p_8(x) & p_0(x)) -> p_9(x))"
                ],
                "formulas(goals)": [
                    "-p_8(Brecken)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_15(Brecken)"
                ],
                "added_rules": [
                    "p_6(Brecken) \u2192 p_15(Brecken)",
                    "p_5(Brecken) \u2192 \u00acp_14(Brecken)",
                    "\u2200x (\u00ac(p_11(x) \u2227 p_3(x)) \u2228 p_2(x))",
                    "\u2200x (\u00acp_9(x) \u2228 p_10(x))"
                ]
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_6(Brecken)\n\u00acp_7(Brecken)\np_5(Brecken)\n\u00acp_4(Brecken)\n\u00acp_1(Brecken)\np_3(Brecken)\n\u00acp_2(Brecken)\np_0(Brecken)\np_15(Brecken)\np_6(Brecken) \u2192 (p_7(Brecken) \u2295 p_15(Brecken))\np_6(Brecken) \u2192 p_15(Brecken)\np_5(Brecken) \u2192 (p_14(Brecken) \u2295 p_15(Brecken))\np_5(Brecken) \u2192 \u00acp_14(Brecken)\n(p_14(Brecken) \u2295 p_13(Brecken)) \u2192 p_4(Brecken)\n(p_12(Brecken) \u2295 p_13(Brecken)) \u2192 p_1(Brecken)\n\u2200x (\u00ac(p_11(x) \u2227 p_3(x)) \u2228 p_2(x))\n(p_10(Brecken) \u2295 p_11(Brecken)) \u2192 p_12(Brecken)\n\u2200x (\u00acp_9(x) \u2228 p_10(x))\n(p_3(Brecken) \u2227 \u00acp_2(Brecken)) \u2192 p_8(Brecken)",
            "Initial Goal": "p_8(Brecken)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_6(Brecken)",
                    "-p_7(Brecken)",
                    "p_5(Brecken)",
                    "-p_4(Brecken)",
                    "-p_1(Brecken)",
                    "p_3(Brecken)",
                    "-p_2(Brecken)",
                    "p_0(Brecken)",
                    "p_15(Brecken)",
                    "p_6(Brecken) -> (-(p_7(Brecken) <-> p_15(Brecken)))",
                    "p_6(Brecken) -> p_15(Brecken)",
                    "p_5(Brecken) -> (-(p_14(Brecken) <-> p_15(Brecken)))",
                    "p_5(Brecken) -> -p_14(Brecken)",
                    "(-(p_14(Brecken) <-> p_13(Brecken))) -> p_4(Brecken)",
                    "(-(p_12(Brecken) <-> p_13(Brecken))) -> p_1(Brecken)",
                    "all x (-(p_11(x) & p_3(x)) | p_2(x))",
                    "(-(p_10(Brecken) <-> p_11(Brecken))) -> p_12(Brecken)",
                    "all x (-p_9(x) | p_10(x))",
                    "(p_3(Brecken) & -p_2(Brecken)) -> p_8(Brecken)"
                ],
                "formulas(goals)": [
                    "p_8(Brecken)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u2200x ((p_8(x) \u2227 p_0(x)) \u2192 p_9(x))"
                ],
                "added_facts": [],
                "added_rules": [
                    "(p_3(Brecken) \u2227 \u00acp_2(Brecken)) \u2192 p_8(Brecken)"
                ]
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_6(Brecken)\n\u00acp_7(Brecken)\np_5(Brecken)\n\u00acp_4(Brecken)\n\u00acp_1(Brecken)\np_3(Brecken)\n\u00acp_2(Brecken)\np_0(Brecken)\np_15(Brecken)\np_6(Brecken) \u2192 (p_7(Brecken) \u2295 p_15(Brecken))\np_6(Brecken) \u2192 p_15(Brecken)\np_5(Brecken) \u2192 (p_14(Brecken) \u2295 p_15(Brecken))\np_5(Brecken) \u2192 \u00acp_14(Brecken)\n(p_14(Brecken) \u2295 p_13(Brecken)) \u2192 p_4(Brecken)\n(p_12(Brecken) \u2295 p_13(Brecken)) \u2192 p_1(Brecken)\n\u2200x (\u00ac(p_11(x) \u2227 p_3(x)) \u2228 p_2(x))\n(p_10(Brecken) \u2295 p_11(Brecken)) \u2192 p_12(Brecken)\n\u2200x (\u00acp_9(x) \u2228 p_10(x))\np_8(Brecken) \u2192 p_2(Brecken)",
            "Initial Goal": "p_8(Brecken)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_6(Brecken)",
                    "-p_7(Brecken)",
                    "p_5(Brecken)",
                    "-p_4(Brecken)",
                    "-p_1(Brecken)",
                    "p_3(Brecken)",
                    "-p_2(Brecken)",
                    "p_0(Brecken)",
                    "p_15(Brecken)",
                    "p_6(Brecken) -> (-(p_7(Brecken) <-> p_15(Brecken)))",
                    "p_6(Brecken) -> p_15(Brecken)",
                    "p_5(Brecken) -> (-(p_14(Brecken) <-> p_15(Brecken)))",
                    "p_5(Brecken) -> -p_14(Brecken)",
                    "(-(p_14(Brecken) <-> p_13(Brecken))) -> p_4(Brecken)",
                    "(-(p_12(Brecken) <-> p_13(Brecken))) -> p_1(Brecken)",
                    "all x (-(p_11(x) & p_3(x)) | p_2(x))",
                    "(-(p_10(Brecken) <-> p_11(Brecken))) -> p_12(Brecken)",
                    "all x (-p_9(x) | p_10(x))",
                    "p_8(Brecken) -> p_2(Brecken)"
                ],
                "formulas(goals)": [
                    "-p_8(Brecken)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "(p_3(Brecken) \u2227 \u00acp_2(Brecken)) \u2192 p_8(Brecken)"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_8(Brecken) \u2192 p_2(Brecken)"
                ]
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_6(Brecken)\n\u00acp_7(Brecken)\np_5(Brecken)\n\u00acp_4(Brecken)\n\u00acp_1(Brecken)\np_3(Brecken)\n\u00acp_2(Brecken)\np_0(Brecken)\np_15(Brecken)\np_6(Brecken) \u2192 (p_7(Brecken) \u2295 p_15(Brecken))\np_6(Brecken) \u2192 p_15(Brecken)\np_5(Brecken) \u2192 (p_14(Brecken) \u2295 p_15(Brecken))\np_5(Brecken) \u2192 \u00acp_14(Brecken)\n(p_14(Brecken) \u2295 p_13(Brecken)) \u2192 p_4(Brecken)\n(p_12(Brecken) \u2295 p_13(Brecken)) \u2192 p_1(Brecken)\n\u2200x (\u00ac(p_11(x) \u2227 p_3(x)) \u2228 p_2(x))\n(p_10(Brecken) \u2295 p_11(Brecken)) \u2192 p_12(Brecken)\n\u2200x (\u00acp_9(x) \u2228 p_10(x))\np_8(Brecken) \u2192 p_2(Brecken)\np_5(Brecken) \u2192 p_15(Brecken)\n\u2200x ((p_11(x) \u2227 p_3(x)) \u2192 p_2(x))\n\u00acp_4(Brecken) \u2192 \u00ac(p_14(Brecken) \u2295 p_13(Brecken))\n\u00acp_1(Brecken) \u2192 \u00ac(p_12(Brecken) \u2295 p_13(Brecken))\n\u2200x (p_9(x) \u2192 p_10(x))\n\u00acp_8(Brecken)",
            "Initial Goal": "p_8(Brecken)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_6(Brecken)",
                    "-p_7(Brecken)",
                    "p_5(Brecken)",
                    "-p_4(Brecken)",
                    "-p_1(Brecken)",
                    "p_3(Brecken)",
                    "-p_2(Brecken)",
                    "p_0(Brecken)",
                    "p_15(Brecken)",
                    "p_6(Brecken) -> (-(p_7(Brecken) <-> p_15(Brecken)))",
                    "p_6(Brecken) -> p_15(Brecken)",
                    "p_5(Brecken) -> (-(p_14(Brecken) <-> p_15(Brecken)))",
                    "p_5(Brecken) -> -p_14(Brecken)",
                    "(-(p_14(Brecken) <-> p_13(Brecken))) -> p_4(Brecken)",
                    "(-(p_12(Brecken) <-> p_13(Brecken))) -> p_1(Brecken)",
                    "all x (-(p_11(x) & p_3(x)) | p_2(x))",
                    "(-(p_10(Brecken) <-> p_11(Brecken))) -> p_12(Brecken)",
                    "all x (-p_9(x) | p_10(x))",
                    "p_8(Brecken) -> p_2(Brecken)",
                    "p_5(Brecken) -> p_15(Brecken)",
                    "all x ((p_11(x) & p_3(x)) -> p_2(x))",
                    "-p_4(Brecken) -> (p_14(Brecken) <-> p_13(Brecken))",
                    "-p_1(Brecken) -> (p_12(Brecken) <-> p_13(Brecken))",
                    "all x (p_9(x) -> p_10(x))",
                    "-p_8(Brecken)"
                ],
                "formulas(goals)": [
                    "-p_8(Brecken)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "\u00acp_8(Brecken)"
                ],
                "added_rules": [
                    "p_5(Brecken) \u2192 p_15(Brecken)",
                    "\u2200x ((p_11(x) \u2227 p_3(x)) \u2192 p_2(x))",
                    "\u00acp_4(Brecken) \u2192 \u00ac(p_14(Brecken) \u2295 p_13(Brecken))",
                    "\u00acp_1(Brecken) \u2192 \u00ac(p_12(Brecken) \u2295 p_13(Brecken))",
                    "\u2200x (p_9(x) \u2192 p_10(x))"
                ]
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_6(Brecken)\n\u00acp_7(Brecken)\np_5(Brecken)\n\u00acp_4(Brecken)\n\u00acp_1(Brecken)\np_3(Brecken)\n\u00acp_2(Brecken)\np_0(Brecken)\np_15(Brecken)\np_6(Brecken) \u2192 (p_7(Brecken) \u2295 p_15(Brecken))\np_6(Brecken) \u2192 p_15(Brecken)\np_5(Brecken) \u2192 (p_14(Brecken) \u2295 p_15(Brecken))\np_5(Brecken) \u2192 \u00acp_14(Brecken)\n(p_14(Brecken) \u2295 p_13(Brecken)) \u2192 p_4(Brecken)\n(p_12(Brecken) \u2295 p_13(Brecken)) \u2192 p_1(Brecken)\n\u2200x (\u00ac(p_11(x) \u2227 p_3(x)) \u2228 p_2(x))\n(p_10(Brecken) \u2295 p_11(Brecken)) \u2192 p_12(Brecken)\n\u2200x (\u00acp_9(x) \u2228 p_10(x))\np_8(Brecken) \u2192 p_2(Brecken)\np_5(Brecken) \u2192 p_15(Brecken)\n\u2200x ((p_11(x) \u2227 p_3(x)) \u2192 p_2(x))\n\u00acp_4(Brecken) \u2192 \u00ac(p_14(Brecken) \u2295 p_13(Brecken))\n\u00acp_1(Brecken) \u2192 \u00ac(p_12(Brecken) \u2295 p_13(Brecken))\n\u2200x (p_9(x) \u2192 p_10(x))\n\u00acp_8(Brecken)\np_6(Brecken) \u2192 (p_15(Brecken) \u2295 p_7(Brecken))\np_5(Brecken) \u2192 (p_15(Brecken) \u2295 p_14(Brecken))\n\u00ac\u00ac(p_12(Brecken) \u2295 p_13(Brecken)) \u2192 (p_12(Brecken) \u2295 p_13(Brecken))\np_8(Brecken) \u2192 p_8(Brecken)\np_15(Brecken) \u2192 (p_6(Brecken) \u2192 p_15(Brecken))",
            "Initial Goal": "p_8(Brecken)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_6(Brecken).",
                    "-p_7(Brecken).",
                    "p_5(Brecken).",
                    "-p_4(Brecken).",
                    "-p_1(Brecken).",
                    "p_3(Brecken).",
                    "-p_2(Brecken).",
                    "p_0(Brecken).",
                    "p_15(Brecken).",
                    "p_6(Brecken) -> (-(p_7(Brecken) <-> p_15(Brecken))).",
                    "p_6(Brecken) -> p_15(Brecken).",
                    "p_5(Brecken) -> (-(p_14(Brecken) <-> p_15(Brecken))).",
                    "p_5(Brecken) -> -p_14(Brecken).",
                    "(-(p_14(Brecken) <-> p_13(Brecken))) -> p_4(Brecken).",
                    "(-(p_12(Brecken) <-> p_13(Brecken))) -> p_1(Brecken).",
                    "all x (-(p_11(x) & p_3(x)) | p_2(x)).",
                    "(-(p_10(Brecken) <-> p_11(Brecken))) -> p_12(Brecken).",
                    "all x (-p_9(x) | p_10(x)).",
                    "p_8(Brecken) -> p_2(Brecken).",
                    "p_5(Brecken) -> p_15(Brecken).",
                    "all x ((p_11(x) & p_3(x)) -> p_2(x)).",
                    "-p_4(Brecken) -> -(-(p_14(Brecken) <-> p_13(Brecken))).",
                    "-p_1(Brecken) -> -(-(p_12(Brecken) <-> p_13(Brecken))).",
                    "all x (p_9(x) -> p_10(x)).",
                    "-p_8(Brecken).",
                    "p_6(Brecken) -> (-(p_15(Brecken) <-> p_7(Brecken))).",
                    "p_5(Brecken) -> (-(p_15(Brecken) <-> p_14(Brecken))).",
                    "-(-(-(p_12(Brecken) <-> p_13(Brecken)))) -> (-(p_12(Brecken) <-> p_13(Brecken))).",
                    "p_8(Brecken) -> p_8(Brecken).",
                    "p_15(Brecken) -> (p_6(Brecken) -> p_15(Brecken))."
                ],
                "formulas(goals)": [
                    "-p_8(Brecken)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "p_6(Brecken) \u2192 (p_15(Brecken) \u2295 p_7(Brecken))",
                    "p_5(Brecken) \u2192 (p_15(Brecken) \u2295 p_14(Brecken))",
                    "\u00ac\u00ac(p_12(Brecken) \u2295 p_13(Brecken)) \u2192 (p_12(Brecken) \u2295 p_13(Brecken))",
                    "p_8(Brecken) \u2192 p_8(Brecken)",
                    "p_15(Brecken) \u2192 (p_6(Brecken) \u2192 p_15(Brecken))"
                ]
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_6(Brecken)\n\u00acp_7(Brecken)\np_5(Brecken)\n\u00acp_4(Brecken)\n\u00acp_1(Brecken)\np_3(Brecken)\n\u00acp_2(Brecken)\np_0(Brecken)\np_15(Brecken)\np_6(Brecken) \u2192 (p_7(Brecken) \u2295 p_15(Brecken))\np_6(Brecken) \u2192 p_15(Brecken)\np_5(Brecken) \u2192 (p_14(Brecken) \u2295 p_15(Brecken))\np_5(Brecken) \u2192 \u00acp_14(Brecken)\n(p_14(Brecken) \u2295 p_13(Brecken)) \u2192 p_4(Brecken)\n(p_12(Brecken) \u2295 p_13(Brecken)) \u2192 p_1(Brecken)\n\u2200x (\u00ac(p_11(x) \u2227 p_3(x)) \u2228 p_2(x))\n(p_10(Brecken) \u2295 p_11(Brecken)) \u2192 p_12(Brecken)\n\u2200x (\u00acp_9(x) \u2228 p_10(x))\np_5(Brecken) \u2192 p_15(Brecken)\n\u2200x ((p_11(x) \u2227 p_3(x)) \u2192 p_2(x))\n\u00acp_4(Brecken) \u2192 \u00ac(p_14(Brecken) \u2295 p_13(Brecken))\n\u00acp_1(Brecken) \u2192 \u00ac(p_12(Brecken) \u2295 p_13(Brecken))\n\u2200x (p_9(x) \u2192 p_10(x))\np_6(Brecken) \u2192 (p_15(Brecken) \u2295 p_7(Brecken))\np_5(Brecken) \u2192 (p_15(Brecken) \u2295 p_14(Brecken))\n\u00ac\u00ac(p_12(Brecken) \u2295 p_13(Brecken)) \u2192 (p_12(Brecken) \u2295 p_13(Brecken))\np_8(Brecken) \u2192 p_8(Brecken)\np_15(Brecken) \u2192 (p_6(Brecken) \u2192 p_15(Brecken))\np_15(Brecken) \u2192 p_8(Brecken)",
            "Initial Goal": "p_8(Brecken)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_6(Brecken)",
                    "-p_7(Brecken)",
                    "p_5(Brecken)",
                    "-p_4(Brecken)",
                    "-p_1(Brecken)",
                    "p_3(Brecken)",
                    "-p_2(Brecken)",
                    "p_0(Brecken)",
                    "p_15(Brecken)",
                    "p_6(Brecken) -> (-(p_7(Brecken) <-> p_15(Brecken)))",
                    "p_6(Brecken) -> p_15(Brecken)",
                    "p_5(Brecken) -> (-(p_14(Brecken) <-> p_15(Brecken)))",
                    "p_5(Brecken) -> -p_14(Brecken)",
                    "(-(p_14(Brecken) <-> p_13(Brecken))) -> p_4(Brecken)",
                    "(-(p_12(Brecken) <-> p_13(Brecken))) -> p_1(Brecken)",
                    "(all x (-(p_11(x) & p_3(x)) | p_2(x)))",
                    "(-(p_10(Brecken) <-> p_11(Brecken))) -> p_12(Brecken)",
                    "(all x (-p_9(x) | p_10(x)))",
                    "p_5(Brecken) -> p_15(Brecken)",
                    "(all x ((p_11(x) & p_3(x)) -> p_2(x)))",
                    "-p_4(Brecken) -> -(-(p_14(Brecken) <-> p_13(Brecken)))",
                    "-p_1(Brecken) -> -(-(p_12(Brecken) <-> p_13(Brecken)))",
                    "(all x (p_9(x) -> p_10(x)))",
                    "p_6(Brecken) -> (-(p_15(Brecken) <-> p_7(Brecken)))",
                    "p_5(Brecken) -> (-(p_15(Brecken) <-> p_14(Brecken)))",
                    "- -(-(p_12(Brecken) <-> p_13(Brecken))) -> (-(p_12(Brecken) <-> p_13(Brecken)))",
                    "p_8(Brecken) -> p_8(Brecken)",
                    "p_15(Brecken) -> (p_6(Brecken) -> p_15(Brecken))",
                    "p_15(Brecken) -> p_8(Brecken)"
                ],
                "formulas(goals)": [
                    "p_8(Brecken)"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "\u00acp_8(Brecken)"
                ],
                "removed_rules": [
                    "p_8(Brecken) \u2192 p_2(Brecken)"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_15(Brecken) \u2192 p_8(Brecken)"
                ]
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_6(Brecken)\n\u00acp_7(Brecken)\np_5(Brecken)\n\u00acp_4(Brecken)\n\u00acp_1(Brecken)\np_3(Brecken)\n\u00acp_2(Brecken)\np_0(Brecken)\np_15(Brecken)\np_6(Brecken) \u2192 (p_7(Brecken) \u2295 p_15(Brecken))\np_6(Brecken) \u2192 p_15(Brecken)\np_5(Brecken) \u2192 (p_14(Brecken) \u2295 p_15(Brecken))\np_5(Brecken) \u2192 \u00acp_14(Brecken)\n(p_14(Brecken) \u2295 p_13(Brecken)) \u2192 p_4(Brecken)\n(p_12(Brecken) \u2295 p_13(Brecken)) \u2192 p_1(Brecken)\n\u2200x (\u00ac(p_11(x) \u2227 p_3(x)) \u2228 p_2(x))\n(p_10(Brecken) \u2295 p_11(Brecken)) \u2192 p_12(Brecken)\n\u2200x (\u00acp_9(x) \u2228 p_10(x))\np_5(Brecken) \u2192 p_15(Brecken)\n\u2200x ((p_11(x) \u2227 p_3(x)) \u2192 p_2(x))\n\u00acp_4(Brecken) \u2192 \u00ac(p_14(Brecken) \u2295 p_13(Brecken))\n\u00acp_1(Brecken) \u2192 \u00ac(p_12(Brecken) \u2295 p_13(Brecken))\n\u2200x (p_9(x) \u2192 p_10(x))\np_6(Brecken) \u2192 (p_15(Brecken) \u2295 p_7(Brecken))\np_5(Brecken) \u2192 (p_15(Brecken) \u2295 p_14(Brecken))\n\u00ac\u00ac(p_12(Brecken) \u2295 p_13(Brecken)) \u2192 (p_12(Brecken) \u2295 p_13(Brecken))\np_8(Brecken) \u2192 p_8(Brecken)\np_15(Brecken) \u2192 (p_6(Brecken) \u2192 p_15(Brecken))\n(p_15(Brecken) \u2227 \u00acp_4(Brecken)) \u2192 \u00acp_8(Brecken)",
            "Initial Goal": "p_8(Brecken)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_6(Brecken).",
                    "-p_7(Brecken).",
                    "p_5(Brecken).",
                    "-p_4(Brecken).",
                    "-p_1(Brecken).",
                    "p_3(Brecken).",
                    "-p_2(Brecken).",
                    "p_0(Brecken).",
                    "p_15(Brecken).",
                    "p_6(Brecken) -> (-(p_7(Brecken) <-> p_15(Brecken))).",
                    "p_6(Brecken) -> p_15(Brecken).",
                    "p_5(Brecken) -> (-(p_14(Brecken) <-> p_15(Brecken))).",
                    "p_5(Brecken) -> -p_14(Brecken).",
                    "(-(p_14(Brecken) <-> p_13(Brecken))) -> p_4(Brecken).",
                    "(-(p_12(Brecken) <-> p_13(Brecken))) -> p_1(Brecken).",
                    "all x (-(p_11(x) & p_3(x)) | p_2(x)).",
                    "(-(p_10(Brecken) <-> p_11(Brecken))) -> p_12(Brecken).",
                    "all x (-p_9(x) | p_10(x)).",
                    "p_5(Brecken) -> p_15(Brecken).",
                    "all x ((p_11(x) & p_3(x)) -> p_2(x)).",
                    "-p_4(Brecken) -> -(-(p_14(Brecken) <-> p_13(Brecken))).",
                    "-p_1(Brecken) -> -(-(p_12(Brecken) <-> p_13(Brecken))).",
                    "all x (p_9(x) -> p_10(x)).",
                    "p_6(Brecken) -> (-(p_15(Brecken) <-> p_7(Brecken))).",
                    "p_5(Brecken) -> (-(p_15(Brecken) <-> p_14(Brecken))).",
                    "-(-(p_12(Brecken) <-> p_13(Brecken))) -> (-(p_12(Brecken) <-> p_13(Brecken))).",
                    "p_8(Brecken) -> p_8(Brecken).",
                    "p_15(Brecken) -> (p_6(Brecken) -> p_15(Brecken)).",
                    "(p_15(Brecken) & -p_4(Brecken)) -> -p_8(Brecken)."
                ],
                "formulas(goals)": [
                    "-p_8(Brecken)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_15(Brecken) \u2192 p_8(Brecken)"
                ],
                "added_facts": [],
                "added_rules": [
                    "(p_15(Brecken) \u2227 \u00acp_4(Brecken)) \u2192 \u00acp_8(Brecken)"
                ]
            }
        }
    ]
}