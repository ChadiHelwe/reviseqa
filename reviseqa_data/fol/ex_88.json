{
    "background_story": "Avery was a young and ambitious musician with a passion for marching bands. Growing up, he was fascinated by the works of John Philip Sousa, the legendary composer of iconic marches. Avery spent countless hours practicing his trumpet, perfecting his skills to honor the legacy of his idol. He eventually became the lead trumpeter in his college marching band, performing renditions of Sousa's classics like 'The Stars and Stripes Forever'. Avery's dedication and talent earned him a spot in a prestigious marching band competition, where he got to perform alongside other talented musicians from around the world. With every note he played, Avery felt a deep connection to Sousa's spirit, striving to keep the tradition of marching band music alive and thriving.",
    "predicates": [
        {
            "id": 0,
            "name": "teach_music"
        },
        {
            "id": 1,
            "name": "know_Sousa_music"
        },
        {
            "id": 2,
            "name": "create_music"
        },
        {
            "id": 3,
            "name": "is_musical"
        },
        {
            "id": 4,
            "name": "perform_live"
        },
        {
            "id": 5,
            "name": "record_albums"
        },
        {
            "id": 6,
            "name": "practice_trumpet"
        },
        {
            "id": 7,
            "name": "become_lead_trumpeter"
        },
        {
            "id": 8,
            "name": "join_band"
        },
        {
            "id": 9,
            "name": "compose_music"
        },
        {
            "id": 10,
            "name": "write_scores"
        },
        {
            "id": 11,
            "name": "play_instrument"
        },
        {
            "id": 12,
            "name": "arrange_songs"
        },
        {
            "id": 13,
            "name": "sing_songs"
        },
        {
            "id": 14,
            "name": "play_guitar"
        },
        {
            "id": 15,
            "name": "master_brass"
        },
        {
            "id": 16,
            "name": "love_music"
        },
        {
            "id": 17,
            "name": "attend_concerts"
        },
        {
            "id": 18,
            "name": "has_creativity"
        },
        {
            "id": 19,
            "name": "understands_rhythm"
        },
        {
            "id": 20,
            "name": "lead_ensemble"
        },
        {
            "id": 21,
            "name": "improvise_pieces"
        },
        {
            "id": 22,
            "name": "appreciate_music"
        },
        {
            "id": 23,
            "name": "dance_well"
        },
        {
            "id": 24,
            "name": "lead_orchestra"
        },
        {
            "id": 25,
            "name": "enjoy_rhythms"
        },
        {
            "id": 26,
            "name": "dance_perform"
        },
        {
            "id": 27,
            "name": "enjoy_music"
        },
        {
            "id": 28,
            "name": "appreciate_harmony"
        }
    ],
    "subject_name": "Avery",
    "subject_category": "human",
    "keyword": "sousa",
    "all_facts": [
        {
            "id": 0,
            "subject": "Avery",
            "text": "Avery does not teach music.",
            "fol": "\u00acp_0(Avery)",
            "str_fol": "\u00acteach_music(Avery)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Avery",
            "text": "Avery knows Sousa's music.",
            "fol": "p_1(Avery)",
            "str_fol": "know_Sousa_music(Avery)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Avery",
            "text": "Avery does not create music.",
            "fol": "\u00acp_2(Avery)",
            "str_fol": "\u00accreate_music(Avery)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Avery",
            "text": "Avery is not musical.",
            "fol": "\u00acp_3(Avery)",
            "str_fol": "\u00acis_musical(Avery)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Avery",
            "text": "Avery does not perform live.",
            "fol": "\u00acp_4(Avery)",
            "str_fol": "\u00acperform_live(Avery)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Avery",
            "text": "Avery does not record albums.",
            "fol": "\u00acp_5(Avery)",
            "str_fol": "\u00acrecord_albums(Avery)",
            "negation": true
        },
        {
            "id": 6,
            "subject": "Avery",
            "text": "Avery does not play the guitar.",
            "fol": "\u00acp_14(Avery)",
            "str_fol": "\u00acplay_guitar(Avery)",
            "negation": true
        },
        {
            "id": 7,
            "subject": "Avery",
            "text": "Avery does not sing songs.",
            "fol": "\u00acp_13(Avery)",
            "str_fol": "\u00acsing_songs(Avery)",
            "negation": true
        },
        {
            "id": 8,
            "subject": "Avery",
            "text": "Avery does not arrange songs.",
            "fol": "\u00acp_12(Avery)",
            "str_fol": "\u00acarrange_songs(Avery)",
            "negation": true
        },
        {
            "id": 9,
            "subject": "Avery",
            "text": "Avery plays an instrument.",
            "fol": "p_11(Avery)",
            "str_fol": "play_instrument(Avery)",
            "negation": false
        },
        {
            "id": 10,
            "subject": "Avery",
            "text": "Avery writes musical scores.",
            "fol": "p_10(Avery)",
            "str_fol": "write_scores(Avery)",
            "negation": false
        },
        {
            "id": 11,
            "subject": "Avery",
            "text": "Avery composes music.",
            "fol": "p_9(Avery)",
            "str_fol": "compose_music(Avery)",
            "negation": false
        },
        {
            "id": 12,
            "subject": "Avery",
            "text": "Avery joins a band.",
            "fol": "p_8(Avery)",
            "str_fol": "join_band(Avery)",
            "negation": false
        },
        {
            "id": 13,
            "subject": "Avery",
            "text": "Avery does not become a lead trumpeter.",
            "fol": "\u00acp_7(Avery)",
            "str_fol": "\u00acbecome_lead_trumpeter(Avery)",
            "negation": true
        },
        {
            "id": 14,
            "subject": "Avery",
            "text": "Avery practices the trumpet.",
            "fol": "p_6(Avery)",
            "str_fol": "practice_trumpet(Avery)",
            "negation": false
        }
    ],
    "context_facts": [
        {
            "id": 4,
            "subject": "Avery",
            "text": "Avery does not perform live.",
            "fol": "\u00acp_4(Avery)",
            "str_fol": "\u00acperform_live(Avery)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Avery",
            "text": "Avery does not record albums.",
            "fol": "\u00acp_5(Avery)",
            "str_fol": "\u00acrecord_albums(Avery)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Avery",
            "text": "Avery is not musical.",
            "fol": "\u00acp_3(Avery)",
            "str_fol": "\u00acis_musical(Avery)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Avery",
            "text": "Avery does not create music.",
            "fol": "\u00acp_2(Avery)",
            "str_fol": "\u00accreate_music(Avery)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Avery",
            "text": "Avery does not teach music.",
            "fol": "\u00acp_0(Avery)",
            "str_fol": "\u00acteach_music(Avery)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Avery",
            "text": "Avery knows Sousa's music.",
            "fol": "p_1(Avery)",
            "str_fol": "know_Sousa_music(Avery)",
            "negation": false
        }
    ],
    "context_rules": [
        {
            "id": 8,
            "text": "If Avery plays the guitar, then he either performs live or records albums.",
            "fol": "p_14(Avery) \u2192 (p_4(Avery) \u2228 p_5(Avery))",
            "str_fol": "play_guitar(Avery) \u2192 (perform_live(Avery) \u2228 record_albums(Avery))"
        },
        {
            "id": 7,
            "text": "If someone either sings songs or plays the guitar (but not both), then they are musical.",
            "fol": "\u2200x ((p_13(x) \u2295 p_14(x)) \u2192 p_3(x))",
            "str_fol": "\u2200x ((sing_songs(x) \u2295 play_guitar(x)) \u2192 is_musical(x))"
        },
        {
            "id": 6,
            "text": "If someone arranges songs, then they create music.",
            "fol": "\u2200x (p_12(x) \u2192 p_2(x))",
            "str_fol": "\u2200x (arrange_songs(x) \u2192 create_music(x))"
        },
        {
            "id": 5,
            "text": "Avery either plays an instrument or sings songs.",
            "fol": "p_11(Avery) \u2228 p_13(Avery)",
            "str_fol": "play_instrument(Avery) \u2228 sing_songs(Avery)"
        },
        {
            "id": 4,
            "text": "If Avery plays an instrument, then he either arranges songs or writes scores, but not both.",
            "fol": "p_11(Avery) \u2192 (p_12(Avery) \u2295 p_10(Avery))",
            "str_fol": "play_instrument(Avery) \u2192 (arrange_songs(Avery) \u2295 write_scores(Avery))"
        },
        {
            "id": 3,
            "text": "Anyone who writes musical scores is a music composer.",
            "fol": "\u2200x (p_10(x) \u2192 p_9(x))",
            "str_fol": "\u2200x (write_scores(x) \u2192 compose_music(x))"
        },
        {
            "id": 2,
            "text": "Either Avery teaches music or joins a band, but he does not do both.",
            "fol": "p_0(Avery) \u2295 p_8(Avery)",
            "str_fol": "teach_music(Avery) \u2295 join_band(Avery)"
        },
        {
            "id": 1,
            "text": "If Avery joins a band, then he is either a lead trumpeter or a music composer, but not both.",
            "fol": "p_8(Avery) \u2192 (p_7(Avery) \u2295 p_9(Avery))",
            "str_fol": "join_band(Avery) \u2192 (become_lead_trumpeter(Avery) \u2295 compose_music(Avery))"
        },
        {
            "id": 0,
            "text": "If Avery practices the trumpet and knows Sousa's music, then he can become a lead trumpeter.",
            "fol": "(p_6(Avery) \u2227 p_1(Avery)) \u2192 p_7(Avery)",
            "str_fol": "(practice_trumpet(Avery) \u2227 know_Sousa_music(Avery)) \u2192 become_lead_trumpeter(Avery)"
        }
    ],
    "context": [
        {
            "id": 4,
            "subject": "Avery",
            "text": "Avery does not perform live.",
            "fol": "\u00acp_4(Avery)",
            "str_fol": "\u00acperform_live(Avery)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Avery",
            "text": "Avery does not record albums.",
            "fol": "\u00acp_5(Avery)",
            "str_fol": "\u00acrecord_albums(Avery)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Avery",
            "text": "Avery is not musical.",
            "fol": "\u00acp_3(Avery)",
            "str_fol": "\u00acis_musical(Avery)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Avery",
            "text": "Avery does not create music.",
            "fol": "\u00acp_2(Avery)",
            "str_fol": "\u00accreate_music(Avery)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Avery",
            "text": "Avery does not teach music.",
            "fol": "\u00acp_0(Avery)",
            "str_fol": "\u00acteach_music(Avery)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Avery",
            "text": "Avery knows Sousa's music.",
            "fol": "p_1(Avery)",
            "str_fol": "know_Sousa_music(Avery)",
            "negation": false
        },
        {
            "id": 8,
            "text": "If Avery plays the guitar, then he either performs live or records albums.",
            "fol": "p_14(Avery) \u2192 (p_4(Avery) \u2228 p_5(Avery))",
            "str_fol": "play_guitar(Avery) \u2192 (perform_live(Avery) \u2228 record_albums(Avery))"
        },
        {
            "id": 7,
            "text": "If someone either sings songs or plays the guitar (but not both), then they are musical.",
            "fol": "\u2200x ((p_13(x) \u2295 p_14(x)) \u2192 p_3(x))",
            "str_fol": "\u2200x ((sing_songs(x) \u2295 play_guitar(x)) \u2192 is_musical(x))"
        },
        {
            "id": 6,
            "text": "If someone arranges songs, then they create music.",
            "fol": "\u2200x (p_12(x) \u2192 p_2(x))",
            "str_fol": "\u2200x (arrange_songs(x) \u2192 create_music(x))"
        },
        {
            "id": 5,
            "text": "Avery either plays an instrument or sings songs.",
            "fol": "p_11(Avery) \u2228 p_13(Avery)",
            "str_fol": "play_instrument(Avery) \u2228 sing_songs(Avery)"
        },
        {
            "id": 4,
            "text": "If Avery plays an instrument, then he either arranges songs or writes scores, but not both.",
            "fol": "p_11(Avery) \u2192 (p_12(Avery) \u2295 p_10(Avery))",
            "str_fol": "play_instrument(Avery) \u2192 (arrange_songs(Avery) \u2295 write_scores(Avery))"
        },
        {
            "id": 3,
            "text": "Anyone who writes musical scores is a music composer.",
            "fol": "\u2200x (p_10(x) \u2192 p_9(x))",
            "str_fol": "\u2200x (write_scores(x) \u2192 compose_music(x))"
        },
        {
            "id": 2,
            "text": "Either Avery teaches music or joins a band, but he does not do both.",
            "fol": "p_0(Avery) \u2295 p_8(Avery)",
            "str_fol": "teach_music(Avery) \u2295 join_band(Avery)"
        },
        {
            "id": 1,
            "text": "If Avery joins a band, then he is either a lead trumpeter or a music composer, but not both.",
            "fol": "p_8(Avery) \u2192 (p_7(Avery) \u2295 p_9(Avery))",
            "str_fol": "join_band(Avery) \u2192 (become_lead_trumpeter(Avery) \u2295 compose_music(Avery))"
        },
        {
            "id": 0,
            "text": "If Avery practices the trumpet and knows Sousa's music, then he can become a lead trumpeter.",
            "fol": "(p_6(Avery) \u2227 p_1(Avery)) \u2192 p_7(Avery)",
            "str_fol": "(practice_trumpet(Avery) \u2227 know_Sousa_music(Avery)) \u2192 become_lead_trumpeter(Avery)"
        }
    ],
    "context_fol": "\u00acp_4(Avery)\n\u00acp_5(Avery)\n\u00acp_3(Avery)\n\u00acp_2(Avery)\n\u00acp_0(Avery)\np_1(Avery)\np_14(Avery) \u2192 (p_4(Avery) \u2228 p_5(Avery))\n\u2200x ((p_13(x) \u2295 p_14(x)) \u2192 p_3(x))\n\u2200x (p_12(x) \u2192 p_2(x))\np_11(Avery) \u2228 p_13(Avery)\np_11(Avery) \u2192 (p_12(Avery) \u2295 p_10(Avery))\n\u2200x (p_10(x) \u2192 p_9(x))\np_0(Avery) \u2295 p_8(Avery)\np_8(Avery) \u2192 (p_7(Avery) \u2295 p_9(Avery))\n(p_6(Avery) \u2227 p_1(Avery)) \u2192 p_7(Avery)",
    "conclusion": {
        "id": 14,
        "subject": "Avery",
        "text": "Avery practices the trumpet.",
        "fol": "p_6(Avery)",
        "str_fol": "practice_trumpet(Avery)",
        "negation": false
    },
    "initial_answer": "False",
    "initial_goal": "p_6(Avery)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 4,
                    "subject": "Avery",
                    "text": "Avery does not perform live.",
                    "fol": "\u00acp_4(Avery)",
                    "str_fol": "\u00acperform_live(Avery)",
                    "negation": true
                },
                {
                    "id": 5,
                    "subject": "Avery",
                    "text": "Avery does not record albums.",
                    "fol": "\u00acp_5(Avery)",
                    "str_fol": "\u00acrecord_albums(Avery)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 8,
                    "text": "If Avery plays the guitar, then he either performs live or records albums.",
                    "fol": "p_14(Avery) \u2192 (p_4(Avery) \u2228 p_5(Avery))",
                    "str_fol": "play_guitar(Avery) \u2192 (perform_live(Avery) \u2228 record_albums(Avery))"
                }
            ],
            "conclusion": {
                "id": 6,
                "subject": "Avery",
                "text": "Avery does not play the guitar.",
                "fol": "\u00acp_14(Avery)",
                "str_fol": "\u00acplay_guitar(Avery)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 6,
                    "subject": "Avery",
                    "text": "Avery does not play the guitar.",
                    "fol": "\u00acp_14(Avery)",
                    "str_fol": "\u00acplay_guitar(Avery)",
                    "negation": true
                },
                {
                    "id": 3,
                    "subject": "Avery",
                    "text": "Avery is not musical.",
                    "fol": "\u00acp_3(Avery)",
                    "str_fol": "\u00acis_musical(Avery)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 7,
                    "text": "If someone either sings songs or plays the guitar (but not both), then they are musical.",
                    "fol": "\u2200x ((p_13(x) \u2295 p_14(x)) \u2192 p_3(x))",
                    "str_fol": "\u2200x ((sing_songs(x) \u2295 play_guitar(x)) \u2192 is_musical(x))"
                }
            ],
            "conclusion": {
                "id": 7,
                "subject": "Avery",
                "text": "Avery does not sing songs.",
                "fol": "\u00acp_13(Avery)",
                "str_fol": "\u00acsing_songs(Avery)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 2,
                    "subject": "Avery",
                    "text": "Avery does not create music.",
                    "fol": "\u00acp_2(Avery)",
                    "str_fol": "\u00accreate_music(Avery)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 6,
                    "text": "If someone arranges songs, then they create music.",
                    "fol": "\u2200x (p_12(x) \u2192 p_2(x))",
                    "str_fol": "\u2200x (arrange_songs(x) \u2192 create_music(x))"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Avery",
                "text": "Avery does not arrange songs.",
                "fol": "\u00acp_12(Avery)",
                "str_fol": "\u00acarrange_songs(Avery)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 7,
                    "subject": "Avery",
                    "text": "Avery does not sing songs.",
                    "fol": "\u00acp_13(Avery)",
                    "str_fol": "\u00acsing_songs(Avery)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "Avery either plays an instrument or sings songs.",
                    "fol": "p_11(Avery) \u2228 p_13(Avery)",
                    "str_fol": "play_instrument(Avery) \u2228 sing_songs(Avery)"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Avery",
                "text": "Avery plays an instrument.",
                "fol": "p_11(Avery)",
                "str_fol": "play_instrument(Avery)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 9,
                    "subject": "Avery",
                    "text": "Avery plays an instrument.",
                    "fol": "p_11(Avery)",
                    "str_fol": "play_instrument(Avery)",
                    "negation": false
                },
                {
                    "id": 8,
                    "subject": "Avery",
                    "text": "Avery does not arrange songs.",
                    "fol": "\u00acp_12(Avery)",
                    "str_fol": "\u00acarrange_songs(Avery)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "If Avery plays an instrument, then he either arranges songs or writes scores, but not both.",
                    "fol": "p_11(Avery) \u2192 (p_12(Avery) \u2295 p_10(Avery))",
                    "str_fol": "play_instrument(Avery) \u2192 (arrange_songs(Avery) \u2295 write_scores(Avery))"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Avery",
                "text": "Avery writes musical scores.",
                "fol": "p_10(Avery)",
                "str_fol": "write_scores(Avery)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 10,
                    "subject": "Avery",
                    "text": "Avery writes musical scores.",
                    "fol": "p_10(Avery)",
                    "str_fol": "write_scores(Avery)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "Anyone who writes musical scores is a music composer.",
                    "fol": "\u2200x (p_10(x) \u2192 p_9(x))",
                    "str_fol": "\u2200x (write_scores(x) \u2192 compose_music(x))"
                }
            ],
            "conclusion": {
                "id": 11,
                "subject": "Avery",
                "text": "Avery composes music.",
                "fol": "p_9(Avery)",
                "str_fol": "compose_music(Avery)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 0,
                    "subject": "Avery",
                    "text": "Avery does not teach music.",
                    "fol": "\u00acp_0(Avery)",
                    "str_fol": "\u00acteach_music(Avery)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "Either Avery teaches music or joins a band, but he does not do both.",
                    "fol": "p_0(Avery) \u2295 p_8(Avery)",
                    "str_fol": "teach_music(Avery) \u2295 join_band(Avery)"
                }
            ],
            "conclusion": {
                "id": 12,
                "subject": "Avery",
                "text": "Avery joins a band.",
                "fol": "p_8(Avery)",
                "str_fol": "join_band(Avery)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 12,
                    "subject": "Avery",
                    "text": "Avery joins a band.",
                    "fol": "p_8(Avery)",
                    "str_fol": "join_band(Avery)",
                    "negation": false
                },
                {
                    "id": 11,
                    "subject": "Avery",
                    "text": "Avery composes music.",
                    "fol": "p_9(Avery)",
                    "str_fol": "compose_music(Avery)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "If Avery joins a band, then he is either a lead trumpeter or a music composer, but not both.",
                    "fol": "p_8(Avery) \u2192 (p_7(Avery) \u2295 p_9(Avery))",
                    "str_fol": "join_band(Avery) \u2192 (become_lead_trumpeter(Avery) \u2295 compose_music(Avery))"
                }
            ],
            "conclusion": {
                "id": 13,
                "subject": "Avery",
                "text": "Avery does not become a lead trumpeter.",
                "fol": "\u00acp_7(Avery)",
                "str_fol": "\u00acbecome_lead_trumpeter(Avery)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 1,
                    "subject": "Avery",
                    "text": "Avery knows Sousa's music.",
                    "fol": "p_1(Avery)",
                    "str_fol": "know_Sousa_music(Avery)",
                    "negation": false
                },
                {
                    "id": 13,
                    "subject": "Avery",
                    "text": "Avery does not become a lead trumpeter.",
                    "fol": "\u00acp_7(Avery)",
                    "str_fol": "\u00acbecome_lead_trumpeter(Avery)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "If Avery practices the trumpet and knows Sousa's music, then he can become a lead trumpeter.",
                    "fol": "(p_6(Avery) \u2227 p_1(Avery)) \u2192 p_7(Avery)",
                    "str_fol": "(practice_trumpet(Avery) \u2227 know_Sousa_music(Avery)) \u2192 become_lead_trumpeter(Avery)"
                }
            ],
            "conclusion": {
                "id": 14,
                "subject": "Avery",
                "text": "Avery practices the trumpet.",
                "fol": "p_6(Avery)",
                "str_fol": "practice_trumpet(Avery)",
                "negation": false
            }
        }
    ],
    "proof_trace": "1 p_14(Avery) -> p_4(Avery) | p_5(Avery).  [assumption].\n2 (all x (-(p_13(x) <-> p_14(x)) -> p_3(x))).  [assumption].\n3 (all x (p_12(x) -> p_2(x))).  [assumption].\n4 p_11(Avery) -> -(p_12(Avery) <-> p_10(Avery)).  [assumption].\n5 (all x (p_10(x) -> p_9(x))).  [assumption].\n6 -(p_0(Avery) <-> p_8(Avery)).  [assumption].\n7 p_8(Avery) -> -(p_7(Avery) <-> p_9(Avery)).  [assumption].\n8 p_6(Avery) & p_1(Avery) -> p_7(Avery).  [assumption].\n9 -p_6(Avery).  [goal].\n10 -p_14(Avery) | p_4(Avery) | p_5(Avery).  [clausify(1)].\n11 -p_4(Avery).  [assumption].\n12 -p_14(Avery) | p_5(Avery).  [resolve(10,b,11,a)].\n13 -p_5(Avery).  [assumption].\n14 -p_13(x) | p_14(x) | p_3(x).  [clausify(2)].\n15 -p_3(Avery).  [assumption].\n17 -p_12(x) | p_2(x).  [clausify(3)].\n18 -p_2(Avery).  [assumption].\n19 p_0(Avery) | p_8(Avery).  [clausify(6)].\n20 -p_0(Avery).  [assumption].\n22 -p_6(Avery) | -p_1(Avery) | p_7(Avery).  [clausify(8)].\n23 p_1(Avery).  [assumption].\n24 -p_11(Avery) | p_12(Avery) | p_10(Avery).  [clausify(4)].\n25 p_11(Avery) | p_13(Avery).  [assumption].\n27 p_12(Avery) | p_10(Avery) | p_13(Avery).  [resolve(24,a,25,a)].\n28 -p_10(x) | p_9(x).  [clausify(5)].\n29 p_8(Avery).  [resolve(19,a,20,a)].\n31 -p_8(Avery) | -p_7(Avery) | -p_9(Avery).  [clausify(7)].\n32 -p_6(Avery) | p_7(Avery).  [resolve(22,b,23,a)].\n33 p_6(Avery).  [deny(9)].\n34 -p_13(Avery) | p_14(Avery).  [resolve(14,c,15,a)].\n35 -p_14(Avery).  [resolve(12,b,13,a)].\n36 p_12(Avery) | p_13(Avery) | p_9(Avery).  [resolve(27,b,28,a)].\n37 -p_12(Avery).  [resolve(17,b,18,a)].\n38 -p_7(Avery) | -p_9(Avery).  [resolve(29,a,31,a)].\n40 p_7(Avery).  [resolve(32,a,33,a)].\n41 p_13(Avery) | p_9(Avery).  [resolve(36,a,37,a)].\n42 -p_13(Avery).  [resolve(34,b,35,a)].\n43 p_9(Avery).  [resolve(41,a,42,a)].\n44 -p_9(Avery).  [resolve(40,a,38,a)].\n45 $F.  [resolve(43,a,44,a)].",
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_4(Avery)\n\u00acp_5(Avery)\n\u00acp_3(Avery)\n\u00acp_2(Avery)\n\u00acp_0(Avery)\np_1(Avery)\np_14(Avery) \u2192 (p_4(Avery) \u2228 p_5(Avery))\n\u2200x ((p_13(x) \u2295 p_14(x)) \u2192 p_3(x))\n\u2200x (p_12(x) \u2192 p_2(x))\np_11(Avery) \u2228 p_13(Avery)\np_11(Avery) \u2192 (p_12(Avery) \u2295 p_10(Avery))\n\u2200x (p_10(x) \u2192 p_9(x))\np_0(Avery) \u2295 p_8(Avery)\np_8(Avery) \u2192 (p_7(Avery) \u2295 p_9(Avery))\n(p_6(Avery) \u2227 p_1(Avery)) \u2192 p_7(Avery)\np_8(Avery)\n\u00acp_14(Avery)\n\u00acp_7(Avery) \u2192 \u00acp_6(Avery)\np_7(Avery) \u2192 \u00acp_9(Avery)\np_9(Avery) \u2192 \u00acp_7(Avery)\np_11(Avery) \u2192 (p_12(Avery) \u2228 p_10(Avery))\np_13(Avery) \u2194 p_14(Avery)",
            "Initial Goal": "p_6(Avery)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Avery)",
                    "-p_5(Avery)",
                    "-p_3(Avery)",
                    "-p_2(Avery)",
                    "-p_0(Avery)",
                    "p_1(Avery)",
                    "p_14(Avery) -> (p_4(Avery) | p_5(Avery))",
                    "all x (-(p_13(x) <-> p_14(x)) -> p_3(x))",
                    "all x (p_12(x) -> p_2(x))",
                    "p_11(Avery) | p_13(Avery)",
                    "p_11(Avery) -> -(p_12(Avery) <-> p_10(Avery))",
                    "all x (p_10(x) -> p_9(x))",
                    "-(p_0(Avery) <-> p_8(Avery))",
                    "p_8(Avery) -> -(p_7(Avery) <-> p_9(Avery))",
                    "(p_6(Avery) & p_1(Avery)) -> p_7(Avery)",
                    "p_8(Avery)",
                    "-p_14(Avery)",
                    "-p_7(Avery) -> -p_6(Avery)",
                    "p_7(Avery) -> -p_9(Avery)",
                    "p_9(Avery) -> -p_7(Avery)",
                    "p_11(Avery) -> (p_12(Avery) | p_10(Avery))",
                    "p_13(Avery) <-> p_14(Avery)"
                ],
                "formulas(goals)": [
                    "-p_6(Avery)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_8(Avery)",
                    "\u00acp_14(Avery)"
                ],
                "added_rules": [
                    "\u00acp_7(Avery) \u2192 \u00acp_6(Avery)",
                    "p_7(Avery) \u2192 \u00acp_9(Avery)",
                    "p_9(Avery) \u2192 \u00acp_7(Avery)",
                    "p_11(Avery) \u2192 (p_12(Avery) \u2228 p_10(Avery))",
                    "p_13(Avery) \u2194 p_14(Avery)"
                ]
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_4(Avery)\n\u00acp_5(Avery)\n\u00acp_3(Avery)\n\u00acp_2(Avery)\n\u00acp_0(Avery)\np_1(Avery)\np_14(Avery) \u2192 (p_4(Avery) \u2228 p_5(Avery))\n\u2200x ((p_13(x) \u2295 p_14(x)) \u2192 p_3(x))\n\u2200x (p_12(x) \u2192 p_2(x))\np_11(Avery) \u2228 p_13(Avery)\np_11(Avery) \u2192 p_10(Avery)\n\u2200x (p_10(x) \u2192 p_9(x))\np_0(Avery) \u2295 p_8(Avery)\np_8(Avery) \u2192 (\u00acp_7(Avery) \u2227 p_9(Avery))\n(p_6(Avery) \u2227 p_1(Avery)) \u2192 \u00acp_7(Avery)\np_8(Avery)\n\u00acp_14(Avery)\np_7(Avery) \u2192 \u00acp_9(Avery)\np_9(Avery) \u2192 \u00acp_7(Avery)\np_11(Avery) \u2192 (p_12(Avery) \u2228 p_10(Avery))\np_13(Avery) \u2192 \u00acp_14(Avery)\np_9(Avery) \u2192 p_6(Avery)",
            "Initial Goal": "p_6(Avery)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Avery)",
                    "-p_5(Avery)",
                    "-p_3(Avery)",
                    "-p_2(Avery)",
                    "-p_0(Avery)",
                    "p_1(Avery)",
                    "p_14(Avery) -> (p_4(Avery) | p_5(Avery))",
                    "all x (-(p_13(x) <-> p_14(x)) -> p_3(x))",
                    "all x (p_12(x) -> p_2(x))",
                    "p_11(Avery) | p_13(Avery)",
                    "p_11(Avery) -> p_10(Avery)",
                    "all x (p_10(x) -> p_9(x))",
                    "-(p_0(Avery) <-> p_8(Avery))",
                    "p_8(Avery) -> (-p_7(Avery) & p_9(Avery))",
                    "(p_6(Avery) & p_1(Avery)) -> -p_7(Avery)",
                    "p_8(Avery)",
                    "-p_14(Avery)",
                    "p_7(Avery) -> -p_9(Avery)",
                    "p_9(Avery) -> -p_7(Avery)",
                    "p_11(Avery) -> (p_12(Avery) | p_10(Avery))",
                    "p_13(Avery) -> -p_14(Avery)",
                    "p_9(Avery) -> p_6(Avery)"
                ],
                "formulas(goals)": [
                    "p_6(Avery)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u00acp_7(Avery) \u2192 \u00acp_6(Avery)",
                    "p_11(Avery) \u2192 (p_12(Avery) \u2295 p_10(Avery))",
                    "p_8(Avery) \u2192 (p_7(Avery) \u2295 p_9(Avery))",
                    "(p_6(Avery) \u2227 p_1(Avery)) \u2192 p_7(Avery)",
                    "p_13(Avery) \u2194 p_14(Avery)"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_11(Avery) \u2192 p_10(Avery)",
                    "p_8(Avery) \u2192 (\u00acp_7(Avery) \u2227 p_9(Avery))",
                    "(p_6(Avery) \u2227 p_1(Avery)) \u2192 \u00acp_7(Avery)",
                    "p_13(Avery) \u2192 \u00acp_14(Avery)",
                    "p_9(Avery) \u2192 p_6(Avery)"
                ]
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_4(Avery)\n\u00acp_5(Avery)\n\u00acp_3(Avery)\n\u00acp_2(Avery)\n\u00acp_0(Avery)\np_1(Avery)\np_14(Avery) \u2192 (p_4(Avery) \u2228 p_5(Avery))\n\u2200x ((p_13(x) \u2295 p_14(x)) \u2192 p_3(x))\n\u2200x (p_12(x) \u2192 p_2(x))\np_11(Avery) \u2228 p_13(Avery)\np_11(Avery) \u2192 p_10(Avery)\n\u2200x (p_10(x) \u2192 p_9(x))\np_0(Avery) \u2295 p_8(Avery)\np_8(Avery) \u2192 \u00acp_7(Avery)\np_8(Avery) \u2192 p_9(Avery)\n(p_6(Avery) \u2227 p_1(Avery)) \u2192 \u00acp_7(Avery)\np_8(Avery)\n\u00acp_14(Avery)\np_7(Avery) \u2192 \u00acp_9(Avery)\np_9(Avery) \u2192 \u00acp_7(Avery)\np_11(Avery) \u2192 (p_12(Avery) \u2228 p_10(Avery))\np_13(Avery) \u2192 \u00acp_14(Avery)\np_9(Avery) \u2192 p_6(Avery)\np_9(Avery)\n\u00acp_7(Avery)\np_6(Avery)\np_10(Avery) \u2192 p_6(Avery)\np_11(Avery) \u2192 p_6(Avery)\np_13(Avery) \u2192 p_3(Avery)\np_12(Avery) \u2192 p_2(Avery)\np_11(Avery) \u2192 p_9(Avery)",
            "Initial Goal": "p_6(Avery)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(avery)",
                    "-p_5(avery)",
                    "-p_3(avery)",
                    "-p_2(avery)",
                    "-p_0(avery)",
                    "p_1(avery)",
                    "p_14(avery) -> (p_4(avery) | p_5(avery))",
                    "all x (-(p_13(x) <-> p_14(x)) -> p_3(x))",
                    "all x (p_12(x) -> p_2(x))",
                    "p_11(avery) | p_13(avery)",
                    "p_11(avery) -> p_10(avery)",
                    "all x (p_10(x) -> p_9(x))",
                    "-(p_0(avery) <-> p_8(avery))",
                    "p_8(avery) -> -p_7(avery)",
                    "p_8(avery) -> p_9(avery)",
                    "(p_6(avery) & p_1(avery)) -> -p_7(avery)",
                    "p_8(avery)",
                    "-p_14(avery)",
                    "p_7(avery) -> -p_9(avery)",
                    "p_9(avery) -> -p_7(avery)",
                    "p_11(avery) -> (p_12(avery) | p_10(avery))",
                    "p_13(avery) -> -p_14(avery)",
                    "p_9(avery) -> p_6(avery)",
                    "p_9(avery)",
                    "-p_7(avery)",
                    "p_6(avery)",
                    "p_10(avery) -> p_6(avery)",
                    "p_11(avery) -> p_6(avery)",
                    "p_13(avery) -> p_3(avery)",
                    "p_12(avery) -> p_2(avery)",
                    "p_11(avery) -> p_9(avery)"
                ],
                "formulas(goals)": [
                    "p_6(avery)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_8(Avery) \u2192 (\u00acp_7(Avery) \u2227 p_9(Avery))"
                ],
                "added_facts": [
                    "p_9(Avery)",
                    "\u00acp_7(Avery)",
                    "p_6(Avery)"
                ],
                "added_rules": [
                    "p_8(Avery) \u2192 \u00acp_7(Avery)",
                    "p_8(Avery) \u2192 p_9(Avery)",
                    "p_10(Avery) \u2192 p_6(Avery)",
                    "p_11(Avery) \u2192 p_6(Avery)",
                    "p_13(Avery) \u2192 p_3(Avery)",
                    "p_12(Avery) \u2192 p_2(Avery)",
                    "p_11(Avery) \u2192 p_9(Avery)"
                ]
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_4(Avery)\n\u00acp_5(Avery)\n\u00acp_3(Avery)\n\u00acp_2(Avery)\n\u00acp_0(Avery)\np_1(Avery)\n\u00acp_14(Avery) \u2228 p_4(Avery) \u2228 p_5(Avery)\n\u2200x (\u00ac(p_13(x) \u2194 p_14(x)) \u2192 p_3(x))\n\u2200x (p_12(x) \u2192 p_2(x))\np_11(Avery) \u2228 p_13(Avery)\np_11(Avery) \u2192 p_10(Avery)\n\u2200x (p_10(x) \u2192 p_9(x))\n\u00ac(p_0(Avery) \u2194 p_8(Avery))\np_8(Avery) \u2192 \u00acp_7(Avery)\np_8(Avery) \u2192 p_9(Avery)\n\u00acp_6(Avery) \u2228 \u00acp_1(Avery) \u2228 \u00acp_7(Avery)\np_8(Avery)\n\u00acp_14(Avery)\np_7(Avery) \u2192 \u00acp_9(Avery)\np_9(Avery) \u2192 \u00acp_7(Avery)\np_11(Avery) \u2192 (p_12(Avery) \u2228 p_10(Avery))\np_13(Avery) \u2192 \u00acp_14(Avery)\np_9(Avery) \u2192 p_6(Avery)\np_9(Avery)\n\u00acp_7(Avery)\np_6(Avery)\np_10(Avery) \u2192 p_6(Avery)\np_11(Avery) \u2192 p_6(Avery)\np_13(Avery) \u2192 p_3(Avery)\np_12(Avery) \u2192 p_2(Avery)\np_11(Avery) \u2192 p_9(Avery)\np_7(Avery) \u2192 \u00acp_8(Avery)\np_9(Avery) \u2227 p_6(Avery)",
            "Initial Goal": "p_6(Avery)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Avery)",
                    "-p_5(Avery)",
                    "-p_3(Avery)",
                    "-p_2(Avery)",
                    "-p_0(Avery)",
                    "p_1(Avery)",
                    "(-p_14(Avery) | p_4(Avery) | p_5(Avery))",
                    "(all x (-(p_13(x) <-> p_14(x)) -> p_3(x)))",
                    "(all x (p_12(x) -> p_2(x)))",
                    "(p_11(Avery) | p_13(Avery))",
                    "(p_11(Avery) -> p_10(Avery))",
                    "(all x (p_10(x) -> p_9(x)))",
                    "(-(p_0(Avery) <-> p_8(Avery)))",
                    "(p_8(Avery) -> -p_7(Avery))",
                    "(p_8(Avery) -> p_9(Avery))",
                    "(-p_6(Avery) | -p_1(Avery) | -p_7(Avery))",
                    "p_8(Avery)",
                    "-p_14(Avery)",
                    "(p_7(Avery) -> -p_9(Avery))",
                    "(p_9(Avery) -> -p_7(Avery))",
                    "(p_11(Avery) -> (p_12(Avery) | p_10(Avery)))",
                    "(p_13(Avery) -> -p_14(Avery))",
                    "(p_9(Avery) -> p_6(Avery))",
                    "p_9(Avery)",
                    "-p_7(Avery)",
                    "p_6(Avery)",
                    "(p_10(Avery) -> p_6(Avery))",
                    "(p_11(Avery) -> p_6(Avery))",
                    "(p_13(Avery) -> p_3(Avery))",
                    "(p_12(Avery) -> p_2(Avery))",
                    "(p_11(Avery) -> p_9(Avery))",
                    "(p_7(Avery) -> -p_8(Avery))",
                    "(p_9(Avery) & p_6(Avery))"
                ],
                "formulas(goals)": [
                    "p_6(Avery)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_14(Avery) \u2192 (p_4(Avery) \u2228 p_5(Avery))",
                    "(p_6(Avery) \u2227 p_1(Avery)) \u2192 \u00acp_7(Avery)",
                    "\u2200x ((p_13(x) \u2295 p_14(x)) \u2192 p_3(x))",
                    "p_0(Avery) \u2295 p_8(Avery)"
                ],
                "added_facts": [
                    "p_9(Avery) \u2227 p_6(Avery)"
                ],
                "added_rules": [
                    "\u00acp_14(Avery) \u2228 p_4(Avery) \u2228 p_5(Avery)",
                    "\u2200x (\u00ac(p_13(x) \u2194 p_14(x)) \u2192 p_3(x))",
                    "\u00ac(p_0(Avery) \u2194 p_8(Avery))",
                    "\u00acp_6(Avery) \u2228 \u00acp_1(Avery) \u2228 \u00acp_7(Avery)",
                    "p_7(Avery) \u2192 \u00acp_8(Avery)"
                ]
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_3(Avery)\np_13(Avery) \u2192 p_3(Avery)\np_11(Avery) \u2228 p_13(Avery)\np_11(Avery) \u2192 \u00acp_6(Avery)\np_11(Avery)",
            "Initial Goal": "p_6(Avery)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_3(Avery)",
                    "-p_13(Avery) | p_3(Avery)",
                    "p_11(Avery) | p_13(Avery)",
                    "-p_11(Avery) | -p_6(Avery)",
                    "p_11(Avery)"
                ],
                "formulas(goals)": [
                    "-p_6(Avery)"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "p_6(Avery)",
                    "p_9(Avery) \u2227 p_6(Avery)"
                ],
                "removed_rules": [
                    "p_11(Avery) \u2192 p_6(Avery)",
                    "p_9(Avery) \u2192 p_6(Avery)"
                ],
                "added_facts": [
                    "p_11(Avery)"
                ],
                "added_rules": [
                    "p_11(Avery) \u2192 \u00acp_6(Avery)"
                ]
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_3(Avery)\np_13(Avery) \u2192 p_3(Avery)\np_11(Avery) \u2228 p_13(Avery)\n\u00ac(p_11(Avery) \u2227 p_6(Avery))\np_11(Avery)\n\u00acp_13(Avery)\np_11(Avery) \u2228 \u00acp_11(Avery)",
            "Initial Goal": "p_6(Avery)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_3(Avery).",
                    "p_13(Avery) -> p_3(Avery).",
                    "p_11(Avery) | p_13(Avery).",
                    "-(p_11(Avery) & p_6(Avery)).",
                    "p_11(Avery).",
                    "-p_13(Avery).",
                    "p_11(Avery) | -p_11(Avery)."
                ],
                "formulas(goals)": [
                    "-p_6(Avery)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_11(Avery) \u2192 \u00acp_6(Avery)"
                ],
                "added_facts": [
                    "\u00acp_13(Avery)",
                    "p_11(Avery) \u2228 \u00acp_11(Avery)"
                ],
                "added_rules": [
                    "\u00ac(p_11(Avery) \u2227 p_6(Avery))"
                ]
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_3(Avery)\np_13(Avery) \u2192 p_3(Avery)\np_11(Avery) \u2228 p_13(Avery)\n\u00acp_11(Avery) \u2228 \u00acp_6(Avery)\np_11(Avery)\n\u00acp_13(Avery)\n\u00acp_6(Avery)",
            "Initial Goal": "p_6(Avery)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_3(Avery)",
                    "p_13(Avery) -> p_3(Avery)",
                    "p_11(Avery) | p_13(Avery)",
                    "-p_11(Avery) | -p_6(Avery)",
                    "p_11(Avery)",
                    "-p_13(Avery)",
                    "-p_6(Avery)"
                ],
                "formulas(goals)": [
                    "-p_6(Avery)"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "\u00ac(p_11(Avery) \u2227 p_6(Avery))"
                ],
                "removed_rules": [],
                "added_facts": [
                    "\u00acp_6(Avery)"
                ],
                "added_rules": [
                    "\u00acp_11(Avery) \u2228 \u00acp_6(Avery)"
                ]
            }
        }
    ]
}