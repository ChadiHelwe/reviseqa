{
    "background_story": "In a bizarre incident, Superman encountered an unusual enemy - a virion, a tiny infectious agent that threatened to destroy the Earth's ecosystem. The virion, known as 'The Devourer', had the ability to infect and control all forms of life, turning them into mindless drones. Superman, with his superhuman strength and speed, tried to stop it but found himself vulnerable to its unique powers. The virion infected Superman, causing him to lose control of his actions. However, Superman's strong will and the help of his allies, including Lois Lane and the Justice League, eventually led to the development of an antidote. With his strength restored, Superman was able to defeat the virion and save humanity from its deadly grasp, proving once again why he is the hero the world needs.",
    "predicates": [
        {
            "id": 0,
            "name": "has_super_strength"
        },
        {
            "id": 1,
            "name": "fights_crime"
        },
        {
            "id": 2,
            "name": "saves_lives"
        },
        {
            "id": 3,
            "name": "sees_through_deception"
        },
        {
            "id": 4,
            "name": "is_selfless"
        },
        {
            "id": 5,
            "name": "can_save_humanity"
        },
        {
            "id": 6,
            "name": "is_protector"
        },
        {
            "id": 7,
            "name": "has_courage"
        },
        {
            "id": 8,
            "name": "defends_city"
        },
        {
            "id": 9,
            "name": "uses_xray"
        },
        {
            "id": 10,
            "name": "flies_fast"
        },
        {
            "id": 11,
            "name": "has_allies"
        },
        {
            "id": 12,
            "name": "is_powerful"
        },
        {
            "id": 13,
            "name": "stops_villains"
        },
        {
            "id": 14,
            "name": "guards_innocent"
        },
        {
            "id": 15,
            "name": "fights_villains"
        },
        {
            "id": 16,
            "name": "faces_threats"
        },
        {
            "id": 17,
            "name": "possesses_powers"
        },
        {
            "id": 18,
            "name": "patrols_night"
        },
        {
            "id": 19,
            "name": "leads_team"
        },
        {
            "id": 20,
            "name": "is_strategic"
        },
        {
            "id": 21,
            "name": "allies"
        }
    ],
    "subject_name": "Superman",
    "subject_category": "superhero",
    "keyword": "virion",
    "all_facts": [
        {
            "id": 0,
            "subject": "Superman",
            "text": "Superman has super strength.",
            "fol": "p_0(Superman)",
            "str_fol": "has_super_strength(Superman)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Superman",
            "text": "Superman does not fight crime.",
            "fol": "\u00acp_1(Superman)",
            "str_fol": "\u00acfights_crime(Superman)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Superman",
            "text": "Superman saves lives.",
            "fol": "p_2(Superman)",
            "str_fol": "saves_lives(Superman)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Superman",
            "text": "Superman does not see through deception.",
            "fol": "\u00acp_3(Superman)",
            "str_fol": "\u00acsees_through_deception(Superman)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Superman",
            "text": "Superman is not selfless.",
            "fol": "\u00acp_4(Superman)",
            "str_fol": "\u00acis_selfless(Superman)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Superman",
            "text": "Superman has courage.",
            "fol": "p_7(Superman)",
            "str_fol": "has_courage(Superman)",
            "negation": false
        },
        {
            "id": 6,
            "subject": "Superman",
            "text": "Superman uses his X-ray vision.",
            "fol": "p_9(Superman)",
            "str_fol": "uses_xray(Superman)",
            "negation": false
        },
        {
            "id": 7,
            "subject": "Superman",
            "text": "Superman does not defend the city.",
            "fol": "\u00acp_8(Superman)",
            "str_fol": "\u00acdefends_city(Superman)",
            "negation": true
        },
        {
            "id": 8,
            "subject": "Superman",
            "text": "Superman is not a protector.",
            "fol": "\u00acp_6(Superman)",
            "str_fol": "\u00acis_protector(Superman)",
            "negation": true
        },
        {
            "id": 9,
            "subject": "Superman",
            "text": "Superman cannot save humanity.",
            "fol": "\u00acp_5(Superman)",
            "str_fol": "\u00accan_save_humanity(Superman)",
            "negation": true
        },
        {
            "id": 10,
            "subject": "Superman",
            "text": "If Superman has super strength or has allies (or both), then he can save humanity.",
            "fol": "(p_0(Superman) \u2228 has_allies(Superman)) \u2192 can_save_humanity(Superman)",
            "str_fol": "(has_super_strength(Superman) \u2228 has_allies(Superman)) \u2192 can_save_humanity(Superman)",
            "negation": false
        }
    ],
    "context_facts": [
        {
            "id": 4,
            "subject": "Superman",
            "text": "Superman is not selfless.",
            "fol": "\u00acp_4(Superman)",
            "str_fol": "\u00acis_selfless(Superman)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Superman",
            "text": "Superman does not see through deception.",
            "fol": "\u00acp_3(Superman)",
            "str_fol": "\u00acsees_through_deception(Superman)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Superman",
            "text": "Superman saves lives.",
            "fol": "p_2(Superman)",
            "str_fol": "saves_lives(Superman)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Superman",
            "text": "Superman does not fight crime.",
            "fol": "\u00acp_1(Superman)",
            "str_fol": "\u00acfights_crime(Superman)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Superman",
            "text": "Superman has super strength.",
            "fol": "p_0(Superman)",
            "str_fol": "has_super_strength(Superman)",
            "negation": false
        }
    ],
    "context_rules": [
        {
            "id": 5,
            "text": "Superman is either selfless or courageous, but not necessarily both.",
            "fol": "p_4(Superman) \u2295 p_7(Superman)",
            "str_fol": "is_selfless(Superman) \u2295 has_courage(Superman)"
        },
        {
            "id": 4,
            "text": "Superman either uses X-ray vision or sees through deception, but not both simultaneously.",
            "fol": "p_9(Superman) \u2295 p_3(Superman)",
            "str_fol": "uses_xray(Superman) \u2295 sees_through_deception(Superman)"
        },
        {
            "id": 3,
            "text": "If Superman either flies fast or has allies (but not both), then he saves lives.",
            "fol": "(p_10(Superman) \u2295 p_11(Superman)) \u2192 p_2(Superman)",
            "str_fol": "(flies_fast(Superman) \u2295 has_allies(Superman)) \u2192 saves_lives(Superman)"
        },
        {
            "id": 2,
            "text": "Superman either defends the city or uses his X-ray vision, but not both simultaneously.",
            "fol": "p_8(Superman) \u2295 p_9(Superman)",
            "str_fol": "defends_city(Superman) \u2295 uses_xray(Superman)"
        },
        {
            "id": 1,
            "text": "If a superhero has courage and is a protector, then they defend the city.",
            "fol": "\u2200x ((p_7(x) \u2227 p_6(x)) \u2192 p_8(x))",
            "str_fol": "\u2200x ((has_courage(x) \u2227 is_protector(x)) \u2192 defends_city(x))"
        },
        {
            "id": 0,
            "text": "If Superman can either save humanity or fight crime (but not both), then he is a protector.",
            "fol": "(p_5(Superman) \u2295 p_1(Superman)) \u2192 p_6(Superman)",
            "str_fol": "(can_save_humanity(Superman) \u2295 fights_crime(Superman)) \u2192 is_protector(Superman)"
        }
    ],
    "context": [
        {
            "id": 4,
            "subject": "Superman",
            "text": "Superman is not selfless.",
            "fol": "\u00acp_4(Superman)",
            "str_fol": "\u00acis_selfless(Superman)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Superman",
            "text": "Superman does not see through deception.",
            "fol": "\u00acp_3(Superman)",
            "str_fol": "\u00acsees_through_deception(Superman)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Superman",
            "text": "Superman saves lives.",
            "fol": "p_2(Superman)",
            "str_fol": "saves_lives(Superman)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Superman",
            "text": "Superman does not fight crime.",
            "fol": "\u00acp_1(Superman)",
            "str_fol": "\u00acfights_crime(Superman)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Superman",
            "text": "Superman has super strength.",
            "fol": "p_0(Superman)",
            "str_fol": "has_super_strength(Superman)",
            "negation": false
        },
        {
            "id": 5,
            "text": "Superman is either selfless or courageous, but not necessarily both.",
            "fol": "p_4(Superman) \u2295 p_7(Superman)",
            "str_fol": "is_selfless(Superman) \u2295 has_courage(Superman)"
        },
        {
            "id": 4,
            "text": "Superman either uses X-ray vision or sees through deception, but not both simultaneously.",
            "fol": "p_9(Superman) \u2295 p_3(Superman)",
            "str_fol": "uses_xray(Superman) \u2295 sees_through_deception(Superman)"
        },
        {
            "id": 3,
            "text": "If Superman either flies fast or has allies (but not both), then he saves lives.",
            "fol": "(p_10(Superman) \u2295 p_11(Superman)) \u2192 p_2(Superman)",
            "str_fol": "(flies_fast(Superman) \u2295 has_allies(Superman)) \u2192 saves_lives(Superman)"
        },
        {
            "id": 2,
            "text": "Superman either defends the city or uses his X-ray vision, but not both simultaneously.",
            "fol": "p_8(Superman) \u2295 p_9(Superman)",
            "str_fol": "defends_city(Superman) \u2295 uses_xray(Superman)"
        },
        {
            "id": 1,
            "text": "If a superhero has courage and is a protector, then they defend the city.",
            "fol": "\u2200x ((p_7(x) \u2227 p_6(x)) \u2192 p_8(x))",
            "str_fol": "\u2200x ((has_courage(x) \u2227 is_protector(x)) \u2192 defends_city(x))"
        },
        {
            "id": 0,
            "text": "If Superman can either save humanity or fight crime (but not both), then he is a protector.",
            "fol": "(p_5(Superman) \u2295 p_1(Superman)) \u2192 p_6(Superman)",
            "str_fol": "(can_save_humanity(Superman) \u2295 fights_crime(Superman)) \u2192 is_protector(Superman)"
        }
    ],
    "context_fol": "\u00acp_4(Superman)\n\u00acp_3(Superman)\np_2(Superman)\n\u00acp_1(Superman)\np_0(Superman)\np_4(Superman) \u2295 p_7(Superman)\np_9(Superman) \u2295 p_3(Superman)\n(p_10(Superman) \u2295 p_11(Superman)) \u2192 p_2(Superman)\np_8(Superman) \u2295 p_9(Superman)\n\u2200x ((p_7(x) \u2227 p_6(x)) \u2192 p_8(x))\n(p_5(Superman) \u2295 p_1(Superman)) \u2192 p_6(Superman)",
    "conclusion": {
        "id": 12,
        "text": "If Superman has super strength or has allies (or both), then he can save humanity.",
        "fol": "(p_0(Superman) \u2228 p_11(Superman)) \u2192 p_5(Superman)",
        "str_fol": "(has_super_strength(Superman) \u2228 has_allies(Superman)) \u2192 can_save_humanity(Superman)"
    },
    "initial_answer": "False",
    "initial_goal": "(p_0(Superman) \u2228 p_11(Superman)) \u2192 p_5(Superman)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 4,
                    "subject": "Superman",
                    "text": "Superman is not selfless.",
                    "fol": "\u00acp_4(Superman)",
                    "str_fol": "\u00acis_selfless(Superman)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "Superman is either selfless or courageous, but not necessarily both.",
                    "fol": "p_4(Superman) \u2295 p_7(Superman)",
                    "str_fol": "is_selfless(Superman) \u2295 has_courage(Superman)"
                }
            ],
            "conclusion": {
                "id": 5,
                "subject": "Superman",
                "text": "Superman has courage.",
                "fol": "p_7(Superman)",
                "str_fol": "has_courage(Superman)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 3,
                    "subject": "Superman",
                    "text": "Superman does not see through deception.",
                    "fol": "\u00acp_3(Superman)",
                    "str_fol": "\u00acsees_through_deception(Superman)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "Superman either uses X-ray vision or sees through deception, but not both simultaneously.",
                    "fol": "p_9(Superman) \u2295 p_3(Superman)",
                    "str_fol": "uses_xray(Superman) \u2295 sees_through_deception(Superman)"
                }
            ],
            "conclusion": {
                "id": 6,
                "subject": "Superman",
                "text": "Superman uses his X-ray vision.",
                "fol": "p_9(Superman)",
                "str_fol": "uses_xray(Superman)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 2,
                    "subject": "Superman",
                    "text": "Superman saves lives.",
                    "fol": "p_2(Superman)",
                    "str_fol": "saves_lives(Superman)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "If Superman either flies fast or has allies (but not both), then he saves lives.",
                    "fol": "(p_10(Superman) \u2295 p_11(Superman)) \u2192 p_2(Superman)",
                    "str_fol": "(flies_fast(Superman) \u2295 has_allies(Superman)) \u2192 saves_lives(Superman)"
                }
            ],
            "conclusion": null
        },
        {
            "facts": [
                {
                    "id": 6,
                    "subject": "Superman",
                    "text": "Superman uses his X-ray vision.",
                    "fol": "p_9(Superman)",
                    "str_fol": "uses_xray(Superman)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "Superman either defends the city or uses his X-ray vision, but not both simultaneously.",
                    "fol": "p_8(Superman) \u2295 p_9(Superman)",
                    "str_fol": "defends_city(Superman) \u2295 uses_xray(Superman)"
                }
            ],
            "conclusion": {
                "id": 7,
                "subject": "Superman",
                "text": "Superman does not defend the city.",
                "fol": "\u00acp_8(Superman)",
                "str_fol": "\u00acdefends_city(Superman)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 5,
                    "subject": "Superman",
                    "text": "Superman has courage.",
                    "fol": "p_7(Superman)",
                    "str_fol": "has_courage(Superman)",
                    "negation": false
                },
                {
                    "id": 7,
                    "subject": "Superman",
                    "text": "Superman does not defend the city.",
                    "fol": "\u00acp_8(Superman)",
                    "str_fol": "\u00acdefends_city(Superman)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "If a superhero has courage and is a protector, then they defend the city.",
                    "fol": "\u2200x ((p_7(x) \u2227 p_6(x)) \u2192 p_8(x))",
                    "str_fol": "\u2200x ((has_courage(x) \u2227 is_protector(x)) \u2192 defends_city(x))"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Superman",
                "text": "Superman is not a protector.",
                "fol": "\u00acp_6(Superman)",
                "str_fol": "\u00acis_protector(Superman)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 1,
                    "subject": "Superman",
                    "text": "Superman does not fight crime.",
                    "fol": "\u00acp_1(Superman)",
                    "str_fol": "\u00acfights_crime(Superman)",
                    "negation": true
                },
                {
                    "id": 8,
                    "subject": "Superman",
                    "text": "Superman is not a protector.",
                    "fol": "\u00acp_6(Superman)",
                    "str_fol": "\u00acis_protector(Superman)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "If Superman can either save humanity or fight crime (but not both), then he is a protector.",
                    "fol": "(p_5(Superman) \u2295 p_1(Superman)) \u2192 p_6(Superman)",
                    "str_fol": "(can_save_humanity(Superman) \u2295 fights_crime(Superman)) \u2192 is_protector(Superman)"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Superman",
                "text": "Superman cannot save humanity.",
                "fol": "\u00acp_5(Superman)",
                "str_fol": "\u00accan_save_humanity(Superman)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 0,
                    "subject": "Superman",
                    "text": "Superman has super strength.",
                    "fol": "p_0(Superman)",
                    "str_fol": "has_super_strength(Superman)",
                    "negation": false
                },
                {
                    "id": 9,
                    "subject": "Superman",
                    "text": "Superman cannot save humanity.",
                    "fol": "\u00acp_5(Superman)",
                    "str_fol": "\u00accan_save_humanity(Superman)",
                    "negation": true
                }
            ],
            "rules": [],
            "conclusion": {
                "id": 12,
                "text": "If Superman has super strength or has allies (or both), then he can save humanity.",
                "fol": "(p_0(Superman) \u2228 p_11(Superman)) \u2192 p_5(Superman)",
                "str_fol": "(has_super_strength(Superman) \u2228 has_allies(Superman)) \u2192 can_save_humanity(Superman)"
            }
        }
    ],
    "proof_trace": "1 -(p_4(Superman) <-> p_7(Superman)).  [assumption].\n2 -(p_9(Superman) <-> p_3(Superman)).  [assumption].\n4 -(p_8(Superman) <-> p_9(Superman)).  [assumption].\n5 (all x (p_7(x) & p_6(x) -> p_8(x))).  [assumption].\n6 -(p_5(Superman) <-> p_1(Superman)) -> p_6(Superman).  [assumption].\n7 -(p_0(Superman) | p_11(Superman) -> p_5(Superman)).  [goal].\n8 p_4(Superman) | p_7(Superman).  [clausify(1)].\n9 -p_4(Superman).  [assumption].\n11 p_9(Superman) | p_3(Superman).  [clausify(2)].\n12 -p_3(Superman).  [assumption].\n14 -p_5(Superman) | p_1(Superman) | p_6(Superman).  [clausify(6)].\n15 -p_1(Superman).  [assumption].\n17 -p_0(Superman) | p_5(Superman).  [deny(7)].\n18 p_0(Superman).  [assumption].\n19 -p_8(Superman) | -p_9(Superman).  [clausify(4)].\n21 -p_7(x) | -p_6(x) | p_8(x).  [clausify(5)].\n22 -p_7(Superman) | -p_6(Superman) | -p_9(Superman).  [resolve(21,c,19,a)].\n23 p_7(Superman).  [resolve(8,a,9,a)].\n24 -p_6(Superman) | -p_9(Superman).  [resolve(22,a,23,a)].\n25 p_9(Superman).  [resolve(11,b,12,a)].\n26 p_5(Superman).  [resolve(17,a,18,a)].\n27 -p_5(Superman) | p_6(Superman).  [resolve(14,b,15,a)].\n28 p_6(Superman).  [resolve(26,a,27,a)].\n29 -p_6(Superman).  [resolve(24,b,25,a)].\n30 $F.  [resolve(28,a,29,a)].",
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_4(Superman)\n\u00acp_3(Superman)\np_2(Superman)\n\u00acp_1(Superman)\np_0(Superman)\n(p_4(Superman) \u2228 p_7(Superman)) \u2227 (\u00acp_4(Superman) \u2228 \u00acp_7(Superman))\n(p_9(Superman) \u2228 p_3(Superman)) \u2227 (\u00acp_9(Superman) \u2228 \u00acp_3(Superman))\n(p_10(Superman) \u2295 p_11(Superman)) \u2192 p_2(Superman)\n(p_8(Superman) \u2228 p_9(Superman)) \u2227 (\u00acp_8(Superman) \u2228 \u00acp_9(Superman))\n\u2200x ((p_7(x) \u2227 p_6(x)) \u2192 p_8(x))\n(p_5(Superman) \u2295 p_1(Superman)) \u2192 p_6(Superman)\np_7(Superman)\np_9(Superman)",
            "Initial Goal": "(p_0(Superman) \u2228 p_11(Superman)) \u2192 p_5(Superman)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Superman)",
                    "-p_3(Superman)",
                    "p_2(Superman)",
                    "-p_1(Superman)",
                    "p_0(Superman)",
                    "(p_4(Superman) | p_7(Superman)) & (-p_4(Superman) | -p_7(Superman))",
                    "(p_9(Superman) | p_3(Superman)) & (-p_9(Superman) | -p_3(Superman))",
                    "(-(p_10(Superman) <-> p_11(Superman))) -> p_2(Superman)",
                    "(p_8(Superman) | p_9(Superman)) & (-p_8(Superman) | -p_9(Superman))",
                    "all x ((p_7(x) & p_6(x)) -> p_8(x))",
                    "(-(p_5(Superman) <-> p_1(Superman))) -> p_6(Superman)",
                    "p_7(Superman)",
                    "p_9(Superman)"
                ],
                "formulas(goals)": [
                    "-((p_0(Superman) | p_11(Superman)) -> p_5(Superman))"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_4(Superman) \u2295 p_7(Superman)",
                    "p_9(Superman) \u2295 p_3(Superman)",
                    "p_8(Superman) \u2295 p_9(Superman)"
                ],
                "added_facts": [
                    "p_7(Superman)",
                    "p_9(Superman)"
                ],
                "added_rules": [
                    "(p_4(Superman) \u2228 p_7(Superman)) \u2227 (\u00acp_4(Superman) \u2228 \u00acp_7(Superman))",
                    "(p_9(Superman) \u2228 p_3(Superman)) \u2227 (\u00acp_9(Superman) \u2228 \u00acp_3(Superman))",
                    "(p_8(Superman) \u2228 p_9(Superman)) \u2227 (\u00acp_8(Superman) \u2228 \u00acp_9(Superman))"
                ]
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_4(Superman)\n\u00acp_3(Superman)\np_2(Superman)\n\u00acp_1(Superman)\np_0(Superman)\n(p_4(Superman) \u2227 \u00acp_7(Superman)) \u2228 (\u00acp_4(Superman) \u2227 p_7(Superman))\n(p_9(Superman) \u2228 p_3(Superman)) \u2227 (\u00acp_9(Superman) \u2228 \u00acp_3(Superman))\n(p_10(Superman) \u2295 p_11(Superman)) \u2192 p_2(Superman)\n(p_8(Superman) \u2228 p_9(Superman)) \u2227 (\u00acp_8(Superman) \u2228 \u00acp_9(Superman))\n\u2200x ((p_7(x) \u2227 p_6(x)) \u2192 p_8(x))\n(p_5(Superman) \u2295 p_1(Superman)) \u2192 p_6(Superman)\np_7(Superman)\np_9(Superman)\n\u00acp_5(Superman)",
            "Initial Goal": "(p_0(Superman) \u2228 p_11(Superman)) \u2192 p_5(Superman)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Superman)",
                    "-p_3(Superman)",
                    "p_2(Superman)",
                    "-p_1(Superman)",
                    "p_0(Superman)",
                    "(p_4(Superman) & -p_7(Superman)) | (-p_4(Superman) & p_7(Superman))",
                    "(p_9(Superman) | p_3(Superman)) & (-p_9(Superman) | -p_3(Superman))",
                    "(-(p_10(Superman) <-> p_11(Superman))) -> p_2(Superman)",
                    "(p_8(Superman) | p_9(Superman)) & (-p_8(Superman) | -p_9(Superman))",
                    "all x ((p_7(x) & p_6(x)) -> p_8(x))",
                    "(-(p_5(Superman) <-> p_1(Superman))) -> p_6(Superman)",
                    "p_7(Superman)",
                    "p_9(Superman)",
                    "-p_5(Superman)"
                ],
                "formulas(goals)": [
                    "-((p_0(Superman) | p_11(Superman)) -> p_5(Superman))"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "(p_4(Superman) \u2228 p_7(Superman)) \u2227 (\u00acp_4(Superman) \u2228 \u00acp_7(Superman))"
                ],
                "added_facts": [
                    "\u00acp_5(Superman)"
                ],
                "added_rules": [
                    "(p_4(Superman) \u2227 \u00acp_7(Superman)) \u2228 (\u00acp_4(Superman) \u2227 p_7(Superman))"
                ]
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_4(Superman)\n\u00acp_3(Superman)\np_2(Superman)\n\u00acp_1(Superman)\np_0(Superman)\n(p_4(Superman) \u2227 \u00acp_7(Superman)) \u2228 (\u00acp_4(Superman) \u2227 p_7(Superman))\n(p_9(Superman) \u2228 p_3(Superman)) \u2227 (\u00acp_9(Superman) \u2228 \u00acp_3(Superman))\n(p_10(Superman) \u2295 p_11(Superman)) \u2192 p_2(Superman)\n(p_8(Superman) \u2228 p_9(Superman)) \u2227 (\u00acp_8(Superman) \u2228 \u00acp_9(Superman))\n\u2200x ((p_7(x) \u2227 p_6(x)) \u2192 p_8(x))\n(p_5(Superman) \u2295 p_1(Superman)) \u2192 p_6(Superman)\np_7(Superman)\np_9(Superman)\n\u00acp_5(Superman)\n\u00acp_4(Superman) \u2227 p_7(Superman)\np_9(Superman) \u2227 \u00acp_3(Superman)\n\u00acp_8(Superman)\n((p_5(Superman) \u2228 p_1(Superman)) \u2227 (\u00acp_5(Superman) \u2228 \u00acp_1(Superman))) \u2192 p_6(Superman)",
            "Initial Goal": "(p_0(Superman) \u2228 p_11(Superman)) \u2192 p_5(Superman)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Superman)",
                    "-p_3(Superman)",
                    "p_2(Superman)",
                    "-p_1(Superman)",
                    "p_0(Superman)",
                    "(p_4(Superman) & -p_7(Superman)) | (-p_4(Superman) & p_7(Superman))",
                    "(p_9(Superman) | p_3(Superman)) & (-p_9(Superman) | -p_3(Superman))",
                    "(-(p_10(Superman) <-> p_11(Superman))) -> p_2(Superman)",
                    "(p_8(Superman) | p_9(Superman)) & (-p_8(Superman) | -p_9(Superman))",
                    "all x ((p_7(x) & p_6(x)) -> p_8(x))",
                    "(-(p_5(Superman) <-> p_1(Superman))) -> p_6(Superman)",
                    "p_7(Superman)",
                    "p_9(Superman)",
                    "-p_5(Superman)",
                    "-p_4(Superman) & p_7(Superman)",
                    "p_9(Superman) & -p_3(Superman)",
                    "-p_8(Superman)",
                    "((p_5(Superman) | p_1(Superman)) & (-p_5(Superman) | -p_1(Superman))) -> p_6(Superman)"
                ],
                "formulas(goals)": [
                    "-((p_0(Superman) | p_11(Superman)) -> p_5(Superman))"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "\u00acp_4(Superman) \u2227 p_7(Superman)",
                    "p_9(Superman) \u2227 \u00acp_3(Superman)",
                    "\u00acp_8(Superman)"
                ],
                "added_rules": [
                    "((p_5(Superman) \u2228 p_1(Superman)) \u2227 (\u00acp_5(Superman) \u2228 \u00acp_1(Superman))) \u2192 p_6(Superman)"
                ]
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_4(Superman)\n\u00acp_3(Superman)\np_2(Superman)\n\u00acp_1(Superman)\n(p_4(Superman) \u2227 \u00acp_7(Superman)) \u2228 (\u00acp_4(Superman) \u2227 p_7(Superman))\n(p_9(Superman) \u2228 p_3(Superman)) \u2227 (\u00acp_9(Superman) \u2228 \u00acp_3(Superman))\n(p_10(Superman) \u2295 p_11(Superman)) \u2192 p_2(Superman)\n(p_8(Superman) \u2228 p_9(Superman)) \u2227 (\u00acp_8(Superman) \u2228 \u00acp_9(Superman))\n\u2200x ((p_7(x) \u2227 p_6(x)) \u2192 p_8(x))\n(p_5(Superman) \u2295 p_1(Superman)) \u2192 p_6(Superman)\np_7(Superman)\np_9(Superman)\n\u00acp_4(Superman) \u2227 p_7(Superman)\np_9(Superman) \u2227 \u00acp_3(Superman)\n\u00acp_8(Superman)\n((p_5(Superman) \u2228 p_1(Superman)) \u2227 (\u00acp_5(Superman) \u2228 \u00acp_1(Superman))) \u2192 p_6(Superman)\n\u00acp_0(Superman)\np_9(Superman) \u2192 \u00acp_11(Superman)",
            "Initial Goal": "(p_0(Superman) \u2228 p_11(Superman)) \u2192 p_5(Superman)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Superman)",
                    "-p_3(Superman)",
                    "p_2(Superman)",
                    "-p_1(Superman)",
                    "(p_4(Superman) & -p_7(Superman)) | (-p_4(Superman) & p_7(Superman))",
                    "(p_9(Superman) | p_3(Superman)) & (-p_9(Superman) | -p_3(Superman))",
                    "(-(p_10(Superman) <-> p_11(Superman))) -> p_2(Superman)",
                    "(p_8(Superman) | p_9(Superman)) & (-p_8(Superman) | -p_9(Superman))",
                    "all x ((p_7(x) & p_6(x)) -> p_8(x))",
                    "(-(p_5(Superman) <-> p_1(Superman))) -> p_6(Superman)",
                    "p_7(Superman)",
                    "p_9(Superman)",
                    "-p_4(Superman) & p_7(Superman)",
                    "p_9(Superman) & -p_3(Superman)",
                    "-p_8(Superman)",
                    "((p_5(Superman) | p_1(Superman)) & (-p_5(Superman) | -p_1(Superman))) -> p_6(Superman)",
                    "-p_0(Superman)",
                    "p_9(Superman) -> -p_11(Superman)"
                ],
                "formulas(goals)": [
                    "(p_0(Superman) | p_11(Superman)) -> p_5(Superman)"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "p_0(Superman)",
                    "\u00acp_5(Superman)"
                ],
                "removed_rules": [],
                "added_facts": [
                    "\u00acp_0(Superman)"
                ],
                "added_rules": [
                    "p_9(Superman) \u2192 \u00acp_11(Superman)"
                ]
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_4(Superman)\n\u00acp_3(Superman)\np_2(Superman)\n\u00acp_1(Superman)\n(p_4(Superman) \u2227 \u00acp_7(Superman)) \u2228 (\u00acp_4(Superman) \u2227 p_7(Superman))\n(p_9(Superman) \u2228 p_3(Superman)) \u2227 (\u00acp_9(Superman) \u2228 \u00acp_3(Superman))\n(p_10(Superman) \u2295 p_11(Superman)) \u2192 p_2(Superman)\n(p_8(Superman) \u2228 p_9(Superman)) \u2227 (\u00acp_8(Superman) \u2228 \u00acp_9(Superman))\n\u2200x ((p_7(x) \u2227 p_6(x)) \u2192 p_8(x))\n(p_5(Superman) \u2295 p_1(Superman)) \u2192 p_6(Superman)\np_7(Superman)\np_9(Superman)\n\u00acp_4(Superman) \u2227 p_7(Superman)\np_9(Superman) \u2227 \u00acp_3(Superman)\n\u00acp_8(Superman)\n((p_5(Superman) \u2228 p_1(Superman)) \u2227 (\u00acp_5(Superman) \u2228 \u00acp_1(Superman))) \u2192 p_6(Superman)\np_9(Superman) \u2192 \u00acp_11(Superman)\np_0(Superman)",
            "Initial Goal": "(p_0(Superman) \u2228 p_11(Superman)) \u2192 p_5(Superman)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Superman)",
                    "-p_3(Superman)",
                    "p_2(Superman)",
                    "-p_1(Superman)",
                    "(p_4(Superman) & -p_7(Superman)) | (-p_4(Superman) & p_7(Superman))",
                    "(p_9(Superman) | p_3(Superman)) & (-p_9(Superman) | -p_3(Superman))",
                    "(-(p_10(Superman) <-> p_11(Superman))) -> p_2(Superman)",
                    "(p_8(Superman) | p_9(Superman)) & (-p_8(Superman) | -p_9(Superman))",
                    "all x ((p_7(x) & p_6(x)) -> p_8(x))",
                    "(-(p_5(Superman) <-> p_1(Superman))) -> p_6(Superman)",
                    "p_7(Superman)",
                    "p_9(Superman)",
                    "-p_4(Superman) & p_7(Superman)",
                    "p_9(Superman) & -p_3(Superman)",
                    "-p_8(Superman)",
                    "((p_5(Superman) | p_1(Superman)) & (-p_5(Superman) | -p_1(Superman))) -> p_6(Superman)",
                    "p_9(Superman) -> -p_11(Superman)",
                    "p_0(Superman)"
                ],
                "formulas(goals)": [
                    "-((p_0(Superman) | p_11(Superman)) -> p_5(Superman))"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "\u00acp_0(Superman)"
                ],
                "removed_rules": [],
                "added_facts": [
                    "p_0(Superman)"
                ],
                "added_rules": []
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_4(Superman)\n\u00acp_3(Superman)\np_2(Superman)\n\u00acp_1(Superman)\n(p_4(Superman) \u2227 \u00acp_7(Superman)) \u2228 (\u00acp_4(Superman) \u2227 p_7(Superman))\n(p_9(Superman) \u2228 p_3(Superman)) \u2227 (\u00acp_9(Superman) \u2228 \u00acp_3(Superman))\n(p_10(Superman) \u2295 p_11(Superman)) \u2192 p_2(Superman)\n(p_8(Superman) \u2228 p_9(Superman)) \u2227 (\u00acp_8(Superman) \u2228 \u00acp_9(Superman))\n\u2200x ((p_7(x) \u2227 p_6(x)) \u2192 p_8(x))\n(p_5(Superman) \u2295 p_1(Superman)) \u2192 p_6(Superman)\np_7(Superman)\np_9(Superman)\n\u00acp_4(Superman) \u2227 p_7(Superman)\np_9(Superman) \u2227 \u00acp_3(Superman)\n\u00acp_8(Superman)\n((p_5(Superman) \u2228 p_1(Superman)) \u2227 (\u00acp_5(Superman) \u2228 \u00acp_1(Superman))) \u2192 p_6(Superman)\np_9(Superman) \u2192 \u00acp_11(Superman)\np_0(Superman)\np_7(Superman) \u2192 p_7(Superman)\np_2(Superman) \u2228 \u00acp_2(Superman)\np_7(Superman) \u2227 p_7(Superman)",
            "Initial Goal": "(p_0(Superman) \u2228 p_11(Superman)) \u2192 p_5(Superman)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Superman).",
                    "-p_3(Superman).",
                    "p_2(Superman).",
                    "-p_1(Superman).",
                    "(p_4(Superman) & -p_7(Superman)) | (-p_4(Superman) & p_7(Superman)).",
                    "(p_9(Superman) | p_3(Superman)) & (-p_9(Superman) | -p_3(Superman)).",
                    "(-(p_10(Superman) <-> p_11(Superman))) -> p_2(Superman).",
                    "(p_8(Superman) | p_9(Superman)) & (-p_8(Superman) | -p_9(Superman)).",
                    "(all x ((p_7(x) & p_6(x)) -> p_8(x))).",
                    "(-(p_5(Superman) <-> p_1(Superman))) -> p_6(Superman).",
                    "p_7(Superman).",
                    "p_9(Superman).",
                    "-p_4(Superman) & p_7(Superman).",
                    "p_9(Superman) & -p_3(Superman).",
                    "-p_8(Superman).",
                    "((p_5(Superman) | p_1(Superman)) & (-p_5(Superman) | -p_1(Superman))) -> p_6(Superman).",
                    "p_9(Superman) -> -p_11(Superman).",
                    "p_0(Superman).",
                    "p_7(Superman) -> p_7(Superman).",
                    "p_2(Superman) | -p_2(Superman).",
                    "p_7(Superman) & p_7(Superman)."
                ],
                "formulas(goals)": [
                    "-((p_0(Superman) | p_11(Superman)) -> p_5(Superman))."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "p_7(Superman) \u2192 p_7(Superman)",
                    "p_2(Superman) \u2228 \u00acp_2(Superman)",
                    "p_7(Superman) \u2227 p_7(Superman)"
                ]
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_4(Superman)\n\u00acp_3(Superman)\np_2(Superman)\n\u00acp_1(Superman)\n(p_4(Superman) \u2227 \u00acp_7(Superman)) \u2228 (\u00acp_4(Superman) \u2227 p_7(Superman))\n(p_9(Superman) \u2228 p_3(Superman)) \u2227 (\u00acp_9(Superman) \u2228 \u00acp_3(Superman))\n(p_10(Superman) \u2295 p_11(Superman)) \u2192 p_2(Superman)\n(p_8(Superman) \u2228 p_9(Superman)) \u2227 (\u00acp_8(Superman) \u2228 \u00acp_9(Superman))\n\u2200x ((p_7(x) \u2227 p_6(x)) \u2192 p_8(x))\np_5(Superman) \u2192 p_6(Superman)\np_7(Superman)\np_9(Superman)\n\u00acp_4(Superman) \u2227 p_7(Superman)\np_9(Superman) \u2227 \u00acp_3(Superman)\n\u00acp_8(Superman)\n((p_5(Superman) \u2228 p_1(Superman)) \u2227 (\u00acp_5(Superman) \u2228 \u00acp_1(Superman))) \u2192 p_6(Superman)\np_9(Superman) \u2192 \u00acp_11(Superman)\np_0(Superman)\np_7(Superman) \u2192 p_7(Superman)\np_2(Superman) \u2228 \u00acp_2(Superman)\np_7(Superman) \u2227 p_7(Superman)\np_9(Superman) \u2192 \u00acp_3(Superman)\np_0(Superman) \u2228 \u00acp_0(Superman)",
            "Initial Goal": "(p_0(Superman) \u2228 p_11(Superman)) \u2192 p_5(Superman)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Superman)",
                    "-p_3(Superman)",
                    "p_2(Superman)",
                    "-p_1(Superman)",
                    "(p_4(Superman) & -p_7(Superman)) | (-p_4(Superman) & p_7(Superman))",
                    "(p_9(Superman) | p_3(Superman)) & (-p_9(Superman) | -p_3(Superman))",
                    "(-(p_10(Superman) <-> p_11(Superman))) -> p_2(Superman)",
                    "(p_8(Superman) | p_9(Superman)) & (-p_8(Superman) | -p_9(Superman))",
                    "all x ((p_7(x) & p_6(x)) -> p_8(x))",
                    "p_5(Superman) -> p_6(Superman)",
                    "p_7(Superman)",
                    "p_9(Superman)",
                    "-p_4(Superman) & p_7(Superman)",
                    "p_9(Superman) & -p_3(Superman)",
                    "-p_8(Superman)",
                    "((p_5(Superman) | p_1(Superman)) & (-p_5(Superman) | -p_1(Superman))) -> p_6(Superman)",
                    "p_9(Superman) -> -p_11(Superman)",
                    "p_0(Superman)",
                    "p_7(Superman) -> p_7(Superman)",
                    "p_2(Superman) | -p_2(Superman)",
                    "p_7(Superman) & p_7(Superman)",
                    "p_9(Superman) -> -p_3(Superman)",
                    "p_0(Superman) | -p_0(Superman)"
                ],
                "formulas(goals)": [
                    "-((p_0(Superman) | p_11(Superman)) -> p_5(Superman))"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "(p_5(Superman) \u2295 p_1(Superman)) \u2192 p_6(Superman)"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_5(Superman) \u2192 p_6(Superman)",
                    "p_9(Superman) \u2192 \u00acp_3(Superman)",
                    "p_0(Superman) \u2228 \u00acp_0(Superman)"
                ]
            }
        }
    ]
}