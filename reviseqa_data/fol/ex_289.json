{
    "background_story": "Sebastian was a highly respected educator who had spent his entire career dedicated to the betterment of his students. After years of teaching and administrative roles, he was appointed as the headmaster of the prestigious Oakwood School. Under his leadership, the school flourished, with academic achievements and extracurricular activities reaching new heights. Sebastian was known for his fair but firm approach, always putting the needs of his students first. He believed in fostering a supportive environment where every child could thrive, regardless of their background or abilities. His door was always open, and he took a personal interest in the well-being and progress of each student, making him a beloved figure among the school community.",
    "predicates": [
        {
            "id": 0,
            "name": "is_compassionate"
        },
        {
            "id": 1,
            "name": "leads_school"
        },
        {
            "id": 2,
            "name": "empowers_young"
        },
        {
            "id": 3,
            "name": "guides_youth"
        },
        {
            "id": 4,
            "name": "is_dedicated"
        },
        {
            "id": 5,
            "name": "succeeds"
        },
        {
            "id": 6,
            "name": "cares_deeply"
        },
        {
            "id": 7,
            "name": "is_educator"
        },
        {
            "id": 8,
            "name": "supports_students"
        },
        {
            "id": 9,
            "name": "creates_opportunities"
        },
        {
            "id": 10,
            "name": "nurtures_talent"
        },
        {
            "id": 11,
            "name": "puts_others_first"
        },
        {
            "id": 12,
            "name": "is_principal"
        },
        {
            "id": 13,
            "name": "is_passionate"
        },
        {
            "id": 14,
            "name": "teaches_well"
        },
        {
            "id": 15,
            "name": "mentors_youth"
        },
        {
            "id": 16,
            "name": "helps_children"
        },
        {
            "id": 17,
            "name": "fosters_growth"
        },
        {
            "id": 18,
            "name": "encourages_learning"
        },
        {
            "id": 19,
            "name": "mentors"
        }
    ],
    "subject_name": "Sebastian",
    "subject_category": "human",
    "keyword": "headmaster",
    "all_facts": [
        {
            "id": 0,
            "subject": "Sebastian",
            "text": "Sebastian is not compassionate towards his students.",
            "fol": "\u00acp_0(Sebastian)",
            "str_fol": "\u00acis_compassionate(Sebastian)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Sebastian",
            "text": "Sebastian leads a school.",
            "fol": "p_1(Sebastian)",
            "str_fol": "leads_school(Sebastian)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Sebastian",
            "text": "Sebastian does not empower young people.",
            "fol": "\u00acp_2(Sebastian)",
            "str_fol": "\u00acempowers_young(Sebastian)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Sebastian",
            "text": "Sebastian guides youth.",
            "fol": "p_3(Sebastian)",
            "str_fol": "guides_youth(Sebastian)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Sebastian",
            "text": "Sebastian does not create opportunities.",
            "fol": "\u00acp_9(Sebastian)",
            "str_fol": "\u00accreates_opportunities(Sebastian)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Sebastian",
            "text": "Sebastian does not support students.",
            "fol": "\u00acp_8(Sebastian)",
            "str_fol": "\u00acsupports_students(Sebastian)",
            "negation": true
        },
        {
            "id": 6,
            "subject": "Sebastian",
            "text": "Sebastian is an educator.",
            "fol": "p_7(Sebastian)",
            "str_fol": "is_educator(Sebastian)",
            "negation": false
        },
        {
            "id": 7,
            "subject": "Sebastian",
            "text": "Sebastian cares deeply about his students.",
            "fol": "p_6(Sebastian)",
            "str_fol": "cares_deeply(Sebastian)",
            "negation": false
        },
        {
            "id": 8,
            "subject": "Sebastian",
            "text": "Sebastian is not dedicated to his students.",
            "fol": "\u00acp_4(Sebastian)",
            "str_fol": "\u00acis_dedicated(Sebastian)",
            "negation": true
        },
        {
            "id": 9,
            "subject": "Sebastian",
            "text": "Sebastian succeeds in helping them thrive.",
            "fol": "p_5(Sebastian)",
            "str_fol": "succeeds(Sebastian)",
            "negation": false
        }
    ],
    "context_facts": [
        {
            "id": 3,
            "subject": "Sebastian",
            "text": "Sebastian guides youth.",
            "fol": "p_3(Sebastian)",
            "str_fol": "guides_youth(Sebastian)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Sebastian",
            "text": "Sebastian does not empower young people.",
            "fol": "\u00acp_2(Sebastian)",
            "str_fol": "\u00acempowers_young(Sebastian)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Sebastian",
            "text": "Sebastian leads a school.",
            "fol": "p_1(Sebastian)",
            "str_fol": "leads_school(Sebastian)",
            "negation": false
        },
        {
            "id": 0,
            "subject": "Sebastian",
            "text": "Sebastian is not compassionate towards his students.",
            "fol": "\u00acp_0(Sebastian)",
            "str_fol": "\u00acis_compassionate(Sebastian)",
            "negation": true
        }
    ],
    "context_rules": [
        {
            "id": 6,
            "text": "Sebastian either nurtures talent or guides youth.",
            "fol": "p_10(Sebastian) \u2228 p_3(Sebastian)",
            "str_fol": "nurtures_talent(Sebastian) \u2228 guides_youth(Sebastian)"
        },
        {
            "id": 5,
            "text": "If Sebastian creates opportunities, then he empowers young people.",
            "fol": "p_9(Sebastian) \u2192 p_2(Sebastian)",
            "str_fol": "creates_opportunities(Sebastian) \u2192 empowers_young(Sebastian)"
        },
        {
            "id": 4,
            "text": "If someone supports students, then they create opportunities and nurture talent.",
            "fol": "\u2200x (p_8(x) \u2192 (p_9(x) \u2227 p_10(x)))",
            "str_fol": "\u2200x (supports_students(x) \u2192 (creates_opportunities(x) \u2227 nurtures_talent(x)))"
        },
        {
            "id": 3,
            "text": "Everyone who leads a school is either an educator or supports students.",
            "fol": "\u2200x (p_1(x) \u2192 (p_7(x) \u2228 p_8(x)))",
            "str_fol": "\u2200x (leads_school(x) \u2192 (is_educator(x) \u2228 supports_students(x)))"
        },
        {
            "id": 2,
            "text": "If Sebastian is an educator, then he either cares deeply about his students or is compassionate towards them, but not both.",
            "fol": "p_7(Sebastian) \u2192 (p_6(Sebastian) \u2295 p_0(Sebastian))",
            "str_fol": "is_educator(Sebastian) \u2192 (cares_deeply(Sebastian) \u2295 is_compassionate(Sebastian))"
        },
        {
            "id": 1,
            "text": "Sebastian either cares deeply about his students or is dedicated to his role as headmaster, but not necessarily both.",
            "fol": "p_6(Sebastian) \u2295 p_4(Sebastian)",
            "str_fol": "cares_deeply(Sebastian) \u2295 is_dedicated(Sebastian)"
        },
        {
            "id": 0,
            "text": "If Sebastian is dedicated to his students, then he succeeds in helping them thrive.",
            "fol": "p_4(Sebastian) \u2192 p_5(Sebastian)",
            "str_fol": "is_dedicated(Sebastian) \u2192 succeeds(Sebastian)"
        }
    ],
    "context": [
        {
            "id": 3,
            "subject": "Sebastian",
            "text": "Sebastian guides youth.",
            "fol": "p_3(Sebastian)",
            "str_fol": "guides_youth(Sebastian)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Sebastian",
            "text": "Sebastian does not empower young people.",
            "fol": "\u00acp_2(Sebastian)",
            "str_fol": "\u00acempowers_young(Sebastian)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Sebastian",
            "text": "Sebastian leads a school.",
            "fol": "p_1(Sebastian)",
            "str_fol": "leads_school(Sebastian)",
            "negation": false
        },
        {
            "id": 0,
            "subject": "Sebastian",
            "text": "Sebastian is not compassionate towards his students.",
            "fol": "\u00acp_0(Sebastian)",
            "str_fol": "\u00acis_compassionate(Sebastian)",
            "negation": true
        },
        {
            "id": 6,
            "text": "Sebastian either nurtures talent or guides youth.",
            "fol": "p_10(Sebastian) \u2228 p_3(Sebastian)",
            "str_fol": "nurtures_talent(Sebastian) \u2228 guides_youth(Sebastian)"
        },
        {
            "id": 5,
            "text": "If Sebastian creates opportunities, then he empowers young people.",
            "fol": "p_9(Sebastian) \u2192 p_2(Sebastian)",
            "str_fol": "creates_opportunities(Sebastian) \u2192 empowers_young(Sebastian)"
        },
        {
            "id": 4,
            "text": "If someone supports students, then they create opportunities and nurture talent.",
            "fol": "\u2200x (p_8(x) \u2192 (p_9(x) \u2227 p_10(x)))",
            "str_fol": "\u2200x (supports_students(x) \u2192 (creates_opportunities(x) \u2227 nurtures_talent(x)))"
        },
        {
            "id": 3,
            "text": "Everyone who leads a school is either an educator or supports students.",
            "fol": "\u2200x (p_1(x) \u2192 (p_7(x) \u2228 p_8(x)))",
            "str_fol": "\u2200x (leads_school(x) \u2192 (is_educator(x) \u2228 supports_students(x)))"
        },
        {
            "id": 2,
            "text": "If Sebastian is an educator, then he either cares deeply about his students or is compassionate towards them, but not both.",
            "fol": "p_7(Sebastian) \u2192 (p_6(Sebastian) \u2295 p_0(Sebastian))",
            "str_fol": "is_educator(Sebastian) \u2192 (cares_deeply(Sebastian) \u2295 is_compassionate(Sebastian))"
        },
        {
            "id": 1,
            "text": "Sebastian either cares deeply about his students or is dedicated to his role as headmaster, but not necessarily both.",
            "fol": "p_6(Sebastian) \u2295 p_4(Sebastian)",
            "str_fol": "cares_deeply(Sebastian) \u2295 is_dedicated(Sebastian)"
        },
        {
            "id": 0,
            "text": "If Sebastian is dedicated to his students, then he succeeds in helping them thrive.",
            "fol": "p_4(Sebastian) \u2192 p_5(Sebastian)",
            "str_fol": "is_dedicated(Sebastian) \u2192 succeeds(Sebastian)"
        }
    ],
    "context_fol": "p_3(Sebastian)\n\u00acp_2(Sebastian)\np_1(Sebastian)\n\u00acp_0(Sebastian)\np_10(Sebastian) \u2228 p_3(Sebastian)\np_9(Sebastian) \u2192 p_2(Sebastian)\n\u2200x (p_8(x) \u2192 (p_9(x) \u2227 p_10(x)))\n\u2200x (p_1(x) \u2192 (p_7(x) \u2228 p_8(x)))\np_7(Sebastian) \u2192 (p_6(Sebastian) \u2295 p_0(Sebastian))\np_6(Sebastian) \u2295 p_4(Sebastian)\np_4(Sebastian) \u2192 p_5(Sebastian)",
    "conclusion": {
        "id": 9,
        "subject": "Sebastian",
        "text": "Sebastian succeeds in helping them thrive.",
        "fol": "p_5(Sebastian)",
        "str_fol": "succeeds(Sebastian)",
        "negation": false
    },
    "initial_answer": "Uncertain",
    "initial_goal": "p_5(Sebastian)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 3,
                    "subject": "Sebastian",
                    "text": "Sebastian guides youth.",
                    "fol": "p_3(Sebastian)",
                    "str_fol": "guides_youth(Sebastian)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 6,
                    "text": "Sebastian either nurtures talent or guides youth.",
                    "fol": "p_10(Sebastian) \u2228 p_3(Sebastian)",
                    "str_fol": "nurtures_talent(Sebastian) \u2228 guides_youth(Sebastian)"
                }
            ],
            "conclusion": null
        },
        {
            "facts": [
                {
                    "id": 2,
                    "subject": "Sebastian",
                    "text": "Sebastian does not empower young people.",
                    "fol": "\u00acp_2(Sebastian)",
                    "str_fol": "\u00acempowers_young(Sebastian)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "If Sebastian creates opportunities, then he empowers young people.",
                    "fol": "p_9(Sebastian) \u2192 p_2(Sebastian)",
                    "str_fol": "creates_opportunities(Sebastian) \u2192 empowers_young(Sebastian)"
                }
            ],
            "conclusion": {
                "id": 4,
                "subject": "Sebastian",
                "text": "Sebastian does not create opportunities.",
                "fol": "\u00acp_9(Sebastian)",
                "str_fol": "\u00accreates_opportunities(Sebastian)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 4,
                    "subject": "Sebastian",
                    "text": "Sebastian does not create opportunities.",
                    "fol": "\u00acp_9(Sebastian)",
                    "str_fol": "\u00accreates_opportunities(Sebastian)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "If someone supports students, then they create opportunities and nurture talent.",
                    "fol": "\u2200x (p_8(x) \u2192 (p_9(x) \u2227 p_10(x)))",
                    "str_fol": "\u2200x (supports_students(x) \u2192 (creates_opportunities(x) \u2227 nurtures_talent(x)))"
                }
            ],
            "conclusion": {
                "id": 5,
                "subject": "Sebastian",
                "text": "Sebastian does not support students.",
                "fol": "\u00acp_8(Sebastian)",
                "str_fol": "\u00acsupports_students(Sebastian)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 1,
                    "subject": "Sebastian",
                    "text": "Sebastian leads a school.",
                    "fol": "p_1(Sebastian)",
                    "str_fol": "leads_school(Sebastian)",
                    "negation": false
                },
                {
                    "id": 5,
                    "subject": "Sebastian",
                    "text": "Sebastian does not support students.",
                    "fol": "\u00acp_8(Sebastian)",
                    "str_fol": "\u00acsupports_students(Sebastian)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "Everyone who leads a school is either an educator or supports students.",
                    "fol": "\u2200x (p_1(x) \u2192 (p_7(x) \u2228 p_8(x)))",
                    "str_fol": "\u2200x (leads_school(x) \u2192 (is_educator(x) \u2228 supports_students(x)))"
                }
            ],
            "conclusion": {
                "id": 6,
                "subject": "Sebastian",
                "text": "Sebastian is an educator.",
                "fol": "p_7(Sebastian)",
                "str_fol": "is_educator(Sebastian)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 6,
                    "subject": "Sebastian",
                    "text": "Sebastian is an educator.",
                    "fol": "p_7(Sebastian)",
                    "str_fol": "is_educator(Sebastian)",
                    "negation": false
                },
                {
                    "id": 0,
                    "subject": "Sebastian",
                    "text": "Sebastian is not compassionate towards his students.",
                    "fol": "\u00acp_0(Sebastian)",
                    "str_fol": "\u00acis_compassionate(Sebastian)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "If Sebastian is an educator, then he either cares deeply about his students or is compassionate towards them, but not both.",
                    "fol": "p_7(Sebastian) \u2192 (p_6(Sebastian) \u2295 p_0(Sebastian))",
                    "str_fol": "is_educator(Sebastian) \u2192 (cares_deeply(Sebastian) \u2295 is_compassionate(Sebastian))"
                }
            ],
            "conclusion": {
                "id": 7,
                "subject": "Sebastian",
                "text": "Sebastian cares deeply about his students.",
                "fol": "p_6(Sebastian)",
                "str_fol": "cares_deeply(Sebastian)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 7,
                    "subject": "Sebastian",
                    "text": "Sebastian cares deeply about his students.",
                    "fol": "p_6(Sebastian)",
                    "str_fol": "cares_deeply(Sebastian)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "Sebastian either cares deeply about his students or is dedicated to his role as headmaster, but not necessarily both.",
                    "fol": "p_6(Sebastian) \u2295 p_4(Sebastian)",
                    "str_fol": "cares_deeply(Sebastian) \u2295 is_dedicated(Sebastian)"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Sebastian",
                "text": "Sebastian is not dedicated to his students.",
                "fol": "\u00acp_4(Sebastian)",
                "str_fol": "\u00acis_dedicated(Sebastian)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 8,
                    "subject": "Sebastian",
                    "text": "Sebastian is not dedicated to his students.",
                    "fol": "\u00acp_4(Sebastian)",
                    "str_fol": "\u00acis_dedicated(Sebastian)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "If Sebastian is dedicated to his students, then he succeeds in helping them thrive.",
                    "fol": "p_4(Sebastian) \u2192 p_5(Sebastian)",
                    "str_fol": "is_dedicated(Sebastian) \u2192 succeeds(Sebastian)"
                }
            ],
            "conclusion": null
        }
    ],
    "proof_trace": null,
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "UNCERTAIN",
            "Edited Assumptions": "p_3(Sebastian)\n\u00acp_2(Sebastian)\np_1(Sebastian)\n\u00acp_0(Sebastian)\np_10(Sebastian) \u2228 p_3(Sebastian)\np_9(Sebastian) \u2192 p_2(Sebastian)\n\u2200x (p_8(x) \u2192 (p_9(x) \u2227 p_10(x)))\n\u2200x (p_1(x) \u2192 (p_7(x) \u2228 p_8(x)))\np_7(Sebastian) \u2192 (p_6(Sebastian) \u2295 p_0(Sebastian))\np_6(Sebastian) \u2295 p_4(Sebastian)\np_4(Sebastian) \u2192 p_5(Sebastian)",
            "Initial Goal": "p_5(Sebastian)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_3(Sebastian).",
                    "-p_2(Sebastian).",
                    "p_1(Sebastian).",
                    "-p_0(Sebastian).",
                    "p_10(Sebastian) | p_3(Sebastian).",
                    "p_9(Sebastian) -> p_2(Sebastian).",
                    "all x (p_8(x) -> (p_9(x) & p_10(x))).",
                    "all x (p_1(x) -> (p_7(x) | p_8(x))).",
                    "p_7(Sebastian) -> (-(p_6(Sebastian) <-> p_0(Sebastian))).",
                    "-(p_6(Sebastian) <-> p_4(Sebastian)).",
                    "p_4(Sebastian) -> p_5(Sebastian).",
                    "p_3(Sebastian) -> p_5(Sebastian)."
                ],
                "formulas(goals)": [
                    "p_5(Sebastian)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "p_3(Sebastian) \u2192 p_5(Sebastian)"
                ]
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_3(Sebastian)\n\u00acp_2(Sebastian)\np_1(Sebastian)\n\u00acp_0(Sebastian)\np_10(Sebastian) \u2228 p_3(Sebastian)\np_9(Sebastian) \u2192 p_2(Sebastian)\n\u2200x (p_8(x) \u2192 (p_9(x) \u2227 p_10(x)))\n\u2200x (p_1(x) \u2192 (p_7(x) \u2228 p_8(x)))\np_7(Sebastian) \u2192 (p_6(Sebastian) \u2295 p_0(Sebastian))\np_6(Sebastian) \u2295 p_4(Sebastian)\np_3(Sebastian) \u2192 \u00acp_4(Sebastian)\n\u00acp_4(Sebastian) \u2192 \u00acp_5(Sebastian)",
            "Initial Goal": "p_5(Sebastian)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_3(Sebastian)",
                    "-p_2(Sebastian)",
                    "p_1(Sebastian)",
                    "-p_0(Sebastian)",
                    "p_10(Sebastian) | p_3(Sebastian)",
                    "p_9(Sebastian) -> p_2(Sebastian)",
                    "all x (p_8(x) -> (p_9(x) & p_10(x)))",
                    "all x (p_1(x) -> (p_7(x) | p_8(x)))",
                    "p_7(Sebastian) -> (-(p_6(Sebastian) <-> p_0(Sebastian)))",
                    "-(p_6(Sebastian) <-> p_4(Sebastian))",
                    "p_3(Sebastian) -> -p_4(Sebastian)",
                    "-p_4(Sebastian) -> -p_5(Sebastian)"
                ],
                "formulas(goals)": [
                    "-p_5(Sebastian)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_4(Sebastian) \u2192 p_5(Sebastian)"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_3(Sebastian) \u2192 \u00acp_4(Sebastian)",
                    "\u00acp_4(Sebastian) \u2192 \u00acp_5(Sebastian)"
                ]
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_3(Sebastian)\n\u00acp_2(Sebastian)\np_1(Sebastian)\n\u00acp_0(Sebastian)\np_10(Sebastian) \u2228 p_3(Sebastian)\np_10(Sebastian) \u2228 p_3(Sebastian) \u2228 p_5(Sebastian)\n\u00acp_9(Sebastian) \u2228 p_2(Sebastian)\n\u2200x (p_8(x) \u2192 (p_9(x) \u2227 p_10(x)))\n\u2200x (p_1(x) \u2192 (p_7(x) \u2228 p_8(x)))\np_7(Sebastian) \u2192 (p_6(Sebastian) \u2295 p_0(Sebastian))\n(p_6(Sebastian) \u2228 p_4(Sebastian)) \u2227 (\u00acp_6(Sebastian) \u2228 \u00acp_4(Sebastian))\np_3(Sebastian) \u2192 \u00acp_4(Sebastian)\np_3(Sebastian) \u2192 (\u00acp_4(Sebastian) \u2227 p_3(Sebastian))\n\u00acp_4(Sebastian) \u2192 \u00acp_5(Sebastian)\n\u00acp_4(Sebastian) \u2192 (\u00acp_5(Sebastian) \u2228 p_4(Sebastian))\n\u00acp_2(Sebastian) \u2192 (\u00acp_9(Sebastian) \u2228 \u00acp_2(Sebastian))\np_1(Sebastian) \u2192 (p_1(Sebastian) \u2227 (p_7(Sebastian) \u2228 p_8(Sebastian)))",
            "Initial Goal": "p_5(Sebastian)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_3(Sebastian).",
                    "-p_2(Sebastian).",
                    "p_1(Sebastian).",
                    "-p_0(Sebastian).",
                    "p_10(Sebastian) | p_3(Sebastian).",
                    "p_10(Sebastian) | p_3(Sebastian) | p_5(Sebastian).",
                    "-p_9(Sebastian) | p_2(Sebastian).",
                    "all x (p_8(x) -> (p_9(x) & p_10(x))).",
                    "all x (p_1(x) -> (p_7(x) | p_8(x))).",
                    "p_7(Sebastian) -> (-(p_6(Sebastian) <-> p_0(Sebastian))).",
                    "(p_6(Sebastian) | p_4(Sebastian)) & (-p_6(Sebastian) | -p_4(Sebastian)).",
                    "p_3(Sebastian) -> -p_4(Sebastian).",
                    "p_3(Sebastian) -> (-p_4(Sebastian) & p_3(Sebastian)).",
                    "-p_4(Sebastian) -> -p_5(Sebastian).",
                    "-p_4(Sebastian) -> (-p_5(Sebastian) | p_4(Sebastian)).",
                    "-p_2(Sebastian) -> (-p_9(Sebastian) | -p_2(Sebastian)).",
                    "p_1(Sebastian) -> (p_1(Sebastian) & (p_7(Sebastian) | p_8(Sebastian)))."
                ],
                "formulas(goals)": [
                    "-p_5(Sebastian)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_9(Sebastian) \u2192 p_2(Sebastian)",
                    "p_6(Sebastian) \u2295 p_4(Sebastian)"
                ],
                "added_facts": [
                    "p_10(Sebastian) \u2228 p_3(Sebastian) \u2228 p_5(Sebastian)"
                ],
                "added_rules": [
                    "\u00acp_9(Sebastian) \u2228 p_2(Sebastian)",
                    "(p_6(Sebastian) \u2228 p_4(Sebastian)) \u2227 (\u00acp_6(Sebastian) \u2228 \u00acp_4(Sebastian))",
                    "p_3(Sebastian) \u2192 (\u00acp_4(Sebastian) \u2227 p_3(Sebastian))",
                    "\u00acp_4(Sebastian) \u2192 (\u00acp_5(Sebastian) \u2228 p_4(Sebastian))",
                    "\u00acp_2(Sebastian) \u2192 (\u00acp_9(Sebastian) \u2228 \u00acp_2(Sebastian))",
                    "p_1(Sebastian) \u2192 (p_1(Sebastian) \u2227 (p_7(Sebastian) \u2228 p_8(Sebastian)))"
                ]
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_3(Sebastian)\n\u00acp_2(Sebastian)\np_1(Sebastian)\n\u00acp_0(Sebastian)\np_10(Sebastian) \u2228 p_3(Sebastian)\np_10(Sebastian) \u2228 p_3(Sebastian) \u2228 p_5(Sebastian)\n\u00acp_9(Sebastian) \u2228 p_2(Sebastian)\n\u2200x (p_8(x) \u2192 (p_9(x) \u2227 p_10(x)))\n\u2200x (p_1(x) \u2192 (p_7(x) \u2228 p_8(x)))\np_7(Sebastian) \u2192 (p_6(Sebastian) \u2295 p_0(Sebastian))\n(p_6(Sebastian) \u2228 p_4(Sebastian)) \u2227 (\u00acp_6(Sebastian) \u2228 \u00acp_4(Sebastian))\np_3(Sebastian) \u2192 \u00acp_4(Sebastian)\np_3(Sebastian) \u2192 (\u00acp_4(Sebastian) \u2227 p_3(Sebastian))\n\u00acp_4(Sebastian) \u2192 \u00acp_5(Sebastian)\n\u00acp_4(Sebastian) \u2192 (\u00acp_5(Sebastian) \u2228 p_4(Sebastian))\n\u00acp_2(Sebastian) \u2192 (\u00acp_9(Sebastian) \u2228 \u00acp_2(Sebastian))\np_1(Sebastian) \u2192 (p_1(Sebastian) \u2227 (p_7(Sebastian) \u2228 p_8(Sebastian)))\np_8(Sebastian) \u2192 (p_9(Sebastian) \u2227 p_10(Sebastian))\np_3(Sebastian) \u2192 (p_3(Sebastian) \u2228 p_10(Sebastian))\np_3(Sebastian) \u2192 (\u00acp_4(Sebastian) \u2228 p_4(Sebastian))",
            "Initial Goal": "p_5(Sebastian)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_3(Sebastian)",
                    "-p_2(Sebastian)",
                    "p_1(Sebastian)",
                    "-p_0(Sebastian)",
                    "p_10(Sebastian) | p_3(Sebastian)",
                    "p_10(Sebastian) | p_3(Sebastian) | p_5(Sebastian)",
                    "-p_9(Sebastian) | p_2(Sebastian)",
                    "all x (-p_8(x) | (p_9(x) & p_10(x)))",
                    "all x (-p_1(x) | p_7(x) | p_8(x))",
                    "-p_7(Sebastian) | (-(p_6(Sebastian) <-> p_0(Sebastian)))",
                    "(p_6(Sebastian) | p_4(Sebastian)) & (-p_6(Sebastian) | -p_4(Sebastian))",
                    "-p_3(Sebastian) | -p_4(Sebastian)",
                    "-p_3(Sebastian) | (-p_4(Sebastian) & p_3(Sebastian))",
                    "p_4(Sebastian) | -p_5(Sebastian)",
                    "p_4(Sebastian) | -p_5(Sebastian) | p_4(Sebastian)",
                    "p_2(Sebastian) | (-p_9(Sebastian) | -p_2(Sebastian))",
                    "-p_1(Sebastian) | (p_1(Sebastian) & (p_7(Sebastian) | p_8(Sebastian)))",
                    "-p_8(Sebastian) | (p_9(Sebastian) & p_10(Sebastian))",
                    "-p_3(Sebastian) | (p_3(Sebastian) | p_10(Sebastian))",
                    "-p_3(Sebastian) | (-p_4(Sebastian) | p_4(Sebastian))"
                ],
                "formulas(goals)": [
                    "-p_5(Sebastian)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "p_8(Sebastian) \u2192 (p_9(Sebastian) \u2227 p_10(Sebastian))",
                    "p_3(Sebastian) \u2192 (p_3(Sebastian) \u2228 p_10(Sebastian))",
                    "p_3(Sebastian) \u2192 (\u00acp_4(Sebastian) \u2228 p_4(Sebastian))"
                ]
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_3(Sebastian)\n\u00acp_2(Sebastian)\np_1(Sebastian)\n\u00acp_0(Sebastian)\np_10(Sebastian) \u2228 p_3(Sebastian)\np_10(Sebastian) \u2228 p_3(Sebastian) \u2228 p_5(Sebastian)\n\u00acp_9(Sebastian) \u2228 p_2(Sebastian)\n\u2200x (p_8(x) \u2192 (p_9(x) \u2227 p_10(x)))\n\u2200x (p_1(x) \u2192 (p_7(x) \u2228 p_8(x)))\np_7(Sebastian) \u2192 (p_6(Sebastian) \u2295 p_0(Sebastian))\n(p_6(Sebastian) \u2228 p_4(Sebastian)) \u2227 (\u00acp_6(Sebastian) \u2228 \u00acp_4(Sebastian))\np_3(Sebastian) \u2192 \u00acp_4(Sebastian)\np_3(Sebastian) \u2192 (\u00acp_4(Sebastian) \u2227 p_3(Sebastian))\n\u00acp_4(Sebastian) \u2192 \u00acp_5(Sebastian)\n\u00acp_4(Sebastian) \u2192 (\u00acp_5(Sebastian) \u2228 p_4(Sebastian))\n\u00acp_2(Sebastian) \u2192 (\u00acp_9(Sebastian) \u2228 \u00acp_2(Sebastian))\np_1(Sebastian) \u2192 (p_1(Sebastian) \u2227 (p_7(Sebastian) \u2228 p_8(Sebastian)))\np_8(Sebastian) \u2192 (p_9(Sebastian) \u2227 p_10(Sebastian))\np_3(Sebastian) \u2192 (p_3(Sebastian) \u2228 p_10(Sebastian))\np_3(Sebastian) \u2192 (\u00acp_4(Sebastian) \u2228 p_4(Sebastian))\np_10(Sebastian) \u2228 \u00acp_4(Sebastian)\np_3(Sebastian) \u2192 \u00acp_5(Sebastian)",
            "Initial Goal": "p_5(Sebastian)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_3(Sebastian)",
                    "-p_2(Sebastian)",
                    "p_1(Sebastian)",
                    "-p_0(Sebastian)",
                    "p_10(Sebastian) | p_3(Sebastian)",
                    "p_10(Sebastian) | p_3(Sebastian) | p_5(Sebastian)",
                    "-p_9(Sebastian) | p_2(Sebastian)",
                    "all x (p_8(x) -> (p_9(x) & p_10(x)))",
                    "all x (p_1(x) -> (p_7(x) | p_8(x)))",
                    "p_7(Sebastian) -> (-(p_6(Sebastian) <-> p_0(Sebastian)))",
                    "(p_6(Sebastian) | p_4(Sebastian)) & (-p_6(Sebastian) | -p_4(Sebastian))",
                    "p_3(Sebastian) -> -p_4(Sebastian)",
                    "p_3(Sebastian) -> (-p_4(Sebastian) & p_3(Sebastian))",
                    "-p_4(Sebastian) -> -p_5(Sebastian)",
                    "-p_4(Sebastian) -> (-p_5(Sebastian) | p_4(Sebastian))",
                    "-p_2(Sebastian) -> (-p_9(Sebastian) | -p_2(Sebastian))",
                    "p_1(Sebastian) -> (p_1(Sebastian) & (p_7(Sebastian) | p_8(Sebastian)))",
                    "p_8(Sebastian) -> (p_9(Sebastian) & p_10(Sebastian))",
                    "p_3(Sebastian) -> (p_3(Sebastian) | p_10(Sebastian))",
                    "p_3(Sebastian) -> (-p_4(Sebastian) | p_4(Sebastian))",
                    "p_10(Sebastian) | -p_4(Sebastian)",
                    "p_3(Sebastian) -> -p_5(Sebastian)"
                ],
                "formulas(goals)": [
                    "-p_5(Sebastian)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_10(Sebastian) \u2228 \u00acp_4(Sebastian)"
                ],
                "added_rules": [
                    "p_3(Sebastian) \u2192 \u00acp_5(Sebastian)"
                ]
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_3(Sebastian)\n\u00acp_2(Sebastian)\np_1(Sebastian)\n\u00acp_0(Sebastian)\np_10(Sebastian) \u2228 p_3(Sebastian)\np_10(Sebastian) \u2228 p_3(Sebastian) \u2228 p_5(Sebastian)\n\u00acp_9(Sebastian) \u2228 p_2(Sebastian)\n\u2200x (p_8(x) \u2192 (p_9(x) \u2227 p_10(x)))\n\u2200x (p_1(x) \u2192 (p_7(x) \u2228 p_8(x)))\np_7(Sebastian) \u2192 (p_6(Sebastian) \u2295 p_0(Sebastian))\np_6(Sebastian) \u2295 p_4(Sebastian)\np_3(Sebastian) \u2192 \u00acp_4(Sebastian)\np_3(Sebastian) \u2192 (\u00acp_4(Sebastian) \u2227 p_3(Sebastian))\n\u00acp_4(Sebastian) \u2192 \u00acp_5(Sebastian)\n\u00acp_4(Sebastian) \u2192 (\u00acp_5(Sebastian) \u2228 p_4(Sebastian))\n\u00acp_2(Sebastian) \u2192 (\u00acp_9(Sebastian) \u2228 \u00acp_2(Sebastian))\np_1(Sebastian) \u2192 (p_1(Sebastian) \u2227 (p_7(Sebastian) \u2228 p_8(Sebastian)))\np_8(Sebastian) \u2192 (p_9(Sebastian) \u2227 p_10(Sebastian))\np_3(Sebastian) \u2192 (p_3(Sebastian) \u2228 p_10(Sebastian))\np_3(Sebastian) \u2192 (\u00acp_4(Sebastian) \u2228 p_4(Sebastian))\np_10(Sebastian) \u2228 \u00acp_4(Sebastian)\np_3(Sebastian) \u2192 \u00acp_5(Sebastian)\n\u00acp_3(Sebastian) \u2228 \u00acp_5(Sebastian)\n\u00acp_5(Sebastian)\np_3(Sebastian) \u2192 (p_3(Sebastian) \u2227 p_3(Sebastian))\np_3(Sebastian) \u2192 (\u00acp_4(Sebastian) \u2227 \u00acp_5(Sebastian))\np_3(Sebastian) \u2192 (\u00acp_4(Sebastian) \u2227 \u00acp_5(Sebastian) \u2227 p_3(Sebastian))\np_3(Sebastian) \u2192 (p_3(Sebastian) \u2228 p_5(Sebastian))\np_3(Sebastian) \u2192 (\u00acp_5(Sebastian) \u2228 p_5(Sebastian))",
            "Initial Goal": "p_5(Sebastian)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_3(Sebastian).",
                    "-p_2(Sebastian).",
                    "p_1(Sebastian).",
                    "-p_0(Sebastian).",
                    "p_10(Sebastian) | p_3(Sebastian).",
                    "p_10(Sebastian) | p_3(Sebastian) | p_5(Sebastian).",
                    "-p_9(Sebastian) | p_2(Sebastian).",
                    "all x (p_8(x) -> (p_9(x) & p_10(x))).",
                    "all x (p_1(x) -> (p_7(x) | p_8(x))).",
                    "p_7(Sebastian) -> (-(p_6(Sebastian) <-> p_0(Sebastian))).",
                    "-(p_6(Sebastian) <-> p_4(Sebastian)).",
                    "p_3(Sebastian) -> -p_4(Sebastian).",
                    "p_3(Sebastian) -> (-p_4(Sebastian) & p_3(Sebastian)).",
                    "-p_4(Sebastian) -> -p_5(Sebastian).",
                    "-p_4(Sebastian) -> (-p_5(Sebastian) | p_4(Sebastian)).",
                    "-p_2(Sebastian) -> (-p_9(Sebastian) | -p_2(Sebastian)).",
                    "p_1(Sebastian) -> (p_1(Sebastian) & (p_7(Sebastian) | p_8(Sebastian))).",
                    "p_8(Sebastian) -> (p_9(Sebastian) & p_10(Sebastian)).",
                    "p_3(Sebastian) -> (p_3(Sebastian) | p_10(Sebastian)).",
                    "p_3(Sebastian) -> (-p_4(Sebastian) | p_4(Sebastian)).",
                    "p_10(Sebastian) | -p_4(Sebastian).",
                    "p_3(Sebastian) -> -p_5(Sebastian).",
                    "-p_3(Sebastian) | -p_5(Sebastian).",
                    "-p_5(Sebastian).",
                    "p_3(Sebastian) -> (p_3(Sebastian) & p_3(Sebastian)).",
                    "p_3(Sebastian) -> (-p_4(Sebastian) & -p_5(Sebastian)).",
                    "p_3(Sebastian) -> (-p_4(Sebastian) & -p_5(Sebastian) & p_3(Sebastian)).",
                    "p_3(Sebastian) -> (p_3(Sebastian) | p_5(Sebastian)).",
                    "p_3(Sebastian) -> (-p_5(Sebastian) | p_5(Sebastian))."
                ],
                "formulas(goals)": [
                    "-p_5(Sebastian)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "\u00acp_5(Sebastian)"
                ],
                "added_rules": [
                    "p_3(Sebastian) \u2192 (p_3(Sebastian) \u2227 p_3(Sebastian))",
                    "p_3(Sebastian) \u2192 (\u00acp_4(Sebastian) \u2227 \u00acp_5(Sebastian))",
                    "p_3(Sebastian) \u2192 (\u00acp_4(Sebastian) \u2227 \u00acp_5(Sebastian) \u2227 p_3(Sebastian))",
                    "p_3(Sebastian) \u2192 (p_3(Sebastian) \u2228 p_5(Sebastian))",
                    "p_3(Sebastian) \u2192 (\u00acp_5(Sebastian) \u2228 p_5(Sebastian))",
                    "\u00acp_3(Sebastian) \u2228 \u00acp_5(Sebastian)",
                    "p_6(Sebastian) \u2295 p_4(Sebastian)"
                ]
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_3(Sebastian)\n\u00acp_2(Sebastian)\np_1(Sebastian)\n\u00acp_0(Sebastian)\np_10(Sebastian) \u2228 p_3(Sebastian)\np_10(Sebastian) \u2228 p_3(Sebastian) \u2228 p_5(Sebastian)\n\u00acp_9(Sebastian) \u2228 p_2(Sebastian)\n\u2200x (\u00acp_8(x) \u2228 (p_9(x) \u2227 p_10(x)))\n\u2200x (\u00acp_1(x) \u2228 p_7(x) \u2228 p_8(x))\n\u2200x (\u00acp_7(x) \u2192 (p_6(x) \u2295 p_0(x)))\np_6(Sebastian) \u2295 p_4(Sebastian)\n\u2200x (p_3(x) \u2192 \u00acp_4(x))\n\u2200x (p_3(x) \u2192 (\u00acp_4(x) \u2227 p_3(x)))\n\u2200x (p_4(x) \u2228 p_5(x))\n\u2200x (p_2(x) \u2228 (\u00acp_9(x) \u2228 \u00acp_2(x)))\n\u2200x (p_1(x) \u2192 (p_1(x) \u2227 (p_7(x) \u2228 p_8(x))))\n\u2200x (p_8(x) \u2192 (p_9(x) \u2227 p_10(x)))\n\u2200x (p_3(x) \u2192 (p_3(x) \u2228 p_10(x)))\n\u2200x (p_3(x) \u2192 (\u00acp_4(x) \u2228 p_4(x)))\np_10(Sebastian) \u2228 \u00acp_4(Sebastian)\n\u2200x (p_3(x) \u2192 (p_3(x) \u2227 p_3(x)))\n\u2200x (p_3(x) \u2192 (p_3(x) \u2228 p_5(x)))\n\u2200x (p_3(x) \u2192 (\u00acp_5(x) \u2228 p_5(x)))",
            "Initial Goal": "p_5(Sebastian)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_3(Sebastian)",
                    "-p_2(Sebastian)",
                    "p_1(Sebastian)",
                    "-p_0(Sebastian)",
                    "p_10(Sebastian) | p_3(Sebastian)",
                    "p_10(Sebastian) | p_3(Sebastian) | p_5(Sebastian)",
                    "-p_9(Sebastian) | p_2(Sebastian)",
                    "all x (-p_8(x) | (p_9(x) & p_10(x)))",
                    "all x (-p_1(x) | p_7(x) | p_8(x))",
                    "all x (-p_7(x) | (-(p_6(x) <-> p_0(x))))",
                    "-(p_6(Sebastian) <-> p_4(Sebastian))",
                    "all x (-p_3(x) | -p_4(x))",
                    "all x (-p_3(x) | (-p_4(x) & p_3(x)))",
                    "all x (p_4(x) | p_5(x))",
                    "all x (p_2(x) | (-p_9(x) | -p_2(x)))",
                    "all x (-p_1(x) | (p_1(x) & (p_7(x) | p_8(x))))",
                    "all x (-p_8(x) | (p_9(x) & p_10(x)))",
                    "all x (-p_3(x) | (p_3(x) | p_10(x)))",
                    "all x (-p_3(x) | (-p_4(x) | p_4(x)))",
                    "p_10(Sebastian) | -p_4(Sebastian)",
                    "all x (-p_3(x) | (p_3(x) & p_3(x)))",
                    "all x (-p_3(x) | (p_3(x) | p_5(x)))",
                    "all x (-p_3(x) | (-p_5(x) | p_5(x)))"
                ],
                "formulas(goals)": [
                    "p_5(Sebastian)"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "\u00acp_5(Sebastian)"
                ],
                "removed_rules": [
                    "\u00acp_4(Sebastian) \u2192 (\u00acp_5(Sebastian) \u2228 p_4(Sebastian))",
                    "p_3(Sebastian) \u2192 (\u00acp_4(Sebastian) \u2227 \u00acp_5(Sebastian))",
                    "p_3(Sebastian) \u2192 (\u00acp_4(Sebastian) \u2227 \u00acp_5(Sebastian) \u2227 p_3(Sebastian))",
                    "p_3(Sebastian) \u2192 \u00acp_5(Sebastian)",
                    "\u00acp_3(Sebastian) \u2228 \u00acp_5(Sebastian)",
                    "p_3(Sebastian) \u2192 (\u00acp_5(Sebastian) \u2228 p_5(Sebastian))"
                ],
                "added_facts": [],
                "added_rules": [
                    "\u2200x (p_4(x) \u2228 p_5(x))"
                ]
            }
        }
    ]
}