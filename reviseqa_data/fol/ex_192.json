{
    "background_story": "Brycen was a charismatic socialite known for his ability to hobnob with the elite. As a young entrepreneur, he built a lucrative business networking with influential individuals in the tech and finance industries. His charm and wit made him a sought-after guest at high-profile events, from exclusive galas to private yacht parties. Brycen's talent for effortlessly mingling with billionaires, celebrities, and thought leaders earned him a reputation as a master connector. He used his extensive network to broker deals, secure investments, and launch innovative projects. Whether rubbing shoulders with royalty or advising startup founders, Brycen moved with ease and confidence, always ready to forge new connections and opportunities.",
    "predicates": [
        {
            "id": 0,
            "name": "successful"
        },
        {
            "id": 1,
            "name": "charismatic"
        },
        {
            "id": 2,
            "name": "attends_galas"
        },
        {
            "id": 3,
            "name": "builds_relationships"
        },
        {
            "id": 4,
            "name": "has_knowledge"
        },
        {
            "id": 5,
            "name": "writes_clearly"
        },
        {
            "id": 6,
            "name": "solves_problems"
        },
        {
            "id": 7,
            "name": "makes_decisions"
        },
        {
            "id": 8,
            "name": "influential"
        },
        {
            "id": 9,
            "name": "wealthy"
        },
        {
            "id": 10,
            "name": "well_connected"
        },
        {
            "id": 11,
            "name": "outgoing_person"
        },
        {
            "id": 12,
            "name": "is_articulate"
        },
        {
            "id": 13,
            "name": "speaks_fluently"
        },
        {
            "id": 14,
            "name": "thinks_critically"
        },
        {
            "id": 15,
            "name": "leads_teams"
        },
        {
            "id": 16,
            "name": "shapes_opinions"
        },
        {
            "id": 17,
            "name": "meets_people"
        },
        {
            "id": 18,
            "name": "forms_bonds"
        },
        {
            "id": 19,
            "name": "enjoys_parties"
        },
        {
            "id": 20,
            "name": "likes_meeting_people"
        },
        {
            "id": 21,
            "name": "expresses_thoughts"
        },
        {
            "id": 22,
            "name": "conveys_ideas"
        },
        {
            "id": 23,
            "name": "has_passion"
        },
        {
            "id": 24,
            "name": "listens_actively"
        },
        {
            "id": 25,
            "name": "reads_widely"
        },
        {
            "id": 26,
            "name": "learns_quickly"
        }
    ],
    "subject_name": "Brycen",
    "subject_category": "human",
    "keyword": "hobnob",
    "all_facts": [
        {
            "id": 0,
            "subject": "Brycen",
            "text": "Brycen is not successful.",
            "fol": "\u00acp_0(Brycen)",
            "str_fol": "\u00acsuccessful(Brycen)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Brycen",
            "text": "Brycen is charismatic.",
            "fol": "p_1(Brycen)",
            "str_fol": "charismatic(Brycen)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Brycen",
            "text": "Brycen attends galas.",
            "fol": "p_2(Brycen)",
            "str_fol": "attends_galas(Brycen)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Brycen",
            "text": "Brycen does not build relationships.",
            "fol": "\u00acp_3(Brycen)",
            "str_fol": "\u00acbuilds_relationships(Brycen)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Brycen",
            "text": "Brycen does not have valuable knowledge.",
            "fol": "\u00acp_4(Brycen)",
            "str_fol": "\u00achas_knowledge(Brycen)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Brycen",
            "text": "Brycen does not write clearly.",
            "fol": "\u00acp_5(Brycen)",
            "str_fol": "\u00acwrites_clearly(Brycen)",
            "negation": true
        },
        {
            "id": 6,
            "subject": "Brycen",
            "text": "Brycen does not solve problems.",
            "fol": "\u00acp_6(Brycen)",
            "str_fol": "\u00acsolves_problems(Brycen)",
            "negation": true
        },
        {
            "id": 7,
            "subject": "Brycen",
            "text": "Brycen does not make decisions.",
            "fol": "\u00acp_7(Brycen)",
            "str_fol": "\u00acmakes_decisions(Brycen)",
            "negation": true
        },
        {
            "id": 8,
            "subject": "Brycen",
            "text": "Brycen does not think critically.",
            "fol": "\u00acp_14(Brycen)",
            "str_fol": "\u00acthinks_critically(Brycen)",
            "negation": true
        },
        {
            "id": 9,
            "subject": "Brycen",
            "text": "Brycen does not speak fluently.",
            "fol": "\u00acp_13(Brycen)",
            "str_fol": "\u00acspeaks_fluently(Brycen)",
            "negation": true
        },
        {
            "id": 10,
            "subject": "Brycen",
            "text": "Brycen is not articulate.",
            "fol": "\u00acp_12(Brycen)",
            "str_fol": "\u00acis_articulate(Brycen)",
            "negation": true
        },
        {
            "id": 11,
            "subject": "Brycen",
            "text": "Brycen is an outgoing person.",
            "fol": "p_11(Brycen)",
            "str_fol": "outgoing_person(Brycen)",
            "negation": false
        },
        {
            "id": 12,
            "subject": "Brycen",
            "text": "Brycen is well-connected.",
            "fol": "p_10(Brycen)",
            "str_fol": "well_connected(Brycen)",
            "negation": false
        },
        {
            "id": 13,
            "subject": "Brycen",
            "text": "Brycen is influential.",
            "fol": "p_8(Brycen)",
            "str_fol": "influential(Brycen)",
            "negation": false
        },
        {
            "id": 14,
            "subject": "Brycen",
            "text": "Brycen is wealthy.",
            "fol": "p_9(Brycen)",
            "str_fol": "wealthy(Brycen)",
            "negation": false
        }
    ],
    "context_facts": [
        {
            "id": 6,
            "subject": "Brycen",
            "text": "Brycen does not solve problems.",
            "fol": "\u00acp_6(Brycen)",
            "str_fol": "\u00acsolves_problems(Brycen)",
            "negation": true
        },
        {
            "id": 7,
            "subject": "Brycen",
            "text": "Brycen does not make decisions.",
            "fol": "\u00acp_7(Brycen)",
            "str_fol": "\u00acmakes_decisions(Brycen)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Brycen",
            "text": "Brycen does not write clearly.",
            "fol": "\u00acp_5(Brycen)",
            "str_fol": "\u00acwrites_clearly(Brycen)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Brycen",
            "text": "Brycen does not build relationships.",
            "fol": "\u00acp_3(Brycen)",
            "str_fol": "\u00acbuilds_relationships(Brycen)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Brycen",
            "text": "Brycen attends galas.",
            "fol": "p_2(Brycen)",
            "str_fol": "attends_galas(Brycen)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Brycen",
            "text": "Brycen does not have valuable knowledge.",
            "fol": "\u00acp_4(Brycen)",
            "str_fol": "\u00achas_knowledge(Brycen)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Brycen",
            "text": "Brycen is not successful.",
            "fol": "\u00acp_0(Brycen)",
            "str_fol": "\u00acsuccessful(Brycen)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Brycen",
            "text": "Brycen is charismatic.",
            "fol": "p_1(Brycen)",
            "str_fol": "charismatic(Brycen)",
            "negation": false
        }
    ],
    "context_rules": [
        {
            "id": 6,
            "text": "If Brycen either thinks critically or solves problems (but not both), then he makes decisions.",
            "fol": "(p_14(Brycen) \u2295 p_6(Brycen)) \u2192 p_7(Brycen)",
            "str_fol": "(thinks_critically(Brycen) \u2295 solves_problems(Brycen)) \u2192 makes_decisions(Brycen)"
        },
        {
            "id": 5,
            "text": "If Brycen speaks fluently, then he either writes clearly or thinks critically (but not both).",
            "fol": "p_13(Brycen) \u2192 (p_5(Brycen) \u2295 p_14(Brycen))",
            "str_fol": "speaks_fluently(Brycen) \u2192 (writes_clearly(Brycen) \u2295 thinks_critically(Brycen))"
        },
        {
            "id": 4,
            "text": "If Brycen either speaks fluently or is articulate (but not both), then he builds relationships.",
            "fol": "(p_13(Brycen) \u2295 p_12(Brycen)) \u2192 p_3(Brycen)",
            "str_fol": "(speaks_fluently(Brycen) \u2295 is_articulate(Brycen)) \u2192 builds_relationships(Brycen)"
        },
        {
            "id": 3,
            "text": "If Brycen attends galas, then he is either an outgoing person or articulate, but not both.",
            "fol": "p_2(Brycen) \u2192 (p_11(Brycen) \u2295 p_12(Brycen))",
            "str_fol": "attends_galas(Brycen) \u2192 (outgoing_person(Brycen) \u2295 is_articulate(Brycen))"
        },
        {
            "id": 2,
            "text": "If Brycen is an outgoing person, then he is either well-connected or has valuable knowledge.",
            "fol": "p_11(Brycen) \u2192 (p_10(Brycen) \u2228 p_4(Brycen))",
            "str_fol": "outgoing_person(Brycen) \u2192 (well_connected(Brycen) \u2228 has_knowledge(Brycen))"
        },
        {
            "id": 1,
            "text": "If Brycen is well-connected, then he is either successful or influential (or both).",
            "fol": "p_10(Brycen) \u2192 (p_0(Brycen) \u2228 p_8(Brycen))",
            "str_fol": "well_connected(Brycen) \u2192 (successful(Brycen) \u2228 influential(Brycen))"
        },
        {
            "id": 0,
            "text": "If Brycen is charismatic, then he is either influential or wealthy, but not both.",
            "fol": "p_1(Brycen) \u2192 (p_8(Brycen) \u2295 p_9(Brycen))",
            "str_fol": "charismatic(Brycen) \u2192 (influential(Brycen) \u2295 wealthy(Brycen))"
        }
    ],
    "context": [
        {
            "id": 6,
            "subject": "Brycen",
            "text": "Brycen does not solve problems.",
            "fol": "\u00acp_6(Brycen)",
            "str_fol": "\u00acsolves_problems(Brycen)",
            "negation": true
        },
        {
            "id": 7,
            "subject": "Brycen",
            "text": "Brycen does not make decisions.",
            "fol": "\u00acp_7(Brycen)",
            "str_fol": "\u00acmakes_decisions(Brycen)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Brycen",
            "text": "Brycen does not write clearly.",
            "fol": "\u00acp_5(Brycen)",
            "str_fol": "\u00acwrites_clearly(Brycen)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Brycen",
            "text": "Brycen does not build relationships.",
            "fol": "\u00acp_3(Brycen)",
            "str_fol": "\u00acbuilds_relationships(Brycen)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Brycen",
            "text": "Brycen attends galas.",
            "fol": "p_2(Brycen)",
            "str_fol": "attends_galas(Brycen)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Brycen",
            "text": "Brycen does not have valuable knowledge.",
            "fol": "\u00acp_4(Brycen)",
            "str_fol": "\u00achas_knowledge(Brycen)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Brycen",
            "text": "Brycen is not successful.",
            "fol": "\u00acp_0(Brycen)",
            "str_fol": "\u00acsuccessful(Brycen)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Brycen",
            "text": "Brycen is charismatic.",
            "fol": "p_1(Brycen)",
            "str_fol": "charismatic(Brycen)",
            "negation": false
        },
        {
            "id": 6,
            "text": "If Brycen either thinks critically or solves problems (but not both), then he makes decisions.",
            "fol": "(p_14(Brycen) \u2295 p_6(Brycen)) \u2192 p_7(Brycen)",
            "str_fol": "(thinks_critically(Brycen) \u2295 solves_problems(Brycen)) \u2192 makes_decisions(Brycen)"
        },
        {
            "id": 5,
            "text": "If Brycen speaks fluently, then he either writes clearly or thinks critically (but not both).",
            "fol": "p_13(Brycen) \u2192 (p_5(Brycen) \u2295 p_14(Brycen))",
            "str_fol": "speaks_fluently(Brycen) \u2192 (writes_clearly(Brycen) \u2295 thinks_critically(Brycen))"
        },
        {
            "id": 4,
            "text": "If Brycen either speaks fluently or is articulate (but not both), then he builds relationships.",
            "fol": "(p_13(Brycen) \u2295 p_12(Brycen)) \u2192 p_3(Brycen)",
            "str_fol": "(speaks_fluently(Brycen) \u2295 is_articulate(Brycen)) \u2192 builds_relationships(Brycen)"
        },
        {
            "id": 3,
            "text": "If Brycen attends galas, then he is either an outgoing person or articulate, but not both.",
            "fol": "p_2(Brycen) \u2192 (p_11(Brycen) \u2295 p_12(Brycen))",
            "str_fol": "attends_galas(Brycen) \u2192 (outgoing_person(Brycen) \u2295 is_articulate(Brycen))"
        },
        {
            "id": 2,
            "text": "If Brycen is an outgoing person, then he is either well-connected or has valuable knowledge.",
            "fol": "p_11(Brycen) \u2192 (p_10(Brycen) \u2228 p_4(Brycen))",
            "str_fol": "outgoing_person(Brycen) \u2192 (well_connected(Brycen) \u2228 has_knowledge(Brycen))"
        },
        {
            "id": 1,
            "text": "If Brycen is well-connected, then he is either successful or influential (or both).",
            "fol": "p_10(Brycen) \u2192 (p_0(Brycen) \u2228 p_8(Brycen))",
            "str_fol": "well_connected(Brycen) \u2192 (successful(Brycen) \u2228 influential(Brycen))"
        },
        {
            "id": 0,
            "text": "If Brycen is charismatic, then he is either influential or wealthy, but not both.",
            "fol": "p_1(Brycen) \u2192 (p_8(Brycen) \u2295 p_9(Brycen))",
            "str_fol": "charismatic(Brycen) \u2192 (influential(Brycen) \u2295 wealthy(Brycen))"
        }
    ],
    "context_fol": "\u00acp_6(Brycen)\n\u00acp_7(Brycen)\n\u00acp_5(Brycen)\n\u00acp_3(Brycen)\np_2(Brycen)\n\u00acp_4(Brycen)\n\u00acp_0(Brycen)\np_1(Brycen)\n(p_14(Brycen) \u2295 p_6(Brycen)) \u2192 p_7(Brycen)\np_13(Brycen) \u2192 (p_5(Brycen) \u2295 p_14(Brycen))\n(p_13(Brycen) \u2295 p_12(Brycen)) \u2192 p_3(Brycen)\np_2(Brycen) \u2192 (p_11(Brycen) \u2295 p_12(Brycen))\np_11(Brycen) \u2192 (p_10(Brycen) \u2228 p_4(Brycen))\np_10(Brycen) \u2192 (p_0(Brycen) \u2228 p_8(Brycen))\np_1(Brycen) \u2192 (p_8(Brycen) \u2295 p_9(Brycen))",
    "conclusion": {
        "id": 14,
        "subject": "Brycen",
        "text": "Brycen is wealthy.",
        "fol": "p_9(Brycen)",
        "str_fol": "wealthy(Brycen)",
        "negation": false
    },
    "initial_answer": "False",
    "initial_goal": "p_9(Brycen)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 6,
                    "subject": "Brycen",
                    "text": "Brycen does not solve problems.",
                    "fol": "\u00acp_6(Brycen)",
                    "str_fol": "\u00acsolves_problems(Brycen)",
                    "negation": true
                },
                {
                    "id": 7,
                    "subject": "Brycen",
                    "text": "Brycen does not make decisions.",
                    "fol": "\u00acp_7(Brycen)",
                    "str_fol": "\u00acmakes_decisions(Brycen)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 6,
                    "text": "If Brycen either thinks critically or solves problems (but not both), then he makes decisions.",
                    "fol": "(p_14(Brycen) \u2295 p_6(Brycen)) \u2192 p_7(Brycen)",
                    "str_fol": "(thinks_critically(Brycen) \u2295 solves_problems(Brycen)) \u2192 makes_decisions(Brycen)"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Brycen",
                "text": "Brycen does not think critically.",
                "fol": "\u00acp_14(Brycen)",
                "str_fol": "\u00acthinks_critically(Brycen)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 5,
                    "subject": "Brycen",
                    "text": "Brycen does not write clearly.",
                    "fol": "\u00acp_5(Brycen)",
                    "str_fol": "\u00acwrites_clearly(Brycen)",
                    "negation": true
                },
                {
                    "id": 8,
                    "subject": "Brycen",
                    "text": "Brycen does not think critically.",
                    "fol": "\u00acp_14(Brycen)",
                    "str_fol": "\u00acthinks_critically(Brycen)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "If Brycen speaks fluently, then he either writes clearly or thinks critically (but not both).",
                    "fol": "p_13(Brycen) \u2192 (p_5(Brycen) \u2295 p_14(Brycen))",
                    "str_fol": "speaks_fluently(Brycen) \u2192 (writes_clearly(Brycen) \u2295 thinks_critically(Brycen))"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Brycen",
                "text": "Brycen does not speak fluently.",
                "fol": "\u00acp_13(Brycen)",
                "str_fol": "\u00acspeaks_fluently(Brycen)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 9,
                    "subject": "Brycen",
                    "text": "Brycen does not speak fluently.",
                    "fol": "\u00acp_13(Brycen)",
                    "str_fol": "\u00acspeaks_fluently(Brycen)",
                    "negation": true
                },
                {
                    "id": 3,
                    "subject": "Brycen",
                    "text": "Brycen does not build relationships.",
                    "fol": "\u00acp_3(Brycen)",
                    "str_fol": "\u00acbuilds_relationships(Brycen)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "If Brycen either speaks fluently or is articulate (but not both), then he builds relationships.",
                    "fol": "(p_13(Brycen) \u2295 p_12(Brycen)) \u2192 p_3(Brycen)",
                    "str_fol": "(speaks_fluently(Brycen) \u2295 is_articulate(Brycen)) \u2192 builds_relationships(Brycen)"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Brycen",
                "text": "Brycen is not articulate.",
                "fol": "\u00acp_12(Brycen)",
                "str_fol": "\u00acis_articulate(Brycen)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 2,
                    "subject": "Brycen",
                    "text": "Brycen attends galas.",
                    "fol": "p_2(Brycen)",
                    "str_fol": "attends_galas(Brycen)",
                    "negation": false
                },
                {
                    "id": 10,
                    "subject": "Brycen",
                    "text": "Brycen is not articulate.",
                    "fol": "\u00acp_12(Brycen)",
                    "str_fol": "\u00acis_articulate(Brycen)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "If Brycen attends galas, then he is either an outgoing person or articulate, but not both.",
                    "fol": "p_2(Brycen) \u2192 (p_11(Brycen) \u2295 p_12(Brycen))",
                    "str_fol": "attends_galas(Brycen) \u2192 (outgoing_person(Brycen) \u2295 is_articulate(Brycen))"
                }
            ],
            "conclusion": {
                "id": 11,
                "subject": "Brycen",
                "text": "Brycen is an outgoing person.",
                "fol": "p_11(Brycen)",
                "str_fol": "outgoing_person(Brycen)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 11,
                    "subject": "Brycen",
                    "text": "Brycen is an outgoing person.",
                    "fol": "p_11(Brycen)",
                    "str_fol": "outgoing_person(Brycen)",
                    "negation": false
                },
                {
                    "id": 4,
                    "subject": "Brycen",
                    "text": "Brycen does not have valuable knowledge.",
                    "fol": "\u00acp_4(Brycen)",
                    "str_fol": "\u00achas_knowledge(Brycen)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "If Brycen is an outgoing person, then he is either well-connected or has valuable knowledge.",
                    "fol": "p_11(Brycen) \u2192 (p_10(Brycen) \u2228 p_4(Brycen))",
                    "str_fol": "outgoing_person(Brycen) \u2192 (well_connected(Brycen) \u2228 has_knowledge(Brycen))"
                }
            ],
            "conclusion": {
                "id": 12,
                "subject": "Brycen",
                "text": "Brycen is well-connected.",
                "fol": "p_10(Brycen)",
                "str_fol": "well_connected(Brycen)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 12,
                    "subject": "Brycen",
                    "text": "Brycen is well-connected.",
                    "fol": "p_10(Brycen)",
                    "str_fol": "well_connected(Brycen)",
                    "negation": false
                },
                {
                    "id": 0,
                    "subject": "Brycen",
                    "text": "Brycen is not successful.",
                    "fol": "\u00acp_0(Brycen)",
                    "str_fol": "\u00acsuccessful(Brycen)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "If Brycen is well-connected, then he is either successful or influential (or both).",
                    "fol": "p_10(Brycen) \u2192 (p_0(Brycen) \u2228 p_8(Brycen))",
                    "str_fol": "well_connected(Brycen) \u2192 (successful(Brycen) \u2228 influential(Brycen))"
                }
            ],
            "conclusion": {
                "id": 13,
                "subject": "Brycen",
                "text": "Brycen is influential.",
                "fol": "p_8(Brycen)",
                "str_fol": "influential(Brycen)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 1,
                    "subject": "Brycen",
                    "text": "Brycen is charismatic.",
                    "fol": "p_1(Brycen)",
                    "str_fol": "charismatic(Brycen)",
                    "negation": false
                },
                {
                    "id": 13,
                    "subject": "Brycen",
                    "text": "Brycen is influential.",
                    "fol": "p_8(Brycen)",
                    "str_fol": "influential(Brycen)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "If Brycen is charismatic, then he is either influential or wealthy, but not both.",
                    "fol": "p_1(Brycen) \u2192 (p_8(Brycen) \u2295 p_9(Brycen))",
                    "str_fol": "charismatic(Brycen) \u2192 (influential(Brycen) \u2295 wealthy(Brycen))"
                }
            ],
            "conclusion": {
                "id": 14,
                "subject": "Brycen",
                "text": "Brycen is wealthy.",
                "fol": "p_9(Brycen)",
                "str_fol": "wealthy(Brycen)",
                "negation": false
            }
        }
    ],
    "proof_trace": "1 -(p_14(Brycen) <-> p_6(Brycen)) -> p_7(Brycen).  [assumption].\n2 p_13(Brycen) -> -(p_5(Brycen) <-> p_14(Brycen)).  [assumption].\n3 -(p_13(Brycen) <-> p_12(Brycen)) -> p_3(Brycen).  [assumption].\n4 p_2(Brycen) -> -(p_11(Brycen) <-> p_12(Brycen)).  [assumption].\n5 p_11(Brycen) -> p_10(Brycen) | p_4(Brycen).  [assumption].\n6 p_10(Brycen) -> p_0(Brycen) | p_8(Brycen).  [assumption].\n7 p_1(Brycen) -> -(p_8(Brycen) <-> p_9(Brycen)).  [assumption].\n8 -p_9(Brycen).  [goal].\n9 -p_14(Brycen) | p_6(Brycen) | p_7(Brycen).  [clausify(1)].\n10 -p_6(Brycen).  [assumption].\n12 -p_14(Brycen) | p_7(Brycen).  [resolve(9,b,10,a)].\n13 -p_7(Brycen).  [assumption].\n14 -p_13(Brycen) | p_5(Brycen) | p_14(Brycen).  [clausify(2)].\n15 -p_5(Brycen).  [assumption].\n18 -p_3(Brycen).  [assumption].\n19 p_13(Brycen) | -p_12(Brycen) | p_3(Brycen).  [clausify(3)].\n20 -p_2(Brycen) | p_11(Brycen) | p_12(Brycen).  [clausify(4)].\n21 p_2(Brycen).  [assumption].\n23 -p_11(Brycen) | p_10(Brycen) | p_4(Brycen).  [clausify(5)].\n24 -p_4(Brycen).  [assumption].\n25 -p_10(Brycen) | p_0(Brycen) | p_8(Brycen).  [clausify(6)].\n26 -p_0(Brycen).  [assumption].\n28 p_1(Brycen).  [assumption].\n29 -p_1(Brycen) | -p_8(Brycen) | -p_9(Brycen).  [clausify(7)].\n30 -p_8(Brycen) | -p_9(Brycen).  [resolve(29,a,28,a)].\n31 p_9(Brycen).  [deny(8)].\n32 -p_13(Brycen) | p_14(Brycen).  [resolve(14,b,15,a)].\n33 -p_14(Brycen).  [resolve(12,b,13,a)].\n34 p_13(Brycen) | -p_12(Brycen).  [resolve(19,c,18,a)].\n36 -p_13(Brycen).  [resolve(32,b,33,a)].\n38 p_11(Brycen) | p_12(Brycen).  [resolve(20,a,21,a)].\n39 -p_11(Brycen) | p_10(Brycen).  [resolve(23,c,24,a)].\n40 p_10(Brycen) | p_12(Brycen).  [resolve(39,a,38,a)].\n41 -p_10(Brycen) | p_8(Brycen).  [resolve(25,b,26,a)].\n42 p_12(Brycen) | p_8(Brycen).  [resolve(40,a,41,a)].\n43 -p_8(Brycen).  [resolve(30,b,31,a)].\n44 p_12(Brycen).  [resolve(42,b,43,a)].\n45 -p_12(Brycen).  [resolve(36,a,34,a)].\n46 $F.  [resolve(44,a,45,a)].",
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_6(Brycen)\n\u00acp_7(Brycen)\n\u00acp_5(Brycen)\n\u00acp_3(Brycen)\np_2(Brycen)\n\u00acp_4(Brycen)\n\u00acp_0(Brycen)\np_1(Brycen)\n(p_14(Brycen) \u2295 p_6(Brycen)) \u2192 p_7(Brycen)\np_13(Brycen) \u2192 (p_5(Brycen) \u2295 p_14(Brycen))\n(p_13(Brycen) \u2295 p_12(Brycen)) \u2192 p_3(Brycen)\np_2(Brycen) \u2192 (p_11(Brycen) \u2295 p_12(Brycen))\np_11(Brycen) \u2192 (p_10(Brycen) \u2228 p_4(Brycen))\np_10(Brycen) \u2192 (p_0(Brycen) \u2228 p_8(Brycen))\np_1(Brycen) \u2192 (p_8(Brycen) \u2295 p_9(Brycen))\np_14(Brycen) \u2192 p_7(Brycen)",
            "Initial Goal": "p_9(Brycen)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_6(Brycen).",
                    "-p_7(Brycen).",
                    "-p_5(Brycen).",
                    "-p_3(Brycen).",
                    "p_2(Brycen).",
                    "-p_4(Brycen).",
                    "-p_0(Brycen).",
                    "p_1(Brycen).",
                    "(-(p_14(Brycen) <-> p_6(Brycen))) -> p_7(Brycen).",
                    "p_13(Brycen) -> (-(p_5(Brycen) <-> p_14(Brycen))).",
                    "(-(p_13(Brycen) <-> p_12(Brycen))) -> p_3(Brycen).",
                    "p_2(Brycen) -> (-(p_11(Brycen) <-> p_12(Brycen))).",
                    "p_11(Brycen) -> (p_10(Brycen) | p_4(Brycen)).",
                    "p_10(Brycen) -> (p_0(Brycen) | p_8(Brycen)).",
                    "p_1(Brycen) -> (-(p_8(Brycen) <-> p_9(Brycen))).",
                    "p_14(Brycen) -> p_7(Brycen)."
                ],
                "formulas(goals)": [
                    "-p_9(Brycen)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "p_14(Brycen) \u2192 p_7(Brycen)"
                ]
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_6(Brycen)\n\u00acp_7(Brycen)\n\u00acp_5(Brycen)\n\u00acp_3(Brycen)\np_2(Brycen)\n\u00acp_4(Brycen)\n\u00acp_0(Brycen)\np_1(Brycen)\n(p_14(Brycen) \u2295 p_6(Brycen)) \u2192 p_7(Brycen)\np_13(Brycen) \u2192 (p_5(Brycen) \u2295 p_14(Brycen))\n(p_13(Brycen) \u2295 p_12(Brycen)) \u2192 p_3(Brycen)\np_2(Brycen) \u2192 (p_11(Brycen) \u2295 p_12(Brycen))\np_11(Brycen) \u2192 (p_10(Brycen) \u2228 p_4(Brycen))\np_10(Brycen) \u2192 (p_0(Brycen) \u2228 p_8(Brycen))\np_1(Brycen) \u2192 (p_8(Brycen) \u2295 p_9(Brycen))\n\u00acp_14(Brycen) \u2228 p_7(Brycen)\n\u00acp_13(Brycen)",
            "Initial Goal": "p_9(Brycen)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_6(Brycen)",
                    "-p_7(Brycen)",
                    "-p_5(Brycen)",
                    "-p_3(Brycen)",
                    "p_2(Brycen)",
                    "-p_4(Brycen)",
                    "-p_0(Brycen)",
                    "p_1(Brycen)",
                    "(-(p_14(Brycen) <-> p_6(Brycen))) -> p_7(Brycen)",
                    "p_13(Brycen) -> (-(p_5(Brycen) <-> p_14(Brycen)))",
                    "(-(p_13(Brycen) <-> p_12(Brycen))) -> p_3(Brycen)",
                    "p_2(Brycen) -> (-(p_11(Brycen) <-> p_12(Brycen)))",
                    "p_11(Brycen) -> (p_10(Brycen) | p_4(Brycen))",
                    "p_10(Brycen) -> (p_0(Brycen) | p_8(Brycen))",
                    "p_1(Brycen) -> (-(p_8(Brycen) <-> p_9(Brycen)))",
                    "-p_14(Brycen) | p_7(Brycen)",
                    "-p_13(Brycen)"
                ],
                "formulas(goals)": [
                    "-p_9(Brycen)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "\u00acp_13(Brycen)",
                    "\u00acp_14(Brycen)"
                ],
                "added_rules": [
                    "\u00acp_14(Brycen) \u2228 p_7(Brycen)"
                ]
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_6(Brycen)\n\u00acp_7(Brycen)\n\u00acp_5(Brycen)\n\u00acp_3(Brycen)\np_2(Brycen)\n\u00acp_4(Brycen)\n\u00acp_0(Brycen)\np_1(Brycen)\n(p_14(Brycen) \u2295 p_6(Brycen)) \u2192 p_7(Brycen)\np_13(Brycen) \u2192 (p_5(Brycen) \u2295 p_14(Brycen))\n(p_13(Brycen) \u2295 p_12(Brycen)) \u2192 p_3(Brycen)\np_2(Brycen) \u2192 (p_11(Brycen) \u2295 p_12(Brycen))\np_11(Brycen) \u2192 (p_10(Brycen) \u2228 p_4(Brycen))\np_10(Brycen) \u2192 (p_0(Brycen) \u2228 p_8(Brycen))\np_1(Brycen) \u2192 (p_8(Brycen) \u2295 p_9(Brycen))\n\u00acp_14(Brycen) \u2228 p_7(Brycen)\n\u00acp_13(Brycen)\np_11(Brycen)\np_10(Brycen)\np_8(Brycen)\n\u00acp_12(Brycen)\n\u00acp_14(Brycen)",
            "Initial Goal": "p_9(Brycen)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_6(Brycen)",
                    "-p_7(Brycen)",
                    "-p_5(Brycen)",
                    "-p_3(Brycen)",
                    "p_2(Brycen)",
                    "-p_4(Brycen)",
                    "-p_0(Brycen)",
                    "p_1(Brycen)",
                    "(-(p_14(Brycen) <-> p_6(Brycen))) -> p_7(Brycen)",
                    "p_13(Brycen) -> (-(p_5(Brycen) <-> p_14(Brycen)))",
                    "(-(p_13(Brycen) <-> p_12(Brycen))) -> p_3(Brycen)",
                    "p_2(Brycen) -> (-(p_11(Brycen) <-> p_12(Brycen)))",
                    "p_11(Brycen) -> (p_10(Brycen) | p_4(Brycen))",
                    "p_10(Brycen) -> (p_0(Brycen) | p_8(Brycen))",
                    "p_1(Brycen) -> (-(p_8(Brycen) <-> p_9(Brycen)))",
                    "-p_14(Brycen) | p_7(Brycen)",
                    "-p_13(Brycen)",
                    "p_11(Brycen)",
                    "p_10(Brycen)",
                    "p_8(Brycen)",
                    "-p_12(Brycen)",
                    "-p_14(Brycen)"
                ],
                "formulas(goals)": [
                    "-p_9(Brycen)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_11(Brycen)",
                    "p_10(Brycen)",
                    "p_8(Brycen)",
                    "\u00acp_12(Brycen)",
                    "\u00acp_14(Brycen)"
                ],
                "added_rules": []
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_6(Brycen)\n\u00acp_7(Brycen)\n\u00acp_5(Brycen)\n\u00acp_3(Brycen)\np_2(Brycen)\n\u00acp_4(Brycen)\n\u00acp_0(Brycen)\np_1(Brycen)\n(p_14(Brycen) \u2295 p_6(Brycen)) \u2192 p_7(Brycen)\np_13(Brycen) \u2192 (p_5(Brycen) \u2295 p_14(Brycen))\n(p_13(Brycen) \u2295 p_12(Brycen)) \u2192 p_3(Brycen)\np_2(Brycen) \u2192 (p_11(Brycen) \u2295 p_12(Brycen))\np_11(Brycen) \u2192 (p_10(Brycen) \u2228 p_4(Brycen))\np_10(Brycen) \u2192 (p_0(Brycen) \u2228 p_8(Brycen))\np_1(Brycen) \u2192 (p_8(Brycen) \u2295 p_9(Brycen))\n\u00acp_14(Brycen) \u2228 p_7(Brycen)\n\u00acp_13(Brycen)\np_11(Brycen)\np_10(Brycen)\np_8(Brycen)\n\u00acp_12(Brycen)\n\u00acp_14(Brycen)\n\u00acp_9(Brycen)",
            "Initial Goal": "p_9(Brycen)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_6(Brycen).",
                    "-p_7(Brycen).",
                    "-p_5(Brycen).",
                    "-p_3(Brycen).",
                    "p_2(Brycen).",
                    "-p_4(Brycen).",
                    "-p_0(Brycen).",
                    "p_1(Brycen).",
                    "(-(p_14(Brycen) <-> p_6(Brycen))) -> p_7(Brycen).",
                    "-p_13(Brycen) | (-(p_5(Brycen) <-> p_14(Brycen))).",
                    "(-(p_13(Brycen) <-> p_12(Brycen))) -> p_3(Brycen).",
                    "-p_2(Brycen) | (-(p_11(Brycen) <-> p_12(Brycen))).",
                    "-p_11(Brycen) | p_10(Brycen) | p_4(Brycen).",
                    "-p_10(Brycen) | p_0(Brycen) | p_8(Brycen).",
                    "-p_1(Brycen) | (-(p_8(Brycen) <-> p_9(Brycen))).",
                    "-p_14(Brycen) | p_7(Brycen).",
                    "-p_13(Brycen).",
                    "p_11(Brycen).",
                    "p_10(Brycen).",
                    "p_8(Brycen).",
                    "-p_12(Brycen).",
                    "-p_14(Brycen).",
                    "-p_9(Brycen)."
                ],
                "formulas(goals)": [
                    "-p_9(Brycen)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "\u00acp_9(Brycen)"
                ],
                "added_rules": []
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_6(Brycen)\n\u00acp_7(Brycen)\n\u00acp_5(Brycen)\n\u00acp_3(Brycen)\np_2(Brycen)\n\u00acp_4(Brycen)\n\u00acp_0(Brycen)\np_1(Brycen)\n(p_14(Brycen) \u2295 p_6(Brycen)) \u2192 p_7(Brycen)\n\u00acp_14(Brycen) \u2228 p_6(Brycen) \u2228 p_7(Brycen)\np_14(Brycen) \u2228 \u00acp_6(Brycen) \u2228 p_7(Brycen)\np_13(Brycen) \u2192 (p_5(Brycen) \u2295 p_14(Brycen))\n(p_13(Brycen) \u2295 p_12(Brycen)) \u2192 p_3(Brycen)\np_2(Brycen) \u2192 (p_11(Brycen) \u2295 p_12(Brycen))\np_11(Brycen) \u2192 (p_10(Brycen) \u2228 p_4(Brycen))\np_10(Brycen) \u2192 (p_0(Brycen) \u2228 p_8(Brycen))\np_1(Brycen) \u2192 (p_8(Brycen) \u2295 p_9(Brycen))\n\u00acp_14(Brycen) \u2228 p_7(Brycen)\n\u00acp_13(Brycen)\np_11(Brycen)\np_10(Brycen)\np_8(Brycen)\n\u00acp_12(Brycen)\n\u00acp_14(Brycen)\n\u00acp_9(Brycen)",
            "Initial Goal": "p_9(Brycen)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_6(Brycen).",
                    "-p_7(Brycen).",
                    "-p_5(Brycen).",
                    "-p_3(Brycen).",
                    "p_2(Brycen).",
                    "-p_4(Brycen).",
                    "-p_0(Brycen).",
                    "p_1(Brycen).",
                    "(-(p_14(Brycen) <-> p_6(Brycen))) -> p_7(Brycen).",
                    "-p_14(Brycen) | p_6(Brycen) | p_7(Brycen).",
                    "p_14(Brycen) | -p_6(Brycen) | p_7(Brycen).",
                    "p_13(Brycen) -> (-(p_5(Brycen) <-> p_14(Brycen))).",
                    "(-(p_13(Brycen) <-> p_12(Brycen))) -> p_3(Brycen).",
                    "p_2(Brycen) -> (-(p_11(Brycen) <-> p_12(Brycen))).",
                    "p_11(Brycen) -> (p_10(Brycen) | p_4(Brycen)).",
                    "p_10(Brycen) -> (p_0(Brycen) | p_8(Brycen)).",
                    "p_1(Brycen) -> (-(p_8(Brycen) <-> p_9(Brycen))).",
                    "-p_14(Brycen) | p_7(Brycen).",
                    "-p_13(Brycen).",
                    "p_11(Brycen).",
                    "p_10(Brycen).",
                    "p_8(Brycen).",
                    "-p_12(Brycen).",
                    "-p_14(Brycen).",
                    "-p_9(Brycen)."
                ],
                "formulas(goals)": [
                    "-p_9(Brycen)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "\u00acp_14(Brycen) \u2228 p_6(Brycen) \u2228 p_7(Brycen)",
                    "p_14(Brycen) \u2228 \u00acp_6(Brycen) \u2228 p_7(Brycen)"
                ]
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_6(Brycen)\n\u00acp_7(Brycen)\n\u00acp_5(Brycen)\n\u00acp_3(Brycen)\np_2(Brycen)\n\u00acp_4(Brycen)\n\u00acp_0(Brycen)\np_1(Brycen)\n(p_14(Brycen) \u2295 p_6(Brycen)) \u2192 p_7(Brycen)\n\u00acp_14(Brycen) \u2228 p_6(Brycen) \u2228 p_7(Brycen)\np_14(Brycen) \u2228 \u00acp_6(Brycen) \u2228 p_7(Brycen)\np_13(Brycen) \u2192 (p_5(Brycen) \u2295 p_14(Brycen))\n(p_13(Brycen) \u2295 p_12(Brycen)) \u2192 p_3(Brycen)\np_2(Brycen) \u2192 (p_11(Brycen) \u2295 p_12(Brycen))\np_11(Brycen) \u2192 (p_10(Brycen) \u2228 p_4(Brycen))\np_10(Brycen) \u2192 (p_0(Brycen) \u2228 p_8(Brycen))\np_1(Brycen) \u2192 (p_8(Brycen) \u2295 p_9(Brycen))\n\u00acp_14(Brycen) \u2228 p_7(Brycen)\n\u00acp_13(Brycen)\np_11(Brycen)\np_10(Brycen)\np_8(Brycen)\n\u00acp_12(Brycen)\n\u00acp_14(Brycen)\np_8(Brycen) \u2192 p_9(Brycen)",
            "Initial Goal": "p_9(Brycen)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_6(Brycen).",
                    "-p_7(Brycen).",
                    "-p_5(Brycen).",
                    "-p_3(Brycen).",
                    "p_2(Brycen).",
                    "-p_4(Brycen).",
                    "-p_0(Brycen).",
                    "p_1(Brycen).",
                    "(-(p_14(Brycen) <-> p_6(Brycen))) -> p_7(Brycen).",
                    "-p_14(Brycen) | p_6(Brycen) | p_7(Brycen).",
                    "p_14(Brycen) | -p_6(Brycen) | p_7(Brycen).",
                    "p_13(Brycen) -> (-(p_5(Brycen) <-> p_14(Brycen))).",
                    "(-(p_13(Brycen) <-> p_12(Brycen))) -> p_3(Brycen).",
                    "p_2(Brycen) -> (-(p_11(Brycen) <-> p_12(Brycen))).",
                    "p_11(Brycen) -> (p_10(Brycen) | p_4(Brycen)).",
                    "p_10(Brycen) -> (p_0(Brycen) | p_8(Brycen)).",
                    "p_1(Brycen) -> (-(p_8(Brycen) <-> p_9(Brycen))).",
                    "-p_14(Brycen) | p_7(Brycen).",
                    "-p_13(Brycen).",
                    "p_11(Brycen).",
                    "p_10(Brycen).",
                    "p_8(Brycen).",
                    "-p_12(Brycen).",
                    "-p_14(Brycen).",
                    "p_8(Brycen) -> p_9(Brycen)."
                ],
                "formulas(goals)": [
                    "p_9(Brycen)."
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "\u00acp_9(Brycen)"
                ],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "p_8(Brycen) \u2192 p_9(Brycen)"
                ]
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_6(Brycen)\n\u00acp_7(Brycen)\n\u00acp_5(Brycen)\n\u00acp_3(Brycen)\np_2(Brycen)\n\u00acp_4(Brycen)\n\u00acp_0(Brycen)\np_1(Brycen)\n(p_14(Brycen) \u2295 p_6(Brycen)) \u2192 p_7(Brycen)\n\u00acp_14(Brycen) \u2228 p_6(Brycen) \u2228 p_7(Brycen)\np_14(Brycen) \u2228 \u00acp_6(Brycen) \u2228 p_7(Brycen)\np_13(Brycen) \u2192 (p_5(Brycen) \u2295 p_14(Brycen))\n(p_13(Brycen) \u2295 p_12(Brycen)) \u2192 p_3(Brycen)\np_2(Brycen) \u2192 (p_11(Brycen) \u2295 p_12(Brycen))\np_11(Brycen) \u2192 (p_10(Brycen) \u2228 p_4(Brycen))\np_10(Brycen) \u2192 (p_0(Brycen) \u2228 p_8(Brycen))\np_1(Brycen) \u2192 (p_8(Brycen) \u2295 p_9(Brycen))\n\u00acp_14(Brycen) \u2228 p_7(Brycen)\n\u00acp_13(Brycen)\np_11(Brycen)\np_10(Brycen)\np_8(Brycen)\n\u00acp_12(Brycen)\n\u00acp_14(Brycen)\np_8(Brycen) \u2192 \u00acp_9(Brycen)",
            "Initial Goal": "p_9(Brycen)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_6(Brycen).",
                    "-p_7(Brycen).",
                    "-p_5(Brycen).",
                    "-p_3(Brycen).",
                    "p_2(Brycen).",
                    "-p_4(Brycen).",
                    "-p_0(Brycen).",
                    "p_1(Brycen).",
                    "(-(p_14(Brycen) <-> p_6(Brycen))) -> p_7(Brycen).",
                    "-p_14(Brycen) | p_6(Brycen) | p_7(Brycen).",
                    "p_14(Brycen) | -p_6(Brycen) | p_7(Brycen).",
                    "p_13(Brycen) -> (-(p_5(Brycen) <-> p_14(Brycen))).",
                    "(-(p_13(Brycen) <-> p_12(Brycen))) -> p_3(Brycen).",
                    "p_2(Brycen) -> (-(p_11(Brycen) <-> p_12(Brycen))).",
                    "p_11(Brycen) -> (p_10(Brycen) | p_4(Brycen)).",
                    "p_10(Brycen) -> (p_0(Brycen) | p_8(Brycen)).",
                    "p_1(Brycen) -> (-(p_8(Brycen) <-> p_9(Brycen))).",
                    "-p_14(Brycen) | p_7(Brycen).",
                    "-p_13(Brycen).",
                    "p_11(Brycen).",
                    "p_10(Brycen).",
                    "p_8(Brycen).",
                    "-p_12(Brycen).",
                    "-p_14(Brycen).",
                    "p_8(Brycen) -> -p_9(Brycen)."
                ],
                "formulas(goals)": [
                    "-p_9(Brycen)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_8(Brycen) \u2192 p_9(Brycen)"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_8(Brycen) \u2192 \u00acp_9(Brycen)"
                ]
            }
        }
    ]
}