{
    "background_story": "Darling was a sturdy, reliable truck with a reputation for hauling heavy loads across the country. Owned by a small freight company, she spent her days on the open road, transporting goods from city to city. From construction equipment to perishable groceries, Darling hauled it all with ease. Her powerful engine and reinforced frame made her the go-to vehicle for oversized and overweight cargo. Despite her tough exterior, Darling had a gentle side - her drivers adored her for her smooth ride and comfortable cab. Over the years, Darling became a beloved fixture on the highways, earning the respect of fellow truckers and the admiration of her owners for her tireless work ethic and unparalleled hauling capabilities.",
    "predicates": [
        {
            "id": 0,
            "name": "carries_oversized_cargo"
        },
        {
            "id": 1,
            "name": "handles_well"
        },
        {
            "id": 2,
            "name": "has_comfortable_cab"
        },
        {
            "id": 3,
            "name": "has_large_capacity"
        },
        {
            "id": 4,
            "name": "transports_safely"
        },
        {
            "id": 5,
            "name": "has_powerful_engine"
        },
        {
            "id": 6,
            "name": "has_reinforced_frame"
        },
        {
            "id": 7,
            "name": "can_haul_heavyLoads"
        },
        {
            "id": 8,
            "name": "tows_trailers"
        },
        {
            "id": 9,
            "name": "is_maintained"
        },
        {
            "id": 10,
            "name": "runs_smoothly"
        },
        {
            "id": 11,
            "name": "is_reliable"
        },
        {
            "id": 12,
            "name": "tows_vehicles"
        },
        {
            "id": 13,
            "name": "carries_equipment"
        },
        {
            "id": 14,
            "name": "has_big_axles"
        },
        {
            "id": 15,
            "name": "is_four_wheel"
        },
        {
            "id": 16,
            "name": "has_strong_axles"
        },
        {
            "id": 17,
            "name": "has_sturdy_chassis"
        },
        {
            "id": 18,
            "name": "drives_long"
        },
        {
            "id": 19,
            "name": "has_long_history"
        },
        {
            "id": 20,
            "name": "earned_respect"
        }
    ],
    "subject_name": "Darling",
    "subject_category": "truck",
    "keyword": "hauling",
    "all_facts": [
        {
            "id": 0,
            "subject": "Darling",
            "text": "Darling carries oversized cargo.",
            "fol": "p_0(Darling)",
            "str_fol": "carries_oversized_cargo(Darling)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Darling",
            "text": "Darling does not handle well.",
            "fol": "\u00acp_1(Darling)",
            "str_fol": "\u00achandles_well(Darling)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Darling",
            "text": "Darling does not have a comfortable cab.",
            "fol": "\u00acp_2(Darling)",
            "str_fol": "\u00achas_comfortable_cab(Darling)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Darling",
            "text": "Darling has a large capacity.",
            "fol": "p_3(Darling)",
            "str_fol": "has_large_capacity(Darling)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Darling",
            "text": "Darling cannot transport goods safely.",
            "fol": "\u00acp_4(Darling)",
            "str_fol": "\u00actransports_safely(Darling)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Darling",
            "text": "Darling is not reliable.",
            "fol": "\u00acp_11(Darling)",
            "str_fol": "\u00acis_reliable(Darling)",
            "negation": true
        },
        {
            "id": 6,
            "subject": "Darling",
            "text": "Darling is well-maintained.",
            "fol": "p_9(Darling)",
            "str_fol": "is_maintained(Darling)",
            "negation": false
        },
        {
            "id": 7,
            "subject": "Darling",
            "text": "Darling does not run smoothly.",
            "fol": "\u00acp_10(Darling)",
            "str_fol": "\u00acruns_smoothly(Darling)",
            "negation": true
        },
        {
            "id": 8,
            "subject": "Darling",
            "text": "Darling cannot haul heavy loads.",
            "fol": "\u00acp_7(Darling)",
            "str_fol": "\u00accan_haul_heavyLoads(Darling)",
            "negation": true
        },
        {
            "id": 9,
            "subject": "Darling",
            "text": "Darling cannot tow trailers.",
            "fol": "\u00acp_8(Darling)",
            "str_fol": "\u00actows_trailers(Darling)",
            "negation": true
        },
        {
            "id": 10,
            "subject": "Darling",
            "text": "Darling has a powerful engine.",
            "fol": "p_5(Darling)",
            "str_fol": "has_powerful_engine(Darling)",
            "negation": false
        },
        {
            "id": 11,
            "subject": "Darling",
            "text": "Darling has a reinforced frame.",
            "fol": "p_6(Darling)",
            "str_fol": "has_reinforced_frame(Darling)",
            "negation": false
        }
    ],
    "context_facts": [
        {
            "id": 3,
            "subject": "Darling",
            "text": "Darling has a large capacity.",
            "fol": "p_3(Darling)",
            "str_fol": "has_large_capacity(Darling)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Darling",
            "text": "Darling cannot transport goods safely.",
            "fol": "\u00acp_4(Darling)",
            "str_fol": "\u00actransports_safely(Darling)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Darling",
            "text": "Darling does not have a comfortable cab.",
            "fol": "\u00acp_2(Darling)",
            "str_fol": "\u00achas_comfortable_cab(Darling)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Darling",
            "text": "Darling does not handle well.",
            "fol": "\u00acp_1(Darling)",
            "str_fol": "\u00achandles_well(Darling)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Darling",
            "text": "Darling carries oversized cargo.",
            "fol": "p_0(Darling)",
            "str_fol": "carries_oversized_cargo(Darling)",
            "negation": false
        }
    ],
    "context_rules": [
        {
            "id": 6,
            "text": "If a truck is reliable and has a large capacity, then it can transport goods safely.",
            "fol": "\u2200x ((p_11(x) \u2227 p_3(x)) \u2192 p_4(x))",
            "str_fol": "\u2200x ((is_reliable(x) \u2227 has_large_capacity(x)) \u2192 transports_safely(x))"
        },
        {
            "id": 5,
            "text": "Darling is either well-maintained or has a comfortable cab, but not necessarily both.",
            "fol": "p_9(Darling) \u2295 p_2(Darling)",
            "str_fol": "is_maintained(Darling) \u2295 has_comfortable_cab(Darling)"
        },
        {
            "id": 4,
            "text": "If Darling either handles well or runs smoothly (but not both), then she is reliable.",
            "fol": "(p_1(Darling) \u2295 p_10(Darling)) \u2192 p_11(Darling)",
            "str_fol": "(handles_well(Darling) \u2295 runs_smoothly(Darling)) \u2192 is_reliable(Darling)"
        },
        {
            "id": 3,
            "text": "If a truck can haul heavy loads and is well-maintained, then it runs smoothly.",
            "fol": "\u2200x ((p_7(x) \u2227 p_9(x)) \u2192 p_10(x))",
            "str_fol": "\u2200x ((can_haul_heavyLoads(x) \u2227 is_maintained(x)) \u2192 runs_smoothly(x))"
        },
        {
            "id": 2,
            "text": "Darling either carries oversized cargo or tows trailers, but not both.",
            "fol": "p_0(Darling) \u2295 p_8(Darling)",
            "str_fol": "carries_oversized_cargo(Darling) \u2295 tows_trailers(Darling)"
        },
        {
            "id": 1,
            "text": "Every truck has a powerful engine or can tow trailers.",
            "fol": "\u2200x (p_5(x) \u2228 p_8(x))",
            "str_fol": "\u2200x (has_powerful_engine(x) \u2228 tows_trailers(x))"
        },
        {
            "id": 0,
            "text": "For all trucks, if a truck has a powerful engine and a reinforced frame, then it can haul heavy loads.",
            "fol": "\u2200x ((p_5(x) \u2227 p_6(x)) \u2192 p_7(x))",
            "str_fol": "\u2200x ((has_powerful_engine(x) \u2227 has_reinforced_frame(x)) \u2192 can_haul_heavyLoads(x))"
        }
    ],
    "context": [
        {
            "id": 3,
            "subject": "Darling",
            "text": "Darling has a large capacity.",
            "fol": "p_3(Darling)",
            "str_fol": "has_large_capacity(Darling)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Darling",
            "text": "Darling cannot transport goods safely.",
            "fol": "\u00acp_4(Darling)",
            "str_fol": "\u00actransports_safely(Darling)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Darling",
            "text": "Darling does not have a comfortable cab.",
            "fol": "\u00acp_2(Darling)",
            "str_fol": "\u00achas_comfortable_cab(Darling)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Darling",
            "text": "Darling does not handle well.",
            "fol": "\u00acp_1(Darling)",
            "str_fol": "\u00achandles_well(Darling)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Darling",
            "text": "Darling carries oversized cargo.",
            "fol": "p_0(Darling)",
            "str_fol": "carries_oversized_cargo(Darling)",
            "negation": false
        },
        {
            "id": 6,
            "text": "If a truck is reliable and has a large capacity, then it can transport goods safely.",
            "fol": "\u2200x ((p_11(x) \u2227 p_3(x)) \u2192 p_4(x))",
            "str_fol": "\u2200x ((is_reliable(x) \u2227 has_large_capacity(x)) \u2192 transports_safely(x))"
        },
        {
            "id": 5,
            "text": "Darling is either well-maintained or has a comfortable cab, but not necessarily both.",
            "fol": "p_9(Darling) \u2295 p_2(Darling)",
            "str_fol": "is_maintained(Darling) \u2295 has_comfortable_cab(Darling)"
        },
        {
            "id": 4,
            "text": "If Darling either handles well or runs smoothly (but not both), then she is reliable.",
            "fol": "(p_1(Darling) \u2295 p_10(Darling)) \u2192 p_11(Darling)",
            "str_fol": "(handles_well(Darling) \u2295 runs_smoothly(Darling)) \u2192 is_reliable(Darling)"
        },
        {
            "id": 3,
            "text": "If a truck can haul heavy loads and is well-maintained, then it runs smoothly.",
            "fol": "\u2200x ((p_7(x) \u2227 p_9(x)) \u2192 p_10(x))",
            "str_fol": "\u2200x ((can_haul_heavyLoads(x) \u2227 is_maintained(x)) \u2192 runs_smoothly(x))"
        },
        {
            "id": 2,
            "text": "Darling either carries oversized cargo or tows trailers, but not both.",
            "fol": "p_0(Darling) \u2295 p_8(Darling)",
            "str_fol": "carries_oversized_cargo(Darling) \u2295 tows_trailers(Darling)"
        },
        {
            "id": 1,
            "text": "Every truck has a powerful engine or can tow trailers.",
            "fol": "\u2200x (p_5(x) \u2228 p_8(x))",
            "str_fol": "\u2200x (has_powerful_engine(x) \u2228 tows_trailers(x))"
        },
        {
            "id": 0,
            "text": "For all trucks, if a truck has a powerful engine and a reinforced frame, then it can haul heavy loads.",
            "fol": "\u2200x ((p_5(x) \u2227 p_6(x)) \u2192 p_7(x))",
            "str_fol": "\u2200x ((has_powerful_engine(x) \u2227 has_reinforced_frame(x)) \u2192 can_haul_heavyLoads(x))"
        }
    ],
    "context_fol": "p_3(Darling)\n\u00acp_4(Darling)\n\u00acp_2(Darling)\n\u00acp_1(Darling)\np_0(Darling)\n\u2200x ((p_11(x) \u2227 p_3(x)) \u2192 p_4(x))\np_9(Darling) \u2295 p_2(Darling)\n(p_1(Darling) \u2295 p_10(Darling)) \u2192 p_11(Darling)\n\u2200x ((p_7(x) \u2227 p_9(x)) \u2192 p_10(x))\np_0(Darling) \u2295 p_8(Darling)\n\u2200x (p_5(x) \u2228 p_8(x))\n\u2200x ((p_5(x) \u2227 p_6(x)) \u2192 p_7(x))",
    "conclusion": {
        "id": 11,
        "subject": "Darling",
        "text": "Darling has a reinforced frame.",
        "fol": "p_6(Darling)",
        "str_fol": "has_reinforced_frame(Darling)",
        "negation": false
    },
    "initial_answer": "False",
    "initial_goal": "p_6(Darling)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 3,
                    "subject": "Darling",
                    "text": "Darling has a large capacity.",
                    "fol": "p_3(Darling)",
                    "str_fol": "has_large_capacity(Darling)",
                    "negation": false
                },
                {
                    "id": 4,
                    "subject": "Darling",
                    "text": "Darling cannot transport goods safely.",
                    "fol": "\u00acp_4(Darling)",
                    "str_fol": "\u00actransports_safely(Darling)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 6,
                    "text": "If a truck is reliable and has a large capacity, then it can transport goods safely.",
                    "fol": "\u2200x ((p_11(x) \u2227 p_3(x)) \u2192 p_4(x))",
                    "str_fol": "\u2200x ((is_reliable(x) \u2227 has_large_capacity(x)) \u2192 transports_safely(x))"
                }
            ],
            "conclusion": {
                "id": 5,
                "subject": "Darling",
                "text": "Darling is not reliable.",
                "fol": "\u00acp_11(Darling)",
                "str_fol": "\u00acis_reliable(Darling)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 2,
                    "subject": "Darling",
                    "text": "Darling does not have a comfortable cab.",
                    "fol": "\u00acp_2(Darling)",
                    "str_fol": "\u00achas_comfortable_cab(Darling)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "Darling is either well-maintained or has a comfortable cab, but not necessarily both.",
                    "fol": "p_9(Darling) \u2295 p_2(Darling)",
                    "str_fol": "is_maintained(Darling) \u2295 has_comfortable_cab(Darling)"
                }
            ],
            "conclusion": {
                "id": 6,
                "subject": "Darling",
                "text": "Darling is well-maintained.",
                "fol": "p_9(Darling)",
                "str_fol": "is_maintained(Darling)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 1,
                    "subject": "Darling",
                    "text": "Darling does not handle well.",
                    "fol": "\u00acp_1(Darling)",
                    "str_fol": "\u00achandles_well(Darling)",
                    "negation": true
                },
                {
                    "id": 5,
                    "subject": "Darling",
                    "text": "Darling is not reliable.",
                    "fol": "\u00acp_11(Darling)",
                    "str_fol": "\u00acis_reliable(Darling)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "If Darling either handles well or runs smoothly (but not both), then she is reliable.",
                    "fol": "(p_1(Darling) \u2295 p_10(Darling)) \u2192 p_11(Darling)",
                    "str_fol": "(handles_well(Darling) \u2295 runs_smoothly(Darling)) \u2192 is_reliable(Darling)"
                }
            ],
            "conclusion": {
                "id": 7,
                "subject": "Darling",
                "text": "Darling does not run smoothly.",
                "fol": "\u00acp_10(Darling)",
                "str_fol": "\u00acruns_smoothly(Darling)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 6,
                    "subject": "Darling",
                    "text": "Darling is well-maintained.",
                    "fol": "p_9(Darling)",
                    "str_fol": "is_maintained(Darling)",
                    "negation": false
                },
                {
                    "id": 7,
                    "subject": "Darling",
                    "text": "Darling does not run smoothly.",
                    "fol": "\u00acp_10(Darling)",
                    "str_fol": "\u00acruns_smoothly(Darling)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "If a truck can haul heavy loads and is well-maintained, then it runs smoothly.",
                    "fol": "\u2200x ((p_7(x) \u2227 p_9(x)) \u2192 p_10(x))",
                    "str_fol": "\u2200x ((can_haul_heavyLoads(x) \u2227 is_maintained(x)) \u2192 runs_smoothly(x))"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Darling",
                "text": "Darling cannot haul heavy loads.",
                "fol": "\u00acp_7(Darling)",
                "str_fol": "\u00accan_haul_heavyLoads(Darling)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 0,
                    "subject": "Darling",
                    "text": "Darling carries oversized cargo.",
                    "fol": "p_0(Darling)",
                    "str_fol": "carries_oversized_cargo(Darling)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "Darling either carries oversized cargo or tows trailers, but not both.",
                    "fol": "p_0(Darling) \u2295 p_8(Darling)",
                    "str_fol": "carries_oversized_cargo(Darling) \u2295 tows_trailers(Darling)"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Darling",
                "text": "Darling cannot tow trailers.",
                "fol": "\u00acp_8(Darling)",
                "str_fol": "\u00actows_trailers(Darling)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 9,
                    "subject": "Darling",
                    "text": "Darling cannot tow trailers.",
                    "fol": "\u00acp_8(Darling)",
                    "str_fol": "\u00actows_trailers(Darling)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "Every truck has a powerful engine or can tow trailers.",
                    "fol": "\u2200x (p_5(x) \u2228 p_8(x))",
                    "str_fol": "\u2200x (has_powerful_engine(x) \u2228 tows_trailers(x))"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Darling",
                "text": "Darling has a powerful engine.",
                "fol": "p_5(Darling)",
                "str_fol": "has_powerful_engine(Darling)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 10,
                    "subject": "Darling",
                    "text": "Darling has a powerful engine.",
                    "fol": "p_5(Darling)",
                    "str_fol": "has_powerful_engine(Darling)",
                    "negation": false
                },
                {
                    "id": 8,
                    "subject": "Darling",
                    "text": "Darling cannot haul heavy loads.",
                    "fol": "\u00acp_7(Darling)",
                    "str_fol": "\u00accan_haul_heavyLoads(Darling)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "For all trucks, if a truck has a powerful engine and a reinforced frame, then it can haul heavy loads.",
                    "fol": "\u2200x ((p_5(x) \u2227 p_6(x)) \u2192 p_7(x))",
                    "str_fol": "\u2200x ((has_powerful_engine(x) \u2227 has_reinforced_frame(x)) \u2192 can_haul_heavyLoads(x))"
                }
            ],
            "conclusion": {
                "id": 11,
                "subject": "Darling",
                "text": "Darling has a reinforced frame.",
                "fol": "p_6(Darling)",
                "str_fol": "has_reinforced_frame(Darling)",
                "negation": false
            }
        }
    ],
    "proof_trace": "1 (all x (p_11(x) & p_3(x) -> p_4(x))).  [assumption].\n2 -(p_9(Darling) <-> p_2(Darling)).  [assumption].\n3 -(p_1(Darling) <-> p_10(Darling)) -> p_11(Darling).  [assumption].\n4 (all x (p_7(x) & p_9(x) -> p_10(x))).  [assumption].\n5 -(p_0(Darling) <-> p_8(Darling)).  [assumption].\n6 (all x (p_5(x) | p_8(x))).  [assumption].\n7 (all x (p_5(x) & p_6(x) -> p_7(x))).  [assumption].\n8 -p_6(Darling).  [goal].\n9 -p_11(x) | -p_3(x) | p_4(x).  [clausify(1)].\n10 p_3(Darling).  [assumption].\n11 -p_11(Darling) | p_4(Darling).  [resolve(9,b,10,a)].\n12 -p_4(Darling).  [assumption].\n13 p_9(Darling) | p_2(Darling).  [clausify(2)].\n14 -p_2(Darling).  [assumption].\n16 p_1(Darling) | -p_10(Darling) | p_11(Darling).  [clausify(3)].\n17 -p_1(Darling).  [assumption].\n19 -p_0(Darling) | -p_8(Darling).  [clausify(5)].\n20 p_0(Darling).  [assumption].\n22 -p_5(x) | -p_6(x) | p_7(x).  [clausify(7)].\n23 -p_7(x) | -p_9(x) | p_10(x).  [clausify(4)].\n24 -p_5(x) | -p_6(x) | -p_9(x) | p_10(x).  [resolve(22,c,23,a)].\n25 p_5(x) | p_8(x).  [clausify(6)].\n26 -p_6(x) | -p_9(x) | p_10(x) | p_8(x).  [resolve(24,a,25,a)].\n27 p_6(Darling).  [deny(8)].\n28 -p_10(Darling) | p_11(Darling).  [resolve(16,a,17,a)].\n29 -p_11(Darling).  [resolve(11,b,12,a)].\n30 -p_9(Darling) | p_10(Darling) | p_8(Darling).  [resolve(26,a,27,a)].\n31 p_9(Darling).  [resolve(13,b,14,a)].\n32 p_10(Darling) | p_8(Darling).  [resolve(30,a,31,a)].\n33 -p_8(Darling).  [resolve(19,a,20,a)].\n34 p_10(Darling).  [resolve(32,b,33,a)].\n35 -p_10(Darling).  [resolve(28,b,29,a)].\n36 $F.  [resolve(34,a,35,a)].",
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_3(Darling)\n\u00acp_4(Darling)\n\u00acp_2(Darling)\n\u00acp_1(Darling)\np_0(Darling)\n\u2200x (p_11(x) \u2192 (p_3(x) \u2192 p_4(x)))\n\u00ac(p_9(Darling) \u2194 p_2(Darling))\np_10(Darling) \u2192 p_11(Darling)\n\u2200x ((p_7(x) \u2227 p_9(x)) \u2192 p_10(x))\n\u2200x (\u00acp_10(x) \u2192 (\u00acp_7(x) \u2228 \u00acp_9(x)))\n\u00ac(p_0(Darling) \u2194 p_8(Darling))\n\u2200x (p_5(x) \u2228 p_8(x))\n\u2200x ((p_5(x) \u2227 p_6(x)) \u2192 p_7(x))\np_5(Darling)\np_9(Darling)",
            "Initial Goal": "p_6(Darling)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_3(Darling)",
                    "-p_4(Darling)",
                    "-p_2(Darling)",
                    "-p_1(Darling)",
                    "p_0(Darling)",
                    "all x (p_11(x) -> (p_3(x) -> p_4(x)))",
                    "-(p_9(Darling) <-> p_2(Darling))",
                    "p_10(Darling) -> p_11(Darling)",
                    "all x ((p_7(x) & p_9(x)) -> p_10(x))",
                    "all x (-p_10(x) -> (-p_7(x) | -p_9(x)))",
                    "-(p_0(Darling) <-> p_8(Darling))",
                    "all x (p_5(x) | p_8(x))",
                    "all x ((p_5(x) & p_6(x)) -> p_7(x))",
                    "p_5(Darling)",
                    "p_9(Darling)"
                ],
                "formulas(goals)": [
                    "-p_6(Darling)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u2200x ((p_11(x) \u2227 p_3(x)) \u2192 p_4(x))",
                    "p_9(Darling) \u2295 p_2(Darling)",
                    "(p_1(Darling) \u2295 p_10(Darling)) \u2192 p_11(Darling)",
                    "p_0(Darling) \u2295 p_8(Darling)"
                ],
                "added_facts": [
                    "p_5(Darling)",
                    "p_9(Darling)"
                ],
                "added_rules": [
                    "\u2200x (p_11(x) \u2192 (p_3(x) \u2192 p_4(x)))",
                    "\u00ac(p_9(Darling) \u2194 p_2(Darling))",
                    "p_10(Darling) \u2192 p_11(Darling)",
                    "\u2200x (\u00acp_10(x) \u2192 (\u00acp_7(x) \u2228 \u00acp_9(x)))",
                    "\u00ac(p_0(Darling) \u2194 p_8(Darling))"
                ]
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_3(Darling)\n\u00acp_4(Darling)\n\u00acp_2(Darling)\n\u00acp_1(Darling)\np_0(Darling)\n\u2200x (p_11(x) \u2192 (p_3(x) \u2192 p_4(x)))\n\u00ac(p_9(Darling) \u2194 p_2(Darling))\np_10(Darling) \u2192 p_11(Darling)\n\u2200x ((p_7(x) \u2227 p_9(x)) \u2192 p_10(x))\n\u2200x (\u00acp_10(x) \u2192 (\u00acp_7(x) \u2228 \u00acp_9(x)))\n\u00ac(p_0(Darling) \u2194 p_8(Darling))\n\u2200x (p_5(x) \u2228 p_8(x))\n\u2200x ((p_5(x) \u2227 p_6(x)) \u2192 p_7(x))\np_5(Darling)\np_9(Darling)\np_5(Darling) \u2228 p_8(Darling)\n\u2200x (\u00acp_7(x) \u2192 (\u00acp_5(x) \u2228 \u00acp_6(x)))\n\u2200x (p_10(x) \u2228 \u00acp_7(x) \u2228 \u00acp_9(x))\n\u2200x (p_11(x) \u2192 (\u00acp_3(x) \u2228 p_4(x)))\np_9(Darling) \u2228 p_2(Darling)\np_0(Darling) \u2228 \u00acp_8(Darling)",
            "Initial Goal": "p_6(Darling)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_3(Darling)",
                    "-p_4(Darling)",
                    "-p_2(Darling)",
                    "-p_1(Darling)",
                    "p_0(Darling)",
                    "all x (p_11(x) -> (p_3(x) -> p_4(x)))",
                    "-(p_9(Darling) <-> p_2(Darling))",
                    "p_10(Darling) -> p_11(Darling)",
                    "all x ((p_7(x) & p_9(x)) -> p_10(x))",
                    "all x (-p_10(x) -> (-p_7(x) | -p_9(x)))",
                    "-(p_0(Darling) <-> p_8(Darling))",
                    "all x (p_5(x) | p_8(x))",
                    "all x ((p_5(x) & p_6(x)) -> p_7(x))",
                    "p_5(Darling)",
                    "p_9(Darling)",
                    "p_5(Darling) | p_8(Darling)",
                    "all x (-p_7(x) -> (-p_5(x) | -p_6(x)))",
                    "all x (p_10(x) | -p_7(x) | -p_9(x))",
                    "all x (p_11(x) -> (-p_3(x) | p_4(x)))",
                    "p_9(Darling) | p_2(Darling)",
                    "p_0(Darling) | -p_8(Darling)"
                ],
                "formulas(goals)": [
                    "-p_6(Darling)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_5(Darling) \u2228 p_8(Darling)",
                    "p_9(Darling) \u2228 p_2(Darling)",
                    "p_0(Darling) \u2228 \u00acp_8(Darling)"
                ],
                "added_rules": [
                    "\u2200x (\u00acp_7(x) \u2192 (\u00acp_5(x) \u2228 \u00acp_6(x)))",
                    "\u2200x (p_10(x) \u2228 \u00acp_7(x) \u2228 \u00acp_9(x))",
                    "\u2200x (p_11(x) \u2192 (\u00acp_3(x) \u2228 p_4(x)))"
                ]
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u2200x (p_5(x) \u2227 p_6(x) \u2192 p_7(x))\np_5(Darling)\np_5(Darling) \u2192 p_6(Darling)",
            "Initial Goal": "p_6(Darling)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "all x (p_5(x) & p_6(x) -> p_7(x))",
                    "p_5(Darling)",
                    "p_5(Darling) -> p_6(Darling)"
                ],
                "formulas(goals)": [
                    "p_6(Darling)"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "p_3(Darling)",
                    "\u00acp_4(Darling)",
                    "\u00acp_2(Darling)",
                    "\u00acp_1(Darling)",
                    "p_0(Darling)",
                    "p_9(Darling)"
                ],
                "removed_rules": [
                    "\u2200x (p_11(x) \u2192 (p_3(x) \u2192 p_4(x)))",
                    "\u00ac(p_9(Darling) \u2194 p_2(Darling))",
                    "p_10(Darling) \u2192 p_11(Darling)",
                    "\u2200x ((p_7(x) \u2227 p_9(x)) \u2192 p_10(x))",
                    "\u2200x (\u00acp_10(x) \u2192 (\u00acp_7(x) \u2228 \u00acp_9(x)))",
                    "\u00ac(p_0(Darling) \u2194 p_8(Darling))",
                    "\u2200x (p_5(x) \u2228 p_8(x))",
                    "p_5(Darling) \u2228 p_8(Darling)",
                    "\u2200x (\u00acp_7(x) \u2192 (\u00acp_5(x) \u2228 \u00acp_6(x)))",
                    "\u2200x (p_10(x) \u2228 \u00acp_7(x) \u2228 \u00acp_9(x))",
                    "\u2200x (p_11(x) \u2192 (\u00acp_3(x) \u2228 p_4(x)))",
                    "p_9(Darling) \u2228 p_2(Darling)",
                    "p_0(Darling) \u2228 \u00acp_8(Darling)"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_5(Darling) \u2192 p_6(Darling)"
                ]
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u2200x ((p_5(x) \u2227 p_6(x)) \u2192 p_7(x))\np_5(Darling)\np_5(Darling) \u2227 \u00acp_6(Darling)",
            "Initial Goal": "p_6(Darling)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "all x ((p_5(x) & p_6(x)) -> p_7(x))",
                    "p_5(Darling)",
                    "p_5(Darling) & -p_6(Darling)"
                ],
                "formulas(goals)": [
                    "-p_6(Darling)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_5(Darling) \u2192 p_6(Darling)"
                ],
                "added_facts": [
                    "p_5(Darling) \u2227 \u00acp_6(Darling)"
                ],
                "added_rules": []
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u2200x ((p_5(x) \u2227 p_6(x)) \u2192 p_7(x))\np_5(Darling)\np_6(Darling)",
            "Initial Goal": "p_6(Darling)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "all x ((p_5(x) & p_6(x)) -> p_7(x))",
                    "p_5(Darling)",
                    "p_6(Darling)"
                ],
                "formulas(goals)": [
                    "p_6(Darling)"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "p_5(Darling) \u2227 \u00acp_6(Darling)"
                ],
                "removed_rules": [],
                "added_facts": [
                    "p_6(Darling)"
                ],
                "added_rules": []
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u2200x (p_5(x) \u2192 (p_6(x) \u2192 p_7(x)))\np_5(Darling)\np_6(Darling)\np_5(Darling) \u2227 p_6(Darling)",
            "Initial Goal": "p_6(Darling)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "all x (p_5(x) -> (p_6(x) -> p_7(x)))",
                    "p_5(Darling)",
                    "p_6(Darling)",
                    "p_5(Darling) & p_6(Darling)"
                ],
                "formulas(goals)": [
                    "p_6(Darling)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u2200x ((p_5(x) \u2227 p_6(x)) \u2192 p_7(x))"
                ],
                "added_facts": [
                    "p_5(Darling) \u2227 p_6(Darling)"
                ],
                "added_rules": [
                    "\u2200x (p_5(x) \u2192 (p_6(x) \u2192 p_7(x)))"
                ]
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u2200x (p_5(x) \u2192 (p_6(x) \u2192 p_7(x)))\np_5(Darling)\n\u2200x (p_5(x) \u2192 \u00acp_6(x))",
            "Initial Goal": "p_6(Darling)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "all x (p_5(x) -> (p_6(x) -> p_7(x)))",
                    "p_5(Darling)",
                    "all x (p_5(x) -> -p_6(x))"
                ],
                "formulas(goals)": [
                    "-p_6(Darling)"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "p_6(Darling)",
                    "p_5(Darling) \u2227 p_6(Darling)"
                ],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "\u2200x (p_5(x) \u2192 \u00acp_6(x))"
                ]
            }
        }
    ]
}