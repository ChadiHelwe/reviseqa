{
    "background_story": "In ancient Roman folklore, there lived a magnificent bear named Forest, nicknamed Brutus for his unyielding strength and ferocity. Forest roamed the vast, untouched forests of the empire, a symbol of power and resilience. His legend grew as tales of his encounters with Roman soldiers and gladiators spread, where he would often emerge victorious. Despite his fearsome reputation, Forest was a just creature, only fighting when provoked or to protect his territory. The people of Rome both feared and revered him, leaving offerings at the edge of the forest in hopes of appeasing the mighty Brutus. Forest's legacy lived on, a testament to the awe-inspiring force of nature that he embodied.",
    "predicates": [
        {
            "id": 0,
            "name": "roam_wild"
        },
        {
            "id": 1,
            "name": "protect_habitat"
        },
        {
            "id": 2,
            "name": "rules_wild"
        },
        {
            "id": 3,
            "name": "has_heart"
        },
        {
            "id": 4,
            "name": "wins_respect"
        },
        {
            "id": 5,
            "name": "is_majestic"
        },
        {
            "id": 6,
            "name": "powerful"
        },
        {
            "id": 7,
            "name": "revered"
        },
        {
            "id": 8,
            "name": "has_strength"
        },
        {
            "id": 9,
            "name": "is_fierce"
        },
        {
            "id": 10,
            "name": "defend_territory"
        },
        {
            "id": 11,
            "name": "symbolize_courage"
        },
        {
            "id": 12,
            "name": "fights_bravely"
        },
        {
            "id": 13,
            "name": "leads_packs"
        },
        {
            "id": 14,
            "name": "inspire_awe"
        },
        {
            "id": 15,
            "name": "receives_offers"
        },
        {
            "id": 16,
            "name": "lives_nobly"
        },
        {
            "id": 17,
            "name": "has_claws"
        },
        {
            "id": 18,
            "name": "is_wild"
        },
        {
            "id": 19,
            "name": "commands_respect"
        },
        {
            "id": 20,
            "name": "has_domination"
        },
        {
            "id": 21,
            "name": "guards_home"
        },
        {
            "id": 22,
            "name": "is_legendary"
        },
        {
            "id": 23,
            "name": "embodies_freedom"
        },
        {
            "id": 24,
            "name": "guards_young"
        },
        {
            "id": 25,
            "name": "hunts_skilled"
        },
        {
            "id": 26,
            "name": "has_wisdom"
        },
        {
            "id": 27,
            "name": "guards_nature"
        },
        {
            "id": 28,
            "name": "is_venerable"
        },
        {
            "id": 29,
            "name": "has_legacy"
        }
    ],
    "subject_name": "Forest",
    "subject_category": "legendary animal",
    "keyword": "brutus",
    "all_facts": [
        {
            "id": 0,
            "subject": "Forest",
            "text": "Forest roams wild.",
            "fol": "p_0(Forest)",
            "str_fol": "roam_wild(Forest)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Forest",
            "text": "Forest does not protect his habitat.",
            "fol": "\u00acp_1(Forest)",
            "str_fol": "\u00acprotect_habitat(Forest)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Forest",
            "text": "Forest rules the wild.",
            "fol": "p_2(Forest)",
            "str_fol": "rules_wild(Forest)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Forest",
            "text": "Forest has heart.",
            "fol": "p_3(Forest)",
            "str_fol": "has_heart(Forest)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Forest",
            "text": "Forest does not win respect.",
            "fol": "\u00acp_4(Forest)",
            "str_fol": "\u00acwins_respect(Forest)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Forest",
            "text": "Forest is majestic.",
            "fol": "p_5(Forest)",
            "str_fol": "is_majestic(Forest)",
            "negation": false
        },
        {
            "id": 6,
            "subject": "Forest",
            "text": "The people of Rome receive offerings from Forest.",
            "fol": "p_15(Forest)",
            "str_fol": "receives_offers(Forest)",
            "negation": false
        },
        {
            "id": 7,
            "subject": "Forest",
            "text": "Forest does not inspire awe.",
            "fol": "\u00acp_14(Forest)",
            "str_fol": "\u00acinspire_awe(Forest)",
            "negation": true
        },
        {
            "id": 8,
            "subject": "Forest",
            "text": "Forest does not fight bravely.",
            "fol": "\u00acp_12(Forest)",
            "str_fol": "\u00acfights_bravely(Forest)",
            "negation": true
        },
        {
            "id": 9,
            "subject": "Forest",
            "text": "Forest leads packs.",
            "fol": "p_13(Forest)",
            "str_fol": "leads_packs(Forest)",
            "negation": false
        },
        {
            "id": 10,
            "subject": "Forest",
            "text": "Forest symbolizes courage.",
            "fol": "p_11(Forest)",
            "str_fol": "symbolize_courage(Forest)",
            "negation": false
        },
        {
            "id": 11,
            "subject": "Forest",
            "text": "Forest defends his territory.",
            "fol": "p_10(Forest)",
            "str_fol": "defend_territory(Forest)",
            "negation": false
        },
        {
            "id": 12,
            "subject": "Forest",
            "text": "Forest is fierce.",
            "fol": "p_9(Forest)",
            "str_fol": "is_fierce(Forest)",
            "negation": false
        },
        {
            "id": 13,
            "subject": "Forest",
            "text": "Forest is powerful.",
            "fol": "p_6(Forest)",
            "str_fol": "powerful(Forest)",
            "negation": false
        },
        {
            "id": 14,
            "subject": "Forest",
            "text": "Forest is not revered.",
            "fol": "\u00acp_7(Forest)",
            "str_fol": "\u00acrevered(Forest)",
            "negation": true
        }
    ],
    "context_facts": [
        {
            "id": 5,
            "subject": "Forest",
            "text": "Forest is majestic.",
            "fol": "p_5(Forest)",
            "str_fol": "is_majestic(Forest)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Forest",
            "text": "Forest has heart.",
            "fol": "p_3(Forest)",
            "str_fol": "has_heart(Forest)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Forest",
            "text": "Forest does not win respect.",
            "fol": "\u00acp_4(Forest)",
            "str_fol": "\u00acwins_respect(Forest)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Forest",
            "text": "Forest rules the wild.",
            "fol": "p_2(Forest)",
            "str_fol": "rules_wild(Forest)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Forest",
            "text": "Forest does not protect his habitat.",
            "fol": "\u00acp_1(Forest)",
            "str_fol": "\u00acprotect_habitat(Forest)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Forest",
            "text": "Forest roams wild.",
            "fol": "p_0(Forest)",
            "str_fol": "roam_wild(Forest)",
            "negation": false
        }
    ],
    "context_rules": [
        {
            "id": 8,
            "text": "If Forest lives nobly or is majestic, then he receives offerings.",
            "fol": "(p_16(Forest) \u2228 p_5(Forest)) \u2192 p_15(Forest)",
            "str_fol": "(lives_nobly(Forest) \u2228 is_majestic(Forest)) \u2192 receives_offers(Forest)"
        },
        {
            "id": 7,
            "text": "Forest either inspires awe or receives offerings from the people of Rome, but not both.",
            "fol": "p_15(Forest) \u2295 p_14(Forest)",
            "str_fol": "receives_offers(Forest) \u2295 inspire_awe(Forest)"
        },
        {
            "id": 6,
            "text": "If a legendary animal has heart and fights bravely, then it wins respect.",
            "fol": "\u2200x ((p_3(x) \u2227 p_12(x)) \u2192 p_4(x))",
            "str_fol": "\u2200x ((has_heart(x) \u2227 fights_bravely(x)) \u2192 wins_respect(x))"
        },
        {
            "id": 5,
            "text": "If Forest either rules the wild or leads packs (but not both), then he inspires awe.",
            "fol": "(p_2(Forest) \u2295 p_13(Forest)) \u2192 p_14(Forest)",
            "str_fol": "(rules_wild(Forest) \u2295 leads_packs(Forest)) \u2192 inspire_awe(Forest)"
        },
        {
            "id": 4,
            "text": "If Forest either fights bravely or leads packs (but not both), then he symbolizes courage.",
            "fol": "(p_12(Forest) \u2295 p_13(Forest)) \u2192 p_11(Forest)",
            "str_fol": "(fights_bravely(Forest) \u2295 leads_packs(Forest)) \u2192 symbolize_courage(Forest)"
        },
        {
            "id": 3,
            "text": "Every legendary animal that symbolizes courage either protects its habitat or defends its territory.",
            "fol": "\u2200x (p_11(x) \u2192 (p_1(x) \u2228 p_10(x)))",
            "str_fol": "\u2200x (symbolize_courage(x) \u2192 (protect_habitat(x) \u2228 defend_territory(x)))"
        },
        {
            "id": 2,
            "text": "If Forest roams wild, then he is fierce and defends his territory.",
            "fol": "p_0(Forest) \u2192 (p_9(Forest) \u2227 p_10(Forest))",
            "str_fol": "roam_wild(Forest) \u2192 (is_fierce(Forest) \u2227 defend_territory(Forest))"
        },
        {
            "id": 1,
            "text": "Any legendary animal that has strength or is fierce is powerful.",
            "fol": "\u2200x ((p_8(x) \u2228 p_9(x)) \u2192 p_6(x))",
            "str_fol": "\u2200x ((has_strength(x) \u2228 is_fierce(x)) \u2192 powerful(x))"
        },
        {
            "id": 0,
            "text": "Every legendary animal is either powerful or revered (or both).",
            "fol": "\u2200x (p_6(x) \u2228 p_7(x))",
            "str_fol": "\u2200x (powerful(x) \u2228 revered(x))"
        }
    ],
    "context": [
        {
            "id": 5,
            "subject": "Forest",
            "text": "Forest is majestic.",
            "fol": "p_5(Forest)",
            "str_fol": "is_majestic(Forest)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Forest",
            "text": "Forest has heart.",
            "fol": "p_3(Forest)",
            "str_fol": "has_heart(Forest)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Forest",
            "text": "Forest does not win respect.",
            "fol": "\u00acp_4(Forest)",
            "str_fol": "\u00acwins_respect(Forest)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Forest",
            "text": "Forest rules the wild.",
            "fol": "p_2(Forest)",
            "str_fol": "rules_wild(Forest)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Forest",
            "text": "Forest does not protect his habitat.",
            "fol": "\u00acp_1(Forest)",
            "str_fol": "\u00acprotect_habitat(Forest)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Forest",
            "text": "Forest roams wild.",
            "fol": "p_0(Forest)",
            "str_fol": "roam_wild(Forest)",
            "negation": false
        },
        {
            "id": 8,
            "text": "If Forest lives nobly or is majestic, then he receives offerings.",
            "fol": "(p_16(Forest) \u2228 p_5(Forest)) \u2192 p_15(Forest)",
            "str_fol": "(lives_nobly(Forest) \u2228 is_majestic(Forest)) \u2192 receives_offers(Forest)"
        },
        {
            "id": 7,
            "text": "Forest either inspires awe or receives offerings from the people of Rome, but not both.",
            "fol": "p_15(Forest) \u2295 p_14(Forest)",
            "str_fol": "receives_offers(Forest) \u2295 inspire_awe(Forest)"
        },
        {
            "id": 6,
            "text": "If a legendary animal has heart and fights bravely, then it wins respect.",
            "fol": "\u2200x ((p_3(x) \u2227 p_12(x)) \u2192 p_4(x))",
            "str_fol": "\u2200x ((has_heart(x) \u2227 fights_bravely(x)) \u2192 wins_respect(x))"
        },
        {
            "id": 5,
            "text": "If Forest either rules the wild or leads packs (but not both), then he inspires awe.",
            "fol": "(p_2(Forest) \u2295 p_13(Forest)) \u2192 p_14(Forest)",
            "str_fol": "(rules_wild(Forest) \u2295 leads_packs(Forest)) \u2192 inspire_awe(Forest)"
        },
        {
            "id": 4,
            "text": "If Forest either fights bravely or leads packs (but not both), then he symbolizes courage.",
            "fol": "(p_12(Forest) \u2295 p_13(Forest)) \u2192 p_11(Forest)",
            "str_fol": "(fights_bravely(Forest) \u2295 leads_packs(Forest)) \u2192 symbolize_courage(Forest)"
        },
        {
            "id": 3,
            "text": "Every legendary animal that symbolizes courage either protects its habitat or defends its territory.",
            "fol": "\u2200x (p_11(x) \u2192 (p_1(x) \u2228 p_10(x)))",
            "str_fol": "\u2200x (symbolize_courage(x) \u2192 (protect_habitat(x) \u2228 defend_territory(x)))"
        },
        {
            "id": 2,
            "text": "If Forest roams wild, then he is fierce and defends his territory.",
            "fol": "p_0(Forest) \u2192 (p_9(Forest) \u2227 p_10(Forest))",
            "str_fol": "roam_wild(Forest) \u2192 (is_fierce(Forest) \u2227 defend_territory(Forest))"
        },
        {
            "id": 1,
            "text": "Any legendary animal that has strength or is fierce is powerful.",
            "fol": "\u2200x ((p_8(x) \u2228 p_9(x)) \u2192 p_6(x))",
            "str_fol": "\u2200x ((has_strength(x) \u2228 is_fierce(x)) \u2192 powerful(x))"
        },
        {
            "id": 0,
            "text": "Every legendary animal is either powerful or revered (or both).",
            "fol": "\u2200x (p_6(x) \u2228 p_7(x))",
            "str_fol": "\u2200x (powerful(x) \u2228 revered(x))"
        }
    ],
    "context_fol": "p_5(Forest)\np_3(Forest)\n\u00acp_4(Forest)\np_2(Forest)\n\u00acp_1(Forest)\np_0(Forest)\n(p_16(Forest) \u2228 p_5(Forest)) \u2192 p_15(Forest)\np_15(Forest) \u2295 p_14(Forest)\n\u2200x ((p_3(x) \u2227 p_12(x)) \u2192 p_4(x))\n(p_2(Forest) \u2295 p_13(Forest)) \u2192 p_14(Forest)\n(p_12(Forest) \u2295 p_13(Forest)) \u2192 p_11(Forest)\n\u2200x (p_11(x) \u2192 (p_1(x) \u2228 p_10(x)))\np_0(Forest) \u2192 (p_9(Forest) \u2227 p_10(Forest))\n\u2200x ((p_8(x) \u2228 p_9(x)) \u2192 p_6(x))\n\u2200x (p_6(x) \u2228 p_7(x))",
    "conclusion": {
        "id": 14,
        "subject": "Forest",
        "text": "Forest is not revered.",
        "fol": "\u00acp_7(Forest)",
        "str_fol": "\u00acrevered(Forest)",
        "negation": true
    },
    "initial_answer": "Uncertain",
    "initial_goal": "\u00acp_7(Forest)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 5,
                    "subject": "Forest",
                    "text": "Forest is majestic.",
                    "fol": "p_5(Forest)",
                    "str_fol": "is_majestic(Forest)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 8,
                    "text": "If Forest lives nobly or is majestic, then he receives offerings.",
                    "fol": "(p_16(Forest) \u2228 p_5(Forest)) \u2192 p_15(Forest)",
                    "str_fol": "(lives_nobly(Forest) \u2228 is_majestic(Forest)) \u2192 receives_offers(Forest)"
                }
            ],
            "conclusion": {
                "id": 6,
                "subject": "Forest",
                "text": "The people of Rome receive offerings from Forest.",
                "fol": "p_15(Forest)",
                "str_fol": "receives_offers(Forest)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 6,
                    "subject": "Forest",
                    "text": "The people of Rome receive offerings from Forest.",
                    "fol": "p_15(Forest)",
                    "str_fol": "receives_offers(Forest)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 7,
                    "text": "Forest either inspires awe or receives offerings from the people of Rome, but not both.",
                    "fol": "p_15(Forest) \u2295 p_14(Forest)",
                    "str_fol": "receives_offers(Forest) \u2295 inspire_awe(Forest)"
                }
            ],
            "conclusion": {
                "id": 7,
                "subject": "Forest",
                "text": "Forest does not inspire awe.",
                "fol": "\u00acp_14(Forest)",
                "str_fol": "\u00acinspire_awe(Forest)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 3,
                    "subject": "Forest",
                    "text": "Forest has heart.",
                    "fol": "p_3(Forest)",
                    "str_fol": "has_heart(Forest)",
                    "negation": false
                },
                {
                    "id": 4,
                    "subject": "Forest",
                    "text": "Forest does not win respect.",
                    "fol": "\u00acp_4(Forest)",
                    "str_fol": "\u00acwins_respect(Forest)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 6,
                    "text": "If a legendary animal has heart and fights bravely, then it wins respect.",
                    "fol": "\u2200x ((p_3(x) \u2227 p_12(x)) \u2192 p_4(x))",
                    "str_fol": "\u2200x ((has_heart(x) \u2227 fights_bravely(x)) \u2192 wins_respect(x))"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Forest",
                "text": "Forest does not fight bravely.",
                "fol": "\u00acp_12(Forest)",
                "str_fol": "\u00acfights_bravely(Forest)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 2,
                    "subject": "Forest",
                    "text": "Forest rules the wild.",
                    "fol": "p_2(Forest)",
                    "str_fol": "rules_wild(Forest)",
                    "negation": false
                },
                {
                    "id": 7,
                    "subject": "Forest",
                    "text": "Forest does not inspire awe.",
                    "fol": "\u00acp_14(Forest)",
                    "str_fol": "\u00acinspire_awe(Forest)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "If Forest either rules the wild or leads packs (but not both), then he inspires awe.",
                    "fol": "(p_2(Forest) \u2295 p_13(Forest)) \u2192 p_14(Forest)",
                    "str_fol": "(rules_wild(Forest) \u2295 leads_packs(Forest)) \u2192 inspire_awe(Forest)"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Forest",
                "text": "Forest leads packs.",
                "fol": "p_13(Forest)",
                "str_fol": "leads_packs(Forest)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 8,
                    "subject": "Forest",
                    "text": "Forest does not fight bravely.",
                    "fol": "\u00acp_12(Forest)",
                    "str_fol": "\u00acfights_bravely(Forest)",
                    "negation": true
                },
                {
                    "id": 9,
                    "subject": "Forest",
                    "text": "Forest leads packs.",
                    "fol": "p_13(Forest)",
                    "str_fol": "leads_packs(Forest)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "If Forest either fights bravely or leads packs (but not both), then he symbolizes courage.",
                    "fol": "(p_12(Forest) \u2295 p_13(Forest)) \u2192 p_11(Forest)",
                    "str_fol": "(fights_bravely(Forest) \u2295 leads_packs(Forest)) \u2192 symbolize_courage(Forest)"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Forest",
                "text": "Forest symbolizes courage.",
                "fol": "p_11(Forest)",
                "str_fol": "symbolize_courage(Forest)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 10,
                    "subject": "Forest",
                    "text": "Forest symbolizes courage.",
                    "fol": "p_11(Forest)",
                    "str_fol": "symbolize_courage(Forest)",
                    "negation": false
                },
                {
                    "id": 1,
                    "subject": "Forest",
                    "text": "Forest does not protect his habitat.",
                    "fol": "\u00acp_1(Forest)",
                    "str_fol": "\u00acprotect_habitat(Forest)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "Every legendary animal that symbolizes courage either protects its habitat or defends its territory.",
                    "fol": "\u2200x (p_11(x) \u2192 (p_1(x) \u2228 p_10(x)))",
                    "str_fol": "\u2200x (symbolize_courage(x) \u2192 (protect_habitat(x) \u2228 defend_territory(x)))"
                }
            ],
            "conclusion": {
                "id": 11,
                "subject": "Forest",
                "text": "Forest defends his territory.",
                "fol": "p_10(Forest)",
                "str_fol": "defend_territory(Forest)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 0,
                    "subject": "Forest",
                    "text": "Forest roams wild.",
                    "fol": "p_0(Forest)",
                    "str_fol": "roam_wild(Forest)",
                    "negation": false
                },
                {
                    "id": 11,
                    "subject": "Forest",
                    "text": "Forest defends his territory.",
                    "fol": "p_10(Forest)",
                    "str_fol": "defend_territory(Forest)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "If Forest roams wild, then he is fierce and defends his territory.",
                    "fol": "p_0(Forest) \u2192 (p_9(Forest) \u2227 p_10(Forest))",
                    "str_fol": "roam_wild(Forest) \u2192 (is_fierce(Forest) \u2227 defend_territory(Forest))"
                }
            ],
            "conclusion": {
                "id": 12,
                "subject": "Forest",
                "text": "Forest is fierce.",
                "fol": "p_9(Forest)",
                "str_fol": "is_fierce(Forest)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 12,
                    "subject": "Forest",
                    "text": "Forest is fierce.",
                    "fol": "p_9(Forest)",
                    "str_fol": "is_fierce(Forest)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "Any legendary animal that has strength or is fierce is powerful.",
                    "fol": "\u2200x ((p_8(x) \u2228 p_9(x)) \u2192 p_6(x))",
                    "str_fol": "\u2200x ((has_strength(x) \u2228 is_fierce(x)) \u2192 powerful(x))"
                }
            ],
            "conclusion": {
                "id": 13,
                "subject": "Forest",
                "text": "Forest is powerful.",
                "fol": "p_6(Forest)",
                "str_fol": "powerful(Forest)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 13,
                    "subject": "Forest",
                    "text": "Forest is powerful.",
                    "fol": "p_6(Forest)",
                    "str_fol": "powerful(Forest)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "Every legendary animal is either powerful or revered (or both).",
                    "fol": "\u2200x (p_6(x) \u2228 p_7(x))",
                    "str_fol": "\u2200x (powerful(x) \u2228 revered(x))"
                }
            ],
            "conclusion": null
        }
    ],
    "proof_trace": null,
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "UNCERTAIN",
            "Edited Assumptions": "p_5(Forest)\np_3(Forest)\n\u00acp_4(Forest)\np_2(Forest)\n\u00acp_1(Forest)\np_0(Forest)\n(p_16(Forest) \u2228 p_5(Forest)) \u2192 p_15(Forest)\np_15(Forest) \u2295 p_14(Forest)\n\u2200x ((p_3(x) \u2227 p_12(x)) \u2192 p_4(x))\n(p_2(Forest) \u2295 p_13(Forest)) \u2192 p_14(Forest)\n(p_12(Forest) \u2295 p_13(Forest)) \u2192 p_11(Forest)\n\u2200x (p_11(x) \u2192 (p_1(x) \u2228 p_10(x)))\np_0(Forest) \u2192 (p_9(Forest) \u2227 p_10(Forest))\n\u2200x ((p_8(x) \u2228 p_9(x)) \u2192 p_6(x))\n\u2200x (p_6(x) \u2228 p_7(x))",
            "Initial Goal": "\u00acp_7(Forest)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Forest)",
                    "p_3(Forest)",
                    "-p_4(Forest)",
                    "p_2(Forest)",
                    "-p_1(Forest)",
                    "p_0(Forest)",
                    "(p_16(Forest) | p_5(Forest)) -> p_15(Forest)",
                    "-(p_15(Forest) <-> p_14(Forest))",
                    "all x ((p_3(x) & p_12(x)) -> p_4(x))",
                    "(-(p_2(Forest) <-> p_13(Forest))) -> p_14(Forest)",
                    "(-(p_12(Forest) <-> p_13(Forest))) -> p_11(Forest)",
                    "all x (p_11(x) -> (p_1(x) | p_10(x)))",
                    "p_0(Forest) -> (p_9(Forest) & p_10(Forest))",
                    "all x ((p_8(x) | p_9(x)) -> p_6(x))",
                    "all x (p_6(x) | p_7(x))",
                    "p_6(Forest) -> -p_7(Forest)"
                ],
                "formulas(goals)": [
                    "-p_7(Forest)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "p_6(Forest) \u2192 \u00acp_7(Forest)"
                ]
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_5(Forest)\np_3(Forest)\n\u00acp_4(Forest)\np_2(Forest)\n\u00acp_1(Forest)\np_0(Forest)\n(p_16(Forest) \u2228 p_5(Forest)) \u2192 p_15(Forest)\np_15(Forest) \u2295 p_14(Forest)\n\u2200x ((p_3(x) \u2227 p_12(x)) \u2192 p_4(x))\n(p_2(Forest) \u2295 p_13(Forest)) \u2192 p_14(Forest)\n(p_12(Forest) \u2295 p_13(Forest)) \u2192 p_11(Forest)\n\u2200x (p_11(x) \u2192 (p_1(x) \u2228 p_10(x)))\np_0(Forest) \u2192 (p_9(Forest) \u2227 p_10(Forest))\n\u2200x ((p_8(x) \u2228 p_9(x)) \u2192 p_6(x))\n\u2200x (p_6(x) \u2228 p_7(x))\np_6(Forest) \u2192 \u00acp_7(Forest)",
            "Initial Goal": "\u00acp_7(Forest)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Forest)",
                    "p_3(Forest)",
                    "-p_4(Forest)",
                    "p_2(Forest)",
                    "-p_1(Forest)",
                    "p_0(Forest)",
                    "(p_16(Forest) | p_5(Forest)) -> p_15(Forest)",
                    "-(p_15(Forest) <-> p_14(Forest))",
                    "all x ((p_3(x) & p_12(x)) -> p_4(x))",
                    "-(p_2(Forest) <-> p_13(Forest)) -> p_14(Forest)",
                    "-(p_12(Forest) <-> p_13(Forest)) -> p_11(Forest)",
                    "all x (p_11(x) -> (p_1(x) | p_10(x)))",
                    "p_0(Forest) -> (p_9(Forest) & p_10(Forest))",
                    "all x ((p_8(x) | p_9(x)) -> p_6(x))",
                    "all x (p_6(x) | p_7(x))",
                    "p_6(Forest) -> -p_7(Forest)"
                ],
                "formulas(goals)": [
                    "-p_7(Forest)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "p_6(Forest) \u2192 \u00acp_7(Forest)"
                ]
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_5(Forest)\np_3(Forest)\n\u00acp_4(Forest)\np_2(Forest)\n\u00acp_1(Forest)\np_0(Forest)\n(p_16(Forest) \u2228 p_5(Forest)) \u2192 p_15(Forest)\np_15(Forest) \u2295 p_14(Forest)\n\u2200x ((p_3(x) \u2227 p_12(x)) \u2192 p_4(x))\n(p_2(Forest) \u2295 p_13(Forest)) \u2192 p_14(Forest)\n(p_12(Forest) \u2295 p_13(Forest)) \u2192 p_11(Forest)\n\u2200x (p_11(x) \u2192 (p_1(x) \u2228 p_10(x)))\np_0(Forest) \u2192 (p_9(Forest) \u2227 p_10(Forest))\n\u2200x ((p_8(x) \u2228 p_9(x)) \u2192 p_6(x))\n\u2200x (p_6(x) \u2228 p_7(x))\np_6(Forest) \u2192 p_7(Forest)",
            "Initial Goal": "\u00acp_7(Forest)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Forest)",
                    "p_3(Forest)",
                    "-p_4(Forest)",
                    "p_2(Forest)",
                    "-p_1(Forest)",
                    "p_0(Forest)",
                    "(p_16(Forest) | p_5(Forest)) -> p_15(Forest)",
                    "-(p_15(Forest) <-> p_14(Forest))",
                    "all x ((p_3(x) & p_12(x)) -> p_4(x))",
                    "(-(p_2(Forest) <-> p_13(Forest))) -> p_14(Forest)",
                    "(-(p_12(Forest) <-> p_13(Forest))) -> p_11(Forest)",
                    "all x (p_11(x) -> (p_1(x) | p_10(x)))",
                    "p_0(Forest) -> (p_9(Forest) & p_10(Forest))",
                    "all x ((p_8(x) | p_9(x)) -> p_6(x))",
                    "all x (p_6(x) | p_7(x))",
                    "p_6(Forest) -> p_7(Forest)"
                ],
                "formulas(goals)": [
                    "-(-p_7(Forest))"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_6(Forest) \u2192 \u00acp_7(Forest)"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_6(Forest) \u2192 p_7(Forest)"
                ]
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_5(Forest)\np_3(Forest)\n\u00acp_4(Forest)\np_2(Forest)\n\u00acp_1(Forest)\np_0(Forest)\n(\u00acp_16(Forest) \u2228 p_15(Forest)) \u2227 (\u00acp_5(Forest) \u2228 p_15(Forest))\np_15(Forest) \u2295 p_14(Forest)\n\u2200x ((p_3(x) \u2227 p_12(x)) \u2192 p_4(x))\n(p_2(Forest) \u2295 p_13(Forest)) \u2192 p_14(Forest)\n(p_12(Forest) \u2295 p_13(Forest)) \u2192 p_11(Forest)\n\u2200x (p_11(x) \u2192 (p_1(x) \u2228 p_10(x)))\n(p_0(Forest) \u2192 p_9(Forest)) \u2227 (p_0(Forest) \u2192 p_10(Forest))\n\u2200x ((\u00acp_8(x) \u2228 p_6(x)) \u2227 (\u00acp_9(x) \u2228 p_6(x)))\n\u2200x (p_6(x) \u2228 p_7(x))\np_6(Forest) \u2192 p_7(Forest)",
            "Initial Goal": "\u00acp_7(Forest)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Forest)",
                    "p_3(Forest)",
                    "-p_4(Forest)",
                    "p_2(Forest)",
                    "-p_1(Forest)",
                    "p_0(Forest)",
                    "(-p_16(Forest) | p_15(Forest)) & (-p_5(Forest) | p_15(Forest))",
                    "-(p_15(Forest) <-> p_14(Forest))",
                    "all x ((p_3(x) & p_12(x)) -> p_4(x))",
                    "(-(p_2(Forest) <-> p_13(Forest))) -> p_14(Forest)",
                    "(-(p_12(Forest) <-> p_13(Forest))) -> p_11(Forest)",
                    "all x (p_11(x) -> (p_1(x) | p_10(x)))",
                    "(p_0(Forest) -> p_9(Forest)) & (p_0(Forest) -> p_10(Forest))",
                    "all x ((-p_8(x) | p_6(x)) & (-p_9(x) | p_6(x)))",
                    "all x (p_6(x) | p_7(x))",
                    "p_6(Forest) -> p_7(Forest)"
                ],
                "formulas(goals)": [
                    "p_7(Forest)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "(p_16(Forest) \u2228 p_5(Forest)) \u2192 p_15(Forest)",
                    "\u2200x ((p_8(x) \u2228 p_9(x)) \u2192 p_6(x))",
                    "p_0(Forest) \u2192 (p_9(Forest) \u2227 p_10(Forest))"
                ],
                "added_facts": [],
                "added_rules": [
                    "(\u00acp_16(Forest) \u2228 p_15(Forest)) \u2227 (\u00acp_5(Forest) \u2228 p_15(Forest))",
                    "(p_0(Forest) \u2192 p_9(Forest)) \u2227 (p_0(Forest) \u2192 p_10(Forest))",
                    "\u2200x ((\u00acp_8(x) \u2228 p_6(x)) \u2227 (\u00acp_9(x) \u2228 p_6(x)))"
                ]
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_5(Forest)\np_3(Forest)\n\u00acp_4(Forest)\np_2(Forest)\n\u00acp_1(Forest)\np_0(Forest)\n(\u00acp_16(Forest) \u2228 p_15(Forest)) \u2227 (\u00acp_5(Forest) \u2228 p_15(Forest))\np_15(Forest) \u2295 p_14(Forest)\n\u2200x ((p_3(x) \u2227 p_12(x)) \u2192 p_4(x))\n(p_2(Forest) \u2295 p_13(Forest)) \u2192 p_14(Forest)\n(p_12(Forest) \u2295 p_13(Forest)) \u2192 p_11(Forest)\n\u2200x (p_11(x) \u2192 (p_1(x) \u2228 p_10(x)))\n(p_0(Forest) \u2192 p_9(Forest)) \u2227 (p_0(Forest) \u2192 p_10(Forest))\n\u2200x ((\u00acp_8(x) \u2228 p_6(x)) \u2227 (\u00acp_9(x) \u2228 p_6(x)))\n\u2200x (p_6(x) \u2228 p_7(x))\n\u2200x ((p_3(x) \u2227 \u00acp_4(x)) \u2192 \u00acp_7(x))",
            "Initial Goal": "\u00acp_7(Forest)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Forest)",
                    "p_3(Forest)",
                    "-p_4(Forest)",
                    "p_2(Forest)",
                    "-p_1(Forest)",
                    "p_0(Forest)",
                    "(-p_16(Forest) | p_15(Forest)) & (-p_5(Forest) | p_15(Forest))",
                    "-(p_15(Forest) <-> p_14(Forest))",
                    "all x ((p_3(x) & p_12(x)) -> p_4(x))",
                    "(-(p_2(Forest) <-> p_13(Forest))) -> p_14(Forest)",
                    "(-(p_12(Forest) <-> p_13(Forest))) -> p_11(Forest)",
                    "all x (p_11(x) -> (p_1(x) | p_10(x)))",
                    "(p_0(Forest) -> p_9(Forest)) & (p_0(Forest) -> p_10(Forest))",
                    "all x ((-p_8(x) | p_6(x)) & (-p_9(x) | p_6(x)))",
                    "all x (p_6(x) | p_7(x))",
                    "all x ((p_3(x) & -p_4(x)) -> -p_7(x))"
                ],
                "formulas(goals)": [
                    "-p_7(Forest)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_6(Forest) \u2192 p_7(Forest)"
                ],
                "added_facts": [],
                "added_rules": [
                    "\u2200x ((p_3(x) \u2227 \u00acp_4(x)) \u2192 \u00acp_7(x))"
                ]
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_5(Forest)\np_3(Forest)\n\u00acp_4(Forest)\np_2(Forest)\n\u00acp_1(Forest)\np_0(Forest)\n(\u00acp_16(Forest) \u2228 p_15(Forest)) \u2227 (\u00acp_5(Forest) \u2228 p_15(Forest))\np_15(Forest) \u2295 p_14(Forest)\n\u2200x ((p_3(x) \u2227 p_12(x)) \u2192 p_4(x))\n(p_2(Forest) \u2295 p_13(Forest)) \u2192 p_14(Forest)\n(p_12(Forest) \u2295 p_13(Forest)) \u2192 p_11(Forest)\n\u2200x (p_11(x) \u2192 (p_1(x) \u2228 p_10(x)))\n(p_0(Forest) \u2192 p_9(Forest)) \u2227 (p_0(Forest) \u2192 p_10(Forest))\n\u2200x ((\u00acp_8(x) \u2228 p_6(x)) \u2227 (\u00acp_9(x) \u2228 p_6(x)))\n\u2200x (p_6(x) \u2228 p_7(x))\np_15(Forest) \u2192 p_7(Forest)",
            "Initial Goal": "\u00acp_7(Forest)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Forest)",
                    "p_3(Forest)",
                    "-p_4(Forest)",
                    "p_2(Forest)",
                    "-p_1(Forest)",
                    "p_0(Forest)",
                    "(-p_16(Forest) | p_15(Forest)) & (-p_5(Forest) | p_15(Forest))",
                    "-(p_15(Forest) <-> p_14(Forest))",
                    "all x ((p_3(x) & p_12(x)) -> p_4(x))",
                    "(-(p_2(Forest) <-> p_13(Forest))) -> p_14(Forest)",
                    "(-(p_12(Forest) <-> p_13(Forest))) -> p_11(Forest)",
                    "all x (p_11(x) -> (p_1(x) | p_10(x)))",
                    "(p_0(Forest) -> p_9(Forest)) & (p_0(Forest) -> p_10(Forest))",
                    "all x ((-p_8(x) | p_6(x)) & (-p_9(x) | p_6(x)))",
                    "all x (p_6(x) | p_7(x))",
                    "p_15(Forest) -> p_7(Forest)"
                ],
                "formulas(goals)": [
                    "-(-p_7(Forest))"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u2200x ((p_3(x) \u2227 \u00acp_4(x)) \u2192 \u00acp_7(x))"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_15(Forest) \u2192 p_7(Forest)"
                ]
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_5(Forest)\np_3(Forest)\n\u00acp_4(Forest)\np_2(Forest)\n\u00acp_1(Forest)\np_0(Forest)\n(\u00acp_16(Forest) \u2228 p_15(Forest)) \u2227 (\u00acp_5(Forest) \u2228 \u00acp_15(Forest))\np_15(Forest) \u2295 p_14(Forest)\n\u2200x ((p_3(x) \u2227 p_12(x)) \u2192 p_4(x))\n(p_2(Forest) \u2295 p_13(Forest)) \u2192 p_14(Forest)\n(p_12(Forest) \u2295 p_13(Forest)) \u2192 p_11(Forest)\n\u2200x (p_11(x) \u2192 (p_1(x) \u2228 p_10(x)))\n(p_0(Forest) \u2192 p_9(Forest)) \u2227 (p_0(Forest) \u2192 p_10(Forest))\n\u2200x ((\u00acp_8(x) \u2228 p_6(x)) \u2227 (\u00acp_9(x) \u2228 p_6(x)))\n\u2200x (p_6(x) \u2228 p_7(x))\np_15(Forest) \u2192 p_7(Forest)\n\u00acp_15(Forest) \u2192 \u00acp_7(Forest)",
            "Initial Goal": "\u00acp_7(Forest)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Forest)",
                    "p_3(Forest)",
                    "-p_4(Forest)",
                    "p_2(Forest)",
                    "-p_1(Forest)",
                    "p_0(Forest)",
                    "(-p_16(Forest) | p_15(Forest)) & (-p_5(Forest) | -p_15(Forest))",
                    "-(p_15(Forest) <-> p_14(Forest))",
                    "all x ((p_3(x) & p_12(x)) -> p_4(x))",
                    "(-(p_2(Forest) <-> p_13(Forest))) -> p_14(Forest)",
                    "(-(p_12(Forest) <-> p_13(Forest))) -> p_11(Forest)",
                    "all x (p_11(x) -> (p_1(x) | p_10(x)))",
                    "(p_0(Forest) -> p_9(Forest)) & (p_0(Forest) -> p_10(Forest))",
                    "all x ((-p_8(x) | p_6(x)) & (-p_9(x) | p_6(x)))",
                    "all x (p_6(x) | p_7(x))",
                    "p_15(Forest) -> p_7(Forest)",
                    "-p_15(Forest) -> -p_7(Forest)"
                ],
                "formulas(goals)": [
                    "-p_7(Forest)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "(\u00acp_16(Forest) \u2228 p_15(Forest)) \u2227 (\u00acp_5(Forest) \u2228 p_15(Forest))"
                ],
                "added_facts": [],
                "added_rules": [
                    "(\u00acp_16(Forest) \u2228 p_15(Forest)) \u2227 (\u00acp_5(Forest) \u2228 \u00acp_15(Forest))",
                    "\u00acp_15(Forest) \u2192 \u00acp_7(Forest)"
                ]
            }
        }
    ]
}