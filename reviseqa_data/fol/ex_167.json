{
    "background_story": "Colette was a skilled herbalist living in the rolling hills of rural France. She spent most of her days tending to her garden, where she cultivated a variety of rare and exotic plants. Among her favorites was the Phellodendron amurense, a plant prized for its medicinal properties. Colette used the Phellodendron to create remedies for the local villagers, who would often come to her for treatment of ailments ranging from fever to skin conditions. Her deep understanding of the plant's properties and her gentle touch made her a beloved figure in the community. As she worked, Colette would often tell stories of the Phellodendron's origins in ancient China, where it was used in traditional medicine for centuries. Her passion for the plant and its healing powers inspired a new generation of herbalists, ensuring the continuation of her life's work.",
    "predicates": [
        {
            "id": 0,
            "name": "teaches_others"
        },
        {
            "id": 1,
            "name": "is_caring"
        },
        {
            "id": 2,
            "name": "uses_herbal_remedies"
        },
        {
            "id": 3,
            "name": "uses_conventional_medicine"
        },
        {
            "id": 4,
            "name": "prescribes_pills"
        },
        {
            "id": 5,
            "name": "is_doctor"
        },
        {
            "id": 6,
            "name": "treats_patients"
        },
        {
            "id": 7,
            "name": "conducts_research"
        },
        {
            "id": 8,
            "name": "diagnose_ailments"
        },
        {
            "id": 9,
            "name": "helps_others"
        },
        {
            "id": 10,
            "name": "is_healer"
        },
        {
            "id": 11,
            "name": "makes_potions"
        },
        {
            "id": 12,
            "name": "has_medical_knowledge"
        },
        {
            "id": 13,
            "name": "creates_natural_cures"
        },
        {
            "id": 14,
            "name": "heals_people"
        },
        {
            "id": 15,
            "name": "studies_plants"
        },
        {
            "id": 16,
            "name": "creates_remedies"
        },
        {
            "id": 17,
            "name": "knows_plants"
        },
        {
            "id": 18,
            "name": "makes_medicine"
        },
        {
            "id": 19,
            "name": "has_knowledge"
        },
        {
            "id": 20,
            "name": "shows_empathy"
        }
    ],
    "subject_name": "Colette",
    "subject_category": "human",
    "keyword": "phellodendron",
    "all_facts": [
        {
            "id": 0,
            "subject": "Colette",
            "text": "Colette teaches others in the field of herbalism.",
            "fol": "p_0(Colette)",
            "str_fol": "teaches_others(Colette)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Colette",
            "text": "Colette is not a caring person.",
            "fol": "\u00acp_1(Colette)",
            "str_fol": "\u00acis_caring(Colette)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Colette",
            "text": "Colette does not help others.",
            "fol": "\u00acp_9(Colette)",
            "str_fol": "\u00achelps_others(Colette)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Colette",
            "text": "Colette does not treat patients.",
            "fol": "\u00acp_6(Colette)",
            "str_fol": "\u00actreats_patients(Colette)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Colette",
            "text": "Colette does not conduct research.",
            "fol": "\u00acp_7(Colette)",
            "str_fol": "\u00acconducts_research(Colette)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Colette",
            "text": "Colette is not a doctor.",
            "fol": "\u00acp_5(Colette)",
            "str_fol": "\u00acis_doctor(Colette)",
            "negation": true
        },
        {
            "id": 6,
            "subject": "Colette",
            "text": "Colette does not prescribe pills.",
            "fol": "\u00acp_4(Colette)",
            "str_fol": "\u00acprescribes_pills(Colette)",
            "negation": true
        },
        {
            "id": 7,
            "subject": "Colette",
            "text": "Colette uses herbal remedies.",
            "fol": "p_2(Colette)",
            "str_fol": "uses_herbal_remedies(Colette)",
            "negation": false
        },
        {
            "id": 8,
            "subject": "Colette",
            "text": "Colette does not use conventional medicine.",
            "fol": "\u00acp_3(Colette)",
            "str_fol": "\u00acuses_conventional_medicine(Colette)",
            "negation": true
        }
    ],
    "context_facts": [
        {
            "id": 1,
            "subject": "Colette",
            "text": "Colette is not a caring person.",
            "fol": "\u00acp_1(Colette)",
            "str_fol": "\u00acis_caring(Colette)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Colette",
            "text": "Colette teaches others in the field of herbalism.",
            "fol": "p_0(Colette)",
            "str_fol": "teaches_others(Colette)",
            "negation": false
        }
    ],
    "context_rules": [
        {
            "id": 6,
            "text": "Anyone who helps others is a caring person.",
            "fol": "\u2200x (p_9(x) \u2192 p_1(x))",
            "str_fol": "\u2200x (helps_others(x) \u2192 is_caring(x))"
        },
        {
            "id": 5,
            "text": "Anyone who treats patients or diagnoses ailments is able to help others.",
            "fol": "\u2200x ((p_6(x) \u2228 p_8(x)) \u2192 p_9(x))",
            "str_fol": "\u2200x ((treats_patients(x) \u2228 diagnose_ailments(x)) \u2192 helps_others(x))"
        },
        {
            "id": 4,
            "text": "Colette either conducts research or teaches others, but not both, in the field of herbalism.",
            "fol": "p_7(Colette) \u2295 p_0(Colette)",
            "str_fol": "conducts_research(Colette) \u2295 teaches_others(Colette)"
        },
        {
            "id": 3,
            "text": "If Colette is a doctor, then she either treats patients or conducts research, but not both.",
            "fol": "p_5(Colette) \u2192 (p_6(Colette) \u2295 p_7(Colette))",
            "str_fol": "is_doctor(Colette) \u2192 (treats_patients(Colette) \u2295 conducts_research(Colette))"
        },
        {
            "id": 2,
            "text": "If Colette prescribes pills, then she is a doctor.",
            "fol": "p_4(Colette) \u2192 p_5(Colette)",
            "str_fol": "prescribes_pills(Colette) \u2192 is_doctor(Colette)"
        },
        {
            "id": 1,
            "text": "Colette either uses herbal remedies or prescribes pills, but not both.",
            "fol": "p_2(Colette) \u2295 p_4(Colette)",
            "str_fol": "uses_herbal_remedies(Colette) \u2295 prescribes_pills(Colette)"
        },
        {
            "id": 0,
            "text": "Colette either uses herbal remedies or conventional medicine, but not both.",
            "fol": "p_2(Colette) \u2295 p_3(Colette)",
            "str_fol": "uses_herbal_remedies(Colette) \u2295 uses_conventional_medicine(Colette)"
        }
    ],
    "context": [
        {
            "id": 1,
            "subject": "Colette",
            "text": "Colette is not a caring person.",
            "fol": "\u00acp_1(Colette)",
            "str_fol": "\u00acis_caring(Colette)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Colette",
            "text": "Colette teaches others in the field of herbalism.",
            "fol": "p_0(Colette)",
            "str_fol": "teaches_others(Colette)",
            "negation": false
        },
        {
            "id": 6,
            "text": "Anyone who helps others is a caring person.",
            "fol": "\u2200x (p_9(x) \u2192 p_1(x))",
            "str_fol": "\u2200x (helps_others(x) \u2192 is_caring(x))"
        },
        {
            "id": 5,
            "text": "Anyone who treats patients or diagnoses ailments is able to help others.",
            "fol": "\u2200x ((p_6(x) \u2228 p_8(x)) \u2192 p_9(x))",
            "str_fol": "\u2200x ((treats_patients(x) \u2228 diagnose_ailments(x)) \u2192 helps_others(x))"
        },
        {
            "id": 4,
            "text": "Colette either conducts research or teaches others, but not both, in the field of herbalism.",
            "fol": "p_7(Colette) \u2295 p_0(Colette)",
            "str_fol": "conducts_research(Colette) \u2295 teaches_others(Colette)"
        },
        {
            "id": 3,
            "text": "If Colette is a doctor, then she either treats patients or conducts research, but not both.",
            "fol": "p_5(Colette) \u2192 (p_6(Colette) \u2295 p_7(Colette))",
            "str_fol": "is_doctor(Colette) \u2192 (treats_patients(Colette) \u2295 conducts_research(Colette))"
        },
        {
            "id": 2,
            "text": "If Colette prescribes pills, then she is a doctor.",
            "fol": "p_4(Colette) \u2192 p_5(Colette)",
            "str_fol": "prescribes_pills(Colette) \u2192 is_doctor(Colette)"
        },
        {
            "id": 1,
            "text": "Colette either uses herbal remedies or prescribes pills, but not both.",
            "fol": "p_2(Colette) \u2295 p_4(Colette)",
            "str_fol": "uses_herbal_remedies(Colette) \u2295 prescribes_pills(Colette)"
        },
        {
            "id": 0,
            "text": "Colette either uses herbal remedies or conventional medicine, but not both.",
            "fol": "p_2(Colette) \u2295 p_3(Colette)",
            "str_fol": "uses_herbal_remedies(Colette) \u2295 uses_conventional_medicine(Colette)"
        }
    ],
    "context_fol": "\u00acp_1(Colette)\np_0(Colette)\n\u2200x (p_9(x) \u2192 p_1(x))\n\u2200x ((p_6(x) \u2228 p_8(x)) \u2192 p_9(x))\np_7(Colette) \u2295 p_0(Colette)\np_5(Colette) \u2192 (p_6(Colette) \u2295 p_7(Colette))\np_4(Colette) \u2192 p_5(Colette)\np_2(Colette) \u2295 p_4(Colette)\np_2(Colette) \u2295 p_3(Colette)",
    "conclusion": {
        "id": 8,
        "subject": "Colette",
        "text": "Colette does not use conventional medicine.",
        "fol": "\u00acp_3(Colette)",
        "str_fol": "\u00acuses_conventional_medicine(Colette)",
        "negation": true
    },
    "initial_answer": "True",
    "initial_goal": "\u00acp_3(Colette)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 1,
                    "subject": "Colette",
                    "text": "Colette is not a caring person.",
                    "fol": "\u00acp_1(Colette)",
                    "str_fol": "\u00acis_caring(Colette)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 6,
                    "text": "Anyone who helps others is a caring person.",
                    "fol": "\u2200x (p_9(x) \u2192 p_1(x))",
                    "str_fol": "\u2200x (helps_others(x) \u2192 is_caring(x))"
                }
            ],
            "conclusion": {
                "id": 2,
                "subject": "Colette",
                "text": "Colette does not help others.",
                "fol": "\u00acp_9(Colette)",
                "str_fol": "\u00achelps_others(Colette)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 2,
                    "subject": "Colette",
                    "text": "Colette does not help others.",
                    "fol": "\u00acp_9(Colette)",
                    "str_fol": "\u00achelps_others(Colette)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "Anyone who treats patients or diagnoses ailments is able to help others.",
                    "fol": "\u2200x ((p_6(x) \u2228 p_8(x)) \u2192 p_9(x))",
                    "str_fol": "\u2200x ((treats_patients(x) \u2228 diagnose_ailments(x)) \u2192 helps_others(x))"
                }
            ],
            "conclusion": {
                "id": 3,
                "subject": "Colette",
                "text": "Colette does not treat patients.",
                "fol": "\u00acp_6(Colette)",
                "str_fol": "\u00actreats_patients(Colette)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 0,
                    "subject": "Colette",
                    "text": "Colette teaches others in the field of herbalism.",
                    "fol": "p_0(Colette)",
                    "str_fol": "teaches_others(Colette)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "Colette either conducts research or teaches others, but not both, in the field of herbalism.",
                    "fol": "p_7(Colette) \u2295 p_0(Colette)",
                    "str_fol": "conducts_research(Colette) \u2295 teaches_others(Colette)"
                }
            ],
            "conclusion": {
                "id": 4,
                "subject": "Colette",
                "text": "Colette does not conduct research.",
                "fol": "\u00acp_7(Colette)",
                "str_fol": "\u00acconducts_research(Colette)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 3,
                    "subject": "Colette",
                    "text": "Colette does not treat patients.",
                    "fol": "\u00acp_6(Colette)",
                    "str_fol": "\u00actreats_patients(Colette)",
                    "negation": true
                },
                {
                    "id": 4,
                    "subject": "Colette",
                    "text": "Colette does not conduct research.",
                    "fol": "\u00acp_7(Colette)",
                    "str_fol": "\u00acconducts_research(Colette)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "If Colette is a doctor, then she either treats patients or conducts research, but not both.",
                    "fol": "p_5(Colette) \u2192 (p_6(Colette) \u2295 p_7(Colette))",
                    "str_fol": "is_doctor(Colette) \u2192 (treats_patients(Colette) \u2295 conducts_research(Colette))"
                }
            ],
            "conclusion": {
                "id": 5,
                "subject": "Colette",
                "text": "Colette is not a doctor.",
                "fol": "\u00acp_5(Colette)",
                "str_fol": "\u00acis_doctor(Colette)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 5,
                    "subject": "Colette",
                    "text": "Colette is not a doctor.",
                    "fol": "\u00acp_5(Colette)",
                    "str_fol": "\u00acis_doctor(Colette)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "If Colette prescribes pills, then she is a doctor.",
                    "fol": "p_4(Colette) \u2192 p_5(Colette)",
                    "str_fol": "prescribes_pills(Colette) \u2192 is_doctor(Colette)"
                }
            ],
            "conclusion": {
                "id": 6,
                "subject": "Colette",
                "text": "Colette does not prescribe pills.",
                "fol": "\u00acp_4(Colette)",
                "str_fol": "\u00acprescribes_pills(Colette)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 6,
                    "subject": "Colette",
                    "text": "Colette does not prescribe pills.",
                    "fol": "\u00acp_4(Colette)",
                    "str_fol": "\u00acprescribes_pills(Colette)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "Colette either uses herbal remedies or prescribes pills, but not both.",
                    "fol": "p_2(Colette) \u2295 p_4(Colette)",
                    "str_fol": "uses_herbal_remedies(Colette) \u2295 prescribes_pills(Colette)"
                }
            ],
            "conclusion": {
                "id": 7,
                "subject": "Colette",
                "text": "Colette uses herbal remedies.",
                "fol": "p_2(Colette)",
                "str_fol": "uses_herbal_remedies(Colette)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 7,
                    "subject": "Colette",
                    "text": "Colette uses herbal remedies.",
                    "fol": "p_2(Colette)",
                    "str_fol": "uses_herbal_remedies(Colette)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "Colette either uses herbal remedies or conventional medicine, but not both.",
                    "fol": "p_2(Colette) \u2295 p_3(Colette)",
                    "str_fol": "uses_herbal_remedies(Colette) \u2295 uses_conventional_medicine(Colette)"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Colette",
                "text": "Colette does not use conventional medicine.",
                "fol": "\u00acp_3(Colette)",
                "str_fol": "\u00acuses_conventional_medicine(Colette)",
                "negation": true
            }
        }
    ],
    "proof_trace": "1 (all x (p_9(x) -> p_1(x))).  [assumption].\n2 (all x (p_6(x) | p_8(x) -> p_9(x))).  [assumption].\n3 -(p_7(Colette) <-> p_0(Colette)).  [assumption].\n4 p_5(Colette) -> -(p_6(Colette) <-> p_7(Colette)).  [assumption].\n5 p_4(Colette) -> p_5(Colette).  [assumption].\n6 -(p_2(Colette) <-> p_4(Colette)).  [assumption].\n7 -(p_2(Colette) <-> p_3(Colette)).  [assumption].\n8 -p_3(Colette).  [goal].\n9 -p_9(x) | p_1(x).  [clausify(1)].\n10 -p_1(Colette).  [assumption].\n11 -p_7(Colette) | -p_0(Colette).  [clausify(3)].\n12 p_0(Colette).  [assumption].\n14 -p_5(Colette) | p_6(Colette) | p_7(Colette).  [clausify(4)].\n15 -p_6(x) | p_9(x).  [clausify(2)].\n17 p_2(Colette) | p_4(Colette).  [clausify(6)].\n18 -p_4(Colette) | p_5(Colette).  [clausify(5)].\n20 -p_2(Colette) | -p_3(Colette).  [clausify(7)].\n22 p_2(Colette) | p_5(Colette).  [resolve(17,b,18,a)].\n23 p_5(Colette) | -p_3(Colette).  [resolve(22,a,20,a)].\n24 p_3(Colette).  [deny(8)].\n25 -p_5(Colette) | p_7(Colette) | p_9(Colette).  [resolve(14,b,15,a)].\n26 -p_9(Colette).  [resolve(9,b,10,a)].\n27 -p_5(Colette) | p_7(Colette).  [resolve(25,c,26,a)].\n28 -p_7(Colette).  [resolve(11,b,12,a)].\n29 -p_5(Colette).  [resolve(27,b,28,a)].\n30 p_5(Colette).  [resolve(23,b,24,a)].\n31 $F.  [resolve(29,a,30,a)].",
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_1(Colette)\np_0(Colette)\n\u2200x (p_9(x) \u2192 p_1(x))\n\u2200x ((p_6(x) \u2228 p_8(x)) \u2192 p_9(x))\np_7(Colette) \u2194 p_0(Colette)\np_5(Colette) \u2192 (p_6(Colette) \u2295 p_7(Colette))\np_4(Colette) \u2192 p_5(Colette)\np_2(Colette) \u2295 p_4(Colette)\np_2(Colette) \u2194 p_3(Colette)\np_7(Colette) \u2192 p_3(Colette)",
            "Initial Goal": "\u00acp_3(Colette)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_1(Colette)",
                    "p_0(Colette)",
                    "all x (p_9(x) -> p_1(x))",
                    "all x ((p_6(x) | p_8(x)) -> p_9(x))",
                    "p_7(Colette) <-> p_0(Colette)",
                    "p_5(Colette) -> (-(p_6(Colette) <-> p_7(Colette)))",
                    "p_4(Colette) -> p_5(Colette)",
                    "-(p_2(Colette) <-> p_4(Colette))",
                    "p_2(Colette) <-> p_3(Colette)",
                    "p_7(Colette) -> p_3(Colette)"
                ],
                "formulas(goals)": [
                    "-(-p_3(Colette))"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_7(Colette) \u2295 p_0(Colette)",
                    "p_2(Colette) \u2295 p_3(Colette)"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_7(Colette) \u2194 p_0(Colette)",
                    "p_2(Colette) \u2194 p_3(Colette)",
                    "p_7(Colette) \u2192 p_3(Colette)"
                ]
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_1(Colette)\np_0(Colette)\n\u2200x (p_9(x) \u2192 p_1(x))\n\u2200x ((p_6(x) \u2228 p_8(x)) \u2192 p_9(x))\np_7(Colette) \u2194 p_0(Colette)\np_5(Colette) \u2192 (p_6(Colette) \u2295 p_7(Colette))\np_4(Colette) \u2192 p_5(Colette)\np_2(Colette) \u2295 p_4(Colette)\np_2(Colette) \u2194 p_3(Colette)\np_0(Colette) \u2192 \u00acp_3(Colette)",
            "Initial Goal": "\u00acp_3(Colette)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_1(Colette)",
                    "p_0(Colette)",
                    "all x (p_9(x) -> p_1(x))",
                    "all x ((p_6(x) | p_8(x)) -> p_9(x))",
                    "p_7(Colette) <-> p_0(Colette)",
                    "p_5(Colette) -> (-(p_6(Colette) <-> p_7(Colette)))",
                    "p_4(Colette) -> p_5(Colette)",
                    "-(p_2(Colette) <-> p_4(Colette))",
                    "p_2(Colette) <-> p_3(Colette)",
                    "p_0(Colette) -> -p_3(Colette)"
                ],
                "formulas(goals)": [
                    "-p_3(Colette)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_7(Colette) \u2192 p_3(Colette)"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_0(Colette) \u2192 \u00acp_3(Colette)"
                ]
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_1(Colette)\np_0(Colette)\n\u2200x (p_9(x) \u2192 p_1(x))\n\u2200x ((p_6(x) \u2228 p_8(x)) \u2192 p_9(x))\np_7(Colette) \u2194 p_0(Colette)\np_5(Colette) \u2192 (p_6(Colette) \u2295 p_7(Colette))\np_4(Colette) \u2192 p_5(Colette)\np_2(Colette) \u2295 p_4(Colette)\np_2(Colette) \u2194 p_3(Colette)\np_0(Colette) \u2192 p_3(Colette)",
            "Initial Goal": "\u00acp_3(Colette)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_1(Colette)",
                    "p_0(Colette)",
                    "all x (p_9(x) -> p_1(x))",
                    "all x ((p_6(x) | p_8(x)) -> p_9(x))",
                    "p_7(Colette) <-> p_0(Colette)",
                    "p_5(Colette) -> (-(p_6(Colette) <-> p_7(Colette)))",
                    "p_4(Colette) -> p_5(Colette)",
                    "(-(p_2(Colette) <-> p_4(Colette)))",
                    "p_2(Colette) <-> p_3(Colette)",
                    "p_0(Colette) -> p_3(Colette)"
                ],
                "formulas(goals)": [
                    "-(-p_3(Colette))"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_0(Colette) \u2192 \u00acp_3(Colette)"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_0(Colette) \u2192 p_3(Colette)"
                ]
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_1(Colette)\np_0(Colette)\n\u2200x (p_9(x) \u2192 p_1(x))\n\u2200x ((p_6(x) \u2228 p_8(x)) \u2192 p_9(x))\np_7(Colette) \u2194 p_0(Colette)\np_5(Colette) \u2192 (p_6(Colette) \u2295 p_7(Colette))\np_4(Colette) \u2192 p_5(Colette)\np_2(Colette) \u2295 p_4(Colette)\np_2(Colette) \u2194 p_3(Colette)\np_0(Colette) \u2192 p_3(Colette)\np_3(Colette)\n\u00acp_3(Colette) \u2192 \u00acp_0(Colette)\n\u2200x (\u00acp_1(x) \u2192 \u00acp_9(x))\np_7(Colette) \u2192 p_0(Colette)\np_0(Colette) \u2192 p_7(Colette)",
            "Initial Goal": "\u00acp_3(Colette)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_1(Colette)",
                    "p_0(Colette)",
                    "all x (p_9(x) -> p_1(x))",
                    "all x ((p_6(x) | p_8(x)) -> p_9(x))",
                    "p_7(Colette) <-> p_0(Colette)",
                    "p_5(Colette) -> (-(p_6(Colette) <-> p_7(Colette)))",
                    "p_4(Colette) -> p_5(Colette)",
                    "-(p_2(Colette) <-> p_4(Colette))",
                    "p_2(Colette) <-> p_3(Colette)",
                    "p_0(Colette) -> p_3(Colette)",
                    "p_3(Colette)",
                    "-p_3(Colette) -> -p_0(Colette)",
                    "all x (-p_1(x) -> -p_9(x))",
                    "p_7(Colette) -> p_0(Colette)",
                    "p_0(Colette) -> p_7(Colette)"
                ],
                "formulas(goals)": [
                    "p_3(Colette)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_3(Colette)"
                ],
                "added_rules": [
                    "\u00acp_3(Colette) \u2192 \u00acp_0(Colette)",
                    "\u2200x (\u00acp_1(x) \u2192 \u00acp_9(x))",
                    "p_7(Colette) \u2192 p_0(Colette)",
                    "p_0(Colette) \u2192 p_7(Colette)"
                ]
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_1(Colette)\np_0(Colette)\n\u2200x (p_9(x) \u2192 p_1(x))\n\u2200x ((p_6(x) \u2228 p_8(x)) \u2192 p_9(x))\np_7(Colette) \u2194 p_0(Colette)\np_5(Colette) \u2192 (p_6(Colette) \u2295 p_7(Colette))\np_4(Colette) \u2192 p_5(Colette)\np_2(Colette) \u2295 p_4(Colette)\np_2(Colette) \u2194 p_3(Colette)\np_0(Colette) \u2192 p_3(Colette)\np_3(Colette)\n\u00acp_3(Colette) \u2192 \u00acp_0(Colette)\n\u2200x (\u00acp_1(x) \u2192 \u00acp_9(x))\np_7(Colette) \u2192 p_0(Colette)\np_0(Colette) \u2192 p_7(Colette)",
            "Initial Goal": "\u00acp_3(Colette)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_1(Colette)",
                    "p_0(Colette)",
                    "all x (p_9(x) -> p_1(x))",
                    "all x ((p_6(x) | p_8(x)) -> p_9(x))",
                    "p_7(Colette) <-> p_0(Colette)",
                    "p_5(Colette) -> (-(p_6(Colette) <-> p_7(Colette)))",
                    "p_4(Colette) -> p_5(Colette)",
                    "(-(p_2(Colette) <-> p_4(Colette)))",
                    "p_2(Colette) <-> p_3(Colette)",
                    "p_0(Colette) -> p_3(Colette)",
                    "p_3(Colette)",
                    "-p_3(Colette) -> -p_0(Colette)",
                    "all x (-p_1(x) -> -p_9(x))",
                    "p_7(Colette) -> p_0(Colette)",
                    "p_0(Colette) -> p_7(Colette)"
                ],
                "formulas(goals)": [
                    "--p_3(Colette)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": []
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_1(Colette)\np_0(Colette)\n\u2200x (p_9(x) \u2192 p_1(x))\n\u2200x ((p_6(x) \u2228 p_8(x)) \u2192 p_9(x))\np_7(Colette) \u2194 p_0(Colette)\np_5(Colette) \u2192 (p_6(Colette) \u2295 p_7(Colette))\np_4(Colette) \u2192 p_5(Colette)\np_2(Colette) \u2295 p_4(Colette)\np_2(Colette) \u2194 p_3(Colette)\np_0(Colette) \u2192 p_3(Colette)\np_3(Colette)\n\u00acp_3(Colette) \u2192 \u00acp_0(Colette)\n\u2200x (\u00acp_1(x) \u2192 \u00acp_9(x))\np_7(Colette) \u2192 p_0(Colette)\np_0(Colette) \u2192 p_7(Colette)\np_3(Colette)\n\u2200x (p_9(x) \u2228 \u00acp_1(x))\np_5(Colette) \u2192 ((p_6(Colette) \u2228 p_7(Colette)) \u2227 \u00ac(p_6(Colette) \u2227 p_7(Colette)))\n(p_2(Colette) \u2227 \u00acp_4(Colette)) \u2228 (\u00acp_2(Colette) \u2227 p_4(Colette))\np_3(Colette) \u2228 \u00acp_0(Colette)\n\u00acp_4(Colette) \u2228 p_5(Colette)",
            "Initial Goal": "\u00acp_3(Colette)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_1(Colette)",
                    "p_0(Colette)",
                    "all x (p_9(x) -> p_1(x))",
                    "all x ((p_6(x) | p_8(x)) -> p_9(x))",
                    "p_7(Colette) <-> p_0(Colette)",
                    "p_5(Colette) -> (-(p_6(Colette) <-> p_7(Colette)))",
                    "p_4(Colette) -> p_5(Colette)",
                    "-(p_2(Colette) <-> p_4(Colette))",
                    "p_2(Colette) <-> p_3(Colette)",
                    "p_0(Colette) -> p_3(Colette)",
                    "p_3(Colette)",
                    "-p_3(Colette) -> -p_0(Colette)",
                    "all x (-p_1(x) -> -p_9(x))",
                    "p_7(Colette) -> p_0(Colette)",
                    "p_0(Colette) -> p_7(Colette)",
                    "p_3(Colette)",
                    "all x (p_9(x) | -p_1(x))",
                    "p_5(Colette) -> ((p_6(Colette) | p_7(Colette)) & -(p_6(Colette) & p_7(Colette)))",
                    "(p_2(Colette) & -p_4(Colette)) | (-p_2(Colette) & p_4(Colette))",
                    "p_3(Colette) | -p_0(Colette)",
                    "-p_4(Colette) | p_5(Colette)"
                ],
                "formulas(goals)": [
                    "--p_3(Colette)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_3(Colette)",
                    "p_3(Colette) \u2228 \u00acp_0(Colette)",
                    "\u00acp_4(Colette) \u2228 p_5(Colette)"
                ],
                "added_rules": [
                    "\u2200x (p_9(x) \u2228 \u00acp_1(x))",
                    "p_5(Colette) \u2192 ((p_6(Colette) \u2228 p_7(Colette)) \u2227 \u00ac(p_6(Colette) \u2227 p_7(Colette)))",
                    "(p_2(Colette) \u2227 \u00acp_4(Colette)) \u2228 (\u00acp_2(Colette) \u2227 p_4(Colette))"
                ]
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_1(Colette)\np_0(Colette)\n\u2200x (p_9(x) \u2192 p_1(x))\n\u2200x ((p_6(x) \u2228 p_8(x)) \u2192 p_9(x))\np_7(Colette) \u2194 p_0(Colette)\np_5(Colette) \u2192 (p_6(Colette) \u2295 p_7(Colette))\np_4(Colette) \u2192 p_5(Colette)\np_2(Colette) \u2295 p_4(Colette)\np_2(Colette) \u2194 p_3(Colette)\np_0(Colette) \u2192 p_3(Colette)\np_3(Colette)\n\u00acp_3(Colette) \u2192 \u00acp_0(Colette)\n\u2200x (\u00acp_1(x) \u2192 \u00acp_9(x))\np_7(Colette) \u2192 p_0(Colette)\np_0(Colette) \u2192 p_7(Colette)\np_3(Colette)\n\u2200x (p_9(x) \u2228 \u00acp_1(x))\np_5(Colette) \u2192 ((p_6(Colette) \u2228 p_7(Colette)) \u2227 \u00ac(p_6(Colette) \u2227 p_7(Colette)))\n(p_2(Colette) \u2227 \u00acp_4(Colette)) \u2228 (\u00acp_2(Colette) \u2227 p_4(Colette))\np_3(Colette) \u2228 \u00acp_0(Colette)\n\u00acp_4(Colette) \u2228 p_5(Colette)\n\u00acp_9(Colette)\np_3(Colette) \u2228 \u00acp_3(Colette)",
            "Initial Goal": "\u00acp_3(Colette)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_1(Colette)",
                    "p_0(Colette)",
                    "all x (p_9(x) -> p_1(x))",
                    "all x ((p_6(x) | p_8(x)) -> p_9(x))",
                    "p_7(Colette) <-> p_0(Colette)",
                    "p_5(Colette) -> (-(p_6(Colette) <-> p_7(Colette)))",
                    "p_4(Colette) -> p_5(Colette)",
                    "-(p_2(Colette) <-> p_4(Colette))",
                    "p_2(Colette) <-> p_3(Colette)",
                    "p_0(Colette) -> p_3(Colette)",
                    "p_3(Colette)",
                    "-p_3(Colette) -> -p_0(Colette)",
                    "all x (-p_1(x) -> -p_9(x))",
                    "p_7(Colette) -> p_0(Colette)",
                    "p_0(Colette) -> p_7(Colette)",
                    "p_3(Colette)",
                    "all x (p_9(x) | -p_1(x))",
                    "p_5(Colette) -> ((p_6(Colette) | p_7(Colette)) & (-(p_6(Colette) & p_7(Colette))))",
                    "(p_2(Colette) & -p_4(Colette)) | (-p_2(Colette) & p_4(Colette))",
                    "p_3(Colette) | -p_0(Colette)",
                    "-p_4(Colette) | p_5(Colette)",
                    "-p_9(Colette)",
                    "p_3(Colette) | -p_3(Colette)"
                ],
                "formulas(goals)": [
                    "--p_3(Colette)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "\u00acp_9(Colette)",
                    "p_3(Colette) \u2228 \u00acp_3(Colette)"
                ],
                "added_rules": []
            }
        }
    ]
}