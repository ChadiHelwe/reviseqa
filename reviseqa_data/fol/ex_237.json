{
    "background_story": "Romeo, a cunning and charismatic fuchs, roamed the German countryside with his bushy tail and piercing gaze. His name, meaning 'lover' in Italian, suited him well, as he had a way with the ladies of the forest. Romeo's rusty red fur and agile physique made him a formidable hunter, but his true passion was exploring the rolling hills and woodlands. At dusk, he'd often sneak into the nearby village, stealing hearts with his playful antics and quick wit. The locals adored Romeo, leaving out treats for him and telling tales of his clever escapades. As the sun dipped below the horizon, Romeo would vanish into the underbrush, his legend growing with each passing night.",
    "predicates": [
        {
            "id": 0,
            "name": "cunning"
        },
        {
            "id": 1,
            "name": "explores_wild"
        },
        {
            "id": 2,
            "name": "has_sharp_teeth"
        },
        {
            "id": 3,
            "name": "is_playful"
        },
        {
            "id": 4,
            "name": "climbs_trees"
        },
        {
            "id": 5,
            "name": "has_rusty_fur"
        },
        {
            "id": 6,
            "name": "is_charming"
        },
        {
            "id": 7,
            "name": "charismatic"
        },
        {
            "id": 8,
            "name": "beloved"
        },
        {
            "id": 9,
            "name": "quick_witted"
        },
        {
            "id": 10,
            "name": "agile_hunter"
        },
        {
            "id": 11,
            "name": "catches_preys"
        },
        {
            "id": 12,
            "name": "has_bushy_tail"
        },
        {
            "id": 13,
            "name": "roams_freely"
        },
        {
            "id": 14,
            "name": "has_piercing_gaze"
        },
        {
            "id": 15,
            "name": "fast_runner"
        },
        {
            "id": 16,
            "name": "solves_traps"
        },
        {
            "id": 17,
            "name": "runs_fast"
        },
        {
            "id": 18,
            "name": "sees_well"
        },
        {
            "id": 19,
            "name": "jumps_high"
        }
    ],
    "subject_name": "Romeo",
    "subject_category": "fox",
    "keyword": "fuchs",
    "all_facts": [
        {
            "id": 0,
            "subject": "Romeo",
            "text": "Romeo is not cunning.",
            "fol": "\u00acp_0(Romeo)",
            "str_fol": "\u00accunning(Romeo)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Romeo",
            "text": "Romeo does not explore the wild.",
            "fol": "\u00acp_1(Romeo)",
            "str_fol": "\u00acexplores_wild(Romeo)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Romeo",
            "text": "Romeo has sharp teeth.",
            "fol": "p_2(Romeo)",
            "str_fol": "has_sharp_teeth(Romeo)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Romeo",
            "text": "Romeo is not playful.",
            "fol": "\u00acp_3(Romeo)",
            "str_fol": "\u00acis_playful(Romeo)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Romeo",
            "text": "Romeo does not climb trees.",
            "fol": "\u00acp_4(Romeo)",
            "str_fol": "\u00acclimbs_trees(Romeo)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Romeo",
            "text": "Romeo has rusty fur.",
            "fol": "p_5(Romeo)",
            "str_fol": "has_rusty_fur(Romeo)",
            "negation": false
        },
        {
            "id": 6,
            "subject": "Romeo",
            "text": "Romeo is not charming.",
            "fol": "\u00acp_6(Romeo)",
            "str_fol": "\u00acis_charming(Romeo)",
            "negation": true
        },
        {
            "id": 7,
            "subject": "Romeo",
            "text": "Romeo has a bushy tail.",
            "fol": "p_12(Romeo)",
            "str_fol": "has_bushy_tail(Romeo)",
            "negation": false
        },
        {
            "id": 8,
            "subject": "Romeo",
            "text": "Romeo cannot catch preys.",
            "fol": "\u00acp_11(Romeo)",
            "str_fol": "\u00accatches_preys(Romeo)",
            "negation": true
        },
        {
            "id": 9,
            "subject": "Romeo",
            "text": "Romeo is not quick-witted.",
            "fol": "\u00acp_9(Romeo)",
            "str_fol": "\u00acquick_witted(Romeo)",
            "negation": true
        },
        {
            "id": 10,
            "subject": "Romeo",
            "text": "Romeo is not an agile hunter.",
            "fol": "\u00acp_10(Romeo)",
            "str_fol": "\u00acagile_hunter(Romeo)",
            "negation": true
        },
        {
            "id": 11,
            "subject": "Romeo",
            "text": "Romeo is not charismatic.",
            "fol": "\u00acp_7(Romeo)",
            "str_fol": "\u00accharismatic(Romeo)",
            "negation": true
        },
        {
            "id": 12,
            "subject": "Romeo",
            "text": "Romeo is not beloved.",
            "fol": "\u00acp_8(Romeo)",
            "str_fol": "\u00acbeloved(Romeo)",
            "negation": true
        }
    ],
    "context_facts": [
        {
            "id": 5,
            "subject": "Romeo",
            "text": "Romeo has rusty fur.",
            "fol": "p_5(Romeo)",
            "str_fol": "has_rusty_fur(Romeo)",
            "negation": false
        },
        {
            "id": 6,
            "subject": "Romeo",
            "text": "Romeo is not charming.",
            "fol": "\u00acp_6(Romeo)",
            "str_fol": "\u00acis_charming(Romeo)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Romeo",
            "text": "Romeo is not playful.",
            "fol": "\u00acp_3(Romeo)",
            "str_fol": "\u00acis_playful(Romeo)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Romeo",
            "text": "Romeo has sharp teeth.",
            "fol": "p_2(Romeo)",
            "str_fol": "has_sharp_teeth(Romeo)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Romeo",
            "text": "Romeo does not climb trees.",
            "fol": "\u00acp_4(Romeo)",
            "str_fol": "\u00acclimbs_trees(Romeo)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Romeo",
            "text": "Romeo does not explore the wild.",
            "fol": "\u00acp_1(Romeo)",
            "str_fol": "\u00acexplores_wild(Romeo)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Romeo",
            "text": "Romeo is not cunning.",
            "fol": "\u00acp_0(Romeo)",
            "str_fol": "\u00accunning(Romeo)",
            "negation": true
        }
    ],
    "context_rules": [
        {
            "id": 5,
            "text": "If Romeo either has a bushy tail or has rusty fur (but not both), then he is charming.",
            "fol": "(p_12(Romeo) \u2295 p_5(Romeo)) \u2192 p_6(Romeo)",
            "str_fol": "(has_bushy_tail(Romeo) \u2295 has_rusty_fur(Romeo)) \u2192 is_charming(Romeo)"
        },
        {
            "id": 4,
            "text": "If Romeo has a bushy tail and catches preys, then he is playful.",
            "fol": "(p_12(Romeo) \u2227 p_11(Romeo)) \u2192 p_3(Romeo)",
            "str_fol": "(has_bushy_tail(Romeo) \u2227 catches_preys(Romeo)) \u2192 is_playful(Romeo)"
        },
        {
            "id": 3,
            "text": "Any fox that is quick-witted and has sharp teeth can catch preys.",
            "fol": "\u2200x ((p_9(x) \u2227 p_2(x)) \u2192 p_11(x))",
            "str_fol": "\u2200x ((quick_witted(x) \u2227 has_sharp_teeth(x)) \u2192 catches_preys(x))"
        },
        {
            "id": 2,
            "text": "If Romeo either climbs trees or is an agile hunter (but not both), then he explores the wild.",
            "fol": "(p_4(Romeo) \u2295 p_10(Romeo)) \u2192 p_1(Romeo)",
            "str_fol": "(climbs_trees(Romeo) \u2295 agile_hunter(Romeo)) \u2192 explores_wild(Romeo)"
        },
        {
            "id": 1,
            "text": "Every charismatic fox is either quick-witted or an agile hunter (or both).",
            "fol": "\u2200x (p_7(x) \u2192 (p_9(x) \u2228 p_10(x)))",
            "str_fol": "\u2200x (charismatic(x) \u2192 (quick_witted(x) \u2228 agile_hunter(x)))"
        },
        {
            "id": 0,
            "text": "If Romeo is either charismatic or cunning (but not both), then he is beloved.",
            "fol": "(p_7(Romeo) \u2295 p_0(Romeo)) \u2192 p_8(Romeo)",
            "str_fol": "(charismatic(Romeo) \u2295 cunning(Romeo)) \u2192 beloved(Romeo)"
        }
    ],
    "context": [
        {
            "id": 5,
            "subject": "Romeo",
            "text": "Romeo has rusty fur.",
            "fol": "p_5(Romeo)",
            "str_fol": "has_rusty_fur(Romeo)",
            "negation": false
        },
        {
            "id": 6,
            "subject": "Romeo",
            "text": "Romeo is not charming.",
            "fol": "\u00acp_6(Romeo)",
            "str_fol": "\u00acis_charming(Romeo)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Romeo",
            "text": "Romeo is not playful.",
            "fol": "\u00acp_3(Romeo)",
            "str_fol": "\u00acis_playful(Romeo)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Romeo",
            "text": "Romeo has sharp teeth.",
            "fol": "p_2(Romeo)",
            "str_fol": "has_sharp_teeth(Romeo)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Romeo",
            "text": "Romeo does not climb trees.",
            "fol": "\u00acp_4(Romeo)",
            "str_fol": "\u00acclimbs_trees(Romeo)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Romeo",
            "text": "Romeo does not explore the wild.",
            "fol": "\u00acp_1(Romeo)",
            "str_fol": "\u00acexplores_wild(Romeo)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Romeo",
            "text": "Romeo is not cunning.",
            "fol": "\u00acp_0(Romeo)",
            "str_fol": "\u00accunning(Romeo)",
            "negation": true
        },
        {
            "id": 5,
            "text": "If Romeo either has a bushy tail or has rusty fur (but not both), then he is charming.",
            "fol": "(p_12(Romeo) \u2295 p_5(Romeo)) \u2192 p_6(Romeo)",
            "str_fol": "(has_bushy_tail(Romeo) \u2295 has_rusty_fur(Romeo)) \u2192 is_charming(Romeo)"
        },
        {
            "id": 4,
            "text": "If Romeo has a bushy tail and catches preys, then he is playful.",
            "fol": "(p_12(Romeo) \u2227 p_11(Romeo)) \u2192 p_3(Romeo)",
            "str_fol": "(has_bushy_tail(Romeo) \u2227 catches_preys(Romeo)) \u2192 is_playful(Romeo)"
        },
        {
            "id": 3,
            "text": "Any fox that is quick-witted and has sharp teeth can catch preys.",
            "fol": "\u2200x ((p_9(x) \u2227 p_2(x)) \u2192 p_11(x))",
            "str_fol": "\u2200x ((quick_witted(x) \u2227 has_sharp_teeth(x)) \u2192 catches_preys(x))"
        },
        {
            "id": 2,
            "text": "If Romeo either climbs trees or is an agile hunter (but not both), then he explores the wild.",
            "fol": "(p_4(Romeo) \u2295 p_10(Romeo)) \u2192 p_1(Romeo)",
            "str_fol": "(climbs_trees(Romeo) \u2295 agile_hunter(Romeo)) \u2192 explores_wild(Romeo)"
        },
        {
            "id": 1,
            "text": "Every charismatic fox is either quick-witted or an agile hunter (or both).",
            "fol": "\u2200x (p_7(x) \u2192 (p_9(x) \u2228 p_10(x)))",
            "str_fol": "\u2200x (charismatic(x) \u2192 (quick_witted(x) \u2228 agile_hunter(x)))"
        },
        {
            "id": 0,
            "text": "If Romeo is either charismatic or cunning (but not both), then he is beloved.",
            "fol": "(p_7(Romeo) \u2295 p_0(Romeo)) \u2192 p_8(Romeo)",
            "str_fol": "(charismatic(Romeo) \u2295 cunning(Romeo)) \u2192 beloved(Romeo)"
        }
    ],
    "context_fol": "p_5(Romeo)\n\u00acp_6(Romeo)\n\u00acp_3(Romeo)\np_2(Romeo)\n\u00acp_4(Romeo)\n\u00acp_1(Romeo)\n\u00acp_0(Romeo)\n(p_12(Romeo) \u2295 p_5(Romeo)) \u2192 p_6(Romeo)\n(p_12(Romeo) \u2227 p_11(Romeo)) \u2192 p_3(Romeo)\n\u2200x ((p_9(x) \u2227 p_2(x)) \u2192 p_11(x))\n(p_4(Romeo) \u2295 p_10(Romeo)) \u2192 p_1(Romeo)\n\u2200x (p_7(x) \u2192 (p_9(x) \u2228 p_10(x)))\n(p_7(Romeo) \u2295 p_0(Romeo)) \u2192 p_8(Romeo)",
    "conclusion": {
        "id": 12,
        "subject": "Romeo",
        "text": "Romeo is not beloved.",
        "fol": "\u00acp_8(Romeo)",
        "str_fol": "\u00acbeloved(Romeo)",
        "negation": true
    },
    "initial_answer": "Uncertain",
    "initial_goal": "\u00acp_8(Romeo)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 5,
                    "subject": "Romeo",
                    "text": "Romeo has rusty fur.",
                    "fol": "p_5(Romeo)",
                    "str_fol": "has_rusty_fur(Romeo)",
                    "negation": false
                },
                {
                    "id": 6,
                    "subject": "Romeo",
                    "text": "Romeo is not charming.",
                    "fol": "\u00acp_6(Romeo)",
                    "str_fol": "\u00acis_charming(Romeo)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "If Romeo either has a bushy tail or has rusty fur (but not both), then he is charming.",
                    "fol": "(p_12(Romeo) \u2295 p_5(Romeo)) \u2192 p_6(Romeo)",
                    "str_fol": "(has_bushy_tail(Romeo) \u2295 has_rusty_fur(Romeo)) \u2192 is_charming(Romeo)"
                }
            ],
            "conclusion": {
                "id": 7,
                "subject": "Romeo",
                "text": "Romeo has a bushy tail.",
                "fol": "p_12(Romeo)",
                "str_fol": "has_bushy_tail(Romeo)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 7,
                    "subject": "Romeo",
                    "text": "Romeo has a bushy tail.",
                    "fol": "p_12(Romeo)",
                    "str_fol": "has_bushy_tail(Romeo)",
                    "negation": false
                },
                {
                    "id": 3,
                    "subject": "Romeo",
                    "text": "Romeo is not playful.",
                    "fol": "\u00acp_3(Romeo)",
                    "str_fol": "\u00acis_playful(Romeo)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "If Romeo has a bushy tail and catches preys, then he is playful.",
                    "fol": "(p_12(Romeo) \u2227 p_11(Romeo)) \u2192 p_3(Romeo)",
                    "str_fol": "(has_bushy_tail(Romeo) \u2227 catches_preys(Romeo)) \u2192 is_playful(Romeo)"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Romeo",
                "text": "Romeo cannot catch preys.",
                "fol": "\u00acp_11(Romeo)",
                "str_fol": "\u00accatches_preys(Romeo)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 2,
                    "subject": "Romeo",
                    "text": "Romeo has sharp teeth.",
                    "fol": "p_2(Romeo)",
                    "str_fol": "has_sharp_teeth(Romeo)",
                    "negation": false
                },
                {
                    "id": 8,
                    "subject": "Romeo",
                    "text": "Romeo cannot catch preys.",
                    "fol": "\u00acp_11(Romeo)",
                    "str_fol": "\u00accatches_preys(Romeo)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "Any fox that is quick-witted and has sharp teeth can catch preys.",
                    "fol": "\u2200x ((p_9(x) \u2227 p_2(x)) \u2192 p_11(x))",
                    "str_fol": "\u2200x ((quick_witted(x) \u2227 has_sharp_teeth(x)) \u2192 catches_preys(x))"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Romeo",
                "text": "Romeo is not quick-witted.",
                "fol": "\u00acp_9(Romeo)",
                "str_fol": "\u00acquick_witted(Romeo)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 4,
                    "subject": "Romeo",
                    "text": "Romeo does not climb trees.",
                    "fol": "\u00acp_4(Romeo)",
                    "str_fol": "\u00acclimbs_trees(Romeo)",
                    "negation": true
                },
                {
                    "id": 1,
                    "subject": "Romeo",
                    "text": "Romeo does not explore the wild.",
                    "fol": "\u00acp_1(Romeo)",
                    "str_fol": "\u00acexplores_wild(Romeo)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "If Romeo either climbs trees or is an agile hunter (but not both), then he explores the wild.",
                    "fol": "(p_4(Romeo) \u2295 p_10(Romeo)) \u2192 p_1(Romeo)",
                    "str_fol": "(climbs_trees(Romeo) \u2295 agile_hunter(Romeo)) \u2192 explores_wild(Romeo)"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Romeo",
                "text": "Romeo is not an agile hunter.",
                "fol": "\u00acp_10(Romeo)",
                "str_fol": "\u00acagile_hunter(Romeo)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 9,
                    "subject": "Romeo",
                    "text": "Romeo is not quick-witted.",
                    "fol": "\u00acp_9(Romeo)",
                    "str_fol": "\u00acquick_witted(Romeo)",
                    "negation": true
                },
                {
                    "id": 10,
                    "subject": "Romeo",
                    "text": "Romeo is not an agile hunter.",
                    "fol": "\u00acp_10(Romeo)",
                    "str_fol": "\u00acagile_hunter(Romeo)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "Every charismatic fox is either quick-witted or an agile hunter (or both).",
                    "fol": "\u2200x (p_7(x) \u2192 (p_9(x) \u2228 p_10(x)))",
                    "str_fol": "\u2200x (charismatic(x) \u2192 (quick_witted(x) \u2228 agile_hunter(x)))"
                }
            ],
            "conclusion": {
                "id": 11,
                "subject": "Romeo",
                "text": "Romeo is not charismatic.",
                "fol": "\u00acp_7(Romeo)",
                "str_fol": "\u00accharismatic(Romeo)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 11,
                    "subject": "Romeo",
                    "text": "Romeo is not charismatic.",
                    "fol": "\u00acp_7(Romeo)",
                    "str_fol": "\u00accharismatic(Romeo)",
                    "negation": true
                },
                {
                    "id": 0,
                    "subject": "Romeo",
                    "text": "Romeo is not cunning.",
                    "fol": "\u00acp_0(Romeo)",
                    "str_fol": "\u00accunning(Romeo)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "If Romeo is either charismatic or cunning (but not both), then he is beloved.",
                    "fol": "(p_7(Romeo) \u2295 p_0(Romeo)) \u2192 p_8(Romeo)",
                    "str_fol": "(charismatic(Romeo) \u2295 cunning(Romeo)) \u2192 beloved(Romeo)"
                }
            ],
            "conclusion": null
        }
    ],
    "proof_trace": null,
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "UNCERTAIN",
            "Edited Assumptions": "p_5(Romeo)\n\u00acp_6(Romeo)\n\u00acp_3(Romeo)\np_2(Romeo)\n\u00acp_4(Romeo)\n\u00acp_1(Romeo)\n\u00acp_0(Romeo)\n(p_12(Romeo) \u2295 p_5(Romeo)) \u2192 p_6(Romeo)\n(p_12(Romeo) \u2227 p_11(Romeo)) \u2192 p_3(Romeo)\n\u2200x ((p_9(x) \u2227 p_2(x)) \u2192 p_11(x))\n(p_4(Romeo) \u2295 p_10(Romeo)) \u2192 p_1(Romeo)\n\u2200x (p_7(x) \u2192 (p_9(x) \u2228 p_10(x)))\n(p_7(Romeo) \u2295 p_0(Romeo)) \u2192 p_8(Romeo)",
            "Initial Goal": "\u00acp_8(Romeo)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Romeo).",
                    "-p_6(Romeo).",
                    "-p_3(Romeo).",
                    "p_2(Romeo).",
                    "-p_4(Romeo).",
                    "-p_1(Romeo).",
                    "-p_0(Romeo).",
                    "(-(p_12(Romeo) <-> p_5(Romeo))) -> p_6(Romeo).",
                    "(p_12(Romeo) & p_11(Romeo)) -> p_3(Romeo).",
                    "all x ((p_9(x) & p_2(x)) -> p_11(x)).",
                    "(-(p_4(Romeo) <-> p_10(Romeo))) -> p_1(Romeo).",
                    "all x (p_7(x) -> (p_9(x) | p_10(x))).",
                    "(-(p_7(Romeo) <-> p_0(Romeo))) -> p_8(Romeo).",
                    "-p_9(Romeo).",
                    "p_8(Romeo) -> p_7(Romeo)."
                ],
                "formulas(goals)": [
                    "-p_8(Romeo)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "\u00acp_9(Romeo)"
                ],
                "added_rules": [
                    "p_8(Romeo) \u2192 p_7(Romeo)"
                ]
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_5(Romeo)\n\u00acp_6(Romeo)\n\u00acp_3(Romeo)\np_2(Romeo)\n\u00acp_4(Romeo)\n\u00acp_1(Romeo)\n\u00acp_0(Romeo)\n(p_12(Romeo) \u2295 p_5(Romeo)) \u2192 p_6(Romeo)\n(p_12(Romeo) \u2227 p_11(Romeo)) \u2192 p_3(Romeo)\n\u2200x ((p_9(x) \u2227 p_2(x)) \u2192 p_11(x))\n(p_4(Romeo) \u2295 p_10(Romeo)) \u2192 p_1(Romeo)\n\u2200x (p_7(x) \u2192 (p_9(x) \u2228 p_10(x)))\n(p_7(Romeo) \u2295 p_0(Romeo)) \u2192 p_8(Romeo)\n\u00acp_7(Romeo) \u2192 \u00acp_8(Romeo)",
            "Initial Goal": "\u00acp_8(Romeo)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Romeo)",
                    "-p_6(Romeo)",
                    "-p_3(Romeo)",
                    "p_2(Romeo)",
                    "-p_4(Romeo)",
                    "-p_1(Romeo)",
                    "-p_0(Romeo)",
                    "(-(p_12(Romeo) <-> p_5(Romeo))) -> p_6(Romeo)",
                    "(p_12(Romeo) & p_11(Romeo)) -> p_3(Romeo)",
                    "all x ((p_9(x) & p_2(x)) -> p_11(x))",
                    "(-(p_4(Romeo) <-> p_10(Romeo))) -> p_1(Romeo)",
                    "all x (p_7(x) -> (p_9(x) | p_10(x)))",
                    "(-(p_7(Romeo) <-> p_0(Romeo))) -> p_8(Romeo)",
                    "-p_7(Romeo) -> -p_8(Romeo)"
                ],
                "formulas(goals)": [
                    "-p_8(Romeo)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "\u00acp_7(Romeo) \u2192 \u00acp_8(Romeo)"
                ]
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_5(Romeo)\n\u00acp_6(Romeo)\n\u00acp_3(Romeo)\np_2(Romeo)\n\u00acp_4(Romeo)\n\u00acp_1(Romeo)\n\u00acp_0(Romeo)\n(p_12(Romeo) \u2295 p_5(Romeo)) \u2192 p_6(Romeo)\n(p_12(Romeo) \u2227 p_11(Romeo)) \u2192 p_3(Romeo)\n\u2200x ((p_9(x) \u2227 p_2(x)) \u2192 p_11(x))\n(p_4(Romeo) \u2295 p_10(Romeo)) \u2192 p_1(Romeo)\n\u2200x (p_7(x) \u2192 (p_9(x) \u2228 p_10(x)))\n(p_7(Romeo) \u2295 p_0(Romeo)) \u2192 p_8(Romeo)\n\u00acp_7(Romeo) \u2192 \u00acp_8(Romeo)\np_8(Romeo) \u2194 p_7(Romeo)",
            "Initial Goal": "\u00acp_8(Romeo)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Romeo)",
                    "-p_6(Romeo)",
                    "-p_3(Romeo)",
                    "p_2(Romeo)",
                    "-p_4(Romeo)",
                    "-p_1(Romeo)",
                    "-p_0(Romeo)",
                    "(-(p_12(Romeo) <-> p_5(Romeo))) -> p_6(Romeo)",
                    "(p_12(Romeo) & p_11(Romeo)) -> p_3(Romeo)",
                    "all x ((p_9(x) & p_2(x)) -> p_11(x))",
                    "(-(p_4(Romeo) <-> p_10(Romeo))) -> p_1(Romeo)",
                    "all x (p_7(x) -> (p_9(x) | p_10(x)))",
                    "(-(p_7(Romeo) <-> p_0(Romeo))) -> p_8(Romeo)",
                    "-p_7(Romeo) -> -p_8(Romeo)",
                    "p_8(Romeo) <-> p_7(Romeo)"
                ],
                "formulas(goals)": [
                    "-p_8(Romeo)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "p_8(Romeo) \u2194 p_7(Romeo)"
                ]
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_5(Romeo)\n\u00acp_6(Romeo)\n\u00acp_3(Romeo)\np_2(Romeo)\n\u00acp_4(Romeo)\n\u00acp_1(Romeo)\n\u00acp_0(Romeo)\n(p_12(Romeo) \u2295 p_5(Romeo)) \u2192 p_6(Romeo)\n(p_12(Romeo) \u2227 p_11(Romeo)) \u2192 p_3(Romeo)\n\u2200x ((p_9(x) \u2227 p_2(x)) \u2192 p_11(x))\n(p_4(Romeo) \u2295 p_10(Romeo)) \u2192 p_1(Romeo)\n\u2200x (p_7(x) \u2192 (p_9(x) \u2228 p_10(x)))\n(p_7(Romeo) \u2295 p_0(Romeo)) \u2192 p_8(Romeo)\n\u00acp_7(Romeo) \u2192 \u00acp_8(Romeo)\np_8(Romeo) \u2194 p_7(Romeo)\n\u00acp_10(Romeo)",
            "Initial Goal": "\u00acp_8(Romeo)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Romeo)",
                    "-p_6(Romeo)",
                    "-p_3(Romeo)",
                    "p_2(Romeo)",
                    "-p_4(Romeo)",
                    "-p_1(Romeo)",
                    "-p_0(Romeo)",
                    "(-(p_12(Romeo) <-> p_5(Romeo))) -> p_6(Romeo)",
                    "(p_12(Romeo) & p_11(Romeo)) -> p_3(Romeo)",
                    "all x ((p_9(x) & p_2(x)) -> p_11(x))",
                    "(-(p_4(Romeo) <-> p_10(Romeo))) -> p_1(Romeo)",
                    "all x (p_7(x) -> (p_9(x) | p_10(x)))",
                    "(-(p_7(Romeo) <-> p_0(Romeo))) -> p_8(Romeo)",
                    "-p_7(Romeo) -> -p_8(Romeo)",
                    "p_8(Romeo) <-> p_7(Romeo)",
                    "-p_10(Romeo)"
                ],
                "formulas(goals)": [
                    "-p_8(Romeo)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "\u00acp_10(Romeo)"
                ],
                "added_rules": []
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_5(Romeo)\n\u00acp_3(Romeo)\np_2(Romeo)\n\u00acp_4(Romeo)\n\u00acp_1(Romeo)\n(p_12(Romeo) \u2295 p_5(Romeo)) \u2192 p_6(Romeo)\n(p_12(Romeo) \u2227 p_11(Romeo)) \u2192 p_3(Romeo)\n\u2200x ((p_9(x) \u2227 p_2(x)) \u2192 p_11(x))\n(p_4(Romeo) \u2295 p_10(Romeo)) \u2192 p_1(Romeo)\n\u2200x (p_7(x) \u2192 (p_9(x) \u2228 p_10(x)))\n(p_7(Romeo) \u2295 p_0(Romeo)) \u2192 p_8(Romeo)\n\u00acp_7(Romeo) \u2192 \u00acp_8(Romeo)\np_8(Romeo) \u2194 p_7(Romeo)\n\u00acp_10(Romeo)\np_6(Romeo)\np_0(Romeo)",
            "Initial Goal": "\u00acp_8(Romeo)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Romeo).",
                    "-p_3(Romeo).",
                    "p_2(Romeo).",
                    "-p_4(Romeo).",
                    "-p_1(Romeo).",
                    "(-(p_12(Romeo) <-> p_5(Romeo))) -> p_6(Romeo).",
                    "(p_12(Romeo) & p_11(Romeo)) -> p_3(Romeo).",
                    "all x ((p_9(x) & p_2(x)) -> p_11(x)).",
                    "(-(p_4(Romeo) <-> p_10(Romeo))) -> p_1(Romeo).",
                    "all x (p_7(x) -> (p_9(x) | p_10(x))).",
                    "(-(p_7(Romeo) <-> p_0(Romeo))) -> p_8(Romeo).",
                    "-p_7(Romeo) -> -p_8(Romeo).",
                    "p_8(Romeo) <-> p_7(Romeo).",
                    "-p_10(Romeo).",
                    "p_6(Romeo).",
                    "p_0(Romeo)."
                ],
                "formulas(goals)": [
                    "-(-p_8(Romeo))."
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "\u00acp_6(Romeo)",
                    "\u00acp_0(Romeo)"
                ],
                "removed_rules": [],
                "added_facts": [
                    "p_6(Romeo)",
                    "p_0(Romeo)"
                ],
                "added_rules": []
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_5(Romeo)\n\u00acp_3(Romeo)\np_2(Romeo)\n\u00acp_4(Romeo)\n\u00acp_1(Romeo)\n(p_12(Romeo) \u2295 p_5(Romeo)) \u2192 p_6(Romeo)\n(p_12(Romeo) \u2227 p_11(Romeo)) \u2192 p_3(Romeo)\n\u2200x ((p_9(x) \u2227 p_2(x)) \u2192 p_11(x))\n(p_4(Romeo) \u2295 p_10(Romeo)) \u2192 p_1(Romeo)\n\u2200x (p_7(x) \u2192 (p_9(x) \u2228 p_10(x)))\n\u00acp_7(Romeo) \u2192 p_8(Romeo)\n\u00acp_7(Romeo) \u2192 \u00acp_8(Romeo)\np_8(Romeo) \u2194 p_7(Romeo)\n\u00acp_10(Romeo)\np_6(Romeo)\np_0(Romeo)",
            "Initial Goal": "\u00acp_8(Romeo)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Romeo).",
                    "-p_3(Romeo).",
                    "p_2(Romeo).",
                    "-p_4(Romeo).",
                    "-p_1(Romeo).",
                    "(-(p_12(Romeo) <-> p_5(Romeo))) -> p_6(Romeo).",
                    "(p_12(Romeo) & p_11(Romeo)) -> p_3(Romeo).",
                    "all x ((p_9(x) & p_2(x)) -> p_11(x)).",
                    "(-(p_4(Romeo) <-> p_10(Romeo))) -> p_1(Romeo).",
                    "all x (p_7(x) -> (p_9(x) | p_10(x))).",
                    "-p_7(Romeo) -> p_8(Romeo).",
                    "-p_7(Romeo) -> -p_8(Romeo).",
                    "p_8(Romeo) <-> p_7(Romeo).",
                    "-p_10(Romeo).",
                    "p_6(Romeo).",
                    "p_0(Romeo)."
                ],
                "formulas(goals)": [
                    "-(-p_8(Romeo))."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "(p_7(Romeo) \u2295 p_0(Romeo)) \u2192 p_8(Romeo)"
                ],
                "added_facts": [],
                "added_rules": [
                    "\u00acp_7(Romeo) \u2192 p_8(Romeo)"
                ]
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_5(Romeo)\n\u00acp_3(Romeo)\np_2(Romeo)\n\u00acp_4(Romeo)\n\u00acp_1(Romeo)\n(p_12(Romeo) \u2295 p_5(Romeo)) \u2192 (p_6(Romeo) \u2228 \u00acp_6(Romeo))\n(p_12(Romeo) \u2227 p_11(Romeo)) \u2192 p_3(Romeo)\n\u2200x ((p_9(x) \u2227 p_2(x)) \u2192 p_11(x))\n(p_4(Romeo) \u2295 p_10(Romeo)) \u2192 p_1(Romeo)\n\u2200x (p_7(x) \u2192 (p_9(x) \u2228 p_10(x)))\n\u00acp_7(Romeo) \u2192 p_8(Romeo)\n\u00acp_7(Romeo) \u2192 \u00acp_8(Romeo)\np_8(Romeo) \u2194 p_7(Romeo)\n\u00acp_10(Romeo)\np_6(Romeo)\np_0(Romeo)\np_7(Romeo)\np_9(Romeo)",
            "Initial Goal": "\u00acp_8(Romeo)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Romeo).",
                    "-p_3(Romeo).",
                    "p_2(Romeo).",
                    "-p_4(Romeo).",
                    "-p_1(Romeo).",
                    "(-(p_12(Romeo) <-> p_5(Romeo))) -> (p_6(Romeo) | -p_6(Romeo)).",
                    "(p_12(Romeo) & p_11(Romeo)) -> p_3(Romeo).",
                    "all x ((p_9(x) & p_2(x)) -> p_11(x)).",
                    "(-(p_4(Romeo) <-> p_10(Romeo))) -> p_1(Romeo).",
                    "all x (p_7(x) -> (p_9(x) | p_10(x))).",
                    "-p_7(Romeo) -> p_8(Romeo).",
                    "-p_7(Romeo) -> -p_8(Romeo).",
                    "p_8(Romeo) <-> p_7(Romeo).",
                    "-p_10(Romeo).",
                    "p_6(Romeo).",
                    "p_0(Romeo).",
                    "p_7(Romeo).",
                    "p_9(Romeo)."
                ],
                "formulas(goals)": [
                    "p_8(Romeo)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_7(Romeo)",
                    "p_9(Romeo)"
                ],
                "added_rules": [
                    "(p_12(Romeo) \u2295 p_5(Romeo)) \u2192 (p_6(Romeo) \u2228 \u00acp_6(Romeo))"
                ]
            }
        }
    ]
}