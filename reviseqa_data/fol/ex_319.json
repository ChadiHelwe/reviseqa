{
    "background_story": "Asher was a free-spirited food truck owner with a passion for creating the perfect cheeseburger. Growing up in a family of restaurateurs, he learned the art of cooking from a young age. After years of experimenting with different recipes, Asher finally found his signature blend. His cheeseburger, topped with caramelized onions, melted cheddar, and a special sauce, quickly gained a cult following. People would line up for hours to taste Asher's masterpiece, which he lovingly referred to as the 'Heartstopper.' As his food truck's popularity soared, Asher became a local celebrity, known for his warm smile and generous portions. His love for the humble cheeseburger brought joy to countless people, making Asher's food truck a beloved staple in the community.",
    "predicates": [
        {
            "id": 0,
            "name": "makes_people_smile"
        },
        {
            "id": 1,
            "name": "brings_joy"
        },
        {
            "id": 2,
            "name": "serves_others"
        },
        {
            "id": 3,
            "name": "is_talented"
        },
        {
            "id": 4,
            "name": "is_innovative"
        },
        {
            "id": 5,
            "name": "achieves_success"
        },
        {
            "id": 6,
            "name": "reaches_potential"
        },
        {
            "id": 7,
            "name": "learns_fast"
        },
        {
            "id": 8,
            "name": "stays_focused"
        },
        {
            "id": 9,
            "name": "creative"
        },
        {
            "id": 10,
            "name": "generous"
        },
        {
            "id": 11,
            "name": "beloved"
        },
        {
            "id": 12,
            "name": "is_community_oriented"
        },
        {
            "id": 13,
            "name": "is_passionate"
        },
        {
            "id": 14,
            "name": "is_driven"
        },
        {
            "id": 15,
            "name": "sets_goals"
        },
        {
            "id": 16,
            "name": "works_hard"
        },
        {
            "id": 17,
            "name": "cooks_well"
        },
        {
            "id": 18,
            "name": "shares_food"
        },
        {
            "id": 19,
            "name": "cares_for_others"
        },
        {
            "id": 20,
            "name": "thinks_outside"
        },
        {
            "id": 21,
            "name": "tries_new_things"
        },
        {
            "id": 22,
            "name": "loves_cooking"
        },
        {
            "id": 23,
            "name": "tries_new_recipes"
        },
        {
            "id": 24,
            "name": "takes_risks"
        },
        {
            "id": 25,
            "name": "eats_healthy"
        },
        {
            "id": 26,
            "name": "stays_organized"
        },
        {
            "id": 27,
            "name": "runs_business"
        },
        {
            "id": 28,
            "name": "has_vision"
        }
    ],
    "subject_name": "Asher",
    "subject_category": "human",
    "keyword": "cheeseburger",
    "all_facts": [
        {
            "id": 0,
            "subject": "Asher",
            "text": "Asher makes people smile.",
            "fol": "p_0(Asher)",
            "str_fol": "makes_people_smile(Asher)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Asher",
            "text": "Asher does not bring joy.",
            "fol": "\u00acp_1(Asher)",
            "str_fol": "\u00acbrings_joy(Asher)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Asher",
            "text": "Asher does not serve others.",
            "fol": "\u00acp_2(Asher)",
            "str_fol": "\u00acserves_others(Asher)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Asher",
            "text": "Asher is not talented.",
            "fol": "\u00acp_3(Asher)",
            "str_fol": "\u00acis_talented(Asher)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Asher",
            "text": "Asher is not innovative.",
            "fol": "\u00acp_4(Asher)",
            "str_fol": "\u00acis_innovative(Asher)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Asher",
            "text": "Asher does not achieve success.",
            "fol": "\u00acp_5(Asher)",
            "str_fol": "\u00acachieves_success(Asher)",
            "negation": true
        },
        {
            "id": 6,
            "subject": "Asher",
            "text": "Asher does not reach his potential.",
            "fol": "\u00acp_6(Asher)",
            "str_fol": "\u00acreaches_potential(Asher)",
            "negation": true
        },
        {
            "id": 7,
            "subject": "Asher",
            "text": "Asher learns fast.",
            "fol": "p_7(Asher)",
            "str_fol": "learns_fast(Asher)",
            "negation": false
        },
        {
            "id": 8,
            "subject": "Asher",
            "text": "Asher stays focused.",
            "fol": "p_8(Asher)",
            "str_fol": "stays_focused(Asher)",
            "negation": false
        },
        {
            "id": 9,
            "subject": "Asher",
            "text": "Asher does not set goals.",
            "fol": "\u00acp_15(Asher)",
            "str_fol": "\u00acsets_goals(Asher)",
            "negation": true
        },
        {
            "id": 10,
            "subject": "Asher",
            "text": "Asher is not driven.",
            "fol": "\u00acp_14(Asher)",
            "str_fol": "\u00acis_driven(Asher)",
            "negation": true
        },
        {
            "id": 11,
            "subject": "Asher",
            "text": "Asher is not passionate.",
            "fol": "\u00acp_13(Asher)",
            "str_fol": "\u00acis_passionate(Asher)",
            "negation": true
        },
        {
            "id": 12,
            "subject": "Asher",
            "text": "Asher is not community-oriented.",
            "fol": "\u00acp_12(Asher)",
            "str_fol": "\u00acis_community_oriented(Asher)",
            "negation": true
        },
        {
            "id": 13,
            "subject": "Asher",
            "text": "Asher is beloved.",
            "fol": "p_11(Asher)",
            "str_fol": "beloved(Asher)",
            "negation": false
        },
        {
            "id": 14,
            "subject": "Asher",
            "text": "Asher is generous.",
            "fol": "p_10(Asher)",
            "str_fol": "generous(Asher)",
            "negation": false
        }
    ],
    "context_facts": [
        {
            "id": 7,
            "subject": "Asher",
            "text": "Asher learns fast.",
            "fol": "p_7(Asher)",
            "str_fol": "learns_fast(Asher)",
            "negation": false
        },
        {
            "id": 8,
            "subject": "Asher",
            "text": "Asher stays focused.",
            "fol": "p_8(Asher)",
            "str_fol": "stays_focused(Asher)",
            "negation": false
        },
        {
            "id": 6,
            "subject": "Asher",
            "text": "Asher does not reach his potential.",
            "fol": "\u00acp_6(Asher)",
            "str_fol": "\u00acreaches_potential(Asher)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Asher",
            "text": "Asher does not achieve success.",
            "fol": "\u00acp_5(Asher)",
            "str_fol": "\u00acachieves_success(Asher)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Asher",
            "text": "Asher is not innovative.",
            "fol": "\u00acp_4(Asher)",
            "str_fol": "\u00acis_innovative(Asher)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Asher",
            "text": "Asher is not talented.",
            "fol": "\u00acp_3(Asher)",
            "str_fol": "\u00acis_talented(Asher)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Asher",
            "text": "Asher does not serve others.",
            "fol": "\u00acp_2(Asher)",
            "str_fol": "\u00acserves_others(Asher)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Asher",
            "text": "Asher does not bring joy.",
            "fol": "\u00acp_1(Asher)",
            "str_fol": "\u00acbrings_joy(Asher)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Asher",
            "text": "Asher makes people smile.",
            "fol": "p_0(Asher)",
            "str_fol": "makes_people_smile(Asher)",
            "negation": false
        }
    ],
    "context_rules": [
        {
            "id": 7,
            "text": "If Asher works hard, then he learns fast and stays focused.",
            "fol": "p_16(Asher) \u2192 (p_7(Asher) \u2227 p_8(Asher))",
            "str_fol": "works_hard(Asher) \u2192 (learns_fast(Asher) \u2227 stays_focused(Asher))"
        },
        {
            "id": 6,
            "text": "If Asher sets goals or works hard, then he can reach his potential.",
            "fol": "(p_15(Asher) \u2228 p_16(Asher)) \u2192 p_6(Asher)",
            "str_fol": "(sets_goals(Asher) \u2228 works_hard(Asher)) \u2192 reaches_potential(Asher)"
        },
        {
            "id": 5,
            "text": "If Asher is driven or sets goals, then he can achieve success.",
            "fol": "(p_14(Asher) \u2228 p_15(Asher)) \u2192 p_5(Asher)",
            "str_fol": "(is_driven(Asher) \u2228 sets_goals(Asher)) \u2192 achieves_success(Asher)"
        },
        {
            "id": 4,
            "text": "If Asher is passionate, then he is either driven or innovative, but not both.",
            "fol": "p_13(Asher) \u2192 (p_14(Asher) \u2295 p_4(Asher))",
            "str_fol": "is_passionate(Asher) \u2192 (is_driven(Asher) \u2295 is_innovative(Asher))"
        },
        {
            "id": 3,
            "text": "If Asher is passionate, then he is either talented or creative, but not both.",
            "fol": "p_13(Asher) \u2192 (p_3(Asher) \u2295 p_9(Asher))",
            "str_fol": "is_passionate(Asher) \u2192 (is_talented(Asher) \u2295 creative(Asher))"
        },
        {
            "id": 2,
            "text": "If Asher is either community-oriented or serves others (but not both), then he brings joy.",
            "fol": "(p_12(Asher) \u2295 p_2(Asher)) \u2192 p_1(Asher)",
            "str_fol": "(is_community_oriented(Asher) \u2295 serves_others(Asher)) \u2192 brings_joy(Asher)"
        },
        {
            "id": 1,
            "text": "If Asher is either beloved or makes people smile (but not both), then he is community-oriented.",
            "fol": "(p_11(Asher) \u2295 p_0(Asher)) \u2192 p_12(Asher)",
            "str_fol": "(beloved(Asher) \u2295 makes_people_smile(Asher)) \u2192 is_community_oriented(Asher)"
        },
        {
            "id": 0,
            "text": "If Asher is either creative or generous (but not both), then he is beloved.",
            "fol": "(p_9(Asher) \u2295 p_10(Asher)) \u2192 p_11(Asher)",
            "str_fol": "(creative(Asher) \u2295 generous(Asher)) \u2192 beloved(Asher)"
        }
    ],
    "context": [
        {
            "id": 7,
            "subject": "Asher",
            "text": "Asher learns fast.",
            "fol": "p_7(Asher)",
            "str_fol": "learns_fast(Asher)",
            "negation": false
        },
        {
            "id": 8,
            "subject": "Asher",
            "text": "Asher stays focused.",
            "fol": "p_8(Asher)",
            "str_fol": "stays_focused(Asher)",
            "negation": false
        },
        {
            "id": 6,
            "subject": "Asher",
            "text": "Asher does not reach his potential.",
            "fol": "\u00acp_6(Asher)",
            "str_fol": "\u00acreaches_potential(Asher)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Asher",
            "text": "Asher does not achieve success.",
            "fol": "\u00acp_5(Asher)",
            "str_fol": "\u00acachieves_success(Asher)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Asher",
            "text": "Asher is not innovative.",
            "fol": "\u00acp_4(Asher)",
            "str_fol": "\u00acis_innovative(Asher)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Asher",
            "text": "Asher is not talented.",
            "fol": "\u00acp_3(Asher)",
            "str_fol": "\u00acis_talented(Asher)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Asher",
            "text": "Asher does not serve others.",
            "fol": "\u00acp_2(Asher)",
            "str_fol": "\u00acserves_others(Asher)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Asher",
            "text": "Asher does not bring joy.",
            "fol": "\u00acp_1(Asher)",
            "str_fol": "\u00acbrings_joy(Asher)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Asher",
            "text": "Asher makes people smile.",
            "fol": "p_0(Asher)",
            "str_fol": "makes_people_smile(Asher)",
            "negation": false
        },
        {
            "id": 7,
            "text": "If Asher works hard, then he learns fast and stays focused.",
            "fol": "p_16(Asher) \u2192 (p_7(Asher) \u2227 p_8(Asher))",
            "str_fol": "works_hard(Asher) \u2192 (learns_fast(Asher) \u2227 stays_focused(Asher))"
        },
        {
            "id": 6,
            "text": "If Asher sets goals or works hard, then he can reach his potential.",
            "fol": "(p_15(Asher) \u2228 p_16(Asher)) \u2192 p_6(Asher)",
            "str_fol": "(sets_goals(Asher) \u2228 works_hard(Asher)) \u2192 reaches_potential(Asher)"
        },
        {
            "id": 5,
            "text": "If Asher is driven or sets goals, then he can achieve success.",
            "fol": "(p_14(Asher) \u2228 p_15(Asher)) \u2192 p_5(Asher)",
            "str_fol": "(is_driven(Asher) \u2228 sets_goals(Asher)) \u2192 achieves_success(Asher)"
        },
        {
            "id": 4,
            "text": "If Asher is passionate, then he is either driven or innovative, but not both.",
            "fol": "p_13(Asher) \u2192 (p_14(Asher) \u2295 p_4(Asher))",
            "str_fol": "is_passionate(Asher) \u2192 (is_driven(Asher) \u2295 is_innovative(Asher))"
        },
        {
            "id": 3,
            "text": "If Asher is passionate, then he is either talented or creative, but not both.",
            "fol": "p_13(Asher) \u2192 (p_3(Asher) \u2295 p_9(Asher))",
            "str_fol": "is_passionate(Asher) \u2192 (is_talented(Asher) \u2295 creative(Asher))"
        },
        {
            "id": 2,
            "text": "If Asher is either community-oriented or serves others (but not both), then he brings joy.",
            "fol": "(p_12(Asher) \u2295 p_2(Asher)) \u2192 p_1(Asher)",
            "str_fol": "(is_community_oriented(Asher) \u2295 serves_others(Asher)) \u2192 brings_joy(Asher)"
        },
        {
            "id": 1,
            "text": "If Asher is either beloved or makes people smile (but not both), then he is community-oriented.",
            "fol": "(p_11(Asher) \u2295 p_0(Asher)) \u2192 p_12(Asher)",
            "str_fol": "(beloved(Asher) \u2295 makes_people_smile(Asher)) \u2192 is_community_oriented(Asher)"
        },
        {
            "id": 0,
            "text": "If Asher is either creative or generous (but not both), then he is beloved.",
            "fol": "(p_9(Asher) \u2295 p_10(Asher)) \u2192 p_11(Asher)",
            "str_fol": "(creative(Asher) \u2295 generous(Asher)) \u2192 beloved(Asher)"
        }
    ],
    "context_fol": "p_7(Asher)\np_8(Asher)\n\u00acp_6(Asher)\n\u00acp_5(Asher)\n\u00acp_4(Asher)\n\u00acp_3(Asher)\n\u00acp_2(Asher)\n\u00acp_1(Asher)\np_0(Asher)\np_16(Asher) \u2192 (p_7(Asher) \u2227 p_8(Asher))\n(p_15(Asher) \u2228 p_16(Asher)) \u2192 p_6(Asher)\n(p_14(Asher) \u2228 p_15(Asher)) \u2192 p_5(Asher)\np_13(Asher) \u2192 (p_14(Asher) \u2295 p_4(Asher))\np_13(Asher) \u2192 (p_3(Asher) \u2295 p_9(Asher))\n(p_12(Asher) \u2295 p_2(Asher)) \u2192 p_1(Asher)\n(p_11(Asher) \u2295 p_0(Asher)) \u2192 p_12(Asher)\n(p_9(Asher) \u2295 p_10(Asher)) \u2192 p_11(Asher)",
    "conclusion": {
        "id": 14,
        "subject": "Asher",
        "text": "Asher is generous.",
        "fol": "p_10(Asher)",
        "str_fol": "generous(Asher)",
        "negation": false
    },
    "initial_answer": "Uncertain",
    "initial_goal": "p_10(Asher)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 7,
                    "subject": "Asher",
                    "text": "Asher learns fast.",
                    "fol": "p_7(Asher)",
                    "str_fol": "learns_fast(Asher)",
                    "negation": false
                },
                {
                    "id": 8,
                    "subject": "Asher",
                    "text": "Asher stays focused.",
                    "fol": "p_8(Asher)",
                    "str_fol": "stays_focused(Asher)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 7,
                    "text": "If Asher works hard, then he learns fast and stays focused.",
                    "fol": "p_16(Asher) \u2192 (p_7(Asher) \u2227 p_8(Asher))",
                    "str_fol": "works_hard(Asher) \u2192 (learns_fast(Asher) \u2227 stays_focused(Asher))"
                }
            ],
            "conclusion": null
        },
        {
            "facts": [
                {
                    "id": 6,
                    "subject": "Asher",
                    "text": "Asher does not reach his potential.",
                    "fol": "\u00acp_6(Asher)",
                    "str_fol": "\u00acreaches_potential(Asher)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 6,
                    "text": "If Asher sets goals or works hard, then he can reach his potential.",
                    "fol": "(p_15(Asher) \u2228 p_16(Asher)) \u2192 p_6(Asher)",
                    "str_fol": "(sets_goals(Asher) \u2228 works_hard(Asher)) \u2192 reaches_potential(Asher)"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Asher",
                "text": "Asher does not set goals.",
                "fol": "\u00acp_15(Asher)",
                "str_fol": "\u00acsets_goals(Asher)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 9,
                    "subject": "Asher",
                    "text": "Asher does not set goals.",
                    "fol": "\u00acp_15(Asher)",
                    "str_fol": "\u00acsets_goals(Asher)",
                    "negation": true
                },
                {
                    "id": 5,
                    "subject": "Asher",
                    "text": "Asher does not achieve success.",
                    "fol": "\u00acp_5(Asher)",
                    "str_fol": "\u00acachieves_success(Asher)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "If Asher is driven or sets goals, then he can achieve success.",
                    "fol": "(p_14(Asher) \u2228 p_15(Asher)) \u2192 p_5(Asher)",
                    "str_fol": "(is_driven(Asher) \u2228 sets_goals(Asher)) \u2192 achieves_success(Asher)"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Asher",
                "text": "Asher is not driven.",
                "fol": "\u00acp_14(Asher)",
                "str_fol": "\u00acis_driven(Asher)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 10,
                    "subject": "Asher",
                    "text": "Asher is not driven.",
                    "fol": "\u00acp_14(Asher)",
                    "str_fol": "\u00acis_driven(Asher)",
                    "negation": true
                },
                {
                    "id": 4,
                    "subject": "Asher",
                    "text": "Asher is not innovative.",
                    "fol": "\u00acp_4(Asher)",
                    "str_fol": "\u00acis_innovative(Asher)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "If Asher is passionate, then he is either driven or innovative, but not both.",
                    "fol": "p_13(Asher) \u2192 (p_14(Asher) \u2295 p_4(Asher))",
                    "str_fol": "is_passionate(Asher) \u2192 (is_driven(Asher) \u2295 is_innovative(Asher))"
                }
            ],
            "conclusion": {
                "id": 11,
                "subject": "Asher",
                "text": "Asher is not passionate.",
                "fol": "\u00acp_13(Asher)",
                "str_fol": "\u00acis_passionate(Asher)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 11,
                    "subject": "Asher",
                    "text": "Asher is not passionate.",
                    "fol": "\u00acp_13(Asher)",
                    "str_fol": "\u00acis_passionate(Asher)",
                    "negation": true
                },
                {
                    "id": 3,
                    "subject": "Asher",
                    "text": "Asher is not talented.",
                    "fol": "\u00acp_3(Asher)",
                    "str_fol": "\u00acis_talented(Asher)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "If Asher is passionate, then he is either talented or creative, but not both.",
                    "fol": "p_13(Asher) \u2192 (p_3(Asher) \u2295 p_9(Asher))",
                    "str_fol": "is_passionate(Asher) \u2192 (is_talented(Asher) \u2295 creative(Asher))"
                }
            ],
            "conclusion": null
        },
        {
            "facts": [
                {
                    "id": 2,
                    "subject": "Asher",
                    "text": "Asher does not serve others.",
                    "fol": "\u00acp_2(Asher)",
                    "str_fol": "\u00acserves_others(Asher)",
                    "negation": true
                },
                {
                    "id": 1,
                    "subject": "Asher",
                    "text": "Asher does not bring joy.",
                    "fol": "\u00acp_1(Asher)",
                    "str_fol": "\u00acbrings_joy(Asher)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "If Asher is either community-oriented or serves others (but not both), then he brings joy.",
                    "fol": "(p_12(Asher) \u2295 p_2(Asher)) \u2192 p_1(Asher)",
                    "str_fol": "(is_community_oriented(Asher) \u2295 serves_others(Asher)) \u2192 brings_joy(Asher)"
                }
            ],
            "conclusion": {
                "id": 12,
                "subject": "Asher",
                "text": "Asher is not community-oriented.",
                "fol": "\u00acp_12(Asher)",
                "str_fol": "\u00acis_community_oriented(Asher)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 0,
                    "subject": "Asher",
                    "text": "Asher makes people smile.",
                    "fol": "p_0(Asher)",
                    "str_fol": "makes_people_smile(Asher)",
                    "negation": false
                },
                {
                    "id": 12,
                    "subject": "Asher",
                    "text": "Asher is not community-oriented.",
                    "fol": "\u00acp_12(Asher)",
                    "str_fol": "\u00acis_community_oriented(Asher)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "If Asher is either beloved or makes people smile (but not both), then he is community-oriented.",
                    "fol": "(p_11(Asher) \u2295 p_0(Asher)) \u2192 p_12(Asher)",
                    "str_fol": "(beloved(Asher) \u2295 makes_people_smile(Asher)) \u2192 is_community_oriented(Asher)"
                }
            ],
            "conclusion": {
                "id": 13,
                "subject": "Asher",
                "text": "Asher is beloved.",
                "fol": "p_11(Asher)",
                "str_fol": "beloved(Asher)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 13,
                    "subject": "Asher",
                    "text": "Asher is beloved.",
                    "fol": "p_11(Asher)",
                    "str_fol": "beloved(Asher)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "If Asher is either creative or generous (but not both), then he is beloved.",
                    "fol": "(p_9(Asher) \u2295 p_10(Asher)) \u2192 p_11(Asher)",
                    "str_fol": "(creative(Asher) \u2295 generous(Asher)) \u2192 beloved(Asher)"
                }
            ],
            "conclusion": null
        }
    ],
    "proof_trace": null,
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "UNCERTAIN",
            "Edited Assumptions": "p_7(Asher)\np_8(Asher)\n\u00acp_6(Asher)\n\u00acp_5(Asher)\n\u00acp_4(Asher)\n\u00acp_3(Asher)\n\u00acp_2(Asher)\n\u00acp_1(Asher)\np_0(Asher)\np_16(Asher) \u2192 (p_7(Asher) \u2227 p_8(Asher))\n(p_15(Asher) \u2228 p_16(Asher)) \u2192 p_6(Asher)\n(p_14(Asher) \u2228 p_15(Asher)) \u2192 p_5(Asher)\np_13(Asher) \u2192 (p_14(Asher) \u2295 p_4(Asher))\np_13(Asher) \u2192 (p_3(Asher) \u2295 p_9(Asher))\n(p_12(Asher) \u2295 p_2(Asher)) \u2192 p_1(Asher)\n(p_11(Asher) \u2295 p_0(Asher)) \u2192 p_12(Asher)\n(p_9(Asher) \u2295 p_10(Asher)) \u2192 p_11(Asher)",
            "Initial Goal": "p_10(Asher)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_7(Asher)",
                    "p_8(Asher)",
                    "-p_6(Asher)",
                    "-p_5(Asher)",
                    "-p_4(Asher)",
                    "-p_3(Asher)",
                    "-p_2(Asher)",
                    "-p_1(Asher)",
                    "p_0(Asher)",
                    "p_16(Asher) -> (p_7(Asher) & p_8(Asher))",
                    "(p_15(Asher) | p_16(Asher)) -> p_6(Asher)",
                    "(p_14(Asher) | p_15(Asher)) -> p_5(Asher)",
                    "p_13(Asher) -> (-(p_14(Asher) <-> p_4(Asher)))",
                    "p_13(Asher) -> (-(p_3(Asher) <-> p_9(Asher)))",
                    "(-(p_12(Asher) <-> p_2(Asher))) -> p_1(Asher)",
                    "(-(p_11(Asher) <-> p_0(Asher))) -> p_12(Asher)",
                    "(-(p_9(Asher) <-> p_10(Asher))) -> p_11(Asher)",
                    "(p_7(Asher) & p_8(Asher)) -> p_10(Asher)"
                ],
                "formulas(goals)": [
                    "p_10(Asher)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "(p_7(Asher) \u2227 p_8(Asher)) \u2192 p_10(Asher)"
                ]
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_7(Asher)\np_8(Asher)\n\u00acp_6(Asher)\n\u00acp_5(Asher)\n\u00acp_4(Asher)\n\u00acp_3(Asher)\n\u00acp_2(Asher)\n\u00acp_1(Asher)\np_0(Asher)\np_16(Asher) \u2192 (p_7(Asher) \u2227 p_8(Asher))\n(p_15(Asher) \u2228 p_16(Asher)) \u2192 p_6(Asher)\n(p_14(Asher) \u2228 p_15(Asher)) \u2192 p_5(Asher)\np_13(Asher) \u2192 (p_14(Asher) \u2295 p_4(Asher))\np_13(Asher) \u2192 (p_3(Asher) \u2295 p_9(Asher))\n(p_12(Asher) \u2295 p_2(Asher)) \u2192 p_1(Asher)\n(p_11(Asher) \u2295 p_0(Asher)) \u2192 p_12(Asher)\n(p_9(Asher) \u2295 p_10(Asher)) \u2192 p_11(Asher)\np_7(Asher) \u2227 p_8(Asher) \u2192 p_10(Asher)",
            "Initial Goal": "p_10(Asher)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_7(Asher)",
                    "p_8(Asher)",
                    "-p_6(Asher)",
                    "-p_5(Asher)",
                    "-p_4(Asher)",
                    "-p_3(Asher)",
                    "-p_2(Asher)",
                    "-p_1(Asher)",
                    "p_0(Asher)",
                    "p_16(Asher) -> (p_7(Asher) & p_8(Asher))",
                    "(p_15(Asher) | p_16(Asher)) -> p_6(Asher)",
                    "(p_14(Asher) | p_15(Asher)) -> p_5(Asher)",
                    "p_13(Asher) -> (-(p_14(Asher) <-> p_4(Asher)))",
                    "p_13(Asher) -> (-(p_3(Asher) <-> p_9(Asher)))",
                    "(-(p_12(Asher) <-> p_2(Asher))) -> p_1(Asher)",
                    "(-(p_11(Asher) <-> p_0(Asher))) -> p_12(Asher)",
                    "(-(p_9(Asher) <-> p_10(Asher))) -> p_11(Asher)",
                    "p_7(Asher) & p_8(Asher) -> p_10(Asher)"
                ],
                "formulas(goals)": [
                    "p_10(Asher)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "p_7(Asher) \u2227 p_8(Asher) \u2192 p_10(Asher)"
                ]
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_7(Asher)\np_8(Asher)\n\u00acp_6(Asher)\n\u00acp_5(Asher)\n\u00acp_4(Asher)\n\u00acp_3(Asher)\n\u00acp_2(Asher)\n\u00acp_1(Asher)\np_0(Asher)\np_16(Asher) \u2192 (p_7(Asher) \u2227 p_8(Asher))\n\u00acp_6(Asher) \u2192 (\u00acp_15(Asher) \u2227 \u00acp_16(Asher))\n(p_14(Asher) \u2228 p_15(Asher)) \u2192 p_5(Asher)\np_13(Asher) \u2192 (p_14(Asher) \u2295 p_4(Asher))\np_13(Asher) \u2192 (p_3(Asher) \u2295 p_9(Asher))\n(p_12(Asher) \u2295 p_2(Asher)) \u2192 p_1(Asher)\n(p_11(Asher) \u2295 p_0(Asher)) \u2192 p_12(Asher)\n(p_9(Asher) \u2295 p_10(Asher)) \u2192 p_11(Asher)\n\u00acp_10(Asher) \u2192 \u00ac(p_7(Asher) \u2227 p_8(Asher))\np_10(Asher)\np_7(Asher) \u2228 \u00acp_7(Asher)",
            "Initial Goal": "p_10(Asher)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_7(Asher)",
                    "p_8(Asher)",
                    "-p_6(Asher)",
                    "-p_5(Asher)",
                    "-p_4(Asher)",
                    "-p_3(Asher)",
                    "-p_2(Asher)",
                    "-p_1(Asher)",
                    "p_0(Asher)",
                    "p_16(Asher) -> (p_7(Asher) & p_8(Asher))",
                    "-p_6(Asher) -> (-p_15(Asher) & -p_16(Asher))",
                    "(p_14(Asher) | p_15(Asher)) -> p_5(Asher)",
                    "p_13(Asher) -> (-(p_14(Asher) <-> p_4(Asher)))",
                    "p_13(Asher) -> (-(p_3(Asher) <-> p_9(Asher)))",
                    "(-(p_12(Asher) <-> p_2(Asher))) -> p_1(Asher)",
                    "(-(p_11(Asher) <-> p_0(Asher))) -> p_12(Asher)",
                    "(-(p_9(Asher) <-> p_10(Asher))) -> p_11(Asher)",
                    "-p_10(Asher) -> (-p_7(Asher) | -p_8(Asher))",
                    "p_10(Asher)",
                    "p_7(Asher) | -p_7(Asher)"
                ],
                "formulas(goals)": [
                    "p_10(Asher)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "(p_15(Asher) \u2228 p_16(Asher)) \u2192 p_6(Asher)",
                    "p_7(Asher) \u2227 p_8(Asher) \u2192 p_10(Asher)"
                ],
                "added_facts": [
                    "p_10(Asher)",
                    "p_7(Asher) \u2228 \u00acp_7(Asher)"
                ],
                "added_rules": [
                    "\u00acp_6(Asher) \u2192 (\u00acp_15(Asher) \u2227 \u00acp_16(Asher))",
                    "\u00acp_10(Asher) \u2192 \u00ac(p_7(Asher) \u2227 p_8(Asher))"
                ]
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_7(Asher)\np_8(Asher)\n\u00acp_6(Asher)\n\u00acp_5(Asher)\n\u00acp_4(Asher)\n\u00acp_3(Asher)\n\u00acp_2(Asher)\n\u00acp_1(Asher)\np_0(Asher)\np_16(Asher) \u2192 (p_7(Asher) \u2227 p_8(Asher))\n\u00acp_6(Asher) \u2192 (\u00acp_15(Asher) \u2227 \u00acp_16(Asher))\n(p_14(Asher) \u2228 p_15(Asher)) \u2192 p_5(Asher)\np_13(Asher) \u2192 (p_14(Asher) \u2295 p_4(Asher))\np_13(Asher) \u2192 (p_3(Asher) \u2295 p_9(Asher))\n(p_12(Asher) \u2295 p_2(Asher)) \u2192 p_1(Asher)\n(p_11(Asher) \u2295 p_0(Asher)) \u2192 p_12(Asher)\n(p_9(Asher) \u2295 p_10(Asher)) \u2192 p_11(Asher)\np_7(Asher) \u2228 \u00acp_7(Asher)\np_10(Asher) \u2192 p_6(Asher)",
            "Initial Goal": "p_10(Asher)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_7(Asher)",
                    "p_8(Asher)",
                    "-p_6(Asher)",
                    "-p_5(Asher)",
                    "-p_4(Asher)",
                    "-p_3(Asher)",
                    "-p_2(Asher)",
                    "-p_1(Asher)",
                    "p_0(Asher)",
                    "p_16(Asher) -> (p_7(Asher) & p_8(Asher))",
                    "-p_6(Asher) -> (-p_15(Asher) & -p_16(Asher))",
                    "(p_14(Asher) | p_15(Asher)) -> p_5(Asher)",
                    "p_13(Asher) -> (-(p_14(Asher) <-> p_4(Asher)))",
                    "p_13(Asher) -> (-(p_3(Asher) <-> p_9(Asher)))",
                    "(-(p_12(Asher) <-> p_2(Asher))) -> p_1(Asher)",
                    "(-(p_11(Asher) <-> p_0(Asher))) -> p_12(Asher)",
                    "(-(p_9(Asher) <-> p_10(Asher))) -> p_11(Asher)",
                    "p_7(Asher) | -p_7(Asher)",
                    "p_10(Asher) -> p_6(Asher)"
                ],
                "formulas(goals)": [
                    "-p_10(Asher)"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "p_10(Asher)"
                ],
                "removed_rules": [
                    "\u00acp_10(Asher) \u2192 \u00ac(p_7(Asher) \u2227 p_8(Asher))"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_10(Asher) \u2192 p_6(Asher)"
                ]
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_7(Asher)\np_8(Asher)\n\u00acp_6(Asher)\n\u00acp_5(Asher)\n\u00acp_4(Asher)\n\u00acp_3(Asher)\n\u00acp_2(Asher)\n\u00acp_1(Asher)\np_0(Asher)\np_16(Asher) \u2192 (p_7(Asher) \u2227 p_8(Asher))\n\u00acp_6(Asher) \u2192 (\u00acp_15(Asher) \u2227 \u00acp_16(Asher))\n(p_14(Asher) \u2228 p_15(Asher)) \u2192 p_5(Asher)\np_13(Asher) \u2192 ((p_14(Asher) \u2228 p_4(Asher)) \u2227 \u00ac(p_14(Asher) \u2227 p_4(Asher)))\np_13(Asher) \u2192 (p_3(Asher) \u2295 p_9(Asher))\n(p_12(Asher) \u2295 p_2(Asher)) \u2192 p_1(Asher)\n(p_11(Asher) \u2295 p_0(Asher)) \u2192 p_12(Asher)\n(p_9(Asher) \u2295 p_10(Asher)) \u2192 p_11(Asher)\np_7(Asher) \u2228 \u00acp_7(Asher)\np_10(Asher) \u2192 p_6(Asher)\n\u00acp_6(Asher) \u2192 \u00acp_10(Asher)\n\u00acp_16(Asher)\n\u00acp_15(Asher)\np_8(Asher) \u2228 \u00acp_8(Asher)",
            "Initial Goal": "p_10(Asher)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_7(Asher)",
                    "p_8(Asher)",
                    "-p_6(Asher)",
                    "-p_5(Asher)",
                    "-p_4(Asher)",
                    "-p_3(Asher)",
                    "-p_2(Asher)",
                    "-p_1(Asher)",
                    "p_0(Asher)",
                    "p_16(Asher) -> (p_7(Asher) & p_8(Asher))",
                    "-p_6(Asher) -> (-p_15(Asher) & -p_16(Asher))",
                    "(p_14(Asher) | p_15(Asher)) -> p_5(Asher)",
                    "p_13(Asher) -> ((p_14(Asher) | p_4(Asher)) & -(p_14(Asher) & p_4(Asher)))",
                    "p_13(Asher) -> (-(p_3(Asher) <-> p_9(Asher)))",
                    "(-(p_12(Asher) <-> p_2(Asher))) -> p_1(Asher)",
                    "(-(p_11(Asher) <-> p_0(Asher))) -> p_12(Asher)",
                    "(-(p_9(Asher) <-> p_10(Asher))) -> p_11(Asher)",
                    "p_7(Asher) | -p_7(Asher)",
                    "p_10(Asher) -> p_6(Asher)",
                    "-p_6(Asher) -> -p_10(Asher)",
                    "-p_16(Asher)",
                    "-p_15(Asher)",
                    "p_8(Asher) | -p_8(Asher)"
                ],
                "formulas(goals)": [
                    "-p_10(Asher)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "\u00acp_16(Asher)",
                    "\u00acp_15(Asher)"
                ],
                "added_rules": [
                    "p_13(Asher) \u2192 ((p_14(Asher) \u2228 p_4(Asher)) \u2227 \u00ac(p_14(Asher) \u2227 p_4(Asher)))",
                    "\u00acp_6(Asher) \u2192 \u00acp_10(Asher)",
                    "p_8(Asher) \u2228 \u00acp_8(Asher)"
                ]
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_7(Asher)\np_8(Asher)\n\u00acp_6(Asher)\n\u00acp_5(Asher)\n\u00acp_4(Asher)\n\u00acp_3(Asher)\n\u00acp_2(Asher)\n\u00acp_1(Asher)\np_0(Asher)\np_16(Asher) \u2192 (p_7(Asher) \u2227 p_8(Asher))\n\u00acp_6(Asher) \u2192 (\u00acp_15(Asher) \u2227 \u00acp_16(Asher))\n(p_14(Asher) \u2228 p_15(Asher)) \u2192 p_5(Asher)\np_13(Asher) \u2192 ((p_14(Asher) \u2228 p_4(Asher)) \u2227 \u00ac(p_14(Asher) \u2227 p_4(Asher)))\np_13(Asher) \u2192 (p_3(Asher) \u2295 p_9(Asher))\n(p_12(Asher) \u2295 p_2(Asher)) \u2192 p_1(Asher)\n(p_11(Asher) \u2295 p_0(Asher)) \u2192 p_12(Asher)\n(p_9(Asher) \u2295 p_10(Asher)) \u2192 p_11(Asher)\np_7(Asher) \u2228 \u00acp_7(Asher)\np_10(Asher) \u2192 p_6(Asher)\n\u00acp_6(Asher) \u2192 p_10(Asher)\n\u00acp_16(Asher)\n\u00acp_15(Asher)\np_8(Asher) \u2228 \u00acp_8(Asher)",
            "Initial Goal": "p_10(Asher)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_7(Asher).",
                    "p_8(Asher).",
                    "-p_6(Asher).",
                    "-p_5(Asher).",
                    "-p_4(Asher).",
                    "-p_3(Asher).",
                    "-p_2(Asher).",
                    "-p_1(Asher).",
                    "p_0(Asher).",
                    "p_16(Asher) -> (p_7(Asher) & p_8(Asher)).",
                    "-p_6(Asher) -> (-p_15(Asher) & -p_16(Asher)).",
                    "(p_14(Asher) | p_15(Asher)) -> p_5(Asher).",
                    "p_13(Asher) -> ((p_14(Asher) | p_4(Asher)) & -(p_14(Asher) & p_4(Asher))).",
                    "p_13(Asher) -> (-(p_3(Asher) <-> p_9(Asher))).",
                    "-(p_12(Asher) <-> p_2(Asher)) -> p_1(Asher).",
                    "-(p_11(Asher) <-> p_0(Asher)) -> p_12(Asher).",
                    "-(p_9(Asher) <-> p_10(Asher)) -> p_11(Asher).",
                    "p_7(Asher) | -p_7(Asher).",
                    "p_10(Asher) -> p_6(Asher).",
                    "-p_6(Asher) -> p_10(Asher).",
                    "-p_16(Asher).",
                    "-p_15(Asher).",
                    "p_8(Asher) | -p_8(Asher)."
                ],
                "formulas(goals)": [
                    "p_10(Asher)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u00acp_6(Asher) \u2192 \u00acp_10(Asher)"
                ],
                "added_facts": [],
                "added_rules": [
                    "\u00acp_6(Asher) \u2192 p_10(Asher)"
                ]
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_7(Asher)\np_8(Asher)\n\u00acp_6(Asher)\n\u00acp_5(Asher)\n\u00acp_4(Asher)\n\u00acp_3(Asher)\n\u00acp_2(Asher)\n\u00acp_1(Asher)\np_0(Asher)\np_16(Asher) \u2192 (p_7(Asher) \u2227 p_8(Asher))\n\u00acp_6(Asher) \u2192 (\u00acp_15(Asher) \u2227 \u00acp_16(Asher))\n(p_14(Asher) \u2228 p_15(Asher)) \u2192 p_5(Asher)\np_13(Asher) \u2192 ((p_14(Asher) \u2228 p_4(Asher)) \u2227 (\u00acp_14(Asher) \u2228 \u00acp_4(Asher)))\np_13(Asher) \u2295 (p_3(Asher) \u2295 p_9(Asher))\n(p_12(Asher) \u2295 p_2(Asher)) \u2192 p_1(Asher)\n(p_11(Asher) \u2295 p_0(Asher)) \u2192 p_12(Asher)\n(p_9(Asher) \u2295 p_10(Asher)) \u2192 p_11(Asher)\np_7(Asher) \u2228 \u00acp_7(Asher)\np_10(Asher) \u2192 p_6(Asher)\n\u00acp_6(Asher) \u2192 p_10(Asher)\n\u00acp_16(Asher)\n\u00acp_15(Asher)\np_8(Asher) \u2228 \u00acp_8(Asher)\np_7(Asher) \u2227 p_8(Asher)\np_10(Asher) \u2228 \u00acp_10(Asher)\np_0(Asher) \u2228 \u00acp_0(Asher)",
            "Initial Goal": "p_10(Asher)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_7(Asher).",
                    "p_8(Asher).",
                    "-p_6(Asher).",
                    "-p_5(Asher).",
                    "-p_4(Asher).",
                    "-p_3(Asher).",
                    "-p_2(Asher).",
                    "-p_1(Asher).",
                    "p_0(Asher).",
                    "p_16(Asher) -> (p_7(Asher) & p_8(Asher)).",
                    "-p_6(Asher) -> (-p_15(Asher) & -p_16(Asher)).",
                    "(p_14(Asher) | p_15(Asher)) -> p_5(Asher).",
                    "p_13(Asher) -> ((p_14(Asher) | p_4(Asher)) & (-p_14(Asher) | -p_4(Asher))).",
                    "-(p_13(Asher) <-> (p_3(Asher) <-> p_9(Asher))).",
                    "-(p_12(Asher) <-> p_2(Asher)) -> p_1(Asher).",
                    "-(p_11(Asher) <-> p_0(Asher)) -> p_12(Asher).",
                    "-(p_9(Asher) <-> p_10(Asher)) -> p_11(Asher).",
                    "p_7(Asher) | -p_7(Asher).",
                    "p_10(Asher) -> p_6(Asher).",
                    "-p_6(Asher) -> p_10(Asher).",
                    "-p_16(Asher).",
                    "-p_15(Asher).",
                    "p_8(Asher) | -p_8(Asher).",
                    "p_7(Asher) & p_8(Asher).",
                    "p_10(Asher) | -p_10(Asher).",
                    "p_0(Asher) | -p_0(Asher)."
                ],
                "formulas(goals)": [
                    "p_10(Asher)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_7(Asher) \u2227 p_8(Asher)",
                    "p_10(Asher) \u2228 \u00acp_10(Asher)",
                    "p_0(Asher) \u2228 \u00acp_0(Asher)"
                ],
                "added_rules": [
                    "p_13(Asher) \u2192 ((p_14(Asher) \u2228 p_4(Asher)) \u2227 (\u00acp_14(Asher) \u2228 \u00acp_4(Asher)))"
                ]
            }
        }
    ]
}