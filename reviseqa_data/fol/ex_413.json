{
    "background_story": "Sebastian was a brilliant pianist known for his captivating performances. However, after years of taking medication for a neurological condition, he began to experience tardive dyskinesia, a side effect characterized by involuntary movements. Despite this challenge, Sebastian was determined to continue his music career. He adapted his technique, learning to incorporate his involuntary movements into his performances, making them a unique aspect of his shows. His resilience and creativity inspired countless fans, and he became an advocate for awareness about tardive dyskinesia, using his platform to support others affected by the condition. Sebastian's story is one of perseverance and the power of turning adversity into art.",
    "predicates": [
        {
            "id": 0,
            "name": "is_wealthy"
        },
        {
            "id": 1,
            "name": "performs_publicly"
        },
        {
            "id": 2,
            "name": "adaptable"
        },
        {
            "id": 3,
            "name": "gains_recognition"
        },
        {
            "id": 4,
            "name": "faces_adversity"
        },
        {
            "id": 5,
            "name": "finds_creativity"
        },
        {
            "id": 6,
            "name": "talented"
        },
        {
            "id": 7,
            "name": "challenged"
        },
        {
            "id": 8,
            "name": "inspirational"
        },
        {
            "id": 9,
            "name": "succeeds"
        },
        {
            "id": 10,
            "name": "is_famous"
        },
        {
            "id": 11,
            "name": "resilient"
        },
        {
            "id": 12,
            "name": "passionate"
        },
        {
            "id": 13,
            "name": "dedicated"
        },
        {
            "id": 14,
            "name": "works_hard"
        },
        {
            "id": 15,
            "name": "develops_skill"
        },
        {
            "id": 16,
            "name": "has_condition"
        },
        {
            "id": 17,
            "name": "experiences_struggle"
        },
        {
            "id": 18,
            "name": "pursues_passion"
        },
        {
            "id": 19,
            "name": "makes_impact"
        },
        {
            "id": 20,
            "name": "faced_setbacks"
        },
        {
            "id": 21,
            "name": "learns_quickly"
        }
    ],
    "subject_name": "Sebastian",
    "subject_category": "human",
    "keyword": "tardive",
    "all_facts": [
        {
            "id": 0,
            "subject": "Sebastian",
            "text": "Sebastian is not wealthy.",
            "fol": "\u00acp_0(Sebastian)",
            "str_fol": "\u00acis_wealthy(Sebastian)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Sebastian",
            "text": "Sebastian does not perform publicly.",
            "fol": "\u00acp_1(Sebastian)",
            "str_fol": "\u00acperforms_publicly(Sebastian)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Sebastian",
            "text": "Sebastian is not adaptable.",
            "fol": "\u00acp_2(Sebastian)",
            "str_fol": "\u00acadaptable(Sebastian)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Sebastian",
            "text": "Sebastian does not gain recognition.",
            "fol": "\u00acp_3(Sebastian)",
            "str_fol": "\u00acgains_recognition(Sebastian)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Sebastian",
            "text": "Sebastian faces adversity.",
            "fol": "p_4(Sebastian)",
            "str_fol": "faces_adversity(Sebastian)",
            "negation": false
        },
        {
            "id": 5,
            "subject": "Sebastian",
            "text": "Sebastian does not find creativity.",
            "fol": "\u00acp_5(Sebastian)",
            "str_fol": "\u00acfinds_creativity(Sebastian)",
            "negation": true
        },
        {
            "id": 6,
            "subject": "Sebastian",
            "text": "Sebastian is not resilient.",
            "fol": "\u00acp_11(Sebastian)",
            "str_fol": "\u00acresilient(Sebastian)",
            "negation": true
        },
        {
            "id": 7,
            "subject": "Sebastian",
            "text": "Sebastian is not famous.",
            "fol": "\u00acp_10(Sebastian)",
            "str_fol": "\u00acis_famous(Sebastian)",
            "negation": true
        },
        {
            "id": 8,
            "subject": "Sebastian",
            "text": "Sebastian is not challenged.",
            "fol": "\u00acp_7(Sebastian)",
            "str_fol": "\u00acchallenged(Sebastian)",
            "negation": true
        },
        {
            "id": 9,
            "subject": "Sebastian",
            "text": "Sebastian does not succeed.",
            "fol": "\u00acp_9(Sebastian)",
            "str_fol": "\u00acsucceeds(Sebastian)",
            "negation": true
        },
        {
            "id": 10,
            "subject": "Sebastian",
            "text": "Sebastian is not talented.",
            "fol": "\u00acp_6(Sebastian)",
            "str_fol": "\u00actalented(Sebastian)",
            "negation": true
        },
        {
            "id": 11,
            "subject": "Sebastian",
            "text": "Sebastian is inspirational.",
            "fol": "p_8(Sebastian)",
            "str_fol": "inspirational(Sebastian)",
            "negation": false
        }
    ],
    "context_facts": [
        {
            "id": 4,
            "subject": "Sebastian",
            "text": "Sebastian faces adversity.",
            "fol": "p_4(Sebastian)",
            "str_fol": "faces_adversity(Sebastian)",
            "negation": false
        },
        {
            "id": 5,
            "subject": "Sebastian",
            "text": "Sebastian does not find creativity.",
            "fol": "\u00acp_5(Sebastian)",
            "str_fol": "\u00acfinds_creativity(Sebastian)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Sebastian",
            "text": "Sebastian does not perform publicly.",
            "fol": "\u00acp_1(Sebastian)",
            "str_fol": "\u00acperforms_publicly(Sebastian)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Sebastian",
            "text": "Sebastian does not gain recognition.",
            "fol": "\u00acp_3(Sebastian)",
            "str_fol": "\u00acgains_recognition(Sebastian)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Sebastian",
            "text": "Sebastian is not adaptable.",
            "fol": "\u00acp_2(Sebastian)",
            "str_fol": "\u00acadaptable(Sebastian)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Sebastian",
            "text": "Sebastian is not wealthy.",
            "fol": "\u00acp_0(Sebastian)",
            "str_fol": "\u00acis_wealthy(Sebastian)",
            "negation": true
        }
    ],
    "context_rules": [
        {
            "id": 5,
            "text": "If someone is resilient and faces adversity, then they can find creativity.",
            "fol": "\u2200x ((p_11(x) \u2227 p_4(x)) \u2192 p_5(x))",
            "str_fol": "\u2200x ((resilient(x) \u2227 faces_adversity(x)) \u2192 finds_creativity(x))"
        },
        {
            "id": 4,
            "text": "If Sebastian either performs publicly or is famous (but not both), then he gains recognition.",
            "fol": "(p_1(Sebastian) \u2295 p_10(Sebastian)) \u2192 p_3(Sebastian)",
            "str_fol": "(performs_publicly(Sebastian) \u2295 is_famous(Sebastian)) \u2192 gains_recognition(Sebastian)"
        },
        {
            "id": 3,
            "text": "Anyone who is challenged or resilient can be adaptable.",
            "fol": "\u2200x ((p_7(x) \u2228 p_11(x)) \u2192 p_2(x))",
            "str_fol": "\u2200x ((challenged(x) \u2228 resilient(x)) \u2192 adaptable(x))"
        },
        {
            "id": 2,
            "text": "If Sebastian succeeds, then he is either famous or wealthy, but not both.",
            "fol": "p_9(Sebastian) \u2192 (p_10(Sebastian) \u2295 p_0(Sebastian))",
            "str_fol": "succeeds(Sebastian) \u2192 (is_famous(Sebastian) \u2295 is_wealthy(Sebastian))"
        },
        {
            "id": 1,
            "text": "If Sebastian is talented, then he will succeed.",
            "fol": "p_6(Sebastian) \u2192 p_9(Sebastian)",
            "str_fol": "talented(Sebastian) \u2192 succeeds(Sebastian)"
        },
        {
            "id": 0,
            "text": "If Sebastian is either talented or challenged (but not both), then he is inspirational.",
            "fol": "(p_6(Sebastian) \u2295 p_7(Sebastian)) \u2192 p_8(Sebastian)",
            "str_fol": "(talented(Sebastian) \u2295 challenged(Sebastian)) \u2192 inspirational(Sebastian)"
        }
    ],
    "context": [
        {
            "id": 4,
            "subject": "Sebastian",
            "text": "Sebastian faces adversity.",
            "fol": "p_4(Sebastian)",
            "str_fol": "faces_adversity(Sebastian)",
            "negation": false
        },
        {
            "id": 5,
            "subject": "Sebastian",
            "text": "Sebastian does not find creativity.",
            "fol": "\u00acp_5(Sebastian)",
            "str_fol": "\u00acfinds_creativity(Sebastian)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Sebastian",
            "text": "Sebastian does not perform publicly.",
            "fol": "\u00acp_1(Sebastian)",
            "str_fol": "\u00acperforms_publicly(Sebastian)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Sebastian",
            "text": "Sebastian does not gain recognition.",
            "fol": "\u00acp_3(Sebastian)",
            "str_fol": "\u00acgains_recognition(Sebastian)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Sebastian",
            "text": "Sebastian is not adaptable.",
            "fol": "\u00acp_2(Sebastian)",
            "str_fol": "\u00acadaptable(Sebastian)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Sebastian",
            "text": "Sebastian is not wealthy.",
            "fol": "\u00acp_0(Sebastian)",
            "str_fol": "\u00acis_wealthy(Sebastian)",
            "negation": true
        },
        {
            "id": 5,
            "text": "If someone is resilient and faces adversity, then they can find creativity.",
            "fol": "\u2200x ((p_11(x) \u2227 p_4(x)) \u2192 p_5(x))",
            "str_fol": "\u2200x ((resilient(x) \u2227 faces_adversity(x)) \u2192 finds_creativity(x))"
        },
        {
            "id": 4,
            "text": "If Sebastian either performs publicly or is famous (but not both), then he gains recognition.",
            "fol": "(p_1(Sebastian) \u2295 p_10(Sebastian)) \u2192 p_3(Sebastian)",
            "str_fol": "(performs_publicly(Sebastian) \u2295 is_famous(Sebastian)) \u2192 gains_recognition(Sebastian)"
        },
        {
            "id": 3,
            "text": "Anyone who is challenged or resilient can be adaptable.",
            "fol": "\u2200x ((p_7(x) \u2228 p_11(x)) \u2192 p_2(x))",
            "str_fol": "\u2200x ((challenged(x) \u2228 resilient(x)) \u2192 adaptable(x))"
        },
        {
            "id": 2,
            "text": "If Sebastian succeeds, then he is either famous or wealthy, but not both.",
            "fol": "p_9(Sebastian) \u2192 (p_10(Sebastian) \u2295 p_0(Sebastian))",
            "str_fol": "succeeds(Sebastian) \u2192 (is_famous(Sebastian) \u2295 is_wealthy(Sebastian))"
        },
        {
            "id": 1,
            "text": "If Sebastian is talented, then he will succeed.",
            "fol": "p_6(Sebastian) \u2192 p_9(Sebastian)",
            "str_fol": "talented(Sebastian) \u2192 succeeds(Sebastian)"
        },
        {
            "id": 0,
            "text": "If Sebastian is either talented or challenged (but not both), then he is inspirational.",
            "fol": "(p_6(Sebastian) \u2295 p_7(Sebastian)) \u2192 p_8(Sebastian)",
            "str_fol": "(talented(Sebastian) \u2295 challenged(Sebastian)) \u2192 inspirational(Sebastian)"
        }
    ],
    "context_fol": "p_4(Sebastian)\n\u00acp_5(Sebastian)\n\u00acp_1(Sebastian)\n\u00acp_3(Sebastian)\n\u00acp_2(Sebastian)\n\u00acp_0(Sebastian)\n\u2200x ((p_11(x) \u2227 p_4(x)) \u2192 p_5(x))\n(p_1(Sebastian) \u2295 p_10(Sebastian)) \u2192 p_3(Sebastian)\n\u2200x ((p_7(x) \u2228 p_11(x)) \u2192 p_2(x))\np_9(Sebastian) \u2192 (p_10(Sebastian) \u2295 p_0(Sebastian))\np_6(Sebastian) \u2192 p_9(Sebastian)\n(p_6(Sebastian) \u2295 p_7(Sebastian)) \u2192 p_8(Sebastian)",
    "conclusion": {
        "id": 11,
        "subject": "Sebastian",
        "text": "Sebastian is inspirational.",
        "fol": "p_8(Sebastian)",
        "str_fol": "inspirational(Sebastian)",
        "negation": false
    },
    "initial_answer": "Uncertain",
    "initial_goal": "p_8(Sebastian)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 4,
                    "subject": "Sebastian",
                    "text": "Sebastian faces adversity.",
                    "fol": "p_4(Sebastian)",
                    "str_fol": "faces_adversity(Sebastian)",
                    "negation": false
                },
                {
                    "id": 5,
                    "subject": "Sebastian",
                    "text": "Sebastian does not find creativity.",
                    "fol": "\u00acp_5(Sebastian)",
                    "str_fol": "\u00acfinds_creativity(Sebastian)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "If someone is resilient and faces adversity, then they can find creativity.",
                    "fol": "\u2200x ((p_11(x) \u2227 p_4(x)) \u2192 p_5(x))",
                    "str_fol": "\u2200x ((resilient(x) \u2227 faces_adversity(x)) \u2192 finds_creativity(x))"
                }
            ],
            "conclusion": {
                "id": 6,
                "subject": "Sebastian",
                "text": "Sebastian is not resilient.",
                "fol": "\u00acp_11(Sebastian)",
                "str_fol": "\u00acresilient(Sebastian)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 1,
                    "subject": "Sebastian",
                    "text": "Sebastian does not perform publicly.",
                    "fol": "\u00acp_1(Sebastian)",
                    "str_fol": "\u00acperforms_publicly(Sebastian)",
                    "negation": true
                },
                {
                    "id": 3,
                    "subject": "Sebastian",
                    "text": "Sebastian does not gain recognition.",
                    "fol": "\u00acp_3(Sebastian)",
                    "str_fol": "\u00acgains_recognition(Sebastian)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "If Sebastian either performs publicly or is famous (but not both), then he gains recognition.",
                    "fol": "(p_1(Sebastian) \u2295 p_10(Sebastian)) \u2192 p_3(Sebastian)",
                    "str_fol": "(performs_publicly(Sebastian) \u2295 is_famous(Sebastian)) \u2192 gains_recognition(Sebastian)"
                }
            ],
            "conclusion": {
                "id": 7,
                "subject": "Sebastian",
                "text": "Sebastian is not famous.",
                "fol": "\u00acp_10(Sebastian)",
                "str_fol": "\u00acis_famous(Sebastian)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 6,
                    "subject": "Sebastian",
                    "text": "Sebastian is not resilient.",
                    "fol": "\u00acp_11(Sebastian)",
                    "str_fol": "\u00acresilient(Sebastian)",
                    "negation": true
                },
                {
                    "id": 2,
                    "subject": "Sebastian",
                    "text": "Sebastian is not adaptable.",
                    "fol": "\u00acp_2(Sebastian)",
                    "str_fol": "\u00acadaptable(Sebastian)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "Anyone who is challenged or resilient can be adaptable.",
                    "fol": "\u2200x ((p_7(x) \u2228 p_11(x)) \u2192 p_2(x))",
                    "str_fol": "\u2200x ((challenged(x) \u2228 resilient(x)) \u2192 adaptable(x))"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Sebastian",
                "text": "Sebastian is not challenged.",
                "fol": "\u00acp_7(Sebastian)",
                "str_fol": "\u00acchallenged(Sebastian)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 7,
                    "subject": "Sebastian",
                    "text": "Sebastian is not famous.",
                    "fol": "\u00acp_10(Sebastian)",
                    "str_fol": "\u00acis_famous(Sebastian)",
                    "negation": true
                },
                {
                    "id": 0,
                    "subject": "Sebastian",
                    "text": "Sebastian is not wealthy.",
                    "fol": "\u00acp_0(Sebastian)",
                    "str_fol": "\u00acis_wealthy(Sebastian)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "If Sebastian succeeds, then he is either famous or wealthy, but not both.",
                    "fol": "p_9(Sebastian) \u2192 (p_10(Sebastian) \u2295 p_0(Sebastian))",
                    "str_fol": "succeeds(Sebastian) \u2192 (is_famous(Sebastian) \u2295 is_wealthy(Sebastian))"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Sebastian",
                "text": "Sebastian does not succeed.",
                "fol": "\u00acp_9(Sebastian)",
                "str_fol": "\u00acsucceeds(Sebastian)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 9,
                    "subject": "Sebastian",
                    "text": "Sebastian does not succeed.",
                    "fol": "\u00acp_9(Sebastian)",
                    "str_fol": "\u00acsucceeds(Sebastian)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "If Sebastian is talented, then he will succeed.",
                    "fol": "p_6(Sebastian) \u2192 p_9(Sebastian)",
                    "str_fol": "talented(Sebastian) \u2192 succeeds(Sebastian)"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Sebastian",
                "text": "Sebastian is not talented.",
                "fol": "\u00acp_6(Sebastian)",
                "str_fol": "\u00actalented(Sebastian)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 10,
                    "subject": "Sebastian",
                    "text": "Sebastian is not talented.",
                    "fol": "\u00acp_6(Sebastian)",
                    "str_fol": "\u00actalented(Sebastian)",
                    "negation": true
                },
                {
                    "id": 8,
                    "subject": "Sebastian",
                    "text": "Sebastian is not challenged.",
                    "fol": "\u00acp_7(Sebastian)",
                    "str_fol": "\u00acchallenged(Sebastian)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "If Sebastian is either talented or challenged (but not both), then he is inspirational.",
                    "fol": "(p_6(Sebastian) \u2295 p_7(Sebastian)) \u2192 p_8(Sebastian)",
                    "str_fol": "(talented(Sebastian) \u2295 challenged(Sebastian)) \u2192 inspirational(Sebastian)"
                }
            ],
            "conclusion": null
        }
    ],
    "proof_trace": null,
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "UNCERTAIN",
            "Edited Assumptions": "p_4(Sebastian)\n\u00acp_5(Sebastian)\n\u00acp_1(Sebastian)\n\u00acp_3(Sebastian)\n\u00acp_2(Sebastian)\n\u00acp_0(Sebastian)\n\u2200x ((p_11(x) \u2227 p_4(x)) \u2192 p_5(x))\n(p_1(Sebastian) \u2295 p_10(Sebastian)) \u2192 p_3(Sebastian)\n\u2200x ((p_7(x) \u2228 p_11(x)) \u2192 p_2(x))\np_9(Sebastian) \u2192 (p_10(Sebastian) \u2295 p_0(Sebastian))\np_6(Sebastian) \u2192 p_9(Sebastian)\n(p_6(Sebastian) \u2295 p_7(Sebastian)) \u2192 p_8(Sebastian)",
            "Initial Goal": "p_8(Sebastian)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_4(Sebastian)",
                    "-p_5(Sebastian)",
                    "-p_1(Sebastian)",
                    "-p_3(Sebastian)",
                    "-p_2(Sebastian)",
                    "-p_0(Sebastian)",
                    "all x ((p_11(x) & p_4(x)) -> p_5(x))",
                    "(-(p_1(Sebastian) <-> p_10(Sebastian))) & -p_8(Sebastian) -> p_3(Sebastian)",
                    "all x ((p_7(x) | p_11(x)) -> p_2(x))",
                    "p_9(Sebastian) -> (-(p_10(Sebastian) <-> p_0(Sebastian)))",
                    "p_6(Sebastian) -> p_9(Sebastian)",
                    "(-(p_6(Sebastian) <-> p_7(Sebastian))) -> p_8(Sebastian)",
                    "p_6(Sebastian)"
                ],
                "formulas(goals)": [
                    "p_8(Sebastian)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "(p_1(Sebastian) \u2295 p_10(Sebastian)) \u2192 p_3(Sebastian)"
                ],
                "added_facts": [
                    "p_6(Sebastian)"
                ],
                "added_rules": [
                    "((p_1(Sebastian) \u2295 p_10(Sebastian)) \u2227 \u00acp_8(Sebastian)) \u2192 p_3(Sebastian)"
                ]
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_4(Sebastian)\n\u00acp_5(Sebastian)\n\u00acp_1(Sebastian)\n\u00acp_3(Sebastian)\n\u00acp_2(Sebastian)\n\u00acp_0(Sebastian)\n\u2200x (\u00acp_11(x) \u2228 \u00acp_4(x) \u2228 p_5(x))\n\u00ac(p_1(Sebastian) \u2295 p_10(Sebastian)) \u2228 p_3(Sebastian)\n\u2200x (\u00ac(p_7(x) \u2228 p_11(x)) \u2228 p_2(x))\n\u00acp_9(Sebastian) \u2228 (p_10(Sebastian) \u2295 p_0(Sebastian))\n\u00acp_6(Sebastian) \u2228 p_9(Sebastian)\n\u00ac(p_6(Sebastian) \u2295 p_7(Sebastian)) \u2228 p_8(Sebastian)\np_8(Sebastian)\n\u00acp_7(Sebastian)",
            "Initial Goal": "p_8(Sebastian)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_4(Sebastian)",
                    "-p_5(Sebastian)",
                    "-p_1(Sebastian)",
                    "-p_3(Sebastian)",
                    "-p_2(Sebastian)",
                    "-p_0(Sebastian)",
                    "all x (-p_11(x) | -p_4(x) | p_5(x))",
                    "(-(-(p_1(Sebastian) <-> p_10(Sebastian))) | p_3(Sebastian))",
                    "all x (-(p_7(x) | p_11(x)) | p_2(x))",
                    "(-p_9(Sebastian) | (-(p_10(Sebastian) <-> p_0(Sebastian))))",
                    "(-p_6(Sebastian) | p_9(Sebastian))",
                    "(-(-(p_6(Sebastian) <-> p_7(Sebastian))) | p_8(Sebastian))",
                    "p_8(Sebastian)",
                    "-p_7(Sebastian)"
                ],
                "formulas(goals)": [
                    "p_8(Sebastian)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_8(Sebastian)",
                    "\u00acp_7(Sebastian)"
                ],
                "added_rules": []
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_4(Sebastian)\n\u00acp_5(Sebastian)\n\u00acp_1(Sebastian)\n\u00acp_3(Sebastian)\n\u00acp_2(Sebastian)\n\u00acp_0(Sebastian)\n\u2200x (\u00acp_11(x) \u2228 \u00acp_4(x) \u2228 p_5(x))\n\u00ac(p_1(Sebastian) \u2295 p_10(Sebastian)) \u2228 p_3(Sebastian)\n\u2200x (\u00ac(p_7(x) \u2228 p_11(x)) \u2228 p_2(x))\n\u00acp_9(Sebastian) \u2228 (p_10(Sebastian) \u2295 p_0(Sebastian))\n\u00acp_6(Sebastian) \u2228 p_9(Sebastian)\n\u00ac(p_6(Sebastian) \u2295 p_7(Sebastian)) \u2228 p_8(Sebastian)\np_8(Sebastian)\n\u00acp_7(Sebastian)\n\u00acp_11(Sebastian)",
            "Initial Goal": "p_8(Sebastian)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_4(Sebastian)",
                    "-p_5(Sebastian)",
                    "-p_1(Sebastian)",
                    "-p_3(Sebastian)",
                    "-p_2(Sebastian)",
                    "-p_0(Sebastian)",
                    "all x (-p_11(x) | -p_4(x) | p_5(x))",
                    "(-(p_1(Sebastian) <-> p_10(Sebastian))) | p_3(Sebastian)",
                    "all x (-(p_7(x) | p_11(x)) | p_2(x))",
                    "-p_9(Sebastian) | (-(p_10(Sebastian) <-> p_0(Sebastian)))",
                    "-p_6(Sebastian) | p_9(Sebastian)",
                    "(-(p_6(Sebastian) <-> p_7(Sebastian))) | p_8(Sebastian)",
                    "p_8(Sebastian)",
                    "-p_7(Sebastian)",
                    "-p_11(Sebastian)"
                ],
                "formulas(goals)": [
                    "p_8(Sebastian)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "\u00acp_11(Sebastian)"
                ],
                "added_rules": []
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_4(Sebastian)\n\u00acp_5(Sebastian)\n\u00acp_1(Sebastian)\n\u00acp_3(Sebastian)\n\u00acp_2(Sebastian)\n\u00acp_0(Sebastian)\n\u2200x (\u00acp_11(x) \u2228 \u00acp_4(x) \u2228 p_5(x))\n\u00ac(p_1(Sebastian) \u2295 p_10(Sebastian)) \u2228 p_3(Sebastian)\n\u2200x (\u00ac(p_7(x) \u2228 p_11(x)) \u2228 p_2(x))\n\u00acp_9(Sebastian) \u2228 (p_10(Sebastian) \u2295 p_0(Sebastian))\n\u00acp_6(Sebastian) \u2228 p_9(Sebastian)\n\u00ac(p_6(Sebastian) \u2295 p_7(Sebastian)) \u2228 p_8(Sebastian)\np_8(Sebastian)\n\u00acp_7(Sebastian)\n\u00acp_11(Sebastian)\n\u00acp_6(Sebastian) \u2228 p_7(Sebastian) \u2228 p_8(Sebastian)\np_6(Sebastian) \u2228 \u00acp_7(Sebastian) \u2228 p_8(Sebastian)\n\u00acp_1(Sebastian) \u2228 p_10(Sebastian) \u2228 p_3(Sebastian)\np_1(Sebastian) \u2228 \u00acp_10(Sebastian) \u2228 p_3(Sebastian)",
            "Initial Goal": "p_8(Sebastian)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_4(Sebastian)",
                    "-p_5(Sebastian)",
                    "-p_1(Sebastian)",
                    "-p_3(Sebastian)",
                    "-p_2(Sebastian)",
                    "-p_0(Sebastian)",
                    "all x (-p_11(x) | -p_4(x) | p_5(x))",
                    "(p_1(Sebastian) <-> p_10(Sebastian)) | p_3(Sebastian)",
                    "all x (-(p_7(x) | p_11(x)) | p_2(x))",
                    "-p_9(Sebastian) | (-(p_10(Sebastian) <-> p_0(Sebastian)))",
                    "-p_6(Sebastian) | p_9(Sebastian)",
                    "(p_6(Sebastian) <-> p_7(Sebastian)) | p_8(Sebastian)",
                    "p_8(Sebastian)",
                    "-p_7(Sebastian)",
                    "-p_11(Sebastian)",
                    "-p_6(Sebastian) | p_7(Sebastian) | p_8(Sebastian)",
                    "p_6(Sebastian) | -p_7(Sebastian) | p_8(Sebastian)",
                    "-p_1(Sebastian) | p_10(Sebastian) | p_3(Sebastian)",
                    "p_1(Sebastian) | -p_10(Sebastian) | p_3(Sebastian)"
                ],
                "formulas(goals)": [
                    "p_8(Sebastian)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "\u00acp_6(Sebastian) \u2228 p_7(Sebastian) \u2228 p_8(Sebastian)",
                    "p_6(Sebastian) \u2228 \u00acp_7(Sebastian) \u2228 p_8(Sebastian)",
                    "\u00acp_1(Sebastian) \u2228 p_10(Sebastian) \u2228 p_3(Sebastian)",
                    "p_1(Sebastian) \u2228 \u00acp_10(Sebastian) \u2228 p_3(Sebastian)"
                ],
                "added_rules": []
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_4(Sebastian)\n\u00acp_5(Sebastian)\n\u00acp_1(Sebastian)\n\u00acp_3(Sebastian)\n\u00acp_2(Sebastian)\n\u00acp_0(Sebastian)\n\u2200x (\u00acp_11(x) \u2228 \u00acp_4(x) \u2228 p_5(x))\n\u00ac(p_1(Sebastian) \u2295 p_10(Sebastian)) \u2228 p_3(Sebastian)\n\u2200x (\u00ac(p_7(x) \u2228 p_11(x)) \u2228 p_2(x))\n\u00acp_9(Sebastian) \u2228 (p_10(Sebastian) \u2295 p_0(Sebastian))\n\u00acp_6(Sebastian) \u2228 p_9(Sebastian)\n\u00ac(p_6(Sebastian) \u2295 p_7(Sebastian)) \u2228 p_8(Sebastian)\np_8(Sebastian)\n\u00acp_7(Sebastian)\n\u00acp_11(Sebastian)\n\u00acp_6(Sebastian) \u2228 p_7(Sebastian) \u2228 p_8(Sebastian)\np_6(Sebastian) \u2228 \u00acp_7(Sebastian) \u2228 p_8(Sebastian)\n\u00acp_1(Sebastian) \u2228 p_10(Sebastian) \u2228 p_3(Sebastian)\np_1(Sebastian) \u2228 \u00acp_10(Sebastian) \u2228 p_3(Sebastian)",
            "Initial Goal": "p_8(Sebastian)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_4(Sebastian)",
                    "-p_5(Sebastian)",
                    "-p_1(Sebastian)",
                    "-p_3(Sebastian)",
                    "-p_2(Sebastian)",
                    "-p_0(Sebastian)",
                    "all x (-p_11(x) | -p_4(x) | p_5(x))",
                    "(-(-(p_1(Sebastian) <-> p_10(Sebastian)))) | p_3(Sebastian)",
                    "all x (-(p_7(x) | p_11(x)) | p_2(x))",
                    "-p_9(Sebastian) | (-(p_10(Sebastian) <-> p_0(Sebastian)))",
                    "-p_6(Sebastian) | p_9(Sebastian)",
                    "(-(-(p_6(Sebastian) <-> p_7(Sebastian)))) | p_8(Sebastian)",
                    "p_8(Sebastian)",
                    "-p_7(Sebastian)",
                    "-p_11(Sebastian)",
                    "-p_6(Sebastian) | p_7(Sebastian) | p_8(Sebastian)",
                    "p_6(Sebastian) | -p_7(Sebastian) | p_8(Sebastian)",
                    "-p_1(Sebastian) | p_10(Sebastian) | p_3(Sebastian)",
                    "p_1(Sebastian) | -p_10(Sebastian) | p_3(Sebastian)"
                ],
                "formulas(goals)": [
                    "p_8(Sebastian)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": []
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_4(Sebastian)\n\u00acp_5(Sebastian)\n\u00acp_1(Sebastian)\n\u00acp_3(Sebastian)\n\u00acp_2(Sebastian)\n\u00acp_0(Sebastian)\n\u00acp_11(Sebastian) \u2228 \u00acp_4(Sebastian) \u2228 p_5(Sebastian)\n\u00ac(p_1(Sebastian) \u2295 p_10(Sebastian)) \u2228 p_3(Sebastian)\n\u00ac(p_7(Sebastian) \u2228 p_11(Sebastian)) \u2228 p_2(Sebastian)\n\u00acp_9(Sebastian) \u2228 (p_10(Sebastian) \u2295 p_0(Sebastian))\n\u00acp_6(Sebastian) \u2228 p_9(Sebastian)\n\u00ac(p_6(Sebastian) \u2295 p_7(Sebastian)) \u2228 p_8(Sebastian)\n\u00acp_7(Sebastian)\n\u00acp_11(Sebastian)\n\u00acp_6(Sebastian) \u2228 p_7(Sebastian) \u2228 p_8(Sebastian)\np_6(Sebastian) \u2228 \u00acp_7(Sebastian) \u2228 p_8(Sebastian)\n\u00acp_1(Sebastian) \u2228 p_10(Sebastian) \u2228 p_3(Sebastian)\np_1(Sebastian) \u2228 \u00acp_10(Sebastian) \u2228 p_3(Sebastian)\n\u00acp_4(Sebastian) \u2228 \u00acp_8(Sebastian)",
            "Initial Goal": "p_8(Sebastian)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_4(Sebastian).",
                    "-p_5(Sebastian).",
                    "-p_1(Sebastian).",
                    "-p_3(Sebastian).",
                    "-p_2(Sebastian).",
                    "-p_0(Sebastian).",
                    "(-p_11(Sebastian) | -p_4(Sebastian) | p_5(Sebastian)).",
                    "(-(-(p_1(Sebastian) <-> p_10(Sebastian))) | p_3(Sebastian)).",
                    "(-(p_7(Sebastian) | p_11(Sebastian)) | p_2(Sebastian)).",
                    "(-p_9(Sebastian) | (-(p_10(Sebastian) <-> p_0(Sebastian)))).",
                    "(-p_6(Sebastian) | p_9(Sebastian)).",
                    "(-(-(p_6(Sebastian) <-> p_7(Sebastian))) | p_8(Sebastian)).",
                    "-p_7(Sebastian).",
                    "-p_11(Sebastian).",
                    "(-p_6(Sebastian) | p_7(Sebastian) | p_8(Sebastian)).",
                    "(p_6(Sebastian) | -p_7(Sebastian) | p_8(Sebastian)).",
                    "(-p_1(Sebastian) | p_10(Sebastian) | p_3(Sebastian)).",
                    "(p_1(Sebastian) | -p_10(Sebastian) | p_3(Sebastian)).",
                    "(-p_4(Sebastian) | -p_8(Sebastian))."
                ],
                "formulas(goals)": [
                    "-p_8(Sebastian)."
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "p_8(Sebastian)"
                ],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "\u00acp_4(Sebastian) \u2228 \u00acp_8(Sebastian)"
                ]
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_4(Sebastian)\n\u00acp_5(Sebastian)\n\u00acp_1(Sebastian)\n\u00acp_3(Sebastian)\n\u00acp_2(Sebastian)\n\u00acp_0(Sebastian)\n\u00acp_11(Sebastian) \u2228 \u00acp_4(Sebastian) \u2228 p_5(Sebastian)\n\u00ac(p_1(Sebastian) \u2295 p_10(Sebastian)) \u2228 p_3(Sebastian)\n\u00ac(p_7(Sebastian) \u2228 p_11(Sebastian)) \u2228 p_2(Sebastian)\n\u00acp_9(Sebastian) \u2228 (p_10(Sebastian) \u2295 p_0(Sebastian))\n\u00acp_6(Sebastian) \u2228 p_9(Sebastian)\n\u00ac(p_6(Sebastian) \u2295 p_7(Sebastian)) \u2228 p_8(Sebastian)\n\u00acp_7(Sebastian)\n\u00acp_11(Sebastian)\n\u00acp_6(Sebastian) \u2228 p_7(Sebastian) \u2228 p_8(Sebastian)\np_6(Sebastian) \u2228 \u00acp_7(Sebastian) \u2228 p_8(Sebastian)\n\u00acp_1(Sebastian) \u2228 p_10(Sebastian) \u2228 p_3(Sebastian)\np_1(Sebastian) \u2228 \u00acp_10(Sebastian) \u2228 p_3(Sebastian)\n\u00acp_4(Sebastian) \u2228 p_8(Sebastian)",
            "Initial Goal": "p_8(Sebastian)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_4(Sebastian).",
                    "-p_5(Sebastian).",
                    "-p_1(Sebastian).",
                    "-p_3(Sebastian).",
                    "-p_2(Sebastian).",
                    "-p_0(Sebastian).",
                    "(-p_11(Sebastian)) | (-p_4(Sebastian)) | p_5(Sebastian).",
                    "(-(-(p_1(Sebastian) <-> p_10(Sebastian)))) | p_3(Sebastian).",
                    "(-(p_7(Sebastian) | p_11(Sebastian))) | p_2(Sebastian).",
                    "(-p_9(Sebastian)) | (-(p_10(Sebastian) <-> p_0(Sebastian))).",
                    "(-p_6(Sebastian)) | p_9(Sebastian).",
                    "(-(-(p_6(Sebastian) <-> p_7(Sebastian)))) | p_8(Sebastian).",
                    "-p_7(Sebastian).",
                    "-p_11(Sebastian).",
                    "(-p_6(Sebastian)) | p_7(Sebastian) | p_8(Sebastian).",
                    "p_6(Sebastian) | (-p_7(Sebastian)) | p_8(Sebastian).",
                    "(-p_1(Sebastian)) | p_10(Sebastian) | p_3(Sebastian).",
                    "p_1(Sebastian) | (-p_10(Sebastian)) | p_3(Sebastian).",
                    "(-p_4(Sebastian)) | p_8(Sebastian)."
                ],
                "formulas(goals)": [
                    "p_8(Sebastian)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u00acp_4(Sebastian) \u2228 \u00acp_8(Sebastian)"
                ],
                "added_facts": [],
                "added_rules": [
                    "\u00acp_4(Sebastian) \u2228 p_8(Sebastian)"
                ]
            }
        }
    ]
}