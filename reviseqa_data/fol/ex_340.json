{
    "background_story": "Kevin was a skilled craftsman who had spent years perfecting the art of working with mastic, a traditional resin used in varnishing and painting. Born into a family of restorers, he learned the techniques of his ancestors and applied them to his own projects. Kevin's workshop was filled with the scent of mastic, turpentine, and linseed oil as he painstakingly restored antique furniture to its former glory. His attention to detail and mastery of the mastic medium earned him a reputation among collectors and connoisseurs. Kevin took great pride in preserving the past, and his work was a testament to the enduring power of traditional craftsmanship.",
    "predicates": [
        {
            "id": 0,
            "name": "has_patience"
        },
        {
            "id": 1,
            "name": "earns_reputation"
        },
        {
            "id": 2,
            "name": "is_perfectionist"
        },
        {
            "id": 3,
            "name": "varnishes_wood"
        },
        {
            "id": 4,
            "name": "works_wood"
        },
        {
            "id": 5,
            "name": "builds_cabinets"
        },
        {
            "id": 6,
            "name": "skilled_craftsman"
        },
        {
            "id": 7,
            "name": "restore_antiques"
        },
        {
            "id": 8,
            "name": "preserve_traditional_techniques"
        },
        {
            "id": 9,
            "name": "work_with_resin"
        },
        {
            "id": 10,
            "name": "creates_masterpieces"
        },
        {
            "id": 11,
            "name": "loves_detail"
        },
        {
            "id": 12,
            "name": "values_quality"
        },
        {
            "id": 13,
            "name": "makes_art"
        },
        {
            "id": 14,
            "name": "uses_mastic"
        },
        {
            "id": 15,
            "name": "fixes_furniture"
        },
        {
            "id": 16,
            "name": "learns_from_ancestors"
        },
        {
            "id": 17,
            "name": "is_restorer"
        },
        {
            "id": 18,
            "name": "uses_turpentine"
        },
        {
            "id": 19,
            "name": "learns_traditions"
        },
        {
            "id": 20,
            "name": "develops_expertise"
        },
        {
            "id": 21,
            "name": "enjoys_precision"
        },
        {
            "id": 22,
            "name": "cares_deeply"
        },
        {
            "id": 23,
            "name": "learns_trade"
        },
        {
            "id": 24,
            "name": "paints_fine"
        },
        {
            "id": 25,
            "name": "has_expertise"
        },
        {
            "id": 26,
            "name": "owns_workshop"
        }
    ],
    "subject_name": "Kevin",
    "subject_category": "human",
    "keyword": "mastic",
    "all_facts": [
        {
            "id": 0,
            "subject": "Kevin",
            "text": "Kevin has patience.",
            "fol": "p_0(Kevin)",
            "str_fol": "has_patience(Kevin)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Kevin",
            "text": "Kevin does not earn a reputation.",
            "fol": "\u00acp_1(Kevin)",
            "str_fol": "\u00acearns_reputation(Kevin)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Kevin",
            "text": "Kevin is a perfectionist.",
            "fol": "p_2(Kevin)",
            "str_fol": "is_perfectionist(Kevin)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Kevin",
            "text": "Kevin varnishes wood.",
            "fol": "p_3(Kevin)",
            "str_fol": "varnishes_wood(Kevin)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Kevin",
            "text": "Kevin works with wood.",
            "fol": "p_4(Kevin)",
            "str_fol": "works_wood(Kevin)",
            "negation": false
        },
        {
            "id": 5,
            "subject": "Kevin",
            "text": "Kevin does not build cabinets.",
            "fol": "\u00acp_5(Kevin)",
            "str_fol": "\u00acbuilds_cabinets(Kevin)",
            "negation": true
        },
        {
            "id": 6,
            "subject": "Kevin",
            "text": "Kevin fixes furniture.",
            "fol": "p_15(Kevin)",
            "str_fol": "fixes_furniture(Kevin)",
            "negation": false
        },
        {
            "id": 7,
            "subject": "Kevin",
            "text": "Kevin uses mastic.",
            "fol": "p_14(Kevin)",
            "str_fol": "uses_mastic(Kevin)",
            "negation": false
        },
        {
            "id": 8,
            "subject": "Kevin",
            "text": "Kevin does not restore antiques.",
            "fol": "\u00acp_7(Kevin)",
            "str_fol": "\u00acrestore_antiques(Kevin)",
            "negation": true
        },
        {
            "id": 9,
            "subject": "Kevin",
            "text": "Kevin values quality.",
            "fol": "p_12(Kevin)",
            "str_fol": "values_quality(Kevin)",
            "negation": false
        },
        {
            "id": 10,
            "subject": "Kevin",
            "text": "Kevin loves detail.",
            "fol": "p_11(Kevin)",
            "str_fol": "loves_detail(Kevin)",
            "negation": false
        },
        {
            "id": 11,
            "subject": "Kevin",
            "text": "Kevin does not create masterpieces.",
            "fol": "\u00acp_10(Kevin)",
            "str_fol": "\u00accreates_masterpieces(Kevin)",
            "negation": true
        },
        {
            "id": 12,
            "subject": "Kevin",
            "text": "Kevin does not work with resin.",
            "fol": "\u00acp_9(Kevin)",
            "str_fol": "\u00acwork_with_resin(Kevin)",
            "negation": true
        },
        {
            "id": 13,
            "subject": "Kevin",
            "text": "Kevin preserves traditional techniques.",
            "fol": "p_8(Kevin)",
            "str_fol": "preserve_traditional_techniques(Kevin)",
            "negation": false
        },
        {
            "id": 14,
            "subject": "Kevin",
            "text": "Kevin is a skilled craftsman.",
            "fol": "p_6(Kevin)",
            "str_fol": "skilled_craftsman(Kevin)",
            "negation": false
        }
    ],
    "context_facts": [
        {
            "id": 4,
            "subject": "Kevin",
            "text": "Kevin works with wood.",
            "fol": "p_4(Kevin)",
            "str_fol": "works_wood(Kevin)",
            "negation": false
        },
        {
            "id": 5,
            "subject": "Kevin",
            "text": "Kevin does not build cabinets.",
            "fol": "\u00acp_5(Kevin)",
            "str_fol": "\u00acbuilds_cabinets(Kevin)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Kevin",
            "text": "Kevin varnishes wood.",
            "fol": "p_3(Kevin)",
            "str_fol": "varnishes_wood(Kevin)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Kevin",
            "text": "Kevin is a perfectionist.",
            "fol": "p_2(Kevin)",
            "str_fol": "is_perfectionist(Kevin)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Kevin",
            "text": "Kevin does not earn a reputation.",
            "fol": "\u00acp_1(Kevin)",
            "str_fol": "\u00acearns_reputation(Kevin)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Kevin",
            "text": "Kevin has patience.",
            "fol": "p_0(Kevin)",
            "str_fol": "has_patience(Kevin)",
            "negation": false
        }
    ],
    "context_rules": [
        {
            "id": 8,
            "text": "If Kevin works with wood, then he either builds cabinets or fixes furniture.",
            "fol": "p_4(Kevin) \u2192 (p_5(Kevin) \u2228 p_15(Kevin))",
            "str_fol": "works_wood(Kevin) \u2192 (builds_cabinets(Kevin) \u2228 fixes_furniture(Kevin))"
        },
        {
            "id": 7,
            "text": "If Kevin varnishes wood, then he uses mastic.",
            "fol": "p_3(Kevin) \u2192 p_14(Kevin)",
            "str_fol": "varnishes_wood(Kevin) \u2192 uses_mastic(Kevin)"
        },
        {
            "id": 6,
            "text": "If Kevin uses mastic, then he either fixes furniture or restores antiques, but not both.",
            "fol": "p_14(Kevin) \u2192 (p_15(Kevin) \u2295 p_7(Kevin))",
            "str_fol": "uses_mastic(Kevin) \u2192 (fixes_furniture(Kevin) \u2295 restore_antiques(Kevin))"
        },
        {
            "id": 5,
            "text": "All perfectionists value quality.",
            "fol": "\u2200x (p_2(x) \u2192 p_12(x))",
            "str_fol": "\u2200x (is_perfectionist(x) \u2192 values_quality(x))"
        },
        {
            "id": 4,
            "text": "If Kevin values quality, then he makes art and loves detail.",
            "fol": "p_12(Kevin) \u2192 (p_13(Kevin) \u2227 p_11(Kevin))",
            "str_fol": "values_quality(Kevin) \u2192 (makes_art(Kevin) \u2227 loves_detail(Kevin))"
        },
        {
            "id": 3,
            "text": "If someone loves detail and creates masterpieces, then they earn a reputation.",
            "fol": "\u2200x ((p_11(x) \u2227 p_10(x)) \u2192 p_1(x))",
            "str_fol": "\u2200x ((loves_detail(x) \u2227 creates_masterpieces(x)) \u2192 earns_reputation(x))"
        },
        {
            "id": 2,
            "text": "If Kevin has patience and works with resin, then he creates masterpieces.",
            "fol": "(p_0(Kevin) \u2227 p_9(Kevin)) \u2192 p_10(Kevin)",
            "str_fol": "(has_patience(Kevin) \u2227 work_with_resin(Kevin)) \u2192 creates_masterpieces(Kevin)"
        },
        {
            "id": 1,
            "text": "Kevin either works with resin or preserves traditional techniques, but not necessarily both.",
            "fol": "p_9(Kevin) \u2295 p_8(Kevin)",
            "str_fol": "work_with_resin(Kevin) \u2295 preserve_traditional_techniques(Kevin)"
        },
        {
            "id": 0,
            "text": "If Kevin is a skilled craftsman, then he either restores antiques or preserves traditional techniques (or both).",
            "fol": "p_6(Kevin) \u2192 (p_7(Kevin) \u2228 p_8(Kevin))",
            "str_fol": "skilled_craftsman(Kevin) \u2192 (restore_antiques(Kevin) \u2228 preserve_traditional_techniques(Kevin))"
        }
    ],
    "context": [
        {
            "id": 4,
            "subject": "Kevin",
            "text": "Kevin works with wood.",
            "fol": "p_4(Kevin)",
            "str_fol": "works_wood(Kevin)",
            "negation": false
        },
        {
            "id": 5,
            "subject": "Kevin",
            "text": "Kevin does not build cabinets.",
            "fol": "\u00acp_5(Kevin)",
            "str_fol": "\u00acbuilds_cabinets(Kevin)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Kevin",
            "text": "Kevin varnishes wood.",
            "fol": "p_3(Kevin)",
            "str_fol": "varnishes_wood(Kevin)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Kevin",
            "text": "Kevin is a perfectionist.",
            "fol": "p_2(Kevin)",
            "str_fol": "is_perfectionist(Kevin)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Kevin",
            "text": "Kevin does not earn a reputation.",
            "fol": "\u00acp_1(Kevin)",
            "str_fol": "\u00acearns_reputation(Kevin)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Kevin",
            "text": "Kevin has patience.",
            "fol": "p_0(Kevin)",
            "str_fol": "has_patience(Kevin)",
            "negation": false
        },
        {
            "id": 8,
            "text": "If Kevin works with wood, then he either builds cabinets or fixes furniture.",
            "fol": "p_4(Kevin) \u2192 (p_5(Kevin) \u2228 p_15(Kevin))",
            "str_fol": "works_wood(Kevin) \u2192 (builds_cabinets(Kevin) \u2228 fixes_furniture(Kevin))"
        },
        {
            "id": 7,
            "text": "If Kevin varnishes wood, then he uses mastic.",
            "fol": "p_3(Kevin) \u2192 p_14(Kevin)",
            "str_fol": "varnishes_wood(Kevin) \u2192 uses_mastic(Kevin)"
        },
        {
            "id": 6,
            "text": "If Kevin uses mastic, then he either fixes furniture or restores antiques, but not both.",
            "fol": "p_14(Kevin) \u2192 (p_15(Kevin) \u2295 p_7(Kevin))",
            "str_fol": "uses_mastic(Kevin) \u2192 (fixes_furniture(Kevin) \u2295 restore_antiques(Kevin))"
        },
        {
            "id": 5,
            "text": "All perfectionists value quality.",
            "fol": "\u2200x (p_2(x) \u2192 p_12(x))",
            "str_fol": "\u2200x (is_perfectionist(x) \u2192 values_quality(x))"
        },
        {
            "id": 4,
            "text": "If Kevin values quality, then he makes art and loves detail.",
            "fol": "p_12(Kevin) \u2192 (p_13(Kevin) \u2227 p_11(Kevin))",
            "str_fol": "values_quality(Kevin) \u2192 (makes_art(Kevin) \u2227 loves_detail(Kevin))"
        },
        {
            "id": 3,
            "text": "If someone loves detail and creates masterpieces, then they earn a reputation.",
            "fol": "\u2200x ((p_11(x) \u2227 p_10(x)) \u2192 p_1(x))",
            "str_fol": "\u2200x ((loves_detail(x) \u2227 creates_masterpieces(x)) \u2192 earns_reputation(x))"
        },
        {
            "id": 2,
            "text": "If Kevin has patience and works with resin, then he creates masterpieces.",
            "fol": "(p_0(Kevin) \u2227 p_9(Kevin)) \u2192 p_10(Kevin)",
            "str_fol": "(has_patience(Kevin) \u2227 work_with_resin(Kevin)) \u2192 creates_masterpieces(Kevin)"
        },
        {
            "id": 1,
            "text": "Kevin either works with resin or preserves traditional techniques, but not necessarily both.",
            "fol": "p_9(Kevin) \u2295 p_8(Kevin)",
            "str_fol": "work_with_resin(Kevin) \u2295 preserve_traditional_techniques(Kevin)"
        },
        {
            "id": 0,
            "text": "If Kevin is a skilled craftsman, then he either restores antiques or preserves traditional techniques (or both).",
            "fol": "p_6(Kevin) \u2192 (p_7(Kevin) \u2228 p_8(Kevin))",
            "str_fol": "skilled_craftsman(Kevin) \u2192 (restore_antiques(Kevin) \u2228 preserve_traditional_techniques(Kevin))"
        }
    ],
    "context_fol": "p_4(Kevin)\n\u00acp_5(Kevin)\np_3(Kevin)\np_2(Kevin)\n\u00acp_1(Kevin)\np_0(Kevin)\np_4(Kevin) \u2192 (p_5(Kevin) \u2228 p_15(Kevin))\np_3(Kevin) \u2192 p_14(Kevin)\np_14(Kevin) \u2192 (p_15(Kevin) \u2295 p_7(Kevin))\n\u2200x (p_2(x) \u2192 p_12(x))\np_12(Kevin) \u2192 (p_13(Kevin) \u2227 p_11(Kevin))\n\u2200x ((p_11(x) \u2227 p_10(x)) \u2192 p_1(x))\n(p_0(Kevin) \u2227 p_9(Kevin)) \u2192 p_10(Kevin)\np_9(Kevin) \u2295 p_8(Kevin)\np_6(Kevin) \u2192 (p_7(Kevin) \u2228 p_8(Kevin))",
    "conclusion": {
        "id": 14,
        "subject": "Kevin",
        "text": "Kevin is a skilled craftsman.",
        "fol": "p_6(Kevin)",
        "str_fol": "skilled_craftsman(Kevin)",
        "negation": false
    },
    "initial_answer": "Uncertain",
    "initial_goal": "p_6(Kevin)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 4,
                    "subject": "Kevin",
                    "text": "Kevin works with wood.",
                    "fol": "p_4(Kevin)",
                    "str_fol": "works_wood(Kevin)",
                    "negation": false
                },
                {
                    "id": 5,
                    "subject": "Kevin",
                    "text": "Kevin does not build cabinets.",
                    "fol": "\u00acp_5(Kevin)",
                    "str_fol": "\u00acbuilds_cabinets(Kevin)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 8,
                    "text": "If Kevin works with wood, then he either builds cabinets or fixes furniture.",
                    "fol": "p_4(Kevin) \u2192 (p_5(Kevin) \u2228 p_15(Kevin))",
                    "str_fol": "works_wood(Kevin) \u2192 (builds_cabinets(Kevin) \u2228 fixes_furniture(Kevin))"
                }
            ],
            "conclusion": {
                "id": 6,
                "subject": "Kevin",
                "text": "Kevin fixes furniture.",
                "fol": "p_15(Kevin)",
                "str_fol": "fixes_furniture(Kevin)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 3,
                    "subject": "Kevin",
                    "text": "Kevin varnishes wood.",
                    "fol": "p_3(Kevin)",
                    "str_fol": "varnishes_wood(Kevin)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 7,
                    "text": "If Kevin varnishes wood, then he uses mastic.",
                    "fol": "p_3(Kevin) \u2192 p_14(Kevin)",
                    "str_fol": "varnishes_wood(Kevin) \u2192 uses_mastic(Kevin)"
                }
            ],
            "conclusion": {
                "id": 7,
                "subject": "Kevin",
                "text": "Kevin uses mastic.",
                "fol": "p_14(Kevin)",
                "str_fol": "uses_mastic(Kevin)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 7,
                    "subject": "Kevin",
                    "text": "Kevin uses mastic.",
                    "fol": "p_14(Kevin)",
                    "str_fol": "uses_mastic(Kevin)",
                    "negation": false
                },
                {
                    "id": 6,
                    "subject": "Kevin",
                    "text": "Kevin fixes furniture.",
                    "fol": "p_15(Kevin)",
                    "str_fol": "fixes_furniture(Kevin)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 6,
                    "text": "If Kevin uses mastic, then he either fixes furniture or restores antiques, but not both.",
                    "fol": "p_14(Kevin) \u2192 (p_15(Kevin) \u2295 p_7(Kevin))",
                    "str_fol": "uses_mastic(Kevin) \u2192 (fixes_furniture(Kevin) \u2295 restore_antiques(Kevin))"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Kevin",
                "text": "Kevin does not restore antiques.",
                "fol": "\u00acp_7(Kevin)",
                "str_fol": "\u00acrestore_antiques(Kevin)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 2,
                    "subject": "Kevin",
                    "text": "Kevin is a perfectionist.",
                    "fol": "p_2(Kevin)",
                    "str_fol": "is_perfectionist(Kevin)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "All perfectionists value quality.",
                    "fol": "\u2200x (p_2(x) \u2192 p_12(x))",
                    "str_fol": "\u2200x (is_perfectionist(x) \u2192 values_quality(x))"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Kevin",
                "text": "Kevin values quality.",
                "fol": "p_12(Kevin)",
                "str_fol": "values_quality(Kevin)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 9,
                    "subject": "Kevin",
                    "text": "Kevin values quality.",
                    "fol": "p_12(Kevin)",
                    "str_fol": "values_quality(Kevin)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "If Kevin values quality, then he makes art and loves detail.",
                    "fol": "p_12(Kevin) \u2192 (p_13(Kevin) \u2227 p_11(Kevin))",
                    "str_fol": "values_quality(Kevin) \u2192 (makes_art(Kevin) \u2227 loves_detail(Kevin))"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Kevin",
                "text": "Kevin loves detail.",
                "fol": "p_11(Kevin)",
                "str_fol": "loves_detail(Kevin)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 10,
                    "subject": "Kevin",
                    "text": "Kevin loves detail.",
                    "fol": "p_11(Kevin)",
                    "str_fol": "loves_detail(Kevin)",
                    "negation": false
                },
                {
                    "id": 1,
                    "subject": "Kevin",
                    "text": "Kevin does not earn a reputation.",
                    "fol": "\u00acp_1(Kevin)",
                    "str_fol": "\u00acearns_reputation(Kevin)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "If someone loves detail and creates masterpieces, then they earn a reputation.",
                    "fol": "\u2200x ((p_11(x) \u2227 p_10(x)) \u2192 p_1(x))",
                    "str_fol": "\u2200x ((loves_detail(x) \u2227 creates_masterpieces(x)) \u2192 earns_reputation(x))"
                }
            ],
            "conclusion": {
                "id": 11,
                "subject": "Kevin",
                "text": "Kevin does not create masterpieces.",
                "fol": "\u00acp_10(Kevin)",
                "str_fol": "\u00accreates_masterpieces(Kevin)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 0,
                    "subject": "Kevin",
                    "text": "Kevin has patience.",
                    "fol": "p_0(Kevin)",
                    "str_fol": "has_patience(Kevin)",
                    "negation": false
                },
                {
                    "id": 11,
                    "subject": "Kevin",
                    "text": "Kevin does not create masterpieces.",
                    "fol": "\u00acp_10(Kevin)",
                    "str_fol": "\u00accreates_masterpieces(Kevin)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "If Kevin has patience and works with resin, then he creates masterpieces.",
                    "fol": "(p_0(Kevin) \u2227 p_9(Kevin)) \u2192 p_10(Kevin)",
                    "str_fol": "(has_patience(Kevin) \u2227 work_with_resin(Kevin)) \u2192 creates_masterpieces(Kevin)"
                }
            ],
            "conclusion": {
                "id": 12,
                "subject": "Kevin",
                "text": "Kevin does not work with resin.",
                "fol": "\u00acp_9(Kevin)",
                "str_fol": "\u00acwork_with_resin(Kevin)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 12,
                    "subject": "Kevin",
                    "text": "Kevin does not work with resin.",
                    "fol": "\u00acp_9(Kevin)",
                    "str_fol": "\u00acwork_with_resin(Kevin)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "Kevin either works with resin or preserves traditional techniques, but not necessarily both.",
                    "fol": "p_9(Kevin) \u2295 p_8(Kevin)",
                    "str_fol": "work_with_resin(Kevin) \u2295 preserve_traditional_techniques(Kevin)"
                }
            ],
            "conclusion": {
                "id": 13,
                "subject": "Kevin",
                "text": "Kevin preserves traditional techniques.",
                "fol": "p_8(Kevin)",
                "str_fol": "preserve_traditional_techniques(Kevin)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 8,
                    "subject": "Kevin",
                    "text": "Kevin does not restore antiques.",
                    "fol": "\u00acp_7(Kevin)",
                    "str_fol": "\u00acrestore_antiques(Kevin)",
                    "negation": true
                },
                {
                    "id": 13,
                    "subject": "Kevin",
                    "text": "Kevin preserves traditional techniques.",
                    "fol": "p_8(Kevin)",
                    "str_fol": "preserve_traditional_techniques(Kevin)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "If Kevin is a skilled craftsman, then he either restores antiques or preserves traditional techniques (or both).",
                    "fol": "p_6(Kevin) \u2192 (p_7(Kevin) \u2228 p_8(Kevin))",
                    "str_fol": "skilled_craftsman(Kevin) \u2192 (restore_antiques(Kevin) \u2228 preserve_traditional_techniques(Kevin))"
                }
            ],
            "conclusion": null
        }
    ],
    "proof_trace": null,
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "UNCERTAIN",
            "Edited Assumptions": "p_4(Kevin)\n\u00acp_5(Kevin)\np_3(Kevin)\np_2(Kevin)\n\u00acp_1(Kevin)\np_0(Kevin)\np_4(Kevin) \u2192 (p_5(Kevin) \u2228 p_15(Kevin))\np_3(Kevin) \u2192 p_14(Kevin)\np_14(Kevin) \u2192 (p_15(Kevin) \u2295 p_7(Kevin))\n\u2200x (p_2(x) \u2192 p_12(x))\np_12(Kevin) \u2192 (p_13(Kevin) \u2227 p_11(Kevin))\n\u2200x ((p_11(x) \u2227 p_10(x)) \u2192 p_1(x))\n(p_0(Kevin) \u2227 p_9(Kevin)) \u2192 p_10(Kevin)\np_9(Kevin) \u2295 p_8(Kevin)\np_6(Kevin) \u2192 (p_7(Kevin) \u2228 p_8(Kevin))",
            "Initial Goal": "p_6(Kevin)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_4(Kevin).",
                    "-p_5(Kevin).",
                    "p_3(Kevin).",
                    "p_2(Kevin).",
                    "-p_1(Kevin).",
                    "p_0(Kevin).",
                    "p_4(Kevin) -> (p_5(Kevin) | p_15(Kevin)).",
                    "p_3(Kevin) -> p_14(Kevin).",
                    "p_14(Kevin) -> (-(p_15(Kevin) <-> p_7(Kevin))).",
                    "all x (p_2(x) -> p_12(x)).",
                    "p_12(Kevin) -> (p_13(Kevin) & p_11(Kevin)).",
                    "all x ((p_11(x) & p_10(x)) -> p_1(x)).",
                    "(p_0(Kevin) & p_9(Kevin)) -> p_10(Kevin).",
                    "-(p_9(Kevin) <-> p_8(Kevin)).",
                    "p_6(Kevin) -> (p_7(Kevin) | p_8(Kevin)).",
                    "p_15(Kevin) -> p_6(Kevin)."
                ],
                "formulas(goals)": [
                    "p_6(Kevin)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "p_15(Kevin) \u2192 p_6(Kevin)"
                ]
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_4(Kevin)\n\u00acp_5(Kevin)\np_3(Kevin)\np_2(Kevin)\n\u00acp_1(Kevin)\np_0(Kevin)\np_4(Kevin) \u2192 (p_5(Kevin) \u2228 p_15(Kevin))\np_3(Kevin) \u2192 p_14(Kevin)\np_14(Kevin) \u2192 (p_15(Kevin) \u2295 p_7(Kevin))\n\u2200x (p_2(x) \u2192 p_12(x))\np_12(Kevin) \u2192 (p_13(Kevin) \u2227 p_11(Kevin))\n\u2200x ((p_11(x) \u2227 p_10(x)) \u2192 p_1(x))\n(p_0(Kevin) \u2227 p_9(Kevin)) \u2192 p_10(Kevin)\np_9(Kevin) \u2295 p_8(Kevin)\np_15(Kevin) \u2192 \u00acp_6(Kevin)",
            "Initial Goal": "p_6(Kevin)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_4(Kevin)",
                    "-p_5(Kevin)",
                    "p_3(Kevin)",
                    "p_2(Kevin)",
                    "-p_1(Kevin)",
                    "p_0(Kevin)",
                    "p_4(Kevin) -> (p_5(Kevin) | p_15(Kevin))",
                    "p_3(Kevin) -> p_14(Kevin)",
                    "p_14(Kevin) -> (-(p_15(Kevin) <-> p_7(Kevin)))",
                    "all x (p_2(x) -> p_12(x))",
                    "p_12(Kevin) -> (p_13(Kevin) & p_11(Kevin))",
                    "all x ((p_11(x) & p_10(x)) -> p_1(x))",
                    "(p_0(Kevin) & p_9(Kevin)) -> p_10(Kevin)",
                    "(-(p_9(Kevin) <-> p_8(Kevin)))",
                    "p_15(Kevin) -> -p_6(Kevin)"
                ],
                "formulas(goals)": [
                    "-p_6(Kevin)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_6(Kevin) \u2192 (p_7(Kevin) \u2228 p_8(Kevin))"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_15(Kevin) \u2192 \u00acp_6(Kevin)"
                ]
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_4(Kevin)\n\u00acp_5(Kevin)\np_3(Kevin)\np_2(Kevin)\n\u00acp_1(Kevin)\np_0(Kevin)\np_4(Kevin) \u2192 (p_5(Kevin) \u2228 p_15(Kevin))\np_3(Kevin) \u2192 p_14(Kevin)\np_14(Kevin) \u2192 ((p_15(Kevin) \u2228 p_7(Kevin)) \u2227 (\u00acp_15(Kevin) \u2228 \u00acp_7(Kevin)))\n\u2200x (p_2(x) \u2192 p_12(x))\np_12(Kevin) \u2192 (p_13(Kevin) \u2227 p_11(Kevin))\n\u2200x ((p_11(x) \u2227 p_10(x)) \u2192 p_1(x))\n(p_0(Kevin) \u2227 p_9(Kevin)) \u2192 p_10(Kevin)\np_9(Kevin) \u2295 p_8(Kevin)\np_15(Kevin) \u2192 \u00acp_6(Kevin)\np_15(Kevin)",
            "Initial Goal": "p_6(Kevin)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_4(Kevin).",
                    "-p_5(Kevin).",
                    "p_3(Kevin).",
                    "p_2(Kevin).",
                    "-p_1(Kevin).",
                    "p_0(Kevin).",
                    "p_4(Kevin) -> (p_5(Kevin) | p_15(Kevin)).",
                    "p_3(Kevin) -> p_14(Kevin).",
                    "p_14(Kevin) -> ((p_15(Kevin) | p_7(Kevin)) & (-p_15(Kevin) | -p_7(Kevin))).",
                    "all x (p_2(x) -> p_12(x)).",
                    "p_12(Kevin) -> (p_13(Kevin) & p_11(Kevin)).",
                    "all x ((p_11(x) & p_10(x)) -> p_1(x)).",
                    "(p_0(Kevin) & p_9(Kevin)) -> p_10(Kevin).",
                    "-(p_9(Kevin) <-> p_8(Kevin)).",
                    "p_15(Kevin) -> -p_6(Kevin).",
                    "p_15(Kevin)."
                ],
                "formulas(goals)": [
                    "-p_6(Kevin)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_15(Kevin)"
                ],
                "added_rules": [
                    "p_14(Kevin) \u2192 ((p_15(Kevin) \u2228 p_7(Kevin)) \u2227 (\u00acp_15(Kevin) \u2228 \u00acp_7(Kevin)))"
                ]
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_4(Kevin)\n\u00acp_5(Kevin)\np_3(Kevin)\np_2(Kevin)\n\u00acp_1(Kevin)\np_0(Kevin)\np_4(Kevin) \u2192 (p_5(Kevin) \u2228 p_15(Kevin))\np_3(Kevin) \u2192 p_14(Kevin)\np_14(Kevin) \u2192 ((p_15(Kevin) \u2228 p_7(Kevin)) \u2227 (\u00acp_15(Kevin) \u2228 \u00acp_7(Kevin)))\n\u2200x (p_2(x) \u2192 p_12(x))\np_12(Kevin) \u2192 (p_13(Kevin) \u2227 p_11(Kevin))\n\u2200x ((p_11(x) \u2227 p_10(x)) \u2192 p_1(x))\n(p_0(Kevin) \u2227 p_9(Kevin)) \u2192 p_10(Kevin)\np_9(Kevin) \u2295 p_8(Kevin)\np_15(Kevin) \u2192 \u00acp_6(Kevin)\np_15(Kevin)\np_6(Kevin) \u2192 \u00acp_15(Kevin)\np_3(Kevin) \u2192 (p_14(Kevin) \u2227 p_3(Kevin))",
            "Initial Goal": "p_6(Kevin)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_4(Kevin)",
                    "-p_5(Kevin)",
                    "p_3(Kevin)",
                    "p_2(Kevin)",
                    "-p_1(Kevin)",
                    "p_0(Kevin)",
                    "p_4(Kevin) -> (p_5(Kevin) | p_15(Kevin))",
                    "p_3(Kevin) -> p_14(Kevin)",
                    "p_14(Kevin) -> ((p_15(Kevin) | p_7(Kevin)) & (-p_15(Kevin) | -p_7(Kevin)))",
                    "all x (p_2(x) -> p_12(x))",
                    "p_12(Kevin) -> (p_13(Kevin) & p_11(Kevin))",
                    "all x ((p_11(x) & p_10(x)) -> p_1(x))",
                    "(p_0(Kevin) & p_9(Kevin)) -> p_10(Kevin)",
                    "-(p_9(Kevin) <-> p_8(Kevin))",
                    "p_15(Kevin) -> -p_6(Kevin)",
                    "p_15(Kevin)",
                    "p_6(Kevin) -> -p_15(Kevin)",
                    "p_3(Kevin) -> (p_14(Kevin) & p_3(Kevin))"
                ],
                "formulas(goals)": [
                    "-p_6(Kevin)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "p_6(Kevin) \u2192 \u00acp_15(Kevin)",
                    "p_3(Kevin) \u2192 (p_14(Kevin) \u2227 p_3(Kevin))"
                ]
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_4(Kevin)\n\u00acp_5(Kevin)\np_3(Kevin)\np_2(Kevin)\n\u00acp_1(Kevin)\np_0(Kevin)\np_4(Kevin) \u2192 (p_5(Kevin) \u2228 p_15(Kevin))\np_3(Kevin) \u2192 p_14(Kevin)\np_14(Kevin) \u2192 ((p_15(Kevin) \u2228 p_7(Kevin)) \u2227 (\u00acp_15(Kevin) \u2228 \u00acp_7(Kevin)))\n\u2200x (p_2(x) \u2192 p_12(x))\np_12(Kevin) \u2192 (p_13(Kevin) \u2227 p_11(Kevin))\n\u2200x (\u00acp_1(x) \u2192 (\u00acp_11(x) \u2228 \u00acp_10(x)))\np_0(Kevin) \u2192 (p_9(Kevin) \u2192 p_10(Kevin))\np_9(Kevin) \u2295 p_8(Kevin)\np_15(Kevin) \u2192 \u00acp_6(Kevin)\np_15(Kevin)\np_6(Kevin) \u2192 \u00acp_15(Kevin)\np_3(Kevin) \u2192 (p_14(Kevin) \u2227 p_3(Kevin))\n\u00acp_6(Kevin)\np_14(Kevin)",
            "Initial Goal": "p_6(Kevin)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_4(Kevin)",
                    "-p_5(Kevin)",
                    "p_3(Kevin)",
                    "p_2(Kevin)",
                    "-p_1(Kevin)",
                    "p_0(Kevin)",
                    "p_4(Kevin) -> (p_5(Kevin) | p_15(Kevin))",
                    "p_3(Kevin) -> p_14(Kevin)",
                    "p_14(Kevin) -> ((p_15(Kevin) | p_7(Kevin)) & (-p_15(Kevin) | -p_7(Kevin)))",
                    "all x (p_2(x) -> p_12(x))",
                    "p_12(Kevin) -> (p_13(Kevin) & p_11(Kevin))",
                    "all x (-p_1(x) -> (-p_11(x) | -p_10(x)))",
                    "p_0(Kevin) -> (p_9(Kevin) -> p_10(Kevin))",
                    "-(p_9(Kevin) <-> p_8(Kevin))",
                    "p_15(Kevin) -> -p_6(Kevin)",
                    "p_15(Kevin)",
                    "p_6(Kevin) -> -p_15(Kevin)",
                    "p_3(Kevin) -> (p_14(Kevin) & p_3(Kevin))",
                    "-p_6(Kevin)",
                    "p_14(Kevin)"
                ],
                "formulas(goals)": [
                    "-p_6(Kevin)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u2200x ((p_11(x) \u2227 p_10(x)) \u2192 p_1(x))",
                    "(p_0(Kevin) \u2227 p_9(Kevin)) \u2192 p_10(Kevin)"
                ],
                "added_facts": [
                    "\u00acp_6(Kevin)",
                    "p_14(Kevin)"
                ],
                "added_rules": [
                    "\u2200x (\u00acp_1(x) \u2192 (\u00acp_11(x) \u2228 \u00acp_10(x)))",
                    "p_0(Kevin) \u2192 (p_9(Kevin) \u2192 p_10(Kevin))"
                ]
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_4(Kevin)\n\u00acp_5(Kevin)\np_3(Kevin)\np_2(Kevin)\n\u00acp_1(Kevin)\np_0(Kevin)\np_4(Kevin) \u2192 (p_5(Kevin) \u2228 p_15(Kevin))\np_3(Kevin) \u2192 p_14(Kevin)\np_14(Kevin) \u2192 ((p_15(Kevin) \u2228 p_7(Kevin)) \u2227 (\u00acp_15(Kevin) \u2228 \u00acp_7(Kevin)))\n\u2200x (p_2(x) \u2192 p_12(x))\n\u2200x (\u00acp_1(x) \u2192 (\u00acp_11(x) \u2228 \u00acp_10(x)))\np_15(Kevin) \u2192 \u00acp_6(Kevin)\np_15(Kevin)\np_6(Kevin) \u2192 \u00acp_15(Kevin)\np_3(Kevin) \u2192 (p_14(Kevin) \u2227 p_3(Kevin))\n\u00acp_6(Kevin)\np_14(Kevin)\np_4(Kevin) \u2192 p_15(Kevin)\np_12(Kevin) \u2192 p_13(Kevin)\np_12(Kevin) \u2192 p_11(Kevin)\n\u00acp_11(Kevin) \u2228 \u00acp_10(Kevin)\np_0(Kevin) \u2192 (\u00acp_9(Kevin) \u2228 p_10(Kevin))\np_6(Kevin) \u2192 p_5(Kevin)\np_9(Kevin) \u2228 p_8(Kevin)\n\u00acp_9(Kevin) \u2228 \u00acp_8(Kevin)",
            "Initial Goal": "p_6(Kevin)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_4(Kevin)",
                    "-p_5(Kevin)",
                    "p_3(Kevin)",
                    "p_2(Kevin)",
                    "-p_1(Kevin)",
                    "p_0(Kevin)",
                    "p_4(Kevin) -> (p_5(Kevin) | p_15(Kevin))",
                    "p_3(Kevin) -> p_14(Kevin)",
                    "p_14(Kevin) -> ((p_15(Kevin) | p_7(Kevin)) & (-p_15(Kevin) | -p_7(Kevin)))",
                    "all x (p_2(x) -> p_12(x))",
                    "all x (-p_1(x) -> (-p_11(x) | -p_10(x)))",
                    "p_15(Kevin) -> -p_6(Kevin)",
                    "p_15(Kevin)",
                    "p_6(Kevin) -> -p_15(Kevin)",
                    "p_3(Kevin) -> (p_14(Kevin) & p_3(Kevin))",
                    "-p_6(Kevin)",
                    "p_14(Kevin)",
                    "p_4(Kevin) -> p_15(Kevin)",
                    "p_12(Kevin) -> p_13(Kevin)",
                    "p_12(Kevin) -> p_11(Kevin)",
                    "-p_11(Kevin) | -p_10(Kevin)",
                    "p_0(Kevin) -> (-p_9(Kevin) | p_10(Kevin))",
                    "p_6(Kevin) -> p_5(Kevin)",
                    "p_9(Kevin) | p_8(Kevin)",
                    "-p_9(Kevin) | -p_8(Kevin)"
                ],
                "formulas(goals)": [
                    "-p_6(Kevin)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_12(Kevin) \u2192 (p_13(Kevin) \u2227 p_11(Kevin))",
                    "p_9(Kevin) \u2295 p_8(Kevin)"
                ],
                "added_facts": [
                    "\u00acp_11(Kevin) \u2228 \u00acp_10(Kevin)"
                ],
                "added_rules": [
                    "p_4(Kevin) \u2192 p_15(Kevin)",
                    "p_12(Kevin) \u2192 p_13(Kevin)",
                    "p_12(Kevin) \u2192 p_11(Kevin)",
                    "p_0(Kevin) \u2192 (\u00acp_9(Kevin) \u2228 p_10(Kevin))",
                    "p_6(Kevin) \u2192 p_5(Kevin)",
                    "p_9(Kevin) \u2228 p_8(Kevin)",
                    "\u00acp_9(Kevin) \u2228 \u00acp_8(Kevin)"
                ]
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_4(Kevin).\n\u00acp_5(Kevin).\np_3(Kevin).\np_2(Kevin).\n\u00acp_1(Kevin).\np_0(Kevin).\np_4(Kevin) \u2192 (p_5(Kevin) \u2228 p_15(Kevin)).\np_3(Kevin) \u2192 p_14(Kevin).\np_14(Kevin) \u2192 (p_15(Kevin) \u2228 p_7(Kevin)).\np_14(Kevin) \u2192 (\u00acp_15(Kevin) \u2228 \u00acp_7(Kevin)).\n\u2200x (p_2(x) \u2192 p_12(x)).\n\u2200x (\u00acp_1(x) \u2192 (\u00acp_11(x) \u2228 \u00acp_10(x))).\np_15(Kevin) \u2192 \u00acp_6(Kevin).\np_15(Kevin).\np_6(Kevin) \u2192 \u00acp_15(Kevin).\np_3(Kevin) \u2192 (p_14(Kevin) \u2227 p_3(Kevin)).\n\u00acp_6(Kevin).\np_14(Kevin).\np_4(Kevin) \u2192 p_15(Kevin).\np_12(Kevin) \u2192 p_13(Kevin).\np_12(Kevin) \u2192 p_11(Kevin).\n\u00acp_11(Kevin) \u2228 \u00acp_10(Kevin).\np_0(Kevin) \u2192 (\u00acp_9(Kevin) \u2228 p_10(Kevin)).\np_6(Kevin) \u2192 p_5(Kevin).\np_9(Kevin) \u2228 p_8(Kevin).\n\u00acp_9(Kevin) \u2228 \u00acp_8(Kevin).\np_15(Kevin) \u2228 p_6(Kevin).\np_14(Kevin) \u2228 \u00acp_3(Kevin).\n(p_9(Kevin) \u2227 \u00acp_8(Kevin)) \u2228 (\u00acp_9(Kevin) \u2227 p_8(Kevin)).\np_12(Kevin) \u2192 p_12(Kevin).",
            "Initial Goal": "p_6(Kevin)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_4(Kevin).",
                    "-p_5(Kevin).",
                    "p_3(Kevin).",
                    "p_2(Kevin).",
                    "-p_1(Kevin).",
                    "p_0(Kevin).",
                    "p_4(Kevin) -> (p_5(Kevin) | p_15(Kevin)).",
                    "p_3(Kevin) -> p_14(Kevin).",
                    "p_14(Kevin) -> (p_15(Kevin) | p_7(Kevin)).",
                    "p_14(Kevin) -> (-p_15(Kevin) | -p_7(Kevin)).",
                    "all x (p_2(x) -> p_12(x)).",
                    "all x (-p_1(x) -> (-p_11(x) | -p_10(x))).",
                    "p_15(Kevin) -> -p_6(Kevin).",
                    "p_15(Kevin).",
                    "p_6(Kevin) -> -p_15(Kevin).",
                    "p_3(Kevin) -> (p_14(Kevin) & p_3(Kevin)).",
                    "-p_6(Kevin).",
                    "p_14(Kevin).",
                    "p_4(Kevin) -> p_15(Kevin).",
                    "p_12(Kevin) -> p_13(Kevin).",
                    "p_12(Kevin) -> p_11(Kevin).",
                    "-p_11(Kevin) | -p_10(Kevin).",
                    "p_0(Kevin) -> (-p_9(Kevin) | p_10(Kevin)).",
                    "p_6(Kevin) -> p_5(Kevin).",
                    "p_9(Kevin) | p_8(Kevin).",
                    "-p_9(Kevin) | -p_8(Kevin).",
                    "p_15(Kevin) | p_6(Kevin).",
                    "p_14(Kevin) | -p_3(Kevin).",
                    "(p_9(Kevin) & -p_8(Kevin)) | (-p_9(Kevin) & p_8(Kevin)).",
                    "p_12(Kevin) -> p_12(Kevin)."
                ],
                "formulas(goals)": [
                    "-p_6(Kevin)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_15(Kevin) \u2228 p_6(Kevin)",
                    "p_14(Kevin) \u2228 \u00acp_3(Kevin)"
                ],
                "added_rules": [
                    "p_14(Kevin) \u2192 (p_15(Kevin) \u2228 p_7(Kevin))",
                    "p_14(Kevin) \u2192 (\u00acp_15(Kevin) \u2228 \u00acp_7(Kevin))",
                    "(p_9(Kevin) \u2227 \u00acp_8(Kevin)) \u2228 (\u00acp_9(Kevin) \u2227 p_8(Kevin))",
                    "p_12(Kevin) \u2192 p_12(Kevin)"
                ]
            }
        }
    ]
}