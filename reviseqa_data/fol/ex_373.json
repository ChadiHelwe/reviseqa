{
    "background_story": "Addilyn grew up in a cozy farmhouse surrounded by lush fields and orchards. Every evening, she'd help her mother prepare supper for the family. The kitchen would fill with the aroma of roasting vegetables and freshly baked bread, making everyone's mouth water in anticipation. Addilyn's favorite part was setting the table, carefully arranging the silverware and folding the napkins. As the family gathered around the table, they'd share stories of their day, and Addilyn's mother would serve up a hearty, homemade meal. Supper was a special time for bonding and making memories, and Addilyn cherished these moments with her loved ones. As she grew older, Addilyn became an skilled cook herself, often hosting supper gatherings for friends and family, carrying on the tradition of warmth and togetherness.",
    "predicates": [
        {
            "id": 0,
            "name": "share_stories"
        },
        {
            "id": 1,
            "name": "create_memories"
        },
        {
            "id": 2,
            "name": "care_deeply"
        },
        {
            "id": 3,
            "name": "make_others_happy"
        },
        {
            "id": 4,
            "name": "enjoy_company"
        },
        {
            "id": 5,
            "name": "prepare_food"
        },
        {
            "id": 6,
            "name": "cook_with_love"
        },
        {
            "id": 7,
            "name": "nourish_others"
        },
        {
            "id": 8,
            "name": "foster_togetherness"
        },
        {
            "id": 9,
            "name": "host_meals"
        },
        {
            "id": 10,
            "name": "build_bonds"
        },
        {
            "id": 11,
            "name": "show_affection"
        },
        {
            "id": 12,
            "name": "eat_well"
        },
        {
            "id": 13,
            "name": "feed_others"
        },
        {
            "id": 14,
            "name": "value_family"
        },
        {
            "id": 15,
            "name": "eat_together"
        },
        {
            "id": 16,
            "name": "show_empathy"
        },
        {
            "id": 17,
            "name": "give_hugs"
        },
        {
            "id": 18,
            "name": "send_cards"
        },
        {
            "id": 19,
            "name": "values_family"
        },
        {
            "id": 20,
            "name": "likes_entertaining"
        }
    ],
    "subject_name": "Addilyn",
    "subject_category": "human",
    "keyword": "supper",
    "all_facts": [
        {
            "id": 0,
            "subject": "Addilyn",
            "text": "Addilyn does not share stories.",
            "fol": "\u00acp_0(Addilyn)",
            "str_fol": "\u00acshare_stories(Addilyn)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Addilyn",
            "text": "Addilyn does not create memories.",
            "fol": "\u00acp_1(Addilyn)",
            "str_fol": "\u00accreate_memories(Addilyn)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Addilyn",
            "text": "Addilyn does not care deeply.",
            "fol": "\u00acp_2(Addilyn)",
            "str_fol": "\u00accare_deeply(Addilyn)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Addilyn",
            "text": "Addilyn does not make others happy.",
            "fol": "\u00acp_3(Addilyn)",
            "str_fol": "\u00acmake_others_happy(Addilyn)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Addilyn",
            "text": "Addilyn enjoys the company of others.",
            "fol": "p_4(Addilyn)",
            "str_fol": "enjoy_company(Addilyn)",
            "negation": false
        },
        {
            "id": 5,
            "subject": "Addilyn",
            "text": "Addilyn does not prepare food.",
            "fol": "\u00acp_5(Addilyn)",
            "str_fol": "\u00acprepare_food(Addilyn)",
            "negation": true
        },
        {
            "id": 6,
            "subject": "Addilyn",
            "text": "Addilyn hosts meals.",
            "fol": "p_9(Addilyn)",
            "str_fol": "host_meals(Addilyn)",
            "negation": false
        },
        {
            "id": 7,
            "subject": "Addilyn",
            "text": "Addilyn does not show affection.",
            "fol": "\u00acp_11(Addilyn)",
            "str_fol": "\u00acshow_affection(Addilyn)",
            "negation": true
        },
        {
            "id": 8,
            "subject": "Addilyn",
            "text": "Addilyn does not build bonds.",
            "fol": "\u00acp_10(Addilyn)",
            "str_fol": "\u00acbuild_bonds(Addilyn)",
            "negation": true
        },
        {
            "id": 9,
            "subject": "Addilyn",
            "text": "Addilyn fosters togetherness.",
            "fol": "p_8(Addilyn)",
            "str_fol": "foster_togetherness(Addilyn)",
            "negation": false
        },
        {
            "id": 10,
            "subject": "Addilyn",
            "text": "Addilyn nourishes others.",
            "fol": "p_7(Addilyn)",
            "str_fol": "nourish_others(Addilyn)",
            "negation": false
        },
        {
            "id": 11,
            "subject": "Addilyn",
            "text": "Addilyn does not cook with love.",
            "fol": "\u00acp_6(Addilyn)",
            "str_fol": "\u00accook_with_love(Addilyn)",
            "negation": true
        }
    ],
    "context_facts": [
        {
            "id": 4,
            "subject": "Addilyn",
            "text": "Addilyn enjoys the company of others.",
            "fol": "p_4(Addilyn)",
            "str_fol": "enjoy_company(Addilyn)",
            "negation": false
        },
        {
            "id": 5,
            "subject": "Addilyn",
            "text": "Addilyn does not prepare food.",
            "fol": "\u00acp_5(Addilyn)",
            "str_fol": "\u00acprepare_food(Addilyn)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Addilyn",
            "text": "Addilyn does not care deeply.",
            "fol": "\u00acp_2(Addilyn)",
            "str_fol": "\u00accare_deeply(Addilyn)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Addilyn",
            "text": "Addilyn does not make others happy.",
            "fol": "\u00acp_3(Addilyn)",
            "str_fol": "\u00acmake_others_happy(Addilyn)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Addilyn",
            "text": "Addilyn does not create memories.",
            "fol": "\u00acp_1(Addilyn)",
            "str_fol": "\u00accreate_memories(Addilyn)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Addilyn",
            "text": "Addilyn does not share stories.",
            "fol": "\u00acp_0(Addilyn)",
            "str_fol": "\u00acshare_stories(Addilyn)",
            "negation": true
        }
    ],
    "context_rules": [
        {
            "id": 5,
            "text": "If Addilyn enjoys the company of others, then she either prepares food or hosts meals (or both).",
            "fol": "p_4(Addilyn) \u2192 (p_5(Addilyn) \u2228 p_9(Addilyn))",
            "str_fol": "enjoy_company(Addilyn) \u2192 (prepare_food(Addilyn) \u2228 host_meals(Addilyn))"
        },
        {
            "id": 4,
            "text": "If Addilyn cares deeply or shows affection, then she will make others happy.",
            "fol": "(p_2(Addilyn) \u2228 p_11(Addilyn)) \u2192 p_3(Addilyn)",
            "str_fol": "(care_deeply(Addilyn) \u2228 show_affection(Addilyn)) \u2192 make_others_happy(Addilyn)"
        },
        {
            "id": 3,
            "text": "If Addilyn either builds bonds or creates memories (but not both), then she shows affection.",
            "fol": "(p_10(Addilyn) \u2295 p_1(Addilyn)) \u2192 p_11(Addilyn)",
            "str_fol": "(build_bonds(Addilyn) \u2295 create_memories(Addilyn)) \u2192 show_affection(Addilyn)"
        },
        {
            "id": 2,
            "text": "If Addilyn hosts meals, then she either fosters togetherness or builds bonds, but not both.",
            "fol": "p_9(Addilyn) \u2192 (p_8(Addilyn) \u2295 p_10(Addilyn))",
            "str_fol": "host_meals(Addilyn) \u2192 (foster_togetherness(Addilyn) \u2295 build_bonds(Addilyn))"
        },
        {
            "id": 1,
            "text": "Addilyn either shares stories or nourishes others, but her actions are often driven by a desire to do both, bringing people together through food and conversation.",
            "fol": "p_0(Addilyn) \u2295 p_7(Addilyn)",
            "str_fol": "share_stories(Addilyn) \u2295 nourish_others(Addilyn)"
        },
        {
            "id": 0,
            "text": "For all humans, if someone cooks with love, then they nourish others and foster togetherness.",
            "fol": "\u2200x (p_6(x) \u2192 (p_7(x) \u2227 p_8(x)))",
            "str_fol": "\u2200x (cook_with_love(x) \u2192 (nourish_others(x) \u2227 foster_togetherness(x)))"
        }
    ],
    "context": [
        {
            "id": 4,
            "subject": "Addilyn",
            "text": "Addilyn enjoys the company of others.",
            "fol": "p_4(Addilyn)",
            "str_fol": "enjoy_company(Addilyn)",
            "negation": false
        },
        {
            "id": 5,
            "subject": "Addilyn",
            "text": "Addilyn does not prepare food.",
            "fol": "\u00acp_5(Addilyn)",
            "str_fol": "\u00acprepare_food(Addilyn)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Addilyn",
            "text": "Addilyn does not care deeply.",
            "fol": "\u00acp_2(Addilyn)",
            "str_fol": "\u00accare_deeply(Addilyn)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Addilyn",
            "text": "Addilyn does not make others happy.",
            "fol": "\u00acp_3(Addilyn)",
            "str_fol": "\u00acmake_others_happy(Addilyn)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Addilyn",
            "text": "Addilyn does not create memories.",
            "fol": "\u00acp_1(Addilyn)",
            "str_fol": "\u00accreate_memories(Addilyn)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Addilyn",
            "text": "Addilyn does not share stories.",
            "fol": "\u00acp_0(Addilyn)",
            "str_fol": "\u00acshare_stories(Addilyn)",
            "negation": true
        },
        {
            "id": 5,
            "text": "If Addilyn enjoys the company of others, then she either prepares food or hosts meals (or both).",
            "fol": "p_4(Addilyn) \u2192 (p_5(Addilyn) \u2228 p_9(Addilyn))",
            "str_fol": "enjoy_company(Addilyn) \u2192 (prepare_food(Addilyn) \u2228 host_meals(Addilyn))"
        },
        {
            "id": 4,
            "text": "If Addilyn cares deeply or shows affection, then she will make others happy.",
            "fol": "(p_2(Addilyn) \u2228 p_11(Addilyn)) \u2192 p_3(Addilyn)",
            "str_fol": "(care_deeply(Addilyn) \u2228 show_affection(Addilyn)) \u2192 make_others_happy(Addilyn)"
        },
        {
            "id": 3,
            "text": "If Addilyn either builds bonds or creates memories (but not both), then she shows affection.",
            "fol": "(p_10(Addilyn) \u2295 p_1(Addilyn)) \u2192 p_11(Addilyn)",
            "str_fol": "(build_bonds(Addilyn) \u2295 create_memories(Addilyn)) \u2192 show_affection(Addilyn)"
        },
        {
            "id": 2,
            "text": "If Addilyn hosts meals, then she either fosters togetherness or builds bonds, but not both.",
            "fol": "p_9(Addilyn) \u2192 (p_8(Addilyn) \u2295 p_10(Addilyn))",
            "str_fol": "host_meals(Addilyn) \u2192 (foster_togetherness(Addilyn) \u2295 build_bonds(Addilyn))"
        },
        {
            "id": 1,
            "text": "Addilyn either shares stories or nourishes others, but her actions are often driven by a desire to do both, bringing people together through food and conversation.",
            "fol": "p_0(Addilyn) \u2295 p_7(Addilyn)",
            "str_fol": "share_stories(Addilyn) \u2295 nourish_others(Addilyn)"
        },
        {
            "id": 0,
            "text": "For all humans, if someone cooks with love, then they nourish others and foster togetherness.",
            "fol": "\u2200x (p_6(x) \u2192 (p_7(x) \u2227 p_8(x)))",
            "str_fol": "\u2200x (cook_with_love(x) \u2192 (nourish_others(x) \u2227 foster_togetherness(x)))"
        }
    ],
    "context_fol": "p_4(Addilyn)\n\u00acp_5(Addilyn)\n\u00acp_2(Addilyn)\n\u00acp_3(Addilyn)\n\u00acp_1(Addilyn)\n\u00acp_0(Addilyn)\np_4(Addilyn) \u2192 (p_5(Addilyn) \u2228 p_9(Addilyn))\n(p_2(Addilyn) \u2228 p_11(Addilyn)) \u2192 p_3(Addilyn)\n(p_10(Addilyn) \u2295 p_1(Addilyn)) \u2192 p_11(Addilyn)\np_9(Addilyn) \u2192 (p_8(Addilyn) \u2295 p_10(Addilyn))\np_0(Addilyn) \u2295 p_7(Addilyn)\n\u2200x (p_6(x) \u2192 (p_7(x) \u2227 p_8(x)))",
    "conclusion": {
        "id": 11,
        "subject": "Addilyn",
        "text": "Addilyn does not cook with love.",
        "fol": "\u00acp_6(Addilyn)",
        "str_fol": "\u00accook_with_love(Addilyn)",
        "negation": true
    },
    "initial_answer": "Uncertain",
    "initial_goal": "\u00acp_6(Addilyn)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 4,
                    "subject": "Addilyn",
                    "text": "Addilyn enjoys the company of others.",
                    "fol": "p_4(Addilyn)",
                    "str_fol": "enjoy_company(Addilyn)",
                    "negation": false
                },
                {
                    "id": 5,
                    "subject": "Addilyn",
                    "text": "Addilyn does not prepare food.",
                    "fol": "\u00acp_5(Addilyn)",
                    "str_fol": "\u00acprepare_food(Addilyn)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "If Addilyn enjoys the company of others, then she either prepares food or hosts meals (or both).",
                    "fol": "p_4(Addilyn) \u2192 (p_5(Addilyn) \u2228 p_9(Addilyn))",
                    "str_fol": "enjoy_company(Addilyn) \u2192 (prepare_food(Addilyn) \u2228 host_meals(Addilyn))"
                }
            ],
            "conclusion": {
                "id": 6,
                "subject": "Addilyn",
                "text": "Addilyn hosts meals.",
                "fol": "p_9(Addilyn)",
                "str_fol": "host_meals(Addilyn)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 2,
                    "subject": "Addilyn",
                    "text": "Addilyn does not care deeply.",
                    "fol": "\u00acp_2(Addilyn)",
                    "str_fol": "\u00accare_deeply(Addilyn)",
                    "negation": true
                },
                {
                    "id": 3,
                    "subject": "Addilyn",
                    "text": "Addilyn does not make others happy.",
                    "fol": "\u00acp_3(Addilyn)",
                    "str_fol": "\u00acmake_others_happy(Addilyn)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "If Addilyn cares deeply or shows affection, then she will make others happy.",
                    "fol": "(p_2(Addilyn) \u2228 p_11(Addilyn)) \u2192 p_3(Addilyn)",
                    "str_fol": "(care_deeply(Addilyn) \u2228 show_affection(Addilyn)) \u2192 make_others_happy(Addilyn)"
                }
            ],
            "conclusion": {
                "id": 7,
                "subject": "Addilyn",
                "text": "Addilyn does not show affection.",
                "fol": "\u00acp_11(Addilyn)",
                "str_fol": "\u00acshow_affection(Addilyn)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 1,
                    "subject": "Addilyn",
                    "text": "Addilyn does not create memories.",
                    "fol": "\u00acp_1(Addilyn)",
                    "str_fol": "\u00accreate_memories(Addilyn)",
                    "negation": true
                },
                {
                    "id": 7,
                    "subject": "Addilyn",
                    "text": "Addilyn does not show affection.",
                    "fol": "\u00acp_11(Addilyn)",
                    "str_fol": "\u00acshow_affection(Addilyn)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "If Addilyn either builds bonds or creates memories (but not both), then she shows affection.",
                    "fol": "(p_10(Addilyn) \u2295 p_1(Addilyn)) \u2192 p_11(Addilyn)",
                    "str_fol": "(build_bonds(Addilyn) \u2295 create_memories(Addilyn)) \u2192 show_affection(Addilyn)"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Addilyn",
                "text": "Addilyn does not build bonds.",
                "fol": "\u00acp_10(Addilyn)",
                "str_fol": "\u00acbuild_bonds(Addilyn)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 6,
                    "subject": "Addilyn",
                    "text": "Addilyn hosts meals.",
                    "fol": "p_9(Addilyn)",
                    "str_fol": "host_meals(Addilyn)",
                    "negation": false
                },
                {
                    "id": 8,
                    "subject": "Addilyn",
                    "text": "Addilyn does not build bonds.",
                    "fol": "\u00acp_10(Addilyn)",
                    "str_fol": "\u00acbuild_bonds(Addilyn)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "If Addilyn hosts meals, then she either fosters togetherness or builds bonds, but not both.",
                    "fol": "p_9(Addilyn) \u2192 (p_8(Addilyn) \u2295 p_10(Addilyn))",
                    "str_fol": "host_meals(Addilyn) \u2192 (foster_togetherness(Addilyn) \u2295 build_bonds(Addilyn))"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Addilyn",
                "text": "Addilyn fosters togetherness.",
                "fol": "p_8(Addilyn)",
                "str_fol": "foster_togetherness(Addilyn)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 0,
                    "subject": "Addilyn",
                    "text": "Addilyn does not share stories.",
                    "fol": "\u00acp_0(Addilyn)",
                    "str_fol": "\u00acshare_stories(Addilyn)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "Addilyn either shares stories or nourishes others, but her actions are often driven by a desire to do both, bringing people together through food and conversation.",
                    "fol": "p_0(Addilyn) \u2295 p_7(Addilyn)",
                    "str_fol": "share_stories(Addilyn) \u2295 nourish_others(Addilyn)"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Addilyn",
                "text": "Addilyn nourishes others.",
                "fol": "p_7(Addilyn)",
                "str_fol": "nourish_others(Addilyn)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 10,
                    "subject": "Addilyn",
                    "text": "Addilyn nourishes others.",
                    "fol": "p_7(Addilyn)",
                    "str_fol": "nourish_others(Addilyn)",
                    "negation": false
                },
                {
                    "id": 9,
                    "subject": "Addilyn",
                    "text": "Addilyn fosters togetherness.",
                    "fol": "p_8(Addilyn)",
                    "str_fol": "foster_togetherness(Addilyn)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "For all humans, if someone cooks with love, then they nourish others and foster togetherness.",
                    "fol": "\u2200x (p_6(x) \u2192 (p_7(x) \u2227 p_8(x)))",
                    "str_fol": "\u2200x (cook_with_love(x) \u2192 (nourish_others(x) \u2227 foster_togetherness(x)))"
                }
            ],
            "conclusion": null
        }
    ],
    "proof_trace": null,
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "UNCERTAIN",
            "Edited Assumptions": "p_4(Addilyn)\n\u00acp_5(Addilyn)\n\u00acp_2(Addilyn)\n\u00acp_3(Addilyn)\n\u00acp_1(Addilyn)\n\u00acp_0(Addilyn)\np_4(Addilyn) \u2192 (p_5(Addilyn) \u2228 p_9(Addilyn))\n(p_2(Addilyn) \u2228 p_11(Addilyn)) \u2192 p_3(Addilyn)\n(p_10(Addilyn) \u2295 p_1(Addilyn)) \u2192 p_11(Addilyn)\np_9(Addilyn) \u2192 (p_8(Addilyn) \u2295 p_10(Addilyn))\np_0(Addilyn) \u2295 p_7(Addilyn)\n\u2200x (p_6(x) \u2192 (p_7(x) \u2227 p_8(x)))",
            "Initial Goal": "\u00acp_6(Addilyn)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_4(Addilyn)",
                    "-p_5(Addilyn)",
                    "-p_2(Addilyn)",
                    "-p_3(Addilyn)",
                    "-p_1(Addilyn)",
                    "-p_0(Addilyn)",
                    "p_4(Addilyn) -> (p_5(Addilyn) | p_9(Addilyn))",
                    "(p_2(Addilyn) | p_11(Addilyn)) -> p_3(Addilyn)",
                    "(-(p_10(Addilyn) <-> p_1(Addilyn))) -> p_11(Addilyn)",
                    "p_9(Addilyn) -> (-(p_8(Addilyn) <-> p_10(Addilyn)))",
                    "-(p_0(Addilyn) <-> p_7(Addilyn))",
                    "all x (p_6(x) -> (p_7(x) & p_8(x)))",
                    "p_9(Addilyn) -> -p_6(Addilyn)"
                ],
                "formulas(goals)": [
                    "-p_6(Addilyn)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "p_9(Addilyn) \u2192 \u00acp_6(Addilyn)"
                ]
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_4(Addilyn)\n\u00acp_5(Addilyn)\n\u00acp_2(Addilyn)\n\u00acp_3(Addilyn)\n\u00acp_1(Addilyn)\n\u00acp_0(Addilyn)\np_4(Addilyn) \u2192 (p_5(Addilyn) \u2228 p_9(Addilyn))\n(p_2(Addilyn) \u2228 p_11(Addilyn)) \u2192 p_3(Addilyn)\n(p_10(Addilyn) \u2295 p_1(Addilyn)) \u2192 p_11(Addilyn)\np_9(Addilyn) \u2192 (p_8(Addilyn) \u2295 p_10(Addilyn))\np_0(Addilyn) \u2295 p_7(Addilyn)\n\u2200x ((p_6(x) \u2192 p_7(x)) \u2227 (p_6(x) \u2192 p_8(x)))\np_9(Addilyn)\np_7(Addilyn)\n\u00acp_11(Addilyn)\n\u00acp_10(Addilyn)\np_8(Addilyn)\n(p_8(Addilyn) \u2227 p_7(Addilyn)) \u2192 \u00acp_6(Addilyn)",
            "Initial Goal": "\u00acp_6(Addilyn)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_4(Addilyn)",
                    "-p_5(Addilyn)",
                    "-p_2(Addilyn)",
                    "-p_3(Addilyn)",
                    "-p_1(Addilyn)",
                    "-p_0(Addilyn)",
                    "p_4(Addilyn) -> (p_5(Addilyn) | p_9(Addilyn))",
                    "(p_2(Addilyn) | p_11(Addilyn)) -> p_3(Addilyn)",
                    "(-(p_10(Addilyn) <-> p_1(Addilyn))) -> p_11(Addilyn)",
                    "p_9(Addilyn) -> (-(p_8(Addilyn) <-> p_10(Addilyn)))",
                    "-(p_0(Addilyn) <-> p_7(Addilyn))",
                    "all x ((p_6(x) -> p_7(x)) & (p_6(x) -> p_8(x)))",
                    "p_9(Addilyn)",
                    "p_7(Addilyn)",
                    "-p_11(Addilyn)",
                    "-p_10(Addilyn)",
                    "p_8(Addilyn)",
                    "(p_8(Addilyn) & p_7(Addilyn)) -> -p_6(Addilyn)"
                ],
                "formulas(goals)": [
                    "-p_6(Addilyn)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_9(Addilyn)",
                    "p_7(Addilyn)",
                    "\u00acp_11(Addilyn)",
                    "\u00acp_10(Addilyn)",
                    "p_8(Addilyn)"
                ],
                "added_rules": [
                    "\u2200x ((p_6(x) \u2192 p_7(x)) \u2227 (p_6(x) \u2192 p_8(x)))",
                    "(p_8(Addilyn) \u2227 p_7(Addilyn)) \u2192 \u00acp_6(Addilyn)"
                ]
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_4(Addilyn)\n\u00acp_5(Addilyn)\n\u00acp_2(Addilyn)\n\u00acp_3(Addilyn)\n\u00acp_1(Addilyn)\n\u00acp_0(Addilyn)\np_4(Addilyn) \u2192 (p_5(Addilyn) \u2228 p_9(Addilyn))\n(p_2(Addilyn) \u2228 p_11(Addilyn)) \u2192 p_3(Addilyn)\n(p_10(Addilyn) \u2295 p_1(Addilyn)) \u2192 p_11(Addilyn)\np_9(Addilyn) \u2192 (p_8(Addilyn) \u2295 p_10(Addilyn))\np_0(Addilyn) \u2295 p_7(Addilyn)\n\u2200x ((p_6(x) \u2192 p_7(x)) \u2227 (p_6(x) \u2192 p_8(x)))\np_9(Addilyn)\np_7(Addilyn)\n\u00acp_11(Addilyn)\n\u00acp_10(Addilyn)\np_8(Addilyn)\n(p_8(Addilyn) \u2227 p_7(Addilyn)) \u2192 p_6(Addilyn)",
            "Initial Goal": "\u00acp_6(Addilyn)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_4(Addilyn).",
                    "-p_5(Addilyn).",
                    "-p_2(Addilyn).",
                    "-p_3(Addilyn).",
                    "-p_1(Addilyn).",
                    "-p_0(Addilyn).",
                    "(p_4(Addilyn) -> (p_5(Addilyn) | p_9(Addilyn))).",
                    "((p_2(Addilyn) | p_11(Addilyn)) -> p_3(Addilyn)).",
                    "(-(p_10(Addilyn) <-> p_1(Addilyn)) -> p_11(Addilyn)).",
                    "(p_9(Addilyn) -> (-(p_8(Addilyn) <-> p_10(Addilyn)))).",
                    "(-(p_0(Addilyn) <-> p_7(Addilyn))).",
                    "(all x ((p_6(x) -> p_7(x)) & (p_6(x) -> p_8(x)))).",
                    "p_9(Addilyn).",
                    "p_7(Addilyn).",
                    "-p_11(Addilyn).",
                    "-p_10(Addilyn).",
                    "p_8(Addilyn).",
                    "((p_8(Addilyn) & p_7(Addilyn)) -> p_6(Addilyn))."
                ],
                "formulas(goals)": [
                    "-(-p_6(Addilyn))."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "(p_8(Addilyn) \u2227 p_7(Addilyn)) \u2192 \u00acp_6(Addilyn)"
                ],
                "added_facts": [],
                "added_rules": [
                    "(p_8(Addilyn) \u2227 p_7(Addilyn)) \u2192 p_6(Addilyn)"
                ]
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_4(Addilyn)\n\u00acp_5(Addilyn)\n\u00acp_2(Addilyn)\n\u00acp_3(Addilyn)\n\u00acp_1(Addilyn)\n\u00acp_0(Addilyn)\np_4(Addilyn) \u2192 (p_5(Addilyn) \u2228 p_9(Addilyn))\n(p_2(Addilyn) \u2228 p_11(Addilyn)) \u2192 p_3(Addilyn)\n(p_10(Addilyn) \u2295 p_1(Addilyn)) \u2192 p_11(Addilyn)\np_9(Addilyn) \u2192 (p_8(Addilyn) \u2295 p_10(Addilyn))\np_0(Addilyn) \u2295 p_7(Addilyn)\n\u2200x ((p_6(x) \u2192 p_7(x)) \u2227 (p_6(x) \u2192 p_8(x)))\np_9(Addilyn)\np_7(Addilyn)\n\u00acp_11(Addilyn)\n\u00acp_10(Addilyn)\np_8(Addilyn)\n(p_8(Addilyn) \u2227 p_7(Addilyn)) \u2192 p_6(Addilyn)\np_6(Addilyn) \u2228 \u00acp_6(Addilyn)\n\u00acp_6(Addilyn) \u2192 (\u00acp_8(Addilyn) \u2228 \u00acp_7(Addilyn))\np_5(Addilyn) \u2228 p_9(Addilyn)\np_8(Addilyn) \u2228 p_11(Addilyn)\np_7(Addilyn) \u2228 p_2(Addilyn)\n\u00acp_5(Addilyn) \u2228 p_9(Addilyn)",
            "Initial Goal": "\u00acp_6(Addilyn)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_4(Addilyn)",
                    "-p_5(Addilyn)",
                    "-p_2(Addilyn)",
                    "-p_3(Addilyn)",
                    "-p_1(Addilyn)",
                    "-p_0(Addilyn)",
                    "p_4(Addilyn) -> (p_5(Addilyn) | p_9(Addilyn))",
                    "(p_2(Addilyn) | p_11(Addilyn)) -> p_3(Addilyn)",
                    "(-(p_10(Addilyn) <-> p_1(Addilyn))) -> p_11(Addilyn)",
                    "p_9(Addilyn) -> (-(p_8(Addilyn) <-> p_10(Addilyn)))",
                    "-(p_0(Addilyn) <-> p_7(Addilyn))",
                    "all x ((p_6(x) -> p_7(x)) & (p_6(x) -> p_8(x)))",
                    "p_9(Addilyn)",
                    "p_7(Addilyn)",
                    "-p_11(Addilyn)",
                    "-p_10(Addilyn)",
                    "p_8(Addilyn)",
                    "(p_8(Addilyn) & p_7(Addilyn)) -> p_6(Addilyn)",
                    "p_6(Addilyn) | -p_6(Addilyn)",
                    "-p_6(Addilyn) -> (-p_8(Addilyn) | -p_7(Addilyn))",
                    "p_5(Addilyn) | p_9(Addilyn)",
                    "p_8(Addilyn) | p_11(Addilyn)",
                    "p_7(Addilyn) | p_2(Addilyn)",
                    "-p_5(Addilyn) | p_9(Addilyn)"
                ],
                "formulas(goals)": [
                    "-(-p_6(Addilyn))"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_6(Addilyn) \u2228 \u00acp_6(Addilyn)",
                    "p_5(Addilyn) \u2228 p_9(Addilyn)",
                    "p_8(Addilyn) \u2228 p_11(Addilyn)",
                    "p_7(Addilyn) \u2228 p_2(Addilyn)",
                    "\u00acp_5(Addilyn) \u2228 p_9(Addilyn)"
                ],
                "added_rules": [
                    "\u00acp_6(Addilyn) \u2192 (\u00acp_8(Addilyn) \u2228 \u00acp_7(Addilyn))"
                ]
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_4(Addilyn)\n\u00acp_5(Addilyn)\n\u00acp_2(Addilyn)\n\u00acp_3(Addilyn)\n\u00acp_1(Addilyn)\n\u00acp_0(Addilyn)\np_4(Addilyn) \u2192 (p_5(Addilyn) \u2228 p_9(Addilyn))\n(p_2(Addilyn) \u2228 p_11(Addilyn)) \u2192 p_3(Addilyn)\n(p_10(Addilyn) \u2295 p_1(Addilyn)) \u2192 p_11(Addilyn)\np_9(Addilyn) \u2192 (p_8(Addilyn) \u2295 p_10(Addilyn))\np_0(Addilyn) \u2295 p_7(Addilyn)\n\u2200x ((p_6(x) \u2192 p_7(x)) \u2227 (p_6(x) \u2192 p_8(x)))\np_9(Addilyn)\np_7(Addilyn)\n\u00acp_11(Addilyn)\n\u00acp_10(Addilyn)\np_8(Addilyn)\n(p_8(Addilyn) \u2227 p_7(Addilyn)) \u2192 p_6(Addilyn)\np_6(Addilyn) \u2228 \u00acp_6(Addilyn)\n\u00acp_6(Addilyn) \u2192 (\u00acp_8(Addilyn) \u2228 \u00acp_7(Addilyn))\np_5(Addilyn) \u2228 p_9(Addilyn)\np_8(Addilyn) \u2228 p_11(Addilyn)\np_7(Addilyn) \u2228 p_2(Addilyn)\n\u00acp_5(Addilyn) \u2228 p_9(Addilyn)\np_6(Addilyn) \u2194 (p_8(Addilyn) \u2227 p_7(Addilyn))",
            "Initial Goal": "\u00acp_6(Addilyn)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_4(Addilyn)",
                    "-p_5(Addilyn)",
                    "-p_2(Addilyn)",
                    "-p_3(Addilyn)",
                    "-p_1(Addilyn)",
                    "-p_0(Addilyn)",
                    "p_4(Addilyn) -> (p_5(Addilyn) | p_9(Addilyn))",
                    "(p_2(Addilyn) | p_11(Addilyn)) -> p_3(Addilyn)",
                    "(-(p_10(Addilyn) <-> p_1(Addilyn))) -> p_11(Addilyn)",
                    "p_9(Addilyn) -> (-(p_8(Addilyn) <-> p_10(Addilyn)))",
                    "-(p_0(Addilyn) <-> p_7(Addilyn))",
                    "all x ((p_6(x) -> p_7(x)) & (p_6(x) -> p_8(x)))",
                    "p_9(Addilyn)",
                    "p_7(Addilyn)",
                    "-p_11(Addilyn)",
                    "-p_10(Addilyn)",
                    "p_8(Addilyn)",
                    "(p_8(Addilyn) & p_7(Addilyn)) -> p_6(Addilyn)",
                    "p_6(Addilyn) | -p_6(Addilyn)",
                    "-p_6(Addilyn) -> (-p_8(Addilyn) | -p_7(Addilyn))",
                    "p_5(Addilyn) | p_9(Addilyn)",
                    "p_8(Addilyn) | p_11(Addilyn)",
                    "p_7(Addilyn) | p_2(Addilyn)",
                    "-p_5(Addilyn) | p_9(Addilyn)",
                    "p_6(Addilyn) <-> (p_8(Addilyn) & p_7(Addilyn))"
                ],
                "formulas(goals)": [
                    "p_6(Addilyn)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "p_6(Addilyn) \u2194 (p_8(Addilyn) \u2227 p_7(Addilyn))"
                ]
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_4(Addilyn)\n\u00acp_5(Addilyn)\n\u00acp_2(Addilyn)\n\u00acp_3(Addilyn)\n\u00acp_1(Addilyn)\n\u00acp_0(Addilyn)\np_4(Addilyn) \u2192 (p_5(Addilyn) \u2228 p_9(Addilyn))\n(p_2(Addilyn) \u2228 p_11(Addilyn)) \u2192 p_3(Addilyn)\n(p_10(Addilyn) \u2295 p_1(Addilyn)) \u2192 p_11(Addilyn)\np_9(Addilyn) \u2192 (p_8(Addilyn) \u2295 p_10(Addilyn))\np_0(Addilyn) \u2295 p_7(Addilyn)\n\u2200x ((p_6(x) \u2192 p_7(x)) \u2227 (p_6(x) \u2192 p_8(x)))\np_9(Addilyn)\np_7(Addilyn)\n\u00acp_11(Addilyn)\n\u00acp_10(Addilyn)\np_8(Addilyn)\n(p_8(Addilyn) \u2227 p_7(Addilyn)) \u2192 \u00acp_6(Addilyn)\np_6(Addilyn) \u2228 \u00acp_6(Addilyn)\n\u00acp_6(Addilyn) \u2192 (\u00acp_8(Addilyn) \u2228 \u00acp_7(Addilyn))\np_5(Addilyn) \u2228 p_9(Addilyn)\np_8(Addilyn) \u2228 p_11(Addilyn)\np_7(Addilyn) \u2228 p_2(Addilyn)\n\u00acp_5(Addilyn) \u2228 p_9(Addilyn)\np_6(Addilyn) \u2192 (p_8(Addilyn) \u2227 p_7(Addilyn))",
            "Initial Goal": "\u00acp_6(Addilyn)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_4(Addilyn)",
                    "-p_5(Addilyn)",
                    "-p_2(Addilyn)",
                    "-p_3(Addilyn)",
                    "-p_1(Addilyn)",
                    "-p_0(Addilyn)",
                    "p_4(Addilyn) -> (p_5(Addilyn) | p_9(Addilyn))",
                    "(p_2(Addilyn) | p_11(Addilyn)) -> p_3(Addilyn)",
                    "(-(p_10(Addilyn) <-> p_1(Addilyn))) -> p_11(Addilyn)",
                    "p_9(Addilyn) -> (-(p_8(Addilyn) <-> p_10(Addilyn)))",
                    "-(p_0(Addilyn) <-> p_7(Addilyn))",
                    "all x ((p_6(x) -> p_7(x)) & (p_6(x) -> p_8(x)))",
                    "p_9(Addilyn)",
                    "p_7(Addilyn)",
                    "-p_11(Addilyn)",
                    "-p_10(Addilyn)",
                    "p_8(Addilyn)",
                    "(p_8(Addilyn) & p_7(Addilyn)) -> -p_6(Addilyn)",
                    "p_6(Addilyn) | -p_6(Addilyn)",
                    "-p_6(Addilyn) -> (-p_8(Addilyn) | -p_7(Addilyn))",
                    "p_5(Addilyn) | p_9(Addilyn)",
                    "p_8(Addilyn) | p_11(Addilyn)",
                    "p_7(Addilyn) | p_2(Addilyn)",
                    "-p_5(Addilyn) | p_9(Addilyn)",
                    "p_6(Addilyn) -> (p_8(Addilyn) & p_7(Addilyn))"
                ],
                "formulas(goals)": [
                    "-p_6(Addilyn)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "(p_8(Addilyn) \u2227 p_7(Addilyn)) \u2192 p_6(Addilyn)",
                    "p_6(Addilyn) \u2194 (p_8(Addilyn) \u2227 p_7(Addilyn))"
                ],
                "added_facts": [],
                "added_rules": [
                    "(p_8(Addilyn) \u2227 p_7(Addilyn)) \u2192 \u00acp_6(Addilyn)",
                    "p_6(Addilyn) \u2192 (p_8(Addilyn) \u2227 p_7(Addilyn))"
                ]
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_4(Addilyn)\n\u00acp_5(Addilyn)\n\u00acp_2(Addilyn)\n\u00acp_3(Addilyn)\n\u00acp_1(Addilyn)\n\u00acp_0(Addilyn)\np_4(Addilyn) \u2192 (p_5(Addilyn) \u2228 p_9(Addilyn))\n(p_2(Addilyn) \u2228 p_11(Addilyn)) \u2192 p_3(Addilyn)\n(\u00ac(p_10(Addilyn) \u2194 p_1(Addilyn))) \u2192 p_11(Addilyn)\np_9(Addilyn) \u2192 \u00ac(p_8(Addilyn) \u2194 p_10(Addilyn))\n\u00ac(p_0(Addilyn) \u2194 p_7(Addilyn))\n\u2200x ((p_6(x) \u2192 p_7(x)) \u2227 (p_6(x) \u2192 p_8(x)))\np_9(Addilyn)\np_7(Addilyn)\n\u00acp_11(Addilyn)\n\u00acp_10(Addilyn)\np_8(Addilyn)\np_6(Addilyn) \u2228 \u00acp_6(Addilyn)\n\u00acp_6(Addilyn) \u2192 (\u00acp_8(Addilyn) \u2228 \u00acp_7(Addilyn))",
            "Initial Goal": "\u00acp_6(Addilyn)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_4(Addilyn)",
                    "-p_5(Addilyn)",
                    "-p_2(Addilyn)",
                    "-p_3(Addilyn)",
                    "-p_1(Addilyn)",
                    "-p_0(Addilyn)",
                    "p_4(Addilyn) -> (p_5(Addilyn) | p_9(Addilyn))",
                    "(p_2(Addilyn) | p_11(Addilyn)) -> p_3(Addilyn)",
                    "(-(p_10(Addilyn) <-> p_1(Addilyn))) -> p_11(Addilyn)",
                    "p_9(Addilyn) -> (-(p_8(Addilyn) <-> p_10(Addilyn)))",
                    "-(p_0(Addilyn) <-> p_7(Addilyn))",
                    "all x ((p_6(x) -> p_7(x)) & (p_6(x) -> p_8(x)))",
                    "p_9(Addilyn)",
                    "p_7(Addilyn)",
                    "-p_11(Addilyn)",
                    "-p_10(Addilyn)",
                    "p_8(Addilyn)",
                    "p_6(Addilyn) | -p_6(Addilyn)",
                    "-p_6(Addilyn) -> (-p_8(Addilyn) | -p_7(Addilyn))"
                ],
                "formulas(goals)": [
                    "p_6(Addilyn)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "(p_8(Addilyn) \u2227 p_7(Addilyn)) \u2192 \u00acp_6(Addilyn)"
                ],
                "added_facts": [],
                "added_rules": [
                    "\u00acp_6(Addilyn) \u2192 (\u00acp_8(Addilyn) \u2228 \u00acp_7(Addilyn))"
                ]
            }
        }
    ]
}