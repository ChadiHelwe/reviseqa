{
    "background_story": "Shepherd, a seasoned army sergeant, was known for his bravery and strategic mind. During a critical mission in a war-torn country, his unit was pinned down by enemy fire. With their position compromised, Shepherd called in for artillery support, but it was delayed due to bad weather. Undeterred, he grabbed a bazooka and, with his team providing cover, he launched a direct hit on the enemy's fortified position. The blast silenced the enemy's heavy machine guns, allowing Shepherd's unit to regroup and launch a successful counterattack. His quick thinking and accurate firing of the bazooka turned the tide of the battle, earning him a commendation for valor and the respect of his comrades.",
    "predicates": [
        {
            "id": 0,
            "name": "earns_respect"
        },
        {
            "id": 1,
            "name": "receives_award"
        },
        {
            "id": 2,
            "name": "saves_lives"
        },
        {
            "id": 3,
            "name": "provides_cover"
        },
        {
            "id": 4,
            "name": "destroys_enemy"
        },
        {
            "id": 5,
            "name": "brave"
        },
        {
            "id": 6,
            "name": "strategic"
        },
        {
            "id": 7,
            "name": "leads_troops"
        },
        {
            "id": 8,
            "name": "wins_battles"
        },
        {
            "id": 9,
            "name": "commands_unit"
        },
        {
            "id": 10,
            "name": "makes_tactics"
        },
        {
            "id": 11,
            "name": "uses_weapon"
        },
        {
            "id": 12,
            "name": "experienced"
        },
        {
            "id": 13,
            "name": "disciplined"
        },
        {
            "id": 14,
            "name": "issues_orders"
        },
        {
            "id": 15,
            "name": "reads_maps"
        },
        {
            "id": 16,
            "name": "motivates_soldiers"
        },
        {
            "id": 17,
            "name": "fights_enemy"
        },
        {
            "id": 18,
            "name": "serves_country"
        },
        {
            "id": 19,
            "name": "is_officer"
        },
        {
            "id": 20,
            "name": "gathers_intel"
        },
        {
            "id": 21,
            "name": "fires_rifle"
        },
        {
            "id": 22,
            "name": "throws_grenade"
        }
    ],
    "subject_name": "Shepherd",
    "subject_category": "military",
    "keyword": "bazooka",
    "all_facts": [
        {
            "id": 0,
            "subject": "Shepherd",
            "text": "Shepherd does not earn respect.",
            "fol": "\u00acp_0(Shepherd)",
            "str_fol": "\u00acearns_respect(Shepherd)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Shepherd",
            "text": "Shepherd receives an award.",
            "fol": "p_1(Shepherd)",
            "str_fol": "receives_award(Shepherd)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Shepherd",
            "text": "Shepherd does not save lives.",
            "fol": "\u00acp_2(Shepherd)",
            "str_fol": "\u00acsaves_lives(Shepherd)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Shepherd",
            "text": "Shepherd does not provide cover for his team.",
            "fol": "\u00acp_3(Shepherd)",
            "str_fol": "\u00acprovides_cover(Shepherd)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Shepherd",
            "text": "Shepherd does not destroy enemy positions.",
            "fol": "\u00acp_4(Shepherd)",
            "str_fol": "\u00acdestroys_enemy(Shepherd)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Shepherd",
            "text": "Shepherd does not use a weapon.",
            "fol": "\u00acp_11(Shepherd)",
            "str_fol": "\u00acuses_weapon(Shepherd)",
            "negation": true
        },
        {
            "id": 6,
            "subject": "Shepherd",
            "text": "Shepherd makes tactics.",
            "fol": "p_10(Shepherd)",
            "str_fol": "makes_tactics(Shepherd)",
            "negation": false
        },
        {
            "id": 7,
            "subject": "Shepherd",
            "text": "Shepherd commands a unit.",
            "fol": "p_9(Shepherd)",
            "str_fol": "commands_unit(Shepherd)",
            "negation": false
        },
        {
            "id": 8,
            "subject": "Shepherd",
            "text": "Shepherd does not lead troops.",
            "fol": "\u00acp_7(Shepherd)",
            "str_fol": "\u00acleads_troops(Shepherd)",
            "negation": true
        },
        {
            "id": 9,
            "subject": "Shepherd",
            "text": "Shepherd does not win battles.",
            "fol": "\u00acp_8(Shepherd)",
            "str_fol": "\u00acwins_battles(Shepherd)",
            "negation": true
        },
        {
            "id": 10,
            "subject": "Shepherd",
            "text": "Shepherd is not strategic.",
            "fol": "\u00acp_6(Shepherd)",
            "str_fol": "\u00acstrategic(Shepherd)",
            "negation": true
        },
        {
            "id": 11,
            "subject": "Shepherd",
            "text": "Shepherd is not brave.",
            "fol": "\u00acp_5(Shepherd)",
            "str_fol": "\u00acbrave(Shepherd)",
            "negation": true
        }
    ],
    "context_facts": [
        {
            "id": 3,
            "subject": "Shepherd",
            "text": "Shepherd does not provide cover for his team.",
            "fol": "\u00acp_3(Shepherd)",
            "str_fol": "\u00acprovides_cover(Shepherd)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Shepherd",
            "text": "Shepherd does not destroy enemy positions.",
            "fol": "\u00acp_4(Shepherd)",
            "str_fol": "\u00acdestroys_enemy(Shepherd)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Shepherd",
            "text": "Shepherd does not save lives.",
            "fol": "\u00acp_2(Shepherd)",
            "str_fol": "\u00acsaves_lives(Shepherd)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Shepherd",
            "text": "Shepherd receives an award.",
            "fol": "p_1(Shepherd)",
            "str_fol": "receives_award(Shepherd)",
            "negation": false
        },
        {
            "id": 0,
            "subject": "Shepherd",
            "text": "Shepherd does not earn respect.",
            "fol": "\u00acp_0(Shepherd)",
            "str_fol": "\u00acearns_respect(Shepherd)",
            "negation": true
        }
    ],
    "context_rules": [
        {
            "id": 6,
            "text": "Any military person who uses a weapon either provides cover for their team or destroys enemy positions.",
            "fol": "\u2200x (p_11(x) \u2192 (p_3(x) \u2228 p_4(x)))",
            "str_fol": "\u2200x (uses_weapon(x) \u2192 (provides_cover(x) \u2228 destroys_enemy(x)))"
        },
        {
            "id": 5,
            "text": "Shepherd either makes tactics or saves lives.",
            "fol": "p_10(Shepherd) \u2228 p_2(Shepherd)",
            "str_fol": "makes_tactics(Shepherd) \u2228 saves_lives(Shepherd)"
        },
        {
            "id": 4,
            "text": "For Shepherd, either he uses a weapon or commands a unit, but not both at the same time.",
            "fol": "p_11(Shepherd) \u2295 p_9(Shepherd)",
            "str_fol": "uses_weapon(Shepherd) \u2295 commands_unit(Shepherd)"
        },
        {
            "id": 3,
            "text": "If Shepherd commands a unit, then he either makes tactics or leads troops, but not both.",
            "fol": "p_9(Shepherd) \u2192 (p_10(Shepherd) \u2295 p_7(Shepherd))",
            "str_fol": "commands_unit(Shepherd) \u2192 (makes_tactics(Shepherd) \u2295 leads_troops(Shepherd))"
        },
        {
            "id": 2,
            "text": "If a military person wins battles and receives an award, then they earn respect.",
            "fol": "\u2200x ((p_8(x) \u2227 p_1(x)) \u2192 p_0(x))",
            "str_fol": "\u2200x ((wins_battles(x) \u2227 receives_award(x)) \u2192 earns_respect(x))"
        },
        {
            "id": 1,
            "text": "If Shepherd either leads troops or is strategic (but not both), then he wins battles.",
            "fol": "(p_7(Shepherd) \u2295 p_6(Shepherd)) \u2192 p_8(Shepherd)",
            "str_fol": "(leads_troops(Shepherd) \u2295 strategic(Shepherd)) \u2192 wins_battles(Shepherd)"
        },
        {
            "id": 0,
            "text": "Every military personnel is either brave or strategic (or both).",
            "fol": "\u2200x (p_5(x) \u2228 p_6(x))",
            "str_fol": "\u2200x (brave(x) \u2228 strategic(x))"
        }
    ],
    "context": [
        {
            "id": 3,
            "subject": "Shepherd",
            "text": "Shepherd does not provide cover for his team.",
            "fol": "\u00acp_3(Shepherd)",
            "str_fol": "\u00acprovides_cover(Shepherd)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Shepherd",
            "text": "Shepherd does not destroy enemy positions.",
            "fol": "\u00acp_4(Shepherd)",
            "str_fol": "\u00acdestroys_enemy(Shepherd)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Shepherd",
            "text": "Shepherd does not save lives.",
            "fol": "\u00acp_2(Shepherd)",
            "str_fol": "\u00acsaves_lives(Shepherd)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Shepherd",
            "text": "Shepherd receives an award.",
            "fol": "p_1(Shepherd)",
            "str_fol": "receives_award(Shepherd)",
            "negation": false
        },
        {
            "id": 0,
            "subject": "Shepherd",
            "text": "Shepherd does not earn respect.",
            "fol": "\u00acp_0(Shepherd)",
            "str_fol": "\u00acearns_respect(Shepherd)",
            "negation": true
        },
        {
            "id": 6,
            "text": "Any military person who uses a weapon either provides cover for their team or destroys enemy positions.",
            "fol": "\u2200x (p_11(x) \u2192 (p_3(x) \u2228 p_4(x)))",
            "str_fol": "\u2200x (uses_weapon(x) \u2192 (provides_cover(x) \u2228 destroys_enemy(x)))"
        },
        {
            "id": 5,
            "text": "Shepherd either makes tactics or saves lives.",
            "fol": "p_10(Shepherd) \u2228 p_2(Shepherd)",
            "str_fol": "makes_tactics(Shepherd) \u2228 saves_lives(Shepherd)"
        },
        {
            "id": 4,
            "text": "For Shepherd, either he uses a weapon or commands a unit, but not both at the same time.",
            "fol": "p_11(Shepherd) \u2295 p_9(Shepherd)",
            "str_fol": "uses_weapon(Shepherd) \u2295 commands_unit(Shepherd)"
        },
        {
            "id": 3,
            "text": "If Shepherd commands a unit, then he either makes tactics or leads troops, but not both.",
            "fol": "p_9(Shepherd) \u2192 (p_10(Shepherd) \u2295 p_7(Shepherd))",
            "str_fol": "commands_unit(Shepherd) \u2192 (makes_tactics(Shepherd) \u2295 leads_troops(Shepherd))"
        },
        {
            "id": 2,
            "text": "If a military person wins battles and receives an award, then they earn respect.",
            "fol": "\u2200x ((p_8(x) \u2227 p_1(x)) \u2192 p_0(x))",
            "str_fol": "\u2200x ((wins_battles(x) \u2227 receives_award(x)) \u2192 earns_respect(x))"
        },
        {
            "id": 1,
            "text": "If Shepherd either leads troops or is strategic (but not both), then he wins battles.",
            "fol": "(p_7(Shepherd) \u2295 p_6(Shepherd)) \u2192 p_8(Shepherd)",
            "str_fol": "(leads_troops(Shepherd) \u2295 strategic(Shepherd)) \u2192 wins_battles(Shepherd)"
        },
        {
            "id": 0,
            "text": "Every military personnel is either brave or strategic (or both).",
            "fol": "\u2200x (p_5(x) \u2228 p_6(x))",
            "str_fol": "\u2200x (brave(x) \u2228 strategic(x))"
        }
    ],
    "context_fol": "\u00acp_3(Shepherd)\n\u00acp_4(Shepherd)\n\u00acp_2(Shepherd)\np_1(Shepherd)\n\u00acp_0(Shepherd)\n\u2200x (p_11(x) \u2192 (p_3(x) \u2228 p_4(x)))\np_10(Shepherd) \u2228 p_2(Shepherd)\np_11(Shepherd) \u2295 p_9(Shepherd)\np_9(Shepherd) \u2192 (p_10(Shepherd) \u2295 p_7(Shepherd))\n\u2200x ((p_8(x) \u2227 p_1(x)) \u2192 p_0(x))\n(p_7(Shepherd) \u2295 p_6(Shepherd)) \u2192 p_8(Shepherd)\n\u2200x (p_5(x) \u2228 p_6(x))",
    "conclusion": {
        "id": 11,
        "subject": "Shepherd",
        "text": "Shepherd is not brave.",
        "fol": "\u00acp_5(Shepherd)",
        "str_fol": "\u00acbrave(Shepherd)",
        "negation": true
    },
    "initial_answer": "False",
    "initial_goal": "\u00acp_5(Shepherd)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 3,
                    "subject": "Shepherd",
                    "text": "Shepherd does not provide cover for his team.",
                    "fol": "\u00acp_3(Shepherd)",
                    "str_fol": "\u00acprovides_cover(Shepherd)",
                    "negation": true
                },
                {
                    "id": 4,
                    "subject": "Shepherd",
                    "text": "Shepherd does not destroy enemy positions.",
                    "fol": "\u00acp_4(Shepherd)",
                    "str_fol": "\u00acdestroys_enemy(Shepherd)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 6,
                    "text": "Any military person who uses a weapon either provides cover for their team or destroys enemy positions.",
                    "fol": "\u2200x (p_11(x) \u2192 (p_3(x) \u2228 p_4(x)))",
                    "str_fol": "\u2200x (uses_weapon(x) \u2192 (provides_cover(x) \u2228 destroys_enemy(x)))"
                }
            ],
            "conclusion": {
                "id": 5,
                "subject": "Shepherd",
                "text": "Shepherd does not use a weapon.",
                "fol": "\u00acp_11(Shepherd)",
                "str_fol": "\u00acuses_weapon(Shepherd)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 2,
                    "subject": "Shepherd",
                    "text": "Shepherd does not save lives.",
                    "fol": "\u00acp_2(Shepherd)",
                    "str_fol": "\u00acsaves_lives(Shepherd)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "Shepherd either makes tactics or saves lives.",
                    "fol": "p_10(Shepherd) \u2228 p_2(Shepherd)",
                    "str_fol": "makes_tactics(Shepherd) \u2228 saves_lives(Shepherd)"
                }
            ],
            "conclusion": {
                "id": 6,
                "subject": "Shepherd",
                "text": "Shepherd makes tactics.",
                "fol": "p_10(Shepherd)",
                "str_fol": "makes_tactics(Shepherd)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 5,
                    "subject": "Shepherd",
                    "text": "Shepherd does not use a weapon.",
                    "fol": "\u00acp_11(Shepherd)",
                    "str_fol": "\u00acuses_weapon(Shepherd)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "For Shepherd, either he uses a weapon or commands a unit, but not both at the same time.",
                    "fol": "p_11(Shepherd) \u2295 p_9(Shepherd)",
                    "str_fol": "uses_weapon(Shepherd) \u2295 commands_unit(Shepherd)"
                }
            ],
            "conclusion": {
                "id": 7,
                "subject": "Shepherd",
                "text": "Shepherd commands a unit.",
                "fol": "p_9(Shepherd)",
                "str_fol": "commands_unit(Shepherd)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 7,
                    "subject": "Shepherd",
                    "text": "Shepherd commands a unit.",
                    "fol": "p_9(Shepherd)",
                    "str_fol": "commands_unit(Shepherd)",
                    "negation": false
                },
                {
                    "id": 6,
                    "subject": "Shepherd",
                    "text": "Shepherd makes tactics.",
                    "fol": "p_10(Shepherd)",
                    "str_fol": "makes_tactics(Shepherd)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "If Shepherd commands a unit, then he either makes tactics or leads troops, but not both.",
                    "fol": "p_9(Shepherd) \u2192 (p_10(Shepherd) \u2295 p_7(Shepherd))",
                    "str_fol": "commands_unit(Shepherd) \u2192 (makes_tactics(Shepherd) \u2295 leads_troops(Shepherd))"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Shepherd",
                "text": "Shepherd does not lead troops.",
                "fol": "\u00acp_7(Shepherd)",
                "str_fol": "\u00acleads_troops(Shepherd)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 1,
                    "subject": "Shepherd",
                    "text": "Shepherd receives an award.",
                    "fol": "p_1(Shepherd)",
                    "str_fol": "receives_award(Shepherd)",
                    "negation": false
                },
                {
                    "id": 0,
                    "subject": "Shepherd",
                    "text": "Shepherd does not earn respect.",
                    "fol": "\u00acp_0(Shepherd)",
                    "str_fol": "\u00acearns_respect(Shepherd)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "If a military person wins battles and receives an award, then they earn respect.",
                    "fol": "\u2200x ((p_8(x) \u2227 p_1(x)) \u2192 p_0(x))",
                    "str_fol": "\u2200x ((wins_battles(x) \u2227 receives_award(x)) \u2192 earns_respect(x))"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Shepherd",
                "text": "Shepherd does not win battles.",
                "fol": "\u00acp_8(Shepherd)",
                "str_fol": "\u00acwins_battles(Shepherd)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 8,
                    "subject": "Shepherd",
                    "text": "Shepherd does not lead troops.",
                    "fol": "\u00acp_7(Shepherd)",
                    "str_fol": "\u00acleads_troops(Shepherd)",
                    "negation": true
                },
                {
                    "id": 9,
                    "subject": "Shepherd",
                    "text": "Shepherd does not win battles.",
                    "fol": "\u00acp_8(Shepherd)",
                    "str_fol": "\u00acwins_battles(Shepherd)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "If Shepherd either leads troops or is strategic (but not both), then he wins battles.",
                    "fol": "(p_7(Shepherd) \u2295 p_6(Shepherd)) \u2192 p_8(Shepherd)",
                    "str_fol": "(leads_troops(Shepherd) \u2295 strategic(Shepherd)) \u2192 wins_battles(Shepherd)"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Shepherd",
                "text": "Shepherd is not strategic.",
                "fol": "\u00acp_6(Shepherd)",
                "str_fol": "\u00acstrategic(Shepherd)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 10,
                    "subject": "Shepherd",
                    "text": "Shepherd is not strategic.",
                    "fol": "\u00acp_6(Shepherd)",
                    "str_fol": "\u00acstrategic(Shepherd)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "Every military personnel is either brave or strategic (or both).",
                    "fol": "\u2200x (p_5(x) \u2228 p_6(x))",
                    "str_fol": "\u2200x (brave(x) \u2228 strategic(x))"
                }
            ],
            "conclusion": {
                "id": 11,
                "subject": "Shepherd",
                "text": "Shepherd is not brave.",
                "fol": "\u00acp_5(Shepherd)",
                "str_fol": "\u00acbrave(Shepherd)",
                "negation": true
            }
        }
    ],
    "proof_trace": "1 (all x (p_11(x) -> p_3(x) | p_4(x))).  [assumption].\n2 -(p_11(Shepherd) <-> p_9(Shepherd)).  [assumption].\n3 p_9(Shepherd) -> -(p_10(Shepherd) <-> p_7(Shepherd)).  [assumption].\n4 (all x (p_8(x) & p_1(x) -> p_0(x))).  [assumption].\n5 -(p_7(Shepherd) <-> p_6(Shepherd)) -> p_8(Shepherd).  [assumption].\n6 (all x (p_5(x) | p_6(x))).  [assumption].\n7 --p_5(Shepherd).  [goal].\n8 -p_11(x) | p_3(x) | p_4(x).  [clausify(1)].\n9 -p_3(Shepherd).  [assumption].\n10 -p_11(Shepherd) | p_4(Shepherd).  [resolve(8,b,9,a)].\n11 -p_4(Shepherd).  [assumption].\n12 p_10(Shepherd) | p_2(Shepherd).  [assumption].\n13 -p_2(Shepherd).  [assumption].\n14 -p_8(x) | -p_1(x) | p_0(x).  [clausify(4)].\n15 p_1(Shepherd).  [assumption].\n16 -p_8(Shepherd) | p_0(Shepherd).  [resolve(14,b,15,a)].\n17 -p_0(Shepherd).  [assumption].\n19 p_11(Shepherd) | p_9(Shepherd).  [clausify(2)].\n20 -p_11(Shepherd).  [resolve(10,b,11,a)].\n21 p_9(Shepherd).  [resolve(20,a,19,a)].\n23 -p_9(Shepherd) | -p_10(Shepherd) | -p_7(Shepherd).  [clausify(3)].\n24 p_7(Shepherd) | -p_6(Shepherd) | p_8(Shepherd).  [clausify(5)].\n27 -p_10(Shepherd) | -p_7(Shepherd).  [resolve(21,a,23,a)].\n28 -p_5(Shepherd).  [deny(7)].\n29 p_5(x) | p_6(x).  [clausify(6)].\n30 -p_10(Shepherd) | -p_6(Shepherd) | p_8(Shepherd).  [resolve(27,b,24,a)].\n31 p_10(Shepherd).  [resolve(12,b,13,a)].\n33 -p_6(Shepherd) | p_8(Shepherd).  [resolve(30,a,31,a)].\n34 -p_8(Shepherd).  [resolve(16,b,17,a)].\n35 -p_6(Shepherd).  [resolve(33,b,34,a)].\n36 p_6(Shepherd).  [resolve(28,a,29,a)].\n37 $F.  [resolve(35,a,36,a)].",
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_3(Shepherd)\n\u00acp_4(Shepherd)\n\u00acp_2(Shepherd)\np_1(Shepherd)\n\u00acp_0(Shepherd)\n\u2200x (p_11(x) \u2192 (p_3(x) \u2228 p_4(x)))\np_10(Shepherd) \u2228 p_2(Shepherd)\np_11(Shepherd) \u2295 p_9(Shepherd)\np_9(Shepherd) \u2192 (p_10(Shepherd) \u2295 p_7(Shepherd))\n(p_7(Shepherd) \u2295 p_6(Shepherd)) \u2192 p_8(Shepherd)\n\u2200x (p_5(x) \u2228 p_6(x))\np_9(Shepherd) \u2192 \u00acp_5(Shepherd)",
            "Initial Goal": "\u00acp_5(Shepherd)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_3(Shepherd).",
                    "-p_4(Shepherd).",
                    "-p_2(Shepherd).",
                    "p_1(Shepherd).",
                    "-p_0(Shepherd).",
                    "all x (p_11(x) -> (p_3(x) | p_4(x))).",
                    "p_10(Shepherd) | p_2(Shepherd).",
                    "-(p_11(Shepherd) <-> p_9(Shepherd)).",
                    "p_9(Shepherd) -> (-(p_10(Shepherd) <-> p_7(Shepherd))).",
                    "(-(p_7(Shepherd) <-> p_6(Shepherd))) -> p_8(Shepherd).",
                    "all x (p_5(x) | p_6(x)).",
                    "p_9(Shepherd) -> -p_5(Shepherd)."
                ],
                "formulas(goals)": [
                    "-p_5(Shepherd)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u2200x ((p_8(x) \u2227 p_1(x)) \u2192 p_0(x))"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_9(Shepherd) \u2192 \u00acp_5(Shepherd)"
                ]
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_3(Shepherd)\n\u00acp_4(Shepherd)\n\u00acp_2(Shepherd)\np_1(Shepherd)\n\u00acp_0(Shepherd)\n\u2200x (p_11(x) \u2192 (p_3(x) \u2228 p_4(x)))\np_10(Shepherd) \u2228 p_2(Shepherd)\np_9(Shepherd) \u2192 (p_10(Shepherd) \u2295 p_7(Shepherd))\n(p_7(Shepherd) \u2295 p_6(Shepherd)) \u2192 p_8(Shepherd)\n\u2200x (p_5(x) \u2228 p_6(x))\np_9(Shepherd) \u2192 \u00acp_5(Shepherd)\np_1(Shepherd) \u2192 p_5(Shepherd)",
            "Initial Goal": "\u00acp_5(Shepherd)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_3(Shepherd)",
                    "-p_4(Shepherd)",
                    "-p_2(Shepherd)",
                    "p_1(Shepherd)",
                    "-p_0(Shepherd)",
                    "all x (p_11(x) -> (p_3(x) | p_4(x)))",
                    "p_10(Shepherd) | p_2(Shepherd)",
                    "p_9(Shepherd) -> (-(p_10(Shepherd) <-> p_7(Shepherd)))",
                    "(-(p_7(Shepherd) <-> p_6(Shepherd))) -> p_8(Shepherd)",
                    "all x (p_5(x) | p_6(x))",
                    "p_9(Shepherd) -> -p_5(Shepherd)",
                    "p_1(Shepherd) -> p_5(Shepherd)"
                ],
                "formulas(goals)": [
                    "p_5(Shepherd)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_11(Shepherd) \u2295 p_9(Shepherd)"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_1(Shepherd) \u2192 p_5(Shepherd)"
                ]
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_3(Shepherd)\n\u00acp_4(Shepherd)\n\u00acp_2(Shepherd)\np_1(Shepherd)\n\u00acp_0(Shepherd)\n\u2200x (p_11(x) \u2192 (p_3(x) \u2228 p_4(x)))\np_10(Shepherd) \u2228 p_2(Shepherd)\np_9(Shepherd) \u2192 (p_10(Shepherd) \u2295 p_7(Shepherd))\n((p_7(Shepherd) \u2228 p_6(Shepherd)) \u2227 \u00ac(p_7(Shepherd) \u2227 p_6(Shepherd))) \u2192 p_8(Shepherd)\n\u2200x (p_5(x) \u2228 p_6(x))\np_9(Shepherd) \u2192 \u00acp_5(Shepherd)\np_1(Shepherd) \u2192 p_5(Shepherd)\np_5(Shepherd) \u2228 p_9(Shepherd)\n(p_1(Shepherd) \u2227 p_9(Shepherd)) \u2192 p_5(Shepherd)",
            "Initial Goal": "\u00acp_5(Shepherd)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_3(Shepherd).",
                    "-p_4(Shepherd).",
                    "-p_2(Shepherd).",
                    "p_1(Shepherd).",
                    "-p_0(Shepherd).",
                    "all x (p_11(x) -> (p_3(x) | p_4(x))).",
                    "p_10(Shepherd) | p_2(Shepherd).",
                    "p_9(Shepherd) -> (-(p_10(Shepherd) <-> p_7(Shepherd))).",
                    "((p_7(Shepherd) | p_6(Shepherd)) & -(p_7(Shepherd) & p_6(Shepherd))) -> p_8(Shepherd).",
                    "all x (p_5(x) | p_6(x)).",
                    "p_9(Shepherd) -> -p_5(Shepherd).",
                    "p_1(Shepherd) -> p_5(Shepherd).",
                    "p_5(Shepherd) | p_9(Shepherd).",
                    "(p_1(Shepherd) & p_9(Shepherd)) -> p_5(Shepherd)."
                ],
                "formulas(goals)": [
                    "p_5(Shepherd)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_5(Shepherd) \u2228 p_9(Shepherd)"
                ],
                "added_rules": [
                    "(p_1(Shepherd) \u2227 p_9(Shepherd)) \u2192 p_5(Shepherd)",
                    "((p_7(Shepherd) \u2228 p_6(Shepherd)) \u2227 \u00ac(p_7(Shepherd) \u2227 p_6(Shepherd))) \u2192 p_8(Shepherd)"
                ]
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_3(Shepherd)\n\u00acp_4(Shepherd)\n\u00acp_2(Shepherd)\np_1(Shepherd)\n\u00acp_0(Shepherd)\n\u2200x (p_11(x) \u2192 (p_3(x) \u2228 p_4(x)))\np_10(Shepherd) \u2228 p_2(Shepherd)\np_9(Shepherd) \u2192 (p_10(Shepherd) \u2295 p_7(Shepherd))\n((p_7(Shepherd) \u2228 p_6(Shepherd)) \u2227 \u00ac(p_7(Shepherd) \u2227 p_6(Shepherd))) \u2192 p_8(Shepherd)\n\u2200x (p_5(x) \u2228 p_6(x))\np_9(Shepherd) \u2192 \u00acp_5(Shepherd)\np_5(Shepherd) \u2228 p_9(Shepherd)\n(p_1(Shepherd) \u2227 p_9(Shepherd)) \u2192 p_5(Shepherd)\np_1(Shepherd) \u2192 \u00acp_5(Shepherd)",
            "Initial Goal": "\u00acp_5(Shepherd)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_3(Shepherd).",
                    "-p_4(Shepherd).",
                    "-p_2(Shepherd).",
                    "p_1(Shepherd).",
                    "-p_0(Shepherd).",
                    "all x (p_11(x) -> (p_3(x) | p_4(x))).",
                    "p_10(Shepherd) | p_2(Shepherd).",
                    "p_9(Shepherd) -> (-(p_10(Shepherd) <-> p_7(Shepherd))).",
                    "((p_7(Shepherd) | p_6(Shepherd)) & -(p_7(Shepherd) & p_6(Shepherd))) -> p_8(Shepherd).",
                    "all x (p_5(x) | p_6(x)).",
                    "p_9(Shepherd) -> -p_5(Shepherd).",
                    "p_5(Shepherd) | p_9(Shepherd).",
                    "(p_1(Shepherd) & p_9(Shepherd)) -> p_5(Shepherd).",
                    "p_1(Shepherd) -> -p_5(Shepherd)."
                ],
                "formulas(goals)": [
                    "-p_5(Shepherd)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_1(Shepherd) \u2192 p_5(Shepherd)"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_1(Shepherd) \u2192 \u00acp_5(Shepherd)"
                ]
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_3(Shepherd)\n\u00acp_4(Shepherd)\n\u00acp_2(Shepherd)\np_1(Shepherd)\n\u00acp_0(Shepherd)\n\u2200x (p_11(x) \u2192 (p_3(x) \u2228 p_4(x)))\n\u00acp_10(Shepherd) \u2192 p_2(Shepherd)\np_9(Shepherd) \u2192 (p_10(Shepherd) \u2295 p_7(Shepherd))\n((p_7(Shepherd) \u2228 p_6(Shepherd)) \u2227 \u00ac(p_7(Shepherd) \u2227 p_6(Shepherd))) \u2192 p_8(Shepherd)\n\u2200x (\u00acp_6(x) \u2192 p_5(x))\np_5(Shepherd) \u2192 \u00acp_9(Shepherd)\n\u00acp_5(Shepherd) \u2192 p_9(Shepherd)\n(p_1(Shepherd) \u2227 p_9(Shepherd)) \u2192 p_10(Shepherd)\np_1(Shepherd) \u2192 \u00acp_5(Shepherd)",
            "Initial Goal": "\u00acp_5(Shepherd)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_3(Shepherd)",
                    "-p_4(Shepherd)",
                    "-p_2(Shepherd)",
                    "p_1(Shepherd)",
                    "-p_0(Shepherd)",
                    "all x (p_11(x) -> (p_3(x) | p_4(x)))",
                    "(-p_10(Shepherd)) -> p_2(Shepherd)",
                    "p_9(Shepherd) -> (-(p_10(Shepherd) <-> p_7(Shepherd)))",
                    "((p_7(Shepherd) | p_6(Shepherd)) & (-(p_7(Shepherd) & p_6(Shepherd)))) -> p_8(Shepherd)",
                    "all x (-p_6(x) -> p_5(x))",
                    "p_5(Shepherd) -> (-p_9(Shepherd))",
                    "(-p_5(Shepherd)) -> p_9(Shepherd)",
                    "(p_1(Shepherd) & p_9(Shepherd)) -> p_10(Shepherd)",
                    "p_1(Shepherd) -> (-p_5(Shepherd))"
                ],
                "formulas(goals)": [
                    "-p_5(Shepherd)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_10(Shepherd) \u2228 p_2(Shepherd)",
                    "\u2200x (p_5(x) \u2228 p_6(x))",
                    "p_9(Shepherd) \u2192 \u00acp_5(Shepherd)",
                    "p_5(Shepherd) \u2228 p_9(Shepherd)",
                    "(p_1(Shepherd) \u2227 p_9(Shepherd)) \u2192 p_5(Shepherd)"
                ],
                "added_facts": [],
                "added_rules": [
                    "\u00acp_10(Shepherd) \u2192 p_2(Shepherd)",
                    "\u2200x (\u00acp_6(x) \u2192 p_5(x))",
                    "p_5(Shepherd) \u2192 \u00acp_9(Shepherd)",
                    "\u00acp_5(Shepherd) \u2192 p_9(Shepherd)",
                    "(p_1(Shepherd) \u2227 p_9(Shepherd)) \u2192 p_10(Shepherd)"
                ]
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_3(Shepherd)\n\u00acp_4(Shepherd)\n\u00acp_2(Shepherd)\np_1(Shepherd)\n\u00acp_0(Shepherd)\n\u2200x (p_11(x) \u2192 (p_3(x) \u2228 p_4(x)))\n\u00acp_10(Shepherd) \u2192 p_2(Shepherd)\np_9(Shepherd) \u2192 (p_10(Shepherd) \u2295 p_7(Shepherd))\n((p_7(Shepherd) \u2228 p_6(Shepherd)) \u2227 \u00ac(p_7(Shepherd) \u2227 p_6(Shepherd))) \u2192 p_8(Shepherd)\n\u2200x (\u00acp_6(x) \u2192 p_5(x))\np_5(Shepherd) \u2192 \u00acp_9(Shepherd)\n\u00acp_5(Shepherd) \u2192 p_9(Shepherd)\n(p_1(Shepherd) \u2227 p_9(Shepherd)) \u2192 p_10(Shepherd)\n\u00acp_6(Shepherd)",
            "Initial Goal": "\u00acp_5(Shepherd)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_3(Shepherd).",
                    "-p_4(Shepherd).",
                    "-p_2(Shepherd).",
                    "p_1(Shepherd).",
                    "-p_0(Shepherd).",
                    "all x (p_11(x) -> (p_3(x) | p_4(x))).",
                    "(-p_10(Shepherd)) -> p_2(Shepherd).",
                    "p_9(Shepherd) -> (-(p_10(Shepherd) <-> p_7(Shepherd))).",
                    "((p_7(Shepherd) | p_6(Shepherd)) & (-(p_7(Shepherd) & p_6(Shepherd)))) -> p_8(Shepherd).",
                    "all x ((-p_6(x)) -> p_5(x)).",
                    "p_5(Shepherd) -> (-p_9(Shepherd)).",
                    "(-p_5(Shepherd)) -> p_9(Shepherd).",
                    "(p_1(Shepherd) & p_9(Shepherd)) -> p_10(Shepherd).",
                    "-p_6(Shepherd)."
                ],
                "formulas(goals)": [
                    "p_5(Shepherd)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_1(Shepherd) \u2192 \u00acp_5(Shepherd)"
                ],
                "added_facts": [
                    "\u00acp_6(Shepherd)"
                ],
                "added_rules": []
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_3(Shepherd)\n\u00acp_4(Shepherd)\n\u00acp_2(Shepherd)\np_1(Shepherd)\n\u00acp_0(Shepherd)\n\u2200x (p_11(x) \u2192 (p_3(x) \u2228 p_4(x)))\n\u00acp_10(Shepherd) \u2192 p_2(Shepherd)\np_9(Shepherd) \u2192 (p_10(Shepherd) \u2295 p_7(Shepherd))\n((p_7(Shepherd) \u2228 p_6(Shepherd)) \u2227 \u00ac(p_7(Shepherd) \u2227 p_6(Shepherd))) \u2192 p_8(Shepherd)\n\u2200x (\u00acp_6(x) \u2192 p_5(x))\np_5(Shepherd) \u2192 \u00acp_9(Shepherd)\n\u00acp_5(Shepherd) \u2192 p_9(Shepherd)\n(p_1(Shepherd) \u2227 p_9(Shepherd)) \u2192 p_10(Shepherd)\n\u00acp_6(Shepherd)\n\u2200x (\u00acp_5(x) \u2192 p_6(x))",
            "Initial Goal": "\u00acp_5(Shepherd)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_3(Shepherd)",
                    "-p_4(Shepherd)",
                    "-p_2(Shepherd)",
                    "p_1(Shepherd)",
                    "-p_0(Shepherd)",
                    "all x (p_11(x) -> (p_3(x) | p_4(x)))",
                    "-p_10(Shepherd) -> p_2(Shepherd)",
                    "p_9(Shepherd) -> (-(p_10(Shepherd) <-> p_7(Shepherd)))",
                    "((p_7(Shepherd) | p_6(Shepherd)) & -(p_7(Shepherd) & p_6(Shepherd))) -> p_8(Shepherd)",
                    "all x (-p_6(x) -> p_5(x))",
                    "p_5(Shepherd) -> -p_9(Shepherd)",
                    "-p_5(Shepherd) -> p_9(Shepherd)",
                    "(p_1(Shepherd) & p_9(Shepherd)) -> p_10(Shepherd)",
                    "-p_6(Shepherd)",
                    "all x (-p_5(x) -> p_6(x))"
                ],
                "formulas(goals)": [
                    "p_5(Shepherd)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "\u2200x (\u00acp_5(x) \u2192 p_6(x))"
                ]
            }
        }
    ]
}