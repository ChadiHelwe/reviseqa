{
    "background_story": "Karson was a skilled and experienced dog handler who worked with the local police department's K9 unit. With years of training and dedication, he had developed a unique bond with his canine partner, Max. Together, they were an unstoppable team, solving crimes and keeping their community safe. Karson's exceptional handling skills allowed him to communicate effectively with Max, understanding his every cue and gesture. He was patient, calm, and assertive, making him the perfect handler for the high-stress job. Karson's expertise and Max's keen instincts made them a valuable asset to the police force, earning them numerous accolades and recognition for their outstanding service.",
    "predicates": [
        {
            "id": 0,
            "name": "experienced_handler"
        },
        {
            "id": 1,
            "name": "solves_problems"
        },
        {
            "id": 2,
            "name": "builds_trust"
        },
        {
            "id": 3,
            "name": "is_respected"
        },
        {
            "id": 4,
            "name": "speaks_clearly"
        },
        {
            "id": 5,
            "name": "is_reliable"
        },
        {
            "id": 6,
            "name": "skilled_trainer"
        },
        {
            "id": 7,
            "name": "effective_leader"
        },
        {
            "id": 8,
            "name": "understands_animals"
        },
        {
            "id": 9,
            "name": "reads_body_language"
        },
        {
            "id": 10,
            "name": "is_attentive"
        },
        {
            "id": 11,
            "name": "listens_actively"
        },
        {
            "id": 12,
            "name": "works_with_dogs"
        },
        {
            "id": 13,
            "name": "has_good_instincts"
        },
        {
            "id": 14,
            "name": "loves_dogs"
        },
        {
            "id": 15,
            "name": "knows_behavior"
        },
        {
            "id": 16,
            "name": "is_empathetic"
        },
        {
            "id": 17,
            "name": "is_intuitive"
        },
        {
            "id": 18,
            "name": "stays_focused"
        },
        {
            "id": 19,
            "name": "is_observed"
        }
    ],
    "subject_name": "Karson",
    "subject_category": "human",
    "keyword": "handler",
    "all_facts": [
        {
            "id": 0,
            "subject": "Karson",
            "text": "Karson is an experienced handler.",
            "fol": "p_0(Karson)",
            "str_fol": "experienced_handler(Karson)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Karson",
            "text": "Karson cannot solve problems.",
            "fol": "\u00acp_1(Karson)",
            "str_fol": "\u00acsolves_problems(Karson)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Karson",
            "text": "Karson cannot build trust.",
            "fol": "\u00acp_2(Karson)",
            "str_fol": "\u00acbuilds_trust(Karson)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Karson",
            "text": "Karson is not respected.",
            "fol": "\u00acp_3(Karson)",
            "str_fol": "\u00acis_respected(Karson)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Karson",
            "text": "Karson speaks clearly.",
            "fol": "p_4(Karson)",
            "str_fol": "speaks_clearly(Karson)",
            "negation": false
        },
        {
            "id": 5,
            "subject": "Karson",
            "text": "Karson is not reliable.",
            "fol": "\u00acp_5(Karson)",
            "str_fol": "\u00acis_reliable(Karson)",
            "negation": true
        },
        {
            "id": 6,
            "subject": "Karson",
            "text": "Karson listens actively.",
            "fol": "p_11(Karson)",
            "str_fol": "listens_actively(Karson)",
            "negation": false
        },
        {
            "id": 7,
            "subject": "Karson",
            "text": "Karson is attentive.",
            "fol": "p_10(Karson)",
            "str_fol": "is_attentive(Karson)",
            "negation": false
        },
        {
            "id": 8,
            "subject": "Karson",
            "text": "Karson does not read body language.",
            "fol": "\u00acp_9(Karson)",
            "str_fol": "\u00acreads_body_language(Karson)",
            "negation": true
        },
        {
            "id": 9,
            "subject": "Karson",
            "text": "Karson does not understand animals.",
            "fol": "\u00acp_8(Karson)",
            "str_fol": "\u00acunderstands_animals(Karson)",
            "negation": true
        },
        {
            "id": 10,
            "subject": "Karson",
            "text": "Karson is not a skilled trainer.",
            "fol": "\u00acp_6(Karson)",
            "str_fol": "\u00acskilled_trainer(Karson)",
            "negation": true
        },
        {
            "id": 11,
            "subject": "Karson",
            "text": "Karson is not an effective leader.",
            "fol": "\u00acp_7(Karson)",
            "str_fol": "\u00aceffective_leader(Karson)",
            "negation": true
        }
    ],
    "context_facts": [
        {
            "id": 4,
            "subject": "Karson",
            "text": "Karson speaks clearly.",
            "fol": "p_4(Karson)",
            "str_fol": "speaks_clearly(Karson)",
            "negation": false
        },
        {
            "id": 5,
            "subject": "Karson",
            "text": "Karson is not reliable.",
            "fol": "\u00acp_5(Karson)",
            "str_fol": "\u00acis_reliable(Karson)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Karson",
            "text": "Karson is not respected.",
            "fol": "\u00acp_3(Karson)",
            "str_fol": "\u00acis_respected(Karson)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Karson",
            "text": "Karson cannot build trust.",
            "fol": "\u00acp_2(Karson)",
            "str_fol": "\u00acbuilds_trust(Karson)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Karson",
            "text": "Karson cannot solve problems.",
            "fol": "\u00acp_1(Karson)",
            "str_fol": "\u00acsolves_problems(Karson)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Karson",
            "text": "Karson is an experienced handler.",
            "fol": "p_0(Karson)",
            "str_fol": "experienced_handler(Karson)",
            "negation": false
        }
    ],
    "context_rules": [
        {
            "id": 5,
            "text": "If Karson either speaks clearly or listens actively (but not both), then he is reliable.",
            "fol": "(p_4(Karson) \u2295 p_11(Karson)) \u2192 p_5(Karson)",
            "str_fol": "(speaks_clearly(Karson) \u2295 listens_actively(Karson)) \u2192 is_reliable(Karson)"
        },
        {
            "id": 4,
            "text": "If Karson is either attentive or listens actively (but not both), then he is respected.",
            "fol": "(p_10(Karson) \u2295 p_11(Karson)) \u2192 p_3(Karson)",
            "str_fol": "(is_attentive(Karson) \u2295 listens_actively(Karson)) \u2192 is_respected(Karson)"
        },
        {
            "id": 3,
            "text": "Karson is either attentive or reads body language, but not both, which helps him in his interactions with others.",
            "fol": "p_10(Karson) \u2295 p_9(Karson)",
            "str_fol": "is_attentive(Karson) \u2295 reads_body_language(Karson)"
        },
        {
            "id": 2,
            "text": "If Karson either reads body language or understands animals (but not both), then he can build trust.",
            "fol": "(p_9(Karson) \u2295 p_8(Karson)) \u2192 p_2(Karson)",
            "str_fol": "(reads_body_language(Karson) \u2295 understands_animals(Karson)) \u2192 builds_trust(Karson)"
        },
        {
            "id": 1,
            "text": "If Karson either understands animals or is a skilled trainer (but not both), then he can solve problems.",
            "fol": "(p_8(Karson) \u2295 p_6(Karson)) \u2192 p_1(Karson)",
            "str_fol": "(understands_animals(Karson) \u2295 skilled_trainer(Karson)) \u2192 solves_problems(Karson)"
        },
        {
            "id": 0,
            "text": "If Karson is either an experienced handler or a skilled trainer (but not both), then he is an effective leader.",
            "fol": "(p_0(Karson) \u2295 p_6(Karson)) \u2192 p_7(Karson)",
            "str_fol": "(experienced_handler(Karson) \u2295 skilled_trainer(Karson)) \u2192 effective_leader(Karson)"
        }
    ],
    "context": [
        {
            "id": 4,
            "subject": "Karson",
            "text": "Karson speaks clearly.",
            "fol": "p_4(Karson)",
            "str_fol": "speaks_clearly(Karson)",
            "negation": false
        },
        {
            "id": 5,
            "subject": "Karson",
            "text": "Karson is not reliable.",
            "fol": "\u00acp_5(Karson)",
            "str_fol": "\u00acis_reliable(Karson)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Karson",
            "text": "Karson is not respected.",
            "fol": "\u00acp_3(Karson)",
            "str_fol": "\u00acis_respected(Karson)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Karson",
            "text": "Karson cannot build trust.",
            "fol": "\u00acp_2(Karson)",
            "str_fol": "\u00acbuilds_trust(Karson)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Karson",
            "text": "Karson cannot solve problems.",
            "fol": "\u00acp_1(Karson)",
            "str_fol": "\u00acsolves_problems(Karson)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Karson",
            "text": "Karson is an experienced handler.",
            "fol": "p_0(Karson)",
            "str_fol": "experienced_handler(Karson)",
            "negation": false
        },
        {
            "id": 5,
            "text": "If Karson either speaks clearly or listens actively (but not both), then he is reliable.",
            "fol": "(p_4(Karson) \u2295 p_11(Karson)) \u2192 p_5(Karson)",
            "str_fol": "(speaks_clearly(Karson) \u2295 listens_actively(Karson)) \u2192 is_reliable(Karson)"
        },
        {
            "id": 4,
            "text": "If Karson is either attentive or listens actively (but not both), then he is respected.",
            "fol": "(p_10(Karson) \u2295 p_11(Karson)) \u2192 p_3(Karson)",
            "str_fol": "(is_attentive(Karson) \u2295 listens_actively(Karson)) \u2192 is_respected(Karson)"
        },
        {
            "id": 3,
            "text": "Karson is either attentive or reads body language, but not both, which helps him in his interactions with others.",
            "fol": "p_10(Karson) \u2295 p_9(Karson)",
            "str_fol": "is_attentive(Karson) \u2295 reads_body_language(Karson)"
        },
        {
            "id": 2,
            "text": "If Karson either reads body language or understands animals (but not both), then he can build trust.",
            "fol": "(p_9(Karson) \u2295 p_8(Karson)) \u2192 p_2(Karson)",
            "str_fol": "(reads_body_language(Karson) \u2295 understands_animals(Karson)) \u2192 builds_trust(Karson)"
        },
        {
            "id": 1,
            "text": "If Karson either understands animals or is a skilled trainer (but not both), then he can solve problems.",
            "fol": "(p_8(Karson) \u2295 p_6(Karson)) \u2192 p_1(Karson)",
            "str_fol": "(understands_animals(Karson) \u2295 skilled_trainer(Karson)) \u2192 solves_problems(Karson)"
        },
        {
            "id": 0,
            "text": "If Karson is either an experienced handler or a skilled trainer (but not both), then he is an effective leader.",
            "fol": "(p_0(Karson) \u2295 p_6(Karson)) \u2192 p_7(Karson)",
            "str_fol": "(experienced_handler(Karson) \u2295 skilled_trainer(Karson)) \u2192 effective_leader(Karson)"
        }
    ],
    "context_fol": "p_4(Karson)\n\u00acp_5(Karson)\n\u00acp_3(Karson)\n\u00acp_2(Karson)\n\u00acp_1(Karson)\np_0(Karson)\n(p_4(Karson) \u2295 p_11(Karson)) \u2192 p_5(Karson)\n(p_10(Karson) \u2295 p_11(Karson)) \u2192 p_3(Karson)\np_10(Karson) \u2295 p_9(Karson)\n(p_9(Karson) \u2295 p_8(Karson)) \u2192 p_2(Karson)\n(p_8(Karson) \u2295 p_6(Karson)) \u2192 p_1(Karson)\n(p_0(Karson) \u2295 p_6(Karson)) \u2192 p_7(Karson)",
    "conclusion": {
        "id": 11,
        "subject": "Karson",
        "text": "Karson is not an effective leader.",
        "fol": "\u00acp_7(Karson)",
        "str_fol": "\u00aceffective_leader(Karson)",
        "negation": true
    },
    "initial_answer": "False",
    "initial_goal": "\u00acp_7(Karson)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 4,
                    "subject": "Karson",
                    "text": "Karson speaks clearly.",
                    "fol": "p_4(Karson)",
                    "str_fol": "speaks_clearly(Karson)",
                    "negation": false
                },
                {
                    "id": 5,
                    "subject": "Karson",
                    "text": "Karson is not reliable.",
                    "fol": "\u00acp_5(Karson)",
                    "str_fol": "\u00acis_reliable(Karson)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "If Karson either speaks clearly or listens actively (but not both), then he is reliable.",
                    "fol": "(p_4(Karson) \u2295 p_11(Karson)) \u2192 p_5(Karson)",
                    "str_fol": "(speaks_clearly(Karson) \u2295 listens_actively(Karson)) \u2192 is_reliable(Karson)"
                }
            ],
            "conclusion": {
                "id": 6,
                "subject": "Karson",
                "text": "Karson listens actively.",
                "fol": "p_11(Karson)",
                "str_fol": "listens_actively(Karson)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 6,
                    "subject": "Karson",
                    "text": "Karson listens actively.",
                    "fol": "p_11(Karson)",
                    "str_fol": "listens_actively(Karson)",
                    "negation": false
                },
                {
                    "id": 3,
                    "subject": "Karson",
                    "text": "Karson is not respected.",
                    "fol": "\u00acp_3(Karson)",
                    "str_fol": "\u00acis_respected(Karson)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "If Karson is either attentive or listens actively (but not both), then he is respected.",
                    "fol": "(p_10(Karson) \u2295 p_11(Karson)) \u2192 p_3(Karson)",
                    "str_fol": "(is_attentive(Karson) \u2295 listens_actively(Karson)) \u2192 is_respected(Karson)"
                }
            ],
            "conclusion": {
                "id": 7,
                "subject": "Karson",
                "text": "Karson is attentive.",
                "fol": "p_10(Karson)",
                "str_fol": "is_attentive(Karson)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 7,
                    "subject": "Karson",
                    "text": "Karson is attentive.",
                    "fol": "p_10(Karson)",
                    "str_fol": "is_attentive(Karson)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "Karson is either attentive or reads body language, but not both, which helps him in his interactions with others.",
                    "fol": "p_10(Karson) \u2295 p_9(Karson)",
                    "str_fol": "is_attentive(Karson) \u2295 reads_body_language(Karson)"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Karson",
                "text": "Karson does not read body language.",
                "fol": "\u00acp_9(Karson)",
                "str_fol": "\u00acreads_body_language(Karson)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 8,
                    "subject": "Karson",
                    "text": "Karson does not read body language.",
                    "fol": "\u00acp_9(Karson)",
                    "str_fol": "\u00acreads_body_language(Karson)",
                    "negation": true
                },
                {
                    "id": 2,
                    "subject": "Karson",
                    "text": "Karson cannot build trust.",
                    "fol": "\u00acp_2(Karson)",
                    "str_fol": "\u00acbuilds_trust(Karson)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "If Karson either reads body language or understands animals (but not both), then he can build trust.",
                    "fol": "(p_9(Karson) \u2295 p_8(Karson)) \u2192 p_2(Karson)",
                    "str_fol": "(reads_body_language(Karson) \u2295 understands_animals(Karson)) \u2192 builds_trust(Karson)"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Karson",
                "text": "Karson does not understand animals.",
                "fol": "\u00acp_8(Karson)",
                "str_fol": "\u00acunderstands_animals(Karson)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 9,
                    "subject": "Karson",
                    "text": "Karson does not understand animals.",
                    "fol": "\u00acp_8(Karson)",
                    "str_fol": "\u00acunderstands_animals(Karson)",
                    "negation": true
                },
                {
                    "id": 1,
                    "subject": "Karson",
                    "text": "Karson cannot solve problems.",
                    "fol": "\u00acp_1(Karson)",
                    "str_fol": "\u00acsolves_problems(Karson)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "If Karson either understands animals or is a skilled trainer (but not both), then he can solve problems.",
                    "fol": "(p_8(Karson) \u2295 p_6(Karson)) \u2192 p_1(Karson)",
                    "str_fol": "(understands_animals(Karson) \u2295 skilled_trainer(Karson)) \u2192 solves_problems(Karson)"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Karson",
                "text": "Karson is not a skilled trainer.",
                "fol": "\u00acp_6(Karson)",
                "str_fol": "\u00acskilled_trainer(Karson)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 0,
                    "subject": "Karson",
                    "text": "Karson is an experienced handler.",
                    "fol": "p_0(Karson)",
                    "str_fol": "experienced_handler(Karson)",
                    "negation": false
                },
                {
                    "id": 10,
                    "subject": "Karson",
                    "text": "Karson is not a skilled trainer.",
                    "fol": "\u00acp_6(Karson)",
                    "str_fol": "\u00acskilled_trainer(Karson)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "If Karson is either an experienced handler or a skilled trainer (but not both), then he is an effective leader.",
                    "fol": "(p_0(Karson) \u2295 p_6(Karson)) \u2192 p_7(Karson)",
                    "str_fol": "(experienced_handler(Karson) \u2295 skilled_trainer(Karson)) \u2192 effective_leader(Karson)"
                }
            ],
            "conclusion": {
                "id": 11,
                "subject": "Karson",
                "text": "Karson is not an effective leader.",
                "fol": "\u00acp_7(Karson)",
                "str_fol": "\u00aceffective_leader(Karson)",
                "negation": true
            }
        }
    ],
    "proof_trace": "1 -(p_4(Karson) <-> p_11(Karson)) -> p_5(Karson).  [assumption].\n2 -(p_10(Karson) <-> p_11(Karson)) -> p_3(Karson).  [assumption].\n3 -(p_10(Karson) <-> p_9(Karson)).  [assumption].\n4 -(p_9(Karson) <-> p_8(Karson)) -> p_2(Karson).  [assumption].\n5 -(p_8(Karson) <-> p_6(Karson)) -> p_1(Karson).  [assumption].\n6 -(p_0(Karson) <-> p_6(Karson)) -> p_7(Karson).  [assumption].\n7 --p_7(Karson).  [goal].\n8 -p_4(Karson) | p_11(Karson) | p_5(Karson).  [clausify(1)].\n9 p_4(Karson).  [assumption].\n11 p_11(Karson) | p_5(Karson).  [resolve(8,a,9,a)].\n12 -p_5(Karson).  [assumption].\n14 -p_3(Karson).  [assumption].\n15 p_10(Karson) | -p_11(Karson) | p_3(Karson).  [clausify(2)].\n17 -p_2(Karson).  [assumption].\n18 p_9(Karson) | -p_8(Karson) | p_2(Karson).  [clausify(4)].\n20 -p_1(Karson).  [assumption].\n21 p_8(Karson) | -p_6(Karson) | p_1(Karson).  [clausify(5)].\n22 -p_0(Karson) | p_6(Karson) | p_7(Karson).  [clausify(6)].\n23 p_0(Karson).  [assumption].\n25 -p_10(Karson) | -p_9(Karson).  [clausify(3)].\n27 p_10(Karson) | -p_11(Karson).  [resolve(15,c,14,a)].\n28 p_6(Karson) | p_7(Karson).  [resolve(22,a,23,a)].\n29 -p_7(Karson).  [deny(7)].\n30 -p_11(Karson) | -p_9(Karson).  [resolve(27,a,25,a)].\n31 p_11(Karson).  [resolve(11,b,12,a)].\n32 p_9(Karson) | -p_8(Karson).  [resolve(18,c,17,a)].\n34 -p_9(Karson).  [resolve(30,a,31,a)].\n35 p_8(Karson) | -p_6(Karson).  [resolve(21,c,20,a)].\n37 -p_8(Karson).  [resolve(34,a,32,a)].\n38 -p_6(Karson).  [resolve(37,a,35,a)].\n39 p_6(Karson).  [resolve(28,b,29,a)].\n40 $F.  [resolve(38,a,39,a)].",
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_4(Karson)\n\u00acp_5(Karson)\n\u00acp_3(Karson)\n\u00acp_2(Karson)\n\u00acp_1(Karson)\np_0(Karson)\n(\u00ac(p_4(Karson) \u2194 p_11(Karson))) \u2192 p_5(Karson)\n(\u00ac(p_10(Karson) \u2194 p_11(Karson))) \u2192 p_3(Karson)\n\u00ac(p_10(Karson) \u2194 p_9(Karson))\n(\u00ac(p_9(Karson) \u2194 p_8(Karson))) \u2192 p_2(Karson)\n(\u00ac(p_8(Karson) \u2194 p_6(Karson))) \u2192 p_1(Karson)\n(\u00ac(p_0(Karson) \u2194 p_6(Karson))) \u2192 \u00acp_7(Karson)",
            "Initial Goal": "\u00acp_7(Karson)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_4(Karson)",
                    "-p_5(Karson)",
                    "-p_3(Karson)",
                    "-p_2(Karson)",
                    "-p_1(Karson)",
                    "p_0(Karson)",
                    "(-(p_4(Karson) <-> p_11(Karson))) -> p_5(Karson)",
                    "(-(p_10(Karson) <-> p_11(Karson))) -> p_3(Karson)",
                    "-(p_10(Karson) <-> p_9(Karson))",
                    "(-(p_9(Karson) <-> p_8(Karson))) -> p_2(Karson)",
                    "(-(p_8(Karson) <-> p_6(Karson))) -> p_1(Karson)",
                    "(-(p_0(Karson) <-> p_6(Karson))) -> -p_7(Karson)"
                ],
                "formulas(goals)": [
                    "-p_7(Karson)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "(p_0(Karson) \u2295 p_6(Karson)) \u2192 p_7(Karson)"
                ],
                "added_facts": [],
                "added_rules": [
                    "(p_0(Karson) \u2295 p_6(Karson)) \u2192 \u00acp_7(Karson)"
                ]
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_4(Karson)\n\u00acp_5(Karson)\n\u00acp_3(Karson)\n\u00acp_2(Karson)\n\u00acp_1(Karson)\np_0(Karson)\n(\u00ac(p_4(Karson) \u2194 p_11(Karson))) \u2192 p_5(Karson)\n(\u00ac(p_10(Karson) \u2194 p_11(Karson))) \u2192 p_3(Karson)\n\u00ac(p_10(Karson) \u2194 p_9(Karson))\n(\u00ac(p_9(Karson) \u2194 p_8(Karson))) \u2192 p_2(Karson)\n(\u00ac(p_8(Karson) \u2194 p_6(Karson))) \u2192 p_1(Karson)\n(\u00ac(p_0(Karson) \u2194 p_6(Karson))) \u2227 p_7(Karson)",
            "Initial Goal": "\u00acp_7(Karson)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_4(Karson)",
                    "-p_5(Karson)",
                    "-p_3(Karson)",
                    "-p_2(Karson)",
                    "-p_1(Karson)",
                    "p_0(Karson)",
                    "(-(p_4(Karson) <-> p_11(Karson))) -> p_5(Karson)",
                    "(-(p_10(Karson) <-> p_11(Karson))) -> p_3(Karson)",
                    "-(p_10(Karson) <-> p_9(Karson))",
                    "(-(p_9(Karson) <-> p_8(Karson))) -> p_2(Karson)",
                    "(-(p_8(Karson) <-> p_6(Karson))) -> p_1(Karson)",
                    "(-(p_0(Karson) <-> p_6(Karson))) & p_7(Karson)"
                ],
                "formulas(goals)": [
                    "p_7(Karson)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "(\u00ac(p_0(Karson) \u2194 p_6(Karson))) \u2192 \u00acp_7(Karson)"
                ],
                "added_facts": [],
                "added_rules": [
                    "(\u00ac(p_0(Karson) \u2194 p_6(Karson))) \u2227 p_7(Karson)"
                ]
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_4(Karson)\n\u00acp_5(Karson)\n\u00acp_3(Karson)\n\u00acp_2(Karson)\n\u00acp_1(Karson)\np_0(Karson)\n(\u00ac(p_4(Karson) \u2194 p_11(Karson)) \u2192 p_5(Karson))\n(\u00ac(p_10(Karson) \u2194 p_11(Karson)) \u2192 p_3(Karson))\n\u00ac(p_10(Karson) \u2194 p_9(Karson))\n(\u00ac(p_9(Karson) \u2194 p_8(Karson)) \u2192 p_2(Karson))\n(\u00ac(p_8(Karson) \u2194 p_6(Karson)) \u2192 p_1(Karson))\n(p_0(Karson) \u2194 p_6(Karson)) \u2228 \u00acp_7(Karson)\n\u00ac(p_0(Karson) \u2194 p_6(Karson))",
            "Initial Goal": "\u00acp_7(Karson)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_4(Karson)",
                    "-p_5(Karson)",
                    "-p_3(Karson)",
                    "-p_2(Karson)",
                    "-p_1(Karson)",
                    "p_0(Karson)",
                    "(-(p_4(Karson) <-> p_11(Karson)) -> p_5(Karson))",
                    "(-(p_10(Karson) <-> p_11(Karson)) -> p_3(Karson))",
                    "-(p_10(Karson) <-> p_9(Karson))",
                    "(-(p_9(Karson) <-> p_8(Karson)) -> p_2(Karson))",
                    "(-(p_8(Karson) <-> p_6(Karson)) -> p_1(Karson))",
                    "((p_0(Karson) <-> p_6(Karson)) | -p_7(Karson))",
                    "-(p_0(Karson) <-> p_6(Karson))"
                ],
                "formulas(goals)": [
                    "-p_7(Karson)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "(\u00ac(p_0(Karson) \u2194 p_6(Karson))) \u2227 p_7(Karson)"
                ],
                "added_facts": [
                    "\u00ac(p_0(Karson) \u2194 p_6(Karson))"
                ],
                "added_rules": [
                    "(p_0(Karson) \u2194 p_6(Karson)) \u2228 \u00acp_7(Karson)"
                ]
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_4(Karson)\n\u00acp_5(Karson)\n\u00acp_3(Karson)\n\u00acp_2(Karson)\n\u00acp_1(Karson)\np_0(Karson)\n(\u00ac(p_4(Karson) \u2194 p_11(Karson)) \u2192 p_5(Karson))\n(\u00ac(p_10(Karson) \u2194 p_11(Karson)) \u2192 p_3(Karson))\n\u00ac(p_10(Karson) \u2194 p_9(Karson))\n(\u00ac(p_9(Karson) \u2194 p_8(Karson)) \u2192 p_2(Karson))\n(\u00ac(p_8(Karson) \u2194 p_6(Karson)) \u2192 p_1(Karson))\n\u00ac(p_0(Karson) \u2194 p_6(Karson))\n(p_11(Karson) \u2192 p_7(Karson))",
            "Initial Goal": "\u00acp_7(Karson)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_4(Karson)",
                    "-p_5(Karson)",
                    "-p_3(Karson)",
                    "-p_2(Karson)",
                    "-p_1(Karson)",
                    "p_0(Karson)",
                    "(-(p_4(Karson) <-> p_11(Karson)) -> p_5(Karson))",
                    "(-(p_10(Karson) <-> p_11(Karson)) -> p_3(Karson))",
                    "-(p_10(Karson) <-> p_9(Karson))",
                    "(-(p_9(Karson) <-> p_8(Karson)) -> p_2(Karson))",
                    "(-(p_8(Karson) <-> p_6(Karson)) -> p_1(Karson))",
                    "-(p_0(Karson) <-> p_6(Karson))",
                    "(p_11(Karson) -> p_7(Karson))"
                ],
                "formulas(goals)": [
                    "-(-p_7(Karson))"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "(p_0(Karson) \u2194 p_6(Karson)) \u2228 \u00acp_7(Karson)"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_11(Karson) \u2192 p_7(Karson)"
                ]
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_4(Karson)\n\u00acp_5(Karson)\n\u00acp_3(Karson)\n\u00acp_2(Karson)\n\u00acp_1(Karson)\np_0(Karson)\n(\u00ac(p_4(Karson) \u2194 p_11(Karson)) \u2192 p_5(Karson))\n(\u00ac(p_10(Karson) \u2194 p_11(Karson)) \u2192 p_3(Karson))\n\u00ac(p_10(Karson) \u2194 p_9(Karson))\n(\u00ac(p_9(Karson) \u2194 p_8(Karson)) \u2192 p_2(Karson))\n(\u00ac(p_8(Karson) \u2194 p_6(Karson)) \u2192 p_1(Karson))\n\u00ac(p_0(Karson) \u2194 p_6(Karson))\n(p_11(Karson) \u2192 \u00acp_7(Karson))",
            "Initial Goal": "\u00acp_7(Karson)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_4(Karson)",
                    "-p_5(Karson)",
                    "-p_3(Karson)",
                    "-p_2(Karson)",
                    "-p_1(Karson)",
                    "p_0(Karson)",
                    "(-(-(p_4(Karson) <-> p_11(Karson))) | p_5(Karson))",
                    "(-(-(p_10(Karson) <-> p_11(Karson))) | p_3(Karson))",
                    "-(-(p_10(Karson) <-> p_9(Karson)))",
                    "(-(-(p_9(Karson) <-> p_8(Karson))) | p_2(Karson))",
                    "(-(-(p_8(Karson) <-> p_6(Karson))) | p_1(Karson))",
                    "-(-(p_0(Karson) <-> p_6(Karson)))",
                    "(-p_11(Karson) | -p_7(Karson))"
                ],
                "formulas(goals)": [
                    "-p_7(Karson)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "(p_11(Karson) \u2192 p_7(Karson))"
                ],
                "added_facts": [],
                "added_rules": [
                    "(p_11(Karson) \u2192 \u00acp_7(Karson))"
                ]
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_4(Karson)\n\u00acp_5(Karson)\n\u00acp_3(Karson)\n\u00acp_2(Karson)\n\u00acp_1(Karson)\np_0(Karson)\n(\u00ac(p_4(Karson) \u2194 p_11(Karson)) \u2192 p_5(Karson))\n(\u00ac(p_10(Karson) \u2194 p_11(Karson)) \u2192 p_3(Karson))\n\u00ac(p_10(Karson) \u2194 p_9(Karson))\n(\u00ac(p_9(Karson) \u2194 p_8(Karson)) \u2192 p_2(Karson))\n(\u00ac(p_8(Karson) \u2194 p_6(Karson)) \u2192 p_1(Karson))\n\u00ac(p_0(Karson) \u2194 p_6(Karson))\n(p_11(Karson) \u2192 \u00acp_7(Karson))\np_11(Karson)\n(p_4(Karson) \u2194 p_11(Karson))\n(p_10(Karson) \u2228 p_9(Karson))\n(\u00acp_10(Karson) \u2228 \u00acp_9(Karson))",
            "Initial Goal": "\u00acp_7(Karson)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_4(Karson)",
                    "-p_5(Karson)",
                    "-p_3(Karson)",
                    "-p_2(Karson)",
                    "-p_1(Karson)",
                    "p_0(Karson)",
                    "(-(p_4(Karson) <-> p_11(Karson)) -> p_5(Karson))",
                    "(-(p_10(Karson) <-> p_11(Karson)) -> p_3(Karson))",
                    "-(p_10(Karson) <-> p_9(Karson))",
                    "(-(p_9(Karson) <-> p_8(Karson)) -> p_2(Karson))",
                    "(-(p_8(Karson) <-> p_6(Karson)) -> p_1(Karson))",
                    "-(p_0(Karson) <-> p_6(Karson))",
                    "(p_11(Karson) -> -p_7(Karson))",
                    "p_11(Karson)",
                    "(p_4(Karson) <-> p_11(Karson))",
                    "(p_10(Karson) | p_9(Karson))",
                    "(-p_10(Karson) | -p_9(Karson))"
                ],
                "formulas(goals)": [
                    "-p_7(Karson)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_11(Karson)"
                ],
                "added_rules": [
                    "(p_4(Karson) \u2194 p_11(Karson))",
                    "(p_10(Karson) \u2228 p_9(Karson))",
                    "(\u00acp_10(Karson) \u2228 \u00acp_9(Karson))"
                ]
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_4(Karson)\n\u00acp_5(Karson)\n\u00acp_3(Karson)\n\u00acp_2(Karson)\n\u00acp_1(Karson)\np_0(Karson)\n(\u00ac(p_4(Karson) \u2194 p_11(Karson)) \u2192 p_5(Karson))\n(\u00ac(p_10(Karson) \u2194 p_11(Karson)) \u2192 p_3(Karson))\n\u00ac(p_10(Karson) \u2194 p_9(Karson))\n(\u00ac(p_9(Karson) \u2194 p_8(Karson)) \u2192 p_2(Karson))\n(\u00ac(p_8(Karson) \u2194 p_6(Karson)) \u2192 p_1(Karson))\n\u00ac(p_0(Karson) \u2194 p_6(Karson))\np_11(Karson)\n(p_4(Karson) \u2194 p_11(Karson))\n(p_10(Karson) \u2228 p_9(Karson))\n(\u00acp_10(Karson) \u2228 \u00acp_9(Karson))\n(p_11(Karson) \u2192 p_7(Karson))",
            "Initial Goal": "\u00acp_7(Karson)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_4(Karson)",
                    "-p_5(Karson)",
                    "-p_3(Karson)",
                    "-p_2(Karson)",
                    "-p_1(Karson)",
                    "p_0(Karson)",
                    "(-(p_4(Karson) <-> p_11(Karson)) -> p_5(Karson))",
                    "(-(p_10(Karson) <-> p_11(Karson)) -> p_3(Karson))",
                    "-(p_10(Karson) <-> p_9(Karson))",
                    "(-(p_9(Karson) <-> p_8(Karson)) -> p_2(Karson))",
                    "(-(p_8(Karson) <-> p_6(Karson)) -> p_1(Karson))",
                    "-(p_0(Karson) <-> p_6(Karson))",
                    "p_11(Karson)",
                    "(p_4(Karson) <-> p_11(Karson))",
                    "(p_10(Karson) | p_9(Karson))",
                    "(-p_10(Karson) | -p_9(Karson))",
                    "(p_11(Karson) -> p_7(Karson))"
                ],
                "formulas(goals)": [
                    "-(-p_7(Karson))"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "(p_11(Karson) \u2192 \u00acp_7(Karson))"
                ],
                "added_facts": [],
                "added_rules": [
                    "(p_11(Karson) \u2192 p_7(Karson))"
                ]
            }
        }
    ]
}