{
    "original_context": [
        "Vincenzo sets an example.",
        "Vincenzo does not inspire his team.",
        "Vincenzo is not creative.",
        "Vincenzo knows ingredients.",
        "Vincenzo trains colleagues.",
        "Vincenzo does not succeed in business.",
        "Vincenzo cannot create a menu.",
        "Vincenzo does not enjoy cuisine.",
        "Vincenzo is a picky eater.",
        "If someone sets an example and motivates others, then they inspire their team.",
        "If Vincenzo is creative, then he knows ingredients and cooks well.",
        "If Vincenzo either trains colleagues or motivates others (but not both), then he is able to lead staff.",
        "If someone manages a team and leads staff, then they can succeed in business.",
        "If Vincenzo runs a restaurant, then he can manage a team and create a menu.",
        "If Vincenzo cooks well or appreciates flavors, then he can run a restaurant.",
        "Every food connoisseur appreciates flavors or enjoys cuisine."
    ],
    "original_context_fol": [
        "p_7(Vincenzo)",
        "\u00acp_8(Vincenzo)",
        "\u00acp_5(Vincenzo)",
        "p_6(Vincenzo)",
        "p_4(Vincenzo)",
        "\u00acp_2(Vincenzo)",
        "\u00acp_1(Vincenzo)",
        "\u00acp_0(Vincenzo)",
        "p_3(Vincenzo)",
        "\u2200x ((p_7(x) \u2227 p_15(x)) \u2192 p_8(x))",
        "p_5(Vincenzo) \u2192 (p_6(Vincenzo) \u2227 p_11(Vincenzo))",
        "(p_4(Vincenzo) \u2295 p_15(Vincenzo)) \u2192 p_14(Vincenzo)",
        "\u2200x ((p_13(x) \u2227 p_14(x)) \u2192 p_2(x))",
        "p_12(Vincenzo) \u2192 (p_13(Vincenzo) \u2227 p_1(Vincenzo))",
        "(p_11(Vincenzo) \u2228 p_10(Vincenzo)) \u2192 p_12(Vincenzo)",
        "\u2200x (p_9(x) \u2192 (p_10(x) \u2228 p_0(x)))"
    ],
    "conclusion": "Vincenzo is either a food connoisseur or a picky eater, but not both.",
    "conclusion_fol": "p_9(Vincenzo) \u2295 p_3(Vincenzo)",
    "answer": "True",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 7,
                    "subject": "Vincenzo",
                    "text": "Vincenzo sets an example.",
                    "fol": "p_7(Vincenzo)",
                    "str_fol": "sets_example(Vincenzo)",
                    "negation": false
                },
                {
                    "id": 8,
                    "subject": "Vincenzo",
                    "text": "Vincenzo does not inspire his team.",
                    "fol": "\u00acp_8(Vincenzo)",
                    "str_fol": "\u00acinspires_team(Vincenzo)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 6,
                    "text": "If someone sets an example and motivates others, then they inspire their team.",
                    "fol": "\u2200x ((p_7(x) \u2227 p_15(x)) \u2192 p_8(x))",
                    "str_fol": "\u2200x ((sets_example(x) \u2227 motivates_others(x)) \u2192 inspires_team(x))"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Vincenzo",
                "text": "Vincenzo does not motivate others.",
                "fol": "\u00acp_15(Vincenzo)",
                "str_fol": "\u00acmotivates_others(Vincenzo)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 5,
                    "subject": "Vincenzo",
                    "text": "Vincenzo is not creative.",
                    "fol": "\u00acp_5(Vincenzo)",
                    "str_fol": "\u00accreative(Vincenzo)",
                    "negation": true
                },
                {
                    "id": 6,
                    "subject": "Vincenzo",
                    "text": "Vincenzo knows ingredients.",
                    "fol": "p_6(Vincenzo)",
                    "str_fol": "know_ingredients(Vincenzo)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "If Vincenzo is creative, then he knows ingredients and cooks well.",
                    "fol": "p_5(Vincenzo) \u2192 (p_6(Vincenzo) \u2227 p_11(Vincenzo))",
                    "str_fol": "creative(Vincenzo) \u2192 (know_ingredients(Vincenzo) \u2227 cook_well(Vincenzo))"
                }
            ],
            "conclusion": null
        },
        {
            "facts": [
                {
                    "id": 4,
                    "subject": "Vincenzo",
                    "text": "Vincenzo trains colleagues.",
                    "fol": "p_4(Vincenzo)",
                    "str_fol": "trains_colleagues(Vincenzo)",
                    "negation": false
                },
                {
                    "id": 9,
                    "subject": "Vincenzo",
                    "text": "Vincenzo does not motivate others.",
                    "fol": "\u00acp_15(Vincenzo)",
                    "str_fol": "\u00acmotivates_others(Vincenzo)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "If Vincenzo either trains colleagues or motivates others (but not both), then he is able to lead staff.",
                    "fol": "(p_4(Vincenzo) \u2295 p_15(Vincenzo)) \u2192 p_14(Vincenzo)",
                    "str_fol": "(trains_colleagues(Vincenzo) \u2295 motivates_others(Vincenzo)) \u2192 leads_staff(Vincenzo)"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Vincenzo",
                "text": "Vincenzo leads staff.",
                "fol": "p_14(Vincenzo)",
                "str_fol": "leads_staff(Vincenzo)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 10,
                    "subject": "Vincenzo",
                    "text": "Vincenzo leads staff.",
                    "fol": "p_14(Vincenzo)",
                    "str_fol": "leads_staff(Vincenzo)",
                    "negation": false
                },
                {
                    "id": 2,
                    "subject": "Vincenzo",
                    "text": "Vincenzo does not succeed in business.",
                    "fol": "\u00acp_2(Vincenzo)",
                    "str_fol": "\u00acsucceeds_business(Vincenzo)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "If someone manages a team and leads staff, then they can succeed in business.",
                    "fol": "\u2200x ((p_13(x) \u2227 p_14(x)) \u2192 p_2(x))",
                    "str_fol": "\u2200x ((manage_team(x) \u2227 leads_staff(x)) \u2192 succeeds_business(x))"
                }
            ],
            "conclusion": {
                "id": 11,
                "subject": "Vincenzo",
                "text": "Vincenzo cannot manage a team.",
                "fol": "\u00acp_13(Vincenzo)",
                "str_fol": "\u00acmanage_team(Vincenzo)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 11,
                    "subject": "Vincenzo",
                    "text": "Vincenzo cannot manage a team.",
                    "fol": "\u00acp_13(Vincenzo)",
                    "str_fol": "\u00acmanage_team(Vincenzo)",
                    "negation": true
                },
                {
                    "id": 1,
                    "subject": "Vincenzo",
                    "text": "Vincenzo cannot create a menu.",
                    "fol": "\u00acp_1(Vincenzo)",
                    "str_fol": "\u00accreate_menu(Vincenzo)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "If Vincenzo runs a restaurant, then he can manage a team and create a menu.",
                    "fol": "p_12(Vincenzo) \u2192 (p_13(Vincenzo) \u2227 p_1(Vincenzo))",
                    "str_fol": "run_restaurant(Vincenzo) \u2192 (manage_team(Vincenzo) \u2227 create_menu(Vincenzo))"
                }
            ],
            "conclusion": {
                "id": 12,
                "subject": "Vincenzo",
                "text": "Vincenzo cannot run a restaurant.",
                "fol": "\u00acp_12(Vincenzo)",
                "str_fol": "\u00acrun_restaurant(Vincenzo)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 12,
                    "subject": "Vincenzo",
                    "text": "Vincenzo cannot run a restaurant.",
                    "fol": "\u00acp_12(Vincenzo)",
                    "str_fol": "\u00acrun_restaurant(Vincenzo)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "If Vincenzo cooks well or appreciates flavors, then he can run a restaurant.",
                    "fol": "(p_11(Vincenzo) \u2228 p_10(Vincenzo)) \u2192 p_12(Vincenzo)",
                    "str_fol": "(cook_well(Vincenzo) \u2228 appreciate_flavors(Vincenzo)) \u2192 run_restaurant(Vincenzo)"
                }
            ],
            "conclusion": {
                "id": 13,
                "subject": "Vincenzo",
                "text": "Vincenzo does not appreciate flavors.",
                "fol": "\u00acp_10(Vincenzo)",
                "str_fol": "\u00acappreciate_flavors(Vincenzo)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 13,
                    "subject": "Vincenzo",
                    "text": "Vincenzo does not appreciate flavors.",
                    "fol": "\u00acp_10(Vincenzo)",
                    "str_fol": "\u00acappreciate_flavors(Vincenzo)",
                    "negation": true
                },
                {
                    "id": 0,
                    "subject": "Vincenzo",
                    "text": "Vincenzo does not enjoy cuisine.",
                    "fol": "\u00acp_0(Vincenzo)",
                    "str_fol": "\u00acenjoy_cuisine(Vincenzo)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "Every food connoisseur appreciates flavors or enjoys cuisine.",
                    "fol": "\u2200x (p_9(x) \u2192 (p_10(x) \u2228 p_0(x)))",
                    "str_fol": "\u2200x (food_connoisseur(x) \u2192 (appreciate_flavors(x) \u2228 enjoy_cuisine(x)))"
                }
            ],
            "conclusion": {
                "id": 14,
                "subject": "Vincenzo",
                "text": "Vincenzo is not a food connoisseur.",
                "fol": "\u00acp_9(Vincenzo)",
                "str_fol": "\u00acfood_connoisseur(Vincenzo)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 14,
                    "subject": "Vincenzo",
                    "text": "Vincenzo is not a food connoisseur.",
                    "fol": "\u00acp_9(Vincenzo)",
                    "str_fol": "\u00acfood_connoisseur(Vincenzo)",
                    "negation": true
                },
                {
                    "id": 3,
                    "subject": "Vincenzo",
                    "text": "Vincenzo is a picky eater.",
                    "fol": "p_3(Vincenzo)",
                    "str_fol": "picky_eater(Vincenzo)",
                    "negation": false
                }
            ],
            "rules": [],
            "conclusion": {
                "id": 14,
                "text": "Vincenzo is either a food connoisseur or a picky eater, but not both.",
                "fol": "p_9(Vincenzo) \u2295 p_3(Vincenzo)",
                "str_fol": "food_connoisseur(Vincenzo) \u2295 picky_eater(Vincenzo)"
            }
        }
    ],
    "edits": [
        {
            "edit_number": 1,
            "modification_type": "INVARIANT",
            "edited_context_fol": [
                "p_7(Vincenzo)",
                "\u00acp_8(Vincenzo)",
                "\u00acp_5(Vincenzo)",
                "p_6(Vincenzo)",
                "p_4(Vincenzo)",
                "\u00acp_2(Vincenzo)",
                "\u00acp_1(Vincenzo)",
                "\u00acp_0(Vincenzo)",
                "p_3(Vincenzo)",
                "\u2200x ((p_7(x) \u2227 p_15(x)) \u2192 p_8(x))",
                "(p_5(Vincenzo) \u2192 p_6(Vincenzo)) \u2227 (p_5(Vincenzo) \u2192 p_11(Vincenzo))",
                "((p_4(Vincenzo) \u2295 p_15(Vincenzo)) \u2192 p_14(Vincenzo))",
                "\u2200x ((p_13(x) \u2227 p_14(x)) \u2192 p_2(x))",
                "p_12(Vincenzo) \u2192 (p_13(Vincenzo) \u2227 p_1(Vincenzo))",
                "(p_11(Vincenzo) \u2228 p_10(Vincenzo)) \u2192 p_12(Vincenzo)",
                "\u2200x (\u00ac(p_10(x) \u2228 p_0(x)) \u2192 \u00acp_9(x))",
                "\u00acp_9(Vincenzo)"
            ],
            "edited_natural_language_context": [
                "Vincenzo sets an example.",
                "Vincenzo does not inspire his team.",
                "Vincenzo is not creative.",
                "Vincenzo knows ingredients.",
                "Vincenzo trains colleagues.",
                "Vincenzo does not succeed in business.",
                "Vincenzo cannot create a menu.",
                "Vincenzo does not enjoy cuisine.",
                "Vincenzo is a picky eater.",
                "If someone sets an example and motivates others, then they inspire their team.",
                "If Vincenzo is creative, then he knows ingredients, and if Vincenzo is creative, then he cooks well.",
                "If Vincenzo either trains colleagues or motivates others (but not both), then he is able to lead staff.",
                "If someone manages a team and leads staff, then they can succeed in business.",
                "If Vincenzo runs a restaurant, then he can manage a team and create a menu.",
                "If Vincenzo cooks well or appreciates flavors, then he can run a restaurant.",
                "For anyone, if they neither appreciate flavors nor enjoy cuisine, then they are not a food connoisseur.",
                "Vincenzo is not a food connoisseur."
            ],
            "edits_made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    {
                        "fol": "\u00acp_9(Vincenzo)",
                        "nl": "Vincenzo is not a food connoisseur."
                    }
                ],
                "added_rules": [
                    {
                        "fol": "(p_5(Vincenzo) \u2192 p_6(Vincenzo)) \u2227 (p_5(Vincenzo) \u2192 p_11(Vincenzo))",
                        "nl": "If Vincenzo is creative, then he knows ingredients, and if Vincenzo is creative, then he cooks well."
                    },
                    {
                        "fol": "\u2200x (\u00ac(p_10(x) \u2228 p_0(x)) \u2192 \u00acp_9(x))",
                        "nl": "For anyone, if they neither appreciate flavors nor enjoy cuisine, then they are not a food connoisseur."
                    }
                ]
            },
            "conclusion": "Vincenzo is either a food connoisseur or a picky eater, but not both.",
            "conclusion_fol": "p_9(Vincenzo) \u2295 p_3(Vincenzo)",
            "prover9_input": {
                "formulas(assumptions)": [
                    "p_7(Vincenzo)",
                    "-p_8(Vincenzo)",
                    "-p_5(Vincenzo)",
                    "p_6(Vincenzo)",
                    "p_4(Vincenzo)",
                    "-p_2(Vincenzo)",
                    "-p_1(Vincenzo)",
                    "-p_0(Vincenzo)",
                    "p_3(Vincenzo)",
                    "all x ((p_7(x) & p_15(x)) -> p_8(x))",
                    "(-p_5(Vincenzo) | p_6(Vincenzo)) & (-p_5(Vincenzo) | p_11(Vincenzo))",
                    "(-((p_4(Vincenzo) & -p_15(Vincenzo)) | (-p_4(Vincenzo) & p_15(Vincenzo))) | p_14(Vincenzo))",
                    "all x ((p_13(x) & p_14(x)) -> p_2(x))",
                    "(-p_12(Vincenzo) | (p_13(Vincenzo) & p_1(Vincenzo)))",
                    "(-(p_11(Vincenzo) | p_10(Vincenzo)) | p_12(Vincenzo))",
                    "all x (-(-p_10(x) & -p_0(x)) | -p_9(x))",
                    "-p_9(Vincenzo)"
                ],
                "formulas(goals)": [
                    "-(p_9(Vincenzo) <-> p_3(Vincenzo))"
                ]
            },
            "answer": "True"
        },
        {
            "edit_number": 2,
            "modification_type": "INVARIANT",
            "edited_context_fol": [
                "p_7(Vincenzo)",
                "\u00acp_8(Vincenzo)",
                "\u00acp_5(Vincenzo)",
                "p_6(Vincenzo)",
                "p_4(Vincenzo)",
                "\u00acp_2(Vincenzo)",
                "\u00acp_1(Vincenzo)",
                "\u00acp_0(Vincenzo)",
                "p_3(Vincenzo)",
                "\u2200x ((p_7(x) \u2227 p_15(x)) \u2192 p_8(x))",
                "(p_5(Vincenzo) \u2192 (p_6(Vincenzo) \u2227 p_11(Vincenzo)))",
                "((p_4(Vincenzo) \u2295 p_15(Vincenzo)) \u2192 p_14(Vincenzo))",
                "(\u00acp_15(Vincenzo) \u2192 p_14(Vincenzo))",
                "\u2200x ((p_13(x) \u2227 p_14(x)) \u2192 p_2(x))",
                "p_12(Vincenzo) \u2192 (p_13(Vincenzo) \u2227 p_1(Vincenzo))",
                "(p_11(Vincenzo) \u2228 p_10(Vincenzo)) \u2192 p_12(Vincenzo)",
                "\u2200x (p_9(x) \u2192 (p_10(x) \u2228 p_0(x)))",
                "\u00acp_9(Vincenzo)"
            ],
            "edited_natural_language_context": [
                "Vincenzo sets an example.",
                "Vincenzo does not inspire his team.",
                "Vincenzo is not creative.",
                "Vincenzo knows ingredients.",
                "Vincenzo trains colleagues.",
                "Vincenzo does not succeed in business.",
                "Vincenzo cannot create a menu.",
                "Vincenzo does not enjoy cuisine.",
                "Vincenzo is a picky eater.",
                "If someone sets an example and motivates others, then they inspire their team.",
                "If Vincenzo is creative, then he knows ingredients and cooks well.",
                "If Vincenzo either trains colleagues or motivates others (but not both), then he is able to lead staff.",
                "If Vincenzo does not motivate others, then he is able to lead staff.",
                "If someone manages a team and leads staff, then they can succeed in business.",
                "If Vincenzo runs a restaurant, then he can manage a team and create a menu.",
                "If Vincenzo cooks well or appreciates flavors, then he can run a restaurant.",
                "Every food connoisseur appreciates flavors or enjoys cuisine.",
                "Vincenzo is not a food connoisseur."
            ],
            "edits_made": {
                "removed_facts": [],
                "removed_rules": [
                    {
                        "fol": "(p_5(Vincenzo) \u2192 p_6(Vincenzo)) \u2227 (p_5(Vincenzo) \u2192 p_11(Vincenzo))",
                        "nl": "If Vincenzo is creative, then he knows ingredients, and if Vincenzo is creative, then he cooks well."
                    },
                    {
                        "fol": "\u2200x (\u00ac(p_10(x) \u2228 p_0(x)) \u2192 \u00acp_9(x))",
                        "nl": "For anyone, if they neither appreciate flavors nor enjoy cuisine, then they are not a food connoisseur."
                    }
                ],
                "added_facts": [],
                "added_rules": [
                    {
                        "fol": "(p_5(Vincenzo) \u2192 (p_6(Vincenzo) \u2227 p_11(Vincenzo)))",
                        "nl": "If Vincenzo is creative, then he knows ingredients and cooks well."
                    },
                    {
                        "fol": "\u00acp_15(Vincenzo) \u2192 p_14(Vincenzo)",
                        "nl": "If Vincenzo does not motivate others, then he is able to lead staff."
                    },
                    {
                        "fol": "\u2200x (p_9(x) \u2192 (p_10(x) \u2228 p_0(x)))",
                        "nl": "Every food connoisseur appreciates flavors or enjoys cuisine."
                    }
                ]
            },
            "conclusion": "Vincenzo is either a food connoisseur or a picky eater, but not both.",
            "conclusion_fol": "p_9(Vincenzo) \u2295 p_3(Vincenzo)",
            "prover9_input": {
                "formulas(assumptions)": [
                    "p_7(Vincenzo)",
                    "-p_8(Vincenzo)",
                    "-p_5(Vincenzo)",
                    "p_6(Vincenzo)",
                    "p_4(Vincenzo)",
                    "-p_2(Vincenzo)",
                    "-p_1(Vincenzo)",
                    "-p_0(Vincenzo)",
                    "p_3(Vincenzo)",
                    "all x ((p_7(x) & p_15(x)) -> p_8(x))",
                    "(p_5(Vincenzo) -> (p_6(Vincenzo) & p_11(Vincenzo)))",
                    "(-(p_4(Vincenzo) <-> p_15(Vincenzo)) -> p_14(Vincenzo))",
                    "(-p_15(Vincenzo) -> p_14(Vincenzo))",
                    "all x ((p_13(x) & p_14(x)) -> p_2(x))",
                    "p_12(Vincenzo) -> (p_13(Vincenzo) & p_1(Vincenzo))",
                    "(p_11(Vincenzo) | p_10(Vincenzo)) -> p_12(Vincenzo)",
                    "all x (p_9(x) -> (p_10(x) | p_0(x)))",
                    "-p_9(Vincenzo)"
                ],
                "formulas(goals)": [
                    "-(p_9(Vincenzo) <-> p_3(Vincenzo))"
                ]
            },
            "answer": "True"
        },
        {
            "edit_number": 3,
            "modification_type": "FLIP",
            "edited_context_fol": [
                "p_7(Vincenzo)",
                "\u00acp_8(Vincenzo)",
                "\u00acp_5(Vincenzo)",
                "p_6(Vincenzo)",
                "p_4(Vincenzo)",
                "\u00acp_2(Vincenzo)",
                "\u00acp_1(Vincenzo)",
                "\u00acp_0(Vincenzo)",
                "p_3(Vincenzo)",
                "\u2200x ((p_7(x) \u2227 p_15(x)) \u2192 p_8(x))",
                "(p_5(Vincenzo) \u2192 (p_6(Vincenzo) \u2227 p_11(Vincenzo)))",
                "((p_4(Vincenzo) \u2295 p_15(Vincenzo)) \u2192 p_14(Vincenzo))",
                "(\u00acp_15(Vincenzo) \u2192 p_14(Vincenzo))",
                "\u2200x ((p_13(x) \u2227 p_14(x)) \u2192 p_2(x))",
                "(p_12(Vincenzo) \u2192 (p_13(Vincenzo) \u2227 p_1(Vincenzo)))",
                "((p_11(Vincenzo) \u2228 p_10(Vincenzo)) \u2192 p_12(Vincenzo))",
                "\u2200x (p_9(x) \u2192 (p_10(x) \u2228 p_0(x)))",
                "(p_3(Vincenzo) \u2192 p_9(Vincenzo))"
            ],
            "edited_natural_language_context": [
                "Vincenzo sets an example.",
                "Vincenzo does not inspire his team.",
                "Vincenzo is not creative.",
                "Vincenzo knows ingredients.",
                "Vincenzo trains colleagues.",
                "Vincenzo does not succeed in business.",
                "Vincenzo cannot create a menu.",
                "Vincenzo does not enjoy cuisine.",
                "Vincenzo is a picky eater.",
                "If someone sets an example and motivates others, then they inspire their team.",
                "If Vincenzo is creative, then he knows ingredients and cooks well.",
                "If Vincenzo either trains colleagues or motivates others (but not both), then he is able to lead staff.",
                "If Vincenzo does not motivate others, then he is able to lead staff.",
                "If someone manages a team and leads staff, then they can succeed in business.",
                "If Vincenzo runs a restaurant, then he can manage a team and create a menu.",
                "If Vincenzo cooks well or appreciates flavors, then he can run a restaurant.",
                "Every food connoisseur appreciates flavors or enjoys cuisine.",
                "If Vincenzo is a picky eater, then he is a food connoisseur."
            ],
            "edits_made": {
                "removed_facts": [
                    {
                        "fol": "\u00acp_9(Vincenzo)",
                        "nl": "Vincenzo is not a food connoisseur."
                    }
                ],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    {
                        "fol": "(p_3(Vincenzo) \u2192 p_9(Vincenzo))",
                        "nl": "If Vincenzo is a picky eater, then he is a food connoisseur."
                    }
                ]
            },
            "conclusion": "Vincenzo is either a food connoisseur or a picky eater, but not both.",
            "conclusion_fol": "p_9(Vincenzo) \u2295 p_3(Vincenzo)",
            "prover9_input": {
                "formulas(assumptions)": [
                    "p_7(Vincenzo).",
                    "-p_8(Vincenzo).",
                    "-p_5(Vincenzo).",
                    "p_6(Vincenzo).",
                    "p_4(Vincenzo).",
                    "-p_2(Vincenzo).",
                    "-p_1(Vincenzo).",
                    "-p_0(Vincenzo).",
                    "p_3(Vincenzo).",
                    "all x ((p_7(x) & p_15(x)) -> p_8(x)).",
                    "(p_5(Vincenzo) -> (p_6(Vincenzo) & p_11(Vincenzo))).",
                    "(-(p_4(Vincenzo) <-> p_15(Vincenzo)) -> p_14(Vincenzo)).",
                    "(-p_15(Vincenzo) -> p_14(Vincenzo)).",
                    "all x ((p_13(x) & p_14(x)) -> p_2(x)).",
                    "(p_12(Vincenzo) -> (p_13(Vincenzo) & p_1(Vincenzo))).",
                    "((p_11(Vincenzo) | p_10(Vincenzo)) -> p_12(Vincenzo)).",
                    "all x (p_9(x) -> (p_10(x) | p_0(x))).",
                    "(p_3(Vincenzo) -> p_9(Vincenzo))."
                ],
                "formulas(goals)": [
                    "p_9(Vincenzo) <-> p_3(Vincenzo)."
                ]
            },
            "answer": "False"
        },
        {
            "edit_number": 4,
            "modification_type": "FLIP",
            "edited_context_fol": [
                "p_7(Vincenzo)",
                "\u00acp_8(Vincenzo)",
                "\u00acp_5(Vincenzo)",
                "p_6(Vincenzo)",
                "p_4(Vincenzo)",
                "\u00acp_2(Vincenzo)",
                "\u00acp_1(Vincenzo)",
                "\u00acp_0(Vincenzo)",
                "p_3(Vincenzo)",
                "\u2200x ((p_7(x) \u2227 p_15(x)) \u2192 p_8(x))",
                "(p_5(Vincenzo) \u2192 (p_6(Vincenzo) \u2227 p_11(Vincenzo)))",
                "((p_4(Vincenzo) \u2295 p_15(Vincenzo)) \u2192 p_14(Vincenzo))",
                "(\u00acp_15(Vincenzo) \u2192 p_14(Vincenzo))",
                "\u2200x ((p_13(x) \u2227 p_14(x)) \u2192 p_2(x))",
                "(p_12(Vincenzo) \u2192 (p_13(Vincenzo) \u2227 p_1(Vincenzo)))",
                "((p_11(Vincenzo) \u2228 p_10(Vincenzo)) \u2192 p_12(Vincenzo))",
                "\u2200x (p_9(x) \u2192 (p_10(x) \u2228 p_0(x)))",
                "\u00acp_9(Vincenzo)"
            ],
            "edited_natural_language_context": [
                "Vincenzo sets an example.",
                "Vincenzo does not inspire his team.",
                "Vincenzo is not creative.",
                "Vincenzo knows ingredients.",
                "Vincenzo trains colleagues.",
                "Vincenzo does not succeed in business.",
                "Vincenzo cannot create a menu.",
                "Vincenzo does not enjoy cuisine.",
                "Vincenzo is a picky eater.",
                "If someone sets an example and motivates others, then they inspire their team.",
                "If Vincenzo is creative, then he knows ingredients and cooks well.",
                "If Vincenzo either trains colleagues or motivates others (but not both), then he is able to lead staff.",
                "If Vincenzo does not motivate others, then he is able to lead staff.",
                "If someone manages a team and leads staff, then they can succeed in business.",
                "If Vincenzo runs a restaurant, then he can manage a team and create a menu.",
                "If Vincenzo cooks well or appreciates flavors, then he can run a restaurant.",
                "Every food connoisseur appreciates flavors or enjoys cuisine.",
                "Vincenzo is not a food connoisseur."
            ],
            "edits_made": {
                "removed_facts": [],
                "removed_rules": [
                    {
                        "fol": "(p_3(Vincenzo) \u2192 p_9(Vincenzo))",
                        "nl": "If Vincenzo is a picky eater, then he is a food connoisseur."
                    }
                ],
                "added_facts": [
                    {
                        "fol": "\u00acp_9(Vincenzo)",
                        "nl": "Vincenzo is not a food connoisseur."
                    }
                ],
                "added_rules": []
            },
            "conclusion": "Vincenzo is either a food connoisseur or a picky eater, but not both.",
            "conclusion_fol": "p_9(Vincenzo) \u2295 p_3(Vincenzo)",
            "prover9_input": {
                "formulas(assumptions)": [
                    "p_7(Vincenzo).",
                    "-p_8(Vincenzo).",
                    "-p_5(Vincenzo).",
                    "p_6(Vincenzo).",
                    "p_4(Vincenzo).",
                    "-p_2(Vincenzo).",
                    "-p_1(Vincenzo).",
                    "-p_0(Vincenzo).",
                    "p_3(Vincenzo).",
                    "all x ((p_7(x) & p_15(x)) -> p_8(x)).",
                    "(p_5(Vincenzo) -> (p_6(Vincenzo) & p_11(Vincenzo))).",
                    "(-(p_4(Vincenzo) <-> p_15(Vincenzo))) -> p_14(Vincenzo).",
                    "(-p_15(Vincenzo) -> p_14(Vincenzo)).",
                    "all x ((p_13(x) & p_14(x)) -> p_2(x)).",
                    "(p_12(Vincenzo) -> (p_13(Vincenzo) & p_1(Vincenzo))).",
                    "((p_11(Vincenzo) | p_10(Vincenzo)) -> p_12(Vincenzo)).",
                    "all x (p_9(x) -> (p_10(x) | p_0(x))).",
                    "-p_9(Vincenzo)."
                ],
                "formulas(goals)": [
                    "-(p_9(Vincenzo) <-> p_3(Vincenzo))."
                ]
            },
            "answer": "True"
        },
        {
            "edit_number": 5,
            "modification_type": "INVARIANT",
            "edited_context_fol": [
                "p_7(Vincenzo)",
                "\u00acp_8(Vincenzo)",
                "\u00acp_5(Vincenzo)",
                "p_6(Vincenzo)",
                "p_4(Vincenzo)",
                "\u00acp_2(Vincenzo)",
                "\u00acp_1(Vincenzo)",
                "\u00acp_0(Vincenzo)",
                "p_3(Vincenzo)",
                "\u2200x ((p_7(x) \u2227 p_15(x)) \u2192 p_8(x))",
                "((p_5(Vincenzo) \u2192 p_6(Vincenzo)) \u2227 (p_5(Vincenzo) \u2192 p_11(Vincenzo)))",
                "((p_4(Vincenzo) \u2295 p_15(Vincenzo)) \u2192 p_14(Vincenzo))",
                "(\u00acp_15(Vincenzo) \u2192 p_14(Vincenzo))",
                "\u2200x ((p_13(x) \u2227 p_14(x)) \u2192 p_2(x))",
                "(p_12(Vincenzo) \u2192 (p_13(Vincenzo) \u2227 p_1(Vincenzo)))",
                "((p_11(Vincenzo) \u2228 p_10(Vincenzo)) \u2192 p_12(Vincenzo))",
                "\u2200x (p_9(x) \u2192 (p_10(x) \u2228 p_0(x)))",
                "\u00acp_9(Vincenzo)",
                "(p_3(Vincenzo) \u2228 p_9(Vincenzo))",
                "(p_9(Vincenzo) \u2192 p_2(Vincenzo))"
            ],
            "edited_natural_language_context": [
                "Vincenzo sets an example.",
                "Vincenzo does not inspire his team.",
                "Vincenzo is not creative.",
                "Vincenzo knows ingredients.",
                "Vincenzo trains colleagues.",
                "Vincenzo does not succeed in business.",
                "Vincenzo cannot create a menu.",
                "Vincenzo does not enjoy cuisine.",
                "Vincenzo is a picky eater.",
                "If someone sets an example and motivates others, then they inspire their team.",
                "If Vincenzo is creative, then he knows ingredients, and if Vincenzo is creative, then he cooks well.",
                "If Vincenzo either trains colleagues or motivates others (but not both), then he is able to lead staff.",
                "If Vincenzo does not motivate others, then he is able to lead staff.",
                "If someone manages a team and leads staff, then they can succeed in business.",
                "If Vincenzo runs a restaurant, then he can manage a team and create a menu.",
                "If Vincenzo cooks well or appreciates flavors, then he can run a restaurant.",
                "Every food connoisseur appreciates flavors or enjoys cuisine.",
                "Vincenzo is not a food connoisseur.",
                "Vincenzo is either a picky eater or a food connoisseur.",
                "If Vincenzo is a food connoisseur, then he succeeds in business."
            ],
            "edits_made": {
                "removed_facts": [],
                "removed_rules": [
                    {
                        "fol": "(p_5(Vincenzo) \u2192 (p_6(Vincenzo) \u2227 p_11(Vincenzo)))",
                        "nl": "If Vincenzo is creative, then he knows ingredients and cooks well."
                    }
                ],
                "added_facts": [
                    {
                        "fol": "(p_3(Vincenzo) \u2228 p_9(Vincenzo))",
                        "nl": "Vincenzo is either a picky eater or a food connoisseur."
                    }
                ],
                "added_rules": [
                    {
                        "fol": "(p_5(Vincenzo) \u2192 p_6(Vincenzo)) \u2227 (p_5(Vincenzo) \u2192 p_11(Vincenzo))",
                        "nl": "If Vincenzo is creative, then he knows ingredients, and if Vincenzo is creative, then he cooks well."
                    },
                    {
                        "fol": "(p_9(Vincenzo) \u2192 p_2(Vincenzo))",
                        "nl": "If Vincenzo is a food connoisseur, then he succeeds in business."
                    }
                ]
            },
            "conclusion": "Vincenzo is either a food connoisseur or a picky eater, but not both.",
            "conclusion_fol": "p_9(Vincenzo) \u2295 p_3(Vincenzo)",
            "prover9_input": {
                "formulas(assumptions)": [
                    "p_7(Vincenzo)",
                    "-p_8(Vincenzo)",
                    "-p_5(Vincenzo)",
                    "p_6(Vincenzo)",
                    "p_4(Vincenzo)",
                    "-p_2(Vincenzo)",
                    "-p_1(Vincenzo)",
                    "-p_0(Vincenzo)",
                    "p_3(Vincenzo)",
                    "all x ((p_7(x) & p_15(x)) -> p_8(x))",
                    "((p_5(Vincenzo) -> p_6(Vincenzo)) & (p_5(Vincenzo) -> p_11(Vincenzo)))",
                    "((-(p_4(Vincenzo) <-> p_15(Vincenzo))) -> p_14(Vincenzo))",
                    "(-p_15(Vincenzo) -> p_14(Vincenzo))",
                    "all x ((p_13(x) & p_14(x)) -> p_2(x))",
                    "(p_12(Vincenzo) -> (p_13(Vincenzo) & p_1(Vincenzo)))",
                    "((p_11(Vincenzo) | p_10(Vincenzo)) -> p_12(Vincenzo))",
                    "all x (p_9(x) -> (p_10(x) | p_0(x)))",
                    "-p_9(Vincenzo)",
                    "(p_3(Vincenzo) | p_9(Vincenzo))",
                    "(p_9(Vincenzo) -> p_2(Vincenzo))"
                ],
                "formulas(goals)": [
                    "-(p_9(Vincenzo) <-> p_3(Vincenzo))"
                ]
            },
            "answer": "True"
        },
        {
            "edit_number": 6,
            "modification_type": "FLIP",
            "edited_context_fol": [
                "p_7(Vincenzo)",
                "\u00acp_8(Vincenzo)",
                "\u00acp_5(Vincenzo)",
                "p_6(Vincenzo)",
                "p_4(Vincenzo)",
                "\u00acp_2(Vincenzo)",
                "\u00acp_1(Vincenzo)",
                "\u00acp_0(Vincenzo)",
                "p_3(Vincenzo)",
                "\u2200x ((p_7(x) \u2227 p_15(x)) \u2192 p_8(x))",
                "((p_5(Vincenzo) \u2192 p_6(Vincenzo)) \u2227 (p_5(Vincenzo) \u2192 p_11(Vincenzo)))",
                "((p_4(Vincenzo) \u2295 p_15(Vincenzo)) \u2192 p_14(Vincenzo))",
                "(\u00acp_15(Vincenzo) \u2192 p_14(Vincenzo))",
                "\u2200x ((p_13(x) \u2227 p_14(x)) \u2192 p_2(x))",
                "(p_12(Vincenzo) \u2192 (p_13(Vincenzo) \u2227 p_1(Vincenzo)))",
                "((p_11(Vincenzo) \u2228 p_10(Vincenzo)) \u2192 p_12(Vincenzo))",
                "(p_3(Vincenzo) \u2228 p_9(Vincenzo))",
                "((p_9(Vincenzo) \u2227 \u00acp_3(Vincenzo)) \u2192 p_2(Vincenzo))",
                "\u2200x ((p_9(x) \u2227 \u00acp_3(x)) \u2192 p_10(x) \u2228 p_0(x))",
                "(p_3(Vincenzo) \u2192 p_9(Vincenzo))"
            ],
            "edited_natural_language_context": [
                "Vincenzo sets an example.",
                "Vincenzo does not inspire his team.",
                "Vincenzo is not creative.",
                "Vincenzo knows ingredients.",
                "Vincenzo trains colleagues.",
                "Vincenzo does not succeed in business.",
                "Vincenzo cannot create a menu.",
                "Vincenzo does not enjoy cuisine.",
                "Vincenzo is a picky eater.",
                "If someone sets an example and motivates others, then they inspire their team.",
                "If Vincenzo is creative, then he knows ingredients, and if Vincenzo is creative, then he cooks well.",
                "If Vincenzo either trains colleagues or motivates others (but not both), then he is able to lead staff.",
                "If Vincenzo does not motivate others, then he is able to lead staff.",
                "If someone manages a team and leads staff, then they can succeed in business.",
                "If Vincenzo runs a restaurant, then he can manage a team and create a menu.",
                "If Vincenzo cooks well or appreciates flavors, then he can run a restaurant.",
                "Vincenzo is either a picky eater or a food connoisseur.",
                "If Vincenzo is a food connoisseur and not a picky eater, then he succeeds in business.",
                "For anyone, if they are a food connoisseur and not a picky eater, then they either appreciate flavors or enjoy cuisine.",
                "If Vincenzo is a picky eater, then he is a food connoisseur."
            ],
            "edits_made": {
                "removed_facts": [
                    {
                        "fol": "\u00acp_9(Vincenzo)",
                        "nl": "Vincenzo is not a food connoisseur."
                    }
                ],
                "removed_rules": [
                    {
                        "fol": "\u2200x (p_9(x) \u2192 (p_10(x) \u2228 p_0(x)))",
                        "nl": "Every food connoisseur appreciates flavors or enjoys cuisine."
                    },
                    {
                        "fol": "(p_9(Vincenzo) \u2192 p_2(Vincenzo))",
                        "nl": "If Vincenzo is a food connoisseur, then he succeeds in business."
                    }
                ],
                "added_facts": [],
                "added_rules": [
                    {
                        "fol": "(p_3(Vincenzo) \u2192 p_9(Vincenzo))",
                        "nl": "If Vincenzo is a picky eater, then he is a food connoisseur."
                    },
                    {
                        "fol": "((p_9(Vincenzo) \u2227 \u00acp_3(Vincenzo)) \u2192 p_2(Vincenzo))",
                        "nl": "If Vincenzo is a food connoisseur and not a picky eater, then he succeeds in business."
                    },
                    {
                        "fol": "\u2200x ((p_9(x) \u2227 \u00acp_3(x)) \u2192 p_10(x) \u2228 p_0(x))",
                        "nl": "For anyone, if they are a food connoisseur and not a picky eater, then they either appreciate flavors or enjoy cuisine."
                    }
                ]
            },
            "conclusion": "Vincenzo is either a food connoisseur or a picky eater, but not both.",
            "conclusion_fol": "p_9(Vincenzo) \u2295 p_3(Vincenzo)",
            "prover9_input": {
                "formulas(assumptions)": [
                    "p_7(Vincenzo)",
                    "-p_8(Vincenzo)",
                    "-p_5(Vincenzo)",
                    "p_6(Vincenzo)",
                    "p_4(Vincenzo)",
                    "-p_2(Vincenzo)",
                    "-p_1(Vincenzo)",
                    "-p_0(Vincenzo)",
                    "p_3(Vincenzo)",
                    "all x ((p_7(x) & p_15(x)) -> p_8(x))",
                    "((p_5(Vincenzo) -> p_6(Vincenzo)) & (p_5(Vincenzo) -> p_11(Vincenzo)))",
                    "(-(p_4(Vincenzo) <-> p_15(Vincenzo)) -> p_14(Vincenzo))",
                    "(-p_15(Vincenzo) -> p_14(Vincenzo))",
                    "all x ((p_13(x) & p_14(x)) -> p_2(x))",
                    "(p_12(Vincenzo) -> (p_13(Vincenzo) & p_1(Vincenzo)))",
                    "((p_11(Vincenzo) | p_10(Vincenzo)) -> p_12(Vincenzo))",
                    "(p_3(Vincenzo) | p_9(Vincenzo))",
                    "((p_9(Vincenzo) & -p_3(Vincenzo)) -> p_2(Vincenzo))",
                    "all x ((p_9(x) & -p_3(x)) -> p_10(x) | p_0(x))",
                    "(p_3(Vincenzo) -> p_9(Vincenzo))"
                ],
                "formulas(goals)": [
                    "(p_9(Vincenzo) <-> p_3(Vincenzo))"
                ]
            },
            "answer": "False"
        },
        {
            "edit_number": 7,
            "modification_type": "INVARIANT",
            "edited_context_fol": [
                "p_7(Vincenzo)",
                "\u00acp_8(Vincenzo)",
                "\u00acp_5(Vincenzo)",
                "p_6(Vincenzo)",
                "p_4(Vincenzo)",
                "\u00acp_2(Vincenzo)",
                "\u00acp_1(Vincenzo)",
                "\u00acp_0(Vincenzo)",
                "p_3(Vincenzo)",
                "\u2200x ((p_7(x) \u2227 p_15(x)) \u2192 p_8(x))",
                "p_5(Vincenzo) \u2192 (p_6(Vincenzo) \u2227 p_11(Vincenzo))",
                "((p_4(Vincenzo) \u2228 p_15(Vincenzo)) \u2227 \u00ac(p_4(Vincenzo) \u2227 p_15(Vincenzo))) \u2192 p_14(Vincenzo)",
                "(\u00acp_15(Vincenzo) \u2192 p_14(Vincenzo))",
                "\u2200x ((p_13(x) \u2227 p_14(x)) \u2192 p_2(x))",
                "(p_12(Vincenzo) \u2192 (p_13(Vincenzo) \u2227 p_1(Vincenzo)))",
                "((p_11(Vincenzo) \u2228 p_10(Vincenzo)) \u2192 p_12(Vincenzo))",
                "(p_3(Vincenzo) \u2228 p_9(Vincenzo))",
                "((p_9(Vincenzo) \u2227 \u00acp_3(Vincenzo)) \u2192 p_2(Vincenzo))",
                "\u2200x ((p_9(x) \u2227 \u00acp_3(x)) \u2192 p_10(x) \u2228 p_0(x))",
                "(p_3(Vincenzo) \u2192 p_9(Vincenzo))",
                "(\u00acp_9(Vincenzo) \u2192 \u00acp_3(Vincenzo))"
            ],
            "edited_natural_language_context": [
                "Vincenzo sets an example.",
                "Vincenzo does not inspire his team.",
                "Vincenzo is not creative.",
                "Vincenzo knows ingredients.",
                "Vincenzo trains colleagues.",
                "Vincenzo does not succeed in business.",
                "Vincenzo cannot create a menu.",
                "Vincenzo does not enjoy cuisine.",
                "Vincenzo is a picky eater.",
                "If someone sets an example and motivates others, then they inspire their team.",
                "If Vincenzo is creative, then he knows ingredients and cooks well.",
                "If Vincenzo either trains colleagues or motivates others (but not both), then he is able to lead staff.",
                "If Vincenzo does not motivate others, then he is able to lead staff.",
                "If someone manages a team and leads staff, then they can succeed in business.",
                "If Vincenzo runs a restaurant, then he can manage a team and create a menu.",
                "If Vincenzo cooks well or appreciates flavors, then he can run a restaurant.",
                "Vincenzo is either a picky eater or a food connoisseur.",
                "If Vincenzo is a food connoisseur and not a picky eater, then he succeeds in business.",
                "For anyone, if they are a food connoisseur and not a picky eater, then they either appreciate flavors or enjoy cuisine.",
                "If Vincenzo is a picky eater, then he is a food connoisseur.",
                "If Vincenzo is not a food connoisseur, then he is not a picky eater."
            ],
            "edits_made": {
                "removed_facts": [],
                "removed_rules": [
                    {
                        "fol": "((p_5(Vincenzo) \u2192 p_6(Vincenzo)) \u2227 (p_5(Vincenzo) \u2192 p_11(Vincenzo)))",
                        "nl": "If Vincenzo is creative, then he knows ingredients, and if Vincenzo is creative, then he cooks well."
                    },
                    {
                        "fol": "(p_4(Vincenzo) \u2295 p_15(Vincenzo)) \u2192 p_14(Vincenzo)",
                        "nl": "If Vincenzo either trains colleagues or motivates others (but not both), then he is able to lead staff."
                    }
                ],
                "added_facts": [],
                "added_rules": [
                    {
                        "fol": "p_5(Vincenzo) \u2192 (p_6(Vincenzo) \u2227 p_11(Vincenzo))",
                        "nl": "If Vincenzo is creative, then he knows ingredients and cooks well."
                    },
                    {
                        "fol": "((p_4(Vincenzo) \u2228 p_15(Vincenzo)) \u2227 \u00ac(p_4(Vincenzo) \u2227 p_15(Vincenzo))) \u2192 p_14(Vincenzo)",
                        "nl": "If Vincenzo either trains colleagues or motivates others (but not both), then he is able to lead staff."
                    },
                    {
                        "fol": "\u00acp_9(Vincenzo) \u2192 \u00acp_3(Vincenzo)",
                        "nl": "If Vincenzo is not a food connoisseur, then he is not a picky eater."
                    }
                ]
            },
            "conclusion": "Vincenzo is either a food connoisseur or a picky eater, but not both.",
            "conclusion_fol": "p_9(Vincenzo) \u2295 p_3(Vincenzo)",
            "prover9_input": {
                "formulas(assumptions)": [
                    "p_7(Vincenzo)",
                    "-p_8(Vincenzo)",
                    "-p_5(Vincenzo)",
                    "p_6(Vincenzo)",
                    "p_4(Vincenzo)",
                    "-p_2(Vincenzo)",
                    "-p_1(Vincenzo)",
                    "-p_0(Vincenzo)",
                    "p_3(Vincenzo)",
                    "all x ((p_7(x) & p_15(x)) -> p_8(x))",
                    "p_5(Vincenzo) -> (p_6(Vincenzo) & p_11(Vincenzo))",
                    "((p_4(Vincenzo) | p_15(Vincenzo)) & -(p_4(Vincenzo) & p_15(Vincenzo))) -> p_14(Vincenzo)",
                    "(-p_15(Vincenzo) -> p_14(Vincenzo))",
                    "all x ((p_13(x) & p_14(x)) -> p_2(x))",
                    "(p_12(Vincenzo) -> (p_13(Vincenzo) & p_1(Vincenzo)))",
                    "((p_11(Vincenzo) | p_10(Vincenzo)) -> p_12(Vincenzo))",
                    "(p_3(Vincenzo) | p_9(Vincenzo))",
                    "((p_9(Vincenzo) & -p_3(Vincenzo)) -> p_2(Vincenzo))",
                    "all x ((p_9(x) & -p_3(x)) -> (p_10(x) | p_0(x)))",
                    "(p_3(Vincenzo) -> p_9(Vincenzo))",
                    "(-p_9(Vincenzo) -> -p_3(Vincenzo))"
                ],
                "formulas(goals)": [
                    "p_9(Vincenzo) <-> p_3(Vincenzo)"
                ]
            },
            "answer": "False"
        }
    ]
}