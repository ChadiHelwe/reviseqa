{
    "original_context": [
        "Raphael is not trustworthy.",
        "Raphael does not seek help.",
        "Raphael does not find redemption.",
        "Raphael does not grow mature.",
        "Raphael does not take blame.",
        "If someone is honest, then they are trustworthy.",
        "Anyone who admits fault or seeks help can find redemption.",
        "If Raphael either admits fault or learns a lesson (but not both), then he grows mature.",
        "If Raphael faces consequences, then he learns a lesson.",
        "If Raphael is either accountable or takes blame (but not both), then he faces consequences.",
        "For all humans, if a person is either honest or deceptive (but not both), then they are accountable for their actions."
    ],
    "original_context_fol": [
        "\u00acp_4(Raphael)",
        "\u00acp_2(Raphael)",
        "\u00acp_3(Raphael)",
        "\u00acp_1(Raphael)",
        "\u00acp_0(Raphael)",
        "\u2200x (p_5(x) \u2192 p_4(x))",
        "\u2200x ((p_10(x) \u2228 p_2(x)) \u2192 p_3(x))",
        "(p_10(Raphael) \u2295 p_9(Raphael)) \u2192 p_1(Raphael)",
        "p_8(Raphael) \u2192 p_9(Raphael)",
        "(p_7(Raphael) \u2295 p_0(Raphael)) \u2192 p_8(Raphael)",
        "\u2200x ((p_5(x) \u2295 p_6(x)) \u2192 p_7(x))"
    ],
    "conclusion": "Raphael is deceptive.",
    "conclusion_fol": "p_6(Raphael)",
    "answer": "False",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 4,
                    "subject": "Raphael",
                    "text": "Raphael is not trustworthy.",
                    "fol": "\u00acp_4(Raphael)",
                    "str_fol": "\u00actrustworthy(Raphael)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "If someone is honest, then they are trustworthy.",
                    "fol": "\u2200x (p_5(x) \u2192 p_4(x))",
                    "str_fol": "\u2200x (honest(x) \u2192 trustworthy(x))"
                }
            ],
            "conclusion": {
                "id": 5,
                "subject": "Raphael",
                "text": "Raphael is not honest.",
                "fol": "\u00acp_5(Raphael)",
                "str_fol": "\u00achonest(Raphael)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 2,
                    "subject": "Raphael",
                    "text": "Raphael does not seek help.",
                    "fol": "\u00acp_2(Raphael)",
                    "str_fol": "\u00acseeks_help(Raphael)",
                    "negation": true
                },
                {
                    "id": 3,
                    "subject": "Raphael",
                    "text": "Raphael does not find redemption.",
                    "fol": "\u00acp_3(Raphael)",
                    "str_fol": "\u00acfinds_redemption(Raphael)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "Anyone who admits fault or seeks help can find redemption.",
                    "fol": "\u2200x ((p_10(x) \u2228 p_2(x)) \u2192 p_3(x))",
                    "str_fol": "\u2200x ((admits_fault(x) \u2228 seeks_help(x)) \u2192 finds_redemption(x))"
                }
            ],
            "conclusion": {
                "id": 6,
                "subject": "Raphael",
                "text": "Raphael does not admit fault.",
                "fol": "\u00acp_10(Raphael)",
                "str_fol": "\u00acadmits_fault(Raphael)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 6,
                    "subject": "Raphael",
                    "text": "Raphael does not admit fault.",
                    "fol": "\u00acp_10(Raphael)",
                    "str_fol": "\u00acadmits_fault(Raphael)",
                    "negation": true
                },
                {
                    "id": 1,
                    "subject": "Raphael",
                    "text": "Raphael does not grow mature.",
                    "fol": "\u00acp_1(Raphael)",
                    "str_fol": "\u00acgrows_mature(Raphael)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "If Raphael either admits fault or learns a lesson (but not both), then he grows mature.",
                    "fol": "(p_10(Raphael) \u2295 p_9(Raphael)) \u2192 p_1(Raphael)",
                    "str_fol": "(admits_fault(Raphael) \u2295 learns_lesson(Raphael)) \u2192 grows_mature(Raphael)"
                }
            ],
            "conclusion": {
                "id": 7,
                "subject": "Raphael",
                "text": "Raphael does not learn a lesson.",
                "fol": "\u00acp_9(Raphael)",
                "str_fol": "\u00aclearns_lesson(Raphael)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 7,
                    "subject": "Raphael",
                    "text": "Raphael does not learn a lesson.",
                    "fol": "\u00acp_9(Raphael)",
                    "str_fol": "\u00aclearns_lesson(Raphael)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "If Raphael faces consequences, then he learns a lesson.",
                    "fol": "p_8(Raphael) \u2192 p_9(Raphael)",
                    "str_fol": "faces_consequences(Raphael) \u2192 learns_lesson(Raphael)"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Raphael",
                "text": "Raphael does not face consequences.",
                "fol": "\u00acp_8(Raphael)",
                "str_fol": "\u00acfaces_consequences(Raphael)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 0,
                    "subject": "Raphael",
                    "text": "Raphael does not take blame.",
                    "fol": "\u00acp_0(Raphael)",
                    "str_fol": "\u00actakes_blame(Raphael)",
                    "negation": true
                },
                {
                    "id": 8,
                    "subject": "Raphael",
                    "text": "Raphael does not face consequences.",
                    "fol": "\u00acp_8(Raphael)",
                    "str_fol": "\u00acfaces_consequences(Raphael)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "If Raphael is either accountable or takes blame (but not both), then he faces consequences.",
                    "fol": "(p_7(Raphael) \u2295 p_0(Raphael)) \u2192 p_8(Raphael)",
                    "str_fol": "(accountable(Raphael) \u2295 takes_blame(Raphael)) \u2192 faces_consequences(Raphael)"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Raphael",
                "text": "Raphael is not accountable for his actions.",
                "fol": "\u00acp_7(Raphael)",
                "str_fol": "\u00acaccountable(Raphael)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 5,
                    "subject": "Raphael",
                    "text": "Raphael is not honest.",
                    "fol": "\u00acp_5(Raphael)",
                    "str_fol": "\u00achonest(Raphael)",
                    "negation": true
                },
                {
                    "id": 9,
                    "subject": "Raphael",
                    "text": "Raphael is not accountable for his actions.",
                    "fol": "\u00acp_7(Raphael)",
                    "str_fol": "\u00acaccountable(Raphael)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "For all humans, if a person is either honest or deceptive (but not both), then they are accountable for their actions.",
                    "fol": "\u2200x ((p_5(x) \u2295 p_6(x)) \u2192 p_7(x))",
                    "str_fol": "\u2200x ((honest(x) \u2295 deceptive(x)) \u2192 accountable(x))"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Raphael",
                "text": "Raphael is deceptive.",
                "fol": "p_6(Raphael)",
                "str_fol": "deceptive(Raphael)",
                "negation": false
            }
        }
    ],
    "edits": [
        {
            "edit_number": 1,
            "modification_type": "INVARIANT",
            "edited_context_fol": [
                "\u00acp_4(Raphael)",
                "\u00acp_2(Raphael)",
                "\u00acp_3(Raphael)",
                "\u00acp_1(Raphael)",
                "\u00acp_0(Raphael)",
                "\u2200x (p_5(x) \u2192 p_4(x))",
                "\u2200x ((p_10(x) \u2228 p_2(x)) \u2192 p_3(x))",
                "(p_10(Raphael) \u2295 p_9(Raphael)) \u2192 p_1(Raphael)",
                "p_8(Raphael) \u2192 p_9(Raphael)",
                "(p_7(Raphael) \u2295 p_0(Raphael)) \u2192 p_8(Raphael)",
                "\u2200x ((p_5(x) \u2295 p_6(x)) \u2192 p_7(x))",
                "\u2200x (\u00acp_4(x) \u2192 \u00acp_5(x))",
                "\u2200x (\u00acp_3(x) \u2192 \u00ac(p_10(x) \u2228 p_2(x)))"
            ],
            "edited_natural_language_context": [
                "Raphael is not trustworthy.",
                "Raphael does not seek help.",
                "Raphael does not find redemption.",
                "Raphael does not grow mature.",
                "Raphael does not take blame.",
                "If someone is honest, then they are trustworthy.",
                "Anyone who admits fault or seeks help can find redemption.",
                "If Raphael either admits fault or learns a lesson (but not both), then he grows mature.",
                "If Raphael faces consequences, then he learns a lesson.",
                "If Raphael is either accountable or takes blame (but not both), then he faces consequences.",
                "For all humans, if a person is either honest or deceptive (but not both), then they are accountable for their actions.",
                "For anyone, if they are not trustworthy, then they are not honest.",
                "For anyone, if they do not find redemption, then they neither admit fault nor seek help."
            ],
            "edits_made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    {
                        "fol": "\u2200x (\u00acp_4(x) \u2192 \u00acp_5(x))",
                        "nl": "For anyone, if they are not trustworthy, then they are not honest."
                    },
                    {
                        "fol": "\u2200x (\u00acp_3(x) \u2192 \u00ac(p_10(x) \u2228 p_2(x)))",
                        "nl": "For anyone, if they do not find redemption, then they neither admit fault nor seek help."
                    }
                ]
            },
            "conclusion": "Raphael is deceptive.",
            "conclusion_fol": "p_6(Raphael)",
            "prover9_input": {
                "formulas(assumptions)": [
                    "-p_4(Raphael)",
                    "-p_2(Raphael)",
                    "-p_3(Raphael)",
                    "-p_1(Raphael)",
                    "-p_0(Raphael)",
                    "all x (p_5(x) -> p_4(x))",
                    "all x ((p_10(x) | p_2(x)) -> p_3(x))",
                    "(-(p_10(Raphael) <-> p_9(Raphael))) -> p_1(Raphael)",
                    "p_8(Raphael) -> p_9(Raphael)",
                    "(-(p_7(Raphael) <-> p_0(Raphael))) -> p_8(Raphael)",
                    "all x ((-(p_5(x) <-> p_6(x))) -> p_7(x))",
                    "all x (-p_4(x) -> -p_5(x))",
                    "all x (-p_3(x) -> (-p_10(x) & -p_2(x)))"
                ],
                "formulas(goals)": [
                    "-p_6(Raphael)"
                ]
            },
            "answer": "False"
        },
        {
            "edit_number": 2,
            "modification_type": "FLIP",
            "edited_context_fol": [
                "\u00acp_4(Raphael)",
                "\u00acp_2(Raphael)",
                "\u00acp_3(Raphael)",
                "\u00acp_0(Raphael)",
                "\u2200x (p_5(x) \u2192 p_4(x))",
                "\u2200x ((p_10(x) \u2228 p_2(x)) \u2192 p_3(x))",
                "(p_10(Raphael) \u2295 p_9(Raphael)) \u2192 p_1(Raphael)",
                "p_8(Raphael) \u2192 p_9(Raphael)",
                "(p_7(Raphael) \u2295 p_0(Raphael)) \u2192 p_8(Raphael)",
                "\u2200x ((p_5(x) \u2295 p_6(x)) \u2192 p_7(x))",
                "\u2200x (\u00acp_4(x) \u2192 \u00acp_5(x))",
                "\u2200x (\u00acp_3(x) \u2192 \u00ac(p_10(x) \u2228 p_2(x)))",
                "\u00acp_4(Raphael) \u2192 p_6(Raphael)"
            ],
            "edited_natural_language_context": [
                "Raphael is not trustworthy.",
                "Raphael does not seek help.",
                "Raphael does not find redemption.",
                "Raphael does not take blame.",
                "If someone is honest, then they are trustworthy.",
                "Anyone who admits fault or seeks help can find redemption.",
                "If Raphael either admits fault or learns a lesson (but not both), then he grows mature.",
                "If Raphael faces consequences, then he learns a lesson.",
                "If Raphael is either accountable or takes blame (but not both), then he faces consequences.",
                "For all humans, if a person is either honest or deceptive (but not both), then they are accountable for their actions.",
                "For anyone, if they are not trustworthy, then they are not honest.",
                "For anyone, if they do not find redemption, then they neither admit fault nor seek help.",
                "If Raphael is not trustworthy, then he is deceptive."
            ],
            "edits_made": {
                "removed_facts": [
                    {
                        "fol": "\u00acp_1(Raphael)",
                        "nl": "Raphael does not grow mature."
                    }
                ],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    {
                        "fol": "\u00acp_4(Raphael) \u2192 p_6(Raphael)",
                        "nl": "If Raphael is not trustworthy, then he is deceptive."
                    }
                ]
            },
            "conclusion": "Raphael is deceptive.",
            "conclusion_fol": "p_6(Raphael)",
            "prover9_input": {
                "formulas(assumptions)": [
                    "-p_4(Raphael)",
                    "-p_2(Raphael)",
                    "-p_3(Raphael)",
                    "-p_0(Raphael)",
                    "all x (p_5(x) -> p_4(x))",
                    "all x ((p_10(x) | p_2(x)) -> p_3(x))",
                    "(-(p_10(Raphael) <-> p_9(Raphael))) -> p_1(Raphael)",
                    "p_8(Raphael) -> p_9(Raphael)",
                    "(-(p_7(Raphael) <-> p_0(Raphael))) -> p_8(Raphael)",
                    "all x (-(p_5(x) <-> p_6(x)) -> p_7(x))",
                    "all x (-p_4(x) -> -p_5(x))",
                    "all x (-p_3(x) -> -(p_10(x) | p_2(x)))",
                    "-p_4(Raphael) -> p_6(Raphael)"
                ],
                "formulas(goals)": [
                    "p_6(Raphael)"
                ]
            },
            "answer": "True"
        },
        {
            "edit_number": 3,
            "modification_type": "FLIP",
            "edited_context_fol": [
                "\u00acp_4(Raphael)",
                "\u00acp_2(Raphael)",
                "\u00acp_3(Raphael)",
                "\u00acp_0(Raphael)",
                "\u2200x (p_5(x) \u2192 p_4(x))",
                "\u2200x ((p_10(x) \u2228 p_2(x)) \u2192 p_3(x))",
                "(p_10(Raphael) \u2295 p_9(Raphael)) \u2192 p_1(Raphael)",
                "p_8(Raphael) \u2192 p_9(Raphael)",
                "(p_7(Raphael) \u2295 p_0(Raphael)) \u2192 p_8(Raphael)",
                "\u2200x ((p_5(x) \u2295 p_6(x)) \u2192 p_7(x))",
                "\u2200x (\u00acp_4(x) \u2192 \u00acp_5(x))",
                "\u2200x (\u00acp_3(x) \u2192 \u00ac(p_10(x) \u2228 p_2(x)))",
                "\u2200x (\u00acp_5(x) \u2192 \u00acp_6(x))"
            ],
            "edited_natural_language_context": [
                "Raphael is not trustworthy.",
                "Raphael does not seek help.",
                "Raphael does not find redemption.",
                "Raphael does not take blame.",
                "If someone is honest, then they are trustworthy.",
                "Anyone who admits fault or seeks help can find redemption.",
                "If Raphael either admits fault or learns a lesson (but not both), then he grows mature.",
                "If Raphael faces consequences, then he learns a lesson.",
                "If Raphael is either accountable or takes blame (but not both), then he faces consequences.",
                "For all humans, if a person is either honest or deceptive (but not both), then they are accountable for their actions.",
                "For anyone, if they are not trustworthy, then they are not honest.",
                "For anyone, if they do not find redemption, then they neither admit fault nor seek help.",
                "For anyone, if they are not honest, then they are not deceptive."
            ],
            "edits_made": {
                "removed_facts": [],
                "removed_rules": [
                    {
                        "fol": "\u00acp_4(Raphael) \u2192 p_6(Raphael)",
                        "nl": "If Raphael is not trustworthy, then he is deceptive."
                    }
                ],
                "added_facts": [],
                "added_rules": [
                    {
                        "fol": "\u2200x (\u00acp_5(x) \u2192 \u00acp_6(x))",
                        "nl": "For anyone, if they are not honest, then they are not deceptive."
                    }
                ]
            },
            "conclusion": "Raphael is deceptive.",
            "conclusion_fol": "p_6(Raphael)",
            "prover9_input": {
                "formulas(assumptions)": [
                    "-p_4(Raphael)",
                    "-p_2(Raphael)",
                    "-p_3(Raphael)",
                    "-p_0(Raphael)",
                    "all x (p_5(x) -> p_4(x))",
                    "all x ((p_10(x) | p_2(x)) -> p_3(x))",
                    "(-(p_10(Raphael) <-> p_9(Raphael))) -> p_1(Raphael)",
                    "p_8(Raphael) -> p_9(Raphael)",
                    "(-(p_7(Raphael) <-> p_0(Raphael))) -> p_8(Raphael)",
                    "all x ((-(p_5(x) <-> p_6(x))) -> p_7(x))",
                    "all x (-p_4(x) -> -p_5(x))",
                    "all x (-p_3(x) -> -(p_10(x) | p_2(x)))",
                    "all x (-p_5(x) -> -p_6(x))"
                ],
                "formulas(goals)": [
                    "-p_6(Raphael)"
                ]
            },
            "answer": "False"
        },
        {
            "edit_number": 4,
            "modification_type": "FLIP",
            "edited_context_fol": [
                "\u00acp_4(Raphael)",
                "\u00acp_2(Raphael)",
                "\u00acp_3(Raphael)",
                "\u00acp_0(Raphael)",
                "\u2200x (p_5(x) \u2192 p_4(x))",
                "\u2200x ((p_10(x) \u2228 p_2(x)) \u2192 p_3(x))",
                "(p_10(Raphael) \u2295 p_9(Raphael)) \u2192 p_1(Raphael)",
                "p_8(Raphael) \u2192 p_9(Raphael)",
                "(p_7(Raphael) \u2295 p_0(Raphael)) \u2192 p_8(Raphael)",
                "\u2200x ((p_5(x) \u2295 p_6(x)) \u2192 p_7(x))",
                "\u2200x (\u00acp_4(x) \u2192 \u00acp_5(x))",
                "\u2200x (\u00acp_3(x) \u2192 \u00ac(p_10(x) \u2228 p_2(x)))",
                "\u2200x (\u00acp_5(x) \u2192 p_6(x))"
            ],
            "edited_natural_language_context": [
                "Raphael is not trustworthy.",
                "Raphael does not seek help.",
                "Raphael does not find redemption.",
                "Raphael does not take blame.",
                "If someone is honest, then they are trustworthy.",
                "Anyone who admits fault or seeks help can find redemption.",
                "If Raphael either admits fault or learns a lesson (but not both), then he grows mature.",
                "If Raphael faces consequences, then he learns a lesson.",
                "If Raphael is either accountable or takes blame (but not both), then he faces consequences.",
                "For all humans, if a person is either honest or deceptive (but not both), then they are accountable for their actions.",
                "For anyone, if they are not trustworthy, then they are not honest.",
                "For anyone, if they do not find redemption, then they neither admit fault nor seek help.",
                "For anyone, if they are not honest, then they are deceptive."
            ],
            "edits_made": {
                "removed_facts": [],
                "removed_rules": [
                    {
                        "fol": "\u2200x (\u00acp_5(x) \u2192 \u00acp_6(x))",
                        "nl": "For anyone, if they are not honest, then they are not deceptive."
                    }
                ],
                "added_facts": [],
                "added_rules": [
                    {
                        "fol": "\u2200x (\u00acp_5(x) \u2192 p_6(x))",
                        "nl": "For anyone, if they are not honest, then they are deceptive."
                    }
                ]
            },
            "conclusion": "Raphael is deceptive.",
            "conclusion_fol": "p_6(Raphael)",
            "prover9_input": {
                "formulas(assumptions)": [
                    "-p_4(Raphael).",
                    "-p_2(Raphael).",
                    "-p_3(Raphael).",
                    "-p_0(Raphael).",
                    "all x (p_5(x) -> p_4(x)).",
                    "all x ((p_10(x) | p_2(x)) -> p_3(x)).",
                    "(-(p_10(Raphael) <-> p_9(Raphael))) -> p_1(Raphael).",
                    "p_8(Raphael) -> p_9(Raphael).",
                    "(-(p_7(Raphael) <-> p_0(Raphael))) -> p_8(Raphael).",
                    "all x ((-(p_5(x) <-> p_6(x))) -> p_7(x)).",
                    "all x (-p_4(x) -> -p_5(x)).",
                    "all x (-p_3(x) -> -(p_10(x) | p_2(x))).",
                    "all x (-p_5(x) -> p_6(x))."
                ],
                "formulas(goals)": [
                    "p_6(Raphael)."
                ]
            },
            "answer": "True"
        },
        {
            "edit_number": 5,
            "modification_type": "FLIP",
            "edited_context_fol": [
                "\u00acp_4(Raphael)",
                "\u00acp_2(Raphael)",
                "\u00acp_3(Raphael)",
                "\u00acp_0(Raphael)",
                "\u2200x (p_5(x) \u2192 p_4(x))",
                "\u2200x ((p_10(x) \u2228 p_2(x)) \u2192 p_3(x))",
                "(p_10(Raphael) \u2295 p_9(Raphael)) \u2192 p_1(Raphael)",
                "p_8(Raphael) \u2192 p_9(Raphael)",
                "(p_7(Raphael) \u2295 p_0(Raphael)) \u2192 p_8(Raphael)",
                "\u2200x ((p_5(x) \u2295 p_6(x)) \u2192 p_7(x))",
                "\u2200x (\u00acp_4(x) \u2192 \u00acp_5(x))",
                "\u2200x (\u00acp_3(x) \u2192 \u00ac(p_10(x) \u2228 p_2(x)))",
                "\u2200x (\u00acp_5(x) \u2192 \u00acp_6(x))"
            ],
            "edited_natural_language_context": [
                "Raphael is not trustworthy.",
                "Raphael does not seek help.",
                "Raphael does not find redemption.",
                "Raphael does not take blame.",
                "If someone is honest, then they are trustworthy.",
                "Anyone who admits fault or seeks help can find redemption.",
                "If Raphael either admits fault or learns a lesson (but not both), then he grows mature.",
                "If Raphael faces consequences, then he learns a lesson.",
                "If Raphael is either accountable or takes blame (but not both), then he faces consequences.",
                "For all humans, if a person is either honest or deceptive (but not both), then they are accountable for their actions.",
                "For anyone, if they are not trustworthy, then they are not honest.",
                "For anyone, if they do not find redemption, then they neither admit fault nor seek help.",
                "For anyone, if they are not honest, then they are not deceptive."
            ],
            "edits_made": {
                "removed_facts": [],
                "removed_rules": [
                    {
                        "fol": "\u2200x (\u00acp_5(x) \u2192 p_6(x))",
                        "nl": "For anyone, if they are not honest, then they are deceptive."
                    }
                ],
                "added_facts": [],
                "added_rules": [
                    {
                        "fol": "\u2200x (\u00acp_5(x) \u2192 \u00acp_6(x))",
                        "nl": "For anyone, if they are not honest, then they are not deceptive."
                    }
                ]
            },
            "conclusion": "Raphael is deceptive.",
            "conclusion_fol": "p_6(Raphael)",
            "prover9_input": {
                "formulas(assumptions)": [
                    "-p_4(Raphael).",
                    "-p_2(Raphael).",
                    "-p_3(Raphael).",
                    "-p_0(Raphael).",
                    "all x (p_5(x) -> p_4(x)).",
                    "all x ((p_10(x) | p_2(x)) -> p_3(x)).",
                    "(-(p_10(Raphael) <-> p_9(Raphael))) -> p_1(Raphael).",
                    "p_8(Raphael) -> p_9(Raphael).",
                    "(-(p_7(Raphael) <-> p_0(Raphael))) -> p_8(Raphael).",
                    "all x ((-(p_5(x) <-> p_6(x))) -> p_7(x)).",
                    "all x (-p_4(x) -> -p_5(x)).",
                    "all x (-p_3(x) -> -(p_10(x) | p_2(x))).",
                    "all x (-p_5(x) -> -p_6(x))."
                ],
                "formulas(goals)": [
                    "-p_6(Raphael)."
                ]
            },
            "answer": "False"
        },
        {
            "edit_number": 6,
            "modification_type": "INVARIANT",
            "edited_context_fol": [
                "\u00acp_4(Raphael)",
                "\u00acp_2(Raphael)",
                "\u00acp_3(Raphael)",
                "\u00acp_0(Raphael)",
                "\u00acp_10(Raphael)",
                "\u2200x (p_5(x) \u2192 p_4(x))",
                "\u2200x ((p_10(x) \u2228 p_2(x)) \u2192 p_3(x))",
                "((p_10(Raphael) \u2227 \u00acp_9(Raphael)) \u2228 (\u00acp_10(Raphael) \u2227 p_9(Raphael))) \u2192 p_1(Raphael)",
                "p_8(Raphael) \u2192 p_9(Raphael)",
                "(p_7(Raphael) \u2295 p_0(Raphael)) \u2192 p_8(Raphael)",
                "\u2200x (((p_5(x) \u2227 \u00acp_6(x)) \u2228 (\u00acp_5(x) \u2227 p_6(x))) \u2192 p_7(x))",
                "\u2200x (\u00acp_4(x) \u2192 \u00acp_5(x))",
                "\u2200x (\u00acp_3(x) \u2192 \u00ac(p_10(x) \u2228 p_2(x)))",
                "\u2200x (\u00acp_5(x) \u2192 \u00acp_6(x))"
            ],
            "edited_natural_language_context": [
                "Raphael is not trustworthy.",
                "Raphael does not seek help.",
                "Raphael does not find redemption.",
                "Raphael does not take blame.",
                "Raphael does not admit fault.",
                "If someone is honest, then they are trustworthy.",
                "Anyone who admits fault or seeks help can find redemption.",
                "If either Raphael admits fault and doesn't learn a lesson, or he doesn't admit fault and learns a lesson, then he grows mature.",
                "If Raphael faces consequences, then he learns a lesson.",
                "If Raphael is either accountable or takes blame (but not both), then he faces consequences.",
                "For all humans, if a person is either honest and not deceptive, or not honest and deceptive, then they are accountable for their actions.",
                "For anyone, if they are not trustworthy, then they are not honest.",
                "For anyone, if they do not find redemption, then they neither admit fault nor seek help.",
                "For anyone, if they are not honest, then they are not deceptive."
            ],
            "edits_made": {
                "removed_facts": [],
                "removed_rules": [
                    {
                        "fol": "(p_10(Raphael) \u2295 p_9(Raphael)) \u2192 p_1(Raphael)",
                        "nl": "If Raphael either admits fault or learns a lesson (but not both), then he grows mature."
                    },
                    {
                        "fol": "\u2200x ((p_5(x) \u2295 p_6(x)) \u2192 p_7(x))",
                        "nl": "For all humans, if a person is either honest or deceptive (but not both), then they are accountable for their actions."
                    }
                ],
                "added_facts": [
                    {
                        "fol": "\u00acp_10(Raphael)",
                        "nl": "Raphael does not admit fault."
                    }
                ],
                "added_rules": [
                    {
                        "fol": "((p_10(Raphael) \u2227 \u00acp_9(Raphael)) \u2228 (\u00acp_10(Raphael) \u2227 p_9(Raphael))) \u2192 p_1(Raphael)",
                        "nl": "If either Raphael admits fault and doesn't learn a lesson, or he doesn't admit fault and learns a lesson, then he grows mature."
                    },
                    {
                        "fol": "\u2200x (((p_5(x) \u2227 \u00acp_6(x)) \u2228 (\u00acp_5(x) \u2227 p_6(x))) \u2192 p_7(x))",
                        "nl": "For all humans, if a person is either honest and not deceptive, or not honest and deceptive, then they are accountable for their actions."
                    }
                ]
            },
            "conclusion": "Raphael is deceptive.",
            "conclusion_fol": "p_6(Raphael)",
            "prover9_input": {
                "formulas(assumptions)": [
                    "-p_4(Raphael)",
                    "-p_2(Raphael)",
                    "-p_3(Raphael)",
                    "-p_0(Raphael)",
                    "-p_10(Raphael)",
                    "all x (p_5(x) -> p_4(x))",
                    "all x ((p_10(x) | p_2(x)) -> p_3(x))",
                    "( ( (p_10(Raphael) & -p_9(Raphael)) | (-p_10(Raphael) & p_9(Raphael)) ) -> p_1(Raphael) )",
                    "p_8(Raphael) -> p_9(Raphael)",
                    "( -(p_7(Raphael) <-> p_0(Raphael)) ) -> p_8(Raphael)",
                    "all x ( ( (p_5(x) & -p_6(x)) | (-p_5(x) & p_6(x)) ) -> p_7(x) )",
                    "all x (-p_4(x) -> -p_5(x))",
                    "all x (-p_3(x) -> -(p_10(x) | p_2(x)) )",
                    "all x (-p_5(x) -> -p_6(x))"
                ],
                "formulas(goals)": [
                    "-p_6(Raphael)"
                ]
            },
            "answer": "False"
        },
        {
            "edit_number": 7,
            "modification_type": "FLIP",
            "edited_context_fol": [
                "\u00acp_4(Raphael)",
                "\u00acp_2(Raphael)",
                "\u00acp_3(Raphael)",
                "\u00acp_0(Raphael)",
                "\u00acp_10(Raphael)",
                "\u2200x (p_5(x) \u2192 p_4(x))",
                "\u2200x ((p_10(x) \u2228 p_2(x)) \u2192 p_3(x))",
                "((p_10(Raphael) \u2227 \u00acp_9(Raphael)) \u2228 (\u00acp_10(Raphael) \u2227 p_9(Raphael))) \u2192 p_1(Raphael)",
                "p_8(Raphael) \u2192 p_9(Raphael)",
                "(p_7(Raphael) \u2295 p_0(Raphael)) \u2192 p_8(Raphael)",
                "\u2200x (((p_5(x) \u2227 \u00acp_6(x)) \u2228 (\u00acp_5(x) \u2227 p_6(x))) \u2192 p_7(x))",
                "\u2200x (\u00acp_4(x) \u2192 \u00acp_5(x))",
                "\u2200x (\u00acp_3(x) \u2192 \u00ac(p_10(x) \u2228 p_2(x)))",
                "\u2200x (\u00acp_5(x) \u2192 p_6(x))"
            ],
            "edited_natural_language_context": [
                "Raphael is not trustworthy.",
                "Raphael does not seek help.",
                "Raphael does not find redemption.",
                "Raphael does not take blame.",
                "Raphael does not admit fault.",
                "If someone is honest, then they are trustworthy.",
                "Anyone who admits fault or seeks help can find redemption.",
                "If either Raphael admits fault and doesn't learn a lesson, or he doesn't admit fault and learns a lesson, then he grows mature.",
                "If Raphael faces consequences, then he learns a lesson.",
                "If Raphael is either accountable or takes blame (but not both), then he faces consequences.",
                "For all humans, if a person is either honest and not deceptive, or not honest and deceptive, then they are accountable for their actions.",
                "For anyone, if they are not trustworthy, then they are not honest.",
                "For anyone, if they do not find redemption, then they neither admit fault nor seek help.",
                "For anyone, if they are not honest, then they are deceptive."
            ],
            "edits_made": {
                "removed_facts": [],
                "removed_rules": [
                    {
                        "fol": "\u2200x (\u00acp_5(x) \u2192 \u00acp_6(x))",
                        "nl": "For anyone, if they are not honest, then they are not deceptive."
                    }
                ],
                "added_facts": [],
                "added_rules": [
                    {
                        "fol": "\u2200x (\u00acp_5(x) \u2192 p_6(x))",
                        "nl": "For anyone, if they are not honest, then they are deceptive."
                    }
                ]
            },
            "conclusion": "Raphael is deceptive.",
            "conclusion_fol": "p_6(Raphael)",
            "prover9_input": {
                "formulas(assumptions)": [
                    "-p_4(Raphael)",
                    "-p_2(Raphael)",
                    "-p_3(Raphael)",
                    "-p_0(Raphael)",
                    "-p_10(Raphael)",
                    "all x (p_5(x) -> p_4(x))",
                    "all x ((p_10(x) | p_2(x)) -> p_3(x))",
                    "((p_10(Raphael) & -p_9(Raphael)) | (-p_10(Raphael) & p_9(Raphael))) -> p_1(Raphael)",
                    "p_8(Raphael) -> p_9(Raphael)",
                    "(-(p_7(Raphael) <-> p_0(Raphael))) -> p_8(Raphael)",
                    "all x (((p_5(x) & -p_6(x)) | (-p_5(x) & p_6(x))) -> p_7(x))",
                    "all x (-p_4(x) -> -p_5(x))",
                    "all x (-p_3(x) -> -(p_10(x) | p_2(x)))",
                    "all x (-p_5(x) -> p_6(x))"
                ],
                "formulas(goals)": [
                    "p_6(Raphael)"
                ]
            },
            "answer": "True"
        }
    ]
}