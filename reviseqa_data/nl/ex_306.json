{
    "original_context": [
        "Samir records albums.",
        "Samir does not gain recognition.",
        "Samir writes lyrics.",
        "Samir is not innovative.",
        "If Samir either records albums or performs live (but not both), then he gains recognition.",
        "A musician either has passion or performs live, but not necessarily both.",
        "If Samir plays folk music, then he has passion and creates harmony.",
        "Samir either writes lyrics or composes pop music, but not both.",
        "If Samir either plays folk or plays jazz (but not both), then he is innovative.",
        "Samir is either a versatile musician or composes pop music, but not both.",
        "If Samir is a versatile musician, then he either plays jazz or plays rock music, but not both.",
        "Samir either plays rock music or is classically trained, but not both.",
        "For every musician like Samir, they are either classically trained or self-taught, but not both."
    ],
    "original_context_fol": [
        "p_2(Samir)",
        "\u00acp_3(Samir)",
        "p_0(Samir)",
        "\u00acp_1(Samir)",
        "(p_2(Samir) \u2295 p_13(Samir)) \u2192 p_3(Samir)",
        "\u2200x (p_11(x) \u2295 p_13(x))",
        "p_10(Samir) \u2192 (p_11(Samir) \u2227 p_12(Samir))",
        "p_0(Samir) \u2295 p_9(Samir)",
        "(p_10(Samir) \u2295 p_8(Samir)) \u2192 p_1(Samir)",
        "p_9(Samir) \u2295 p_7(Samir)",
        "p_7(Samir) \u2192 (p_8(Samir) \u2295 p_6(Samir))",
        "p_6(Samir) \u2295 p_4(Samir)",
        "p_4(Samir) \u2295 p_5(Samir)"
    ],
    "conclusion": "Samir is not self-taught.",
    "conclusion_fol": "\u00acp_5(Samir)",
    "answer": "False",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 2,
                    "subject": "Samir",
                    "text": "Samir records albums.",
                    "fol": "p_2(Samir)",
                    "str_fol": "records_albums(Samir)",
                    "negation": false
                },
                {
                    "id": 3,
                    "subject": "Samir",
                    "text": "Samir does not gain recognition.",
                    "fol": "\u00acp_3(Samir)",
                    "str_fol": "\u00acgains_recognition(Samir)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 8,
                    "text": "If Samir either records albums or performs live (but not both), then he gains recognition.",
                    "fol": "(p_2(Samir) \u2295 p_13(Samir)) \u2192 p_3(Samir)",
                    "str_fol": "(records_albums(Samir) \u2295 performs_live(Samir)) \u2192 gains_recognition(Samir)"
                }
            ],
            "conclusion": {
                "id": 4,
                "subject": "Samir",
                "text": "Samir performs live in front of audiences.",
                "fol": "p_13(Samir)",
                "str_fol": "performs_live(Samir)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 4,
                    "subject": "Samir",
                    "text": "Samir performs live in front of audiences.",
                    "fol": "p_13(Samir)",
                    "str_fol": "performs_live(Samir)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 7,
                    "text": "A musician either has passion or performs live, but not necessarily both.",
                    "fol": "\u2200x (p_11(x) \u2295 p_13(x))",
                    "str_fol": "\u2200x (has_passion(x) \u2295 performs_live(x))"
                }
            ],
            "conclusion": {
                "id": 5,
                "subject": "Samir",
                "text": "Samir does not have passion.",
                "fol": "\u00acp_11(Samir)",
                "str_fol": "\u00achas_passion(Samir)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 5,
                    "subject": "Samir",
                    "text": "Samir does not have passion.",
                    "fol": "\u00acp_11(Samir)",
                    "str_fol": "\u00achas_passion(Samir)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 6,
                    "text": "If Samir plays folk music, then he has passion and creates harmony.",
                    "fol": "p_10(Samir) \u2192 (p_11(Samir) \u2227 p_12(Samir))",
                    "str_fol": "plays_folk(Samir) \u2192 (has_passion(Samir) \u2227 creates_harmony(Samir))"
                }
            ],
            "conclusion": {
                "id": 6,
                "subject": "Samir",
                "text": "Samir does not play folk.",
                "fol": "\u00acp_10(Samir)",
                "str_fol": "\u00acplays_folk(Samir)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 0,
                    "subject": "Samir",
                    "text": "Samir writes lyrics.",
                    "fol": "p_0(Samir)",
                    "str_fol": "writes_lyrics(Samir)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "Samir either writes lyrics or composes pop music, but not both.",
                    "fol": "p_0(Samir) \u2295 p_9(Samir)",
                    "str_fol": "writes_lyrics(Samir) \u2295 composes_pop(Samir)"
                }
            ],
            "conclusion": {
                "id": 7,
                "subject": "Samir",
                "text": "Samir does not compose pop music.",
                "fol": "\u00acp_9(Samir)",
                "str_fol": "\u00accomposes_pop(Samir)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 6,
                    "subject": "Samir",
                    "text": "Samir does not play folk.",
                    "fol": "\u00acp_10(Samir)",
                    "str_fol": "\u00acplays_folk(Samir)",
                    "negation": true
                },
                {
                    "id": 1,
                    "subject": "Samir",
                    "text": "Samir is not innovative.",
                    "fol": "\u00acp_1(Samir)",
                    "str_fol": "\u00acis_innovative(Samir)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "If Samir either plays folk or plays jazz (but not both), then he is innovative.",
                    "fol": "(p_10(Samir) \u2295 p_8(Samir)) \u2192 p_1(Samir)",
                    "str_fol": "(plays_folk(Samir) \u2295 plays_jazz(Samir)) \u2192 is_innovative(Samir)"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Samir",
                "text": "Samir does not play jazz.",
                "fol": "\u00acp_8(Samir)",
                "str_fol": "\u00acplays_jazz(Samir)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 7,
                    "subject": "Samir",
                    "text": "Samir does not compose pop music.",
                    "fol": "\u00acp_9(Samir)",
                    "str_fol": "\u00accomposes_pop(Samir)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "Samir is either a versatile musician or composes pop music, but not both.",
                    "fol": "p_9(Samir) \u2295 p_7(Samir)",
                    "str_fol": "composes_pop(Samir) \u2295 is_versatile(Samir)"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Samir",
                "text": "Samir is a versatile musician.",
                "fol": "p_7(Samir)",
                "str_fol": "is_versatile(Samir)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 9,
                    "subject": "Samir",
                    "text": "Samir is a versatile musician.",
                    "fol": "p_7(Samir)",
                    "str_fol": "is_versatile(Samir)",
                    "negation": false
                },
                {
                    "id": 8,
                    "subject": "Samir",
                    "text": "Samir does not play jazz.",
                    "fol": "\u00acp_8(Samir)",
                    "str_fol": "\u00acplays_jazz(Samir)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "If Samir is a versatile musician, then he either plays jazz or plays rock music, but not both.",
                    "fol": "p_7(Samir) \u2192 (p_8(Samir) \u2295 p_6(Samir))",
                    "str_fol": "is_versatile(Samir) \u2192 (plays_jazz(Samir) \u2295 plays_rock(Samir))"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Samir",
                "text": "Samir plays rock music.",
                "fol": "p_6(Samir)",
                "str_fol": "plays_rock(Samir)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 10,
                    "subject": "Samir",
                    "text": "Samir plays rock music.",
                    "fol": "p_6(Samir)",
                    "str_fol": "plays_rock(Samir)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "Samir either plays rock music or is classically trained, but not both.",
                    "fol": "p_6(Samir) \u2295 p_4(Samir)",
                    "str_fol": "plays_rock(Samir) \u2295 classically_trained(Samir)"
                }
            ],
            "conclusion": {
                "id": 11,
                "subject": "Samir",
                "text": "Samir is not classically trained.",
                "fol": "\u00acp_4(Samir)",
                "str_fol": "\u00acclassically_trained(Samir)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 11,
                    "subject": "Samir",
                    "text": "Samir is not classically trained.",
                    "fol": "\u00acp_4(Samir)",
                    "str_fol": "\u00acclassically_trained(Samir)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "For every musician like Samir, they are either classically trained or self-taught, but not both.",
                    "fol": "p_4(Samir) \u2295 p_5(Samir)",
                    "str_fol": "classically_trained(Samir) \u2295 self_taught(Samir)"
                }
            ],
            "conclusion": {
                "id": 12,
                "subject": "Samir",
                "text": "Samir is not self-taught.",
                "fol": "\u00acp_5(Samir)",
                "str_fol": "\u00acself_taught(Samir)",
                "negation": true
            }
        }
    ],
    "edits": [
        {
            "edit_number": 1,
            "modification_type": "INVARIANT",
            "edited_context_fol": [
                "p_2(Samir)",
                "\u00acp_3(Samir)",
                "p_0(Samir)",
                "\u00acp_1(Samir)",
                "(p_2(Samir) \u2295 p_13(Samir)) \u2192 p_3(Samir)",
                "\u2200x (p_11(x) \u2295 p_13(x))",
                "p_10(Samir) \u2192 (p_11(Samir) \u2227 p_12(Samir))",
                "p_0(Samir) \u2295 p_9(Samir)",
                "(p_10(Samir) \u2295 p_8(Samir)) \u2192 p_1(Samir)",
                "p_9(Samir) \u2295 p_7(Samir)",
                "p_7(Samir) \u2192 (p_8(Samir) \u2295 p_6(Samir))",
                "p_6(Samir) \u2295 p_4(Samir)",
                "p_4(Samir) \u2295 p_5(Samir)",
                "\u00acp_11(Samir)"
            ],
            "edited_natural_language_context": [
                "Samir records albums.",
                "Samir does not gain recognition.",
                "Samir writes lyrics.",
                "Samir is not innovative.",
                "If Samir either records albums or performs live (but not both), then he gains recognition.",
                "A musician either has passion or performs live, but not necessarily both.",
                "If Samir plays folk music, then he has passion and creates harmony.",
                "Samir either writes lyrics or composes pop music, but not both.",
                "If Samir either plays folk or plays jazz (but not both), then he is innovative.",
                "Samir is either a versatile musician or composes pop music, but not both.",
                "If Samir is a versatile musician, then he either plays jazz or plays rock music, but not both.",
                "Samir either plays rock music or is classically trained, but not both.",
                "Samir is either classically trained or self-taught, but not both.",
                "Samir does not have passion."
            ],
            "edits_made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    {
                        "fol": "\u00acp_11(Samir)",
                        "nl": "Samir does not have passion."
                    }
                ],
                "added_rules": []
            },
            "conclusion": "Samir is not self-taught.",
            "conclusion_fol": "\u00acp_5(Samir)",
            "prover9_input": {
                "formulas(assumptions)": [
                    "p_2(Samir)",
                    "-p_3(Samir)",
                    "p_0(Samir)",
                    "-p_1(Samir)",
                    "(-(p_2(Samir) <-> p_13(Samir))) -> p_3(Samir)",
                    "all x (-(p_11(x) <-> p_13(x)))",
                    "p_10(Samir) -> (p_11(Samir) & p_12(Samir))",
                    "-(p_0(Samir) <-> p_9(Samir))",
                    "(-(p_10(Samir) <-> p_8(Samir))) -> p_1(Samir)",
                    "-(p_9(Samir) <-> p_7(Samir))",
                    "p_7(Samir) -> (-(p_8(Samir) <-> p_6(Samir)))",
                    "-(p_6(Samir) <-> p_4(Samir))",
                    "-(p_4(Samir) <-> p_5(Samir))",
                    "-p_11(Samir)"
                ],
                "formulas(goals)": [
                    "p_5(Samir)"
                ]
            },
            "answer": "False"
        },
        {
            "edit_number": 2,
            "modification_type": "FLIP",
            "edited_context_fol": [
                "p_2(Samir)",
                "\u00acp_3(Samir)",
                "\u00acp_1(Samir)",
                "(p_2(Samir) \u2295 p_13(Samir)) \u2192 p_3(Samir)",
                "\u2200x (p_11(x) \u2295 p_13(x))",
                "p_10(Samir) \u2192 (p_11(Samir) \u2227 p_12(Samir))",
                "p_0(Samir) \u2295 p_9(Samir)",
                "(p_10(Samir) \u2295 p_8(Samir)) \u2192 p_1(Samir)",
                "p_9(Samir) \u2295 p_7(Samir)",
                "p_7(Samir) \u2192 (p_8(Samir) \u2295 p_6(Samir))",
                "p_6(Samir) \u2295 p_4(Samir)",
                "p_4(Samir) \u2295 p_5(Samir)",
                "\u00acp_11(Samir)",
                "p_4(Samir)"
            ],
            "edited_natural_language_context": [
                "Samir records albums.",
                "Samir does not gain recognition.",
                "Samir is not innovative.",
                "If Samir either records albums or performs live (but not both), then he gains recognition.",
                "A musician either has passion or performs live, but not necessarily both.",
                "If Samir plays folk music, then he has passion and creates harmony.",
                "Samir either writes lyrics or composes pop music, but not both.",
                "If Samir either plays folk or plays jazz (but not both), then he is innovative.",
                "Samir is either a versatile musician or composes pop music, but not both.",
                "If Samir is a versatile musician, then he either plays jazz or plays rock music, but not both.",
                "Samir either plays rock music or is classically trained, but not both.",
                "Samir is either classically trained or self-taught, but not both.",
                "Samir does not have passion.",
                "Samir is classically trained."
            ],
            "edits_made": {
                "removed_facts": [
                    {
                        "fol": "p_0(Samir)",
                        "nl": "Samir writes lyrics."
                    }
                ],
                "removed_rules": [],
                "added_facts": [
                    {
                        "fol": "p_4(Samir)",
                        "nl": "Samir is classically trained."
                    }
                ],
                "added_rules": []
            },
            "conclusion": "Samir is not self-taught.",
            "conclusion_fol": "\u00acp_5(Samir)",
            "prover9_input": {
                "formulas(assumptions)": [
                    "p_2(Samir)",
                    "-p_3(Samir)",
                    "-p_1(Samir)",
                    "(-(p_2(Samir) <-> p_13(Samir))) -> p_3(Samir)",
                    "all x (-(p_11(x) <-> p_13(x)))",
                    "p_10(Samir) -> (p_11(Samir) & p_12(Samir))",
                    "-(p_0(Samir) <-> p_9(Samir))",
                    "(-(p_10(Samir) <-> p_8(Samir))) -> p_1(Samir)",
                    "-(p_9(Samir) <-> p_7(Samir))",
                    "p_7(Samir) -> (-(p_8(Samir) <-> p_6(Samir)))",
                    "-(p_6(Samir) <-> p_4(Samir))",
                    "-(p_4(Samir) <-> p_5(Samir))",
                    "-p_11(Samir)",
                    "p_4(Samir)"
                ],
                "formulas(goals)": [
                    "-p_5(Samir)"
                ]
            },
            "answer": "True"
        },
        {
            "edit_number": 3,
            "modification_type": "INVARIANT",
            "edited_context_fol": [
                "p_2(Samir)",
                "\u00acp_3(Samir)",
                "\u00acp_1(Samir)",
                "(p_2(Samir) \u2295 p_13(Samir)) \u2192 p_3(Samir)",
                "\u2200x (p_11(x) \u2295 p_13(x))",
                "p_10(Samir) \u2192 (p_11(Samir) \u2227 p_12(Samir))",
                "p_0(Samir) \u2295 p_9(Samir)",
                "(p_10(Samir) \u2295 p_8(Samir)) \u2192 p_1(Samir)",
                "p_9(Samir) \u2295 p_7(Samir)",
                "p_7(Samir) \u2192 (p_8(Samir) \u2295 p_6(Samir))",
                "p_6(Samir) \u2295 p_4(Samir)",
                "p_4(Samir) \u2295 p_5(Samir)",
                "\u00acp_11(Samir)",
                "p_4(Samir)",
                "p_13(Samir)"
            ],
            "edited_natural_language_context": [
                "Samir records albums.",
                "Samir does not gain recognition.",
                "Samir is not innovative.",
                "If Samir either records albums or performs live (but not both), then he gains recognition.",
                "A musician either has passion or performs live, but not necessarily both.",
                "If Samir plays folk music, then he has passion and creates harmony.",
                "Samir either writes lyrics or composes pop music, but not both.",
                "If Samir either plays folk or plays jazz (but not both), then he is innovative.",
                "Samir is either a versatile musician or composes pop music, but not both.",
                "If Samir is a versatile musician, then he either plays jazz or plays rock music, but not both.",
                "Samir either plays rock music or is classically trained, but not both.",
                "Samir is either classically trained or self-taught, but not both.",
                "Samir does not have passion.",
                "Samir is classically trained.",
                "Samir performs live."
            ],
            "edits_made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    {
                        "fol": "p_13(Samir)",
                        "nl": "Samir performs live."
                    }
                ],
                "added_rules": []
            },
            "conclusion": "Samir is not self-taught.",
            "conclusion_fol": "\u00acp_5(Samir)",
            "prover9_input": {
                "formulas(assumptions)": [
                    "p_2(Samir)",
                    "-p_3(Samir)",
                    "-p_1(Samir)",
                    "(-(p_2(Samir) <-> p_13(Samir))) -> p_3(Samir)",
                    "all x (-(p_11(x) <-> p_13(x)))",
                    "p_10(Samir) -> (p_11(Samir) & p_12(Samir))",
                    "-(p_0(Samir) <-> p_9(Samir))",
                    "(-(p_10(Samir) <-> p_8(Samir))) -> p_1(Samir)",
                    "-(p_9(Samir) <-> p_7(Samir))",
                    "p_7(Samir) -> (-(p_8(Samir) <-> p_6(Samir)))",
                    "-(p_6(Samir) <-> p_4(Samir))",
                    "-(p_4(Samir) <-> p_5(Samir))",
                    "-p_11(Samir)",
                    "p_4(Samir)",
                    "p_13(Samir)"
                ],
                "formulas(goals)": [
                    "-p_5(Samir)"
                ]
            },
            "answer": "True"
        },
        {
            "edit_number": 4,
            "modification_type": "FLIP",
            "edited_context_fol": [
                "p_2(Samir)",
                "\u00acp_3(Samir)",
                "\u00acp_1(Samir)",
                "((p_2(Samir) \u2295 p_13(Samir)) \u2192 p_3(Samir))",
                "\u2200x (p_11(x) \u2295 p_13(x))",
                "(p_10(Samir) \u2192 (p_11(Samir) \u2227 p_12(Samir)))",
                "p_0(Samir) \u2295 p_9(Samir)",
                "((p_10(Samir) \u2295 p_8(Samir)) \u2192 p_1(Samir))",
                "p_9(Samir) \u2295 p_7(Samir)",
                "(p_7(Samir) \u2192 (p_8(Samir) \u2295 p_6(Samir)))",
                "p_6(Samir) \u2295 p_4(Samir)",
                "p_4(Samir) \u2295 p_5(Samir)",
                "\u00acp_11(Samir)",
                "\u00acp_4(Samir)",
                "p_13(Samir)"
            ],
            "edited_natural_language_context": [
                "Samir records albums.",
                "Samir does not gain recognition.",
                "Samir is not innovative.",
                "If Samir either records albums or performs live (but not both), then he gains recognition.",
                "A musician either has passion or performs live, but not necessarily both.",
                "If Samir plays folk music, then he has passion and creates harmony.",
                "Samir either writes lyrics or composes pop music, but not both.",
                "If Samir either plays folk or plays jazz (but not both), then he is innovative.",
                "Samir is either a versatile musician or composes pop music, but not both.",
                "If Samir is a versatile musician, then he either plays jazz or plays rock music, but not both.",
                "Samir either plays rock music or is classically trained, but not both.",
                "Samir is either classically trained or self-taught, but not both.",
                "Samir does not have passion.",
                "Samir is not classically trained.",
                "Samir performs live."
            ],
            "edits_made": {
                "removed_facts": [
                    {
                        "fol": "p_4(Samir)",
                        "nl": "Samir is classically trained."
                    }
                ],
                "removed_rules": [],
                "added_facts": [
                    {
                        "fol": "\u00acp_4(Samir)",
                        "nl": "Samir is not classically trained."
                    }
                ],
                "added_rules": []
            },
            "conclusion": "Samir is not self-taught.",
            "conclusion_fol": "\u00acp_5(Samir)",
            "prover9_input": {
                "formulas(assumptions)": [
                    "p_2(Samir).",
                    "-p_3(Samir).",
                    "-p_1(Samir).",
                    "(-(p_2(Samir) <-> p_13(Samir))) -> p_3(Samir).",
                    "all x (-(p_11(x) <-> p_13(x))).",
                    "p_10(Samir) -> (p_11(Samir) & p_12(Samir)).",
                    "-(p_0(Samir) <-> p_9(Samir)).",
                    "(-(p_10(Samir) <-> p_8(Samir))) -> p_1(Samir).",
                    "-(p_9(Samir) <-> p_7(Samir)).",
                    "p_7(Samir) -> (-(p_8(Samir) <-> p_6(Samir))).",
                    "-(p_6(Samir) <-> p_4(Samir)).",
                    "-(p_4(Samir) <-> p_5(Samir)).",
                    "-p_11(Samir).",
                    "-p_4(Samir).",
                    "p_13(Samir)."
                ],
                "formulas(goals)": [
                    "-(-p_5(Samir))."
                ]
            },
            "answer": "False"
        },
        {
            "edit_number": 5,
            "modification_type": "INVARIANT",
            "edited_context_fol": [
                "p_2(Samir)",
                "\u00acp_3(Samir)",
                "\u00acp_1(Samir)",
                "((p_2(Samir) \u2295 p_13(Samir)) \u2192 p_3(Samir))",
                "\u2200x (p_11(x) \u2295 p_13(x))",
                "(\u00acp_10(Samir) \u2228 (p_11(Samir) \u2227 p_12(Samir)))",
                "p_0(Samir) \u2295 p_9(Samir)",
                "((p_10(Samir) \u2295 p_8(Samir)) \u2192 p_1(Samir))",
                "(p_9(Samir) \u2227 \u00acp_7(Samir)) \u2228 (\u00acp_9(Samir) \u2227 p_7(Samir))",
                "(p_7(Samir) \u2192 (p_8(Samir) \u2295 p_6(Samir)))",
                "(p_6(Samir) \u2228 p_4(Samir)) \u2227 (\u00acp_6(Samir) \u2228 \u00acp_4(Samir))",
                "(p_4(Samir) \u2228 p_5(Samir)) \u2227 (\u00acp_4(Samir) \u2228 \u00acp_5(Samir))",
                "\u00acp_11(Samir)",
                "\u00acp_4(Samir)",
                "p_13(Samir)",
                "p_5(Samir)",
                "p_6(Samir)"
            ],
            "edited_natural_language_context": [
                "Samir records albums.",
                "Samir does not gain recognition.",
                "Samir is not innovative.",
                "If Samir either records albums or performs live (but not both), then he gains recognition.",
                "A musician either has passion or performs live, but not necessarily both.",
                "Either Samir does not play folk music, or he has passion and creates harmony.",
                "Samir either writes lyrics or composes pop music, but not both.",
                "If Samir either plays folk or plays jazz (but not both), then he is innovative.",
                "Either Samir composes pop music and is not versatile, or Samir does not compose pop music and is versatile.",
                "If Samir is a versatile musician, then he either plays jazz or plays rock music, but not both.",
                "Samir either plays rock music or is classically trained, and it is not the case that both are true.",
                "Samir is either classically trained or self-taught, and it is not the case that both are true.",
                "Samir does not have passion.",
                "Samir is not classically trained.",
                "Samir performs live.",
                "Samir is self-taught.",
                "Samir plays rock music."
            ],
            "edits_made": {
                "removed_facts": [],
                "removed_rules": [
                    {
                        "fol": "(p_10(Samir) \u2192 (p_11(Samir) \u2227 p_12(Samir)))",
                        "nl": "If Samir plays folk music, then he has passion and creates harmony."
                    },
                    {
                        "fol": "p_9(Samir) \u2295 p_7(Samir)",
                        "nl": "Samir is either a versatile musician or composes pop music, but not both."
                    },
                    {
                        "fol": "p_6(Samir) \u2295 p_4(Samir)",
                        "nl": "Samir either plays rock music or is classically trained, but not both."
                    },
                    {
                        "fol": "p_4(Samir) \u2295 p_5(Samir)",
                        "nl": "Samir is either classically trained or self-taught, but not both."
                    }
                ],
                "added_facts": [
                    {
                        "fol": "p_5(Samir)",
                        "nl": "Samir is self-taught."
                    },
                    {
                        "fol": "p_6(Samir)",
                        "nl": "Samir plays rock music."
                    }
                ],
                "added_rules": [
                    {
                        "fol": "(\u00acp_10(Samir) \u2228 (p_11(Samir) \u2227 p_12(Samir)))",
                        "nl": "Either Samir does not play folk music, or he has passion and creates harmony."
                    },
                    {
                        "fol": "((p_9(Samir) \u2227 \u00acp_7(Samir)) \u2228 (\u00acp_9(Samir) \u2227 p_7(Samir)))",
                        "nl": "Either Samir composes pop music and is not versatile, or Samir does not compose pop music and is versatile."
                    },
                    {
                        "fol": "((p_6(Samir) \u2228 p_4(Samir)) \u2227 (\u00acp_6(Samir) \u2228 \u00acp_4(Samir)))",
                        "nl": "Samir either plays rock music or is classically trained, and it is not the case that both are true."
                    },
                    {
                        "fol": "((p_4(Samir) \u2228 p_5(Samir)) \u2227 (\u00acp_4(Samir) \u2228 \u00acp_5(Samir)))",
                        "nl": "Samir is either classically trained or self-taught, and it is not the case that both are true."
                    }
                ]
            },
            "conclusion": "Samir is not self-taught.",
            "conclusion_fol": "\u00acp_5(Samir)",
            "prover9_input": {
                "formulas(assumptions)": [
                    "p_2(Samir)",
                    "-p_3(Samir)",
                    "-p_1(Samir)",
                    "(-(p_2(Samir) <-> p_13(Samir))) -> p_3(Samir)",
                    "all x (-(p_11(x) <-> p_13(x)))",
                    "(-p_10(Samir)) | (p_11(Samir) & p_12(Samir))",
                    "-(p_0(Samir) <-> p_9(Samir))",
                    "(-(p_10(Samir) <-> p_8(Samir))) -> p_1(Samir)",
                    "(p_9(Samir) & -p_7(Samir)) | (-p_9(Samir) & p_7(Samir))",
                    "p_7(Samir) -> (-(p_8(Samir) <-> p_6(Samir)))",
                    "(p_6(Samir) | p_4(Samir)) & (-p_6(Samir) | -p_4(Samir))",
                    "(p_4(Samir) | p_5(Samir)) & (-p_4(Samir) | -p_5(Samir))",
                    "-p_11(Samir)",
                    "-p_4(Samir)",
                    "p_13(Samir)",
                    "p_5(Samir)",
                    "p_6(Samir)"
                ],
                "formulas(goals)": [
                    "--p_5(Samir)"
                ]
            },
            "answer": "False"
        },
        {
            "edit_number": 6,
            "modification_type": "FLIP",
            "edited_context_fol": [
                "p_2(Samir)",
                "\u00acp_3(Samir)",
                "\u00acp_1(Samir)",
                "((p_2(Samir) \u2295 p_13(Samir)) \u2192 p_3(Samir))",
                "\u2200x (p_11(x) \u2295 p_13(x))",
                "(\u00acp_10(Samir) \u2228 (p_11(Samir) \u2227 p_12(Samir)))",
                "p_0(Samir) \u2295 p_9(Samir)",
                "((p_10(Samir) \u2295 p_8(Samir)) \u2192 p_1(Samir))",
                "(p_9(Samir) \u2227 \u00acp_7(Samir)) \u2228 (\u00acp_9(Samir) \u2227 p_7(Samir))",
                "(p_7(Samir) \u2192 (p_8(Samir) \u2295 p_6(Samir)))",
                "(p_6(Samir) \u2228 p_4(Samir)) \u2227 (\u00acp_6(Samir) \u2228 \u00acp_4(Samir))",
                "\u00acp_5(Samir)",
                "\u00acp_11(Samir)",
                "\u00acp_4(Samir)",
                "p_13(Samir)",
                "p_6(Samir)"
            ],
            "edited_natural_language_context": [
                "Samir records albums.",
                "Samir does not gain recognition.",
                "Samir is not innovative.",
                "If Samir either records albums or performs live (but not both), then he gains recognition.",
                "A musician either has passion or performs live, but not necessarily both.",
                "Either Samir does not play folk music, or he has passion and creates harmony.",
                "Samir either writes lyrics or composes pop music, but not both.",
                "If Samir either plays folk or plays jazz (but not both), then he is innovative.",
                "Either Samir composes pop music and is not versatile, or Samir does not compose pop music and is versatile.",
                "If Samir is a versatile musician, then he either plays jazz or plays rock music, but not both.",
                "Samir either plays rock music or is classically trained, and it is not the case that both are true.",
                "Samir is not self-taught.",
                "Samir does not have passion.",
                "Samir is not classically trained.",
                "Samir performs live.",
                "Samir plays rock music."
            ],
            "edits_made": {
                "removed_facts": [
                    {
                        "fol": "p_5(Samir)",
                        "nl": "Samir is self-taught."
                    }
                ],
                "removed_rules": [
                    {
                        "fol": "(p_4(Samir) \u2228 p_5(Samir)) \u2227 (\u00acp_4(Samir) \u2228 \u00acp_5(Samir))",
                        "nl": "Samir is either classically trained or self-taught, and it is not the case that both are true."
                    }
                ],
                "added_facts": [
                    {
                        "fol": "\u00acp_5(Samir)",
                        "nl": "Samir is not self-taught."
                    }
                ],
                "added_rules": []
            },
            "conclusion": "Samir is not self-taught.",
            "conclusion_fol": "\u00acp_5(Samir)",
            "prover9_input": {
                "formulas(assumptions)": [
                    "p_2(Samir)",
                    "-p_3(Samir)",
                    "-p_1(Samir)",
                    "(-(p_2(Samir) <-> p_13(Samir)) -> p_3(Samir))",
                    "all x (-(p_11(x) <-> p_13(x)))",
                    "(-p_10(Samir) | (p_11(Samir) & p_12(Samir)))",
                    "-(p_0(Samir) <-> p_9(Samir))",
                    "(-(p_10(Samir) <-> p_8(Samir)) -> p_1(Samir))",
                    "(p_9(Samir) & -p_7(Samir)) | (-p_9(Samir) & p_7(Samir))",
                    "(p_7(Samir) -> -(p_8(Samir) <-> p_6(Samir)))",
                    "(p_6(Samir) | p_4(Samir)) & (-p_6(Samir) | -p_4(Samir))",
                    "-p_5(Samir)",
                    "-p_11(Samir)",
                    "-p_4(Samir)",
                    "p_13(Samir)",
                    "p_6(Samir)"
                ],
                "formulas(goals)": [
                    "-p_5(Samir)"
                ]
            },
            "answer": "True"
        },
        {
            "edit_number": 7,
            "modification_type": "INVARIANT",
            "edited_context_fol": [
                "p_2(Samir)",
                "\u00acp_3(Samir)",
                "\u00acp_1(Samir)",
                "((p_2(Samir) \u2295 p_13(Samir)) \u2192 p_3(Samir))",
                "\u2200x (p_11(x) \u2295 p_13(x))",
                "(\u00acp_10(Samir) \u2228 (p_11(Samir) \u2227 p_12(Samir)))",
                "p_0(Samir) \u2295 p_9(Samir)",
                "((p_10(Samir) \u2295 p_8(Samir)) \u2192 p_1(Samir))",
                "(p_9(Samir) \u2227 \u00acp_7(Samir)) \u2228 (\u00acp_9(Samir) \u2227 p_7(Samir))",
                "(p_7(Samir) \u2192 (p_8(Samir) \u2295 p_6(Samir)))",
                "(p_6(Samir) \u2228 p_4(Samir)) \u2227 (\u00acp_6(Samir) \u2228 \u00acp_4(Samir))",
                "\u00acp_5(Samir)",
                "\u00acp_11(Samir)",
                "\u00acp_4(Samir)",
                "p_13(Samir)",
                "p_6(Samir)",
                "p_6(Samir) \u2295 p_4(Samir)",
                "p_9(Samir) \u2295 p_7(Samir)",
                "p_11(Samir) \u2228 p_13(Samir)",
                "\u00acp_11(Samir) \u2228 \u00acp_13(Samir)"
            ],
            "edited_natural_language_context": [
                "Samir records albums.",
                "Samir does not gain recognition.",
                "Samir is not innovative.",
                "If Samir either records albums or performs live (but not both), then he gains recognition.",
                "A musician either has passion or performs live, but not necessarily both.",
                "Either Samir does not play folk music, or he has passion and creates harmony.",
                "Samir either writes lyrics or composes pop music, but not both.",
                "If Samir either plays folk or plays jazz (but not both), then he is innovative.",
                "Either Samir composes pop music and is not versatile, or Samir does not compose pop music and is versatile.",
                "If Samir is a versatile musician, then he either plays jazz or plays rock music, but not both.",
                "Samir either plays rock music or is classically trained, and it is not the case that both are true.",
                "Samir is not self-taught.",
                "Samir does not have passion.",
                "Samir is not classically trained.",
                "Samir performs live.",
                "Samir plays rock music.",
                "Samir either plays rock music or is classically trained, but not both.",
                "Samir is either a versatile musician or composes pop music, but not both.",
                "Samir has passion or performs live.",
                "Samir does not have passion or does not perform live."
            ],
            "edits_made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    {
                        "fol": "p_6(Samir) \u2295 p_4(Samir)",
                        "nl": "Samir either plays rock music or is classically trained, but not both."
                    },
                    {
                        "fol": "p_9(Samir) \u2295 p_7(Samir)",
                        "nl": "Samir is either a versatile musician or composes pop music, but not both."
                    },
                    {
                        "fol": "p_11(Samir) \u2228 p_13(Samir)",
                        "nl": "Samir has passion or performs live."
                    },
                    {
                        "fol": "\u00acp_11(Samir) \u2228 \u00acp_13(Samir)",
                        "nl": "Samir does not have passion or does not perform live."
                    }
                ]
            },
            "conclusion": "Samir is not self-taught.",
            "conclusion_fol": "\u00acp_5(Samir)",
            "prover9_input": {
                "formulas(assumptions)": [
                    "p_2(Samir)",
                    "-p_3(Samir)",
                    "-p_1(Samir)",
                    "(-(p_2(Samir) <-> p_13(Samir)) -> p_3(Samir))",
                    "all x (-(p_11(x) <-> p_13(x)))",
                    "(-p_10(Samir) | (p_11(Samir) & p_12(Samir)))",
                    "-(p_0(Samir) <-> p_9(Samir))",
                    "(-(p_10(Samir) <-> p_8(Samir)) -> p_1(Samir))",
                    "(p_9(Samir) & -p_7(Samir)) | (-p_9(Samir) & p_7(Samir))",
                    "(p_7(Samir) -> -(p_8(Samir) <-> p_6(Samir)))",
                    "(p_6(Samir) | p_4(Samir)) & (-p_6(Samir) | -p_4(Samir))",
                    "-p_5(Samir)",
                    "-p_11(Samir)",
                    "-p_4(Samir)",
                    "p_13(Samir)",
                    "p_6(Samir)",
                    "-(p_6(Samir) <-> p_4(Samir))",
                    "-(p_9(Samir) <-> p_7(Samir))",
                    "p_11(Samir) | p_13(Samir)",
                    "-p_11(Samir) | -p_13(Samir)"
                ],
                "formulas(goals)": [
                    "-p_5(Samir)"
                ]
            },
            "answer": "True"
        }
    ]
}