{
    "original_context": [
        "Abram is not reliable.",
        "Abram does not take action.",
        "Abram seeks fame.",
        "Abram is an emergency responder.",
        "Anyone who solves crises or thinks critically is reliable.",
        "Everyone makes decisions or takes action.",
        "For any person, seeking fame and putting others first are distinct and separate pursuits.",
        "Everyone who earns recognition does not necessarily put others first, and everyone who puts others first does not necessarily earn recognition.",
        "If someone is an expert leader and makes decisions, then they can solve crises.",
        "If Abram is an emergency responder, then he is either a quick thinker or an expert leader, but not both.",
        "If Abram is a quick thinker, then he stays calm and is brave.",
        "If Abram is brave, then he saves lives and earns recognition."
    ],
    "original_context_fol": [
        "\u00acp_3(Abram)",
        "\u00acp_2(Abram)",
        "p_1(Abram)",
        "p_0(Abram)",
        "\u2200x ((p_11(x) \u2228 p_13(x)) \u2192 p_3(x))",
        "\u2200x (p_10(x) \u2228 p_2(x))",
        "\u2200x (p_1(x) \u2295 p_12(x))",
        "\u2200x (p_6(x) \u2295 p_12(x))",
        "\u2200x ((p_9(x) \u2227 p_10(x)) \u2192 p_11(x))",
        "p_0(Abram) \u2192 (p_7(Abram) \u2295 p_9(Abram))",
        "p_7(Abram) \u2192 (p_8(Abram) \u2227 p_4(Abram))",
        "p_4(Abram) \u2192 (p_5(Abram) \u2227 p_6(Abram))"
    ],
    "conclusion": "Abram saves lives.",
    "conclusion_fol": "p_5(Abram)",
    "answer": "True",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 3,
                    "subject": "Abram",
                    "text": "Abram is not reliable.",
                    "fol": "\u00acp_3(Abram)",
                    "str_fol": "\u00acis_reliable(Abram)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 7,
                    "text": "Anyone who solves crises or thinks critically is reliable.",
                    "fol": "\u2200x ((p_11(x) \u2228 p_13(x)) \u2192 p_3(x))",
                    "str_fol": "\u2200x ((solves_crises(x) \u2228 thinks_critically(x)) \u2192 is_reliable(x))"
                }
            ],
            "conclusion": {
                "id": 4,
                "subject": "Abram",
                "text": "Abram cannot solve crises.",
                "fol": "\u00acp_11(Abram)",
                "str_fol": "\u00acsolves_crises(Abram)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 2,
                    "subject": "Abram",
                    "text": "Abram does not take action.",
                    "fol": "\u00acp_2(Abram)",
                    "str_fol": "\u00actakes_action(Abram)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 6,
                    "text": "Everyone makes decisions or takes action.",
                    "fol": "\u2200x (p_10(x) \u2228 p_2(x))",
                    "str_fol": "\u2200x (makes_decisions(x) \u2228 takes_action(x))"
                }
            ],
            "conclusion": {
                "id": 5,
                "subject": "Abram",
                "text": "Abram makes decisions.",
                "fol": "p_10(Abram)",
                "str_fol": "makes_decisions(Abram)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 1,
                    "subject": "Abram",
                    "text": "Abram seeks fame.",
                    "fol": "p_1(Abram)",
                    "str_fol": "seeks_fame(Abram)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "For any person, seeking fame and putting others first are distinct and separate pursuits.",
                    "fol": "\u2200x (p_1(x) \u2295 p_12(x))",
                    "str_fol": "\u2200x (seeks_fame(x) \u2295 put_others_first(x))"
                }
            ],
            "conclusion": {
                "id": 6,
                "subject": "Abram",
                "text": "Abram does not put others first.",
                "fol": "\u00acp_12(Abram)",
                "str_fol": "\u00acput_others_first(Abram)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 6,
                    "subject": "Abram",
                    "text": "Abram does not put others first.",
                    "fol": "\u00acp_12(Abram)",
                    "str_fol": "\u00acput_others_first(Abram)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "Everyone who earns recognition does not necessarily put others first, and everyone who puts others first does not necessarily earn recognition.",
                    "fol": "\u2200x (p_6(x) \u2295 p_12(x))",
                    "str_fol": "\u2200x (earn_recognition(x) \u2295 put_others_first(x))"
                }
            ],
            "conclusion": {
                "id": 7,
                "subject": "Abram",
                "text": "Abram earns recognition.",
                "fol": "p_6(Abram)",
                "str_fol": "earn_recognition(Abram)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 5,
                    "subject": "Abram",
                    "text": "Abram makes decisions.",
                    "fol": "p_10(Abram)",
                    "str_fol": "makes_decisions(Abram)",
                    "negation": false
                },
                {
                    "id": 4,
                    "subject": "Abram",
                    "text": "Abram cannot solve crises.",
                    "fol": "\u00acp_11(Abram)",
                    "str_fol": "\u00acsolves_crises(Abram)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "If someone is an expert leader and makes decisions, then they can solve crises.",
                    "fol": "\u2200x ((p_9(x) \u2227 p_10(x)) \u2192 p_11(x))",
                    "str_fol": "\u2200x ((expert_leader(x) \u2227 makes_decisions(x)) \u2192 solves_crises(x))"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Abram",
                "text": "Abram is not an expert leader.",
                "fol": "\u00acp_9(Abram)",
                "str_fol": "\u00acexpert_leader(Abram)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 0,
                    "subject": "Abram",
                    "text": "Abram is an emergency responder.",
                    "fol": "p_0(Abram)",
                    "str_fol": "emergency_responder(Abram)",
                    "negation": false
                },
                {
                    "id": 8,
                    "subject": "Abram",
                    "text": "Abram is not an expert leader.",
                    "fol": "\u00acp_9(Abram)",
                    "str_fol": "\u00acexpert_leader(Abram)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "If Abram is an emergency responder, then he is either a quick thinker or an expert leader, but not both.",
                    "fol": "p_0(Abram) \u2192 (p_7(Abram) \u2295 p_9(Abram))",
                    "str_fol": "emergency_responder(Abram) \u2192 (quick_thinker(Abram) \u2295 expert_leader(Abram))"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Abram",
                "text": "Abram is a quick thinker.",
                "fol": "p_7(Abram)",
                "str_fol": "quick_thinker(Abram)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 9,
                    "subject": "Abram",
                    "text": "Abram is a quick thinker.",
                    "fol": "p_7(Abram)",
                    "str_fol": "quick_thinker(Abram)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "If Abram is a quick thinker, then he stays calm and is brave.",
                    "fol": "p_7(Abram) \u2192 (p_8(Abram) \u2227 p_4(Abram))",
                    "str_fol": "quick_thinker(Abram) \u2192 (stay_calm(Abram) \u2227 brave(Abram))"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Abram",
                "text": "Abram is brave.",
                "fol": "p_4(Abram)",
                "str_fol": "brave(Abram)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 10,
                    "subject": "Abram",
                    "text": "Abram is brave.",
                    "fol": "p_4(Abram)",
                    "str_fol": "brave(Abram)",
                    "negation": false
                },
                {
                    "id": 7,
                    "subject": "Abram",
                    "text": "Abram earns recognition.",
                    "fol": "p_6(Abram)",
                    "str_fol": "earn_recognition(Abram)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "If Abram is brave, then he saves lives and earns recognition.",
                    "fol": "p_4(Abram) \u2192 (p_5(Abram) \u2227 p_6(Abram))",
                    "str_fol": "brave(Abram) \u2192 (save_lives(Abram) \u2227 earn_recognition(Abram))"
                }
            ],
            "conclusion": {
                "id": 11,
                "subject": "Abram",
                "text": "Abram saves lives.",
                "fol": "p_5(Abram)",
                "str_fol": "save_lives(Abram)",
                "negation": false
            }
        }
    ],
    "edits": [
        {
            "edit_number": 1,
            "modification_type": "INVARIANT",
            "edited_context_fol": [
                "\u00acp_3(Abram)",
                "\u00acp_2(Abram)",
                "p_1(Abram)",
                "p_0(Abram)",
                "\u2200x ((p_11(x) \u2192 p_3(x)) \u2227 (p_13(x) \u2192 p_3(x)))",
                "\u2200x (p_10(x) \u2228 p_2(x))",
                "\u2200x (p_1(x) \u2295 p_12(x))",
                "\u2200x (p_6(x) \u2295 p_12(x))",
                "\u2200x ((p_9(x) \u2227 p_10(x)) \u2192 p_11(x))",
                "p_0(Abram) \u2192 (p_7(Abram) \u2295 p_9(Abram))",
                "p_7(Abram) \u2192 (p_8(Abram) \u2227 p_4(Abram))",
                "p_4(Abram) \u2192 (p_5(Abram) \u2227 p_6(Abram))",
                "p_6(Abram)",
                "\u00acp_12(Abram)",
                "\u00acp_9(Abram)"
            ],
            "edited_natural_language_context": [
                "Abram is not reliable.",
                "Abram does not take action.",
                "Abram seeks fame.",
                "Abram is an emergency responder.",
                "Anyone who solves crises is reliable, and anyone who thinks critically is reliable.",
                "Everyone makes decisions or takes action.",
                "For any person, seeking fame and putting others first are distinct and separate pursuits.",
                "Everyone who earns recognition does not necessarily put others first, and everyone who puts others first does not necessarily earn recognition.",
                "If someone is an expert leader and makes decisions, then they can solve crises.",
                "If Abram is an emergency responder, then he is either a quick thinker or an expert leader, but not both.",
                "If Abram is a quick thinker, then he stays calm and is brave.",
                "If Abram is brave, then he saves lives and earns recognition.",
                "Abram earns recognition.",
                "Abram does not put others first.",
                "Abram is not an expert leader."
            ],
            "edits_made": {
                "removed_facts": [],
                "removed_rules": [
                    {
                        "fol": "\u2200x ((p_11(x) \u2228 p_13(x)) \u2192 p_3(x))",
                        "nl": "Anyone who solves crises or thinks critically is reliable."
                    }
                ],
                "added_facts": [
                    {
                        "fol": "p_6(Abram)",
                        "nl": "Abram earns recognition."
                    },
                    {
                        "fol": "\u00acp_12(Abram)",
                        "nl": "Abram does not put others first."
                    },
                    {
                        "fol": "\u00acp_9(Abram)",
                        "nl": "Abram is not an expert leader."
                    }
                ],
                "added_rules": [
                    {
                        "fol": "\u2200x ((p_11(x) \u2192 p_3(x)) \u2227 (p_13(x) \u2192 p_3(x)))",
                        "nl": "Anyone who solves crises is reliable, and anyone who thinks critically is reliable."
                    }
                ]
            },
            "conclusion": "Abram saves lives.",
            "conclusion_fol": "p_5(Abram)",
            "prover9_input": {
                "formulas(assumptions)": [
                    "-p_3(Abram)",
                    "-p_2(Abram)",
                    "p_1(Abram)",
                    "p_0(Abram)",
                    "all x ((p_11(x) -> p_3(x)) & (p_13(x) -> p_3(x)))",
                    "all x (p_10(x) | p_2(x))",
                    "all x (-(p_1(x) <-> p_12(x)))",
                    "all x (-(p_6(x) <-> p_12(x)))",
                    "all x ((p_9(x) & p_10(x)) -> p_11(x))",
                    "p_0(Abram) -> (-(p_7(Abram) <-> p_9(Abram)))",
                    "p_7(Abram) -> (p_8(Abram) & p_4(Abram))",
                    "p_4(Abram) -> (p_5(Abram) & p_6(Abram))",
                    "p_6(Abram)",
                    "-p_12(Abram)",
                    "-p_9(Abram)"
                ],
                "formulas(goals)": [
                    "p_5(Abram)"
                ]
            },
            "answer": "True"
        },
        {
            "edit_number": 2,
            "modification_type": "INVARIANT",
            "edited_context_fol": [
                "\u00acp_3(Abram)",
                "\u00acp_2(Abram)",
                "p_1(Abram)",
                "p_0(Abram)",
                "\u2200x ((p_11(x) \u2192 p_3(x)) \u2227 (p_13(x) \u2192 p_3(x)))",
                "\u2200x (p_10(x) \u2228 p_2(x))",
                "\u2200x (p_1(x) \u2295 p_12(x))",
                "\u2200x (p_6(x) \u2295 p_12(x))",
                "\u2200x ((p_9(x) \u2227 p_10(x)) \u2192 p_11(x))",
                "p_0(Abram) \u2192 (p_7(Abram) \u2295 p_9(Abram))",
                "p_7(Abram) \u2192 (p_8(Abram) \u2227 p_4(Abram))",
                "p_4(Abram) \u2192 (p_5(Abram) \u2227 p_6(Abram))",
                "p_6(Abram)",
                "\u00acp_12(Abram)",
                "\u00acp_9(Abram)",
                "p_10(Abram)",
                "\u00acp_11(Abram)",
                "\u2200x (p_1(x) \u2194 p_6(x))"
            ],
            "edited_natural_language_context": [
                "Abram is not reliable.",
                "Abram does not take action.",
                "Abram seeks fame.",
                "Abram is an emergency responder.",
                "Anyone who solves crises is reliable, and anyone who thinks critically is reliable.",
                "Everyone makes decisions or takes action.",
                "For any person, seeking fame and putting others first are distinct and separate pursuits.",
                "Everyone who earns recognition does not necessarily put others first, and everyone who puts others first does not necessarily earn recognition.",
                "If someone is an expert leader and makes decisions, then they can solve crises.",
                "If Abram is an emergency responder, then he is either a quick thinker or an expert leader, but not both.",
                "If Abram is a quick thinker, then he stays calm and is brave.",
                "If Abram is brave, then he saves lives and earns recognition.",
                "Abram earns recognition.",
                "Abram does not put others first.",
                "Abram is not an expert leader.",
                "Abram makes decisions.",
                "Abram does not solve crises.",
                "For any person, seeking fame if and only if they earn recognition."
            ],
            "edits_made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    {
                        "fol": "p_10(Abram)",
                        "nl": "Abram makes decisions."
                    },
                    {
                        "fol": "\u00acp_11(Abram)",
                        "nl": "Abram does not solve crises."
                    }
                ],
                "added_rules": [
                    {
                        "fol": "\u2200x (p_1(x) \u2194 p_6(x))",
                        "nl": "For any person, seeking fame if and only if they earn recognition."
                    }
                ]
            },
            "conclusion": "Abram saves lives.",
            "conclusion_fol": "p_5(Abram)",
            "prover9_input": {
                "formulas(assumptions)": [
                    "-p_3(Abram)",
                    "-p_2(Abram)",
                    "p_1(Abram)",
                    "p_0(Abram)",
                    "all x ((p_11(x) -> p_3(x)) & (p_13(x) -> p_3(x)))",
                    "all x (p_10(x) | p_2(x))",
                    "all x (-(p_1(x) <-> p_12(x)))",
                    "all x (-(p_6(x) <-> p_12(x)))",
                    "all x ((p_9(x) & p_10(x)) -> p_11(x))",
                    "p_0(Abram) -> (-(p_7(Abram) <-> p_9(Abram)))",
                    "p_7(Abram) -> (p_8(Abram) & p_4(Abram))",
                    "p_4(Abram) -> (p_5(Abram) & p_6(Abram))",
                    "p_6(Abram)",
                    "-p_12(Abram)",
                    "-p_9(Abram)",
                    "p_10(Abram)",
                    "-p_11(Abram)",
                    "all x (p_1(x) <-> p_6(x))"
                ],
                "formulas(goals)": [
                    "p_5(Abram)"
                ]
            },
            "answer": "True"
        },
        {
            "edit_number": 3,
            "modification_type": "INVARIANT",
            "edited_context_fol": [
                "\u00acp_3(Abram)",
                "\u00acp_2(Abram)",
                "p_1(Abram)",
                "p_0(Abram)",
                "\u2200x (\u00acp_11(x) \u2228 p_3(x))",
                "\u2200x (\u00acp_13(x) \u2228 p_3(x))",
                "\u2200x (p_10(x) \u2228 p_2(x))",
                "\u2200x (p_1(x) \u2295 p_12(x))",
                "\u2200x (p_6(x) \u2295 p_12(x))",
                "\u2200x ((p_9(x) \u2227 p_10(x)) \u2192 p_11(x))",
                "p_0(Abram) \u2192 (p_7(Abram) \u2295 p_9(Abram))",
                "\u00acp_7(Abram) \u2228 (p_8(Abram) \u2227 p_4(Abram))",
                "\u00acp_4(Abram) \u2228 (p_5(Abram) \u2227 p_6(Abram))",
                "p_6(Abram)",
                "\u00acp_12(Abram)",
                "\u00acp_9(Abram)",
                "p_10(Abram)",
                "\u00acp_11(Abram)",
                "\u2200x (p_1(x) \u2194 p_6(x))",
                "p_4(Abram)",
                "p_5(Abram)"
            ],
            "edited_natural_language_context": [
                "Abram is not reliable.",
                "Abram does not take action.",
                "Abram seeks fame.",
                "Abram is an emergency responder.",
                "Anyone who solves crises is reliable.",
                "Anyone who thinks critically is reliable.",
                "Everyone makes decisions or takes action.",
                "For any person, seeking fame and putting others first are distinct and separate pursuits.",
                "Everyone who earns recognition does not necessarily put others first, and everyone who puts others first does not necessarily earn recognition.",
                "If someone is an expert leader and makes decisions, then they can solve crises.",
                "If Abram is an emergency responder, then he is either a quick thinker or an expert leader, but not both.",
                "Either Abram is not a quick thinker, or he stays calm and is brave.",
                "Either Abram is not brave, or he saves lives and earns recognition.",
                "Abram earns recognition.",
                "Abram does not put others first.",
                "Abram is not an expert leader.",
                "Abram makes decisions.",
                "Abram does not solve crises.",
                "For any person, seeking fame if and only if they earn recognition.",
                "Abram is brave.",
                "Abram saves lives."
            ],
            "edits_made": {
                "removed_facts": [],
                "removed_rules": [
                    {
                        "fol": "\u2200x ((p_11(x) \u2192 p_3(x)) \u2227 (p_13(x) \u2192 p_3(x)))",
                        "nl": "Anyone who solves crises is reliable, and anyone who thinks critically is reliable."
                    }
                ],
                "added_facts": [
                    {
                        "fol": "p_4(Abram)",
                        "nl": "Abram is brave."
                    },
                    {
                        "fol": "p_5(Abram)",
                        "nl": "Abram saves lives."
                    }
                ],
                "added_rules": [
                    {
                        "fol": "\u2200x (\u00acp_11(x) \u2228 p_3(x))",
                        "nl": "Anyone who solves crises is reliable."
                    },
                    {
                        "fol": "\u2200x (\u00acp_13(x) \u2228 p_3(x))",
                        "nl": "Anyone who thinks critically is reliable."
                    }
                ]
            },
            "conclusion": "Abram saves lives.",
            "conclusion_fol": "p_5(Abram)",
            "prover9_input": {
                "formulas(assumptions)": [
                    "-p_3(Abram)",
                    "-p_2(Abram)",
                    "p_1(Abram)",
                    "p_0(Abram)",
                    "all x (-p_11(x) | p_3(x))",
                    "all x (-p_13(x) | p_3(x))",
                    "all x (p_10(x) | p_2(x))",
                    "all x (-(p_1(x) <-> p_12(x)))",
                    "all x (-(p_6(x) <-> p_12(x)))",
                    "all x (-(p_9(x) & p_10(x)) | p_11(x))",
                    "p_0(Abram) -> (-(p_7(Abram) <-> p_9(Abram)))",
                    "-p_7(Abram) | (p_8(Abram) & p_4(Abram))",
                    "-p_4(Abram) | (p_5(Abram) & p_6(Abram))",
                    "p_6(Abram)",
                    "-p_12(Abram)",
                    "-p_9(Abram)",
                    "p_10(Abram)",
                    "-p_11(Abram)",
                    "all x (p_1(x) <-> p_6(x))",
                    "p_4(Abram)",
                    "p_5(Abram)"
                ],
                "formulas(goals)": [
                    "p_5(Abram)"
                ]
            },
            "answer": "True"
        },
        {
            "edit_number": 4,
            "modification_type": "FLIP",
            "edited_context_fol": [
                "\u00acp_3(Abram)",
                "\u00acp_2(Abram)",
                "p_1(Abram)",
                "p_0(Abram)",
                "\u2200x (\u00acp_11(x) \u2228 p_3(x))",
                "\u2200x (\u00acp_13(x) \u2228 p_3(x))",
                "\u2200x (p_10(x) \u2228 p_2(x))",
                "\u2200x \u00ac(p_1(x) \u2194 p_12(x))",
                "\u2200x \u00ac(p_6(x) \u2194 p_12(x))",
                "\u2200x ((p_9(x) \u2227 p_10(x)) \u2192 p_11(x))",
                "p_0(Abram) \u2192 \u00ac(p_7(Abram) \u2194 p_9(Abram))",
                "\u00acp_7(Abram) \u2228 (p_8(Abram) \u2227 p_4(Abram))",
                "\u00acp_4(Abram) \u2228 (\u00acp_5(Abram) \u2227 p_6(Abram))",
                "p_6(Abram)",
                "\u00acp_12(Abram)",
                "\u00acp_9(Abram)",
                "p_10(Abram)",
                "\u00acp_11(Abram)",
                "\u2200x (p_1(x) \u2194 p_6(x))",
                "p_4(Abram)"
            ],
            "edited_natural_language_context": [
                "Abram is not reliable.",
                "Abram does not take action.",
                "Abram seeks fame.",
                "Abram is an emergency responder.",
                "Anyone who solves crises is reliable.",
                "Anyone who thinks critically is reliable.",
                "Everyone makes decisions or takes action.",
                "For any person, seeking fame and putting others first cannot be equivalent.",
                "For any person, earning recognition and putting others first cannot be equivalent.",
                "If someone is an expert leader and makes decisions, then they can solve crises.",
                "If Abram is an emergency responder, then being a quick thinker and being an expert leader cannot be equivalent for him.",
                "Either Abram is not a quick thinker, or he stays calm and is brave.",
                "Either Abram is not brave, or he does not save lives and earns recognition.",
                "Abram earns recognition.",
                "Abram does not put others first.",
                "Abram is not an expert leader.",
                "Abram makes decisions.",
                "Abram does not solve crises.",
                "For any person, seeking fame if and only if they earn recognition.",
                "Abram is brave."
            ],
            "edits_made": {
                "removed_facts": [
                    {
                        "fol": "p_5(Abram)",
                        "nl": "Abram saves lives."
                    }
                ],
                "removed_rules": [
                    {
                        "fol": "\u00acp_4(Abram) \u2228 (p_5(Abram) \u2227 p_6(Abram))",
                        "nl": "Either Abram is not brave, or he saves lives and earns recognition."
                    }
                ],
                "added_facts": [],
                "added_rules": [
                    {
                        "fol": "\u00acp_4(Abram) \u2228 (\u00acp_5(Abram) \u2227 p_6(Abram))",
                        "nl": "Either Abram is not brave, or he does not save lives and earns recognition."
                    }
                ]
            },
            "conclusion": "Abram saves lives.",
            "conclusion_fol": "p_5(Abram)",
            "prover9_input": {
                "formulas(assumptions)": [
                    "-p_3(Abram)",
                    "-p_2(Abram)",
                    "p_1(Abram)",
                    "p_0(Abram)",
                    "all x (-p_11(x) | p_3(x))",
                    "all x (-p_13(x) | p_3(x))",
                    "all x (p_10(x) | p_2(x))",
                    "all x (-(p_1(x) <-> p_12(x)))",
                    "all x (-(p_6(x) <-> p_12(x)))",
                    "all x ((p_9(x) & p_10(x)) -> p_11(x))",
                    "p_0(Abram) -> -(p_7(Abram) <-> p_9(Abram))",
                    "-p_7(Abram) | (p_8(Abram) & p_4(Abram))",
                    "-p_4(Abram) | (-p_5(Abram) & p_6(Abram))",
                    "p_6(Abram)",
                    "-p_12(Abram)",
                    "-p_9(Abram)",
                    "p_10(Abram)",
                    "-p_11(Abram)",
                    "all x (p_1(x) <-> p_6(x))",
                    "p_4(Abram)"
                ],
                "formulas(goals)": [
                    "-p_5(Abram)"
                ]
            },
            "answer": "False"
        },
        {
            "edit_number": 5,
            "modification_type": "FLIP",
            "edited_context_fol": [
                "\u00acp_3(Abram)",
                "\u00acp_2(Abram)",
                "p_1(Abram)",
                "p_0(Abram)",
                "\u2200x (\u00acp_11(x) \u2228 p_3(x))",
                "\u2200x (\u00acp_13(x) \u2228 p_3(x))",
                "\u2200x (p_10(x) \u2228 p_2(x))",
                "\u2200x \u00ac(p_1(x) \u2194 p_12(x))",
                "\u2200x \u00ac(p_6(x) \u2194 p_12(x))",
                "\u2200x ((p_9(x) \u2227 p_10(x)) \u2192 p_11(x))",
                "p_0(Abram) \u2192 \u00ac(p_7(Abram) \u2194 p_9(Abram))",
                "\u00acp_7(Abram) \u2228 (p_8(Abram) \u2227 p_4(Abram))",
                "p_6(Abram)",
                "\u00acp_12(Abram)",
                "\u00acp_9(Abram)",
                "p_10(Abram)",
                "\u00acp_11(Abram)",
                "\u2200x (p_1(x) \u2194 p_6(x))",
                "p_4(Abram)",
                "\u00acp_4(Abram) \u2228 p_5(Abram)"
            ],
            "edited_natural_language_context": [
                "Abram is not reliable.",
                "Abram does not take action.",
                "Abram seeks fame.",
                "Abram is an emergency responder.",
                "Anyone who solves crises is reliable.",
                "Anyone who thinks critically is reliable.",
                "Everyone makes decisions or takes action.",
                "For any person, seeking fame and putting others first cannot be equivalent.",
                "For any person, earning recognition and putting others first cannot be equivalent.",
                "If someone is an expert leader and makes decisions, then they can solve crises.",
                "If Abram is an emergency responder, then being a quick thinker and being an expert leader cannot be equivalent for him.",
                "Either Abram is not a quick thinker, or he stays calm and is brave.",
                "Abram earns recognition.",
                "Abram does not put others first.",
                "Abram is not an expert leader.",
                "Abram makes decisions.",
                "Abram does not solve crises.",
                "For any person, seeking fame if and only if they earn recognition.",
                "Abram is brave.",
                "Either Abram is not brave, or he saves lives."
            ],
            "edits_made": {
                "removed_facts": [],
                "removed_rules": [
                    {
                        "fol": "\u00acp_4(Abram) \u2228 (\u00acp_5(Abram) \u2227 p_6(Abram))",
                        "nl": "Either Abram is not brave, or he does not save lives and earns recognition."
                    }
                ],
                "added_facts": [],
                "added_rules": [
                    {
                        "fol": "\u00acp_4(Abram) \u2228 p_5(Abram)",
                        "nl": "Either Abram is not brave, or he saves lives."
                    }
                ]
            },
            "conclusion": "Abram saves lives.",
            "conclusion_fol": "p_5(Abram)",
            "prover9_input": {
                "formulas(assumptions)": [
                    "\u00acp_3(Abram)",
                    "\u00acp_2(Abram)",
                    "p_1(Abram)",
                    "p_0(Abram)",
                    "all x (\u00acp_11(x) | p_3(x))",
                    "all x (\u00acp_13(x) | p_3(x))",
                    "all x (p_10(x) | p_2(x))",
                    "all x \u00ac(p_1(x) <-> p_12(x))",
                    "all x \u00ac(p_6(x) <-> p_12(x))",
                    "all x ((p_9(x) & p_10(x)) -> p_11(x))",
                    "p_0(Abram) -> \u00ac(p_7(Abram) <-> p_9(Abram))",
                    "\u00acp_7(Abram) | (p_8(Abram) & p_4(Abram))",
                    "p_6(Abram)",
                    "\u00acp_12(Abram)",
                    "\u00acp_9(Abram)",
                    "p_10(Abram)",
                    "\u00acp_11(Abram)",
                    "all x (p_1(x) <-> p_6(x))",
                    "p_4(Abram)",
                    "\u00acp_4(Abram) | p_5(Abram)"
                ],
                "formulas(goals)": [
                    "p_5(Abram)"
                ]
            },
            "answer": "True"
        },
        {
            "edit_number": 6,
            "modification_type": "INVARIANT",
            "edited_context_fol": [
                "\u00acp_3(Abram)",
                "\u00acp_2(Abram)",
                "p_1(Abram)",
                "p_0(Abram)",
                "\u2200x (\u00acp_11(x) \u2228 p_3(x))",
                "\u2200x (\u00acp_13(x) \u2228 p_3(x))",
                "\u2200x (p_10(x) \u2228 p_2(x))",
                "\u2200x \u00ac(p_1(x) \u2194 p_12(x))",
                "\u2200x \u00ac(p_6(x) \u2194 p_12(x))",
                "\u2200x ((p_9(x) \u2227 p_10(x)) \u2192 p_11(x))",
                "p_0(Abram) \u2192 \u00ac(p_7(Abram) \u2194 p_9(Abram))",
                "\u00acp_7(Abram) \u2228 (p_8(Abram) \u2227 p_4(Abram))",
                "p_6(Abram)",
                "\u00acp_12(Abram)",
                "\u00acp_9(Abram)",
                "p_10(Abram)",
                "\u00acp_11(Abram)",
                "\u2200x (p_1(x) \u2194 p_6(x))",
                "p_4(Abram)",
                "\u00acp_4(Abram) \u2228 p_5(Abram)",
                "\u2200x (\u00acp_2(x) \u2192 p_10(x))",
                "\u2200x (\u00acp_3(x) \u2192 \u00acp_13(x))",
                "\u2200x ((p_1(x) \u2228 p_12(x)) \u2227 (\u00acp_1(x) \u2228 \u00acp_12(x)))",
                "\u00acp_7(Abram) \u2228 p_8(Abram)"
            ],
            "edited_natural_language_context": [
                "Abram is not reliable.",
                "Abram does not take action.",
                "Abram seeks fame.",
                "Abram is an emergency responder.",
                "Anyone who solves crises is reliable.",
                "Anyone who thinks critically is reliable.",
                "Everyone makes decisions or takes action.",
                "For any person, seeking fame and putting others first cannot be equivalent.",
                "For any person, earning recognition and putting others first cannot be equivalent.",
                "If someone is an expert leader and makes decisions, then they can solve crises.",
                "If Abram is an emergency responder, then being a quick thinker and being an expert leader cannot be equivalent for him.",
                "Either Abram is not a quick thinker, or he stays calm and is brave.",
                "Abram earns recognition.",
                "Abram does not put others first.",
                "Abram is not an expert leader.",
                "Abram makes decisions.",
                "Abram does not solve crises.",
                "For any person, seeking fame if and only if they earn recognition.",
                "Abram is brave.",
                "Either Abram is not brave, or he saves lives.",
                "Anyone who does not take action makes decisions.",
                "Anyone who is not reliable does not think critically.",
                "For any person, either they seek fame or put others first, but not both.",
                "Either Abram is not a quick thinker, or he stays calm."
            ],
            "edits_made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    {
                        "fol": "\u2200x (\u00acp_2(x) \u2192 p_10(x))",
                        "nl": "Anyone who does not take action makes decisions."
                    },
                    {
                        "fol": "\u2200x (\u00acp_3(x) \u2192 \u00acp_13(x))",
                        "nl": "Anyone who is not reliable does not think critically."
                    },
                    {
                        "fol": "\u2200x ((p_1(x) \u2228 p_12(x)) \u2227 (\u00acp_1(x) \u2228 \u00acp_12(x)))",
                        "nl": "For any person, either they seek fame or put others first, but not both."
                    },
                    {
                        "fol": "\u00acp_7(Abram) \u2228 p_8(Abram)",
                        "nl": "Either Abram is not a quick thinker, or he stays calm."
                    }
                ]
            },
            "conclusion": "Abram saves lives.",
            "conclusion_fol": "p_5(Abram)",
            "prover9_input": {
                "formulas(assumptions)": [
                    "-p_3(Abram)",
                    "-p_2(Abram)",
                    "p_1(Abram)",
                    "p_0(Abram)",
                    "all x (-p_11(x) | p_3(x))",
                    "all x (-p_13(x) | p_3(x))",
                    "all x (p_10(x) | p_2(x))",
                    "all x (-(p_1(x) <-> p_12(x)))",
                    "all x (-(p_6(x) <-> p_12(x)))",
                    "all x ((p_9(x) & p_10(x)) -> p_11(x))",
                    "p_0(Abram) -> -(p_7(Abram) <-> p_9(Abram))",
                    "-p_7(Abram) | (p_8(Abram) & p_4(Abram))",
                    "p_6(Abram)",
                    "-p_12(Abram)",
                    "-p_9(Abram)",
                    "p_10(Abram)",
                    "-p_11(Abram)",
                    "all x (p_1(x) <-> p_6(x))",
                    "p_4(Abram)",
                    "-p_4(Abram) | p_5(Abram)",
                    "all x (-p_2(x) -> p_10(x))",
                    "all x (-p_3(x) -> -p_13(x))",
                    "all x ((p_1(x) | p_12(x)) & (-p_1(x) | -p_12(x)))",
                    "-p_7(Abram) | p_8(Abram)"
                ],
                "formulas(goals)": [
                    "p_5(Abram)"
                ]
            },
            "answer": "True"
        },
        {
            "edit_number": 7,
            "modification_type": "FLIP",
            "edited_context_fol": [
                "\u00acp_3(Abram)",
                "\u00acp_2(Abram)",
                "p_1(Abram)",
                "p_0(Abram)",
                "\u2200x (\u00acp_11(x) \u2228 p_3(x))",
                "\u2200x (\u00acp_13(x) \u2228 p_3(x))",
                "\u2200x (p_10(x) \u2228 p_2(x))",
                "\u2200x \u00ac(p_1(x) \u2194 p_12(x))",
                "\u2200x \u00ac(p_6(x) \u2194 p_12(x))",
                "\u2200x ((p_9(x) \u2227 p_10(x)) \u2192 p_11(x))",
                "p_0(Abram) \u2192 \u00ac(p_7(Abram) \u2194 p_9(Abram))",
                "\u00acp_7(Abram) \u2228 (p_8(Abram) \u2227 p_4(Abram))",
                "p_6(Abram)",
                "\u00acp_12(Abram)",
                "\u00acp_9(Abram)",
                "p_10(Abram)",
                "\u00acp_11(Abram)",
                "\u2200x (p_1(x) \u2194 p_6(x))",
                "p_4(Abram)",
                "\u00acp_4(Abram) \u2228 \u00acp_5(Abram)",
                "\u2200x (\u00acp_2(x) \u2192 p_10(x))",
                "\u2200x (\u00acp_3(x) \u2192 \u00acp_13(x))",
                "\u2200x ((p_1(x) \u2228 p_12(x)) \u2227 (\u00acp_1(x) \u2228 \u00acp_12(x)))",
                "\u00acp_7(Abram) \u2228 p_8(Abram)"
            ],
            "edited_natural_language_context": [
                "Abram is not reliable.",
                "Abram does not take action.",
                "Abram seeks fame.",
                "Abram is an emergency responder.",
                "Anyone who solves crises is reliable.",
                "Anyone who thinks critically is reliable.",
                "Everyone makes decisions or takes action.",
                "For any person, seeking fame and putting others first cannot be equivalent.",
                "For any person, earning recognition and putting others first cannot be equivalent.",
                "If someone is an expert leader and makes decisions, then they can solve crises.",
                "If Abram is an emergency responder, then being a quick thinker and being an expert leader cannot be equivalent for him.",
                "Either Abram is not a quick thinker, or he stays calm and is brave.",
                "Abram earns recognition.",
                "Abram does not put others first.",
                "Abram is not an expert leader.",
                "Abram makes decisions.",
                "Abram does not solve crises.",
                "For any person, seeking fame if and only if they earn recognition.",
                "Abram is brave.",
                "Either Abram is not brave, or he does not save lives.",
                "Anyone who does not take action makes decisions.",
                "Anyone who is not reliable does not think critically.",
                "For any person, either they seek fame or put others first, but not both.",
                "Either Abram is not a quick thinker, or he stays calm."
            ],
            "edits_made": {
                "removed_facts": [],
                "removed_rules": [
                    {
                        "fol": "\u00acp_4(Abram) \u2228 p_5(Abram)",
                        "nl": "Either Abram is not brave, or he saves lives."
                    }
                ],
                "added_facts": [],
                "added_rules": [
                    {
                        "fol": "\u00acp_4(Abram) \u2228 \u00acp_5(Abram)",
                        "nl": "Either Abram is not brave, or he does not save lives."
                    }
                ]
            },
            "conclusion": "Abram saves lives.",
            "conclusion_fol": "p_5(Abram)",
            "prover9_input": {
                "formulas(assumptions)": [
                    "\u00acp_3(Abram)",
                    "\u00acp_2(Abram)",
                    "p_1(Abram)",
                    "p_0(Abram)",
                    "all x (\u00acp_11(x) | p_3(x))",
                    "all x (\u00acp_13(x) | p_3(x))",
                    "all x (p_10(x) | p_2(x))",
                    "all x \u00ac(p_1(x) <-> p_12(x))",
                    "all x \u00ac(p_6(x) <-> p_12(x))",
                    "all x ((p_9(x) & p_10(x)) -> p_11(x))",
                    "p_0(Abram) -> -(p_7(Abram) <-> p_9(Abram))",
                    "\u00acp_7(Abram) | (p_8(Abram) & p_4(Abram))",
                    "p_6(Abram)",
                    "\u00acp_12(Abram)",
                    "\u00acp_9(Abram)",
                    "p_10(Abram)",
                    "\u00acp_11(Abram)",
                    "all x (p_1(x) <-> p_6(x))",
                    "p_4(Abram)",
                    "\u00acp_4(Abram) | \u00acp_5(Abram)",
                    "all x (\u00acp_2(x) -> p_10(x))",
                    "all x (\u00acp_3(x) -> \u00acp_13(x))",
                    "all x ((p_1(x) | p_12(x)) & (\u00acp_1(x) | \u00acp_12(x)))",
                    "\u00acp_7(Abram) | p_8(Abram)"
                ],
                "formulas(goals)": [
                    "\u00acp_5(Abram)"
                ]
            },
            "answer": "False"
        }
    ]
}