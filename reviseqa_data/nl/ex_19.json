{
    "original_context": [
        "Kevin does not make textiles.",
        "Kevin creates patterns.",
        "Kevin is creative.",
        "Kevin does not take risks.",
        "Kevin is not successful.",
        "Kevin does not prioritize comfort.",
        "Kevin has good taste in fashion.",
        "If Kevin either makes textiles or creates patterns (but not both), then he designs clothing.",
        "If Kevin is creative, then he is either innovative or a risk-taker, but not both.",
        "If Kevin sets trends and is innovative, then he is successful.",
        "Kevin either follows trends or sets trends, but not both.",
        "Every person who designs clothing either prioritizes comfort or values quality (or both).",
        "If Kevin values quality, then he follows trends and buys KevWear.",
        "Kevin either dresses well or has good taste in fashion, but not both.",
        "Every person either dresses well or wears clothes regularly.",
        "If Kevin buys KevWear and wears it regularly, then he looks stylish."
    ],
    "original_context_fol": [
        "\u00acp_5(Kevin)",
        "p_6(Kevin)",
        "p_3(Kevin)",
        "\u00acp_4(Kevin)",
        "\u00acp_2(Kevin)",
        "\u00acp_1(Kevin)",
        "p_0(Kevin)",
        "(p_5(Kevin) \u2295 p_6(Kevin)) \u2192 p_13(Kevin)",
        "p_3(Kevin) \u2192 (p_15(Kevin) \u2295 p_4(Kevin))",
        "(p_14(Kevin) \u2227 p_15(Kevin)) \u2192 p_2(Kevin)",
        "p_12(Kevin) \u2295 p_14(Kevin)",
        "\u2200x (p_13(x) \u2192 (p_1(x) \u2228 p_11(x)))",
        "p_11(Kevin) \u2192 (p_12(Kevin) \u2227 p_7(Kevin))",
        "p_10(Kevin) \u2295 p_0(Kevin)",
        "\u2200x (p_10(x) \u2228 p_8(x))",
        "(p_7(Kevin) \u2227 p_8(Kevin)) \u2192 p_9(Kevin)"
    ],
    "conclusion": "Kevin does not look stylish.",
    "conclusion_fol": "\u00acp_9(Kevin)",
    "answer": "False",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 5,
                    "subject": "Kevin",
                    "text": "Kevin does not make textiles.",
                    "fol": "\u00acp_5(Kevin)",
                    "str_fol": "\u00acmakes_textiles(Kevin)",
                    "negation": true
                },
                {
                    "id": 6,
                    "subject": "Kevin",
                    "text": "Kevin creates patterns.",
                    "fol": "p_6(Kevin)",
                    "str_fol": "creates_patterns(Kevin)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 8,
                    "text": "If Kevin either makes textiles or creates patterns (but not both), then he designs clothing.",
                    "fol": "(p_5(Kevin) \u2295 p_6(Kevin)) \u2192 p_13(Kevin)",
                    "str_fol": "(makes_textiles(Kevin) \u2295 creates_patterns(Kevin)) \u2192 designs_clothing(Kevin)"
                }
            ],
            "conclusion": {
                "id": 7,
                "subject": "Kevin",
                "text": "Kevin designs clothing.",
                "fol": "p_13(Kevin)",
                "str_fol": "designs_clothing(Kevin)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 3,
                    "subject": "Kevin",
                    "text": "Kevin is creative.",
                    "fol": "p_3(Kevin)",
                    "str_fol": "is_creative(Kevin)",
                    "negation": false
                },
                {
                    "id": 4,
                    "subject": "Kevin",
                    "text": "Kevin does not take risks.",
                    "fol": "\u00acp_4(Kevin)",
                    "str_fol": "\u00actakes_risks(Kevin)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 7,
                    "text": "If Kevin is creative, then he is either innovative or a risk-taker, but not both.",
                    "fol": "p_3(Kevin) \u2192 (p_15(Kevin) \u2295 p_4(Kevin))",
                    "str_fol": "is_creative(Kevin) \u2192 (is_innovative(Kevin) \u2295 takes_risks(Kevin))"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Kevin",
                "text": "Kevin is innovative.",
                "fol": "p_15(Kevin)",
                "str_fol": "is_innovative(Kevin)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 8,
                    "subject": "Kevin",
                    "text": "Kevin is innovative.",
                    "fol": "p_15(Kevin)",
                    "str_fol": "is_innovative(Kevin)",
                    "negation": false
                },
                {
                    "id": 2,
                    "subject": "Kevin",
                    "text": "Kevin is not successful.",
                    "fol": "\u00acp_2(Kevin)",
                    "str_fol": "\u00acis_successful(Kevin)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 6,
                    "text": "If Kevin sets trends and is innovative, then he is successful.",
                    "fol": "(p_14(Kevin) \u2227 p_15(Kevin)) \u2192 p_2(Kevin)",
                    "str_fol": "(sets_trends(Kevin) \u2227 is_innovative(Kevin)) \u2192 is_successful(Kevin)"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Kevin",
                "text": "Kevin does not set trends.",
                "fol": "\u00acp_14(Kevin)",
                "str_fol": "\u00acsets_trends(Kevin)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 9,
                    "subject": "Kevin",
                    "text": "Kevin does not set trends.",
                    "fol": "\u00acp_14(Kevin)",
                    "str_fol": "\u00acsets_trends(Kevin)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "Kevin either follows trends or sets trends, but not both.",
                    "fol": "p_12(Kevin) \u2295 p_14(Kevin)",
                    "str_fol": "follows_trends(Kevin) \u2295 sets_trends(Kevin)"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Kevin",
                "text": "Kevin follows trends.",
                "fol": "p_12(Kevin)",
                "str_fol": "follows_trends(Kevin)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 7,
                    "subject": "Kevin",
                    "text": "Kevin designs clothing.",
                    "fol": "p_13(Kevin)",
                    "str_fol": "designs_clothing(Kevin)",
                    "negation": false
                },
                {
                    "id": 1,
                    "subject": "Kevin",
                    "text": "Kevin does not prioritize comfort.",
                    "fol": "\u00acp_1(Kevin)",
                    "str_fol": "\u00acprioritizes_comfort(Kevin)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "Every person who designs clothing either prioritizes comfort or values quality (or both).",
                    "fol": "\u2200x (p_13(x) \u2192 (p_1(x) \u2228 p_11(x)))",
                    "str_fol": "\u2200x (designs_clothing(x) \u2192 (prioritizes_comfort(x) \u2228 values_quality(x)))"
                }
            ],
            "conclusion": {
                "id": 11,
                "subject": "Kevin",
                "text": "Kevin values quality.",
                "fol": "p_11(Kevin)",
                "str_fol": "values_quality(Kevin)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 11,
                    "subject": "Kevin",
                    "text": "Kevin values quality.",
                    "fol": "p_11(Kevin)",
                    "str_fol": "values_quality(Kevin)",
                    "negation": false
                },
                {
                    "id": 10,
                    "subject": "Kevin",
                    "text": "Kevin follows trends.",
                    "fol": "p_12(Kevin)",
                    "str_fol": "follows_trends(Kevin)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "If Kevin values quality, then he follows trends and buys KevWear.",
                    "fol": "p_11(Kevin) \u2192 (p_12(Kevin) \u2227 p_7(Kevin))",
                    "str_fol": "values_quality(Kevin) \u2192 (follows_trends(Kevin) \u2227 buy_KevWear(Kevin))"
                }
            ],
            "conclusion": {
                "id": 12,
                "subject": "Kevin",
                "text": "Kevin buys KevWear.",
                "fol": "p_7(Kevin)",
                "str_fol": "buy_KevWear(Kevin)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 0,
                    "subject": "Kevin",
                    "text": "Kevin has good taste in fashion.",
                    "fol": "p_0(Kevin)",
                    "str_fol": "has_good_taste(Kevin)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "Kevin either dresses well or has good taste in fashion, but not both.",
                    "fol": "p_10(Kevin) \u2295 p_0(Kevin)",
                    "str_fol": "dresses_well(Kevin) \u2295 has_good_taste(Kevin)"
                }
            ],
            "conclusion": {
                "id": 13,
                "subject": "Kevin",
                "text": "Kevin does not dress well.",
                "fol": "\u00acp_10(Kevin)",
                "str_fol": "\u00acdresses_well(Kevin)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 13,
                    "subject": "Kevin",
                    "text": "Kevin does not dress well.",
                    "fol": "\u00acp_10(Kevin)",
                    "str_fol": "\u00acdresses_well(Kevin)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "Every person either dresses well or wears clothes regularly.",
                    "fol": "\u2200x (p_10(x) \u2228 p_8(x))",
                    "str_fol": "\u2200x (dresses_well(x) \u2228 wear_regularly(x))"
                }
            ],
            "conclusion": {
                "id": 14,
                "subject": "Kevin",
                "text": "Kevin wears it regularly.",
                "fol": "p_8(Kevin)",
                "str_fol": "wear_regularly(Kevin)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 12,
                    "subject": "Kevin",
                    "text": "Kevin buys KevWear.",
                    "fol": "p_7(Kevin)",
                    "str_fol": "buy_KevWear(Kevin)",
                    "negation": false
                },
                {
                    "id": 14,
                    "subject": "Kevin",
                    "text": "Kevin wears it regularly.",
                    "fol": "p_8(Kevin)",
                    "str_fol": "wear_regularly(Kevin)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "If Kevin buys KevWear and wears it regularly, then he looks stylish.",
                    "fol": "(p_7(Kevin) \u2227 p_8(Kevin)) \u2192 p_9(Kevin)",
                    "str_fol": "(buy_KevWear(Kevin) \u2227 wear_regularly(Kevin)) \u2192 look_stylish(Kevin)"
                }
            ],
            "conclusion": {
                "id": 15,
                "subject": "Kevin",
                "text": "Kevin does not look stylish.",
                "fol": "\u00acp_9(Kevin)",
                "str_fol": "\u00aclook_stylish(Kevin)",
                "negation": true
            }
        }
    ],
    "edits": [
        {
            "edit_number": 1,
            "modification_type": "INVARIANT",
            "edited_context_fol": [
                "\u00acp_5(Kevin)",
                "p_6(Kevin)",
                "p_3(Kevin)",
                "\u00acp_4(Kevin)",
                "\u00acp_2(Kevin)",
                "\u00acp_1(Kevin)",
                "p_0(Kevin)",
                "(p_5(Kevin) \u2295 p_6(Kevin)) \u2192 p_13(Kevin)",
                "p_3(Kevin) \u2192 (p_15(Kevin) \u2295 p_4(Kevin))",
                "(p_14(Kevin) \u2227 p_15(Kevin)) \u2192 p_2(Kevin)",
                "p_12(Kevin) \u2295 p_14(Kevin)",
                "\u2200x (p_13(x) \u2192 (p_1(x) \u2228 p_11(x)))",
                "p_10(Kevin) \u2295 p_0(Kevin)",
                "\u2200x (p_10(x) \u2228 p_8(x))",
                "(p_7(Kevin) \u2227 p_8(Kevin)) \u2192 p_9(Kevin)",
                "p_13(Kevin)",
                "p_11(Kevin)",
                "p_11(Kevin) \u2192 p_12(Kevin)",
                "p_11(Kevin) \u2192 p_7(Kevin)"
            ],
            "edited_natural_language_context": [
                "Kevin does not make textiles.",
                "Kevin creates patterns.",
                "Kevin is creative.",
                "Kevin does not take risks.",
                "Kevin is not successful.",
                "Kevin does not prioritize comfort.",
                "Kevin has good taste in fashion.",
                "If Kevin either makes textiles or creates patterns (but not both), then he designs clothing.",
                "If Kevin is creative, then he is either innovative or a risk-taker, but not both.",
                "If Kevin sets trends and is innovative, then he is successful.",
                "Kevin either follows trends or sets trends, but not both.",
                "Every person who designs clothing either prioritizes comfort or values quality (or both).",
                "Kevin either dresses well or has good taste in fashion, but not both.",
                "Every person either dresses well or wears clothes regularly.",
                "If Kevin buys KevWear and wears it regularly, then he looks stylish.",
                "Kevin designs clothing.",
                "Kevin values quality.",
                "If Kevin values quality, then he follows trends.",
                "If Kevin values quality, then he buys KevWear."
            ],
            "edits_made": {
                "removed_facts": [],
                "removed_rules": [
                    {
                        "fol": "p_11(Kevin) \u2192 (p_12(Kevin) \u2227 p_7(Kevin))",
                        "nl": "If Kevin values quality, then he follows trends and buys KevWear."
                    }
                ],
                "added_facts": [
                    {
                        "fol": "p_13(Kevin)",
                        "nl": "Kevin designs clothing."
                    },
                    {
                        "fol": "p_11(Kevin)",
                        "nl": "Kevin values quality."
                    }
                ],
                "added_rules": [
                    {
                        "fol": "p_11(Kevin) \u2192 p_12(Kevin)",
                        "nl": "If Kevin values quality, then he follows trends."
                    },
                    {
                        "fol": "p_11(Kevin) \u2192 p_7(Kevin)",
                        "nl": "If Kevin values quality, then he buys KevWear."
                    }
                ]
            },
            "conclusion": "Kevin does not look stylish.",
            "conclusion_fol": "\u00acp_9(Kevin)",
            "prover9_input": {
                "formulas(assumptions)": [
                    "-p_5(Kevin)",
                    "p_6(Kevin)",
                    "p_3(Kevin)",
                    "-p_4(Kevin)",
                    "-p_2(Kevin)",
                    "-p_1(Kevin)",
                    "p_0(Kevin)",
                    "(-(p_5(Kevin) <-> p_6(Kevin))) -> p_13(Kevin)",
                    "p_3(Kevin) -> (-(p_15(Kevin) <-> p_4(Kevin)))",
                    "(p_14(Kevin) & p_15(Kevin)) -> p_2(Kevin)",
                    "-(p_12(Kevin) <-> p_14(Kevin))",
                    "all x (p_13(x) -> (p_1(x) | p_11(x)))",
                    "-(p_10(Kevin) <-> p_0(Kevin))",
                    "all x (p_10(x) | p_8(x))",
                    "(p_7(Kevin) & p_8(Kevin)) -> p_9(Kevin)",
                    "p_13(Kevin)",
                    "p_11(Kevin)",
                    "p_11(Kevin) -> p_12(Kevin)",
                    "p_11(Kevin) -> p_7(Kevin)"
                ],
                "formulas(goals)": [
                    "p_9(Kevin)"
                ]
            },
            "answer": "False"
        },
        {
            "edit_number": 2,
            "modification_type": "INVARIANT",
            "edited_context_fol": [
                "\u00acp_5(Kevin)",
                "p_6(Kevin)",
                "p_3(Kevin)",
                "\u00acp_4(Kevin)",
                "\u00acp_2(Kevin)",
                "\u00acp_1(Kevin)",
                "p_0(Kevin)",
                "(p_5(Kevin) \u2295 p_6(Kevin)) \u2192 p_13(Kevin)",
                "p_3(Kevin) \u2192 (p_15(Kevin) \u2295 p_4(Kevin))",
                "(p_14(Kevin) \u2227 p_15(Kevin)) \u2192 p_2(Kevin)",
                "p_12(Kevin) \u2295 p_14(Kevin)",
                "\u2200x (p_13(x) \u2192 (p_1(x) \u2228 p_11(x)))",
                "p_10(Kevin) \u2295 p_0(Kevin)",
                "\u2200x (\u00acp_10(x) \u2192 p_8(x))",
                "(p_7(Kevin) \u2227 p_8(Kevin)) \u2192 p_9(Kevin)",
                "\u00acp_9(Kevin) \u2192 \u00ac(p_7(Kevin) \u2227 p_8(Kevin))",
                "p_13(Kevin)",
                "p_11(Kevin)",
                "p_11(Kevin) \u2192 p_12(Kevin)",
                "p_11(Kevin) \u2192 p_7(Kevin)",
                "p_7(Kevin)",
                "p_8(Kevin)"
            ],
            "edited_natural_language_context": [
                "Kevin does not make textiles.",
                "Kevin creates patterns.",
                "Kevin is creative.",
                "Kevin does not take risks.",
                "Kevin is not successful.",
                "Kevin does not prioritize comfort.",
                "Kevin has good taste in fashion.",
                "If Kevin either makes textiles or creates patterns (but not both), then he designs clothing.",
                "If Kevin is creative, then he is either innovative or a risk-taker, but not both.",
                "If Kevin sets trends and is innovative, then he is successful.",
                "Kevin either follows trends or sets trends, but not both.",
                "Every person who designs clothing either prioritizes comfort or values quality (or both).",
                "Kevin either dresses well or has good taste in fashion, but not both.",
                "If a person does not dress well, then they wear clothes regularly.",
                "If Kevin buys KevWear and wears it regularly, then he looks stylish.",
                "If Kevin does not look stylish, then it's not the case that Kevin both buys KevWear and wears clothes regularly.",
                "Kevin designs clothing.",
                "Kevin values quality.",
                "If Kevin values quality, then he follows trends.",
                "If Kevin values quality, then he buys KevWear.",
                "Kevin buys KevWear.",
                "Kevin wears clothes regularly."
            ],
            "edits_made": {
                "removed_facts": [],
                "removed_rules": [
                    {
                        "fol": "\u2200x (p_10(x) \u2228 p_8(x))",
                        "nl": "Every person either dresses well or wears clothes regularly."
                    }
                ],
                "added_facts": [
                    {
                        "fol": "p_7(Kevin)",
                        "nl": "Kevin buys KevWear."
                    },
                    {
                        "fol": "p_8(Kevin)",
                        "nl": "Kevin wears clothes regularly."
                    }
                ],
                "added_rules": [
                    {
                        "fol": "\u2200x (\u00acp_10(x) \u2192 p_8(x))",
                        "nl": "If a person does not dress well, then they wear clothes regularly."
                    },
                    {
                        "fol": "\u00acp_9(Kevin) \u2192 \u00ac(p_7(Kevin) \u2227 p_8(Kevin))",
                        "nl": "If Kevin does not look stylish, then it's not the case that Kevin both buys KevWear and wears clothes regularly."
                    }
                ]
            },
            "conclusion": "Kevin does not look stylish.",
            "conclusion_fol": "\u00acp_9(Kevin)",
            "prover9_input": {
                "formulas(assumptions)": [
                    "-p_5(Kevin)",
                    "p_6(Kevin)",
                    "p_3(Kevin)",
                    "-p_4(Kevin)",
                    "-p_2(Kevin)",
                    "-p_1(Kevin)",
                    "p_0(Kevin)",
                    "(-(p_5(Kevin) <-> p_6(Kevin))) -> p_13(Kevin)",
                    "p_3(Kevin) -> (-(p_15(Kevin) <-> p_4(Kevin)))",
                    "(p_14(Kevin) & p_15(Kevin)) -> p_2(Kevin)",
                    "-(p_12(Kevin) <-> p_14(Kevin))",
                    "all x (p_13(x) -> (p_1(x) | p_11(x)))",
                    "-(p_10(Kevin) <-> p_0(Kevin))",
                    "all x (-p_10(x) -> p_8(x))",
                    "(p_7(Kevin) & p_8(Kevin)) -> p_9(Kevin)",
                    "-p_9(Kevin) -> -(p_7(Kevin) & p_8(Kevin))",
                    "p_13(Kevin)",
                    "p_11(Kevin)",
                    "p_11(Kevin) -> p_12(Kevin)",
                    "p_11(Kevin) -> p_7(Kevin)",
                    "p_7(Kevin)",
                    "p_8(Kevin)"
                ],
                "formulas(goals)": [
                    "p_9(Kevin)"
                ]
            },
            "answer": "False"
        },
        {
            "edit_number": 3,
            "modification_type": "FLIP",
            "edited_context_fol": [
                "\u00acp_5(Kevin)",
                "p_6(Kevin)",
                "p_3(Kevin)",
                "\u00acp_4(Kevin)",
                "\u00acp_2(Kevin)",
                "\u00acp_1(Kevin)",
                "p_0(Kevin)",
                "(p_5(Kevin) \u2295 p_6(Kevin)) \u2192 p_13(Kevin)",
                "p_3(Kevin) \u2192 (p_15(Kevin) \u2295 p_4(Kevin))",
                "(p_14(Kevin) \u2227 p_15(Kevin)) \u2192 p_2(Kevin)",
                "p_12(Kevin) \u2295 p_14(Kevin)",
                "\u2200x (p_13(x) \u2192 (p_1(x) \u2228 p_11(x)))",
                "p_10(Kevin) \u2295 p_0(Kevin)",
                "\u2200x (\u00acp_10(x) \u2192 p_8(x))",
                "(p_7(Kevin) \u2227 p_8(Kevin)) \u2192 p_9(Kevin)",
                "\u00acp_9(Kevin) \u2192 \u00ac(p_7(Kevin) \u2227 p_8(Kevin))",
                "p_13(Kevin)",
                "p_11(Kevin)",
                "p_11(Kevin) \u2192 p_12(Kevin)",
                "\u00acp_7(Kevin)",
                "p_8(Kevin)",
                "\u00acp_7(Kevin) \u2192 \u00acp_9(Kevin)"
            ],
            "edited_natural_language_context": [
                "Kevin does not make textiles.",
                "Kevin creates patterns.",
                "Kevin is creative.",
                "Kevin does not take risks.",
                "Kevin is not successful.",
                "Kevin does not prioritize comfort.",
                "Kevin has good taste in fashion.",
                "If Kevin either makes textiles or creates patterns (but not both), then he designs clothing.",
                "If Kevin is creative, then he is either innovative or a risk-taker, but not both.",
                "If Kevin sets trends and is innovative, then he is successful.",
                "Kevin either follows trends or sets trends, but not both.",
                "Every person who designs clothing either prioritizes comfort or values quality (or both).",
                "Kevin either dresses well or has good taste in fashion, but not both.",
                "If a person does not dress well, then they wear clothes regularly.",
                "If Kevin buys KevWear and wears it regularly, then he looks stylish.",
                "If Kevin does not look stylish, then it's not the case that Kevin both buys KevWear and wears clothes regularly.",
                "Kevin designs clothing.",
                "Kevin values quality.",
                "If Kevin values quality, then he follows trends.",
                "Kevin does not buy KevWear.",
                "Kevin wears clothes regularly.",
                "If Kevin does not buy KevWear, then he does not look stylish."
            ],
            "edits_made": {
                "removed_facts": [
                    {
                        "fol": "p_7(Kevin)",
                        "nl": "Kevin buys KevWear."
                    }
                ],
                "removed_rules": [
                    {
                        "fol": "p_11(Kevin) \u2192 p_7(Kevin)",
                        "nl": "If Kevin values quality, then he buys KevWear."
                    }
                ],
                "added_facts": [
                    {
                        "fol": "\u00acp_7(Kevin)",
                        "nl": "Kevin does not buy KevWear."
                    }
                ],
                "added_rules": [
                    {
                        "fol": "\u00acp_7(Kevin) \u2192 \u00acp_9(Kevin)",
                        "nl": "If Kevin does not buy KevWear, then he does not look stylish."
                    }
                ]
            },
            "conclusion": "Kevin does not look stylish.",
            "conclusion_fol": "\u00acp_9(Kevin)",
            "prover9_input": {
                "formulas(assumptions)": [
                    "-p_5(Kevin)",
                    "p_6(Kevin)",
                    "p_3(Kevin)",
                    "-p_4(Kevin)",
                    "-p_2(Kevin)",
                    "-p_1(Kevin)",
                    "p_0(Kevin)",
                    "(-(p_5(Kevin) <-> p_6(Kevin))) -> p_13(Kevin)",
                    "p_3(Kevin) -> (-(p_15(Kevin) <-> p_4(Kevin)))",
                    "(p_14(Kevin) & p_15(Kevin)) -> p_2(Kevin)",
                    "-(p_12(Kevin) <-> p_14(Kevin))",
                    "all x (p_13(x) -> (p_1(x) | p_11(x)))",
                    "-(p_10(Kevin) <-> p_0(Kevin))",
                    "all x (-p_10(x) -> p_8(x))",
                    "(p_7(Kevin) & p_8(Kevin)) -> p_9(Kevin)",
                    "-p_9(Kevin) -> -(p_7(Kevin) & p_8(Kevin))",
                    "p_13(Kevin)",
                    "p_11(Kevin)",
                    "p_11(Kevin) -> p_12(Kevin)",
                    "-p_7(Kevin)",
                    "p_8(Kevin)",
                    "-p_7(Kevin) -> -p_9(Kevin)"
                ],
                "formulas(goals)": [
                    "-p_9(Kevin)"
                ]
            },
            "answer": "True"
        },
        {
            "edit_number": 4,
            "modification_type": "FLIP",
            "edited_context_fol": [
                "\u00acp_5(Kevin)",
                "p_6(Kevin)",
                "p_3(Kevin)",
                "\u00acp_4(Kevin)",
                "\u00acp_2(Kevin)",
                "\u00acp_1(Kevin)",
                "p_0(Kevin)",
                "(p_5(Kevin) \u2295 p_6(Kevin)) \u2192 p_13(Kevin)",
                "p_3(Kevin) \u2192 (p_15(Kevin) \u2295 p_4(Kevin))",
                "(p_14(Kevin) \u2227 p_15(Kevin)) \u2192 p_2(Kevin)",
                "p_12(Kevin) \u2295 p_14(Kevin)",
                "\u2200x (p_13(x) \u2192 (p_1(x) \u2228 p_11(x)))",
                "p_10(Kevin) \u2295 p_0(Kevin)",
                "\u2200x (\u00acp_10(x) \u2192 p_8(x))",
                "(p_7(Kevin) \u2227 p_8(Kevin)) \u2192 p_9(Kevin)",
                "\u00acp_9(Kevin) \u2192 \u00ac(p_7(Kevin) \u2227 p_8(Kevin))",
                "p_13(Kevin)",
                "p_11(Kevin)",
                "p_11(Kevin) \u2192 p_12(Kevin)",
                "p_8(Kevin)",
                "\u00acp_7(Kevin) \u2192 \u00acp_9(Kevin)",
                "p_11(Kevin) \u2192 p_7(Kevin)"
            ],
            "edited_natural_language_context": [
                "Kevin does not make textiles.",
                "Kevin creates patterns.",
                "Kevin is creative.",
                "Kevin does not take risks.",
                "Kevin is not successful.",
                "Kevin does not prioritize comfort.",
                "Kevin has good taste in fashion.",
                "If Kevin either makes textiles or creates patterns (but not both), then he designs clothing.",
                "If Kevin is creative, then he is either innovative or a risk-taker, but not both.",
                "If Kevin sets trends and is innovative, then he is successful.",
                "Kevin either follows trends or sets trends, but not both.",
                "Every person who designs clothing either prioritizes comfort or values quality (or both).",
                "Kevin either dresses well or has good taste in fashion, but not both.",
                "If a person does not dress well, then they wear clothes regularly.",
                "If Kevin buys KevWear and wears it regularly, then he looks stylish.",
                "If Kevin does not look stylish, then it's not the case that Kevin both buys KevWear and wears clothes regularly.",
                "Kevin designs clothing.",
                "Kevin values quality.",
                "If Kevin values quality, then he follows trends.",
                "Kevin wears clothes regularly.",
                "If Kevin does not buy KevWear, then he does not look stylish.",
                "If Kevin values quality, then he buys KevWear."
            ],
            "edits_made": {
                "removed_facts": [
                    {
                        "fol": "\u00acp_7(Kevin)",
                        "nl": "Kevin does not buy KevWear."
                    }
                ],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    {
                        "fol": "p_11(Kevin) \u2192 p_7(Kevin)",
                        "nl": "If Kevin values quality, then he buys KevWear."
                    }
                ]
            },
            "conclusion": "Kevin does not look stylish.",
            "conclusion_fol": "\u00acp_9(Kevin)",
            "prover9_input": {
                "formulas(assumptions)": [
                    "-p_5(Kevin)",
                    "p_6(Kevin)",
                    "p_3(Kevin)",
                    "-p_4(Kevin)",
                    "-p_2(Kevin)",
                    "-p_1(Kevin)",
                    "p_0(Kevin)",
                    "(-(p_5(Kevin) <-> p_6(Kevin))) -> p_13(Kevin)",
                    "p_3(Kevin) -> (-(p_15(Kevin) <-> p_4(Kevin)))",
                    "(p_14(Kevin) & p_15(Kevin)) -> p_2(Kevin)",
                    "(-(p_12(Kevin) <-> p_14(Kevin)))",
                    "all x (p_13(x) -> (p_1(x) | p_11(x)))",
                    "(-(p_10(Kevin) <-> p_0(Kevin)))",
                    "all x (-p_10(x) -> p_8(x))",
                    "(p_7(Kevin) & p_8(Kevin)) -> p_9(Kevin)",
                    "-p_9(Kevin) -> -(p_7(Kevin) & p_8(Kevin))",
                    "p_13(Kevin)",
                    "p_11(Kevin)",
                    "p_11(Kevin) -> p_12(Kevin)",
                    "p_8(Kevin)",
                    "-p_7(Kevin) -> -p_9(Kevin)",
                    "p_11(Kevin) -> p_7(Kevin)"
                ],
                "formulas(goals)": [
                    "-(-p_9(Kevin))"
                ]
            },
            "answer": "False"
        },
        {
            "edit_number": 5,
            "modification_type": "INVARIANT",
            "edited_context_fol": [
                "\u00acp_5(Kevin)",
                "p_6(Kevin)",
                "p_3(Kevin)",
                "\u00acp_4(Kevin)",
                "\u00acp_2(Kevin)",
                "\u00acp_1(Kevin)",
                "p_0(Kevin)",
                "(p_5(Kevin) \u2295 p_6(Kevin)) \u2192 p_13(Kevin)",
                "p_3(Kevin) \u2192 (p_15(Kevin) \u2295 p_4(Kevin))",
                "(p_14(Kevin) \u2227 p_15(Kevin)) \u2192 p_2(Kevin)",
                "p_12(Kevin) \u2295 p_14(Kevin)",
                "\u2200x (p_13(x) \u2192 (p_1(x) \u2228 p_11(x)))",
                "p_10(Kevin) \u2295 p_0(Kevin)",
                "\u2200x (\u00acp_10(x) \u2192 p_8(x))",
                "(p_7(Kevin) \u2227 p_8(Kevin)) \u2192 p_9(Kevin)",
                "\u00acp_9(Kevin) \u2192 \u00ac(p_7(Kevin) \u2227 p_8(Kevin))",
                "p_13(Kevin)",
                "p_11(Kevin)",
                "p_11(Kevin) \u2192 p_12(Kevin)",
                "p_8(Kevin)",
                "\u00acp_7(Kevin) \u2192 \u00acp_9(Kevin)",
                "p_11(Kevin) \u2192 p_7(Kevin)",
                "p_12(Kevin) \u2192 \u00acp_14(Kevin)",
                "(p_3(Kevin) \u2227 \u00acp_4(Kevin)) \u2192 p_15(Kevin)"
            ],
            "edited_natural_language_context": [
                "Kevin does not make textiles.",
                "Kevin creates patterns.",
                "Kevin is creative.",
                "Kevin does not take risks.",
                "Kevin is not successful.",
                "Kevin does not prioritize comfort.",
                "Kevin has good taste in fashion.",
                "If Kevin either makes textiles or creates patterns (but not both), then he designs clothing.",
                "If Kevin is creative, then he is either innovative or a risk-taker, but not both.",
                "If Kevin sets trends and is innovative, then he is successful.",
                "Kevin either follows trends or sets trends, but not both.",
                "Every person who designs clothing either prioritizes comfort or values quality (or both).",
                "Kevin either dresses well or has good taste in fashion, but not both.",
                "If a person does not dress well, then they wear clothes regularly.",
                "If Kevin buys KevWear and wears it regularly, then he looks stylish.",
                "If Kevin does not look stylish, then it's not the case that Kevin both buys KevWear and wears clothes regularly.",
                "Kevin designs clothing.",
                "Kevin values quality.",
                "If Kevin values quality, then he follows trends.",
                "Kevin wears clothes regularly.",
                "If Kevin does not buy KevWear, then he does not look stylish.",
                "If Kevin values quality, then he buys KevWear.",
                "If Kevin follows trends, then he does not set trends.",
                "If Kevin is creative and does not take risks, then he is innovative."
            ],
            "edits_made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    {
                        "fol": "p_12(Kevin) \u2192 \u00acp_14(Kevin)",
                        "nl": "If Kevin follows trends, then he does not set trends."
                    },
                    {
                        "fol": "(p_3(Kevin) \u2227 \u00acp_4(Kevin)) \u2192 p_15(Kevin)",
                        "nl": "If Kevin is creative and does not take risks, then he is innovative."
                    }
                ]
            },
            "conclusion": "Kevin does not look stylish.",
            "conclusion_fol": "\u00acp_9(Kevin)",
            "prover9_input": {
                "formulas(assumptions)": [
                    "-p_5(Kevin)",
                    "p_6(Kevin)",
                    "p_3(Kevin)",
                    "-p_4(Kevin)",
                    "-p_2(Kevin)",
                    "-p_1(Kevin)",
                    "p_0(Kevin)",
                    "(-(p_5(Kevin) <-> p_6(Kevin))) -> p_13(Kevin)",
                    "p_3(Kevin) -> (-(p_15(Kevin) <-> p_4(Kevin)))",
                    "(p_14(Kevin) & p_15(Kevin)) -> p_2(Kevin)",
                    "-(p_12(Kevin) <-> p_14(Kevin))",
                    "all x (p_13(x) -> (p_1(x) | p_11(x)))",
                    "-(p_10(Kevin) <-> p_0(Kevin))",
                    "all x (-p_10(x) -> p_8(x))",
                    "(p_7(Kevin) & p_8(Kevin)) -> p_9(Kevin)",
                    "-p_9(Kevin) -> -(p_7(Kevin) & p_8(Kevin))",
                    "p_13(Kevin)",
                    "p_11(Kevin)",
                    "p_11(Kevin) -> p_12(Kevin)",
                    "p_8(Kevin)",
                    "-p_7(Kevin) -> -p_9(Kevin)",
                    "p_11(Kevin) -> p_7(Kevin)",
                    "p_12(Kevin) -> -p_14(Kevin)",
                    "(p_3(Kevin) & -p_4(Kevin)) -> p_15(Kevin)"
                ],
                "formulas(goals)": [
                    "--p_9(Kevin)"
                ]
            },
            "answer": "False"
        },
        {
            "edit_number": 6,
            "modification_type": "FLIP",
            "edited_context_fol": [
                "\u00acp_5(Kevin)",
                "p_6(Kevin)",
                "p_3(Kevin)",
                "\u00acp_4(Kevin)",
                "\u00acp_2(Kevin)",
                "\u00acp_1(Kevin)",
                "p_0(Kevin)",
                "(p_5(Kevin) \u2295 p_6(Kevin)) \u2192 p_13(Kevin)",
                "p_3(Kevin) \u2192 (p_15(Kevin) \u2295 p_4(Kevin))",
                "(p_14(Kevin) \u2227 p_15(Kevin)) \u2192 p_2(Kevin)",
                "p_12(Kevin) \u2295 p_14(Kevin)",
                "\u2200x (p_13(x) \u2192 (p_1(x) \u2228 p_11(x)))",
                "p_10(Kevin) \u2295 p_0(Kevin)",
                "\u2200x (\u00acp_10(x) \u2192 p_8(x))",
                "(p_7(Kevin) \u2227 p_8(Kevin)) \u2192 p_9(Kevin)",
                "\u00acp_9(Kevin) \u2192 \u00ac(p_7(Kevin) \u2227 p_8(Kevin))",
                "p_13(Kevin)",
                "p_11(Kevin)",
                "p_11(Kevin) \u2192 p_12(Kevin)",
                "p_8(Kevin)",
                "\u00acp_7(Kevin) \u2192 \u00acp_9(Kevin)",
                "p_12(Kevin) \u2192 \u00acp_14(Kevin)",
                "(p_3(Kevin) \u2227 \u00acp_4(Kevin)) \u2192 p_15(Kevin)",
                "p_12(Kevin) \u2192 \u00acp_7(Kevin)"
            ],
            "edited_natural_language_context": [
                "Kevin does not make textiles.",
                "Kevin creates patterns.",
                "Kevin is creative.",
                "Kevin does not take risks.",
                "Kevin is not successful.",
                "Kevin does not prioritize comfort.",
                "Kevin has good taste in fashion.",
                "If Kevin either makes textiles or creates patterns (but not both), then he designs clothing.",
                "If Kevin is creative, then he is either innovative or a risk-taker, but not both.",
                "If Kevin sets trends and is innovative, then he is successful.",
                "Kevin either follows trends or sets trends, but not both.",
                "Every person who designs clothing either prioritizes comfort or values quality (or both).",
                "Kevin either dresses well or has good taste in fashion, but not both.",
                "If a person does not dress well, then they wear clothes regularly.",
                "If Kevin buys KevWear and wears it regularly, then he looks stylish.",
                "If Kevin does not look stylish, then it's not the case that Kevin both buys KevWear and wears clothes regularly.",
                "Kevin designs clothing.",
                "Kevin values quality.",
                "If Kevin values quality, then he follows trends.",
                "Kevin wears clothes regularly.",
                "If Kevin does not buy KevWear, then he does not look stylish.",
                "If Kevin follows trends, then he does not set trends.",
                "If Kevin is creative and does not take risks, then he is innovative.",
                "If Kevin follows trends, then he does not buy KevWear."
            ],
            "edits_made": {
                "removed_facts": [],
                "removed_rules": [
                    {
                        "fol": "p_11(Kevin) \u2192 p_7(Kevin)",
                        "nl": "If Kevin values quality, then he buys KevWear."
                    }
                ],
                "added_facts": [],
                "added_rules": [
                    {
                        "fol": "p_12(Kevin) \u2192 \u00acp_7(Kevin)",
                        "nl": "If Kevin follows trends, then he does not buy KevWear."
                    }
                ]
            },
            "conclusion": "Kevin does not look stylish.",
            "conclusion_fol": "\u00acp_9(Kevin)",
            "prover9_input": {
                "formulas(assumptions)": [
                    "-p_5(Kevin)",
                    "p_6(Kevin)",
                    "p_3(Kevin)",
                    "-p_4(Kevin)",
                    "-p_2(Kevin)",
                    "-p_1(Kevin)",
                    "p_0(Kevin)",
                    "(-(p_5(Kevin) <-> p_6(Kevin))) -> p_13(Kevin)",
                    "p_3(Kevin) -> (-(p_15(Kevin) <-> p_4(Kevin)))",
                    "(p_14(Kevin) & p_15(Kevin)) -> p_2(Kevin)",
                    "-(p_12(Kevin) <-> p_14(Kevin))",
                    "all x (p_13(x) -> (p_1(x) | p_11(x)))",
                    "-(p_10(Kevin) <-> p_0(Kevin))",
                    "all x (-p_10(x) -> p_8(x))",
                    "(p_7(Kevin) & p_8(Kevin)) -> p_9(Kevin)",
                    "-p_9(Kevin) -> -(p_7(Kevin) & p_8(Kevin))",
                    "p_13(Kevin)",
                    "p_11(Kevin)",
                    "p_11(Kevin) -> p_12(Kevin)",
                    "p_8(Kevin)",
                    "-p_7(Kevin) -> -p_9(Kevin)",
                    "p_12(Kevin) -> -p_14(Kevin)",
                    "(p_3(Kevin) & -p_4(Kevin)) -> p_15(Kevin)",
                    "p_12(Kevin) -> -p_7(Kevin)"
                ],
                "formulas(goals)": [
                    "-p_9(Kevin)"
                ]
            },
            "answer": "True"
        },
        {
            "edit_number": 7,
            "modification_type": "FLIP",
            "edited_context_fol": [
                "\u00acp_5(Kevin)",
                "p_6(Kevin)",
                "p_3(Kevin)",
                "\u00acp_4(Kevin)",
                "\u00acp_2(Kevin)",
                "\u00acp_1(Kevin)",
                "p_0(Kevin)",
                "(p_5(Kevin) \u2295 p_6(Kevin)) \u2192 p_13(Kevin)",
                "p_3(Kevin) \u2192 (p_15(Kevin) \u2295 p_4(Kevin))",
                "(p_14(Kevin) \u2227 p_15(Kevin)) \u2192 p_2(Kevin)",
                "p_12(Kevin) \u2295 p_14(Kevin)",
                "\u2200x (p_13(x) \u2192 (p_1(x) \u2228 p_11(x)))",
                "p_10(Kevin) \u2295 p_0(Kevin)",
                "\u2200x (\u00acp_10(x) \u2192 p_8(x))",
                "(p_7(Kevin) \u2227 p_8(Kevin)) \u2192 p_9(Kevin)",
                "\u00acp_9(Kevin) \u2192 \u00ac(p_7(Kevin) \u2227 p_8(Kevin))",
                "p_13(Kevin)",
                "p_11(Kevin)",
                "p_11(Kevin) \u2192 p_12(Kevin)",
                "p_8(Kevin)",
                "\u00acp_7(Kevin) \u2192 \u00acp_9(Kevin)",
                "(p_3(Kevin) \u2227 \u00acp_4(Kevin)) \u2192 p_15(Kevin)",
                "p_12(Kevin) \u2192 \u00acp_14(Kevin)",
                "p_7(Kevin)"
            ],
            "edited_natural_language_context": [
                "Kevin does not make textiles.",
                "Kevin creates patterns.",
                "Kevin is creative.",
                "Kevin does not take risks.",
                "Kevin is not successful.",
                "Kevin does not prioritize comfort.",
                "Kevin has good taste in fashion.",
                "If Kevin either makes textiles or creates patterns (but not both), then he designs clothing.",
                "If Kevin is creative, then he is either innovative or a risk-taker, but not both.",
                "If Kevin sets trends and is innovative, then he is successful.",
                "Kevin either follows trends or sets trends, but not both.",
                "Every person who designs clothing either prioritizes comfort or values quality (or both).",
                "Kevin either dresses well or has good taste in fashion, but not both.",
                "If a person does not dress well, then they wear clothes regularly.",
                "If Kevin buys KevWear and wears it regularly, then he looks stylish.",
                "If Kevin does not look stylish, then it's not the case that Kevin both buys KevWear and wears clothes regularly.",
                "Kevin designs clothing.",
                "Kevin values quality.",
                "If Kevin values quality, then he follows trends.",
                "Kevin wears clothes regularly.",
                "If Kevin does not buy KevWear, then he does not look stylish.",
                "If Kevin is creative and does not take risks, then he is innovative.",
                "If Kevin follows trends, then he does not set trends.",
                "Kevin buys KevWear."
            ],
            "edits_made": {
                "removed_facts": [],
                "removed_rules": [
                    {
                        "fol": "p_12(Kevin) \u2192 \u00acp_7(Kevin)",
                        "nl": "If Kevin follows trends, then he does not buy KevWear."
                    }
                ],
                "added_facts": [
                    {
                        "fol": "p_7(Kevin)",
                        "nl": "Kevin buys KevWear."
                    }
                ],
                "added_rules": []
            },
            "conclusion": "Kevin does not look stylish.",
            "conclusion_fol": "\u00acp_9(Kevin)",
            "prover9_input": {
                "formulas(assumptions)": [
                    "\u00acp_5(Kevin)",
                    "p_6(Kevin)",
                    "p_3(Kevin)",
                    "\u00acp_4(Kevin)",
                    "\u00acp_2(Kevin)",
                    "\u00acp_1(Kevin)",
                    "p_0(Kevin)",
                    "(-(p_5(Kevin) <-> p_6(Kevin))) -> p_13(Kevin)",
                    "p_3(Kevin) -> (-(p_15(Kevin) <-> p_4(Kevin)))",
                    "(p_14(Kevin) & p_15(Kevin)) -> p_2(Kevin)",
                    "(-(p_12(Kevin) <-> p_14(Kevin)))",
                    "all x (p_13(x) -> (p_1(x) | p_11(x)))",
                    "(-(p_10(Kevin) <-> p_0(Kevin)))",
                    "all x (-p_10(x) -> p_8(x))",
                    "(p_7(Kevin) & p_8(Kevin)) -> p_9(Kevin)",
                    "-p_9(Kevin) -> -(p_7(Kevin) & p_8(Kevin))",
                    "p_13(Kevin)",
                    "p_11(Kevin)",
                    "p_11(Kevin) -> p_12(Kevin)",
                    "p_8(Kevin)",
                    "-p_7(Kevin) -> -p_9(Kevin)",
                    "(p_3(Kevin) & -p_4(Kevin)) -> p_15(Kevin)",
                    "p_12(Kevin) -> -p_14(Kevin)",
                    "p_7(Kevin)"
                ],
                "formulas(goals)": [
                    "-(-p_9(Kevin))"
                ]
            },
            "answer": "False"
        }
    ]
}