{
    "original_context": [
        "Keilani does not recycle waste.",
        "Keilani does not collect honey.",
        "Keilani does not love nature.",
        "Keilani conserves water.",
        "Keilani owns a farm.",
        "Keilani is either an environmentalist or recycles waste.",
        "If Keilani either keeps bees or collects honey (but not both), then she loves nature.",
        "Either Keilani keeps bees or tends an orchard, but she does not do both.",
        "If Keilani is an environmentalist, then she either tends an orchard or raises animals, but not both.",
        "A person either has a garden or raises animals, but not necessarily both.",
        "If Keilani has a garden, then she either lives sustainably or conserves water, but not both.",
        "For Keilani, either she owns a farm or is self-sufficient, but not necessarily both.",
        "For all humans, if someone lives off the land, then they are either self-sufficient or live sustainably (or both)."
    ],
    "original_context_fol": [
        "\u00acp_4(Keilani)",
        "\u00acp_2(Keilani)",
        "\u00acp_3(Keilani)",
        "p_0(Keilani)",
        "p_1(Keilani)",
        "p_10(Keilani) \u2228 p_4(Keilani)",
        "(p_12(Keilani) \u2295 p_2(Keilani)) \u2192 p_3(Keilani)",
        "p_12(Keilani) \u2295 p_11(Keilani)",
        "p_10(Keilani) \u2192 (p_11(Keilani) \u2295 p_9(Keilani))",
        "\u2200x (p_8(x) \u2295 p_9(x))",
        "p_8(Keilani) \u2192 (p_7(Keilani) \u2295 p_0(Keilani))",
        "p_1(Keilani) \u2295 p_6(Keilani)",
        "\u2200x (p_5(x) \u2192 (p_6(x) \u2228 p_7(x)))"
    ],
    "conclusion": "Keilani lives off the land.",
    "conclusion_fol": "p_5(Keilani)",
    "answer": "False",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 4,
                    "subject": "Keilani",
                    "text": "Keilani does not recycle waste.",
                    "fol": "\u00acp_4(Keilani)",
                    "str_fol": "\u00acrecycles_waste(Keilani)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 7,
                    "text": "Keilani is either an environmentalist or recycles waste.",
                    "fol": "p_10(Keilani) \u2228 p_4(Keilani)",
                    "str_fol": "is_environmentalist(Keilani) \u2228 recycles_waste(Keilani)"
                }
            ],
            "conclusion": {
                "id": 5,
                "subject": "Keilani",
                "text": "Keilani is an environmentalist.",
                "fol": "p_10(Keilani)",
                "str_fol": "is_environmentalist(Keilani)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 2,
                    "subject": "Keilani",
                    "text": "Keilani does not collect honey.",
                    "fol": "\u00acp_2(Keilani)",
                    "str_fol": "\u00accollects_honey(Keilani)",
                    "negation": true
                },
                {
                    "id": 3,
                    "subject": "Keilani",
                    "text": "Keilani does not love nature.",
                    "fol": "\u00acp_3(Keilani)",
                    "str_fol": "\u00acloves_nature(Keilani)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 6,
                    "text": "If Keilani either keeps bees or collects honey (but not both), then she loves nature.",
                    "fol": "(p_12(Keilani) \u2295 p_2(Keilani)) \u2192 p_3(Keilani)",
                    "str_fol": "(keeps_bees(Keilani) \u2295 collects_honey(Keilani)) \u2192 loves_nature(Keilani)"
                }
            ],
            "conclusion": {
                "id": 6,
                "subject": "Keilani",
                "text": "Keilani does not keep bees.",
                "fol": "\u00acp_12(Keilani)",
                "str_fol": "\u00ackeeps_bees(Keilani)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 6,
                    "subject": "Keilani",
                    "text": "Keilani does not keep bees.",
                    "fol": "\u00acp_12(Keilani)",
                    "str_fol": "\u00ackeeps_bees(Keilani)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "Either Keilani keeps bees or tends an orchard, but she does not do both.",
                    "fol": "p_12(Keilani) \u2295 p_11(Keilani)",
                    "str_fol": "keeps_bees(Keilani) \u2295 tends_orchard(Keilani)"
                }
            ],
            "conclusion": {
                "id": 7,
                "subject": "Keilani",
                "text": "Keilani tends an orchard.",
                "fol": "p_11(Keilani)",
                "str_fol": "tends_orchard(Keilani)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 5,
                    "subject": "Keilani",
                    "text": "Keilani is an environmentalist.",
                    "fol": "p_10(Keilani)",
                    "str_fol": "is_environmentalist(Keilani)",
                    "negation": false
                },
                {
                    "id": 7,
                    "subject": "Keilani",
                    "text": "Keilani tends an orchard.",
                    "fol": "p_11(Keilani)",
                    "str_fol": "tends_orchard(Keilani)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "If Keilani is an environmentalist, then she either tends an orchard or raises animals, but not both.",
                    "fol": "p_10(Keilani) \u2192 (p_11(Keilani) \u2295 p_9(Keilani))",
                    "str_fol": "is_environmentalist(Keilani) \u2192 (tends_orchard(Keilani) \u2295 raises_animals(Keilani))"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Keilani",
                "text": "Keilani does not raise animals.",
                "fol": "\u00acp_9(Keilani)",
                "str_fol": "\u00acraises_animals(Keilani)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 8,
                    "subject": "Keilani",
                    "text": "Keilani does not raise animals.",
                    "fol": "\u00acp_9(Keilani)",
                    "str_fol": "\u00acraises_animals(Keilani)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "A person either has a garden or raises animals, but not necessarily both.",
                    "fol": "\u2200x (p_8(x) \u2295 p_9(x))",
                    "str_fol": "\u2200x (has_garden(x) \u2295 raises_animals(x))"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Keilani",
                "text": "Keilani has a garden.",
                "fol": "p_8(Keilani)",
                "str_fol": "has_garden(Keilani)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 9,
                    "subject": "Keilani",
                    "text": "Keilani has a garden.",
                    "fol": "p_8(Keilani)",
                    "str_fol": "has_garden(Keilani)",
                    "negation": false
                },
                {
                    "id": 0,
                    "subject": "Keilani",
                    "text": "Keilani conserves water.",
                    "fol": "p_0(Keilani)",
                    "str_fol": "conserves_water(Keilani)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "If Keilani has a garden, then she either lives sustainably or conserves water, but not both.",
                    "fol": "p_8(Keilani) \u2192 (p_7(Keilani) \u2295 p_0(Keilani))",
                    "str_fol": "has_garden(Keilani) \u2192 (lives_sustainably(Keilani) \u2295 conserves_water(Keilani))"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Keilani",
                "text": "Keilani does not live sustainably.",
                "fol": "\u00acp_7(Keilani)",
                "str_fol": "\u00aclives_sustainably(Keilani)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 1,
                    "subject": "Keilani",
                    "text": "Keilani owns a farm.",
                    "fol": "p_1(Keilani)",
                    "str_fol": "owns_farm(Keilani)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "For Keilani, either she owns a farm or is self-sufficient, but not necessarily both.",
                    "fol": "p_1(Keilani) \u2295 p_6(Keilani)",
                    "str_fol": "owns_farm(Keilani) \u2295 is_self_sufficient(Keilani)"
                }
            ],
            "conclusion": {
                "id": 11,
                "subject": "Keilani",
                "text": "Keilani is not self-sufficient.",
                "fol": "\u00acp_6(Keilani)",
                "str_fol": "\u00acis_self_sufficient(Keilani)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 11,
                    "subject": "Keilani",
                    "text": "Keilani is not self-sufficient.",
                    "fol": "\u00acp_6(Keilani)",
                    "str_fol": "\u00acis_self_sufficient(Keilani)",
                    "negation": true
                },
                {
                    "id": 10,
                    "subject": "Keilani",
                    "text": "Keilani does not live sustainably.",
                    "fol": "\u00acp_7(Keilani)",
                    "str_fol": "\u00aclives_sustainably(Keilani)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "For all humans, if someone lives off the land, then they are either self-sufficient or live sustainably (or both).",
                    "fol": "\u2200x (p_5(x) \u2192 (p_6(x) \u2228 p_7(x)))",
                    "str_fol": "\u2200x (lives_off_the_land(x) \u2192 (is_self_sufficient(x) \u2228 lives_sustainably(x)))"
                }
            ],
            "conclusion": {
                "id": 12,
                "subject": "Keilani",
                "text": "Keilani lives off the land.",
                "fol": "p_5(Keilani)",
                "str_fol": "lives_off_the_land(Keilani)",
                "negation": false
            }
        }
    ],
    "edits": [
        {
            "edit_number": 1,
            "modification_type": "FLIP",
            "edited_context_fol": [
                "\u00acp_4(Keilani)",
                "\u00acp_2(Keilani)",
                "p_0(Keilani)",
                "p_1(Keilani)",
                "p_10(Keilani) \u2228 p_4(Keilani)",
                "(p_12(Keilani) \u2295 p_2(Keilani)) \u2192 p_3(Keilani)",
                "p_12(Keilani) \u2295 p_11(Keilani)",
                "p_10(Keilani) \u2192 (p_11(Keilani) \u2295 p_9(Keilani))",
                "\u2200x (p_8(x) \u2295 p_9(x))",
                "p_8(Keilani) \u2192 (p_7(Keilani) \u2295 p_0(Keilani))",
                "p_1(Keilani) \u2295 p_6(Keilani)",
                "\u2200x (p_5(x) \u2192 (p_6(x) \u2228 p_7(x)))",
                "p_7(Keilani)",
                "(p_6(Keilani) \u2228 p_7(Keilani)) \u2192 p_5(Keilani)"
            ],
            "edited_natural_language_context": [
                "Keilani does not recycle waste.",
                "Keilani does not collect honey.",
                "Keilani conserves water.",
                "Keilani owns a farm.",
                "Keilani is either an environmentalist or recycles waste.",
                "If Keilani either keeps bees or collects honey (but not both), then she loves nature.",
                "Either Keilani keeps bees or tends an orchard, but she does not do both.",
                "If Keilani is an environmentalist, then she either tends an orchard or raises animals, but not both.",
                "A person either has a garden or raises animals, but not necessarily both.",
                "If Keilani has a garden, then she either lives sustainably or conserves water, but not both.",
                "For Keilani, either she owns a farm or is self-sufficient, but not necessarily both.",
                "For all humans, if someone lives off the land, then they are either self-sufficient or live sustainably (or both).",
                "Keilani lives sustainably.",
                "If Keilani is either self-sufficient or lives sustainably (or both), then she lives off the land."
            ],
            "edits_made": {
                "removed_facts": [
                    {
                        "fol": "\u00acp_3(Keilani)",
                        "nl": "Keilani does not love nature."
                    }
                ],
                "removed_rules": [],
                "added_facts": [
                    {
                        "fol": "p_7(Keilani)",
                        "nl": "Keilani lives sustainably."
                    }
                ],
                "added_rules": [
                    {
                        "fol": "(p_6(Keilani) \u2228 p_7(Keilani)) \u2192 p_5(Keilani)",
                        "nl": "If Keilani is either self-sufficient or lives sustainably (or both), then she lives off the land."
                    }
                ]
            },
            "conclusion": "Keilani lives off the land.",
            "conclusion_fol": "p_5(Keilani)",
            "prover9_input": {
                "formulas(assumptions)": [
                    "-p_4(Keilani)",
                    "-p_2(Keilani)",
                    "p_0(Keilani)",
                    "p_1(Keilani)",
                    "p_10(Keilani) | p_4(Keilani)",
                    "(-(p_12(Keilani) <-> p_2(Keilani))) -> p_3(Keilani)",
                    "-(p_12(Keilani) <-> p_11(Keilani))",
                    "p_10(Keilani) -> (-(p_11(Keilani) <-> p_9(Keilani)))",
                    "all x (-(p_8(x) <-> p_9(x)))",
                    "p_8(Keilani) -> (-(p_7(Keilani) <-> p_0(Keilani)))",
                    "-(p_1(Keilani) <-> p_6(Keilani))",
                    "all x (p_5(x) -> (p_6(x) | p_7(x)))",
                    "p_7(Keilani)",
                    "(p_6(Keilani) | p_7(Keilani)) -> p_5(Keilani)"
                ],
                "formulas(goals)": [
                    "p_5(Keilani)"
                ]
            },
            "answer": "True"
        },
        {
            "edit_number": 2,
            "modification_type": "INVARIANT",
            "edited_context_fol": [
                "\u00acp_4(Keilani)",
                "\u00acp_2(Keilani)",
                "p_0(Keilani)",
                "p_1(Keilani)",
                "p_10(Keilani) \u2228 p_4(Keilani)",
                "(p_12(Keilani) \u2295 p_2(Keilani)) \u2192 p_3(Keilani)",
                "(p_12(Keilani) \u2228 p_11(Keilani)) \u2227 (\u00acp_12(Keilani) \u2228 \u00acp_11(Keilani))",
                "p_10(Keilani) \u2192 (p_11(Keilani) \u2295 p_9(Keilani))",
                "\u2200x (p_8(x) \u2295 p_9(x))",
                "p_8(Keilani) \u2192 (p_7(Keilani) \u2295 p_0(Keilani))",
                "p_1(Keilani) \u2295 p_6(Keilani)",
                "\u2200x (p_5(x) \u2192 (p_6(x) \u2228 p_7(x)))",
                "p_7(Keilani)",
                "\u00ac(p_6(Keilani) \u2228 p_7(Keilani)) \u2228 p_5(Keilani)",
                "p_6(Keilani) \u2228 p_7(Keilani)"
            ],
            "edited_natural_language_context": [
                "Keilani does not recycle waste.",
                "Keilani does not collect honey.",
                "Keilani conserves water.",
                "Keilani owns a farm.",
                "Keilani is either an environmentalist or recycles waste.",
                "If Keilani either keeps bees or collects honey (but not both), then she loves nature.",
                "Either Keilani keeps bees or tends an orchard, and she doesn't do both.",
                "If Keilani is an environmentalist, then she either tends an orchard or raises animals, but not both.",
                "A person either has a garden or raises animals, but not necessarily both.",
                "If Keilani has a garden, then she either lives sustainably or conserves water, but not both.",
                "For Keilani, either she owns a farm or is self-sufficient, but not necessarily both.",
                "For all humans, if someone lives off the land, then they are either self-sufficient or live sustainably (or both).",
                "Keilani lives sustainably.",
                "Either Keilani does not live sustainably and is not self-sufficient, or she lives off the land.",
                "Keilani is either self-sufficient or lives sustainably (or both)."
            ],
            "edits_made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    {
                        "fol": "p_6(Keilani) \u2228 p_7(Keilani)",
                        "nl": "Keilani is either self-sufficient or lives sustainably (or both)."
                    }
                ],
                "added_rules": [
                    {
                        "fol": "(p_12(Keilani) \u2228 p_11(Keilani)) \u2227 (\u00acp_12(Keilani) \u2228 \u00acp_11(Keilani))",
                        "nl": "Either Keilani keeps bees or tends an orchard, and she doesn't do both."
                    },
                    {
                        "fol": "\u00ac(p_6(Keilani) \u2228 p_7(Keilani)) \u2228 p_5(Keilani)",
                        "nl": "Either Keilani does not live sustainably and is not self-sufficient, or she lives off the land."
                    }
                ]
            },
            "conclusion": "Keilani lives off the land.",
            "conclusion_fol": "p_5(Keilani)",
            "prover9_input": {
                "formulas(assumptions)": [
                    "-p_4(Keilani)",
                    "-p_2(Keilani)",
                    "p_0(Keilani)",
                    "p_1(Keilani)",
                    "p_10(Keilani) | p_4(Keilani)",
                    "(-(p_12(Keilani) <-> p_2(Keilani))) -> p_3(Keilani)",
                    "(p_12(Keilani) | p_11(Keilani)) & (-p_12(Keilani) | -p_11(Keilani))",
                    "p_10(Keilani) -> (-(p_11(Keilani) <-> p_9(Keilani)))",
                    "all x (-(p_8(x) <-> p_9(x)))",
                    "p_8(Keilani) -> (-(p_7(Keilani) <-> p_0(Keilani)))",
                    "-(p_1(Keilani) <-> p_6(Keilani))",
                    "all x (p_5(x) -> (p_6(x) | p_7(x)))",
                    "p_7(Keilani)",
                    "(-(p_6(Keilani) | p_7(Keilani))) | p_5(Keilani)",
                    "p_6(Keilani) | p_7(Keilani)"
                ],
                "formulas(goals)": [
                    "p_5(Keilani)"
                ]
            },
            "answer": "True"
        },
        {
            "edit_number": 3,
            "modification_type": "FLIP",
            "edited_context_fol": [
                "\u00acp_4(Keilani)",
                "\u00acp_2(Keilani)",
                "p_0(Keilani)",
                "p_1(Keilani)",
                "p_10(Keilani) \u2228 p_4(Keilani)",
                "(p_12(Keilani) \u2295 p_2(Keilani)) \u2192 p_3(Keilani)",
                "(p_12(Keilani) \u2228 p_11(Keilani)) \u2227 (\u00acp_12(Keilani) \u2228 \u00acp_11(Keilani))",
                "p_10(Keilani) \u2192 (p_11(Keilani) \u2295 p_9(Keilani))",
                "\u2200x (p_8(x) \u2295 p_9(x))",
                "p_8(Keilani) \u2192 (p_7(Keilani) \u2295 p_0(Keilani))",
                "p_1(Keilani) \u2295 p_6(Keilani)",
                "\u2200x (p_5(x) \u2192 (p_6(x) \u2228 p_7(x)))",
                "p_7(Keilani)",
                "p_6(Keilani) \u2228 p_7(Keilani)",
                "(p_1(Keilani) \u2227 p_7(Keilani)) \u2192 \u00acp_5(Keilani)"
            ],
            "edited_natural_language_context": [
                "Keilani does not recycle waste.",
                "Keilani does not collect honey.",
                "Keilani conserves water.",
                "Keilani owns a farm.",
                "Keilani is either an environmentalist or recycles waste.",
                "If Keilani either keeps bees or collects honey (but not both), then she loves nature.",
                "Either Keilani keeps bees or tends an orchard, and she doesn't do both.",
                "If Keilani is an environmentalist, then she either tends an orchard or raises animals, but not both.",
                "A person either has a garden or raises animals, but not necessarily both.",
                "If Keilani has a garden, then she either lives sustainably or conserves water, but not both.",
                "For Keilani, either she owns a farm or is self-sufficient, but not necessarily both.",
                "For all humans, if someone lives off the land, then they are either self-sufficient or live sustainably (or both).",
                "Keilani lives sustainably.",
                "Keilani is either self-sufficient or lives sustainably (or both).",
                "If Keilani owns a farm and lives sustainably, then she does not live off the land."
            ],
            "edits_made": {
                "removed_facts": [],
                "removed_rules": [
                    {
                        "fol": "\u00ac(p_6(Keilani) \u2228 p_7(Keilani)) \u2228 p_5(Keilani)",
                        "nl": "Either Keilani does not live sustainably and is not self-sufficient, or she lives off the land."
                    }
                ],
                "added_facts": [],
                "added_rules": [
                    {
                        "fol": "(p_1(Keilani) \u2227 p_7(Keilani)) \u2192 \u00acp_5(Keilani)",
                        "nl": "If Keilani owns a farm and lives sustainably, then she does not live off the land."
                    }
                ]
            },
            "conclusion": "Keilani lives off the land.",
            "conclusion_fol": "p_5(Keilani)",
            "prover9_input": {
                "formulas(assumptions)": [
                    "-p_4(Keilani)",
                    "-p_2(Keilani)",
                    "p_0(Keilani)",
                    "p_1(Keilani)",
                    "p_10(Keilani) | p_4(Keilani)",
                    "p_12(Keilani) | -p_2(Keilani) | p_3(Keilani)",
                    "p_2(Keilani) | -p_12(Keilani) | p_3(Keilani)",
                    "p_12(Keilani) | p_11(Keilani)",
                    "-p_12(Keilani) | -p_11(Keilani)",
                    "-p_10(Keilani) | -p_11(Keilani) | -p_9(Keilani)",
                    "-p_10(Keilani) | p_11(Keilani) | p_9(Keilani)",
                    "-p_8(x) | -p_9(x)",
                    "p_8(x) | p_9(x)",
                    "-p_8(Keilani) | -p_7(Keilani) | -p_0(Keilani)",
                    "-p_8(Keilani) | p_7(Keilani) | p_0(Keilani)",
                    "-p_1(Keilani) | -p_6(Keilani)",
                    "p_1(Keilani) | p_6(Keilani)",
                    "all x (-p_5(x) | p_6(x) | p_7(x))",
                    "p_7(Keilani)",
                    "p_6(Keilani) | p_7(Keilani)",
                    "-p_1(Keilani) | -p_7(Keilani) | -p_5(Keilani)"
                ],
                "formulas(goals)": [
                    "-p_5(Keilani)"
                ]
            },
            "answer": "False"
        },
        {
            "edit_number": 4,
            "modification_type": "INVARIANT",
            "edited_context_fol": [
                "\u00acp_4(Keilani)",
                "\u00acp_2(Keilani)",
                "p_0(Keilani)",
                "p_1(Keilani)",
                "p_10(Keilani) \u2228 p_4(Keilani)",
                "(p_12(Keilani) \u2295 p_2(Keilani)) \u2192 p_3(Keilani)",
                "(p_12(Keilani) \u2228 p_11(Keilani)) \u2227 (\u00acp_12(Keilani) \u2228 \u00acp_11(Keilani))",
                "p_10(Keilani) \u2192 (p_11(Keilani) \u2295 p_9(Keilani))",
                "\u2200x (p_8(x) \u2295 p_9(x))",
                "\u00acp_8(Keilani) \u2228 (p_7(Keilani) \u2295 p_0(Keilani))",
                "p_1(Keilani) \u2295 p_6(Keilani)",
                "\u2200x (p_5(x) \u2192 (p_6(x) \u2228 p_7(x)))",
                "p_7(Keilani)",
                "p_6(Keilani) \u2228 p_7(Keilani)",
                "(p_1(Keilani) \u2227 p_7(Keilani)) \u2192 \u00acp_5(Keilani)",
                "\u00acp_10(Keilani) \u2192 p_4(Keilani)",
                "p_12(Keilani) \u2295 p_11(Keilani)",
                "p_8(Keilani) \u2295 p_9(Keilani)",
                "p_5(Keilani) \u2192 (p_6(Keilani) \u2228 p_7(Keilani))"
            ],
            "edited_natural_language_context": [
                "Keilani does not recycle waste.",
                "Keilani does not collect honey.",
                "Keilani conserves water.",
                "Keilani owns a farm.",
                "Keilani is either an environmentalist or recycles waste.",
                "If Keilani either keeps bees or collects honey (but not both), then she loves nature.",
                "Either Keilani keeps bees or tends an orchard, and she doesn't do both.",
                "If Keilani is an environmentalist, then she either tends an orchard or raises animals, but not both.",
                "A person either has a garden or raises animals, but not necessarily both.",
                "Either Keilani does not have a garden, or she either lives sustainably or conserves water (but not both).",
                "For Keilani, either she owns a farm or is self-sufficient, but not necessarily both.",
                "For all humans, if someone lives off the land, then they are either self-sufficient or live sustainably (or both).",
                "Keilani lives sustainably.",
                "Keilani is either self-sufficient or lives sustainably (or both).",
                "If Keilani owns a farm and lives sustainably, then she does not live off the land.",
                "If Keilani is not an environmentalist, then she recycles waste.",
                "Either Keilani keeps bees or tends an orchard, but not both.",
                "Either Keilani has a garden or raises animals, but not both.",
                "If Keilani lives off the land, then she is either self-sufficient or lives sustainably (or both)."
            ],
            "edits_made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    {
                        "fol": "\u00acp_10(Keilani) \u2192 p_4(Keilani)",
                        "nl": "If Keilani is not an environmentalist, then she recycles waste."
                    },
                    {
                        "fol": "p_12(Keilani) \u2295 p_11(Keilani)",
                        "nl": "Either Keilani keeps bees or tends an orchard, but not both."
                    },
                    {
                        "fol": "p_8(Keilani) \u2295 p_9(Keilani)",
                        "nl": "Either Keilani has a garden or raises animals, but not both."
                    },
                    {
                        "fol": "p_5(Keilani) \u2192 (p_6(Keilani) \u2228 p_7(Keilani))",
                        "nl": "If Keilani lives off the land, then she is either self-sufficient or lives sustainably (or both)."
                    }
                ],
                "added_rules": []
            },
            "conclusion": "Keilani lives off the land.",
            "conclusion_fol": "p_5(Keilani)",
            "prover9_input": {
                "formulas(assumptions)": [
                    "-p_4(Keilani)",
                    "-p_2(Keilani)",
                    "p_0(Keilani)",
                    "p_1(Keilani)",
                    "(p_10(Keilani) | p_4(Keilani))",
                    "(-(p_12(Keilani) <-> p_2(Keilani)) -> p_3(Keilani))",
                    "((p_12(Keilani) | p_11(Keilani)) & (-p_12(Keilani) | -p_11(Keilani)))",
                    "(p_10(Keilani) -> -(p_11(Keilani) <-> p_9(Keilani)))",
                    "all x (-(p_8(x) <-> p_9(x)))",
                    "(-p_8(Keilani) | -(p_7(Keilani) <-> p_0(Keilani)))",
                    "-(p_1(Keilani) <-> p_6(Keilani))",
                    "all x (p_5(x) -> (p_6(x) | p_7(x)))",
                    "p_7(Keilani)",
                    "(p_6(Keilani) | p_7(Keilani))",
                    "((p_1(Keilani) & p_7(Keilani)) -> -p_5(Keilani))",
                    "(-p_10(Keilani) -> p_4(Keilani))",
                    "-(p_12(Keilani) <-> p_11(Keilani))",
                    "-(p_8(Keilani) <-> p_9(Keilani))",
                    "(p_5(Keilani) -> (p_6(Keilani) | p_7(Keilani)))"
                ],
                "formulas(goals)": [
                    "-p_5(Keilani)"
                ]
            },
            "answer": "False"
        },
        {
            "edit_number": 5,
            "modification_type": "FLIP",
            "edited_context_fol": [
                "\u00acp_4(Keilani)",
                "\u00acp_2(Keilani)",
                "p_0(Keilani)",
                "p_1(Keilani)",
                "p_10(Keilani) \u2228 p_4(Keilani)",
                "(p_12(Keilani) \u2295 p_2(Keilani)) \u2192 p_3(Keilani)",
                "(p_12(Keilani) \u2228 p_11(Keilani)) \u2227 (\u00acp_12(Keilani) \u2228 \u00acp_11(Keilani))",
                "p_10(Keilani) \u2192 (p_11(Keilani) \u2295 p_9(Keilani))",
                "\u2200x (p_8(x) \u2295 p_9(x))",
                "\u00acp_8(Keilani) \u2228 (p_7(Keilani) \u2295 p_0(Keilani))",
                "p_1(Keilani) \u2295 p_6(Keilani)",
                "\u2200x (p_5(x) \u2192 (p_6(x) \u2228 p_7(x)))",
                "p_7(Keilani)",
                "p_6(Keilani) \u2228 p_7(Keilani)",
                "\u00acp_10(Keilani) \u2192 p_4(Keilani)",
                "p_12(Keilani) \u2295 p_11(Keilani)",
                "p_8(Keilani) \u2295 p_9(Keilani)",
                "p_5(Keilani) \u2192 (p_6(Keilani) \u2228 p_7(Keilani))",
                "\u00acp_6(Keilani) \u2192 p_5(Keilani)"
            ],
            "edited_natural_language_context": [
                "Keilani does not recycle waste.",
                "Keilani does not collect honey.",
                "Keilani conserves water.",
                "Keilani owns a farm.",
                "Keilani is either an environmentalist or recycles waste.",
                "If Keilani either keeps bees or collects honey (but not both), then she loves nature.",
                "Either Keilani keeps bees or tends an orchard, and she doesn't do both.",
                "If Keilani is an environmentalist, then she either tends an orchard or raises animals, but not both.",
                "A person either has a garden or raises animals, but not necessarily both.",
                "Either Keilani does not have a garden, or she either lives sustainably or conserves water (but not both).",
                "For Keilani, either she owns a farm or is self-sufficient, but not necessarily both.",
                "For all humans, if someone lives off the land, then they are either self-sufficient or live sustainably (or both).",
                "Keilani lives sustainably.",
                "Keilani is either self-sufficient or lives sustainably (or both).",
                "If Keilani is not an environmentalist, then she recycles waste.",
                "Either Keilani keeps bees or tends an orchard, but not both.",
                "Either Keilani has a garden or raises animals, but not both.",
                "If Keilani lives off the land, then she is either self-sufficient or lives sustainably (or both).",
                "If Keilani is not self-sufficient, then she lives off the land."
            ],
            "edits_made": {
                "removed_facts": [],
                "removed_rules": [
                    {
                        "fol": "(p_1(Keilani) \u2227 p_7(Keilani)) \u2192 \u00acp_5(Keilani)",
                        "nl": "If Keilani owns a farm and lives sustainably, then she does not live off the land."
                    }
                ],
                "added_facts": [],
                "added_rules": [
                    {
                        "fol": "\u00acp_6(Keilani) \u2192 p_5(Keilani)",
                        "nl": "If Keilani is not self-sufficient, then she lives off the land."
                    }
                ]
            },
            "conclusion": "Keilani lives off the land.",
            "conclusion_fol": "p_5(Keilani)",
            "prover9_input": {
                "formulas(assumptions)": [
                    "-p_4(Keilani)",
                    "-p_2(Keilani)",
                    "p_0(Keilani)",
                    "p_1(Keilani)",
                    "p_10(Keilani) | p_4(Keilani)",
                    "(-(p_12(Keilani) <-> p_2(Keilani))) -> p_3(Keilani)",
                    "(p_12(Keilani) | p_11(Keilani)) & (-p_12(Keilani) | -p_11(Keilani))",
                    "p_10(Keilani) -> (-(p_11(Keilani) <-> p_9(Keilani)))",
                    "all x (-(p_8(x) <-> p_9(x)))",
                    "-p_8(Keilani) | (-(p_7(Keilani) <-> p_0(Keilani)))",
                    "-(p_1(Keilani) <-> p_6(Keilani))",
                    "all x (p_5(x) -> (p_6(x) | p_7(x)))",
                    "p_7(Keilani)",
                    "p_6(Keilani) | p_7(Keilani)",
                    "-p_10(Keilani) -> p_4(Keilani)",
                    "-(p_12(Keilani) <-> p_11(Keilani))",
                    "-(p_8(Keilani) <-> p_9(Keilani))",
                    "p_5(Keilani) -> (p_6(Keilani) | p_7(Keilani))",
                    "-p_6(Keilani) -> p_5(Keilani)"
                ],
                "formulas(goals)": [
                    "p_5(Keilani)"
                ]
            },
            "answer": "True"
        },
        {
            "edit_number": 6,
            "modification_type": "INVARIANT",
            "edited_context_fol": [
                "\u00acp_4(Keilani)",
                "\u00acp_2(Keilani)",
                "p_0(Keilani)",
                "p_1(Keilani)",
                "p_10(Keilani) \u2228 p_4(Keilani)",
                "(p_12(Keilani) \u2295 p_2(Keilani)) \u2192 p_3(Keilani)",
                "(p_12(Keilani) \u2228 p_11(Keilani)) \u2227 (\u00acp_12(Keilani) \u2228 \u00acp_11(Keilani))",
                "p_10(Keilani) \u2192 (p_11(Keilani) \u2295 p_9(Keilani))",
                "\u2200x (p_8(x) \u2295 p_9(x))",
                "\u00acp_8(Keilani) \u2228 (p_7(Keilani) \u2295 p_0(Keilani))",
                "p_1(Keilani) \u2295 p_6(Keilani)",
                "\u2200x (p_5(x) \u2192 (p_6(x) \u2228 p_7(x)))",
                "p_7(Keilani)",
                "p_6(Keilani) \u2228 p_7(Keilani)",
                "\u00acp_10(Keilani) \u2192 p_4(Keilani)",
                "p_12(Keilani) \u2295 p_11(Keilani)",
                "p_8(Keilani) \u2295 p_9(Keilani)",
                "p_5(Keilani) \u2192 (p_6(Keilani) \u2228 p_7(Keilani))",
                "\u00acp_6(Keilani) \u2192 p_5(Keilani)",
                "(p_1(Keilani) \u2227 \u00acp_6(Keilani)) \u2228 (\u00acp_1(Keilani) \u2227 p_6(Keilani))",
                "p_5(Keilani) \u2228 p_6(Keilani)"
            ],
            "edited_natural_language_context": [
                "Keilani does not recycle waste.",
                "Keilani does not collect honey.",
                "Keilani conserves water.",
                "Keilani owns a farm.",
                "Keilani is either an environmentalist or recycles waste.",
                "If Keilani either keeps bees or collects honey (but not both), then she loves nature.",
                "Either Keilani keeps bees or tends an orchard, and she doesn't do both.",
                "If Keilani is an environmentalist, then she either tends an orchard or raises animals, but not both.",
                "A person either has a garden or raises animals, but not necessarily both.",
                "Either Keilani does not have a garden, or she either lives sustainably or conserves water (but not both).",
                "For Keilani, either she owns a farm or is self-sufficient, but not necessarily both.",
                "For all humans, if someone lives off the land, then they are either self-sufficient or live sustainably (or both).",
                "Keilani lives sustainably.",
                "Keilani is either self-sufficient or lives sustainably (or both).",
                "If Keilani is not an environmentalist, then she recycles waste.",
                "Either Keilani keeps bees or tends an orchard, but not both.",
                "Either Keilani has a garden or raises animals, but not both.",
                "If Keilani lives off the land, then she is either self-sufficient or lives sustainably (or both).",
                "If Keilani is not self-sufficient, then she lives off the land.",
                "Either (Keilani owns a farm and is not self-sufficient) or (Keilani does not own a farm and is self-sufficient).",
                "Keilani either lives off the land or is self-sufficient (or both)."
            ],
            "edits_made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    {
                        "fol": "(p_1(Keilani) \u2227 \u00acp_6(Keilani)) \u2228 (\u00acp_1(Keilani) \u2227 p_6(Keilani))",
                        "nl": "Either (Keilani owns a farm and is not self-sufficient) or (Keilani does not own a farm and is self-sufficient)."
                    },
                    {
                        "fol": "p_5(Keilani) \u2228 p_6(Keilani)",
                        "nl": "Keilani either lives off the land or is self-sufficient (or both)."
                    }
                ]
            },
            "conclusion": "Keilani lives off the land.",
            "conclusion_fol": "p_5(Keilani)",
            "prover9_input": {
                "formulas(assumptions)": [
                    "-p_4(Keilani)",
                    "-p_2(Keilani)",
                    "p_0(Keilani)",
                    "p_1(Keilani)",
                    "p_10(Keilani) | p_4(Keilani)",
                    "(-(p_12(Keilani) <-> p_2(Keilani))) -> p_3(Keilani)",
                    "(p_12(Keilani) | p_11(Keilani)) & (-p_12(Keilani) | -p_11(Keilani))",
                    "p_10(Keilani) -> (-(p_11(Keilani) <-> p_9(Keilani)))",
                    "all x (-(p_8(x) <-> p_9(x)))",
                    "-p_8(Keilani) | (-(p_7(Keilani) <-> p_0(Keilani)))",
                    "(-(p_1(Keilani) <-> p_6(Keilani)))",
                    "all x (p_5(x) -> (p_6(x) | p_7(x)))",
                    "p_7(Keilani)",
                    "p_6(Keilani) | p_7(Keilani)",
                    "-p_10(Keilani) -> p_4(Keilani)",
                    "(-(p_12(Keilani) <-> p_11(Keilani)))",
                    "(-(p_8(Keilani) <-> p_9(Keilani)))",
                    "p_5(Keilani) -> (p_6(Keilani) | p_7(Keilani))",
                    "-p_6(Keilani) -> p_5(Keilani)",
                    "(p_1(Keilani) & -p_6(Keilani)) | (-p_1(Keilani) & p_6(Keilani))",
                    "p_5(Keilani) | p_6(Keilani)"
                ],
                "formulas(goals)": [
                    "p_5(Keilani)"
                ]
            },
            "answer": "True"
        },
        {
            "edit_number": 7,
            "modification_type": "FLIP",
            "edited_context_fol": [
                "\u00acp_4(Keilani)",
                "\u00acp_2(Keilani)",
                "p_0(Keilani)",
                "p_1(Keilani)",
                "p_10(Keilani) \u2228 p_4(Keilani)",
                "(p_12(Keilani) \u2295 p_2(Keilani)) \u2192 p_3(Keilani)",
                "(p_12(Keilani) \u2228 p_11(Keilani)) \u2227 (\u00acp_12(Keilani) \u2228 \u00acp_11(Keilani))",
                "p_10(Keilani) \u2192 (p_11(Keilani) \u2295 p_9(Keilani))",
                "\u2200x (p_8(x) \u2295 p_9(x))",
                "\u00acp_8(Keilani) \u2228 (p_7(Keilani) \u2295 p_0(Keilani))",
                "\u2200x (p_5(x) \u2192 (p_6(x) \u2228 p_7(x)))",
                "p_7(Keilani)",
                "p_6(Keilani) \u2228 p_7(Keilani)",
                "\u00acp_10(Keilani) \u2192 p_4(Keilani)",
                "p_12(Keilani) \u2295 p_11(Keilani)",
                "p_8(Keilani) \u2295 p_9(Keilani)",
                "p_5(Keilani) \u2192 (p_6(Keilani) \u2228 p_7(Keilani))",
                "\u00acp_6(Keilani) \u2192 p_5(Keilani)",
                "p_5(Keilani) \u2228 p_6(Keilani)",
                "p_1(Keilani) \u2192 p_6(Keilani)",
                "p_6(Keilani) \u2192 \u00acp_5(Keilani)"
            ],
            "edited_natural_language_context": [
                "Keilani does not recycle waste.",
                "Keilani does not collect honey.",
                "Keilani conserves water.",
                "Keilani owns a farm.",
                "Keilani is either an environmentalist or recycles waste.",
                "If Keilani either keeps bees or collects honey (but not both), then she loves nature.",
                "Either Keilani keeps bees or tends an orchard, and she doesn't do both.",
                "If Keilani is an environmentalist, then she either tends an orchard or raises animals, but not both.",
                "A person either has a garden or raises animals, but not necessarily both.",
                "Either Keilani does not have a garden, or she either lives sustainably or conserves water (but not both).",
                "For all humans, if someone lives off the land, then they are either self-sufficient or live sustainably (or both).",
                "Keilani lives sustainably.",
                "Keilani is either self-sufficient or lives sustainably (or both).",
                "If Keilani is not an environmentalist, then she recycles waste.",
                "Either Keilani keeps bees or tends an orchard, but not both.",
                "Either Keilani has a garden or raises animals, but not both.",
                "If Keilani lives off the land, then she is either self-sufficient or lives sustainably (or both).",
                "If Keilani is not self-sufficient, then she lives off the land.",
                "Keilani either lives off the land or is self-sufficient (or both).",
                "If Keilani owns a farm, then she is self-sufficient.",
                "If Keilani is self-sufficient, then she does not live off the land."
            ],
            "edits_made": {
                "removed_facts": [],
                "removed_rules": [
                    {
                        "fol": "p_1(Keilani) \u2295 p_6(Keilani)",
                        "nl": "For Keilani, either she owns a farm or is self-sufficient, but not necessarily both."
                    },
                    {
                        "fol": "(p_1(Keilani) \u2227 \u00acp_6(Keilani)) \u2228 (\u00acp_1(Keilani) \u2227 p_6(Keilani))",
                        "nl": "Either (Keilani owns a farm and is not self-sufficient) or (Keilani does not own a farm and is self-sufficient)."
                    }
                ],
                "added_facts": [],
                "added_rules": [
                    {
                        "fol": "p_1(Keilani) \u2192 p_6(Keilani)",
                        "nl": "If Keilani owns a farm, then she is self-sufficient."
                    },
                    {
                        "fol": "p_6(Keilani) \u2192 \u00acp_5(Keilani)",
                        "nl": "If Keilani is self-sufficient, then she does not live off the land."
                    }
                ]
            },
            "conclusion": "Keilani lives off the land.",
            "conclusion_fol": "p_5(Keilani)",
            "prover9_input": {
                "formulas(assumptions)": [
                    "-p_4(Keilani)",
                    "-p_2(Keilani)",
                    "p_0(Keilani)",
                    "p_1(Keilani)",
                    "p_10(Keilani) | p_4(Keilani)",
                    "(- (p_12(Keilani) <-> p_2(Keilani))) -> p_3(Keilani)",
                    "(p_12(Keilani) | p_11(Keilani)) & (-p_12(Keilani) | -p_11(Keilani))",
                    "p_10(Keilani) -> (- (p_11(Keilani) <-> p_9(Keilani)))",
                    "all x (- (p_8(x) <-> p_9(x)))",
                    "-p_8(Keilani) | (- (p_7(Keilani) <-> p_0(Keilani)))",
                    "all x (p_5(x) -> (p_6(x) | p_7(x)))",
                    "p_7(Keilani)",
                    "p_6(Keilani) | p_7(Keilani)",
                    "-p_10(Keilani) -> p_4(Keilani)",
                    "- (p_12(Keilani) <-> p_11(Keilani))",
                    "- (p_8(Keilani) <-> p_9(Keilani))",
                    "p_5(Keilani) -> (p_6(Keilani) | p_7(Keilani))",
                    "(-p_6(Keilani)) -> p_5(Keilani)",
                    "p_5(Keilani) | p_6(Keilani)",
                    "p_1(Keilani) -> p_6(Keilani)",
                    "p_6(Keilani) -> (-p_5(Keilani))"
                ],
                "formulas(goals)": [
                    "-p_5(Keilani)"
                ]
            },
            "answer": "False"
        }
    ]
}