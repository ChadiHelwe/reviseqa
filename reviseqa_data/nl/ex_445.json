{
    "original_context": [
        "Soren has patience.",
        "Soren does not learn quickly.",
        "Soren is artistic.",
        "Soren is not imaginative.",
        "Soren is experienced.",
        "Soren is dedicated.",
        "Soren does not create beauty.",
        "If Soren has patience, then he is either skilled or learns quickly, but not both.",
        "If Soren is artistic, then he is either creative or imaginative, but not both.",
        "If Soren is experienced, then he either has creativity or tells stories through his craft, but not both.",
        "If someone is skilled, then they work precisely.",
        "Everyone who is dedicated either tells stories through their work or has passion (or both).",
        "If someone is innovative and has passion, then they create beauty.",
        "If Soren works precisely and produces quality work, then he is innovative.",
        "For all humans, if someone is a master craftsman, then they are attentive to detail and produce quality work."
    ],
    "original_context_fol": [
        "p_5(Soren)",
        "\u00acp_6(Soren)",
        "p_3(Soren)",
        "\u00acp_4(Soren)",
        "p_2(Soren)",
        "p_1(Soren)",
        "\u00acp_0(Soren)",
        "p_5(Soren) \u2192 (p_14(Soren) \u2295 p_6(Soren))",
        "p_3(Soren) \u2192 (p_15(Soren) \u2295 p_4(Soren))",
        "p_2(Soren) \u2192 (p_15(Soren) \u2295 p_13(Soren))",
        "\u2200x (p_14(x) \u2192 p_10(x))",
        "\u2200x (p_1(x) \u2192 (p_13(x) \u2228 p_12(x)))",
        "\u2200x ((p_11(x) \u2227 p_12(x)) \u2192 p_0(x))",
        "(p_10(Soren) \u2227 p_9(Soren)) \u2192 p_11(Soren)",
        "\u2200x (p_7(x) \u2192 (p_8(x) \u2227 p_9(x)))"
    ],
    "conclusion": "Soren is not a master craftsman.",
    "conclusion_fol": "\u00acp_7(Soren)",
    "answer": "True",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 5,
                    "subject": "Soren",
                    "text": "Soren has patience.",
                    "fol": "p_5(Soren)",
                    "str_fol": "has_patience(Soren)",
                    "negation": false
                },
                {
                    "id": 6,
                    "subject": "Soren",
                    "text": "Soren does not learn quickly.",
                    "fol": "\u00acp_6(Soren)",
                    "str_fol": "\u00aclearns_quickly(Soren)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 7,
                    "text": "If Soren has patience, then he is either skilled or learns quickly, but not both.",
                    "fol": "p_5(Soren) \u2192 (p_14(Soren) \u2295 p_6(Soren))",
                    "str_fol": "has_patience(Soren) \u2192 (is_skilled(Soren) \u2295 learns_quickly(Soren))"
                }
            ],
            "conclusion": {
                "id": 7,
                "subject": "Soren",
                "text": "Soren is skilled.",
                "fol": "p_14(Soren)",
                "str_fol": "is_skilled(Soren)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 3,
                    "subject": "Soren",
                    "text": "Soren is artistic.",
                    "fol": "p_3(Soren)",
                    "str_fol": "is_artistic(Soren)",
                    "negation": false
                },
                {
                    "id": 4,
                    "subject": "Soren",
                    "text": "Soren is not imaginative.",
                    "fol": "\u00acp_4(Soren)",
                    "str_fol": "\u00acis_imaginative(Soren)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 6,
                    "text": "If Soren is artistic, then he is either creative or imaginative, but not both.",
                    "fol": "p_3(Soren) \u2192 (p_15(Soren) \u2295 p_4(Soren))",
                    "str_fol": "is_artistic(Soren) \u2192 (has_creativity(Soren) \u2295 is_imaginative(Soren))"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Soren",
                "text": "Soren has creativity.",
                "fol": "p_15(Soren)",
                "str_fol": "has_creativity(Soren)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 2,
                    "subject": "Soren",
                    "text": "Soren is experienced.",
                    "fol": "p_2(Soren)",
                    "str_fol": "is_experienced(Soren)",
                    "negation": false
                },
                {
                    "id": 8,
                    "subject": "Soren",
                    "text": "Soren has creativity.",
                    "fol": "p_15(Soren)",
                    "str_fol": "has_creativity(Soren)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "If Soren is experienced, then he either has creativity or tells stories through his craft, but not both.",
                    "fol": "p_2(Soren) \u2192 (p_15(Soren) \u2295 p_13(Soren))",
                    "str_fol": "is_experienced(Soren) \u2192 (has_creativity(Soren) \u2295 tells_stories(Soren))"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Soren",
                "text": "Soren does not tell stories through his craft.",
                "fol": "\u00acp_13(Soren)",
                "str_fol": "\u00actells_stories(Soren)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 7,
                    "subject": "Soren",
                    "text": "Soren is skilled.",
                    "fol": "p_14(Soren)",
                    "str_fol": "is_skilled(Soren)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "If someone is skilled, then they work precisely.",
                    "fol": "\u2200x (p_14(x) \u2192 p_10(x))",
                    "str_fol": "\u2200x (is_skilled(x) \u2192 works_precisely(x))"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Soren",
                "text": "Soren works precisely.",
                "fol": "p_10(Soren)",
                "str_fol": "works_precisely(Soren)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 1,
                    "subject": "Soren",
                    "text": "Soren is dedicated.",
                    "fol": "p_1(Soren)",
                    "str_fol": "is_dedicated(Soren)",
                    "negation": false
                },
                {
                    "id": 9,
                    "subject": "Soren",
                    "text": "Soren does not tell stories through his craft.",
                    "fol": "\u00acp_13(Soren)",
                    "str_fol": "\u00actells_stories(Soren)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "Everyone who is dedicated either tells stories through their work or has passion (or both).",
                    "fol": "\u2200x (p_1(x) \u2192 (p_13(x) \u2228 p_12(x)))",
                    "str_fol": "\u2200x (is_dedicated(x) \u2192 (tells_stories(x) \u2228 has_passion(x)))"
                }
            ],
            "conclusion": {
                "id": 11,
                "subject": "Soren",
                "text": "Soren has passion.",
                "fol": "p_12(Soren)",
                "str_fol": "has_passion(Soren)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 11,
                    "subject": "Soren",
                    "text": "Soren has passion.",
                    "fol": "p_12(Soren)",
                    "str_fol": "has_passion(Soren)",
                    "negation": false
                },
                {
                    "id": 0,
                    "subject": "Soren",
                    "text": "Soren does not create beauty.",
                    "fol": "\u00acp_0(Soren)",
                    "str_fol": "\u00accreates_beauty(Soren)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "If someone is innovative and has passion, then they create beauty.",
                    "fol": "\u2200x ((p_11(x) \u2227 p_12(x)) \u2192 p_0(x))",
                    "str_fol": "\u2200x ((is_innovative(x) \u2227 has_passion(x)) \u2192 creates_beauty(x))"
                }
            ],
            "conclusion": {
                "id": 12,
                "subject": "Soren",
                "text": "Soren is not innovative.",
                "fol": "\u00acp_11(Soren)",
                "str_fol": "\u00acis_innovative(Soren)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 10,
                    "subject": "Soren",
                    "text": "Soren works precisely.",
                    "fol": "p_10(Soren)",
                    "str_fol": "works_precisely(Soren)",
                    "negation": false
                },
                {
                    "id": 12,
                    "subject": "Soren",
                    "text": "Soren is not innovative.",
                    "fol": "\u00acp_11(Soren)",
                    "str_fol": "\u00acis_innovative(Soren)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "If Soren works precisely and produces quality work, then he is innovative.",
                    "fol": "(p_10(Soren) \u2227 p_9(Soren)) \u2192 p_11(Soren)",
                    "str_fol": "(works_precisely(Soren) \u2227 produces_quality_work(Soren)) \u2192 is_innovative(Soren)"
                }
            ],
            "conclusion": {
                "id": 13,
                "subject": "Soren",
                "text": "Soren does not produce quality work.",
                "fol": "\u00acp_9(Soren)",
                "str_fol": "\u00acproduces_quality_work(Soren)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 13,
                    "subject": "Soren",
                    "text": "Soren does not produce quality work.",
                    "fol": "\u00acp_9(Soren)",
                    "str_fol": "\u00acproduces_quality_work(Soren)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "For all humans, if someone is a master craftsman, then they are attentive to detail and produce quality work.",
                    "fol": "\u2200x (p_7(x) \u2192 (p_8(x) \u2227 p_9(x)))",
                    "str_fol": "\u2200x (master_craftsman(x) \u2192 (attentive_to_detail(x) \u2227 produces_quality_work(x)))"
                }
            ],
            "conclusion": {
                "id": 14,
                "subject": "Soren",
                "text": "Soren is not a master craftsman.",
                "fol": "\u00acp_7(Soren)",
                "str_fol": "\u00acmaster_craftsman(Soren)",
                "negation": true
            }
        }
    ],
    "edits": [
        {
            "edit_number": 1,
            "modification_type": "INVARIANT",
            "edited_context_fol": [
                "p_5(Soren)",
                "\u00acp_6(Soren)",
                "p_3(Soren)",
                "\u00acp_4(Soren)",
                "p_2(Soren)",
                "p_1(Soren)",
                "\u00acp_0(Soren)",
                "p_5(Soren) \u2192 (p_14(Soren) \u2295 p_6(Soren))",
                "p_3(Soren) \u2192 (p_15(Soren) \u2295 p_4(Soren))",
                "p_2(Soren) \u2192 (p_15(Soren) \u2295 p_13(Soren))",
                "\u2200x (\u00acp_10(x) \u2192 \u00acp_14(x))",
                "\u2200x (p_1(x) \u2192 (\u00acp_13(x) \u2192 p_12(x)))",
                "\u2200x (p_11(x) \u2192 (p_12(x) \u2192 p_0(x)))",
                "\u00acp_11(Soren) \u2192 (\u00acp_10(Soren) \u2228 \u00acp_9(Soren))",
                "\u2200x (p_7(x) \u2192 p_8(x))",
                "\u2200x (p_7(x) \u2192 p_9(x))",
                "p_14(Soren)",
                "p_10(Soren)",
                "p_15(Soren)",
                "\u00acp_13(Soren)",
                "p_12(Soren)"
            ],
            "edited_natural_language_context": [
                "Soren has patience.",
                "Soren does not learn quickly.",
                "Soren is artistic.",
                "Soren is not imaginative.",
                "Soren is experienced.",
                "Soren is dedicated.",
                "Soren does not create beauty.",
                "If Soren has patience, then he is either skilled or learns quickly, but not both.",
                "If Soren is artistic, then he is either creative or imaginative, but not both.",
                "If Soren is experienced, then he either has creativity or tells stories through his craft, but not both.",
                "For all people, if someone does not work precisely, then they are not skilled.",
                "For all people, if someone is dedicated, then if they do not tell stories through their work, they have passion.",
                "For all people, if someone is innovative, then if they have passion, they create beauty.",
                "If Soren is not innovative, then either he does not work precisely or he does not produce quality work.",
                "For all people, if someone is a master craftsman, then they are attentive to detail.",
                "For all people, if someone is a master craftsman, then they produce quality work.",
                "Soren is skilled.",
                "Soren works precisely.",
                "Soren has creativity.",
                "Soren does not tell stories through his craft.",
                "Soren has passion."
            ],
            "edits_made": {
                "removed_facts": [],
                "removed_rules": [
                    {
                        "fol": "\u2200x (p_14(x) \u2192 p_10(x))",
                        "nl": "For all people, if someone is skilled, then they work precisely."
                    },
                    {
                        "fol": "\u2200x (p_1(x) \u2192 (p_13(x) \u2228 p_12(x)))",
                        "nl": "For all people, if someone is dedicated, then they either tell stories through their work or have passion (or both)."
                    },
                    {
                        "fol": "\u2200x ((p_11(x) \u2227 p_12(x)) \u2192 p_0(x))",
                        "nl": "For all people, if someone is innovative and has passion, then they create beauty."
                    },
                    {
                        "fol": "(p_10(Soren) \u2227 p_9(Soren)) \u2192 p_11(Soren)",
                        "nl": "If Soren works precisely and produces quality work, then he is innovative."
                    },
                    {
                        "fol": "\u2200x (p_7(x) \u2192 (p_8(x) \u2227 p_9(x)))",
                        "nl": "For all people, if someone is a master craftsman, then they are attentive to detail and produce quality work."
                    }
                ],
                "added_facts": [
                    {
                        "fol": "p_14(Soren)",
                        "nl": "Soren is skilled."
                    },
                    {
                        "fol": "p_10(Soren)",
                        "nl": "Soren works precisely."
                    },
                    {
                        "fol": "p_15(Soren)",
                        "nl": "Soren has creativity."
                    },
                    {
                        "fol": "\u00acp_13(Soren)",
                        "nl": "Soren does not tell stories through his craft."
                    },
                    {
                        "fol": "p_12(Soren)",
                        "nl": "Soren has passion."
                    }
                ],
                "added_rules": [
                    {
                        "fol": "\u2200x (\u00acp_10(x) \u2192 \u00acp_14(x))",
                        "nl": "For all people, if someone does not work precisely, then they are not skilled."
                    },
                    {
                        "fol": "\u2200x (p_1(x) \u2192 (\u00acp_13(x) \u2192 p_12(x)))",
                        "nl": "For all people, if someone is dedicated, then if they do not tell stories through their work, they have passion."
                    },
                    {
                        "fol": "\u2200x (p_11(x) \u2192 (p_12(x) \u2192 p_0(x)))",
                        "nl": "For all people, if someone is innovative, then if they have passion, they create beauty."
                    },
                    {
                        "fol": "\u00acp_11(Soren) \u2192 (\u00acp_10(Soren) \u2228 \u00acp_9(Soren))",
                        "nl": "If Soren is not innovative, then either he does not work precisely or he does not produce quality work."
                    },
                    {
                        "fol": "\u2200x (p_7(x) \u2192 p_8(x))",
                        "nl": "For all people, if someone is a master craftsman, then they are attentive to detail."
                    },
                    {
                        "fol": "\u2200x (p_7(x) \u2192 p_9(x))",
                        "nl": "For all people, if someone is a master craftsman, then they produce quality work."
                    }
                ]
            },
            "conclusion": "Soren is not a master craftsman.",
            "conclusion_fol": "\u00acp_7(Soren)",
            "prover9_input": {
                "formulas(assumptions)": [
                    "p_5(Soren)",
                    "-p_6(Soren)",
                    "p_3(Soren)",
                    "-p_4(Soren)",
                    "p_2(Soren)",
                    "p_1(Soren)",
                    "-p_0(Soren)",
                    "p_5(Soren) -> (-(p_14(Soren) <-> p_6(Soren)))",
                    "p_3(Soren) -> (-(p_15(Soren) <-> p_4(Soren)))",
                    "p_2(Soren) -> (-(p_15(Soren) <-> p_13(Soren)))",
                    "all x (-p_10(x) -> -p_14(x))",
                    "all x (p_1(x) -> (-p_13(x) -> p_12(x)))",
                    "all x (p_11(x) -> (p_12(x) -> p_0(x)))",
                    "-p_11(Soren) -> (-p_10(Soren) | -p_9(Soren))",
                    "all x (p_7(x) -> p_8(x))",
                    "all x (p_7(x) -> p_9(x))",
                    "p_14(Soren)",
                    "p_10(Soren)",
                    "p_15(Soren)",
                    "-p_13(Soren)",
                    "p_12(Soren)"
                ],
                "formulas(goals)": [
                    "-p_7(Soren)"
                ]
            },
            "answer": "True"
        },
        {
            "edit_number": 2,
            "modification_type": "INVARIANT",
            "edited_context_fol": [
                "p_5(Soren).",
                "\u00acp_6(Soren).",
                "p_3(Soren).",
                "\u00acp_4(Soren).",
                "p_2(Soren).",
                "p_1(Soren).",
                "\u00acp_0(Soren).",
                "p_5(Soren) \u2192 (p_14(Soren) \u2295 p_6(Soren)).",
                "p_3(Soren) \u2192 (p_15(Soren) \u2295 p_4(Soren)).",
                "p_2(Soren) \u2192 (p_15(Soren) \u2295 p_13(Soren)).",
                "\u2200x (\u00acp_10(x) \u2192 \u00acp_14(x)).",
                "\u2200x (p_1(x) \u2192 (\u00acp_13(x) \u2192 p_12(x))).",
                "\u2200x (p_11(x) \u2192 (p_12(x) \u2192 p_0(x))).",
                "(\u00acp_11(Soren) \u2227 p_10(Soren)) \u2192 \u00acp_9(Soren).",
                "\u2200x (p_7(x) \u2192 p_8(x)).",
                "\u2200x (\u00acp_9(x) \u2192 \u00acp_7(x)).",
                "p_14(Soren).",
                "p_10(Soren).",
                "p_15(Soren).",
                "\u00acp_13(Soren).",
                "p_12(Soren).",
                "\u00acp_11(Soren).",
                "\u00acp_9(Soren)."
            ],
            "edited_natural_language_context": [
                "Soren has patience.",
                "Soren does not learn quickly.",
                "Soren is artistic.",
                "Soren is not imaginative.",
                "Soren is experienced.",
                "Soren is dedicated.",
                "Soren does not create beauty.",
                "If Soren has patience, then he is either skilled or learns quickly, but not both.",
                "If Soren is artistic, then he is either creative or imaginative, but not both.",
                "If Soren is experienced, then he either has creativity or tells stories through his craft, but not both.",
                "For all people, if someone does not work precisely, then they are not skilled.",
                "For all people, if someone is dedicated, then if they do not tell stories through their work, they have passion.",
                "For all people, if someone is innovative, then if they have passion, they create beauty.",
                "If Soren is not innovative and works precisely, then he does not produce quality work.",
                "For all people, if someone is a master craftsman, then they are attentive to detail.",
                "For all people, if someone does not produce quality work, then they are not a master craftsman.",
                "Soren is skilled.",
                "Soren works precisely.",
                "Soren has creativity.",
                "Soren does not tell stories through his craft.",
                "Soren has passion.",
                "Soren is not innovative.",
                "Soren does not produce quality work."
            ],
            "edits_made": {
                "removed_facts": [],
                "removed_rules": [
                    {
                        "fol": "\u00acp_11(Soren) \u2192 (\u00acp_10(Soren) \u2228 \u00acp_9(Soren))",
                        "nl": "If Soren is not innovative, then either he does not work precisely or he does not produce quality work."
                    },
                    {
                        "fol": "\u2200x (p_7(x) \u2192 p_9(x))",
                        "nl": "For all people, if someone is a master craftsman, then they produce quality work."
                    }
                ],
                "added_facts": [
                    {
                        "fol": "\u00acp_11(Soren)",
                        "nl": "Soren is not innovative."
                    },
                    {
                        "fol": "\u00acp_9(Soren)",
                        "nl": "Soren does not produce quality work."
                    }
                ],
                "added_rules": [
                    {
                        "fol": "(\u00acp_11(Soren) \u2227 p_10(Soren)) \u2192 \u00acp_9(Soren)",
                        "nl": "If Soren is not innovative and works precisely, then he does not produce quality work."
                    },
                    {
                        "fol": "\u2200x (\u00acp_9(x) \u2192 \u00acp_7(x))",
                        "nl": "For all people, if someone does not produce quality work, then they are not a master craftsman."
                    }
                ]
            },
            "conclusion": "Soren is not a master craftsman.",
            "conclusion_fol": "\u00acp_7(Soren)",
            "prover9_input": {
                "formulas(assumptions)": [
                    "p_5(Soren).",
                    "-p_6(Soren).",
                    "p_3(Soren).",
                    "-p_4(Soren).",
                    "p_2(Soren).",
                    "p_1(Soren).",
                    "-p_0(Soren).",
                    "p_5(Soren) -> (-(p_14(Soren) <-> p_6(Soren))).",
                    "p_3(Soren) -> (-(p_15(Soren) <-> p_4(Soren))).",
                    "p_2(Soren) -> (-(p_15(Soren) <-> p_13(Soren))).",
                    "all x (-p_10(x) -> -p_14(x)).",
                    "all x (p_1(x) -> (-p_13(x) -> p_12(x))).",
                    "all x (p_11(x) -> (p_12(x) -> p_0(x))).",
                    "(-p_11(Soren) & p_10(Soren)) -> -p_9(Soren).",
                    "all x (p_7(x) -> p_8(x)).",
                    "all x (-p_9(x) -> -p_7(x)).",
                    "p_14(Soren).",
                    "p_10(Soren).",
                    "p_15(Soren).",
                    "-p_13(Soren).",
                    "p_12(Soren).",
                    "-p_11(Soren).",
                    "-p_9(Soren)."
                ],
                "formulas(goals)": [
                    "-p_7(Soren)."
                ]
            },
            "answer": "True"
        },
        {
            "edit_number": 3,
            "modification_type": "INVARIANT",
            "edited_context_fol": [
                "p_5(Soren)",
                "\u00acp_6(Soren)",
                "p_3(Soren)",
                "\u00acp_4(Soren)",
                "p_2(Soren)",
                "p_1(Soren)",
                "\u00acp_0(Soren)",
                "p_5(Soren) \u2192 (p_14(Soren) \u2295 p_6(Soren))",
                "p_3(Soren) \u2192 (p_15(Soren) \u2295 p_4(Soren))",
                "p_2(Soren) \u2192 (p_15(Soren) \u2295 p_13(Soren))",
                "\u2200x (\u00acp_10(x) \u2192 \u00acp_14(x))",
                "\u2200x (p_1(x) \u2227 \u00acp_13(x) \u2192 p_12(x))",
                "\u2200x (p_11(x) \u2227 p_12(x) \u2192 p_0(x))",
                "(\u00acp_11(Soren) \u2227 p_10(Soren)) \u2192 \u00acp_9(Soren)",
                "\u2200x (p_7(x) \u2192 p_8(x))",
                "\u2200x (\u00acp_9(x) \u2192 \u00acp_7(x))",
                "p_14(Soren)",
                "p_10(Soren)",
                "p_15(Soren)",
                "\u00acp_13(Soren)",
                "p_12(Soren)",
                "\u00acp_11(Soren)",
                "\u00acp_9(Soren)",
                "\u2200x (p_7(x) \u2192 p_9(x))",
                "p_12(Soren) \u2228 p_11(Soren)"
            ],
            "edited_natural_language_context": [
                "Soren has patience.",
                "Soren does not learn quickly.",
                "Soren is artistic.",
                "Soren is not imaginative.",
                "Soren is experienced.",
                "Soren is dedicated.",
                "Soren does not create beauty.",
                "If Soren has patience, then he is either skilled or learns quickly, but not both.",
                "If Soren is artistic, then he is either creative or imaginative, but not both.",
                "If Soren is experienced, then he either has creativity or tells stories through his craft, but not both.",
                "For all people, if someone does not work precisely, then they are not skilled.",
                "For all people, if someone is dedicated and does not tell stories through their work, then they have passion.",
                "For all people, if someone is innovative and has passion, then they create beauty.",
                "If Soren is not innovative and works precisely, then he does not produce quality work.",
                "For all people, if someone is a master craftsman, then they are attentive to detail.",
                "For all people, if someone does not produce quality work, then they are not a master craftsman.",
                "Soren is skilled.",
                "Soren works precisely.",
                "Soren has creativity.",
                "Soren does not tell stories through his craft.",
                "Soren has passion.",
                "Soren is not innovative.",
                "Soren does not produce quality work.",
                "For all people, if someone is a master craftsman, then they produce quality work.",
                "Soren has passion or Soren is innovative."
            ],
            "edits_made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    {
                        "fol": "p_12(Soren) \u2228 p_11(Soren)",
                        "nl": "Soren has passion or Soren is innovative."
                    }
                ],
                "added_rules": [
                    {
                        "fol": "\u2200x (p_1(x) \u2227 \u00acp_13(x) \u2192 p_12(x))",
                        "nl": "For all people, if someone is dedicated and does not tell stories through their work, then they have passion."
                    },
                    {
                        "fol": "\u2200x (p_11(x) \u2227 p_12(x) \u2192 p_0(x))",
                        "nl": "For all people, if someone is innovative and has passion, then they create beauty."
                    },
                    {
                        "fol": "\u2200x (p_7(x) \u2192 p_9(x))",
                        "nl": "For all people, if someone is a master craftsman, then they produce quality work."
                    }
                ]
            },
            "conclusion": "Soren is not a master craftsman.",
            "conclusion_fol": "\u00acp_7(Soren)",
            "prover9_input": {
                "formulas(assumptions)": [
                    "p_5(Soren).",
                    "-p_6(Soren).",
                    "p_3(Soren).",
                    "-p_4(Soren).",
                    "p_2(Soren).",
                    "p_1(Soren).",
                    "-p_0(Soren).",
                    "p_5(Soren) -> (-(p_14(Soren) <-> p_6(Soren))).",
                    "p_3(Soren) -> (-(p_15(Soren) <-> p_4(Soren))).",
                    "p_2(Soren) -> (-(p_15(Soren) <-> p_13(Soren))).",
                    "all x (-p_10(x) -> -p_14(x)).",
                    "all x (p_1(x) & -p_13(x) -> p_12(x)).",
                    "all x (p_11(x) & p_12(x) -> p_0(x)).",
                    "(-p_11(Soren) & p_10(Soren)) -> -p_9(Soren).",
                    "all x (p_7(x) -> p_8(x)).",
                    "all x (-p_9(x) -> -p_7(x)).",
                    "p_14(Soren).",
                    "p_10(Soren).",
                    "p_15(Soren).",
                    "-p_13(Soren).",
                    "p_12(Soren).",
                    "-p_11(Soren).",
                    "-p_9(Soren).",
                    "all x (p_7(x) -> p_9(x)).",
                    "p_12(Soren) | p_11(Soren)."
                ],
                "formulas(goals)": [
                    "-p_7(Soren)."
                ]
            },
            "answer": "True"
        },
        {
            "edit_number": 4,
            "modification_type": "FLIP",
            "edited_context_fol": [
                "p_5(Soren)",
                "\u00acp_6(Soren)",
                "p_3(Soren)",
                "\u00acp_4(Soren)",
                "p_2(Soren)",
                "p_1(Soren)",
                "\u00acp_0(Soren)",
                "p_5(Soren) \u2192 (p_14(Soren) \u2295 p_6(Soren))",
                "p_3(Soren) \u2192 (p_15(Soren) \u2295 p_4(Soren))",
                "p_2(Soren) \u2192 (p_15(Soren) \u2295 p_13(Soren))",
                "\u2200x (\u00acp_10(x) \u2192 \u00acp_14(x))",
                "\u2200x (p_1(x) \u2227 \u00acp_13(x) \u2192 p_12(x))",
                "\u2200x (p_11(x) \u2227 p_12(x) \u2192 p_0(x))",
                "(\u00acp_11(Soren) \u2227 p_10(Soren)) \u2192 \u00acp_9(Soren)",
                "\u2200x (p_7(x) \u2192 p_8(x))",
                "p_14(Soren)",
                "p_10(Soren)",
                "p_15(Soren)",
                "\u00acp_13(Soren)",
                "p_12(Soren)",
                "\u00acp_11(Soren)",
                "\u2200x (p_7(x) \u2192 p_9(x))",
                "p_12(Soren) \u2228 p_11(Soren)",
                "p_9(Soren)",
                "p_9(Soren) \u2192 p_7(Soren)"
            ],
            "edited_natural_language_context": [
                "Soren has patience.",
                "Soren does not learn quickly.",
                "Soren is artistic.",
                "Soren is not imaginative.",
                "Soren is experienced.",
                "Soren is dedicated.",
                "Soren does not create beauty.",
                "If Soren has patience, then he is either skilled or learns quickly, but not both.",
                "If Soren is artistic, then he is either creative or imaginative, but not both.",
                "If Soren is experienced, then he either has creativity or tells stories through his craft, but not both.",
                "For all people, if someone does not work precisely, then they are not skilled.",
                "For all people, if someone is dedicated and does not tell stories through their work, then they have passion.",
                "For all people, if someone is innovative and has passion, then they create beauty.",
                "If Soren is not innovative and works precisely, then he does not produce quality work.",
                "For all people, if someone is a master craftsman, then they are attentive to detail.",
                "Soren is skilled.",
                "Soren works precisely.",
                "Soren has creativity.",
                "Soren does not tell stories through his craft.",
                "Soren has passion.",
                "Soren is not innovative.",
                "For all people, if someone is a master craftsman, then they produce quality work.",
                "Soren has passion or Soren is innovative.",
                "Soren produces quality work.",
                "If Soren produces quality work, then he is a master craftsman."
            ],
            "edits_made": {
                "removed_facts": [
                    {
                        "fol": "\u00acp_9(Soren)",
                        "nl": "Soren does not produce quality work."
                    }
                ],
                "removed_rules": [
                    {
                        "fol": "\u2200x (\u00acp_9(x) \u2192 \u00acp_7(x))",
                        "nl": "For all people, if someone does not produce quality work, then they are not a master craftsman."
                    }
                ],
                "added_facts": [
                    {
                        "fol": "p_9(Soren)",
                        "nl": "Soren produces quality work."
                    }
                ],
                "added_rules": [
                    {
                        "fol": "p_9(Soren) \u2192 p_7(Soren)",
                        "nl": "If Soren produces quality work, then he is a master craftsman."
                    }
                ]
            },
            "conclusion": "Soren is not a master craftsman.",
            "conclusion_fol": "\u00acp_7(Soren)",
            "prover9_input": {
                "formulas(assumptions)": [
                    "p_5(Soren).",
                    "-p_6(Soren).",
                    "p_3(Soren).",
                    "-p_4(Soren).",
                    "p_2(Soren).",
                    "p_1(Soren).",
                    "-p_0(Soren).",
                    "p_5(Soren) -> (-(p_14(Soren) <-> p_6(Soren))).",
                    "p_3(Soren) -> (-(p_15(Soren) <-> p_4(Soren))).",
                    "p_2(Soren) -> (-(p_15(Soren) <-> p_13(Soren))).",
                    "all x (-p_10(x) -> -p_14(x)).",
                    "all x ((p_1(x) & -p_13(x)) -> p_12(x)).",
                    "all x ((p_11(x) & p_12(x)) -> p_0(x)).",
                    "(-p_11(Soren) & p_10(Soren)) -> -p_9(Soren).",
                    "all x (p_7(x) -> p_8(x)).",
                    "p_14(Soren).",
                    "p_10(Soren).",
                    "p_15(Soren).",
                    "-p_13(Soren).",
                    "p_12(Soren).",
                    "-p_11(Soren).",
                    "all x (p_7(x) -> p_9(x)).",
                    "p_12(Soren) | p_11(Soren).",
                    "p_9(Soren).",
                    "p_9(Soren) -> p_7(Soren)."
                ],
                "formulas(goals)": [
                    "p_7(Soren)."
                ]
            },
            "answer": "False"
        },
        {
            "edit_number": 5,
            "modification_type": "FLIP",
            "edited_context_fol": [
                "p_5(Soren)",
                "\u00acp_6(Soren)",
                "p_3(Soren)",
                "\u00acp_4(Soren)",
                "p_2(Soren)",
                "p_1(Soren)",
                "\u00acp_0(Soren)",
                "p_5(Soren) \u2192 (p_14(Soren) \u2295 p_6(Soren))",
                "p_3(Soren) \u2192 (p_15(Soren) \u2295 p_4(Soren))",
                "p_2(Soren) \u2192 (p_15(Soren) \u2295 p_13(Soren))",
                "\u2200x (\u00acp_10(x) \u2192 \u00acp_14(x))",
                "\u2200x (p_1(x) \u2227 \u00acp_13(x) \u2192 p_12(x))",
                "\u2200x (p_11(x) \u2227 p_12(x) \u2192 p_0(x))",
                "\u2200x (p_7(x) \u2192 p_8(x))",
                "p_14(Soren)",
                "p_10(Soren)",
                "p_15(Soren)",
                "\u00acp_13(Soren)",
                "p_12(Soren)",
                "\u00acp_11(Soren)",
                "\u2200x (p_7(x) \u2192 p_9(x))",
                "p_12(Soren) \u2228 p_11(Soren)",
                "p_9(Soren)",
                "p_9(Soren) \u2192 \u00acp_7(Soren)"
            ],
            "edited_natural_language_context": [
                "Soren has patience.",
                "Soren does not learn quickly.",
                "Soren is artistic.",
                "Soren is not imaginative.",
                "Soren is experienced.",
                "Soren is dedicated.",
                "Soren does not create beauty.",
                "If Soren has patience, then he is either skilled or learns quickly, but not both.",
                "If Soren is artistic, then he is either creative or imaginative, but not both.",
                "If Soren is experienced, then he either has creativity or tells stories through his craft, but not both.",
                "For all people, if someone does not work precisely, then they are not skilled.",
                "For all people, if someone is dedicated and does not tell stories through their work, then they have passion.",
                "For all people, if someone is innovative and has passion, then they create beauty.",
                "For all people, if someone is a master craftsman, then they are attentive to detail.",
                "Soren is skilled.",
                "Soren works precisely.",
                "Soren has creativity.",
                "Soren does not tell stories through his craft.",
                "Soren has passion.",
                "Soren is not innovative.",
                "For all people, if someone is a master craftsman, then they produce quality work.",
                "Soren has passion or Soren is innovative.",
                "Soren produces quality work.",
                "If Soren produces quality work, then he is not a master craftsman."
            ],
            "edits_made": {
                "removed_facts": [],
                "removed_rules": [
                    {
                        "fol": "(\u00acp_11(Soren) \u2227 p_10(Soren)) \u2192 \u00acp_9(Soren)",
                        "nl": "If Soren is not innovative and works precisely, then he does not produce quality work."
                    }
                ],
                "added_facts": [],
                "added_rules": [
                    {
                        "fol": "p_9(Soren) \u2192 \u00acp_7(Soren)",
                        "nl": "If Soren produces quality work, then he is not a master craftsman."
                    }
                ]
            },
            "conclusion": "Soren is not a master craftsman.",
            "conclusion_fol": "\u00acp_7(Soren)",
            "prover9_input": {
                "formulas(assumptions)": [
                    "p_5(Soren).",
                    "-p_6(Soren).",
                    "p_3(Soren).",
                    "-p_4(Soren).",
                    "p_2(Soren).",
                    "p_1(Soren).",
                    "-p_0(Soren).",
                    "p_5(Soren) -> (-(p_14(Soren) <-> p_6(Soren))).",
                    "p_3(Soren) -> (-(p_15(Soren) <-> p_4(Soren))).",
                    "p_2(Soren) -> (-(p_15(Soren) <-> p_13(Soren))).",
                    "all x (-p_10(x) -> -p_14(x)).",
                    "all x (p_1(x) & -p_13(x) -> p_12(x)).",
                    "all x (p_11(x) & p_12(x) -> p_0(x)).",
                    "all x (p_7(x) -> p_8(x)).",
                    "p_14(Soren).",
                    "p_10(Soren).",
                    "p_15(Soren).",
                    "-p_13(Soren).",
                    "p_12(Soren).",
                    "-p_11(Soren).",
                    "all x (p_7(x) -> p_9(x)).",
                    "p_12(Soren) | p_11(Soren).",
                    "p_9(Soren).",
                    "p_9(Soren) -> -p_7(Soren)."
                ],
                "formulas(goals)": [
                    "-p_7(Soren)."
                ]
            },
            "answer": "True"
        },
        {
            "edit_number": 6,
            "modification_type": "INVARIANT",
            "edited_context_fol": [
                "p_5(Soren)",
                "\u00acp_6(Soren)",
                "p_3(Soren)",
                "\u00acp_4(Soren)",
                "p_2(Soren)",
                "p_1(Soren)",
                "\u00acp_0(Soren)",
                "p_5(Soren) \u2192 (p_14(Soren) \u2295 p_6(Soren))",
                "p_3(Soren) \u2192 (p_15(Soren) \u2295 p_4(Soren))",
                "p_2(Soren) \u2192 (p_15(Soren) \u2295 p_13(Soren))",
                "\u2200x (\u00acp_10(x) \u2192 \u00acp_14(x))",
                "\u2200x ((p_1(x) \u2227 \u00acp_13(x)) \u2192 p_12(x))",
                "\u2200x ((p_11(x) \u2227 p_12(x)) \u2192 p_0(x))",
                "\u2200x (p_7(x) \u2192 p_8(x))",
                "p_14(Soren)",
                "p_10(Soren)",
                "p_15(Soren)",
                "\u00acp_13(Soren)",
                "p_12(Soren)",
                "\u00acp_11(Soren)",
                "\u2200x (p_7(x) \u2192 p_9(x))",
                "p_12(Soren) \u2228 p_11(Soren)",
                "p_9(Soren)",
                "p_9(Soren) \u2192 \u00acp_7(Soren)",
                "p_7(Soren) \u2192 \u00acp_9(Soren)",
                "\u2200x (p_7(x) \u2192 (p_8(x) \u2227 p_9(x)))"
            ],
            "edited_natural_language_context": [
                "Soren has patience.",
                "Soren does not learn quickly.",
                "Soren is artistic.",
                "Soren is not imaginative.",
                "Soren is experienced.",
                "Soren is dedicated.",
                "Soren does not create beauty.",
                "If Soren has patience, then he is either skilled or learns quickly, but not both.",
                "If Soren is artistic, then he is either creative or imaginative, but not both.",
                "If Soren is experienced, then he either has creativity or tells stories through his craft, but not both.",
                "For all people, if someone does not work precisely, then they are not skilled.",
                "For all people, if someone is dedicated and does not tell stories through their work, then they have passion.",
                "For all people, if someone is innovative and has passion, then they create beauty.",
                "For all people, if someone is a master craftsman, then they are attentive to detail.",
                "Soren is skilled.",
                "Soren works precisely.",
                "Soren has creativity.",
                "Soren does not tell stories through his craft.",
                "Soren has passion.",
                "Soren is not innovative.",
                "For all people, if someone is a master craftsman, then they produce quality work.",
                "Soren has passion or Soren is innovative.",
                "Soren produces quality work.",
                "If Soren produces quality work, then he is not a master craftsman.",
                "If Soren is a master craftsman, then he does not produce quality work.",
                "For all people, if someone is a master craftsman, then they are attentive to detail and produce quality work."
            ],
            "edits_made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    {
                        "fol": "p_7(Soren) \u2192 \u00acp_9(Soren)",
                        "nl": "If Soren is a master craftsman, then he does not produce quality work."
                    },
                    {
                        "fol": "\u2200x (p_7(x) \u2192 (p_8(x) \u2227 p_9(x)))",
                        "nl": "For all people, if someone is a master craftsman, then they are attentive to detail and produce quality work."
                    }
                ]
            },
            "conclusion": "Soren is not a master craftsman.",
            "conclusion_fol": "\u00acp_7(Soren)",
            "prover9_input": {
                "formulas(assumptions)": [
                    "p_5(Soren)",
                    "-p_6(Soren)",
                    "p_3(Soren)",
                    "-p_4(Soren)",
                    "p_2(Soren)",
                    "p_1(Soren)",
                    "-p_0(Soren)",
                    "p_5(Soren) -> (-(p_14(Soren) <-> p_6(Soren)))",
                    "p_3(Soren) -> (-(p_15(Soren) <-> p_4(Soren)))",
                    "p_2(Soren) -> (-(p_15(Soren) <-> p_13(Soren)))",
                    "all x (-p_10(x) -> -p_14(x))",
                    "all x ((p_1(x) & -p_13(x)) -> p_12(x))",
                    "all x ((p_11(x) & p_12(x)) -> p_0(x))",
                    "all x (p_7(x) -> p_8(x))",
                    "p_14(Soren)",
                    "p_10(Soren)",
                    "p_15(Soren)",
                    "-p_13(Soren)",
                    "p_12(Soren)",
                    "-p_11(Soren)",
                    "all x (p_7(x) -> p_9(x))",
                    "p_12(Soren) | p_11(Soren)",
                    "p_9(Soren)",
                    "p_9(Soren) -> -p_7(Soren)",
                    "p_7(Soren) -> -p_9(Soren)",
                    "all x (p_7(x) -> (p_8(x) & p_9(x)))"
                ],
                "formulas(goals)": [
                    "-p_7(Soren)"
                ]
            },
            "answer": "True"
        },
        {
            "edit_number": 7,
            "modification_type": "FLIP",
            "edited_context_fol": [
                "p_5(Soren)",
                "\u00acp_6(Soren)",
                "p_3(Soren)",
                "\u00acp_4(Soren)",
                "p_2(Soren)",
                "p_1(Soren)",
                "\u00acp_0(Soren)",
                "\u00ac(p_14(Soren) \u2194 p_6(Soren))",
                "\u00ac(p_15(Soren) \u2194 p_4(Soren))",
                "\u00ac(p_15(Soren) \u2194 p_13(Soren))",
                "\u2200x (\u00ac\u00acp_10(x) \u2192 \u00acp_14(x))",
                "\u2200x ((p_1(x) \u2227 \u00acp_13(x)) \u2192 p_12(x))",
                "\u2200x ((p_11(x) \u2227 p_12(x)) \u2192 p_0(x))",
                "\u2200x (p_7(x) \u2192 p_8(x))",
                "p_14(Soren)",
                "p_10(Soren)",
                "p_15(Soren)",
                "\u00acp_13(Soren)",
                "p_12(Soren)",
                "\u00acp_11(Soren)",
                "\u2200x (p_7(x) \u2192 p_9(x))",
                "p_5(Soren) \u2192 p_7(Soren)"
            ],
            "edited_natural_language_context": [
                "Soren has patience.",
                "Soren does not learn quickly.",
                "Soren is artistic.",
                "Soren is not imaginative.",
                "Soren is experienced.",
                "Soren is dedicated.",
                "Soren does not create beauty.",
                "Soren's skill and ability to learn quickly are not equivalent.",
                "Soren's creativity and imagination are not equivalent.",
                "Soren's creativity and storytelling are not equivalent.",
                "For all people, if someone works precisely, then they are not skilled.",
                "For all people, if someone is dedicated and does not tell stories through their work, then they have passion.",
                "For all people, if someone is innovative and has passion, then they create beauty.",
                "For all people, if someone is a master craftsman, then they are attentive to detail.",
                "Soren is skilled.",
                "Soren works precisely.",
                "Soren has creativity.",
                "Soren does not tell stories through his craft.",
                "Soren has passion.",
                "Soren is not innovative.",
                "For all people, if someone is a master craftsman, then they produce quality work.",
                "If Soren has patience, then he is a master craftsman."
            ],
            "edits_made": {
                "removed_facts": [
                    {
                        "fol": "p_9(Soren)",
                        "nl": "Soren produces quality work."
                    }
                ],
                "removed_rules": [
                    {
                        "fol": "p_9(Soren) \u2192 \u00acp_7(Soren)",
                        "nl": "If Soren produces quality work, then he is not a master craftsman."
                    },
                    {
                        "fol": "p_7(Soren) \u2192 \u00acp_9(Soren)",
                        "nl": "If Soren is a master craftsman, then he does not produce quality work."
                    },
                    {
                        "fol": "\u2200x (p_7(x) \u2192 (p_8(x) \u2227 p_9(x)))",
                        "nl": "For all people, if someone is a master craftsman, then they are attentive to detail and produce quality work."
                    }
                ],
                "added_facts": [],
                "added_rules": [
                    {
                        "fol": "p_5(Soren) \u2192 p_7(Soren)",
                        "nl": "If Soren has patience, then he is a master craftsman."
                    }
                ]
            },
            "conclusion": "Soren is not a master craftsman.",
            "conclusion_fol": "\u00acp_7(Soren)",
            "prover9_input": {
                "formulas(assumptions)": [
                    "p_5(Soren)",
                    "-p_6(Soren)",
                    "p_3(Soren)",
                    "-p_4(Soren)",
                    "p_2(Soren)",
                    "p_1(Soren)",
                    "-p_0(Soren)",
                    "-(p_14(Soren) <-> p_6(Soren))",
                    "-(p_15(Soren) <-> p_4(Soren))",
                    "-(p_15(Soren) <-> p_13(Soren))",
                    "- -p_10(x) | -p_14(x)",
                    "-p_1(x) | p_13(x) | p_12(x)",
                    "-p_11(x) | -p_12(x) | p_0(x)",
                    "-p_7(x) | p_8(x)",
                    "p_14(Soren)",
                    "p_10(Soren)",
                    "p_15(Soren)",
                    "-p_13(Soren)",
                    "p_12(Soren)",
                    "-p_11(Soren)",
                    "-p_7(x) | p_9(x)",
                    "-p_5(Soren) | p_7(Soren)"
                ],
                "formulas(goals)": [
                    "--p_7(Soren)"
                ]
            },
            "answer": "False"
        }
    ]
}