{
    "background_story": "Matteo, a charismatic Italian, had a passion for public speaking and bringing people together. He joined Toastmasters to hone his skills and soon became known as the 'Toastmaster Extraordinaire.' With his infectious enthusiasm and quick wit, Matteo could command any room, making even the most skeptical audience members feel at ease. He went on to win several regional speaking competitions, but his true joy lay in helping others find their voice. Matteo started a community Toastmasters club, where he mentored aspiring speakers and helped them build confidence. His dedication and natural talent earned him the prestigious 'Distinguished Toastmaster' award, solidifying his reputation as a master communicator and leader.",
    "predicates": [
        {
            "id": 0,
            "name": "leads_team"
        },
        {
            "id": 1,
            "name": "has_passion"
        },
        {
            "id": 2,
            "name": "speaks_confidently"
        },
        {
            "id": 3,
            "name": "is_authentic"
        },
        {
            "id": 4,
            "name": "outgoing"
        },
        {
            "id": 5,
            "name": "introverted"
        },
        {
            "id": 6,
            "name": "listens"
        },
        {
            "id": 7,
            "name": "speaks_fluently"
        },
        {
            "id": 8,
            "name": "engages_audience"
        },
        {
            "id": 9,
            "name": "thinks_clearly"
        },
        {
            "id": 10,
            "name": "communicates_effectively"
        },
        {
            "id": 11,
            "name": "inspires_others"
        },
        {
            "id": 12,
            "name": "expresses_himself"
        },
        {
            "id": 13,
            "name": "likes_alone"
        },
        {
            "id": 14,
            "name": "avoids_spotlight"
        },
        {
            "id": 15,
            "name": "asks_questions"
        },
        {
            "id": 16,
            "name": "is_attentive"
        },
        {
            "id": 17,
            "name": "practices_daily"
        },
        {
            "id": 18,
            "name": "gets_feedback"
        },
        {
            "id": 19,
            "name": "tells_stories"
        },
        {
            "id": 20,
            "name": "uses_humor"
        },
        {
            "id": 21,
            "name": "is_articulate"
        },
        {
            "id": 22,
            "name": "has_charisma"
        },
        {
            "id": 23,
            "name": "is_persuasive"
        },
        {
            "id": 24,
            "name": "motivates_people"
        },
        {
            "id": 25,
            "name": "shares_ideas"
        }
    ],
    "subject_name": "Matteo",
    "subject_category": "human",
    "keyword": "toastmaster",
    "all_facts": [
        {
            "id": 0,
            "subject": "Matteo",
            "text": "Matteo does not lead a team.",
            "fol": "\u00acp_0(Matteo)",
            "str_fol": "\u00acleads_team(Matteo)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Matteo",
            "text": "Matteo has passion.",
            "fol": "p_1(Matteo)",
            "str_fol": "has_passion(Matteo)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Matteo",
            "text": "Matteo does not speak confidently.",
            "fol": "\u00acp_2(Matteo)",
            "str_fol": "\u00acspeaks_confidently(Matteo)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Matteo",
            "text": "Matteo is authentic.",
            "fol": "p_3(Matteo)",
            "str_fol": "is_authentic(Matteo)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Matteo",
            "text": "Matteo cannot express himself.",
            "fol": "\u00acp_12(Matteo)",
            "str_fol": "\u00acexpresses_himself(Matteo)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Matteo",
            "text": "Matteo does not inspire others.",
            "fol": "\u00acp_11(Matteo)",
            "str_fol": "\u00acinspires_others(Matteo)",
            "negation": true
        },
        {
            "id": 6,
            "subject": "Matteo",
            "text": "Matteo does not think clearly.",
            "fol": "\u00acp_9(Matteo)",
            "str_fol": "\u00acthinks_clearly(Matteo)",
            "negation": true
        },
        {
            "id": 7,
            "subject": "Matteo",
            "text": "Matteo does not communicate effectively.",
            "fol": "\u00acp_10(Matteo)",
            "str_fol": "\u00accommunicates_effectively(Matteo)",
            "negation": true
        },
        {
            "id": 8,
            "subject": "Matteo",
            "text": "Matteo does not engage the audience.",
            "fol": "\u00acp_8(Matteo)",
            "str_fol": "\u00acengages_audience(Matteo)",
            "negation": true
        },
        {
            "id": 9,
            "subject": "Matteo",
            "text": "Matteo speaks fluently.",
            "fol": "p_7(Matteo)",
            "str_fol": "speaks_fluently(Matteo)",
            "negation": false
        },
        {
            "id": 10,
            "subject": "Matteo",
            "text": "Matteo does not listen.",
            "fol": "\u00acp_6(Matteo)",
            "str_fol": "\u00aclistens(Matteo)",
            "negation": true
        },
        {
            "id": 11,
            "subject": "Matteo",
            "text": "Matteo is not introverted.",
            "fol": "\u00acp_5(Matteo)",
            "str_fol": "\u00acintroverted(Matteo)",
            "negation": true
        },
        {
            "id": 12,
            "subject": "Matteo",
            "text": "Matteo is not outgoing.",
            "fol": "\u00acp_4(Matteo)",
            "str_fol": "\u00acoutgoing(Matteo)",
            "negation": true
        }
    ],
    "context_facts": [
        {
            "id": 3,
            "subject": "Matteo",
            "text": "Matteo is authentic.",
            "fol": "p_3(Matteo)",
            "str_fol": "is_authentic(Matteo)",
            "negation": false
        },
        {
            "id": 0,
            "subject": "Matteo",
            "text": "Matteo does not lead a team.",
            "fol": "\u00acp_0(Matteo)",
            "str_fol": "\u00acleads_team(Matteo)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Matteo",
            "text": "Matteo does not speak confidently.",
            "fol": "\u00acp_2(Matteo)",
            "str_fol": "\u00acspeaks_confidently(Matteo)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Matteo",
            "text": "Matteo has passion.",
            "fol": "p_1(Matteo)",
            "str_fol": "has_passion(Matteo)",
            "negation": false
        }
    ],
    "context_rules": [
        {
            "id": 8,
            "text": "Matteo is either authentic or able to express himself, but being one does not guarantee the other.",
            "fol": "p_3(Matteo) \u2295 p_12(Matteo)",
            "str_fol": "is_authentic(Matteo) \u2295 expresses_himself(Matteo)"
        },
        {
            "id": 7,
            "text": "If Matteo inspires others, then he can lead a team.",
            "fol": "p_11(Matteo) \u2192 p_0(Matteo)",
            "str_fol": "inspires_others(Matteo) \u2192 leads_team(Matteo)"
        },
        {
            "id": 6,
            "text": "Anyone who speaks confidently or thinks clearly can express themselves.",
            "fol": "\u2200x ((p_2(x) \u2228 p_9(x)) \u2192 p_12(x))",
            "str_fol": "\u2200x ((speaks_confidently(x) \u2228 thinks_clearly(x)) \u2192 expresses_himself(x))"
        },
        {
            "id": 5,
            "text": "If someone has passion and communicates effectively, then they can inspire others.",
            "fol": "\u2200x ((p_1(x) \u2227 p_10(x)) \u2192 p_11(x))",
            "str_fol": "\u2200x ((has_passion(x) \u2227 communicates_effectively(x)) \u2192 inspires_others(x))"
        },
        {
            "id": 4,
            "text": "Anyone who thinks clearly or engages the audience can communicate effectively.",
            "fol": "\u2200x ((p_9(x) \u2228 p_8(x)) \u2192 p_10(x))",
            "str_fol": "\u2200x ((thinks_clearly(x) \u2228 engages_audience(x)) \u2192 communicates_effectively(x))"
        },
        {
            "id": 3,
            "text": "Matteo either speaks fluently or engages the audience.",
            "fol": "p_7(Matteo) \u2228 p_8(Matteo)",
            "str_fol": "speaks_fluently(Matteo) \u2228 engages_audience(Matteo)"
        },
        {
            "id": 2,
            "text": "A person either listens well or speaks fluently, but not necessarily both.",
            "fol": "\u2200x (p_6(x) \u2295 p_7(x))",
            "str_fol": "\u2200x (listens(x) \u2295 speaks_fluently(x))"
        },
        {
            "id": 1,
            "text": "If someone is introverted, then they listen well.",
            "fol": "\u2200x (p_5(x) \u2192 p_6(x))",
            "str_fol": "\u2200x (introverted(x) \u2192 listens(x))"
        },
        {
            "id": 0,
            "text": "Matteo is either outgoing or introverted, but not both.",
            "fol": "p_4(Matteo) \u2295 p_5(Matteo)",
            "str_fol": "outgoing(Matteo) \u2295 introverted(Matteo)"
        }
    ],
    "context": [
        {
            "id": 3,
            "subject": "Matteo",
            "text": "Matteo is authentic.",
            "fol": "p_3(Matteo)",
            "str_fol": "is_authentic(Matteo)",
            "negation": false
        },
        {
            "id": 0,
            "subject": "Matteo",
            "text": "Matteo does not lead a team.",
            "fol": "\u00acp_0(Matteo)",
            "str_fol": "\u00acleads_team(Matteo)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Matteo",
            "text": "Matteo does not speak confidently.",
            "fol": "\u00acp_2(Matteo)",
            "str_fol": "\u00acspeaks_confidently(Matteo)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Matteo",
            "text": "Matteo has passion.",
            "fol": "p_1(Matteo)",
            "str_fol": "has_passion(Matteo)",
            "negation": false
        },
        {
            "id": 8,
            "text": "Matteo is either authentic or able to express himself, but being one does not guarantee the other.",
            "fol": "p_3(Matteo) \u2295 p_12(Matteo)",
            "str_fol": "is_authentic(Matteo) \u2295 expresses_himself(Matteo)"
        },
        {
            "id": 7,
            "text": "If Matteo inspires others, then he can lead a team.",
            "fol": "p_11(Matteo) \u2192 p_0(Matteo)",
            "str_fol": "inspires_others(Matteo) \u2192 leads_team(Matteo)"
        },
        {
            "id": 6,
            "text": "Anyone who speaks confidently or thinks clearly can express themselves.",
            "fol": "\u2200x ((p_2(x) \u2228 p_9(x)) \u2192 p_12(x))",
            "str_fol": "\u2200x ((speaks_confidently(x) \u2228 thinks_clearly(x)) \u2192 expresses_himself(x))"
        },
        {
            "id": 5,
            "text": "If someone has passion and communicates effectively, then they can inspire others.",
            "fol": "\u2200x ((p_1(x) \u2227 p_10(x)) \u2192 p_11(x))",
            "str_fol": "\u2200x ((has_passion(x) \u2227 communicates_effectively(x)) \u2192 inspires_others(x))"
        },
        {
            "id": 4,
            "text": "Anyone who thinks clearly or engages the audience can communicate effectively.",
            "fol": "\u2200x ((p_9(x) \u2228 p_8(x)) \u2192 p_10(x))",
            "str_fol": "\u2200x ((thinks_clearly(x) \u2228 engages_audience(x)) \u2192 communicates_effectively(x))"
        },
        {
            "id": 3,
            "text": "Matteo either speaks fluently or engages the audience.",
            "fol": "p_7(Matteo) \u2228 p_8(Matteo)",
            "str_fol": "speaks_fluently(Matteo) \u2228 engages_audience(Matteo)"
        },
        {
            "id": 2,
            "text": "A person either listens well or speaks fluently, but not necessarily both.",
            "fol": "\u2200x (p_6(x) \u2295 p_7(x))",
            "str_fol": "\u2200x (listens(x) \u2295 speaks_fluently(x))"
        },
        {
            "id": 1,
            "text": "If someone is introverted, then they listen well.",
            "fol": "\u2200x (p_5(x) \u2192 p_6(x))",
            "str_fol": "\u2200x (introverted(x) \u2192 listens(x))"
        },
        {
            "id": 0,
            "text": "Matteo is either outgoing or introverted, but not both.",
            "fol": "p_4(Matteo) \u2295 p_5(Matteo)",
            "str_fol": "outgoing(Matteo) \u2295 introverted(Matteo)"
        }
    ],
    "context_fol": "p_3(Matteo)\n\u00acp_0(Matteo)\n\u00acp_2(Matteo)\np_1(Matteo)\np_3(Matteo) \u2295 p_12(Matteo)\np_11(Matteo) \u2192 p_0(Matteo)\n\u2200x ((p_2(x) \u2228 p_9(x)) \u2192 p_12(x))\n\u2200x ((p_1(x) \u2227 p_10(x)) \u2192 p_11(x))\n\u2200x ((p_9(x) \u2228 p_8(x)) \u2192 p_10(x))\np_7(Matteo) \u2228 p_8(Matteo)\n\u2200x (p_6(x) \u2295 p_7(x))\n\u2200x (p_5(x) \u2192 p_6(x))\np_4(Matteo) \u2295 p_5(Matteo)",
    "conclusion": {
        "id": 12,
        "subject": "Matteo",
        "text": "Matteo is not outgoing.",
        "fol": "\u00acp_4(Matteo)",
        "str_fol": "\u00acoutgoing(Matteo)",
        "negation": true
    },
    "initial_answer": "False",
    "initial_goal": "\u00acp_4(Matteo)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 3,
                    "subject": "Matteo",
                    "text": "Matteo is authentic.",
                    "fol": "p_3(Matteo)",
                    "str_fol": "is_authentic(Matteo)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 8,
                    "text": "Matteo is either authentic or able to express himself, but being one does not guarantee the other.",
                    "fol": "p_3(Matteo) \u2295 p_12(Matteo)",
                    "str_fol": "is_authentic(Matteo) \u2295 expresses_himself(Matteo)"
                }
            ],
            "conclusion": {
                "id": 4,
                "subject": "Matteo",
                "text": "Matteo cannot express himself.",
                "fol": "\u00acp_12(Matteo)",
                "str_fol": "\u00acexpresses_himself(Matteo)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 0,
                    "subject": "Matteo",
                    "text": "Matteo does not lead a team.",
                    "fol": "\u00acp_0(Matteo)",
                    "str_fol": "\u00acleads_team(Matteo)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 7,
                    "text": "If Matteo inspires others, then he can lead a team.",
                    "fol": "p_11(Matteo) \u2192 p_0(Matteo)",
                    "str_fol": "inspires_others(Matteo) \u2192 leads_team(Matteo)"
                }
            ],
            "conclusion": {
                "id": 5,
                "subject": "Matteo",
                "text": "Matteo does not inspire others.",
                "fol": "\u00acp_11(Matteo)",
                "str_fol": "\u00acinspires_others(Matteo)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 2,
                    "subject": "Matteo",
                    "text": "Matteo does not speak confidently.",
                    "fol": "\u00acp_2(Matteo)",
                    "str_fol": "\u00acspeaks_confidently(Matteo)",
                    "negation": true
                },
                {
                    "id": 4,
                    "subject": "Matteo",
                    "text": "Matteo cannot express himself.",
                    "fol": "\u00acp_12(Matteo)",
                    "str_fol": "\u00acexpresses_himself(Matteo)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 6,
                    "text": "Anyone who speaks confidently or thinks clearly can express themselves.",
                    "fol": "\u2200x ((p_2(x) \u2228 p_9(x)) \u2192 p_12(x))",
                    "str_fol": "\u2200x ((speaks_confidently(x) \u2228 thinks_clearly(x)) \u2192 expresses_himself(x))"
                }
            ],
            "conclusion": {
                "id": 6,
                "subject": "Matteo",
                "text": "Matteo does not think clearly.",
                "fol": "\u00acp_9(Matteo)",
                "str_fol": "\u00acthinks_clearly(Matteo)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 1,
                    "subject": "Matteo",
                    "text": "Matteo has passion.",
                    "fol": "p_1(Matteo)",
                    "str_fol": "has_passion(Matteo)",
                    "negation": false
                },
                {
                    "id": 5,
                    "subject": "Matteo",
                    "text": "Matteo does not inspire others.",
                    "fol": "\u00acp_11(Matteo)",
                    "str_fol": "\u00acinspires_others(Matteo)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "If someone has passion and communicates effectively, then they can inspire others.",
                    "fol": "\u2200x ((p_1(x) \u2227 p_10(x)) \u2192 p_11(x))",
                    "str_fol": "\u2200x ((has_passion(x) \u2227 communicates_effectively(x)) \u2192 inspires_others(x))"
                }
            ],
            "conclusion": {
                "id": 7,
                "subject": "Matteo",
                "text": "Matteo does not communicate effectively.",
                "fol": "\u00acp_10(Matteo)",
                "str_fol": "\u00accommunicates_effectively(Matteo)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 6,
                    "subject": "Matteo",
                    "text": "Matteo does not think clearly.",
                    "fol": "\u00acp_9(Matteo)",
                    "str_fol": "\u00acthinks_clearly(Matteo)",
                    "negation": true
                },
                {
                    "id": 7,
                    "subject": "Matteo",
                    "text": "Matteo does not communicate effectively.",
                    "fol": "\u00acp_10(Matteo)",
                    "str_fol": "\u00accommunicates_effectively(Matteo)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "Anyone who thinks clearly or engages the audience can communicate effectively.",
                    "fol": "\u2200x ((p_9(x) \u2228 p_8(x)) \u2192 p_10(x))",
                    "str_fol": "\u2200x ((thinks_clearly(x) \u2228 engages_audience(x)) \u2192 communicates_effectively(x))"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Matteo",
                "text": "Matteo does not engage the audience.",
                "fol": "\u00acp_8(Matteo)",
                "str_fol": "\u00acengages_audience(Matteo)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 8,
                    "subject": "Matteo",
                    "text": "Matteo does not engage the audience.",
                    "fol": "\u00acp_8(Matteo)",
                    "str_fol": "\u00acengages_audience(Matteo)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "Matteo either speaks fluently or engages the audience.",
                    "fol": "p_7(Matteo) \u2228 p_8(Matteo)",
                    "str_fol": "speaks_fluently(Matteo) \u2228 engages_audience(Matteo)"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Matteo",
                "text": "Matteo speaks fluently.",
                "fol": "p_7(Matteo)",
                "str_fol": "speaks_fluently(Matteo)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 9,
                    "subject": "Matteo",
                    "text": "Matteo speaks fluently.",
                    "fol": "p_7(Matteo)",
                    "str_fol": "speaks_fluently(Matteo)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "A person either listens well or speaks fluently, but not necessarily both.",
                    "fol": "\u2200x (p_6(x) \u2295 p_7(x))",
                    "str_fol": "\u2200x (listens(x) \u2295 speaks_fluently(x))"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Matteo",
                "text": "Matteo does not listen.",
                "fol": "\u00acp_6(Matteo)",
                "str_fol": "\u00aclistens(Matteo)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 10,
                    "subject": "Matteo",
                    "text": "Matteo does not listen.",
                    "fol": "\u00acp_6(Matteo)",
                    "str_fol": "\u00aclistens(Matteo)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "If someone is introverted, then they listen well.",
                    "fol": "\u2200x (p_5(x) \u2192 p_6(x))",
                    "str_fol": "\u2200x (introverted(x) \u2192 listens(x))"
                }
            ],
            "conclusion": {
                "id": 11,
                "subject": "Matteo",
                "text": "Matteo is not introverted.",
                "fol": "\u00acp_5(Matteo)",
                "str_fol": "\u00acintroverted(Matteo)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 11,
                    "subject": "Matteo",
                    "text": "Matteo is not introverted.",
                    "fol": "\u00acp_5(Matteo)",
                    "str_fol": "\u00acintroverted(Matteo)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "Matteo is either outgoing or introverted, but not both.",
                    "fol": "p_4(Matteo) \u2295 p_5(Matteo)",
                    "str_fol": "outgoing(Matteo) \u2295 introverted(Matteo)"
                }
            ],
            "conclusion": {
                "id": 12,
                "subject": "Matteo",
                "text": "Matteo is not outgoing.",
                "fol": "\u00acp_4(Matteo)",
                "str_fol": "\u00acoutgoing(Matteo)",
                "negation": true
            }
        }
    ],
    "proof_trace": "2 p_11(Matteo) -> p_0(Matteo).  [assumption].\n4 (all x (p_1(x) & p_10(x) -> p_11(x))).  [assumption].\n5 (all x (p_9(x) | p_8(x) -> p_10(x))).  [assumption].\n6 (all x -(p_6(x) <-> p_7(x))).  [assumption].\n7 (all x (p_5(x) -> p_6(x))).  [assumption].\n8 -(p_4(Matteo) <-> p_5(Matteo)).  [assumption].\n9 --p_4(Matteo).  [goal].\n13 -p_11(Matteo) | p_0(Matteo).  [clausify(2)].\n14 -p_0(Matteo).  [assumption].\n15 -p_1(x) | -p_10(x) | p_11(x).  [clausify(4)].\n16 p_1(Matteo).  [assumption].\n17 p_7(Matteo) | p_8(Matteo).  [assumption].\n18 -p_8(x) | p_10(x).  [clausify(5)].\n19 -p_6(x) | -p_7(x).  [clausify(6)].\n21 -p_5(x) | p_6(x).  [clausify(7)].\n23 p_4(Matteo) | p_5(Matteo).  [clausify(8)].\n24 -p_4(Matteo).  [deny(9)].\n25 -p_10(Matteo) | p_11(Matteo).  [resolve(15,a,16,a)].\n26 -p_11(Matteo).  [resolve(13,b,14,a)].\n27 -p_5(x) | -p_7(x).  [resolve(21,b,19,a)].\n28 p_7(Matteo) | p_10(Matteo).  [resolve(17,b,18,a)].\n29 -p_5(Matteo) | p_10(Matteo).  [resolve(27,b,28,a)].\n30 p_5(Matteo).  [resolve(24,a,23,a)].\n31 p_10(Matteo).  [resolve(29,a,30,a)].\n32 -p_10(Matteo).  [resolve(25,b,26,a)].\n33 $F.  [resolve(31,a,32,a)].",
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_3(Matteo)\n\u00acp_0(Matteo)\n\u00acp_2(Matteo)\np_1(Matteo)\np_3(Matteo) \u2295 p_12(Matteo)\np_11(Matteo) \u2192 p_0(Matteo)\n\u2200x ((p_2(x) \u2228 p_9(x)) \u2192 p_12(x))\n\u2200x ((p_1(x) \u2227 p_10(x)) \u2192 p_11(x))\n\u2200x ((p_9(x) \u2228 p_8(x)) \u2192 p_10(x))\n\u2200x (p_6(x) \u2295 p_7(x))\n\u2200x (p_5(x) \u2192 p_6(x))\np_4(Matteo) \u2295 p_5(Matteo)\np_5(Matteo)",
            "Initial Goal": "\u00acp_4(Matteo)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_3(Matteo)",
                    "-p_0(Matteo)",
                    "-p_2(Matteo)",
                    "p_1(Matteo)",
                    "-(p_3(Matteo) <-> p_12(Matteo))",
                    "p_11(Matteo) -> p_0(Matteo)",
                    "all x ((p_2(x) | p_9(x)) -> p_12(x))",
                    "all x ((p_1(x) & p_10(x)) -> p_11(x))",
                    "all x ((p_9(x) | p_8(x)) -> p_10(x))",
                    "all x (-(p_6(x) <-> p_7(x)))",
                    "all x (p_5(x) -> p_6(x))",
                    "-(p_4(Matteo) <-> p_5(Matteo))",
                    "p_5(Matteo)"
                ],
                "formulas(goals)": [
                    "-p_4(Matteo)"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "p_7(Matteo) \u2228 p_8(Matteo)"
                ],
                "removed_rules": [],
                "added_facts": [
                    "p_5(Matteo)"
                ],
                "added_rules": []
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_3(Matteo)\n\u00acp_0(Matteo)\n\u00acp_2(Matteo)\np_1(Matteo)\np_3(Matteo) \u2295 p_12(Matteo)\np_11(Matteo) \u2192 p_0(Matteo)\n\u2200x ((p_2(x) \u2228 p_9(x)) \u2192 p_12(x))\n\u2200x ((p_1(x) \u2227 p_10(x)) \u2192 p_11(x))\n\u2200x ((p_9(x) \u2228 p_8(x)) \u2192 p_10(x))\n\u2200x (p_6(x) \u2295 p_7(x))\n\u2200x (p_5(x) \u2192 p_6(x))\np_4(Matteo) \u2295 p_5(Matteo)\n\u00acp_5(Matteo)",
            "Initial Goal": "\u00acp_4(Matteo)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_3(Matteo)",
                    "-p_0(Matteo)",
                    "-p_2(Matteo)",
                    "p_1(Matteo)",
                    "-(p_3(Matteo) <-> p_12(Matteo))",
                    "p_11(Matteo) -> p_0(Matteo)",
                    "all x ((p_2(x) | p_9(x)) -> p_12(x))",
                    "all x ((p_1(x) & p_10(x)) -> p_11(x))",
                    "all x ((p_9(x) | p_8(x)) -> p_10(x))",
                    "all x (-(p_6(x) <-> p_7(x)))",
                    "all x (p_5(x) -> p_6(x))",
                    "-(p_4(Matteo) <-> p_5(Matteo))",
                    "-p_5(Matteo)"
                ],
                "formulas(goals)": [
                    "-(-p_4(Matteo))"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "p_5(Matteo)"
                ],
                "removed_rules": [],
                "added_facts": [
                    "\u00acp_5(Matteo)"
                ],
                "added_rules": []
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_3(Matteo)\n\u00acp_0(Matteo)\n\u00acp_2(Matteo)\np_1(Matteo)\np_3(Matteo) \u2295 p_12(Matteo)\np_11(Matteo) \u2192 p_0(Matteo)\n\u2200x ((p_2(x) \u2228 p_9(x)) \u2192 p_12(x))\n\u2200x ((p_1(x) \u2227 p_10(x)) \u2192 p_11(x))\n\u2200x ((p_9(x) \u2228 p_8(x)) \u2192 p_10(x))\n\u2200x (p_6(x) \u2295 p_7(x))\n\u2200x (p_5(x) \u2192 p_6(x))\n\u00ac(p_4(Matteo) \u2295 p_5(Matteo))\n\u00acp_5(Matteo)",
            "Initial Goal": "\u00acp_4(Matteo)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_3(Matteo).",
                    "-p_0(Matteo).",
                    "-p_2(Matteo).",
                    "p_1(Matteo).",
                    "-(p_3(Matteo) <-> p_12(Matteo)).",
                    "p_11(Matteo) -> p_0(Matteo).",
                    "all x ((p_2(x) | p_9(x)) -> p_12(x)).",
                    "all x ((p_1(x) & p_10(x)) -> p_11(x)).",
                    "all x ((p_9(x) | p_8(x)) -> p_10(x)).",
                    "all x (-(p_6(x) <-> p_7(x))).",
                    "all x (p_5(x) -> p_6(x)).",
                    "(p_4(Matteo) <-> p_5(Matteo)).",
                    "-p_5(Matteo)."
                ],
                "formulas(goals)": [
                    "-p_4(Matteo)."
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "p_4(Matteo) \u2295 p_5(Matteo)"
                ],
                "removed_rules": [],
                "added_facts": [
                    "\u00ac(p_4(Matteo) \u2295 p_5(Matteo))"
                ],
                "added_rules": []
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_3(Matteo)\n\u00acp_0(Matteo)\n\u00acp_2(Matteo)\np_1(Matteo)\np_3(Matteo) \u2295 p_12(Matteo)\np_11(Matteo) \u2192 p_0(Matteo)\n\u2200x ((p_2(x) \u2228 p_9(x)) \u2192 p_12(x))\n\u2200x ((p_1(x) \u2227 p_10(x)) \u2192 p_11(x))\n\u2200x ((p_9(x) \u2228 p_8(x)) \u2192 p_10(x))\n\u2200x (p_6(x) \u2295 p_7(x))\n\u2200x (p_5(x) \u2192 p_6(x))\n\u00ac(p_4(Matteo) \u2295 p_5(Matteo))\n\u00acp_5(Matteo)\np_4(Matteo) \u2194 p_5(Matteo)\n\u00acp_12(Matteo)\n\u2200x (\u00acp_12(x) \u2192 (\u00acp_2(x) \u2227 \u00acp_9(x)))\n\u2200x (\u00acp_11(x) \u2192 (\u00acp_1(x) \u2228 \u00acp_10(x)))\n\u2200x (\u00acp_10(x) \u2192 (\u00acp_9(x) \u2227 \u00acp_8(x)))\n\u00acp_11(Matteo)\n\u2200x (\u00acp_5(x) \u2228 p_6(x))\n\u2200x ((p_6(x) \u2228 p_7(x)) \u2227 (\u00acp_6(x) \u2228 \u00acp_7(x)))\np_1(Matteo) \u2227 \u00acp_2(Matteo)",
            "Initial Goal": "\u00acp_4(Matteo)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_3(Matteo)",
                    "-p_0(Matteo)",
                    "-p_2(Matteo)",
                    "p_1(Matteo)",
                    "-(p_3(Matteo) <-> p_12(Matteo))",
                    "p_11(Matteo) -> p_0(Matteo)",
                    "all x ((p_2(x) | p_9(x)) -> p_12(x))",
                    "all x ((p_1(x) & p_10(x)) -> p_11(x))",
                    "all x ((p_9(x) | p_8(x)) -> p_10(x))",
                    "all x (-(p_6(x) <-> p_7(x)))",
                    "all x (p_5(x) -> p_6(x))",
                    "-(-(p_4(Matteo) <-> p_5(Matteo)))",
                    "-p_5(Matteo)",
                    "(p_4(Matteo) <-> p_5(Matteo))",
                    "-p_12(Matteo)",
                    "all x (-p_12(x) -> (-p_2(x) & -p_9(x)))",
                    "all x (-p_11(x) -> (-p_1(x) | -p_10(x)))",
                    "all x (-p_10(x) -> (-p_9(x) & -p_8(x)))",
                    "-p_11(Matteo)",
                    "all x (-p_5(x) | p_6(x))",
                    "all x ((p_6(x) | p_7(x)) & (-p_6(x) | -p_7(x)))",
                    "(p_1(Matteo) & -p_2(Matteo))"
                ],
                "formulas(goals)": [
                    "-p_4(Matteo)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_4(Matteo) \u2194 p_5(Matteo)",
                    "\u00acp_12(Matteo)",
                    "\u00acp_11(Matteo)",
                    "p_1(Matteo) \u2227 \u00acp_2(Matteo)"
                ],
                "added_rules": [
                    "\u2200x (\u00acp_12(x) \u2192 (\u00acp_2(x) \u2227 \u00acp_9(x)))",
                    "\u2200x (\u00acp_11(x) \u2192 (\u00acp_1(x) \u2228 \u00acp_10(x)))",
                    "\u2200x (\u00acp_10(x) \u2192 (\u00acp_9(x) \u2227 \u00acp_8(x)))",
                    "\u2200x (\u00acp_5(x) \u2228 p_6(x))",
                    "\u2200x ((p_6(x) \u2228 p_7(x)) \u2227 (\u00acp_6(x) \u2228 \u00acp_7(x)))"
                ]
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_3(Matteo)\n\u00acp_0(Matteo)\n\u00acp_2(Matteo)\np_1(Matteo)\np_3(Matteo) \u2295 p_12(Matteo)\np_11(Matteo) \u2192 p_0(Matteo)\n\u2200x ((p_2(x) \u2228 p_9(x)) \u2192 p_12(x))\n\u2200x ((p_1(x) \u2227 p_10(x)) \u2192 p_11(x))\n\u2200x ((p_9(x) \u2228 p_8(x)) \u2192 p_10(x))\n\u2200x (p_6(x) \u2295 p_7(x))\n\u2200x (p_5(x) \u2192 p_6(x))\n\u00ac(p_4(Matteo) \u2295 p_5(Matteo))\n\u00acp_5(Matteo)\n\u2200x (p_4(x) \u2194 p_5(x))\n\u00acp_12(Matteo)\n\u2200x (\u00acp_12(x) \u2192 (\u00acp_2(x) \u2227 \u00acp_9(x)))\n\u2200x (\u00acp_11(x) \u2192 (\u00acp_1(x) \u2228 \u00acp_10(x)))\n\u2200x (\u00acp_10(x) \u2192 (\u00acp_9(x) \u2227 \u00acp_8(x)))\n\u00acp_11(Matteo)\n\u2200x (\u00acp_5(x) \u2228 p_6(x))\n\u2200x ((p_6(x) \u2228 p_7(x)) \u2227 (\u00acp_6(x) \u2228 \u00acp_7(x)))\np_1(Matteo) \u2227 \u00acp_2(Matteo)\np_4(Matteo) \u2192 p_5(Matteo)\np_5(Matteo) \u2192 p_4(Matteo)\np_3(Matteo) \u2192 \u00acp_12(Matteo)",
            "Initial Goal": "\u00acp_4(Matteo)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_3(Matteo)",
                    "-p_0(Matteo)",
                    "-p_2(Matteo)",
                    "p_1(Matteo)",
                    "-(p_3(Matteo) <-> p_12(Matteo))",
                    "p_11(Matteo) -> p_0(Matteo)",
                    "all x ((p_2(x) | p_9(x)) -> p_12(x))",
                    "all x ((p_1(x) & p_10(x)) -> p_11(x))",
                    "all x ((p_9(x) | p_8(x)) -> p_10(x))",
                    "all x (-(p_6(x) <-> p_7(x)))",
                    "all x (p_5(x) -> p_6(x))",
                    "-(-(p_4(Matteo) <-> p_5(Matteo)))",
                    "-p_5(Matteo)",
                    "all x (p_4(x) <-> p_5(x))",
                    "-p_12(Matteo)",
                    "all x (-p_12(x) -> (-p_2(x) & -p_9(x)))",
                    "all x (-p_11(x) -> (-p_1(x) | -p_10(x)))",
                    "all x (-p_10(x) -> (-p_9(x) & -p_8(x)))",
                    "-p_11(Matteo)",
                    "all x (-p_5(x) | p_6(x))",
                    "all x ((p_6(x) | p_7(x)) & (-p_6(x) | -p_7(x)))",
                    "p_1(Matteo) & -p_2(Matteo)",
                    "p_4(Matteo) -> p_5(Matteo)",
                    "p_5(Matteo) -> p_4(Matteo)",
                    "p_3(Matteo) -> -p_12(Matteo)"
                ],
                "formulas(goals)": [
                    "-p_4(Matteo)"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "p_4(Matteo) \u2194 p_5(Matteo)"
                ],
                "removed_rules": [],
                "added_facts": [
                    "p_4(Matteo) \u2192 p_5(Matteo)",
                    "p_5(Matteo) \u2192 p_4(Matteo)",
                    "p_3(Matteo) \u2192 \u00acp_12(Matteo)"
                ],
                "added_rules": [
                    "\u2200x (p_4(x) \u2194 p_5(x))"
                ]
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_3(Matteo)\n\u00acp_0(Matteo)\n\u00acp_2(Matteo)\np_1(Matteo)\np_3(Matteo) \u2295 p_12(Matteo)\np_11(Matteo) \u2192 p_0(Matteo)\n\u2200x ((p_2(x) \u2228 p_9(x)) \u2192 p_12(x))\n\u2200x (p_1(x) \u2192 (p_10(x) \u2192 p_11(x)))\n\u2200x ((p_9(x) \u2228 p_8(x)) \u2192 p_10(x))\n\u2200x (p_6(x) \u2295 p_7(x))\n\u2200x (p_5(x) \u2192 p_6(x))\n\u00ac(p_4(Matteo) \u2295 p_5(Matteo))\n\u00acp_5(Matteo)\n\u2200x (p_4(x) \u2194 p_5(x))\n\u00acp_12(Matteo)\n\u2200x (\u00acp_12(x) \u2192 (\u00acp_2(x) \u2227 \u00acp_9(x)))\n\u2200x (\u00acp_11(x) \u2192 (\u00acp_1(x) \u2228 \u00acp_10(x)))\n\u2200x (\u00acp_10(x) \u2194 (\u00acp_9(x) \u2227 \u00acp_8(x)))\n\u00acp_11(Matteo)\n\u2200x (\u00acp_5(x) \u2228 p_6(x))\n\u2200x ((p_6(x) \u2228 p_7(x)) \u2227 (\u00acp_6(x) \u2228 \u00acp_7(x)))\np_1(Matteo) \u2227 \u00acp_2(Matteo)\np_4(Matteo) \u2192 p_5(Matteo)\np_5(Matteo) \u2192 p_4(Matteo)\np_3(Matteo) \u2192 \u00acp_12(Matteo)\n\u00acp_5(Matteo) \u2192 \u00acp_4(Matteo)",
            "Initial Goal": "\u00acp_4(Matteo)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_3(Matteo)",
                    "-p_0(Matteo)",
                    "-p_2(Matteo)",
                    "p_1(Matteo)",
                    "-(p_3(Matteo) <-> p_12(Matteo))",
                    "p_11(Matteo) -> p_0(Matteo)",
                    "all x ((p_2(x) | p_9(x)) -> p_12(x))",
                    "all x (p_1(x) -> (p_10(x) -> p_11(x)))",
                    "all x ((p_9(x) | p_8(x)) -> p_10(x))",
                    "all x (-(p_6(x) <-> p_7(x)))",
                    "all x (p_5(x) -> p_6(x))",
                    "-(-(p_4(Matteo) <-> p_5(Matteo)))",
                    "-p_5(Matteo)",
                    "all x (p_4(x) <-> p_5(x))",
                    "-p_12(Matteo)",
                    "all x (-p_12(x) -> (-p_2(x) & -p_9(x)))",
                    "all x (-p_11(x) -> (-p_1(x) | -p_10(x)))",
                    "all x (-p_10(x) <-> (-p_9(x) & -p_8(x)))",
                    "-p_11(Matteo)",
                    "all x (-p_5(x) | p_6(x))",
                    "all x ((p_6(x) | p_7(x)) & (-p_6(x) | -p_7(x)))",
                    "p_1(Matteo) & -p_2(Matteo)",
                    "p_4(Matteo) -> p_5(Matteo)",
                    "p_5(Matteo) -> p_4(Matteo)",
                    "p_3(Matteo) -> -p_12(Matteo)",
                    "-p_5(Matteo) -> -p_4(Matteo)"
                ],
                "formulas(goals)": [
                    "-p_4(Matteo)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u2200x ((p_1(x) \u2227 p_10(x)) \u2192 p_11(x))",
                    "\u2200x (\u00acp_10(x) \u2192 (\u00acp_9(x) \u2227 \u00acp_8(x)))"
                ],
                "added_facts": [
                    "\u00acp_5(Matteo) \u2192 \u00acp_4(Matteo)"
                ],
                "added_rules": [
                    "\u2200x (p_1(x) \u2192 (p_10(x) \u2192 p_11(x)))",
                    "\u2200x (\u00acp_10(x) \u2194 (\u00acp_9(x) \u2227 \u00acp_8(x)))"
                ]
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_3(Matteo)\n\u00acp_0(Matteo)\n\u00acp_2(Matteo)\np_1(Matteo)\np_3(Matteo) \u2295 p_12(Matteo)\np_11(Matteo) \u2192 p_0(Matteo)\n\u2200x ((p_2(x) \u2228 p_9(x)) \u2192 p_12(x))\n\u2200x (p_1(x) \u2192 (p_10(x) \u2192 p_11(x)))\n\u2200x ((p_9(x) \u2228 p_8(x)) \u2192 p_10(x))\n\u2200x (p_6(x) \u2295 p_7(x))\n\u2200x (p_5(x) \u2192 p_6(x))\n\u00ac(p_4(Matteo) \u2295 p_5(Matteo))\n\u00acp_5(Matteo)\n\u2200x (p_4(x) \u2194 p_5(x))\n\u00acp_12(Matteo)\n\u2200x (\u00acp_12(x) \u2192 (\u00acp_2(x) \u2227 \u00acp_9(x)))\n\u2200x (\u00acp_11(x) \u2192 (\u00acp_1(x) \u2228 \u00acp_10(x)))\n\u2200x (\u00acp_10(x) \u2194 (\u00acp_9(x) \u2227 \u00acp_8(x)))\n\u00acp_11(Matteo)\n\u2200x (\u00acp_5(x) \u2228 p_6(x))\n\u2200x ((p_6(x) \u2228 p_7(x)) \u2227 (\u00acp_6(x) \u2228 \u00acp_7(x)))\np_1(Matteo) \u2227 \u00acp_2(Matteo)\np_4(Matteo) \u2192 p_5(Matteo)\np_5(Matteo) \u2192 p_4(Matteo)\np_3(Matteo) \u2192 \u00acp_12(Matteo)\n\u00acp_5(Matteo) \u2192 \u00acp_4(Matteo)\n\u2200x (\u00acp_4(x) \u2228 p_5(x))\n\u2200x (p_4(x) \u2228 \u00acp_5(x))",
            "Initial Goal": "\u00acp_4(Matteo)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_3(Matteo)",
                    "-p_0(Matteo)",
                    "-p_2(Matteo)",
                    "p_1(Matteo)",
                    "-(p_3(Matteo) <-> p_12(Matteo))",
                    "p_11(Matteo) -> p_0(Matteo)",
                    "all x ((p_2(x) | p_9(x)) -> p_12(x))",
                    "all x (p_1(x) -> (p_10(x) -> p_11(x)))",
                    "all x ((p_9(x) | p_8(x)) -> p_10(x))",
                    "all x (-(p_6(x) <-> p_7(x)))",
                    "all x (p_5(x) -> p_6(x))",
                    "-(-(p_4(Matteo) <-> p_5(Matteo)))",
                    "-p_5(Matteo)",
                    "all x (p_4(x) <-> p_5(x))",
                    "-p_12(Matteo)",
                    "all x (-p_12(x) -> (-p_2(x) & -p_9(x)))",
                    "all x (-p_11(x) -> (-p_1(x) | -p_10(x)))",
                    "all x (-p_10(x) <-> (-p_9(x) & -p_8(x)))",
                    "-p_11(Matteo)",
                    "all x (-p_5(x) | p_6(x))",
                    "all x ((p_6(x) | p_7(x)) & (-p_6(x) | -p_7(x)))",
                    "p_1(Matteo) & -p_2(Matteo)",
                    "p_4(Matteo) -> p_5(Matteo)",
                    "p_5(Matteo) -> p_4(Matteo)",
                    "p_3(Matteo) -> -p_12(Matteo)",
                    "-p_5(Matteo) -> -p_4(Matteo)",
                    "all x (-p_4(x) | p_5(x))",
                    "all x (p_4(x) | -p_5(x))"
                ],
                "formulas(goals)": [
                    "-p_4(Matteo)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "\u2200x (\u00acp_4(x) \u2228 p_5(x))",
                    "\u2200x (p_4(x) \u2228 \u00acp_5(x))"
                ]
            }
        }
    ]
}