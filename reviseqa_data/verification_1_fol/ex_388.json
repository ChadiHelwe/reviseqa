{
    "background_story": "Sofia was a brilliant and determined environmental scientist. She spent most of her career studying the effects of toxic chemicals on ecosystems. One substance in particular caught her attention: tetrachlorethylene, a solvent commonly used in dry cleaning. Sofia's research revealed the alarming levels of tetrachlorethylene contamination in groundwater near industrial sites. She dedicated herself to raising awareness about the dangers of this chemical, advocating for stricter regulations and cleaner alternatives. Sofia's tireless work led to significant changes in environmental policies, protecting countless communities from the harmful effects of tetrachlorethylene exposure. Her groundbreaking research earned her international recognition, cementing her reputation as a leading voice in environmental science.",
    "predicates": [
        {
            "id": 0,
            "name": "conduct_research"
        },
        {
            "id": 1,
            "name": "influence_policy"
        },
        {
            "id": 2,
            "name": "save_lives"
        },
        {
            "id": 3,
            "name": "teach_biology"
        },
        {
            "id": 4,
            "name": "warn_community"
        },
        {
            "id": 5,
            "name": "analyze_data"
        },
        {
            "id": 6,
            "name": "improve_health"
        },
        {
            "id": 7,
            "name": "raise_awareness"
        },
        {
            "id": 8,
            "name": "educate_public"
        },
        {
            "id": 9,
            "name": "inform_others"
        },
        {
            "id": 10,
            "name": "study_ecology"
        },
        {
            "id": 11,
            "name": "environmental_scientist"
        },
        {
            "id": 12,
            "name": "protect_people"
        },
        {
            "id": 13,
            "name": "reduce_risk"
        },
        {
            "id": 14,
            "name": "find_solution"
        },
        {
            "id": 15,
            "name": "cares_deeply"
        },
        {
            "id": 16,
            "name": "write_articles"
        },
        {
            "id": 17,
            "name": "give_lectures"
        },
        {
            "id": 18,
            "name": "expert"
        },
        {
            "id": 19,
            "name": "advocate"
        },
        {
            "id": 20,
            "name": "investigate_hazards"
        },
        {
            "id": 21,
            "name": "develop_solutions"
        },
        {
            "id": 22,
            "name": "learns_biology"
        },
        {
            "id": 23,
            "name": "care_for_others"
        },
        {
            "id": 24,
            "name": "defend_nature"
        },
        {
            "id": 25,
            "name": "promote_safety"
        },
        {
            "id": 26,
            "name": "awareness"
        }
    ],
    "subject_name": "Sofia",
    "subject_category": "human",
    "keyword": "tetrachlorethylene",
    "all_facts": [
        {
            "id": 0,
            "subject": "Sofia",
            "text": "Sofia does not conduct research.",
            "fol": "\u00acp_0(Sofia)",
            "str_fol": "\u00acconduct_research(Sofia)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Sofia",
            "text": "Sofia does not influence policy.",
            "fol": "\u00acp_1(Sofia)",
            "str_fol": "\u00acinfluence_policy(Sofia)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Sofia",
            "text": "Sofia does not save lives.",
            "fol": "\u00acp_2(Sofia)",
            "str_fol": "\u00acsave_lives(Sofia)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Sofia",
            "text": "Sofia does not teach biology.",
            "fol": "\u00acp_3(Sofia)",
            "str_fol": "\u00acteach_biology(Sofia)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Sofia",
            "text": "Sofia does not warn the community.",
            "fol": "\u00acp_4(Sofia)",
            "str_fol": "\u00acwarn_community(Sofia)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Sofia",
            "text": "Sofia analyzes data.",
            "fol": "p_5(Sofia)",
            "str_fol": "analyze_data(Sofia)",
            "negation": false
        },
        {
            "id": 6,
            "subject": "Sofia",
            "text": "Sofia cannot improve her health.",
            "fol": "\u00acp_6(Sofia)",
            "str_fol": "\u00acimprove_health(Sofia)",
            "negation": true
        },
        {
            "id": 7,
            "subject": "Sofia",
            "text": "Sofia does not reduce risk.",
            "fol": "\u00acp_13(Sofia)",
            "str_fol": "\u00acreduce_risk(Sofia)",
            "negation": true
        },
        {
            "id": 8,
            "subject": "Sofia",
            "text": "Sofia does not protect people.",
            "fol": "\u00acp_12(Sofia)",
            "str_fol": "\u00acprotect_people(Sofia)",
            "negation": true
        },
        {
            "id": 9,
            "subject": "Sofia",
            "text": "Sofia studies ecology.",
            "fol": "p_10(Sofia)",
            "str_fol": "study_ecology(Sofia)",
            "negation": false
        },
        {
            "id": 10,
            "subject": "Sofia",
            "text": "Sofia does not inform others.",
            "fol": "\u00acp_9(Sofia)",
            "str_fol": "\u00acinform_others(Sofia)",
            "negation": true
        },
        {
            "id": 11,
            "subject": "Sofia",
            "text": "Sofia is an environmental scientist.",
            "fol": "p_11(Sofia)",
            "str_fol": "environmental_scientist(Sofia)",
            "negation": false
        },
        {
            "id": 12,
            "subject": "Sofia",
            "text": "Sofia does not educate the public.",
            "fol": "\u00acp_8(Sofia)",
            "str_fol": "\u00aceducate_public(Sofia)",
            "negation": true
        },
        {
            "id": 13,
            "subject": "Sofia",
            "text": "Sofia does not raise awareness.",
            "fol": "\u00acp_7(Sofia)",
            "str_fol": "\u00acraise_awareness(Sofia)",
            "negation": true
        },
        {
            "id": 14,
            "subject": "Sofia",
            "text": "If Sofia is an environmental scientist, then she either conducts research or raises awareness (or both).",
            "fol": "environmental_scientist(Sofia) \u2192 (p_0(Sofia) \u2228 raise_awareness(Sofia))",
            "str_fol": "environmental_scientist(Sofia) \u2192 (conduct_research(Sofia) \u2228 raise_awareness(Sofia))",
            "negation": false
        }
    ],
    "context_facts": [
        {
            "id": 6,
            "subject": "Sofia",
            "text": "Sofia cannot improve her health.",
            "fol": "\u00acp_6(Sofia)",
            "str_fol": "\u00acimprove_health(Sofia)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Sofia",
            "text": "Sofia does not save lives.",
            "fol": "\u00acp_2(Sofia)",
            "str_fol": "\u00acsave_lives(Sofia)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Sofia",
            "text": "Sofia analyzes data.",
            "fol": "p_5(Sofia)",
            "str_fol": "analyze_data(Sofia)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Sofia",
            "text": "Sofia does not teach biology.",
            "fol": "\u00acp_3(Sofia)",
            "str_fol": "\u00acteach_biology(Sofia)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Sofia",
            "text": "Sofia does not warn the community.",
            "fol": "\u00acp_4(Sofia)",
            "str_fol": "\u00acwarn_community(Sofia)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Sofia",
            "text": "Sofia does not influence policy.",
            "fol": "\u00acp_1(Sofia)",
            "str_fol": "\u00acinfluence_policy(Sofia)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Sofia",
            "text": "Sofia does not conduct research.",
            "fol": "\u00acp_0(Sofia)",
            "str_fol": "\u00acconduct_research(Sofia)",
            "negation": true
        }
    ],
    "context_rules": [
        {
            "id": 6,
            "text": "Anyone who finds a solution or reduces risk can improve health.",
            "fol": "\u2200x ((p_14(x) \u2228 p_13(x)) \u2192 p_6(x))",
            "str_fol": "\u2200x ((find_solution(x) \u2228 reduce_risk(x)) \u2192 improve_health(x))"
        },
        {
            "id": 5,
            "text": "If Sofia protects people, then she either saves lives or reduces risk, but not both.",
            "fol": "p_12(Sofia) \u2192 (p_2(Sofia) \u2295 p_13(Sofia))",
            "str_fol": "protect_people(Sofia) \u2192 (save_lives(Sofia) \u2295 reduce_risk(Sofia))"
        },
        {
            "id": 4,
            "text": "If Sofia analyzes data, then she is either a biology teacher or studies ecology, but not both.",
            "fol": "p_5(Sofia) \u2192 (p_3(Sofia) \u2295 p_10(Sofia))",
            "str_fol": "analyze_data(Sofia) \u2192 (teach_biology(Sofia) \u2295 study_ecology(Sofia))"
        },
        {
            "id": 3,
            "text": "If Sofia either informs others or warns the community (but not both), then she protects people.",
            "fol": "(p_9(Sofia) \u2295 p_4(Sofia)) \u2192 p_12(Sofia)",
            "str_fol": "(inform_others(Sofia) \u2295 warn_community(Sofia)) \u2192 protect_people(Sofia)"
        },
        {
            "id": 2,
            "text": "If Sofia studies ecology, then she is an environmental scientist.",
            "fol": "p_10(Sofia) \u2192 p_11(Sofia)",
            "str_fol": "study_ecology(Sofia) \u2192 environmental_scientist(Sofia)"
        },
        {
            "id": 1,
            "text": "If someone educates the public, then they inform others.",
            "fol": "\u2200x (p_8(x) \u2192 p_9(x))",
            "str_fol": "\u2200x (educate_public(x) \u2192 inform_others(x))"
        },
        {
            "id": 0,
            "text": "If Sofia raises awareness, then she either educates the public or influences policy, but not both.",
            "fol": "p_7(Sofia) \u2192 (p_8(Sofia) \u2295 p_1(Sofia))",
            "str_fol": "raise_awareness(Sofia) \u2192 (educate_public(Sofia) \u2295 influence_policy(Sofia))"
        }
    ],
    "context": [
        {
            "id": 6,
            "subject": "Sofia",
            "text": "Sofia cannot improve her health.",
            "fol": "\u00acp_6(Sofia)",
            "str_fol": "\u00acimprove_health(Sofia)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Sofia",
            "text": "Sofia does not save lives.",
            "fol": "\u00acp_2(Sofia)",
            "str_fol": "\u00acsave_lives(Sofia)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Sofia",
            "text": "Sofia analyzes data.",
            "fol": "p_5(Sofia)",
            "str_fol": "analyze_data(Sofia)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Sofia",
            "text": "Sofia does not teach biology.",
            "fol": "\u00acp_3(Sofia)",
            "str_fol": "\u00acteach_biology(Sofia)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Sofia",
            "text": "Sofia does not warn the community.",
            "fol": "\u00acp_4(Sofia)",
            "str_fol": "\u00acwarn_community(Sofia)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Sofia",
            "text": "Sofia does not influence policy.",
            "fol": "\u00acp_1(Sofia)",
            "str_fol": "\u00acinfluence_policy(Sofia)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Sofia",
            "text": "Sofia does not conduct research.",
            "fol": "\u00acp_0(Sofia)",
            "str_fol": "\u00acconduct_research(Sofia)",
            "negation": true
        },
        {
            "id": 6,
            "text": "Anyone who finds a solution or reduces risk can improve health.",
            "fol": "\u2200x ((p_14(x) \u2228 p_13(x)) \u2192 p_6(x))",
            "str_fol": "\u2200x ((find_solution(x) \u2228 reduce_risk(x)) \u2192 improve_health(x))"
        },
        {
            "id": 5,
            "text": "If Sofia protects people, then she either saves lives or reduces risk, but not both.",
            "fol": "p_12(Sofia) \u2192 (p_2(Sofia) \u2295 p_13(Sofia))",
            "str_fol": "protect_people(Sofia) \u2192 (save_lives(Sofia) \u2295 reduce_risk(Sofia))"
        },
        {
            "id": 4,
            "text": "If Sofia analyzes data, then she is either a biology teacher or studies ecology, but not both.",
            "fol": "p_5(Sofia) \u2192 (p_3(Sofia) \u2295 p_10(Sofia))",
            "str_fol": "analyze_data(Sofia) \u2192 (teach_biology(Sofia) \u2295 study_ecology(Sofia))"
        },
        {
            "id": 3,
            "text": "If Sofia either informs others or warns the community (but not both), then she protects people.",
            "fol": "(p_9(Sofia) \u2295 p_4(Sofia)) \u2192 p_12(Sofia)",
            "str_fol": "(inform_others(Sofia) \u2295 warn_community(Sofia)) \u2192 protect_people(Sofia)"
        },
        {
            "id": 2,
            "text": "If Sofia studies ecology, then she is an environmental scientist.",
            "fol": "p_10(Sofia) \u2192 p_11(Sofia)",
            "str_fol": "study_ecology(Sofia) \u2192 environmental_scientist(Sofia)"
        },
        {
            "id": 1,
            "text": "If someone educates the public, then they inform others.",
            "fol": "\u2200x (p_8(x) \u2192 p_9(x))",
            "str_fol": "\u2200x (educate_public(x) \u2192 inform_others(x))"
        },
        {
            "id": 0,
            "text": "If Sofia raises awareness, then she either educates the public or influences policy, but not both.",
            "fol": "p_7(Sofia) \u2192 (p_8(Sofia) \u2295 p_1(Sofia))",
            "str_fol": "raise_awareness(Sofia) \u2192 (educate_public(Sofia) \u2295 influence_policy(Sofia))"
        }
    ],
    "context_fol": "\u00acp_6(Sofia)\n\u00acp_2(Sofia)\np_5(Sofia)\n\u00acp_3(Sofia)\n\u00acp_4(Sofia)\n\u00acp_1(Sofia)\n\u00acp_0(Sofia)\n\u2200x ((p_14(x) \u2228 p_13(x)) \u2192 p_6(x))\np_12(Sofia) \u2192 (p_2(Sofia) \u2295 p_13(Sofia))\np_5(Sofia) \u2192 (p_3(Sofia) \u2295 p_10(Sofia))\n(p_9(Sofia) \u2295 p_4(Sofia)) \u2192 p_12(Sofia)\np_10(Sofia) \u2192 p_11(Sofia)\n\u2200x (p_8(x) \u2192 p_9(x))\np_7(Sofia) \u2192 (p_8(Sofia) \u2295 p_1(Sofia))",
    "conclusion": {
        "id": 14,
        "text": "If Sofia is an environmental scientist, then she either conducts research or raises awareness (or both).",
        "fol": "p_11(Sofia) \u2192 (p_0(Sofia) \u2228 p_7(Sofia))",
        "str_fol": "environmental_scientist(Sofia) \u2192 (conduct_research(Sofia) \u2228 raise_awareness(Sofia))"
    },
    "initial_answer": "False",
    "initial_goal": "p_11(Sofia) \u2192 (p_0(Sofia) \u2228 p_7(Sofia))",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 6,
                    "subject": "Sofia",
                    "text": "Sofia cannot improve her health.",
                    "fol": "\u00acp_6(Sofia)",
                    "str_fol": "\u00acimprove_health(Sofia)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 6,
                    "text": "Anyone who finds a solution or reduces risk can improve health.",
                    "fol": "\u2200x ((p_14(x) \u2228 p_13(x)) \u2192 p_6(x))",
                    "str_fol": "\u2200x ((find_solution(x) \u2228 reduce_risk(x)) \u2192 improve_health(x))"
                }
            ],
            "conclusion": {
                "id": 7,
                "subject": "Sofia",
                "text": "Sofia does not reduce risk.",
                "fol": "\u00acp_13(Sofia)",
                "str_fol": "\u00acreduce_risk(Sofia)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 2,
                    "subject": "Sofia",
                    "text": "Sofia does not save lives.",
                    "fol": "\u00acp_2(Sofia)",
                    "str_fol": "\u00acsave_lives(Sofia)",
                    "negation": true
                },
                {
                    "id": 7,
                    "subject": "Sofia",
                    "text": "Sofia does not reduce risk.",
                    "fol": "\u00acp_13(Sofia)",
                    "str_fol": "\u00acreduce_risk(Sofia)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "If Sofia protects people, then she either saves lives or reduces risk, but not both.",
                    "fol": "p_12(Sofia) \u2192 (p_2(Sofia) \u2295 p_13(Sofia))",
                    "str_fol": "protect_people(Sofia) \u2192 (save_lives(Sofia) \u2295 reduce_risk(Sofia))"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Sofia",
                "text": "Sofia does not protect people.",
                "fol": "\u00acp_12(Sofia)",
                "str_fol": "\u00acprotect_people(Sofia)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 5,
                    "subject": "Sofia",
                    "text": "Sofia analyzes data.",
                    "fol": "p_5(Sofia)",
                    "str_fol": "analyze_data(Sofia)",
                    "negation": false
                },
                {
                    "id": 3,
                    "subject": "Sofia",
                    "text": "Sofia does not teach biology.",
                    "fol": "\u00acp_3(Sofia)",
                    "str_fol": "\u00acteach_biology(Sofia)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "If Sofia analyzes data, then she is either a biology teacher or studies ecology, but not both.",
                    "fol": "p_5(Sofia) \u2192 (p_3(Sofia) \u2295 p_10(Sofia))",
                    "str_fol": "analyze_data(Sofia) \u2192 (teach_biology(Sofia) \u2295 study_ecology(Sofia))"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Sofia",
                "text": "Sofia studies ecology.",
                "fol": "p_10(Sofia)",
                "str_fol": "study_ecology(Sofia)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 4,
                    "subject": "Sofia",
                    "text": "Sofia does not warn the community.",
                    "fol": "\u00acp_4(Sofia)",
                    "str_fol": "\u00acwarn_community(Sofia)",
                    "negation": true
                },
                {
                    "id": 8,
                    "subject": "Sofia",
                    "text": "Sofia does not protect people.",
                    "fol": "\u00acp_12(Sofia)",
                    "str_fol": "\u00acprotect_people(Sofia)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "If Sofia either informs others or warns the community (but not both), then she protects people.",
                    "fol": "(p_9(Sofia) \u2295 p_4(Sofia)) \u2192 p_12(Sofia)",
                    "str_fol": "(inform_others(Sofia) \u2295 warn_community(Sofia)) \u2192 protect_people(Sofia)"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Sofia",
                "text": "Sofia does not inform others.",
                "fol": "\u00acp_9(Sofia)",
                "str_fol": "\u00acinform_others(Sofia)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 9,
                    "subject": "Sofia",
                    "text": "Sofia studies ecology.",
                    "fol": "p_10(Sofia)",
                    "str_fol": "study_ecology(Sofia)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "If Sofia studies ecology, then she is an environmental scientist.",
                    "fol": "p_10(Sofia) \u2192 p_11(Sofia)",
                    "str_fol": "study_ecology(Sofia) \u2192 environmental_scientist(Sofia)"
                }
            ],
            "conclusion": {
                "id": 11,
                "subject": "Sofia",
                "text": "Sofia is an environmental scientist.",
                "fol": "p_11(Sofia)",
                "str_fol": "environmental_scientist(Sofia)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 10,
                    "subject": "Sofia",
                    "text": "Sofia does not inform others.",
                    "fol": "\u00acp_9(Sofia)",
                    "str_fol": "\u00acinform_others(Sofia)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "If someone educates the public, then they inform others.",
                    "fol": "\u2200x (p_8(x) \u2192 p_9(x))",
                    "str_fol": "\u2200x (educate_public(x) \u2192 inform_others(x))"
                }
            ],
            "conclusion": {
                "id": 12,
                "subject": "Sofia",
                "text": "Sofia does not educate the public.",
                "fol": "\u00acp_8(Sofia)",
                "str_fol": "\u00aceducate_public(Sofia)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 12,
                    "subject": "Sofia",
                    "text": "Sofia does not educate the public.",
                    "fol": "\u00acp_8(Sofia)",
                    "str_fol": "\u00aceducate_public(Sofia)",
                    "negation": true
                },
                {
                    "id": 1,
                    "subject": "Sofia",
                    "text": "Sofia does not influence policy.",
                    "fol": "\u00acp_1(Sofia)",
                    "str_fol": "\u00acinfluence_policy(Sofia)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "If Sofia raises awareness, then she either educates the public or influences policy, but not both.",
                    "fol": "p_7(Sofia) \u2192 (p_8(Sofia) \u2295 p_1(Sofia))",
                    "str_fol": "raise_awareness(Sofia) \u2192 (educate_public(Sofia) \u2295 influence_policy(Sofia))"
                }
            ],
            "conclusion": {
                "id": 13,
                "subject": "Sofia",
                "text": "Sofia does not raise awareness.",
                "fol": "\u00acp_7(Sofia)",
                "str_fol": "\u00acraise_awareness(Sofia)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 11,
                    "subject": "Sofia",
                    "text": "Sofia is an environmental scientist.",
                    "fol": "p_11(Sofia)",
                    "str_fol": "environmental_scientist(Sofia)",
                    "negation": false
                },
                {
                    "id": 0,
                    "subject": "Sofia",
                    "text": "Sofia does not conduct research.",
                    "fol": "\u00acp_0(Sofia)",
                    "str_fol": "\u00acconduct_research(Sofia)",
                    "negation": true
                },
                {
                    "id": 13,
                    "subject": "Sofia",
                    "text": "Sofia does not raise awareness.",
                    "fol": "\u00acp_7(Sofia)",
                    "str_fol": "\u00acraise_awareness(Sofia)",
                    "negation": true
                }
            ],
            "rules": [],
            "conclusion": {
                "id": 14,
                "text": "If Sofia is an environmental scientist, then she either conducts research or raises awareness (or both).",
                "fol": "p_11(Sofia) \u2192 (p_0(Sofia) \u2228 p_7(Sofia))",
                "str_fol": "environmental_scientist(Sofia) \u2192 (conduct_research(Sofia) \u2228 raise_awareness(Sofia))"
            }
        }
    ],
    "proof_trace": "1 (all x (p_14(x) | p_13(x) -> p_6(x))).  [assumption].\n2 p_12(Sofia) -> -(p_2(Sofia) <-> p_13(Sofia)).  [assumption].\n3 p_5(Sofia) -> -(p_3(Sofia) <-> p_10(Sofia)).  [assumption].\n4 -(p_9(Sofia) <-> p_4(Sofia)) -> p_12(Sofia).  [assumption].\n5 p_10(Sofia) -> p_11(Sofia).  [assumption].\n6 (all x (p_8(x) -> p_9(x))).  [assumption].\n7 p_7(Sofia) -> -(p_8(Sofia) <-> p_1(Sofia)).  [assumption].\n8 -(p_11(Sofia) -> p_0(Sofia) | p_7(Sofia)).  [goal].\n10 -p_6(Sofia).  [assumption].\n11 -p_13(x) | p_6(x).  [clausify(1)].\n12 -p_12(Sofia) | p_2(Sofia) | p_13(Sofia).  [clausify(2)].\n13 -p_2(Sofia).  [assumption].\n15 -p_5(Sofia) | p_3(Sofia) | p_10(Sofia).  [clausify(3)].\n16 p_5(Sofia).  [assumption].\n18 p_3(Sofia) | p_10(Sofia).  [resolve(15,a,16,a)].\n19 -p_3(Sofia).  [assumption].\n21 -p_9(Sofia) | p_4(Sofia) | p_12(Sofia).  [clausify(4)].\n22 -p_4(Sofia).  [assumption].\n24 -p_7(Sofia) | p_8(Sofia) | p_1(Sofia).  [clausify(7)].\n25 -p_1(Sofia).  [assumption].\n27 -p_11(Sofia) | p_0(Sofia) | p_7(Sofia).  [deny(8)].\n28 -p_0(Sofia).  [assumption].\n29 p_10(Sofia).  [resolve(18,a,19,a)].\n30 -p_10(Sofia) | p_11(Sofia).  [clausify(5)].\n31 -p_7(Sofia) | p_8(Sofia).  [resolve(24,c,25,a)].\n32 -p_8(x) | p_9(x).  [clausify(6)].\n33 -p_12(Sofia) | p_13(Sofia).  [resolve(12,b,13,a)].\n34 -p_13(Sofia).  [resolve(11,b,10,a)].\n35 -p_7(Sofia) | p_9(Sofia).  [resolve(31,b,32,a)].\n36 -p_9(Sofia) | p_12(Sofia).  [resolve(21,b,22,a)].\n37 p_11(Sofia).  [resolve(29,a,30,a)].\n38 -p_11(Sofia) | p_7(Sofia).  [resolve(27,b,28,a)].\n39 -p_7(Sofia) | p_12(Sofia).  [resolve(35,b,36,a)].\n40 -p_12(Sofia).  [resolve(33,b,34,a)].\n41 -p_7(Sofia).  [resolve(39,b,40,a)].\n42 p_7(Sofia).  [resolve(37,a,38,a)].\n43 $F.  [resolve(41,a,42,a)].",
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_6(Sofia)\n\u00acp_2(Sofia)\np_5(Sofia)\n\u00acp_3(Sofia)\n\u00acp_4(Sofia)\n\u00acp_0(Sofia)\n\u2200x ((p_14(x) \u2228 p_13(x)) \u2192 p_6(x))\np_12(Sofia) \u2192 (p_2(Sofia) \u2295 p_13(Sofia))\np_5(Sofia) \u2192 (p_3(Sofia) \u2295 p_10(Sofia))\n(p_9(Sofia) \u2295 p_4(Sofia)) \u2192 p_12(Sofia)\np_10(Sofia) \u2192 p_11(Sofia)\n\u2200x (p_8(x) \u2192 p_9(x))\np_7(Sofia) \u2192 (p_8(Sofia) \u2295 p_1(Sofia))\np_1(Sofia)\np_11(Sofia) \u2192 p_7(Sofia)",
            "Initial Goal": "p_11(Sofia) \u2192 (p_0(Sofia) \u2228 p_7(Sofia))",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_6(Sofia)",
                    "-p_2(Sofia)",
                    "p_5(Sofia)",
                    "-p_3(Sofia)",
                    "-p_4(Sofia)",
                    "-p_0(Sofia)",
                    "all x ((p_14(x) | p_13(x)) -> p_6(x))",
                    "p_12(Sofia) -> (-(p_2(Sofia) <-> p_13(Sofia)))",
                    "p_5(Sofia) -> (-(p_3(Sofia) <-> p_10(Sofia)))",
                    "(-(p_9(Sofia) <-> p_4(Sofia))) -> p_12(Sofia)",
                    "p_10(Sofia) -> p_11(Sofia)",
                    "all x (p_8(x) -> p_9(x))",
                    "p_7(Sofia) -> (-(p_8(Sofia) <-> p_1(Sofia)))",
                    "p_1(Sofia)",
                    "p_11(Sofia) -> p_7(Sofia)"
                ],
                "formulas(goals)": [
                    "p_11(Sofia) -> (p_0(Sofia) | p_7(Sofia))"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "\u00acp_1(Sofia)"
                ],
                "removed_rules": [],
                "added_facts": [
                    "p_1(Sofia)"
                ],
                "added_rules": [
                    "p_11(Sofia) \u2192 p_7(Sofia)"
                ]
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_6(Sofia)\n\u00acp_2(Sofia)\np_5(Sofia)\n\u00acp_3(Sofia)\n\u00acp_4(Sofia)\n\u00acp_0(Sofia)\n\u2200x ((p_14(x) \u2228 p_13(x)) \u2192 p_6(x))\np_12(Sofia) \u2192 (p_2(Sofia) \u2295 p_13(Sofia))\np_5(Sofia) \u2192 (p_3(Sofia) \u2295 p_10(Sofia))\n(p_9(Sofia) \u2295 p_4(Sofia)) \u2192 p_12(Sofia)\np_10(Sofia) \u2192 p_11(Sofia)\n\u2200x (p_8(x) \u2192 p_9(x))\np_7(Sofia) \u2192 (p_8(Sofia) \u2295 p_1(Sofia))\np_1(Sofia)\np_11(Sofia) \u2192 p_7(Sofia)\np_10(Sofia)\np_11(Sofia)\np_7(Sofia)\np_7(Sofia) \u2192 \u00acp_8(Sofia)\np_5(Sofia) \u2192 p_10(Sofia)",
            "Initial Goal": "p_11(Sofia) \u2192 (p_0(Sofia) \u2228 p_7(Sofia))",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_6(Sofia)",
                    "-p_2(Sofia)",
                    "p_5(Sofia)",
                    "-p_3(Sofia)",
                    "-p_4(Sofia)",
                    "-p_0(Sofia)",
                    "all x (-(p_14(x) | p_13(x)) | p_6(x))",
                    "p_12(Sofia) -> (-(p_2(Sofia) <-> p_13(Sofia)))",
                    "p_5(Sofia) -> (-(p_3(Sofia) <-> p_10(Sofia)))",
                    "(-(p_9(Sofia) <-> p_4(Sofia))) -> p_12(Sofia)",
                    "p_10(Sofia) -> p_11(Sofia)",
                    "all x (p_8(x) -> p_9(x))",
                    "p_7(Sofia) -> (-(p_8(Sofia) <-> p_1(Sofia)))",
                    "p_1(Sofia)",
                    "p_11(Sofia) -> p_7(Sofia)",
                    "p_10(Sofia)",
                    "p_11(Sofia)",
                    "p_7(Sofia)",
                    "p_7(Sofia) -> -p_8(Sofia)",
                    "p_5(Sofia) -> p_10(Sofia)"
                ],
                "formulas(goals)": [
                    "p_11(Sofia) -> (p_0(Sofia) | p_7(Sofia))"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_10(Sofia)",
                    "p_11(Sofia)",
                    "p_7(Sofia)"
                ],
                "added_rules": [
                    "p_7(Sofia) \u2192 \u00acp_8(Sofia)",
                    "p_5(Sofia) \u2192 p_10(Sofia)"
                ]
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_6(Sofia)\n\u00acp_2(Sofia)\np_5(Sofia)\n\u00acp_3(Sofia)\n\u00acp_4(Sofia)\n\u00acp_0(Sofia)\n\u2200x ((p_14(x) \u2228 p_13(x)) \u2192 p_6(x))\np_12(Sofia) \u2192 (p_2(Sofia) \u2295 p_13(Sofia))\np_5(Sofia) \u2192 (p_3(Sofia) \u2295 p_10(Sofia))\n(p_9(Sofia) \u2295 p_4(Sofia)) \u2192 p_12(Sofia)\np_10(Sofia) \u2192 p_11(Sofia)\n\u2200x (p_8(x) \u2192 p_9(x))\np_7(Sofia) \u2192 (p_8(Sofia) \u2295 p_1(Sofia))\np_1(Sofia)\np_11(Sofia) \u2192 p_7(Sofia)\np_10(Sofia)\np_11(Sofia)\np_7(Sofia)\np_7(Sofia) \u2192 \u00acp_8(Sofia)\np_5(Sofia) \u2192 p_10(Sofia)\np_12(Sofia) \u2192 (p_2(Sofia) \u2228 p_13(Sofia))\np_12(Sofia) \u2192 (\u00acp_2(Sofia) \u2228 \u00acp_13(Sofia))",
            "Initial Goal": "p_11(Sofia) \u2192 (p_0(Sofia) \u2228 p_7(Sofia))",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_6(Sofia)",
                    "-p_2(Sofia)",
                    "p_5(Sofia)",
                    "-p_3(Sofia)",
                    "-p_4(Sofia)",
                    "-p_0(Sofia)",
                    "all x ((p_14(x) | p_13(x)) -> p_6(x))",
                    "p_12(Sofia) -> (-(p_2(Sofia) <-> p_13(Sofia)))",
                    "p_5(Sofia) -> (-(p_3(Sofia) <-> p_10(Sofia)))",
                    "(-(p_9(Sofia) <-> p_4(Sofia))) -> p_12(Sofia)",
                    "p_10(Sofia) -> p_11(Sofia)",
                    "all x (p_8(x) -> p_9(x))",
                    "p_7(Sofia) -> (-(p_8(Sofia) <-> p_1(Sofia)))",
                    "p_1(Sofia)",
                    "p_11(Sofia) -> p_7(Sofia)",
                    "p_10(Sofia)",
                    "p_11(Sofia)",
                    "p_7(Sofia)",
                    "p_7(Sofia) -> -p_8(Sofia)",
                    "p_5(Sofia) -> p_10(Sofia)",
                    "p_12(Sofia) -> (p_2(Sofia) | p_13(Sofia))",
                    "p_12(Sofia) -> (-p_2(Sofia) | -p_13(Sofia))"
                ],
                "formulas(goals)": [
                    "p_11(Sofia) -> (p_0(Sofia) | p_7(Sofia))"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "p_12(Sofia) \u2192 (p_2(Sofia) \u2228 p_13(Sofia))",
                    "p_12(Sofia) \u2192 (\u00acp_2(Sofia) \u2228 \u00acp_13(Sofia))"
                ]
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_6(Sofia)\n\u00acp_2(Sofia)\np_5(Sofia)\n\u00acp_3(Sofia)\n\u00acp_4(Sofia)\n\u00acp_0(Sofia)\n\u2200x ((p_14(x) \u2228 p_13(x)) \u2192 p_6(x))\np_12(Sofia) \u2192 (p_2(Sofia) \u2295 p_13(Sofia))\np_5(Sofia) \u2192 (p_3(Sofia) \u2295 p_10(Sofia))\n(p_9(Sofia) \u2295 p_4(Sofia)) \u2192 p_12(Sofia)\np_10(Sofia) \u2192 p_11(Sofia)\n\u2200x (p_8(x) \u2192 p_9(x))\np_7(Sofia) \u2192 (p_8(Sofia) \u2295 p_1(Sofia))\np_1(Sofia)\np_11(Sofia) \u2192 p_7(Sofia)\np_10(Sofia)\np_11(Sofia)\np_7(Sofia)\np_7(Sofia) \u2192 \u00acp_8(Sofia)\np_5(Sofia) \u2192 p_10(Sofia)\np_12(Sofia) \u2192 (p_2(Sofia) \u2228 p_13(Sofia))\np_12(Sofia) \u2192 (\u00acp_2(Sofia) \u2228 \u00acp_13(Sofia))\n\u00acp_5(Sofia) \u2228 p_3(Sofia) \u2228 p_10(Sofia)\n\u00acp_5(Sofia) \u2228 \u00acp_3(Sofia) \u2228 \u00acp_10(Sofia)",
            "Initial Goal": "p_11(Sofia) \u2192 (p_0(Sofia) \u2228 p_7(Sofia))",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_6(Sofia)",
                    "-p_2(Sofia)",
                    "p_5(Sofia)",
                    "-p_3(Sofia)",
                    "-p_4(Sofia)",
                    "-p_0(Sofia)",
                    "all x (p_14(x) | p_13(x) -> p_6(x))",
                    "p_12(Sofia) -> -(p_2(Sofia) <-> p_13(Sofia))",
                    "p_5(Sofia) -> -(p_3(Sofia) <-> p_10(Sofia))",
                    "-(p_9(Sofia) <-> p_4(Sofia)) -> p_12(Sofia)",
                    "p_10(Sofia) -> p_11(Sofia)",
                    "all x (p_8(x) -> p_9(x))",
                    "p_7(Sofia) -> -(p_8(Sofia) <-> p_1(Sofia))",
                    "p_1(Sofia)",
                    "p_11(Sofia) -> p_7(Sofia)",
                    "p_10(Sofia)",
                    "p_11(Sofia)",
                    "p_7(Sofia)",
                    "p_7(Sofia) -> -p_8(Sofia)",
                    "p_5(Sofia) -> p_10(Sofia)",
                    "p_12(Sofia) -> (p_2(Sofia) | p_13(Sofia))",
                    "p_12(Sofia) -> (-p_2(Sofia) | -p_13(Sofia))",
                    "-p_5(Sofia) | p_3(Sofia) | p_10(Sofia)",
                    "-p_5(Sofia) | -p_3(Sofia) | -p_10(Sofia)"
                ],
                "formulas(goals)": [
                    "p_11(Sofia) -> (p_0(Sofia) | p_7(Sofia))"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "\u00acp_5(Sofia) \u2228 p_3(Sofia) \u2228 p_10(Sofia)",
                    "\u00acp_5(Sofia) \u2228 \u00acp_3(Sofia) \u2228 \u00acp_10(Sofia)"
                ]
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_6(Sofia)\n\u00acp_2(Sofia)\np_5(Sofia)\n\u00acp_3(Sofia)\n\u00acp_4(Sofia)\n\u00acp_0(Sofia)\n\u2200x ((p_14(x) \u2228 p_13(x)) \u2192 p_6(x))\np_12(Sofia) \u2192 (p_2(Sofia) \u2295 p_13(Sofia))\np_5(Sofia) \u2192 (p_3(Sofia) \u2295 p_10(Sofia))\n(p_9(Sofia) \u2295 p_4(Sofia)) \u2192 p_12(Sofia)\np_10(Sofia) \u2192 p_11(Sofia)\n\u2200x (p_8(x) \u2192 p_9(x))\np_7(Sofia) \u2192 (p_8(Sofia) \u2295 p_1(Sofia))\np_1(Sofia)\np_10(Sofia)\np_11(Sofia)\np_7(Sofia) \u2192 \u00acp_8(Sofia)\np_5(Sofia) \u2192 p_10(Sofia)\np_12(Sofia) \u2192 (p_2(Sofia) \u2228 p_13(Sofia))\np_12(Sofia) \u2192 (\u00acp_2(Sofia) \u2228 \u00acp_13(Sofia))\n\u00acp_5(Sofia) \u2228 p_3(Sofia) \u2228 p_10(Sofia)\n\u00acp_5(Sofia) \u2228 \u00acp_3(Sofia) \u2228 \u00acp_10(Sofia)\n\u00acp_7(Sofia)",
            "Initial Goal": "p_11(Sofia) \u2192 (p_0(Sofia) \u2228 p_7(Sofia))",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_6(Sofia)",
                    "-p_2(Sofia)",
                    "p_5(Sofia)",
                    "-p_3(Sofia)",
                    "-p_4(Sofia)",
                    "-p_0(Sofia)",
                    "all x ((p_14(x) | p_13(x)) -> p_6(x))",
                    "p_12(Sofia) -> (-(p_2(Sofia) <-> p_13(Sofia)))",
                    "p_5(Sofia) -> (-(p_3(Sofia) <-> p_10(Sofia)))",
                    "(-(p_9(Sofia) <-> p_4(Sofia))) -> p_12(Sofia)",
                    "p_10(Sofia) -> p_11(Sofia)",
                    "all x (p_8(x) -> p_9(x))",
                    "p_7(Sofia) -> (-(p_8(Sofia) <-> p_1(Sofia)))",
                    "p_1(Sofia)",
                    "p_10(Sofia)",
                    "p_11(Sofia)",
                    "p_7(Sofia) -> -p_8(Sofia)",
                    "p_5(Sofia) -> p_10(Sofia)",
                    "p_12(Sofia) -> (p_2(Sofia) | p_13(Sofia))",
                    "p_12(Sofia) -> (-p_2(Sofia) | -p_13(Sofia))",
                    "-p_5(Sofia) | p_3(Sofia) | p_10(Sofia)",
                    "-p_5(Sofia) | -p_3(Sofia) | -p_10(Sofia)",
                    "-p_7(Sofia)"
                ],
                "formulas(goals)": [
                    "-(p_11(Sofia) -> (p_0(Sofia) | p_7(Sofia)))"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "p_7(Sofia)"
                ],
                "removed_rules": [
                    "p_11(Sofia) \u2192 p_7(Sofia)"
                ],
                "added_facts": [
                    "\u00acp_7(Sofia)"
                ],
                "added_rules": []
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_6(Sofia)\n\u00acp_2(Sofia)\np_5(Sofia)\n\u00acp_3(Sofia)\n\u00acp_4(Sofia)\n\u00acp_0(Sofia)\n\u2200x ((p_14(x) \u2228 p_13(x)) \u2192 p_6(x))\np_12(Sofia) \u2192 (p_2(Sofia) \u2295 p_13(Sofia))\np_5(Sofia) \u2192 (p_3(Sofia) \u2295 p_10(Sofia))\n(p_9(Sofia) \u2295 p_4(Sofia)) \u2192 p_12(Sofia)\np_10(Sofia) \u2192 p_11(Sofia)\n\u2200x (p_8(x) \u2192 p_9(x))\np_7(Sofia) \u2192 (p_8(Sofia) \u2295 p_1(Sofia))\np_1(Sofia)\np_10(Sofia)\np_11(Sofia)\np_7(Sofia) \u2192 \u00acp_8(Sofia)\np_5(Sofia) \u2192 p_10(Sofia)\np_12(Sofia) \u2192 (p_2(Sofia) \u2228 p_13(Sofia))\np_12(Sofia) \u2192 (\u00acp_2(Sofia) \u2228 \u00acp_13(Sofia))\n\u00acp_5(Sofia) \u2228 p_3(Sofia) \u2228 p_10(Sofia)\n\u00acp_5(Sofia) \u2228 \u00acp_3(Sofia) \u2228 \u00acp_10(Sofia)\np_7(Sofia)",
            "Initial Goal": "p_11(Sofia) \u2192 (p_0(Sofia) \u2228 p_7(Sofia))",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_6(Sofia).",
                    "-p_2(Sofia).",
                    "p_5(Sofia).",
                    "-p_3(Sofia).",
                    "-p_4(Sofia).",
                    "-p_0(Sofia).",
                    "all x ((p_14(x) | p_13(x)) -> p_6(x)).",
                    "p_12(Sofia) -> (-(p_2(Sofia) <-> p_13(Sofia))).",
                    "p_5(Sofia) -> (-(p_3(Sofia) <-> p_10(Sofia))).",
                    "(-(p_9(Sofia) <-> p_4(Sofia))) -> p_12(Sofia).",
                    "p_10(Sofia) -> p_11(Sofia).",
                    "all x (p_8(x) -> p_9(x)).",
                    "p_7(Sofia) -> (-(p_8(Sofia) <-> p_1(Sofia))).",
                    "p_1(Sofia).",
                    "p_10(Sofia).",
                    "p_11(Sofia).",
                    "p_7(Sofia) -> -p_8(Sofia).",
                    "p_5(Sofia) -> p_10(Sofia).",
                    "p_12(Sofia) -> (p_2(Sofia) | p_13(Sofia)).",
                    "p_12(Sofia) -> (-p_2(Sofia) | -p_13(Sofia)).",
                    "-p_5(Sofia) | p_3(Sofia) | p_10(Sofia).",
                    "-p_5(Sofia) | -p_3(Sofia) | -p_10(Sofia).",
                    "p_7(Sofia)."
                ],
                "formulas(goals)": [
                    "p_11(Sofia) -> (p_0(Sofia) | p_7(Sofia))."
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "\u00acp_7(Sofia)"
                ],
                "removed_rules": [],
                "added_facts": [
                    "p_7(Sofia)"
                ],
                "added_rules": []
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_6(Sofia)\n\u00acp_2(Sofia)\np_5(Sofia)\n\u00acp_3(Sofia)\n\u00acp_4(Sofia)\n\u00acp_0(Sofia)\n\u2200x ((p_14(x) \u2228 p_13(x)) \u2192 p_6(x))\np_12(Sofia) \u2192 (p_2(Sofia) \u2295 p_13(Sofia))\np_5(Sofia) \u2192 (p_3(Sofia) \u2295 p_10(Sofia))\n(p_9(Sofia) \u2295 p_4(Sofia)) \u2192 p_12(Sofia)\np_10(Sofia) \u2192 p_11(Sofia)\n\u2200x (p_8(x) \u2192 p_9(x))\np_7(Sofia) \u2192 (p_8(Sofia) \u2295 p_1(Sofia))\np_1(Sofia)\np_10(Sofia)\np_11(Sofia)\np_7(Sofia) \u2192 \u00acp_8(Sofia)\np_5(Sofia) \u2192 p_10(Sofia)\np_12(Sofia) \u2192 (p_2(Sofia) \u2228 p_13(Sofia))\np_12(Sofia) \u2192 (\u00acp_2(Sofia) \u2228 \u00acp_13(Sofia))\n\u00acp_5(Sofia) \u2228 p_3(Sofia) \u2228 p_10(Sofia)\n\u00acp_5(Sofia) \u2228 \u00acp_3(Sofia) \u2228 \u00acp_10(Sofia)\np_7(Sofia) \u2192 p_0(Sofia)",
            "Initial Goal": "p_11(Sofia) \u2192 (p_0(Sofia) \u2228 p_7(Sofia))",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "\u00acp_6(Sofia)",
                    "\u00acp_2(Sofia)",
                    "p_5(Sofia)",
                    "\u00acp_3(Sofia)",
                    "\u00acp_4(Sofia)",
                    "\u00acp_0(Sofia)",
                    "all x ((p_14(x) | p_13(x)) -> p_6(x))",
                    "p_12(Sofia) -> (-(p_2(Sofia) <-> p_13(Sofia)))",
                    "p_5(Sofia) -> (-(p_3(Sofia) <-> p_10(Sofia)))",
                    "(-(p_9(Sofia) <-> p_4(Sofia))) -> p_12(Sofia)",
                    "p_10(Sofia) -> p_11(Sofia)",
                    "all x (p_8(x) -> p_9(x))",
                    "p_7(Sofia) -> (-(p_8(Sofia) <-> p_1(Sofia)))",
                    "p_1(Sofia)",
                    "p_10(Sofia)",
                    "p_11(Sofia)",
                    "p_7(Sofia) -> \u00acp_8(Sofia)",
                    "p_5(Sofia) -> p_10(Sofia)",
                    "p_12(Sofia) -> (p_2(Sofia) | p_13(Sofia))",
                    "p_12(Sofia) -> (\u00acp_2(Sofia) | \u00acp_13(Sofia))",
                    "\u00acp_5(Sofia) | p_3(Sofia) | p_10(Sofia)",
                    "\u00acp_5(Sofia) | \u00acp_3(Sofia) | \u00acp_10(Sofia)",
                    "p_7(Sofia) -> p_0(Sofia)"
                ],
                "formulas(goals)": [
                    "\u00ac(p_11(Sofia) -> (p_0(Sofia) | p_7(Sofia)))"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "p_7(Sofia)"
                ],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "p_7(Sofia) \u2192 p_0(Sofia)"
                ]
            }
        }
    ]
}