{
    "background_story": "Chloe grew up in a community where denominationalism was a significant part of everyday life. Her family belonged to a specific Christian denomination, and she was taught from a young age the importance of adhering to its doctrines and traditions. As she entered adulthood, Chloe began to question the divisions between different denominations, wondering why they couldn't unite under a shared faith. She started attending ecumenical events and engaging in interfaith dialogues, seeking to understand the perspectives of others. Chloe's journey led her to become a leader in promoting unity and cooperation among diverse religious groups, encouraging people to look beyond denominational differences and focus on their shared values and humanity.",
    "predicates": [
        {
            "id": 0,
            "name": "unifying"
        },
        {
            "id": 1,
            "name": "listens"
        },
        {
            "id": 2,
            "name": "accepts_others"
        },
        {
            "id": 3,
            "name": "is_empathetic"
        },
        {
            "id": 4,
            "name": "supports_equality"
        },
        {
            "id": 5,
            "name": "builds_bridges"
        },
        {
            "id": 6,
            "name": "open_minded"
        },
        {
            "id": 7,
            "name": "respects_beliefs"
        },
        {
            "id": 8,
            "name": "tolerant"
        },
        {
            "id": 9,
            "name": "values_diversity"
        },
        {
            "id": 10,
            "name": "fosters_inclusion"
        },
        {
            "id": 11,
            "name": "promotes_unity"
        },
        {
            "id": 12,
            "name": "seeks_knowledge"
        },
        {
            "id": 13,
            "name": "questions_assumptions"
        },
        {
            "id": 14,
            "name": "honors_traditions"
        },
        {
            "id": 15,
            "name": "appreciates_culture"
        },
        {
            "id": 16,
            "name": "engages_dialogue"
        },
        {
            "id": 17,
            "name": "encourages_collaboration"
        }
    ],
    "subject_name": "Chloe",
    "subject_category": "human",
    "keyword": "denominationalism",
    "all_facts": [
        {
            "id": 0,
            "subject": "Chloe",
            "text": "Chloe is not unifying.",
            "fol": "\u00acp_0(Chloe)",
            "str_fol": "\u00acunifying(Chloe)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Chloe",
            "text": "Chloe listens to others.",
            "fol": "p_1(Chloe)",
            "str_fol": "listens(Chloe)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Chloe",
            "text": "Chloe does not accept others.",
            "fol": "\u00acp_2(Chloe)",
            "str_fol": "\u00acaccepts_others(Chloe)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Chloe",
            "text": "Chloe is empathetic.",
            "fol": "p_3(Chloe)",
            "str_fol": "is_empathetic(Chloe)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Chloe",
            "text": "Chloe supports equality.",
            "fol": "p_4(Chloe)",
            "str_fol": "supports_equality(Chloe)",
            "negation": false
        },
        {
            "id": 5,
            "subject": "Chloe",
            "text": "Chloe does not build bridges between people.",
            "fol": "\u00acp_5(Chloe)",
            "str_fol": "\u00acbuilds_bridges(Chloe)",
            "negation": true
        },
        {
            "id": 6,
            "subject": "Chloe",
            "text": "Chloe does not promote unity.",
            "fol": "\u00acp_11(Chloe)",
            "str_fol": "\u00acpromotes_unity(Chloe)",
            "negation": true
        },
        {
            "id": 7,
            "subject": "Chloe",
            "text": "Chloe fosters inclusion.",
            "fol": "p_10(Chloe)",
            "str_fol": "fosters_inclusion(Chloe)",
            "negation": false
        },
        {
            "id": 8,
            "subject": "Chloe",
            "text": "Chloe does not value diversity.",
            "fol": "\u00acp_9(Chloe)",
            "str_fol": "\u00acvalues_diversity(Chloe)",
            "negation": true
        },
        {
            "id": 9,
            "subject": "Chloe",
            "text": "Chloe respects beliefs.",
            "fol": "p_7(Chloe)",
            "str_fol": "respects_beliefs(Chloe)",
            "negation": false
        },
        {
            "id": 10,
            "subject": "Chloe",
            "text": "Chloe is tolerant.",
            "fol": "p_8(Chloe)",
            "str_fol": "tolerant(Chloe)",
            "negation": false
        },
        {
            "id": 11,
            "subject": "Chloe",
            "text": "Chloe is open-minded.",
            "fol": "p_6(Chloe)",
            "str_fol": "open_minded(Chloe)",
            "negation": false
        },
        {
            "id": 12,
            "subject": "Chloe",
            "text": "If Chloe is either open-minded or tolerant (but not both), then she is unifying.",
            "fol": "(open_minded(Chloe) \u2295 tolerant(Chloe)) \u2192 p_0(Chloe)",
            "str_fol": "(open_minded(Chloe) \u2295 tolerant(Chloe)) \u2192 unifying(Chloe)",
            "negation": false
        }
    ],
    "context_facts": [
        {
            "id": 5,
            "subject": "Chloe",
            "text": "Chloe does not build bridges between people.",
            "fol": "\u00acp_5(Chloe)",
            "str_fol": "\u00acbuilds_bridges(Chloe)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Chloe",
            "text": "Chloe supports equality.",
            "fol": "p_4(Chloe)",
            "str_fol": "supports_equality(Chloe)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Chloe",
            "text": "Chloe is empathetic.",
            "fol": "p_3(Chloe)",
            "str_fol": "is_empathetic(Chloe)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Chloe",
            "text": "Chloe does not accept others.",
            "fol": "\u00acp_2(Chloe)",
            "str_fol": "\u00acaccepts_others(Chloe)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Chloe",
            "text": "Chloe listens to others.",
            "fol": "p_1(Chloe)",
            "str_fol": "listens(Chloe)",
            "negation": false
        },
        {
            "id": 0,
            "subject": "Chloe",
            "text": "Chloe is not unifying.",
            "fol": "\u00acp_0(Chloe)",
            "str_fol": "\u00acunifying(Chloe)",
            "negation": true
        }
    ],
    "context_rules": [
        {
            "id": 5,
            "text": "Anyone who promotes unity builds bridges between people.",
            "fol": "\u2200x (p_11(x) \u2192 p_5(x))",
            "str_fol": "\u2200x (promotes_unity(x) \u2192 builds_bridges(x))"
        },
        {
            "id": 4,
            "text": "If Chloe either fosters inclusion or supports equality (but not both), then she promotes unity.",
            "fol": "(p_10(Chloe) \u2295 p_4(Chloe)) \u2192 p_11(Chloe)",
            "str_fol": "(fosters_inclusion(Chloe) \u2295 supports_equality(Chloe)) \u2192 promotes_unity(Chloe)"
        },
        {
            "id": 3,
            "text": "If Chloe is empathetic, then she either values diversity or fosters inclusion, but not both.",
            "fol": "p_3(Chloe) \u2192 (p_9(Chloe) \u2295 p_10(Chloe))",
            "str_fol": "is_empathetic(Chloe) \u2192 (values_diversity(Chloe) \u2295 fosters_inclusion(Chloe))"
        },
        {
            "id": 2,
            "text": "Chloe either respects beliefs or values diversity, but not both, which contributes to her ability to promote harmony among people.",
            "fol": "p_7(Chloe) \u2295 p_9(Chloe)",
            "str_fol": "respects_beliefs(Chloe) \u2295 values_diversity(Chloe)"
        },
        {
            "id": 1,
            "text": "If Chloe either respects beliefs or accepts others (but not both), then she is tolerant.",
            "fol": "(p_7(Chloe) \u2295 p_2(Chloe)) \u2192 p_8(Chloe)",
            "str_fol": "(respects_beliefs(Chloe) \u2295 accepts_others(Chloe)) \u2192 tolerant(Chloe)"
        },
        {
            "id": 0,
            "text": "If Chloe listens to others, then she is open-minded.",
            "fol": "p_1(Chloe) \u2192 p_6(Chloe)",
            "str_fol": "listens(Chloe) \u2192 open_minded(Chloe)"
        }
    ],
    "context": [
        {
            "id": 5,
            "subject": "Chloe",
            "text": "Chloe does not build bridges between people.",
            "fol": "\u00acp_5(Chloe)",
            "str_fol": "\u00acbuilds_bridges(Chloe)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Chloe",
            "text": "Chloe supports equality.",
            "fol": "p_4(Chloe)",
            "str_fol": "supports_equality(Chloe)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Chloe",
            "text": "Chloe is empathetic.",
            "fol": "p_3(Chloe)",
            "str_fol": "is_empathetic(Chloe)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Chloe",
            "text": "Chloe does not accept others.",
            "fol": "\u00acp_2(Chloe)",
            "str_fol": "\u00acaccepts_others(Chloe)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Chloe",
            "text": "Chloe listens to others.",
            "fol": "p_1(Chloe)",
            "str_fol": "listens(Chloe)",
            "negation": false
        },
        {
            "id": 0,
            "subject": "Chloe",
            "text": "Chloe is not unifying.",
            "fol": "\u00acp_0(Chloe)",
            "str_fol": "\u00acunifying(Chloe)",
            "negation": true
        },
        {
            "id": 5,
            "text": "Anyone who promotes unity builds bridges between people.",
            "fol": "\u2200x (p_11(x) \u2192 p_5(x))",
            "str_fol": "\u2200x (promotes_unity(x) \u2192 builds_bridges(x))"
        },
        {
            "id": 4,
            "text": "If Chloe either fosters inclusion or supports equality (but not both), then she promotes unity.",
            "fol": "(p_10(Chloe) \u2295 p_4(Chloe)) \u2192 p_11(Chloe)",
            "str_fol": "(fosters_inclusion(Chloe) \u2295 supports_equality(Chloe)) \u2192 promotes_unity(Chloe)"
        },
        {
            "id": 3,
            "text": "If Chloe is empathetic, then she either values diversity or fosters inclusion, but not both.",
            "fol": "p_3(Chloe) \u2192 (p_9(Chloe) \u2295 p_10(Chloe))",
            "str_fol": "is_empathetic(Chloe) \u2192 (values_diversity(Chloe) \u2295 fosters_inclusion(Chloe))"
        },
        {
            "id": 2,
            "text": "Chloe either respects beliefs or values diversity, but not both, which contributes to her ability to promote harmony among people.",
            "fol": "p_7(Chloe) \u2295 p_9(Chloe)",
            "str_fol": "respects_beliefs(Chloe) \u2295 values_diversity(Chloe)"
        },
        {
            "id": 1,
            "text": "If Chloe either respects beliefs or accepts others (but not both), then she is tolerant.",
            "fol": "(p_7(Chloe) \u2295 p_2(Chloe)) \u2192 p_8(Chloe)",
            "str_fol": "(respects_beliefs(Chloe) \u2295 accepts_others(Chloe)) \u2192 tolerant(Chloe)"
        },
        {
            "id": 0,
            "text": "If Chloe listens to others, then she is open-minded.",
            "fol": "p_1(Chloe) \u2192 p_6(Chloe)",
            "str_fol": "listens(Chloe) \u2192 open_minded(Chloe)"
        }
    ],
    "context_fol": "\u00acp_5(Chloe)\np_4(Chloe)\np_3(Chloe)\n\u00acp_2(Chloe)\np_1(Chloe)\n\u00acp_0(Chloe)\n\u2200x (p_11(x) \u2192 p_5(x))\n(p_10(Chloe) \u2295 p_4(Chloe)) \u2192 p_11(Chloe)\np_3(Chloe) \u2192 (p_9(Chloe) \u2295 p_10(Chloe))\np_7(Chloe) \u2295 p_9(Chloe)\n(p_7(Chloe) \u2295 p_2(Chloe)) \u2192 p_8(Chloe)\np_1(Chloe) \u2192 p_6(Chloe)",
    "conclusion": {
        "id": 12,
        "text": "If Chloe is either open-minded or tolerant (but not both), then she is unifying.",
        "fol": "(p_6(Chloe) \u2295 p_8(Chloe)) \u2192 p_0(Chloe)",
        "str_fol": "(open_minded(Chloe) \u2295 tolerant(Chloe)) \u2192 unifying(Chloe)"
    },
    "initial_answer": "True",
    "initial_goal": "(p_6(Chloe) \u2295 p_8(Chloe)) \u2192 p_0(Chloe)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 5,
                    "subject": "Chloe",
                    "text": "Chloe does not build bridges between people.",
                    "fol": "\u00acp_5(Chloe)",
                    "str_fol": "\u00acbuilds_bridges(Chloe)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "Anyone who promotes unity builds bridges between people.",
                    "fol": "\u2200x (p_11(x) \u2192 p_5(x))",
                    "str_fol": "\u2200x (promotes_unity(x) \u2192 builds_bridges(x))"
                }
            ],
            "conclusion": {
                "id": 6,
                "subject": "Chloe",
                "text": "Chloe does not promote unity.",
                "fol": "\u00acp_11(Chloe)",
                "str_fol": "\u00acpromotes_unity(Chloe)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 4,
                    "subject": "Chloe",
                    "text": "Chloe supports equality.",
                    "fol": "p_4(Chloe)",
                    "str_fol": "supports_equality(Chloe)",
                    "negation": false
                },
                {
                    "id": 6,
                    "subject": "Chloe",
                    "text": "Chloe does not promote unity.",
                    "fol": "\u00acp_11(Chloe)",
                    "str_fol": "\u00acpromotes_unity(Chloe)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "If Chloe either fosters inclusion or supports equality (but not both), then she promotes unity.",
                    "fol": "(p_10(Chloe) \u2295 p_4(Chloe)) \u2192 p_11(Chloe)",
                    "str_fol": "(fosters_inclusion(Chloe) \u2295 supports_equality(Chloe)) \u2192 promotes_unity(Chloe)"
                }
            ],
            "conclusion": {
                "id": 7,
                "subject": "Chloe",
                "text": "Chloe fosters inclusion.",
                "fol": "p_10(Chloe)",
                "str_fol": "fosters_inclusion(Chloe)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 3,
                    "subject": "Chloe",
                    "text": "Chloe is empathetic.",
                    "fol": "p_3(Chloe)",
                    "str_fol": "is_empathetic(Chloe)",
                    "negation": false
                },
                {
                    "id": 7,
                    "subject": "Chloe",
                    "text": "Chloe fosters inclusion.",
                    "fol": "p_10(Chloe)",
                    "str_fol": "fosters_inclusion(Chloe)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "If Chloe is empathetic, then she either values diversity or fosters inclusion, but not both.",
                    "fol": "p_3(Chloe) \u2192 (p_9(Chloe) \u2295 p_10(Chloe))",
                    "str_fol": "is_empathetic(Chloe) \u2192 (values_diversity(Chloe) \u2295 fosters_inclusion(Chloe))"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Chloe",
                "text": "Chloe does not value diversity.",
                "fol": "\u00acp_9(Chloe)",
                "str_fol": "\u00acvalues_diversity(Chloe)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 8,
                    "subject": "Chloe",
                    "text": "Chloe does not value diversity.",
                    "fol": "\u00acp_9(Chloe)",
                    "str_fol": "\u00acvalues_diversity(Chloe)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "Chloe either respects beliefs or values diversity, but not both, which contributes to her ability to promote harmony among people.",
                    "fol": "p_7(Chloe) \u2295 p_9(Chloe)",
                    "str_fol": "respects_beliefs(Chloe) \u2295 values_diversity(Chloe)"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Chloe",
                "text": "Chloe respects beliefs.",
                "fol": "p_7(Chloe)",
                "str_fol": "respects_beliefs(Chloe)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 9,
                    "subject": "Chloe",
                    "text": "Chloe respects beliefs.",
                    "fol": "p_7(Chloe)",
                    "str_fol": "respects_beliefs(Chloe)",
                    "negation": false
                },
                {
                    "id": 2,
                    "subject": "Chloe",
                    "text": "Chloe does not accept others.",
                    "fol": "\u00acp_2(Chloe)",
                    "str_fol": "\u00acaccepts_others(Chloe)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "If Chloe either respects beliefs or accepts others (but not both), then she is tolerant.",
                    "fol": "(p_7(Chloe) \u2295 p_2(Chloe)) \u2192 p_8(Chloe)",
                    "str_fol": "(respects_beliefs(Chloe) \u2295 accepts_others(Chloe)) \u2192 tolerant(Chloe)"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Chloe",
                "text": "Chloe is tolerant.",
                "fol": "p_8(Chloe)",
                "str_fol": "tolerant(Chloe)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 1,
                    "subject": "Chloe",
                    "text": "Chloe listens to others.",
                    "fol": "p_1(Chloe)",
                    "str_fol": "listens(Chloe)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "If Chloe listens to others, then she is open-minded.",
                    "fol": "p_1(Chloe) \u2192 p_6(Chloe)",
                    "str_fol": "listens(Chloe) \u2192 open_minded(Chloe)"
                }
            ],
            "conclusion": {
                "id": 11,
                "subject": "Chloe",
                "text": "Chloe is open-minded.",
                "fol": "p_6(Chloe)",
                "str_fol": "open_minded(Chloe)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 11,
                    "subject": "Chloe",
                    "text": "Chloe is open-minded.",
                    "fol": "p_6(Chloe)",
                    "str_fol": "open_minded(Chloe)",
                    "negation": false
                },
                {
                    "id": 10,
                    "subject": "Chloe",
                    "text": "Chloe is tolerant.",
                    "fol": "p_8(Chloe)",
                    "str_fol": "tolerant(Chloe)",
                    "negation": false
                },
                {
                    "id": 0,
                    "subject": "Chloe",
                    "text": "Chloe is not unifying.",
                    "fol": "\u00acp_0(Chloe)",
                    "str_fol": "\u00acunifying(Chloe)",
                    "negation": true
                }
            ],
            "rules": [],
            "conclusion": {
                "id": 12,
                "text": "If Chloe is either open-minded or tolerant (but not both), then she is unifying.",
                "fol": "(p_6(Chloe) \u2295 p_8(Chloe)) \u2192 p_0(Chloe)",
                "str_fol": "(open_minded(Chloe) \u2295 tolerant(Chloe)) \u2192 unifying(Chloe)"
            }
        }
    ],
    "proof_trace": "1 (all x (p_11(x) -> p_5(x))).  [assumption].\n2 -(p_10(Chloe) <-> p_4(Chloe)) -> p_11(Chloe).  [assumption].\n3 p_3(Chloe) -> -(p_9(Chloe) <-> p_10(Chloe)).  [assumption].\n4 -(p_7(Chloe) <-> p_9(Chloe)).  [assumption].\n5 -(p_7(Chloe) <-> p_2(Chloe)) -> p_8(Chloe).  [assumption].\n6 p_1(Chloe) -> p_6(Chloe).  [assumption].\n7 -(p_6(Chloe) <-> p_8(Chloe)) -> p_0(Chloe).  [goal].\n8 -p_11(x) | p_5(x).  [clausify(1)].\n9 -p_5(Chloe).  [assumption].\n10 p_10(Chloe) | -p_4(Chloe) | p_11(Chloe).  [clausify(2)].\n11 p_4(Chloe).  [assumption].\n14 p_3(Chloe).  [assumption].\n15 -p_3(Chloe) | -p_9(Chloe) | -p_10(Chloe).  [clausify(3)].\n16 -p_7(Chloe) | p_2(Chloe) | p_8(Chloe).  [clausify(5)].\n17 -p_2(Chloe).  [assumption].\n19 -p_1(Chloe) | p_6(Chloe).  [clausify(6)].\n20 p_1(Chloe).  [assumption].\n22 p_7(Chloe) | p_9(Chloe).  [clausify(4)].\n23 -p_7(Chloe) | p_8(Chloe).  [resolve(16,b,17,a)].\n24 -p_6(Chloe) | -p_8(Chloe).  [deny(7)].\n26 p_6(Chloe).  [resolve(19,a,20,a)].\n27 p_10(Chloe) | p_11(Chloe).  [resolve(10,b,11,a)].\n28 -p_11(Chloe).  [resolve(8,b,9,a)].\n29 -p_9(Chloe) | -p_10(Chloe).  [resolve(15,a,14,a)].\n31 p_8(Chloe) | p_9(Chloe).  [resolve(23,a,22,a)].\n32 p_8(Chloe) | -p_10(Chloe).  [resolve(31,b,29,a)].\n33 -p_8(Chloe).  [resolve(26,a,24,a)].\n34 -p_10(Chloe).  [resolve(32,a,33,a)].\n35 p_10(Chloe).  [resolve(27,b,28,a)].\n36 $F.  [resolve(34,a,35,a)].",
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_5(Chloe)\np_4(Chloe)\np_3(Chloe)\n\u00acp_2(Chloe)\np_1(Chloe)\n\u00acp_0(Chloe)\n\u2200x (p_11(x) \u2192 p_5(x))\n(p_10(Chloe) \u2295 p_4(Chloe)) \u2192 p_11(Chloe)\np_3(Chloe) \u2192 (p_9(Chloe) \u2295 p_10(Chloe))\np_7(Chloe) \u2295 p_9(Chloe)\n(p_7(Chloe) \u2295 p_2(Chloe)) \u2192 p_8(Chloe)\np_1(Chloe) \u2192 p_6(Chloe)\np_6(Chloe) \u2227 p_8(Chloe)",
            "Initial Goal": "(p_6(Chloe) \u2295 p_8(Chloe)) \u2192 p_0(Chloe)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_5(Chloe).",
                    "p_4(Chloe).",
                    "p_3(Chloe).",
                    "-p_2(Chloe).",
                    "p_1(Chloe).",
                    "-p_0(Chloe).",
                    "all x (p_11(x) -> p_5(x)).",
                    "(-(p_10(Chloe) <-> p_4(Chloe))) -> p_11(Chloe).",
                    "p_3(Chloe) -> (-(p_9(Chloe) <-> p_10(Chloe))).",
                    "-(p_7(Chloe) <-> p_9(Chloe)).",
                    "(-(p_7(Chloe) <-> p_2(Chloe))) -> p_8(Chloe).",
                    "p_1(Chloe) -> p_6(Chloe).",
                    "p_6(Chloe) & p_8(Chloe)."
                ],
                "formulas(goals)": [
                    "(-(p_6(Chloe) <-> p_8(Chloe))) -> p_0(Chloe)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_6(Chloe) \u2227 p_8(Chloe)"
                ],
                "added_rules": []
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_5(Chloe)\np_4(Chloe)\np_3(Chloe)\n\u00acp_2(Chloe)\np_1(Chloe)\n\u00acp_0(Chloe)\n\u2200x (p_11(x) \u2192 p_5(x))\n(p_10(Chloe) \u2295 p_4(Chloe)) \u2192 p_11(Chloe)\np_3(Chloe) \u2192 (p_9(Chloe) \u2295 p_10(Chloe))\np_7(Chloe) \u2295 p_9(Chloe)\np_1(Chloe) \u2192 p_6(Chloe)\np_8(Chloe) \u2192 p_5(Chloe)",
            "Initial Goal": "(p_6(Chloe) \u2295 p_8(Chloe)) \u2192 p_0(Chloe)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_5(Chloe)",
                    "p_4(Chloe)",
                    "p_3(Chloe)",
                    "-p_2(Chloe)",
                    "p_1(Chloe)",
                    "-p_0(Chloe)",
                    "all x (p_11(x) -> p_5(x))",
                    "(-(p_10(Chloe) <-> p_4(Chloe))) -> p_11(Chloe)",
                    "p_3(Chloe) -> (-(p_9(Chloe) <-> p_10(Chloe)))",
                    "-(p_7(Chloe) <-> p_9(Chloe))",
                    "p_1(Chloe) -> p_6(Chloe)",
                    "p_8(Chloe) -> p_5(Chloe)"
                ],
                "formulas(goals)": [
                    "-((-(p_6(Chloe) <-> p_8(Chloe))) -> p_0(Chloe))"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "p_6(Chloe) \u2227 p_8(Chloe)"
                ],
                "removed_rules": [
                    "(p_7(Chloe) \u2295 p_2(Chloe)) \u2192 p_8(Chloe)"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_8(Chloe) \u2192 p_5(Chloe)"
                ]
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_5(Chloe)\np_4(Chloe)\np_3(Chloe)\n\u00acp_2(Chloe)\np_1(Chloe)\n\u00acp_0(Chloe)\n\u2200x (p_11(x) \u2192 p_5(x))\n(p_10(Chloe) \u2295 p_4(Chloe)) \u2192 p_11(Chloe)\np_3(Chloe) \u2192 (p_9(Chloe) \u2295 p_10(Chloe))\np_7(Chloe) \u2295 p_9(Chloe)\np_1(Chloe) \u2192 p_6(Chloe)\np_8(Chloe) \u2192 p_5(Chloe)\np_6(Chloe)\n\u00acp_8(Chloe)",
            "Initial Goal": "(p_6(Chloe) \u2295 p_8(Chloe)) \u2192 p_0(Chloe)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_5(Chloe)",
                    "p_4(Chloe)",
                    "p_3(Chloe)",
                    "-p_2(Chloe)",
                    "p_1(Chloe)",
                    "-p_0(Chloe)",
                    "all x (p_11(x) -> p_5(x))",
                    "(-(p_10(Chloe) <-> p_4(Chloe))) -> p_11(Chloe)",
                    "p_3(Chloe) -> (-(p_9(Chloe) <-> p_10(Chloe)))",
                    "-(p_7(Chloe) <-> p_9(Chloe))",
                    "p_1(Chloe) -> p_6(Chloe)",
                    "p_8(Chloe) -> p_5(Chloe)",
                    "p_6(Chloe)",
                    "-p_8(Chloe)"
                ],
                "formulas(goals)": [
                    "-((-(p_6(Chloe) <-> p_8(Chloe))) -> p_0(Chloe))"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_6(Chloe)",
                    "\u00acp_8(Chloe)"
                ],
                "added_rules": []
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_5(Chloe)\np_4(Chloe)\np_3(Chloe)\n\u00acp_2(Chloe)\np_1(Chloe)\n\u2200x (p_11(x) \u2192 p_5(x))\n(p_10(Chloe) \u2295 p_4(Chloe)) \u2192 p_11(Chloe)\np_3(Chloe) \u2192 (p_9(Chloe) \u2295 p_10(Chloe))\np_7(Chloe) \u2295 p_9(Chloe)\np_1(Chloe) \u2192 p_6(Chloe)\np_8(Chloe) \u2192 p_5(Chloe)\np_6(Chloe)\n\u00acp_8(Chloe)\np_3(Chloe) \u2192 p_0(Chloe)",
            "Initial Goal": "(p_6(Chloe) \u2295 p_8(Chloe)) \u2192 p_0(Chloe)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_5(Chloe)",
                    "p_4(Chloe)",
                    "p_3(Chloe)",
                    "-p_2(Chloe)",
                    "p_1(Chloe)",
                    "all x (p_11(x) -> p_5(x))",
                    "(-(p_10(Chloe) <-> p_4(Chloe))) -> p_11(Chloe)",
                    "p_3(Chloe) -> (-(p_9(Chloe) <-> p_10(Chloe)))",
                    "-(p_7(Chloe) <-> p_9(Chloe))",
                    "p_1(Chloe) -> p_6(Chloe)",
                    "p_8(Chloe) -> p_5(Chloe)",
                    "p_6(Chloe)",
                    "-p_8(Chloe)",
                    "p_3(Chloe) -> p_0(Chloe)"
                ],
                "formulas(goals)": [
                    "(-(p_6(Chloe) <-> p_8(Chloe))) -> p_0(Chloe)"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "\u00acp_0(Chloe)"
                ],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "p_3(Chloe) \u2192 p_0(Chloe)"
                ]
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_5(Chloe)\np_4(Chloe)\np_3(Chloe)\n\u00acp_2(Chloe)\np_1(Chloe)\n\u2200x (\u00acp_5(x) \u2192 \u00acp_11(x))\n(p_10(Chloe) \u2295 p_4(Chloe)) \u2192 p_11(Chloe)\np_3(Chloe) \u2192 (p_9(Chloe) \u2295 p_10(Chloe))\np_7(Chloe) \u2295 p_9(Chloe)\np_1(Chloe) \u2192 p_6(Chloe)\np_8(Chloe) \u2192 p_5(Chloe)\np_6(Chloe)\n\u00acp_8(Chloe)\np_3(Chloe) \u2192 p_0(Chloe)\np_0(Chloe)\n\u00acp_6(Chloe) \u2192 \u00acp_1(Chloe)",
            "Initial Goal": "(p_6(Chloe) \u2295 p_8(Chloe)) \u2192 p_0(Chloe)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_5(Chloe)",
                    "p_4(Chloe)",
                    "p_3(Chloe)",
                    "-p_2(Chloe)",
                    "p_1(Chloe)",
                    "all x (-p_5(x) -> -p_11(x))",
                    "(-(p_10(Chloe) <-> p_4(Chloe))) -> p_11(Chloe)",
                    "p_3(Chloe) -> (-(p_9(Chloe) <-> p_10(Chloe)))",
                    "-(p_7(Chloe) <-> p_9(Chloe))",
                    "p_1(Chloe) -> p_6(Chloe)",
                    "p_8(Chloe) -> p_5(Chloe)",
                    "p_6(Chloe)",
                    "-p_8(Chloe)",
                    "p_3(Chloe) -> p_0(Chloe)",
                    "p_0(Chloe)",
                    "(-p_6(Chloe)) -> (-p_1(Chloe))"
                ],
                "formulas(goals)": [
                    "(-(p_6(Chloe) <-> p_8(Chloe))) -> p_0(Chloe)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_0(Chloe)",
                    "\u00acp_6(Chloe) \u2192 \u00acp_1(Chloe)"
                ],
                "added_rules": [
                    "\u2200x (\u00acp_5(x) \u2192 \u00acp_11(x))"
                ]
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_5(Chloe)\np_4(Chloe)\np_3(Chloe)\n\u00acp_2(Chloe)\np_1(Chloe)\n\u2200x (\u00acp_5(x) \u2192 \u00acp_11(x))\n(p_10(Chloe) \u2295 p_4(Chloe)) \u2192 p_11(Chloe)\np_3(Chloe) \u2192 (p_9(Chloe) \u2295 p_10(Chloe))\np_7(Chloe) \u2295 p_9(Chloe)\np_1(Chloe) \u2192 p_6(Chloe)\np_8(Chloe) \u2192 p_5(Chloe)\np_6(Chloe)\n\u00acp_8(Chloe)\n\u00acp_6(Chloe) \u2192 \u00acp_1(Chloe)\np_4(Chloe) \u2192 \u00acp_0(Chloe)",
            "Initial Goal": "(p_6(Chloe) \u2295 p_8(Chloe)) \u2192 p_0(Chloe)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_5(Chloe).",
                    "p_4(Chloe).",
                    "p_3(Chloe).",
                    "-p_2(Chloe).",
                    "p_1(Chloe).",
                    "all x (-p_5(x) -> -p_11(x)).",
                    "(-(p_10(Chloe) <-> p_4(Chloe))) -> p_11(Chloe).",
                    "p_3(Chloe) -> (-(p_9(Chloe) <-> p_10(Chloe))).",
                    "-(p_7(Chloe) <-> p_9(Chloe)).",
                    "p_1(Chloe) -> p_6(Chloe).",
                    "p_8(Chloe) -> p_5(Chloe).",
                    "p_6(Chloe).",
                    "-p_8(Chloe).",
                    "-p_6(Chloe) -> -p_1(Chloe).",
                    "p_4(Chloe) -> -p_0(Chloe)."
                ],
                "formulas(goals)": [
                    "-p_0(Chloe)."
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "p_0(Chloe)"
                ],
                "removed_rules": [
                    "p_3(Chloe) \u2192 p_0(Chloe)"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_4(Chloe) \u2192 \u00acp_0(Chloe)"
                ]
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_5(Chloe)\np_4(Chloe)\np_3(Chloe)\n\u00acp_2(Chloe)\np_1(Chloe)\n\u2200x (\u00acp_5(x) \u2192 \u00acp_11(x))\n(p_10(Chloe) \u2295 p_4(Chloe)) \u2192 p_11(Chloe)\np_3(Chloe) \u2192 (p_9(Chloe) \u2295 p_10(Chloe))\np_7(Chloe) \u2295 p_9(Chloe)\np_1(Chloe) \u2192 p_6(Chloe)\np_8(Chloe) \u2192 p_5(Chloe)\np_6(Chloe)\n\u00acp_8(Chloe)\n\u00acp_6(Chloe) \u2192 \u00acp_1(Chloe)\np_4(Chloe) \u2192 p_0(Chloe)",
            "Initial Goal": "(p_6(Chloe) \u2295 p_8(Chloe)) \u2192 p_0(Chloe)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_5(Chloe)",
                    "p_4(Chloe)",
                    "p_3(Chloe)",
                    "-p_2(Chloe)",
                    "p_1(Chloe)",
                    "all x (-p_5(x) -> -p_11(x))",
                    "(-(p_10(Chloe) <-> p_4(Chloe))) -> p_11(Chloe)",
                    "p_3(Chloe) -> (-(p_9(Chloe) <-> p_10(Chloe)))",
                    "-(p_7(Chloe) <-> p_9(Chloe))",
                    "p_1(Chloe) -> p_6(Chloe)",
                    "p_8(Chloe) -> p_5(Chloe)",
                    "p_6(Chloe)",
                    "-p_8(Chloe)",
                    "-p_6(Chloe) -> -p_1(Chloe)",
                    "p_4(Chloe) -> p_0(Chloe)"
                ],
                "formulas(goals)": [
                    "(-(p_6(Chloe) <-> p_8(Chloe))) -> p_0(Chloe)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_4(Chloe) \u2192 \u00acp_0(Chloe)"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_4(Chloe) \u2192 p_0(Chloe)"
                ]
            }
        }
    ]
}