{
    "background_story": "Jorge was a powerful wizard known for his mastery of ancient incantations. In a small, mystical village, he spent years studying forbidden tomes and practicing spells under the light of the full moon. His most prized possession was a worn leather book containing the incantation of 'Luminaria' - a spell rumored to conjure brilliant light from darkness. Jorge's deep understanding of the mystical arts allowed him to wield this incantation with precision, illuminating even the darkest of places. The villagers sought his help during the great eclipse, when an unnatural darkness threatened to consume their homes. With a flick of his wrist and a whispered incantation, Jorge summoned a beacon of light, guiding the villagers through the darkness and saving their town from despair.",
    "predicates": [
        {
            "id": 0,
            "name": "casts_spells"
        },
        {
            "id": 1,
            "name": "reads_tomes"
        },
        {
            "id": 2,
            "name": "heal_others"
        },
        {
            "id": 3,
            "name": "manipulate_fire"
        },
        {
            "id": 4,
            "name": "control_ice"
        },
        {
            "id": 5,
            "name": "mastery_of_luminaria"
        },
        {
            "id": 6,
            "name": "lack_of_luminaria"
        },
        {
            "id": 7,
            "name": "knows_shadows"
        },
        {
            "id": 8,
            "name": "controls_elements"
        },
        {
            "id": 9,
            "name": "is_powerful"
        },
        {
            "id": 10,
            "name": "summon_light"
        },
        {
            "id": 11,
            "name": "fails_incant"
        },
        {
            "id": 12,
            "name": "forgets_runes"
        },
        {
            "id": 13,
            "name": "understands_magic"
        },
        {
            "id": 14,
            "name": "understands_arcana"
        },
        {
            "id": 15,
            "name": "wields_magic"
        },
        {
            "id": 16,
            "name": "study_ancient_incantations"
        },
        {
            "id": 17,
            "name": "conjure_protection"
        }
    ],
    "subject_name": "Jorge",
    "subject_category": "wizard",
    "keyword": "incantation",
    "all_facts": [
        {
            "id": 0,
            "subject": "Jorge",
            "text": "Jorge cannot cast spells.",
            "fol": "\u00acp_0(Jorge)",
            "str_fol": "\u00accasts_spells(Jorge)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Jorge",
            "text": "Jorge does not read ancient tomes.",
            "fol": "\u00acp_1(Jorge)",
            "str_fol": "\u00acreads_tomes(Jorge)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Jorge",
            "text": "Jorge does not heal others.",
            "fol": "\u00acp_2(Jorge)",
            "str_fol": "\u00acheal_others(Jorge)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Jorge",
            "text": "Jorge can manipulate fire.",
            "fol": "p_3(Jorge)",
            "str_fol": "manipulate_fire(Jorge)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Jorge",
            "text": "Jorge can control ice.",
            "fol": "p_4(Jorge)",
            "str_fol": "control_ice(Jorge)",
            "negation": false
        },
        {
            "id": 5,
            "subject": "Jorge",
            "text": "Jorge does not summon light.",
            "fol": "\u00acp_10(Jorge)",
            "str_fol": "\u00acsummon_light(Jorge)",
            "negation": true
        },
        {
            "id": 6,
            "subject": "Jorge",
            "text": "Jorge is not powerful.",
            "fol": "\u00acp_9(Jorge)",
            "str_fol": "\u00acis_powerful(Jorge)",
            "negation": true
        },
        {
            "id": 7,
            "subject": "Jorge",
            "text": "Jorge cannot control the elements.",
            "fol": "\u00acp_8(Jorge)",
            "str_fol": "\u00accontrols_elements(Jorge)",
            "negation": true
        },
        {
            "id": 8,
            "subject": "Jorge",
            "text": "Jorge does not know the secrets of shadows.",
            "fol": "\u00acp_7(Jorge)",
            "str_fol": "\u00acknows_shadows(Jorge)",
            "negation": true
        },
        {
            "id": 9,
            "subject": "Jorge",
            "text": "Jorge does not lack the knowledge of Luminaria.",
            "fol": "\u00acp_6(Jorge)",
            "str_fol": "\u00aclack_of_luminaria(Jorge)",
            "negation": true
        },
        {
            "id": 10,
            "subject": "Jorge",
            "text": "Jorge has mastery of Luminaria.",
            "fol": "p_5(Jorge)",
            "str_fol": "mastery_of_luminaria(Jorge)",
            "negation": false
        }
    ],
    "context_facts": [
        {
            "id": 3,
            "subject": "Jorge",
            "text": "Jorge can manipulate fire.",
            "fol": "p_3(Jorge)",
            "str_fol": "manipulate_fire(Jorge)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Jorge",
            "text": "Jorge can control ice.",
            "fol": "p_4(Jorge)",
            "str_fol": "control_ice(Jorge)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Jorge",
            "text": "Jorge does not heal others.",
            "fol": "\u00acp_2(Jorge)",
            "str_fol": "\u00acheal_others(Jorge)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Jorge",
            "text": "Jorge does not read ancient tomes.",
            "fol": "\u00acp_1(Jorge)",
            "str_fol": "\u00acreads_tomes(Jorge)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Jorge",
            "text": "Jorge cannot cast spells.",
            "fol": "\u00acp_0(Jorge)",
            "str_fol": "\u00accasts_spells(Jorge)",
            "negation": true
        }
    ],
    "context_rules": [
        {
            "id": 5,
            "text": "If Jorge summons light, then he can either manipulate fire or control ice, but not both.",
            "fol": "p_10(Jorge) \u2192 (p_3(Jorge) \u2295 p_4(Jorge))",
            "str_fol": "summon_light(Jorge) \u2192 (manipulate_fire(Jorge) \u2295 control_ice(Jorge))"
        },
        {
            "id": 4,
            "text": "If Jorge is a powerful wizard, then he either summons light or heals others.",
            "fol": "p_9(Jorge) \u2192 (p_10(Jorge) \u2228 p_2(Jorge))",
            "str_fol": "is_powerful(Jorge) \u2192 (summon_light(Jorge) \u2228 heal_others(Jorge))"
        },
        {
            "id": 3,
            "text": "If Jorge controls the elements, then he is powerful.",
            "fol": "p_8(Jorge) \u2192 p_9(Jorge)",
            "str_fol": "controls_elements(Jorge) \u2192 is_powerful(Jorge)"
        },
        {
            "id": 2,
            "text": "If Jorge either reads ancient tomes or knows the secrets of shadows (but not both), then he can control the elements.",
            "fol": "(p_1(Jorge) \u2295 p_7(Jorge)) \u2192 p_8(Jorge)",
            "str_fol": "(reads_tomes(Jorge) \u2295 knows_shadows(Jorge)) \u2192 controls_elements(Jorge)"
        },
        {
            "id": 1,
            "text": "If Jorge either lacks the knowledge of Luminaria or knows the secrets of shadows (but not both), then he can cast spells.",
            "fol": "(p_6(Jorge) \u2295 p_7(Jorge)) \u2192 p_0(Jorge)",
            "str_fol": "(lack_of_luminaria(Jorge) \u2295 knows_shadows(Jorge)) \u2192 casts_spells(Jorge)"
        },
        {
            "id": 0,
            "text": "For every wizard, they either have mastery of Luminaria or lack the knowledge of Luminaria, but not both.",
            "fol": "\u2200x (p_5(x) \u2295 p_6(x))",
            "str_fol": "\u2200x (mastery_of_luminaria(x) \u2295 lack_of_luminaria(x))"
        }
    ],
    "context": [
        {
            "id": 3,
            "subject": "Jorge",
            "text": "Jorge can manipulate fire.",
            "fol": "p_3(Jorge)",
            "str_fol": "manipulate_fire(Jorge)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Jorge",
            "text": "Jorge can control ice.",
            "fol": "p_4(Jorge)",
            "str_fol": "control_ice(Jorge)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Jorge",
            "text": "Jorge does not heal others.",
            "fol": "\u00acp_2(Jorge)",
            "str_fol": "\u00acheal_others(Jorge)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Jorge",
            "text": "Jorge does not read ancient tomes.",
            "fol": "\u00acp_1(Jorge)",
            "str_fol": "\u00acreads_tomes(Jorge)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Jorge",
            "text": "Jorge cannot cast spells.",
            "fol": "\u00acp_0(Jorge)",
            "str_fol": "\u00accasts_spells(Jorge)",
            "negation": true
        },
        {
            "id": 5,
            "text": "If Jorge summons light, then he can either manipulate fire or control ice, but not both.",
            "fol": "p_10(Jorge) \u2192 (p_3(Jorge) \u2295 p_4(Jorge))",
            "str_fol": "summon_light(Jorge) \u2192 (manipulate_fire(Jorge) \u2295 control_ice(Jorge))"
        },
        {
            "id": 4,
            "text": "If Jorge is a powerful wizard, then he either summons light or heals others.",
            "fol": "p_9(Jorge) \u2192 (p_10(Jorge) \u2228 p_2(Jorge))",
            "str_fol": "is_powerful(Jorge) \u2192 (summon_light(Jorge) \u2228 heal_others(Jorge))"
        },
        {
            "id": 3,
            "text": "If Jorge controls the elements, then he is powerful.",
            "fol": "p_8(Jorge) \u2192 p_9(Jorge)",
            "str_fol": "controls_elements(Jorge) \u2192 is_powerful(Jorge)"
        },
        {
            "id": 2,
            "text": "If Jorge either reads ancient tomes or knows the secrets of shadows (but not both), then he can control the elements.",
            "fol": "(p_1(Jorge) \u2295 p_7(Jorge)) \u2192 p_8(Jorge)",
            "str_fol": "(reads_tomes(Jorge) \u2295 knows_shadows(Jorge)) \u2192 controls_elements(Jorge)"
        },
        {
            "id": 1,
            "text": "If Jorge either lacks the knowledge of Luminaria or knows the secrets of shadows (but not both), then he can cast spells.",
            "fol": "(p_6(Jorge) \u2295 p_7(Jorge)) \u2192 p_0(Jorge)",
            "str_fol": "(lack_of_luminaria(Jorge) \u2295 knows_shadows(Jorge)) \u2192 casts_spells(Jorge)"
        },
        {
            "id": 0,
            "text": "For every wizard, they either have mastery of Luminaria or lack the knowledge of Luminaria, but not both.",
            "fol": "\u2200x (p_5(x) \u2295 p_6(x))",
            "str_fol": "\u2200x (mastery_of_luminaria(x) \u2295 lack_of_luminaria(x))"
        }
    ],
    "context_fol": "p_3(Jorge)\np_4(Jorge)\n\u00acp_2(Jorge)\n\u00acp_1(Jorge)\n\u00acp_0(Jorge)\np_10(Jorge) \u2192 (p_3(Jorge) \u2295 p_4(Jorge))\np_9(Jorge) \u2192 (p_10(Jorge) \u2228 p_2(Jorge))\np_8(Jorge) \u2192 p_9(Jorge)\n(p_1(Jorge) \u2295 p_7(Jorge)) \u2192 p_8(Jorge)\n(p_6(Jorge) \u2295 p_7(Jorge)) \u2192 p_0(Jorge)\n\u2200x (p_5(x) \u2295 p_6(x))",
    "conclusion": {
        "id": 10,
        "subject": "Jorge",
        "text": "Jorge has mastery of Luminaria.",
        "fol": "p_5(Jorge)",
        "str_fol": "mastery_of_luminaria(Jorge)",
        "negation": false
    },
    "initial_answer": "True",
    "initial_goal": "p_5(Jorge)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 3,
                    "subject": "Jorge",
                    "text": "Jorge can manipulate fire.",
                    "fol": "p_3(Jorge)",
                    "str_fol": "manipulate_fire(Jorge)",
                    "negation": false
                },
                {
                    "id": 4,
                    "subject": "Jorge",
                    "text": "Jorge can control ice.",
                    "fol": "p_4(Jorge)",
                    "str_fol": "control_ice(Jorge)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "If Jorge summons light, then he can either manipulate fire or control ice, but not both.",
                    "fol": "p_10(Jorge) \u2192 (p_3(Jorge) \u2295 p_4(Jorge))",
                    "str_fol": "summon_light(Jorge) \u2192 (manipulate_fire(Jorge) \u2295 control_ice(Jorge))"
                }
            ],
            "conclusion": {
                "id": 5,
                "subject": "Jorge",
                "text": "Jorge does not summon light.",
                "fol": "\u00acp_10(Jorge)",
                "str_fol": "\u00acsummon_light(Jorge)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 5,
                    "subject": "Jorge",
                    "text": "Jorge does not summon light.",
                    "fol": "\u00acp_10(Jorge)",
                    "str_fol": "\u00acsummon_light(Jorge)",
                    "negation": true
                },
                {
                    "id": 2,
                    "subject": "Jorge",
                    "text": "Jorge does not heal others.",
                    "fol": "\u00acp_2(Jorge)",
                    "str_fol": "\u00acheal_others(Jorge)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "If Jorge is a powerful wizard, then he either summons light or heals others.",
                    "fol": "p_9(Jorge) \u2192 (p_10(Jorge) \u2228 p_2(Jorge))",
                    "str_fol": "is_powerful(Jorge) \u2192 (summon_light(Jorge) \u2228 heal_others(Jorge))"
                }
            ],
            "conclusion": {
                "id": 6,
                "subject": "Jorge",
                "text": "Jorge is not powerful.",
                "fol": "\u00acp_9(Jorge)",
                "str_fol": "\u00acis_powerful(Jorge)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 6,
                    "subject": "Jorge",
                    "text": "Jorge is not powerful.",
                    "fol": "\u00acp_9(Jorge)",
                    "str_fol": "\u00acis_powerful(Jorge)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "If Jorge controls the elements, then he is powerful.",
                    "fol": "p_8(Jorge) \u2192 p_9(Jorge)",
                    "str_fol": "controls_elements(Jorge) \u2192 is_powerful(Jorge)"
                }
            ],
            "conclusion": {
                "id": 7,
                "subject": "Jorge",
                "text": "Jorge cannot control the elements.",
                "fol": "\u00acp_8(Jorge)",
                "str_fol": "\u00accontrols_elements(Jorge)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 1,
                    "subject": "Jorge",
                    "text": "Jorge does not read ancient tomes.",
                    "fol": "\u00acp_1(Jorge)",
                    "str_fol": "\u00acreads_tomes(Jorge)",
                    "negation": true
                },
                {
                    "id": 7,
                    "subject": "Jorge",
                    "text": "Jorge cannot control the elements.",
                    "fol": "\u00acp_8(Jorge)",
                    "str_fol": "\u00accontrols_elements(Jorge)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "If Jorge either reads ancient tomes or knows the secrets of shadows (but not both), then he can control the elements.",
                    "fol": "(p_1(Jorge) \u2295 p_7(Jorge)) \u2192 p_8(Jorge)",
                    "str_fol": "(reads_tomes(Jorge) \u2295 knows_shadows(Jorge)) \u2192 controls_elements(Jorge)"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Jorge",
                "text": "Jorge does not know the secrets of shadows.",
                "fol": "\u00acp_7(Jorge)",
                "str_fol": "\u00acknows_shadows(Jorge)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 8,
                    "subject": "Jorge",
                    "text": "Jorge does not know the secrets of shadows.",
                    "fol": "\u00acp_7(Jorge)",
                    "str_fol": "\u00acknows_shadows(Jorge)",
                    "negation": true
                },
                {
                    "id": 0,
                    "subject": "Jorge",
                    "text": "Jorge cannot cast spells.",
                    "fol": "\u00acp_0(Jorge)",
                    "str_fol": "\u00accasts_spells(Jorge)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "If Jorge either lacks the knowledge of Luminaria or knows the secrets of shadows (but not both), then he can cast spells.",
                    "fol": "(p_6(Jorge) \u2295 p_7(Jorge)) \u2192 p_0(Jorge)",
                    "str_fol": "(lack_of_luminaria(Jorge) \u2295 knows_shadows(Jorge)) \u2192 casts_spells(Jorge)"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Jorge",
                "text": "Jorge does not lack the knowledge of Luminaria.",
                "fol": "\u00acp_6(Jorge)",
                "str_fol": "\u00aclack_of_luminaria(Jorge)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 9,
                    "subject": "Jorge",
                    "text": "Jorge does not lack the knowledge of Luminaria.",
                    "fol": "\u00acp_6(Jorge)",
                    "str_fol": "\u00aclack_of_luminaria(Jorge)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "For every wizard, they either have mastery of Luminaria or lack the knowledge of Luminaria, but not both.",
                    "fol": "\u2200x (p_5(x) \u2295 p_6(x))",
                    "str_fol": "\u2200x (mastery_of_luminaria(x) \u2295 lack_of_luminaria(x))"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Jorge",
                "text": "Jorge has mastery of Luminaria.",
                "fol": "p_5(Jorge)",
                "str_fol": "mastery_of_luminaria(Jorge)",
                "negation": false
            }
        }
    ],
    "proof_trace": "1 p_10(Jorge) -> -(p_3(Jorge) <-> p_4(Jorge)).  [assumption].\n2 p_9(Jorge) -> p_10(Jorge) | p_2(Jorge).  [assumption].\n3 p_8(Jorge) -> p_9(Jorge).  [assumption].\n4 -(p_1(Jorge) <-> p_7(Jorge)) -> p_8(Jorge).  [assumption].\n5 -(p_6(Jorge) <-> p_7(Jorge)) -> p_0(Jorge).  [assumption].\n6 (all x -(p_5(x) <-> p_6(x))).  [assumption].\n7 p_5(Jorge).  [goal].\n8 -p_10(Jorge) | -p_3(Jorge) | -p_4(Jorge).  [clausify(1)].\n9 p_3(Jorge).  [assumption].\n11 -p_10(Jorge) | -p_4(Jorge).  [resolve(8,b,9,a)].\n12 p_4(Jorge).  [assumption].\n13 -p_9(Jorge) | p_10(Jorge) | p_2(Jorge).  [clausify(2)].\n14 -p_2(Jorge).  [assumption].\n15 p_1(Jorge) | -p_7(Jorge) | p_8(Jorge).  [clausify(4)].\n16 -p_1(Jorge).  [assumption].\n18 -p_6(Jorge) | p_7(Jorge) | p_0(Jorge).  [clausify(5)].\n19 -p_0(Jorge).  [assumption].\n21 -p_7(Jorge) | p_8(Jorge).  [resolve(15,a,16,a)].\n22 -p_8(Jorge) | p_9(Jorge).  [clausify(3)].\n24 p_5(x) | p_6(x).  [clausify(6)].\n25 -p_5(Jorge).  [deny(7)].\n26 -p_9(Jorge) | p_10(Jorge).  [resolve(13,c,14,a)].\n27 -p_10(Jorge).  [resolve(11,b,12,a)].\n29 -p_6(Jorge) | p_7(Jorge).  [resolve(18,c,19,a)].\n30 p_6(Jorge).  [resolve(25,a,24,a)].\n31 p_7(Jorge).  [resolve(30,a,29,a)].\n32 -p_7(Jorge) | p_9(Jorge).  [resolve(21,b,22,a)].\n33 p_9(Jorge).  [resolve(31,a,32,a)].\n34 -p_9(Jorge).  [resolve(26,b,27,a)].\n35 $F.  [resolve(33,a,34,a)].",
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_3(Jorge)\np_4(Jorge)\n\u00acp_2(Jorge)\n\u00acp_1(Jorge)\n\u00acp_0(Jorge)\np_10(Jorge) \u2192 (p_3(Jorge) \u2295 p_4(Jorge))\np_9(Jorge) \u2192 (p_10(Jorge) \u2228 p_2(Jorge))\np_8(Jorge) \u2192 p_9(Jorge)\n(p_1(Jorge) \u2295 p_7(Jorge)) \u2192 p_8(Jorge)\n(p_6(Jorge) \u2295 p_7(Jorge)) \u2192 p_0(Jorge)\n\u2200x (p_5(x) \u2295 p_6(x))\np_10(Jorge) \u2192 (p_3(Jorge) \u2228 p_4(Jorge))\np_9(Jorge) \u2192 p_2(Jorge)",
            "Initial Goal": "p_5(Jorge)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_3(Jorge)",
                    "p_4(Jorge)",
                    "-p_2(Jorge)",
                    "-p_1(Jorge)",
                    "-p_0(Jorge)",
                    "p_10(Jorge) -> (-(p_3(Jorge) <-> p_4(Jorge)))",
                    "p_9(Jorge) -> (p_10(Jorge) | p_2(Jorge))",
                    "p_8(Jorge) -> p_9(Jorge)",
                    "(-(p_1(Jorge) <-> p_7(Jorge))) -> p_8(Jorge)",
                    "(-(p_6(Jorge) <-> p_7(Jorge))) -> p_0(Jorge)",
                    "all x (-(p_5(x) <-> p_6(x)))",
                    "p_10(Jorge) -> (p_3(Jorge) | p_4(Jorge))",
                    "p_9(Jorge) -> p_2(Jorge)"
                ],
                "formulas(goals)": [
                    "p_5(Jorge)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "p_10(Jorge) \u2192 (p_3(Jorge) \u2228 p_4(Jorge))",
                    "p_9(Jorge) \u2192 p_2(Jorge)"
                ]
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_3(Jorge)\np_4(Jorge)\n\u00acp_2(Jorge)\n\u00acp_1(Jorge)\n\u00acp_0(Jorge)\np_10(Jorge) \u2192 (p_3(Jorge) \u2295 p_4(Jorge))\np_9(Jorge) \u2192 (p_10(Jorge) \u2228 p_2(Jorge))\np_8(Jorge) \u2192 p_9(Jorge)\n(p_6(Jorge) \u2295 p_7(Jorge)) \u2192 p_0(Jorge)\n\u2200x (p_5(x) \u2295 p_6(x))\np_10(Jorge) \u2192 (p_3(Jorge) \u2228 p_4(Jorge))\np_9(Jorge) \u2192 p_2(Jorge)\n\u00acp_6(Jorge) \u2192 p_0(Jorge)",
            "Initial Goal": "p_5(Jorge)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_3(Jorge).",
                    "p_4(Jorge).",
                    "-p_2(Jorge).",
                    "-p_1(Jorge).",
                    "-p_0(Jorge).",
                    "p_10(Jorge) -> (- (p_3(Jorge) <-> p_4(Jorge))).",
                    "p_9(Jorge) -> (p_10(Jorge) | p_2(Jorge)).",
                    "p_8(Jorge) -> p_9(Jorge).",
                    "(- (p_6(Jorge) <-> p_7(Jorge))) -> p_0(Jorge).",
                    "all x (- (p_5(x) <-> p_6(x))).",
                    "p_10(Jorge) -> (p_3(Jorge) | p_4(Jorge)).",
                    "p_9(Jorge) -> p_2(Jorge).",
                    "-p_6(Jorge) -> p_0(Jorge)."
                ],
                "formulas(goals)": [
                    "-p_5(Jorge)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "(p_1(Jorge) \u2295 p_7(Jorge)) \u2192 p_8(Jorge)"
                ],
                "added_facts": [],
                "added_rules": [
                    "\u00acp_6(Jorge) \u2192 p_0(Jorge)"
                ]
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_3(Jorge)\np_4(Jorge)\n\u00acp_2(Jorge)\n\u00acp_1(Jorge)\n\u00acp_0(Jorge)\np_10(Jorge) \u2192 (p_3(Jorge) \u2295 p_4(Jorge))\np_9(Jorge) \u2192 (p_10(Jorge) \u2228 p_2(Jorge))\np_8(Jorge) \u2192 p_9(Jorge)\n(p_6(Jorge) \u2295 p_7(Jorge)) \u2192 p_0(Jorge)\n\u2200x (p_5(x) \u2295 p_6(x))\np_10(Jorge) \u2192 (p_3(Jorge) \u2228 p_4(Jorge))\np_9(Jorge) \u2192 p_2(Jorge)\n\u00acp_6(Jorge) \u2192 p_0(Jorge)\n\u00acp_2(Jorge) \u2192 \u00acp_9(Jorge)\n\u00acp_9(Jorge) \u2192 \u00acp_8(Jorge)\np_6(Jorge)\n\u00acp_5(Jorge)\np_10(Jorge) \u2192 (p_4(Jorge) \u2228 p_3(Jorge))",
            "Initial Goal": "p_5(Jorge)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_3(Jorge)",
                    "p_4(Jorge)",
                    "-p_2(Jorge)",
                    "-p_1(Jorge)",
                    "-p_0(Jorge)",
                    "p_10(Jorge) -> (-(p_3(Jorge) <-> p_4(Jorge)))",
                    "p_9(Jorge) -> (p_10(Jorge) | p_2(Jorge))",
                    "p_8(Jorge) -> p_9(Jorge)",
                    "(-(p_6(Jorge) <-> p_7(Jorge))) -> p_0(Jorge)",
                    "all x (-(p_5(x) <-> p_6(x)))",
                    "p_10(Jorge) -> (p_3(Jorge) | p_4(Jorge))",
                    "p_9(Jorge) -> p_2(Jorge)",
                    "-p_6(Jorge) -> p_0(Jorge)",
                    "-p_2(Jorge) -> -p_9(Jorge)",
                    "-p_9(Jorge) -> -p_8(Jorge)",
                    "p_6(Jorge)",
                    "-p_5(Jorge)",
                    "p_10(Jorge) -> (p_4(Jorge) | p_3(Jorge))"
                ],
                "formulas(goals)": [
                    "-p_5(Jorge)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_6(Jorge)",
                    "\u00acp_5(Jorge)"
                ],
                "added_rules": [
                    "\u00acp_2(Jorge) \u2192 \u00acp_9(Jorge)",
                    "\u00acp_9(Jorge) \u2192 \u00acp_8(Jorge)",
                    "p_10(Jorge) \u2192 (p_4(Jorge) \u2228 p_3(Jorge))"
                ]
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_3(Jorge)\np_4(Jorge)\n\u00acp_2(Jorge)\n\u00acp_1(Jorge)\n\u00acp_0(Jorge)\np_10(Jorge) \u2192 ((p_3(Jorge) \u2228 \u00acp_4(Jorge)) \u2228 (\u00acp_3(Jorge) \u2228 p_4(Jorge)))\np_9(Jorge) \u2192 (p_10(Jorge) \u2228 p_2(Jorge))\np_8(Jorge) \u2192 p_9(Jorge)\n((p_6(Jorge) \u2228 \u00acp_7(Jorge)) \u2228 (\u00acp_6(Jorge) \u2228 p_7(Jorge))) \u2192 p_0(Jorge)\n\u2200x ((p_5(x) \u2228 p_6(x)) \u2227 (\u00acp_5(x) \u2228 \u00acp_6(x)))\np_10(Jorge) \u2192 (p_3(Jorge) \u2228 p_4(Jorge))\np_9(Jorge) \u2192 p_2(Jorge)\n\u00acp_2(Jorge) \u2192 \u00acp_9(Jorge)\n\u00acp_9(Jorge) \u2192 \u00acp_8(Jorge)\np_10(Jorge) \u2192 (p_4(Jorge) \u2228 p_3(Jorge))\n\u00acp_6(Jorge)",
            "Initial Goal": "p_5(Jorge)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_3(Jorge).",
                    "p_4(Jorge).",
                    "-p_2(Jorge).",
                    "-p_1(Jorge).",
                    "-p_0(Jorge).",
                    "p_10(Jorge) -> (p_3(Jorge) | -p_4(Jorge)) | (-p_3(Jorge) | p_4(Jorge)).",
                    "p_9(Jorge) -> p_10(Jorge) | p_2(Jorge).",
                    "p_8(Jorge) -> p_9(Jorge).",
                    "(p_6(Jorge) | -p_7(Jorge)) | (-p_6(Jorge) | p_7(Jorge)) -> p_0(Jorge).",
                    "(all x (p_5(x) | p_6(x)) & (-p_5(x) | -p_6(x))).",
                    "p_10(Jorge) -> p_3(Jorge) | p_4(Jorge).",
                    "p_9(Jorge) -> p_2(Jorge).",
                    "-p_2(Jorge) -> -p_9(Jorge).",
                    "-p_9(Jorge) -> -p_8(Jorge).",
                    "p_10(Jorge) -> p_4(Jorge) | p_3(Jorge).",
                    "-p_6(Jorge)."
                ],
                "formulas(goals)": [
                    "p_5(Jorge)."
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "p_6(Jorge)",
                    "\u00acp_5(Jorge)"
                ],
                "removed_rules": [
                    "\u00acp_6(Jorge) \u2192 p_0(Jorge)"
                ],
                "added_facts": [
                    "\u00acp_6(Jorge)"
                ],
                "added_rules": []
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_3(Jorge)\np_4(Jorge)\n\u00acp_2(Jorge)\n\u00acp_1(Jorge)\n\u00acp_0(Jorge)\np_10(Jorge) \u2192 ((p_3(Jorge) \u2228 \u00acp_4(Jorge)) \u2228 (\u00acp_3(Jorge) \u2228 p_4(Jorge)))\np_9(Jorge) \u2192 (p_10(Jorge) \u2228 p_2(Jorge))\np_8(Jorge) \u2192 p_9(Jorge)\n((p_6(Jorge) \u2228 \u00acp_7(Jorge)) \u2228 (\u00acp_6(Jorge) \u2228 p_7(Jorge))) \u2192 p_0(Jorge)\n\u2200x (\u00acp_5(x) \u2228 \u00acp_6(x))\np_10(Jorge) \u2192 (p_3(Jorge) \u2228 p_4(Jorge))\np_9(Jorge) \u2192 p_2(Jorge)\n\u00acp_2(Jorge) \u2192 \u00acp_9(Jorge)\n\u00acp_9(Jorge) \u2192 \u00acp_8(Jorge)\np_10(Jorge) \u2192 (p_4(Jorge) \u2228 p_3(Jorge))\np_6(Jorge)",
            "Initial Goal": "p_5(Jorge)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_3(Jorge).",
                    "p_4(Jorge).",
                    "-p_2(Jorge).",
                    "-p_1(Jorge).",
                    "-p_0(Jorge).",
                    "p_10(Jorge) -> ((p_3(Jorge) | -p_4(Jorge)) | (-p_3(Jorge) | p_4(Jorge))).",
                    "p_9(Jorge) -> (p_10(Jorge) | p_2(Jorge)).",
                    "p_8(Jorge) -> p_9(Jorge).",
                    "((p_6(Jorge) | -p_7(Jorge)) | (-p_6(Jorge) | p_7(Jorge))) -> p_0(Jorge).",
                    "all x (-p_5(x) | -p_6(x)).",
                    "p_10(Jorge) -> (p_3(Jorge) | p_4(Jorge)).",
                    "p_9(Jorge) -> p_2(Jorge).",
                    "-p_2(Jorge) -> -p_9(Jorge).",
                    "-p_9(Jorge) -> -p_8(Jorge).",
                    "p_10(Jorge) -> (p_4(Jorge) | p_3(Jorge)).",
                    "p_6(Jorge)."
                ],
                "formulas(goals)": [
                    "-p_5(Jorge)."
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "\u00acp_6(Jorge)"
                ],
                "removed_rules": [
                    "\u2200x ((p_5(x) \u2228 p_6(x)) \u2227 (\u00acp_5(x) \u2228 \u00acp_6(x)))"
                ],
                "added_facts": [
                    "p_6(Jorge)"
                ],
                "added_rules": [
                    "\u2200x (\u00acp_5(x) \u2228 \u00acp_6(x))"
                ]
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_3(Jorge)\np_4(Jorge)\n\u00acp_2(Jorge)\n\u00acp_1(Jorge)\n\u00acp_0(Jorge)\np_10(Jorge) \u2192 ((p_3(Jorge) \u2228 \u00acp_4(Jorge)) \u2228 (\u00acp_3(Jorge) \u2228 p_4(Jorge)))\np_9(Jorge) \u2192 (p_10(Jorge) \u2228 p_2(Jorge))\np_8(Jorge) \u2192 p_9(Jorge)\n((p_6(Jorge) \u2228 \u00acp_7(Jorge)) \u2228 (\u00acp_6(Jorge) \u2228 p_7(Jorge))) \u2192 p_0(Jorge)\np_10(Jorge) \u2192 (p_3(Jorge) \u2228 p_4(Jorge))\np_9(Jorge) \u2192 p_2(Jorge)\n\u00acp_2(Jorge) \u2192 \u00acp_9(Jorge)\n\u00acp_9(Jorge) \u2192 \u00acp_8(Jorge)\np_10(Jorge) \u2192 (p_4(Jorge) \u2228 p_3(Jorge))\np_6(Jorge)\np_6(Jorge) \u2192 p_5(Jorge)",
            "Initial Goal": "p_5(Jorge)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_3(Jorge).",
                    "p_4(Jorge).",
                    "-p_2(Jorge).",
                    "-p_1(Jorge).",
                    "-p_0(Jorge).",
                    "p_10(Jorge) -> ((p_3(Jorge) | -p_4(Jorge)) | (-p_3(Jorge) | p_4(Jorge))).",
                    "p_9(Jorge) -> (p_10(Jorge) | p_2(Jorge)).",
                    "p_8(Jorge) -> p_9(Jorge).",
                    "((p_6(Jorge) | -p_7(Jorge)) | (-p_6(Jorge) | p_7(Jorge))) -> p_0(Jorge).",
                    "p_10(Jorge) -> (p_3(Jorge) | p_4(Jorge)).",
                    "p_9(Jorge) -> p_2(Jorge).",
                    "-p_2(Jorge) -> -p_9(Jorge).",
                    "-p_9(Jorge) -> -p_8(Jorge).",
                    "p_10(Jorge) -> (p_4(Jorge) | p_3(Jorge)).",
                    "p_6(Jorge).",
                    "p_6(Jorge) -> p_5(Jorge)."
                ],
                "formulas(goals)": [
                    "p_5(Jorge)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u2200x (\u00acp_5(x) \u2228 \u00acp_6(x))"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_6(Jorge) \u2192 p_5(Jorge)"
                ]
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_3(Jorge)\np_4(Jorge)\n\u00acp_2(Jorge)\n\u00acp_1(Jorge)\n\u00acp_0(Jorge)\np_10(Jorge) \u2192 ((p_3(Jorge) \u2228 \u00acp_4(Jorge)) \u2228 (\u00acp_3(Jorge) \u2228 p_4(Jorge)))\np_9(Jorge) \u2192 (p_10(Jorge) \u2228 p_2(Jorge))\np_8(Jorge) \u2192 p_9(Jorge)\n((p_6(Jorge) \u2228 \u00acp_7(Jorge)) \u2228 (\u00acp_6(Jorge) \u2228 p_7(Jorge))) \u2192 p_0(Jorge)\np_10(Jorge) \u2192 (p_3(Jorge) \u2228 p_4(Jorge))\np_9(Jorge) \u2192 p_2(Jorge)\n\u00acp_2(Jorge) \u2192 \u00acp_9(Jorge)\n\u00acp_9(Jorge) \u2192 \u00acp_8(Jorge)\np_10(Jorge) \u2192 (p_4(Jorge) \u2228 p_3(Jorge))\np_6(Jorge)\np_6(Jorge) \u2192 p_5(Jorge)\np_5(Jorge) \u2228 \u00acp_5(Jorge)\n\u00acp_10(Jorge) \u2228 p_3(Jorge) \u2228 p_4(Jorge)\np_5(Jorge)\n\u00acp_6(Jorge) \u2228 p_5(Jorge)\np_6(Jorge) \u2228 \u00acp_6(Jorge)\np_3(Jorge) \u2228 p_4(Jorge)\np_3(Jorge) \u2228 \u00acp_3(Jorge)\np_6(Jorge) \u2192 (p_5(Jorge) \u2228 p_6(Jorge))\n(p_3(Jorge) \u2228 \u00acp_4(Jorge)) \u2228 (\u00acp_3(Jorge) \u2228 p_4(Jorge))",
            "Initial Goal": "p_5(Jorge)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_3(Jorge).",
                    "p_4(Jorge).",
                    "-p_2(Jorge).",
                    "-p_1(Jorge).",
                    "-p_0(Jorge).",
                    "p_10(Jorge) -> ((p_3(Jorge) | -p_4(Jorge)) | (-p_3(Jorge) | p_4(Jorge))).",
                    "p_9(Jorge) -> (p_10(Jorge) | p_2(Jorge)).",
                    "p_8(Jorge) -> p_9(Jorge).",
                    "((p_6(Jorge) | -p_7(Jorge)) | (-p_6(Jorge) | p_7(Jorge))) -> p_0(Jorge).",
                    "p_10(Jorge) -> (p_3(Jorge) | p_4(Jorge)).",
                    "p_9(Jorge) -> p_2(Jorge).",
                    "-p_2(Jorge) -> -p_9(Jorge).",
                    "-p_9(Jorge) -> -p_8(Jorge).",
                    "p_10(Jorge) -> (p_4(Jorge) | p_3(Jorge)).",
                    "p_6(Jorge).",
                    "p_6(Jorge) -> p_5(Jorge).",
                    "p_5(Jorge) | -p_5(Jorge).",
                    "-p_10(Jorge) | p_3(Jorge) | p_4(Jorge).",
                    "p_5(Jorge).",
                    "-p_6(Jorge) | p_5(Jorge).",
                    "p_6(Jorge) | -p_6(Jorge).",
                    "p_3(Jorge) | p_4(Jorge).",
                    "p_3(Jorge) | -p_3(Jorge).",
                    "p_6(Jorge) -> (p_5(Jorge) | p_6(Jorge)).",
                    "(p_3(Jorge) | -p_4(Jorge)) | (-p_3(Jorge) | p_4(Jorge))."
                ],
                "formulas(goals)": [
                    "p_5(Jorge)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_5(Jorge)",
                    "p_3(Jorge) \u2228 p_4(Jorge)",
                    "p_3(Jorge) \u2228 \u00acp_3(Jorge)",
                    "(p_3(Jorge) \u2228 \u00acp_4(Jorge)) \u2228 (\u00acp_3(Jorge) \u2228 p_4(Jorge))"
                ],
                "added_rules": [
                    "p_5(Jorge) \u2228 \u00acp_5(Jorge)",
                    "\u00acp_10(Jorge) \u2228 p_3(Jorge) \u2228 p_4(Jorge)",
                    "\u00acp_6(Jorge) \u2228 p_5(Jorge)",
                    "p_6(Jorge) \u2228 \u00acp_6(Jorge)",
                    "p_6(Jorge) \u2192 (p_5(Jorge) \u2228 p_6(Jorge))"
                ]
            }
        }
    ]
}