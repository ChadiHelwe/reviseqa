{
    "background_story": "Shepard was a charismatic and adventurous journalist who made a name for himself in the quaint town of Springfield. Born and raised there, he knew its streets and stories like the back of his hand. Shepard's curiosity and passion for storytelling led him to uncover some of Springfield's most intriguing tales, from the legendary donut shop that attracted visitors from all over to the mysterious monorail that once promised to revolutionize the town's transportation. His articles in the Springfield Shopper often highlighted the town's eccentric characters and their stories, showcasing the heart and soul of the community. Shepard's love for Springfield and its people was evident in every word he wrote, making him a beloved figure in the town he called home.",
    "predicates": [
        {
            "id": 0,
            "name": "shows_passion"
        },
        {
            "id": 1,
            "name": "explores_community"
        },
        {
            "id": 2,
            "name": "uncover_truth"
        },
        {
            "id": 3,
            "name": "reveal_facts"
        },
        {
            "id": 4,
            "name": "solve_puzzles"
        },
        {
            "id": 5,
            "name": "lives_in_Springfield"
        },
        {
            "id": 6,
            "name": "knows_local_stories"
        },
        {
            "id": 7,
            "name": "writes_articles"
        },
        {
            "id": 8,
            "name": "tells_tales"
        },
        {
            "id": 9,
            "name": "has_curiosity"
        },
        {
            "id": 10,
            "name": "discovers_secrets"
        },
        {
            "id": 11,
            "name": "expose_mysteries"
        },
        {
            "id": 12,
            "name": "loves_history"
        },
        {
            "id": 13,
            "name": "meets_people"
        },
        {
            "id": 14,
            "name": "is_inquisitive"
        },
        {
            "id": 15,
            "name": "has_good_insights"
        },
        {
            "id": 16,
            "name": "shares_stories"
        },
        {
            "id": 17,
            "name": "captures_essence"
        },
        {
            "id": 18,
            "name": "asks_questions"
        },
        {
            "id": 19,
            "name": "investigate_clues"
        },
        {
            "id": 20,
            "name": "seek_justice"
        }
    ],
    "subject_name": "Shepard",
    "subject_category": "human",
    "keyword": "springfield",
    "all_facts": [
        {
            "id": 0,
            "subject": "Shepard",
            "text": "Shepard does not show passion.",
            "fol": "\u00acp_0(Shepard)",
            "str_fol": "\u00acshows_passion(Shepard)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Shepard",
            "text": "Shepard explores his community.",
            "fol": "p_1(Shepard)",
            "str_fol": "explores_community(Shepard)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Shepard",
            "text": "Shepard does not uncover the truth.",
            "fol": "\u00acp_2(Shepard)",
            "str_fol": "\u00acuncover_truth(Shepard)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Shepard",
            "text": "Shepard reveals facts.",
            "fol": "p_3(Shepard)",
            "str_fol": "reveal_facts(Shepard)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Shepard",
            "text": "Shepard solves puzzles.",
            "fol": "p_4(Shepard)",
            "str_fol": "solve_puzzles(Shepard)",
            "negation": false
        },
        {
            "id": 5,
            "subject": "Shepard",
            "text": "Shepard does not expose mysteries.",
            "fol": "\u00acp_11(Shepard)",
            "str_fol": "\u00acexpose_mysteries(Shepard)",
            "negation": true
        },
        {
            "id": 6,
            "subject": "Shepard",
            "text": "Shepard does not discover secrets.",
            "fol": "\u00acp_10(Shepard)",
            "str_fol": "\u00acdiscovers_secrets(Shepard)",
            "negation": true
        },
        {
            "id": 7,
            "subject": "Shepard",
            "text": "Shepard does not have curiosity.",
            "fol": "\u00acp_9(Shepard)",
            "str_fol": "\u00achas_curiosity(Shepard)",
            "negation": true
        },
        {
            "id": 8,
            "subject": "Shepard",
            "text": "Shepard does not tell tales.",
            "fol": "\u00acp_8(Shepard)",
            "str_fol": "\u00actells_tales(Shepard)",
            "negation": true
        },
        {
            "id": 9,
            "subject": "Shepard",
            "text": "Shepard writes articles.",
            "fol": "p_7(Shepard)",
            "str_fol": "writes_articles(Shepard)",
            "negation": false
        },
        {
            "id": 10,
            "subject": "Shepard",
            "text": "Shepard does not know the local stories.",
            "fol": "\u00acp_6(Shepard)",
            "str_fol": "\u00acknows_local_stories(Shepard)",
            "negation": true
        },
        {
            "id": 11,
            "subject": "Shepard",
            "text": "Shepard does not live in Springfield.",
            "fol": "\u00acp_5(Shepard)",
            "str_fol": "\u00aclives_in_Springfield(Shepard)",
            "negation": true
        }
    ],
    "context_facts": [
        {
            "id": 3,
            "subject": "Shepard",
            "text": "Shepard reveals facts.",
            "fol": "p_3(Shepard)",
            "str_fol": "reveal_facts(Shepard)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Shepard",
            "text": "Shepard solves puzzles.",
            "fol": "p_4(Shepard)",
            "str_fol": "solve_puzzles(Shepard)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Shepard",
            "text": "Shepard does not uncover the truth.",
            "fol": "\u00acp_2(Shepard)",
            "str_fol": "\u00acuncover_truth(Shepard)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Shepard",
            "text": "Shepard explores his community.",
            "fol": "p_1(Shepard)",
            "str_fol": "explores_community(Shepard)",
            "negation": false
        },
        {
            "id": 0,
            "subject": "Shepard",
            "text": "Shepard does not show passion.",
            "fol": "\u00acp_0(Shepard)",
            "str_fol": "\u00acshows_passion(Shepard)",
            "negation": true
        }
    ],
    "context_rules": [
        {
            "id": 6,
            "text": "If Shepard exposes mysteries, then he either reveals facts or solves puzzles, but not both.",
            "fol": "p_11(Shepard) \u2192 (p_3(Shepard) \u2295 p_4(Shepard))",
            "str_fol": "expose_mysteries(Shepard) \u2192 (reveal_facts(Shepard) \u2295 solve_puzzles(Shepard))"
        },
        {
            "id": 5,
            "text": "Anyone who discovers secrets either uncovers the truth or exposes mysteries.",
            "fol": "\u2200x (p_10(x) \u2192 (p_2(x) \u2228 p_11(x)))",
            "str_fol": "\u2200x (discovers_secrets(x) \u2192 (uncover_truth(x) \u2228 expose_mysteries(x)))"
        },
        {
            "id": 4,
            "text": "If Shepard explores his community and has curiosity, then he discovers secrets.",
            "fol": "(p_1(Shepard) \u2227 p_9(Shepard)) \u2192 p_10(Shepard)",
            "str_fol": "(explores_community(Shepard) \u2227 has_curiosity(Shepard)) \u2192 discovers_secrets(Shepard)"
        },
        {
            "id": 3,
            "text": "Anyone who tells tales has curiosity or shows passion (or both).",
            "fol": "\u2200x (p_8(x) \u2192 (p_9(x) \u2228 p_0(x)))",
            "str_fol": "\u2200x (tells_tales(x) \u2192 (has_curiosity(x) \u2228 shows_passion(x)))"
        },
        {
            "id": 2,
            "text": "Either Shepard tells tales or writes articles, but he does not do both.",
            "fol": "p_8(Shepard) \u2295 p_7(Shepard)",
            "str_fol": "tells_tales(Shepard) \u2295 writes_articles(Shepard)"
        },
        {
            "id": 1,
            "text": "If someone writes articles, they may not necessarily know local stories, and if someone knows local stories, they may not necessarily write articles.",
            "fol": "\u2200x (p_7(x) \u2295 p_6(x))",
            "str_fol": "\u2200x (writes_articles(x) \u2295 knows_local_stories(x))"
        },
        {
            "id": 0,
            "text": "If Shepard lives in Springfield, then he knows the local stories.",
            "fol": "p_5(Shepard) \u2192 p_6(Shepard)",
            "str_fol": "lives_in_Springfield(Shepard) \u2192 knows_local_stories(Shepard)"
        }
    ],
    "context": [
        {
            "id": 3,
            "subject": "Shepard",
            "text": "Shepard reveals facts.",
            "fol": "p_3(Shepard)",
            "str_fol": "reveal_facts(Shepard)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Shepard",
            "text": "Shepard solves puzzles.",
            "fol": "p_4(Shepard)",
            "str_fol": "solve_puzzles(Shepard)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Shepard",
            "text": "Shepard does not uncover the truth.",
            "fol": "\u00acp_2(Shepard)",
            "str_fol": "\u00acuncover_truth(Shepard)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Shepard",
            "text": "Shepard explores his community.",
            "fol": "p_1(Shepard)",
            "str_fol": "explores_community(Shepard)",
            "negation": false
        },
        {
            "id": 0,
            "subject": "Shepard",
            "text": "Shepard does not show passion.",
            "fol": "\u00acp_0(Shepard)",
            "str_fol": "\u00acshows_passion(Shepard)",
            "negation": true
        },
        {
            "id": 6,
            "text": "If Shepard exposes mysteries, then he either reveals facts or solves puzzles, but not both.",
            "fol": "p_11(Shepard) \u2192 (p_3(Shepard) \u2295 p_4(Shepard))",
            "str_fol": "expose_mysteries(Shepard) \u2192 (reveal_facts(Shepard) \u2295 solve_puzzles(Shepard))"
        },
        {
            "id": 5,
            "text": "Anyone who discovers secrets either uncovers the truth or exposes mysteries.",
            "fol": "\u2200x (p_10(x) \u2192 (p_2(x) \u2228 p_11(x)))",
            "str_fol": "\u2200x (discovers_secrets(x) \u2192 (uncover_truth(x) \u2228 expose_mysteries(x)))"
        },
        {
            "id": 4,
            "text": "If Shepard explores his community and has curiosity, then he discovers secrets.",
            "fol": "(p_1(Shepard) \u2227 p_9(Shepard)) \u2192 p_10(Shepard)",
            "str_fol": "(explores_community(Shepard) \u2227 has_curiosity(Shepard)) \u2192 discovers_secrets(Shepard)"
        },
        {
            "id": 3,
            "text": "Anyone who tells tales has curiosity or shows passion (or both).",
            "fol": "\u2200x (p_8(x) \u2192 (p_9(x) \u2228 p_0(x)))",
            "str_fol": "\u2200x (tells_tales(x) \u2192 (has_curiosity(x) \u2228 shows_passion(x)))"
        },
        {
            "id": 2,
            "text": "Either Shepard tells tales or writes articles, but he does not do both.",
            "fol": "p_8(Shepard) \u2295 p_7(Shepard)",
            "str_fol": "tells_tales(Shepard) \u2295 writes_articles(Shepard)"
        },
        {
            "id": 1,
            "text": "If someone writes articles, they may not necessarily know local stories, and if someone knows local stories, they may not necessarily write articles.",
            "fol": "\u2200x (p_7(x) \u2295 p_6(x))",
            "str_fol": "\u2200x (writes_articles(x) \u2295 knows_local_stories(x))"
        },
        {
            "id": 0,
            "text": "If Shepard lives in Springfield, then he knows the local stories.",
            "fol": "p_5(Shepard) \u2192 p_6(Shepard)",
            "str_fol": "lives_in_Springfield(Shepard) \u2192 knows_local_stories(Shepard)"
        }
    ],
    "context_fol": "p_3(Shepard)\np_4(Shepard)\n\u00acp_2(Shepard)\np_1(Shepard)\n\u00acp_0(Shepard)\np_11(Shepard) \u2192 (p_3(Shepard) \u2295 p_4(Shepard))\n\u2200x (p_10(x) \u2192 (p_2(x) \u2228 p_11(x)))\n(p_1(Shepard) \u2227 p_9(Shepard)) \u2192 p_10(Shepard)\n\u2200x (p_8(x) \u2192 (p_9(x) \u2228 p_0(x)))\np_8(Shepard) \u2295 p_7(Shepard)\n\u2200x (p_7(x) \u2295 p_6(x))\np_5(Shepard) \u2192 p_6(Shepard)",
    "conclusion": {
        "id": 11,
        "subject": "Shepard",
        "text": "Shepard does not live in Springfield.",
        "fol": "\u00acp_5(Shepard)",
        "str_fol": "\u00aclives_in_Springfield(Shepard)",
        "negation": true
    },
    "initial_answer": "True",
    "initial_goal": "\u00acp_5(Shepard)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 3,
                    "subject": "Shepard",
                    "text": "Shepard reveals facts.",
                    "fol": "p_3(Shepard)",
                    "str_fol": "reveal_facts(Shepard)",
                    "negation": false
                },
                {
                    "id": 4,
                    "subject": "Shepard",
                    "text": "Shepard solves puzzles.",
                    "fol": "p_4(Shepard)",
                    "str_fol": "solve_puzzles(Shepard)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 6,
                    "text": "If Shepard exposes mysteries, then he either reveals facts or solves puzzles, but not both.",
                    "fol": "p_11(Shepard) \u2192 (p_3(Shepard) \u2295 p_4(Shepard))",
                    "str_fol": "expose_mysteries(Shepard) \u2192 (reveal_facts(Shepard) \u2295 solve_puzzles(Shepard))"
                }
            ],
            "conclusion": {
                "id": 5,
                "subject": "Shepard",
                "text": "Shepard does not expose mysteries.",
                "fol": "\u00acp_11(Shepard)",
                "str_fol": "\u00acexpose_mysteries(Shepard)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 2,
                    "subject": "Shepard",
                    "text": "Shepard does not uncover the truth.",
                    "fol": "\u00acp_2(Shepard)",
                    "str_fol": "\u00acuncover_truth(Shepard)",
                    "negation": true
                },
                {
                    "id": 5,
                    "subject": "Shepard",
                    "text": "Shepard does not expose mysteries.",
                    "fol": "\u00acp_11(Shepard)",
                    "str_fol": "\u00acexpose_mysteries(Shepard)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "Anyone who discovers secrets either uncovers the truth or exposes mysteries.",
                    "fol": "\u2200x (p_10(x) \u2192 (p_2(x) \u2228 p_11(x)))",
                    "str_fol": "\u2200x (discovers_secrets(x) \u2192 (uncover_truth(x) \u2228 expose_mysteries(x)))"
                }
            ],
            "conclusion": {
                "id": 6,
                "subject": "Shepard",
                "text": "Shepard does not discover secrets.",
                "fol": "\u00acp_10(Shepard)",
                "str_fol": "\u00acdiscovers_secrets(Shepard)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 1,
                    "subject": "Shepard",
                    "text": "Shepard explores his community.",
                    "fol": "p_1(Shepard)",
                    "str_fol": "explores_community(Shepard)",
                    "negation": false
                },
                {
                    "id": 6,
                    "subject": "Shepard",
                    "text": "Shepard does not discover secrets.",
                    "fol": "\u00acp_10(Shepard)",
                    "str_fol": "\u00acdiscovers_secrets(Shepard)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "If Shepard explores his community and has curiosity, then he discovers secrets.",
                    "fol": "(p_1(Shepard) \u2227 p_9(Shepard)) \u2192 p_10(Shepard)",
                    "str_fol": "(explores_community(Shepard) \u2227 has_curiosity(Shepard)) \u2192 discovers_secrets(Shepard)"
                }
            ],
            "conclusion": {
                "id": 7,
                "subject": "Shepard",
                "text": "Shepard does not have curiosity.",
                "fol": "\u00acp_9(Shepard)",
                "str_fol": "\u00achas_curiosity(Shepard)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 7,
                    "subject": "Shepard",
                    "text": "Shepard does not have curiosity.",
                    "fol": "\u00acp_9(Shepard)",
                    "str_fol": "\u00achas_curiosity(Shepard)",
                    "negation": true
                },
                {
                    "id": 0,
                    "subject": "Shepard",
                    "text": "Shepard does not show passion.",
                    "fol": "\u00acp_0(Shepard)",
                    "str_fol": "\u00acshows_passion(Shepard)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "Anyone who tells tales has curiosity or shows passion (or both).",
                    "fol": "\u2200x (p_8(x) \u2192 (p_9(x) \u2228 p_0(x)))",
                    "str_fol": "\u2200x (tells_tales(x) \u2192 (has_curiosity(x) \u2228 shows_passion(x)))"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Shepard",
                "text": "Shepard does not tell tales.",
                "fol": "\u00acp_8(Shepard)",
                "str_fol": "\u00actells_tales(Shepard)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 8,
                    "subject": "Shepard",
                    "text": "Shepard does not tell tales.",
                    "fol": "\u00acp_8(Shepard)",
                    "str_fol": "\u00actells_tales(Shepard)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "Either Shepard tells tales or writes articles, but he does not do both.",
                    "fol": "p_8(Shepard) \u2295 p_7(Shepard)",
                    "str_fol": "tells_tales(Shepard) \u2295 writes_articles(Shepard)"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Shepard",
                "text": "Shepard writes articles.",
                "fol": "p_7(Shepard)",
                "str_fol": "writes_articles(Shepard)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 9,
                    "subject": "Shepard",
                    "text": "Shepard writes articles.",
                    "fol": "p_7(Shepard)",
                    "str_fol": "writes_articles(Shepard)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "If someone writes articles, they may not necessarily know local stories, and if someone knows local stories, they may not necessarily write articles.",
                    "fol": "\u2200x (p_7(x) \u2295 p_6(x))",
                    "str_fol": "\u2200x (writes_articles(x) \u2295 knows_local_stories(x))"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Shepard",
                "text": "Shepard does not know the local stories.",
                "fol": "\u00acp_6(Shepard)",
                "str_fol": "\u00acknows_local_stories(Shepard)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 10,
                    "subject": "Shepard",
                    "text": "Shepard does not know the local stories.",
                    "fol": "\u00acp_6(Shepard)",
                    "str_fol": "\u00acknows_local_stories(Shepard)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "If Shepard lives in Springfield, then he knows the local stories.",
                    "fol": "p_5(Shepard) \u2192 p_6(Shepard)",
                    "str_fol": "lives_in_Springfield(Shepard) \u2192 knows_local_stories(Shepard)"
                }
            ],
            "conclusion": {
                "id": 11,
                "subject": "Shepard",
                "text": "Shepard does not live in Springfield.",
                "fol": "\u00acp_5(Shepard)",
                "str_fol": "\u00aclives_in_Springfield(Shepard)",
                "negation": true
            }
        }
    ],
    "proof_trace": "1 p_11(Shepard) -> -(p_3(Shepard) <-> p_4(Shepard)).  [assumption].\n2 (all x (p_10(x) -> p_2(x) | p_11(x))).  [assumption].\n3 p_1(Shepard) & p_9(Shepard) -> p_10(Shepard).  [assumption].\n4 (all x (p_8(x) -> p_9(x) | p_0(x))).  [assumption].\n5 -(p_8(Shepard) <-> p_7(Shepard)).  [assumption].\n6 (all x -(p_7(x) <-> p_6(x))).  [assumption].\n7 p_5(Shepard) -> p_6(Shepard).  [assumption].\n8 -p_5(Shepard).  [goal].\n9 -p_11(Shepard) | -p_3(Shepard) | -p_4(Shepard).  [clausify(1)].\n10 p_3(Shepard).  [assumption].\n12 -p_11(Shepard) | -p_4(Shepard).  [resolve(9,b,10,a)].\n13 p_4(Shepard).  [assumption].\n14 -p_10(x) | p_2(x) | p_11(x).  [clausify(2)].\n15 -p_2(Shepard).  [assumption].\n16 -p_1(Shepard) | -p_9(Shepard) | p_10(Shepard).  [clausify(3)].\n17 p_1(Shepard).  [assumption].\n18 -p_8(x) | p_9(x) | p_0(x).  [clausify(4)].\n19 -p_0(Shepard).  [assumption].\n21 p_8(Shepard) | p_7(Shepard).  [clausify(5)].\n22 -p_8(Shepard) | p_9(Shepard).  [resolve(18,c,19,a)].\n23 -p_7(x) | -p_6(x).  [clausify(6)].\n25 p_9(Shepard) | p_7(Shepard).  [resolve(22,a,21,a)].\n26 p_5(Shepard).  [deny(8)].\n27 -p_5(Shepard) | p_6(Shepard).  [clausify(7)].\n28 -p_10(Shepard) | p_11(Shepard).  [resolve(14,b,15,a)].\n29 -p_11(Shepard).  [resolve(12,b,13,a)].\n30 p_9(Shepard) | -p_6(Shepard).  [resolve(25,b,23,a)].\n31 -p_9(Shepard) | p_10(Shepard).  [resolve(16,a,17,a)].\n32 -p_6(Shepard) | p_10(Shepard).  [resolve(30,a,31,a)].\n33 p_6(Shepard).  [resolve(26,a,27,a)].\n34 p_10(Shepard).  [resolve(32,a,33,a)].\n35 -p_10(Shepard).  [resolve(28,b,29,a)].\n36 $F.  [resolve(34,a,35,a)].",
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_3(Shepard)\np_4(Shepard)\n\u00acp_2(Shepard)\np_1(Shepard)\n\u00acp_0(Shepard)\np_11(Shepard) \u2192 (p_3(Shepard) \u2295 p_4(Shepard))\n\u2200x (p_10(x) \u2192 (p_2(x) \u2228 p_11(x)))\n(p_1(Shepard) \u2227 p_9(Shepard)) \u2192 p_10(Shepard)\n\u2200x (p_8(x) \u2192 (p_9(x) \u2228 p_0(x)))\np_8(Shepard) \u2295 p_7(Shepard)\n\u2200x (p_7(x) \u2295 p_6(x))\np_5(Shepard) \u2192 p_6(Shepard)\n\u00acp_6(Shepard)",
            "Initial Goal": "\u00acp_5(Shepard)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_3(Shepard)",
                    "p_4(Shepard)",
                    "-p_2(Shepard)",
                    "p_1(Shepard)",
                    "-p_0(Shepard)",
                    "p_11(Shepard) -> (-(p_3(Shepard) <-> p_4(Shepard)))",
                    "all x (p_10(x) -> (p_2(x) | p_11(x)))",
                    "(p_1(Shepard) & p_9(Shepard)) -> p_10(Shepard)",
                    "all x (p_8(x) -> (p_9(x) | p_0(x)))",
                    "-(p_8(Shepard) <-> p_7(Shepard))",
                    "all x (-(p_7(x) <-> p_6(x)))",
                    "p_5(Shepard) -> p_6(Shepard)",
                    "-p_6(Shepard)"
                ],
                "formulas(goals)": [
                    "-p_5(Shepard)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "\u00acp_6(Shepard)"
                ],
                "added_rules": []
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_3(Shepard)\np_4(Shepard)\n\u00acp_2(Shepard)\np_1(Shepard)\n\u00acp_0(Shepard)\np_11(Shepard) \u2192 (p_3(Shepard) \u2295 p_4(Shepard))\n\u2200x (p_10(x) \u2192 (p_2(x) \u2228 p_11(x)))\n(p_1(Shepard) \u2227 p_9(Shepard)) \u2192 p_10(Shepard)\n\u2200x (p_8(x) \u2192 (p_9(x) \u2228 p_0(x)))\np_8(Shepard) \u2295 p_7(Shepard)\n\u2200x (p_7(x) \u2295 p_6(x))\np_5(Shepard) \u2192 p_6(Shepard)\n\u00acp_6(Shepard)\np_3(Shepard) \u2227 p_4(Shepard)\n\u00acp_11(Shepard)\np_7(Shepard)\n\u00acp_8(Shepard)\n\u00acp_10(Shepard)\n\u00acp_9(Shepard)",
            "Initial Goal": "\u00acp_5(Shepard)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_3(Shepard)",
                    "p_4(Shepard)",
                    "-p_2(Shepard)",
                    "p_1(Shepard)",
                    "-p_0(Shepard)",
                    "p_11(Shepard) -> (-(p_3(Shepard) <-> p_4(Shepard)))",
                    "all x (p_10(x) -> (p_2(x) | p_11(x)))",
                    "(p_1(Shepard) & p_9(Shepard)) -> p_10(Shepard)",
                    "all x (p_8(x) -> (p_9(x) | p_0(x)))",
                    "-(p_8(Shepard) <-> p_7(Shepard))",
                    "all x (-(p_7(x) <-> p_6(x)))",
                    "p_5(Shepard) -> p_6(Shepard)",
                    "-p_6(Shepard)",
                    "(p_3(Shepard) & p_4(Shepard))",
                    "-p_11(Shepard)",
                    "p_7(Shepard)",
                    "-p_8(Shepard)",
                    "-p_10(Shepard)",
                    "-p_9(Shepard)"
                ],
                "formulas(goals)": [
                    "-p_5(Shepard)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_3(Shepard) \u2227 p_4(Shepard)",
                    "\u00acp_11(Shepard)",
                    "p_7(Shepard)",
                    "\u00acp_8(Shepard)",
                    "\u00acp_10(Shepard)",
                    "\u00acp_9(Shepard)"
                ],
                "added_rules": []
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_3(Shepard)\np_4(Shepard)\n\u00acp_2(Shepard)\np_1(Shepard)\n\u00acp_0(Shepard)\np_11(Shepard) \u2192 (p_3(Shepard) \u2295 p_4(Shepard))\n\u2200x (p_10(x) \u2192 (p_2(x) \u2228 p_11(x)))\n(p_1(Shepard) \u2227 p_9(Shepard)) \u2192 p_10(Shepard)\n\u2200x (p_8(x) \u2192 (p_9(x) \u2228 p_0(x)))\np_8(Shepard) \u2295 p_7(Shepard)\n\u2200x (p_7(x) \u2295 p_6(x))\np_5(Shepard) \u2192 p_6(Shepard)\n\u00acp_6(Shepard)\np_3(Shepard) \u2227 p_4(Shepard)\n\u00acp_11(Shepard)\np_7(Shepard)\n\u00acp_8(Shepard)\n\u00acp_10(Shepard)\n\u00acp_9(Shepard)\n\u00acp_6(Shepard) \u2192 \u00acp_5(Shepard)\np_7(Shepard) \u2194 \u00acp_6(Shepard)\np_7(Shepard) \u2194 \u00acp_8(Shepard)",
            "Initial Goal": "\u00acp_5(Shepard)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_3(Shepard).",
                    "p_4(Shepard).",
                    "-p_2(Shepard).",
                    "p_1(Shepard).",
                    "-p_0(Shepard).",
                    "-p_11(Shepard) | (-p_3(Shepard) | -p_4(Shepard)) & (p_3(Shepard) | p_4(Shepard)).",
                    "all x (-p_10(x) | p_2(x) | p_11(x)).",
                    "-(p_1(Shepard) & p_9(Shepard)) | p_10(Shepard).",
                    "all x (-p_8(x) | p_9(x) | p_0(x)).",
                    "(-p_8(Shepard) | -p_7(Shepard)) & (p_8(Shepard) | p_7(Shepard)).",
                    "all x ((-p_7(x) | -p_6(x)) & (p_7(x) | p_6(x))).",
                    "-p_5(Shepard) | p_6(Shepard).",
                    "-p_6(Shepard).",
                    "p_3(Shepard) & p_4(Shepard).",
                    "-p_11(Shepard).",
                    "p_7(Shepard).",
                    "-p_8(Shepard).",
                    "-p_10(Shepard).",
                    "-p_9(Shepard).",
                    "p_6(Shepard) | -p_5(Shepard).",
                    "(-p_7(Shepard) | -p_6(Shepard)) & (p_7(Shepard) | p_6(Shepard)).",
                    "(-p_7(Shepard) | -p_8(Shepard)) & (p_7(Shepard) | p_8(Shepard))."
                ],
                "formulas(goals)": [
                    "-p_5(Shepard)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "\u00acp_6(Shepard) \u2192 \u00acp_5(Shepard)",
                    "p_7(Shepard) \u2194 \u00acp_6(Shepard)",
                    "p_7(Shepard) \u2194 \u00acp_8(Shepard)"
                ],
                "added_rules": []
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_3(Shepard)\np_4(Shepard)\n\u00acp_2(Shepard)\np_1(Shepard)\n\u00acp_0(Shepard)\np_11(Shepard) \u2192 (p_3(Shepard) \u2295 p_4(Shepard))\n\u2200x (p_10(x) \u2192 (p_2(x) \u2228 p_11(x)))\n(p_1(Shepard) \u2227 p_9(Shepard)) \u2192 p_10(Shepard)\n\u2200x (p_8(x) \u2192 (p_9(x) \u2228 p_0(x)))\np_8(Shepard) \u2295 p_7(Shepard)\n\u2200x (p_7(x) \u2295 p_6(x))\np_5(Shepard) \u2192 p_6(Shepard)\n\u00acp_6(Shepard)\np_3(Shepard) \u2227 p_4(Shepard)\n\u00acp_11(Shepard)\np_7(Shepard)\n\u00acp_8(Shepard)\n\u00acp_10(Shepard)\n\u00acp_9(Shepard)\n\u00acp_6(Shepard) \u2192 \u00acp_5(Shepard)\np_7(Shepard) \u2194 \u00acp_6(Shepard)\np_7(Shepard) \u2194 \u00acp_8(Shepard)\n\u00ac(p_3(Shepard) \u2295 p_4(Shepard))\n\u00acp_10(Shepard) \u2192 \u00ac(p_1(Shepard) \u2227 p_9(Shepard))",
            "Initial Goal": "\u00acp_5(Shepard)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_3(Shepard)",
                    "p_4(Shepard)",
                    "-p_2(Shepard)",
                    "p_1(Shepard)",
                    "-p_0(Shepard)",
                    "p_11(Shepard) -> (-(p_3(Shepard) <-> p_4(Shepard)))",
                    "all x (p_10(x) -> (p_2(x) | p_11(x)))",
                    "(p_1(Shepard) & p_9(Shepard)) -> p_10(Shepard)",
                    "all x (p_8(x) -> (p_9(x) | p_0(x)))",
                    "-(p_8(Shepard) <-> p_7(Shepard))",
                    "all x (-(p_7(x) <-> p_6(x)))",
                    "p_5(Shepard) -> p_6(Shepard)",
                    "-p_6(Shepard)",
                    "p_3(Shepard) & p_4(Shepard)",
                    "-p_11(Shepard)",
                    "p_7(Shepard)",
                    "-p_8(Shepard)",
                    "-p_10(Shepard)",
                    "-p_9(Shepard)",
                    "-p_6(Shepard) -> -p_5(Shepard)",
                    "p_7(Shepard) <-> -p_6(Shepard)",
                    "p_7(Shepard) <-> -p_8(Shepard)",
                    "p_3(Shepard) <-> p_4(Shepard)",
                    "-p_10(Shepard) -> -(p_1(Shepard) & p_9(Shepard))"
                ],
                "formulas(goals)": [
                    "-p_5(Shepard)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "\u00ac(p_3(Shepard) \u2295 p_4(Shepard))"
                ],
                "added_rules": [
                    "\u00acp_10(Shepard) \u2192 \u00ac(p_1(Shepard) \u2227 p_9(Shepard))"
                ]
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_3(Shepard)\np_4(Shepard)\n\u00acp_2(Shepard)\np_1(Shepard)\n\u00acp_0(Shepard)\np_11(Shepard) \u2192 (p_3(Shepard) \u2295 p_4(Shepard))\n\u2200x (p_10(x) \u2192 (p_2(x) \u2228 p_11(x)))\n(p_1(Shepard) \u2227 p_9(Shepard)) \u2192 p_10(Shepard)\n\u2200x (p_8(x) \u2192 (p_9(x) \u2228 p_0(x)))\np_8(Shepard) \u2295 p_7(Shepard)\n\u2200x (p_7(x) \u2295 p_6(x))\n\u00acp_6(Shepard)\np_3(Shepard) \u2227 p_4(Shepard)\n\u00acp_11(Shepard)\np_7(Shepard)\n\u00acp_8(Shepard)\n\u00acp_10(Shepard)\n\u00acp_9(Shepard)\np_7(Shepard) \u2194 \u00acp_6(Shepard)\np_7(Shepard) \u2194 \u00acp_8(Shepard)\n\u00ac(p_3(Shepard) \u2295 p_4(Shepard))\n\u00acp_10(Shepard) \u2192 \u00ac(p_1(Shepard) \u2227 p_9(Shepard))\n(p_3(Shepard) \u2227 p_4(Shepard)) \u2192 p_5(Shepard)",
            "Initial Goal": "\u00acp_5(Shepard)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_3(Shepard)",
                    "p_4(Shepard)",
                    "-p_2(Shepard)",
                    "p_1(Shepard)",
                    "-p_0(Shepard)",
                    "p_11(Shepard) -> (-(p_3(Shepard) <-> p_4(Shepard)))",
                    "all x (p_10(x) -> (p_2(x) | p_11(x)))",
                    "(p_1(Shepard) & p_9(Shepard)) -> p_10(Shepard)",
                    "all x (p_8(x) -> (p_9(x) | p_0(x)))",
                    "-(p_8(Shepard) <-> p_7(Shepard))",
                    "all x (-(p_7(x) <-> p_6(x)))",
                    "-p_6(Shepard)",
                    "p_3(Shepard) & p_4(Shepard)",
                    "-p_11(Shepard)",
                    "p_7(Shepard)",
                    "-p_8(Shepard)",
                    "-p_10(Shepard)",
                    "-p_9(Shepard)",
                    "p_7(Shepard) <-> -p_6(Shepard)",
                    "p_7(Shepard) <-> -p_8(Shepard)",
                    "-(-(p_3(Shepard) <-> p_4(Shepard)))",
                    "-p_10(Shepard) -> -(p_1(Shepard) & p_9(Shepard))",
                    "(p_3(Shepard) & p_4(Shepard)) -> p_5(Shepard)"
                ],
                "formulas(goals)": [
                    "- -p_5(Shepard)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_5(Shepard) \u2192 p_6(Shepard)",
                    "\u00acp_6(Shepard) \u2192 \u00acp_5(Shepard)"
                ],
                "added_facts": [],
                "added_rules": [
                    "(p_3(Shepard) \u2227 p_4(Shepard)) \u2192 p_5(Shepard)"
                ]
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_3(Shepard)\np_4(Shepard)\n\u00acp_2(Shepard)\np_1(Shepard)\n\u00acp_0(Shepard)\np_11(Shepard) \u2192 ((p_3(Shepard) \u2228 p_4(Shepard)) \u2227 \u00ac(p_3(Shepard) \u2227 p_4(Shepard)))\n\u2200x (p_10(x) \u2192 (p_2(x) \u2228 p_11(x)))\n(p_1(Shepard) \u2227 p_9(Shepard)) \u2192 p_10(Shepard)\n\u2200x (p_8(x) \u2192 (p_9(x) \u2228 p_0(x)))\n(p_8(Shepard) \u2228 p_7(Shepard)) \u2227 \u00ac(p_8(Shepard) \u2227 p_7(Shepard))\n\u2200x (p_7(x) \u2295 p_6(x))\n\u00acp_6(Shepard)\np_3(Shepard) \u2227 p_4(Shepard)\n\u00acp_11(Shepard)\np_7(Shepard)\n\u00acp_8(Shepard)\n\u00acp_10(Shepard)\n\u00acp_9(Shepard)\np_7(Shepard) \u2194 \u00acp_6(Shepard)\np_7(Shepard) \u2194 \u00acp_8(Shepard)\n\u00ac((p_3(Shepard) \u2228 p_4(Shepard)) \u2227 \u00ac(p_3(Shepard) \u2227 p_4(Shepard)))\n\u00acp_10(Shepard) \u2192 \u00ac(p_1(Shepard) \u2227 p_9(Shepard))\n(p_3(Shepard) \u2227 p_4(Shepard)) \u2192 p_5(Shepard)\np_5(Shepard)\n\u2200x (\u00acp_7(x) \u2192 p_6(x))\np_8(Shepard) \u2192 (p_9(Shepard) \u2228 p_0(Shepard))\np_10(Shepard) \u2192 (p_2(Shepard) \u2228 p_11(Shepard))",
            "Initial Goal": "\u00acp_5(Shepard)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_3(Shepard)",
                    "p_4(Shepard)",
                    "-p_2(Shepard)",
                    "p_1(Shepard)",
                    "-p_0(Shepard)",
                    "p_11(Shepard) -> ((p_3(Shepard) | p_4(Shepard)) & (-(p_3(Shepard) & p_4(Shepard))))",
                    "all x (p_10(x) -> (p_2(x) | p_11(x)))",
                    "(p_1(Shepard) & p_9(Shepard)) -> p_10(Shepard)",
                    "all x (p_8(x) -> (p_9(x) | p_0(x)))",
                    "(p_8(Shepard) | p_7(Shepard)) & (-(p_8(Shepard) & p_7(Shepard)))",
                    "all x (-(p_7(x) <-> p_6(x)))",
                    "-p_6(Shepard)",
                    "p_3(Shepard) & p_4(Shepard)",
                    "-p_11(Shepard)",
                    "p_7(Shepard)",
                    "-p_8(Shepard)",
                    "-p_10(Shepard)",
                    "-p_9(Shepard)",
                    "p_7(Shepard) <-> (-p_6(Shepard))",
                    "p_7(Shepard) <-> (-p_8(Shepard))",
                    "-((p_3(Shepard) | p_4(Shepard)) & (-(p_3(Shepard) & p_4(Shepard))))",
                    "-p_10(Shepard) -> (-(p_1(Shepard) & p_9(Shepard)))",
                    "(p_3(Shepard) & p_4(Shepard)) -> p_5(Shepard)",
                    "p_5(Shepard)",
                    "all x ((-p_7(x)) -> p_6(x))",
                    "p_8(Shepard) -> (p_9(Shepard) | p_0(Shepard))",
                    "p_10(Shepard) -> (p_2(Shepard) | p_11(Shepard))"
                ],
                "formulas(goals)": [
                    "-(-p_5(Shepard))"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_5(Shepard)"
                ],
                "added_rules": [
                    "\u2200x (\u00acp_7(x) \u2192 p_6(x))",
                    "p_8(Shepard) \u2192 (p_9(Shepard) \u2228 p_0(Shepard))",
                    "p_10(Shepard) \u2192 (p_2(Shepard) \u2228 p_11(Shepard))"
                ]
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_3(Shepard)\np_4(Shepard)\n\u00acp_2(Shepard)\np_1(Shepard)\n\u00acp_0(Shepard)\np_11(Shepard) \u2192 ((p_3(Shepard) \u2228 p_4(Shepard)) \u2227 (\u00acp_3(Shepard) \u2228 \u00acp_4(Shepard)))\n\u2200x (p_10(x) \u2192 (p_2(x) \u2228 p_11(x)))\n(p_1(Shepard) \u2227 p_9(Shepard)) \u2192 p_10(Shepard)\n\u2200x (p_8(x) \u2192 (p_9(x) \u2228 p_0(x)))\n(p_8(Shepard) \u2228 p_7(Shepard)) \u2227 \u00ac(p_8(Shepard) \u2227 p_7(Shepard))\n\u2200x (p_7(x) \u2295 p_6(x))\n\u00acp_6(Shepard)\np_3(Shepard) \u2227 p_4(Shepard)\n\u00acp_11(Shepard)\np_7(Shepard)\n\u00acp_8(Shepard)\n\u00acp_10(Shepard)\n\u00acp_9(Shepard)\np_7(Shepard) \u2194 \u00acp_6(Shepard)\np_7(Shepard) \u2194 \u00acp_8(Shepard)\n\u00ac((p_3(Shepard) \u2228 p_4(Shepard)) \u2227 \u00ac(p_3(Shepard) \u2227 p_4(Shepard)))\n\u00acp_10(Shepard) \u2192 \u00ac(p_1(Shepard) \u2227 p_9(Shepard))\n(p_3(Shepard) \u2227 p_4(Shepard)) \u2192 p_5(Shepard)\np_5(Shepard)\n\u2200x (\u00acp_7(x) \u2192 p_6(x))\np_8(Shepard) \u2192 (p_9(Shepard) \u2228 p_0(Shepard))\np_10(Shepard) \u2192 (p_2(Shepard) \u2228 p_11(Shepard))\np_3(Shepard) \u2228 p_5(Shepard)\np_4(Shepard) \u2228 p_5(Shepard)",
            "Initial Goal": "\u00acp_5(Shepard)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_3(Shepard)",
                    "p_4(Shepard)",
                    "-p_2(Shepard)",
                    "p_1(Shepard)",
                    "-p_0(Shepard)",
                    "p_11(Shepard) -> ((p_3(Shepard) | p_4(Shepard)) & (-p_3(Shepard) | -p_4(Shepard)))",
                    "all x (p_10(x) -> (p_2(x) | p_11(x)))",
                    "(p_1(Shepard) & p_9(Shepard)) -> p_10(Shepard)",
                    "all x (p_8(x) -> (p_9(x) | p_0(x)))",
                    "(p_8(Shepard) | p_7(Shepard)) & -(p_8(Shepard) & p_7(Shepard))",
                    "all x (-(p_7(x) <-> p_6(x)))",
                    "-p_6(Shepard)",
                    "p_3(Shepard) & p_4(Shepard)",
                    "-p_11(Shepard)",
                    "p_7(Shepard)",
                    "-p_8(Shepard)",
                    "-p_10(Shepard)",
                    "-p_9(Shepard)",
                    "p_7(Shepard) <-> -p_6(Shepard)",
                    "p_7(Shepard) <-> -p_8(Shepard)",
                    "-((p_3(Shepard) | p_4(Shepard)) & -(p_3(Shepard) & p_4(Shepard)))",
                    "-p_10(Shepard) -> -(p_1(Shepard) & p_9(Shepard))",
                    "(p_3(Shepard) & p_4(Shepard)) -> p_5(Shepard)",
                    "p_5(Shepard)",
                    "all x (-p_7(x) -> p_6(x))",
                    "p_8(Shepard) -> (p_9(Shepard) | p_0(Shepard))",
                    "p_10(Shepard) -> (p_2(Shepard) | p_11(Shepard))",
                    "p_3(Shepard) | p_5(Shepard)",
                    "p_4(Shepard) | p_5(Shepard)"
                ],
                "formulas(goals)": [
                    "-(-p_5(Shepard))"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_3(Shepard) \u2228 p_5(Shepard)",
                    "p_4(Shepard) \u2228 p_5(Shepard)"
                ],
                "added_rules": [
                    "p_11(Shepard) \u2192 ((p_3(Shepard) \u2228 p_4(Shepard)) \u2227 (\u00acp_3(Shepard) \u2228 \u00acp_4(Shepard)))"
                ]
            }
        }
    ]
}