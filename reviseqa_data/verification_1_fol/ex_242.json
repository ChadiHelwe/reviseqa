{
    "background_story": "Grayson was a grizzled fisherman from Maine, renowned for his exceptional skill in catching the elusive alewife. These small, anadromous fish were a prized catch, not just for their flavor but for the crucial role they played in the ecosystem. Grayson spent his life studying the alewife's migratory patterns, learning the best spots and times to cast his nets. His dedication paid off, as his daily catches were always bountiful. However, Grayson's true passion wasn't just about reeling in a big haul; it was about preserving the tradition of alewife fishing for future generations. He worked tirelessly with local conservation groups to ensure the sustainability of the alewife population, earning him the respect and admiration of his community.",
    "predicates": [
        {
            "id": 0,
            "name": "conserves_fish"
        },
        {
            "id": 1,
            "name": "adventurous"
        },
        {
            "id": 2,
            "name": "loves_ocean"
        },
        {
            "id": 3,
            "name": "reads_waters"
        },
        {
            "id": 4,
            "name": "knows_sea"
        },
        {
            "id": 5,
            "name": "protects_marine"
        },
        {
            "id": 6,
            "name": "teaches_others"
        },
        {
            "id": 7,
            "name": "experienced"
        },
        {
            "id": 8,
            "name": "generous"
        },
        {
            "id": 9,
            "name": "respected"
        },
        {
            "id": 10,
            "name": "dedicated"
        },
        {
            "id": 11,
            "name": "knows_tides"
        },
        {
            "id": 12,
            "name": "catches_alewife"
        },
        {
            "id": 13,
            "name": "skilled"
        },
        {
            "id": 14,
            "name": "shares_knowledge"
        },
        {
            "id": 15,
            "name": "knows_secrets"
        },
        {
            "id": 16,
            "name": "local"
        },
        {
            "id": 17,
            "name": "pioneering"
        },
        {
            "id": 18,
            "name": "local_legend"
        },
        {
            "id": 19,
            "name": "hardworking"
        },
        {
            "id": 20,
            "name": "tracks_weather"
        },
        {
            "id": 21,
            "name": "masters_net"
        },
        {
            "id": 22,
            "name": "helps_colleagues"
        },
        {
            "id": 23,
            "name": "donates_catch"
        },
        {
            "id": 24,
            "name": "uses_nets"
        },
        {
            "id": 25,
            "name": "uses_lines"
        },
        {
            "id": 26,
            "name": "lives_coastal"
        },
        {
            "id": 27,
            "name": "respects_nature"
        }
    ],
    "subject_name": "Grayson",
    "subject_category": "fisherman",
    "keyword": "alewife",
    "all_facts": [
        {
            "id": 0,
            "subject": "Grayson",
            "text": "Grayson does not conserve fish.",
            "fol": "\u00acp_0(Grayson)",
            "str_fol": "\u00acconserves_fish(Grayson)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Grayson",
            "text": "Grayson is not an adventurous fisherman.",
            "fol": "\u00acp_1(Grayson)",
            "str_fol": "\u00acadventurous(Grayson)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Grayson",
            "text": "Grayson loves the ocean.",
            "fol": "p_2(Grayson)",
            "str_fol": "loves_ocean(Grayson)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Grayson",
            "text": "Grayson reads the waters.",
            "fol": "p_3(Grayson)",
            "str_fol": "reads_waters(Grayson)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Grayson",
            "text": "Grayson does not know the sea.",
            "fol": "\u00acp_4(Grayson)",
            "str_fol": "\u00acknows_sea(Grayson)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Grayson",
            "text": "Grayson protects the marine environment.",
            "fol": "p_5(Grayson)",
            "str_fol": "protects_marine(Grayson)",
            "negation": false
        },
        {
            "id": 6,
            "subject": "Grayson",
            "text": "Grayson does not teach others.",
            "fol": "\u00acp_6(Grayson)",
            "str_fol": "\u00acteaches_others(Grayson)",
            "negation": true
        },
        {
            "id": 7,
            "subject": "Grayson",
            "text": "Grayson shares his knowledge.",
            "fol": "p_14(Grayson)",
            "str_fol": "shares_knowledge(Grayson)",
            "negation": false
        },
        {
            "id": 8,
            "subject": "Grayson",
            "text": "Grayson catches alewife.",
            "fol": "p_12(Grayson)",
            "str_fol": "catches_alewife(Grayson)",
            "negation": false
        },
        {
            "id": 9,
            "subject": "Grayson",
            "text": "Grayson is generous.",
            "fol": "p_8(Grayson)",
            "str_fol": "generous(Grayson)",
            "negation": false
        },
        {
            "id": 10,
            "subject": "Grayson",
            "text": "Grayson is skilled.",
            "fol": "p_13(Grayson)",
            "str_fol": "skilled(Grayson)",
            "negation": false
        },
        {
            "id": 11,
            "subject": "Grayson",
            "text": "Grayson is not dedicated.",
            "fol": "\u00acp_10(Grayson)",
            "str_fol": "\u00acdedicated(Grayson)",
            "negation": true
        },
        {
            "id": 12,
            "subject": "Grayson",
            "text": "Grayson is an experienced fisherman.",
            "fol": "p_7(Grayson)",
            "str_fol": "experienced(Grayson)",
            "negation": false
        },
        {
            "id": 13,
            "subject": "Grayson",
            "text": "Grayson is not respected.",
            "fol": "\u00acp_9(Grayson)",
            "str_fol": "\u00acrespected(Grayson)",
            "negation": true
        },
        {
            "id": 14,
            "subject": "Grayson",
            "text": "If Grayson is either skilled or dedicated (but not both), then he is respected.",
            "fol": "(skilled(Grayson) \u2295 dedicated(Grayson)) \u2192 p_9(Grayson)",
            "str_fol": "(skilled(Grayson) \u2295 dedicated(Grayson)) \u2192 respected(Grayson)",
            "negation": false
        }
    ],
    "context_facts": [
        {
            "id": 5,
            "subject": "Grayson",
            "text": "Grayson protects the marine environment.",
            "fol": "p_5(Grayson)",
            "str_fol": "protects_marine(Grayson)",
            "negation": false
        },
        {
            "id": 6,
            "subject": "Grayson",
            "text": "Grayson does not teach others.",
            "fol": "\u00acp_6(Grayson)",
            "str_fol": "\u00acteaches_others(Grayson)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Grayson",
            "text": "Grayson does not know the sea.",
            "fol": "\u00acp_4(Grayson)",
            "str_fol": "\u00acknows_sea(Grayson)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Grayson",
            "text": "Grayson loves the ocean.",
            "fol": "p_2(Grayson)",
            "str_fol": "loves_ocean(Grayson)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Grayson",
            "text": "Grayson reads the waters.",
            "fol": "p_3(Grayson)",
            "str_fol": "reads_waters(Grayson)",
            "negation": false
        },
        {
            "id": 0,
            "subject": "Grayson",
            "text": "Grayson does not conserve fish.",
            "fol": "\u00acp_0(Grayson)",
            "str_fol": "\u00acconserves_fish(Grayson)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Grayson",
            "text": "Grayson is not an adventurous fisherman.",
            "fol": "\u00acp_1(Grayson)",
            "str_fol": "\u00acadventurous(Grayson)",
            "negation": true
        }
    ],
    "context_rules": [
        {
            "id": 7,
            "text": "If Grayson protects the marine environment, then he either teaches others or shares his knowledge, but not both.",
            "fol": "p_5(Grayson) \u2192 (p_6(Grayson) \u2295 p_14(Grayson))",
            "str_fol": "protects_marine(Grayson) \u2192 (teaches_others(Grayson) \u2295 shares_knowledge(Grayson))"
        },
        {
            "id": 6,
            "text": "Grayson either knows the sea or catches alewife.",
            "fol": "p_4(Grayson) \u2228 p_12(Grayson)",
            "str_fol": "knows_sea(Grayson) \u2228 catches_alewife(Grayson)"
        },
        {
            "id": 5,
            "text": "All fishermen who share their knowledge love the ocean and are generous.",
            "fol": "\u2200x (p_14(x) \u2192 (p_2(x) \u2227 p_8(x)))",
            "str_fol": "\u2200x (shares_knowledge(x) \u2192 (loves_ocean(x) \u2227 generous(x)))"
        },
        {
            "id": 4,
            "text": "If Grayson catches alewife, then he is skilled.",
            "fol": "p_12(Grayson) \u2192 p_13(Grayson)",
            "str_fol": "catches_alewife(Grayson) \u2192 skilled(Grayson)"
        },
        {
            "id": 3,
            "text": "Every fisherman either knows the tides or reads the waters.",
            "fol": "\u2200x (p_11(x) \u2228 p_3(x))",
            "str_fol": "\u2200x (knows_tides(x) \u2228 reads_waters(x))"
        },
        {
            "id": 2,
            "text": "If Grayson is dedicated, then he knows the tides and conserves fish.",
            "fol": "p_10(Grayson) \u2192 (p_11(Grayson) \u2227 p_0(Grayson))",
            "str_fol": "dedicated(Grayson) \u2192 (knows_tides(Grayson) \u2227 conserves_fish(Grayson))"
        },
        {
            "id": 1,
            "text": "Grayson is either an experienced fisherman or an adventurous one, but he can't be both.",
            "fol": "p_7(Grayson) \u2295 p_1(Grayson)",
            "str_fol": "experienced(Grayson) \u2295 adventurous(Grayson)"
        },
        {
            "id": 0,
            "text": "If Grayson is an experienced fisherman, then he is either generous or respected, but not both.",
            "fol": "p_7(Grayson) \u2192 (p_8(Grayson) \u2295 p_9(Grayson))",
            "str_fol": "experienced(Grayson) \u2192 (generous(Grayson) \u2295 respected(Grayson))"
        }
    ],
    "context": [
        {
            "id": 5,
            "subject": "Grayson",
            "text": "Grayson protects the marine environment.",
            "fol": "p_5(Grayson)",
            "str_fol": "protects_marine(Grayson)",
            "negation": false
        },
        {
            "id": 6,
            "subject": "Grayson",
            "text": "Grayson does not teach others.",
            "fol": "\u00acp_6(Grayson)",
            "str_fol": "\u00acteaches_others(Grayson)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Grayson",
            "text": "Grayson does not know the sea.",
            "fol": "\u00acp_4(Grayson)",
            "str_fol": "\u00acknows_sea(Grayson)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Grayson",
            "text": "Grayson loves the ocean.",
            "fol": "p_2(Grayson)",
            "str_fol": "loves_ocean(Grayson)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Grayson",
            "text": "Grayson reads the waters.",
            "fol": "p_3(Grayson)",
            "str_fol": "reads_waters(Grayson)",
            "negation": false
        },
        {
            "id": 0,
            "subject": "Grayson",
            "text": "Grayson does not conserve fish.",
            "fol": "\u00acp_0(Grayson)",
            "str_fol": "\u00acconserves_fish(Grayson)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Grayson",
            "text": "Grayson is not an adventurous fisherman.",
            "fol": "\u00acp_1(Grayson)",
            "str_fol": "\u00acadventurous(Grayson)",
            "negation": true
        },
        {
            "id": 7,
            "text": "If Grayson protects the marine environment, then he either teaches others or shares his knowledge, but not both.",
            "fol": "p_5(Grayson) \u2192 (p_6(Grayson) \u2295 p_14(Grayson))",
            "str_fol": "protects_marine(Grayson) \u2192 (teaches_others(Grayson) \u2295 shares_knowledge(Grayson))"
        },
        {
            "id": 6,
            "text": "Grayson either knows the sea or catches alewife.",
            "fol": "p_4(Grayson) \u2228 p_12(Grayson)",
            "str_fol": "knows_sea(Grayson) \u2228 catches_alewife(Grayson)"
        },
        {
            "id": 5,
            "text": "All fishermen who share their knowledge love the ocean and are generous.",
            "fol": "\u2200x (p_14(x) \u2192 (p_2(x) \u2227 p_8(x)))",
            "str_fol": "\u2200x (shares_knowledge(x) \u2192 (loves_ocean(x) \u2227 generous(x)))"
        },
        {
            "id": 4,
            "text": "If Grayson catches alewife, then he is skilled.",
            "fol": "p_12(Grayson) \u2192 p_13(Grayson)",
            "str_fol": "catches_alewife(Grayson) \u2192 skilled(Grayson)"
        },
        {
            "id": 3,
            "text": "Every fisherman either knows the tides or reads the waters.",
            "fol": "\u2200x (p_11(x) \u2228 p_3(x))",
            "str_fol": "\u2200x (knows_tides(x) \u2228 reads_waters(x))"
        },
        {
            "id": 2,
            "text": "If Grayson is dedicated, then he knows the tides and conserves fish.",
            "fol": "p_10(Grayson) \u2192 (p_11(Grayson) \u2227 p_0(Grayson))",
            "str_fol": "dedicated(Grayson) \u2192 (knows_tides(Grayson) \u2227 conserves_fish(Grayson))"
        },
        {
            "id": 1,
            "text": "Grayson is either an experienced fisherman or an adventurous one, but he can't be both.",
            "fol": "p_7(Grayson) \u2295 p_1(Grayson)",
            "str_fol": "experienced(Grayson) \u2295 adventurous(Grayson)"
        },
        {
            "id": 0,
            "text": "If Grayson is an experienced fisherman, then he is either generous or respected, but not both.",
            "fol": "p_7(Grayson) \u2192 (p_8(Grayson) \u2295 p_9(Grayson))",
            "str_fol": "experienced(Grayson) \u2192 (generous(Grayson) \u2295 respected(Grayson))"
        }
    ],
    "context_fol": "p_5(Grayson)\n\u00acp_6(Grayson)\n\u00acp_4(Grayson)\np_2(Grayson)\np_3(Grayson)\n\u00acp_0(Grayson)\n\u00acp_1(Grayson)\np_5(Grayson) \u2192 (p_6(Grayson) \u2295 p_14(Grayson))\np_4(Grayson) \u2228 p_12(Grayson)\n\u2200x (p_14(x) \u2192 (p_2(x) \u2227 p_8(x)))\np_12(Grayson) \u2192 p_13(Grayson)\n\u2200x (p_11(x) \u2228 p_3(x))\np_10(Grayson) \u2192 (p_11(Grayson) \u2227 p_0(Grayson))\np_7(Grayson) \u2295 p_1(Grayson)\np_7(Grayson) \u2192 (p_8(Grayson) \u2295 p_9(Grayson))",
    "conclusion": {
        "id": 16,
        "text": "If Grayson is either skilled or dedicated (but not both), then he is respected.",
        "fol": "(p_13(Grayson) \u2295 p_10(Grayson)) \u2192 p_9(Grayson)",
        "str_fol": "(skilled(Grayson) \u2295 dedicated(Grayson)) \u2192 respected(Grayson)"
    },
    "initial_answer": "False",
    "initial_goal": "(p_13(Grayson) \u2295 p_10(Grayson)) \u2192 p_9(Grayson)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 5,
                    "subject": "Grayson",
                    "text": "Grayson protects the marine environment.",
                    "fol": "p_5(Grayson)",
                    "str_fol": "protects_marine(Grayson)",
                    "negation": false
                },
                {
                    "id": 6,
                    "subject": "Grayson",
                    "text": "Grayson does not teach others.",
                    "fol": "\u00acp_6(Grayson)",
                    "str_fol": "\u00acteaches_others(Grayson)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 7,
                    "text": "If Grayson protects the marine environment, then he either teaches others or shares his knowledge, but not both.",
                    "fol": "p_5(Grayson) \u2192 (p_6(Grayson) \u2295 p_14(Grayson))",
                    "str_fol": "protects_marine(Grayson) \u2192 (teaches_others(Grayson) \u2295 shares_knowledge(Grayson))"
                }
            ],
            "conclusion": {
                "id": 7,
                "subject": "Grayson",
                "text": "Grayson shares his knowledge.",
                "fol": "p_14(Grayson)",
                "str_fol": "shares_knowledge(Grayson)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 4,
                    "subject": "Grayson",
                    "text": "Grayson does not know the sea.",
                    "fol": "\u00acp_4(Grayson)",
                    "str_fol": "\u00acknows_sea(Grayson)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 6,
                    "text": "Grayson either knows the sea or catches alewife.",
                    "fol": "p_4(Grayson) \u2228 p_12(Grayson)",
                    "str_fol": "knows_sea(Grayson) \u2228 catches_alewife(Grayson)"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Grayson",
                "text": "Grayson catches alewife.",
                "fol": "p_12(Grayson)",
                "str_fol": "catches_alewife(Grayson)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 7,
                    "subject": "Grayson",
                    "text": "Grayson shares his knowledge.",
                    "fol": "p_14(Grayson)",
                    "str_fol": "shares_knowledge(Grayson)",
                    "negation": false
                },
                {
                    "id": 2,
                    "subject": "Grayson",
                    "text": "Grayson loves the ocean.",
                    "fol": "p_2(Grayson)",
                    "str_fol": "loves_ocean(Grayson)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "All fishermen who share their knowledge love the ocean and are generous.",
                    "fol": "\u2200x (p_14(x) \u2192 (p_2(x) \u2227 p_8(x)))",
                    "str_fol": "\u2200x (shares_knowledge(x) \u2192 (loves_ocean(x) \u2227 generous(x)))"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Grayson",
                "text": "Grayson is generous.",
                "fol": "p_8(Grayson)",
                "str_fol": "generous(Grayson)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 8,
                    "subject": "Grayson",
                    "text": "Grayson catches alewife.",
                    "fol": "p_12(Grayson)",
                    "str_fol": "catches_alewife(Grayson)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "If Grayson catches alewife, then he is skilled.",
                    "fol": "p_12(Grayson) \u2192 p_13(Grayson)",
                    "str_fol": "catches_alewife(Grayson) \u2192 skilled(Grayson)"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Grayson",
                "text": "Grayson is skilled.",
                "fol": "p_13(Grayson)",
                "str_fol": "skilled(Grayson)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 3,
                    "subject": "Grayson",
                    "text": "Grayson reads the waters.",
                    "fol": "p_3(Grayson)",
                    "str_fol": "reads_waters(Grayson)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "Every fisherman either knows the tides or reads the waters.",
                    "fol": "\u2200x (p_11(x) \u2228 p_3(x))",
                    "str_fol": "\u2200x (knows_tides(x) \u2228 reads_waters(x))"
                }
            ],
            "conclusion": null
        },
        {
            "facts": [
                {
                    "id": 0,
                    "subject": "Grayson",
                    "text": "Grayson does not conserve fish.",
                    "fol": "\u00acp_0(Grayson)",
                    "str_fol": "\u00acconserves_fish(Grayson)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "If Grayson is dedicated, then he knows the tides and conserves fish.",
                    "fol": "p_10(Grayson) \u2192 (p_11(Grayson) \u2227 p_0(Grayson))",
                    "str_fol": "dedicated(Grayson) \u2192 (knows_tides(Grayson) \u2227 conserves_fish(Grayson))"
                }
            ],
            "conclusion": {
                "id": 11,
                "subject": "Grayson",
                "text": "Grayson is not dedicated.",
                "fol": "\u00acp_10(Grayson)",
                "str_fol": "\u00acdedicated(Grayson)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 1,
                    "subject": "Grayson",
                    "text": "Grayson is not an adventurous fisherman.",
                    "fol": "\u00acp_1(Grayson)",
                    "str_fol": "\u00acadventurous(Grayson)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "Grayson is either an experienced fisherman or an adventurous one, but he can't be both.",
                    "fol": "p_7(Grayson) \u2295 p_1(Grayson)",
                    "str_fol": "experienced(Grayson) \u2295 adventurous(Grayson)"
                }
            ],
            "conclusion": {
                "id": 12,
                "subject": "Grayson",
                "text": "Grayson is an experienced fisherman.",
                "fol": "p_7(Grayson)",
                "str_fol": "experienced(Grayson)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 12,
                    "subject": "Grayson",
                    "text": "Grayson is an experienced fisherman.",
                    "fol": "p_7(Grayson)",
                    "str_fol": "experienced(Grayson)",
                    "negation": false
                },
                {
                    "id": 9,
                    "subject": "Grayson",
                    "text": "Grayson is generous.",
                    "fol": "p_8(Grayson)",
                    "str_fol": "generous(Grayson)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "If Grayson is an experienced fisherman, then he is either generous or respected, but not both.",
                    "fol": "p_7(Grayson) \u2192 (p_8(Grayson) \u2295 p_9(Grayson))",
                    "str_fol": "experienced(Grayson) \u2192 (generous(Grayson) \u2295 respected(Grayson))"
                }
            ],
            "conclusion": {
                "id": 13,
                "subject": "Grayson",
                "text": "Grayson is not respected.",
                "fol": "\u00acp_9(Grayson)",
                "str_fol": "\u00acrespected(Grayson)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 10,
                    "subject": "Grayson",
                    "text": "Grayson is skilled.",
                    "fol": "p_13(Grayson)",
                    "str_fol": "skilled(Grayson)",
                    "negation": false
                },
                {
                    "id": 11,
                    "subject": "Grayson",
                    "text": "Grayson is not dedicated.",
                    "fol": "\u00acp_10(Grayson)",
                    "str_fol": "\u00acdedicated(Grayson)",
                    "negation": true
                },
                {
                    "id": 13,
                    "subject": "Grayson",
                    "text": "Grayson is not respected.",
                    "fol": "\u00acp_9(Grayson)",
                    "str_fol": "\u00acrespected(Grayson)",
                    "negation": true
                }
            ],
            "rules": [],
            "conclusion": {
                "id": 16,
                "text": "If Grayson is either skilled or dedicated (but not both), then he is respected.",
                "fol": "(p_13(Grayson) \u2295 p_10(Grayson)) \u2192 p_9(Grayson)",
                "str_fol": "(skilled(Grayson) \u2295 dedicated(Grayson)) \u2192 respected(Grayson)"
            }
        }
    ],
    "proof_trace": "1 p_5(Grayson) -> -(p_6(Grayson) <-> p_14(Grayson)).  [assumption].\n2 (all x (p_14(x) -> p_2(x) & p_8(x))).  [assumption].\n3 p_12(Grayson) -> p_13(Grayson).  [assumption].\n5 p_10(Grayson) -> p_11(Grayson) & p_0(Grayson).  [assumption].\n6 -(p_7(Grayson) <-> p_1(Grayson)).  [assumption].\n7 p_7(Grayson) -> -(p_8(Grayson) <-> p_9(Grayson)).  [assumption].\n8 -(-(p_13(Grayson) <-> p_10(Grayson)) -> p_9(Grayson)).  [goal].\n9 -p_5(Grayson) | p_6(Grayson) | p_14(Grayson).  [clausify(1)].\n10 p_5(Grayson).  [assumption].\n12 p_6(Grayson) | p_14(Grayson).  [resolve(9,a,10,a)].\n13 -p_6(Grayson).  [assumption].\n15 p_4(Grayson) | p_12(Grayson).  [assumption].\n16 -p_4(Grayson).  [assumption].\n17 -p_10(Grayson) | p_0(Grayson).  [clausify(5)].\n18 -p_0(Grayson).  [assumption].\n19 p_7(Grayson) | p_1(Grayson).  [clausify(6)].\n20 -p_1(Grayson).  [assumption].\n22 p_14(Grayson).  [resolve(12,a,13,a)].\n23 -p_14(x) | p_8(x).  [clausify(2)].\n24 p_12(Grayson).  [resolve(15,a,16,a)].\n25 -p_12(Grayson) | p_13(Grayson).  [clausify(3)].\n26 -p_13(Grayson) | p_10(Grayson) | p_9(Grayson).  [deny(8)].\n29 -p_10(Grayson).  [resolve(17,b,18,a)].\n30 p_7(Grayson).  [resolve(19,b,20,a)].\n32 -p_7(Grayson) | -p_8(Grayson) | -p_9(Grayson).  [clausify(7)].\n33 -p_8(Grayson) | -p_9(Grayson).  [resolve(30,a,32,a)].\n34 p_8(Grayson).  [resolve(22,a,23,a)].\n36 p_13(Grayson).  [resolve(24,a,25,a)].\n37 -p_13(Grayson) | p_9(Grayson).  [resolve(29,a,26,b)].\n39 -p_9(Grayson).  [resolve(33,a,34,a)].\n40 p_9(Grayson).  [resolve(37,a,36,a)].\n41 $F.  [resolve(40,a,39,a)].",
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_5(Grayson)\n\u00acp_6(Grayson)\n\u00acp_4(Grayson)\np_2(Grayson)\np_3(Grayson)\n\u00acp_0(Grayson)\n\u00acp_1(Grayson)\np_5(Grayson) \u2192 (p_6(Grayson) \u2295 p_14(Grayson))\np_4(Grayson) \u2228 p_12(Grayson)\n\u2200x (p_14(x) \u2192 (p_2(x) \u2227 p_8(x)))\np_12(Grayson) \u2192 \u00acp_13(Grayson)\n\u2200x (p_11(x) \u2228 p_3(x))\np_10(Grayson) \u2192 (p_11(Grayson) \u2227 p_0(Grayson))\np_7(Grayson) \u2295 p_1(Grayson)\np_7(Grayson) \u2192 (p_8(Grayson) \u2295 p_9(Grayson))",
            "Initial Goal": "(p_13(Grayson) \u2295 p_10(Grayson)) \u2192 p_9(Grayson)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Grayson)",
                    "-p_6(Grayson)",
                    "-p_4(Grayson)",
                    "p_2(Grayson)",
                    "p_3(Grayson)",
                    "-p_0(Grayson)",
                    "-p_1(Grayson)",
                    "p_5(Grayson) -> (-(p_6(Grayson) <-> p_14(Grayson)))",
                    "p_4(Grayson) | p_12(Grayson)",
                    "all x (p_14(x) -> (p_2(x) & p_8(x)))",
                    "p_12(Grayson) -> -p_13(Grayson)",
                    "all x (p_11(x) | p_3(x))",
                    "p_10(Grayson) -> (p_11(Grayson) & p_0(Grayson))",
                    "-(p_7(Grayson) <-> p_1(Grayson))",
                    "p_7(Grayson) -> (-(p_8(Grayson) <-> p_9(Grayson)))"
                ],
                "formulas(goals)": [
                    "(-(p_13(Grayson) <-> p_10(Grayson))) -> p_9(Grayson)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_12(Grayson) \u2192 p_13(Grayson)"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_12(Grayson) \u2192 \u00acp_13(Grayson)"
                ]
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_5(Grayson)\n\u00acp_6(Grayson)\n\u00acp_4(Grayson)\np_2(Grayson)\np_3(Grayson)\n\u00acp_0(Grayson)\n\u00acp_1(Grayson)\np_5(Grayson) \u2192 (p_6(Grayson) \u2295 p_14(Grayson))\np_4(Grayson) \u2228 p_12(Grayson)\n\u2200x (p_14(x) \u2192 (p_2(x) \u2227 p_8(x)))\np_12(Grayson) \u2192 \u00acp_13(Grayson)\n\u2200x (p_11(x) \u2228 p_3(x))\np_10(Grayson) \u2192 (p_11(Grayson) \u2227 p_0(Grayson))\np_7(Grayson) \u2295 p_1(Grayson)\np_7(Grayson) \u2192 (p_8(Grayson) \u2295 p_9(Grayson))\np_12(Grayson)\n\u00acp_13(Grayson)\n\u00acp_10(Grayson)\np_5(Grayson) \u2192 p_14(Grayson)\np_7(Grayson)\np_8(Grayson) \u2295 p_9(Grayson)",
            "Initial Goal": "(p_13(Grayson) \u2295 p_10(Grayson)) \u2192 p_9(Grayson)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Grayson)",
                    "-p_6(Grayson)",
                    "-p_4(Grayson)",
                    "p_2(Grayson)",
                    "p_3(Grayson)",
                    "-p_0(Grayson)",
                    "-p_1(Grayson)",
                    "p_5(Grayson) -> (-(p_6(Grayson) <-> p_14(Grayson)))",
                    "p_4(Grayson) | p_12(Grayson)",
                    "all x (p_14(x) -> (p_2(x) & p_8(x)))",
                    "p_12(Grayson) -> -p_13(Grayson)",
                    "all x (p_11(x) | p_3(x))",
                    "p_10(Grayson) -> (p_11(Grayson) & p_0(Grayson))",
                    "-(p_7(Grayson) <-> p_1(Grayson))",
                    "p_7(Grayson) -> (-(p_8(Grayson) <-> p_9(Grayson)))",
                    "p_12(Grayson)",
                    "-p_13(Grayson)",
                    "-p_10(Grayson)",
                    "p_5(Grayson) -> p_14(Grayson)",
                    "p_7(Grayson)",
                    "-(p_8(Grayson) <-> p_9(Grayson))"
                ],
                "formulas(goals)": [
                    "(-(p_13(Grayson) <-> p_10(Grayson))) -> p_9(Grayson)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_12(Grayson)",
                    "\u00acp_13(Grayson)",
                    "\u00acp_10(Grayson)",
                    "p_7(Grayson)"
                ],
                "added_rules": [
                    "p_5(Grayson) \u2192 p_14(Grayson)",
                    "p_8(Grayson) \u2295 p_9(Grayson)"
                ]
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_5(Grayson)\n\u00acp_6(Grayson)\n\u00acp_4(Grayson)\np_2(Grayson)\np_3(Grayson)\n\u00acp_0(Grayson)\n\u00acp_1(Grayson)\np_5(Grayson) \u2192 (p_6(Grayson) \u2295 p_14(Grayson))\np_4(Grayson) \u2228 p_12(Grayson)\n\u2200x (p_14(x) \u2192 (p_2(x) \u2227 p_8(x)))\n\u2200x (p_11(x) \u2228 p_3(x))\np_10(Grayson) \u2192 (p_11(Grayson) \u2227 p_0(Grayson))\np_7(Grayson) \u2295 p_1(Grayson)\np_7(Grayson) \u2192 (p_8(Grayson) \u2295 p_9(Grayson))\np_12(Grayson)\n\u00acp_10(Grayson)\np_5(Grayson) \u2192 p_14(Grayson)\np_7(Grayson)\np_8(Grayson) \u2295 p_9(Grayson)\np_12(Grayson) \u2192 p_13(Grayson)",
            "Initial Goal": "(p_13(Grayson) \u2295 p_10(Grayson)) \u2192 p_9(Grayson)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Grayson)",
                    "-p_6(Grayson)",
                    "-p_4(Grayson)",
                    "p_2(Grayson)",
                    "p_3(Grayson)",
                    "-p_0(Grayson)",
                    "-p_1(Grayson)",
                    "-p_5(Grayson) | -(p_6(Grayson) <-> p_14(Grayson))",
                    "p_4(Grayson) | p_12(Grayson)",
                    "all x (-p_14(x) | (p_2(x) & p_8(x)))",
                    "all x (p_11(x) | p_3(x))",
                    "-p_10(Grayson) | (p_11(Grayson) & p_0(Grayson))",
                    "-(p_7(Grayson) <-> p_1(Grayson))",
                    "-p_7(Grayson) | -(p_8(Grayson) <-> p_9(Grayson))",
                    "p_12(Grayson)",
                    "-p_10(Grayson)",
                    "-p_5(Grayson) | p_14(Grayson)",
                    "p_7(Grayson)",
                    "-(p_8(Grayson) <-> p_9(Grayson))",
                    "-p_12(Grayson) | p_13(Grayson)"
                ],
                "formulas(goals)": [
                    "-(-(p_13(Grayson) <-> p_10(Grayson)) -> p_9(Grayson))"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "\u00acp_13(Grayson)"
                ],
                "removed_rules": [
                    "p_12(Grayson) \u2192 \u00acp_13(Grayson)"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_12(Grayson) \u2192 p_13(Grayson)"
                ]
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_5(Grayson)\n\u00acp_6(Grayson)\n\u00acp_4(Grayson)\np_2(Grayson)\np_3(Grayson)\n\u00acp_0(Grayson)\n\u00acp_1(Grayson)\np_5(Grayson) \u2192 (p_6(Grayson) \u2295 p_14(Grayson))\np_4(Grayson) \u2228 p_12(Grayson)\n\u2200x (p_14(x) \u2192 (p_2(x) \u2227 p_8(x)))\n\u2200x (p_11(x) \u2228 p_3(x))\np_10(Grayson) \u2192 (p_11(Grayson) \u2227 p_0(Grayson))\np_7(Grayson) \u2295 p_1(Grayson)\np_7(Grayson) \u2192 (p_8(Grayson) \u2295 p_9(Grayson))\np_12(Grayson)\n\u00acp_10(Grayson)\np_5(Grayson) \u2192 p_14(Grayson)\np_7(Grayson)\np_8(Grayson) \u2295 p_9(Grayson)\np_12(Grayson) \u2192 p_13(Grayson)\np_14(Grayson)\np_13(Grayson)\np_8(Grayson)\n\u00acp_9(Grayson)\np_2(Grayson) \u2227 p_8(Grayson)",
            "Initial Goal": "(p_13(Grayson) \u2295 p_10(Grayson)) \u2192 p_9(Grayson)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Grayson).",
                    "-p_6(Grayson).",
                    "-p_4(Grayson).",
                    "p_2(Grayson).",
                    "p_3(Grayson).",
                    "-p_0(Grayson).",
                    "-p_1(Grayson).",
                    "p_5(Grayson) -> (-(p_6(Grayson) <-> p_14(Grayson))).",
                    "p_4(Grayson) | p_12(Grayson).",
                    "all x (p_14(x) -> (p_2(x) & p_8(x))).",
                    "all x (p_11(x) | p_3(x)).",
                    "p_10(Grayson) -> (p_11(Grayson) & p_0(Grayson)).",
                    "-(p_7(Grayson) <-> p_1(Grayson)).",
                    "p_7(Grayson) -> (-(p_8(Grayson) <-> p_9(Grayson))).",
                    "p_12(Grayson).",
                    "-p_10(Grayson).",
                    "p_5(Grayson) -> p_14(Grayson).",
                    "p_7(Grayson).",
                    "-(p_8(Grayson) <-> p_9(Grayson)).",
                    "p_12(Grayson) -> p_13(Grayson).",
                    "p_14(Grayson).",
                    "p_13(Grayson).",
                    "p_8(Grayson).",
                    "-p_9(Grayson).",
                    "p_2(Grayson) & p_8(Grayson)."
                ],
                "formulas(goals)": [
                    "-((-(p_13(Grayson) <-> p_10(Grayson))) -> p_9(Grayson))."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_14(Grayson)",
                    "p_13(Grayson)",
                    "p_8(Grayson)",
                    "\u00acp_9(Grayson)",
                    "p_2(Grayson) \u2227 p_8(Grayson)"
                ],
                "added_rules": []
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_5(Grayson)\n\u00acp_6(Grayson)\n\u00acp_4(Grayson)\np_2(Grayson)\np_3(Grayson)\n\u00acp_0(Grayson)\n\u00acp_1(Grayson)\np_5(Grayson) \u2192 (p_6(Grayson) \u2295 p_14(Grayson))\np_4(Grayson) \u2228 p_12(Grayson)\n\u2200x (p_14(x) \u2192 (p_2(x) \u2227 p_8(x)))\n\u2200x (p_11(x) \u2228 p_3(x))\np_10(Grayson) \u2192 (p_11(Grayson) \u2227 p_0(Grayson))\np_7(Grayson) \u2295 p_1(Grayson)\np_7(Grayson) \u2192 (p_8(Grayson) \u2295 p_9(Grayson))\np_12(Grayson)\n\u00acp_10(Grayson)\np_5(Grayson) \u2192 p_14(Grayson)\np_7(Grayson)\np_8(Grayson) \u2295 p_9(Grayson)\np_14(Grayson)\np_8(Grayson)\n\u00acp_9(Grayson)\np_2(Grayson) \u2227 p_8(Grayson)\n\u00acp_13(Grayson)",
            "Initial Goal": "(p_13(Grayson) \u2295 p_10(Grayson)) \u2192 p_9(Grayson)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Grayson)",
                    "-p_6(Grayson)",
                    "-p_4(Grayson)",
                    "p_2(Grayson)",
                    "p_3(Grayson)",
                    "-p_0(Grayson)",
                    "-p_1(Grayson)",
                    "p_5(Grayson) -> (-(p_6(Grayson) <-> p_14(Grayson)))",
                    "p_4(Grayson) | p_12(Grayson)",
                    "all x (p_14(x) -> (p_2(x) & p_8(x)))",
                    "all x (p_11(x) | p_3(x))",
                    "p_10(Grayson) -> (p_11(Grayson) & p_0(Grayson))",
                    "-(p_7(Grayson) <-> p_1(Grayson))",
                    "p_7(Grayson) -> (-(p_8(Grayson) <-> p_9(Grayson)))",
                    "p_12(Grayson)",
                    "-p_10(Grayson)",
                    "p_5(Grayson) -> p_14(Grayson)",
                    "p_7(Grayson)",
                    "-(p_8(Grayson) <-> p_9(Grayson))",
                    "p_14(Grayson)",
                    "p_8(Grayson)",
                    "-p_9(Grayson)",
                    "p_2(Grayson) & p_8(Grayson)",
                    "-p_13(Grayson)"
                ],
                "formulas(goals)": [
                    "(-(p_13(Grayson) <-> p_10(Grayson))) -> p_9(Grayson)"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "p_13(Grayson)"
                ],
                "removed_rules": [
                    "p_12(Grayson) \u2192 p_13(Grayson)"
                ],
                "added_facts": [
                    "\u00acp_13(Grayson)"
                ],
                "added_rules": []
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_5(Grayson)\n\u00acp_6(Grayson)\n\u00acp_4(Grayson)\np_2(Grayson)\np_3(Grayson)\n\u00acp_0(Grayson)\n\u00acp_1(Grayson)\np_5(Grayson) \u2192 (p_6(Grayson) \u2295 p_14(Grayson))\np_4(Grayson) \u2228 p_12(Grayson)\n\u2200x (p_14(x) \u2192 (p_2(x) \u2227 p_8(x)))\n\u2200x (p_11(x) \u2228 p_3(x))\np_10(Grayson) \u2192 (p_11(Grayson) \u2227 p_0(Grayson))\np_7(Grayson) \u2295 p_1(Grayson)\np_7(Grayson) \u2192 (p_8(Grayson) \u2295 p_9(Grayson))\np_12(Grayson)\n\u00acp_10(Grayson)\np_5(Grayson) \u2192 p_14(Grayson)\np_7(Grayson)\np_8(Grayson) \u2295 p_9(Grayson)\np_14(Grayson)\np_8(Grayson)\n\u00acp_9(Grayson)\np_2(Grayson) \u2227 p_8(Grayson)\n\u00acp_13(Grayson)\np_5(Grayson) \u2192 (p_2(Grayson) \u2227 p_8(Grayson))\np_14(Grayson) \u2192 p_2(Grayson)",
            "Initial Goal": "(p_13(Grayson) \u2295 p_10(Grayson)) \u2192 p_9(Grayson)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Grayson)",
                    "-p_6(Grayson)",
                    "-p_4(Grayson)",
                    "p_2(Grayson)",
                    "p_3(Grayson)",
                    "-p_0(Grayson)",
                    "-p_1(Grayson)",
                    "p_5(Grayson) -> (-p_6(Grayson) <-> p_14(Grayson))",
                    "p_4(Grayson) | p_12(Grayson)",
                    "all x (p_14(x) -> (p_2(x) & p_8(x)))",
                    "all x (p_11(x) | p_3(x))",
                    "p_10(Grayson) -> (p_11(Grayson) & p_0(Grayson))",
                    "-(p_7(Grayson) <-> p_1(Grayson))",
                    "p_7(Grayson) -> (-p_8(Grayson) <-> p_9(Grayson))",
                    "p_12(Grayson)",
                    "-p_10(Grayson)",
                    "p_5(Grayson) -> p_14(Grayson)",
                    "p_7(Grayson)",
                    "-(p_8(Grayson) <-> p_9(Grayson))",
                    "p_14(Grayson)",
                    "p_8(Grayson)",
                    "-p_9(Grayson)",
                    "p_2(Grayson) & p_8(Grayson)",
                    "-p_13(Grayson)",
                    "p_5(Grayson) -> (p_2(Grayson) & p_8(Grayson))",
                    "p_14(Grayson) -> p_2(Grayson)"
                ],
                "formulas(goals)": [
                    "(-(p_13(Grayson) <-> p_10(Grayson))) -> p_9(Grayson)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "p_5(Grayson) \u2192 (p_2(Grayson) \u2227 p_8(Grayson))",
                    "p_14(Grayson) \u2192 p_2(Grayson)"
                ]
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_5(Grayson)\n\u00acp_6(Grayson)\n\u00acp_4(Grayson)\np_2(Grayson)\np_3(Grayson)\n\u00acp_0(Grayson)\n\u00acp_1(Grayson)\np_5(Grayson) \u2192 (p_6(Grayson) \u2295 p_14(Grayson))\np_4(Grayson) \u2228 p_12(Grayson)\n\u2200x (p_14(x) \u2192 (p_2(x) \u2227 p_8(x)))\n\u2200x (p_11(x) \u2228 p_3(x))\np_10(Grayson) \u2192 (p_11(Grayson) \u2227 p_0(Grayson))\np_7(Grayson) \u2295 p_1(Grayson)\np_7(Grayson) \u2192 (p_8(Grayson) \u2295 p_9(Grayson))\np_12(Grayson)\n\u00acp_10(Grayson)\np_5(Grayson) \u2192 p_14(Grayson)\np_7(Grayson)\np_8(Grayson) \u2295 p_9(Grayson)\np_14(Grayson)\np_8(Grayson)\n\u00acp_9(Grayson)\np_2(Grayson) \u2227 p_8(Grayson)\n\u00acp_13(Grayson)\np_5(Grayson) \u2192 (p_2(Grayson) \u2227 p_8(Grayson))\np_14(Grayson) \u2192 p_2(Grayson)\np_5(Grayson) \u2192 \u00acp_6(Grayson)\np_14(Grayson) \u2192 p_8(Grayson)",
            "Initial Goal": "(p_13(Grayson) \u2295 p_10(Grayson)) \u2192 p_9(Grayson)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Grayson)",
                    "-p_6(Grayson)",
                    "-p_4(Grayson)",
                    "p_2(Grayson)",
                    "p_3(Grayson)",
                    "-p_0(Grayson)",
                    "-p_1(Grayson)",
                    "p_5(Grayson) -> (-(p_6(Grayson) <-> p_14(Grayson)))",
                    "p_4(Grayson) | p_12(Grayson)",
                    "all x (p_14(x) -> (p_2(x) & p_8(x)))",
                    "all x (p_11(x) | p_3(x))",
                    "p_10(Grayson) -> (p_11(Grayson) & p_0(Grayson))",
                    "-(p_7(Grayson) <-> p_1(Grayson))",
                    "p_7(Grayson) -> (-(p_8(Grayson) <-> p_9(Grayson)))",
                    "p_12(Grayson)",
                    "-p_10(Grayson)",
                    "p_5(Grayson) -> p_14(Grayson)",
                    "p_7(Grayson)",
                    "-(p_8(Grayson) <-> p_9(Grayson))",
                    "p_14(Grayson)",
                    "p_8(Grayson)",
                    "-p_9(Grayson)",
                    "p_2(Grayson) & p_8(Grayson)",
                    "-p_13(Grayson)",
                    "p_5(Grayson) -> (p_2(Grayson) & p_8(Grayson))",
                    "p_14(Grayson) -> p_2(Grayson)",
                    "p_5(Grayson) -> -p_6(Grayson)",
                    "p_14(Grayson) -> p_8(Grayson)"
                ],
                "formulas(goals)": [
                    "(-(p_13(Grayson) <-> p_10(Grayson))) -> p_9(Grayson)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "p_5(Grayson) \u2192 \u00acp_6(Grayson)",
                    "p_14(Grayson) \u2192 p_8(Grayson)"
                ]
            }
        }
    ]
}