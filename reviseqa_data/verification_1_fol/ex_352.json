{
    "background_story": "Saint was a pioneering biochemist who spent most of his career studying the intricacies of RNA degradation. His work focused on ribonuclease, an enzyme responsible for breaking down RNA into smaller components. Saint's fascination with ribonuclease began during his graduate studies, where he explored its role in cellular regulation. He made several groundbreaking discoveries, including the identification of a novel ribonuclease inhibitor that had potential therapeutic applications. Saint's research not only advanced the understanding of RNA biology but also paved the way for the development of new treatments for diseases related to aberrant RNA processing. His contributions to the field earned him numerous accolades, solidifying his position as a leading expert in the study of ribonuclease and its functions.",
    "predicates": [
        {
            "id": 0,
            "name": "win_awards"
        },
        {
            "id": 1,
            "name": "make_groundbreaking_discoveries"
        },
        {
            "id": 2,
            "name": "develop_new_methods"
        },
        {
            "id": 3,
            "name": "collect_samples"
        },
        {
            "id": 4,
            "name": "solve_problems"
        },
        {
            "id": 5,
            "name": "test_theories"
        },
        {
            "id": 6,
            "name": "publish_papers"
        },
        {
            "id": 7,
            "name": "become_leading_expert"
        },
        {
            "id": 8,
            "name": "conduct_experiments"
        },
        {
            "id": 9,
            "name": "advance_knowledge"
        },
        {
            "id": 10,
            "name": "earn_recognition"
        },
        {
            "id": 11,
            "name": "analyze_data"
        },
        {
            "id": 12,
            "name": "draw_conclusions"
        },
        {
            "id": 13,
            "name": "design_models"
        },
        {
            "id": 14,
            "name": "create_hypotheses"
        },
        {
            "id": 15,
            "name": "study_ribonuclease"
        },
        {
            "id": 16,
            "name": "investigate_enzymes"
        },
        {
            "id": 17,
            "name": "find_new_compounds"
        },
        {
            "id": 18,
            "name": "read_literature"
        },
        {
            "id": 19,
            "name": "mentor_students"
        },
        {
            "id": 20,
            "name": "investigate_phenomena"
        },
        {
            "id": 21,
            "name": "mentor_colleagues"
        },
        {
            "id": 22,
            "name": "investigate"
        },
        {
            "id": 23,
            "name": "run_tests"
        },
        {
            "id": 24,
            "name": "present_findings"
        },
        {
            "id": 25,
            "name": "interpret_results"
        },
        {
            "id": 26,
            "name": "evaluate_findings"
        },
        {
            "id": 27,
            "name": "identify_patterns"
        },
        {
            "id": 28,
            "name": "think_critically"
        }
    ],
    "subject_name": "Saint",
    "subject_category": "scientist",
    "keyword": "ribonuclease",
    "all_facts": [
        {
            "id": 0,
            "subject": "Saint",
            "text": "Saint does not win awards.",
            "fol": "\u00acp_0(Saint)",
            "str_fol": "\u00acwin_awards(Saint)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Saint",
            "text": "Saint makes groundbreaking discoveries.",
            "fol": "p_1(Saint)",
            "str_fol": "make_groundbreaking_discoveries(Saint)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Saint",
            "text": "Saint develops new methods.",
            "fol": "p_2(Saint)",
            "str_fol": "develop_new_methods(Saint)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Saint",
            "text": "Saint collects samples.",
            "fol": "p_3(Saint)",
            "str_fol": "collect_samples(Saint)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Saint",
            "text": "Saint does not solve problems.",
            "fol": "\u00acp_4(Saint)",
            "str_fol": "\u00acsolve_problems(Saint)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Saint",
            "text": "Saint does not test theories.",
            "fol": "\u00acp_5(Saint)",
            "str_fol": "\u00actest_theories(Saint)",
            "negation": true
        },
        {
            "id": 6,
            "subject": "Saint",
            "text": "Saint creates hypotheses.",
            "fol": "p_14(Saint)",
            "str_fol": "create_hypotheses(Saint)",
            "negation": false
        },
        {
            "id": 7,
            "subject": "Saint",
            "text": "Saint designs models.",
            "fol": "p_13(Saint)",
            "str_fol": "design_models(Saint)",
            "negation": false
        },
        {
            "id": 8,
            "subject": "Saint",
            "text": "Saint does not draw conclusions.",
            "fol": "\u00acp_12(Saint)",
            "str_fol": "\u00acdraw_conclusions(Saint)",
            "negation": true
        },
        {
            "id": 9,
            "subject": "Saint",
            "text": "Saint does not earn recognition.",
            "fol": "\u00acp_10(Saint)",
            "str_fol": "\u00acearn_recognition(Saint)",
            "negation": true
        },
        {
            "id": 10,
            "subject": "Saint",
            "text": "Saint does not analyze data.",
            "fol": "\u00acp_11(Saint)",
            "str_fol": "\u00acanalyze_data(Saint)",
            "negation": true
        },
        {
            "id": 11,
            "subject": "Saint",
            "text": "Saint conducts experiments.",
            "fol": "p_8(Saint)",
            "str_fol": "conduct_experiments(Saint)",
            "negation": false
        },
        {
            "id": 12,
            "subject": "Saint",
            "text": "Saint does not advance knowledge.",
            "fol": "\u00acp_9(Saint)",
            "str_fol": "\u00acadvance_knowledge(Saint)",
            "negation": true
        },
        {
            "id": 13,
            "subject": "Saint",
            "text": "Saint does not publish papers.",
            "fol": "\u00acp_6(Saint)",
            "str_fol": "\u00acpublish_papers(Saint)",
            "negation": true
        }
    ],
    "context_facts": [
        {
            "id": 5,
            "subject": "Saint",
            "text": "Saint does not test theories.",
            "fol": "\u00acp_5(Saint)",
            "str_fol": "\u00actest_theories(Saint)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Saint",
            "text": "Saint does not solve problems.",
            "fol": "\u00acp_4(Saint)",
            "str_fol": "\u00acsolve_problems(Saint)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Saint",
            "text": "Saint collects samples.",
            "fol": "p_3(Saint)",
            "str_fol": "collect_samples(Saint)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Saint",
            "text": "Saint develops new methods.",
            "fol": "p_2(Saint)",
            "str_fol": "develop_new_methods(Saint)",
            "negation": false
        },
        {
            "id": 0,
            "subject": "Saint",
            "text": "Saint does not win awards.",
            "fol": "\u00acp_0(Saint)",
            "str_fol": "\u00acwin_awards(Saint)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Saint",
            "text": "Saint makes groundbreaking discoveries.",
            "fol": "p_1(Saint)",
            "str_fol": "make_groundbreaking_discoveries(Saint)",
            "negation": false
        }
    ],
    "context_rules": [
        {
            "id": 8,
            "text": "Every scientist either tests theories or creates hypotheses.",
            "fol": "\u2200x (p_5(x) \u2228 p_14(x))",
            "str_fol": "\u2200x (test_theories(x) \u2228 create_hypotheses(x))"
        },
        {
            "id": 7,
            "text": "If Saint either designs models or creates hypotheses (but not both), then he solves problems.",
            "fol": "(p_13(Saint) \u2295 p_14(Saint)) \u2192 p_4(Saint)",
            "str_fol": "(design_models(Saint) \u2295 create_hypotheses(Saint)) \u2192 solve_problems(Saint)"
        },
        {
            "id": 6,
            "text": "If Saint collects samples, then he either designs models or draws conclusions, but not both.",
            "fol": "p_3(Saint) \u2192 (p_13(Saint) \u2295 p_12(Saint))",
            "str_fol": "collect_samples(Saint) \u2192 (design_models(Saint) \u2295 draw_conclusions(Saint))"
        },
        {
            "id": 5,
            "text": "A scientist either develops new methods or earns recognition, but not necessarily both.",
            "fol": "\u2200x (p_2(x) \u2295 p_10(x))",
            "str_fol": "\u2200x (develop_new_methods(x) \u2295 earn_recognition(x))"
        },
        {
            "id": 4,
            "text": "If a scientist analyzes data, then they draw conclusions.",
            "fol": "\u2200x (p_11(x) \u2192 p_12(x))",
            "str_fol": "\u2200x (analyze_data(x) \u2192 draw_conclusions(x))"
        },
        {
            "id": 3,
            "text": "Every scientist either conducts experiments or analyzes data.",
            "fol": "\u2200x (p_8(x) \u2228 p_11(x))",
            "str_fol": "\u2200x (conduct_experiments(x) \u2228 analyze_data(x))"
        },
        {
            "id": 2,
            "text": "If Saint advances knowledge, then he either wins awards or earns recognition, but not both.",
            "fol": "p_9(Saint) \u2192 (p_0(Saint) \u2295 p_10(Saint))",
            "str_fol": "advance_knowledge(Saint) \u2192 (win_awards(Saint) \u2295 earn_recognition(Saint))"
        },
        {
            "id": 1,
            "text": "If a scientist publishes papers and conducts experiments, then they advance knowledge.",
            "fol": "\u2200x ((p_6(x) \u2227 p_8(x)) \u2192 p_9(x))",
            "str_fol": "\u2200x ((publish_papers(x) \u2227 conduct_experiments(x)) \u2192 advance_knowledge(x))"
        },
        {
            "id": 0,
            "text": "If Saint publishes papers, then he will become a leading expert.",
            "fol": "p_6(Saint) \u2192 p_7(Saint)",
            "str_fol": "publish_papers(Saint) \u2192 become_leading_expert(Saint)"
        }
    ],
    "context": [
        {
            "id": 5,
            "subject": "Saint",
            "text": "Saint does not test theories.",
            "fol": "\u00acp_5(Saint)",
            "str_fol": "\u00actest_theories(Saint)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Saint",
            "text": "Saint does not solve problems.",
            "fol": "\u00acp_4(Saint)",
            "str_fol": "\u00acsolve_problems(Saint)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Saint",
            "text": "Saint collects samples.",
            "fol": "p_3(Saint)",
            "str_fol": "collect_samples(Saint)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Saint",
            "text": "Saint develops new methods.",
            "fol": "p_2(Saint)",
            "str_fol": "develop_new_methods(Saint)",
            "negation": false
        },
        {
            "id": 0,
            "subject": "Saint",
            "text": "Saint does not win awards.",
            "fol": "\u00acp_0(Saint)",
            "str_fol": "\u00acwin_awards(Saint)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Saint",
            "text": "Saint makes groundbreaking discoveries.",
            "fol": "p_1(Saint)",
            "str_fol": "make_groundbreaking_discoveries(Saint)",
            "negation": false
        },
        {
            "id": 8,
            "text": "Every scientist either tests theories or creates hypotheses.",
            "fol": "\u2200x (p_5(x) \u2228 p_14(x))",
            "str_fol": "\u2200x (test_theories(x) \u2228 create_hypotheses(x))"
        },
        {
            "id": 7,
            "text": "If Saint either designs models or creates hypotheses (but not both), then he solves problems.",
            "fol": "(p_13(Saint) \u2295 p_14(Saint)) \u2192 p_4(Saint)",
            "str_fol": "(design_models(Saint) \u2295 create_hypotheses(Saint)) \u2192 solve_problems(Saint)"
        },
        {
            "id": 6,
            "text": "If Saint collects samples, then he either designs models or draws conclusions, but not both.",
            "fol": "p_3(Saint) \u2192 (p_13(Saint) \u2295 p_12(Saint))",
            "str_fol": "collect_samples(Saint) \u2192 (design_models(Saint) \u2295 draw_conclusions(Saint))"
        },
        {
            "id": 5,
            "text": "A scientist either develops new methods or earns recognition, but not necessarily both.",
            "fol": "\u2200x (p_2(x) \u2295 p_10(x))",
            "str_fol": "\u2200x (develop_new_methods(x) \u2295 earn_recognition(x))"
        },
        {
            "id": 4,
            "text": "If a scientist analyzes data, then they draw conclusions.",
            "fol": "\u2200x (p_11(x) \u2192 p_12(x))",
            "str_fol": "\u2200x (analyze_data(x) \u2192 draw_conclusions(x))"
        },
        {
            "id": 3,
            "text": "Every scientist either conducts experiments or analyzes data.",
            "fol": "\u2200x (p_8(x) \u2228 p_11(x))",
            "str_fol": "\u2200x (conduct_experiments(x) \u2228 analyze_data(x))"
        },
        {
            "id": 2,
            "text": "If Saint advances knowledge, then he either wins awards or earns recognition, but not both.",
            "fol": "p_9(Saint) \u2192 (p_0(Saint) \u2295 p_10(Saint))",
            "str_fol": "advance_knowledge(Saint) \u2192 (win_awards(Saint) \u2295 earn_recognition(Saint))"
        },
        {
            "id": 1,
            "text": "If a scientist publishes papers and conducts experiments, then they advance knowledge.",
            "fol": "\u2200x ((p_6(x) \u2227 p_8(x)) \u2192 p_9(x))",
            "str_fol": "\u2200x ((publish_papers(x) \u2227 conduct_experiments(x)) \u2192 advance_knowledge(x))"
        },
        {
            "id": 0,
            "text": "If Saint publishes papers, then he will become a leading expert.",
            "fol": "p_6(Saint) \u2192 p_7(Saint)",
            "str_fol": "publish_papers(Saint) \u2192 become_leading_expert(Saint)"
        }
    ],
    "context_fol": "\u00acp_5(Saint)\n\u00acp_4(Saint)\np_3(Saint)\np_2(Saint)\n\u00acp_0(Saint)\np_1(Saint)\n\u2200x (p_5(x) \u2228 p_14(x))\n(p_13(Saint) \u2295 p_14(Saint)) \u2192 p_4(Saint)\np_3(Saint) \u2192 (p_13(Saint) \u2295 p_12(Saint))\n\u2200x (p_2(x) \u2295 p_10(x))\n\u2200x (p_11(x) \u2192 p_12(x))\n\u2200x (p_8(x) \u2228 p_11(x))\np_9(Saint) \u2192 (p_0(Saint) \u2295 p_10(Saint))\n\u2200x ((p_6(x) \u2227 p_8(x)) \u2192 p_9(x))\np_6(Saint) \u2192 p_7(Saint)",
    "conclusion": {
        "id": 18,
        "text": "If Saint studies ribonuclease and makes groundbreaking discoveries, then he becomes a leading expert.",
        "fol": "(p_15(Saint) \u2227 p_1(Saint)) \u2192 p_7(Saint)",
        "str_fol": "(study_ribonuclease(Saint) \u2227 make_groundbreaking_discoveries(Saint)) \u2192 become_leading_expert(Saint)"
    },
    "initial_answer": "Uncertain",
    "initial_goal": "(p_15(Saint) \u2227 p_1(Saint)) \u2192 p_7(Saint)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 5,
                    "subject": "Saint",
                    "text": "Saint does not test theories.",
                    "fol": "\u00acp_5(Saint)",
                    "str_fol": "\u00actest_theories(Saint)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 8,
                    "text": "Every scientist either tests theories or creates hypotheses.",
                    "fol": "\u2200x (p_5(x) \u2228 p_14(x))",
                    "str_fol": "\u2200x (test_theories(x) \u2228 create_hypotheses(x))"
                }
            ],
            "conclusion": {
                "id": 6,
                "subject": "Saint",
                "text": "Saint creates hypotheses.",
                "fol": "p_14(Saint)",
                "str_fol": "create_hypotheses(Saint)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 6,
                    "subject": "Saint",
                    "text": "Saint creates hypotheses.",
                    "fol": "p_14(Saint)",
                    "str_fol": "create_hypotheses(Saint)",
                    "negation": false
                },
                {
                    "id": 4,
                    "subject": "Saint",
                    "text": "Saint does not solve problems.",
                    "fol": "\u00acp_4(Saint)",
                    "str_fol": "\u00acsolve_problems(Saint)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 7,
                    "text": "If Saint either designs models or creates hypotheses (but not both), then he solves problems.",
                    "fol": "(p_13(Saint) \u2295 p_14(Saint)) \u2192 p_4(Saint)",
                    "str_fol": "(design_models(Saint) \u2295 create_hypotheses(Saint)) \u2192 solve_problems(Saint)"
                }
            ],
            "conclusion": {
                "id": 7,
                "subject": "Saint",
                "text": "Saint designs models.",
                "fol": "p_13(Saint)",
                "str_fol": "design_models(Saint)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 3,
                    "subject": "Saint",
                    "text": "Saint collects samples.",
                    "fol": "p_3(Saint)",
                    "str_fol": "collect_samples(Saint)",
                    "negation": false
                },
                {
                    "id": 7,
                    "subject": "Saint",
                    "text": "Saint designs models.",
                    "fol": "p_13(Saint)",
                    "str_fol": "design_models(Saint)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 6,
                    "text": "If Saint collects samples, then he either designs models or draws conclusions, but not both.",
                    "fol": "p_3(Saint) \u2192 (p_13(Saint) \u2295 p_12(Saint))",
                    "str_fol": "collect_samples(Saint) \u2192 (design_models(Saint) \u2295 draw_conclusions(Saint))"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Saint",
                "text": "Saint does not draw conclusions.",
                "fol": "\u00acp_12(Saint)",
                "str_fol": "\u00acdraw_conclusions(Saint)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 2,
                    "subject": "Saint",
                    "text": "Saint develops new methods.",
                    "fol": "p_2(Saint)",
                    "str_fol": "develop_new_methods(Saint)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "A scientist either develops new methods or earns recognition, but not necessarily both.",
                    "fol": "\u2200x (p_2(x) \u2295 p_10(x))",
                    "str_fol": "\u2200x (develop_new_methods(x) \u2295 earn_recognition(x))"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Saint",
                "text": "Saint does not earn recognition.",
                "fol": "\u00acp_10(Saint)",
                "str_fol": "\u00acearn_recognition(Saint)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 8,
                    "subject": "Saint",
                    "text": "Saint does not draw conclusions.",
                    "fol": "\u00acp_12(Saint)",
                    "str_fol": "\u00acdraw_conclusions(Saint)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "If a scientist analyzes data, then they draw conclusions.",
                    "fol": "\u2200x (p_11(x) \u2192 p_12(x))",
                    "str_fol": "\u2200x (analyze_data(x) \u2192 draw_conclusions(x))"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Saint",
                "text": "Saint does not analyze data.",
                "fol": "\u00acp_11(Saint)",
                "str_fol": "\u00acanalyze_data(Saint)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 10,
                    "subject": "Saint",
                    "text": "Saint does not analyze data.",
                    "fol": "\u00acp_11(Saint)",
                    "str_fol": "\u00acanalyze_data(Saint)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "Every scientist either conducts experiments or analyzes data.",
                    "fol": "\u2200x (p_8(x) \u2228 p_11(x))",
                    "str_fol": "\u2200x (conduct_experiments(x) \u2228 analyze_data(x))"
                }
            ],
            "conclusion": {
                "id": 11,
                "subject": "Saint",
                "text": "Saint conducts experiments.",
                "fol": "p_8(Saint)",
                "str_fol": "conduct_experiments(Saint)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 0,
                    "subject": "Saint",
                    "text": "Saint does not win awards.",
                    "fol": "\u00acp_0(Saint)",
                    "str_fol": "\u00acwin_awards(Saint)",
                    "negation": true
                },
                {
                    "id": 9,
                    "subject": "Saint",
                    "text": "Saint does not earn recognition.",
                    "fol": "\u00acp_10(Saint)",
                    "str_fol": "\u00acearn_recognition(Saint)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "If Saint advances knowledge, then he either wins awards or earns recognition, but not both.",
                    "fol": "p_9(Saint) \u2192 (p_0(Saint) \u2295 p_10(Saint))",
                    "str_fol": "advance_knowledge(Saint) \u2192 (win_awards(Saint) \u2295 earn_recognition(Saint))"
                }
            ],
            "conclusion": {
                "id": 12,
                "subject": "Saint",
                "text": "Saint does not advance knowledge.",
                "fol": "\u00acp_9(Saint)",
                "str_fol": "\u00acadvance_knowledge(Saint)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 11,
                    "subject": "Saint",
                    "text": "Saint conducts experiments.",
                    "fol": "p_8(Saint)",
                    "str_fol": "conduct_experiments(Saint)",
                    "negation": false
                },
                {
                    "id": 12,
                    "subject": "Saint",
                    "text": "Saint does not advance knowledge.",
                    "fol": "\u00acp_9(Saint)",
                    "str_fol": "\u00acadvance_knowledge(Saint)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "If a scientist publishes papers and conducts experiments, then they advance knowledge.",
                    "fol": "\u2200x ((p_6(x) \u2227 p_8(x)) \u2192 p_9(x))",
                    "str_fol": "\u2200x ((publish_papers(x) \u2227 conduct_experiments(x)) \u2192 advance_knowledge(x))"
                }
            ],
            "conclusion": {
                "id": 13,
                "subject": "Saint",
                "text": "Saint does not publish papers.",
                "fol": "\u00acp_6(Saint)",
                "str_fol": "\u00acpublish_papers(Saint)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 13,
                    "subject": "Saint",
                    "text": "Saint does not publish papers.",
                    "fol": "\u00acp_6(Saint)",
                    "str_fol": "\u00acpublish_papers(Saint)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "If Saint publishes papers, then he will become a leading expert.",
                    "fol": "p_6(Saint) \u2192 p_7(Saint)",
                    "str_fol": "publish_papers(Saint) \u2192 become_leading_expert(Saint)"
                }
            ],
            "conclusion": null
        },
        {
            "facts": [
                {
                    "id": 1,
                    "subject": "Saint",
                    "text": "Saint makes groundbreaking discoveries.",
                    "fol": "p_1(Saint)",
                    "str_fol": "make_groundbreaking_discoveries(Saint)",
                    "negation": false
                }
            ],
            "rules": [],
            "conclusion": null
        }
    ],
    "proof_trace": null,
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "UNCERTAIN",
            "Edited Assumptions": "\u00acp_5(Saint)\n\u00acp_4(Saint)\np_3(Saint)\np_2(Saint)\n\u00acp_0(Saint)\np_1(Saint)\n\u2200x (p_5(x) \u2228 p_14(x))\n(p_13(Saint) \u2295 p_14(Saint)) \u2192 p_4(Saint)\np_3(Saint) \u2192 (p_13(Saint) \u2295 p_12(Saint))\n\u2200x (p_2(x) \u2295 p_10(x))\n\u2200x (p_11(x) \u2192 p_12(x))\n\u2200x (p_8(x) \u2228 p_11(x))\np_9(Saint) \u2192 (p_0(Saint) \u2295 p_10(Saint))\n\u2200x ((p_6(x) \u2227 p_8(x)) \u2192 p_9(x))\np_6(Saint) \u2192 p_7(Saint)",
            "Initial Goal": "(p_15(Saint) \u2227 p_1(Saint)) \u2192 p_7(Saint)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_5(Saint)",
                    "-p_4(Saint)",
                    "p_3(Saint)",
                    "p_2(Saint)",
                    "-p_0(Saint)",
                    "p_1(Saint)",
                    "all x (p_5(x) | p_14(x))",
                    "(-(p_13(Saint) <-> p_14(Saint))) -> p_4(Saint)",
                    "p_3(Saint) -> (-(p_13(Saint) <-> p_12(Saint)))",
                    "all x (-(p_2(x) <-> p_10(x)))",
                    "all x (p_11(x) -> p_12(x))",
                    "all x (p_8(x) | p_11(x))",
                    "p_9(Saint) -> (-(p_0(Saint) <-> p_10(Saint)))",
                    "all x ((p_6(x) & p_8(x)) -> p_9(x))",
                    "p_6(Saint) -> p_7(Saint)",
                    "p_1(Saint) -> p_7(Saint)"
                ],
                "formulas(goals)": [
                    "(p_15(Saint) & p_1(Saint)) -> p_7(Saint)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": []
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_5(Saint)\n\u00acp_4(Saint)\np_3(Saint)\np_2(Saint)\n\u00acp_0(Saint)\np_1(Saint)\n\u2200x (p_5(x) \u2228 p_14(x))\n(p_13(Saint) \u2295 p_14(Saint)) \u2192 p_4(Saint)\np_3(Saint) \u2192 (p_13(Saint) \u2295 p_12(Saint))\n\u2200x (p_2(x) \u2295 p_10(x))\n\u2200x (p_11(x) \u2192 p_12(x))\n\u2200x (p_8(x) \u2228 p_11(x))\np_9(Saint) \u2192 (p_0(Saint) \u2295 p_10(Saint))\n\u2200x ((p_6(x) \u2227 p_8(x)) \u2192 p_9(x))\np_6(Saint) \u2192 p_7(Saint)\n\u00acp_15(Saint)\n\u2200x (\u00acp_14(x) \u2192 p_5(x))",
            "Initial Goal": "(p_15(Saint) \u2227 p_1(Saint)) \u2192 p_7(Saint)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_5(Saint).",
                    "-p_4(Saint).",
                    "p_3(Saint).",
                    "p_2(Saint).",
                    "-p_0(Saint).",
                    "p_1(Saint).",
                    "all x (p_5(x) | p_14(x)).",
                    "(-(p_13(Saint) <-> p_14(Saint))) -> p_4(Saint).",
                    "p_3(Saint) -> (-(p_13(Saint) <-> p_12(Saint))).",
                    "all x (-(p_2(x) <-> p_10(x))).",
                    "all x (p_11(x) -> p_12(x)).",
                    "all x (p_8(x) | p_11(x)).",
                    "p_9(Saint) -> (-(p_0(Saint) <-> p_10(Saint))).",
                    "all x ((p_6(x) & p_8(x)) -> p_9(x)).",
                    "p_6(Saint) -> p_7(Saint).",
                    "-p_15(Saint).",
                    "all x (-p_14(x) -> p_5(x))."
                ],
                "formulas(goals)": [
                    "(p_15(Saint) & p_1(Saint)) -> p_7(Saint)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "\u00acp_15(Saint)"
                ],
                "added_rules": [
                    "\u2200x (\u00acp_14(x) \u2192 p_5(x))"
                ]
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_5(Saint)\n\u00acp_4(Saint)\np_3(Saint)\np_2(Saint)\n\u00acp_0(Saint)\np_1(Saint)\n\u2200x (p_5(x) \u2228 p_14(x))\n(p_13(Saint) \u2295 p_14(Saint)) \u2192 p_4(Saint)\np_3(Saint) \u2192 (p_13(Saint) \u2295 p_12(Saint))\n\u2200x (p_2(x) \u2295 p_10(x))\n\u2200x (p_11(x) \u2192 p_12(x))\n\u2200x (p_8(x) \u2228 p_11(x))\np_9(Saint) \u2192 (p_0(Saint) \u2295 p_10(Saint))\n\u2200x ((p_6(x) \u2227 p_8(x)) \u2192 p_9(x))\n\u00acp_6(Saint) \u2228 p_7(Saint)\n\u00acp_15(Saint)\n\u2200x (\u00acp_14(x) \u2192 p_5(x))\np_14(Saint)\np_13(Saint)\n\u00acp_10(Saint)\n\u00acp_12(Saint)\n\u00acp_11(Saint)\np_8(Saint)\n\u00acp_6(Saint)",
            "Initial Goal": "(p_15(Saint) \u2227 p_1(Saint)) \u2192 p_7(Saint)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_5(Saint)",
                    "-p_4(Saint)",
                    "p_3(Saint)",
                    "p_2(Saint)",
                    "-p_0(Saint)",
                    "p_1(Saint)",
                    "all x (p_5(x) | p_14(x))",
                    "(-(p_13(Saint) <-> p_14(Saint))) -> p_4(Saint)",
                    "p_3(Saint) -> (-(p_13(Saint) <-> p_12(Saint)))",
                    "all x (-(p_2(x) <-> p_10(x)))",
                    "all x (p_11(x) -> p_12(x))",
                    "all x (p_8(x) | p_11(x))",
                    "p_9(Saint) -> (-(p_0(Saint) <-> p_10(Saint)))",
                    "all x ((p_6(x) & p_8(x)) -> p_9(x))",
                    "-p_6(Saint) | p_7(Saint)",
                    "-p_15(Saint)",
                    "all x (-p_14(x) -> p_5(x))",
                    "p_14(Saint)",
                    "p_13(Saint)",
                    "-p_10(Saint)",
                    "-p_12(Saint)",
                    "-p_11(Saint)",
                    "p_8(Saint)",
                    "-p_6(Saint)"
                ],
                "formulas(goals)": [
                    "-p_15(Saint) | -p_1(Saint) | p_7(Saint)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_14(Saint)",
                    "p_13(Saint)",
                    "\u00acp_10(Saint)",
                    "\u00acp_12(Saint)",
                    "\u00acp_11(Saint)",
                    "p_8(Saint)",
                    "\u00acp_6(Saint)"
                ],
                "added_rules": []
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_5(Saint)\n\u00acp_4(Saint)\np_3(Saint)\np_2(Saint)\n\u00acp_0(Saint)\np_1(Saint)\n\u2200x (p_5(x) \u2228 p_14(x))\n(p_13(Saint) \u2295 p_14(Saint)) \u2192 p_4(Saint)\np_3(Saint) \u2192 (p_13(Saint) \u2295 p_12(Saint))\n\u2200x (p_2(x) \u2295 p_10(x))\n\u2200x (p_11(x) \u2192 p_12(x))\n\u2200x (p_8(x) \u2228 p_11(x))\np_9(Saint) \u2192 (p_0(Saint) \u2295 p_10(Saint))\n\u2200x ((p_6(x) \u2227 p_8(x)) \u2192 p_9(x))\n\u00acp_6(Saint) \u2228 p_7(Saint)\n\u2200x (\u00acp_14(x) \u2192 p_5(x))\np_14(Saint)\np_13(Saint)\n\u00acp_10(Saint)\n\u00acp_12(Saint)\n\u00acp_11(Saint)\np_8(Saint)\n\u00acp_6(Saint)\np_15(Saint)\n\u00acp_7(Saint)",
            "Initial Goal": "(p_15(Saint) \u2227 p_1(Saint)) \u2192 p_7(Saint)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_5(Saint)",
                    "-p_4(Saint)",
                    "p_3(Saint)",
                    "p_2(Saint)",
                    "-p_0(Saint)",
                    "p_1(Saint)",
                    "all x (p_5(x) | p_14(x))",
                    "(-(p_13(Saint) <-> p_14(Saint))) -> p_4(Saint)",
                    "p_3(Saint) -> (-(p_13(Saint) <-> p_12(Saint)))",
                    "all x (-(p_2(x) <-> p_10(x)))",
                    "all x (p_11(x) -> p_12(x))",
                    "all x (p_8(x) | p_11(x))",
                    "p_9(Saint) -> (-(p_0(Saint) <-> p_10(Saint)))",
                    "all x ((p_6(x) & p_8(x)) -> p_9(x))",
                    "-p_6(Saint) | p_7(Saint)",
                    "all x (-p_14(x) -> p_5(x))",
                    "p_14(Saint)",
                    "p_13(Saint)",
                    "-p_10(Saint)",
                    "-p_12(Saint)",
                    "-p_11(Saint)",
                    "p_8(Saint)",
                    "-p_6(Saint)",
                    "p_15(Saint)",
                    "-p_7(Saint)"
                ],
                "formulas(goals)": [
                    "(p_15(Saint) & p_1(Saint)) & -p_7(Saint)"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "\u00acp_15(Saint)"
                ],
                "removed_rules": [],
                "added_facts": [
                    "p_15(Saint)",
                    "\u00acp_7(Saint)"
                ],
                "added_rules": []
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_5(Saint)\n\u00acp_4(Saint)\np_3(Saint)\np_2(Saint)\n\u00acp_0(Saint)\np_1(Saint)\n\u2200x (p_5(x) \u2228 p_14(x))\n(p_13(Saint) \u2295 p_14(Saint)) \u2192 p_4(Saint)\np_3(Saint) \u2192 (p_13(Saint) \u2295 p_12(Saint))\n\u2200x (p_2(x) \u2295 p_10(x))\n\u2200x (p_11(x) \u2192 p_12(x))\n\u2200x (p_8(x) \u2228 p_11(x))\np_9(Saint) \u2192 (p_0(Saint) \u2295 p_10(Saint))\np_6(Saint) \u2228 p_7(Saint)\n\u2200x (\u00acp_14(x) \u2192 p_5(x))\np_14(Saint)\np_13(Saint)\n\u00acp_10(Saint)\n\u00acp_12(Saint)\n\u00acp_11(Saint)\np_8(Saint)\np_6(Saint)\np_15(Saint)\np_7(Saint)",
            "Initial Goal": "(p_15(Saint) \u2227 p_1(Saint)) \u2192 p_7(Saint)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_5(Saint)",
                    "-p_4(Saint)",
                    "p_3(Saint)",
                    "p_2(Saint)",
                    "-p_0(Saint)",
                    "p_1(Saint)",
                    "all x (p_5(x) | p_14(x))",
                    "(-(p_13(Saint) <-> p_14(Saint))) -> p_4(Saint)",
                    "p_3(Saint) -> (-(p_13(Saint) <-> p_12(Saint)))",
                    "all x (-(p_2(x) <-> p_10(x)))",
                    "all x (p_11(x) -> p_12(x))",
                    "all x (p_8(x) | p_11(x))",
                    "p_9(Saint) -> (-(p_0(Saint) <-> p_10(Saint)))",
                    "p_6(Saint) | p_7(Saint)",
                    "all x (-p_14(x) -> p_5(x))",
                    "p_14(Saint)",
                    "p_13(Saint)",
                    "-p_10(Saint)",
                    "-p_12(Saint)",
                    "-p_11(Saint)",
                    "p_8(Saint)",
                    "p_6(Saint)",
                    "p_15(Saint)",
                    "p_7(Saint)"
                ],
                "formulas(goals)": [
                    "(p_15(Saint) & p_1(Saint)) -> p_7(Saint)"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "\u00acp_6(Saint)",
                    "\u00acp_7(Saint)"
                ],
                "removed_rules": [
                    "\u2200x ((p_6(x) \u2227 p_8(x)) \u2192 p_9(x))",
                    "\u00acp_6(Saint) \u2228 p_7(Saint)"
                ],
                "added_facts": [
                    "p_6(Saint)",
                    "p_7(Saint)"
                ],
                "added_rules": [
                    "p_6(Saint) \u2228 p_7(Saint)"
                ]
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_5(Saint)\n\u00acp_4(Saint)\np_3(Saint)\np_2(Saint)\n\u00acp_0(Saint)\np_1(Saint)\n\u2200x (p_5(x) \u2228 p_14(x))\n(p_13(Saint) \u2295 p_14(Saint)) \u2192 p_4(Saint)\np_3(Saint) \u2192 (p_13(Saint) \u2295 p_12(Saint))\n\u2200x (p_2(x) \u2295 p_10(x))\n\u2200x (p_11(x) \u2192 p_12(x))\n\u2200x (p_8(x) \u2228 p_11(x))\np_9(Saint) \u2192 (p_0(Saint) \u2295 p_10(Saint))\np_6(Saint) \u2228 p_7(Saint)\n\u2200x (\u00acp_14(x) \u2192 p_5(x))\np_14(Saint)\np_13(Saint)\n\u00acp_10(Saint)\n\u00acp_12(Saint)\n\u00acp_11(Saint)\np_8(Saint)\np_6(Saint)\np_15(Saint)\np_6(Saint) \u2192 \u00acp_7(Saint)",
            "Initial Goal": "(p_15(Saint) \u2227 p_1(Saint)) \u2192 p_7(Saint)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_5(Saint).",
                    "-p_4(Saint).",
                    "p_3(Saint).",
                    "p_2(Saint).",
                    "-p_0(Saint).",
                    "p_1(Saint).",
                    "all x (p_5(x) | p_14(x)).",
                    "(-(p_13(Saint) <-> p_14(Saint))) -> p_4(Saint).",
                    "p_3(Saint) -> (-(p_13(Saint) <-> p_12(Saint))).",
                    "all x (-(p_2(x) <-> p_10(x))).",
                    "all x (p_11(x) -> p_12(x)).",
                    "all x (p_8(x) | p_11(x)).",
                    "p_9(Saint) -> (-(p_0(Saint) <-> p_10(Saint))).",
                    "p_6(Saint) | p_7(Saint).",
                    "all x (-p_14(x) -> p_5(x)).",
                    "p_14(Saint).",
                    "p_13(Saint).",
                    "-p_10(Saint).",
                    "-p_12(Saint).",
                    "-p_11(Saint).",
                    "p_8(Saint).",
                    "p_6(Saint).",
                    "p_15(Saint).",
                    "p_6(Saint) -> -p_7(Saint)."
                ],
                "formulas(goals)": [
                    "p_15(Saint) & p_1(Saint) & -p_7(Saint)."
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "p_7(Saint)"
                ],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "p_6(Saint) \u2192 \u00acp_7(Saint)"
                ]
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_5(Saint)\n\u00acp_4(Saint)\np_3(Saint)\np_2(Saint)\n\u00acp_0(Saint)\np_1(Saint)\n\u2200x (p_5(x) \u2228 p_14(x))\n(p_13(Saint) \u2295 p_14(Saint)) \u2192 p_4(Saint)\np_3(Saint) \u2192 (p_13(Saint) \u2295 p_12(Saint))\n\u2200x (p_2(x) \u2295 p_10(x))\n\u2200x (p_11(x) \u2192 p_12(x))\n\u2200x (p_8(x) \u2228 p_11(x))\np_9(Saint) \u2192 (p_0(Saint) \u2295 p_10(Saint))\np_6(Saint) \u2228 p_7(Saint)\n\u2200x (\u00acp_14(x) \u2192 p_5(x))\np_14(Saint)\np_13(Saint)\n\u00acp_10(Saint)\n\u00acp_12(Saint)\n\u00acp_11(Saint)\np_8(Saint)\np_6(Saint)\np_15(Saint)\np_6(Saint) \u2192 p_7(Saint)",
            "Initial Goal": "(p_15(Saint) \u2227 p_1(Saint)) \u2192 p_7(Saint)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_5(Saint)",
                    "-p_4(Saint)",
                    "p_3(Saint)",
                    "p_2(Saint)",
                    "-p_0(Saint)",
                    "p_1(Saint)",
                    "all x (p_5(x) | p_14(x))",
                    "(-(p_13(Saint) <-> p_14(Saint))) -> p_4(Saint)",
                    "p_3(Saint) -> (-(p_13(Saint) <-> p_12(Saint)))",
                    "all x (-(p_2(x) <-> p_10(x)))",
                    "all x (p_11(x) -> p_12(x))",
                    "all x (p_8(x) | p_11(x))",
                    "p_9(Saint) -> (-(p_0(Saint) <-> p_10(Saint)))",
                    "p_6(Saint) | p_7(Saint)",
                    "all x (-p_14(x) -> p_5(x))",
                    "p_14(Saint)",
                    "p_13(Saint)",
                    "-p_10(Saint)",
                    "-p_12(Saint)",
                    "-p_11(Saint)",
                    "p_8(Saint)",
                    "p_6(Saint)",
                    "p_15(Saint)",
                    "p_6(Saint) -> p_7(Saint)"
                ],
                "formulas(goals)": [
                    "(p_15(Saint) & p_1(Saint)) -> p_7(Saint)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_6(Saint) \u2192 \u00acp_7(Saint)"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_6(Saint) \u2192 p_7(Saint)"
                ]
            }
        }
    ]
}