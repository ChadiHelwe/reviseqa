{
    "background_story": "Mariam had always been fascinated by planes and the thrill of flight. Growing up near a small airfield, she would often watch in awe as aircraft took off and landed. As she got older, Mariam's interest turned into a passion, and she began taking flying lessons at the very same airfield. Her dedication and natural talent quickly paid off, and she earned her pilot's license before the age of 20. Mariam went on to work at the airfield, first as a flight instructor and later as a manager, overseeing daily operations and ensuring the safe takeoff and landing of countless flights. The airfield became not just a workplace but a second home for Mariam, where she lived her dream and shared her love of aviation with others.",
    "predicates": [
        {
            "id": 0,
            "name": "manage_airfield"
        },
        {
            "id": 1,
            "name": "has_wings"
        },
        {
            "id": 2,
            "name": "mechanic"
        },
        {
            "id": 3,
            "name": "coordinate_flights"
        },
        {
            "id": 4,
            "name": "check_passports"
        },
        {
            "id": 5,
            "name": "handle_baggage"
        },
        {
            "id": 6,
            "name": "licensed_pilot"
        },
        {
            "id": 7,
            "name": "instruct_others"
        },
        {
            "id": 8,
            "name": "fly_solo"
        },
        {
            "id": 9,
            "name": "crew_member"
        },
        {
            "id": 10,
            "name": "air_traffic_controller"
        },
        {
            "id": 11,
            "name": "work_airport"
        },
        {
            "id": 12,
            "name": "knows_safety"
        },
        {
            "id": 13,
            "name": "has_experience"
        },
        {
            "id": 14,
            "name": "love_aviation"
        },
        {
            "id": 15,
            "name": "know_aircraft"
        },
        {
            "id": 16,
            "name": "have_experience"
        },
        {
            "id": 17,
            "name": "operate_equipment"
        },
        {
            "id": 18,
            "name": "assist_pilots"
        }
    ],
    "subject_name": "Mariam",
    "subject_category": "human",
    "keyword": "airfield",
    "all_facts": [
        {
            "id": 0,
            "subject": "Mariam",
            "text": "Mariam does not manage an airfield.",
            "fol": "\u00acp_0(Mariam)",
            "str_fol": "\u00acmanage_airfield(Mariam)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Mariam",
            "text": "Mariam has wings.",
            "fol": "p_1(Mariam)",
            "str_fol": "has_wings(Mariam)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Mariam",
            "text": "Mariam is a mechanic.",
            "fol": "p_2(Mariam)",
            "str_fol": "mechanic(Mariam)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Mariam",
            "text": "Mariam does not coordinate flights.",
            "fol": "\u00acp_3(Mariam)",
            "str_fol": "\u00accoordinate_flights(Mariam)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Mariam",
            "text": "Mariam does not check passports.",
            "fol": "\u00acp_4(Mariam)",
            "str_fol": "\u00accheck_passports(Mariam)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Mariam",
            "text": "Mariam handles baggage.",
            "fol": "p_5(Mariam)",
            "str_fol": "handle_baggage(Mariam)",
            "negation": false
        },
        {
            "id": 6,
            "subject": "Mariam",
            "text": "Mariam works at an airport.",
            "fol": "p_11(Mariam)",
            "str_fol": "work_airport(Mariam)",
            "negation": false
        },
        {
            "id": 7,
            "subject": "Mariam",
            "text": "Mariam is an air traffic controller.",
            "fol": "p_10(Mariam)",
            "str_fol": "air_traffic_controller(Mariam)",
            "negation": false
        },
        {
            "id": 8,
            "subject": "Mariam",
            "text": "Mariam is not a crew member.",
            "fol": "\u00acp_9(Mariam)",
            "str_fol": "\u00accrew_member(Mariam)",
            "negation": true
        },
        {
            "id": 9,
            "subject": "Mariam",
            "text": "Mariam flies solo.",
            "fol": "p_8(Mariam)",
            "str_fol": "fly_solo(Mariam)",
            "negation": false
        },
        {
            "id": 10,
            "subject": "Mariam",
            "text": "Mariam does not instruct others.",
            "fol": "\u00acp_7(Mariam)",
            "str_fol": "\u00acinstruct_others(Mariam)",
            "negation": true
        },
        {
            "id": 11,
            "subject": "Mariam",
            "text": "Mariam is a licensed pilot.",
            "fol": "p_6(Mariam)",
            "str_fol": "licensed_pilot(Mariam)",
            "negation": false
        }
    ],
    "context_facts": [
        {
            "id": 4,
            "subject": "Mariam",
            "text": "Mariam does not check passports.",
            "fol": "\u00acp_4(Mariam)",
            "str_fol": "\u00accheck_passports(Mariam)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Mariam",
            "text": "Mariam handles baggage.",
            "fol": "p_5(Mariam)",
            "str_fol": "handle_baggage(Mariam)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Mariam",
            "text": "Mariam does not coordinate flights.",
            "fol": "\u00acp_3(Mariam)",
            "str_fol": "\u00accoordinate_flights(Mariam)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Mariam",
            "text": "Mariam is a mechanic.",
            "fol": "p_2(Mariam)",
            "str_fol": "mechanic(Mariam)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Mariam",
            "text": "Mariam has wings.",
            "fol": "p_1(Mariam)",
            "str_fol": "has_wings(Mariam)",
            "negation": false
        },
        {
            "id": 0,
            "subject": "Mariam",
            "text": "Mariam does not manage an airfield.",
            "fol": "\u00acp_0(Mariam)",
            "str_fol": "\u00acmanage_airfield(Mariam)",
            "negation": true
        }
    ],
    "context_rules": [
        {
            "id": 5,
            "text": "If someone either checks passports or handles baggage (but not both), then they work at an airport.",
            "fol": "\u2200x ((p_4(x) \u2295 p_5(x)) \u2192 p_11(x))",
            "str_fol": "\u2200x ((check_passports(x) \u2295 handle_baggage(x)) \u2192 work_airport(x))"
        },
        {
            "id": 4,
            "text": "If Mariam works at an airport, then she either coordinates flights or is an air traffic controller (or both).",
            "fol": "p_11(Mariam) \u2192 (p_3(Mariam) \u2228 p_10(Mariam))",
            "str_fol": "work_airport(Mariam) \u2192 (coordinate_flights(Mariam) \u2228 air_traffic_controller(Mariam))"
        },
        {
            "id": 3,
            "text": "If Mariam is a crew member, then she is either an air traffic controller or a mechanic, but not both.",
            "fol": "p_9(Mariam) \u2192 (p_10(Mariam) \u2295 p_2(Mariam))",
            "str_fol": "crew_member(Mariam) \u2192 (air_traffic_controller(Mariam) \u2295 mechanic(Mariam))"
        },
        {
            "id": 2,
            "text": "Mariam either flies solo or is part of a crew, but not both.",
            "fol": "p_8(Mariam) \u2295 p_9(Mariam)",
            "str_fol": "fly_solo(Mariam) \u2295 crew_member(Mariam)"
        },
        {
            "id": 1,
            "text": "If Mariam has wings, then she can either fly solo or instruct others, but not both.",
            "fol": "p_1(Mariam) \u2192 (p_8(Mariam) \u2295 p_7(Mariam))",
            "str_fol": "has_wings(Mariam) \u2192 (fly_solo(Mariam) \u2295 instruct_others(Mariam))"
        },
        {
            "id": 0,
            "text": "If Mariam is a licensed pilot, then she can either instruct others or manage an airfield, but not both.",
            "fol": "p_6(Mariam) \u2192 (p_7(Mariam) \u2295 p_0(Mariam))",
            "str_fol": "licensed_pilot(Mariam) \u2192 (instruct_others(Mariam) \u2295 manage_airfield(Mariam))"
        }
    ],
    "context": [
        {
            "id": 4,
            "subject": "Mariam",
            "text": "Mariam does not check passports.",
            "fol": "\u00acp_4(Mariam)",
            "str_fol": "\u00accheck_passports(Mariam)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Mariam",
            "text": "Mariam handles baggage.",
            "fol": "p_5(Mariam)",
            "str_fol": "handle_baggage(Mariam)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Mariam",
            "text": "Mariam does not coordinate flights.",
            "fol": "\u00acp_3(Mariam)",
            "str_fol": "\u00accoordinate_flights(Mariam)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Mariam",
            "text": "Mariam is a mechanic.",
            "fol": "p_2(Mariam)",
            "str_fol": "mechanic(Mariam)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Mariam",
            "text": "Mariam has wings.",
            "fol": "p_1(Mariam)",
            "str_fol": "has_wings(Mariam)",
            "negation": false
        },
        {
            "id": 0,
            "subject": "Mariam",
            "text": "Mariam does not manage an airfield.",
            "fol": "\u00acp_0(Mariam)",
            "str_fol": "\u00acmanage_airfield(Mariam)",
            "negation": true
        },
        {
            "id": 5,
            "text": "If someone either checks passports or handles baggage (but not both), then they work at an airport.",
            "fol": "\u2200x ((p_4(x) \u2295 p_5(x)) \u2192 p_11(x))",
            "str_fol": "\u2200x ((check_passports(x) \u2295 handle_baggage(x)) \u2192 work_airport(x))"
        },
        {
            "id": 4,
            "text": "If Mariam works at an airport, then she either coordinates flights or is an air traffic controller (or both).",
            "fol": "p_11(Mariam) \u2192 (p_3(Mariam) \u2228 p_10(Mariam))",
            "str_fol": "work_airport(Mariam) \u2192 (coordinate_flights(Mariam) \u2228 air_traffic_controller(Mariam))"
        },
        {
            "id": 3,
            "text": "If Mariam is a crew member, then she is either an air traffic controller or a mechanic, but not both.",
            "fol": "p_9(Mariam) \u2192 (p_10(Mariam) \u2295 p_2(Mariam))",
            "str_fol": "crew_member(Mariam) \u2192 (air_traffic_controller(Mariam) \u2295 mechanic(Mariam))"
        },
        {
            "id": 2,
            "text": "Mariam either flies solo or is part of a crew, but not both.",
            "fol": "p_8(Mariam) \u2295 p_9(Mariam)",
            "str_fol": "fly_solo(Mariam) \u2295 crew_member(Mariam)"
        },
        {
            "id": 1,
            "text": "If Mariam has wings, then she can either fly solo or instruct others, but not both.",
            "fol": "p_1(Mariam) \u2192 (p_8(Mariam) \u2295 p_7(Mariam))",
            "str_fol": "has_wings(Mariam) \u2192 (fly_solo(Mariam) \u2295 instruct_others(Mariam))"
        },
        {
            "id": 0,
            "text": "If Mariam is a licensed pilot, then she can either instruct others or manage an airfield, but not both.",
            "fol": "p_6(Mariam) \u2192 (p_7(Mariam) \u2295 p_0(Mariam))",
            "str_fol": "licensed_pilot(Mariam) \u2192 (instruct_others(Mariam) \u2295 manage_airfield(Mariam))"
        }
    ],
    "context_fol": "\u00acp_4(Mariam)\np_5(Mariam)\n\u00acp_3(Mariam)\np_2(Mariam)\np_1(Mariam)\n\u00acp_0(Mariam)\n\u2200x ((p_4(x) \u2295 p_5(x)) \u2192 p_11(x))\np_11(Mariam) \u2192 (p_3(Mariam) \u2228 p_10(Mariam))\np_9(Mariam) \u2192 (p_10(Mariam) \u2295 p_2(Mariam))\np_8(Mariam) \u2295 p_9(Mariam)\np_1(Mariam) \u2192 (p_8(Mariam) \u2295 p_7(Mariam))\np_6(Mariam) \u2192 (p_7(Mariam) \u2295 p_0(Mariam))",
    "conclusion": {
        "id": 11,
        "subject": "Mariam",
        "text": "Mariam is a licensed pilot.",
        "fol": "p_6(Mariam)",
        "str_fol": "licensed_pilot(Mariam)",
        "negation": false
    },
    "initial_answer": "False",
    "initial_goal": "p_6(Mariam)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 4,
                    "subject": "Mariam",
                    "text": "Mariam does not check passports.",
                    "fol": "\u00acp_4(Mariam)",
                    "str_fol": "\u00accheck_passports(Mariam)",
                    "negation": true
                },
                {
                    "id": 5,
                    "subject": "Mariam",
                    "text": "Mariam handles baggage.",
                    "fol": "p_5(Mariam)",
                    "str_fol": "handle_baggage(Mariam)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "If someone either checks passports or handles baggage (but not both), then they work at an airport.",
                    "fol": "\u2200x ((p_4(x) \u2295 p_5(x)) \u2192 p_11(x))",
                    "str_fol": "\u2200x ((check_passports(x) \u2295 handle_baggage(x)) \u2192 work_airport(x))"
                }
            ],
            "conclusion": {
                "id": 6,
                "subject": "Mariam",
                "text": "Mariam works at an airport.",
                "fol": "p_11(Mariam)",
                "str_fol": "work_airport(Mariam)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 6,
                    "subject": "Mariam",
                    "text": "Mariam works at an airport.",
                    "fol": "p_11(Mariam)",
                    "str_fol": "work_airport(Mariam)",
                    "negation": false
                },
                {
                    "id": 3,
                    "subject": "Mariam",
                    "text": "Mariam does not coordinate flights.",
                    "fol": "\u00acp_3(Mariam)",
                    "str_fol": "\u00accoordinate_flights(Mariam)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "If Mariam works at an airport, then she either coordinates flights or is an air traffic controller (or both).",
                    "fol": "p_11(Mariam) \u2192 (p_3(Mariam) \u2228 p_10(Mariam))",
                    "str_fol": "work_airport(Mariam) \u2192 (coordinate_flights(Mariam) \u2228 air_traffic_controller(Mariam))"
                }
            ],
            "conclusion": {
                "id": 7,
                "subject": "Mariam",
                "text": "Mariam is an air traffic controller.",
                "fol": "p_10(Mariam)",
                "str_fol": "air_traffic_controller(Mariam)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 7,
                    "subject": "Mariam",
                    "text": "Mariam is an air traffic controller.",
                    "fol": "p_10(Mariam)",
                    "str_fol": "air_traffic_controller(Mariam)",
                    "negation": false
                },
                {
                    "id": 2,
                    "subject": "Mariam",
                    "text": "Mariam is a mechanic.",
                    "fol": "p_2(Mariam)",
                    "str_fol": "mechanic(Mariam)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "If Mariam is a crew member, then she is either an air traffic controller or a mechanic, but not both.",
                    "fol": "p_9(Mariam) \u2192 (p_10(Mariam) \u2295 p_2(Mariam))",
                    "str_fol": "crew_member(Mariam) \u2192 (air_traffic_controller(Mariam) \u2295 mechanic(Mariam))"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Mariam",
                "text": "Mariam is not a crew member.",
                "fol": "\u00acp_9(Mariam)",
                "str_fol": "\u00accrew_member(Mariam)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 8,
                    "subject": "Mariam",
                    "text": "Mariam is not a crew member.",
                    "fol": "\u00acp_9(Mariam)",
                    "str_fol": "\u00accrew_member(Mariam)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "Mariam either flies solo or is part of a crew, but not both.",
                    "fol": "p_8(Mariam) \u2295 p_9(Mariam)",
                    "str_fol": "fly_solo(Mariam) \u2295 crew_member(Mariam)"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Mariam",
                "text": "Mariam flies solo.",
                "fol": "p_8(Mariam)",
                "str_fol": "fly_solo(Mariam)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 1,
                    "subject": "Mariam",
                    "text": "Mariam has wings.",
                    "fol": "p_1(Mariam)",
                    "str_fol": "has_wings(Mariam)",
                    "negation": false
                },
                {
                    "id": 9,
                    "subject": "Mariam",
                    "text": "Mariam flies solo.",
                    "fol": "p_8(Mariam)",
                    "str_fol": "fly_solo(Mariam)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "If Mariam has wings, then she can either fly solo or instruct others, but not both.",
                    "fol": "p_1(Mariam) \u2192 (p_8(Mariam) \u2295 p_7(Mariam))",
                    "str_fol": "has_wings(Mariam) \u2192 (fly_solo(Mariam) \u2295 instruct_others(Mariam))"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Mariam",
                "text": "Mariam does not instruct others.",
                "fol": "\u00acp_7(Mariam)",
                "str_fol": "\u00acinstruct_others(Mariam)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 10,
                    "subject": "Mariam",
                    "text": "Mariam does not instruct others.",
                    "fol": "\u00acp_7(Mariam)",
                    "str_fol": "\u00acinstruct_others(Mariam)",
                    "negation": true
                },
                {
                    "id": 0,
                    "subject": "Mariam",
                    "text": "Mariam does not manage an airfield.",
                    "fol": "\u00acp_0(Mariam)",
                    "str_fol": "\u00acmanage_airfield(Mariam)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "If Mariam is a licensed pilot, then she can either instruct others or manage an airfield, but not both.",
                    "fol": "p_6(Mariam) \u2192 (p_7(Mariam) \u2295 p_0(Mariam))",
                    "str_fol": "licensed_pilot(Mariam) \u2192 (instruct_others(Mariam) \u2295 manage_airfield(Mariam))"
                }
            ],
            "conclusion": {
                "id": 11,
                "subject": "Mariam",
                "text": "Mariam is a licensed pilot.",
                "fol": "p_6(Mariam)",
                "str_fol": "licensed_pilot(Mariam)",
                "negation": false
            }
        }
    ],
    "proof_trace": "1 (all x (-(p_4(x) <-> p_5(x)) -> p_11(x))).  [assumption].\n2 p_11(Mariam) -> p_3(Mariam) | p_10(Mariam).  [assumption].\n3 p_9(Mariam) -> -(p_10(Mariam) <-> p_2(Mariam)).  [assumption].\n4 -(p_8(Mariam) <-> p_9(Mariam)).  [assumption].\n5 p_1(Mariam) -> -(p_8(Mariam) <-> p_7(Mariam)).  [assumption].\n6 p_6(Mariam) -> -(p_7(Mariam) <-> p_0(Mariam)).  [assumption].\n7 -p_6(Mariam).  [goal].\n8 p_4(x) | -p_5(x) | p_11(x).  [clausify(1)].\n9 -p_4(Mariam).  [assumption].\n11 -p_5(Mariam) | p_11(Mariam).  [resolve(8,a,9,a)].\n12 p_5(Mariam).  [assumption].\n13 -p_11(Mariam) | p_3(Mariam) | p_10(Mariam).  [clausify(2)].\n14 -p_3(Mariam).  [assumption].\n15 -p_9(Mariam) | -p_10(Mariam) | -p_2(Mariam).  [clausify(3)].\n16 p_2(Mariam).  [assumption].\n19 p_1(Mariam).  [assumption].\n20 -p_1(Mariam) | -p_8(Mariam) | -p_7(Mariam).  [clausify(5)].\n21 -p_6(Mariam) | p_7(Mariam) | p_0(Mariam).  [clausify(6)].\n22 -p_0(Mariam).  [assumption].\n25 p_8(Mariam) | p_9(Mariam).  [clausify(4)].\n27 -p_8(Mariam) | -p_7(Mariam).  [resolve(20,a,19,a)].\n28 -p_6(Mariam) | p_7(Mariam).  [resolve(21,c,22,a)].\n29 p_6(Mariam).  [deny(7)].\n30 -p_11(Mariam) | p_10(Mariam).  [resolve(13,b,14,a)].\n31 p_11(Mariam).  [resolve(11,a,12,a)].\n32 -p_7(Mariam) | p_9(Mariam).  [resolve(27,a,25,a)].\n33 -p_9(Mariam) | -p_10(Mariam).  [resolve(15,c,16,a)].\n35 -p_7(Mariam) | -p_10(Mariam).  [resolve(32,b,33,a)].\n36 p_7(Mariam).  [resolve(28,a,29,a)].\n37 -p_10(Mariam).  [resolve(35,a,36,a)].\n38 p_10(Mariam).  [resolve(30,a,31,a)].\n39 $F.  [resolve(37,a,38,a)].",
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_4(Mariam)\np_5(Mariam)\n\u00acp_3(Mariam)\np_2(Mariam)\np_1(Mariam)\n\u00acp_0(Mariam)\n\u2200x ((p_4(x) \u2295 p_5(x)) \u2192 p_11(x))\np_11(Mariam) \u2192 (p_3(Mariam) \u2228 p_10(Mariam))\np_9(Mariam) \u2192 (p_10(Mariam) \u2295 p_2(Mariam))\np_8(Mariam) \u2295 p_9(Mariam)\np_1(Mariam) \u2192 (p_8(Mariam) \u2295 p_7(Mariam))\np_6(Mariam) \u2192 (p_7(Mariam) \u2295 p_0(Mariam))\np_11(Mariam)",
            "Initial Goal": "p_6(Mariam)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Mariam)",
                    "p_5(Mariam)",
                    "-p_3(Mariam)",
                    "p_2(Mariam)",
                    "p_1(Mariam)",
                    "-p_0(Mariam)",
                    "all x (-(p_4(x) <-> p_5(x)) -> p_11(x))",
                    "p_11(Mariam) -> (p_3(Mariam) | p_10(Mariam))",
                    "p_9(Mariam) -> (-(p_10(Mariam) <-> p_2(Mariam)))",
                    "-(p_8(Mariam) <-> p_9(Mariam))",
                    "p_1(Mariam) -> (-(p_8(Mariam) <-> p_7(Mariam)))",
                    "p_6(Mariam) -> (-(p_7(Mariam) <-> p_0(Mariam)))",
                    "p_11(Mariam)"
                ],
                "formulas(goals)": [
                    "-p_6(Mariam)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_11(Mariam)"
                ],
                "added_rules": []
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_4(Mariam)\np_5(Mariam)\n\u00acp_3(Mariam)\np_2(Mariam)\np_1(Mariam)\n\u00acp_0(Mariam)\n\u2200x ((p_4(x) \u2295 p_5(x)) \u2192 p_11(x))\np_11(Mariam) \u2192 (p_3(Mariam) \u2228 p_10(Mariam))\np_9(Mariam) \u2192 (p_10(Mariam) \u2295 p_2(Mariam))\np_8(Mariam) \u2295 p_9(Mariam)\np_1(Mariam) \u2192 (p_8(Mariam) \u2295 p_7(Mariam))\np_6(Mariam) \u2192 (p_7(Mariam) \u2295 p_0(Mariam))\np_11(Mariam)\n\u00ac(p_7(Mariam) \u2295 p_0(Mariam)) \u2192 \u00acp_6(Mariam)\n\u00acp_7(Mariam)",
            "Initial Goal": "p_6(Mariam)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Mariam)",
                    "p_5(Mariam)",
                    "-p_3(Mariam)",
                    "p_2(Mariam)",
                    "p_1(Mariam)",
                    "-p_0(Mariam)",
                    "all x ((-(p_4(x) <-> p_5(x))) -> p_11(x))",
                    "p_11(Mariam) -> (p_3(Mariam) | p_10(Mariam))",
                    "p_9(Mariam) -> (-(p_10(Mariam) <-> p_2(Mariam)))",
                    "-(p_8(Mariam) <-> p_9(Mariam))",
                    "p_1(Mariam) -> (-(p_8(Mariam) <-> p_7(Mariam)))",
                    "p_6(Mariam) -> (-(p_7(Mariam) <-> p_0(Mariam)))",
                    "p_11(Mariam)",
                    "(-(-(p_7(Mariam) <-> p_0(Mariam))) -> -p_6(Mariam))",
                    "-p_7(Mariam)"
                ],
                "formulas(goals)": [
                    "-p_6(Mariam)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "\u00acp_7(Mariam)"
                ],
                "added_rules": [
                    "\u00ac(p_7(Mariam) \u2295 p_0(Mariam)) \u2192 \u00acp_6(Mariam)"
                ]
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_4(Mariam)\np_5(Mariam)\n\u00acp_3(Mariam)\np_2(Mariam)\np_1(Mariam)\n\u00acp_0(Mariam)\n\u2200x ((p_4(x) \u2295 p_5(x)) \u2192 p_11(x))\np_11(Mariam) \u2192 (p_3(Mariam) \u2228 p_10(Mariam))\np_9(Mariam) \u2192 (p_10(Mariam) \u2295 p_2(Mariam))\np_8(Mariam) \u2295 p_9(Mariam)\np_1(Mariam) \u2192 (p_8(Mariam) \u2295 p_7(Mariam))\np_11(Mariam)\n\u00acp_7(Mariam)\np_11(Mariam) \u2192 p_6(Mariam)",
            "Initial Goal": "p_6(Mariam)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Mariam)",
                    "p_5(Mariam)",
                    "-p_3(Mariam)",
                    "p_2(Mariam)",
                    "p_1(Mariam)",
                    "-p_0(Mariam)",
                    "all x (-(p_4(x) <-> p_5(x)) -> p_11(x))",
                    "p_11(Mariam) -> (p_3(Mariam) | p_10(Mariam))",
                    "p_9(Mariam) -> (-(p_10(Mariam) <-> p_2(Mariam)))",
                    "-(p_8(Mariam) <-> p_9(Mariam))",
                    "p_1(Mariam) -> (-(p_8(Mariam) <-> p_7(Mariam)))",
                    "p_11(Mariam)",
                    "-p_7(Mariam)",
                    "p_11(Mariam) -> p_6(Mariam)"
                ],
                "formulas(goals)": [
                    "p_6(Mariam)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": []
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_4(Mariam)\np_5(Mariam)\n\u00acp_3(Mariam)\np_2(Mariam)\np_1(Mariam)\n\u00acp_0(Mariam)\n\u2200x ((p_4(x) \u2295 p_5(x)) \u2192 p_11(x))\np_11(Mariam) \u2192 (p_3(Mariam) \u2228 p_10(Mariam))\np_9(Mariam) \u2192 (p_10(Mariam) \u2295 p_2(Mariam))\np_8(Mariam) \u2295 p_9(Mariam)\np_1(Mariam) \u2192 (p_8(Mariam) \u2295 p_7(Mariam))\np_11(Mariam)\n\u00acp_7(Mariam)\np_11(Mariam) \u2192 \u00acp_6(Mariam)",
            "Initial Goal": "p_6(Mariam)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Mariam)",
                    "p_5(Mariam)",
                    "-p_3(Mariam)",
                    "p_2(Mariam)",
                    "p_1(Mariam)",
                    "-p_0(Mariam)",
                    "(all x (-(p_4(x) <-> p_5(x)) -> p_11(x)))",
                    "(p_11(Mariam) -> (p_3(Mariam) | p_10(Mariam)))",
                    "(p_9(Mariam) -> (-(p_10(Mariam) <-> p_2(Mariam))))",
                    "(-(p_8(Mariam) <-> p_9(Mariam)))",
                    "(p_1(Mariam) -> (-(p_8(Mariam) <-> p_7(Mariam))))",
                    "p_11(Mariam)",
                    "-p_7(Mariam)",
                    "(p_11(Mariam) -> -p_6(Mariam))"
                ],
                "formulas(goals)": [
                    "-p_6(Mariam)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_11(Mariam) \u2192 p_6(Mariam)"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_11(Mariam) \u2192 \u00acp_6(Mariam)"
                ]
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_4(Mariam)\np_5(Mariam)\n\u00acp_3(Mariam)\np_2(Mariam)\np_1(Mariam)\n\u00acp_0(Mariam)\n\u2200x ((p_4(x) \u2295 p_5(x)) \u2192 p_11(x))\np_11(Mariam) \u2192 (p_3(Mariam) \u2228 p_10(Mariam))\np_9(Mariam) \u2192 (p_10(Mariam) \u2295 p_2(Mariam))\np_8(Mariam) \u2295 p_9(Mariam)\np_1(Mariam) \u2192 (p_8(Mariam) \u2295 p_7(Mariam))\np_11(Mariam)\n\u00acp_7(Mariam)\np_11(Mariam) \u2192 p_6(Mariam)",
            "Initial Goal": "p_6(Mariam)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Mariam)",
                    "p_5(Mariam)",
                    "-p_3(Mariam)",
                    "p_2(Mariam)",
                    "p_1(Mariam)",
                    "-p_0(Mariam)",
                    "all x ((-(p_4(x) <-> p_5(x))) -> p_11(x))",
                    "p_11(Mariam) -> (p_3(Mariam) | p_10(Mariam))",
                    "p_9(Mariam) -> (-(p_10(Mariam) <-> p_2(Mariam)))",
                    "-(p_8(Mariam) <-> p_9(Mariam))",
                    "p_1(Mariam) -> (-(p_8(Mariam) <-> p_7(Mariam)))",
                    "p_11(Mariam)",
                    "-p_7(Mariam)",
                    "p_11(Mariam) -> p_6(Mariam)"
                ],
                "formulas(goals)": [
                    "p_6(Mariam)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_11(Mariam) \u2192 \u00acp_6(Mariam)"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_11(Mariam) \u2192 p_6(Mariam)"
                ]
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_4(Mariam)\np_5(Mariam)\n\u00acp_3(Mariam)\np_2(Mariam)\np_1(Mariam)\n\u00acp_0(Mariam)\n\u2200x ((p_4(x) \u2295 p_5(x)) \u2192 p_11(x))\np_11(Mariam) \u2192 (p_3(Mariam) \u2228 p_10(Mariam))\np_9(Mariam) \u2192 (p_10(Mariam) \u2295 p_2(Mariam))\np_8(Mariam) \u2295 p_9(Mariam)\np_1(Mariam) \u2192 (p_8(Mariam) \u2295 p_7(Mariam))\np_11(Mariam)\n\u00acp_7(Mariam)\np_11(Mariam) \u2192 p_6(Mariam)\np_6(Mariam)\np_10(Mariam)\np_8(Mariam) \u2228 p_9(Mariam)\n\u00ac(p_8(Mariam) \u2227 p_9(Mariam))",
            "Initial Goal": "p_6(Mariam)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Mariam)",
                    "p_5(Mariam)",
                    "-p_3(Mariam)",
                    "p_2(Mariam)",
                    "p_1(Mariam)",
                    "-p_0(Mariam)",
                    "all x (-(p_4(x) <-> p_5(x)) -> p_11(x))",
                    "p_11(Mariam) -> (p_3(Mariam) | p_10(Mariam))",
                    "p_9(Mariam) -> -(p_10(Mariam) <-> p_2(Mariam))",
                    "-(p_8(Mariam) <-> p_9(Mariam))",
                    "p_1(Mariam) -> -(p_8(Mariam) <-> p_7(Mariam))",
                    "p_11(Mariam)",
                    "-p_7(Mariam)",
                    "p_11(Mariam) -> p_6(Mariam)",
                    "p_6(Mariam)",
                    "p_10(Mariam)",
                    "p_8(Mariam) | p_9(Mariam)",
                    "-(p_8(Mariam) & p_9(Mariam))"
                ],
                "formulas(goals)": [
                    "p_6(Mariam)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_6(Mariam)",
                    "p_10(Mariam)",
                    "p_8(Mariam) \u2228 p_9(Mariam)",
                    "\u00ac(p_8(Mariam) \u2227 p_9(Mariam))"
                ],
                "added_rules": []
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_4(Mariam)\np_5(Mariam)\n\u00acp_3(Mariam)\np_2(Mariam)\np_1(Mariam)\n\u00acp_0(Mariam)\n\u2200x ((p_4(x) \u2295 p_5(x)) \u2192 p_11(x))\np_11(Mariam) \u2192 (p_3(Mariam) \u2228 p_10(Mariam))\np_9(Mariam) \u2192 (p_10(Mariam) \u2295 p_2(Mariam))\np_8(Mariam) \u2295 p_9(Mariam)\np_1(Mariam) \u2192 (p_8(Mariam) \u2295 p_7(Mariam))\np_11(Mariam)\n\u00acp_7(Mariam)\np_11(Mariam) \u2192 p_6(Mariam)\np_6(Mariam)\np_10(Mariam)\np_8(Mariam) \u2228 p_9(Mariam)\n\u00ac(p_8(Mariam) \u2227 p_9(Mariam))\np_6(Mariam) \u2192 p_6(Mariam)\np_10(Mariam) \u2228 \u00acp_10(Mariam)\np_8(Mariam) \u2192 \u00acp_9(Mariam)\n(\u00acp_4(Mariam) \u2227 p_5(Mariam)) \u2192 p_11(Mariam)\np_1(Mariam) \u2192 (p_8(Mariam) \u2228 p_7(Mariam))",
            "Initial Goal": "p_6(Mariam)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Mariam)",
                    "p_5(Mariam)",
                    "-p_3(Mariam)",
                    "p_2(Mariam)",
                    "p_1(Mariam)",
                    "-p_0(Mariam)",
                    "all x (-(p_4(x) <-> p_5(x)) -> p_11(x))",
                    "p_11(Mariam) -> (p_3(Mariam) | p_10(Mariam))",
                    "p_9(Mariam) -> (-(p_10(Mariam) <-> p_2(Mariam)))",
                    "-(p_8(Mariam) <-> p_9(Mariam))",
                    "p_1(Mariam) -> (-(p_8(Mariam) <-> p_7(Mariam)))",
                    "p_11(Mariam)",
                    "-p_7(Mariam)",
                    "p_11(Mariam) -> p_6(Mariam)",
                    "p_6(Mariam)",
                    "p_10(Mariam)",
                    "p_8(Mariam) | p_9(Mariam)",
                    "-(p_8(Mariam) & p_9(Mariam))",
                    "p_6(Mariam) -> p_6(Mariam)",
                    "p_10(Mariam) | -p_10(Mariam)",
                    "p_8(Mariam) -> -p_9(Mariam)",
                    "(-p_4(Mariam) & p_5(Mariam)) -> p_11(Mariam)",
                    "p_1(Mariam) -> (p_8(Mariam) | p_7(Mariam))"
                ],
                "formulas(goals)": [
                    "p_6(Mariam)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_6(Mariam) \u2192 p_6(Mariam)",
                    "p_10(Mariam) \u2228 \u00acp_10(Mariam)"
                ],
                "added_rules": [
                    "p_8(Mariam) \u2192 \u00acp_9(Mariam)",
                    "(\u00acp_4(Mariam) \u2227 p_5(Mariam)) \u2192 p_11(Mariam)",
                    "p_1(Mariam) \u2192 (p_8(Mariam) \u2228 p_7(Mariam))"
                ]
            }
        }
    ]
}