{
    "background_story": "Lambchop was a curious and creative sheep who lived on a sunny farm. Unlike her flock, who spent their days grazing, Lambchop loved to dabble in various activities. She would try her hoof at painting, using colorful berries to create vibrant masterpieces on the barn walls. Sometimes, she'd dabble in music, bleating along to the farmer's old records. Lambchop even tried her hand at gardening, cultivating a small patch of wildflowers that attracted butterflies and bees. Though she never became a master of any one thing, Lambchop's joyful dabbling brought a sense of wonder and playfulness to the farm, reminding everyone that it's okay to try new things and have fun along the way.",
    "predicates": [
        {
            "id": 0,
            "name": "be_creative"
        },
        {
            "id": 1,
            "name": "feel_fulfilled"
        },
        {
            "id": 2,
            "name": "run_free"
        },
        {
            "id": 3,
            "name": "grow_strong"
        },
        {
            "id": 4,
            "name": "stay_healthy"
        },
        {
            "id": 5,
            "name": "try_new_things"
        },
        {
            "id": 6,
            "name": "be_happy"
        },
        {
            "id": 7,
            "name": "play_outside"
        },
        {
            "id": 8,
            "name": "love_nature"
        },
        {
            "id": 9,
            "name": "watch_clouds"
        },
        {
            "id": 10,
            "name": "chase_butterflies"
        },
        {
            "id": 11,
            "name": "eat_grass"
        },
        {
            "id": 12,
            "name": "make_music"
        },
        {
            "id": 13,
            "name": "make_art"
        },
        {
            "id": 14,
            "name": "explore_barn"
        },
        {
            "id": 15,
            "name": "take_naps"
        },
        {
            "id": 16,
            "name": "pick_wildflowers"
        },
        {
            "id": 17,
            "name": "follow_streams"
        },
        {
            "id": 18,
            "name": "enjoy_sun"
        },
        {
            "id": 19,
            "name": "hear_birds"
        },
        {
            "id": 20,
            "name": "sees_flowers"
        },
        {
            "id": 21,
            "name": "feels_curious"
        },
        {
            "id": 22,
            "name": "explore_fields"
        }
    ],
    "subject_name": "Lambchop",
    "subject_category": "sheep",
    "keyword": "dabble",
    "all_facts": [
        {
            "id": 0,
            "subject": "Lambchop",
            "text": "Lambchop is creative.",
            "fol": "p_0(Lambchop)",
            "str_fol": "be_creative(Lambchop)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Lambchop",
            "text": "Lambchop feels fulfilled.",
            "fol": "p_1(Lambchop)",
            "str_fol": "feel_fulfilled(Lambchop)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Lambchop",
            "text": "Lambchop runs free.",
            "fol": "p_2(Lambchop)",
            "str_fol": "run_free(Lambchop)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Lambchop",
            "text": "Lambchop does not grow strong.",
            "fol": "\u00acp_3(Lambchop)",
            "str_fol": "\u00acgrow_strong(Lambchop)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Lambchop",
            "text": "Lambchop does not stay healthy.",
            "fol": "\u00acp_4(Lambchop)",
            "str_fol": "\u00acstay_healthy(Lambchop)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Lambchop",
            "text": "Lambchop does not eat grass.",
            "fol": "\u00acp_11(Lambchop)",
            "str_fol": "\u00aceat_grass(Lambchop)",
            "negation": true
        },
        {
            "id": 6,
            "subject": "Lambchop",
            "text": "Lambchop does not chase butterflies.",
            "fol": "\u00acp_10(Lambchop)",
            "str_fol": "\u00acchase_butterflies(Lambchop)",
            "negation": true
        },
        {
            "id": 7,
            "subject": "Lambchop",
            "text": "Lambchop watches clouds.",
            "fol": "p_9(Lambchop)",
            "str_fol": "watch_clouds(Lambchop)",
            "negation": false
        },
        {
            "id": 8,
            "subject": "Lambchop",
            "text": "Lambchop loves nature.",
            "fol": "p_8(Lambchop)",
            "str_fol": "love_nature(Lambchop)",
            "negation": false
        },
        {
            "id": 9,
            "subject": "Lambchop",
            "text": "Lambchop plays outside.",
            "fol": "p_7(Lambchop)",
            "str_fol": "play_outside(Lambchop)",
            "negation": false
        },
        {
            "id": 10,
            "subject": "Lambchop",
            "text": "Lambchop is not happy.",
            "fol": "\u00acp_6(Lambchop)",
            "str_fol": "\u00acbe_happy(Lambchop)",
            "negation": true
        },
        {
            "id": 11,
            "subject": "Lambchop",
            "text": "Lambchop does not try new things.",
            "fol": "\u00acp_5(Lambchop)",
            "str_fol": "\u00actry_new_things(Lambchop)",
            "negation": true
        }
    ],
    "context_facts": [
        {
            "id": 3,
            "subject": "Lambchop",
            "text": "Lambchop does not grow strong.",
            "fol": "\u00acp_3(Lambchop)",
            "str_fol": "\u00acgrow_strong(Lambchop)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Lambchop",
            "text": "Lambchop does not stay healthy.",
            "fol": "\u00acp_4(Lambchop)",
            "str_fol": "\u00acstay_healthy(Lambchop)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Lambchop",
            "text": "Lambchop runs free.",
            "fol": "p_2(Lambchop)",
            "str_fol": "run_free(Lambchop)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Lambchop",
            "text": "Lambchop feels fulfilled.",
            "fol": "p_1(Lambchop)",
            "str_fol": "feel_fulfilled(Lambchop)",
            "negation": false
        },
        {
            "id": 0,
            "subject": "Lambchop",
            "text": "Lambchop is creative.",
            "fol": "p_0(Lambchop)",
            "str_fol": "be_creative(Lambchop)",
            "negation": false
        }
    ],
    "context_rules": [
        {
            "id": 6,
            "text": "Every sheep that eats grass either grows strong or stays healthy (or both).",
            "fol": "\u2200x (p_11(x) \u2192 (p_3(x) \u2228 p_4(x)))",
            "str_fol": "\u2200x (eat_grass(x) \u2192 (grow_strong(x) \u2228 stay_healthy(x)))"
        },
        {
            "id": 5,
            "text": "If Lambchop chases butterflies, then she runs free and eats grass.",
            "fol": "p_10(Lambchop) \u2192 (p_2(Lambchop) \u2227 p_11(Lambchop))",
            "str_fol": "chase_butterflies(Lambchop) \u2192 (run_free(Lambchop) \u2227 eat_grass(Lambchop))"
        },
        {
            "id": 4,
            "text": "Lambchop either chases butterflies or watches clouds, but not both.",
            "fol": "p_10(Lambchop) \u2295 p_9(Lambchop)",
            "str_fol": "chase_butterflies(Lambchop) \u2295 watch_clouds(Lambchop)"
        },
        {
            "id": 3,
            "text": "If Lambchop watches clouds, then she loves nature.",
            "fol": "p_9(Lambchop) \u2192 p_8(Lambchop)",
            "str_fol": "watch_clouds(Lambchop) \u2192 love_nature(Lambchop)"
        },
        {
            "id": 2,
            "text": "If Lambchop loves nature, then she will play outside.",
            "fol": "p_8(Lambchop) \u2192 p_7(Lambchop)",
            "str_fol": "love_nature(Lambchop) \u2192 play_outside(Lambchop)"
        },
        {
            "id": 1,
            "text": "If Lambchop plays outside, then she is either happy or feels fulfilled, but not both.",
            "fol": "p_7(Lambchop) \u2192 (p_6(Lambchop) \u2295 p_1(Lambchop))",
            "str_fol": "play_outside(Lambchop) \u2192 (be_happy(Lambchop) \u2295 feel_fulfilled(Lambchop))"
        },
        {
            "id": 0,
            "text": "If Lambchop tries new things and is creative, then she is happy.",
            "fol": "(p_5(Lambchop) \u2227 p_0(Lambchop)) \u2192 p_6(Lambchop)",
            "str_fol": "(try_new_things(Lambchop) \u2227 be_creative(Lambchop)) \u2192 be_happy(Lambchop)"
        }
    ],
    "context": [
        {
            "id": 3,
            "subject": "Lambchop",
            "text": "Lambchop does not grow strong.",
            "fol": "\u00acp_3(Lambchop)",
            "str_fol": "\u00acgrow_strong(Lambchop)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Lambchop",
            "text": "Lambchop does not stay healthy.",
            "fol": "\u00acp_4(Lambchop)",
            "str_fol": "\u00acstay_healthy(Lambchop)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Lambchop",
            "text": "Lambchop runs free.",
            "fol": "p_2(Lambchop)",
            "str_fol": "run_free(Lambchop)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Lambchop",
            "text": "Lambchop feels fulfilled.",
            "fol": "p_1(Lambchop)",
            "str_fol": "feel_fulfilled(Lambchop)",
            "negation": false
        },
        {
            "id": 0,
            "subject": "Lambchop",
            "text": "Lambchop is creative.",
            "fol": "p_0(Lambchop)",
            "str_fol": "be_creative(Lambchop)",
            "negation": false
        },
        {
            "id": 6,
            "text": "Every sheep that eats grass either grows strong or stays healthy (or both).",
            "fol": "\u2200x (p_11(x) \u2192 (p_3(x) \u2228 p_4(x)))",
            "str_fol": "\u2200x (eat_grass(x) \u2192 (grow_strong(x) \u2228 stay_healthy(x)))"
        },
        {
            "id": 5,
            "text": "If Lambchop chases butterflies, then she runs free and eats grass.",
            "fol": "p_10(Lambchop) \u2192 (p_2(Lambchop) \u2227 p_11(Lambchop))",
            "str_fol": "chase_butterflies(Lambchop) \u2192 (run_free(Lambchop) \u2227 eat_grass(Lambchop))"
        },
        {
            "id": 4,
            "text": "Lambchop either chases butterflies or watches clouds, but not both.",
            "fol": "p_10(Lambchop) \u2295 p_9(Lambchop)",
            "str_fol": "chase_butterflies(Lambchop) \u2295 watch_clouds(Lambchop)"
        },
        {
            "id": 3,
            "text": "If Lambchop watches clouds, then she loves nature.",
            "fol": "p_9(Lambchop) \u2192 p_8(Lambchop)",
            "str_fol": "watch_clouds(Lambchop) \u2192 love_nature(Lambchop)"
        },
        {
            "id": 2,
            "text": "If Lambchop loves nature, then she will play outside.",
            "fol": "p_8(Lambchop) \u2192 p_7(Lambchop)",
            "str_fol": "love_nature(Lambchop) \u2192 play_outside(Lambchop)"
        },
        {
            "id": 1,
            "text": "If Lambchop plays outside, then she is either happy or feels fulfilled, but not both.",
            "fol": "p_7(Lambchop) \u2192 (p_6(Lambchop) \u2295 p_1(Lambchop))",
            "str_fol": "play_outside(Lambchop) \u2192 (be_happy(Lambchop) \u2295 feel_fulfilled(Lambchop))"
        },
        {
            "id": 0,
            "text": "If Lambchop tries new things and is creative, then she is happy.",
            "fol": "(p_5(Lambchop) \u2227 p_0(Lambchop)) \u2192 p_6(Lambchop)",
            "str_fol": "(try_new_things(Lambchop) \u2227 be_creative(Lambchop)) \u2192 be_happy(Lambchop)"
        }
    ],
    "context_fol": "\u00acp_3(Lambchop)\n\u00acp_4(Lambchop)\np_2(Lambchop)\np_1(Lambchop)\np_0(Lambchop)\n\u2200x (p_11(x) \u2192 (p_3(x) \u2228 p_4(x)))\np_10(Lambchop) \u2192 (p_2(Lambchop) \u2227 p_11(Lambchop))\np_10(Lambchop) \u2295 p_9(Lambchop)\np_9(Lambchop) \u2192 p_8(Lambchop)\np_8(Lambchop) \u2192 p_7(Lambchop)\np_7(Lambchop) \u2192 (p_6(Lambchop) \u2295 p_1(Lambchop))\n(p_5(Lambchop) \u2227 p_0(Lambchop)) \u2192 p_6(Lambchop)",
    "conclusion": {
        "id": 11,
        "subject": "Lambchop",
        "text": "Lambchop does not try new things.",
        "fol": "\u00acp_5(Lambchop)",
        "str_fol": "\u00actry_new_things(Lambchop)",
        "negation": true
    },
    "initial_answer": "True",
    "initial_goal": "\u00acp_5(Lambchop)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 3,
                    "subject": "Lambchop",
                    "text": "Lambchop does not grow strong.",
                    "fol": "\u00acp_3(Lambchop)",
                    "str_fol": "\u00acgrow_strong(Lambchop)",
                    "negation": true
                },
                {
                    "id": 4,
                    "subject": "Lambchop",
                    "text": "Lambchop does not stay healthy.",
                    "fol": "\u00acp_4(Lambchop)",
                    "str_fol": "\u00acstay_healthy(Lambchop)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 6,
                    "text": "Every sheep that eats grass either grows strong or stays healthy (or both).",
                    "fol": "\u2200x (p_11(x) \u2192 (p_3(x) \u2228 p_4(x)))",
                    "str_fol": "\u2200x (eat_grass(x) \u2192 (grow_strong(x) \u2228 stay_healthy(x)))"
                }
            ],
            "conclusion": {
                "id": 5,
                "subject": "Lambchop",
                "text": "Lambchop does not eat grass.",
                "fol": "\u00acp_11(Lambchop)",
                "str_fol": "\u00aceat_grass(Lambchop)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 2,
                    "subject": "Lambchop",
                    "text": "Lambchop runs free.",
                    "fol": "p_2(Lambchop)",
                    "str_fol": "run_free(Lambchop)",
                    "negation": false
                },
                {
                    "id": 5,
                    "subject": "Lambchop",
                    "text": "Lambchop does not eat grass.",
                    "fol": "\u00acp_11(Lambchop)",
                    "str_fol": "\u00aceat_grass(Lambchop)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "If Lambchop chases butterflies, then she runs free and eats grass.",
                    "fol": "p_10(Lambchop) \u2192 (p_2(Lambchop) \u2227 p_11(Lambchop))",
                    "str_fol": "chase_butterflies(Lambchop) \u2192 (run_free(Lambchop) \u2227 eat_grass(Lambchop))"
                }
            ],
            "conclusion": {
                "id": 6,
                "subject": "Lambchop",
                "text": "Lambchop does not chase butterflies.",
                "fol": "\u00acp_10(Lambchop)",
                "str_fol": "\u00acchase_butterflies(Lambchop)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 6,
                    "subject": "Lambchop",
                    "text": "Lambchop does not chase butterflies.",
                    "fol": "\u00acp_10(Lambchop)",
                    "str_fol": "\u00acchase_butterflies(Lambchop)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "Lambchop either chases butterflies or watches clouds, but not both.",
                    "fol": "p_10(Lambchop) \u2295 p_9(Lambchop)",
                    "str_fol": "chase_butterflies(Lambchop) \u2295 watch_clouds(Lambchop)"
                }
            ],
            "conclusion": {
                "id": 7,
                "subject": "Lambchop",
                "text": "Lambchop watches clouds.",
                "fol": "p_9(Lambchop)",
                "str_fol": "watch_clouds(Lambchop)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 7,
                    "subject": "Lambchop",
                    "text": "Lambchop watches clouds.",
                    "fol": "p_9(Lambchop)",
                    "str_fol": "watch_clouds(Lambchop)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "If Lambchop watches clouds, then she loves nature.",
                    "fol": "p_9(Lambchop) \u2192 p_8(Lambchop)",
                    "str_fol": "watch_clouds(Lambchop) \u2192 love_nature(Lambchop)"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Lambchop",
                "text": "Lambchop loves nature.",
                "fol": "p_8(Lambchop)",
                "str_fol": "love_nature(Lambchop)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 8,
                    "subject": "Lambchop",
                    "text": "Lambchop loves nature.",
                    "fol": "p_8(Lambchop)",
                    "str_fol": "love_nature(Lambchop)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "If Lambchop loves nature, then she will play outside.",
                    "fol": "p_8(Lambchop) \u2192 p_7(Lambchop)",
                    "str_fol": "love_nature(Lambchop) \u2192 play_outside(Lambchop)"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Lambchop",
                "text": "Lambchop plays outside.",
                "fol": "p_7(Lambchop)",
                "str_fol": "play_outside(Lambchop)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 9,
                    "subject": "Lambchop",
                    "text": "Lambchop plays outside.",
                    "fol": "p_7(Lambchop)",
                    "str_fol": "play_outside(Lambchop)",
                    "negation": false
                },
                {
                    "id": 1,
                    "subject": "Lambchop",
                    "text": "Lambchop feels fulfilled.",
                    "fol": "p_1(Lambchop)",
                    "str_fol": "feel_fulfilled(Lambchop)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "If Lambchop plays outside, then she is either happy or feels fulfilled, but not both.",
                    "fol": "p_7(Lambchop) \u2192 (p_6(Lambchop) \u2295 p_1(Lambchop))",
                    "str_fol": "play_outside(Lambchop) \u2192 (be_happy(Lambchop) \u2295 feel_fulfilled(Lambchop))"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Lambchop",
                "text": "Lambchop is not happy.",
                "fol": "\u00acp_6(Lambchop)",
                "str_fol": "\u00acbe_happy(Lambchop)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 0,
                    "subject": "Lambchop",
                    "text": "Lambchop is creative.",
                    "fol": "p_0(Lambchop)",
                    "str_fol": "be_creative(Lambchop)",
                    "negation": false
                },
                {
                    "id": 10,
                    "subject": "Lambchop",
                    "text": "Lambchop is not happy.",
                    "fol": "\u00acp_6(Lambchop)",
                    "str_fol": "\u00acbe_happy(Lambchop)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "If Lambchop tries new things and is creative, then she is happy.",
                    "fol": "(p_5(Lambchop) \u2227 p_0(Lambchop)) \u2192 p_6(Lambchop)",
                    "str_fol": "(try_new_things(Lambchop) \u2227 be_creative(Lambchop)) \u2192 be_happy(Lambchop)"
                }
            ],
            "conclusion": {
                "id": 11,
                "subject": "Lambchop",
                "text": "Lambchop does not try new things.",
                "fol": "\u00acp_5(Lambchop)",
                "str_fol": "\u00actry_new_things(Lambchop)",
                "negation": true
            }
        }
    ],
    "proof_trace": "1 (all x (p_11(x) -> p_3(x) | p_4(x))).  [assumption].\n2 p_10(Lambchop) -> p_2(Lambchop) & p_11(Lambchop).  [assumption].\n3 -(p_10(Lambchop) <-> p_9(Lambchop)).  [assumption].\n4 p_9(Lambchop) -> p_8(Lambchop).  [assumption].\n5 p_8(Lambchop) -> p_7(Lambchop).  [assumption].\n6 p_7(Lambchop) -> -(p_6(Lambchop) <-> p_1(Lambchop)).  [assumption].\n7 p_5(Lambchop) & p_0(Lambchop) -> p_6(Lambchop).  [assumption].\n8 -p_5(Lambchop).  [goal].\n9 -p_11(x) | p_3(x) | p_4(x).  [clausify(1)].\n10 -p_3(Lambchop).  [assumption].\n11 -p_11(Lambchop) | p_4(Lambchop).  [resolve(9,b,10,a)].\n12 -p_4(Lambchop).  [assumption].\n13 -p_7(Lambchop) | -p_6(Lambchop) | -p_1(Lambchop).  [clausify(6)].\n14 p_1(Lambchop).  [assumption].\n16 -p_5(Lambchop) | -p_0(Lambchop) | p_6(Lambchop).  [clausify(7)].\n17 p_0(Lambchop).  [assumption].\n18 p_10(Lambchop) | p_9(Lambchop).  [clausify(3)].\n19 -p_10(Lambchop) | p_11(Lambchop).  [clausify(2)].\n21 p_9(Lambchop) | p_11(Lambchop).  [resolve(18,a,19,a)].\n22 -p_9(Lambchop) | p_8(Lambchop).  [clausify(4)].\n23 p_11(Lambchop) | p_8(Lambchop).  [resolve(21,a,22,a)].\n24 -p_8(Lambchop) | p_7(Lambchop).  [clausify(5)].\n25 -p_5(Lambchop) | p_6(Lambchop).  [resolve(16,b,17,a)].\n26 p_5(Lambchop).  [deny(8)].\n27 p_11(Lambchop) | p_7(Lambchop).  [resolve(23,b,24,a)].\n28 -p_11(Lambchop).  [resolve(11,b,12,a)].\n29 p_7(Lambchop).  [resolve(27,a,28,a)].\n30 -p_7(Lambchop) | -p_6(Lambchop).  [resolve(13,c,14,a)].\n31 -p_6(Lambchop).  [resolve(29,a,30,a)].\n32 p_6(Lambchop).  [resolve(25,a,26,a)].\n33 $F.  [resolve(31,a,32,a)].",
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_3(Lambchop)\n\u00acp_4(Lambchop)\np_2(Lambchop)\n\u00acp_1(Lambchop)\np_0(Lambchop)\n\u2200x (p_11(x) \u2192 (p_3(x) \u2228 p_4(x)))\np_10(Lambchop) \u2192 (p_2(Lambchop) \u2227 p_11(Lambchop))\np_10(Lambchop) \u2295 p_9(Lambchop)\np_9(Lambchop) \u2192 p_8(Lambchop)\np_8(Lambchop) \u2192 p_7(Lambchop)\np_7(Lambchop) \u2192 (p_6(Lambchop) \u2295 p_1(Lambchop))\n(p_5(Lambchop) \u2227 p_0(Lambchop)) \u2192 p_6(Lambchop)\np_2(Lambchop) \u2192 p_5(Lambchop)",
            "Initial Goal": "\u00acp_5(Lambchop)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_3(Lambchop).",
                    "-p_4(Lambchop).",
                    "p_2(Lambchop).",
                    "-p_1(Lambchop).",
                    "p_0(Lambchop).",
                    "all x (p_11(x) -> (p_3(x) | p_4(x))).",
                    "p_10(Lambchop) -> (p_2(Lambchop) & p_11(Lambchop)).",
                    "-(p_10(Lambchop) <-> p_9(Lambchop)).",
                    "p_9(Lambchop) -> p_8(Lambchop).",
                    "p_8(Lambchop) -> p_7(Lambchop).",
                    "p_7(Lambchop) -> (-(p_6(Lambchop) <-> p_1(Lambchop))).",
                    "(p_5(Lambchop) & p_0(Lambchop)) -> p_6(Lambchop).",
                    "p_2(Lambchop) -> p_5(Lambchop)."
                ],
                "formulas(goals)": [
                    "p_5(Lambchop)."
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "p_1(Lambchop)"
                ],
                "removed_rules": [],
                "added_facts": [
                    "\u00acp_1(Lambchop)"
                ],
                "added_rules": [
                    "p_2(Lambchop) \u2192 p_5(Lambchop)"
                ]
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_3(Lambchop)\n\u00acp_4(Lambchop)\np_2(Lambchop)\n\u00acp_1(Lambchop)\np_0(Lambchop)\n\u2200x (p_11(x) \u2192 (p_3(x) \u2228 p_4(x)))\np_10(Lambchop) \u2192 (p_2(Lambchop) \u2227 p_11(Lambchop))\np_10(Lambchop) \u2295 p_9(Lambchop)\np_9(Lambchop) \u2192 p_8(Lambchop)\np_8(Lambchop) \u2192 p_7(Lambchop)\np_7(Lambchop) \u2192 (p_6(Lambchop) \u2295 p_1(Lambchop))\n(p_5(Lambchop) \u2227 p_0(Lambchop)) \u2192 p_6(Lambchop)\n\u00acp_11(Lambchop) \u2192 \u00acp_5(Lambchop)",
            "Initial Goal": "\u00acp_5(Lambchop)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_3(Lambchop)",
                    "-p_4(Lambchop)",
                    "p_2(Lambchop)",
                    "-p_1(Lambchop)",
                    "p_0(Lambchop)",
                    "all x (p_11(x) -> (p_3(x) | p_4(x)))",
                    "p_10(Lambchop) -> (p_2(Lambchop) & p_11(Lambchop))",
                    "-(p_10(Lambchop) <-> p_9(Lambchop))",
                    "p_9(Lambchop) -> p_8(Lambchop)",
                    "p_8(Lambchop) -> p_7(Lambchop)",
                    "p_7(Lambchop) -> (-(p_6(Lambchop) <-> p_1(Lambchop)))",
                    "(p_5(Lambchop) & p_0(Lambchop)) -> p_6(Lambchop)",
                    "-p_11(Lambchop) -> -p_5(Lambchop)"
                ],
                "formulas(goals)": [
                    "-p_5(Lambchop)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_2(Lambchop) \u2192 p_5(Lambchop)"
                ],
                "added_facts": [],
                "added_rules": [
                    "\u00acp_11(Lambchop) \u2192 \u00acp_5(Lambchop)"
                ]
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_3(Lambchop)\n\u00acp_4(Lambchop)\np_2(Lambchop)\n\u00acp_1(Lambchop)\np_0(Lambchop)\n\u2200x (p_11(x) \u2192 (p_3(x) \u2228 p_4(x)))\np_10(Lambchop) \u2192 (p_2(Lambchop) \u2227 p_11(Lambchop))\np_10(Lambchop) \u2295 p_9(Lambchop)\np_9(Lambchop) \u2192 p_8(Lambchop)\np_8(Lambchop) \u2192 p_7(Lambchop)\np_7(Lambchop) \u2192 (p_6(Lambchop) \u2295 p_1(Lambchop))\n(p_5(Lambchop) \u2227 p_0(Lambchop)) \u2192 p_6(Lambchop)\n\u00acp_11(Lambchop) \u2192 \u00acp_5(Lambchop)\np_10(Lambchop) \u2228 p_9(Lambchop)\np_7(Lambchop) \u2192 (p_6(Lambchop) \u2228 p_1(Lambchop))\np_10(Lambchop) \u2192 p_11(Lambchop)\np_9(Lambchop) \u2192 p_7(Lambchop)",
            "Initial Goal": "\u00acp_5(Lambchop)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_3(Lambchop).",
                    "-p_4(Lambchop).",
                    "p_2(Lambchop).",
                    "-p_1(Lambchop).",
                    "p_0(Lambchop).",
                    "all x (p_11(x) -> (p_3(x) | p_4(x))).",
                    "p_10(Lambchop) -> (p_2(Lambchop) & p_11(Lambchop)).",
                    "-(p_10(Lambchop) <-> p_9(Lambchop)).",
                    "p_9(Lambchop) -> p_8(Lambchop).",
                    "p_8(Lambchop) -> p_7(Lambchop).",
                    "p_7(Lambchop) -> (-(p_6(Lambchop) <-> p_1(Lambchop))).",
                    "(p_5(Lambchop) & p_0(Lambchop)) -> p_6(Lambchop).",
                    "-p_11(Lambchop) -> -p_5(Lambchop).",
                    "p_10(Lambchop) | p_9(Lambchop).",
                    "p_7(Lambchop) -> (p_6(Lambchop) | p_1(Lambchop)).",
                    "p_10(Lambchop) -> p_11(Lambchop).",
                    "p_9(Lambchop) -> p_7(Lambchop)."
                ],
                "formulas(goals)": [
                    "-p_5(Lambchop)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "p_10(Lambchop) \u2228 p_9(Lambchop)",
                    "p_7(Lambchop) \u2192 (p_6(Lambchop) \u2228 p_1(Lambchop))",
                    "p_10(Lambchop) \u2192 p_11(Lambchop)",
                    "p_9(Lambchop) \u2192 p_7(Lambchop)"
                ]
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_3(Lambchop)\n\u00acp_4(Lambchop)\np_2(Lambchop)\n\u00acp_1(Lambchop)\np_0(Lambchop)\n\u2200x (p_11(x) \u2192 (p_3(x) \u2228 p_4(x)))\np_10(Lambchop) \u2192 (p_2(Lambchop) \u2227 p_11(Lambchop))\n(p_10(Lambchop) \u2228 p_9(Lambchop)) \u2227 (\u00acp_10(Lambchop) \u2228 \u00acp_9(Lambchop))\np_9(Lambchop) \u2192 p_8(Lambchop)\np_8(Lambchop) \u2192 p_7(Lambchop)\np_7(Lambchop) \u2192 ((p_6(Lambchop) \u2228 p_1(Lambchop)) \u2227 (\u00acp_6(Lambchop) \u2228 \u00acp_1(Lambchop)))\n(p_5(Lambchop) \u2227 p_0(Lambchop)) \u2192 p_6(Lambchop)\n\u00acp_11(Lambchop) \u2192 \u00acp_5(Lambchop)\np_10(Lambchop) \u2228 p_9(Lambchop)\np_7(Lambchop) \u2192 (p_6(Lambchop) \u2228 p_1(Lambchop))\np_10(Lambchop) \u2192 p_11(Lambchop)\np_9(Lambchop) \u2192 p_7(Lambchop)\n\u00acp_11(Lambchop)\np_9(Lambchop)",
            "Initial Goal": "\u00acp_5(Lambchop)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_3(Lambchop)",
                    "-p_4(Lambchop)",
                    "p_2(Lambchop)",
                    "-p_1(Lambchop)",
                    "p_0(Lambchop)",
                    "all x (p_11(x) -> (p_3(x) | p_4(x)))",
                    "p_10(Lambchop) -> (p_2(Lambchop) & p_11(Lambchop))",
                    "(p_10(Lambchop) | p_9(Lambchop)) & (-p_10(Lambchop) | -p_9(Lambchop))",
                    "p_9(Lambchop) -> p_8(Lambchop)",
                    "p_8(Lambchop) -> p_7(Lambchop)",
                    "p_7(Lambchop) -> ((p_6(Lambchop) | p_1(Lambchop)) & (-p_6(Lambchop) | -p_1(Lambchop)))",
                    "(p_5(Lambchop) & p_0(Lambchop)) -> p_6(Lambchop)",
                    "-p_11(Lambchop) -> -p_5(Lambchop)",
                    "p_10(Lambchop) | p_9(Lambchop)",
                    "p_7(Lambchop) -> (p_6(Lambchop) | p_1(Lambchop))",
                    "p_10(Lambchop) -> p_11(Lambchop)",
                    "p_9(Lambchop) -> p_7(Lambchop)",
                    "-p_11(Lambchop)",
                    "p_9(Lambchop)"
                ],
                "formulas(goals)": [
                    "-p_5(Lambchop)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_10(Lambchop) \u2295 p_9(Lambchop)",
                    "p_7(Lambchop) \u2192 (p_6(Lambchop) \u2295 p_1(Lambchop))"
                ],
                "added_facts": [
                    "\u00acp_11(Lambchop)",
                    "p_9(Lambchop)"
                ],
                "added_rules": [
                    "(p_10(Lambchop) \u2228 p_9(Lambchop)) \u2227 (\u00acp_10(Lambchop) \u2228 \u00acp_9(Lambchop))",
                    "p_7(Lambchop) \u2192 ((p_6(Lambchop) \u2228 p_1(Lambchop)) \u2227 (\u00acp_6(Lambchop) \u2228 \u00acp_1(Lambchop)))"
                ]
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_3(Lambchop)\n\u00acp_4(Lambchop)\np_2(Lambchop)\n\u00acp_1(Lambchop)\np_0(Lambchop)\n\u2200x (p_11(x) \u2192 (p_3(x) \u2228 p_4(x)))\np_10(Lambchop) \u2192 (p_2(Lambchop) \u2227 p_11(Lambchop))\n(p_10(Lambchop) \u2228 p_9(Lambchop)) \u2227 (\u00acp_10(Lambchop) \u2228 \u00acp_9(Lambchop))\np_9(Lambchop) \u2192 p_8(Lambchop)\np_8(Lambchop) \u2192 p_7(Lambchop)\np_7(Lambchop) \u2192 ((p_6(Lambchop) \u2228 p_1(Lambchop)) \u2227 (\u00acp_6(Lambchop) \u2228 \u00acp_1(Lambchop)))\n(p_5(Lambchop) \u2227 p_0(Lambchop)) \u2192 p_6(Lambchop)\n\u00acp_11(Lambchop) \u2192 \u00acp_5(Lambchop)\np_10(Lambchop) \u2228 p_9(Lambchop)\np_7(Lambchop) \u2192 (p_6(Lambchop) \u2228 p_1(Lambchop))\np_10(Lambchop) \u2192 p_11(Lambchop)\np_9(Lambchop) \u2192 p_7(Lambchop)\n\u00acp_11(Lambchop)\np_9(Lambchop)\np_5(Lambchop) \u2192 p_11(Lambchop)",
            "Initial Goal": "\u00acp_5(Lambchop)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_3(Lambchop)",
                    "-p_4(Lambchop)",
                    "p_2(Lambchop)",
                    "-p_1(Lambchop)",
                    "p_0(Lambchop)",
                    "all x (p_11(x) -> (p_3(x) | p_4(x)))",
                    "p_10(Lambchop) -> (p_2(Lambchop) & p_11(Lambchop))",
                    "(p_10(Lambchop) | p_9(Lambchop)) & (-p_10(Lambchop) | -p_9(Lambchop))",
                    "p_9(Lambchop) -> p_8(Lambchop)",
                    "p_8(Lambchop) -> p_7(Lambchop)",
                    "p_7(Lambchop) -> ((p_6(Lambchop) | p_1(Lambchop)) & (-p_6(Lambchop) | -p_1(Lambchop)))",
                    "(p_5(Lambchop) & p_0(Lambchop)) -> p_6(Lambchop)",
                    "-p_11(Lambchop) -> -p_5(Lambchop)",
                    "p_10(Lambchop) | p_9(Lambchop)",
                    "p_7(Lambchop) -> (p_6(Lambchop) | p_1(Lambchop))",
                    "p_10(Lambchop) -> p_11(Lambchop)",
                    "p_9(Lambchop) -> p_7(Lambchop)",
                    "-p_11(Lambchop)",
                    "p_9(Lambchop)",
                    "p_5(Lambchop) -> p_11(Lambchop)"
                ],
                "formulas(goals)": [
                    "-p_5(Lambchop)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "p_5(Lambchop) \u2192 p_11(Lambchop)"
                ]
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_3(Lambchop)\n\u00acp_4(Lambchop)\np_2(Lambchop)\n\u00acp_1(Lambchop)\np_0(Lambchop)\n\u2200x (p_11(x) \u2192 (p_3(x) \u2228 p_4(x)))\np_10(Lambchop) \u2192 (p_2(Lambchop) \u2227 p_11(Lambchop))\n(p_10(Lambchop) \u2228 p_9(Lambchop)) \u2227 (\u00acp_10(Lambchop) \u2228 \u00acp_9(Lambchop))\np_9(Lambchop) \u2192 p_8(Lambchop)\np_8(Lambchop) \u2192 p_7(Lambchop)\np_7(Lambchop) \u2192 ((p_6(Lambchop) \u2228 p_1(Lambchop)) \u2227 (\u00acp_6(Lambchop) \u2228 \u00acp_1(Lambchop)))\n(p_5(Lambchop) \u2227 p_0(Lambchop)) \u2192 p_6(Lambchop)\n\u00acp_11(Lambchop) \u2192 \u00acp_5(Lambchop)\np_10(Lambchop) \u2228 p_9(Lambchop)\np_7(Lambchop) \u2192 (p_6(Lambchop) \u2228 p_1(Lambchop))\np_10(Lambchop) \u2192 p_11(Lambchop)\np_9(Lambchop) \u2192 p_7(Lambchop)\n\u00acp_11(Lambchop)\np_9(Lambchop)\np_5(Lambchop) \u2192 p_11(Lambchop)\np_8(Lambchop)\n\u00acp_10(Lambchop)\np_7(Lambchop)",
            "Initial Goal": "\u00acp_5(Lambchop)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_3(Lambchop)",
                    "-p_4(Lambchop)",
                    "p_2(Lambchop)",
                    "-p_1(Lambchop)",
                    "p_0(Lambchop)",
                    "all x (p_11(x) -> (p_3(x) | p_4(x)))",
                    "p_10(Lambchop) -> (p_2(Lambchop) & p_11(Lambchop))",
                    "(p_10(Lambchop) | p_9(Lambchop)) & (-p_10(Lambchop) | -p_9(Lambchop))",
                    "p_9(Lambchop) -> p_8(Lambchop)",
                    "p_8(Lambchop) -> p_7(Lambchop)",
                    "p_7(Lambchop) -> ((p_6(Lambchop) | p_1(Lambchop)) & (-p_6(Lambchop) | -p_1(Lambchop)))",
                    "(p_5(Lambchop) & p_0(Lambchop)) -> p_6(Lambchop)",
                    "-p_11(Lambchop) -> -p_5(Lambchop)",
                    "p_10(Lambchop) | p_9(Lambchop)",
                    "p_7(Lambchop) -> (p_6(Lambchop) | p_1(Lambchop))",
                    "p_10(Lambchop) -> p_11(Lambchop)",
                    "p_9(Lambchop) -> p_7(Lambchop)",
                    "-p_11(Lambchop)",
                    "p_9(Lambchop)",
                    "p_5(Lambchop) -> p_11(Lambchop)",
                    "p_8(Lambchop)",
                    "-p_10(Lambchop)",
                    "p_7(Lambchop)"
                ],
                "formulas(goals)": [
                    "-p_5(Lambchop)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_8(Lambchop)",
                    "\u00acp_10(Lambchop)",
                    "p_7(Lambchop)"
                ],
                "added_rules": []
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_3(Lambchop)\n\u00acp_4(Lambchop)\np_2(Lambchop)\n\u00acp_1(Lambchop)\np_0(Lambchop)\n\u2200x (p_11(x) \u2192 (p_3(x) \u2228 p_4(x)))\np_10(Lambchop) \u2192 (p_2(Lambchop) \u2227 p_11(Lambchop))\n(p_10(Lambchop) \u2228 p_9(Lambchop)) \u2227 (\u00acp_10(Lambchop) \u2228 \u00acp_9(Lambchop))\np_9(Lambchop) \u2192 p_8(Lambchop)\np_8(Lambchop) \u2192 p_7(Lambchop)\np_7(Lambchop) \u2192 ((p_6(Lambchop) \u2228 p_1(Lambchop)) \u2227 (\u00acp_6(Lambchop) \u2228 \u00acp_1(Lambchop)))\n(p_5(Lambchop) \u2227 p_0(Lambchop)) \u2192 p_6(Lambchop)\np_10(Lambchop) \u2228 p_9(Lambchop)\np_7(Lambchop) \u2192 (p_6(Lambchop) \u2228 p_1(Lambchop))\np_10(Lambchop) \u2192 p_11(Lambchop)\np_9(Lambchop) \u2192 p_7(Lambchop)\n\u00acp_11(Lambchop)\np_9(Lambchop)\np_5(Lambchop) \u2192 p_11(Lambchop)\np_8(Lambchop)\n\u00acp_10(Lambchop)\np_7(Lambchop)\np_5(Lambchop)",
            "Initial Goal": "\u00acp_5(Lambchop)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_3(Lambchop).",
                    "-p_4(Lambchop).",
                    "p_2(Lambchop).",
                    "-p_1(Lambchop).",
                    "p_0(Lambchop).",
                    "all x (p_11(x) -> (p_3(x) | p_4(x))).",
                    "p_10(Lambchop) -> (p_2(Lambchop) & p_11(Lambchop)).",
                    "(p_10(Lambchop) | p_9(Lambchop)) & (-p_10(Lambchop) | -p_9(Lambchop)).",
                    "p_9(Lambchop) -> p_8(Lambchop).",
                    "p_8(Lambchop) -> p_7(Lambchop).",
                    "p_7(Lambchop) -> ((p_6(Lambchop) | p_1(Lambchop)) & (-p_6(Lambchop) | -p_1(Lambchop))).",
                    "(p_5(Lambchop) & p_0(Lambchop)) -> p_6(Lambchop).",
                    "p_10(Lambchop) | p_9(Lambchop).",
                    "p_7(Lambchop) -> (p_6(Lambchop) | p_1(Lambchop)).",
                    "p_10(Lambchop) -> p_11(Lambchop).",
                    "p_9(Lambchop) -> p_7(Lambchop).",
                    "-p_11(Lambchop).",
                    "p_9(Lambchop).",
                    "p_5(Lambchop) -> p_11(Lambchop).",
                    "p_8(Lambchop).",
                    "-p_10(Lambchop).",
                    "p_7(Lambchop).",
                    "p_5(Lambchop)."
                ],
                "formulas(goals)": [
                    "-(-p_5(Lambchop))."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u00acp_11(Lambchop) \u2192 \u00acp_5(Lambchop)"
                ],
                "added_facts": [
                    "p_5(Lambchop)"
                ],
                "added_rules": []
            }
        }
    ]
}