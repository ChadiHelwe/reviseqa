{
    "background_story": "Gian was a young and ambitious journalist who had always been passionate about exposing injustices. He stumbled upon a story that would change his life: a large corporation was distributing its wealth inequitably among its employees, with the CEO earning hundreds of times more than the average worker. Gian dug deep, uncovering documents and conducting interviews that revealed the shocking truth. Despite facing intimidation and backlash from the corporation, Gian published his findings, sparking a national debate about income inequality. His fearless reporting led to widespread outrage and eventually, to reforms that addressed the inequitable distribution of wealth within the company. Gian's courage in the face of adversity earned him numerous awards and recognition, but more importantly, it brought about a fairer deal for thousands of workers who had been treated inequitably for far too long.",
    "predicates": [
        {
            "id": 0,
            "name": "makes_difference"
        },
        {
            "id": 1,
            "name": "earns_awards"
        },
        {
            "id": 2,
            "name": "writes_exposes"
        },
        {
            "id": 3,
            "name": "fights_oppression"
        },
        {
            "id": 4,
            "name": "supports_victims"
        },
        {
            "id": 5,
            "name": "fearless"
        },
        {
            "id": 6,
            "name": "influential"
        },
        {
            "id": 7,
            "name": "respected"
        },
        {
            "id": 8,
            "name": "speaks_truth"
        },
        {
            "id": 9,
            "name": "works_honestly"
        },
        {
            "id": 10,
            "name": "investigates_thoroughly"
        },
        {
            "id": 11,
            "name": "brings_justice"
        },
        {
            "id": 12,
            "name": "persistent"
        },
        {
            "id": 13,
            "name": "well_informed"
        },
        {
            "id": 14,
            "name": "pursues_justice"
        },
        {
            "id": 15,
            "name": "has_integrity"
        },
        {
            "id": 16,
            "name": "holds_power"
        },
        {
            "id": 17,
            "name": "acts_with_integrity"
        },
        {
            "id": 18,
            "name": "gathers_facts"
        },
        {
            "id": 19,
            "name": "seeks_truth"
        },
        {
            "id": 20,
            "name": "helps_others"
        }
    ],
    "subject_name": "Gian",
    "subject_category": "human",
    "keyword": "inequitably",
    "all_facts": [
        {
            "id": 0,
            "subject": "Gian",
            "text": "Gian does not make a difference.",
            "fol": "\u00acp_0(Gian)",
            "str_fol": "\u00acmakes_difference(Gian)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Gian",
            "text": "Gian does not earn awards.",
            "fol": "\u00acp_1(Gian)",
            "str_fol": "\u00acearns_awards(Gian)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Gian",
            "text": "Gian writes exposes.",
            "fol": "p_2(Gian)",
            "str_fol": "writes_exposes(Gian)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Gian",
            "text": "Gian fights oppression.",
            "fol": "p_3(Gian)",
            "str_fol": "fights_oppression(Gian)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Gian",
            "text": "Gian supports victims.",
            "fol": "p_4(Gian)",
            "str_fol": "supports_victims(Gian)",
            "negation": false
        },
        {
            "id": 5,
            "subject": "Gian",
            "text": "Gian does not bring justice.",
            "fol": "\u00acp_11(Gian)",
            "str_fol": "\u00acbrings_justice(Gian)",
            "negation": true
        },
        {
            "id": 6,
            "subject": "Gian",
            "text": "Gian investigates thoroughly.",
            "fol": "p_10(Gian)",
            "str_fol": "investigates_thoroughly(Gian)",
            "negation": false
        },
        {
            "id": 7,
            "subject": "Gian",
            "text": "Gian does not work honestly.",
            "fol": "\u00acp_9(Gian)",
            "str_fol": "\u00acworks_honestly(Gian)",
            "negation": true
        },
        {
            "id": 8,
            "subject": "Gian",
            "text": "Gian is not respected.",
            "fol": "\u00acp_7(Gian)",
            "str_fol": "\u00acrespected(Gian)",
            "negation": true
        },
        {
            "id": 9,
            "subject": "Gian",
            "text": "Gian is not influential.",
            "fol": "\u00acp_6(Gian)",
            "str_fol": "\u00acinfluential(Gian)",
            "negation": true
        },
        {
            "id": 10,
            "subject": "Gian",
            "text": "Gian is fearless.",
            "fol": "p_5(Gian)",
            "str_fol": "fearless(Gian)",
            "negation": false
        }
    ],
    "context_facts": [
        {
            "id": 3,
            "subject": "Gian",
            "text": "Gian fights oppression.",
            "fol": "p_3(Gian)",
            "str_fol": "fights_oppression(Gian)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Gian",
            "text": "Gian supports victims.",
            "fol": "p_4(Gian)",
            "str_fol": "supports_victims(Gian)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Gian",
            "text": "Gian writes exposes.",
            "fol": "p_2(Gian)",
            "str_fol": "writes_exposes(Gian)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Gian",
            "text": "Gian does not earn awards.",
            "fol": "\u00acp_1(Gian)",
            "str_fol": "\u00acearns_awards(Gian)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Gian",
            "text": "Gian does not make a difference.",
            "fol": "\u00acp_0(Gian)",
            "str_fol": "\u00acmakes_difference(Gian)",
            "negation": true
        }
    ],
    "context_rules": [
        {
            "id": 5,
            "text": "If Gian brings justice, then he either fights oppression or supports victims, but not both.",
            "fol": "p_11(Gian) \u2192 (p_3(Gian) \u2295 p_4(Gian))",
            "str_fol": "brings_justice(Gian) \u2192 (fights_oppression(Gian) \u2295 supports_victims(Gian))"
        },
        {
            "id": 4,
            "text": "If Gian either investigates thoroughly or writes exposes (but not both), then he brings justice.",
            "fol": "(p_10(Gian) \u2295 p_2(Gian)) \u2192 p_11(Gian)",
            "str_fol": "(investigates_thoroughly(Gian) \u2295 writes_exposes(Gian)) \u2192 brings_justice(Gian)"
        },
        {
            "id": 3,
            "text": "If Gian works honestly and investigates thoroughly, then he earns awards.",
            "fol": "(p_9(Gian) \u2227 p_10(Gian)) \u2192 p_1(Gian)",
            "str_fol": "(works_honestly(Gian) \u2227 investigates_thoroughly(Gian)) \u2192 earns_awards(Gian)"
        },
        {
            "id": 2,
            "text": "If Gian is respected, then he works honestly.",
            "fol": "p_7(Gian) \u2192 p_9(Gian)",
            "str_fol": "respected(Gian) \u2192 works_honestly(Gian)"
        },
        {
            "id": 1,
            "text": "Any person who is influential or speaks the truth can make a difference.",
            "fol": "\u2200x ((p_6(x) \u2228 p_8(x)) \u2192 p_0(x))",
            "str_fol": "\u2200x ((influential(x) \u2228 speaks_truth(x)) \u2192 makes_difference(x))"
        },
        {
            "id": 0,
            "text": "If Gian is either fearless or influential (but not both), then he is respected.",
            "fol": "(p_5(Gian) \u2295 p_6(Gian)) \u2192 p_7(Gian)",
            "str_fol": "(fearless(Gian) \u2295 influential(Gian)) \u2192 respected(Gian)"
        }
    ],
    "context": [
        {
            "id": 3,
            "subject": "Gian",
            "text": "Gian fights oppression.",
            "fol": "p_3(Gian)",
            "str_fol": "fights_oppression(Gian)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Gian",
            "text": "Gian supports victims.",
            "fol": "p_4(Gian)",
            "str_fol": "supports_victims(Gian)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Gian",
            "text": "Gian writes exposes.",
            "fol": "p_2(Gian)",
            "str_fol": "writes_exposes(Gian)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Gian",
            "text": "Gian does not earn awards.",
            "fol": "\u00acp_1(Gian)",
            "str_fol": "\u00acearns_awards(Gian)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Gian",
            "text": "Gian does not make a difference.",
            "fol": "\u00acp_0(Gian)",
            "str_fol": "\u00acmakes_difference(Gian)",
            "negation": true
        },
        {
            "id": 5,
            "text": "If Gian brings justice, then he either fights oppression or supports victims, but not both.",
            "fol": "p_11(Gian) \u2192 (p_3(Gian) \u2295 p_4(Gian))",
            "str_fol": "brings_justice(Gian) \u2192 (fights_oppression(Gian) \u2295 supports_victims(Gian))"
        },
        {
            "id": 4,
            "text": "If Gian either investigates thoroughly or writes exposes (but not both), then he brings justice.",
            "fol": "(p_10(Gian) \u2295 p_2(Gian)) \u2192 p_11(Gian)",
            "str_fol": "(investigates_thoroughly(Gian) \u2295 writes_exposes(Gian)) \u2192 brings_justice(Gian)"
        },
        {
            "id": 3,
            "text": "If Gian works honestly and investigates thoroughly, then he earns awards.",
            "fol": "(p_9(Gian) \u2227 p_10(Gian)) \u2192 p_1(Gian)",
            "str_fol": "(works_honestly(Gian) \u2227 investigates_thoroughly(Gian)) \u2192 earns_awards(Gian)"
        },
        {
            "id": 2,
            "text": "If Gian is respected, then he works honestly.",
            "fol": "p_7(Gian) \u2192 p_9(Gian)",
            "str_fol": "respected(Gian) \u2192 works_honestly(Gian)"
        },
        {
            "id": 1,
            "text": "Any person who is influential or speaks the truth can make a difference.",
            "fol": "\u2200x ((p_6(x) \u2228 p_8(x)) \u2192 p_0(x))",
            "str_fol": "\u2200x ((influential(x) \u2228 speaks_truth(x)) \u2192 makes_difference(x))"
        },
        {
            "id": 0,
            "text": "If Gian is either fearless or influential (but not both), then he is respected.",
            "fol": "(p_5(Gian) \u2295 p_6(Gian)) \u2192 p_7(Gian)",
            "str_fol": "(fearless(Gian) \u2295 influential(Gian)) \u2192 respected(Gian)"
        }
    ],
    "context_fol": "p_3(Gian)\np_4(Gian)\np_2(Gian)\n\u00acp_1(Gian)\n\u00acp_0(Gian)\np_11(Gian) \u2192 (p_3(Gian) \u2295 p_4(Gian))\n(p_10(Gian) \u2295 p_2(Gian)) \u2192 p_11(Gian)\n(p_9(Gian) \u2227 p_10(Gian)) \u2192 p_1(Gian)\np_7(Gian) \u2192 p_9(Gian)\n\u2200x ((p_6(x) \u2228 p_8(x)) \u2192 p_0(x))\n(p_5(Gian) \u2295 p_6(Gian)) \u2192 p_7(Gian)",
    "conclusion": {
        "id": 10,
        "subject": "Gian",
        "text": "Gian is fearless.",
        "fol": "p_5(Gian)",
        "str_fol": "fearless(Gian)",
        "negation": false
    },
    "initial_answer": "False",
    "initial_goal": "p_5(Gian)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 3,
                    "subject": "Gian",
                    "text": "Gian fights oppression.",
                    "fol": "p_3(Gian)",
                    "str_fol": "fights_oppression(Gian)",
                    "negation": false
                },
                {
                    "id": 4,
                    "subject": "Gian",
                    "text": "Gian supports victims.",
                    "fol": "p_4(Gian)",
                    "str_fol": "supports_victims(Gian)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "If Gian brings justice, then he either fights oppression or supports victims, but not both.",
                    "fol": "p_11(Gian) \u2192 (p_3(Gian) \u2295 p_4(Gian))",
                    "str_fol": "brings_justice(Gian) \u2192 (fights_oppression(Gian) \u2295 supports_victims(Gian))"
                }
            ],
            "conclusion": {
                "id": 5,
                "subject": "Gian",
                "text": "Gian does not bring justice.",
                "fol": "\u00acp_11(Gian)",
                "str_fol": "\u00acbrings_justice(Gian)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 2,
                    "subject": "Gian",
                    "text": "Gian writes exposes.",
                    "fol": "p_2(Gian)",
                    "str_fol": "writes_exposes(Gian)",
                    "negation": false
                },
                {
                    "id": 5,
                    "subject": "Gian",
                    "text": "Gian does not bring justice.",
                    "fol": "\u00acp_11(Gian)",
                    "str_fol": "\u00acbrings_justice(Gian)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "If Gian either investigates thoroughly or writes exposes (but not both), then he brings justice.",
                    "fol": "(p_10(Gian) \u2295 p_2(Gian)) \u2192 p_11(Gian)",
                    "str_fol": "(investigates_thoroughly(Gian) \u2295 writes_exposes(Gian)) \u2192 brings_justice(Gian)"
                }
            ],
            "conclusion": {
                "id": 6,
                "subject": "Gian",
                "text": "Gian investigates thoroughly.",
                "fol": "p_10(Gian)",
                "str_fol": "investigates_thoroughly(Gian)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 6,
                    "subject": "Gian",
                    "text": "Gian investigates thoroughly.",
                    "fol": "p_10(Gian)",
                    "str_fol": "investigates_thoroughly(Gian)",
                    "negation": false
                },
                {
                    "id": 1,
                    "subject": "Gian",
                    "text": "Gian does not earn awards.",
                    "fol": "\u00acp_1(Gian)",
                    "str_fol": "\u00acearns_awards(Gian)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "If Gian works honestly and investigates thoroughly, then he earns awards.",
                    "fol": "(p_9(Gian) \u2227 p_10(Gian)) \u2192 p_1(Gian)",
                    "str_fol": "(works_honestly(Gian) \u2227 investigates_thoroughly(Gian)) \u2192 earns_awards(Gian)"
                }
            ],
            "conclusion": {
                "id": 7,
                "subject": "Gian",
                "text": "Gian does not work honestly.",
                "fol": "\u00acp_9(Gian)",
                "str_fol": "\u00acworks_honestly(Gian)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 7,
                    "subject": "Gian",
                    "text": "Gian does not work honestly.",
                    "fol": "\u00acp_9(Gian)",
                    "str_fol": "\u00acworks_honestly(Gian)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "If Gian is respected, then he works honestly.",
                    "fol": "p_7(Gian) \u2192 p_9(Gian)",
                    "str_fol": "respected(Gian) \u2192 works_honestly(Gian)"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Gian",
                "text": "Gian is not respected.",
                "fol": "\u00acp_7(Gian)",
                "str_fol": "\u00acrespected(Gian)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 0,
                    "subject": "Gian",
                    "text": "Gian does not make a difference.",
                    "fol": "\u00acp_0(Gian)",
                    "str_fol": "\u00acmakes_difference(Gian)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "Any person who is influential or speaks the truth can make a difference.",
                    "fol": "\u2200x ((p_6(x) \u2228 p_8(x)) \u2192 p_0(x))",
                    "str_fol": "\u2200x ((influential(x) \u2228 speaks_truth(x)) \u2192 makes_difference(x))"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Gian",
                "text": "Gian is not influential.",
                "fol": "\u00acp_6(Gian)",
                "str_fol": "\u00acinfluential(Gian)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 9,
                    "subject": "Gian",
                    "text": "Gian is not influential.",
                    "fol": "\u00acp_6(Gian)",
                    "str_fol": "\u00acinfluential(Gian)",
                    "negation": true
                },
                {
                    "id": 8,
                    "subject": "Gian",
                    "text": "Gian is not respected.",
                    "fol": "\u00acp_7(Gian)",
                    "str_fol": "\u00acrespected(Gian)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "If Gian is either fearless or influential (but not both), then he is respected.",
                    "fol": "(p_5(Gian) \u2295 p_6(Gian)) \u2192 p_7(Gian)",
                    "str_fol": "(fearless(Gian) \u2295 influential(Gian)) \u2192 respected(Gian)"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Gian",
                "text": "Gian is fearless.",
                "fol": "p_5(Gian)",
                "str_fol": "fearless(Gian)",
                "negation": false
            }
        }
    ],
    "proof_trace": "1 p_11(Gian) -> -(p_3(Gian) <-> p_4(Gian)).  [assumption].\n2 -(p_10(Gian) <-> p_2(Gian)) -> p_11(Gian).  [assumption].\n3 p_9(Gian) & p_10(Gian) -> p_1(Gian).  [assumption].\n4 p_7(Gian) -> p_9(Gian).  [assumption].\n5 (all x (p_6(x) | p_8(x) -> p_0(x))).  [assumption].\n6 -(p_5(Gian) <-> p_6(Gian)) -> p_7(Gian).  [assumption].\n7 -p_5(Gian).  [goal].\n8 -p_11(Gian) | -p_3(Gian) | -p_4(Gian).  [clausify(1)].\n9 p_3(Gian).  [assumption].\n11 -p_11(Gian) | -p_4(Gian).  [resolve(8,b,9,a)].\n12 p_4(Gian).  [assumption].\n13 p_10(Gian) | -p_2(Gian) | p_11(Gian).  [clausify(2)].\n14 p_2(Gian).  [assumption].\n16 -p_9(Gian) | -p_10(Gian) | p_1(Gian).  [clausify(3)].\n17 -p_1(Gian).  [assumption].\n18 -p_6(x) | p_0(x).  [clausify(5)].\n19 -p_0(Gian).  [assumption].\n21 -p_5(Gian) | p_6(Gian) | p_7(Gian).  [clausify(6)].\n22 -p_7(Gian) | p_9(Gian).  [clausify(4)].\n24 -p_5(Gian) | p_6(Gian) | p_9(Gian).  [resolve(21,c,22,a)].\n25 p_5(Gian).  [deny(7)].\n26 p_10(Gian) | p_11(Gian).  [resolve(13,b,14,a)].\n27 -p_11(Gian).  [resolve(11,b,12,a)].\n28 p_6(Gian) | p_9(Gian).  [resolve(24,a,25,a)].\n29 -p_9(Gian) | -p_10(Gian).  [resolve(16,c,17,a)].\n30 p_6(Gian) | -p_10(Gian).  [resolve(28,b,29,a)].\n31 -p_6(Gian).  [resolve(18,b,19,a)].\n32 -p_10(Gian).  [resolve(30,a,31,a)].\n33 p_10(Gian).  [resolve(26,b,27,a)].\n34 $F.  [resolve(32,a,33,a)].",
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_3(Gian)\np_4(Gian)\np_2(Gian)\n\u00acp_1(Gian)\n\u00acp_0(Gian)\np_11(Gian) \u2192 (p_3(Gian) \u2295 p_4(Gian))\n(p_10(Gian) \u2295 p_2(Gian)) \u2192 p_11(Gian)\np_9(Gian) \u2192 (p_10(Gian) \u2192 p_1(Gian))\np_7(Gian) \u2192 p_9(Gian)\n\u2200x ((p_6(x) \u2228 p_8(x)) \u2192 p_0(x))\n(p_5(Gian) \u2295 p_6(Gian)) \u2192 p_7(Gian)\np_10(Gian)\n\u00acp_6(Gian)\np_3(Gian) \u2227 p_4(Gian)",
            "Initial Goal": "p_5(Gian)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_3(Gian)",
                    "p_4(Gian)",
                    "p_2(Gian)",
                    "-p_1(Gian)",
                    "-p_0(Gian)",
                    "p_11(Gian) -> -(p_3(Gian) <-> p_4(Gian))",
                    "(-(p_10(Gian) <-> p_2(Gian))) -> p_11(Gian)",
                    "p_9(Gian) -> (p_10(Gian) -> p_1(Gian))",
                    "p_7(Gian) -> p_9(Gian)",
                    "all x ((p_6(x) | p_8(x)) -> p_0(x))",
                    "(-(p_5(Gian) <-> p_6(Gian))) -> p_7(Gian)",
                    "p_10(Gian)",
                    "-p_6(Gian)",
                    "p_3(Gian) & p_4(Gian)"
                ],
                "formulas(goals)": [
                    "-p_5(Gian)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "(p_9(Gian) \u2227 p_10(Gian)) \u2192 p_1(Gian)"
                ],
                "added_facts": [
                    "p_10(Gian)",
                    "\u00acp_6(Gian)",
                    "p_3(Gian) \u2227 p_4(Gian)"
                ],
                "added_rules": [
                    "p_9(Gian) \u2192 (p_10(Gian) \u2192 p_1(Gian))"
                ]
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_3(Gian)\np_4(Gian)\np_2(Gian)\n\u00acp_1(Gian)\n\u00acp_0(Gian)\np_11(Gian) \u2192 (p_3(Gian) \u2295 p_4(Gian))\n(p_10(Gian) \u2295 p_2(Gian)) \u2192 p_11(Gian)\np_9(Gian) \u2192 (p_10(Gian) \u2192 p_1(Gian))\np_7(Gian) \u2192 p_9(Gian)\n\u2200x (p_8(x) \u2192 p_0(x))\n(p_5(Gian) \u2295 p_6(Gian)) \u2192 p_7(Gian)\np_10(Gian)\np_6(Gian)\np_3(Gian) \u2227 p_4(Gian)\np_6(Gian) \u2192 p_5(Gian)",
            "Initial Goal": "p_5(Gian)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_3(Gian)",
                    "p_4(Gian)",
                    "p_2(Gian)",
                    "-p_1(Gian)",
                    "-p_0(Gian)",
                    "p_11(Gian) -> (-(p_3(Gian) <-> p_4(Gian)))",
                    "(-(p_10(Gian) <-> p_2(Gian))) -> p_11(Gian)",
                    "p_9(Gian) -> (p_10(Gian) -> p_1(Gian))",
                    "p_7(Gian) -> p_9(Gian)",
                    "all x (p_8(x) -> p_0(x))",
                    "(-(p_5(Gian) <-> p_6(Gian))) -> p_7(Gian)",
                    "p_10(Gian)",
                    "p_6(Gian)",
                    "p_3(Gian) & p_4(Gian)",
                    "p_6(Gian) -> p_5(Gian)"
                ],
                "formulas(goals)": [
                    "p_5(Gian)"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "\u00acp_6(Gian)"
                ],
                "removed_rules": [
                    "\u2200x ((p_6(x) \u2228 p_8(x)) \u2192 p_0(x))"
                ],
                "added_facts": [
                    "p_6(Gian)"
                ],
                "added_rules": [
                    "\u2200x (p_8(x) \u2192 p_0(x))",
                    "p_6(Gian) \u2192 p_5(Gian)"
                ]
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_3(Gian)\np_4(Gian)\np_2(Gian)\n\u00acp_1(Gian)\n\u00acp_0(Gian)\np_11(Gian) \u2192 (p_3(Gian) \u2295 p_4(Gian))\n(p_10(Gian) \u2295 p_2(Gian)) \u2192 p_11(Gian)\np_9(Gian) \u2192 (p_10(Gian) \u2192 p_1(Gian))\np_7(Gian) \u2192 p_9(Gian)\n\u2200x (p_8(x) \u2192 p_0(x))\n(p_5(Gian) \u2295 p_6(Gian)) \u2192 p_7(Gian)\np_10(Gian)\n\u00acp_6(Gian)\np_3(Gian) \u2227 p_4(Gian)\n\u00acp_6(Gian) \u2192 \u00acp_5(Gian)",
            "Initial Goal": "p_5(Gian)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_3(Gian)",
                    "p_4(Gian)",
                    "p_2(Gian)",
                    "-p_1(Gian)",
                    "-p_0(Gian)",
                    "p_11(Gian) -> (-(p_3(Gian) <-> p_4(Gian)))",
                    "(-(p_10(Gian) <-> p_2(Gian))) -> p_11(Gian)",
                    "p_9(Gian) -> (p_10(Gian) -> p_1(Gian))",
                    "p_7(Gian) -> p_9(Gian)",
                    "all x (p_8(x) -> p_0(x))",
                    "(-(p_5(Gian) <-> p_6(Gian))) -> p_7(Gian)",
                    "p_10(Gian)",
                    "-p_6(Gian)",
                    "p_3(Gian) & p_4(Gian)",
                    "-p_6(Gian) -> -p_5(Gian)"
                ],
                "formulas(goals)": [
                    "-p_5(Gian)"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "p_6(Gian)"
                ],
                "removed_rules": [
                    "p_6(Gian) \u2192 p_5(Gian)"
                ],
                "added_facts": [
                    "\u00acp_6(Gian)"
                ],
                "added_rules": [
                    "\u00acp_6(Gian) \u2192 \u00acp_5(Gian)"
                ]
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_3(Gian)\np_4(Gian)\np_2(Gian)\n\u00acp_1(Gian)\n\u00acp_0(Gian)\np_11(Gian) \u2192 (p_3(Gian) \u2295 p_4(Gian))\n(p_10(Gian) \u2295 p_2(Gian)) \u2192 p_11(Gian)\np_9(Gian) \u2192 (p_10(Gian) \u2192 p_1(Gian))\np_7(Gian) \u2192 p_9(Gian)\n\u2200x (p_8(x) \u2192 p_0(x))\n(p_5(Gian) \u2295 p_6(Gian)) \u2192 p_7(Gian)\np_10(Gian)\n\u00acp_6(Gian)\np_3(Gian) \u2227 p_4(Gian)\np_2(Gian) \u2192 p_5(Gian)",
            "Initial Goal": "p_5(Gian)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_3(Gian).",
                    "p_4(Gian).",
                    "p_2(Gian).",
                    "-p_1(Gian).",
                    "-p_0(Gian).",
                    "p_11(Gian) -> (-(p_3(Gian) <-> p_4(Gian))).",
                    "(-(p_10(Gian) <-> p_2(Gian))) -> p_11(Gian).",
                    "p_9(Gian) -> (p_10(Gian) -> p_1(Gian)).",
                    "p_7(Gian) -> p_9(Gian).",
                    "all x (p_8(x) -> p_0(x)).",
                    "(-(p_5(Gian) <-> p_6(Gian))) -> p_7(Gian).",
                    "p_10(Gian).",
                    "-p_6(Gian).",
                    "p_3(Gian) & p_4(Gian).",
                    "p_2(Gian) -> p_5(Gian)."
                ],
                "formulas(goals)": [
                    "p_5(Gian)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u00acp_6(Gian) \u2192 \u00acp_5(Gian)"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_2(Gian) \u2192 p_5(Gian)"
                ]
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_3(Gian)\np_4(Gian)\np_2(Gian)\n\u00acp_1(Gian)\n\u00acp_0(Gian)\np_11(Gian) \u2192 (p_3(Gian) \u2295 p_4(Gian))\n(p_10(Gian) \u2295 p_2(Gian)) \u2227 p_0(Gian) \u2192 p_11(Gian)\np_9(Gian) \u2227 p_0(Gian) \u2192 (p_10(Gian) \u2192 p_1(Gian))\np_7(Gian) \u2192 p_9(Gian)\n\u2200x (p_8(x) \u2192 p_0(x))\n(p_5(Gian) \u2295 p_6(Gian)) \u2192 p_7(Gian)\np_10(Gian)\n\u00acp_6(Gian)\np_3(Gian) \u2227 p_4(Gian)\np_2(Gian) \u2192 p_5(Gian)",
            "Initial Goal": "p_5(Gian)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_3(Gian)",
                    "p_4(Gian)",
                    "p_2(Gian)",
                    "-p_1(Gian)",
                    "-p_0(Gian)",
                    "p_11(Gian) -> (-(p_3(Gian) <-> p_4(Gian)))",
                    "(-(p_10(Gian) <-> p_2(Gian))) & p_0(Gian) -> p_11(Gian)",
                    "p_9(Gian) & p_0(Gian) -> (p_10(Gian) -> p_1(Gian))",
                    "p_7(Gian) -> p_9(Gian)",
                    "all x (p_8(x) -> p_0(x))",
                    "(-(p_5(Gian) <-> p_6(Gian))) -> p_7(Gian)",
                    "p_10(Gian)",
                    "-p_6(Gian)",
                    "p_3(Gian) & p_4(Gian)",
                    "p_2(Gian) -> p_5(Gian)"
                ],
                "formulas(goals)": [
                    "p_5(Gian)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "(p_10(Gian) \u2295 p_2(Gian)) \u2192 p_11(Gian)",
                    "p_9(Gian) \u2192 (p_10(Gian) \u2192 p_1(Gian))"
                ],
                "added_facts": [],
                "added_rules": [
                    "(p_10(Gian) \u2295 p_2(Gian)) \u2227 p_0(Gian) \u2192 p_11(Gian)",
                    "p_9(Gian) \u2227 p_0(Gian) \u2192 (p_10(Gian) \u2192 p_1(Gian))"
                ]
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_3(Gian).\np_4(Gian).\np_2(Gian).\n\u00acp_1(Gian).\n\u00acp_0(Gian).\np_11(Gian) \u2192 (p_3(Gian) \u2295 p_4(Gian)).\n((p_10(Gian) \u2295 p_2(Gian)) \u2227 p_0(Gian)) \u2192 p_11(Gian).\n(p_9(Gian) \u2227 p_0(Gian)) \u2192 (p_10(Gian) \u2192 p_1(Gian)).\np_7(Gian) \u2192 p_9(Gian).\n\u2200x (p_8(x) \u2192 p_0(x)).\n(p_5(Gian) \u2295 p_6(Gian)) \u2192 p_7(Gian).\np_10(Gian).\n\u00acp_6(Gian).\np_3(Gian) \u2227 p_4(Gian).\n(p_3(Gian) \u2227 p_4(Gian)) \u2192 \u00acp_5(Gian).",
            "Initial Goal": "p_5(Gian)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_3(Gian).",
                    "p_4(Gian).",
                    "p_2(Gian).",
                    "-p_1(Gian).",
                    "-p_0(Gian).",
                    "p_11(Gian) -> (-(p_3(Gian) <-> p_4(Gian))).",
                    "((-(p_10(Gian) <-> p_2(Gian))) & p_0(Gian)) -> p_11(Gian).",
                    "(p_9(Gian) & p_0(Gian)) -> (p_10(Gian) -> p_1(Gian)).",
                    "p_7(Gian) -> p_9(Gian).",
                    "all x (p_8(x) -> p_0(x)).",
                    "(-(p_5(Gian) <-> p_6(Gian))) -> p_7(Gian).",
                    "p_10(Gian).",
                    "-p_6(Gian).",
                    "p_3(Gian) & p_4(Gian).",
                    "(p_3(Gian) & p_4(Gian)) -> -p_5(Gian)."
                ],
                "formulas(goals)": [
                    "-p_5(Gian)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_2(Gian) \u2192 p_5(Gian)"
                ],
                "added_facts": [],
                "added_rules": [
                    "(p_3(Gian) \u2227 p_4(Gian)) \u2192 \u00acp_5(Gian)"
                ]
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_3(Gian)\np_4(Gian)\np_2(Gian)\n\u00acp_1(Gian)\n\u00acp_0(Gian)\np_11(Gian) \u2192 (p_3(Gian) \u2295 p_4(Gian))\n((p_10(Gian) \u2295 p_2(Gian)) \u2227 p_0(Gian)) \u2192 p_11(Gian)\n(p_9(Gian) \u2227 p_0(Gian)) \u2192 (p_10(Gian) \u2192 p_1(Gian))\np_7(Gian) \u2192 p_9(Gian)\n\u2200x (p_8(x) \u2192 p_0(x))\n(p_5(Gian) \u2295 p_6(Gian)) \u2192 p_7(Gian)\np_10(Gian)\n\u00acp_6(Gian)\np_3(Gian) \u2227 p_4(Gian)\n(p_3(Gian) \u2227 p_4(Gian)) \u2192 \u00acp_5(Gian)\np_3(Gian) \u2228 p_4(Gian)\np_5(Gian) \u2192 p_7(Gian)\n\u00acp_9(Gian) \u2192 \u00acp_7(Gian)\n\u00acp_8(Gian)\np_10(Gian) \u2228 p_11(Gian)\n\u00acp_6(Gian) \u2228 p_5(Gian)\np_5(Gian) \u2192 (\u00acp_3(Gian) \u2228 \u00acp_4(Gian))",
            "Initial Goal": "p_5(Gian)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_3(Gian)",
                    "p_4(Gian)",
                    "p_2(Gian)",
                    "-p_1(Gian)",
                    "-p_0(Gian)",
                    "p_11(Gian) -> (-(p_3(Gian) <-> p_4(Gian)))",
                    "((-(p_10(Gian) <-> p_2(Gian))) & p_0(Gian)) -> p_11(Gian)",
                    "(p_9(Gian) & p_0(Gian)) -> (p_10(Gian) -> p_1(Gian))",
                    "p_7(Gian) -> p_9(Gian)",
                    "all x (p_8(x) -> p_0(x))",
                    "(-(p_5(Gian) <-> p_6(Gian))) -> p_7(Gian)",
                    "p_10(Gian)",
                    "-p_6(Gian)",
                    "p_3(Gian) & p_4(Gian)",
                    "(p_3(Gian) & p_4(Gian)) -> -p_5(Gian)",
                    "p_3(Gian) | p_4(Gian)",
                    "p_5(Gian) -> p_7(Gian)",
                    "-p_9(Gian) -> -p_7(Gian)",
                    "-p_8(Gian)",
                    "p_10(Gian) | p_11(Gian)",
                    "-p_6(Gian) | p_5(Gian)",
                    "p_5(Gian) -> (-p_3(Gian) | -p_4(Gian))"
                ],
                "formulas(goals)": [
                    "-p_5(Gian)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "\u00acp_8(Gian)"
                ],
                "added_rules": [
                    "p_3(Gian) \u2228 p_4(Gian)",
                    "p_5(Gian) \u2192 p_7(Gian)",
                    "\u00acp_9(Gian) \u2192 \u00acp_7(Gian)",
                    "p_10(Gian) \u2228 p_11(Gian)",
                    "\u00acp_6(Gian) \u2228 p_5(Gian)",
                    "p_5(Gian) \u2192 (\u00acp_3(Gian) \u2228 \u00acp_4(Gian))"
                ]
            }
        }
    ]
}