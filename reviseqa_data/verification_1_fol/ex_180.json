{
    "background_story": "Leilany was a unique specimen of the myoid muscle tissue, isolated and studied by a team of researchers in a state-of-the-art laboratory. This particular sample of myoid tissue, named after the researcher who first identified it, exhibited extraordinary regenerative properties. Leilany, as the specimen came to be known, was found to have the ability to repair and rebuild damaged muscle fibers at an unprecedented rate. The team, led by Dr. Rodriguez, spent months studying Leilany, unraveling the secrets of its myoid cells and their potential applications in human medicine. Their groundbreaking research opened new avenues for the treatment of muscular dystrophy and other degenerative muscle diseases, offering hope to countless patients worldwide.",
    "predicates": [
        {
            "id": 0,
            "name": "has_unique_cells"
        },
        {
            "id": 1,
            "name": "regenerates_tissue"
        },
        {
            "id": 2,
            "name": "is_valuable"
        },
        {
            "id": 3,
            "name": "adapts_quickly"
        },
        {
            "id": 4,
            "name": "enhances_treatment"
        },
        {
            "id": 5,
            "name": "exhibits_regenerative_properties"
        },
        {
            "id": 6,
            "name": "holds_medical_significance"
        },
        {
            "id": 7,
            "name": "contributes_to_scientific_breakthroughs"
        },
        {
            "id": 8,
            "name": "shows_promise"
        },
        {
            "id": 9,
            "name": "repairs_damage"
        },
        {
            "id": 10,
            "name": "aids_recovery"
        },
        {
            "id": 11,
            "name": "supports_healing"
        },
        {
            "id": 12,
            "name": "is_rare"
        },
        {
            "id": 13,
            "name": "has_potent_factors"
        },
        {
            "id": 14,
            "name": "replicates_fast"
        },
        {
            "id": 15,
            "name": "renews_fibers"
        },
        {
            "id": 16,
            "name": "grows_fast"
        },
        {
            "id": 17,
            "name": "is_resilient"
        },
        {
            "id": 18,
            "name": "grows_rapidly"
        },
        {
            "id": 19,
            "name": "responds_to_stimuli"
        }
    ],
    "subject_name": "Leilany",
    "subject_category": "biological specimen",
    "keyword": "myoid",
    "all_facts": [
        {
            "id": 0,
            "subject": "Leilany",
            "text": "Leilany does not have unique cells.",
            "fol": "\u00acp_0(Leilany)",
            "str_fol": "\u00achas_unique_cells(Leilany)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Leilany",
            "text": "Leilany regenerates tissue.",
            "fol": "p_1(Leilany)",
            "str_fol": "regenerates_tissue(Leilany)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Leilany",
            "text": "Leilany is not valuable.",
            "fol": "\u00acp_2(Leilany)",
            "str_fol": "\u00acis_valuable(Leilany)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Leilany",
            "text": "Leilany does not adapt quickly.",
            "fol": "\u00acp_3(Leilany)",
            "str_fol": "\u00acadapts_quickly(Leilany)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Leilany",
            "text": "Leilany does not enhance treatment.",
            "fol": "\u00acp_4(Leilany)",
            "str_fol": "\u00acenhances_treatment(Leilany)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Leilany",
            "text": "Leilany does not aid recovery.",
            "fol": "\u00acp_10(Leilany)",
            "str_fol": "\u00acaids_recovery(Leilany)",
            "negation": true
        },
        {
            "id": 6,
            "subject": "Leilany",
            "text": "Leilany does not support healing.",
            "fol": "\u00acp_11(Leilany)",
            "str_fol": "\u00acsupports_healing(Leilany)",
            "negation": true
        },
        {
            "id": 7,
            "subject": "Leilany",
            "text": "Leilany repairs damage.",
            "fol": "p_9(Leilany)",
            "str_fol": "repairs_damage(Leilany)",
            "negation": false
        },
        {
            "id": 8,
            "subject": "Leilany",
            "text": "Leilany does not show promise.",
            "fol": "\u00acp_8(Leilany)",
            "str_fol": "\u00acshows_promise(Leilany)",
            "negation": true
        },
        {
            "id": 9,
            "subject": "Leilany",
            "text": "Leilany exhibits regenerative properties.",
            "fol": "p_5(Leilany)",
            "str_fol": "exhibits_regenerative_properties(Leilany)",
            "negation": false
        },
        {
            "id": 10,
            "subject": "Leilany",
            "text": "Leilany contributes to scientific breakthroughs.",
            "fol": "p_7(Leilany)",
            "str_fol": "contributes_to_scientific_breakthroughs(Leilany)",
            "negation": false
        },
        {
            "id": 11,
            "subject": "Leilany",
            "text": "Leilany does not hold medical significance.",
            "fol": "\u00acp_6(Leilany)",
            "str_fol": "\u00acholds_medical_significance(Leilany)",
            "negation": true
        }
    ],
    "context_facts": [
        {
            "id": 3,
            "subject": "Leilany",
            "text": "Leilany does not adapt quickly.",
            "fol": "\u00acp_3(Leilany)",
            "str_fol": "\u00acadapts_quickly(Leilany)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Leilany",
            "text": "Leilany does not enhance treatment.",
            "fol": "\u00acp_4(Leilany)",
            "str_fol": "\u00acenhances_treatment(Leilany)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Leilany",
            "text": "Leilany is not valuable.",
            "fol": "\u00acp_2(Leilany)",
            "str_fol": "\u00acis_valuable(Leilany)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Leilany",
            "text": "Leilany regenerates tissue.",
            "fol": "p_1(Leilany)",
            "str_fol": "regenerates_tissue(Leilany)",
            "negation": false
        },
        {
            "id": 0,
            "subject": "Leilany",
            "text": "Leilany does not have unique cells.",
            "fol": "\u00acp_0(Leilany)",
            "str_fol": "\u00achas_unique_cells(Leilany)",
            "negation": true
        }
    ],
    "context_rules": [
        {
            "id": 6,
            "text": "Any biological specimen that aids recovery or adapts quickly can enhance treatment.",
            "fol": "\u2200x ((p_10(x) \u2228 p_3(x)) \u2192 p_4(x))",
            "str_fol": "\u2200x ((aids_recovery(x) \u2228 adapts_quickly(x)) \u2192 enhances_treatment(x))"
        },
        {
            "id": 5,
            "text": "Any biological specimen that supports healing is valuable.",
            "fol": "\u2200x (p_11(x) \u2192 p_2(x))",
            "str_fol": "\u2200x (supports_healing(x) \u2192 is_valuable(x))"
        },
        {
            "id": 4,
            "text": "If Leilany either regenerates tissue or repairs damage (but not both), then it supports healing.",
            "fol": "(p_1(Leilany) \u2295 p_9(Leilany)) \u2192 p_11(Leilany)",
            "str_fol": "(regenerates_tissue(Leilany) \u2295 repairs_damage(Leilany)) \u2192 supports_healing(Leilany)"
        },
        {
            "id": 3,
            "text": "For any biological specimen, if it repairs damage and shows promise, then it aids recovery.",
            "fol": "\u2200x ((p_9(x) \u2227 p_8(x)) \u2192 p_10(x))",
            "str_fol": "\u2200x ((repairs_damage(x) \u2227 shows_promise(x)) \u2192 aids_recovery(x))"
        },
        {
            "id": 2,
            "text": "Leilany either shows promise or exhibits regenerative properties.",
            "fol": "p_8(Leilany) \u2228 p_5(Leilany)",
            "str_fol": "shows_promise(Leilany) \u2228 exhibits_regenerative_properties(Leilany)"
        },
        {
            "id": 1,
            "text": "Leilany either has unique cells or contributes to scientific breakthroughs, but its unique cells are a key factor in its contribution to scientific breakthroughs.",
            "fol": "p_0(Leilany) \u2295 p_7(Leilany)",
            "str_fol": "has_unique_cells(Leilany) \u2295 contributes_to_scientific_breakthroughs(Leilany)"
        },
        {
            "id": 0,
            "text": "For all biological specimens, if a specimen exhibits regenerative properties, then it holds medical significance and contributes to scientific breakthroughs.",
            "fol": "\u2200x (p_5(x) \u2192 (p_6(x) \u2227 p_7(x)))",
            "str_fol": "\u2200x (exhibits_regenerative_properties(x) \u2192 (holds_medical_significance(x) \u2227 contributes_to_scientific_breakthroughs(x)))"
        }
    ],
    "context": [
        {
            "id": 3,
            "subject": "Leilany",
            "text": "Leilany does not adapt quickly.",
            "fol": "\u00acp_3(Leilany)",
            "str_fol": "\u00acadapts_quickly(Leilany)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Leilany",
            "text": "Leilany does not enhance treatment.",
            "fol": "\u00acp_4(Leilany)",
            "str_fol": "\u00acenhances_treatment(Leilany)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Leilany",
            "text": "Leilany is not valuable.",
            "fol": "\u00acp_2(Leilany)",
            "str_fol": "\u00acis_valuable(Leilany)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Leilany",
            "text": "Leilany regenerates tissue.",
            "fol": "p_1(Leilany)",
            "str_fol": "regenerates_tissue(Leilany)",
            "negation": false
        },
        {
            "id": 0,
            "subject": "Leilany",
            "text": "Leilany does not have unique cells.",
            "fol": "\u00acp_0(Leilany)",
            "str_fol": "\u00achas_unique_cells(Leilany)",
            "negation": true
        },
        {
            "id": 6,
            "text": "Any biological specimen that aids recovery or adapts quickly can enhance treatment.",
            "fol": "\u2200x ((p_10(x) \u2228 p_3(x)) \u2192 p_4(x))",
            "str_fol": "\u2200x ((aids_recovery(x) \u2228 adapts_quickly(x)) \u2192 enhances_treatment(x))"
        },
        {
            "id": 5,
            "text": "Any biological specimen that supports healing is valuable.",
            "fol": "\u2200x (p_11(x) \u2192 p_2(x))",
            "str_fol": "\u2200x (supports_healing(x) \u2192 is_valuable(x))"
        },
        {
            "id": 4,
            "text": "If Leilany either regenerates tissue or repairs damage (but not both), then it supports healing.",
            "fol": "(p_1(Leilany) \u2295 p_9(Leilany)) \u2192 p_11(Leilany)",
            "str_fol": "(regenerates_tissue(Leilany) \u2295 repairs_damage(Leilany)) \u2192 supports_healing(Leilany)"
        },
        {
            "id": 3,
            "text": "For any biological specimen, if it repairs damage and shows promise, then it aids recovery.",
            "fol": "\u2200x ((p_9(x) \u2227 p_8(x)) \u2192 p_10(x))",
            "str_fol": "\u2200x ((repairs_damage(x) \u2227 shows_promise(x)) \u2192 aids_recovery(x))"
        },
        {
            "id": 2,
            "text": "Leilany either shows promise or exhibits regenerative properties.",
            "fol": "p_8(Leilany) \u2228 p_5(Leilany)",
            "str_fol": "shows_promise(Leilany) \u2228 exhibits_regenerative_properties(Leilany)"
        },
        {
            "id": 1,
            "text": "Leilany either has unique cells or contributes to scientific breakthroughs, but its unique cells are a key factor in its contribution to scientific breakthroughs.",
            "fol": "p_0(Leilany) \u2295 p_7(Leilany)",
            "str_fol": "has_unique_cells(Leilany) \u2295 contributes_to_scientific_breakthroughs(Leilany)"
        },
        {
            "id": 0,
            "text": "For all biological specimens, if a specimen exhibits regenerative properties, then it holds medical significance and contributes to scientific breakthroughs.",
            "fol": "\u2200x (p_5(x) \u2192 (p_6(x) \u2227 p_7(x)))",
            "str_fol": "\u2200x (exhibits_regenerative_properties(x) \u2192 (holds_medical_significance(x) \u2227 contributes_to_scientific_breakthroughs(x)))"
        }
    ],
    "context_fol": "\u00acp_3(Leilany)\n\u00acp_4(Leilany)\n\u00acp_2(Leilany)\np_1(Leilany)\n\u00acp_0(Leilany)\n\u2200x ((p_10(x) \u2228 p_3(x)) \u2192 p_4(x))\n\u2200x (p_11(x) \u2192 p_2(x))\n(p_1(Leilany) \u2295 p_9(Leilany)) \u2192 p_11(Leilany)\n\u2200x ((p_9(x) \u2227 p_8(x)) \u2192 p_10(x))\np_8(Leilany) \u2228 p_5(Leilany)\np_0(Leilany) \u2295 p_7(Leilany)\n\u2200x (p_5(x) \u2192 (p_6(x) \u2227 p_7(x)))",
    "conclusion": {
        "id": 11,
        "subject": "Leilany",
        "text": "Leilany does not hold medical significance.",
        "fol": "\u00acp_6(Leilany)",
        "str_fol": "\u00acholds_medical_significance(Leilany)",
        "negation": true
    },
    "initial_answer": "False",
    "initial_goal": "\u00acp_6(Leilany)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 3,
                    "subject": "Leilany",
                    "text": "Leilany does not adapt quickly.",
                    "fol": "\u00acp_3(Leilany)",
                    "str_fol": "\u00acadapts_quickly(Leilany)",
                    "negation": true
                },
                {
                    "id": 4,
                    "subject": "Leilany",
                    "text": "Leilany does not enhance treatment.",
                    "fol": "\u00acp_4(Leilany)",
                    "str_fol": "\u00acenhances_treatment(Leilany)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 6,
                    "text": "Any biological specimen that aids recovery or adapts quickly can enhance treatment.",
                    "fol": "\u2200x ((p_10(x) \u2228 p_3(x)) \u2192 p_4(x))",
                    "str_fol": "\u2200x ((aids_recovery(x) \u2228 adapts_quickly(x)) \u2192 enhances_treatment(x))"
                }
            ],
            "conclusion": {
                "id": 5,
                "subject": "Leilany",
                "text": "Leilany does not aid recovery.",
                "fol": "\u00acp_10(Leilany)",
                "str_fol": "\u00acaids_recovery(Leilany)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 2,
                    "subject": "Leilany",
                    "text": "Leilany is not valuable.",
                    "fol": "\u00acp_2(Leilany)",
                    "str_fol": "\u00acis_valuable(Leilany)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "Any biological specimen that supports healing is valuable.",
                    "fol": "\u2200x (p_11(x) \u2192 p_2(x))",
                    "str_fol": "\u2200x (supports_healing(x) \u2192 is_valuable(x))"
                }
            ],
            "conclusion": {
                "id": 6,
                "subject": "Leilany",
                "text": "Leilany does not support healing.",
                "fol": "\u00acp_11(Leilany)",
                "str_fol": "\u00acsupports_healing(Leilany)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 1,
                    "subject": "Leilany",
                    "text": "Leilany regenerates tissue.",
                    "fol": "p_1(Leilany)",
                    "str_fol": "regenerates_tissue(Leilany)",
                    "negation": false
                },
                {
                    "id": 6,
                    "subject": "Leilany",
                    "text": "Leilany does not support healing.",
                    "fol": "\u00acp_11(Leilany)",
                    "str_fol": "\u00acsupports_healing(Leilany)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "If Leilany either regenerates tissue or repairs damage (but not both), then it supports healing.",
                    "fol": "(p_1(Leilany) \u2295 p_9(Leilany)) \u2192 p_11(Leilany)",
                    "str_fol": "(regenerates_tissue(Leilany) \u2295 repairs_damage(Leilany)) \u2192 supports_healing(Leilany)"
                }
            ],
            "conclusion": {
                "id": 7,
                "subject": "Leilany",
                "text": "Leilany repairs damage.",
                "fol": "p_9(Leilany)",
                "str_fol": "repairs_damage(Leilany)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 7,
                    "subject": "Leilany",
                    "text": "Leilany repairs damage.",
                    "fol": "p_9(Leilany)",
                    "str_fol": "repairs_damage(Leilany)",
                    "negation": false
                },
                {
                    "id": 5,
                    "subject": "Leilany",
                    "text": "Leilany does not aid recovery.",
                    "fol": "\u00acp_10(Leilany)",
                    "str_fol": "\u00acaids_recovery(Leilany)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "For any biological specimen, if it repairs damage and shows promise, then it aids recovery.",
                    "fol": "\u2200x ((p_9(x) \u2227 p_8(x)) \u2192 p_10(x))",
                    "str_fol": "\u2200x ((repairs_damage(x) \u2227 shows_promise(x)) \u2192 aids_recovery(x))"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Leilany",
                "text": "Leilany does not show promise.",
                "fol": "\u00acp_8(Leilany)",
                "str_fol": "\u00acshows_promise(Leilany)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 8,
                    "subject": "Leilany",
                    "text": "Leilany does not show promise.",
                    "fol": "\u00acp_8(Leilany)",
                    "str_fol": "\u00acshows_promise(Leilany)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "Leilany either shows promise or exhibits regenerative properties.",
                    "fol": "p_8(Leilany) \u2228 p_5(Leilany)",
                    "str_fol": "shows_promise(Leilany) \u2228 exhibits_regenerative_properties(Leilany)"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Leilany",
                "text": "Leilany exhibits regenerative properties.",
                "fol": "p_5(Leilany)",
                "str_fol": "exhibits_regenerative_properties(Leilany)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 0,
                    "subject": "Leilany",
                    "text": "Leilany does not have unique cells.",
                    "fol": "\u00acp_0(Leilany)",
                    "str_fol": "\u00achas_unique_cells(Leilany)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "Leilany either has unique cells or contributes to scientific breakthroughs, but its unique cells are a key factor in its contribution to scientific breakthroughs.",
                    "fol": "p_0(Leilany) \u2295 p_7(Leilany)",
                    "str_fol": "has_unique_cells(Leilany) \u2295 contributes_to_scientific_breakthroughs(Leilany)"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Leilany",
                "text": "Leilany contributes to scientific breakthroughs.",
                "fol": "p_7(Leilany)",
                "str_fol": "contributes_to_scientific_breakthroughs(Leilany)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 9,
                    "subject": "Leilany",
                    "text": "Leilany exhibits regenerative properties.",
                    "fol": "p_5(Leilany)",
                    "str_fol": "exhibits_regenerative_properties(Leilany)",
                    "negation": false
                },
                {
                    "id": 10,
                    "subject": "Leilany",
                    "text": "Leilany contributes to scientific breakthroughs.",
                    "fol": "p_7(Leilany)",
                    "str_fol": "contributes_to_scientific_breakthroughs(Leilany)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "For all biological specimens, if a specimen exhibits regenerative properties, then it holds medical significance and contributes to scientific breakthroughs.",
                    "fol": "\u2200x (p_5(x) \u2192 (p_6(x) \u2227 p_7(x)))",
                    "str_fol": "\u2200x (exhibits_regenerative_properties(x) \u2192 (holds_medical_significance(x) \u2227 contributes_to_scientific_breakthroughs(x)))"
                }
            ],
            "conclusion": {
                "id": 11,
                "subject": "Leilany",
                "text": "Leilany does not hold medical significance.",
                "fol": "\u00acp_6(Leilany)",
                "str_fol": "\u00acholds_medical_significance(Leilany)",
                "negation": true
            }
        }
    ],
    "proof_trace": "1 (all x (p_10(x) | p_3(x) -> p_4(x))).  [assumption].\n2 (all x (p_11(x) -> p_2(x))).  [assumption].\n3 -(p_1(Leilany) <-> p_9(Leilany)) -> p_11(Leilany).  [assumption].\n4 (all x (p_9(x) & p_8(x) -> p_10(x))).  [assumption].\n6 (all x (p_5(x) -> p_6(x) & p_7(x))).  [assumption].\n7 --p_6(Leilany).  [goal].\n8 -p_10(x) | p_4(x).  [clausify(1)].\n9 -p_4(Leilany).  [assumption].\n10 -p_11(x) | p_2(x).  [clausify(2)].\n11 -p_2(Leilany).  [assumption].\n12 -p_1(Leilany) | p_9(Leilany) | p_11(Leilany).  [clausify(3)].\n13 p_1(Leilany).  [assumption].\n18 p_9(Leilany) | p_11(Leilany).  [resolve(12,a,13,a)].\n19 -p_9(x) | -p_8(x) | p_10(x).  [clausify(4)].\n20 p_11(Leilany) | -p_8(Leilany) | p_10(Leilany).  [resolve(18,a,19,a)].\n21 p_8(Leilany) | p_5(Leilany).  [assumption].\n22 p_11(Leilany) | p_10(Leilany) | p_5(Leilany).  [resolve(20,b,21,a)].\n23 -p_5(x) | p_6(x).  [clausify(6)].\n25 p_11(Leilany) | p_10(Leilany) | p_6(Leilany).  [resolve(22,c,23,a)].\n26 -p_6(Leilany).  [deny(7)].\n28 -p_10(Leilany).  [resolve(8,b,9,a)].\n29 p_11(Leilany) | p_10(Leilany).  [resolve(25,c,26,a)].\n31 -p_11(Leilany).  [resolve(10,b,11,a)].\n32 p_11(Leilany).  [resolve(29,b,28,a)].\n33 $F.  [resolve(32,a,31,a)].",
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_3(Leilany)\n\u00acp_4(Leilany)\n\u00acp_2(Leilany)\np_1(Leilany)\n\u00acp_0(Leilany)\n\u2200x ((p_10(x) \u2228 p_3(x)) \u2192 p_4(x))\n\u2200x (p_11(x) \u2192 p_2(x))\n(p_1(Leilany) \u2295 p_9(Leilany)) \u2192 p_11(Leilany)\n\u2200x ((p_9(x) \u2227 p_8(x)) \u2192 p_10(x))\np_8(Leilany) \u2228 p_5(Leilany)\n(p_0(Leilany) \u2228 p_7(Leilany)) \u2227 (\u00acp_0(Leilany) \u2228 \u00acp_7(Leilany))\n\u2200x ((p_5(x) \u2192 p_6(x)) \u2227 (p_5(x) \u2192 p_7(x)))\np_7(Leilany)",
            "Initial Goal": "\u00acp_6(Leilany)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "\u00acp_3(Leilany)",
                    "\u00acp_4(Leilany)",
                    "\u00acp_2(Leilany)",
                    "p_1(Leilany)",
                    "\u00acp_0(Leilany)",
                    "all x ((p_10(x) | p_3(x)) -> p_4(x))",
                    "all x (p_11(x) -> p_2(x))",
                    "(-(p_1(Leilany) <-> p_9(Leilany))) -> p_11(Leilany)",
                    "all x ((p_9(x) & p_8(x)) -> p_10(x))",
                    "p_8(Leilany) | p_5(Leilany)",
                    "(p_0(Leilany) | p_7(Leilany)) & (\u00acp_0(Leilany) | \u00acp_7(Leilany))",
                    "all x ((p_5(x) -> p_6(x)) & (p_5(x) -> p_7(x)))",
                    "p_7(Leilany)"
                ],
                "formulas(goals)": [
                    "p_6(Leilany)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u2200x (p_5(x) \u2192 (p_6(x) \u2227 p_7(x)))"
                ],
                "added_facts": [
                    "p_7(Leilany)"
                ],
                "added_rules": [
                    "\u2200x ((p_5(x) \u2192 p_6(x)) \u2227 (p_5(x) \u2192 p_7(x)))",
                    "(p_0(Leilany) \u2228 p_7(Leilany)) \u2227 (\u00acp_0(Leilany) \u2228 \u00acp_7(Leilany))"
                ]
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_3(Leilany)\n\u00acp_4(Leilany)\n\u00acp_2(Leilany)\np_1(Leilany)\n\u00acp_0(Leilany)\n\u2200x ((p_10(x) \u2228 p_3(x)) \u2192 p_4(x))\n\u2200x (p_11(x) \u2192 p_2(x))\n(\u00acp_9(Leilany)) \u2192 p_11(Leilany)\n\u2200x ((p_9(x) \u2227 p_8(x)) \u2192 p_10(x))\np_8(Leilany) \u2228 p_5(Leilany)\n(p_0(Leilany) \u2228 p_7(Leilany)) \u2227 (\u00acp_0(Leilany) \u2228 \u00acp_7(Leilany))\n\u2200x ((p_5(x) \u2192 p_6(x)) \u2227 (p_5(x) \u2192 p_7(x)))\np_7(Leilany)\np_9(Leilany)\n\u00acp_8(Leilany)\np_5(Leilany)",
            "Initial Goal": "\u00acp_6(Leilany)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_3(Leilany)",
                    "-p_4(Leilany)",
                    "-p_2(Leilany)",
                    "p_1(Leilany)",
                    "-p_0(Leilany)",
                    "all x (-(p_10(x) | p_3(x)) | p_4(x))",
                    "all x (-p_11(x) | p_2(x))",
                    "(-p_9(Leilany)) -> p_11(Leilany)",
                    "all x (-(p_9(x) & p_8(x)) | p_10(x))",
                    "p_8(Leilany) | p_5(Leilany)",
                    "(p_0(Leilany) | p_7(Leilany)) & (-p_0(Leilany) | -p_7(Leilany))",
                    "all x ((-p_5(x) | p_6(x)) & (-p_5(x) | p_7(x)))",
                    "p_7(Leilany)",
                    "p_9(Leilany)",
                    "-p_8(Leilany)",
                    "p_5(Leilany)"
                ],
                "formulas(goals)": [
                    "--p_6(Leilany)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_9(Leilany)",
                    "\u00acp_8(Leilany)",
                    "p_5(Leilany)"
                ],
                "added_rules": []
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_3(Leilany)\n\u00acp_4(Leilany)\n\u00acp_2(Leilany)\np_1(Leilany)\n\u00acp_0(Leilany)\n\u2200x ((p_10(x) \u2228 p_3(x)) \u2192 p_4(x))\n\u2200x (p_11(x) \u2192 p_2(x))\n(\u00acp_9(Leilany)) \u2192 p_11(Leilany)\n\u2200x ((p_9(x) \u2227 p_8(x)) \u2192 p_10(x))\np_8(Leilany) \u2228 p_5(Leilany)\n(p_0(Leilany) \u2228 p_7(Leilany)) \u2227 (\u00acp_0(Leilany) \u2228 \u00acp_7(Leilany))\n\u2200x ((p_5(x) \u2192 p_6(x)) \u2227 (p_5(x) \u2192 p_7(x)))\np_7(Leilany)\np_9(Leilany)\n\u00acp_8(Leilany)\np_5(Leilany)\n\u2200x (p_5(x) \u2192 (p_6(x) \u2227 p_7(x)))",
            "Initial Goal": "\u00acp_6(Leilany)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_3(Leilany)",
                    "-p_4(Leilany)",
                    "-p_2(Leilany)",
                    "p_1(Leilany)",
                    "-p_0(Leilany)",
                    "all x ((p_10(x) | p_3(x)) -> p_4(x))",
                    "all x (p_11(x) -> p_2(x))",
                    "(-p_9(Leilany)) -> p_11(Leilany)",
                    "all x ((p_9(x) & p_8(x)) -> p_10(x))",
                    "p_8(Leilany) | p_5(Leilany)",
                    "(p_0(Leilany) | p_7(Leilany)) & (-p_0(Leilany) | -p_7(Leilany))",
                    "all x ((p_5(x) -> p_6(x)) & (p_5(x) -> p_7(x)))",
                    "p_7(Leilany)",
                    "p_9(Leilany)",
                    "-p_8(Leilany)",
                    "p_5(Leilany)",
                    "all x (p_5(x) -> (p_6(x) & p_7(x)))"
                ],
                "formulas(goals)": [
                    "--p_6(Leilany)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "\u2200x (p_5(x) \u2192 (p_6(x) \u2227 p_7(x)))"
                ]
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_3(Leilany)\n\u00acp_4(Leilany)\n\u00acp_2(Leilany)\np_1(Leilany)\n\u00acp_0(Leilany)\n\u2200x ((p_10(x) \u2228 p_3(x)) \u2192 p_4(x))\n\u2200x (p_11(x) \u2192 p_2(x))\n(\u00acp_9(Leilany)) \u2192 p_11(Leilany)\n\u2200x ((p_9(x) \u2227 p_8(x)) \u2192 p_10(x))\np_8(Leilany) \u2228 p_5(Leilany)\n(p_0(Leilany) \u2228 p_7(Leilany)) \u2227 (\u00acp_0(Leilany) \u2228 \u00acp_7(Leilany))\n\u2200x (p_5(x) \u2192 p_7(x))\np_7(Leilany)\np_9(Leilany)\n\u00acp_8(Leilany)\np_5(Leilany)\n\u2200x (p_5(x) \u2192 p_7(x))\n\u2200x ((\u00acp_8(x) \u2227 p_5(x)) \u2192 \u00acp_6(x))",
            "Initial Goal": "\u00acp_6(Leilany)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_3(Leilany)",
                    "-p_4(Leilany)",
                    "-p_2(Leilany)",
                    "p_1(Leilany)",
                    "-p_0(Leilany)",
                    "all x ((p_10(x) | p_3(x)) -> p_4(x))",
                    "all x (p_11(x) -> p_2(x))",
                    "(-p_9(Leilany)) -> p_11(Leilany)",
                    "all x ((p_9(x) & p_8(x)) -> p_10(x))",
                    "p_8(Leilany) | p_5(Leilany)",
                    "(p_0(Leilany) | p_7(Leilany)) & (-p_0(Leilany) | -p_7(Leilany))",
                    "all x (p_5(x) -> p_7(x))",
                    "p_7(Leilany)",
                    "p_9(Leilany)",
                    "-p_8(Leilany)",
                    "p_5(Leilany)",
                    "all x (p_5(x) -> p_7(x))",
                    "all x ((-p_8(x) & p_5(x)) -> -p_6(x))"
                ],
                "formulas(goals)": [
                    "-p_6(Leilany)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u2200x (p_5(x) \u2192 (p_6(x) \u2227 p_7(x)))"
                ],
                "added_facts": [],
                "added_rules": [
                    "\u2200x ((\u00acp_8(x) \u2227 p_5(x)) \u2192 \u00acp_6(x))"
                ]
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_3(Leilany)\n\u00acp_4(Leilany)\n\u00acp_2(Leilany)\np_1(Leilany)\n\u00acp_0(Leilany)\n\u2200x (p_10(x) \u2192 p_4(x))\n\u2200x (p_3(x) \u2192 p_4(x))\n\u2200x (p_11(x) \u2192 p_2(x))\n(\u00acp_9(Leilany)) \u2192 p_11(Leilany)\n\u2200x ((p_9(x) \u2227 p_8(x)) \u2192 p_10(x))\np_8(Leilany) \u2228 p_5(Leilany)\np_0(Leilany) \u2194 \u00acp_7(Leilany)\n\u2200x (p_5(x) \u2192 p_7(x))\np_7(Leilany)\np_9(Leilany)\n\u00acp_8(Leilany)\np_5(Leilany)\n\u2200x ((\u00acp_8(x) \u2227 p_5(x)) \u2192 \u00acp_6(x))\n\u2200x (\u00acp_7(x) \u2192 \u00acp_5(x))\n\u00acp_11(Leilany)",
            "Initial Goal": "\u00acp_6(Leilany)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_3(Leilany)",
                    "-p_4(Leilany)",
                    "-p_2(Leilany)",
                    "p_1(Leilany)",
                    "-p_0(Leilany)",
                    "all x (p_10(x) -> p_4(x))",
                    "all x (p_3(x) -> p_4(x))",
                    "all x (p_11(x) -> p_2(x))",
                    "(-p_9(Leilany)) -> p_11(Leilany)",
                    "all x ((p_9(x) & p_8(x)) -> p_10(x))",
                    "p_8(Leilany) | p_5(Leilany)",
                    "p_0(Leilany) <-> -p_7(Leilany)",
                    "all x (p_5(x) -> p_7(x))",
                    "p_7(Leilany)",
                    "p_9(Leilany)",
                    "-p_8(Leilany)",
                    "p_5(Leilany)",
                    "all x ((-p_8(x) & p_5(x)) -> -p_6(x))",
                    "all x (-p_7(x) -> -p_5(x))",
                    "-p_11(Leilany)"
                ],
                "formulas(goals)": [
                    "-p_6(Leilany)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u2200x ((p_10(x) \u2228 p_3(x)) \u2192 p_4(x))",
                    "(p_0(Leilany) \u2228 p_7(Leilany)) \u2227 (\u00acp_0(Leilany) \u2228 \u00acp_7(Leilany))"
                ],
                "added_facts": [
                    "\u00acp_11(Leilany)"
                ],
                "added_rules": [
                    "\u2200x (p_10(x) \u2192 p_4(x))",
                    "\u2200x (p_3(x) \u2192 p_4(x))",
                    "p_0(Leilany) \u2194 \u00acp_7(Leilany)",
                    "\u2200x (\u00acp_7(x) \u2192 \u00acp_5(x))"
                ]
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_3(Leilany)\n\u00acp_4(Leilany)\n\u00acp_2(Leilany)\np_1(Leilany)\n\u00acp_0(Leilany)\n\u2200x (p_10(x) \u2192 p_4(x))\n\u2200x (p_3(x) \u2192 p_4(x))\n\u2200x (p_11(x) \u2192 p_2(x))\n(\u00acp_9(Leilany)) \u2192 p_11(Leilany)\n\u2200x ((p_9(x) \u2227 p_8(x)) \u2192 p_10(x))\np_8(Leilany) \u2228 p_5(Leilany)\np_0(Leilany) \u2194 \u00acp_7(Leilany)\n\u2200x (p_5(x) \u2192 p_7(x))\np_7(Leilany)\np_9(Leilany)\n\u00acp_8(Leilany)\np_5(Leilany)\n\u2200x (\u00acp_7(x) \u2192 \u00acp_5(x))\n\u00acp_11(Leilany)\n\u2200x ((\u00acp_8(x) \u2227 p_5(x)) \u2192 p_6(x))",
            "Initial Goal": "\u00acp_6(Leilany)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_3(Leilany)",
                    "-p_4(Leilany)",
                    "-p_2(Leilany)",
                    "p_1(Leilany)",
                    "-p_0(Leilany)",
                    "all x (p_10(x) -> p_4(x))",
                    "all x (p_3(x) -> p_4(x))",
                    "all x (p_11(x) -> p_2(x))",
                    "(-p_9(Leilany)) -> p_11(Leilany)",
                    "all x ((p_9(x) & p_8(x)) -> p_10(x))",
                    "p_8(Leilany) | p_5(Leilany)",
                    "p_0(Leilany) <-> (-p_7(Leilany))",
                    "all x (p_5(x) -> p_7(x))",
                    "p_7(Leilany)",
                    "p_9(Leilany)",
                    "-p_8(Leilany)",
                    "p_5(Leilany)",
                    "all x ((-p_7(x)) -> (-p_5(x)))",
                    "-p_11(Leilany)",
                    "all x (((-p_8(x)) & p_5(x)) -> p_6(x))"
                ],
                "formulas(goals)": [
                    "-(-p_6(Leilany))"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u2200x ((\u00acp_8(x) \u2227 p_5(x)) \u2192 \u00acp_6(x))"
                ],
                "added_facts": [],
                "added_rules": [
                    "\u2200x ((\u00acp_8(x) \u2227 p_5(x)) \u2192 p_6(x))"
                ]
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_3(Leilany)\n\u00acp_4(Leilany)\n\u00acp_2(Leilany)\np_1(Leilany)\n\u00acp_0(Leilany)\n\u2200x (p_10(x) \u2192 p_4(x))\n\u2200x (p_3(x) \u2192 p_4(x))\n\u2200x (p_11(x) \u2192 p_2(x))\n(\u00acp_9(Leilany)) \u2192 p_11(Leilany)\n\u2200x ((p_9(x) \u2227 p_8(x)) \u2192 p_10(x))\np_8(Leilany) \u2228 p_5(Leilany)\np_0(Leilany) \u2194 \u00acp_7(Leilany)\n\u2200x (p_5(x) \u2192 p_7(x))\np_7(Leilany)\np_9(Leilany)\n\u00acp_8(Leilany)\np_5(Leilany)\n\u2200x (\u00acp_7(x) \u2192 \u00acp_5(x))\n\u00acp_11(Leilany)\n\u2200x (p_5(x) \u2192 \u00acp_6(x))",
            "Initial Goal": "\u00acp_6(Leilany)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_3(Leilany)",
                    "-p_4(Leilany)",
                    "-p_2(Leilany)",
                    "p_1(Leilany)",
                    "-p_0(Leilany)",
                    "all x (p_10(x) -> p_4(x))",
                    "all x (p_3(x) -> p_4(x))",
                    "all x (p_11(x) -> p_2(x))",
                    "(-p_9(Leilany)) -> p_11(Leilany)",
                    "all x ((p_9(x) & p_8(x)) -> p_10(x))",
                    "p_8(Leilany) | p_5(Leilany)",
                    "p_0(Leilany) <-> -p_7(Leilany)",
                    "all x (p_5(x) -> p_7(x))",
                    "p_7(Leilany)",
                    "p_9(Leilany)",
                    "-p_8(Leilany)",
                    "p_5(Leilany)",
                    "all x (-p_7(x) -> -p_5(x))",
                    "-p_11(Leilany)",
                    "all x (p_5(x) -> -p_6(x))"
                ],
                "formulas(goals)": [
                    "-p_6(Leilany)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u2200x ((\u00acp_8(x) \u2227 p_5(x)) \u2192 p_6(x))"
                ],
                "added_facts": [],
                "added_rules": [
                    "\u2200x (p_5(x) \u2192 \u00acp_6(x))"
                ]
            }
        }
    ]
}