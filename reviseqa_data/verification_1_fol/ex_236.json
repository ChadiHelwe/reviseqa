{
    "background_story": "Vincenzo was a restaurateur with a reputation for serving the finest Italian cuisine in the city. His establishment, Bella Vita, was reputably the go-to place for special occasions and business meetings. Vincenzo's commitment to using only the freshest ingredients and traditional cooking methods earned him accolades from food critics and patrons alike. He was known for his impeccable taste and attention to detail, ensuring every dish that left his kitchen was a masterpiece. Over the years, Vincenzo's reputation for excellence spread, attracting visitors from all over the world. His restaurant became a landmark, and he a respected figure in the culinary community, with a reputation built on quality, consistency, and a passion for delivering an unforgettable dining experience.",
    "predicates": [
        {
            "id": 0,
            "name": "enjoy_cuisine"
        },
        {
            "id": 1,
            "name": "create_menu"
        },
        {
            "id": 2,
            "name": "succeeds_business"
        },
        {
            "id": 3,
            "name": "picky_eater"
        },
        {
            "id": 4,
            "name": "trains_colleagues"
        },
        {
            "id": 5,
            "name": "creative"
        },
        {
            "id": 6,
            "name": "know_ingredients"
        },
        {
            "id": 7,
            "name": "sets_example"
        },
        {
            "id": 8,
            "name": "inspires_team"
        },
        {
            "id": 9,
            "name": "food_connoisseur"
        },
        {
            "id": 10,
            "name": "appreciate_flavors"
        },
        {
            "id": 11,
            "name": "cook_well"
        },
        {
            "id": 12,
            "name": "run_restaurant"
        },
        {
            "id": 13,
            "name": "manage_team"
        },
        {
            "id": 14,
            "name": "leads_staff"
        },
        {
            "id": 15,
            "name": "motivates_others"
        },
        {
            "id": 16,
            "name": "discerning_taste"
        },
        {
            "id": 17,
            "name": "refined_palate"
        },
        {
            "id": 18,
            "name": "have_refined_taste"
        },
        {
            "id": 19,
            "name": "love_gourmet"
        },
        {
            "id": 20,
            "name": "handle_kitchen"
        },
        {
            "id": 21,
            "name": "serve_clients"
        },
        {
            "id": 22,
            "name": "has_vision"
        },
        {
            "id": 23,
            "name": "makes_plans"
        },
        {
            "id": 24,
            "name": "guides_others"
        },
        {
            "id": 25,
            "name": "use_fresh_ingredients"
        },
        {
            "id": 26,
            "name": "master_techniques"
        },
        {
            "id": 27,
            "name": "sets_goals"
        },
        {
            "id": 28,
            "name": "gives_feedback"
        }
    ],
    "subject_name": "Vincenzo",
    "subject_category": "human",
    "keyword": "reputably",
    "all_facts": [
        {
            "id": 0,
            "subject": "Vincenzo",
            "text": "Vincenzo does not enjoy cuisine.",
            "fol": "\u00acp_0(Vincenzo)",
            "str_fol": "\u00acenjoy_cuisine(Vincenzo)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Vincenzo",
            "text": "Vincenzo cannot create a menu.",
            "fol": "\u00acp_1(Vincenzo)",
            "str_fol": "\u00accreate_menu(Vincenzo)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Vincenzo",
            "text": "Vincenzo does not succeed in business.",
            "fol": "\u00acp_2(Vincenzo)",
            "str_fol": "\u00acsucceeds_business(Vincenzo)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Vincenzo",
            "text": "Vincenzo is a picky eater.",
            "fol": "p_3(Vincenzo)",
            "str_fol": "picky_eater(Vincenzo)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Vincenzo",
            "text": "Vincenzo trains colleagues.",
            "fol": "p_4(Vincenzo)",
            "str_fol": "trains_colleagues(Vincenzo)",
            "negation": false
        },
        {
            "id": 5,
            "subject": "Vincenzo",
            "text": "Vincenzo is not creative.",
            "fol": "\u00acp_5(Vincenzo)",
            "str_fol": "\u00accreative(Vincenzo)",
            "negation": true
        },
        {
            "id": 6,
            "subject": "Vincenzo",
            "text": "Vincenzo knows ingredients.",
            "fol": "p_6(Vincenzo)",
            "str_fol": "know_ingredients(Vincenzo)",
            "negation": false
        },
        {
            "id": 7,
            "subject": "Vincenzo",
            "text": "Vincenzo sets an example.",
            "fol": "p_7(Vincenzo)",
            "str_fol": "sets_example(Vincenzo)",
            "negation": false
        },
        {
            "id": 8,
            "subject": "Vincenzo",
            "text": "Vincenzo does not inspire his team.",
            "fol": "\u00acp_8(Vincenzo)",
            "str_fol": "\u00acinspires_team(Vincenzo)",
            "negation": true
        },
        {
            "id": 9,
            "subject": "Vincenzo",
            "text": "Vincenzo does not motivate others.",
            "fol": "\u00acp_15(Vincenzo)",
            "str_fol": "\u00acmotivates_others(Vincenzo)",
            "negation": true
        },
        {
            "id": 10,
            "subject": "Vincenzo",
            "text": "Vincenzo leads staff.",
            "fol": "p_14(Vincenzo)",
            "str_fol": "leads_staff(Vincenzo)",
            "negation": false
        },
        {
            "id": 11,
            "subject": "Vincenzo",
            "text": "Vincenzo cannot manage a team.",
            "fol": "\u00acp_13(Vincenzo)",
            "str_fol": "\u00acmanage_team(Vincenzo)",
            "negation": true
        },
        {
            "id": 12,
            "subject": "Vincenzo",
            "text": "Vincenzo cannot run a restaurant.",
            "fol": "\u00acp_12(Vincenzo)",
            "str_fol": "\u00acrun_restaurant(Vincenzo)",
            "negation": true
        },
        {
            "id": 13,
            "subject": "Vincenzo",
            "text": "Vincenzo does not appreciate flavors.",
            "fol": "\u00acp_10(Vincenzo)",
            "str_fol": "\u00acappreciate_flavors(Vincenzo)",
            "negation": true
        },
        {
            "id": 14,
            "subject": "Vincenzo",
            "text": "Vincenzo is not a food connoisseur.",
            "fol": "\u00acp_9(Vincenzo)",
            "str_fol": "\u00acfood_connoisseur(Vincenzo)",
            "negation": true
        },
        {
            "id": 15,
            "subject": "Vincenzo",
            "text": "Vincenzo is either a food connoisseur or a picky eater, but not both.",
            "fol": "food_connoisseur(Vincenzo) \u2295 p_3(Vincenzo)",
            "str_fol": "food_connoisseur(Vincenzo) \u2295 picky_eater(Vincenzo)",
            "negation": false
        }
    ],
    "context_facts": [
        {
            "id": 7,
            "subject": "Vincenzo",
            "text": "Vincenzo sets an example.",
            "fol": "p_7(Vincenzo)",
            "str_fol": "sets_example(Vincenzo)",
            "negation": false
        },
        {
            "id": 8,
            "subject": "Vincenzo",
            "text": "Vincenzo does not inspire his team.",
            "fol": "\u00acp_8(Vincenzo)",
            "str_fol": "\u00acinspires_team(Vincenzo)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Vincenzo",
            "text": "Vincenzo is not creative.",
            "fol": "\u00acp_5(Vincenzo)",
            "str_fol": "\u00accreative(Vincenzo)",
            "negation": true
        },
        {
            "id": 6,
            "subject": "Vincenzo",
            "text": "Vincenzo knows ingredients.",
            "fol": "p_6(Vincenzo)",
            "str_fol": "know_ingredients(Vincenzo)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Vincenzo",
            "text": "Vincenzo trains colleagues.",
            "fol": "p_4(Vincenzo)",
            "str_fol": "trains_colleagues(Vincenzo)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Vincenzo",
            "text": "Vincenzo does not succeed in business.",
            "fol": "\u00acp_2(Vincenzo)",
            "str_fol": "\u00acsucceeds_business(Vincenzo)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Vincenzo",
            "text": "Vincenzo cannot create a menu.",
            "fol": "\u00acp_1(Vincenzo)",
            "str_fol": "\u00accreate_menu(Vincenzo)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Vincenzo",
            "text": "Vincenzo does not enjoy cuisine.",
            "fol": "\u00acp_0(Vincenzo)",
            "str_fol": "\u00acenjoy_cuisine(Vincenzo)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Vincenzo",
            "text": "Vincenzo is a picky eater.",
            "fol": "p_3(Vincenzo)",
            "str_fol": "picky_eater(Vincenzo)",
            "negation": false
        }
    ],
    "context_rules": [
        {
            "id": 6,
            "text": "If someone sets an example and motivates others, then they inspire their team.",
            "fol": "\u2200x ((p_7(x) \u2227 p_15(x)) \u2192 p_8(x))",
            "str_fol": "\u2200x ((sets_example(x) \u2227 motivates_others(x)) \u2192 inspires_team(x))"
        },
        {
            "id": 5,
            "text": "If Vincenzo is creative, then he knows ingredients and cooks well.",
            "fol": "p_5(Vincenzo) \u2192 (p_6(Vincenzo) \u2227 p_11(Vincenzo))",
            "str_fol": "creative(Vincenzo) \u2192 (know_ingredients(Vincenzo) \u2227 cook_well(Vincenzo))"
        },
        {
            "id": 4,
            "text": "If Vincenzo either trains colleagues or motivates others (but not both), then he is able to lead staff.",
            "fol": "(p_4(Vincenzo) \u2295 p_15(Vincenzo)) \u2192 p_14(Vincenzo)",
            "str_fol": "(trains_colleagues(Vincenzo) \u2295 motivates_others(Vincenzo)) \u2192 leads_staff(Vincenzo)"
        },
        {
            "id": 3,
            "text": "If someone manages a team and leads staff, then they can succeed in business.",
            "fol": "\u2200x ((p_13(x) \u2227 p_14(x)) \u2192 p_2(x))",
            "str_fol": "\u2200x ((manage_team(x) \u2227 leads_staff(x)) \u2192 succeeds_business(x))"
        },
        {
            "id": 2,
            "text": "If Vincenzo runs a restaurant, then he can manage a team and create a menu.",
            "fol": "p_12(Vincenzo) \u2192 (p_13(Vincenzo) \u2227 p_1(Vincenzo))",
            "str_fol": "run_restaurant(Vincenzo) \u2192 (manage_team(Vincenzo) \u2227 create_menu(Vincenzo))"
        },
        {
            "id": 1,
            "text": "If Vincenzo cooks well or appreciates flavors, then he can run a restaurant.",
            "fol": "(p_11(Vincenzo) \u2228 p_10(Vincenzo)) \u2192 p_12(Vincenzo)",
            "str_fol": "(cook_well(Vincenzo) \u2228 appreciate_flavors(Vincenzo)) \u2192 run_restaurant(Vincenzo)"
        },
        {
            "id": 0,
            "text": "Every food connoisseur appreciates flavors or enjoys cuisine.",
            "fol": "\u2200x (p_9(x) \u2192 (p_10(x) \u2228 p_0(x)))",
            "str_fol": "\u2200x (food_connoisseur(x) \u2192 (appreciate_flavors(x) \u2228 enjoy_cuisine(x)))"
        }
    ],
    "context": [
        {
            "id": 7,
            "subject": "Vincenzo",
            "text": "Vincenzo sets an example.",
            "fol": "p_7(Vincenzo)",
            "str_fol": "sets_example(Vincenzo)",
            "negation": false
        },
        {
            "id": 8,
            "subject": "Vincenzo",
            "text": "Vincenzo does not inspire his team.",
            "fol": "\u00acp_8(Vincenzo)",
            "str_fol": "\u00acinspires_team(Vincenzo)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Vincenzo",
            "text": "Vincenzo is not creative.",
            "fol": "\u00acp_5(Vincenzo)",
            "str_fol": "\u00accreative(Vincenzo)",
            "negation": true
        },
        {
            "id": 6,
            "subject": "Vincenzo",
            "text": "Vincenzo knows ingredients.",
            "fol": "p_6(Vincenzo)",
            "str_fol": "know_ingredients(Vincenzo)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Vincenzo",
            "text": "Vincenzo trains colleagues.",
            "fol": "p_4(Vincenzo)",
            "str_fol": "trains_colleagues(Vincenzo)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Vincenzo",
            "text": "Vincenzo does not succeed in business.",
            "fol": "\u00acp_2(Vincenzo)",
            "str_fol": "\u00acsucceeds_business(Vincenzo)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Vincenzo",
            "text": "Vincenzo cannot create a menu.",
            "fol": "\u00acp_1(Vincenzo)",
            "str_fol": "\u00accreate_menu(Vincenzo)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Vincenzo",
            "text": "Vincenzo does not enjoy cuisine.",
            "fol": "\u00acp_0(Vincenzo)",
            "str_fol": "\u00acenjoy_cuisine(Vincenzo)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Vincenzo",
            "text": "Vincenzo is a picky eater.",
            "fol": "p_3(Vincenzo)",
            "str_fol": "picky_eater(Vincenzo)",
            "negation": false
        },
        {
            "id": 6,
            "text": "If someone sets an example and motivates others, then they inspire their team.",
            "fol": "\u2200x ((p_7(x) \u2227 p_15(x)) \u2192 p_8(x))",
            "str_fol": "\u2200x ((sets_example(x) \u2227 motivates_others(x)) \u2192 inspires_team(x))"
        },
        {
            "id": 5,
            "text": "If Vincenzo is creative, then he knows ingredients and cooks well.",
            "fol": "p_5(Vincenzo) \u2192 (p_6(Vincenzo) \u2227 p_11(Vincenzo))",
            "str_fol": "creative(Vincenzo) \u2192 (know_ingredients(Vincenzo) \u2227 cook_well(Vincenzo))"
        },
        {
            "id": 4,
            "text": "If Vincenzo either trains colleagues or motivates others (but not both), then he is able to lead staff.",
            "fol": "(p_4(Vincenzo) \u2295 p_15(Vincenzo)) \u2192 p_14(Vincenzo)",
            "str_fol": "(trains_colleagues(Vincenzo) \u2295 motivates_others(Vincenzo)) \u2192 leads_staff(Vincenzo)"
        },
        {
            "id": 3,
            "text": "If someone manages a team and leads staff, then they can succeed in business.",
            "fol": "\u2200x ((p_13(x) \u2227 p_14(x)) \u2192 p_2(x))",
            "str_fol": "\u2200x ((manage_team(x) \u2227 leads_staff(x)) \u2192 succeeds_business(x))"
        },
        {
            "id": 2,
            "text": "If Vincenzo runs a restaurant, then he can manage a team and create a menu.",
            "fol": "p_12(Vincenzo) \u2192 (p_13(Vincenzo) \u2227 p_1(Vincenzo))",
            "str_fol": "run_restaurant(Vincenzo) \u2192 (manage_team(Vincenzo) \u2227 create_menu(Vincenzo))"
        },
        {
            "id": 1,
            "text": "If Vincenzo cooks well or appreciates flavors, then he can run a restaurant.",
            "fol": "(p_11(Vincenzo) \u2228 p_10(Vincenzo)) \u2192 p_12(Vincenzo)",
            "str_fol": "(cook_well(Vincenzo) \u2228 appreciate_flavors(Vincenzo)) \u2192 run_restaurant(Vincenzo)"
        },
        {
            "id": 0,
            "text": "Every food connoisseur appreciates flavors or enjoys cuisine.",
            "fol": "\u2200x (p_9(x) \u2192 (p_10(x) \u2228 p_0(x)))",
            "str_fol": "\u2200x (food_connoisseur(x) \u2192 (appreciate_flavors(x) \u2228 enjoy_cuisine(x)))"
        }
    ],
    "context_fol": "p_7(Vincenzo)\n\u00acp_8(Vincenzo)\n\u00acp_5(Vincenzo)\np_6(Vincenzo)\np_4(Vincenzo)\n\u00acp_2(Vincenzo)\n\u00acp_1(Vincenzo)\n\u00acp_0(Vincenzo)\np_3(Vincenzo)\n\u2200x ((p_7(x) \u2227 p_15(x)) \u2192 p_8(x))\np_5(Vincenzo) \u2192 (p_6(Vincenzo) \u2227 p_11(Vincenzo))\n(p_4(Vincenzo) \u2295 p_15(Vincenzo)) \u2192 p_14(Vincenzo)\n\u2200x ((p_13(x) \u2227 p_14(x)) \u2192 p_2(x))\np_12(Vincenzo) \u2192 (p_13(Vincenzo) \u2227 p_1(Vincenzo))\n(p_11(Vincenzo) \u2228 p_10(Vincenzo)) \u2192 p_12(Vincenzo)\n\u2200x (p_9(x) \u2192 (p_10(x) \u2228 p_0(x)))",
    "conclusion": {
        "id": 14,
        "text": "Vincenzo is either a food connoisseur or a picky eater, but not both.",
        "fol": "p_9(Vincenzo) \u2295 p_3(Vincenzo)",
        "str_fol": "food_connoisseur(Vincenzo) \u2295 picky_eater(Vincenzo)"
    },
    "initial_answer": "True",
    "initial_goal": "p_9(Vincenzo) \u2295 p_3(Vincenzo)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 7,
                    "subject": "Vincenzo",
                    "text": "Vincenzo sets an example.",
                    "fol": "p_7(Vincenzo)",
                    "str_fol": "sets_example(Vincenzo)",
                    "negation": false
                },
                {
                    "id": 8,
                    "subject": "Vincenzo",
                    "text": "Vincenzo does not inspire his team.",
                    "fol": "\u00acp_8(Vincenzo)",
                    "str_fol": "\u00acinspires_team(Vincenzo)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 6,
                    "text": "If someone sets an example and motivates others, then they inspire their team.",
                    "fol": "\u2200x ((p_7(x) \u2227 p_15(x)) \u2192 p_8(x))",
                    "str_fol": "\u2200x ((sets_example(x) \u2227 motivates_others(x)) \u2192 inspires_team(x))"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Vincenzo",
                "text": "Vincenzo does not motivate others.",
                "fol": "\u00acp_15(Vincenzo)",
                "str_fol": "\u00acmotivates_others(Vincenzo)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 5,
                    "subject": "Vincenzo",
                    "text": "Vincenzo is not creative.",
                    "fol": "\u00acp_5(Vincenzo)",
                    "str_fol": "\u00accreative(Vincenzo)",
                    "negation": true
                },
                {
                    "id": 6,
                    "subject": "Vincenzo",
                    "text": "Vincenzo knows ingredients.",
                    "fol": "p_6(Vincenzo)",
                    "str_fol": "know_ingredients(Vincenzo)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "If Vincenzo is creative, then he knows ingredients and cooks well.",
                    "fol": "p_5(Vincenzo) \u2192 (p_6(Vincenzo) \u2227 p_11(Vincenzo))",
                    "str_fol": "creative(Vincenzo) \u2192 (know_ingredients(Vincenzo) \u2227 cook_well(Vincenzo))"
                }
            ],
            "conclusion": null
        },
        {
            "facts": [
                {
                    "id": 4,
                    "subject": "Vincenzo",
                    "text": "Vincenzo trains colleagues.",
                    "fol": "p_4(Vincenzo)",
                    "str_fol": "trains_colleagues(Vincenzo)",
                    "negation": false
                },
                {
                    "id": 9,
                    "subject": "Vincenzo",
                    "text": "Vincenzo does not motivate others.",
                    "fol": "\u00acp_15(Vincenzo)",
                    "str_fol": "\u00acmotivates_others(Vincenzo)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "If Vincenzo either trains colleagues or motivates others (but not both), then he is able to lead staff.",
                    "fol": "(p_4(Vincenzo) \u2295 p_15(Vincenzo)) \u2192 p_14(Vincenzo)",
                    "str_fol": "(trains_colleagues(Vincenzo) \u2295 motivates_others(Vincenzo)) \u2192 leads_staff(Vincenzo)"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Vincenzo",
                "text": "Vincenzo leads staff.",
                "fol": "p_14(Vincenzo)",
                "str_fol": "leads_staff(Vincenzo)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 10,
                    "subject": "Vincenzo",
                    "text": "Vincenzo leads staff.",
                    "fol": "p_14(Vincenzo)",
                    "str_fol": "leads_staff(Vincenzo)",
                    "negation": false
                },
                {
                    "id": 2,
                    "subject": "Vincenzo",
                    "text": "Vincenzo does not succeed in business.",
                    "fol": "\u00acp_2(Vincenzo)",
                    "str_fol": "\u00acsucceeds_business(Vincenzo)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "If someone manages a team and leads staff, then they can succeed in business.",
                    "fol": "\u2200x ((p_13(x) \u2227 p_14(x)) \u2192 p_2(x))",
                    "str_fol": "\u2200x ((manage_team(x) \u2227 leads_staff(x)) \u2192 succeeds_business(x))"
                }
            ],
            "conclusion": {
                "id": 11,
                "subject": "Vincenzo",
                "text": "Vincenzo cannot manage a team.",
                "fol": "\u00acp_13(Vincenzo)",
                "str_fol": "\u00acmanage_team(Vincenzo)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 11,
                    "subject": "Vincenzo",
                    "text": "Vincenzo cannot manage a team.",
                    "fol": "\u00acp_13(Vincenzo)",
                    "str_fol": "\u00acmanage_team(Vincenzo)",
                    "negation": true
                },
                {
                    "id": 1,
                    "subject": "Vincenzo",
                    "text": "Vincenzo cannot create a menu.",
                    "fol": "\u00acp_1(Vincenzo)",
                    "str_fol": "\u00accreate_menu(Vincenzo)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "If Vincenzo runs a restaurant, then he can manage a team and create a menu.",
                    "fol": "p_12(Vincenzo) \u2192 (p_13(Vincenzo) \u2227 p_1(Vincenzo))",
                    "str_fol": "run_restaurant(Vincenzo) \u2192 (manage_team(Vincenzo) \u2227 create_menu(Vincenzo))"
                }
            ],
            "conclusion": {
                "id": 12,
                "subject": "Vincenzo",
                "text": "Vincenzo cannot run a restaurant.",
                "fol": "\u00acp_12(Vincenzo)",
                "str_fol": "\u00acrun_restaurant(Vincenzo)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 12,
                    "subject": "Vincenzo",
                    "text": "Vincenzo cannot run a restaurant.",
                    "fol": "\u00acp_12(Vincenzo)",
                    "str_fol": "\u00acrun_restaurant(Vincenzo)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "If Vincenzo cooks well or appreciates flavors, then he can run a restaurant.",
                    "fol": "(p_11(Vincenzo) \u2228 p_10(Vincenzo)) \u2192 p_12(Vincenzo)",
                    "str_fol": "(cook_well(Vincenzo) \u2228 appreciate_flavors(Vincenzo)) \u2192 run_restaurant(Vincenzo)"
                }
            ],
            "conclusion": {
                "id": 13,
                "subject": "Vincenzo",
                "text": "Vincenzo does not appreciate flavors.",
                "fol": "\u00acp_10(Vincenzo)",
                "str_fol": "\u00acappreciate_flavors(Vincenzo)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 13,
                    "subject": "Vincenzo",
                    "text": "Vincenzo does not appreciate flavors.",
                    "fol": "\u00acp_10(Vincenzo)",
                    "str_fol": "\u00acappreciate_flavors(Vincenzo)",
                    "negation": true
                },
                {
                    "id": 0,
                    "subject": "Vincenzo",
                    "text": "Vincenzo does not enjoy cuisine.",
                    "fol": "\u00acp_0(Vincenzo)",
                    "str_fol": "\u00acenjoy_cuisine(Vincenzo)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "Every food connoisseur appreciates flavors or enjoys cuisine.",
                    "fol": "\u2200x (p_9(x) \u2192 (p_10(x) \u2228 p_0(x)))",
                    "str_fol": "\u2200x (food_connoisseur(x) \u2192 (appreciate_flavors(x) \u2228 enjoy_cuisine(x)))"
                }
            ],
            "conclusion": {
                "id": 14,
                "subject": "Vincenzo",
                "text": "Vincenzo is not a food connoisseur.",
                "fol": "\u00acp_9(Vincenzo)",
                "str_fol": "\u00acfood_connoisseur(Vincenzo)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 14,
                    "subject": "Vincenzo",
                    "text": "Vincenzo is not a food connoisseur.",
                    "fol": "\u00acp_9(Vincenzo)",
                    "str_fol": "\u00acfood_connoisseur(Vincenzo)",
                    "negation": true
                },
                {
                    "id": 3,
                    "subject": "Vincenzo",
                    "text": "Vincenzo is a picky eater.",
                    "fol": "p_3(Vincenzo)",
                    "str_fol": "picky_eater(Vincenzo)",
                    "negation": false
                }
            ],
            "rules": [],
            "conclusion": {
                "id": 14,
                "text": "Vincenzo is either a food connoisseur or a picky eater, but not both.",
                "fol": "p_9(Vincenzo) \u2295 p_3(Vincenzo)",
                "str_fol": "food_connoisseur(Vincenzo) \u2295 picky_eater(Vincenzo)"
            }
        }
    ],
    "proof_trace": "5 p_12(Vincenzo) -> p_13(Vincenzo) & p_1(Vincenzo).  [assumption].\n6 p_11(Vincenzo) | p_10(Vincenzo) -> p_12(Vincenzo).  [assumption].\n7 (all x (p_9(x) -> p_10(x) | p_0(x))).  [assumption].\n8 -(p_9(Vincenzo) <-> p_3(Vincenzo)).  [goal].\n18 -p_12(Vincenzo) | p_1(Vincenzo).  [clausify(5)].\n19 -p_1(Vincenzo).  [assumption].\n20 -p_9(x) | p_10(x) | p_0(x).  [clausify(7)].\n21 -p_0(Vincenzo).  [assumption].\n22 p_9(Vincenzo) | -p_3(Vincenzo).  [deny(8)].\n23 p_3(Vincenzo).  [assumption].\n27 -p_10(Vincenzo) | p_12(Vincenzo).  [clausify(6)].\n28 -p_12(Vincenzo).  [resolve(18,b,19,a)].\n34 p_9(Vincenzo).  [resolve(22,b,23,a)].\n35 -p_9(Vincenzo) | p_10(Vincenzo).  [resolve(20,c,21,a)].\n36 p_10(Vincenzo).  [resolve(34,a,35,a)].\n37 -p_10(Vincenzo).  [resolve(28,a,27,b)].\n38 $F.  [resolve(36,a,37,a)].",
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_7(Vincenzo)\n\u00acp_8(Vincenzo)\n\u00acp_5(Vincenzo)\np_6(Vincenzo)\np_4(Vincenzo)\n\u00acp_2(Vincenzo)\n\u00acp_1(Vincenzo)\n\u00acp_0(Vincenzo)\np_3(Vincenzo)\n\u2200x ((p_7(x) \u2227 p_15(x)) \u2192 p_8(x))\n(p_5(Vincenzo) \u2192 p_6(Vincenzo)) \u2227 (p_5(Vincenzo) \u2192 p_11(Vincenzo))\n((p_4(Vincenzo) \u2295 p_15(Vincenzo)) \u2192 p_14(Vincenzo))\n\u2200x ((p_13(x) \u2227 p_14(x)) \u2192 p_2(x))\np_12(Vincenzo) \u2192 (p_13(Vincenzo) \u2227 p_1(Vincenzo))\n(p_11(Vincenzo) \u2228 p_10(Vincenzo)) \u2192 p_12(Vincenzo)\n\u2200x (\u00ac(p_10(x) \u2228 p_0(x)) \u2192 \u00acp_9(x))\n\u00acp_9(Vincenzo)",
            "Initial Goal": "p_9(Vincenzo) \u2295 p_3(Vincenzo)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_7(Vincenzo)",
                    "-p_8(Vincenzo)",
                    "-p_5(Vincenzo)",
                    "p_6(Vincenzo)",
                    "p_4(Vincenzo)",
                    "-p_2(Vincenzo)",
                    "-p_1(Vincenzo)",
                    "-p_0(Vincenzo)",
                    "p_3(Vincenzo)",
                    "all x ((p_7(x) & p_15(x)) -> p_8(x))",
                    "(-p_5(Vincenzo) | p_6(Vincenzo)) & (-p_5(Vincenzo) | p_11(Vincenzo))",
                    "(-((p_4(Vincenzo) & -p_15(Vincenzo)) | (-p_4(Vincenzo) & p_15(Vincenzo))) | p_14(Vincenzo))",
                    "all x ((p_13(x) & p_14(x)) -> p_2(x))",
                    "(-p_12(Vincenzo) | (p_13(Vincenzo) & p_1(Vincenzo)))",
                    "(-(p_11(Vincenzo) | p_10(Vincenzo)) | p_12(Vincenzo))",
                    "all x (-(-p_10(x) & -p_0(x)) | -p_9(x))",
                    "-p_9(Vincenzo)"
                ],
                "formulas(goals)": [
                    "-(p_9(Vincenzo) <-> p_3(Vincenzo))"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "\u00acp_9(Vincenzo)"
                ],
                "added_rules": [
                    "(p_5(Vincenzo) \u2192 p_6(Vincenzo)) \u2227 (p_5(Vincenzo) \u2192 p_11(Vincenzo))",
                    "\u2200x (\u00ac(p_10(x) \u2228 p_0(x)) \u2192 \u00acp_9(x))"
                ]
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_7(Vincenzo)\n\u00acp_8(Vincenzo)\n\u00acp_5(Vincenzo)\np_6(Vincenzo)\np_4(Vincenzo)\n\u00acp_2(Vincenzo)\n\u00acp_1(Vincenzo)\n\u00acp_0(Vincenzo)\np_3(Vincenzo)\n\u2200x ((p_7(x) \u2227 p_15(x)) \u2192 p_8(x))\n(p_5(Vincenzo) \u2192 (p_6(Vincenzo) \u2227 p_11(Vincenzo)))\n((p_4(Vincenzo) \u2295 p_15(Vincenzo)) \u2192 p_14(Vincenzo))\n(\u00acp_15(Vincenzo) \u2192 p_14(Vincenzo))\n\u2200x ((p_13(x) \u2227 p_14(x)) \u2192 p_2(x))\np_12(Vincenzo) \u2192 (p_13(Vincenzo) \u2227 p_1(Vincenzo))\n(p_11(Vincenzo) \u2228 p_10(Vincenzo)) \u2192 p_12(Vincenzo)\n\u2200x (p_9(x) \u2192 (p_10(x) \u2228 p_0(x)))\n\u00acp_9(Vincenzo)",
            "Initial Goal": "p_9(Vincenzo) \u2295 p_3(Vincenzo)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_7(Vincenzo)",
                    "-p_8(Vincenzo)",
                    "-p_5(Vincenzo)",
                    "p_6(Vincenzo)",
                    "p_4(Vincenzo)",
                    "-p_2(Vincenzo)",
                    "-p_1(Vincenzo)",
                    "-p_0(Vincenzo)",
                    "p_3(Vincenzo)",
                    "all x ((p_7(x) & p_15(x)) -> p_8(x))",
                    "(p_5(Vincenzo) -> (p_6(Vincenzo) & p_11(Vincenzo)))",
                    "(-(p_4(Vincenzo) <-> p_15(Vincenzo)) -> p_14(Vincenzo))",
                    "(-p_15(Vincenzo) -> p_14(Vincenzo))",
                    "all x ((p_13(x) & p_14(x)) -> p_2(x))",
                    "p_12(Vincenzo) -> (p_13(Vincenzo) & p_1(Vincenzo))",
                    "(p_11(Vincenzo) | p_10(Vincenzo)) -> p_12(Vincenzo)",
                    "all x (p_9(x) -> (p_10(x) | p_0(x)))",
                    "-p_9(Vincenzo)"
                ],
                "formulas(goals)": [
                    "-(p_9(Vincenzo) <-> p_3(Vincenzo))"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "(p_5(Vincenzo) \u2192 p_6(Vincenzo)) \u2227 (p_5(Vincenzo) \u2192 p_11(Vincenzo))",
                    "\u2200x (\u00ac(p_10(x) \u2228 p_0(x)) \u2192 \u00acp_9(x))"
                ],
                "added_facts": [],
                "added_rules": [
                    "(p_5(Vincenzo) \u2192 (p_6(Vincenzo) \u2227 p_11(Vincenzo)))",
                    "\u00acp_15(Vincenzo) \u2192 p_14(Vincenzo)",
                    "\u2200x (p_9(x) \u2192 (p_10(x) \u2228 p_0(x)))"
                ]
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_7(Vincenzo)\n\u00acp_8(Vincenzo)\n\u00acp_5(Vincenzo)\np_6(Vincenzo)\np_4(Vincenzo)\n\u00acp_2(Vincenzo)\n\u00acp_1(Vincenzo)\n\u00acp_0(Vincenzo)\np_3(Vincenzo)\n\u2200x ((p_7(x) \u2227 p_15(x)) \u2192 p_8(x))\n(p_5(Vincenzo) \u2192 (p_6(Vincenzo) \u2227 p_11(Vincenzo)))\n((p_4(Vincenzo) \u2295 p_15(Vincenzo)) \u2192 p_14(Vincenzo))\n(\u00acp_15(Vincenzo) \u2192 p_14(Vincenzo))\n\u2200x ((p_13(x) \u2227 p_14(x)) \u2192 p_2(x))\n(p_12(Vincenzo) \u2192 (p_13(Vincenzo) \u2227 p_1(Vincenzo)))\n((p_11(Vincenzo) \u2228 p_10(Vincenzo)) \u2192 p_12(Vincenzo))\n\u2200x (p_9(x) \u2192 (p_10(x) \u2228 p_0(x)))\n(p_3(Vincenzo) \u2192 p_9(Vincenzo))",
            "Initial Goal": "p_9(Vincenzo) \u2295 p_3(Vincenzo)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_7(Vincenzo).",
                    "-p_8(Vincenzo).",
                    "-p_5(Vincenzo).",
                    "p_6(Vincenzo).",
                    "p_4(Vincenzo).",
                    "-p_2(Vincenzo).",
                    "-p_1(Vincenzo).",
                    "-p_0(Vincenzo).",
                    "p_3(Vincenzo).",
                    "all x ((p_7(x) & p_15(x)) -> p_8(x)).",
                    "(p_5(Vincenzo) -> (p_6(Vincenzo) & p_11(Vincenzo))).",
                    "(-(p_4(Vincenzo) <-> p_15(Vincenzo)) -> p_14(Vincenzo)).",
                    "(-p_15(Vincenzo) -> p_14(Vincenzo)).",
                    "all x ((p_13(x) & p_14(x)) -> p_2(x)).",
                    "(p_12(Vincenzo) -> (p_13(Vincenzo) & p_1(Vincenzo))).",
                    "((p_11(Vincenzo) | p_10(Vincenzo)) -> p_12(Vincenzo)).",
                    "all x (p_9(x) -> (p_10(x) | p_0(x))).",
                    "(p_3(Vincenzo) -> p_9(Vincenzo))."
                ],
                "formulas(goals)": [
                    "p_9(Vincenzo) <-> p_3(Vincenzo)."
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "\u00acp_9(Vincenzo)"
                ],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "(p_3(Vincenzo) \u2192 p_9(Vincenzo))"
                ]
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_7(Vincenzo)\n\u00acp_8(Vincenzo)\n\u00acp_5(Vincenzo)\np_6(Vincenzo)\np_4(Vincenzo)\n\u00acp_2(Vincenzo)\n\u00acp_1(Vincenzo)\n\u00acp_0(Vincenzo)\np_3(Vincenzo)\n\u2200x ((p_7(x) \u2227 p_15(x)) \u2192 p_8(x))\n(p_5(Vincenzo) \u2192 (p_6(Vincenzo) \u2227 p_11(Vincenzo)))\n((p_4(Vincenzo) \u2295 p_15(Vincenzo)) \u2192 p_14(Vincenzo))\n(\u00acp_15(Vincenzo) \u2192 p_14(Vincenzo))\n\u2200x ((p_13(x) \u2227 p_14(x)) \u2192 p_2(x))\n(p_12(Vincenzo) \u2192 (p_13(Vincenzo) \u2227 p_1(Vincenzo)))\n((p_11(Vincenzo) \u2228 p_10(Vincenzo)) \u2192 p_12(Vincenzo))\n\u2200x (p_9(x) \u2192 (p_10(x) \u2228 p_0(x)))\n\u00acp_9(Vincenzo)",
            "Initial Goal": "p_9(Vincenzo) \u2295 p_3(Vincenzo)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_7(Vincenzo).",
                    "-p_8(Vincenzo).",
                    "-p_5(Vincenzo).",
                    "p_6(Vincenzo).",
                    "p_4(Vincenzo).",
                    "-p_2(Vincenzo).",
                    "-p_1(Vincenzo).",
                    "-p_0(Vincenzo).",
                    "p_3(Vincenzo).",
                    "all x ((p_7(x) & p_15(x)) -> p_8(x)).",
                    "(p_5(Vincenzo) -> (p_6(Vincenzo) & p_11(Vincenzo))).",
                    "(-(p_4(Vincenzo) <-> p_15(Vincenzo))) -> p_14(Vincenzo).",
                    "(-p_15(Vincenzo) -> p_14(Vincenzo)).",
                    "all x ((p_13(x) & p_14(x)) -> p_2(x)).",
                    "(p_12(Vincenzo) -> (p_13(Vincenzo) & p_1(Vincenzo))).",
                    "((p_11(Vincenzo) | p_10(Vincenzo)) -> p_12(Vincenzo)).",
                    "all x (p_9(x) -> (p_10(x) | p_0(x))).",
                    "-p_9(Vincenzo)."
                ],
                "formulas(goals)": [
                    "-(p_9(Vincenzo) <-> p_3(Vincenzo))."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "(p_3(Vincenzo) \u2192 p_9(Vincenzo))"
                ],
                "added_facts": [
                    "\u00acp_9(Vincenzo)"
                ],
                "added_rules": []
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_7(Vincenzo)\n\u00acp_8(Vincenzo)\n\u00acp_5(Vincenzo)\np_6(Vincenzo)\np_4(Vincenzo)\n\u00acp_2(Vincenzo)\n\u00acp_1(Vincenzo)\n\u00acp_0(Vincenzo)\np_3(Vincenzo)\n\u2200x ((p_7(x) \u2227 p_15(x)) \u2192 p_8(x))\n((p_5(Vincenzo) \u2192 p_6(Vincenzo)) \u2227 (p_5(Vincenzo) \u2192 p_11(Vincenzo)))\n((p_4(Vincenzo) \u2295 p_15(Vincenzo)) \u2192 p_14(Vincenzo))\n(\u00acp_15(Vincenzo) \u2192 p_14(Vincenzo))\n\u2200x ((p_13(x) \u2227 p_14(x)) \u2192 p_2(x))\n(p_12(Vincenzo) \u2192 (p_13(Vincenzo) \u2227 p_1(Vincenzo)))\n((p_11(Vincenzo) \u2228 p_10(Vincenzo)) \u2192 p_12(Vincenzo))\n\u2200x (p_9(x) \u2192 (p_10(x) \u2228 p_0(x)))\n\u00acp_9(Vincenzo)\n(p_3(Vincenzo) \u2228 p_9(Vincenzo))\n(p_9(Vincenzo) \u2192 p_2(Vincenzo))",
            "Initial Goal": "p_9(Vincenzo) \u2295 p_3(Vincenzo)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_7(Vincenzo)",
                    "-p_8(Vincenzo)",
                    "-p_5(Vincenzo)",
                    "p_6(Vincenzo)",
                    "p_4(Vincenzo)",
                    "-p_2(Vincenzo)",
                    "-p_1(Vincenzo)",
                    "-p_0(Vincenzo)",
                    "p_3(Vincenzo)",
                    "all x ((p_7(x) & p_15(x)) -> p_8(x))",
                    "((p_5(Vincenzo) -> p_6(Vincenzo)) & (p_5(Vincenzo) -> p_11(Vincenzo)))",
                    "((-(p_4(Vincenzo) <-> p_15(Vincenzo))) -> p_14(Vincenzo))",
                    "(-p_15(Vincenzo) -> p_14(Vincenzo))",
                    "all x ((p_13(x) & p_14(x)) -> p_2(x))",
                    "(p_12(Vincenzo) -> (p_13(Vincenzo) & p_1(Vincenzo)))",
                    "((p_11(Vincenzo) | p_10(Vincenzo)) -> p_12(Vincenzo))",
                    "all x (p_9(x) -> (p_10(x) | p_0(x)))",
                    "-p_9(Vincenzo)",
                    "(p_3(Vincenzo) | p_9(Vincenzo))",
                    "(p_9(Vincenzo) -> p_2(Vincenzo))"
                ],
                "formulas(goals)": [
                    "-(p_9(Vincenzo) <-> p_3(Vincenzo))"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "(p_5(Vincenzo) \u2192 (p_6(Vincenzo) \u2227 p_11(Vincenzo)))"
                ],
                "added_facts": [
                    "(p_3(Vincenzo) \u2228 p_9(Vincenzo))"
                ],
                "added_rules": [
                    "(p_5(Vincenzo) \u2192 p_6(Vincenzo)) \u2227 (p_5(Vincenzo) \u2192 p_11(Vincenzo))",
                    "(p_9(Vincenzo) \u2192 p_2(Vincenzo))"
                ]
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_7(Vincenzo)\n\u00acp_8(Vincenzo)\n\u00acp_5(Vincenzo)\np_6(Vincenzo)\np_4(Vincenzo)\n\u00acp_2(Vincenzo)\n\u00acp_1(Vincenzo)\n\u00acp_0(Vincenzo)\np_3(Vincenzo)\n\u2200x ((p_7(x) \u2227 p_15(x)) \u2192 p_8(x))\n((p_5(Vincenzo) \u2192 p_6(Vincenzo)) \u2227 (p_5(Vincenzo) \u2192 p_11(Vincenzo)))\n((p_4(Vincenzo) \u2295 p_15(Vincenzo)) \u2192 p_14(Vincenzo))\n(\u00acp_15(Vincenzo) \u2192 p_14(Vincenzo))\n\u2200x ((p_13(x) \u2227 p_14(x)) \u2192 p_2(x))\n(p_12(Vincenzo) \u2192 (p_13(Vincenzo) \u2227 p_1(Vincenzo)))\n((p_11(Vincenzo) \u2228 p_10(Vincenzo)) \u2192 p_12(Vincenzo))\n(p_3(Vincenzo) \u2228 p_9(Vincenzo))\n((p_9(Vincenzo) \u2227 \u00acp_3(Vincenzo)) \u2192 p_2(Vincenzo))\n\u2200x ((p_9(x) \u2227 \u00acp_3(x)) \u2192 p_10(x) \u2228 p_0(x))\n(p_3(Vincenzo) \u2192 p_9(Vincenzo))",
            "Initial Goal": "p_9(Vincenzo) \u2295 p_3(Vincenzo)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_7(Vincenzo)",
                    "-p_8(Vincenzo)",
                    "-p_5(Vincenzo)",
                    "p_6(Vincenzo)",
                    "p_4(Vincenzo)",
                    "-p_2(Vincenzo)",
                    "-p_1(Vincenzo)",
                    "-p_0(Vincenzo)",
                    "p_3(Vincenzo)",
                    "all x ((p_7(x) & p_15(x)) -> p_8(x))",
                    "((p_5(Vincenzo) -> p_6(Vincenzo)) & (p_5(Vincenzo) -> p_11(Vincenzo)))",
                    "(-(p_4(Vincenzo) <-> p_15(Vincenzo)) -> p_14(Vincenzo))",
                    "(-p_15(Vincenzo) -> p_14(Vincenzo))",
                    "all x ((p_13(x) & p_14(x)) -> p_2(x))",
                    "(p_12(Vincenzo) -> (p_13(Vincenzo) & p_1(Vincenzo)))",
                    "((p_11(Vincenzo) | p_10(Vincenzo)) -> p_12(Vincenzo))",
                    "(p_3(Vincenzo) | p_9(Vincenzo))",
                    "((p_9(Vincenzo) & -p_3(Vincenzo)) -> p_2(Vincenzo))",
                    "all x ((p_9(x) & -p_3(x)) -> p_10(x) | p_0(x))",
                    "(p_3(Vincenzo) -> p_9(Vincenzo))"
                ],
                "formulas(goals)": [
                    "(p_9(Vincenzo) <-> p_3(Vincenzo))"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "\u00acp_9(Vincenzo)"
                ],
                "removed_rules": [
                    "\u2200x (p_9(x) \u2192 (p_10(x) \u2228 p_0(x)))",
                    "(p_9(Vincenzo) \u2192 p_2(Vincenzo))"
                ],
                "added_facts": [],
                "added_rules": [
                    "(p_3(Vincenzo) \u2192 p_9(Vincenzo))",
                    "((p_9(Vincenzo) \u2227 \u00acp_3(Vincenzo)) \u2192 p_2(Vincenzo))",
                    "\u2200x ((p_9(x) \u2227 \u00acp_3(x)) \u2192 (p_10(x) \u2228 p_0(x)))"
                ]
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_7(Vincenzo)\n\u00acp_8(Vincenzo)\n\u00acp_5(Vincenzo)\np_6(Vincenzo)\np_4(Vincenzo)\n\u00acp_2(Vincenzo)\n\u00acp_1(Vincenzo)\n\u00acp_0(Vincenzo)\np_3(Vincenzo)\n\u2200x ((p_7(x) \u2227 p_15(x)) \u2192 p_8(x))\np_5(Vincenzo) \u2192 (p_6(Vincenzo) \u2227 p_11(Vincenzo))\n((p_4(Vincenzo) \u2228 p_15(Vincenzo)) \u2227 \u00ac(p_4(Vincenzo) \u2227 p_15(Vincenzo))) \u2192 p_14(Vincenzo)\n(\u00acp_15(Vincenzo) \u2192 p_14(Vincenzo))\n\u2200x ((p_13(x) \u2227 p_14(x)) \u2192 p_2(x))\n(p_12(Vincenzo) \u2192 (p_13(Vincenzo) \u2227 p_1(Vincenzo)))\n((p_11(Vincenzo) \u2228 p_10(Vincenzo)) \u2192 p_12(Vincenzo))\n(p_3(Vincenzo) \u2228 p_9(Vincenzo))\n((p_9(Vincenzo) \u2227 \u00acp_3(Vincenzo)) \u2192 p_2(Vincenzo))\n\u2200x ((p_9(x) \u2227 \u00acp_3(x)) \u2192 p_10(x) \u2228 p_0(x))\n(p_3(Vincenzo) \u2192 p_9(Vincenzo))\n(\u00acp_9(Vincenzo) \u2192 \u00acp_3(Vincenzo))",
            "Initial Goal": "p_9(Vincenzo) \u2295 p_3(Vincenzo)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_7(Vincenzo)",
                    "-p_8(Vincenzo)",
                    "-p_5(Vincenzo)",
                    "p_6(Vincenzo)",
                    "p_4(Vincenzo)",
                    "-p_2(Vincenzo)",
                    "-p_1(Vincenzo)",
                    "-p_0(Vincenzo)",
                    "p_3(Vincenzo)",
                    "all x ((p_7(x) & p_15(x)) -> p_8(x))",
                    "p_5(Vincenzo) -> (p_6(Vincenzo) & p_11(Vincenzo))",
                    "((p_4(Vincenzo) | p_15(Vincenzo)) & -(p_4(Vincenzo) & p_15(Vincenzo))) -> p_14(Vincenzo)",
                    "(-p_15(Vincenzo) -> p_14(Vincenzo))",
                    "all x ((p_13(x) & p_14(x)) -> p_2(x))",
                    "(p_12(Vincenzo) -> (p_13(Vincenzo) & p_1(Vincenzo)))",
                    "((p_11(Vincenzo) | p_10(Vincenzo)) -> p_12(Vincenzo))",
                    "(p_3(Vincenzo) | p_9(Vincenzo))",
                    "((p_9(Vincenzo) & -p_3(Vincenzo)) -> p_2(Vincenzo))",
                    "all x ((p_9(x) & -p_3(x)) -> (p_10(x) | p_0(x)))",
                    "(p_3(Vincenzo) -> p_9(Vincenzo))",
                    "(-p_9(Vincenzo) -> -p_3(Vincenzo))"
                ],
                "formulas(goals)": [
                    "p_9(Vincenzo) <-> p_3(Vincenzo)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "((p_5(Vincenzo) \u2192 p_6(Vincenzo)) \u2227 (p_5(Vincenzo) \u2192 p_11(Vincenzo)))",
                    "(p_4(Vincenzo) \u2295 p_15(Vincenzo)) \u2192 p_14(Vincenzo)"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_5(Vincenzo) \u2192 (p_6(Vincenzo) \u2227 p_11(Vincenzo))",
                    "((p_4(Vincenzo) \u2228 p_15(Vincenzo)) \u2227 \u00ac(p_4(Vincenzo) \u2227 p_15(Vincenzo))) \u2192 p_14(Vincenzo)",
                    "\u00acp_9(Vincenzo) \u2192 \u00acp_3(Vincenzo)"
                ]
            }
        }
    ]
}