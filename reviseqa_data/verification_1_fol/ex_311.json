{
    "background_story": "Bunny, a small, furry opossum, had a unique feature - her allantoid placenta. As a marsupial, her reproductive system allowed her to nurture her young in a pouch, but the allantoid placenta provided her joeys with essential nutrients before they made their way to the safety of her pouch. This remarkable adaptation allowed Bunny to thrive in the competitive forest ecosystem. She roamed the woods, foraging for food and avoiding predators, always mindful of her precious cargo. As her joeys grew, they would venture out of the pouch, but return to Bunny for comfort and nourishment. Her allantoid placenta had given them the best possible start in life, and Bunny took pride in being a devoted and nurturing mother.",
    "predicates": [
        {
            "id": 0,
            "name": "cares_young"
        },
        {
            "id": 1,
            "name": "has_pouch"
        },
        {
            "id": 2,
            "name": "lives_long"
        },
        {
            "id": 3,
            "name": "stays_healthy"
        },
        {
            "id": 4,
            "name": "eats_fruits"
        },
        {
            "id": 5,
            "name": "runs_quick"
        },
        {
            "id": 6,
            "name": "is_hungry"
        },
        {
            "id": 7,
            "name": "marsupial"
        },
        {
            "id": 8,
            "name": "omnivore"
        },
        {
            "id": 9,
            "name": "nurturing"
        },
        {
            "id": 10,
            "name": "grows_fast"
        },
        {
            "id": 11,
            "name": "is_active"
        },
        {
            "id": 12,
            "name": "finds_food"
        },
        {
            "id": 13,
            "name": "has_claws"
        },
        {
            "id": 14,
            "name": "small_size"
        },
        {
            "id": 15,
            "name": "adaptable"
        },
        {
            "id": 16,
            "name": "feeds_young"
        },
        {
            "id": 17,
            "name": "matures_early"
        },
        {
            "id": 18,
            "name": "rests_regularly"
        },
        {
            "id": 19,
            "name": "lives_forest"
        },
        {
            "id": 20,
            "name": "evades_predators"
        }
    ],
    "subject_name": "Bunny",
    "subject_category": "animal",
    "keyword": "allantoid",
    "all_facts": [
        {
            "id": 0,
            "subject": "Bunny",
            "text": "Bunny does not care for her young.",
            "fol": "\u00acp_0(Bunny)",
            "str_fol": "\u00accares_young(Bunny)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Bunny",
            "text": "Bunny does not have a pouch.",
            "fol": "\u00acp_1(Bunny)",
            "str_fol": "\u00achas_pouch(Bunny)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Bunny",
            "text": "Bunny does not live long.",
            "fol": "\u00acp_2(Bunny)",
            "str_fol": "\u00aclives_long(Bunny)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Bunny",
            "text": "Bunny does not stay healthy.",
            "fol": "\u00acp_3(Bunny)",
            "str_fol": "\u00acstays_healthy(Bunny)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Bunny",
            "text": "Bunny eats fruits.",
            "fol": "p_4(Bunny)",
            "str_fol": "eats_fruits(Bunny)",
            "negation": false
        },
        {
            "id": 5,
            "subject": "Bunny",
            "text": "Bunny does not run quickly.",
            "fol": "\u00acp_5(Bunny)",
            "str_fol": "\u00acruns_quick(Bunny)",
            "negation": true
        },
        {
            "id": 6,
            "subject": "Bunny",
            "text": "Bunny is not hungry.",
            "fol": "\u00acp_6(Bunny)",
            "str_fol": "\u00acis_hungry(Bunny)",
            "negation": true
        },
        {
            "id": 7,
            "subject": "Bunny",
            "text": "Bunny does not find food.",
            "fol": "\u00acp_12(Bunny)",
            "str_fol": "\u00acfinds_food(Bunny)",
            "negation": true
        },
        {
            "id": 8,
            "subject": "Bunny",
            "text": "Bunny is not active.",
            "fol": "\u00acp_11(Bunny)",
            "str_fol": "\u00acis_active(Bunny)",
            "negation": true
        },
        {
            "id": 9,
            "subject": "Bunny",
            "text": "Bunny does not grow fast.",
            "fol": "\u00acp_10(Bunny)",
            "str_fol": "\u00acgrows_fast(Bunny)",
            "negation": true
        },
        {
            "id": 10,
            "subject": "Bunny",
            "text": "Bunny is not nurturing.",
            "fol": "\u00acp_9(Bunny)",
            "str_fol": "\u00acnurturing(Bunny)",
            "negation": true
        },
        {
            "id": 11,
            "subject": "Bunny",
            "text": "Bunny is not an omnivore.",
            "fol": "\u00acp_8(Bunny)",
            "str_fol": "\u00acomnivore(Bunny)",
            "negation": true
        },
        {
            "id": 12,
            "subject": "Bunny",
            "text": "Bunny is not a marsupial.",
            "fol": "\u00acp_7(Bunny)",
            "str_fol": "\u00acmarsupial(Bunny)",
            "negation": true
        },
        {
            "id": 13,
            "subject": "Bunny",
            "text": "Bunny is a marsupial, or an omnivore, or nurturing.",
            "fol": "p_7(Bunny) \u2228 (omnivore(Bunny) \u2228 nurturing(Bunny))",
            "str_fol": "marsupial(Bunny) \u2228 (omnivore(Bunny) \u2228 nurturing(Bunny))",
            "negation": false
        }
    ],
    "context_facts": [
        {
            "id": 6,
            "subject": "Bunny",
            "text": "Bunny is not hungry.",
            "fol": "\u00acp_6(Bunny)",
            "str_fol": "\u00acis_hungry(Bunny)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Bunny",
            "text": "Bunny does not run quickly.",
            "fol": "\u00acp_5(Bunny)",
            "str_fol": "\u00acruns_quick(Bunny)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Bunny",
            "text": "Bunny does not live long.",
            "fol": "\u00acp_2(Bunny)",
            "str_fol": "\u00aclives_long(Bunny)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Bunny",
            "text": "Bunny eats fruits.",
            "fol": "p_4(Bunny)",
            "str_fol": "eats_fruits(Bunny)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Bunny",
            "text": "Bunny does not stay healthy.",
            "fol": "\u00acp_3(Bunny)",
            "str_fol": "\u00acstays_healthy(Bunny)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Bunny",
            "text": "Bunny does not have a pouch.",
            "fol": "\u00acp_1(Bunny)",
            "str_fol": "\u00achas_pouch(Bunny)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Bunny",
            "text": "Bunny does not care for her young.",
            "fol": "\u00acp_0(Bunny)",
            "str_fol": "\u00accares_young(Bunny)",
            "negation": true
        }
    ],
    "context_rules": [
        {
            "id": 5,
            "text": "If Bunny finds food, then she is hungry.",
            "fol": "p_12(Bunny) \u2192 p_6(Bunny)",
            "str_fol": "finds_food(Bunny) \u2192 is_hungry(Bunny)"
        },
        {
            "id": 4,
            "text": "If Bunny is either active or runs quickly (but not both), then she is able to find food.",
            "fol": "(p_11(Bunny) \u2295 p_5(Bunny)) \u2192 p_12(Bunny)",
            "str_fol": "(is_active(Bunny) \u2295 runs_quick(Bunny)) \u2192 finds_food(Bunny)"
        },
        {
            "id": 3,
            "text": "If Bunny grows fast, then she is active.",
            "fol": "p_10(Bunny) \u2192 p_11(Bunny)",
            "str_fol": "grows_fast(Bunny) \u2192 is_active(Bunny)"
        },
        {
            "id": 2,
            "text": "If Bunny is nurturing, then she either lives long or grows fast, but not both.",
            "fol": "p_9(Bunny) \u2192 (p_2(Bunny) \u2295 p_10(Bunny))",
            "str_fol": "nurturing(Bunny) \u2192 (lives_long(Bunny) \u2295 grows_fast(Bunny))"
        },
        {
            "id": 1,
            "text": "If Bunny is an omnivore and eats fruits, then she stays healthy.",
            "fol": "(p_8(Bunny) \u2227 p_4(Bunny)) \u2192 p_3(Bunny)",
            "str_fol": "(omnivore(Bunny) \u2227 eats_fruits(Bunny)) \u2192 stays_healthy(Bunny)"
        },
        {
            "id": 0,
            "text": "If Bunny is either a marsupial or has a pouch (but not both), then she cares for her young.",
            "fol": "(p_7(Bunny) \u2295 p_1(Bunny)) \u2192 p_0(Bunny)",
            "str_fol": "(marsupial(Bunny) \u2295 has_pouch(Bunny)) \u2192 cares_young(Bunny)"
        }
    ],
    "context": [
        {
            "id": 6,
            "subject": "Bunny",
            "text": "Bunny is not hungry.",
            "fol": "\u00acp_6(Bunny)",
            "str_fol": "\u00acis_hungry(Bunny)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Bunny",
            "text": "Bunny does not run quickly.",
            "fol": "\u00acp_5(Bunny)",
            "str_fol": "\u00acruns_quick(Bunny)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Bunny",
            "text": "Bunny does not live long.",
            "fol": "\u00acp_2(Bunny)",
            "str_fol": "\u00aclives_long(Bunny)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Bunny",
            "text": "Bunny eats fruits.",
            "fol": "p_4(Bunny)",
            "str_fol": "eats_fruits(Bunny)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Bunny",
            "text": "Bunny does not stay healthy.",
            "fol": "\u00acp_3(Bunny)",
            "str_fol": "\u00acstays_healthy(Bunny)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Bunny",
            "text": "Bunny does not have a pouch.",
            "fol": "\u00acp_1(Bunny)",
            "str_fol": "\u00achas_pouch(Bunny)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Bunny",
            "text": "Bunny does not care for her young.",
            "fol": "\u00acp_0(Bunny)",
            "str_fol": "\u00accares_young(Bunny)",
            "negation": true
        },
        {
            "id": 5,
            "text": "If Bunny finds food, then she is hungry.",
            "fol": "p_12(Bunny) \u2192 p_6(Bunny)",
            "str_fol": "finds_food(Bunny) \u2192 is_hungry(Bunny)"
        },
        {
            "id": 4,
            "text": "If Bunny is either active or runs quickly (but not both), then she is able to find food.",
            "fol": "(p_11(Bunny) \u2295 p_5(Bunny)) \u2192 p_12(Bunny)",
            "str_fol": "(is_active(Bunny) \u2295 runs_quick(Bunny)) \u2192 finds_food(Bunny)"
        },
        {
            "id": 3,
            "text": "If Bunny grows fast, then she is active.",
            "fol": "p_10(Bunny) \u2192 p_11(Bunny)",
            "str_fol": "grows_fast(Bunny) \u2192 is_active(Bunny)"
        },
        {
            "id": 2,
            "text": "If Bunny is nurturing, then she either lives long or grows fast, but not both.",
            "fol": "p_9(Bunny) \u2192 (p_2(Bunny) \u2295 p_10(Bunny))",
            "str_fol": "nurturing(Bunny) \u2192 (lives_long(Bunny) \u2295 grows_fast(Bunny))"
        },
        {
            "id": 1,
            "text": "If Bunny is an omnivore and eats fruits, then she stays healthy.",
            "fol": "(p_8(Bunny) \u2227 p_4(Bunny)) \u2192 p_3(Bunny)",
            "str_fol": "(omnivore(Bunny) \u2227 eats_fruits(Bunny)) \u2192 stays_healthy(Bunny)"
        },
        {
            "id": 0,
            "text": "If Bunny is either a marsupial or has a pouch (but not both), then she cares for her young.",
            "fol": "(p_7(Bunny) \u2295 p_1(Bunny)) \u2192 p_0(Bunny)",
            "str_fol": "(marsupial(Bunny) \u2295 has_pouch(Bunny)) \u2192 cares_young(Bunny)"
        }
    ],
    "context_fol": "\u00acp_6(Bunny)\n\u00acp_5(Bunny)\n\u00acp_2(Bunny)\np_4(Bunny)\n\u00acp_3(Bunny)\n\u00acp_1(Bunny)\n\u00acp_0(Bunny)\np_12(Bunny) \u2192 p_6(Bunny)\n(p_11(Bunny) \u2295 p_5(Bunny)) \u2192 p_12(Bunny)\np_10(Bunny) \u2192 p_11(Bunny)\np_9(Bunny) \u2192 (p_2(Bunny) \u2295 p_10(Bunny))\n(p_8(Bunny) \u2227 p_4(Bunny)) \u2192 p_3(Bunny)\n(p_7(Bunny) \u2295 p_1(Bunny)) \u2192 p_0(Bunny)",
    "conclusion": {
        "id": 12,
        "text": "Bunny is a marsupial, or an omnivore, or nurturing.",
        "fol": "p_7(Bunny) \u2228 (p_8(Bunny) \u2228 p_9(Bunny))",
        "str_fol": "marsupial(Bunny) \u2228 (omnivore(Bunny) \u2228 nurturing(Bunny))"
    },
    "initial_answer": "False",
    "initial_goal": "p_7(Bunny) \u2228 (p_8(Bunny) \u2228 p_9(Bunny))",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 6,
                    "subject": "Bunny",
                    "text": "Bunny is not hungry.",
                    "fol": "\u00acp_6(Bunny)",
                    "str_fol": "\u00acis_hungry(Bunny)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "If Bunny finds food, then she is hungry.",
                    "fol": "p_12(Bunny) \u2192 p_6(Bunny)",
                    "str_fol": "finds_food(Bunny) \u2192 is_hungry(Bunny)"
                }
            ],
            "conclusion": {
                "id": 7,
                "subject": "Bunny",
                "text": "Bunny does not find food.",
                "fol": "\u00acp_12(Bunny)",
                "str_fol": "\u00acfinds_food(Bunny)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 5,
                    "subject": "Bunny",
                    "text": "Bunny does not run quickly.",
                    "fol": "\u00acp_5(Bunny)",
                    "str_fol": "\u00acruns_quick(Bunny)",
                    "negation": true
                },
                {
                    "id": 7,
                    "subject": "Bunny",
                    "text": "Bunny does not find food.",
                    "fol": "\u00acp_12(Bunny)",
                    "str_fol": "\u00acfinds_food(Bunny)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "If Bunny is either active or runs quickly (but not both), then she is able to find food.",
                    "fol": "(p_11(Bunny) \u2295 p_5(Bunny)) \u2192 p_12(Bunny)",
                    "str_fol": "(is_active(Bunny) \u2295 runs_quick(Bunny)) \u2192 finds_food(Bunny)"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Bunny",
                "text": "Bunny is not active.",
                "fol": "\u00acp_11(Bunny)",
                "str_fol": "\u00acis_active(Bunny)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 8,
                    "subject": "Bunny",
                    "text": "Bunny is not active.",
                    "fol": "\u00acp_11(Bunny)",
                    "str_fol": "\u00acis_active(Bunny)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "If Bunny grows fast, then she is active.",
                    "fol": "p_10(Bunny) \u2192 p_11(Bunny)",
                    "str_fol": "grows_fast(Bunny) \u2192 is_active(Bunny)"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Bunny",
                "text": "Bunny does not grow fast.",
                "fol": "\u00acp_10(Bunny)",
                "str_fol": "\u00acgrows_fast(Bunny)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 2,
                    "subject": "Bunny",
                    "text": "Bunny does not live long.",
                    "fol": "\u00acp_2(Bunny)",
                    "str_fol": "\u00aclives_long(Bunny)",
                    "negation": true
                },
                {
                    "id": 9,
                    "subject": "Bunny",
                    "text": "Bunny does not grow fast.",
                    "fol": "\u00acp_10(Bunny)",
                    "str_fol": "\u00acgrows_fast(Bunny)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "If Bunny is nurturing, then she either lives long or grows fast, but not both.",
                    "fol": "p_9(Bunny) \u2192 (p_2(Bunny) \u2295 p_10(Bunny))",
                    "str_fol": "nurturing(Bunny) \u2192 (lives_long(Bunny) \u2295 grows_fast(Bunny))"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Bunny",
                "text": "Bunny is not nurturing.",
                "fol": "\u00acp_9(Bunny)",
                "str_fol": "\u00acnurturing(Bunny)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 4,
                    "subject": "Bunny",
                    "text": "Bunny eats fruits.",
                    "fol": "p_4(Bunny)",
                    "str_fol": "eats_fruits(Bunny)",
                    "negation": false
                },
                {
                    "id": 3,
                    "subject": "Bunny",
                    "text": "Bunny does not stay healthy.",
                    "fol": "\u00acp_3(Bunny)",
                    "str_fol": "\u00acstays_healthy(Bunny)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "If Bunny is an omnivore and eats fruits, then she stays healthy.",
                    "fol": "(p_8(Bunny) \u2227 p_4(Bunny)) \u2192 p_3(Bunny)",
                    "str_fol": "(omnivore(Bunny) \u2227 eats_fruits(Bunny)) \u2192 stays_healthy(Bunny)"
                }
            ],
            "conclusion": {
                "id": 11,
                "subject": "Bunny",
                "text": "Bunny is not an omnivore.",
                "fol": "\u00acp_8(Bunny)",
                "str_fol": "\u00acomnivore(Bunny)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 1,
                    "subject": "Bunny",
                    "text": "Bunny does not have a pouch.",
                    "fol": "\u00acp_1(Bunny)",
                    "str_fol": "\u00achas_pouch(Bunny)",
                    "negation": true
                },
                {
                    "id": 0,
                    "subject": "Bunny",
                    "text": "Bunny does not care for her young.",
                    "fol": "\u00acp_0(Bunny)",
                    "str_fol": "\u00accares_young(Bunny)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "If Bunny is either a marsupial or has a pouch (but not both), then she cares for her young.",
                    "fol": "(p_7(Bunny) \u2295 p_1(Bunny)) \u2192 p_0(Bunny)",
                    "str_fol": "(marsupial(Bunny) \u2295 has_pouch(Bunny)) \u2192 cares_young(Bunny)"
                }
            ],
            "conclusion": {
                "id": 12,
                "subject": "Bunny",
                "text": "Bunny is not a marsupial.",
                "fol": "\u00acp_7(Bunny)",
                "str_fol": "\u00acmarsupial(Bunny)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 12,
                    "subject": "Bunny",
                    "text": "Bunny is not a marsupial.",
                    "fol": "\u00acp_7(Bunny)",
                    "str_fol": "\u00acmarsupial(Bunny)",
                    "negation": true
                },
                {
                    "id": 11,
                    "subject": "Bunny",
                    "text": "Bunny is not an omnivore.",
                    "fol": "\u00acp_8(Bunny)",
                    "str_fol": "\u00acomnivore(Bunny)",
                    "negation": true
                },
                {
                    "id": 10,
                    "subject": "Bunny",
                    "text": "Bunny is not nurturing.",
                    "fol": "\u00acp_9(Bunny)",
                    "str_fol": "\u00acnurturing(Bunny)",
                    "negation": true
                }
            ],
            "rules": [],
            "conclusion": {
                "id": 12,
                "text": "Bunny is a marsupial, or an omnivore, or nurturing.",
                "fol": "p_7(Bunny) \u2228 (p_8(Bunny) \u2228 p_9(Bunny))",
                "str_fol": "marsupial(Bunny) \u2228 (omnivore(Bunny) \u2228 nurturing(Bunny))"
            }
        }
    ],
    "proof_trace": "1 p_12(Bunny) -> p_6(Bunny).  [assumption].\n2 -(p_11(Bunny) <-> p_5(Bunny)) -> p_12(Bunny).  [assumption].\n3 p_10(Bunny) -> p_11(Bunny).  [assumption].\n4 p_9(Bunny) -> -(p_2(Bunny) <-> p_10(Bunny)).  [assumption].\n5 p_8(Bunny) & p_4(Bunny) -> p_3(Bunny).  [assumption].\n6 -(p_7(Bunny) <-> p_1(Bunny)) -> p_0(Bunny).  [assumption].\n7 -(p_7(Bunny) | p_8(Bunny) | p_9(Bunny)).  [goal].\n8 -p_12(Bunny) | p_6(Bunny).  [clausify(1)].\n9 -p_6(Bunny).  [assumption].\n10 -p_11(Bunny) | p_5(Bunny) | p_12(Bunny).  [clausify(2)].\n11 -p_5(Bunny).  [assumption].\n13 -p_9(Bunny) | p_2(Bunny) | p_10(Bunny).  [clausify(4)].\n14 -p_2(Bunny).  [assumption].\n16 -p_8(Bunny) | -p_4(Bunny) | p_3(Bunny).  [clausify(5)].\n17 p_4(Bunny).  [assumption].\n18 -p_8(Bunny) | p_3(Bunny).  [resolve(16,b,17,a)].\n19 -p_3(Bunny).  [assumption].\n20 -p_7(Bunny) | p_1(Bunny) | p_0(Bunny).  [clausify(6)].\n21 -p_1(Bunny).  [assumption].\n23 -p_7(Bunny) | p_0(Bunny).  [resolve(20,b,21,a)].\n24 -p_0(Bunny).  [assumption].\n25 -p_9(Bunny) | p_10(Bunny).  [resolve(13,b,14,a)].\n26 -p_10(Bunny) | p_11(Bunny).  [clausify(3)].\n27 -p_7(Bunny).  [resolve(23,b,24,a)].\n28 p_7(Bunny) | p_8(Bunny) | p_9(Bunny).  [deny(7)].\n29 -p_11(Bunny) | p_12(Bunny).  [resolve(10,b,11,a)].\n30 -p_12(Bunny).  [resolve(8,b,9,a)].\n31 p_8(Bunny) | p_9(Bunny).  [resolve(27,a,28,a)].\n32 -p_8(Bunny).  [resolve(18,b,19,a)].\n33 p_9(Bunny).  [resolve(31,a,32,a)].\n34 -p_9(Bunny) | p_11(Bunny).  [resolve(25,b,26,a)].\n35 p_11(Bunny).  [resolve(33,a,34,a)].\n36 -p_11(Bunny).  [resolve(29,b,30,a)].\n37 $F.  [resolve(35,a,36,a)].",
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_6(Bunny)\n\u00acp_5(Bunny)\n\u00acp_2(Bunny)\np_4(Bunny)\n\u00acp_3(Bunny)\n\u00acp_1(Bunny)\n\u00acp_0(Bunny)\np_12(Bunny) \u2192 p_6(Bunny)\n(p_11(Bunny) \u2295 p_5(Bunny)) \u2192 p_12(Bunny)\np_10(Bunny) \u2192 p_11(Bunny)\np_9(Bunny) \u2192 (p_2(Bunny) \u2295 p_10(Bunny))\n(p_8(Bunny) \u2227 p_4(Bunny)) \u2192 p_3(Bunny)\n\u00acp_11(Bunny) \u2192 p_7(Bunny)",
            "Initial Goal": "p_7(Bunny) \u2228 (p_8(Bunny) \u2228 p_9(Bunny))",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_6(Bunny)",
                    "-p_5(Bunny)",
                    "-p_2(Bunny)",
                    "p_4(Bunny)",
                    "-p_3(Bunny)",
                    "-p_1(Bunny)",
                    "-p_0(Bunny)",
                    "p_12(Bunny) -> p_6(Bunny)",
                    "(-(p_11(Bunny) <-> p_5(Bunny))) -> p_12(Bunny)",
                    "p_10(Bunny) -> p_11(Bunny)",
                    "p_9(Bunny) -> (-(p_2(Bunny) <-> p_10(Bunny)))",
                    "(p_8(Bunny) & p_4(Bunny)) -> p_3(Bunny)",
                    "-p_11(Bunny) -> p_7(Bunny)"
                ],
                "formulas(goals)": [
                    "p_7(Bunny) | p_8(Bunny) | p_9(Bunny)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "(p_7(Bunny) \u2295 p_1(Bunny)) \u2192 p_0(Bunny)"
                ],
                "added_facts": [],
                "added_rules": [
                    "\u00acp_11(Bunny) \u2192 p_7(Bunny)"
                ]
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_6(Bunny)\n\u00acp_5(Bunny)\n\u00acp_2(Bunny)\np_4(Bunny)\n\u00acp_3(Bunny)\n\u00acp_1(Bunny)\n\u00acp_0(Bunny)\np_12(Bunny) \u2192 p_6(Bunny)\np_11(Bunny) \u2192 p_12(Bunny)\np_10(Bunny) \u2192 p_11(Bunny)\np_9(Bunny) \u2192 (p_2(Bunny) \u2295 p_10(Bunny))\n(p_8(Bunny) \u2227 p_4(Bunny)) \u2192 p_3(Bunny)\n\u00acp_11(Bunny) \u2192 p_7(Bunny)\n\u00acp_11(Bunny)\np_7(Bunny)\n\u00acp_12(Bunny)",
            "Initial Goal": "p_7(Bunny) \u2228 (p_8(Bunny) \u2228 p_9(Bunny))",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_6(Bunny).",
                    "-p_5(Bunny).",
                    "-p_2(Bunny).",
                    "p_4(Bunny).",
                    "-p_3(Bunny).",
                    "-p_1(Bunny).",
                    "-p_0(Bunny).",
                    "p_12(Bunny) -> p_6(Bunny).",
                    "p_11(Bunny) -> p_12(Bunny).",
                    "p_10(Bunny) -> p_11(Bunny).",
                    "p_9(Bunny) -> (-(p_2(Bunny) <-> p_10(Bunny))).",
                    "(p_8(Bunny) & p_4(Bunny)) -> p_3(Bunny).",
                    "-p_11(Bunny) -> p_7(Bunny).",
                    "-p_11(Bunny).",
                    "p_7(Bunny).",
                    "-p_12(Bunny)."
                ],
                "formulas(goals)": [
                    "p_7(Bunny) | (p_8(Bunny) | p_9(Bunny))."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "(p_11(Bunny) \u2295 p_5(Bunny)) \u2192 p_12(Bunny)"
                ],
                "added_facts": [
                    "\u00acp_11(Bunny)",
                    "p_7(Bunny)",
                    "\u00acp_12(Bunny)"
                ],
                "added_rules": [
                    "p_11(Bunny) \u2192 p_12(Bunny)"
                ]
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_6(Bunny)\n\u00acp_5(Bunny)\n\u00acp_2(Bunny)\np_4(Bunny)\n\u00acp_3(Bunny)\n\u00acp_1(Bunny)\n\u00acp_0(Bunny)\np_12(Bunny) \u2192 p_6(Bunny)\n\u00acp_6(Bunny) \u2192 \u00acp_12(Bunny)\np_11(Bunny) \u2192 p_12(Bunny)\np_10(Bunny) \u2192 p_11(Bunny)\n\u00acp_11(Bunny) \u2192 \u00acp_10(Bunny)\np_9(Bunny) \u2192 (p_2(Bunny) \u2295 p_10(Bunny))\n(p_8(Bunny) \u2227 p_4(Bunny)) \u2192 p_3(Bunny)\n\u00acp_8(Bunny) \u2228 \u00acp_4(Bunny) \u2228 p_3(Bunny)\n\u00acp_11(Bunny) \u2192 p_7(Bunny)\n\u00acp_11(Bunny)\np_7(Bunny)\n\u00acp_12(Bunny)\n\u00acp_10(Bunny)",
            "Initial Goal": "p_7(Bunny) \u2228 (p_8(Bunny) \u2228 p_9(Bunny))",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_6(Bunny)",
                    "-p_5(Bunny)",
                    "-p_2(Bunny)",
                    "p_4(Bunny)",
                    "-p_3(Bunny)",
                    "-p_1(Bunny)",
                    "-p_0(Bunny)",
                    "p_12(Bunny) -> p_6(Bunny)",
                    "-p_6(Bunny) -> -p_12(Bunny)",
                    "p_11(Bunny) -> p_12(Bunny)",
                    "p_10(Bunny) -> p_11(Bunny)",
                    "-p_11(Bunny) -> -p_10(Bunny)",
                    "p_9(Bunny) -> (-(p_2(Bunny) <-> p_10(Bunny)))",
                    "(p_8(Bunny) & p_4(Bunny)) -> p_3(Bunny)",
                    "-p_8(Bunny) | -p_4(Bunny) | p_3(Bunny)",
                    "-p_11(Bunny) -> p_7(Bunny)",
                    "-p_11(Bunny)",
                    "p_7(Bunny)",
                    "-p_12(Bunny)",
                    "-p_10(Bunny)"
                ],
                "formulas(goals)": [
                    "p_7(Bunny) | p_8(Bunny) | p_9(Bunny)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "\u00acp_10(Bunny)",
                    "\u00acp_6(Bunny) \u2192 \u00acp_12(Bunny)",
                    "\u00acp_11(Bunny) \u2192 \u00acp_10(Bunny)",
                    "\u00acp_8(Bunny) \u2228 \u00acp_4(Bunny) \u2228 p_3(Bunny)"
                ],
                "added_rules": []
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_6(Bunny).\n\u00acp_5(Bunny).\n\u00acp_2(Bunny).\np_4(Bunny).\n\u00acp_3(Bunny).\n\u00acp_1(Bunny).\n\u00acp_0(Bunny).\np_12(Bunny) \u2192 p_6(Bunny).\n\u00acp_6(Bunny) \u2192 \u00acp_12(Bunny).\np_11(Bunny) \u2192 p_12(Bunny).\np_10(Bunny) \u2192 p_11(Bunny).\n\u00acp_11(Bunny) \u2192 \u00acp_10(Bunny).\np_9(Bunny) \u2192 (p_2(Bunny) \u2295 p_10(Bunny)).\n(p_8(Bunny) \u2227 p_4(Bunny)) \u2192 p_3(Bunny).\n(\u00acp_8(Bunny) \u2228 \u00acp_4(Bunny) \u2228 p_3(Bunny)).\n\u00acp_11(Bunny) \u2192 \u00acp_7(Bunny).\n\u00acp_11(Bunny).\n\u00acp_12(Bunny).\n\u00acp_10(Bunny).",
            "Initial Goal": "p_7(Bunny) \u2228 (p_8(Bunny) \u2228 p_9(Bunny))",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "- p_6(Bunny).",
                    "- p_5(Bunny).",
                    "- p_2(Bunny).",
                    "p_4(Bunny).",
                    "- p_3(Bunny).",
                    "- p_1(Bunny).",
                    "- p_0(Bunny).",
                    "p_12(Bunny) -> p_6(Bunny).",
                    "- p_6(Bunny) -> - p_12(Bunny).",
                    "p_11(Bunny) -> p_12(Bunny).",
                    "p_10(Bunny) -> p_11(Bunny).",
                    "- p_11(Bunny) -> - p_10(Bunny).",
                    "p_9(Bunny) -> (- (p_2(Bunny) <-> p_10(Bunny))).",
                    "(p_8(Bunny) & p_4(Bunny)) -> p_3(Bunny).",
                    "(- p_8(Bunny) | - p_4(Bunny) | p_3(Bunny)).",
                    "- p_11(Bunny) -> - p_7(Bunny).",
                    "- p_11(Bunny).",
                    "- p_12(Bunny).",
                    "- p_10(Bunny)."
                ],
                "formulas(goals)": [
                    "- (p_7(Bunny) | (p_8(Bunny) | p_9(Bunny)))."
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "p_7(Bunny)"
                ],
                "removed_rules": [
                    "\u00acp_11(Bunny) \u2192 p_7(Bunny)"
                ],
                "added_facts": [],
                "added_rules": [
                    "\u00acp_11(Bunny) \u2192 \u00acp_7(Bunny)"
                ]
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_6(Bunny)\n\u00acp_5(Bunny)\n\u00acp_2(Bunny)\np_4(Bunny)\n\u00acp_3(Bunny)\n\u00acp_1(Bunny)\n\u00acp_0(Bunny)\np_12(Bunny) \u2192 p_6(Bunny)\n\u00acp_6(Bunny) \u2192 \u00acp_12(Bunny)\np_11(Bunny) \u2192 p_12(Bunny)\n\u00acp_12(Bunny) \u2192 \u00acp_11(Bunny)\np_10(Bunny) \u2192 p_11(Bunny)\n\u00acp_11(Bunny) \u2192 \u00acp_10(Bunny)\np_9(Bunny) \u2192 (p_2(Bunny) \u2295 p_10(Bunny))\np_9(Bunny) \u2192 (p_2(Bunny) \u2228 p_10(Bunny))\np_9(Bunny) \u2192 \u00ac(p_2(Bunny) \u2227 p_10(Bunny))\n(p_8(Bunny) \u2227 p_4(Bunny)) \u2192 p_3(Bunny)\n\u00acp_8(Bunny) \u2228 \u00acp_4(Bunny) \u2228 p_3(Bunny)\n\u00acp_11(Bunny) \u2192 \u00acp_7(Bunny)\n\u00acp_11(Bunny)\n\u00acp_12(Bunny)\n\u00acp_10(Bunny)\n\u00acp_8(Bunny)\n\u00acp_9(Bunny)",
            "Initial Goal": "p_7(Bunny) \u2228 (p_8(Bunny) \u2228 p_9(Bunny))",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_6(Bunny).",
                    "-p_5(Bunny).",
                    "-p_2(Bunny).",
                    "p_4(Bunny).",
                    "-p_3(Bunny).",
                    "-p_1(Bunny).",
                    "-p_0(Bunny).",
                    "p_12(Bunny) -> p_6(Bunny).",
                    "-p_6(Bunny) -> -p_12(Bunny).",
                    "p_11(Bunny) -> p_12(Bunny).",
                    "-p_12(Bunny) -> -p_11(Bunny).",
                    "p_10(Bunny) -> p_11(Bunny).",
                    "-p_11(Bunny) -> -p_10(Bunny).",
                    "p_9(Bunny) -> (-(p_2(Bunny) <-> p_10(Bunny))).",
                    "p_9(Bunny) -> (p_2(Bunny) | p_10(Bunny)).",
                    "p_9(Bunny) -> (-(p_2(Bunny) & p_10(Bunny))).",
                    "(p_8(Bunny) & p_4(Bunny)) -> p_3(Bunny).",
                    "(-p_8(Bunny) | -p_4(Bunny) | p_3(Bunny)).",
                    "-p_11(Bunny) -> -p_7(Bunny).",
                    "-p_11(Bunny).",
                    "-p_12(Bunny).",
                    "-p_10(Bunny).",
                    "-p_8(Bunny).",
                    "-p_9(Bunny)."
                ],
                "formulas(goals)": [
                    "- (p_7(Bunny) | (p_8(Bunny) | p_9(Bunny)))."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "\u00acp_8(Bunny)",
                    "\u00acp_9(Bunny)"
                ],
                "added_rules": [
                    "\u00acp_12(Bunny) \u2192 \u00acp_11(Bunny)",
                    "p_9(Bunny) \u2192 (p_2(Bunny) \u2228 p_10(Bunny))",
                    "p_9(Bunny) \u2192 \u00ac(p_2(Bunny) \u2227 p_10(Bunny))"
                ]
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_6(Bunny)\n\u00acp_5(Bunny)\n\u00acp_2(Bunny)\np_4(Bunny)\n\u00acp_3(Bunny)\n\u00acp_1(Bunny)\n\u00acp_0(Bunny)\np_12(Bunny) \u2192 p_6(Bunny)\n\u00acp_6(Bunny) \u2192 \u00acp_12(Bunny)\np_11(Bunny) \u2192 p_12(Bunny)\n\u00acp_12(Bunny) \u2192 \u00acp_11(Bunny)\np_10(Bunny) \u2192 p_11(Bunny)\n\u00acp_11(Bunny) \u2192 \u00acp_10(Bunny)\np_9(Bunny) \u2192 (p_2(Bunny) \u2295 p_10(Bunny))\np_9(Bunny) \u2192 (p_2(Bunny) \u2228 p_10(Bunny))\np_9(Bunny) \u2192 \u00ac(p_2(Bunny) \u2227 p_10(Bunny))\n(p_8(Bunny) \u2227 p_4(Bunny)) \u2192 p_3(Bunny)\n\u00acp_8(Bunny) \u2228 \u00acp_4(Bunny) \u2228 p_3(Bunny)\n\u00acp_11(Bunny) \u2192 p_7(Bunny)\n\u00acp_11(Bunny)\n\u00acp_12(Bunny)\n\u00acp_10(Bunny)\n\u00acp_8(Bunny)\n\u00acp_9(Bunny)",
            "Initial Goal": "p_7(Bunny) \u2228 (p_8(Bunny) \u2228 p_9(Bunny))",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_6(Bunny)",
                    "-p_5(Bunny)",
                    "-p_2(Bunny)",
                    "p_4(Bunny)",
                    "-p_3(Bunny)",
                    "-p_1(Bunny)",
                    "-p_0(Bunny)",
                    "p_12(Bunny) -> p_6(Bunny)",
                    "-p_6(Bunny) -> -p_12(Bunny)",
                    "p_11(Bunny) -> p_12(Bunny)",
                    "-p_12(Bunny) -> -p_11(Bunny)",
                    "p_10(Bunny) -> p_11(Bunny)",
                    "-p_11(Bunny) -> -p_10(Bunny)",
                    "p_9(Bunny) -> (-(p_2(Bunny) <-> p_10(Bunny)))",
                    "p_9(Bunny) -> (p_2(Bunny) | p_10(Bunny))",
                    "p_9(Bunny) -> (-(p_2(Bunny) & p_10(Bunny)))",
                    "(p_8(Bunny) & p_4(Bunny)) -> p_3(Bunny)",
                    "-p_8(Bunny) | -p_4(Bunny) | p_3(Bunny)",
                    "-p_11(Bunny) -> p_7(Bunny)",
                    "-p_11(Bunny)",
                    "-p_12(Bunny)",
                    "-p_10(Bunny)",
                    "-p_8(Bunny)",
                    "-p_9(Bunny)"
                ],
                "formulas(goals)": [
                    "p_7(Bunny) | p_8(Bunny) | p_9(Bunny)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u00acp_11(Bunny) \u2192 \u00acp_7(Bunny)"
                ],
                "added_facts": [],
                "added_rules": [
                    "\u00acp_11(Bunny) \u2192 p_7(Bunny)"
                ]
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_6(Bunny)\n\u00acp_5(Bunny)\n\u00acp_2(Bunny)\np_4(Bunny)\n\u00acp_3(Bunny)\n\u00acp_1(Bunny)\n\u00acp_0(Bunny)\np_12(Bunny) \u2192 p_6(Bunny)\n\u00acp_6(Bunny) \u2192 \u00acp_12(Bunny)\np_11(Bunny) \u2192 p_12(Bunny)\n\u00acp_12(Bunny) \u2192 \u00acp_11(Bunny)\np_10(Bunny) \u2192 p_11(Bunny)\n\u00acp_11(Bunny) \u2192 \u00acp_10(Bunny)\np_9(Bunny) \u2192 (p_2(Bunny) \u2295 p_10(Bunny))\np_9(Bunny) \u2192 (p_2(Bunny) \u2228 p_10(Bunny))\np_9(Bunny) \u2192 \u00ac(p_2(Bunny) \u2227 p_10(Bunny))\n(p_8(Bunny) \u2227 p_4(Bunny)) \u2192 p_3(Bunny)\n\u00acp_8(Bunny) \u2228 \u00acp_4(Bunny) \u2228 p_3(Bunny)\n\u00acp_11(Bunny)\n\u00acp_12(Bunny)\n\u00acp_10(Bunny)\n\u00acp_8(Bunny)\n\u00acp_9(Bunny)\np_7(Bunny) \u2192 p_11(Bunny)",
            "Initial Goal": "p_7(Bunny) \u2228 (p_8(Bunny) \u2228 p_9(Bunny))",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_6(Bunny)",
                    "-p_5(Bunny)",
                    "-p_2(Bunny)",
                    "p_4(Bunny)",
                    "-p_3(Bunny)",
                    "-p_1(Bunny)",
                    "-p_0(Bunny)",
                    "p_12(Bunny) -> p_6(Bunny)",
                    "-p_6(Bunny) -> -p_12(Bunny)",
                    "p_11(Bunny) -> p_12(Bunny)",
                    "-p_12(Bunny) -> -p_11(Bunny)",
                    "p_10(Bunny) -> p_11(Bunny)",
                    "-p_11(Bunny) -> -p_10(Bunny)",
                    "p_9(Bunny) -> (-(p_2(Bunny) <-> p_10(Bunny)))",
                    "p_9(Bunny) -> (p_2(Bunny) | p_10(Bunny))",
                    "p_9(Bunny) -> (-(p_2(Bunny) & p_10(Bunny)))",
                    "(p_8(Bunny) & p_4(Bunny)) -> p_3(Bunny)",
                    "-p_8(Bunny) | -p_4(Bunny) | p_3(Bunny)",
                    "-p_11(Bunny)",
                    "-p_12(Bunny)",
                    "-p_10(Bunny)",
                    "-p_8(Bunny)",
                    "-p_9(Bunny)",
                    "p_7(Bunny) -> p_11(Bunny)"
                ],
                "formulas(goals)": [
                    "-(p_7(Bunny) | (p_8(Bunny) | p_9(Bunny)))"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u00acp_11(Bunny) \u2192 p_7(Bunny)"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_7(Bunny) \u2192 p_11(Bunny)"
                ]
            }
        }
    ]
}