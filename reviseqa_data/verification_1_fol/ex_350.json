{
    "background_story": "Sweetness was a chestnut mare known for her exceptional alertness on the ranch. With a keen sense of awareness, she could detect the slightest movements and sounds, often alerting her rider to potential dangers. Whether it was a rattlesnake in the brush or a sudden change in weather, Sweetness was always on high alert, ensuring the safety of those around her. Her rider, a seasoned cowboy, relied heavily on her instincts, trusting her to navigate the rugged terrain with precision. Sweetness's alertness wasn't just a product of her breeding, but also a result of her strong bond with her rider, whom she had been trained to protect and serve. Together, they roamed the open ranges, a symbol of trust, loyalty, and vigilant partnership.",
    "predicates": [
        {
            "id": 0,
            "name": "anticipates_hazards"
        },
        {
            "id": 1,
            "name": "warns_rider"
        },
        {
            "id": 2,
            "name": "stays_vigilant"
        },
        {
            "id": 3,
            "name": "trains_well"
        },
        {
            "id": 4,
            "name": "bonds_strongly"
        },
        {
            "id": 5,
            "name": "serves_owner"
        },
        {
            "id": 6,
            "name": "alert"
        },
        {
            "id": 7,
            "name": "protect_rider"
        },
        {
            "id": 8,
            "name": "navigate_terrain"
        },
        {
            "id": 9,
            "name": "detects_danger"
        },
        {
            "id": 10,
            "name": "senses_threats"
        },
        {
            "id": 11,
            "name": "has_keen_senses"
        },
        {
            "id": 12,
            "name": "guards_ranch"
        },
        {
            "id": 13,
            "name": "has_good_hearing"
        },
        {
            "id": 14,
            "name": "sees_well"
        },
        {
            "id": 15,
            "name": "is_trained"
        },
        {
            "id": 16,
            "name": "is_attentive"
        },
        {
            "id": 17,
            "name": "is_intelligent"
        },
        {
            "id": 18,
            "name": "watches_over"
        },
        {
            "id": 19,
            "name": "defends_owner"
        },
        {
            "id": 20,
            "name": "watches_surroundings"
        }
    ],
    "subject_name": "Sweetness",
    "subject_category": "horse",
    "keyword": "alertness",
    "all_facts": [
        {
            "id": 0,
            "subject": "Sweetness",
            "text": "Sweetness does not anticipate hazards.",
            "fol": "\u00acp_0(Sweetness)",
            "str_fol": "\u00acanticipates_hazards(Sweetness)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Sweetness",
            "text": "Sweetness does not warn her rider.",
            "fol": "\u00acp_1(Sweetness)",
            "str_fol": "\u00acwarns_rider(Sweetness)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Sweetness",
            "text": "Sweetness does not stay vigilant.",
            "fol": "\u00acp_2(Sweetness)",
            "str_fol": "\u00acstays_vigilant(Sweetness)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Sweetness",
            "text": "Sweetness trains well.",
            "fol": "p_3(Sweetness)",
            "str_fol": "trains_well(Sweetness)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Sweetness",
            "text": "Sweetness does not bond strongly with her rider.",
            "fol": "\u00acp_4(Sweetness)",
            "str_fol": "\u00acbonds_strongly(Sweetness)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Sweetness",
            "text": "Sweetness does not serve her owner.",
            "fol": "\u00acp_5(Sweetness)",
            "str_fol": "\u00acserves_owner(Sweetness)",
            "negation": true
        },
        {
            "id": 6,
            "subject": "Sweetness",
            "text": "Sweetness protects her rider.",
            "fol": "p_7(Sweetness)",
            "str_fol": "protect_rider(Sweetness)",
            "negation": false
        },
        {
            "id": 7,
            "subject": "Sweetness",
            "text": "Sweetness guards the ranch.",
            "fol": "p_12(Sweetness)",
            "str_fol": "guards_ranch(Sweetness)",
            "negation": false
        },
        {
            "id": 8,
            "subject": "Sweetness",
            "text": "Sweetness has keen senses.",
            "fol": "p_11(Sweetness)",
            "str_fol": "has_keen_senses(Sweetness)",
            "negation": false
        },
        {
            "id": 9,
            "subject": "Sweetness",
            "text": "Sweetness senses threats.",
            "fol": "p_10(Sweetness)",
            "str_fol": "senses_threats(Sweetness)",
            "negation": false
        },
        {
            "id": 10,
            "subject": "Sweetness",
            "text": "Sweetness does not detect danger.",
            "fol": "\u00acp_9(Sweetness)",
            "str_fol": "\u00acdetects_danger(Sweetness)",
            "negation": true
        },
        {
            "id": 11,
            "subject": "Sweetness",
            "text": "Sweetness is alert.",
            "fol": "p_6(Sweetness)",
            "str_fol": "alert(Sweetness)",
            "negation": false
        },
        {
            "id": 12,
            "subject": "Sweetness",
            "text": "Sweetness navigates the terrain.",
            "fol": "p_8(Sweetness)",
            "str_fol": "navigate_terrain(Sweetness)",
            "negation": false
        }
    ],
    "context_facts": [
        {
            "id": 5,
            "subject": "Sweetness",
            "text": "Sweetness does not serve her owner.",
            "fol": "\u00acp_5(Sweetness)",
            "str_fol": "\u00acserves_owner(Sweetness)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Sweetness",
            "text": "Sweetness trains well.",
            "fol": "p_3(Sweetness)",
            "str_fol": "trains_well(Sweetness)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Sweetness",
            "text": "Sweetness does not bond strongly with her rider.",
            "fol": "\u00acp_4(Sweetness)",
            "str_fol": "\u00acbonds_strongly(Sweetness)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Sweetness",
            "text": "Sweetness does not anticipate hazards.",
            "fol": "\u00acp_0(Sweetness)",
            "str_fol": "\u00acanticipates_hazards(Sweetness)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Sweetness",
            "text": "Sweetness does not warn her rider.",
            "fol": "\u00acp_1(Sweetness)",
            "str_fol": "\u00acwarns_rider(Sweetness)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Sweetness",
            "text": "Sweetness does not stay vigilant.",
            "fol": "\u00acp_2(Sweetness)",
            "str_fol": "\u00acstays_vigilant(Sweetness)",
            "negation": true
        }
    ],
    "context_rules": [
        {
            "id": 6,
            "text": "Sweetness either protects her rider or serves her owner.",
            "fol": "p_7(Sweetness) \u2228 p_5(Sweetness)",
            "str_fol": "protect_rider(Sweetness) \u2228 serves_owner(Sweetness)"
        },
        {
            "id": 5,
            "text": "If Sweetness trains well, then she either guards the ranch or bonds strongly with her rider.",
            "fol": "p_3(Sweetness) \u2192 (p_12(Sweetness) \u2228 p_4(Sweetness))",
            "str_fol": "trains_well(Sweetness) \u2192 (guards_ranch(Sweetness) \u2228 bonds_strongly(Sweetness))"
        },
        {
            "id": 4,
            "text": "All horses that guard the ranch have keen senses.",
            "fol": "\u2200x (p_12(x) \u2192 p_11(x))",
            "str_fol": "\u2200x (guards_ranch(x) \u2192 has_keen_senses(x))"
        },
        {
            "id": 3,
            "text": "Every horse with keen senses either senses threats or anticipates hazards.",
            "fol": "\u2200x (p_11(x) \u2192 (p_10(x) \u2228 p_0(x)))",
            "str_fol": "\u2200x (has_keen_senses(x) \u2192 (senses_threats(x) \u2228 anticipates_hazards(x)))"
        },
        {
            "id": 2,
            "text": "Every horse that detects danger either warns its rider or stays vigilant.",
            "fol": "\u2200x (p_9(x) \u2192 (p_1(x) \u2228 p_2(x)))",
            "str_fol": "\u2200x (detects_danger(x) \u2192 (warns_rider(x) \u2228 stays_vigilant(x)))"
        },
        {
            "id": 1,
            "text": "If Sweetness either detects danger or senses threats (but not both), then she is alert.",
            "fol": "(p_9(Sweetness) \u2295 p_10(Sweetness)) \u2192 p_6(Sweetness)",
            "str_fol": "(detects_danger(Sweetness) \u2295 senses_threats(Sweetness)) \u2192 alert(Sweetness)"
        },
        {
            "id": 0,
            "text": "If Sweetness is alert, then she can either protect her rider or navigate terrain, but not both.",
            "fol": "p_6(Sweetness) \u2192 (p_7(Sweetness) \u2295 p_8(Sweetness))",
            "str_fol": "alert(Sweetness) \u2192 (protect_rider(Sweetness) \u2295 navigate_terrain(Sweetness))"
        }
    ],
    "context": [
        {
            "id": 5,
            "subject": "Sweetness",
            "text": "Sweetness does not serve her owner.",
            "fol": "\u00acp_5(Sweetness)",
            "str_fol": "\u00acserves_owner(Sweetness)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Sweetness",
            "text": "Sweetness trains well.",
            "fol": "p_3(Sweetness)",
            "str_fol": "trains_well(Sweetness)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Sweetness",
            "text": "Sweetness does not bond strongly with her rider.",
            "fol": "\u00acp_4(Sweetness)",
            "str_fol": "\u00acbonds_strongly(Sweetness)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Sweetness",
            "text": "Sweetness does not anticipate hazards.",
            "fol": "\u00acp_0(Sweetness)",
            "str_fol": "\u00acanticipates_hazards(Sweetness)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Sweetness",
            "text": "Sweetness does not warn her rider.",
            "fol": "\u00acp_1(Sweetness)",
            "str_fol": "\u00acwarns_rider(Sweetness)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Sweetness",
            "text": "Sweetness does not stay vigilant.",
            "fol": "\u00acp_2(Sweetness)",
            "str_fol": "\u00acstays_vigilant(Sweetness)",
            "negation": true
        },
        {
            "id": 6,
            "text": "Sweetness either protects her rider or serves her owner.",
            "fol": "p_7(Sweetness) \u2228 p_5(Sweetness)",
            "str_fol": "protect_rider(Sweetness) \u2228 serves_owner(Sweetness)"
        },
        {
            "id": 5,
            "text": "If Sweetness trains well, then she either guards the ranch or bonds strongly with her rider.",
            "fol": "p_3(Sweetness) \u2192 (p_12(Sweetness) \u2228 p_4(Sweetness))",
            "str_fol": "trains_well(Sweetness) \u2192 (guards_ranch(Sweetness) \u2228 bonds_strongly(Sweetness))"
        },
        {
            "id": 4,
            "text": "All horses that guard the ranch have keen senses.",
            "fol": "\u2200x (p_12(x) \u2192 p_11(x))",
            "str_fol": "\u2200x (guards_ranch(x) \u2192 has_keen_senses(x))"
        },
        {
            "id": 3,
            "text": "Every horse with keen senses either senses threats or anticipates hazards.",
            "fol": "\u2200x (p_11(x) \u2192 (p_10(x) \u2228 p_0(x)))",
            "str_fol": "\u2200x (has_keen_senses(x) \u2192 (senses_threats(x) \u2228 anticipates_hazards(x)))"
        },
        {
            "id": 2,
            "text": "Every horse that detects danger either warns its rider or stays vigilant.",
            "fol": "\u2200x (p_9(x) \u2192 (p_1(x) \u2228 p_2(x)))",
            "str_fol": "\u2200x (detects_danger(x) \u2192 (warns_rider(x) \u2228 stays_vigilant(x)))"
        },
        {
            "id": 1,
            "text": "If Sweetness either detects danger or senses threats (but not both), then she is alert.",
            "fol": "(p_9(Sweetness) \u2295 p_10(Sweetness)) \u2192 p_6(Sweetness)",
            "str_fol": "(detects_danger(Sweetness) \u2295 senses_threats(Sweetness)) \u2192 alert(Sweetness)"
        },
        {
            "id": 0,
            "text": "If Sweetness is alert, then she can either protect her rider or navigate terrain, but not both.",
            "fol": "p_6(Sweetness) \u2192 (p_7(Sweetness) \u2295 p_8(Sweetness))",
            "str_fol": "alert(Sweetness) \u2192 (protect_rider(Sweetness) \u2295 navigate_terrain(Sweetness))"
        }
    ],
    "context_fol": "\u00acp_5(Sweetness)\np_3(Sweetness)\n\u00acp_4(Sweetness)\n\u00acp_0(Sweetness)\n\u00acp_1(Sweetness)\n\u00acp_2(Sweetness)\np_7(Sweetness) \u2228 p_5(Sweetness)\np_3(Sweetness) \u2192 (p_12(Sweetness) \u2228 p_4(Sweetness))\n\u2200x (p_12(x) \u2192 p_11(x))\n\u2200x (p_11(x) \u2192 (p_10(x) \u2228 p_0(x)))\n\u2200x (p_9(x) \u2192 (p_1(x) \u2228 p_2(x)))\n(p_9(Sweetness) \u2295 p_10(Sweetness)) \u2192 p_6(Sweetness)\np_6(Sweetness) \u2192 (p_7(Sweetness) \u2295 p_8(Sweetness))",
    "conclusion": {
        "id": 12,
        "subject": "Sweetness",
        "text": "Sweetness navigates the terrain.",
        "fol": "p_8(Sweetness)",
        "str_fol": "navigate_terrain(Sweetness)",
        "negation": false
    },
    "initial_answer": "False",
    "initial_goal": "p_8(Sweetness)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 5,
                    "subject": "Sweetness",
                    "text": "Sweetness does not serve her owner.",
                    "fol": "\u00acp_5(Sweetness)",
                    "str_fol": "\u00acserves_owner(Sweetness)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 6,
                    "text": "Sweetness either protects her rider or serves her owner.",
                    "fol": "p_7(Sweetness) \u2228 p_5(Sweetness)",
                    "str_fol": "protect_rider(Sweetness) \u2228 serves_owner(Sweetness)"
                }
            ],
            "conclusion": {
                "id": 6,
                "subject": "Sweetness",
                "text": "Sweetness protects her rider.",
                "fol": "p_7(Sweetness)",
                "str_fol": "protect_rider(Sweetness)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 3,
                    "subject": "Sweetness",
                    "text": "Sweetness trains well.",
                    "fol": "p_3(Sweetness)",
                    "str_fol": "trains_well(Sweetness)",
                    "negation": false
                },
                {
                    "id": 4,
                    "subject": "Sweetness",
                    "text": "Sweetness does not bond strongly with her rider.",
                    "fol": "\u00acp_4(Sweetness)",
                    "str_fol": "\u00acbonds_strongly(Sweetness)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "If Sweetness trains well, then she either guards the ranch or bonds strongly with her rider.",
                    "fol": "p_3(Sweetness) \u2192 (p_12(Sweetness) \u2228 p_4(Sweetness))",
                    "str_fol": "trains_well(Sweetness) \u2192 (guards_ranch(Sweetness) \u2228 bonds_strongly(Sweetness))"
                }
            ],
            "conclusion": {
                "id": 7,
                "subject": "Sweetness",
                "text": "Sweetness guards the ranch.",
                "fol": "p_12(Sweetness)",
                "str_fol": "guards_ranch(Sweetness)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 7,
                    "subject": "Sweetness",
                    "text": "Sweetness guards the ranch.",
                    "fol": "p_12(Sweetness)",
                    "str_fol": "guards_ranch(Sweetness)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "All horses that guard the ranch have keen senses.",
                    "fol": "\u2200x (p_12(x) \u2192 p_11(x))",
                    "str_fol": "\u2200x (guards_ranch(x) \u2192 has_keen_senses(x))"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Sweetness",
                "text": "Sweetness has keen senses.",
                "fol": "p_11(Sweetness)",
                "str_fol": "has_keen_senses(Sweetness)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 8,
                    "subject": "Sweetness",
                    "text": "Sweetness has keen senses.",
                    "fol": "p_11(Sweetness)",
                    "str_fol": "has_keen_senses(Sweetness)",
                    "negation": false
                },
                {
                    "id": 0,
                    "subject": "Sweetness",
                    "text": "Sweetness does not anticipate hazards.",
                    "fol": "\u00acp_0(Sweetness)",
                    "str_fol": "\u00acanticipates_hazards(Sweetness)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "Every horse with keen senses either senses threats or anticipates hazards.",
                    "fol": "\u2200x (p_11(x) \u2192 (p_10(x) \u2228 p_0(x)))",
                    "str_fol": "\u2200x (has_keen_senses(x) \u2192 (senses_threats(x) \u2228 anticipates_hazards(x)))"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Sweetness",
                "text": "Sweetness senses threats.",
                "fol": "p_10(Sweetness)",
                "str_fol": "senses_threats(Sweetness)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 1,
                    "subject": "Sweetness",
                    "text": "Sweetness does not warn her rider.",
                    "fol": "\u00acp_1(Sweetness)",
                    "str_fol": "\u00acwarns_rider(Sweetness)",
                    "negation": true
                },
                {
                    "id": 2,
                    "subject": "Sweetness",
                    "text": "Sweetness does not stay vigilant.",
                    "fol": "\u00acp_2(Sweetness)",
                    "str_fol": "\u00acstays_vigilant(Sweetness)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "Every horse that detects danger either warns its rider or stays vigilant.",
                    "fol": "\u2200x (p_9(x) \u2192 (p_1(x) \u2228 p_2(x)))",
                    "str_fol": "\u2200x (detects_danger(x) \u2192 (warns_rider(x) \u2228 stays_vigilant(x)))"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Sweetness",
                "text": "Sweetness does not detect danger.",
                "fol": "\u00acp_9(Sweetness)",
                "str_fol": "\u00acdetects_danger(Sweetness)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 10,
                    "subject": "Sweetness",
                    "text": "Sweetness does not detect danger.",
                    "fol": "\u00acp_9(Sweetness)",
                    "str_fol": "\u00acdetects_danger(Sweetness)",
                    "negation": true
                },
                {
                    "id": 9,
                    "subject": "Sweetness",
                    "text": "Sweetness senses threats.",
                    "fol": "p_10(Sweetness)",
                    "str_fol": "senses_threats(Sweetness)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "If Sweetness either detects danger or senses threats (but not both), then she is alert.",
                    "fol": "(p_9(Sweetness) \u2295 p_10(Sweetness)) \u2192 p_6(Sweetness)",
                    "str_fol": "(detects_danger(Sweetness) \u2295 senses_threats(Sweetness)) \u2192 alert(Sweetness)"
                }
            ],
            "conclusion": {
                "id": 11,
                "subject": "Sweetness",
                "text": "Sweetness is alert.",
                "fol": "p_6(Sweetness)",
                "str_fol": "alert(Sweetness)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 11,
                    "subject": "Sweetness",
                    "text": "Sweetness is alert.",
                    "fol": "p_6(Sweetness)",
                    "str_fol": "alert(Sweetness)",
                    "negation": false
                },
                {
                    "id": 6,
                    "subject": "Sweetness",
                    "text": "Sweetness protects her rider.",
                    "fol": "p_7(Sweetness)",
                    "str_fol": "protect_rider(Sweetness)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "If Sweetness is alert, then she can either protect her rider or navigate terrain, but not both.",
                    "fol": "p_6(Sweetness) \u2192 (p_7(Sweetness) \u2295 p_8(Sweetness))",
                    "str_fol": "alert(Sweetness) \u2192 (protect_rider(Sweetness) \u2295 navigate_terrain(Sweetness))"
                }
            ],
            "conclusion": {
                "id": 12,
                "subject": "Sweetness",
                "text": "Sweetness navigates the terrain.",
                "fol": "p_8(Sweetness)",
                "str_fol": "navigate_terrain(Sweetness)",
                "negation": false
            }
        }
    ],
    "proof_trace": "1 p_3(Sweetness) -> p_12(Sweetness) | p_4(Sweetness).  [assumption].\n2 (all x (p_12(x) -> p_11(x))).  [assumption].\n3 (all x (p_11(x) -> p_10(x) | p_0(x))).  [assumption].\n4 (all x (p_9(x) -> p_1(x) | p_2(x))).  [assumption].\n5 -(p_9(Sweetness) <-> p_10(Sweetness)) -> p_6(Sweetness).  [assumption].\n6 p_6(Sweetness) -> -(p_7(Sweetness) <-> p_8(Sweetness)).  [assumption].\n7 -p_8(Sweetness).  [goal].\n8 p_7(Sweetness) | p_5(Sweetness).  [assumption].\n9 -p_5(Sweetness).  [assumption].\n10 -p_3(Sweetness) | p_12(Sweetness) | p_4(Sweetness).  [clausify(1)].\n11 p_3(Sweetness).  [assumption].\n12 p_12(Sweetness) | p_4(Sweetness).  [resolve(10,a,11,a)].\n13 -p_4(Sweetness).  [assumption].\n14 -p_11(x) | p_10(x) | p_0(x).  [clausify(3)].\n15 -p_0(Sweetness).  [assumption].\n16 -p_9(x) | p_1(x) | p_2(x).  [clausify(4)].\n17 -p_1(Sweetness).  [assumption].\n18 -p_9(Sweetness) | p_2(Sweetness).  [resolve(16,b,17,a)].\n19 -p_2(Sweetness).  [assumption].\n20 p_12(Sweetness).  [resolve(12,b,13,a)].\n21 -p_12(x) | p_11(x).  [clausify(2)].\n22 p_9(Sweetness) | -p_10(Sweetness) | p_6(Sweetness).  [clausify(5)].\n24 -p_9(Sweetness).  [resolve(18,b,19,a)].\n25 -p_10(Sweetness) | p_6(Sweetness).  [resolve(24,a,22,a)].\n27 -p_6(Sweetness) | -p_7(Sweetness) | -p_8(Sweetness).  [clausify(6)].\n28 -p_10(Sweetness) | -p_7(Sweetness) | -p_8(Sweetness).  [resolve(25,b,27,a)].\n29 p_8(Sweetness).  [deny(7)].\n31 -p_10(Sweetness) | -p_7(Sweetness).  [resolve(28,c,29,a)].\n32 p_7(Sweetness).  [resolve(8,b,9,a)].\n33 p_11(Sweetness).  [resolve(20,a,21,a)].\n34 -p_11(Sweetness) | p_10(Sweetness).  [resolve(14,c,15,a)].\n35 p_10(Sweetness).  [resolve(33,a,34,a)].\n36 -p_10(Sweetness).  [resolve(31,b,32,a)].\n37 $F.  [resolve(35,a,36,a)].",
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_5(Sweetness)\np_3(Sweetness)\n\u00acp_4(Sweetness)\n\u00acp_0(Sweetness)\n\u00acp_1(Sweetness)\n\u00acp_2(Sweetness)\np_7(Sweetness) \u2228 p_5(Sweetness)\np_3(Sweetness) \u2192 (p_12(Sweetness) \u2228 p_4(Sweetness))\n\u2200x (p_12(x) \u2192 p_11(x))\n\u2200x (p_11(x) \u2192 (p_10(x) \u2228 p_0(x)))\n\u2200x (p_9(x) \u2192 (p_1(x) \u2228 p_2(x)))\n(p_9(Sweetness) \u2295 p_10(Sweetness)) \u2192 p_6(Sweetness)\np_6(Sweetness) \u2192 (p_7(Sweetness) \u2295 p_8(Sweetness))\np_7(Sweetness)\np_12(Sweetness)\n\u2200x (\u00acp_11(x) \u2192 \u00acp_12(x))",
            "Initial Goal": "p_8(Sweetness)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_5(Sweetness)",
                    "p_3(Sweetness)",
                    "-p_4(Sweetness)",
                    "-p_0(Sweetness)",
                    "-p_1(Sweetness)",
                    "-p_2(Sweetness)",
                    "p_7(Sweetness) | p_5(Sweetness)",
                    "p_3(Sweetness) -> (p_12(Sweetness) | p_4(Sweetness))",
                    "all x (p_12(x) -> p_11(x))",
                    "all x (p_11(x) -> (p_10(x) | p_0(x)))",
                    "all x (p_9(x) -> (p_1(x) | p_2(x)))",
                    "(-(p_9(Sweetness) <-> p_10(Sweetness))) -> p_6(Sweetness)",
                    "p_6(Sweetness) -> (-(p_7(Sweetness) <-> p_8(Sweetness)))",
                    "p_7(Sweetness)",
                    "p_12(Sweetness)",
                    "all x (-p_11(x) -> -p_12(x))"
                ],
                "formulas(goals)": [
                    "-p_8(Sweetness)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_7(Sweetness)",
                    "p_12(Sweetness)"
                ],
                "added_rules": [
                    "\u2200x (\u00acp_11(x) \u2192 \u00acp_12(x))"
                ]
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_5(Sweetness)\np_3(Sweetness)\n\u00acp_4(Sweetness)\n\u00acp_0(Sweetness)\n\u00acp_1(Sweetness)\n\u00acp_2(Sweetness)\np_7(Sweetness) \u2228 p_5(Sweetness)\np_3(Sweetness) \u2192 (p_12(Sweetness) \u2228 p_4(Sweetness))\n\u2200x (p_12(x) \u2192 p_11(x))\n\u2200x (p_11(x) \u2192 (p_10(x) \u2228 p_0(x)))\n\u2200x (p_9(x) \u2192 (p_1(x) \u2228 p_2(x)))\n(p_9(Sweetness) \u2295 p_10(Sweetness)) \u2192 p_6(Sweetness)\np_6(Sweetness) \u2192 (p_7(Sweetness) \u2295 p_8(Sweetness))\n\u00acp_7(Sweetness)\np_12(Sweetness)\n\u2200x (\u00acp_11(x) \u2192 \u00acp_12(x))",
            "Initial Goal": "p_8(Sweetness)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Sweetness)",
                    "p_3(Sweetness)",
                    "-p_4(Sweetness)",
                    "-p_0(Sweetness)",
                    "-p_1(Sweetness)",
                    "-p_2(Sweetness)",
                    "p_7(Sweetness) | p_5(Sweetness)",
                    "p_3(Sweetness) -> (p_12(Sweetness) | p_4(Sweetness))",
                    "all x (p_12(x) -> p_11(x))",
                    "all x (p_11(x) -> (p_10(x) | p_0(x)))",
                    "all x (p_9(x) -> (p_1(x) | p_2(x)))",
                    "(-(p_9(Sweetness) <-> p_10(Sweetness))) -> p_6(Sweetness)",
                    "p_6(Sweetness) -> (-(p_7(Sweetness) <-> p_8(Sweetness)))",
                    "-p_7(Sweetness)",
                    "p_12(Sweetness)",
                    "all x (-p_11(x) -> -p_12(x))"
                ],
                "formulas(goals)": [
                    "p_8(Sweetness)"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "\u00acp_5(Sweetness)"
                ],
                "removed_rules": [],
                "added_facts": [
                    "p_5(Sweetness)",
                    "\u00acp_7(Sweetness)"
                ],
                "added_rules": []
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_5(Sweetness)\np_3(Sweetness)\n\u00acp_4(Sweetness)\n\u00acp_0(Sweetness)\n\u00acp_1(Sweetness)\n\u00acp_2(Sweetness)\np_7(Sweetness) \u2228 p_5(Sweetness)\n(p_3(Sweetness) \u2227 \u00acp_4(Sweetness)) \u2192 p_12(Sweetness)\n\u2200x (p_12(x) \u2192 p_11(x))\n\u2200x (p_11(x) \u2192 (p_10(x) \u2228 p_0(x)))\n\u2200x (p_9(x) \u2192 (p_1(x) \u2228 p_2(x)))\n(p_9(Sweetness) \u2295 p_10(Sweetness)) \u2192 p_6(Sweetness)\np_6(Sweetness) \u2192 (p_7(Sweetness) \u2295 p_8(Sweetness))\n\u00acp_7(Sweetness)\np_12(Sweetness)\n\u2200x (\u00acp_11(x) \u2192 \u00acp_12(x))\np_10(Sweetness)\np_6(Sweetness)\n\u00acp_9(Sweetness)",
            "Initial Goal": "p_8(Sweetness)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Sweetness).",
                    "p_3(Sweetness).",
                    "-p_4(Sweetness).",
                    "-p_0(Sweetness).",
                    "-p_1(Sweetness).",
                    "-p_2(Sweetness).",
                    "p_7(Sweetness) | p_5(Sweetness).",
                    "((-p_4(Sweetness) & p_3(Sweetness)) -> p_12(Sweetness)).",
                    "all x (p_12(x) -> p_11(x)).",
                    "all x (p_11(x) -> (p_10(x) | p_0(x))).",
                    "all x (p_9(x) -> (p_1(x) | p_2(x))).",
                    "(-(p_9(Sweetness) <-> p_10(Sweetness)) -> p_6(Sweetness)).",
                    "(p_6(Sweetness) -> -(p_7(Sweetness) <-> p_8(Sweetness))).",
                    "-p_7(Sweetness).",
                    "p_12(Sweetness).",
                    "all x (-p_11(x) -> -p_12(x)).",
                    "p_10(Sweetness).",
                    "p_6(Sweetness).",
                    "-p_9(Sweetness)."
                ],
                "formulas(goals)": [
                    "p_8(Sweetness)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_3(Sweetness) \u2192 (p_12(Sweetness) \u2228 p_4(Sweetness))"
                ],
                "added_facts": [
                    "p_10(Sweetness)",
                    "p_6(Sweetness)",
                    "\u00acp_9(Sweetness)"
                ],
                "added_rules": [
                    "(p_3(Sweetness) \u2227 \u00acp_4(Sweetness)) \u2192 p_12(Sweetness)"
                ]
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_5(Sweetness)\np_3(Sweetness)\n\u00acp_4(Sweetness)\n\u00acp_0(Sweetness)\n\u00acp_1(Sweetness)\n\u00acp_2(Sweetness)\np_7(Sweetness) \u2228 p_5(Sweetness)\n(p_3(Sweetness) \u2227 \u00acp_4(Sweetness)) \u2192 p_12(Sweetness)\n\u2200x (p_12(x) \u2192 p_11(x))\n\u2200x (p_11(x) \u2192 (p_10(x) \u2228 p_0(x)))\n\u2200x (p_9(x) \u2192 (p_1(x) \u2228 p_2(x)))\n(p_9(Sweetness) \u2295 p_10(Sweetness)) \u2192 p_6(Sweetness)\np_6(Sweetness) \u2192 (p_7(Sweetness) \u2295 p_8(Sweetness))\np_12(Sweetness)\n\u2200x (\u00acp_11(x) \u2192 \u00acp_12(x))\np_10(Sweetness)\np_6(Sweetness)\n\u00acp_9(Sweetness)\np_6(Sweetness) \u2192 p_7(Sweetness)",
            "Initial Goal": "p_8(Sweetness)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Sweetness)",
                    "p_3(Sweetness)",
                    "-p_4(Sweetness)",
                    "-p_0(Sweetness)",
                    "-p_1(Sweetness)",
                    "-p_2(Sweetness)",
                    "p_7(Sweetness) | p_5(Sweetness)",
                    "(p_3(Sweetness) & -p_4(Sweetness)) -> p_12(Sweetness)",
                    "all x (p_12(x) -> p_11(x))",
                    "all x (p_11(x) -> (p_10(x) | p_0(x)))",
                    "all x (p_9(x) -> (p_1(x) | p_2(x)))",
                    "(-(p_9(Sweetness) <-> p_10(Sweetness))) -> p_6(Sweetness)",
                    "p_6(Sweetness) -> (-(p_7(Sweetness) <-> p_8(Sweetness)))",
                    "p_12(Sweetness)",
                    "all x (-p_11(x) -> -p_12(x))",
                    "p_10(Sweetness)",
                    "p_6(Sweetness)",
                    "-p_9(Sweetness)",
                    "p_6(Sweetness) -> p_7(Sweetness)"
                ],
                "formulas(goals)": [
                    "-p_8(Sweetness)"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "\u00acp_7(Sweetness)"
                ],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "p_6(Sweetness) \u2192 p_7(Sweetness)"
                ]
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_5(Sweetness)\np_3(Sweetness)\n\u00acp_4(Sweetness)\n\u00acp_0(Sweetness)\n\u00acp_1(Sweetness)\n\u00acp_2(Sweetness)\np_7(Sweetness) \u2228 p_5(Sweetness)\n(p_3(Sweetness) \u2227 \u00acp_4(Sweetness)) \u2192 p_12(Sweetness)\n\u2200x (p_12(x) \u2192 p_11(x))\n\u2200x (p_11(x) \u2192 (p_10(x) \u2228 p_0(x)))\n\u2200x (p_9(x) \u2192 (p_1(x) \u2228 p_2(x)))\n(p_9(Sweetness) \u2295 p_10(Sweetness)) \u2192 p_6(Sweetness)\np_6(Sweetness) \u2192 ((p_7(Sweetness) \u2228 p_8(Sweetness)) \u2227 (\u00acp_7(Sweetness) \u2228 \u00acp_8(Sweetness)))\np_12(Sweetness)\n\u2200x (\u00acp_11(x) \u2192 \u00acp_12(x))\np_10(Sweetness)\np_6(Sweetness)\n\u00acp_9(Sweetness)\np_6(Sweetness) \u2192 p_7(Sweetness)\np_7(Sweetness)\n\u00acp_8(Sweetness)",
            "Initial Goal": "p_8(Sweetness)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Sweetness)",
                    "p_3(Sweetness)",
                    "-p_4(Sweetness)",
                    "-p_0(Sweetness)",
                    "-p_1(Sweetness)",
                    "-p_2(Sweetness)",
                    "p_7(Sweetness) | p_5(Sweetness)",
                    "(p_3(Sweetness) & -p_4(Sweetness)) -> p_12(Sweetness)",
                    "all x (p_12(x) -> p_11(x))",
                    "all x (p_11(x) -> (p_10(x) | p_0(x)))",
                    "all x (p_9(x) -> (p_1(x) | p_2(x)))",
                    "(-(p_9(Sweetness) <-> p_10(Sweetness))) -> p_6(Sweetness)",
                    "p_6(Sweetness) -> ((p_7(Sweetness) | p_8(Sweetness)) & (-p_7(Sweetness) | -p_8(Sweetness)))",
                    "p_12(Sweetness)",
                    "all x (-p_11(x) -> -p_12(x))",
                    "p_10(Sweetness)",
                    "p_6(Sweetness)",
                    "-p_9(Sweetness)",
                    "p_6(Sweetness) -> p_7(Sweetness)",
                    "p_7(Sweetness)",
                    "-p_8(Sweetness)"
                ],
                "formulas(goals)": [
                    "-p_8(Sweetness)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_7(Sweetness)",
                    "\u00acp_8(Sweetness)"
                ],
                "added_rules": [
                    "p_6(Sweetness) \u2192 ((p_7(Sweetness) \u2228 p_8(Sweetness)) \u2227 (\u00acp_7(Sweetness) \u2228 \u00acp_8(Sweetness)))"
                ]
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_5(Sweetness)\np_3(Sweetness)\n\u00acp_4(Sweetness)\n\u00acp_0(Sweetness)\n\u00acp_1(Sweetness)\n\u00acp_2(Sweetness)\np_7(Sweetness) \u2228 p_5(Sweetness)\n(p_3(Sweetness) \u2227 \u00acp_4(Sweetness)) \u2192 p_12(Sweetness)\n\u2200x (p_12(x) \u2192 p_11(x))\n\u2200x (\u00acp_11(x) \u2228 p_10(x) \u2228 p_0(x))\n\u2200x (p_9(x) \u2192 (p_1(x) \u2228 p_2(x)))\n(p_9(Sweetness) \u2295 p_10(Sweetness)) \u2192 p_6(Sweetness)\np_6(Sweetness) \u2192 (p_7(Sweetness) \u2194 \u00acp_8(Sweetness))\np_12(Sweetness)\n\u2200x (\u00acp_11(x) \u2192 \u00acp_12(x))\np_10(Sweetness)\np_6(Sweetness)\n\u00acp_9(Sweetness)\np_6(Sweetness) \u2192 p_7(Sweetness)\np_7(Sweetness)\n\u00acp_8(Sweetness)\np_11(Sweetness)",
            "Initial Goal": "p_8(Sweetness)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Sweetness)",
                    "p_3(Sweetness)",
                    "-p_4(Sweetness)",
                    "-p_0(Sweetness)",
                    "-p_1(Sweetness)",
                    "-p_2(Sweetness)",
                    "p_7(Sweetness) | p_5(Sweetness)",
                    "(p_3(Sweetness) & -p_4(Sweetness)) -> p_12(Sweetness)",
                    "all x (p_12(x) -> p_11(x))",
                    "all x (-p_11(x) | p_10(x) | p_0(x))",
                    "all x (p_9(x) -> (p_1(x) | p_2(x)))",
                    "(-(p_9(Sweetness) <-> p_10(Sweetness))) -> p_6(Sweetness)",
                    "p_6(Sweetness) -> (p_7(Sweetness) <-> -p_8(Sweetness))",
                    "p_12(Sweetness)",
                    "all x (-p_11(x) -> -p_12(x))",
                    "p_10(Sweetness)",
                    "p_6(Sweetness)",
                    "-p_9(Sweetness)",
                    "p_6(Sweetness) -> p_7(Sweetness)",
                    "p_7(Sweetness)",
                    "-p_8(Sweetness)",
                    "p_11(Sweetness)"
                ],
                "formulas(goals)": [
                    "-p_8(Sweetness)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_11(Sweetness)"
                ],
                "added_rules": [
                    "\u2200x (\u00acp_11(x) \u2228 p_10(x) \u2228 p_0(x))",
                    "p_6(Sweetness) \u2192 (p_7(Sweetness) \u2194 \u00acp_8(Sweetness))"
                ]
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_5(Sweetness)\np_3(Sweetness)\n\u00acp_4(Sweetness)\n\u00acp_0(Sweetness)\n\u00acp_1(Sweetness)\n\u00acp_2(Sweetness)\np_7(Sweetness) \u2228 p_5(Sweetness)\n(p_3(Sweetness) \u2227 \u00acp_4(Sweetness)) \u2192 p_12(Sweetness)\n\u2200x (p_12(x) \u2192 p_11(x))\n\u2200x (\u00acp_11(x) \u2228 p_10(x) \u2228 p_0(x))\n\u2200x (p_9(x) \u2192 (p_1(x) \u2228 p_2(x)))\n(p_9(Sweetness) \u2295 p_10(Sweetness)) \u2192 p_6(Sweetness)\np_12(Sweetness)\n\u2200x (\u00acp_11(x) \u2192 \u00acp_12(x))\np_10(Sweetness)\np_6(Sweetness)\n\u00acp_9(Sweetness)\np_6(Sweetness) \u2192 p_7(Sweetness)\np_7(Sweetness)\np_11(Sweetness)\np_6(Sweetness) \u2192 p_8(Sweetness)",
            "Initial Goal": "p_8(Sweetness)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Sweetness)",
                    "p_3(Sweetness)",
                    "-p_4(Sweetness)",
                    "-p_0(Sweetness)",
                    "-p_1(Sweetness)",
                    "-p_2(Sweetness)",
                    "p_7(Sweetness) | p_5(Sweetness)",
                    "(p_3(Sweetness) & -p_4(Sweetness)) -> p_12(Sweetness)",
                    "all x (p_12(x) -> p_11(x))",
                    "all x (-p_11(x) | p_10(x) | p_0(x))",
                    "all x (p_9(x) -> (p_1(x) | p_2(x)))",
                    "(-(p_9(Sweetness) <-> p_10(Sweetness))) -> p_6(Sweetness)",
                    "p_12(Sweetness)",
                    "all x (-p_11(x) -> -p_12(x))",
                    "p_10(Sweetness)",
                    "p_6(Sweetness)",
                    "-p_9(Sweetness)",
                    "p_6(Sweetness) -> p_7(Sweetness)",
                    "p_7(Sweetness)",
                    "p_11(Sweetness)",
                    "p_6(Sweetness) -> p_8(Sweetness)"
                ],
                "formulas(goals)": [
                    "p_8(Sweetness)"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "\u00acp_8(Sweetness)"
                ],
                "removed_rules": [
                    "p_6(Sweetness) \u2192 (p_7(Sweetness) \u2194 \u00acp_8(Sweetness))"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_6(Sweetness) \u2192 p_8(Sweetness)"
                ]
            }
        }
    ]
}