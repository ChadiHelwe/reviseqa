{
    "background_story": "Oliver was a brilliant composer with a passion for capturing the nuances of sound. He spent most of his days pouring over sheet music, determined to notate the perfect melody. With meticulous care, he would transcribe every note, rest, and dynamic marking, ensuring that his compositions were nothing short of perfection. Oliver's attention to detail was legendary, and his scores were sought after by orchestras around the world. He was particularly known for his ability to notate the subtlest expressions of emotion, bringing depth and complexity to his music. As he worked, Oliver would often hum the melodies, his voice weaving in and out of the notes he so carefully notated, bringing his creations to life.",
    "predicates": [
        {
            "id": 0,
            "name": "skilled"
        },
        {
            "id": 1,
            "name": "transcribe_music"
        },
        {
            "id": 2,
            "name": "write_symphonies"
        },
        {
            "id": 3,
            "name": "create_harmony"
        },
        {
            "id": 4,
            "name": "make_beats"
        },
        {
            "id": 5,
            "name": "hear_melody"
        },
        {
            "id": 6,
            "name": "play_piano"
        },
        {
            "id": 7,
            "name": "feel_rhythm"
        },
        {
            "id": 8,
            "name": "sense_vibe"
        },
        {
            "id": 9,
            "name": "play_instruments"
        },
        {
            "id": 10,
            "name": "compose_masterpieces"
        },
        {
            "id": 11,
            "name": "lead_orchestra"
        },
        {
            "id": 12,
            "name": "sing_solo"
        },
        {
            "id": 13,
            "name": "perform_publicly"
        },
        {
            "id": 14,
            "name": "arrange_scores"
        },
        {
            "id": 15,
            "name": "read_sheet"
        },
        {
            "id": 16,
            "name": "have_talent"
        },
        {
            "id": 17,
            "name": "know_lyrics"
        },
        {
            "id": 18,
            "name": "understand_emotion"
        },
        {
            "id": 19,
            "name": "write_opera"
        },
        {
            "id": 20,
            "name": "create_sonatas"
        },
        {
            "id": 21,
            "name": "is_experienced"
        },
        {
            "id": 22,
            "name": "teach_music"
        },
        {
            "id": 23,
            "name": "dedicated"
        },
        {
            "id": 24,
            "name": "make_records"
        },
        {
            "id": 25,
            "name": "produce_albums"
        },
        {
            "id": 26,
            "name": "design_sounds"
        },
        {
            "id": 27,
            "name": "create_music"
        },
        {
            "id": 28,
            "name": "record_albums"
        },
        {
            "id": 29,
            "name": "write_scores"
        },
        {
            "id": 30,
            "name": "conduct_orchestras"
        },
        {
            "id": 31,
            "name": "has_vocal_range"
        },
        {
            "id": 32,
            "name": "feel_passion"
        },
        {
            "id": 33,
            "name": "work_hard"
        },
        {
            "id": 34,
            "name": "sense_mood"
        },
        {
            "id": 35,
            "name": "know_chord"
        }
    ],
    "subject_name": "Oliver",
    "subject_category": "musician",
    "keyword": "notate",
    "all_facts": [
        {
            "id": 0,
            "subject": "Oliver",
            "text": "Oliver is not skilled.",
            "fol": "\u00acp_0(Oliver)",
            "str_fol": "\u00acskilled(Oliver)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Oliver",
            "text": "Oliver transcribes music.",
            "fol": "p_1(Oliver)",
            "str_fol": "transcribe_music(Oliver)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Oliver",
            "text": "Oliver writes symphonies.",
            "fol": "p_2(Oliver)",
            "str_fol": "write_symphonies(Oliver)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Oliver",
            "text": "Oliver is able to create harmony.",
            "fol": "p_3(Oliver)",
            "str_fol": "create_harmony(Oliver)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Oliver",
            "text": "Oliver does not make beats.",
            "fol": "\u00acp_4(Oliver)",
            "str_fol": "\u00acmake_beats(Oliver)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Oliver",
            "text": "Oliver hears a melody.",
            "fol": "p_5(Oliver)",
            "str_fol": "hear_melody(Oliver)",
            "negation": false
        },
        {
            "id": 6,
            "subject": "Oliver",
            "text": "Oliver cannot play the piano.",
            "fol": "\u00acp_6(Oliver)",
            "str_fol": "\u00acplay_piano(Oliver)",
            "negation": true
        },
        {
            "id": 7,
            "subject": "Oliver",
            "text": "Oliver feels rhythm.",
            "fol": "p_7(Oliver)",
            "str_fol": "feel_rhythm(Oliver)",
            "negation": false
        },
        {
            "id": 8,
            "subject": "Oliver",
            "text": "Oliver senses the vibe of music.",
            "fol": "p_8(Oliver)",
            "str_fol": "sense_vibe(Oliver)",
            "negation": false
        },
        {
            "id": 9,
            "subject": "Oliver",
            "text": "Oliver understands emotion.",
            "fol": "p_18(Oliver)",
            "str_fol": "understand_emotion(Oliver)",
            "negation": false
        },
        {
            "id": 10,
            "subject": "Oliver",
            "text": "Oliver has talent.",
            "fol": "p_16(Oliver)",
            "str_fol": "have_talent(Oliver)",
            "negation": false
        },
        {
            "id": 11,
            "subject": "Oliver",
            "text": "Oliver sings solo.",
            "fol": "p_12(Oliver)",
            "str_fol": "sing_solo(Oliver)",
            "negation": false
        },
        {
            "id": 12,
            "subject": "Oliver",
            "text": "Oliver reads sheet music.",
            "fol": "p_15(Oliver)",
            "str_fol": "read_sheet(Oliver)",
            "negation": false
        },
        {
            "id": 13,
            "subject": "Oliver",
            "text": "Oliver arranges scores.",
            "fol": "p_14(Oliver)",
            "str_fol": "arrange_scores(Oliver)",
            "negation": false
        },
        {
            "id": 14,
            "subject": "Oliver",
            "text": "Oliver plays instruments.",
            "fol": "p_9(Oliver)",
            "str_fol": "play_instruments(Oliver)",
            "negation": false
        },
        {
            "id": 15,
            "subject": "Oliver",
            "text": "Oliver does not lead an orchestra.",
            "fol": "\u00acp_11(Oliver)",
            "str_fol": "\u00aclead_orchestra(Oliver)",
            "negation": true
        },
        {
            "id": 16,
            "subject": "Oliver",
            "text": "Oliver performs publicly.",
            "fol": "p_13(Oliver)",
            "str_fol": "perform_publicly(Oliver)",
            "negation": false
        },
        {
            "id": 17,
            "subject": "Oliver",
            "text": "If Oliver is skilled, then he can either compose masterpieces or perform publicly, but not both.",
            "fol": "p_0(Oliver) \u2192 (compose_masterpieces(Oliver) \u2295 perform_publicly(Oliver))",
            "str_fol": "skilled(Oliver) \u2192 (compose_masterpieces(Oliver) \u2295 perform_publicly(Oliver))",
            "negation": false
        }
    ],
    "context_facts": [
        {
            "id": 8,
            "subject": "Oliver",
            "text": "Oliver senses the vibe of music.",
            "fol": "p_8(Oliver)",
            "str_fol": "sense_vibe(Oliver)",
            "negation": false
        },
        {
            "id": 7,
            "subject": "Oliver",
            "text": "Oliver feels rhythm.",
            "fol": "p_7(Oliver)",
            "str_fol": "feel_rhythm(Oliver)",
            "negation": false
        },
        {
            "id": 5,
            "subject": "Oliver",
            "text": "Oliver hears a melody.",
            "fol": "p_5(Oliver)",
            "str_fol": "hear_melody(Oliver)",
            "negation": false
        },
        {
            "id": 6,
            "subject": "Oliver",
            "text": "Oliver cannot play the piano.",
            "fol": "\u00acp_6(Oliver)",
            "str_fol": "\u00acplay_piano(Oliver)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Oliver",
            "text": "Oliver transcribes music.",
            "fol": "p_1(Oliver)",
            "str_fol": "transcribe_music(Oliver)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Oliver",
            "text": "Oliver does not make beats.",
            "fol": "\u00acp_4(Oliver)",
            "str_fol": "\u00acmake_beats(Oliver)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Oliver",
            "text": "Oliver writes symphonies.",
            "fol": "p_2(Oliver)",
            "str_fol": "write_symphonies(Oliver)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Oliver",
            "text": "Oliver is able to create harmony.",
            "fol": "p_3(Oliver)",
            "str_fol": "create_harmony(Oliver)",
            "negation": false
        },
        {
            "id": 0,
            "subject": "Oliver",
            "text": "Oliver is not skilled.",
            "fol": "\u00acp_0(Oliver)",
            "str_fol": "\u00acskilled(Oliver)",
            "negation": true
        }
    ],
    "context_rules": [
        {
            "id": 8,
            "text": "All musicians who sense the vibe of music understand emotion.",
            "fol": "\u2200x (p_8(x) \u2192 p_18(x))",
            "str_fol": "\u2200x (sense_vibe(x) \u2192 understand_emotion(x))"
        },
        {
            "id": 7,
            "text": "If a musician feels rhythm and understands emotion, then they have talent.",
            "fol": "\u2200x ((p_7(x) \u2227 p_18(x)) \u2192 p_16(x))",
            "str_fol": "\u2200x ((feel_rhythm(x) \u2227 understand_emotion(x)) \u2192 have_talent(x))"
        },
        {
            "id": 6,
            "text": "If Oliver has talent, then he knows lyrics and sings solo.",
            "fol": "p_16(Oliver) \u2192 (p_17(Oliver) \u2227 p_12(Oliver))",
            "str_fol": "have_talent(Oliver) \u2192 (know_lyrics(Oliver) \u2227 sing_solo(Oliver))"
        },
        {
            "id": 5,
            "text": "If Oliver either hears a melody or reads sheet music (but not both), then he can play the piano.",
            "fol": "(p_5(Oliver) \u2295 p_15(Oliver)) \u2192 p_6(Oliver)",
            "str_fol": "(hear_melody(Oliver) \u2295 read_sheet(Oliver)) \u2192 play_piano(Oliver)"
        },
        {
            "id": 4,
            "text": "If Oliver transcribes music, then he will arrange scores.",
            "fol": "p_1(Oliver) \u2192 p_14(Oliver)",
            "str_fol": "transcribe_music(Oliver) \u2192 arrange_scores(Oliver)"
        },
        {
            "id": 3,
            "text": "If Oliver either reads sheet music or makes beats (but not both), then he is able to play instruments.",
            "fol": "(p_15(Oliver) \u2295 p_4(Oliver)) \u2192 p_9(Oliver)",
            "str_fol": "(read_sheet(Oliver) \u2295 make_beats(Oliver)) \u2192 play_instruments(Oliver)"
        },
        {
            "id": 2,
            "text": "If Oliver leads an orchestra, then he either writes symphonies or arranges scores, but not both.",
            "fol": "p_11(Oliver) \u2192 (p_2(Oliver) \u2295 p_14(Oliver))",
            "str_fol": "lead_orchestra(Oliver) \u2192 (write_symphonies(Oliver) \u2295 arrange_scores(Oliver))"
        },
        {
            "id": 1,
            "text": "If a musician either leads an orchestra or sings solo (but not both), then they perform publicly.",
            "fol": "\u2200x ((p_11(x) \u2295 p_12(x)) \u2192 p_13(x))",
            "str_fol": "\u2200x ((lead_orchestra(x) \u2295 sing_solo(x)) \u2192 perform_publicly(x))"
        },
        {
            "id": 0,
            "text": "If Oliver either plays instruments or composes masterpieces (but not both), then he is able to create harmony.",
            "fol": "(p_9(Oliver) \u2295 p_10(Oliver)) \u2192 p_3(Oliver)",
            "str_fol": "(play_instruments(Oliver) \u2295 compose_masterpieces(Oliver)) \u2192 create_harmony(Oliver)"
        }
    ],
    "context": [
        {
            "id": 8,
            "subject": "Oliver",
            "text": "Oliver senses the vibe of music.",
            "fol": "p_8(Oliver)",
            "str_fol": "sense_vibe(Oliver)",
            "negation": false
        },
        {
            "id": 7,
            "subject": "Oliver",
            "text": "Oliver feels rhythm.",
            "fol": "p_7(Oliver)",
            "str_fol": "feel_rhythm(Oliver)",
            "negation": false
        },
        {
            "id": 5,
            "subject": "Oliver",
            "text": "Oliver hears a melody.",
            "fol": "p_5(Oliver)",
            "str_fol": "hear_melody(Oliver)",
            "negation": false
        },
        {
            "id": 6,
            "subject": "Oliver",
            "text": "Oliver cannot play the piano.",
            "fol": "\u00acp_6(Oliver)",
            "str_fol": "\u00acplay_piano(Oliver)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Oliver",
            "text": "Oliver transcribes music.",
            "fol": "p_1(Oliver)",
            "str_fol": "transcribe_music(Oliver)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Oliver",
            "text": "Oliver does not make beats.",
            "fol": "\u00acp_4(Oliver)",
            "str_fol": "\u00acmake_beats(Oliver)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Oliver",
            "text": "Oliver writes symphonies.",
            "fol": "p_2(Oliver)",
            "str_fol": "write_symphonies(Oliver)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Oliver",
            "text": "Oliver is able to create harmony.",
            "fol": "p_3(Oliver)",
            "str_fol": "create_harmony(Oliver)",
            "negation": false
        },
        {
            "id": 0,
            "subject": "Oliver",
            "text": "Oliver is not skilled.",
            "fol": "\u00acp_0(Oliver)",
            "str_fol": "\u00acskilled(Oliver)",
            "negation": true
        },
        {
            "id": 8,
            "text": "All musicians who sense the vibe of music understand emotion.",
            "fol": "\u2200x (p_8(x) \u2192 p_18(x))",
            "str_fol": "\u2200x (sense_vibe(x) \u2192 understand_emotion(x))"
        },
        {
            "id": 7,
            "text": "If a musician feels rhythm and understands emotion, then they have talent.",
            "fol": "\u2200x ((p_7(x) \u2227 p_18(x)) \u2192 p_16(x))",
            "str_fol": "\u2200x ((feel_rhythm(x) \u2227 understand_emotion(x)) \u2192 have_talent(x))"
        },
        {
            "id": 6,
            "text": "If Oliver has talent, then he knows lyrics and sings solo.",
            "fol": "p_16(Oliver) \u2192 (p_17(Oliver) \u2227 p_12(Oliver))",
            "str_fol": "have_talent(Oliver) \u2192 (know_lyrics(Oliver) \u2227 sing_solo(Oliver))"
        },
        {
            "id": 5,
            "text": "If Oliver either hears a melody or reads sheet music (but not both), then he can play the piano.",
            "fol": "(p_5(Oliver) \u2295 p_15(Oliver)) \u2192 p_6(Oliver)",
            "str_fol": "(hear_melody(Oliver) \u2295 read_sheet(Oliver)) \u2192 play_piano(Oliver)"
        },
        {
            "id": 4,
            "text": "If Oliver transcribes music, then he will arrange scores.",
            "fol": "p_1(Oliver) \u2192 p_14(Oliver)",
            "str_fol": "transcribe_music(Oliver) \u2192 arrange_scores(Oliver)"
        },
        {
            "id": 3,
            "text": "If Oliver either reads sheet music or makes beats (but not both), then he is able to play instruments.",
            "fol": "(p_15(Oliver) \u2295 p_4(Oliver)) \u2192 p_9(Oliver)",
            "str_fol": "(read_sheet(Oliver) \u2295 make_beats(Oliver)) \u2192 play_instruments(Oliver)"
        },
        {
            "id": 2,
            "text": "If Oliver leads an orchestra, then he either writes symphonies or arranges scores, but not both.",
            "fol": "p_11(Oliver) \u2192 (p_2(Oliver) \u2295 p_14(Oliver))",
            "str_fol": "lead_orchestra(Oliver) \u2192 (write_symphonies(Oliver) \u2295 arrange_scores(Oliver))"
        },
        {
            "id": 1,
            "text": "If a musician either leads an orchestra or sings solo (but not both), then they perform publicly.",
            "fol": "\u2200x ((p_11(x) \u2295 p_12(x)) \u2192 p_13(x))",
            "str_fol": "\u2200x ((lead_orchestra(x) \u2295 sing_solo(x)) \u2192 perform_publicly(x))"
        },
        {
            "id": 0,
            "text": "If Oliver either plays instruments or composes masterpieces (but not both), then he is able to create harmony.",
            "fol": "(p_9(Oliver) \u2295 p_10(Oliver)) \u2192 p_3(Oliver)",
            "str_fol": "(play_instruments(Oliver) \u2295 compose_masterpieces(Oliver)) \u2192 create_harmony(Oliver)"
        }
    ],
    "context_fol": "p_8(Oliver)\np_7(Oliver)\np_5(Oliver)\n\u00acp_6(Oliver)\np_1(Oliver)\n\u00acp_4(Oliver)\np_2(Oliver)\np_3(Oliver)\n\u00acp_0(Oliver)\n\u2200x (p_8(x) \u2192 p_18(x))\n\u2200x ((p_7(x) \u2227 p_18(x)) \u2192 p_16(x))\np_16(Oliver) \u2192 (p_17(Oliver) \u2227 p_12(Oliver))\n(p_5(Oliver) \u2295 p_15(Oliver)) \u2192 p_6(Oliver)\np_1(Oliver) \u2192 p_14(Oliver)\n(p_15(Oliver) \u2295 p_4(Oliver)) \u2192 p_9(Oliver)\np_11(Oliver) \u2192 (p_2(Oliver) \u2295 p_14(Oliver))\n\u2200x ((p_11(x) \u2295 p_12(x)) \u2192 p_13(x))\n(p_9(Oliver) \u2295 p_10(Oliver)) \u2192 p_3(Oliver)",
    "conclusion": {
        "id": 18,
        "text": "If Oliver is skilled, then he can either compose masterpieces or perform publicly, but not both.",
        "fol": "p_0(Oliver) \u2192 (p_10(Oliver) \u2295 p_13(Oliver))",
        "str_fol": "skilled(Oliver) \u2192 (compose_masterpieces(Oliver) \u2295 perform_publicly(Oliver))"
    },
    "initial_answer": "True",
    "initial_goal": "p_0(Oliver) \u2192 (p_10(Oliver) \u2295 p_13(Oliver))",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 8,
                    "subject": "Oliver",
                    "text": "Oliver senses the vibe of music.",
                    "fol": "p_8(Oliver)",
                    "str_fol": "sense_vibe(Oliver)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 8,
                    "text": "All musicians who sense the vibe of music understand emotion.",
                    "fol": "\u2200x (p_8(x) \u2192 p_18(x))",
                    "str_fol": "\u2200x (sense_vibe(x) \u2192 understand_emotion(x))"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Oliver",
                "text": "Oliver understands emotion.",
                "fol": "p_18(Oliver)",
                "str_fol": "understand_emotion(Oliver)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 7,
                    "subject": "Oliver",
                    "text": "Oliver feels rhythm.",
                    "fol": "p_7(Oliver)",
                    "str_fol": "feel_rhythm(Oliver)",
                    "negation": false
                },
                {
                    "id": 9,
                    "subject": "Oliver",
                    "text": "Oliver understands emotion.",
                    "fol": "p_18(Oliver)",
                    "str_fol": "understand_emotion(Oliver)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 7,
                    "text": "If a musician feels rhythm and understands emotion, then they have talent.",
                    "fol": "\u2200x ((p_7(x) \u2227 p_18(x)) \u2192 p_16(x))",
                    "str_fol": "\u2200x ((feel_rhythm(x) \u2227 understand_emotion(x)) \u2192 have_talent(x))"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Oliver",
                "text": "Oliver has talent.",
                "fol": "p_16(Oliver)",
                "str_fol": "have_talent(Oliver)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 10,
                    "subject": "Oliver",
                    "text": "Oliver has talent.",
                    "fol": "p_16(Oliver)",
                    "str_fol": "have_talent(Oliver)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 6,
                    "text": "If Oliver has talent, then he knows lyrics and sings solo.",
                    "fol": "p_16(Oliver) \u2192 (p_17(Oliver) \u2227 p_12(Oliver))",
                    "str_fol": "have_talent(Oliver) \u2192 (know_lyrics(Oliver) \u2227 sing_solo(Oliver))"
                }
            ],
            "conclusion": {
                "id": 11,
                "subject": "Oliver",
                "text": "Oliver sings solo.",
                "fol": "p_12(Oliver)",
                "str_fol": "sing_solo(Oliver)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 5,
                    "subject": "Oliver",
                    "text": "Oliver hears a melody.",
                    "fol": "p_5(Oliver)",
                    "str_fol": "hear_melody(Oliver)",
                    "negation": false
                },
                {
                    "id": 6,
                    "subject": "Oliver",
                    "text": "Oliver cannot play the piano.",
                    "fol": "\u00acp_6(Oliver)",
                    "str_fol": "\u00acplay_piano(Oliver)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "If Oliver either hears a melody or reads sheet music (but not both), then he can play the piano.",
                    "fol": "(p_5(Oliver) \u2295 p_15(Oliver)) \u2192 p_6(Oliver)",
                    "str_fol": "(hear_melody(Oliver) \u2295 read_sheet(Oliver)) \u2192 play_piano(Oliver)"
                }
            ],
            "conclusion": {
                "id": 12,
                "subject": "Oliver",
                "text": "Oliver reads sheet music.",
                "fol": "p_15(Oliver)",
                "str_fol": "read_sheet(Oliver)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 1,
                    "subject": "Oliver",
                    "text": "Oliver transcribes music.",
                    "fol": "p_1(Oliver)",
                    "str_fol": "transcribe_music(Oliver)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "If Oliver transcribes music, then he will arrange scores.",
                    "fol": "p_1(Oliver) \u2192 p_14(Oliver)",
                    "str_fol": "transcribe_music(Oliver) \u2192 arrange_scores(Oliver)"
                }
            ],
            "conclusion": {
                "id": 13,
                "subject": "Oliver",
                "text": "Oliver arranges scores.",
                "fol": "p_14(Oliver)",
                "str_fol": "arrange_scores(Oliver)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 12,
                    "subject": "Oliver",
                    "text": "Oliver reads sheet music.",
                    "fol": "p_15(Oliver)",
                    "str_fol": "read_sheet(Oliver)",
                    "negation": false
                },
                {
                    "id": 4,
                    "subject": "Oliver",
                    "text": "Oliver does not make beats.",
                    "fol": "\u00acp_4(Oliver)",
                    "str_fol": "\u00acmake_beats(Oliver)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "If Oliver either reads sheet music or makes beats (but not both), then he is able to play instruments.",
                    "fol": "(p_15(Oliver) \u2295 p_4(Oliver)) \u2192 p_9(Oliver)",
                    "str_fol": "(read_sheet(Oliver) \u2295 make_beats(Oliver)) \u2192 play_instruments(Oliver)"
                }
            ],
            "conclusion": {
                "id": 14,
                "subject": "Oliver",
                "text": "Oliver plays instruments.",
                "fol": "p_9(Oliver)",
                "str_fol": "play_instruments(Oliver)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 2,
                    "subject": "Oliver",
                    "text": "Oliver writes symphonies.",
                    "fol": "p_2(Oliver)",
                    "str_fol": "write_symphonies(Oliver)",
                    "negation": false
                },
                {
                    "id": 13,
                    "subject": "Oliver",
                    "text": "Oliver arranges scores.",
                    "fol": "p_14(Oliver)",
                    "str_fol": "arrange_scores(Oliver)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "If Oliver leads an orchestra, then he either writes symphonies or arranges scores, but not both.",
                    "fol": "p_11(Oliver) \u2192 (p_2(Oliver) \u2295 p_14(Oliver))",
                    "str_fol": "lead_orchestra(Oliver) \u2192 (write_symphonies(Oliver) \u2295 arrange_scores(Oliver))"
                }
            ],
            "conclusion": {
                "id": 15,
                "subject": "Oliver",
                "text": "Oliver does not lead an orchestra.",
                "fol": "\u00acp_11(Oliver)",
                "str_fol": "\u00aclead_orchestra(Oliver)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 15,
                    "subject": "Oliver",
                    "text": "Oliver does not lead an orchestra.",
                    "fol": "\u00acp_11(Oliver)",
                    "str_fol": "\u00aclead_orchestra(Oliver)",
                    "negation": true
                },
                {
                    "id": 11,
                    "subject": "Oliver",
                    "text": "Oliver sings solo.",
                    "fol": "p_12(Oliver)",
                    "str_fol": "sing_solo(Oliver)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "If a musician either leads an orchestra or sings solo (but not both), then they perform publicly.",
                    "fol": "\u2200x ((p_11(x) \u2295 p_12(x)) \u2192 p_13(x))",
                    "str_fol": "\u2200x ((lead_orchestra(x) \u2295 sing_solo(x)) \u2192 perform_publicly(x))"
                }
            ],
            "conclusion": {
                "id": 16,
                "subject": "Oliver",
                "text": "Oliver performs publicly.",
                "fol": "p_13(Oliver)",
                "str_fol": "perform_publicly(Oliver)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 14,
                    "subject": "Oliver",
                    "text": "Oliver plays instruments.",
                    "fol": "p_9(Oliver)",
                    "str_fol": "play_instruments(Oliver)",
                    "negation": false
                },
                {
                    "id": 3,
                    "subject": "Oliver",
                    "text": "Oliver is able to create harmony.",
                    "fol": "p_3(Oliver)",
                    "str_fol": "create_harmony(Oliver)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "If Oliver either plays instruments or composes masterpieces (but not both), then he is able to create harmony.",
                    "fol": "(p_9(Oliver) \u2295 p_10(Oliver)) \u2192 p_3(Oliver)",
                    "str_fol": "(play_instruments(Oliver) \u2295 compose_masterpieces(Oliver)) \u2192 create_harmony(Oliver)"
                }
            ],
            "conclusion": null
        },
        {
            "facts": [
                {
                    "id": 0,
                    "subject": "Oliver",
                    "text": "Oliver is not skilled.",
                    "fol": "\u00acp_0(Oliver)",
                    "str_fol": "\u00acskilled(Oliver)",
                    "negation": true
                },
                {
                    "id": 16,
                    "subject": "Oliver",
                    "text": "Oliver performs publicly.",
                    "fol": "p_13(Oliver)",
                    "str_fol": "perform_publicly(Oliver)",
                    "negation": false
                }
            ],
            "rules": [],
            "conclusion": {
                "id": 18,
                "text": "If Oliver is skilled, then he can either compose masterpieces or perform publicly, but not both.",
                "fol": "p_0(Oliver) \u2192 (p_10(Oliver) \u2295 p_13(Oliver))",
                "str_fol": "skilled(Oliver) \u2192 (compose_masterpieces(Oliver) \u2295 perform_publicly(Oliver))"
            }
        }
    ],
    "proof_trace": "10 p_0(Oliver) -> -(p_10(Oliver) <-> p_13(Oliver)).  [goal].\n28 p_0(Oliver).  [deny(10)].\n29 -p_0(Oliver).  [assumption].\n40 $F.  [resolve(28,a,29,a)].",
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_8(Oliver)\np_7(Oliver)\np_5(Oliver)\n\u00acp_6(Oliver)\np_1(Oliver)\n\u00acp_4(Oliver)\np_2(Oliver)\np_3(Oliver)\n\u00acp_0(Oliver)\n\u2200x (p_8(x) \u2192 p_18(x))\n\u2200x ((p_7(x) \u2227 p_18(x)) \u2192 p_16(x))\n(p_16(Oliver) \u2192 p_17(Oliver)) \u2227 (p_16(Oliver) \u2192 p_12(Oliver))\n(p_5(Oliver) \u2295 p_15(Oliver)) \u2192 p_6(Oliver)\np_1(Oliver) \u2192 p_14(Oliver)\n(p_15(Oliver) \u2295 p_4(Oliver)) \u2192 p_9(Oliver)\np_11(Oliver) \u2192 (p_2(Oliver) \u2295 p_14(Oliver))\n\u2200x ((p_11(x) \u2295 p_12(x)) \u2192 p_13(x))\n(p_9(Oliver) \u2295 p_10(Oliver)) \u2192 p_3(Oliver)\np_18(Oliver)\n\u00ac(p_5(Oliver) \u2295 p_15(Oliver))",
            "Initial Goal": "p_0(Oliver) \u2192 (p_10(Oliver) \u2295 p_13(Oliver))",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_8(Oliver)",
                    "p_7(Oliver)",
                    "p_5(Oliver)",
                    "-p_6(Oliver)",
                    "p_1(Oliver)",
                    "-p_4(Oliver)",
                    "p_2(Oliver)",
                    "p_3(Oliver)",
                    "-p_0(Oliver)",
                    "all x (p_8(x) -> p_18(x))",
                    "all x ((p_7(x) & p_18(x)) -> p_16(x))",
                    "(p_16(Oliver) -> p_17(Oliver)) & (p_16(Oliver) -> p_12(Oliver))",
                    "(-(p_5(Oliver) <-> p_15(Oliver))) -> p_6(Oliver)",
                    "p_1(Oliver) -> p_14(Oliver)",
                    "(-(p_15(Oliver) <-> p_4(Oliver))) -> p_9(Oliver)",
                    "p_11(Oliver) -> (-(p_2(Oliver) <-> p_14(Oliver)))",
                    "all x ((-(p_11(x) <-> p_12(x))) -> p_13(x))",
                    "(-(p_9(Oliver) <-> p_10(Oliver))) -> p_3(Oliver)",
                    "p_18(Oliver)",
                    "-(-(p_5(Oliver) <-> p_15(Oliver)))"
                ],
                "formulas(goals)": [
                    "p_0(Oliver) -> (-(p_10(Oliver) <-> p_13(Oliver)))"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_16(Oliver) \u2192 (p_17(Oliver) \u2227 p_12(Oliver))"
                ],
                "added_facts": [
                    "p_18(Oliver)",
                    "\u00ac(p_5(Oliver) \u2295 p_15(Oliver))"
                ],
                "added_rules": [
                    "(p_16(Oliver) \u2192 p_17(Oliver)) \u2227 (p_16(Oliver) \u2192 p_12(Oliver))"
                ]
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_8(Oliver)\np_7(Oliver)\np_5(Oliver)\n\u00acp_6(Oliver)\np_1(Oliver)\n\u00acp_4(Oliver)\np_2(Oliver)\np_3(Oliver)\n\u2200x (p_8(x) \u2192 p_18(x))\n\u2200x ((p_7(x) \u2227 p_18(x)) \u2192 p_16(x))\n(p_16(Oliver) \u2192 p_17(Oliver)) \u2227 (p_16(Oliver) \u2192 p_12(Oliver))\n(p_5(Oliver) \u2295 p_15(Oliver)) \u2192 p_6(Oliver)\np_1(Oliver) \u2192 p_14(Oliver)\n(p_15(Oliver) \u2295 p_4(Oliver)) \u2192 p_9(Oliver)\np_11(Oliver) \u2192 (p_2(Oliver) \u2295 p_14(Oliver))\n\u2200x ((p_11(x) \u2295 p_12(x)) \u2192 p_13(x))\n(p_9(Oliver) \u2295 p_10(Oliver)) \u2192 p_3(Oliver)\np_18(Oliver)\n\u00ac(p_5(Oliver) \u2295 p_15(Oliver))\np_1(Oliver) \u2192 p_0(Oliver)\np_13(Oliver) \u2192 p_10(Oliver)",
            "Initial Goal": "p_0(Oliver) \u2192 (p_10(Oliver) \u2295 p_13(Oliver))",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_8(Oliver)",
                    "p_7(Oliver)",
                    "p_5(Oliver)",
                    "-p_6(Oliver)",
                    "p_1(Oliver)",
                    "-p_4(Oliver)",
                    "p_2(Oliver)",
                    "p_3(Oliver)",
                    "all x (p_8(x) -> p_18(x))",
                    "all x ((p_7(x) & p_18(x)) -> p_16(x))",
                    "(p_16(Oliver) -> p_17(Oliver)) & (p_16(Oliver) -> p_12(Oliver))",
                    "(-(p_5(Oliver) <-> p_15(Oliver))) -> p_6(Oliver)",
                    "p_1(Oliver) -> p_14(Oliver)",
                    "(-(p_15(Oliver) <-> p_4(Oliver))) -> p_9(Oliver)",
                    "p_11(Oliver) -> (-(p_2(Oliver) <-> p_14(Oliver)))",
                    "all x ((-(p_11(x) <-> p_12(x))) -> p_13(x))",
                    "(-(p_9(Oliver) <-> p_10(Oliver))) -> p_3(Oliver)",
                    "p_18(Oliver)",
                    "-(-(p_5(Oliver) <-> p_15(Oliver)))",
                    "p_1(Oliver) -> p_0(Oliver)",
                    "p_13(Oliver) -> p_10(Oliver)"
                ],
                "formulas(goals)": [
                    "-(p_0(Oliver) -> -(p_10(Oliver) <-> p_13(Oliver)))"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "\u00acp_0(Oliver)"
                ],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "p_1(Oliver) \u2192 p_0(Oliver)",
                    "p_13(Oliver) \u2192 p_10(Oliver)"
                ]
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_8(Oliver)\np_7(Oliver)\np_5(Oliver)\n\u00acp_6(Oliver)\np_1(Oliver)\n\u00acp_4(Oliver)\np_2(Oliver)\np_3(Oliver)\n\u2200x (p_8(x) \u2192 p_18(x))\n\u2200x ((p_7(x) \u2227 p_18(x)) \u2192 p_16(x))\np_16(Oliver) \u2192 (p_17(Oliver) \u2227 p_12(Oliver))\n(p_5(Oliver) \u2295 p_15(Oliver)) \u2192 p_6(Oliver)\np_1(Oliver) \u2192 p_14(Oliver)\n(p_15(Oliver) \u2295 p_4(Oliver)) \u2192 p_9(Oliver)\np_11(Oliver) \u2192 (p_2(Oliver) \u2295 p_14(Oliver))\n\u2200x ((p_11(x) \u2295 p_12(x)) \u2192 p_13(x))\n(p_9(Oliver) \u2295 p_10(Oliver)) \u2192 p_3(Oliver)\np_18(Oliver)\n\u00ac(p_5(Oliver) \u2295 p_15(Oliver))\np_1(Oliver) \u2192 p_0(Oliver)\np_13(Oliver) \u2192 p_10(Oliver)\n\u00acp_11(Oliver)\np_14(Oliver)",
            "Initial Goal": "p_0(Oliver) \u2192 (p_10(Oliver) \u2295 p_13(Oliver))",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_8(Oliver)",
                    "p_7(Oliver)",
                    "p_5(Oliver)",
                    "-p_6(Oliver)",
                    "p_1(Oliver)",
                    "-p_4(Oliver)",
                    "p_2(Oliver)",
                    "p_3(Oliver)",
                    "all x (p_8(x) -> p_18(x))",
                    "all x ((p_7(x) & p_18(x)) -> p_16(x))",
                    "p_16(Oliver) -> (p_17(Oliver) & p_12(Oliver))",
                    "(-(p_5(Oliver) <-> p_15(Oliver))) -> p_6(Oliver)",
                    "p_1(Oliver) -> p_14(Oliver)",
                    "(-(p_15(Oliver) <-> p_4(Oliver))) -> p_9(Oliver)",
                    "p_11(Oliver) -> (-(p_2(Oliver) <-> p_14(Oliver)))",
                    "all x ((-(p_11(x) <-> p_12(x))) -> p_13(x))",
                    "(-(p_9(Oliver) <-> p_10(Oliver))) -> p_3(Oliver)",
                    "p_18(Oliver)",
                    "(p_5(Oliver) <-> p_15(Oliver))",
                    "p_1(Oliver) -> p_0(Oliver)",
                    "p_13(Oliver) -> p_10(Oliver)",
                    "-p_11(Oliver)",
                    "p_14(Oliver)"
                ],
                "formulas(goals)": [
                    "- (p_0(Oliver) -> (-(p_10(Oliver) <-> p_13(Oliver))))"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "\u00acp_11(Oliver)",
                    "p_14(Oliver)"
                ],
                "added_rules": []
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_8(Oliver)\np_7(Oliver)\np_5(Oliver)\n\u00acp_6(Oliver)\np_1(Oliver)\n\u00acp_4(Oliver)\np_2(Oliver)\np_3(Oliver)\n\u2200x (\u00acp_8(x) \u2228 p_18(x))\n\u2200x (\u00acp_7(x) \u2228 \u00acp_18(x) \u2228 p_16(x))\n\u00acp_16(Oliver) \u2228 (p_17(Oliver) \u2227 p_12(Oliver))\n\u00ac(p_5(Oliver) \u2295 p_15(Oliver)) \u2228 p_6(Oliver)\np_1(Oliver) \u2192 p_14(Oliver)\n(p_15(Oliver) \u2295 p_4(Oliver)) \u2192 p_9(Oliver)\np_11(Oliver) \u2192 (p_2(Oliver) \u2295 p_14(Oliver))\n\u2200x ((p_11(x) \u2295 p_12(x)) \u2192 p_13(x))\n(p_9(Oliver) \u2295 p_10(Oliver)) \u2192 p_3(Oliver)\np_18(Oliver)\n\u00ac(p_5(Oliver) \u2295 p_15(Oliver))\np_1(Oliver) \u2192 p_0(Oliver)\n\u00acp_13(Oliver) \u2228 p_10(Oliver)\n\u00acp_11(Oliver)\np_14(Oliver)\np_16(Oliver)\np_12(Oliver)\np_13(Oliver)\np_10(Oliver)\np_0(Oliver)",
            "Initial Goal": "p_0(Oliver) \u2192 (p_10(Oliver) \u2295 p_13(Oliver))",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_8(Oliver)",
                    "p_7(Oliver)",
                    "p_5(Oliver)",
                    "-p_6(Oliver)",
                    "p_1(Oliver)",
                    "-p_4(Oliver)",
                    "p_2(Oliver)",
                    "p_3(Oliver)",
                    "all x (-p_8(x) | p_18(x))",
                    "all x (-p_7(x) | -p_18(x) | p_16(x))",
                    "-p_16(Oliver) | (p_17(Oliver) & p_12(Oliver))",
                    "(-(p_5(Oliver) <-> -p_15(Oliver))) | p_6(Oliver)",
                    "p_1(Oliver) -> p_14(Oliver)",
                    "(p_15(Oliver) <-> -p_4(Oliver)) -> p_9(Oliver)",
                    "p_11(Oliver) -> ( -(p_2(Oliver) <-> p_14(Oliver)) )",
                    "all x ( (-(p_11(x) <-> p_12(x))) -> p_13(x) )",
                    "( -(p_9(Oliver) <-> p_10(Oliver)) ) -> p_3(Oliver)",
                    "p_18(Oliver)",
                    "-(p_5(Oliver) <-> -p_15(Oliver))",
                    "p_1(Oliver) -> p_0(Oliver)",
                    "-p_13(Oliver) | p_10(Oliver)",
                    "-p_11(Oliver)",
                    "p_14(Oliver)",
                    "p_16(Oliver)",
                    "p_12(Oliver)",
                    "p_13(Oliver)",
                    "p_10(Oliver)",
                    "p_0(Oliver)"
                ],
                "formulas(goals)": [
                    "p_0(Oliver) & (p_10(Oliver) <-> p_13(Oliver))"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_16(Oliver)",
                    "p_12(Oliver)",
                    "p_13(Oliver)",
                    "p_10(Oliver)",
                    "p_0(Oliver)"
                ],
                "added_rules": [
                    "\u2200x (\u00acp_8(x) \u2228 p_18(x))",
                    "\u2200x (\u00acp_7(x) \u2228 \u00acp_18(x) \u2228 p_16(x))",
                    "\u00acp_16(Oliver) \u2228 (p_17(Oliver) \u2227 p_12(Oliver))",
                    "\u00ac(p_5(Oliver) \u2295 p_15(Oliver)) \u2228 p_6(Oliver)",
                    "\u00acp_13(Oliver) \u2228 p_10(Oliver)"
                ]
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_8(Oliver)\np_7(Oliver)\np_5(Oliver)\n\u00acp_6(Oliver)\np_1(Oliver)\n\u00acp_4(Oliver)\np_2(Oliver)\np_3(Oliver)\n\u2200x (\u00acp_8(x) \u2228 p_18(x))\n\u2200x (\u00acp_7(x) \u2228 \u00acp_18(x) \u2228 p_16(x))\n\u00acp_16(Oliver) \u2228 (p_17(Oliver) \u2227 p_12(Oliver))\n\u00ac(p_5(Oliver) \u2295 p_15(Oliver)) \u2228 p_6(Oliver)\np_1(Oliver) \u2192 p_14(Oliver)\n(p_15(Oliver) \u2295 p_4(Oliver)) \u2192 p_9(Oliver)\np_11(Oliver) \u2192 (p_2(Oliver) \u2295 p_14(Oliver))\n\u2200x ((p_11(x) \u2295 p_12(x)) \u2192 p_13(x))\n(p_9(Oliver) \u2295 p_10(Oliver)) \u2192 p_3(Oliver)\np_18(Oliver)\n\u00ac(p_5(Oliver) \u2295 p_15(Oliver))\n\u00acp_13(Oliver) \u2228 p_10(Oliver)\n\u00acp_11(Oliver)\np_14(Oliver)\np_16(Oliver)\np_12(Oliver)\np_13(Oliver)\np_10(Oliver)\n\u00acp_0(Oliver)",
            "Initial Goal": "p_0(Oliver) \u2192 (p_10(Oliver) \u2295 p_13(Oliver))",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_8(Oliver)",
                    "p_7(Oliver)",
                    "p_5(Oliver)",
                    "-p_6(Oliver)",
                    "p_1(Oliver)",
                    "-p_4(Oliver)",
                    "p_2(Oliver)",
                    "p_3(Oliver)",
                    "all x (-p_8(x) | p_18(x))",
                    "all x (-p_7(x) | -p_18(x) | p_16(x))",
                    "-p_16(Oliver) | (p_17(Oliver) & p_12(Oliver))",
                    "(-(-(p_5(Oliver) <-> p_15(Oliver)))) | p_6(Oliver)",
                    "p_1(Oliver) -> p_14(Oliver)",
                    "(-(p_15(Oliver) <-> p_4(Oliver))) -> p_9(Oliver)",
                    "p_11(Oliver) -> (-(p_2(Oliver) <-> p_14(Oliver)))",
                    "all x ((-(p_11(x) <-> p_12(x))) -> p_13(x))",
                    "(-(p_9(Oliver) <-> p_10(Oliver))) -> p_3(Oliver)",
                    "p_18(Oliver)",
                    "-(-(p_5(Oliver) <-> p_15(Oliver)))",
                    "-p_13(Oliver) | p_10(Oliver)",
                    "-p_11(Oliver)",
                    "p_14(Oliver)",
                    "p_16(Oliver)",
                    "p_12(Oliver)",
                    "p_13(Oliver)",
                    "p_10(Oliver)",
                    "-p_0(Oliver)"
                ],
                "formulas(goals)": [
                    "p_0(Oliver) -> (-(p_10(Oliver) <-> p_13(Oliver)))"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "p_0(Oliver)"
                ],
                "removed_rules": [
                    "p_1(Oliver) \u2192 p_0(Oliver)"
                ],
                "added_facts": [
                    "\u00acp_0(Oliver)"
                ],
                "added_rules": []
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_8(Oliver)\np_7(Oliver)\np_5(Oliver)\n\u00acp_6(Oliver)\np_1(Oliver)\n\u00acp_4(Oliver)\np_2(Oliver)\np_3(Oliver)\n\u2200x (\u00acp_8(x) \u2228 p_18(x))\n\u2200x (\u00acp_7(x) \u2228 \u00acp_18(x) \u2228 p_16(x))\n\u00acp_16(Oliver) \u2228 (p_17(Oliver) \u2227 p_12(Oliver))\n\u00ac(p_5(Oliver) \u2295 p_15(Oliver)) \u2228 p_6(Oliver)\np_1(Oliver) \u2192 p_14(Oliver)\n(p_15(Oliver) \u2295 p_4(Oliver)) \u2192 p_9(Oliver)\np_11(Oliver) \u2192 (p_2(Oliver) \u2295 p_14(Oliver))\n\u2200x ((p_11(x) \u2295 p_12(x)) \u2192 p_13(x))\n(p_9(Oliver) \u2295 p_10(Oliver)) \u2192 p_3(Oliver)\np_18(Oliver)\n\u00ac(p_5(Oliver) \u2295 p_15(Oliver))\n\u00acp_13(Oliver) \u2228 p_10(Oliver)\n\u00acp_11(Oliver)\np_14(Oliver)\np_16(Oliver)\np_12(Oliver)\np_13(Oliver)\np_10(Oliver)\np_16(Oliver) \u2192 p_0(Oliver)",
            "Initial Goal": "p_0(Oliver) \u2192 (p_10(Oliver) \u2295 p_13(Oliver))",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_8(Oliver)",
                    "p_7(Oliver)",
                    "p_5(Oliver)",
                    "-p_6(Oliver)",
                    "p_1(Oliver)",
                    "-p_4(Oliver)",
                    "p_2(Oliver)",
                    "p_3(Oliver)",
                    "all x (-p_8(x) | p_18(x))",
                    "all x (-p_7(x) | -p_18(x) | p_16(x))",
                    "-p_16(Oliver) | (p_17(Oliver) & p_12(Oliver))",
                    "(-(p_5(Oliver) <-> p_15(Oliver))) | p_6(Oliver)",
                    "p_1(Oliver) -> p_14(Oliver)",
                    "((p_15(Oliver) <-> -p_4(Oliver)) | (-p_15(Oliver) <-> p_4(Oliver))) -> p_9(Oliver)",
                    "p_11(Oliver) -> (-(p_2(Oliver) <-> p_14(Oliver)))",
                    "all x ((-(p_11(x) <-> p_12(x))) -> p_13(x))",
                    "(-(p_9(Oliver) <-> p_10(Oliver))) -> p_3(Oliver)",
                    "p_18(Oliver)",
                    "(-(p_5(Oliver) <-> p_15(Oliver)))",
                    "-p_13(Oliver) | p_10(Oliver)",
                    "-p_11(Oliver)",
                    "p_14(Oliver)",
                    "p_16(Oliver)",
                    "p_12(Oliver)",
                    "p_13(Oliver)",
                    "p_10(Oliver)",
                    "p_16(Oliver) -> p_0(Oliver)"
                ],
                "formulas(goals)": [
                    "-(p_0(Oliver) -> -(p_10(Oliver) <-> p_13(Oliver)))"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "\u00acp_0(Oliver)"
                ],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "p_16(Oliver) \u2192 p_0(Oliver)"
                ]
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_8(Oliver)\np_7(Oliver)\np_5(Oliver)\n\u00acp_6(Oliver)\np_1(Oliver)\n\u00acp_4(Oliver)\np_2(Oliver)\np_3(Oliver)\n\u2200x (\u00acp_8(x) \u2228 p_18(x))\n\u2200x (\u00acp_7(x) \u2228 \u00acp_18(x) \u2228 p_16(x))\n\u00acp_16(Oliver) \u2228 (p_17(Oliver) \u2227 p_12(Oliver))\n(p_5(Oliver) \u2194 p_15(Oliver)) \u2228 p_6(Oliver)\np_1(Oliver) \u2192 p_14(Oliver)\n(p_15(Oliver) \u2295 p_4(Oliver)) \u2192 p_9(Oliver)\np_11(Oliver) \u2192 (p_2(Oliver) \u2295 p_14(Oliver))\n\u2200x ((p_11(x) \u2295 p_12(x)) \u2192 p_13(x))\n(p_9(Oliver) \u2295 p_10(Oliver)) \u2192 p_3(Oliver)\np_18(Oliver)\np_5(Oliver) \u2194 p_15(Oliver)\n\u00acp_13(Oliver) \u2228 p_10(Oliver)\n\u00acp_11(Oliver)\np_14(Oliver)\np_16(Oliver)\np_12(Oliver)\np_13(Oliver)\np_10(Oliver)\np_16(Oliver) \u2192 p_0(Oliver)\np_15(Oliver)\np_9(Oliver)\n(p_11(Oliver) \u2295 p_12(Oliver)) \u2192 p_13(Oliver)\np_8(Oliver) \u2192 p_18(Oliver)\n(p_7(Oliver) \u2227 p_18(Oliver)) \u2192 p_16(Oliver)",
            "Initial Goal": "p_0(Oliver) \u2192 (p_10(Oliver) \u2295 p_13(Oliver))",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_8(Oliver)",
                    "p_7(Oliver)",
                    "p_5(Oliver)",
                    "-p_6(Oliver)",
                    "p_1(Oliver)",
                    "-p_4(Oliver)",
                    "p_2(Oliver)",
                    "p_3(Oliver)",
                    "all x (-p_8(x) | p_18(x))",
                    "all x (-p_7(x) | -p_18(x) | p_16(x))",
                    "-p_16(Oliver) | (p_17(Oliver) & p_12(Oliver))",
                    "-p_5(Oliver) | p_15(Oliver) | p_6(Oliver)",
                    "-p_15(Oliver) | p_5(Oliver) | p_6(Oliver)",
                    "-p_1(Oliver) | p_14(Oliver)",
                    "-p_15(Oliver) | p_4(Oliver) | p_9(Oliver)",
                    "-p_4(Oliver) | p_15(Oliver) | p_9(Oliver)",
                    "-p_11(Oliver) | p_2(Oliver) | p_14(Oliver)",
                    "-p_11(Oliver) | -p_2(Oliver) | -p_14(Oliver)",
                    "all x (-p_11(x) | p_12(x) | p_13(x))",
                    "all x (-p_12(x) | p_11(x) | p_13(x))",
                    "-p_9(Oliver) | p_10(Oliver) | p_3(Oliver)",
                    "-p_10(Oliver) | p_9(Oliver) | p_3(Oliver)",
                    "p_18(Oliver)",
                    "-p_5(Oliver) | p_15(Oliver)",
                    "-p_15(Oliver) | p_5(Oliver)",
                    "-p_13(Oliver) | p_10(Oliver)",
                    "-p_11(Oliver)",
                    "p_14(Oliver)",
                    "p_16(Oliver)",
                    "p_12(Oliver)",
                    "p_13(Oliver)",
                    "p_10(Oliver)",
                    "-p_16(Oliver) | p_0(Oliver)",
                    "p_15(Oliver)",
                    "p_9(Oliver)",
                    "-p_11(Oliver) | p_12(Oliver) | p_13(Oliver)",
                    "-p_12(Oliver) | p_11(Oliver) | p_13(Oliver)",
                    "-p_8(Oliver) | p_18(Oliver)",
                    "-p_7(Oliver) | -p_18(Oliver) | p_16(Oliver)"
                ],
                "formulas(goals)": [
                    "-(-p_0(Oliver) | -(p_10(Oliver) <-> p_13(Oliver)))"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "\u00ac(p_5(Oliver) \u2295 p_15(Oliver))"
                ],
                "removed_rules": [
                    "\u00ac(p_5(Oliver) \u2295 p_15(Oliver)) \u2228 p_6(Oliver)"
                ],
                "added_facts": [
                    "p_5(Oliver) \u2194 p_15(Oliver)",
                    "p_15(Oliver)",
                    "p_9(Oliver)"
                ],
                "added_rules": [
                    "(p_5(Oliver) \u2194 p_15(Oliver)) \u2228 p_6(Oliver)",
                    "(p_11(Oliver) \u2295 p_12(Oliver)) \u2192 p_13(Oliver)",
                    "p_8(Oliver) \u2192 p_18(Oliver)",
                    "(p_7(Oliver) \u2227 p_18(Oliver)) \u2192 p_16(Oliver)"
                ]
            }
        }
    ]
}