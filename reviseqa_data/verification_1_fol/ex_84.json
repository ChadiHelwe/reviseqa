{
    "background_story": "Logan was known for his careless attitude towards life. He would often speed through the city streets on his motorcycle, ignoring traffic rules and putting himself and others at risk. His friends and family had grown accustomed to his reckless behavior, but it didn't make it any less worrisome. One day, Logan's carelessness almost cost him his job as a freelance photographer when he accidentally deleted an entire folder of crucial project files. Despite his talent, his lack of attention to detail and tendency to procrastinate often landed him in trouble. Logan's careless nature was a double-edged sword - it made him spontaneous and adventurous, but also prone to mistakes that could have serious consequences.",
    "predicates": [
        {
            "id": 0,
            "name": "become_responsible"
        },
        {
            "id": 1,
            "name": "feel_regret"
        },
        {
            "id": 2,
            "name": "is_spontaneous"
        },
        {
            "id": 3,
            "name": "plan_ahead"
        },
        {
            "id": 4,
            "name": "act_carelessly"
        },
        {
            "id": 5,
            "name": "make_mistakes"
        },
        {
            "id": 6,
            "name": "ignore_rules"
        },
        {
            "id": 7,
            "name": "face_consequences"
        },
        {
            "id": 8,
            "name": "disregard_safety"
        },
        {
            "id": 9,
            "name": "suffer_loss"
        },
        {
            "id": 10,
            "name": "learn_lessons"
        },
        {
            "id": 11,
            "name": "take_risks"
        },
        {
            "id": 12,
            "name": "be_impulsive"
        },
        {
            "id": 13,
            "name": "drive_fast"
        },
        {
            "id": 14,
            "name": "break_laws"
        },
        {
            "id": 15,
            "name": "procrastinate"
        },
        {
            "id": 16,
            "name": "miss_deadlines"
        },
        {
            "id": 17,
            "name": "gain_experience"
        },
        {
            "id": 18,
            "name": "is_adventurous"
        },
        {
            "id": 19,
            "name": "seek_thrills"
        }
    ],
    "subject_name": "Logan",
    "subject_category": "human",
    "keyword": "careless",
    "all_facts": [
        {
            "id": 0,
            "subject": "Logan",
            "text": "Logan does not become responsible.",
            "fol": "\u00acp_0(Logan)",
            "str_fol": "\u00acbecome_responsible(Logan)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Logan",
            "text": "Logan does not feel regret.",
            "fol": "\u00acp_1(Logan)",
            "str_fol": "\u00acfeel_regret(Logan)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Logan",
            "text": "Logan is spontaneous.",
            "fol": "p_2(Logan)",
            "str_fol": "is_spontaneous(Logan)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Logan",
            "text": "Logan does not plan ahead.",
            "fol": "\u00acp_3(Logan)",
            "str_fol": "\u00acplan_ahead(Logan)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Logan",
            "text": "Logan takes risks.",
            "fol": "p_11(Logan)",
            "str_fol": "take_risks(Logan)",
            "negation": false
        },
        {
            "id": 5,
            "subject": "Logan",
            "text": "Logan does not learn lessons.",
            "fol": "\u00acp_10(Logan)",
            "str_fol": "\u00aclearn_lessons(Logan)",
            "negation": true
        },
        {
            "id": 6,
            "subject": "Logan",
            "text": "Logan does not suffer loss.",
            "fol": "\u00acp_9(Logan)",
            "str_fol": "\u00acsuffer_loss(Logan)",
            "negation": true
        },
        {
            "id": 7,
            "subject": "Logan",
            "text": "Logan does not face consequences.",
            "fol": "\u00acp_7(Logan)",
            "str_fol": "\u00acface_consequences(Logan)",
            "negation": true
        },
        {
            "id": 8,
            "subject": "Logan",
            "text": "Logan does not ignore rules.",
            "fol": "\u00acp_6(Logan)",
            "str_fol": "\u00acignore_rules(Logan)",
            "negation": true
        },
        {
            "id": 9,
            "subject": "Logan",
            "text": "Logan does not make mistakes.",
            "fol": "\u00acp_5(Logan)",
            "str_fol": "\u00acmake_mistakes(Logan)",
            "negation": true
        },
        {
            "id": 10,
            "subject": "Logan",
            "text": "Logan does not act carelessly.",
            "fol": "\u00acp_4(Logan)",
            "str_fol": "\u00acact_carelessly(Logan)",
            "negation": true
        }
    ],
    "context_facts": [
        {
            "id": 2,
            "subject": "Logan",
            "text": "Logan is spontaneous.",
            "fol": "p_2(Logan)",
            "str_fol": "is_spontaneous(Logan)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Logan",
            "text": "Logan does not plan ahead.",
            "fol": "\u00acp_3(Logan)",
            "str_fol": "\u00acplan_ahead(Logan)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Logan",
            "text": "Logan does not feel regret.",
            "fol": "\u00acp_1(Logan)",
            "str_fol": "\u00acfeel_regret(Logan)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Logan",
            "text": "Logan does not become responsible.",
            "fol": "\u00acp_0(Logan)",
            "str_fol": "\u00acbecome_responsible(Logan)",
            "negation": true
        }
    ],
    "context_rules": [
        {
            "id": 6,
            "text": "If Logan is spontaneous, then he either takes risks or plans ahead, but not both.",
            "fol": "p_2(Logan) \u2192 (p_11(Logan) \u2295 p_3(Logan))",
            "str_fol": "is_spontaneous(Logan) \u2192 (take_risks(Logan) \u2295 plan_ahead(Logan))"
        },
        {
            "id": 5,
            "text": "Logan either learns lessons or takes risks, but he does not do both.",
            "fol": "p_10(Logan) \u2295 p_11(Logan)",
            "str_fol": "learn_lessons(Logan) \u2295 take_risks(Logan)"
        },
        {
            "id": 4,
            "text": "If someone suffers loss, then they will feel regret.",
            "fol": "\u2200x (p_9(x) \u2192 p_1(x))",
            "str_fol": "\u2200x (suffer_loss(x) \u2192 feel_regret(x))"
        },
        {
            "id": 3,
            "text": "If Logan faces consequences, then he learns lessons and becomes responsible.",
            "fol": "p_7(Logan) \u2192 (p_10(Logan) \u2227 p_0(Logan))",
            "str_fol": "face_consequences(Logan) \u2192 (learn_lessons(Logan) \u2227 become_responsible(Logan))"
        },
        {
            "id": 2,
            "text": "If Logan ignores rules or disregards safety, then he will suffer loss.",
            "fol": "(p_6(Logan) \u2228 p_8(Logan)) \u2192 p_9(Logan)",
            "str_fol": "(ignore_rules(Logan) \u2228 disregard_safety(Logan)) \u2192 suffer_loss(Logan)"
        },
        {
            "id": 1,
            "text": "If Logan either ignores rules or makes mistakes (but not both), then he will face consequences.",
            "fol": "(p_6(Logan) \u2295 p_5(Logan)) \u2192 p_7(Logan)",
            "str_fol": "(ignore_rules(Logan) \u2295 make_mistakes(Logan)) \u2192 face_consequences(Logan)"
        },
        {
            "id": 0,
            "text": "For all humans, if they act carelessly, then they make mistakes.",
            "fol": "\u2200x (p_4(x) \u2192 p_5(x))",
            "str_fol": "\u2200x (act_carelessly(x) \u2192 make_mistakes(x))"
        }
    ],
    "context": [
        {
            "id": 2,
            "subject": "Logan",
            "text": "Logan is spontaneous.",
            "fol": "p_2(Logan)",
            "str_fol": "is_spontaneous(Logan)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Logan",
            "text": "Logan does not plan ahead.",
            "fol": "\u00acp_3(Logan)",
            "str_fol": "\u00acplan_ahead(Logan)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Logan",
            "text": "Logan does not feel regret.",
            "fol": "\u00acp_1(Logan)",
            "str_fol": "\u00acfeel_regret(Logan)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Logan",
            "text": "Logan does not become responsible.",
            "fol": "\u00acp_0(Logan)",
            "str_fol": "\u00acbecome_responsible(Logan)",
            "negation": true
        },
        {
            "id": 6,
            "text": "If Logan is spontaneous, then he either takes risks or plans ahead, but not both.",
            "fol": "p_2(Logan) \u2192 (p_11(Logan) \u2295 p_3(Logan))",
            "str_fol": "is_spontaneous(Logan) \u2192 (take_risks(Logan) \u2295 plan_ahead(Logan))"
        },
        {
            "id": 5,
            "text": "Logan either learns lessons or takes risks, but he does not do both.",
            "fol": "p_10(Logan) \u2295 p_11(Logan)",
            "str_fol": "learn_lessons(Logan) \u2295 take_risks(Logan)"
        },
        {
            "id": 4,
            "text": "If someone suffers loss, then they will feel regret.",
            "fol": "\u2200x (p_9(x) \u2192 p_1(x))",
            "str_fol": "\u2200x (suffer_loss(x) \u2192 feel_regret(x))"
        },
        {
            "id": 3,
            "text": "If Logan faces consequences, then he learns lessons and becomes responsible.",
            "fol": "p_7(Logan) \u2192 (p_10(Logan) \u2227 p_0(Logan))",
            "str_fol": "face_consequences(Logan) \u2192 (learn_lessons(Logan) \u2227 become_responsible(Logan))"
        },
        {
            "id": 2,
            "text": "If Logan ignores rules or disregards safety, then he will suffer loss.",
            "fol": "(p_6(Logan) \u2228 p_8(Logan)) \u2192 p_9(Logan)",
            "str_fol": "(ignore_rules(Logan) \u2228 disregard_safety(Logan)) \u2192 suffer_loss(Logan)"
        },
        {
            "id": 1,
            "text": "If Logan either ignores rules or makes mistakes (but not both), then he will face consequences.",
            "fol": "(p_6(Logan) \u2295 p_5(Logan)) \u2192 p_7(Logan)",
            "str_fol": "(ignore_rules(Logan) \u2295 make_mistakes(Logan)) \u2192 face_consequences(Logan)"
        },
        {
            "id": 0,
            "text": "For all humans, if they act carelessly, then they make mistakes.",
            "fol": "\u2200x (p_4(x) \u2192 p_5(x))",
            "str_fol": "\u2200x (act_carelessly(x) \u2192 make_mistakes(x))"
        }
    ],
    "context_fol": "p_2(Logan)\n\u00acp_3(Logan)\n\u00acp_1(Logan)\n\u00acp_0(Logan)\np_2(Logan) \u2192 (p_11(Logan) \u2295 p_3(Logan))\np_10(Logan) \u2295 p_11(Logan)\n\u2200x (p_9(x) \u2192 p_1(x))\np_7(Logan) \u2192 (p_10(Logan) \u2227 p_0(Logan))\n(p_6(Logan) \u2228 p_8(Logan)) \u2192 p_9(Logan)\n(p_6(Logan) \u2295 p_5(Logan)) \u2192 p_7(Logan)\n\u2200x (p_4(x) \u2192 p_5(x))",
    "conclusion": {
        "id": 10,
        "subject": "Logan",
        "text": "Logan does not act carelessly.",
        "fol": "\u00acp_4(Logan)",
        "str_fol": "\u00acact_carelessly(Logan)",
        "negation": true
    },
    "initial_answer": "True",
    "initial_goal": "\u00acp_4(Logan)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 2,
                    "subject": "Logan",
                    "text": "Logan is spontaneous.",
                    "fol": "p_2(Logan)",
                    "str_fol": "is_spontaneous(Logan)",
                    "negation": false
                },
                {
                    "id": 3,
                    "subject": "Logan",
                    "text": "Logan does not plan ahead.",
                    "fol": "\u00acp_3(Logan)",
                    "str_fol": "\u00acplan_ahead(Logan)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 6,
                    "text": "If Logan is spontaneous, then he either takes risks or plans ahead, but not both.",
                    "fol": "p_2(Logan) \u2192 (p_11(Logan) \u2295 p_3(Logan))",
                    "str_fol": "is_spontaneous(Logan) \u2192 (take_risks(Logan) \u2295 plan_ahead(Logan))"
                }
            ],
            "conclusion": {
                "id": 4,
                "subject": "Logan",
                "text": "Logan takes risks.",
                "fol": "p_11(Logan)",
                "str_fol": "take_risks(Logan)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 4,
                    "subject": "Logan",
                    "text": "Logan takes risks.",
                    "fol": "p_11(Logan)",
                    "str_fol": "take_risks(Logan)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "Logan either learns lessons or takes risks, but he does not do both.",
                    "fol": "p_10(Logan) \u2295 p_11(Logan)",
                    "str_fol": "learn_lessons(Logan) \u2295 take_risks(Logan)"
                }
            ],
            "conclusion": {
                "id": 5,
                "subject": "Logan",
                "text": "Logan does not learn lessons.",
                "fol": "\u00acp_10(Logan)",
                "str_fol": "\u00aclearn_lessons(Logan)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 1,
                    "subject": "Logan",
                    "text": "Logan does not feel regret.",
                    "fol": "\u00acp_1(Logan)",
                    "str_fol": "\u00acfeel_regret(Logan)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "If someone suffers loss, then they will feel regret.",
                    "fol": "\u2200x (p_9(x) \u2192 p_1(x))",
                    "str_fol": "\u2200x (suffer_loss(x) \u2192 feel_regret(x))"
                }
            ],
            "conclusion": {
                "id": 6,
                "subject": "Logan",
                "text": "Logan does not suffer loss.",
                "fol": "\u00acp_9(Logan)",
                "str_fol": "\u00acsuffer_loss(Logan)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 5,
                    "subject": "Logan",
                    "text": "Logan does not learn lessons.",
                    "fol": "\u00acp_10(Logan)",
                    "str_fol": "\u00aclearn_lessons(Logan)",
                    "negation": true
                },
                {
                    "id": 0,
                    "subject": "Logan",
                    "text": "Logan does not become responsible.",
                    "fol": "\u00acp_0(Logan)",
                    "str_fol": "\u00acbecome_responsible(Logan)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "If Logan faces consequences, then he learns lessons and becomes responsible.",
                    "fol": "p_7(Logan) \u2192 (p_10(Logan) \u2227 p_0(Logan))",
                    "str_fol": "face_consequences(Logan) \u2192 (learn_lessons(Logan) \u2227 become_responsible(Logan))"
                }
            ],
            "conclusion": {
                "id": 7,
                "subject": "Logan",
                "text": "Logan does not face consequences.",
                "fol": "\u00acp_7(Logan)",
                "str_fol": "\u00acface_consequences(Logan)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 6,
                    "subject": "Logan",
                    "text": "Logan does not suffer loss.",
                    "fol": "\u00acp_9(Logan)",
                    "str_fol": "\u00acsuffer_loss(Logan)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "If Logan ignores rules or disregards safety, then he will suffer loss.",
                    "fol": "(p_6(Logan) \u2228 p_8(Logan)) \u2192 p_9(Logan)",
                    "str_fol": "(ignore_rules(Logan) \u2228 disregard_safety(Logan)) \u2192 suffer_loss(Logan)"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Logan",
                "text": "Logan does not ignore rules.",
                "fol": "\u00acp_6(Logan)",
                "str_fol": "\u00acignore_rules(Logan)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 8,
                    "subject": "Logan",
                    "text": "Logan does not ignore rules.",
                    "fol": "\u00acp_6(Logan)",
                    "str_fol": "\u00acignore_rules(Logan)",
                    "negation": true
                },
                {
                    "id": 7,
                    "subject": "Logan",
                    "text": "Logan does not face consequences.",
                    "fol": "\u00acp_7(Logan)",
                    "str_fol": "\u00acface_consequences(Logan)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "If Logan either ignores rules or makes mistakes (but not both), then he will face consequences.",
                    "fol": "(p_6(Logan) \u2295 p_5(Logan)) \u2192 p_7(Logan)",
                    "str_fol": "(ignore_rules(Logan) \u2295 make_mistakes(Logan)) \u2192 face_consequences(Logan)"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Logan",
                "text": "Logan does not make mistakes.",
                "fol": "\u00acp_5(Logan)",
                "str_fol": "\u00acmake_mistakes(Logan)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 9,
                    "subject": "Logan",
                    "text": "Logan does not make mistakes.",
                    "fol": "\u00acp_5(Logan)",
                    "str_fol": "\u00acmake_mistakes(Logan)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "For all humans, if they act carelessly, then they make mistakes.",
                    "fol": "\u2200x (p_4(x) \u2192 p_5(x))",
                    "str_fol": "\u2200x (act_carelessly(x) \u2192 make_mistakes(x))"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Logan",
                "text": "Logan does not act carelessly.",
                "fol": "\u00acp_4(Logan)",
                "str_fol": "\u00acact_carelessly(Logan)",
                "negation": true
            }
        }
    ],
    "proof_trace": "3 (all x (p_9(x) -> p_1(x))).  [assumption].\n4 p_7(Logan) -> p_10(Logan) & p_0(Logan).  [assumption].\n5 p_6(Logan) | p_8(Logan) -> p_9(Logan).  [assumption].\n6 -(p_6(Logan) <-> p_5(Logan)) -> p_7(Logan).  [assumption].\n7 (all x (p_4(x) -> p_5(x))).  [assumption].\n8 -p_4(Logan).  [goal].\n15 -p_9(x) | p_1(x).  [clausify(3)].\n16 -p_1(Logan).  [assumption].\n17 -p_7(Logan) | p_0(Logan).  [clausify(4)].\n18 -p_0(Logan).  [assumption].\n22 p_6(Logan) | -p_5(Logan) | p_7(Logan).  [clausify(6)].\n23 -p_6(Logan) | p_9(Logan).  [clausify(5)].\n25 p_4(Logan).  [deny(8)].\n26 -p_4(x) | p_5(x).  [clausify(7)].\n27 -p_5(Logan) | p_7(Logan) | p_9(Logan).  [resolve(22,a,23,a)].\n28 -p_9(Logan).  [resolve(15,b,16,a)].\n29 -p_5(Logan) | p_7(Logan).  [resolve(27,c,28,a)].\n30 -p_7(Logan).  [resolve(17,b,18,a)].\n31 -p_5(Logan).  [resolve(29,b,30,a)].\n32 p_5(Logan).  [resolve(25,a,26,a)].\n33 $F.  [resolve(31,a,32,a)].",
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_2(Logan)\n\u00acp_3(Logan)\n\u00acp_1(Logan)\n\u00acp_0(Logan)\np_2(Logan) \u2192 (p_11(Logan) \u2295 p_3(Logan))\np_10(Logan) \u2295 p_11(Logan)\n\u2200x (p_9(x) \u2192 p_1(x))\np_7(Logan) \u2192 (p_10(Logan) \u2227 p_0(Logan))\n(p_6(Logan) \u2228 p_8(Logan)) \u2192 p_9(Logan)\n(p_6(Logan) \u2295 p_5(Logan)) \u2192 p_7(Logan)\n\u2200x (p_4(x) \u2192 p_5(x))\np_11(Logan)\n\u00acp_10(Logan)\n\u00acp_7(Logan)\n\u00acp_5(Logan)\n\u00acp_6(Logan)\n\u00acp_9(Logan)\n\u00acp_8(Logan)",
            "Initial Goal": "\u00acp_4(Logan)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_2(Logan)",
                    "-p_3(Logan)",
                    "-p_1(Logan)",
                    "-p_0(Logan)",
                    "p_2(Logan) -> (-(p_11(Logan) <-> p_3(Logan)))",
                    "-(p_10(Logan) <-> p_11(Logan))",
                    "all x (p_9(x) -> p_1(x))",
                    "p_7(Logan) -> (p_10(Logan) & p_0(Logan))",
                    "(p_6(Logan) | p_8(Logan)) -> p_9(Logan)",
                    "(-(p_6(Logan) <-> p_5(Logan))) -> p_7(Logan)",
                    "all x (p_4(x) -> p_5(x))",
                    "p_11(Logan)",
                    "-p_10(Logan)",
                    "-p_7(Logan)",
                    "-p_5(Logan)",
                    "-p_6(Logan)",
                    "-p_9(Logan)",
                    "-p_8(Logan)"
                ],
                "formulas(goals)": [
                    "-p_4(Logan)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_11(Logan)",
                    "\u00acp_10(Logan)",
                    "\u00acp_7(Logan)",
                    "\u00acp_5(Logan)",
                    "\u00acp_6(Logan)",
                    "\u00acp_9(Logan)",
                    "\u00acp_8(Logan)"
                ],
                "added_rules": []
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_2(Logan)\n\u00acp_3(Logan)\n\u00acp_1(Logan)\n\u00acp_0(Logan)\np_2(Logan) \u2192 ((p_11(Logan) \u2228 p_3(Logan)) \u2227 \u00ac(p_11(Logan) \u2227 p_3(Logan)))\n(p_10(Logan) \u2228 p_11(Logan)) \u2227 \u00ac(p_10(Logan) \u2227 p_11(Logan))\n\u2200x (p_9(x) \u2192 p_1(x))\np_7(Logan) \u2192 (p_10(Logan) \u2227 p_0(Logan))\n(p_6(Logan) \u2228 p_8(Logan)) \u2192 p_9(Logan)\n(p_6(Logan) \u2295 p_5(Logan)) \u2192 p_7(Logan)\n\u2200x (p_4(x) \u2192 p_5(x))\n\u2200x (\u00acp_5(x) \u2192 \u00acp_4(x))\np_11(Logan)\n\u00acp_10(Logan)\n\u00acp_7(Logan)\n\u00acp_5(Logan)\n\u00acp_6(Logan)\n\u00acp_9(Logan)\n\u00acp_8(Logan)",
            "Initial Goal": "\u00acp_4(Logan)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_2(Logan)",
                    "-p_3(Logan)",
                    "-p_1(Logan)",
                    "-p_0(Logan)",
                    "p_2(Logan) -> ((p_11(Logan) | p_3(Logan)) & (-(p_11(Logan) & p_3(Logan))))",
                    "(p_10(Logan) | p_11(Logan)) & (-(p_10(Logan) & p_11(Logan)))",
                    "all x (p_9(x) -> p_1(x))",
                    "p_7(Logan) -> (p_10(Logan) & p_0(Logan))",
                    "(p_6(Logan) | p_8(Logan)) -> p_9(Logan)",
                    "(-(p_6(Logan) <-> p_5(Logan))) -> p_7(Logan)",
                    "all x (p_4(x) -> p_5(x))",
                    "all x (-p_5(x) -> -p_4(x))",
                    "p_11(Logan)",
                    "-p_10(Logan)",
                    "-p_7(Logan)",
                    "-p_5(Logan)",
                    "-p_6(Logan)",
                    "-p_9(Logan)",
                    "-p_8(Logan)"
                ],
                "formulas(goals)": [
                    "-p_4(Logan)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "\u2200x (\u00acp_5(x) \u2192 \u00acp_4(x))"
                ]
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_2(Logan)\n\u00acp_3(Logan)\n\u00acp_1(Logan)\n\u00acp_0(Logan)\np_2(Logan) \u2192 ((p_11(Logan) \u2228 p_3(Logan)) \u2227 \u00ac(p_11(Logan) \u2227 p_3(Logan)))\n(p_10(Logan) \u2228 p_11(Logan)) \u2227 \u00ac(p_10(Logan) \u2227 p_11(Logan))\n\u2200x (p_9(x) \u2192 p_1(x))\np_7(Logan) \u2192 (p_10(Logan) \u2227 p_0(Logan))\n(p_6(Logan) \u2228 p_8(Logan)) \u2192 p_9(Logan)\n(p_6(Logan) \u2295 p_5(Logan)) \u2192 p_7(Logan)\np_11(Logan)\n\u00acp_10(Logan)\n\u00acp_7(Logan)\n\u00acp_5(Logan)\n\u00acp_6(Logan)\n\u00acp_9(Logan)\n\u00acp_8(Logan)\n(\u00acp_5(Logan) \u2227 p_11(Logan)) \u2192 p_4(Logan)",
            "Initial Goal": "\u00acp_4(Logan)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_2(Logan)",
                    "-p_3(Logan)",
                    "-p_1(Logan)",
                    "-p_0(Logan)",
                    "p_2(Logan) -> ((p_11(Logan) | p_3(Logan)) & -(p_11(Logan) & p_3(Logan)))",
                    "(p_10(Logan) | p_11(Logan)) & -(p_10(Logan) & p_11(Logan))",
                    "all x (p_9(x) -> p_1(x))",
                    "p_7(Logan) -> (p_10(Logan) & p_0(Logan))",
                    "(p_6(Logan) | p_8(Logan)) -> p_9(Logan)",
                    "(-(p_6(Logan) <-> p_5(Logan))) -> p_7(Logan)",
                    "p_11(Logan)",
                    "-p_10(Logan)",
                    "-p_7(Logan)",
                    "-p_5(Logan)",
                    "-p_6(Logan)",
                    "-p_9(Logan)",
                    "-p_8(Logan)",
                    "(-p_5(Logan) & p_11(Logan)) -> p_4(Logan)"
                ],
                "formulas(goals)": [
                    "-(-p_4(Logan))"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u2200x (p_4(x) \u2192 p_5(x))",
                    "\u2200x (\u00acp_5(x) \u2192 \u00acp_4(x))"
                ],
                "added_facts": [],
                "added_rules": [
                    "(\u00acp_5(Logan) \u2227 p_11(Logan)) \u2192 p_4(Logan)"
                ]
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_2(Logan)\n\u00acp_3(Logan)\n\u00acp_1(Logan)\n\u00acp_0(Logan)\np_2(Logan) \u2192 ((p_11(Logan) \u2228 p_3(Logan)) \u2227 \u00ac(p_11(Logan) \u2227 p_3(Logan)))\n(p_10(Logan) \u2228 p_11(Logan)) \u2227 \u00ac(p_10(Logan) \u2227 p_11(Logan))\n\u2200x (p_9(x) \u2192 p_1(x))\np_7(Logan) \u2192 p_10(Logan)\np_7(Logan) \u2192 p_0(Logan)\n(p_6(Logan) \u2228 p_8(Logan)) \u2192 p_9(Logan)\n((p_6(Logan) \u2228 p_5(Logan)) \u2227 \u00ac(p_6(Logan) \u2227 p_5(Logan))) \u2192 p_7(Logan)\np_11(Logan)\n\u00acp_10(Logan)\n\u00acp_7(Logan)\n\u00acp_5(Logan)\n\u00acp_6(Logan)\n\u00acp_9(Logan)\n\u00acp_8(Logan)\n(\u00acp_5(Logan) \u2227 p_11(Logan)) \u2192 p_4(Logan)\np_4(Logan)\np_9(Logan) \u2192 p_1(Logan)",
            "Initial Goal": "\u00acp_4(Logan)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_2(Logan)",
                    "-p_3(Logan)",
                    "-p_1(Logan)",
                    "-p_0(Logan)",
                    "p_2(Logan) -> ((p_11(Logan) | p_3(Logan)) & -(p_11(Logan) & p_3(Logan)))",
                    "(p_10(Logan) | p_11(Logan)) & -(p_10(Logan) & p_11(Logan))",
                    "all x (p_9(x) -> p_1(x))",
                    "p_7(Logan) -> p_10(Logan)",
                    "p_7(Logan) -> p_0(Logan)",
                    "(p_6(Logan) | p_8(Logan)) -> p_9(Logan)",
                    "((p_6(Logan) | p_5(Logan)) & -(p_6(Logan) & p_5(Logan))) -> p_7(Logan)",
                    "p_11(Logan)",
                    "-p_10(Logan)",
                    "-p_7(Logan)",
                    "-p_5(Logan)",
                    "-p_6(Logan)",
                    "-p_9(Logan)",
                    "-p_8(Logan)",
                    "(-p_5(Logan) & p_11(Logan)) -> p_4(Logan)",
                    "p_4(Logan)",
                    "p_9(Logan) -> p_1(Logan)"
                ],
                "formulas(goals)": [
                    "--p_4(Logan)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_4(Logan)"
                ],
                "added_rules": [
                    "p_7(Logan) \u2192 p_10(Logan)",
                    "p_7(Logan) \u2192 p_0(Logan)",
                    "p_9(Logan) \u2192 p_1(Logan)",
                    "((p_6(Logan) \u2228 p_5(Logan)) \u2227 \u00ac(p_6(Logan) \u2227 p_5(Logan))) \u2192 p_7(Logan)"
                ]
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_2(Logan)\n\u00acp_3(Logan)\n\u00acp_1(Logan)\n\u00acp_0(Logan)\n(p_2(Logan) \u2192 (p_11(Logan) \u2228 p_3(Logan))) \u2227 (p_2(Logan) \u2192 \u00ac(p_11(Logan) \u2227 p_3(Logan)))\n(p_10(Logan) \u2228 p_11(Logan)) \u2227 \u00ac(p_10(Logan) \u2227 p_11(Logan))\n\u2200x (p_9(x) \u2192 p_1(x))\np_7(Logan) \u2192 p_10(Logan)\np_7(Logan) \u2192 p_0(Logan)\n(p_6(Logan) \u2228 p_8(Logan)) \u2192 p_9(Logan)\n((p_6(Logan) \u2228 p_5(Logan)) \u2227 (\u00acp_6(Logan) \u2228 \u00acp_5(Logan))) \u2192 p_7(Logan)\np_11(Logan)\n\u00acp_10(Logan)\n\u00acp_7(Logan)\n\u00acp_5(Logan)\n\u00acp_6(Logan)\n\u00acp_9(Logan)\n\u00acp_8(Logan)\n(\u00acp_5(Logan) \u2227 p_11(Logan)) \u2192 p_4(Logan)\np_4(Logan)\np_9(Logan) \u2192 p_1(Logan)\np_4(Logan) \u2228 p_3(Logan)\np_4(Logan) \u2228 \u00acp_4(Logan)",
            "Initial Goal": "\u00acp_4(Logan)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_2(Logan)",
                    "-p_3(Logan)",
                    "-p_1(Logan)",
                    "-p_0(Logan)",
                    "(p_2(Logan) -> (p_11(Logan) | p_3(Logan))) & (p_2(Logan) -> -(p_11(Logan) & p_3(Logan)))",
                    "(p_10(Logan) | p_11(Logan)) & -(p_10(Logan) & p_11(Logan))",
                    "all x (p_9(x) -> p_1(x))",
                    "p_7(Logan) -> p_10(Logan)",
                    "p_7(Logan) -> p_0(Logan)",
                    "(p_6(Logan) | p_8(Logan)) -> p_9(Logan)",
                    "((p_6(Logan) | p_5(Logan)) & (-p_6(Logan) | -p_5(Logan))) -> p_7(Logan)",
                    "p_11(Logan)",
                    "-p_10(Logan)",
                    "-p_7(Logan)",
                    "-p_5(Logan)",
                    "-p_6(Logan)",
                    "-p_9(Logan)",
                    "-p_8(Logan)",
                    "(-p_5(Logan) & p_11(Logan)) -> p_4(Logan)",
                    "p_4(Logan)",
                    "p_9(Logan) -> p_1(Logan)",
                    "p_4(Logan) | p_3(Logan)",
                    "p_4(Logan) | -p_4(Logan)"
                ],
                "formulas(goals)": [
                    "p_4(Logan)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_4(Logan) \u2228 p_3(Logan)",
                    "p_4(Logan) \u2228 \u00acp_4(Logan)"
                ],
                "added_rules": [
                    "(p_2(Logan) \u2192 (p_11(Logan) \u2228 p_3(Logan))) \u2227 (p_2(Logan) \u2192 \u00ac(p_11(Logan) \u2227 p_3(Logan)))",
                    "((p_6(Logan) \u2228 p_5(Logan)) \u2227 (\u00acp_6(Logan) \u2228 \u00acp_5(Logan))) \u2192 p_7(Logan)"
                ]
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_2(Logan)\n\u00acp_3(Logan)\n\u00acp_1(Logan)\n\u00acp_0(Logan)\n(p_2(Logan) \u2192 (p_11(Logan) \u2228 p_3(Logan))) \u2227 (p_2(Logan) \u2192 \u00ac(p_11(Logan) \u2227 p_3(Logan)))\n(p_10(Logan) \u2228 p_11(Logan)) \u2227 \u00ac(p_10(Logan) \u2227 p_11(Logan))\n\u2200x (p_9(x) \u2192 p_1(x))\np_7(Logan) \u2192 p_10(Logan)\np_7(Logan) \u2192 p_0(Logan)\n(p_6(Logan) \u2228 p_8(Logan)) \u2192 p_9(Logan)\n((p_6(Logan) \u2228 p_5(Logan)) \u2227 (\u00acp_6(Logan) \u2228 \u00acp_5(Logan))) \u2192 p_7(Logan)\np_11(Logan)\n\u00acp_10(Logan)\n\u00acp_7(Logan)\n\u00acp_5(Logan)\n\u00acp_6(Logan)\n\u00acp_9(Logan)\n\u00acp_8(Logan)\n(\u00acp_5(Logan) \u2227 p_11(Logan)) \u2192 p_4(Logan)\np_4(Logan)\np_9(Logan) \u2192 p_1(Logan)\np_4(Logan) \u2228 p_3(Logan)\np_4(Logan) \u2228 \u00acp_4(Logan)\np_11(Logan) \u2228 p_3(Logan)\n\u00ac(p_11(Logan) \u2227 p_3(Logan))\n\u00ac(p_10(Logan) \u2227 p_11(Logan))\n((p_6(Logan) \u2227 \u00acp_5(Logan)) \u2228 (\u00acp_6(Logan) \u2227 p_5(Logan))) \u2192 p_7(Logan)",
            "Initial Goal": "\u00acp_4(Logan)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_2(Logan)",
                    "-p_3(Logan)",
                    "-p_1(Logan)",
                    "-p_0(Logan)",
                    "(p_2(Logan) -> (p_11(Logan) | p_3(Logan))) & (p_2(Logan) -> -(p_11(Logan) & p_3(Logan)))",
                    "(p_10(Logan) | p_11(Logan)) & -(p_10(Logan) & p_11(Logan))",
                    "all x (p_9(x) -> p_1(x))",
                    "p_7(Logan) -> p_10(Logan)",
                    "p_7(Logan) -> p_0(Logan)",
                    "(p_6(Logan) | p_8(Logan)) -> p_9(Logan)",
                    "((p_6(Logan) | p_5(Logan)) & (-p_6(Logan) | -p_5(Logan))) -> p_7(Logan)",
                    "p_11(Logan)",
                    "-p_10(Logan)",
                    "-p_7(Logan)",
                    "-p_5(Logan)",
                    "-p_6(Logan)",
                    "-p_9(Logan)",
                    "-p_8(Logan)",
                    "(-p_5(Logan) & p_11(Logan)) -> p_4(Logan)",
                    "p_4(Logan)",
                    "p_9(Logan) -> p_1(Logan)",
                    "p_4(Logan) | p_3(Logan)",
                    "p_4(Logan) | -p_4(Logan)",
                    "p_11(Logan) | p_3(Logan)",
                    "-(p_11(Logan) & p_3(Logan))",
                    "-(p_10(Logan) & p_11(Logan))",
                    "((p_6(Logan) & -p_5(Logan)) | (-p_6(Logan) & p_5(Logan))) -> p_7(Logan)"
                ],
                "formulas(goals)": [
                    "p_4(Logan)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_11(Logan) \u2228 p_3(Logan)",
                    "\u00ac(p_11(Logan) \u2227 p_3(Logan))",
                    "\u00ac(p_10(Logan) \u2227 p_11(Logan))"
                ],
                "added_rules": [
                    "((p_6(Logan) \u2227 \u00acp_5(Logan)) \u2228 (\u00acp_6(Logan) \u2227 p_5(Logan))) \u2192 p_7(Logan)"
                ]
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_2(Logan)\n\u00acp_3(Logan)\n\u00acp_1(Logan)\n\u00acp_0(Logan)\n(p_2(Logan) \u2192 (p_11(Logan) \u2228 p_3(Logan))) \u2227 (p_2(Logan) \u2192 \u00ac(p_11(Logan) \u2227 p_3(Logan)))\n(p_10(Logan) \u2228 p_11(Logan)) \u2227 \u00ac(p_10(Logan) \u2227 p_11(Logan))\n\u2200x (p_9(x) \u2192 p_1(x))\np_7(Logan) \u2192 p_10(Logan)\np_7(Logan) \u2192 p_0(Logan)\n(p_6(Logan) \u2228 p_8(Logan)) \u2192 p_9(Logan)\n((p_6(Logan) \u2228 p_5(Logan)) \u2227 (\u00acp_6(Logan) \u2228 \u00acp_5(Logan))) \u2192 p_7(Logan)\np_11(Logan)\n\u00acp_10(Logan)\n\u00acp_7(Logan)\n\u00acp_5(Logan)\n\u00acp_6(Logan)\n\u00acp_9(Logan)\n\u00acp_8(Logan)\np_9(Logan) \u2192 p_1(Logan)\np_4(Logan) \u2228 \u00acp_4(Logan)\np_11(Logan) \u2228 p_3(Logan)\n\u00ac(p_11(Logan) \u2227 p_3(Logan))\n\u00ac(p_10(Logan) \u2227 p_11(Logan))\n((p_6(Logan) \u2227 \u00acp_5(Logan)) \u2228 (\u00acp_6(Logan) \u2227 p_5(Logan))) \u2192 p_7(Logan)\n(\u00acp_5(Logan) \u2227 p_11(Logan)) \u2192 \u00acp_4(Logan)",
            "Initial Goal": "\u00acp_4(Logan)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_2(Logan)",
                    "-p_3(Logan)",
                    "-p_1(Logan)",
                    "-p_0(Logan)",
                    "(p_2(Logan) -> (p_11(Logan) | p_3(Logan))) & (p_2(Logan) -> -(p_11(Logan) & p_3(Logan)))",
                    "(p_10(Logan) | p_11(Logan)) & -(p_10(Logan) & p_11(Logan))",
                    "all x (p_9(x) -> p_1(x))",
                    "p_7(Logan) -> p_10(Logan)",
                    "p_7(Logan) -> p_0(Logan)",
                    "(p_6(Logan) | p_8(Logan)) -> p_9(Logan)",
                    "((p_6(Logan) | p_5(Logan)) & (-p_6(Logan) | -p_5(Logan))) -> p_7(Logan)",
                    "p_11(Logan)",
                    "-p_10(Logan)",
                    "-p_7(Logan)",
                    "-p_5(Logan)",
                    "-p_6(Logan)",
                    "-p_9(Logan)",
                    "-p_8(Logan)",
                    "p_9(Logan) -> p_1(Logan)",
                    "p_4(Logan) | -p_4(Logan)",
                    "p_11(Logan) | p_3(Logan)",
                    "-(p_11(Logan) & p_3(Logan))",
                    "-(p_10(Logan) & p_11(Logan))",
                    "((p_6(Logan) & -p_5(Logan)) | (-p_6(Logan) & p_5(Logan))) -> p_7(Logan)",
                    "(-p_5(Logan) & p_11(Logan)) -> -p_4(Logan)"
                ],
                "formulas(goals)": [
                    "-p_4(Logan)"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "p_4(Logan)"
                ],
                "removed_rules": [
                    "(\u00acp_5(Logan) \u2227 p_11(Logan)) \u2192 p_4(Logan)",
                    "p_4(Logan) \u2228 p_3(Logan)"
                ],
                "added_facts": [],
                "added_rules": [
                    "(\u00acp_5(Logan) \u2227 p_11(Logan)) \u2192 \u00acp_4(Logan)"
                ]
            }
        }
    ]
}