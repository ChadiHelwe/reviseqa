{
    "background_story": "Andrew, a marine biologist, had always been fascinated by the vibrant sea creatures of the Indo-Pacific region. On one of his dives, he encountered a species of fish known as the paranthias, a type of sea bass with striking yellow and blue stripes. As he observed these fish, he noticed their unique behavior of forming symbiotic relationships with other marine animals. The paranthias would clean parasites from the bodies of larger fish, earning their trust and protection. Inspired by this mutualism, Andrew dedicated his research to understanding and preserving the delicate balance of marine ecosystems. His work with the paranthias and other species led to groundbreaking discoveries, highlighting the importance of cooperation and reciprocity in the underwater world.",
    "predicates": [
        {
            "id": 0,
            "name": "gets_nourishment"
        },
        {
            "id": 1,
            "name": "is_social"
        },
        {
            "id": 2,
            "name": "is_deep_sea"
        },
        {
            "id": 3,
            "name": "has_bioluminescence"
        },
        {
            "id": 4,
            "name": "eats_plankton"
        },
        {
            "id": 5,
            "name": "is_healthy"
        },
        {
            "id": 6,
            "name": "has_sharp_spines"
        },
        {
            "id": 7,
            "name": "forms_symbiotic_relationships"
        },
        {
            "id": 8,
            "name": "receives_protection"
        },
        {
            "id": 9,
            "name": "provides_benefits"
        },
        {
            "id": 10,
            "name": "lives_in_coral"
        },
        {
            "id": 11,
            "name": "is_free_swimming"
        },
        {
            "id": 12,
            "name": "has_camouflage"
        },
        {
            "id": 13,
            "name": "is_nocturnal"
        },
        {
            "id": 14,
            "name": "has_toxic_defense"
        },
        {
            "id": 15,
            "name": "offers_shelter"
        },
        {
            "id": 16,
            "name": "is_marine_animal"
        },
        {
            "id": 17,
            "name": "dwells_in_reefs"
        },
        {
            "id": 18,
            "name": "cleans_parasites"
        },
        {
            "id": 19,
            "name": "cooperates_with_others"
        },
        {
            "id": 20,
            "name": "mimics_surroundings"
        },
        {
            "id": 21,
            "name": "changes_color"
        },
        {
            "id": 22,
            "name": "hunts_at_night"
        },
        {
            "id": 23,
            "name": "rests_at_day"
        },
        {
            "id": 24,
            "name": "dwells_depths"
        },
        {
            "id": 25,
            "name": "has_strong_fins"
        }
    ],
    "subject_name": "Andrew",
    "subject_category": "marine life",
    "keyword": "paranthias",
    "all_facts": [
        {
            "id": 0,
            "subject": "Andrew",
            "text": "Andrew gets nourishment.",
            "fol": "p_0(Andrew)",
            "str_fol": "gets_nourishment(Andrew)",
            "negation": false
        },
        {
            "id": 1,
            "subject": "Andrew",
            "text": "Andrew is social.",
            "fol": "p_1(Andrew)",
            "str_fol": "is_social(Andrew)",
            "negation": false
        },
        {
            "id": 2,
            "subject": "Andrew",
            "text": "Andrew is a deep-sea paranthias.",
            "fol": "p_2(Andrew)",
            "str_fol": "is_deep_sea(Andrew)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Andrew",
            "text": "Andrew does not have bioluminescence.",
            "fol": "\u00acp_3(Andrew)",
            "str_fol": "\u00achas_bioluminescence(Andrew)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Andrew",
            "text": "Andrew eats plankton.",
            "fol": "p_4(Andrew)",
            "str_fol": "eats_plankton(Andrew)",
            "negation": false
        },
        {
            "id": 5,
            "subject": "Andrew",
            "text": "Andrew is not healthy.",
            "fol": "\u00acp_5(Andrew)",
            "str_fol": "\u00acis_healthy(Andrew)",
            "negation": true
        },
        {
            "id": 6,
            "subject": "Andrew",
            "text": "Andrew does not have sharp spines.",
            "fol": "\u00acp_6(Andrew)",
            "str_fol": "\u00achas_sharp_spines(Andrew)",
            "negation": true
        },
        {
            "id": 7,
            "subject": "Andrew",
            "text": "Andrew has toxic defense.",
            "fol": "p_14(Andrew)",
            "str_fol": "has_toxic_defense(Andrew)",
            "negation": false
        },
        {
            "id": 8,
            "subject": "Andrew",
            "text": "Andrew is not free-swimming.",
            "fol": "\u00acp_11(Andrew)",
            "str_fol": "\u00acis_free_swimming(Andrew)",
            "negation": true
        },
        {
            "id": 9,
            "subject": "Andrew",
            "text": "Andrew is nocturnal.",
            "fol": "p_13(Andrew)",
            "str_fol": "is_nocturnal(Andrew)",
            "negation": false
        },
        {
            "id": 10,
            "subject": "Andrew",
            "text": "Andrew does not have camouflage.",
            "fol": "\u00acp_12(Andrew)",
            "str_fol": "\u00achas_camouflage(Andrew)",
            "negation": true
        },
        {
            "id": 11,
            "subject": "Andrew",
            "text": "Andrew forms symbiotic relationships.",
            "fol": "p_7(Andrew)",
            "str_fol": "forms_symbiotic_relationships(Andrew)",
            "negation": false
        },
        {
            "id": 12,
            "subject": "Andrew",
            "text": "Andrew lives in coral.",
            "fol": "p_10(Andrew)",
            "str_fol": "lives_in_coral(Andrew)",
            "negation": false
        },
        {
            "id": 13,
            "subject": "Andrew",
            "text": "Andrew does not provide benefits.",
            "fol": "\u00acp_9(Andrew)",
            "str_fol": "\u00acprovides_benefits(Andrew)",
            "negation": true
        },
        {
            "id": 14,
            "subject": "Andrew",
            "text": "Andrew receives protection.",
            "fol": "p_8(Andrew)",
            "str_fol": "receives_protection(Andrew)",
            "negation": false
        }
    ],
    "context_facts": [
        {
            "id": 6,
            "subject": "Andrew",
            "text": "Andrew does not have sharp spines.",
            "fol": "\u00acp_6(Andrew)",
            "str_fol": "\u00achas_sharp_spines(Andrew)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Andrew",
            "text": "Andrew eats plankton.",
            "fol": "p_4(Andrew)",
            "str_fol": "eats_plankton(Andrew)",
            "negation": false
        },
        {
            "id": 5,
            "subject": "Andrew",
            "text": "Andrew is not healthy.",
            "fol": "\u00acp_5(Andrew)",
            "str_fol": "\u00acis_healthy(Andrew)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Andrew",
            "text": "Andrew is a deep-sea paranthias.",
            "fol": "p_2(Andrew)",
            "str_fol": "is_deep_sea(Andrew)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Andrew",
            "text": "Andrew does not have bioluminescence.",
            "fol": "\u00acp_3(Andrew)",
            "str_fol": "\u00achas_bioluminescence(Andrew)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Andrew",
            "text": "Andrew is social.",
            "fol": "p_1(Andrew)",
            "str_fol": "is_social(Andrew)",
            "negation": false
        },
        {
            "id": 0,
            "subject": "Andrew",
            "text": "Andrew gets nourishment.",
            "fol": "p_0(Andrew)",
            "str_fol": "gets_nourishment(Andrew)",
            "negation": false
        }
    ],
    "context_rules": [
        {
            "id": 7,
            "text": "A paranthias either has toxic defense or sharp spines, but not both.",
            "fol": "p_14(Andrew) \u2295 p_6(Andrew)",
            "str_fol": "has_toxic_defense(Andrew) \u2295 has_sharp_spines(Andrew)"
        },
        {
            "id": 6,
            "text": "If the paranthias is free-swimming and eats plankton, then it is healthy.",
            "fol": "(p_11(Andrew) \u2227 p_4(Andrew)) \u2192 p_5(Andrew)",
            "str_fol": "(is_free_swimming(Andrew) \u2227 eats_plankton(Andrew)) \u2192 is_healthy(Andrew)"
        },
        {
            "id": 5,
            "text": "If a paranthias is deep-sea, then it either has bioluminescence or is nocturnal, but not both.",
            "fol": "p_2(Andrew) \u2192 (p_3(Andrew) \u2295 p_13(Andrew))",
            "str_fol": "is_deep_sea(Andrew) \u2192 (has_bioluminescence(Andrew) \u2295 is_nocturnal(Andrew))"
        },
        {
            "id": 4,
            "text": "If a paranthias is nocturnal, then it either has toxic defense or camouflage, but not both.",
            "fol": "p_13(Andrew) \u2192 (p_14(Andrew) \u2295 p_12(Andrew))",
            "str_fol": "is_nocturnal(Andrew) \u2192 (has_toxic_defense(Andrew) \u2295 has_camouflage(Andrew))"
        },
        {
            "id": 3,
            "text": "If the paranthias is social, then it either has camouflage or forms symbiotic relationships, but not both.",
            "fol": "p_1(Andrew) \u2192 (p_12(Andrew) \u2295 p_7(Andrew))",
            "str_fol": "is_social(Andrew) \u2192 (has_camouflage(Andrew) \u2295 forms_symbiotic_relationships(Andrew))"
        },
        {
            "id": 2,
            "text": "The paranthias either lives in coral or is free-swimming, but not both.",
            "fol": "p_11(Andrew) \u2295 p_10(Andrew)",
            "str_fol": "is_free_swimming(Andrew) \u2295 lives_in_coral(Andrew)"
        },
        {
            "id": 1,
            "text": "If a paranthias lives in coral, then it either provides benefits or gets nourishment, but not both.",
            "fol": "p_10(Andrew) \u2192 (p_9(Andrew) \u2295 p_0(Andrew))",
            "str_fol": "lives_in_coral(Andrew) \u2192 (provides_benefits(Andrew) \u2295 gets_nourishment(Andrew))"
        },
        {
            "id": 0,
            "text": "For all marine life, if a species forms symbiotic relationships, then it either receives protection or provides benefits (or both).",
            "fol": "\u2200x (p_7(x) \u2192 (p_8(x) \u2228 p_9(x)))",
            "str_fol": "\u2200x (forms_symbiotic_relationships(x) \u2192 (receives_protection(x) \u2228 provides_benefits(x)))"
        }
    ],
    "context": [
        {
            "id": 6,
            "subject": "Andrew",
            "text": "Andrew does not have sharp spines.",
            "fol": "\u00acp_6(Andrew)",
            "str_fol": "\u00achas_sharp_spines(Andrew)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Andrew",
            "text": "Andrew eats plankton.",
            "fol": "p_4(Andrew)",
            "str_fol": "eats_plankton(Andrew)",
            "negation": false
        },
        {
            "id": 5,
            "subject": "Andrew",
            "text": "Andrew is not healthy.",
            "fol": "\u00acp_5(Andrew)",
            "str_fol": "\u00acis_healthy(Andrew)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Andrew",
            "text": "Andrew is a deep-sea paranthias.",
            "fol": "p_2(Andrew)",
            "str_fol": "is_deep_sea(Andrew)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Andrew",
            "text": "Andrew does not have bioluminescence.",
            "fol": "\u00acp_3(Andrew)",
            "str_fol": "\u00achas_bioluminescence(Andrew)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Andrew",
            "text": "Andrew is social.",
            "fol": "p_1(Andrew)",
            "str_fol": "is_social(Andrew)",
            "negation": false
        },
        {
            "id": 0,
            "subject": "Andrew",
            "text": "Andrew gets nourishment.",
            "fol": "p_0(Andrew)",
            "str_fol": "gets_nourishment(Andrew)",
            "negation": false
        },
        {
            "id": 7,
            "text": "A paranthias either has toxic defense or sharp spines, but not both.",
            "fol": "p_14(Andrew) \u2295 p_6(Andrew)",
            "str_fol": "has_toxic_defense(Andrew) \u2295 has_sharp_spines(Andrew)"
        },
        {
            "id": 6,
            "text": "If the paranthias is free-swimming and eats plankton, then it is healthy.",
            "fol": "(p_11(Andrew) \u2227 p_4(Andrew)) \u2192 p_5(Andrew)",
            "str_fol": "(is_free_swimming(Andrew) \u2227 eats_plankton(Andrew)) \u2192 is_healthy(Andrew)"
        },
        {
            "id": 5,
            "text": "If a paranthias is deep-sea, then it either has bioluminescence or is nocturnal, but not both.",
            "fol": "p_2(Andrew) \u2192 (p_3(Andrew) \u2295 p_13(Andrew))",
            "str_fol": "is_deep_sea(Andrew) \u2192 (has_bioluminescence(Andrew) \u2295 is_nocturnal(Andrew))"
        },
        {
            "id": 4,
            "text": "If a paranthias is nocturnal, then it either has toxic defense or camouflage, but not both.",
            "fol": "p_13(Andrew) \u2192 (p_14(Andrew) \u2295 p_12(Andrew))",
            "str_fol": "is_nocturnal(Andrew) \u2192 (has_toxic_defense(Andrew) \u2295 has_camouflage(Andrew))"
        },
        {
            "id": 3,
            "text": "If the paranthias is social, then it either has camouflage or forms symbiotic relationships, but not both.",
            "fol": "p_1(Andrew) \u2192 (p_12(Andrew) \u2295 p_7(Andrew))",
            "str_fol": "is_social(Andrew) \u2192 (has_camouflage(Andrew) \u2295 forms_symbiotic_relationships(Andrew))"
        },
        {
            "id": 2,
            "text": "The paranthias either lives in coral or is free-swimming, but not both.",
            "fol": "p_11(Andrew) \u2295 p_10(Andrew)",
            "str_fol": "is_free_swimming(Andrew) \u2295 lives_in_coral(Andrew)"
        },
        {
            "id": 1,
            "text": "If a paranthias lives in coral, then it either provides benefits or gets nourishment, but not both.",
            "fol": "p_10(Andrew) \u2192 (p_9(Andrew) \u2295 p_0(Andrew))",
            "str_fol": "lives_in_coral(Andrew) \u2192 (provides_benefits(Andrew) \u2295 gets_nourishment(Andrew))"
        },
        {
            "id": 0,
            "text": "For all marine life, if a species forms symbiotic relationships, then it either receives protection or provides benefits (or both).",
            "fol": "\u2200x (p_7(x) \u2192 (p_8(x) \u2228 p_9(x)))",
            "str_fol": "\u2200x (forms_symbiotic_relationships(x) \u2192 (receives_protection(x) \u2228 provides_benefits(x)))"
        }
    ],
    "context_fol": "\u00acp_6(Andrew)\np_4(Andrew)\n\u00acp_5(Andrew)\np_2(Andrew)\n\u00acp_3(Andrew)\np_1(Andrew)\np_0(Andrew)\np_14(Andrew) \u2295 p_6(Andrew)\n(p_11(Andrew) \u2227 p_4(Andrew)) \u2192 p_5(Andrew)\np_2(Andrew) \u2192 (p_3(Andrew) \u2295 p_13(Andrew))\np_13(Andrew) \u2192 (p_14(Andrew) \u2295 p_12(Andrew))\np_1(Andrew) \u2192 (p_12(Andrew) \u2295 p_7(Andrew))\np_11(Andrew) \u2295 p_10(Andrew)\np_10(Andrew) \u2192 (p_9(Andrew) \u2295 p_0(Andrew))\n\u2200x (p_7(x) \u2192 (p_8(x) \u2228 p_9(x)))",
    "conclusion": {
        "id": 14,
        "subject": "Andrew",
        "text": "Andrew receives protection.",
        "fol": "p_8(Andrew)",
        "str_fol": "receives_protection(Andrew)",
        "negation": false
    },
    "initial_answer": "True",
    "initial_goal": "p_8(Andrew)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 6,
                    "subject": "Andrew",
                    "text": "Andrew does not have sharp spines.",
                    "fol": "\u00acp_6(Andrew)",
                    "str_fol": "\u00achas_sharp_spines(Andrew)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 7,
                    "text": "A paranthias either has toxic defense or sharp spines, but not both.",
                    "fol": "p_14(Andrew) \u2295 p_6(Andrew)",
                    "str_fol": "has_toxic_defense(Andrew) \u2295 has_sharp_spines(Andrew)"
                }
            ],
            "conclusion": {
                "id": 7,
                "subject": "Andrew",
                "text": "Andrew has toxic defense.",
                "fol": "p_14(Andrew)",
                "str_fol": "has_toxic_defense(Andrew)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 4,
                    "subject": "Andrew",
                    "text": "Andrew eats plankton.",
                    "fol": "p_4(Andrew)",
                    "str_fol": "eats_plankton(Andrew)",
                    "negation": false
                },
                {
                    "id": 5,
                    "subject": "Andrew",
                    "text": "Andrew is not healthy.",
                    "fol": "\u00acp_5(Andrew)",
                    "str_fol": "\u00acis_healthy(Andrew)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 6,
                    "text": "If the paranthias is free-swimming and eats plankton, then it is healthy.",
                    "fol": "(p_11(Andrew) \u2227 p_4(Andrew)) \u2192 p_5(Andrew)",
                    "str_fol": "(is_free_swimming(Andrew) \u2227 eats_plankton(Andrew)) \u2192 is_healthy(Andrew)"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Andrew",
                "text": "Andrew is not free-swimming.",
                "fol": "\u00acp_11(Andrew)",
                "str_fol": "\u00acis_free_swimming(Andrew)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 2,
                    "subject": "Andrew",
                    "text": "Andrew is a deep-sea paranthias.",
                    "fol": "p_2(Andrew)",
                    "str_fol": "is_deep_sea(Andrew)",
                    "negation": false
                },
                {
                    "id": 3,
                    "subject": "Andrew",
                    "text": "Andrew does not have bioluminescence.",
                    "fol": "\u00acp_3(Andrew)",
                    "str_fol": "\u00achas_bioluminescence(Andrew)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "If a paranthias is deep-sea, then it either has bioluminescence or is nocturnal, but not both.",
                    "fol": "p_2(Andrew) \u2192 (p_3(Andrew) \u2295 p_13(Andrew))",
                    "str_fol": "is_deep_sea(Andrew) \u2192 (has_bioluminescence(Andrew) \u2295 is_nocturnal(Andrew))"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Andrew",
                "text": "Andrew is nocturnal.",
                "fol": "p_13(Andrew)",
                "str_fol": "is_nocturnal(Andrew)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 9,
                    "subject": "Andrew",
                    "text": "Andrew is nocturnal.",
                    "fol": "p_13(Andrew)",
                    "str_fol": "is_nocturnal(Andrew)",
                    "negation": false
                },
                {
                    "id": 7,
                    "subject": "Andrew",
                    "text": "Andrew has toxic defense.",
                    "fol": "p_14(Andrew)",
                    "str_fol": "has_toxic_defense(Andrew)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "If a paranthias is nocturnal, then it either has toxic defense or camouflage, but not both.",
                    "fol": "p_13(Andrew) \u2192 (p_14(Andrew) \u2295 p_12(Andrew))",
                    "str_fol": "is_nocturnal(Andrew) \u2192 (has_toxic_defense(Andrew) \u2295 has_camouflage(Andrew))"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Andrew",
                "text": "Andrew does not have camouflage.",
                "fol": "\u00acp_12(Andrew)",
                "str_fol": "\u00achas_camouflage(Andrew)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 1,
                    "subject": "Andrew",
                    "text": "Andrew is social.",
                    "fol": "p_1(Andrew)",
                    "str_fol": "is_social(Andrew)",
                    "negation": false
                },
                {
                    "id": 10,
                    "subject": "Andrew",
                    "text": "Andrew does not have camouflage.",
                    "fol": "\u00acp_12(Andrew)",
                    "str_fol": "\u00achas_camouflage(Andrew)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "If the paranthias is social, then it either has camouflage or forms symbiotic relationships, but not both.",
                    "fol": "p_1(Andrew) \u2192 (p_12(Andrew) \u2295 p_7(Andrew))",
                    "str_fol": "is_social(Andrew) \u2192 (has_camouflage(Andrew) \u2295 forms_symbiotic_relationships(Andrew))"
                }
            ],
            "conclusion": {
                "id": 11,
                "subject": "Andrew",
                "text": "Andrew forms symbiotic relationships.",
                "fol": "p_7(Andrew)",
                "str_fol": "forms_symbiotic_relationships(Andrew)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 8,
                    "subject": "Andrew",
                    "text": "Andrew is not free-swimming.",
                    "fol": "\u00acp_11(Andrew)",
                    "str_fol": "\u00acis_free_swimming(Andrew)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "The paranthias either lives in coral or is free-swimming, but not both.",
                    "fol": "p_11(Andrew) \u2295 p_10(Andrew)",
                    "str_fol": "is_free_swimming(Andrew) \u2295 lives_in_coral(Andrew)"
                }
            ],
            "conclusion": {
                "id": 12,
                "subject": "Andrew",
                "text": "Andrew lives in coral.",
                "fol": "p_10(Andrew)",
                "str_fol": "lives_in_coral(Andrew)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 12,
                    "subject": "Andrew",
                    "text": "Andrew lives in coral.",
                    "fol": "p_10(Andrew)",
                    "str_fol": "lives_in_coral(Andrew)",
                    "negation": false
                },
                {
                    "id": 0,
                    "subject": "Andrew",
                    "text": "Andrew gets nourishment.",
                    "fol": "p_0(Andrew)",
                    "str_fol": "gets_nourishment(Andrew)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "If a paranthias lives in coral, then it either provides benefits or gets nourishment, but not both.",
                    "fol": "p_10(Andrew) \u2192 (p_9(Andrew) \u2295 p_0(Andrew))",
                    "str_fol": "lives_in_coral(Andrew) \u2192 (provides_benefits(Andrew) \u2295 gets_nourishment(Andrew))"
                }
            ],
            "conclusion": {
                "id": 13,
                "subject": "Andrew",
                "text": "Andrew does not provide benefits.",
                "fol": "\u00acp_9(Andrew)",
                "str_fol": "\u00acprovides_benefits(Andrew)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 11,
                    "subject": "Andrew",
                    "text": "Andrew forms symbiotic relationships.",
                    "fol": "p_7(Andrew)",
                    "str_fol": "forms_symbiotic_relationships(Andrew)",
                    "negation": false
                },
                {
                    "id": 13,
                    "subject": "Andrew",
                    "text": "Andrew does not provide benefits.",
                    "fol": "\u00acp_9(Andrew)",
                    "str_fol": "\u00acprovides_benefits(Andrew)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "For all marine life, if a species forms symbiotic relationships, then it either receives protection or provides benefits (or both).",
                    "fol": "\u2200x (p_7(x) \u2192 (p_8(x) \u2228 p_9(x)))",
                    "str_fol": "\u2200x (forms_symbiotic_relationships(x) \u2192 (receives_protection(x) \u2228 provides_benefits(x)))"
                }
            ],
            "conclusion": {
                "id": 14,
                "subject": "Andrew",
                "text": "Andrew receives protection.",
                "fol": "p_8(Andrew)",
                "str_fol": "receives_protection(Andrew)",
                "negation": false
            }
        }
    ],
    "proof_trace": "1 -(p_14(Andrew) <-> p_6(Andrew)).  [assumption].\n2 p_11(Andrew) & p_4(Andrew) -> p_5(Andrew).  [assumption].\n3 p_2(Andrew) -> -(p_3(Andrew) <-> p_13(Andrew)).  [assumption].\n4 p_13(Andrew) -> -(p_14(Andrew) <-> p_12(Andrew)).  [assumption].\n5 p_1(Andrew) -> -(p_12(Andrew) <-> p_7(Andrew)).  [assumption].\n6 -(p_11(Andrew) <-> p_10(Andrew)).  [assumption].\n7 p_10(Andrew) -> -(p_9(Andrew) <-> p_0(Andrew)).  [assumption].\n8 (all x (p_7(x) -> p_8(x) | p_9(x))).  [assumption].\n9 p_8(Andrew).  [goal].\n10 p_14(Andrew) | p_6(Andrew).  [clausify(1)].\n11 -p_6(Andrew).  [assumption].\n13 -p_11(Andrew) | -p_4(Andrew) | p_5(Andrew).  [clausify(2)].\n14 p_4(Andrew).  [assumption].\n15 -p_11(Andrew) | p_5(Andrew).  [resolve(13,b,14,a)].\n16 -p_5(Andrew).  [assumption].\n17 -p_2(Andrew) | p_3(Andrew) | p_13(Andrew).  [clausify(3)].\n18 p_2(Andrew).  [assumption].\n20 p_3(Andrew) | p_13(Andrew).  [resolve(17,a,18,a)].\n21 -p_3(Andrew).  [assumption].\n23 -p_1(Andrew) | p_12(Andrew) | p_7(Andrew).  [clausify(5)].\n24 p_1(Andrew).  [assumption].\n26 -p_10(Andrew) | -p_9(Andrew) | -p_0(Andrew).  [clausify(7)].\n27 p_0(Andrew).  [assumption].\n29 p_13(Andrew).  [resolve(20,a,21,a)].\n31 -p_13(Andrew) | -p_14(Andrew) | -p_12(Andrew).  [clausify(4)].\n33 p_11(Andrew) | p_10(Andrew).  [clausify(6)].\n34 -p_11(Andrew).  [resolve(15,b,16,a)].\n35 p_12(Andrew) | p_7(Andrew).  [resolve(23,a,24,a)].\n36 -p_7(x) | p_8(x) | p_9(x).  [clausify(8)].\n38 p_12(Andrew) | p_8(Andrew) | p_9(Andrew).  [resolve(35,b,36,a)].\n39 -p_8(Andrew).  [deny(9)].\n40 -p_14(Andrew) | -p_12(Andrew).  [resolve(29,a,31,a)].\n41 p_14(Andrew).  [resolve(10,b,11,a)].\n43 p_10(Andrew).  [resolve(34,a,33,a)].\n44 -p_10(Andrew) | -p_9(Andrew).  [resolve(26,c,27,a)].\n45 -p_12(Andrew).  [resolve(40,a,41,a)].\n46 p_12(Andrew) | p_9(Andrew).  [resolve(38,b,39,a)].\n47 p_9(Andrew).  [resolve(45,a,46,a)].\n48 -p_9(Andrew).  [resolve(43,a,44,a)].\n49 $F.  [resolve(47,a,48,a)].",
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_6(Andrew)\np_4(Andrew)\n\u00acp_5(Andrew)\np_2(Andrew)\n\u00acp_3(Andrew)\np_1(Andrew)\np_0(Andrew)\n(p_11(Andrew) \u2227 p_4(Andrew)) \u2192 p_5(Andrew)\np_2(Andrew) \u2192 (p_3(Andrew) \u2295 p_13(Andrew))\np_13(Andrew) \u2192 (p_14(Andrew) \u2295 p_12(Andrew))\np_1(Andrew) \u2192 (p_12(Andrew) \u2295 p_7(Andrew))\np_11(Andrew) \u2295 p_10(Andrew)\np_10(Andrew) \u2192 (p_9(Andrew) \u2295 p_0(Andrew))\n\u2200x (p_7(x) \u2192 (p_8(x) \u2228 p_9(x)))\np_0(Andrew) \u2192 \u00acp_8(Andrew)",
            "Initial Goal": "p_8(Andrew)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_6(Andrew)",
                    "p_4(Andrew)",
                    "-p_5(Andrew)",
                    "p_2(Andrew)",
                    "-p_3(Andrew)",
                    "p_1(Andrew)",
                    "p_0(Andrew)",
                    "(p_11(Andrew) & p_4(Andrew)) -> p_5(Andrew)",
                    "p_2(Andrew) -> (-(p_3(Andrew) <-> p_13(Andrew)))",
                    "p_13(Andrew) -> (-(p_14(Andrew) <-> p_12(Andrew)))",
                    "p_1(Andrew) -> (-(p_12(Andrew) <-> p_7(Andrew)))",
                    "-(p_11(Andrew) <-> p_10(Andrew))",
                    "p_10(Andrew) -> (-(p_9(Andrew) <-> p_0(Andrew)))",
                    "all x (p_7(x) -> (p_8(x) | p_9(x)))",
                    "p_0(Andrew) -> -p_8(Andrew)"
                ],
                "formulas(goals)": [
                    "-p_8(Andrew)"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "p_14(Andrew) \u2295 p_6(Andrew)"
                ],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "p_0(Andrew) \u2192 \u00acp_8(Andrew)"
                ]
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_6(Andrew)\np_4(Andrew)\n\u00acp_5(Andrew)\np_2(Andrew)\n\u00acp_3(Andrew)\np_1(Andrew)\np_0(Andrew)\n(p_11(Andrew) \u2227 p_4(Andrew)) \u2192 p_5(Andrew)\np_2(Andrew) \u2192 (p_3(Andrew) \u2295 p_13(Andrew))\np_13(Andrew) \u2192 (p_14(Andrew) \u2295 p_12(Andrew))\np_1(Andrew) \u2192 ((p_12(Andrew) \u2228 p_7(Andrew)) \u2227 \u00ac(p_12(Andrew) \u2227 p_7(Andrew)))\np_11(Andrew) \u2295 p_10(Andrew)\np_10(Andrew) \u2192 (p_9(Andrew) \u2295 p_0(Andrew))\n\u2200x (p_7(x) \u2192 (p_8(x) \u2228 p_9(x)))\np_0(Andrew) \u2192 \u00acp_8(Andrew)\np_12(Andrew)\n\u00acp_14(Andrew)",
            "Initial Goal": "p_8(Andrew)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_6(Andrew)",
                    "p_4(Andrew)",
                    "-p_5(Andrew)",
                    "p_2(Andrew)",
                    "-p_3(Andrew)",
                    "p_1(Andrew)",
                    "p_0(Andrew)",
                    "(p_11(Andrew) & p_4(Andrew)) -> p_5(Andrew)",
                    "p_2(Andrew) -> (-(p_3(Andrew) <-> p_13(Andrew)))",
                    "p_13(Andrew) -> (-(p_14(Andrew) <-> p_12(Andrew)))",
                    "p_1(Andrew) -> ((p_12(Andrew) | p_7(Andrew)) & -(p_12(Andrew) & p_7(Andrew)))",
                    "-(p_11(Andrew) <-> p_10(Andrew))",
                    "p_10(Andrew) -> (-(p_9(Andrew) <-> p_0(Andrew)))",
                    "all x (p_7(x) -> (p_8(x) | p_9(x)))",
                    "p_0(Andrew) -> -p_8(Andrew)",
                    "p_12(Andrew)",
                    "-p_14(Andrew)"
                ],
                "formulas(goals)": [
                    "-p_8(Andrew)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_1(Andrew) \u2192 (p_12(Andrew) \u2295 p_7(Andrew))"
                ],
                "added_facts": [
                    "p_12(Andrew)",
                    "\u00acp_14(Andrew)"
                ],
                "added_rules": [
                    "p_1(Andrew) \u2192 ((p_12(Andrew) \u2228 p_7(Andrew)) \u2227 \u00ac(p_12(Andrew) \u2227 p_7(Andrew)))"
                ]
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_6(Andrew)\np_4(Andrew)\n\u00acp_5(Andrew)\np_2(Andrew)\n\u00acp_3(Andrew)\np_1(Andrew)\np_0(Andrew)\n(p_11(Andrew) \u2227 p_4(Andrew)) \u2192 p_5(Andrew)\np_2(Andrew) \u2192 (p_3(Andrew) \u2295 p_13(Andrew))\np_13(Andrew) \u2192 (p_14(Andrew) \u2295 p_12(Andrew))\np_1(Andrew) \u2192 ((p_12(Andrew) \u2228 p_7(Andrew)) \u2227 \u00ac(p_12(Andrew) \u2227 p_7(Andrew)))\np_11(Andrew) \u2295 p_10(Andrew)\np_10(Andrew) \u2192 (p_9(Andrew) \u2295 p_0(Andrew))\n\u2200x (p_7(x) \u2192 (p_8(x) \u2228 p_9(x)))\np_12(Andrew)\n\u00acp_14(Andrew)\np_0(Andrew) \u2192 (p_8(Andrew) \u2228 p_9(Andrew))",
            "Initial Goal": "p_8(Andrew)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_6(Andrew)",
                    "p_4(Andrew)",
                    "-p_5(Andrew)",
                    "p_2(Andrew)",
                    "-p_3(Andrew)",
                    "p_1(Andrew)",
                    "p_0(Andrew)",
                    "(p_11(Andrew) & p_4(Andrew)) -> p_5(Andrew)",
                    "p_2(Andrew) -> (-(p_3(Andrew) <-> p_13(Andrew)))",
                    "p_13(Andrew) -> (-(p_14(Andrew) <-> p_12(Andrew)))",
                    "p_1(Andrew) -> ((p_12(Andrew) | p_7(Andrew)) & (-(p_12(Andrew) & p_7(Andrew))))",
                    "-(p_11(Andrew) <-> p_10(Andrew))",
                    "p_10(Andrew) -> (-(p_9(Andrew) <-> p_0(Andrew)))",
                    "all x (p_7(x) -> (p_8(x) | p_9(x)))",
                    "p_12(Andrew)",
                    "-p_14(Andrew)",
                    "p_0(Andrew) -> (p_8(Andrew) | p_9(Andrew))"
                ],
                "formulas(goals)": [
                    "p_8(Andrew)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_0(Andrew) \u2192 \u00acp_8(Andrew)"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_0(Andrew) \u2192 (p_8(Andrew) \u2228 p_9(Andrew))"
                ]
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_6(Andrew)\np_4(Andrew)\np_2(Andrew)\n\u00acp_3(Andrew)\np_1(Andrew)\np_0(Andrew)\n(p_11(Andrew) \u2227 p_4(Andrew)) \u2192 p_5(Andrew)\np_2(Andrew) \u2192 (p_3(Andrew) \u2295 p_13(Andrew))\np_13(Andrew) \u2192 (p_14(Andrew) \u2295 p_12(Andrew))\np_1(Andrew) \u2192 ((p_12(Andrew) \u2228 p_7(Andrew)) \u2227 \u00ac(p_12(Andrew) \u2227 p_7(Andrew)))\np_11(Andrew) \u2295 p_10(Andrew)\np_12(Andrew)\n\u00acp_14(Andrew)\np_0(Andrew) \u2192 (p_8(Andrew) \u2228 p_9(Andrew))\np_10(Andrew) \u2192 p_9(Andrew)\np_5(Andrew) \u2192 p_9(Andrew)\np_9(Andrew) \u2192 \u00acp_8(Andrew)",
            "Initial Goal": "p_8(Andrew)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_6(Andrew)",
                    "p_4(Andrew)",
                    "p_2(Andrew)",
                    "-p_3(Andrew)",
                    "p_1(Andrew)",
                    "p_0(Andrew)",
                    "(p_11(Andrew) & p_4(Andrew)) -> p_5(Andrew)",
                    "p_2(Andrew) -> (-(p_3(Andrew) <-> p_13(Andrew)))",
                    "p_13(Andrew) -> (-(p_14(Andrew) <-> p_12(Andrew)))",
                    "p_1(Andrew) -> ((p_12(Andrew) | p_7(Andrew)) & (-(p_12(Andrew) & p_7(Andrew))))",
                    "-(p_11(Andrew) <-> p_10(Andrew))",
                    "p_12(Andrew)",
                    "-p_14(Andrew)",
                    "p_0(Andrew) -> (p_8(Andrew) | p_9(Andrew))",
                    "p_10(Andrew) -> p_9(Andrew)",
                    "p_5(Andrew) -> p_9(Andrew)",
                    "p_9(Andrew) -> -p_8(Andrew)"
                ],
                "formulas(goals)": [
                    "-p_8(Andrew)"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "\u00acp_5(Andrew)"
                ],
                "removed_rules": [
                    "p_10(Andrew) \u2192 (p_9(Andrew) \u2295 p_0(Andrew))"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_10(Andrew) \u2192 p_9(Andrew)",
                    "p_5(Andrew) \u2192 p_9(Andrew)",
                    "p_9(Andrew) \u2192 \u00acp_8(Andrew)"
                ]
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_6(Andrew).\np_4(Andrew).\np_2(Andrew).\n\u00acp_3(Andrew).\np_1(Andrew).\np_0(Andrew).\n(p_11(Andrew) \u2227 p_4(Andrew)) \u2192 p_5(Andrew).\np_2(Andrew) \u2192 (p_3(Andrew) \u2295 p_13(Andrew)).\np_13(Andrew) \u2192 (p_14(Andrew) \u2295 p_12(Andrew)).\np_1(Andrew) \u2192 (\u00ac(\u00acp_12(Andrew) \u2227 \u00acp_7(Andrew)) \u2227 (\u00acp_12(Andrew) \u2228 \u00acp_7(Andrew))).\n(p_11(Andrew) \u2295 p_10(Andrew)).\np_12(Andrew).\n\u00acp_14(Andrew).\np_0(Andrew) \u2192 (p_8(Andrew) \u2228 p_9(Andrew)).\np_10(Andrew) \u2192 p_9(Andrew).\np_5(Andrew) \u2192 p_9(Andrew).\np_9(Andrew) \u2192 \u00acp_8(Andrew).\np_9(Andrew).\np_13(Andrew).",
            "Initial Goal": "p_8(Andrew)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_6(Andrew).",
                    "p_4(Andrew).",
                    "p_2(Andrew).",
                    "-p_3(Andrew).",
                    "p_1(Andrew).",
                    "p_0(Andrew).",
                    "(p_11(Andrew) & p_4(Andrew)) -> p_5(Andrew).",
                    "p_2(Andrew) -> (-(p_3(Andrew) <-> p_13(Andrew))).",
                    "p_13(Andrew) -> (-(p_14(Andrew) <-> p_12(Andrew))).",
                    "p_1(Andrew) -> ((-(-p_12(Andrew) & -p_7(Andrew))) & (-p_12(Andrew) | -p_7(Andrew))).",
                    "(-(p_11(Andrew) <-> p_10(Andrew))).",
                    "p_12(Andrew).",
                    "-p_14(Andrew).",
                    "p_0(Andrew) -> (p_8(Andrew) | p_9(Andrew)).",
                    "p_10(Andrew) -> p_9(Andrew).",
                    "p_5(Andrew) -> p_9(Andrew).",
                    "p_9(Andrew) -> -p_8(Andrew).",
                    "p_9(Andrew).",
                    "p_13(Andrew)."
                ],
                "formulas(goals)": [
                    "-p_8(Andrew)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_1(Andrew) \u2192 ((p_12(Andrew) \u2228 p_7(Andrew)) \u2227 \u00ac(p_12(Andrew) \u2227 p_7(Andrew)))"
                ],
                "added_facts": [
                    "p_9(Andrew)",
                    "p_13(Andrew)"
                ],
                "added_rules": [
                    "p_1(Andrew) \u2192 (\u00ac(\u00acp_12(Andrew) \u2227 \u00acp_7(Andrew)) \u2227 (\u00acp_12(Andrew) \u2228 \u00acp_7(Andrew)))"
                ]
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_6(Andrew)\np_4(Andrew)\np_2(Andrew)\n\u00acp_3(Andrew)\np_1(Andrew)\np_0(Andrew)\n(p_11(Andrew) \u2227 p_4(Andrew)) \u2192 p_5(Andrew)\np_2(Andrew) \u2192 (p_3(Andrew) \u2295 p_13(Andrew))\np_13(Andrew) \u2192 (p_14(Andrew) \u2295 p_12(Andrew))\np_1(Andrew) \u2192 (\u00ac(\u00acp_12(Andrew) \u2227 \u00acp_7(Andrew)) \u2227 (\u00acp_12(Andrew) \u2228 \u00acp_7(Andrew)))\n(p_11(Andrew) \u2295 p_10(Andrew))\np_12(Andrew)\n\u00acp_14(Andrew)\np_0(Andrew) \u2192 (p_8(Andrew) \u2228 p_9(Andrew))\np_10(Andrew) \u2192 p_9(Andrew)\np_5(Andrew) \u2192 p_9(Andrew)\np_9(Andrew)\np_13(Andrew)\n(p_9(Andrew) \u2227 p_12(Andrew)) \u2192 p_8(Andrew)",
            "Initial Goal": "p_8(Andrew)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_6(Andrew).",
                    "p_4(Andrew).",
                    "p_2(Andrew).",
                    "-p_3(Andrew).",
                    "p_1(Andrew).",
                    "p_0(Andrew).",
                    "(p_11(Andrew) & p_4(Andrew)) -> p_5(Andrew).",
                    "p_2(Andrew) -> (-(p_3(Andrew) <-> p_13(Andrew))).",
                    "p_13(Andrew) -> (-(p_14(Andrew) <-> p_12(Andrew))).",
                    "p_1(Andrew) -> (-(-p_12(Andrew) & -p_7(Andrew)) & (-p_12(Andrew) | -p_7(Andrew))).",
                    "(-(p_11(Andrew) <-> p_10(Andrew))).",
                    "p_12(Andrew).",
                    "-p_14(Andrew).",
                    "p_0(Andrew) -> (p_8(Andrew) | p_9(Andrew)).",
                    "p_10(Andrew) -> p_9(Andrew).",
                    "p_5(Andrew) -> p_9(Andrew).",
                    "p_9(Andrew).",
                    "p_13(Andrew).",
                    "(p_9(Andrew) & p_12(Andrew)) -> p_8(Andrew)."
                ],
                "formulas(goals)": [
                    "p_8(Andrew)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_9(Andrew) \u2192 \u00acp_8(Andrew)"
                ],
                "added_facts": [],
                "added_rules": [
                    "(p_9(Andrew) \u2227 p_12(Andrew)) \u2192 p_8(Andrew)"
                ]
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_6(Andrew)\np_4(Andrew)\np_2(Andrew)\n\u00acp_3(Andrew)\np_1(Andrew)\np_0(Andrew)\n(p_11(Andrew) \u2227 p_4(Andrew)) \u2192 p_5(Andrew)\np_2(Andrew) \u2192 (p_3(Andrew) \u2295 p_13(Andrew))\np_13(Andrew) \u2192 (p_14(Andrew) \u2295 p_12(Andrew))\np_1(Andrew) \u2192 (\u00ac(\u00acp_12(Andrew) \u2227 \u00acp_7(Andrew)) \u2227 (\u00acp_12(Andrew) \u2228 \u00acp_7(Andrew)))\n(p_11(Andrew) \u2295 p_10(Andrew))\np_12(Andrew)\n\u00acp_14(Andrew)\np_0(Andrew) \u2192 (p_8(Andrew) \u2228 p_9(Andrew))\np_10(Andrew) \u2192 p_9(Andrew)\np_5(Andrew) \u2192 p_9(Andrew)\np_9(Andrew)\np_13(Andrew)\n(p_9(Andrew) \u2227 p_12(Andrew)) \u2192 p_8(Andrew)\n\u00acp_7(Andrew)",
            "Initial Goal": "p_8(Andrew)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_6(Andrew).",
                    "p_4(Andrew).",
                    "p_2(Andrew).",
                    "-p_3(Andrew).",
                    "p_1(Andrew).",
                    "p_0(Andrew).",
                    "(p_11(Andrew) & p_4(Andrew)) -> p_5(Andrew).",
                    "p_2(Andrew) -> (-(p_3(Andrew) <-> p_13(Andrew))).",
                    "p_13(Andrew) -> (-(p_14(Andrew) <-> p_12(Andrew))).",
                    "p_1(Andrew) -> ( (-(-p_12(Andrew) & -p_7(Andrew))) & (-p_12(Andrew) | -p_7(Andrew)) ).",
                    "-(p_11(Andrew) <-> p_10(Andrew)).",
                    "p_12(Andrew).",
                    "-p_14(Andrew).",
                    "p_0(Andrew) -> (p_8(Andrew) | p_9(Andrew)).",
                    "p_10(Andrew) -> p_9(Andrew).",
                    "p_5(Andrew) -> p_9(Andrew).",
                    "p_9(Andrew).",
                    "p_13(Andrew).",
                    "(p_9(Andrew) & p_12(Andrew)) -> p_8(Andrew).",
                    "-p_7(Andrew)."
                ],
                "formulas(goals)": [
                    "p_8(Andrew)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "\u00acp_7(Andrew)"
                ],
                "added_rules": []
            }
        }
    ]
}