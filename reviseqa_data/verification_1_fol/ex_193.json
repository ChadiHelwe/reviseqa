{
    "background_story": "Raphael was a charismatic but troubled young man with a history of fabricating illnesses to avoid responsibility. He would often call in sick to work, claiming to have debilitating migraines or chronic fatigue, only to be seen socializing with friends on social media later that day. His employers and family members grew suspicious of his frequent absences, but Raphael was convincing in his deception. He would produce fake doctor's notes and manipulate those around him into feeling sorry for him. However, his malingering eventually caught up with him when his boss discovered his deceit. Raphael's web of lies was exposed, and he was forced to confront the consequences of his actions. His reputation was tarnished, and he was left to pick up the pieces of his own making.",
    "predicates": [
        {
            "id": 0,
            "name": "takes_blame"
        },
        {
            "id": 1,
            "name": "grows_mature"
        },
        {
            "id": 2,
            "name": "seeks_help"
        },
        {
            "id": 3,
            "name": "finds_redemption"
        },
        {
            "id": 4,
            "name": "trustworthy"
        },
        {
            "id": 5,
            "name": "honest"
        },
        {
            "id": 6,
            "name": "deceptive"
        },
        {
            "id": 7,
            "name": "accountable"
        },
        {
            "id": 8,
            "name": "faces_consequences"
        },
        {
            "id": 9,
            "name": "learns_lesson"
        },
        {
            "id": 10,
            "name": "admits_fault"
        },
        {
            "id": 11,
            "name": "makes_mistakes"
        },
        {
            "id": 12,
            "name": "takes_responsibility"
        },
        {
            "id": 13,
            "name": "makes_mistake"
        },
        {
            "id": 14,
            "name": "feels_remorse"
        },
        {
            "id": 15,
            "name": "accepts_criticism"
        },
        {
            "id": 16,
            "name": "reliable"
        },
        {
            "id": 17,
            "name": "transparent"
        }
    ],
    "subject_name": "Raphael",
    "subject_category": "human",
    "keyword": "malingering",
    "all_facts": [
        {
            "id": 0,
            "subject": "Raphael",
            "text": "Raphael does not take blame.",
            "fol": "\u00acp_0(Raphael)",
            "str_fol": "\u00actakes_blame(Raphael)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Raphael",
            "text": "Raphael does not grow mature.",
            "fol": "\u00acp_1(Raphael)",
            "str_fol": "\u00acgrows_mature(Raphael)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Raphael",
            "text": "Raphael does not seek help.",
            "fol": "\u00acp_2(Raphael)",
            "str_fol": "\u00acseeks_help(Raphael)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Raphael",
            "text": "Raphael does not find redemption.",
            "fol": "\u00acp_3(Raphael)",
            "str_fol": "\u00acfinds_redemption(Raphael)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Raphael",
            "text": "Raphael is not trustworthy.",
            "fol": "\u00acp_4(Raphael)",
            "str_fol": "\u00actrustworthy(Raphael)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Raphael",
            "text": "Raphael is not honest.",
            "fol": "\u00acp_5(Raphael)",
            "str_fol": "\u00achonest(Raphael)",
            "negation": true
        },
        {
            "id": 6,
            "subject": "Raphael",
            "text": "Raphael does not admit fault.",
            "fol": "\u00acp_10(Raphael)",
            "str_fol": "\u00acadmits_fault(Raphael)",
            "negation": true
        },
        {
            "id": 7,
            "subject": "Raphael",
            "text": "Raphael does not learn a lesson.",
            "fol": "\u00acp_9(Raphael)",
            "str_fol": "\u00aclearns_lesson(Raphael)",
            "negation": true
        },
        {
            "id": 8,
            "subject": "Raphael",
            "text": "Raphael does not face consequences.",
            "fol": "\u00acp_8(Raphael)",
            "str_fol": "\u00acfaces_consequences(Raphael)",
            "negation": true
        },
        {
            "id": 9,
            "subject": "Raphael",
            "text": "Raphael is not accountable for his actions.",
            "fol": "\u00acp_7(Raphael)",
            "str_fol": "\u00acaccountable(Raphael)",
            "negation": true
        },
        {
            "id": 10,
            "subject": "Raphael",
            "text": "Raphael is deceptive.",
            "fol": "p_6(Raphael)",
            "str_fol": "deceptive(Raphael)",
            "negation": false
        }
    ],
    "context_facts": [
        {
            "id": 4,
            "subject": "Raphael",
            "text": "Raphael is not trustworthy.",
            "fol": "\u00acp_4(Raphael)",
            "str_fol": "\u00actrustworthy(Raphael)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Raphael",
            "text": "Raphael does not seek help.",
            "fol": "\u00acp_2(Raphael)",
            "str_fol": "\u00acseeks_help(Raphael)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Raphael",
            "text": "Raphael does not find redemption.",
            "fol": "\u00acp_3(Raphael)",
            "str_fol": "\u00acfinds_redemption(Raphael)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Raphael",
            "text": "Raphael does not grow mature.",
            "fol": "\u00acp_1(Raphael)",
            "str_fol": "\u00acgrows_mature(Raphael)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Raphael",
            "text": "Raphael does not take blame.",
            "fol": "\u00acp_0(Raphael)",
            "str_fol": "\u00actakes_blame(Raphael)",
            "negation": true
        }
    ],
    "context_rules": [
        {
            "id": 5,
            "text": "If someone is honest, then they are trustworthy.",
            "fol": "\u2200x (p_5(x) \u2192 p_4(x))",
            "str_fol": "\u2200x (honest(x) \u2192 trustworthy(x))"
        },
        {
            "id": 4,
            "text": "Anyone who admits fault or seeks help can find redemption.",
            "fol": "\u2200x ((p_10(x) \u2228 p_2(x)) \u2192 p_3(x))",
            "str_fol": "\u2200x ((admits_fault(x) \u2228 seeks_help(x)) \u2192 finds_redemption(x))"
        },
        {
            "id": 3,
            "text": "If Raphael either admits fault or learns a lesson (but not both), then he grows mature.",
            "fol": "(p_10(Raphael) \u2295 p_9(Raphael)) \u2192 p_1(Raphael)",
            "str_fol": "(admits_fault(Raphael) \u2295 learns_lesson(Raphael)) \u2192 grows_mature(Raphael)"
        },
        {
            "id": 2,
            "text": "If Raphael faces consequences, then he learns a lesson.",
            "fol": "p_8(Raphael) \u2192 p_9(Raphael)",
            "str_fol": "faces_consequences(Raphael) \u2192 learns_lesson(Raphael)"
        },
        {
            "id": 1,
            "text": "If Raphael is either accountable or takes blame (but not both), then he faces consequences.",
            "fol": "(p_7(Raphael) \u2295 p_0(Raphael)) \u2192 p_8(Raphael)",
            "str_fol": "(accountable(Raphael) \u2295 takes_blame(Raphael)) \u2192 faces_consequences(Raphael)"
        },
        {
            "id": 0,
            "text": "For all humans, if a person is either honest or deceptive (but not both), then they are accountable for their actions.",
            "fol": "\u2200x ((p_5(x) \u2295 p_6(x)) \u2192 p_7(x))",
            "str_fol": "\u2200x ((honest(x) \u2295 deceptive(x)) \u2192 accountable(x))"
        }
    ],
    "context": [
        {
            "id": 4,
            "subject": "Raphael",
            "text": "Raphael is not trustworthy.",
            "fol": "\u00acp_4(Raphael)",
            "str_fol": "\u00actrustworthy(Raphael)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Raphael",
            "text": "Raphael does not seek help.",
            "fol": "\u00acp_2(Raphael)",
            "str_fol": "\u00acseeks_help(Raphael)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Raphael",
            "text": "Raphael does not find redemption.",
            "fol": "\u00acp_3(Raphael)",
            "str_fol": "\u00acfinds_redemption(Raphael)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Raphael",
            "text": "Raphael does not grow mature.",
            "fol": "\u00acp_1(Raphael)",
            "str_fol": "\u00acgrows_mature(Raphael)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Raphael",
            "text": "Raphael does not take blame.",
            "fol": "\u00acp_0(Raphael)",
            "str_fol": "\u00actakes_blame(Raphael)",
            "negation": true
        },
        {
            "id": 5,
            "text": "If someone is honest, then they are trustworthy.",
            "fol": "\u2200x (p_5(x) \u2192 p_4(x))",
            "str_fol": "\u2200x (honest(x) \u2192 trustworthy(x))"
        },
        {
            "id": 4,
            "text": "Anyone who admits fault or seeks help can find redemption.",
            "fol": "\u2200x ((p_10(x) \u2228 p_2(x)) \u2192 p_3(x))",
            "str_fol": "\u2200x ((admits_fault(x) \u2228 seeks_help(x)) \u2192 finds_redemption(x))"
        },
        {
            "id": 3,
            "text": "If Raphael either admits fault or learns a lesson (but not both), then he grows mature.",
            "fol": "(p_10(Raphael) \u2295 p_9(Raphael)) \u2192 p_1(Raphael)",
            "str_fol": "(admits_fault(Raphael) \u2295 learns_lesson(Raphael)) \u2192 grows_mature(Raphael)"
        },
        {
            "id": 2,
            "text": "If Raphael faces consequences, then he learns a lesson.",
            "fol": "p_8(Raphael) \u2192 p_9(Raphael)",
            "str_fol": "faces_consequences(Raphael) \u2192 learns_lesson(Raphael)"
        },
        {
            "id": 1,
            "text": "If Raphael is either accountable or takes blame (but not both), then he faces consequences.",
            "fol": "(p_7(Raphael) \u2295 p_0(Raphael)) \u2192 p_8(Raphael)",
            "str_fol": "(accountable(Raphael) \u2295 takes_blame(Raphael)) \u2192 faces_consequences(Raphael)"
        },
        {
            "id": 0,
            "text": "For all humans, if a person is either honest or deceptive (but not both), then they are accountable for their actions.",
            "fol": "\u2200x ((p_5(x) \u2295 p_6(x)) \u2192 p_7(x))",
            "str_fol": "\u2200x ((honest(x) \u2295 deceptive(x)) \u2192 accountable(x))"
        }
    ],
    "context_fol": "\u00acp_4(Raphael)\n\u00acp_2(Raphael)\n\u00acp_3(Raphael)\n\u00acp_1(Raphael)\n\u00acp_0(Raphael)\n\u2200x (p_5(x) \u2192 p_4(x))\n\u2200x ((p_10(x) \u2228 p_2(x)) \u2192 p_3(x))\n(p_10(Raphael) \u2295 p_9(Raphael)) \u2192 p_1(Raphael)\np_8(Raphael) \u2192 p_9(Raphael)\n(p_7(Raphael) \u2295 p_0(Raphael)) \u2192 p_8(Raphael)\n\u2200x ((p_5(x) \u2295 p_6(x)) \u2192 p_7(x))",
    "conclusion": {
        "id": 10,
        "subject": "Raphael",
        "text": "Raphael is deceptive.",
        "fol": "p_6(Raphael)",
        "str_fol": "deceptive(Raphael)",
        "negation": false
    },
    "initial_answer": "False",
    "initial_goal": "p_6(Raphael)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 4,
                    "subject": "Raphael",
                    "text": "Raphael is not trustworthy.",
                    "fol": "\u00acp_4(Raphael)",
                    "str_fol": "\u00actrustworthy(Raphael)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "If someone is honest, then they are trustworthy.",
                    "fol": "\u2200x (p_5(x) \u2192 p_4(x))",
                    "str_fol": "\u2200x (honest(x) \u2192 trustworthy(x))"
                }
            ],
            "conclusion": {
                "id": 5,
                "subject": "Raphael",
                "text": "Raphael is not honest.",
                "fol": "\u00acp_5(Raphael)",
                "str_fol": "\u00achonest(Raphael)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 2,
                    "subject": "Raphael",
                    "text": "Raphael does not seek help.",
                    "fol": "\u00acp_2(Raphael)",
                    "str_fol": "\u00acseeks_help(Raphael)",
                    "negation": true
                },
                {
                    "id": 3,
                    "subject": "Raphael",
                    "text": "Raphael does not find redemption.",
                    "fol": "\u00acp_3(Raphael)",
                    "str_fol": "\u00acfinds_redemption(Raphael)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "Anyone who admits fault or seeks help can find redemption.",
                    "fol": "\u2200x ((p_10(x) \u2228 p_2(x)) \u2192 p_3(x))",
                    "str_fol": "\u2200x ((admits_fault(x) \u2228 seeks_help(x)) \u2192 finds_redemption(x))"
                }
            ],
            "conclusion": {
                "id": 6,
                "subject": "Raphael",
                "text": "Raphael does not admit fault.",
                "fol": "\u00acp_10(Raphael)",
                "str_fol": "\u00acadmits_fault(Raphael)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 6,
                    "subject": "Raphael",
                    "text": "Raphael does not admit fault.",
                    "fol": "\u00acp_10(Raphael)",
                    "str_fol": "\u00acadmits_fault(Raphael)",
                    "negation": true
                },
                {
                    "id": 1,
                    "subject": "Raphael",
                    "text": "Raphael does not grow mature.",
                    "fol": "\u00acp_1(Raphael)",
                    "str_fol": "\u00acgrows_mature(Raphael)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "If Raphael either admits fault or learns a lesson (but not both), then he grows mature.",
                    "fol": "(p_10(Raphael) \u2295 p_9(Raphael)) \u2192 p_1(Raphael)",
                    "str_fol": "(admits_fault(Raphael) \u2295 learns_lesson(Raphael)) \u2192 grows_mature(Raphael)"
                }
            ],
            "conclusion": {
                "id": 7,
                "subject": "Raphael",
                "text": "Raphael does not learn a lesson.",
                "fol": "\u00acp_9(Raphael)",
                "str_fol": "\u00aclearns_lesson(Raphael)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 7,
                    "subject": "Raphael",
                    "text": "Raphael does not learn a lesson.",
                    "fol": "\u00acp_9(Raphael)",
                    "str_fol": "\u00aclearns_lesson(Raphael)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "If Raphael faces consequences, then he learns a lesson.",
                    "fol": "p_8(Raphael) \u2192 p_9(Raphael)",
                    "str_fol": "faces_consequences(Raphael) \u2192 learns_lesson(Raphael)"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Raphael",
                "text": "Raphael does not face consequences.",
                "fol": "\u00acp_8(Raphael)",
                "str_fol": "\u00acfaces_consequences(Raphael)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 0,
                    "subject": "Raphael",
                    "text": "Raphael does not take blame.",
                    "fol": "\u00acp_0(Raphael)",
                    "str_fol": "\u00actakes_blame(Raphael)",
                    "negation": true
                },
                {
                    "id": 8,
                    "subject": "Raphael",
                    "text": "Raphael does not face consequences.",
                    "fol": "\u00acp_8(Raphael)",
                    "str_fol": "\u00acfaces_consequences(Raphael)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "If Raphael is either accountable or takes blame (but not both), then he faces consequences.",
                    "fol": "(p_7(Raphael) \u2295 p_0(Raphael)) \u2192 p_8(Raphael)",
                    "str_fol": "(accountable(Raphael) \u2295 takes_blame(Raphael)) \u2192 faces_consequences(Raphael)"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Raphael",
                "text": "Raphael is not accountable for his actions.",
                "fol": "\u00acp_7(Raphael)",
                "str_fol": "\u00acaccountable(Raphael)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 5,
                    "subject": "Raphael",
                    "text": "Raphael is not honest.",
                    "fol": "\u00acp_5(Raphael)",
                    "str_fol": "\u00achonest(Raphael)",
                    "negation": true
                },
                {
                    "id": 9,
                    "subject": "Raphael",
                    "text": "Raphael is not accountable for his actions.",
                    "fol": "\u00acp_7(Raphael)",
                    "str_fol": "\u00acaccountable(Raphael)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "For all humans, if a person is either honest or deceptive (but not both), then they are accountable for their actions.",
                    "fol": "\u2200x ((p_5(x) \u2295 p_6(x)) \u2192 p_7(x))",
                    "str_fol": "\u2200x ((honest(x) \u2295 deceptive(x)) \u2192 accountable(x))"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Raphael",
                "text": "Raphael is deceptive.",
                "fol": "p_6(Raphael)",
                "str_fol": "deceptive(Raphael)",
                "negation": false
            }
        }
    ],
    "proof_trace": "1 (all x (p_5(x) -> p_4(x))).  [assumption].\n2 (all x (p_10(x) | p_2(x) -> p_3(x))).  [assumption].\n3 -(p_10(Raphael) <-> p_9(Raphael)) -> p_1(Raphael).  [assumption].\n4 p_8(Raphael) -> p_9(Raphael).  [assumption].\n5 -(p_7(Raphael) <-> p_0(Raphael)) -> p_8(Raphael).  [assumption].\n6 (all x (-(p_5(x) <-> p_6(x)) -> p_7(x))).  [assumption].\n7 -p_6(Raphael).  [goal].\n8 -p_5(x) | p_4(x).  [clausify(1)].\n9 -p_4(Raphael).  [assumption].\n10 -p_10(x) | p_3(x).  [clausify(2)].\n11 -p_3(Raphael).  [assumption].\n13 -p_1(Raphael).  [assumption].\n14 p_10(Raphael) | -p_9(Raphael) | p_1(Raphael).  [clausify(3)].\n15 -p_7(Raphael) | p_0(Raphael) | p_8(Raphael).  [clausify(5)].\n16 -p_0(Raphael).  [assumption].\n18 -p_7(Raphael) | p_8(Raphael).  [resolve(15,b,16,a)].\n19 -p_8(Raphael) | p_9(Raphael).  [clausify(4)].\n20 p_5(x) | -p_6(x) | p_7(x).  [clausify(6)].\n22 -p_5(Raphael).  [resolve(8,b,9,a)].\n23 -p_6(Raphael) | p_7(Raphael).  [resolve(22,a,20,a)].\n24 p_6(Raphael).  [deny(7)].\n25 p_10(Raphael) | -p_9(Raphael).  [resolve(14,c,13,a)].\n26 -p_10(Raphael).  [resolve(10,b,11,a)].\n27 p_7(Raphael).  [resolve(23,a,24,a)].\n28 -p_7(Raphael) | p_9(Raphael).  [resolve(18,b,19,a)].\n29 p_9(Raphael).  [resolve(27,a,28,a)].\n30 -p_9(Raphael).  [resolve(25,a,26,a)].\n31 $F.  [resolve(29,a,30,a)].",
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_4(Raphael)\n\u00acp_2(Raphael)\n\u00acp_3(Raphael)\n\u00acp_1(Raphael)\n\u00acp_0(Raphael)\n\u2200x (p_5(x) \u2192 p_4(x))\n\u2200x ((p_10(x) \u2228 p_2(x)) \u2192 p_3(x))\n(p_10(Raphael) \u2295 p_9(Raphael)) \u2192 p_1(Raphael)\np_8(Raphael) \u2192 p_9(Raphael)\n(p_7(Raphael) \u2295 p_0(Raphael)) \u2192 p_8(Raphael)\n\u2200x ((p_5(x) \u2295 p_6(x)) \u2192 p_7(x))\n\u2200x (\u00acp_4(x) \u2192 \u00acp_5(x))\n\u2200x (\u00acp_3(x) \u2192 \u00ac(p_10(x) \u2228 p_2(x)))",
            "Initial Goal": "p_6(Raphael)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Raphael)",
                    "-p_2(Raphael)",
                    "-p_3(Raphael)",
                    "-p_1(Raphael)",
                    "-p_0(Raphael)",
                    "all x (p_5(x) -> p_4(x))",
                    "all x ((p_10(x) | p_2(x)) -> p_3(x))",
                    "(-(p_10(Raphael) <-> p_9(Raphael))) -> p_1(Raphael)",
                    "p_8(Raphael) -> p_9(Raphael)",
                    "(-(p_7(Raphael) <-> p_0(Raphael))) -> p_8(Raphael)",
                    "all x ((-(p_5(x) <-> p_6(x))) -> p_7(x))",
                    "all x (-p_4(x) -> -p_5(x))",
                    "all x (-p_3(x) -> (-p_10(x) & -p_2(x)))"
                ],
                "formulas(goals)": [
                    "-p_6(Raphael)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "\u2200x (\u00acp_4(x) \u2192 \u00acp_5(x))",
                    "\u2200x (\u00acp_3(x) \u2192 \u00ac(p_10(x) \u2228 p_2(x)))"
                ]
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_4(Raphael)\n\u00acp_2(Raphael)\n\u00acp_3(Raphael)\n\u00acp_0(Raphael)\n\u2200x (p_5(x) \u2192 p_4(x))\n\u2200x ((p_10(x) \u2228 p_2(x)) \u2192 p_3(x))\n(p_10(Raphael) \u2295 p_9(Raphael)) \u2192 p_1(Raphael)\np_8(Raphael) \u2192 p_9(Raphael)\n(p_7(Raphael) \u2295 p_0(Raphael)) \u2192 p_8(Raphael)\n\u2200x ((p_5(x) \u2295 p_6(x)) \u2192 p_7(x))\n\u2200x (\u00acp_4(x) \u2192 \u00acp_5(x))\n\u2200x (\u00acp_3(x) \u2192 \u00ac(p_10(x) \u2228 p_2(x)))\n\u00acp_4(Raphael) \u2192 p_6(Raphael)",
            "Initial Goal": "p_6(Raphael)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Raphael)",
                    "-p_2(Raphael)",
                    "-p_3(Raphael)",
                    "-p_0(Raphael)",
                    "all x (p_5(x) -> p_4(x))",
                    "all x ((p_10(x) | p_2(x)) -> p_3(x))",
                    "(-(p_10(Raphael) <-> p_9(Raphael))) -> p_1(Raphael)",
                    "p_8(Raphael) -> p_9(Raphael)",
                    "(-(p_7(Raphael) <-> p_0(Raphael))) -> p_8(Raphael)",
                    "all x (-(p_5(x) <-> p_6(x)) -> p_7(x))",
                    "all x (-p_4(x) -> -p_5(x))",
                    "all x (-p_3(x) -> -(p_10(x) | p_2(x)))",
                    "-p_4(Raphael) -> p_6(Raphael)"
                ],
                "formulas(goals)": [
                    "p_6(Raphael)"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "\u00acp_1(Raphael)"
                ],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "\u00acp_4(Raphael) \u2192 p_6(Raphael)"
                ]
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_4(Raphael)\n\u00acp_2(Raphael)\n\u00acp_3(Raphael)\n\u00acp_0(Raphael)\n\u2200x (p_5(x) \u2192 p_4(x))\n\u2200x ((p_10(x) \u2228 p_2(x)) \u2192 p_3(x))\n(p_10(Raphael) \u2295 p_9(Raphael)) \u2192 p_1(Raphael)\np_8(Raphael) \u2192 p_9(Raphael)\n(p_7(Raphael) \u2295 p_0(Raphael)) \u2192 p_8(Raphael)\n\u2200x ((p_5(x) \u2295 p_6(x)) \u2192 p_7(x))\n\u2200x (\u00acp_4(x) \u2192 \u00acp_5(x))\n\u2200x (\u00acp_3(x) \u2192 \u00ac(p_10(x) \u2228 p_2(x)))\n\u2200x (\u00acp_5(x) \u2192 \u00acp_6(x))",
            "Initial Goal": "p_6(Raphael)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Raphael)",
                    "-p_2(Raphael)",
                    "-p_3(Raphael)",
                    "-p_0(Raphael)",
                    "all x (p_5(x) -> p_4(x))",
                    "all x ((p_10(x) | p_2(x)) -> p_3(x))",
                    "(-(p_10(Raphael) <-> p_9(Raphael))) -> p_1(Raphael)",
                    "p_8(Raphael) -> p_9(Raphael)",
                    "(-(p_7(Raphael) <-> p_0(Raphael))) -> p_8(Raphael)",
                    "all x ((-(p_5(x) <-> p_6(x))) -> p_7(x))",
                    "all x (-p_4(x) -> -p_5(x))",
                    "all x (-p_3(x) -> -(p_10(x) | p_2(x)))",
                    "all x (-p_5(x) -> -p_6(x))"
                ],
                "formulas(goals)": [
                    "-p_6(Raphael)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u00acp_4(Raphael) \u2192 p_6(Raphael)"
                ],
                "added_facts": [],
                "added_rules": [
                    "\u2200x (\u00acp_5(x) \u2192 \u00acp_6(x))"
                ]
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_4(Raphael)\n\u00acp_2(Raphael)\n\u00acp_3(Raphael)\n\u00acp_0(Raphael)\n\u2200x (p_5(x) \u2192 p_4(x))\n\u2200x ((p_10(x) \u2228 p_2(x)) \u2192 p_3(x))\n(p_10(Raphael) \u2295 p_9(Raphael)) \u2192 p_1(Raphael)\np_8(Raphael) \u2192 p_9(Raphael)\n(p_7(Raphael) \u2295 p_0(Raphael)) \u2192 p_8(Raphael)\n\u2200x ((p_5(x) \u2295 p_6(x)) \u2192 p_7(x))\n\u2200x (\u00acp_4(x) \u2192 \u00acp_5(x))\n\u2200x (\u00acp_3(x) \u2192 \u00ac(p_10(x) \u2228 p_2(x)))\n\u2200x (\u00acp_5(x) \u2192 p_6(x))",
            "Initial Goal": "p_6(Raphael)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Raphael).",
                    "-p_2(Raphael).",
                    "-p_3(Raphael).",
                    "-p_0(Raphael).",
                    "all x (p_5(x) -> p_4(x)).",
                    "all x ((p_10(x) | p_2(x)) -> p_3(x)).",
                    "(-(p_10(Raphael) <-> p_9(Raphael))) -> p_1(Raphael).",
                    "p_8(Raphael) -> p_9(Raphael).",
                    "(-(p_7(Raphael) <-> p_0(Raphael))) -> p_8(Raphael).",
                    "all x ((-(p_5(x) <-> p_6(x))) -> p_7(x)).",
                    "all x (-p_4(x) -> -p_5(x)).",
                    "all x (-p_3(x) -> -(p_10(x) | p_2(x))).",
                    "all x (-p_5(x) -> p_6(x))."
                ],
                "formulas(goals)": [
                    "p_6(Raphael)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u2200x (\u00acp_5(x) \u2192 \u00acp_6(x))"
                ],
                "added_facts": [],
                "added_rules": [
                    "\u2200x (\u00acp_5(x) \u2192 p_6(x))"
                ]
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_4(Raphael)\n\u00acp_2(Raphael)\n\u00acp_3(Raphael)\n\u00acp_0(Raphael)\n\u2200x (p_5(x) \u2192 p_4(x))\n\u2200x ((p_10(x) \u2228 p_2(x)) \u2192 p_3(x))\n(p_10(Raphael) \u2295 p_9(Raphael)) \u2192 p_1(Raphael)\np_8(Raphael) \u2192 p_9(Raphael)\n(p_7(Raphael) \u2295 p_0(Raphael)) \u2192 p_8(Raphael)\n\u2200x ((p_5(x) \u2295 p_6(x)) \u2192 p_7(x))\n\u2200x (\u00acp_4(x) \u2192 \u00acp_5(x))\n\u2200x (\u00acp_3(x) \u2192 \u00ac(p_10(x) \u2228 p_2(x)))\n\u2200x (\u00acp_5(x) \u2192 \u00acp_6(x))",
            "Initial Goal": "p_6(Raphael)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Raphael).",
                    "-p_2(Raphael).",
                    "-p_3(Raphael).",
                    "-p_0(Raphael).",
                    "all x (p_5(x) -> p_4(x)).",
                    "all x ((p_10(x) | p_2(x)) -> p_3(x)).",
                    "(-(p_10(Raphael) <-> p_9(Raphael))) -> p_1(Raphael).",
                    "p_8(Raphael) -> p_9(Raphael).",
                    "(-(p_7(Raphael) <-> p_0(Raphael))) -> p_8(Raphael).",
                    "all x ((-(p_5(x) <-> p_6(x))) -> p_7(x)).",
                    "all x (-p_4(x) -> -p_5(x)).",
                    "all x (-p_3(x) -> -(p_10(x) | p_2(x))).",
                    "all x (-p_5(x) -> -p_6(x))."
                ],
                "formulas(goals)": [
                    "-p_6(Raphael)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u2200x (\u00acp_5(x) \u2192 p_6(x))"
                ],
                "added_facts": [],
                "added_rules": [
                    "\u2200x (\u00acp_5(x) \u2192 \u00acp_6(x))"
                ]
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "\u00acp_4(Raphael)\n\u00acp_2(Raphael)\n\u00acp_3(Raphael)\n\u00acp_0(Raphael)\n\u00acp_10(Raphael)\n\u2200x (p_5(x) \u2192 p_4(x))\n\u2200x ((p_10(x) \u2228 p_2(x)) \u2192 p_3(x))\n((p_10(Raphael) \u2227 \u00acp_9(Raphael)) \u2228 (\u00acp_10(Raphael) \u2227 p_9(Raphael))) \u2192 p_1(Raphael)\np_8(Raphael) \u2192 p_9(Raphael)\n(p_7(Raphael) \u2295 p_0(Raphael)) \u2192 p_8(Raphael)\n\u2200x (((p_5(x) \u2227 \u00acp_6(x)) \u2228 (\u00acp_5(x) \u2227 p_6(x))) \u2192 p_7(x))\n\u2200x (\u00acp_4(x) \u2192 \u00acp_5(x))\n\u2200x (\u00acp_3(x) \u2192 \u00ac(p_10(x) \u2228 p_2(x)))\n\u2200x (\u00acp_5(x) \u2192 \u00acp_6(x))",
            "Initial Goal": "p_6(Raphael)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Raphael)",
                    "-p_2(Raphael)",
                    "-p_3(Raphael)",
                    "-p_0(Raphael)",
                    "-p_10(Raphael)",
                    "all x (p_5(x) -> p_4(x))",
                    "all x ((p_10(x) | p_2(x)) -> p_3(x))",
                    "( ( (p_10(Raphael) & -p_9(Raphael)) | (-p_10(Raphael) & p_9(Raphael)) ) -> p_1(Raphael) )",
                    "p_8(Raphael) -> p_9(Raphael)",
                    "( -(p_7(Raphael) <-> p_0(Raphael)) ) -> p_8(Raphael)",
                    "all x ( ( (p_5(x) & -p_6(x)) | (-p_5(x) & p_6(x)) ) -> p_7(x) )",
                    "all x (-p_4(x) -> -p_5(x))",
                    "all x (-p_3(x) -> -(p_10(x) | p_2(x)) )",
                    "all x (-p_5(x) -> -p_6(x))"
                ],
                "formulas(goals)": [
                    "-p_6(Raphael)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "(p_10(Raphael) \u2295 p_9(Raphael)) \u2192 p_1(Raphael)",
                    "\u2200x ((p_5(x) \u2295 p_6(x)) \u2192 p_7(x))"
                ],
                "added_facts": [
                    "\u00acp_10(Raphael)"
                ],
                "added_rules": [
                    "((p_10(Raphael) \u2227 \u00acp_9(Raphael)) \u2228 (\u00acp_10(Raphael) \u2227 p_9(Raphael))) \u2192 p_1(Raphael)",
                    "\u2200x (((p_5(x) \u2227 \u00acp_6(x)) \u2228 (\u00acp_5(x) \u2227 p_6(x))) \u2192 p_7(x))"
                ]
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "FLIP",
            "Edited Assumptions": "\u00acp_4(Raphael)\n\u00acp_2(Raphael)\n\u00acp_3(Raphael)\n\u00acp_0(Raphael)\n\u00acp_10(Raphael)\n\u2200x (p_5(x) \u2192 p_4(x))\n\u2200x ((p_10(x) \u2228 p_2(x)) \u2192 p_3(x))\n((p_10(Raphael) \u2227 \u00acp_9(Raphael)) \u2228 (\u00acp_10(Raphael) \u2227 p_9(Raphael))) \u2192 p_1(Raphael)\np_8(Raphael) \u2192 p_9(Raphael)\n(p_7(Raphael) \u2295 p_0(Raphael)) \u2192 p_8(Raphael)\n\u2200x (((p_5(x) \u2227 \u00acp_6(x)) \u2228 (\u00acp_5(x) \u2227 p_6(x))) \u2192 p_7(x))\n\u2200x (\u00acp_4(x) \u2192 \u00acp_5(x))\n\u2200x (\u00acp_3(x) \u2192 \u00ac(p_10(x) \u2228 p_2(x)))\n\u2200x (\u00acp_5(x) \u2192 p_6(x))",
            "Initial Goal": "p_6(Raphael)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "-p_4(Raphael)",
                    "-p_2(Raphael)",
                    "-p_3(Raphael)",
                    "-p_0(Raphael)",
                    "-p_10(Raphael)",
                    "all x (p_5(x) -> p_4(x))",
                    "all x ((p_10(x) | p_2(x)) -> p_3(x))",
                    "((p_10(Raphael) & -p_9(Raphael)) | (-p_10(Raphael) & p_9(Raphael))) -> p_1(Raphael)",
                    "p_8(Raphael) -> p_9(Raphael)",
                    "(-(p_7(Raphael) <-> p_0(Raphael))) -> p_8(Raphael)",
                    "all x (((p_5(x) & -p_6(x)) | (-p_5(x) & p_6(x))) -> p_7(x))",
                    "all x (-p_4(x) -> -p_5(x))",
                    "all x (-p_3(x) -> -(p_10(x) | p_2(x)))",
                    "all x (-p_5(x) -> p_6(x))"
                ],
                "formulas(goals)": [
                    "p_6(Raphael)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u2200x (\u00acp_5(x) \u2192 \u00acp_6(x))"
                ],
                "added_facts": [],
                "added_rules": [
                    "\u2200x (\u00acp_5(x) \u2192 p_6(x))"
                ]
            }
        }
    ]
}