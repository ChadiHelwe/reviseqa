{
    "background_story": "In a world ravaged by war, Neo emerged as a legendary warrior. He was destined to face the darkest of foes, and his name became synonymous with bravery. The final battle, known as the Great Hecatomb, would decide the fate of humanity. A hecatomb of a hundred sacrifices was demanded by the gods to ensure victory, but Neo refused, believing that the value of life outweighed any triumph. Instead, he rallied his comrades and launched a daring assault against the enemy. Though vastly outnumbered, Neo's strategic genius and unwavering resolve inspired his troops to fight on. The war ended with the enemy's defeat, but not without great cost. Neo's actions, though controversial, saved countless lives and earned him a place among the legends of old.",
    "predicates": [
        {
            "id": 0,
            "name": "mobilizes_troops"
        },
        {
            "id": 1,
            "name": "has_honor"
        },
        {
            "id": 2,
            "name": "strategically_brilliant"
        },
        {
            "id": 3,
            "name": "earns_legacy"
        },
        {
            "id": 4,
            "name": "leads_by_example"
        },
        {
            "id": 5,
            "name": "takes_risks"
        },
        {
            "id": 6,
            "name": "speaks_truth"
        },
        {
            "id": 7,
            "name": "fearless"
        },
        {
            "id": 8,
            "name": "inspirational_leader"
        },
        {
            "id": 9,
            "name": "wins_battles"
        },
        {
            "id": 10,
            "name": "saves_lives"
        },
        {
            "id": 11,
            "name": "gains_respect"
        },
        {
            "id": 12,
            "name": "becomes_legendary"
        },
        {
            "id": 13,
            "name": "fights_for_justice"
        },
        {
            "id": 14,
            "name": "defies_convention"
        },
        {
            "id": 15,
            "name": "breaks_rules"
        },
        {
            "id": 16,
            "name": "challenges_authority"
        },
        {
            "id": 17,
            "name": "unites_people"
        },
        {
            "id": 18,
            "name": "fights_valiantly"
        },
        {
            "id": 19,
            "name": "defends_kingdom"
        },
        {
            "id": 20,
            "name": "upholds_virtue"
        },
        {
            "id": 21,
            "name": "holds_power"
        },
        {
            "id": 22,
            "name": "seeks_wealth"
        },
        {
            "id": 23,
            "name": "shows_mercy"
        },
        {
            "id": 24,
            "name": "challenges_status"
        },
        {
            "id": 25,
            "name": "pursues_morality"
        },
        {
            "id": 26,
            "name": "questions_norms"
        },
        {
            "id": 27,
            "name": "disobeys_orders"
        }
    ],
    "subject_name": "Neo",
    "subject_category": "legendary hero",
    "keyword": "hecatomb",
    "all_facts": [
        {
            "id": 0,
            "subject": "Neo",
            "text": "Neo does not mobilize troops.",
            "fol": "\u00acp_0(Neo)",
            "str_fol": "\u00acmobilizes_troops(Neo)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Neo",
            "text": "Neo does not have honor.",
            "fol": "\u00acp_1(Neo)",
            "str_fol": "\u00achas_honor(Neo)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Neo",
            "text": "Neo is not strategically brilliant.",
            "fol": "\u00acp_2(Neo)",
            "str_fol": "\u00acstrategically_brilliant(Neo)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Neo",
            "text": "Neo does not earn a legacy.",
            "fol": "\u00acp_3(Neo)",
            "str_fol": "\u00acearns_legacy(Neo)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Neo",
            "text": "Neo does not lead by example.",
            "fol": "\u00acp_4(Neo)",
            "str_fol": "\u00acleads_by_example(Neo)",
            "negation": true
        },
        {
            "id": 5,
            "subject": "Neo",
            "text": "Neo takes risks.",
            "fol": "p_5(Neo)",
            "str_fol": "takes_risks(Neo)",
            "negation": false
        },
        {
            "id": 6,
            "subject": "Neo",
            "text": "Neo speaks the truth.",
            "fol": "p_6(Neo)",
            "str_fol": "speaks_truth(Neo)",
            "negation": false
        },
        {
            "id": 7,
            "subject": "Neo",
            "text": "Neo challenges authority.",
            "fol": "p_16(Neo)",
            "str_fol": "challenges_authority(Neo)",
            "negation": false
        },
        {
            "id": 8,
            "subject": "Neo",
            "text": "Neo defies convention.",
            "fol": "p_14(Neo)",
            "str_fol": "defies_convention(Neo)",
            "negation": false
        },
        {
            "id": 9,
            "subject": "Neo",
            "text": "Neo does not win battles.",
            "fol": "\u00acp_9(Neo)",
            "str_fol": "\u00acwins_battles(Neo)",
            "negation": true
        },
        {
            "id": 10,
            "subject": "Neo",
            "text": "Neo is not an inspirational leader.",
            "fol": "\u00acp_8(Neo)",
            "str_fol": "\u00acinspirational_leader(Neo)",
            "negation": true
        },
        {
            "id": 11,
            "subject": "Neo",
            "text": "Neo is fearless.",
            "fol": "p_7(Neo)",
            "str_fol": "fearless(Neo)",
            "negation": false
        }
    ],
    "context_facts": [
        {
            "id": 5,
            "subject": "Neo",
            "text": "Neo takes risks.",
            "fol": "p_5(Neo)",
            "str_fol": "takes_risks(Neo)",
            "negation": false
        },
        {
            "id": 6,
            "subject": "Neo",
            "text": "Neo speaks the truth.",
            "fol": "p_6(Neo)",
            "str_fol": "speaks_truth(Neo)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Neo",
            "text": "Neo does not lead by example.",
            "fol": "\u00acp_4(Neo)",
            "str_fol": "\u00acleads_by_example(Neo)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Neo",
            "text": "Neo does not have honor.",
            "fol": "\u00acp_1(Neo)",
            "str_fol": "\u00achas_honor(Neo)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Neo",
            "text": "Neo does not earn a legacy.",
            "fol": "\u00acp_3(Neo)",
            "str_fol": "\u00acearns_legacy(Neo)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Neo",
            "text": "Neo does not mobilize troops.",
            "fol": "\u00acp_0(Neo)",
            "str_fol": "\u00acmobilizes_troops(Neo)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Neo",
            "text": "Neo is not strategically brilliant.",
            "fol": "\u00acp_2(Neo)",
            "str_fol": "\u00acstrategically_brilliant(Neo)",
            "negation": true
        }
    ],
    "context_rules": [
        {
            "id": 7,
            "text": "If Neo takes risks, then he challenges authority and speaks the truth.",
            "fol": "p_5(Neo) \u2192 (p_16(Neo) \u2227 p_6(Neo))",
            "str_fol": "takes_risks(Neo) \u2192 (challenges_authority(Neo) \u2227 speaks_truth(Neo))"
        },
        {
            "id": 6,
            "text": "Any legendary hero who breaks rules or challenges authority defies convention.",
            "fol": "\u2200x ((p_15(x) \u2228 p_16(x)) \u2192 p_14(x))",
            "str_fol": "\u2200x ((breaks_rules(x) \u2228 challenges_authority(x)) \u2192 defies_convention(x))"
        },
        {
            "id": 5,
            "text": "Every legendary hero who fights for justice either becomes legendary or defies convention (or both).",
            "fol": "\u2200x (p_13(x) \u2192 (p_12(x) \u2228 p_14(x)))",
            "str_fol": "\u2200x (fights_for_justice(x) \u2192 (becomes_legendary(x) \u2228 defies_convention(x)))"
        },
        {
            "id": 4,
            "text": "If Neo gains respect and leads by example, then he becomes legendary.",
            "fol": "(p_11(Neo) \u2227 p_4(Neo)) \u2192 p_12(Neo)",
            "str_fol": "(gains_respect(Neo) \u2227 leads_by_example(Neo)) \u2192 becomes_legendary(Neo)"
        },
        {
            "id": 3,
            "text": "If a legendary hero saves lives and has honor, then they gain respect.",
            "fol": "\u2200x ((p_10(x) \u2227 p_1(x)) \u2192 p_11(x))",
            "str_fol": "\u2200x ((saves_lives(x) \u2227 has_honor(x)) \u2192 gains_respect(x))"
        },
        {
            "id": 2,
            "text": "Any legendary hero who wins battles or saves lives earns a legacy.",
            "fol": "\u2200x ((p_9(x) \u2228 p_10(x)) \u2192 p_3(x))",
            "str_fol": "\u2200x ((wins_battles(x) \u2228 saves_lives(x)) \u2192 earns_legacy(x))"
        },
        {
            "id": 1,
            "text": "If Neo either mobilizes troops or is an inspirational leader (but not both), then he wins battles.",
            "fol": "(p_0(Neo) \u2295 p_8(Neo)) \u2192 p_9(Neo)",
            "str_fol": "(mobilizes_troops(Neo) \u2295 inspirational_leader(Neo)) \u2192 wins_battles(Neo)"
        },
        {
            "id": 0,
            "text": "For all legendary heroes, if a hero is fearless, then they are either strategically brilliant or an inspirational leader (or both).",
            "fol": "\u2200x (p_7(x) \u2192 (p_2(x) \u2228 p_8(x)))",
            "str_fol": "\u2200x (fearless(x) \u2192 (strategically_brilliant(x) \u2228 inspirational_leader(x)))"
        }
    ],
    "context": [
        {
            "id": 5,
            "subject": "Neo",
            "text": "Neo takes risks.",
            "fol": "p_5(Neo)",
            "str_fol": "takes_risks(Neo)",
            "negation": false
        },
        {
            "id": 6,
            "subject": "Neo",
            "text": "Neo speaks the truth.",
            "fol": "p_6(Neo)",
            "str_fol": "speaks_truth(Neo)",
            "negation": false
        },
        {
            "id": 4,
            "subject": "Neo",
            "text": "Neo does not lead by example.",
            "fol": "\u00acp_4(Neo)",
            "str_fol": "\u00acleads_by_example(Neo)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Neo",
            "text": "Neo does not have honor.",
            "fol": "\u00acp_1(Neo)",
            "str_fol": "\u00achas_honor(Neo)",
            "negation": true
        },
        {
            "id": 3,
            "subject": "Neo",
            "text": "Neo does not earn a legacy.",
            "fol": "\u00acp_3(Neo)",
            "str_fol": "\u00acearns_legacy(Neo)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Neo",
            "text": "Neo does not mobilize troops.",
            "fol": "\u00acp_0(Neo)",
            "str_fol": "\u00acmobilizes_troops(Neo)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Neo",
            "text": "Neo is not strategically brilliant.",
            "fol": "\u00acp_2(Neo)",
            "str_fol": "\u00acstrategically_brilliant(Neo)",
            "negation": true
        },
        {
            "id": 7,
            "text": "If Neo takes risks, then he challenges authority and speaks the truth.",
            "fol": "p_5(Neo) \u2192 (p_16(Neo) \u2227 p_6(Neo))",
            "str_fol": "takes_risks(Neo) \u2192 (challenges_authority(Neo) \u2227 speaks_truth(Neo))"
        },
        {
            "id": 6,
            "text": "Any legendary hero who breaks rules or challenges authority defies convention.",
            "fol": "\u2200x ((p_15(x) \u2228 p_16(x)) \u2192 p_14(x))",
            "str_fol": "\u2200x ((breaks_rules(x) \u2228 challenges_authority(x)) \u2192 defies_convention(x))"
        },
        {
            "id": 5,
            "text": "Every legendary hero who fights for justice either becomes legendary or defies convention (or both).",
            "fol": "\u2200x (p_13(x) \u2192 (p_12(x) \u2228 p_14(x)))",
            "str_fol": "\u2200x (fights_for_justice(x) \u2192 (becomes_legendary(x) \u2228 defies_convention(x)))"
        },
        {
            "id": 4,
            "text": "If Neo gains respect and leads by example, then he becomes legendary.",
            "fol": "(p_11(Neo) \u2227 p_4(Neo)) \u2192 p_12(Neo)",
            "str_fol": "(gains_respect(Neo) \u2227 leads_by_example(Neo)) \u2192 becomes_legendary(Neo)"
        },
        {
            "id": 3,
            "text": "If a legendary hero saves lives and has honor, then they gain respect.",
            "fol": "\u2200x ((p_10(x) \u2227 p_1(x)) \u2192 p_11(x))",
            "str_fol": "\u2200x ((saves_lives(x) \u2227 has_honor(x)) \u2192 gains_respect(x))"
        },
        {
            "id": 2,
            "text": "Any legendary hero who wins battles or saves lives earns a legacy.",
            "fol": "\u2200x ((p_9(x) \u2228 p_10(x)) \u2192 p_3(x))",
            "str_fol": "\u2200x ((wins_battles(x) \u2228 saves_lives(x)) \u2192 earns_legacy(x))"
        },
        {
            "id": 1,
            "text": "If Neo either mobilizes troops or is an inspirational leader (but not both), then he wins battles.",
            "fol": "(p_0(Neo) \u2295 p_8(Neo)) \u2192 p_9(Neo)",
            "str_fol": "(mobilizes_troops(Neo) \u2295 inspirational_leader(Neo)) \u2192 wins_battles(Neo)"
        },
        {
            "id": 0,
            "text": "For all legendary heroes, if a hero is fearless, then they are either strategically brilliant or an inspirational leader (or both).",
            "fol": "\u2200x (p_7(x) \u2192 (p_2(x) \u2228 p_8(x)))",
            "str_fol": "\u2200x (fearless(x) \u2192 (strategically_brilliant(x) \u2228 inspirational_leader(x)))"
        }
    ],
    "context_fol": "p_5(Neo)\np_6(Neo)\n\u00acp_4(Neo)\n\u00acp_1(Neo)\n\u00acp_3(Neo)\n\u00acp_0(Neo)\n\u00acp_2(Neo)\np_5(Neo) \u2192 (p_16(Neo) \u2227 p_6(Neo))\n\u2200x ((p_15(x) \u2228 p_16(x)) \u2192 p_14(x))\n\u2200x (p_13(x) \u2192 (p_12(x) \u2228 p_14(x)))\n(p_11(Neo) \u2227 p_4(Neo)) \u2192 p_12(Neo)\n\u2200x ((p_10(x) \u2227 p_1(x)) \u2192 p_11(x))\n\u2200x ((p_9(x) \u2228 p_10(x)) \u2192 p_3(x))\n(p_0(Neo) \u2295 p_8(Neo)) \u2192 p_9(Neo)\n\u2200x (p_7(x) \u2192 (p_2(x) \u2228 p_8(x)))",
    "conclusion": {
        "id": 11,
        "subject": "Neo",
        "text": "Neo is fearless.",
        "fol": "p_7(Neo)",
        "str_fol": "fearless(Neo)",
        "negation": false
    },
    "initial_answer": "False",
    "initial_goal": "p_7(Neo)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 5,
                    "subject": "Neo",
                    "text": "Neo takes risks.",
                    "fol": "p_5(Neo)",
                    "str_fol": "takes_risks(Neo)",
                    "negation": false
                },
                {
                    "id": 6,
                    "subject": "Neo",
                    "text": "Neo speaks the truth.",
                    "fol": "p_6(Neo)",
                    "str_fol": "speaks_truth(Neo)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 7,
                    "text": "If Neo takes risks, then he challenges authority and speaks the truth.",
                    "fol": "p_5(Neo) \u2192 (p_16(Neo) \u2227 p_6(Neo))",
                    "str_fol": "takes_risks(Neo) \u2192 (challenges_authority(Neo) \u2227 speaks_truth(Neo))"
                }
            ],
            "conclusion": {
                "id": 7,
                "subject": "Neo",
                "text": "Neo challenges authority.",
                "fol": "p_16(Neo)",
                "str_fol": "challenges_authority(Neo)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 7,
                    "subject": "Neo",
                    "text": "Neo challenges authority.",
                    "fol": "p_16(Neo)",
                    "str_fol": "challenges_authority(Neo)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 6,
                    "text": "Any legendary hero who breaks rules or challenges authority defies convention.",
                    "fol": "\u2200x ((p_15(x) \u2228 p_16(x)) \u2192 p_14(x))",
                    "str_fol": "\u2200x ((breaks_rules(x) \u2228 challenges_authority(x)) \u2192 defies_convention(x))"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Neo",
                "text": "Neo defies convention.",
                "fol": "p_14(Neo)",
                "str_fol": "defies_convention(Neo)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 8,
                    "subject": "Neo",
                    "text": "Neo defies convention.",
                    "fol": "p_14(Neo)",
                    "str_fol": "defies_convention(Neo)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "Every legendary hero who fights for justice either becomes legendary or defies convention (or both).",
                    "fol": "\u2200x (p_13(x) \u2192 (p_12(x) \u2228 p_14(x)))",
                    "str_fol": "\u2200x (fights_for_justice(x) \u2192 (becomes_legendary(x) \u2228 defies_convention(x)))"
                }
            ],
            "conclusion": null
        },
        {
            "facts": [
                {
                    "id": 4,
                    "subject": "Neo",
                    "text": "Neo does not lead by example.",
                    "fol": "\u00acp_4(Neo)",
                    "str_fol": "\u00acleads_by_example(Neo)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "If Neo gains respect and leads by example, then he becomes legendary.",
                    "fol": "(p_11(Neo) \u2227 p_4(Neo)) \u2192 p_12(Neo)",
                    "str_fol": "(gains_respect(Neo) \u2227 leads_by_example(Neo)) \u2192 becomes_legendary(Neo)"
                }
            ],
            "conclusion": null
        },
        {
            "facts": [
                {
                    "id": 1,
                    "subject": "Neo",
                    "text": "Neo does not have honor.",
                    "fol": "\u00acp_1(Neo)",
                    "str_fol": "\u00achas_honor(Neo)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "If a legendary hero saves lives and has honor, then they gain respect.",
                    "fol": "\u2200x ((p_10(x) \u2227 p_1(x)) \u2192 p_11(x))",
                    "str_fol": "\u2200x ((saves_lives(x) \u2227 has_honor(x)) \u2192 gains_respect(x))"
                }
            ],
            "conclusion": null
        },
        {
            "facts": [
                {
                    "id": 3,
                    "subject": "Neo",
                    "text": "Neo does not earn a legacy.",
                    "fol": "\u00acp_3(Neo)",
                    "str_fol": "\u00acearns_legacy(Neo)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "Any legendary hero who wins battles or saves lives earns a legacy.",
                    "fol": "\u2200x ((p_9(x) \u2228 p_10(x)) \u2192 p_3(x))",
                    "str_fol": "\u2200x ((wins_battles(x) \u2228 saves_lives(x)) \u2192 earns_legacy(x))"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Neo",
                "text": "Neo does not win battles.",
                "fol": "\u00acp_9(Neo)",
                "str_fol": "\u00acwins_battles(Neo)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 0,
                    "subject": "Neo",
                    "text": "Neo does not mobilize troops.",
                    "fol": "\u00acp_0(Neo)",
                    "str_fol": "\u00acmobilizes_troops(Neo)",
                    "negation": true
                },
                {
                    "id": 9,
                    "subject": "Neo",
                    "text": "Neo does not win battles.",
                    "fol": "\u00acp_9(Neo)",
                    "str_fol": "\u00acwins_battles(Neo)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "If Neo either mobilizes troops or is an inspirational leader (but not both), then he wins battles.",
                    "fol": "(p_0(Neo) \u2295 p_8(Neo)) \u2192 p_9(Neo)",
                    "str_fol": "(mobilizes_troops(Neo) \u2295 inspirational_leader(Neo)) \u2192 wins_battles(Neo)"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Neo",
                "text": "Neo is not an inspirational leader.",
                "fol": "\u00acp_8(Neo)",
                "str_fol": "\u00acinspirational_leader(Neo)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 2,
                    "subject": "Neo",
                    "text": "Neo is not strategically brilliant.",
                    "fol": "\u00acp_2(Neo)",
                    "str_fol": "\u00acstrategically_brilliant(Neo)",
                    "negation": true
                },
                {
                    "id": 10,
                    "subject": "Neo",
                    "text": "Neo is not an inspirational leader.",
                    "fol": "\u00acp_8(Neo)",
                    "str_fol": "\u00acinspirational_leader(Neo)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "For all legendary heroes, if a hero is fearless, then they are either strategically brilliant or an inspirational leader (or both).",
                    "fol": "\u2200x (p_7(x) \u2192 (p_2(x) \u2228 p_8(x)))",
                    "str_fol": "\u2200x (fearless(x) \u2192 (strategically_brilliant(x) \u2228 inspirational_leader(x)))"
                }
            ],
            "conclusion": {
                "id": 11,
                "subject": "Neo",
                "text": "Neo is fearless.",
                "fol": "p_7(Neo)",
                "str_fol": "fearless(Neo)",
                "negation": false
            }
        }
    ],
    "proof_trace": "6 (all x (p_9(x) | p_10(x) -> p_3(x))).  [assumption].\n7 -(p_0(Neo) <-> p_8(Neo)) -> p_9(Neo).  [assumption].\n8 (all x (p_7(x) -> p_2(x) | p_8(x))).  [assumption].\n9 -p_7(Neo).  [goal].\n13 -p_9(x) | p_3(x).  [clausify(6)].\n14 -p_3(Neo).  [assumption].\n16 p_0(Neo) | -p_8(Neo) | p_9(Neo).  [clausify(7)].\n17 -p_0(Neo).  [assumption].\n19 -p_7(x) | p_2(x) | p_8(x).  [clausify(8)].\n20 -p_2(Neo).  [assumption].\n23 -p_7(Neo) | p_8(Neo).  [resolve(19,b,20,a)].\n24 p_7(Neo).  [deny(9)].\n25 -p_8(Neo) | p_9(Neo).  [resolve(16,a,17,a)].\n26 -p_9(Neo).  [resolve(13,b,14,a)].\n27 -p_8(Neo).  [resolve(25,b,26,a)].\n28 p_8(Neo).  [resolve(23,a,24,a)].\n29 $F.  [resolve(27,a,28,a)].",
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_5(Neo)\np_6(Neo)\n\u00acp_4(Neo)\n\u00acp_1(Neo)\n\u00acp_3(Neo)\n\u00acp_0(Neo)\n\u00acp_2(Neo)\np_16(Neo)\n\u00acp_8(Neo)\np_5(Neo) \u2192 (p_16(Neo) \u2227 p_6(Neo))\n\u2200x ((p_15(x) \u2228 p_16(x)) \u2192 p_14(x))\n\u2200x (\u00acp_13(x) \u2228 p_12(x) \u2228 p_14(x))\n(p_11(Neo) \u2227 p_4(Neo)) \u2192 p_12(Neo)\n\u2200x ((p_10(x) \u2227 p_1(x)) \u2192 p_11(x))\n\u2200x ((p_9(x) \u2228 p_10(x)) \u2192 p_3(x))\n(p_0(Neo) \u2295 p_8(Neo)) \u2192 p_9(Neo)\n\u2200x (p_7(x) \u2192 (p_2(x) \u2228 p_8(x)))",
            "Initial Goal": "p_7(Neo)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Neo)",
                    "p_6(Neo)",
                    "-p_4(Neo)",
                    "-p_1(Neo)",
                    "-p_3(Neo)",
                    "-p_0(Neo)",
                    "-p_2(Neo)",
                    "p_16(Neo)",
                    "-p_8(Neo)",
                    "p_5(Neo) -> (p_16(Neo) & p_6(Neo))",
                    "all x ((p_15(x) | p_16(x)) -> p_14(x))",
                    "all x (-p_13(x) | p_12(x) | p_14(x))",
                    "(p_11(Neo) & p_4(Neo)) -> p_12(Neo)",
                    "all x ((p_10(x) & p_1(x)) -> p_11(x))",
                    "all x ((p_9(x) | p_10(x)) -> p_3(x))",
                    "(-(p_0(Neo) <-> p_8(Neo))) -> p_9(Neo)",
                    "all x (p_7(x) -> (p_2(x) | p_8(x)))"
                ],
                "formulas(goals)": [
                    "-p_7(Neo)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u2200x (p_13(x) \u2192 (p_12(x) \u2228 p_14(x)))"
                ],
                "added_facts": [
                    "p_16(Neo)",
                    "\u00acp_8(Neo)"
                ],
                "added_rules": [
                    "\u2200x (\u00acp_13(x) \u2228 p_12(x) \u2228 p_14(x))"
                ]
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_5(Neo)\np_6(Neo)\n\u00acp_4(Neo)\n\u00acp_1(Neo)\n\u00acp_3(Neo)\n\u00acp_0(Neo)\n\u00acp_2(Neo)\np_16(Neo)\n\u00acp_8(Neo)\np_5(Neo) \u2192 (p_16(Neo) \u2227 p_6(Neo))\n\u2200x ((p_15(x) \u2228 p_16(x)) \u2192 p_14(x))\n\u2200x (\u00acp_13(x) \u2228 p_12(x) \u2228 p_14(x))\n(p_11(Neo) \u2227 p_4(Neo)) \u2192 p_12(Neo)\n\u2200x ((p_10(x) \u2227 p_1(x)) \u2192 p_11(x))\n\u2200x ((p_9(x) \u2228 p_10(x)) \u2192 p_3(x))\n(p_0(Neo) \u2295 p_8(Neo)) \u2192 p_9(Neo)\n\u2200x (p_7(x) \u2192 (p_2(x) \u2228 p_8(x) \u2228 p_16(x)))\n\u2200x (p_16(x) \u2192 p_7(x))",
            "Initial Goal": "p_7(Neo)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Neo)",
                    "p_6(Neo)",
                    "-p_4(Neo)",
                    "-p_1(Neo)",
                    "-p_3(Neo)",
                    "-p_0(Neo)",
                    "-p_2(Neo)",
                    "p_16(Neo)",
                    "-p_8(Neo)",
                    "p_5(Neo) -> (p_16(Neo) & p_6(Neo))",
                    "all x ((p_15(x) | p_16(x)) -> p_14(x))",
                    "all x (-p_13(x) | p_12(x) | p_14(x))",
                    "(p_11(Neo) & p_4(Neo)) -> p_12(Neo)",
                    "all x ((p_10(x) & p_1(x)) -> p_11(x))",
                    "all x ((p_9(x) | p_10(x)) -> p_3(x))",
                    "(-(p_0(Neo) <-> p_8(Neo))) -> p_9(Neo)",
                    "all x (p_7(x) -> (p_2(x) | p_8(x) | p_16(x)))",
                    "all x (p_16(x) -> p_7(x))"
                ],
                "formulas(goals)": [
                    "p_7(Neo)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u2200x (p_7(x) \u2192 (p_2(x) \u2228 p_8(x)))"
                ],
                "added_facts": [],
                "added_rules": [
                    "\u2200x (p_7(x) \u2192 (p_2(x) \u2228 p_8(x) \u2228 p_16(x)))",
                    "\u2200x (p_16(x) \u2192 p_7(x))"
                ]
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_5(Neo)\np_6(Neo)\n\u00acp_4(Neo)\n\u00acp_1(Neo)\n\u00acp_3(Neo)\n\u00acp_0(Neo)\n\u00acp_2(Neo)\np_16(Neo)\n\u00acp_8(Neo)\np_5(Neo) \u2192 (p_16(Neo) \u2227 p_6(Neo))\n\u2200x ((p_15(x) \u2228 p_16(x)) \u2192 p_14(x))\n\u2200x (\u00acp_13(x) \u2228 p_12(x) \u2228 p_14(x))\n(p_11(Neo) \u2227 p_4(Neo)) \u2192 p_12(Neo)\n\u2200x ((p_10(x) \u2227 p_1(x)) \u2192 p_11(x))\n\u2200x ((p_9(x) \u2228 p_10(x)) \u2192 p_3(x))\n(p_0(Neo) \u2295 p_8(Neo)) \u2192 p_9(Neo)\n\u2200x (p_7(x) \u2192 (p_2(x) \u2228 p_8(x) \u2228 p_16(x)))\n\u2200x (p_5(x) \u2192 \u00acp_7(x))",
            "Initial Goal": "p_7(Neo)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Neo)",
                    "p_6(Neo)",
                    "-p_4(Neo)",
                    "-p_1(Neo)",
                    "-p_3(Neo)",
                    "-p_0(Neo)",
                    "-p_2(Neo)",
                    "p_16(Neo)",
                    "-p_8(Neo)",
                    "p_5(Neo) -> (p_16(Neo) & p_6(Neo))",
                    "all x ((p_15(x) | p_16(x)) -> p_14(x))",
                    "all x (-p_13(x) | p_12(x) | p_14(x))",
                    "(p_11(Neo) & p_4(Neo)) -> p_12(Neo)",
                    "all x ((p_10(x) & p_1(x)) -> p_11(x))",
                    "all x ((p_9(x) | p_10(x)) -> p_3(x))",
                    "(-(p_0(Neo) <-> p_8(Neo))) -> p_9(Neo)",
                    "all x (p_7(x) -> (p_2(x) | p_8(x) | p_16(x)))",
                    "all x (p_5(x) -> -p_7(x))"
                ],
                "formulas(goals)": [
                    "-p_7(Neo)"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "\u2200x (p_16(x) \u2192 p_7(x))"
                ],
                "removed_rules": [],
                "added_facts": [],
                "added_rules": [
                    "\u2200x (p_5(x) \u2192 \u00acp_7(x))"
                ]
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_5(Neo)\np_6(Neo)\n\u00acp_4(Neo)\n\u00acp_1(Neo)\n\u00acp_3(Neo)\n\u00acp_0(Neo)\n\u00acp_2(Neo)\np_16(Neo)\n\u00acp_8(Neo)\np_5(Neo) \u2192 (p_16(Neo) \u2227 p_6(Neo))\n\u2200x ((p_15(x) \u2228 p_16(x)) \u2192 p_14(x))\n\u2200x (\u00acp_13(x) \u2228 p_12(x) \u2228 p_14(x))\n(p_11(Neo) \u2227 p_4(Neo)) \u2192 p_12(Neo)\n\u2200x ((p_10(x) \u2227 p_1(x)) \u2192 p_11(x))\n\u2200x ((p_9(x) \u2228 p_10(x)) \u2192 p_3(x))\n(p_0(Neo) \u2295 p_8(Neo)) \u2192 p_9(Neo)\n\u2200x (p_7(x) \u2192 (p_2(x) \u2228 p_8(x) \u2228 p_16(x)))\n\u2200x (p_16(x) \u2192 p_7(x))",
            "Initial Goal": "p_7(Neo)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Neo)",
                    "p_6(Neo)",
                    "-p_4(Neo)",
                    "-p_1(Neo)",
                    "-p_3(Neo)",
                    "-p_0(Neo)",
                    "-p_2(Neo)",
                    "p_16(Neo)",
                    "-p_8(Neo)",
                    "p_5(Neo) -> (p_16(Neo) & p_6(Neo))",
                    "all x ((p_15(x) | p_16(x)) -> p_14(x))",
                    "all x (-p_13(x) | p_12(x) | p_14(x))",
                    "(p_11(Neo) & p_4(Neo)) -> p_12(Neo)",
                    "all x ((p_10(x) & p_1(x)) -> p_11(x))",
                    "all x ((p_9(x) | p_10(x)) -> p_3(x))",
                    "(-(p_0(Neo) <-> p_8(Neo))) -> p_9(Neo)",
                    "all x (p_7(x) -> (p_2(x) | p_8(x) | p_16(x)))",
                    "all x (p_16(x) -> p_7(x))"
                ],
                "formulas(goals)": [
                    "p_7(Neo)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u2200x (p_5(x) \u2192 \u00acp_7(x))"
                ],
                "added_facts": [],
                "added_rules": [
                    "\u2200x (p_16(x) \u2192 p_7(x))"
                ]
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_5(Neo)\np_6(Neo)\n\u00acp_4(Neo)\n\u00acp_1(Neo)\n\u00acp_3(Neo)\n\u00acp_0(Neo)\n\u00acp_2(Neo)\np_16(Neo)\n\u00acp_8(Neo)\np_5(Neo) \u2192 (p_16(Neo) \u2227 p_6(Neo))\n\u2200x ((p_15(x) \u2228 p_16(x)) \u2192 p_14(x))\n\u2200x (\u00acp_13(x) \u2228 p_12(x) \u2228 p_14(x))\n(p_11(Neo) \u2227 p_4(Neo)) \u2192 p_12(Neo)\n\u2200x ((p_10(x) \u2227 p_1(x)) \u2192 p_11(x))\n\u2200x ((p_9(x) \u2228 p_10(x)) \u2192 p_3(x))\n(p_0(Neo) \u2295 p_8(Neo)) \u2192 p_9(Neo)\n\u2200x (p_7(x) \u2192 (p_2(x) \u2228 p_8(x) \u2228 p_16(x)))\n\u2200x (\u00acp_16(x) \u2228 p_7(x))\np_16(Neo) \u2192 p_14(Neo)",
            "Initial Goal": "p_7(Neo)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Neo)",
                    "p_6(Neo)",
                    "-p_4(Neo)",
                    "-p_1(Neo)",
                    "-p_3(Neo)",
                    "-p_0(Neo)",
                    "-p_2(Neo)",
                    "p_16(Neo)",
                    "-p_8(Neo)",
                    "p_5(Neo) -> (p_16(Neo) & p_6(Neo))",
                    "all x ((p_15(x) | p_16(x)) -> p_14(x))",
                    "all x (-p_13(x) | p_12(x) | p_14(x))",
                    "(p_11(Neo) & p_4(Neo)) -> p_12(Neo)",
                    "all x ((p_10(x) & p_1(x)) -> p_11(x))",
                    "all x ((p_9(x) | p_10(x)) -> p_3(x))",
                    "(-(p_0(Neo) <-> p_8(Neo))) -> p_9(Neo)",
                    "all x (p_7(x) -> (p_2(x) | p_8(x) | p_16(x)))",
                    "all x (-p_16(x) | p_7(x))",
                    "p_16(Neo) -> p_14(Neo)"
                ],
                "formulas(goals)": [
                    "p_7(Neo)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "\u2200x (p_16(x) \u2192 p_7(x))"
                ],
                "added_facts": [],
                "added_rules": [
                    "\u2200x (\u00acp_16(x) \u2228 p_7(x))",
                    "p_16(Neo) \u2192 p_14(Neo)"
                ]
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_5(Neo)\np_6(Neo)\n\u00acp_4(Neo)\n\u00acp_1(Neo)\n\u00acp_3(Neo)\n\u00acp_0(Neo)\n\u00acp_2(Neo)\np_16(Neo)\n\u00acp_8(Neo)\np_5(Neo) \u2192 (p_16(Neo) \u2227 p_6(Neo))\n\u2200x ((p_15(x) \u2228 p_16(x)) \u2192 p_14(x))\n\u2200x (\u00acp_13(x) \u2228 p_12(x) \u2228 p_14(x))\n(p_11(Neo) \u2227 p_4(Neo)) \u2192 p_12(Neo)\n\u2200x ((p_10(x) \u2227 p_1(x)) \u2192 p_11(x))\n\u2200x ((p_9(x) \u2228 p_10(x)) \u2192 p_3(x))\n(p_0(Neo) \u2295 p_8(Neo)) \u2192 p_9(Neo)\n\u2200x (p_7(x) \u2192 (p_2(x) \u2228 p_8(x) \u2228 p_16(x)))\n\u2200x (\u00acp_16(x) \u2228 p_7(x))\np_16(Neo) \u2192 p_14(Neo)\np_16(Neo) \u2192 p_7(Neo)\np_14(Neo)\np_16(Neo) \u2228 \u00acp_16(Neo)",
            "Initial Goal": "p_7(Neo)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Neo).",
                    "p_6(Neo).",
                    "-p_4(Neo).",
                    "-p_1(Neo).",
                    "-p_3(Neo).",
                    "-p_0(Neo).",
                    "-p_2(Neo).",
                    "p_16(Neo).",
                    "-p_8(Neo).",
                    "p_5(Neo) -> (p_16(Neo) & p_6(Neo)).",
                    "all x ((p_15(x) | p_16(x)) -> p_14(x)).",
                    "all x (-p_13(x) | p_12(x) | p_14(x)).",
                    "(p_11(Neo) & p_4(Neo)) -> p_12(Neo).",
                    "all x ((p_10(x) & p_1(x)) -> p_11(x)).",
                    "all x ((p_9(x) | p_10(x)) -> p_3(x)).",
                    "(-(p_0(Neo) <-> p_8(Neo))) -> p_9(Neo).",
                    "all x (p_7(x) -> (p_2(x) | p_8(x) | p_16(x))).",
                    "all x (-p_16(x) | p_7(x)).",
                    "p_16(Neo) -> p_14(Neo).",
                    "p_16(Neo) -> p_7(Neo).",
                    "p_14(Neo).",
                    "p_16(Neo) | -p_16(Neo)."
                ],
                "formulas(goals)": [
                    "p_7(Neo)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_14(Neo)",
                    "p_16(Neo) \u2228 \u00acp_16(Neo)"
                ],
                "added_rules": [
                    "p_16(Neo) \u2192 p_7(Neo)"
                ]
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_5(Neo).\np_6(Neo).\n\u00acp_4(Neo).\n\u00acp_1(Neo).\n\u00acp_3(Neo).\n\u00acp_0(Neo).\n\u00acp_2(Neo).\np_16(Neo).\n\u00acp_8(Neo).\np_5(Neo) \u2192 (p_16(Neo) \u2227 p_6(Neo)).\n\u2200x ((p_15(x) \u2228 p_16(x)) \u2192 p_14(x)).\n\u2200x (\u00acp_13(x) \u2228 p_12(x) \u2228 p_14(x)).\np_11(Neo) \u2192 (p_4(Neo) \u2192 p_12(Neo)).\n\u2200x ((p_10(x) \u2227 p_1(x)) \u2192 p_11(x)).\n\u2200x ((p_9(x) \u2228 p_10(x)) \u2192 p_3(x)).\n(p_0(Neo) \u2295 p_8(Neo)) \u2192 p_9(Neo).\n\u2200x (p_7(x) \u2192 (p_2(x) \u2228 p_8(x) \u2228 p_16(x))).\n\u2200x (\u00acp_16(x) \u2228 p_7(x)).\np_16(Neo) \u2192 p_14(Neo).\np_16(Neo) \u2192 p_7(Neo).\np_14(Neo).\np_16(Neo) \u2228 \u00acp_16(Neo).\np_7(Neo) \u2228 \u00acp_7(Neo).\n\u00acp_7(Neo) \u2192 \u00acp_16(Neo).\np_7(Neo) \u2192 p_7(Neo).\np_14(Neo) \u2228 p_7(Neo).",
            "Initial Goal": "p_7(Neo)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_5(Neo).",
                    "p_6(Neo).",
                    "-p_4(Neo).",
                    "-p_1(Neo).",
                    "-p_3(Neo).",
                    "-p_0(Neo).",
                    "-p_2(Neo).",
                    "p_16(Neo).",
                    "-p_8(Neo).",
                    "p_5(Neo) -> (p_16(Neo) & p_6(Neo)).",
                    "all x ((p_15(x) | p_16(x)) -> p_14(x)).",
                    "all x (-p_13(x) | p_12(x) | p_14(x)).",
                    "p_11(Neo) -> (p_4(Neo) -> p_12(Neo)).",
                    "all x ((p_10(x) & p_1(x)) -> p_11(x)).",
                    "all x ((p_9(x) | p_10(x)) -> p_3(x)).",
                    "(-(p_0(Neo) <-> p_8(Neo))) -> p_9(Neo).",
                    "all x (p_7(x) -> (p_2(x) | p_8(x) | p_16(x))).",
                    "all x (-p_16(x) | p_7(x)).",
                    "p_16(Neo) -> p_14(Neo).",
                    "p_16(Neo) -> p_7(Neo).",
                    "p_14(Neo).",
                    "p_16(Neo) | -p_16(Neo).",
                    "p_7(Neo) | -p_7(Neo).",
                    "-p_7(Neo) -> -p_16(Neo).",
                    "p_7(Neo) -> p_7(Neo).",
                    "p_14(Neo) | p_7(Neo)."
                ],
                "formulas(goals)": [
                    "p_7(Neo)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "(p_11(Neo) \u2227 p_4(Neo)) \u2192 p_12(Neo)"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_7(Neo) \u2228 \u00acp_7(Neo)",
                    "\u00acp_7(Neo) \u2192 \u00acp_16(Neo)",
                    "p_7(Neo) \u2192 p_7(Neo)",
                    "p_14(Neo) \u2228 p_7(Neo)",
                    "p_11(Neo) \u2192 (p_4(Neo) \u2192 p_12(Neo))"
                ]
            }
        }
    ]
}