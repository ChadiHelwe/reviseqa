{
    "background_story": "Myla, a young and ambitious journalist, found herself in Jeddah, Saudi Arabia, covering a story on the city's vibrant art scene. As she explored the historic Al-Balad district, she stumbled upon a local artisan market, where she met a group of talented women who were reviving traditional crafts. Inspired by their stories and resilience, Myla decided to extend her stay in Jeddah, immersing herself in the local culture. She began to learn Arabic and started a blog to share the untold stories of the city's hidden gems. Myla's adventures in Jeddah not only broadened her journalistic horizons but also deepened her understanding of the rich cultural heritage of the city and its people.",
    "predicates": [
        {
            "id": 0,
            "name": "writes_blog"
        },
        {
            "id": 1,
            "name": "tells_stories"
        },
        {
            "id": 2,
            "name": "uncover_secrets"
        },
        {
            "id": 3,
            "name": "is_adventurous"
        },
        {
            "id": 4,
            "name": "good_journalist"
        },
        {
            "id": 5,
            "name": "speaks_local_language"
        },
        {
            "id": 6,
            "name": "understands_culture"
        },
        {
            "id": 7,
            "name": "is_curious"
        },
        {
            "id": 8,
            "name": "explores_city"
        },
        {
            "id": 9,
            "name": "meets_artisans"
        },
        {
            "id": 10,
            "name": "discovers_hidden_gems"
        },
        {
            "id": 11,
            "name": "immerses_herself"
        },
        {
            "id": 12,
            "name": "appreciates_history"
        },
        {
            "id": 13,
            "name": "asks_questions"
        },
        {
            "id": 14,
            "name": "seeks_knowledge"
        },
        {
            "id": 15,
            "name": "loves_history"
        },
        {
            "id": 16,
            "name": "values_diversity"
        },
        {
            "id": 17,
            "name": "values_community"
        },
        {
            "id": 18,
            "name": "listens_well"
        },
        {
            "id": 19,
            "name": "likes_history"
        },
        {
            "id": 20,
            "name": "enjoys_travel"
        }
    ],
    "subject_name": "Myla",
    "subject_category": "human",
    "keyword": "jeddah",
    "all_facts": [
        {
            "id": 0,
            "subject": "Myla",
            "text": "Myla does not write a blog.",
            "fol": "\u00acp_0(Myla)",
            "str_fol": "\u00acwrites_blog(Myla)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Myla",
            "text": "Myla does not tell stories.",
            "fol": "\u00acp_1(Myla)",
            "str_fol": "\u00actells_stories(Myla)",
            "negation": true
        },
        {
            "id": 2,
            "subject": "Myla",
            "text": "Myla uncovers secrets.",
            "fol": "p_2(Myla)",
            "str_fol": "uncover_secrets(Myla)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Myla",
            "text": "Myla is not adventurous.",
            "fol": "\u00acp_3(Myla)",
            "str_fol": "\u00acis_adventurous(Myla)",
            "negation": true
        },
        {
            "id": 4,
            "subject": "Myla",
            "text": "Myla discovers hidden gems.",
            "fol": "p_10(Myla)",
            "str_fol": "discovers_hidden_gems(Myla)",
            "negation": false
        },
        {
            "id": 5,
            "subject": "Myla",
            "text": "Myla is a good journalist.",
            "fol": "p_4(Myla)",
            "str_fol": "good_journalist(Myla)",
            "negation": false
        },
        {
            "id": 6,
            "subject": "Myla",
            "text": "Myla does not meet local artisans when she explores the city.",
            "fol": "\u00acp_9(Myla)",
            "str_fol": "\u00acmeets_artisans(Myla)",
            "negation": true
        },
        {
            "id": 7,
            "subject": "Myla",
            "text": "Myla explores the city.",
            "fol": "p_8(Myla)",
            "str_fol": "explores_city(Myla)",
            "negation": false
        },
        {
            "id": 8,
            "subject": "Myla",
            "text": "Myla is curious.",
            "fol": "p_7(Myla)",
            "str_fol": "is_curious(Myla)",
            "negation": false
        },
        {
            "id": 9,
            "subject": "Myla",
            "text": "Myla does not understand the culture.",
            "fol": "\u00acp_6(Myla)",
            "str_fol": "\u00acunderstands_culture(Myla)",
            "negation": true
        },
        {
            "id": 10,
            "subject": "Myla",
            "text": "Myla does not speak the local language.",
            "fol": "\u00acp_5(Myla)",
            "str_fol": "\u00acspeaks_local_language(Myla)",
            "negation": true
        }
    ],
    "context_facts": [
        {
            "id": 2,
            "subject": "Myla",
            "text": "Myla uncovers secrets.",
            "fol": "p_2(Myla)",
            "str_fol": "uncover_secrets(Myla)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Myla",
            "text": "Myla is not adventurous.",
            "fol": "\u00acp_3(Myla)",
            "str_fol": "\u00acis_adventurous(Myla)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Myla",
            "text": "Myla does not tell stories.",
            "fol": "\u00acp_1(Myla)",
            "str_fol": "\u00actells_stories(Myla)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Myla",
            "text": "Myla does not write a blog.",
            "fol": "\u00acp_0(Myla)",
            "str_fol": "\u00acwrites_blog(Myla)",
            "negation": true
        }
    ],
    "context_rules": [
        {
            "id": 6,
            "text": "If Myla either discovers hidden gems or uncovers secrets (but not both), then she is adventurous.",
            "fol": "(p_10(Myla) \u2295 p_2(Myla)) \u2192 p_3(Myla)",
            "str_fol": "(discovers_hidden_gems(Myla) \u2295 uncover_secrets(Myla)) \u2192 is_adventurous(Myla)"
        },
        {
            "id": 5,
            "text": "Myla is either a good journalist or tells stories.",
            "fol": "p_4(Myla) \u2228 p_1(Myla)",
            "str_fol": "good_journalist(Myla) \u2228 tells_stories(Myla)"
        },
        {
            "id": 4,
            "text": "For Myla, either she discovers hidden gems or meets artisans, but not necessarily both.",
            "fol": "p_10(Myla) \u2295 p_9(Myla)",
            "str_fol": "discovers_hidden_gems(Myla) \u2295 meets_artisans(Myla)"
        },
        {
            "id": 3,
            "text": "Either Myla explores the city or she writes a blog, but not both.",
            "fol": "p_8(Myla) \u2295 p_0(Myla)",
            "str_fol": "explores_city(Myla) \u2295 writes_blog(Myla)"
        },
        {
            "id": 2,
            "text": "If Myla explores the city, then she either meets local artisans or is curious (or both).",
            "fol": "p_8(Myla) \u2192 (p_9(Myla) \u2228 p_7(Myla))",
            "str_fol": "explores_city(Myla) \u2192 (meets_artisans(Myla) \u2228 is_curious(Myla))"
        },
        {
            "id": 1,
            "text": "Myla is either curious or has an understanding of the culture, but not necessarily both.",
            "fol": "p_7(Myla) \u2295 p_6(Myla)",
            "str_fol": "is_curious(Myla) \u2295 understands_culture(Myla)"
        },
        {
            "id": 0,
            "text": "For all humans, if someone is a good journalist, then they either speak the local language or understand the culture (or both).",
            "fol": "\u2200x (p_4(x) \u2192 (p_5(x) \u2228 p_6(x)))",
            "str_fol": "\u2200x (good_journalist(x) \u2192 (speaks_local_language(x) \u2228 understands_culture(x)))"
        }
    ],
    "context": [
        {
            "id": 2,
            "subject": "Myla",
            "text": "Myla uncovers secrets.",
            "fol": "p_2(Myla)",
            "str_fol": "uncover_secrets(Myla)",
            "negation": false
        },
        {
            "id": 3,
            "subject": "Myla",
            "text": "Myla is not adventurous.",
            "fol": "\u00acp_3(Myla)",
            "str_fol": "\u00acis_adventurous(Myla)",
            "negation": true
        },
        {
            "id": 1,
            "subject": "Myla",
            "text": "Myla does not tell stories.",
            "fol": "\u00acp_1(Myla)",
            "str_fol": "\u00actells_stories(Myla)",
            "negation": true
        },
        {
            "id": 0,
            "subject": "Myla",
            "text": "Myla does not write a blog.",
            "fol": "\u00acp_0(Myla)",
            "str_fol": "\u00acwrites_blog(Myla)",
            "negation": true
        },
        {
            "id": 6,
            "text": "If Myla either discovers hidden gems or uncovers secrets (but not both), then she is adventurous.",
            "fol": "(p_10(Myla) \u2295 p_2(Myla)) \u2192 p_3(Myla)",
            "str_fol": "(discovers_hidden_gems(Myla) \u2295 uncover_secrets(Myla)) \u2192 is_adventurous(Myla)"
        },
        {
            "id": 5,
            "text": "Myla is either a good journalist or tells stories.",
            "fol": "p_4(Myla) \u2228 p_1(Myla)",
            "str_fol": "good_journalist(Myla) \u2228 tells_stories(Myla)"
        },
        {
            "id": 4,
            "text": "For Myla, either she discovers hidden gems or meets artisans, but not necessarily both.",
            "fol": "p_10(Myla) \u2295 p_9(Myla)",
            "str_fol": "discovers_hidden_gems(Myla) \u2295 meets_artisans(Myla)"
        },
        {
            "id": 3,
            "text": "Either Myla explores the city or she writes a blog, but not both.",
            "fol": "p_8(Myla) \u2295 p_0(Myla)",
            "str_fol": "explores_city(Myla) \u2295 writes_blog(Myla)"
        },
        {
            "id": 2,
            "text": "If Myla explores the city, then she either meets local artisans or is curious (or both).",
            "fol": "p_8(Myla) \u2192 (p_9(Myla) \u2228 p_7(Myla))",
            "str_fol": "explores_city(Myla) \u2192 (meets_artisans(Myla) \u2228 is_curious(Myla))"
        },
        {
            "id": 1,
            "text": "Myla is either curious or has an understanding of the culture, but not necessarily both.",
            "fol": "p_7(Myla) \u2295 p_6(Myla)",
            "str_fol": "is_curious(Myla) \u2295 understands_culture(Myla)"
        },
        {
            "id": 0,
            "text": "For all humans, if someone is a good journalist, then they either speak the local language or understand the culture (or both).",
            "fol": "\u2200x (p_4(x) \u2192 (p_5(x) \u2228 p_6(x)))",
            "str_fol": "\u2200x (good_journalist(x) \u2192 (speaks_local_language(x) \u2228 understands_culture(x)))"
        }
    ],
    "context_fol": "p_2(Myla)\n\u00acp_3(Myla)\n\u00acp_1(Myla)\n\u00acp_0(Myla)\n(p_10(Myla) \u2295 p_2(Myla)) \u2192 p_3(Myla)\np_4(Myla) \u2228 p_1(Myla)\np_10(Myla) \u2295 p_9(Myla)\np_8(Myla) \u2295 p_0(Myla)\np_8(Myla) \u2192 (p_9(Myla) \u2228 p_7(Myla))\np_7(Myla) \u2295 p_6(Myla)\n\u2200x (p_4(x) \u2192 (p_5(x) \u2228 p_6(x)))",
    "conclusion": {
        "id": 10,
        "subject": "Myla",
        "text": "Myla does not speak the local language.",
        "fol": "\u00acp_5(Myla)",
        "str_fol": "\u00acspeaks_local_language(Myla)",
        "negation": true
    },
    "initial_answer": "False",
    "initial_goal": "\u00acp_5(Myla)",
    "reasoning_chain": [
        {
            "facts": [
                {
                    "id": 2,
                    "subject": "Myla",
                    "text": "Myla uncovers secrets.",
                    "fol": "p_2(Myla)",
                    "str_fol": "uncover_secrets(Myla)",
                    "negation": false
                },
                {
                    "id": 3,
                    "subject": "Myla",
                    "text": "Myla is not adventurous.",
                    "fol": "\u00acp_3(Myla)",
                    "str_fol": "\u00acis_adventurous(Myla)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 6,
                    "text": "If Myla either discovers hidden gems or uncovers secrets (but not both), then she is adventurous.",
                    "fol": "(p_10(Myla) \u2295 p_2(Myla)) \u2192 p_3(Myla)",
                    "str_fol": "(discovers_hidden_gems(Myla) \u2295 uncover_secrets(Myla)) \u2192 is_adventurous(Myla)"
                }
            ],
            "conclusion": {
                "id": 4,
                "subject": "Myla",
                "text": "Myla discovers hidden gems.",
                "fol": "p_10(Myla)",
                "str_fol": "discovers_hidden_gems(Myla)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 1,
                    "subject": "Myla",
                    "text": "Myla does not tell stories.",
                    "fol": "\u00acp_1(Myla)",
                    "str_fol": "\u00actells_stories(Myla)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 5,
                    "text": "Myla is either a good journalist or tells stories.",
                    "fol": "p_4(Myla) \u2228 p_1(Myla)",
                    "str_fol": "good_journalist(Myla) \u2228 tells_stories(Myla)"
                }
            ],
            "conclusion": {
                "id": 5,
                "subject": "Myla",
                "text": "Myla is a good journalist.",
                "fol": "p_4(Myla)",
                "str_fol": "good_journalist(Myla)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 4,
                    "subject": "Myla",
                    "text": "Myla discovers hidden gems.",
                    "fol": "p_10(Myla)",
                    "str_fol": "discovers_hidden_gems(Myla)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 4,
                    "text": "For Myla, either she discovers hidden gems or meets artisans, but not necessarily both.",
                    "fol": "p_10(Myla) \u2295 p_9(Myla)",
                    "str_fol": "discovers_hidden_gems(Myla) \u2295 meets_artisans(Myla)"
                }
            ],
            "conclusion": {
                "id": 6,
                "subject": "Myla",
                "text": "Myla does not meet local artisans when she explores the city.",
                "fol": "\u00acp_9(Myla)",
                "str_fol": "\u00acmeets_artisans(Myla)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 0,
                    "subject": "Myla",
                    "text": "Myla does not write a blog.",
                    "fol": "\u00acp_0(Myla)",
                    "str_fol": "\u00acwrites_blog(Myla)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 3,
                    "text": "Either Myla explores the city or she writes a blog, but not both.",
                    "fol": "p_8(Myla) \u2295 p_0(Myla)",
                    "str_fol": "explores_city(Myla) \u2295 writes_blog(Myla)"
                }
            ],
            "conclusion": {
                "id": 7,
                "subject": "Myla",
                "text": "Myla explores the city.",
                "fol": "p_8(Myla)",
                "str_fol": "explores_city(Myla)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 7,
                    "subject": "Myla",
                    "text": "Myla explores the city.",
                    "fol": "p_8(Myla)",
                    "str_fol": "explores_city(Myla)",
                    "negation": false
                },
                {
                    "id": 6,
                    "subject": "Myla",
                    "text": "Myla does not meet local artisans when she explores the city.",
                    "fol": "\u00acp_9(Myla)",
                    "str_fol": "\u00acmeets_artisans(Myla)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 2,
                    "text": "If Myla explores the city, then she either meets local artisans or is curious (or both).",
                    "fol": "p_8(Myla) \u2192 (p_9(Myla) \u2228 p_7(Myla))",
                    "str_fol": "explores_city(Myla) \u2192 (meets_artisans(Myla) \u2228 is_curious(Myla))"
                }
            ],
            "conclusion": {
                "id": 8,
                "subject": "Myla",
                "text": "Myla is curious.",
                "fol": "p_7(Myla)",
                "str_fol": "is_curious(Myla)",
                "negation": false
            }
        },
        {
            "facts": [
                {
                    "id": 8,
                    "subject": "Myla",
                    "text": "Myla is curious.",
                    "fol": "p_7(Myla)",
                    "str_fol": "is_curious(Myla)",
                    "negation": false
                }
            ],
            "rules": [
                {
                    "id": 1,
                    "text": "Myla is either curious or has an understanding of the culture, but not necessarily both.",
                    "fol": "p_7(Myla) \u2295 p_6(Myla)",
                    "str_fol": "is_curious(Myla) \u2295 understands_culture(Myla)"
                }
            ],
            "conclusion": {
                "id": 9,
                "subject": "Myla",
                "text": "Myla does not understand the culture.",
                "fol": "\u00acp_6(Myla)",
                "str_fol": "\u00acunderstands_culture(Myla)",
                "negation": true
            }
        },
        {
            "facts": [
                {
                    "id": 5,
                    "subject": "Myla",
                    "text": "Myla is a good journalist.",
                    "fol": "p_4(Myla)",
                    "str_fol": "good_journalist(Myla)",
                    "negation": false
                },
                {
                    "id": 9,
                    "subject": "Myla",
                    "text": "Myla does not understand the culture.",
                    "fol": "\u00acp_6(Myla)",
                    "str_fol": "\u00acunderstands_culture(Myla)",
                    "negation": true
                }
            ],
            "rules": [
                {
                    "id": 0,
                    "text": "For all humans, if someone is a good journalist, then they either speak the local language or understand the culture (or both).",
                    "fol": "\u2200x (p_4(x) \u2192 (p_5(x) \u2228 p_6(x)))",
                    "str_fol": "\u2200x (good_journalist(x) \u2192 (speaks_local_language(x) \u2228 understands_culture(x)))"
                }
            ],
            "conclusion": {
                "id": 10,
                "subject": "Myla",
                "text": "Myla does not speak the local language.",
                "fol": "\u00acp_5(Myla)",
                "str_fol": "\u00acspeaks_local_language(Myla)",
                "negation": true
            }
        }
    ],
    "proof_trace": "1 -(p_10(Myla) <-> p_2(Myla)) -> p_3(Myla).  [assumption].\n2 -(p_10(Myla) <-> p_9(Myla)).  [assumption].\n3 -(p_8(Myla) <-> p_0(Myla)).  [assumption].\n4 p_8(Myla) -> p_9(Myla) | p_7(Myla).  [assumption].\n5 -(p_7(Myla) <-> p_6(Myla)).  [assumption].\n6 (all x (p_4(x) -> p_5(x) | p_6(x))).  [assumption].\n7 --p_5(Myla).  [goal].\n8 p_10(Myla) | -p_2(Myla) | p_3(Myla).  [clausify(1)].\n9 p_2(Myla).  [assumption].\n11 p_10(Myla) | p_3(Myla).  [resolve(8,b,9,a)].\n12 -p_3(Myla).  [assumption].\n13 p_4(Myla) | p_1(Myla).  [assumption].\n14 -p_1(Myla).  [assumption].\n15 p_8(Myla) | p_0(Myla).  [clausify(3)].\n16 -p_0(Myla).  [assumption].\n18 -p_10(Myla) | -p_9(Myla).  [clausify(2)].\n20 p_10(Myla).  [resolve(11,b,12,a)].\n21 p_8(Myla).  [resolve(15,b,16,a)].\n22 -p_8(Myla) | p_9(Myla) | p_7(Myla).  [clausify(4)].\n23 -p_7(Myla) | -p_6(Myla).  [clausify(5)].\n25 p_9(Myla) | p_7(Myla).  [resolve(21,a,22,a)].\n26 p_4(Myla).  [resolve(13,b,14,a)].\n27 -p_4(x) | p_5(x) | p_6(x).  [clausify(6)].\n28 p_5(Myla) | p_6(Myla).  [resolve(26,a,27,a)].\n29 -p_5(Myla).  [deny(7)].\n30 p_9(Myla) | -p_6(Myla).  [resolve(25,b,23,a)].\n31 -p_9(Myla).  [resolve(20,a,18,a)].\n32 -p_6(Myla).  [resolve(30,a,31,a)].\n33 p_6(Myla).  [resolve(28,a,29,a)].\n34 $F.  [resolve(32,a,33,a)].",
    "edits_made": [
        {
            "Edit#": 1,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_2(Myla)\n\u00acp_3(Myla)\n\u00acp_1(Myla)\n\u00acp_0(Myla)\n(p_10(Myla) \u2295 p_2(Myla)) \u2192 p_3(Myla)\np_4(Myla) \u2228 p_1(Myla)\n(p_10(Myla) \u2228 p_9(Myla)) \u2227 (\u00acp_10(Myla) \u2228 \u00acp_9(Myla))\np_8(Myla) \u2295 p_0(Myla)\np_8(Myla) \u2192 (p_9(Myla) \u2228 p_7(Myla))\np_7(Myla) \u2295 p_6(Myla)\n\u2200x (\u00acp_4(x) \u2228 p_5(x) \u2228 p_6(x))\np_5(Myla) \u2228 p_6(Myla)",
            "Initial Goal": "\u00acp_5(Myla)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_2(Myla)",
                    "-p_3(Myla)",
                    "-p_1(Myla)",
                    "-p_0(Myla)",
                    "(-(p_10(Myla) <-> p_2(Myla))) -> p_3(Myla)",
                    "p_4(Myla) | p_1(Myla)",
                    "(p_10(Myla) | p_9(Myla)) & (-p_10(Myla) | -p_9(Myla))",
                    "-(p_8(Myla) <-> p_0(Myla))",
                    "p_8(Myla) -> (p_9(Myla) | p_7(Myla))",
                    "-(p_7(Myla) <-> p_6(Myla))",
                    "all x (-p_4(x) | p_5(x) | p_6(x))",
                    "p_5(Myla) | p_6(Myla)"
                ],
                "formulas(goals)": [
                    "p_5(Myla)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_5(Myla) \u2228 p_6(Myla)"
                ],
                "added_rules": [
                    "\u2200x (\u00acp_4(x) \u2228 p_5(x) \u2228 p_6(x))",
                    "(p_10(Myla) \u2228 p_9(Myla)) \u2227 (\u00acp_10(Myla) \u2228 \u00acp_9(Myla))"
                ]
            }
        },
        {
            "Edit#": 2,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_2(Myla)\n\u00acp_3(Myla)\n\u00acp_1(Myla)\n\u00acp_0(Myla)\n(p_10(Myla) \u2295 p_2(Myla)) \u2192 p_3(Myla)\np_4(Myla) \u2228 p_1(Myla)\n(p_10(Myla) \u2228 p_9(Myla)) \u2227 (\u00acp_10(Myla) \u2228 \u00acp_9(Myla))\np_8(Myla) \u2295 p_0(Myla)\np_8(Myla) \u2192 (p_9(Myla) \u2228 p_7(Myla))\np_7(Myla) \u2295 p_6(Myla)\n\u2200x (\u00acp_4(x) \u2228 p_5(x) \u2228 p_6(x))\np_5(Myla) \u2228 p_6(Myla)\np_10(Myla)\np_8(Myla)",
            "Initial Goal": "\u00acp_5(Myla)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_2(Myla).",
                    "-p_3(Myla).",
                    "-p_1(Myla).",
                    "-p_0(Myla).",
                    "(-(p_10(Myla) <-> p_2(Myla))) -> p_3(Myla).",
                    "p_4(Myla) | p_1(Myla).",
                    "(p_10(Myla) | p_9(Myla)) & (-p_10(Myla) | -p_9(Myla)).",
                    "-(p_8(Myla) <-> p_0(Myla)).",
                    "p_8(Myla) -> (p_9(Myla) | p_7(Myla)).",
                    "-(p_7(Myla) <-> p_6(Myla)).",
                    "all x (-p_4(x) | p_5(x) | p_6(x)).",
                    "p_5(Myla) | p_6(Myla).",
                    "p_10(Myla).",
                    "p_8(Myla)."
                ],
                "formulas(goals)": [
                    "p_5(Myla)."
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_10(Myla)",
                    "p_8(Myla)"
                ],
                "added_rules": []
            }
        },
        {
            "Edit#": 3,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_2(Myla)\n\u00acp_3(Myla)\n\u00acp_1(Myla)\n\u00acp_0(Myla)\n(p_10(Myla) \u2295 p_2(Myla)) \u2192 p_3(Myla)\np_4(Myla) \u2228 p_1(Myla)\n(p_10(Myla) \u2192 \u00acp_9(Myla)) \u2227 (\u00acp_9(Myla) \u2192 p_10(Myla))\n(p_8(Myla) \u2228 p_0(Myla)) \u2227 (\u00acp_8(Myla) \u2228 \u00acp_0(Myla))\np_8(Myla) \u2192 (p_9(Myla) \u2228 p_7(Myla))\n(p_7(Myla) \u2228 p_6(Myla)) \u2227 (\u00acp_7(Myla) \u2228 \u00acp_6(Myla))\n\u2200x (\u00acp_4(x) \u2228 p_5(x) \u2228 p_6(x))\np_5(Myla) \u2228 p_6(Myla)\np_10(Myla)\np_8(Myla)\np_4(Myla)\n\u00acp_9(Myla)\np_5(Myla)\np_7(Myla)\n\u00acp_6(Myla)",
            "Initial Goal": "\u00acp_5(Myla)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_2(Myla)",
                    "-p_3(Myla)",
                    "-p_1(Myla)",
                    "-p_0(Myla)",
                    "(-(p_10(Myla) <-> p_2(Myla))) -> p_3(Myla)",
                    "p_4(Myla) | p_1(Myla)",
                    "(p_10(Myla) -> -p_9(Myla)) & (-p_9(Myla) -> p_10(Myla))",
                    "(p_8(Myla) | p_0(Myla)) & (-p_8(Myla) | -p_0(Myla))",
                    "p_8(Myla) -> (p_9(Myla) | p_7(Myla))",
                    "(p_7(Myla) | p_6(Myla)) & (-p_7(Myla) | -p_6(Myla))",
                    "all x (-p_4(x) | p_5(x) | p_6(x))",
                    "p_5(Myla) | p_6(Myla)",
                    "p_10(Myla)",
                    "p_8(Myla)",
                    "p_4(Myla)",
                    "-p_9(Myla)",
                    "p_5(Myla)",
                    "p_7(Myla)",
                    "-p_6(Myla)"
                ],
                "formulas(goals)": [
                    "--p_5(Myla)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_4(Myla)",
                    "\u00acp_9(Myla)",
                    "p_5(Myla)",
                    "p_7(Myla)",
                    "\u00acp_6(Myla)"
                ],
                "added_rules": [
                    "(p_10(Myla) \u2192 \u00acp_9(Myla)) \u2227 (\u00acp_9(Myla) \u2192 p_10(Myla))",
                    "(p_8(Myla) \u2228 p_0(Myla)) \u2227 (\u00acp_8(Myla) \u2228 \u00acp_0(Myla))",
                    "(p_7(Myla) \u2228 p_6(Myla)) \u2227 (\u00acp_7(Myla) \u2228 \u00acp_6(Myla))"
                ]
            }
        },
        {
            "Edit#": 4,
            "Modification Type": "INVARIANT",
            "Edited Assumptions": "p_2(Myla)\n\u00acp_3(Myla)\n\u00acp_1(Myla)\n\u00acp_0(Myla)\n(p_10(Myla) \u2295 p_2(Myla)) \u2192 p_3(Myla)\np_4(Myla) \u2228 p_1(Myla)\n(p_10(Myla) \u2192 \u00acp_9(Myla)) \u2227 (\u00acp_9(Myla) \u2192 p_10(Myla))\n(p_8(Myla) \u2228 p_0(Myla)) \u2227 (\u00acp_8(Myla) \u2228 \u00acp_0(Myla))\np_8(Myla) \u2192 (p_9(Myla) \u2228 p_7(Myla))\n(p_7(Myla) \u2228 p_6(Myla)) \u2227 (\u00acp_7(Myla) \u2228 \u00acp_6(Myla))\n\u2200x (\u00acp_4(x) \u2228 p_5(x) \u2228 p_6(x))\np_5(Myla) \u2228 p_6(Myla)\np_10(Myla)\np_8(Myla)\np_4(Myla)\n\u00acp_9(Myla)\np_5(Myla)\np_7(Myla)\n\u00acp_6(Myla)\np_4(Myla) \u2192 p_5(Myla)\np_8(Myla) \u2192 p_7(Myla)\np_10(Myla) \u2228 p_9(Myla)",
            "Initial Goal": "\u00acp_5(Myla)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_2(Myla)",
                    "-p_3(Myla)",
                    "-p_1(Myla)",
                    "-p_0(Myla)",
                    "(-(p_10(Myla) <-> p_2(Myla))) -> p_3(Myla)",
                    "p_4(Myla) | p_1(Myla)",
                    "(p_10(Myla) -> -p_9(Myla)) & (-p_9(Myla) -> p_10(Myla))",
                    "(p_8(Myla) | p_0(Myla)) & (-p_8(Myla) | -p_0(Myla))",
                    "p_8(Myla) -> (p_9(Myla) | p_7(Myla))",
                    "(p_7(Myla) | p_6(Myla)) & (-p_7(Myla) | -p_6(Myla))",
                    "all x (-p_4(x) | p_5(x) | p_6(x))",
                    "p_5(Myla) | p_6(Myla)",
                    "p_10(Myla)",
                    "p_8(Myla)",
                    "p_4(Myla)",
                    "-p_9(Myla)",
                    "p_5(Myla)",
                    "p_7(Myla)",
                    "-p_6(Myla)",
                    "p_4(Myla) -> p_5(Myla)",
                    "p_8(Myla) -> p_7(Myla)",
                    "p_10(Myla) | p_9(Myla)"
                ],
                "formulas(goals)": [
                    "p_5(Myla)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [],
                "added_facts": [
                    "p_10(Myla) \u2228 p_9(Myla)"
                ],
                "added_rules": [
                    "p_4(Myla) \u2192 p_5(Myla)",
                    "p_8(Myla) \u2192 p_7(Myla)"
                ]
            }
        },
        {
            "Edit#": 5,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_2(Myla)\n\u00acp_3(Myla)\n\u00acp_1(Myla)\n\u00acp_0(Myla)\n(p_10(Myla) \u2295 p_2(Myla)) \u2192 p_3(Myla)\np_4(Myla) \u2228 p_1(Myla)\n(p_10(Myla) \u2192 \u00acp_9(Myla)) \u2227 (\u00acp_9(Myla) \u2192 p_10(Myla))\n(p_8(Myla) \u2228 p_0(Myla)) \u2227 (\u00acp_8(Myla) \u2228 \u00acp_0(Myla))\np_8(Myla) \u2192 (p_9(Myla) \u2228 p_7(Myla))\n(p_7(Myla) \u2228 p_6(Myla)) \u2227 (\u00acp_7(Myla) \u2228 \u00acp_6(Myla))\np_10(Myla)\np_8(Myla)\np_4(Myla)\n\u00acp_9(Myla)\np_7(Myla)\n\u00acp_6(Myla)\np_4(Myla) \u2192 \u00acp_5(Myla)\np_8(Myla) \u2192 p_7(Myla)\np_10(Myla) \u2228 p_9(Myla)",
            "Initial Goal": "\u00acp_5(Myla)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_2(Myla)",
                    "-p_3(Myla)",
                    "-p_1(Myla)",
                    "-p_0(Myla)",
                    "(-(p_10(Myla) <-> p_2(Myla))) -> p_3(Myla)",
                    "p_4(Myla) | p_1(Myla)",
                    "(p_10(Myla) -> -p_9(Myla)) & (-p_9(Myla) -> p_10(Myla))",
                    "(p_8(Myla) | p_0(Myla)) & (-p_8(Myla) | -p_0(Myla))",
                    "p_8(Myla) -> (p_9(Myla) | p_7(Myla))",
                    "(p_7(Myla) | p_6(Myla)) & (-p_7(Myla) | -p_6(Myla))",
                    "p_10(Myla)",
                    "p_8(Myla)",
                    "p_4(Myla)",
                    "-p_9(Myla)",
                    "p_7(Myla)",
                    "-p_6(Myla)",
                    "p_4(Myla) -> -p_5(Myla)",
                    "p_8(Myla) -> p_7(Myla)",
                    "p_10(Myla) | p_9(Myla)"
                ],
                "formulas(goals)": [
                    "-p_5(Myla)"
                ]
            },
            "Edits Made": {
                "removed_facts": [
                    "p_5(Myla)"
                ],
                "removed_rules": [
                    "\u2200x (\u00acp_4(x) \u2228 p_5(x) \u2228 p_6(x))",
                    "p_5(Myla) \u2228 p_6(Myla)",
                    "p_4(Myla) \u2192 p_5(Myla)"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_4(Myla) \u2192 \u00acp_5(Myla)"
                ]
            }
        },
        {
            "Edit#": 6,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_2(Myla)\n\u00acp_3(Myla)\n\u00acp_1(Myla)\n\u00acp_0(Myla)\n(p_10(Myla) \u2295 p_2(Myla)) \u2192 p_3(Myla)\np_4(Myla) \u2228 p_1(Myla)\n(p_10(Myla) \u2192 \u00acp_9(Myla)) \u2227 (\u00acp_9(Myla) \u2192 p_10(Myla))\n(p_8(Myla) \u2228 p_0(Myla)) \u2227 (\u00acp_8(Myla) \u2228 \u00acp_0(Myla))\np_8(Myla) \u2192 (p_9(Myla) \u2228 p_7(Myla))\n(p_7(Myla) \u2228 p_6(Myla)) \u2227 (\u00acp_7(Myla) \u2228 \u00acp_6(Myla))\np_10(Myla)\np_8(Myla)\np_4(Myla)\n\u00acp_9(Myla)\np_7(Myla)\n\u00acp_6(Myla)\np_8(Myla) \u2192 p_7(Myla)\np_10(Myla) \u2228 p_9(Myla)\n(p_4(Myla) \u2227 p_10(Myla)) \u2192 p_5(Myla)",
            "Initial Goal": "\u00acp_5(Myla)",
            "Answer": "False",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_2(Myla)",
                    "-p_3(Myla)",
                    "-p_1(Myla)",
                    "-p_0(Myla)",
                    "(-(p_10(Myla) <-> p_2(Myla))) -> p_3(Myla)",
                    "p_4(Myla) | p_1(Myla)",
                    "(p_10(Myla) -> -p_9(Myla)) & (-p_9(Myla) -> p_10(Myla))",
                    "(p_8(Myla) | p_0(Myla)) & (-p_8(Myla) | -p_0(Myla))",
                    "p_8(Myla) -> (p_9(Myla) | p_7(Myla))",
                    "(p_7(Myla) | p_6(Myla)) & (-p_7(Myla) | -p_6(Myla))",
                    "p_10(Myla)",
                    "p_8(Myla)",
                    "p_4(Myla)",
                    "-p_9(Myla)",
                    "p_7(Myla)",
                    "-p_6(Myla)",
                    "p_8(Myla) -> p_7(Myla)",
                    "p_10(Myla) | p_9(Myla)",
                    "(p_4(Myla) & p_10(Myla)) -> p_5(Myla)"
                ],
                "formulas(goals)": [
                    "p_5(Myla)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "p_4(Myla) \u2192 \u00acp_5(Myla)"
                ],
                "added_facts": [],
                "added_rules": [
                    "(p_4(Myla) \u2227 p_10(Myla)) \u2192 p_5(Myla)"
                ]
            }
        },
        {
            "Edit#": 7,
            "Modification Type": "FLIP",
            "Edited Assumptions": "p_2(Myla)\n\u00acp_3(Myla)\n\u00acp_1(Myla)\n\u00acp_0(Myla)\n(p_10(Myla) \u2295 p_2(Myla)) \u2192 p_3(Myla)\np_4(Myla) \u2228 p_1(Myla)\n(p_10(Myla) \u2192 \u00acp_9(Myla)) \u2227 (\u00acp_9(Myla) \u2192 p_10(Myla))\n(p_8(Myla) \u2228 p_0(Myla)) \u2227 (\u00acp_8(Myla) \u2228 \u00acp_0(Myla))\np_8(Myla) \u2192 (p_9(Myla) \u2228 p_7(Myla))\n(p_7(Myla) \u2228 p_6(Myla)) \u2227 (\u00acp_7(Myla) \u2228 \u00acp_6(Myla))\np_10(Myla)\np_8(Myla)\np_4(Myla)\n\u00acp_9(Myla)\np_7(Myla)\n\u00acp_6(Myla)\np_8(Myla) \u2192 p_7(Myla)\np_10(Myla) \u2228 p_9(Myla)\np_4(Myla) \u2192 \u00acp_5(Myla)",
            "Initial Goal": "\u00acp_5(Myla)",
            "Answer": "True",
            "Edited Prover9 Input": {
                "formulas(assumptions)": [
                    "p_2(Myla)",
                    "-p_3(Myla)",
                    "-p_1(Myla)",
                    "-p_0(Myla)",
                    "(-(p_10(Myla) <-> p_2(Myla))) -> p_3(Myla)",
                    "p_4(Myla) | p_1(Myla)",
                    "(p_10(Myla) -> -p_9(Myla)) & (-p_9(Myla) -> p_10(Myla))",
                    "(p_8(Myla) | p_0(Myla)) & (-p_8(Myla) | -p_0(Myla))",
                    "p_8(Myla) -> (p_9(Myla) | p_7(Myla))",
                    "(p_7(Myla) | p_6(Myla)) & (-p_7(Myla) | -p_6(Myla))",
                    "p_10(Myla)",
                    "p_8(Myla)",
                    "p_4(Myla)",
                    "-p_9(Myla)",
                    "p_7(Myla)",
                    "-p_6(Myla)",
                    "p_8(Myla) -> p_7(Myla)",
                    "p_10(Myla) | p_9(Myla)",
                    "p_4(Myla) -> -p_5(Myla)"
                ],
                "formulas(goals)": [
                    "-p_5(Myla)"
                ]
            },
            "Edits Made": {
                "removed_facts": [],
                "removed_rules": [
                    "(p_4(Myla) \u2227 p_10(Myla)) \u2192 p_5(Myla)"
                ],
                "added_facts": [],
                "added_rules": [
                    "p_4(Myla) \u2192 \u00acp_5(Myla)"
                ]
            }
        }
    ]
}