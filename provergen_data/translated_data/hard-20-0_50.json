[
  {
    "facts": [
      "Novah does not entertain.",
      "Novah does not refine her style.",
      "Novah does not think deeply.",
      "Novah does not use humor.",
      "Novah cannot write clearly."
    ],
    "facts_fol": [
      "¬entertain(Novah)",
      "¬refines_style(Novah)",
      "¬think_deeply(Novah)",
      "¬use_humor(Novah)",
      "¬writes_clearly(Novah)"
    ],
    "rules": [
      "For all writers, if someone is a skilled writer, then they either craft insightful phrases or convey complex ideas (or both).",
      "Every writer is either skilled or edits text.",
      "A writer either crafts insightful phrases or writes poetry, but not necessarily both.",
      "Every writer who uses wit either creates prose or writes poetry.",
      "Novah either uses wit or tells stories.",
      "All writers who tell stories are able to entertain.",
      "Any writer who edits text or reads widely can refine their style.",
      "Every writer who creates prose either thinks deeply or uses humor (or both).",
      "Any writer who reads widely or studies grammar can write clearly."
    ],
    "rules_fol": [
      "∀x (skilled_writer(x) → (craft_insightful_phrases(x) ∨ convey_complex_ideas(x)))",
      "∀x (skilled_writer(x) ∨ edits_text(x))",
      "∀x (craft_insightful_phrases(x) ⊕ write_poetry(x))",
      "∀x (use_wit(x) → (create_prose(x) ∨ write_poetry(x)))",
      "use_wit(Novah) ∨ tell_stories(Novah)",
      "∀x (tell_stories(x) → entertain(x))",
      "∀x ((edits_text(x) ∨ reads_widely(x)) → refines_style(x))",
      "∀x (create_prose(x) → (think_deeply(x) ∨ use_humor(x)))",
      "∀x ((reads_widely(x) ∨ studies_grammar(x)) → writes_clearly(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "All observant writers are skilled writers and express emotions.",
      "If Novah is a published author, then she either crafts insightful phrases or expresses emotion, but not both.",
      "Any writer who has imagination or can express emotion can write poetry.",
      "All observant writers use wit and think critically.",
      "If Novah crafts epigrams, then she either tells stories or makes observations.",
      "Novah either writes epigrams or edits text.",
      "All writers who either pen novels or compose essays (but not both) create prose.",
      "Any writer who explores genres or analyzes literature reads widely."
    ],
    "distracting_rules_fol": [
      "∀x (observant(x) → (skilled_writer(x) ∧ express_emotions(x)))",
      "published_author(Novah) → (craft_insightful_phrases(Novah) ⊕ expresses_emotion(Novah))",
      "∀x ((has_imagination(x) ∨ express_emotion(x)) → write_poetry(x))",
      "∀x (observant(x) → (use_wit(x) ∧ think_critically(x)))",
      "craft_epigrams(Novah) → (tell_stories(Novah) ∨ make_observations(Novah))",
      "writes_epigrams(Novah) ∨ edits_text(Novah)",
      "∀x ((pen_novels(x) ⊕ compose_essays(x)) → create_prose(x))",
      "∀x ((explores_genres(x) ∨ analyzes_literature(x)) → reads_widely(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Novah cannot write clearly."
        ],
        "rules": "Any writer who reads widely or studies grammar can write clearly.",
        "conclusion": "Novah does not read widely."
      },
      {
        "facts": [
          "Novah does not think deeply.",
          "Novah does not use humor."
        ],
        "rules": "Every writer who creates prose either thinks deeply or uses humor (or both).",
        "conclusion": "Novah does not create prose."
      },
      {
        "facts": [
          "Novah does not read widely.",
          "Novah does not refine her style."
        ],
        "rules": "Any writer who edits text or reads widely can refine their style.",
        "conclusion": "Novah does not edit text."
      },
      {
        "facts": [
          "Novah does not entertain."
        ],
        "rules": "All writers who tell stories are able to entertain.",
        "conclusion": "Novah does not tell stories."
      },
      {
        "facts": [
          "Novah does not tell stories."
        ],
        "rules": "Novah either uses wit or tells stories.",
        "conclusion": "Novah uses wit."
      },
      {
        "facts": [
          "Novah uses wit.",
          "Novah does not create prose."
        ],
        "rules": "Every writer who uses wit either creates prose or writes poetry.",
        "conclusion": "Novah writes poetry."
      },
      {
        "facts": [
          "Novah writes poetry."
        ],
        "rules": "A writer either crafts insightful phrases or writes poetry, but not necessarily both.",
        "conclusion": "Novah does not craft insightful phrases."
      },
      {
        "facts": [
          "Novah does not edit text."
        ],
        "rules": "Every writer is either skilled or edits text.",
        "conclusion": "Novah is a skilled writer."
      },
      {
        "facts": [
          "Novah is a skilled writer.",
          "Novah does not craft insightful phrases."
        ],
        "rules": "For all writers, if someone is a skilled writer, then they either craft insightful phrases or convey complex ideas (or both).",
        "conclusion": "Novah conveys complex ideas."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬writes_clearly(Novah)"
        ],
        "rules": "∀x ((reads_widely(x) ∨ studies_grammar(x)) → writes_clearly(x))",
        "conclusion": "¬reads_widely(Novah)"
      },
      {
        "facts": [
          "¬think_deeply(Novah)",
          "¬use_humor(Novah)"
        ],
        "rules": "∀x (create_prose(x) → (think_deeply(x) ∨ use_humor(x)))",
        "conclusion": "¬create_prose(Novah)"
      },
      {
        "facts": [
          "¬reads_widely(Novah)",
          "¬refines_style(Novah)"
        ],
        "rules": "∀x ((edits_text(x) ∨ reads_widely(x)) → refines_style(x))",
        "conclusion": "¬edits_text(Novah)"
      },
      {
        "facts": [
          "¬entertain(Novah)"
        ],
        "rules": "∀x (tell_stories(x) → entertain(x))",
        "conclusion": "¬tell_stories(Novah)"
      },
      {
        "facts": [
          "¬tell_stories(Novah)"
        ],
        "rules": "use_wit(Novah) ∨ tell_stories(Novah)",
        "conclusion": "use_wit(Novah)"
      },
      {
        "facts": [
          "use_wit(Novah)",
          "¬create_prose(Novah)"
        ],
        "rules": "∀x (use_wit(x) → (create_prose(x) ∨ write_poetry(x)))",
        "conclusion": "write_poetry(Novah)"
      },
      {
        "facts": [
          "write_poetry(Novah)"
        ],
        "rules": "∀x (craft_insightful_phrases(x) ⊕ write_poetry(x))",
        "conclusion": "¬craft_insightful_phrases(Novah)"
      },
      {
        "facts": [
          "¬edits_text(Novah)"
        ],
        "rules": "∀x (skilled_writer(x) ∨ edits_text(x))",
        "conclusion": "skilled_writer(Novah)"
      },
      {
        "facts": [
          "skilled_writer(Novah)",
          "¬craft_insightful_phrases(Novah)"
        ],
        "rules": "∀x (skilled_writer(x) → (craft_insightful_phrases(x) ∨ convey_complex_ideas(x)))",
        "conclusion": "convey_complex_ideas(Novah)"
      }
    ],
    "conclusion": "Novah conveys complex ideas.",
    "conclusion_fol": "convey_complex_ideas(Novah)",
    "answer": "True",
    "context": [
      "Novah cannot write clearly.",
      "Any writer who reads widely or studies grammar can write clearly.",
      "Novah does not think deeply.",
      "Novah does not use humor.",
      "Every writer who creates prose either thinks deeply or uses humor (or both).",
      "Novah does not refine her style.",
      "Any writer who edits text or reads widely can refine their style.",
      "Novah does not entertain.",
      "All writers who tell stories are able to entertain.",
      "Novah either uses wit or tells stories.",
      "Every writer who uses wit either creates prose or writes poetry.",
      "A writer either crafts insightful phrases or writes poetry, but not necessarily both.",
      "Every writer is either skilled or edits text.",
      "For all writers, if someone is a skilled writer, then they either craft insightful phrases or convey complex ideas (or both)."
    ],
    "context_fol": [
      "¬writes_clearly(Novah)",
      "∀x ((reads_widely(x) ∨ studies_grammar(x)) → writes_clearly(x))",
      "¬think_deeply(Novah)",
      "¬use_humor(Novah)",
      "∀x (create_prose(x) → (think_deeply(x) ∨ use_humor(x)))",
      "¬refines_style(Novah)",
      "∀x ((edits_text(x) ∨ reads_widely(x)) → refines_style(x))",
      "¬entertain(Novah)",
      "∀x (tell_stories(x) → entertain(x))",
      "use_wit(Novah) ∨ tell_stories(Novah)",
      "∀x (use_wit(x) → (create_prose(x) ∨ write_poetry(x)))",
      "∀x (craft_insightful_phrases(x) ⊕ write_poetry(x))",
      "∀x (skilled_writer(x) ∨ edits_text(x))",
      "∀x (skilled_writer(x) → (craft_insightful_phrases(x) ∨ convey_complex_ideas(x)))"
    ],
    "background_story": "Novah was a brilliant wordsmith known for crafting epigrams that cut to the heart of human nature. With a wit as sharp as a razor, she could distill complex ideas into a single, piercing sentence. Her writings were laced with humor, irony, and insight, making her a favorite among literary circles. One of her most famous epigrams, 'Silence is not the absence of sound, but the presence of thought,' was often quoted by philosophers and poets alike. Novah's ability to capture the essence of life in a few, well-chosen words made her a master of the epigram, and her works continue to inspire and provoke readers to this day.",
    "name": "Novah",
    "keyword": "epigram",
    "subject_category": "writer"
  },
  {
    "facts": [
      "Adley is not trusted.",
      "Adley does not keep secrets.",
      "Adley keeps her promises."
    ],
    "facts_fol": [
      "¬is_trusted(Adley)",
      "¬keep_secrets(Adley)",
      "keeps_promises(Adley)"
    ],
    "rules": [
      "For all humans, if someone is a good listener, then they either keep secrets or offer sage advice (or both).",
      "Adley is either empathetic or a good listener, but not necessarily both.",
      "Adley is either empathetic or wise, but not necessarily both, which makes her a unique and valuable friend to those around her.",
      "Adley is either wise or supportive, but not necessarily both, which makes her a unique and valuable friend to those around her.",
      "If someone is supportive and reliable, then they are trusted.",
      "Anyone who keeps their promises is reliable."
    ],
    "rules_fol": [
      "∀x (good_listener(x) → (keep_secrets(x) ∨ offer_sage_advice(x)))",
      "is_empathetic(Adley) ⊕ good_listener(Adley)",
      "is_empathetic(Adley) ⊕ has_wisdom(Adley)",
      "has_wisdom(Adley) ⊕ is_supportive(Adley)",
      "∀x ((is_supportive(x) ∧ is_reliable(x)) → is_trusted(x))",
      "∀x (keeps_promises(x) → is_reliable(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Anyone who asks open questions or shows empathy is a good listener.",
      "If someone cares deeply and understands others, then they are empathetic.",
      "For all humans, if they see deeper and think carefully, then they have wisdom.",
      "If Adley either lends help or gives guidance (but not both), then she is supportive.",
      "If Adley is dependable, then she is either honest or reliable, but not both."
    ],
    "distracting_rules_fol": [
      "∀x ((asks_open_questions(x) ∨ shows_empathy(x)) → good_listener(x))",
      "∀x ((cares_deeply(x) ∧ understands_others(x)) → is_empathetic(x))",
      "∀x ((sees_deeper(x) ∧ thinks_carefully(x)) → has_wisdom(x))",
      "(lends_help(Adley) ⊕ gives_guidance(Adley)) → is_supportive(Adley)",
      "is_dependable(Adley) → (is_honest(Adley) ⊕ is_reliable(Adley))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Adley keeps her promises."
        ],
        "rules": "Anyone who keeps their promises is reliable.",
        "conclusion": "Adley is reliable."
      },
      {
        "facts": [
          "Adley is reliable.",
          "Adley is not trusted."
        ],
        "rules": "If someone is supportive and reliable, then they are trusted.",
        "conclusion": "Adley is not supportive."
      },
      {
        "facts": [
          "Adley is not supportive."
        ],
        "rules": "Adley is either wise or supportive, but not necessarily both, which makes her a unique and valuable friend to those around her.",
        "conclusion": "Adley has wisdom."
      },
      {
        "facts": [
          "Adley has wisdom."
        ],
        "rules": "Adley is either empathetic or wise, but not necessarily both, which makes her a unique and valuable friend to those around her.",
        "conclusion": "Adley is not empathetic."
      },
      {
        "facts": [
          "Adley is not empathetic."
        ],
        "rules": "Adley is either empathetic or a good listener, but not necessarily both.",
        "conclusion": "Adley is a good listener."
      },
      {
        "facts": [
          "Adley is a good listener.",
          "Adley does not keep secrets."
        ],
        "rules": "For all humans, if someone is a good listener, then they either keep secrets or offer sage advice (or both).",
        "conclusion": "Adley offers sage advice."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "keeps_promises(Adley)"
        ],
        "rules": "∀x (keeps_promises(x) → is_reliable(x))",
        "conclusion": "is_reliable(Adley)"
      },
      {
        "facts": [
          "is_reliable(Adley)",
          "¬is_trusted(Adley)"
        ],
        "rules": "∀x ((is_supportive(x) ∧ is_reliable(x)) → is_trusted(x))",
        "conclusion": "¬is_supportive(Adley)"
      },
      {
        "facts": [
          "¬is_supportive(Adley)"
        ],
        "rules": "has_wisdom(Adley) ⊕ is_supportive(Adley)",
        "conclusion": "has_wisdom(Adley)"
      },
      {
        "facts": [
          "has_wisdom(Adley)"
        ],
        "rules": "is_empathetic(Adley) ⊕ has_wisdom(Adley)",
        "conclusion": "¬is_empathetic(Adley)"
      },
      {
        "facts": [
          "¬is_empathetic(Adley)"
        ],
        "rules": "is_empathetic(Adley) ⊕ good_listener(Adley)",
        "conclusion": "good_listener(Adley)"
      },
      {
        "facts": [
          "good_listener(Adley)",
          "¬keep_secrets(Adley)"
        ],
        "rules": "∀x (good_listener(x) → (keep_secrets(x) ∨ offer_sage_advice(x)))",
        "conclusion": "offer_sage_advice(Adley)"
      }
    ],
    "conclusion": "Adley offers sage advice.",
    "conclusion_fol": "offer_sage_advice(Adley)",
    "answer": "True",
    "context": [
      "Adley keeps her promises.",
      "Anyone who keeps their promises is reliable.",
      "Adley is not trusted.",
      "If someone is supportive and reliable, then they are trusted.",
      "Adley is either wise or supportive, but not necessarily both, which makes her a unique and valuable friend to those around her.",
      "Adley is either empathetic or wise, but not necessarily both, which makes her a unique and valuable friend to those around her.",
      "Adley is either empathetic or a good listener, but not necessarily both.",
      "Adley does not keep secrets.",
      "For all humans, if someone is a good listener, then they either keep secrets or offer sage advice (or both)."
    ],
    "context_fol": [
      "keeps_promises(Adley)",
      "∀x (keeps_promises(x) → is_reliable(x))",
      "¬is_trusted(Adley)",
      "∀x ((is_supportive(x) ∧ is_reliable(x)) → is_trusted(x))",
      "has_wisdom(Adley) ⊕ is_supportive(Adley)",
      "is_empathetic(Adley) ⊕ has_wisdom(Adley)",
      "is_empathetic(Adley) ⊕ good_listener(Adley)",
      "¬keep_secrets(Adley)",
      "∀x (good_listener(x) → (keep_secrets(x) ∨ offer_sage_advice(x)))"
    ],
    "background_story": "Adley was the kind of friend everyone wished they had. With a compassionate ear and a non-judgmental attitude, she had a way of making people feel heard and understood. As a result, she became the confidant to many in her social circle, including her coworkers and acquaintances. People would often seek her out to share their deepest secrets, fears, and dreams, knowing that Adley would keep their trust and offer sage advice when needed. Her ability to listen actively and empathize with others made her a beloved figure in the community. Adley's friends appreciated her discretion and valued her opinion, often crediting her with helping them navigate life's challenges with clarity and confidence.",
    "name": "Adley",
    "keyword": "confidant",
    "subject_category": "human"
  },
  {
    "facts": [
      "Tucker is not social.",
      "Tucker does not stay healthy.",
      "Tucker is nurturing.",
      "Tucker builds a home.",
      "Tucker roams openly.",
      "Tucker eats naturally.",
      "Tucker does not live near water.",
      "Tucker has a good sense of smell."
    ],
    "facts_fol": [
      "¬is_social(Tucker)",
      "¬stays_healthy(Tucker)",
      "is_nurturing(Tucker)",
      "builds_home(Tucker)",
      "roams_openly(Tucker)",
      "eats_naturally(Tucker)",
      "¬lives_near_water(Tucker)",
      "has_good_sense(Tucker)"
    ],
    "rules": [
      "If Tucker lives in a group and has a family, then he feels content.",
      "Every animal has a family or lives in the wild.",
      "If Tucker is either social or lives in the wild (but not both), then he thrives naturally.",
      "If Tucker lives freely or thrives naturally, then he stays healthy.",
      "If Tucker is nurturing, then he cares for his young and lives in a group.",
      "All animals that care for their young find food and build homes.",
      "If Tucker roams openly, then he either eats naturally or lives freely, but not both.",
      "Any animal that lives near water or has a good sense of smell can find food."
    ],
    "rules_fol": [
      "(lives_in_group(Tucker) ∧ has_family(Tucker)) → feels_content(Tucker)",
      "∀x (has_family(x) ∨ lives_wild(x))",
      "(is_social(Tucker) ⊕ lives_wild(Tucker)) → thrives_naturally(Tucker)",
      "(lives_freely(Tucker) ∨ thrives_naturally(Tucker)) → stays_healthy(Tucker)",
      "is_nurturing(Tucker) → (cares_young(Tucker) ∧ lives_in_group(Tucker))",
      "∀x (cares_young(x) → (finds_food(x) ∧ builds_home(x)))",
      "roams_openly(Tucker) → (eats_naturally(Tucker) ⊕ lives_freely(Tucker))",
      "∀x ((lives_near_water(x) ∨ has_good_sense(x)) → finds_food(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Tucker either forms bonds or has a family.",
      "If Tucker either swims daily or grazes on plants (but not both), then he lives in the wild.",
      "If Tucker is adaptable, then he is either domesticated or thrives naturally (but not both).",
      "All capybaras that have a mate and live in a group.",
      "Every animal that is a parent either cares for its young or protects its territory.",
      "If Tucker is a wild animal, then he is either domestic or lives freely, but not both.",
      "If an animal either eats plants or catches fish (but not both), then it finds food."
    ],
    "distracting_rules_fol": [
      "forms_bonds(Tucker) ∨ has_family(Tucker)",
      "(swims_daily(Tucker) ⊕ grazes_plants(Tucker)) → lives_wild(Tucker)",
      "is_adaptable(Tucker) → (is_domesticated(Tucker) ⊕ thrives_naturally(Tucker))",
      "∀x (is_capybara(x) → (has_mate(x) ∧ lives_in_group(x)))",
      "∀x (is_parent(x) → (cares_young(x) ∨ protects_territory(x)))",
      "is_wild(Tucker) → (is_domestic(Tucker) ⊕ lives_freely(Tucker))",
      "∀x ((eats_plants(x) ⊕ catches_fish(x)) → finds_food(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Tucker does not live near water.",
          "Tucker has a good sense of smell."
        ],
        "rules": "Any animal that lives near water or has a good sense of smell can find food.",
        "conclusion": "Tucker finds food."
      },
      {
        "facts": [
          "Tucker roams openly.",
          "Tucker eats naturally."
        ],
        "rules": "If Tucker roams openly, then he either eats naturally or lives freely, but not both.",
        "conclusion": "Tucker does not live freely."
      },
      {
        "facts": [
          "Tucker finds food.",
          "Tucker builds a home."
        ],
        "rules": "All animals that care for their young find food and build homes.",
        "conclusion": null
      },
      {
        "facts": [
          "Tucker is nurturing."
        ],
        "rules": "If Tucker is nurturing, then he cares for his young and lives in a group.",
        "conclusion": "Tucker lives in a group."
      },
      {
        "facts": [
          "Tucker does not live freely.",
          "Tucker does not stay healthy."
        ],
        "rules": "If Tucker lives freely or thrives naturally, then he stays healthy.",
        "conclusion": "Tucker does not thrive naturally."
      },
      {
        "facts": [
          "Tucker is not social.",
          "Tucker does not thrive naturally."
        ],
        "rules": "If Tucker is either social or lives in the wild (but not both), then he thrives naturally.",
        "conclusion": "Tucker does not live in the wild."
      },
      {
        "facts": [
          "Tucker does not live in the wild."
        ],
        "rules": "Every animal has a family or lives in the wild.",
        "conclusion": "Tucker has a family."
      },
      {
        "facts": [
          "Tucker lives in a group.",
          "Tucker has a family."
        ],
        "rules": "If Tucker lives in a group and has a family, then he feels content.",
        "conclusion": "Tucker feels content."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬lives_near_water(Tucker)",
          "has_good_sense(Tucker)"
        ],
        "rules": "∀x ((lives_near_water(x) ∨ has_good_sense(x)) → finds_food(x))",
        "conclusion": "finds_food(Tucker)"
      },
      {
        "facts": [
          "roams_openly(Tucker)",
          "eats_naturally(Tucker)"
        ],
        "rules": "roams_openly(Tucker) → (eats_naturally(Tucker) ⊕ lives_freely(Tucker))",
        "conclusion": "¬lives_freely(Tucker)"
      },
      {
        "facts": [
          "finds_food(Tucker)",
          "builds_home(Tucker)"
        ],
        "rules": "∀x (cares_young(x) → (finds_food(x) ∧ builds_home(x)))",
        "conclusion": null
      },
      {
        "facts": [
          "is_nurturing(Tucker)"
        ],
        "rules": "is_nurturing(Tucker) → (cares_young(Tucker) ∧ lives_in_group(Tucker))",
        "conclusion": "lives_in_group(Tucker)"
      },
      {
        "facts": [
          "¬lives_freely(Tucker)",
          "¬stays_healthy(Tucker)"
        ],
        "rules": "(lives_freely(Tucker) ∨ thrives_naturally(Tucker)) → stays_healthy(Tucker)",
        "conclusion": "¬thrives_naturally(Tucker)"
      },
      {
        "facts": [
          "¬is_social(Tucker)",
          "¬thrives_naturally(Tucker)"
        ],
        "rules": "(is_social(Tucker) ⊕ lives_wild(Tucker)) → thrives_naturally(Tucker)",
        "conclusion": "¬lives_wild(Tucker)"
      },
      {
        "facts": [
          "¬lives_wild(Tucker)"
        ],
        "rules": "∀x (has_family(x) ∨ lives_wild(x))",
        "conclusion": "has_family(Tucker)"
      },
      {
        "facts": [
          "lives_in_group(Tucker)",
          "has_family(Tucker)"
        ],
        "rules": "(lives_in_group(Tucker) ∧ has_family(Tucker)) → feels_content(Tucker)",
        "conclusion": "feels_content(Tucker)"
      }
    ],
    "conclusion": "Tucker feels content.",
    "conclusion_fol": "feels_content(Tucker)",
    "answer": "True",
    "context": [
      "Tucker does not live near water.",
      "Tucker has a good sense of smell.",
      "Any animal that lives near water or has a good sense of smell can find food.",
      "Tucker roams openly.",
      "Tucker eats naturally.",
      "If Tucker roams openly, then he either eats naturally or lives freely, but not both.",
      "Tucker builds a home.",
      "All animals that care for their young find food and build homes.",
      "Tucker is nurturing.",
      "If Tucker is nurturing, then he cares for his young and lives in a group.",
      "Tucker does not stay healthy.",
      "If Tucker lives freely or thrives naturally, then he stays healthy.",
      "Tucker is not social.",
      "If Tucker is either social or lives in the wild (but not both), then he thrives naturally.",
      "Every animal has a family or lives in the wild.",
      "If Tucker lives in a group and has a family, then he feels content."
    ],
    "context_fol": [
      "¬lives_near_water(Tucker)",
      "has_good_sense(Tucker)",
      "∀x ((lives_near_water(x) ∨ has_good_sense(x)) → finds_food(x))",
      "roams_openly(Tucker)",
      "eats_naturally(Tucker)",
      "roams_openly(Tucker) → (eats_naturally(Tucker) ⊕ lives_freely(Tucker))",
      "builds_home(Tucker)",
      "∀x (cares_young(x) → (finds_food(x) ∧ builds_home(x)))",
      "is_nurturing(Tucker)",
      "is_nurturing(Tucker) → (cares_young(Tucker) ∧ lives_in_group(Tucker))",
      "¬stays_healthy(Tucker)",
      "(lives_freely(Tucker) ∨ thrives_naturally(Tucker)) → stays_healthy(Tucker)",
      "¬is_social(Tucker)",
      "(is_social(Tucker) ⊕ lives_wild(Tucker)) → thrives_naturally(Tucker)",
      "∀x (has_family(x) ∨ lives_wild(x))",
      "(lives_in_group(Tucker) ∧ has_family(Tucker)) → feels_content(Tucker)"
    ],
    "background_story": "Tucker was a capybara, the world's largest rodent, living in the lush wetlands of South America. In the local language, his species was often referred to as 'aperea'. Tucker loved nothing more than to spend his days swimming in the cool waters and grazing on the lush aquatic plants. He was a social creature and lived with a large group of capybaras, working together to build complex burrows and protect their territory. Tucker was particularly close to his mate, Lola, and together they had a litter of adorable pups. As the sun set over the wetlands, Tucker would sit on the riverbank, watching the stars twinkle to life, feeling grateful for his peaceful life surrounded by nature and loved ones.",
    "name": "Tucker",
    "keyword": "aperea",
    "subject_category": "animal"
  },
  {
    "facts": [
      "Giana performs well.",
      "Giana is not famous.",
      "Giana does not collaborate with other artists.",
      "Giana connects with her audience.",
      "Giana wins awards."
    ],
    "facts_fol": [
      "performs_well(Giana)",
      "¬is_famous(Giana)",
      "¬collabs_artists(Giana)",
      "connects_audience(Giana)",
      "wins_awards(Giana)"
    ],
    "rules": [
      "Every musician is talented or dedicated (or both).",
      "If a musician writes songs and performs well, then they are talented.",
      "If Giana is creative, then she inspires others and writes songs.",
      "If Giana is either creative or composes music (but not both), then she expresses emotion.",
      "Every musician who performs live either produces albums or composes music.",
      "If Giana produces albums, then she is famous.",
      "A musician either collaborates with other artists or performs live, but not necessarily both.",
      "If Giana expresses emotion and connects with her audience, then she can sell records.",
      "A musician either sells records or wins awards, but not necessarily both."
    ],
    "rules_fol": [
      "∀x (talented(x) ∨ dedicated(x))",
      "∀x ((writes_songs(x) ∧ performs_well(x)) → talented(x))",
      "creative(Giana) → (inspires_others(Giana) ∧ writes_songs(Giana))",
      "(creative(Giana) ⊕ composes_music(Giana)) → expresses_emotion(Giana)",
      "∀x (performs_live(x) → (produces_albums(x) ∨ composes_music(x)))",
      "produces_albums(Giana) → is_famous(Giana)",
      "∀x (collabs_artists(x) ⊕ performs_live(x))",
      "(expresses_emotion(Giana) ∧ connects_audience(Giana)) → sells_records(Giana)",
      "∀x (sells_records(x) ⊕ wins_awards(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Giana has passion and works hard, then she is talented.",
      "If Giana has passion, then she either writes songs or makes hits.",
      "If Giana succeeds in the industry, then she is either creative or makes hits, but not both.",
      "Every musician either plays an instrument or composes music.",
      "If Giana records tracks and releases singles, then she produces albums.",
      "If Giana either plays guitar or sings soulfully (but not both), then she performs live.",
      "Every musician who has passion either expresses emotion or makes hits.",
      "Any musician with a hit song will sell records."
    ],
    "distracting_rules_fol": [
      "(has_passion(Giana) ∧ works_hard(Giana)) → talented(Giana)",
      "has_passion(Giana) → (writes_songs(Giana) ∨ makes_hits(Giana))",
      "succeeds_industry(Giana) → (creative(Giana) ⊕ makes_hits(Giana))",
      "∀x (plays_instrument(x) ∨ composes_music(x))",
      "(records_tracks(Giana) ∧ releases_singles(Giana)) → produces_albums(Giana)",
      "(plays_guitar(Giana) ⊕ sings_soulfully(Giana)) → performs_live(Giana)",
      "∀x (has_passion(x) → (expresses_emotion(x) ∨ makes_hits(x)))",
      "∀x (has_hit(x) → sells_records(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Giana wins awards."
        ],
        "rules": "A musician either sells records or wins awards, but not necessarily both.",
        "conclusion": "Giana does not sell records."
      },
      {
        "facts": [
          "Giana connects with her audience.",
          "Giana does not sell records."
        ],
        "rules": "If Giana expresses emotion and connects with her audience, then she can sell records.",
        "conclusion": "Giana does not express emotion."
      },
      {
        "facts": [
          "Giana does not collaborate with other artists."
        ],
        "rules": "A musician either collaborates with other artists or performs live, but not necessarily both.",
        "conclusion": "Giana performs live."
      },
      {
        "facts": [
          "Giana is not famous."
        ],
        "rules": "If Giana produces albums, then she is famous.",
        "conclusion": "Giana does not produce albums."
      },
      {
        "facts": [
          "Giana performs live.",
          "Giana does not produce albums."
        ],
        "rules": "Every musician who performs live either produces albums or composes music.",
        "conclusion": "Giana composes music."
      },
      {
        "facts": [
          "Giana composes music.",
          "Giana does not express emotion."
        ],
        "rules": "If Giana is either creative or composes music (but not both), then she expresses emotion.",
        "conclusion": "Giana is creative."
      },
      {
        "facts": [
          "Giana is creative."
        ],
        "rules": "If Giana is creative, then she inspires others and writes songs.",
        "conclusion": "Giana writes songs."
      },
      {
        "facts": [
          "Giana writes songs.",
          "Giana performs well."
        ],
        "rules": "If a musician writes songs and performs well, then they are talented.",
        "conclusion": "Giana is talented."
      },
      {
        "facts": [
          "Giana is talented."
        ],
        "rules": "Every musician is talented or dedicated (or both).",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "wins_awards(Giana)"
        ],
        "rules": "∀x (sells_records(x) ⊕ wins_awards(x))",
        "conclusion": "¬sells_records(Giana)"
      },
      {
        "facts": [
          "connects_audience(Giana)",
          "¬sells_records(Giana)"
        ],
        "rules": "(expresses_emotion(Giana) ∧ connects_audience(Giana)) → sells_records(Giana)",
        "conclusion": "¬expresses_emotion(Giana)"
      },
      {
        "facts": [
          "¬collabs_artists(Giana)"
        ],
        "rules": "∀x (collabs_artists(x) ⊕ performs_live(x))",
        "conclusion": "performs_live(Giana)"
      },
      {
        "facts": [
          "¬is_famous(Giana)"
        ],
        "rules": "produces_albums(Giana) → is_famous(Giana)",
        "conclusion": "¬produces_albums(Giana)"
      },
      {
        "facts": [
          "performs_live(Giana)",
          "¬produces_albums(Giana)"
        ],
        "rules": "∀x (performs_live(x) → (produces_albums(x) ∨ composes_music(x)))",
        "conclusion": "composes_music(Giana)"
      },
      {
        "facts": [
          "composes_music(Giana)",
          "¬expresses_emotion(Giana)"
        ],
        "rules": "(creative(Giana) ⊕ composes_music(Giana)) → expresses_emotion(Giana)",
        "conclusion": "creative(Giana)"
      },
      {
        "facts": [
          "creative(Giana)"
        ],
        "rules": "creative(Giana) → (inspires_others(Giana) ∧ writes_songs(Giana))",
        "conclusion": "writes_songs(Giana)"
      },
      {
        "facts": [
          "writes_songs(Giana)",
          "performs_well(Giana)"
        ],
        "rules": "∀x ((writes_songs(x) ∧ performs_well(x)) → talented(x))",
        "conclusion": "talented(Giana)"
      },
      {
        "facts": [
          "talented(Giana)"
        ],
        "rules": "∀x (talented(x) ∨ dedicated(x))",
        "conclusion": null
      }
    ],
    "conclusion": "Giana is dedicated.",
    "conclusion_fol": "dedicated(Giana)",
    "answer": "Uncertain",
    "context": [
      "Giana wins awards.",
      "A musician either sells records or wins awards, but not necessarily both.",
      "Giana connects with her audience.",
      "If Giana expresses emotion and connects with her audience, then she can sell records.",
      "Giana does not collaborate with other artists.",
      "A musician either collaborates with other artists or performs live, but not necessarily both.",
      "Giana is not famous.",
      "If Giana produces albums, then she is famous.",
      "Every musician who performs live either produces albums or composes music.",
      "If Giana is either creative or composes music (but not both), then she expresses emotion.",
      "If Giana is creative, then she inspires others and writes songs.",
      "Giana performs well.",
      "If a musician writes songs and performs well, then they are talented.",
      "Every musician is talented or dedicated (or both)."
    ],
    "context_fol": [
      "wins_awards(Giana)",
      "∀x (sells_records(x) ⊕ wins_awards(x))",
      "connects_audience(Giana)",
      "(expresses_emotion(Giana) ∧ connects_audience(Giana)) → sells_records(Giana)",
      "¬collabs_artists(Giana)",
      "∀x (collabs_artists(x) ⊕ performs_live(x))",
      "¬is_famous(Giana)",
      "produces_albums(Giana) → is_famous(Giana)",
      "∀x (performs_live(x) → (produces_albums(x) ∨ composes_music(x)))",
      "(creative(Giana) ⊕ composes_music(Giana)) → expresses_emotion(Giana)",
      "creative(Giana) → (inspires_others(Giana) ∧ writes_songs(Giana))",
      "performs_well(Giana)",
      "∀x ((writes_songs(x) ∧ performs_well(x)) → talented(x))",
      "∀x (talented(x) ∨ dedicated(x))"
    ],
    "background_story": "Giana was a charismatic singer-songwriter who rose to fame with her powerful voice and captivating stage presence. After years of performing at local venues and festivals, she finally got her big break when a prominent record label discovered her. Soon, Giana found herself headlining concerts at iconic venues around the world, including Madison Square Garden and Wembley Stadium. Her unique blend of pop, rock, and electronic music resonated with audiences of all ages, making her a sought-after headliner for music festivals like Coachella and Lollapalooza. With her name in lights and her voice echoing through the crowds, Giana lived her dream, inspiring countless fans with her talent, passion, and dedication to her craft.",
    "name": "Giana",
    "keyword": "headliner",
    "subject_category": "musician"
  },
  {
    "facts": [
      "Mikaela does not breed rare species.",
      "Mikaela does not maintain tanks.",
      "Mikaela does not monitor water quality.",
      "Mikaela does not study fish.",
      "Mikaela knows about aquatics.",
      "Mikaela protects marine life.",
      "Mikaela does not raise tetra.",
      "Mikaela keeps guppies."
    ],
    "facts_fol": [
      "¬breed_rare_species(Mikaela)",
      "¬maintain_tanks(Mikaela)",
      "¬monitor_water_quality(Mikaela)",
      "¬study_fish(Mikaela)",
      "know_aquatics(Mikaela)",
      "protect_marine(Mikaela)",
      "¬raises_tetra(Mikaela)",
      "keeps_guppies(Mikaela)"
    ],
    "rules": [
      "If Mikaela is experienced, then she can either breed rare species or advance aquarium knowledge, but not both.",
      "If Mikaela is specialized, then she can either handle delicate fish or is experienced, but not both.",
      "If Mikaela either maintains tanks or handles delicate fish (but not both), then she is able to care for aquatic life.",
      "If someone either cares for aquatic life or monitors water quality, then they understand ecosystems.",
      "If Mikaela understands ecosystems, then she studies fish and saves habitats.",
      "Every aquarist who knows about aquatics either saves habitats or protects marine life.",
      "If Mikaela either raises tetra or keeps guppies (but not both), then she is specialized."
    ],
    "rules_fol": [
      "experienced(Mikaela) → (breed_rare_species(Mikaela) ⊕ advance_aquarium_knowledge(Mikaela))",
      "specialized(Mikaela) → (handle_delicate_fish(Mikaela) ⊕ experienced(Mikaela))",
      "(maintain_tanks(Mikaela) ⊕ handle_delicate_fish(Mikaela)) → care_aquatic(Mikaela)",
      "∀x ((care_aquatic(x) ⊕ monitor_water_quality(x)) → understand_ecosystems(x))",
      "understand_ecosystems(Mikaela) → (study_fish(Mikaela) ∧ save_habitats(Mikaela))",
      "∀x (know_aquatics(x) → (save_habitats(x) ∨ protect_marine(x)))",
      "(raises_tetra(Mikaela) ⊕ keeps_guppies(Mikaela)) → specialized(Mikaela)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Mikaela raises exotic fish, then she is experienced.",
      "If Mikaela loves fish, then she can handle delicate fish.",
      "If an aquarist either feeds schools of fish or manages ponds (but not both), then they are able to care for aquatic life.",
      "Any aquarist who manages habitats understands ecosystems.",
      "If Mikaela loves aquatics, then she either saves habitats or creates sanctuaries.",
      "If Mikaela is an expert aquarist, then she is either specialized or trains others, but not both."
    ],
    "distracting_rules_fol": [
      "raises_exotics(Mikaela) → experienced(Mikaela)",
      "loves_fish(Mikaela) → handle_delicate_fish(Mikaela)",
      "∀x ((feeds_schools(x) ⊕ manages_ponds(x)) → care_aquatic(x))",
      "∀x (manages_habitats(x) → understand_ecosystems(x))",
      "love_aquatics(Mikaela) → (save_habitats(Mikaela) ∨ create_sanctuaries(Mikaela))",
      "expert_aquarist(Mikaela) → (specialized(Mikaela) ⊕ train_others(Mikaela))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Mikaela does not raise tetra.",
          "Mikaela keeps guppies."
        ],
        "rules": "If Mikaela either raises tetra or keeps guppies (but not both), then she is specialized.",
        "conclusion": "Mikaela is specialized."
      },
      {
        "facts": [
          "Mikaela knows about aquatics.",
          "Mikaela protects marine life."
        ],
        "rules": "Every aquarist who knows about aquatics either saves habitats or protects marine life.",
        "conclusion": null
      },
      {
        "facts": [
          "Mikaela does not study fish."
        ],
        "rules": "If Mikaela understands ecosystems, then she studies fish and saves habitats.",
        "conclusion": "Mikaela does not understand ecosystems."
      },
      {
        "facts": [
          "Mikaela does not monitor water quality.",
          "Mikaela does not understand ecosystems."
        ],
        "rules": "If someone either cares for aquatic life or monitors water quality, then they understand ecosystems.",
        "conclusion": "Mikaela is not able to care for aquatic life."
      },
      {
        "facts": [
          "Mikaela does not maintain tanks.",
          "Mikaela is not able to care for aquatic life."
        ],
        "rules": "If Mikaela either maintains tanks or handles delicate fish (but not both), then she is able to care for aquatic life.",
        "conclusion": "Mikaela cannot handle delicate fish."
      },
      {
        "facts": [
          "Mikaela is specialized.",
          "Mikaela cannot handle delicate fish."
        ],
        "rules": "If Mikaela is specialized, then she can either handle delicate fish or is experienced, but not both.",
        "conclusion": "Mikaela is experienced."
      },
      {
        "facts": [
          "Mikaela is experienced.",
          "Mikaela does not breed rare species."
        ],
        "rules": "If Mikaela is experienced, then she can either breed rare species or advance aquarium knowledge, but not both.",
        "conclusion": "Mikaela advances aquarium knowledge."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬raises_tetra(Mikaela)",
          "keeps_guppies(Mikaela)"
        ],
        "rules": "(raises_tetra(Mikaela) ⊕ keeps_guppies(Mikaela)) → specialized(Mikaela)",
        "conclusion": "specialized(Mikaela)"
      },
      {
        "facts": [
          "know_aquatics(Mikaela)",
          "protect_marine(Mikaela)"
        ],
        "rules": "∀x (know_aquatics(x) → (save_habitats(x) ∨ protect_marine(x)))",
        "conclusion": null
      },
      {
        "facts": [
          "¬study_fish(Mikaela)"
        ],
        "rules": "understand_ecosystems(Mikaela) → (study_fish(Mikaela) ∧ save_habitats(Mikaela))",
        "conclusion": "¬understand_ecosystems(Mikaela)"
      },
      {
        "facts": [
          "¬monitor_water_quality(Mikaela)",
          "¬understand_ecosystems(Mikaela)"
        ],
        "rules": "∀x ((care_aquatic(x) ⊕ monitor_water_quality(x)) → understand_ecosystems(x))",
        "conclusion": "¬care_aquatic(Mikaela)"
      },
      {
        "facts": [
          "¬maintain_tanks(Mikaela)",
          "¬care_aquatic(Mikaela)"
        ],
        "rules": "(maintain_tanks(Mikaela) ⊕ handle_delicate_fish(Mikaela)) → care_aquatic(Mikaela)",
        "conclusion": "¬handle_delicate_fish(Mikaela)"
      },
      {
        "facts": [
          "specialized(Mikaela)",
          "¬handle_delicate_fish(Mikaela)"
        ],
        "rules": "specialized(Mikaela) → (handle_delicate_fish(Mikaela) ⊕ experienced(Mikaela))",
        "conclusion": "experienced(Mikaela)"
      },
      {
        "facts": [
          "experienced(Mikaela)",
          "¬breed_rare_species(Mikaela)"
        ],
        "rules": "experienced(Mikaela) → (breed_rare_species(Mikaela) ⊕ advance_aquarium_knowledge(Mikaela))",
        "conclusion": "advance_aquarium_knowledge(Mikaela)"
      }
    ],
    "conclusion": "Mikaela advances aquarium knowledge.",
    "conclusion_fol": "advance_aquarium_knowledge(Mikaela)",
    "answer": "True",
    "context": [
      "Mikaela does not raise tetra.",
      "Mikaela keeps guppies.",
      "If Mikaela either raises tetra or keeps guppies (but not both), then she is specialized.",
      "Mikaela knows about aquatics.",
      "Mikaela protects marine life.",
      "Every aquarist who knows about aquatics either saves habitats or protects marine life.",
      "Mikaela does not study fish.",
      "If Mikaela understands ecosystems, then she studies fish and saves habitats.",
      "Mikaela does not monitor water quality.",
      "If someone either cares for aquatic life or monitors water quality, then they understand ecosystems.",
      "Mikaela does not maintain tanks.",
      "If Mikaela either maintains tanks or handles delicate fish (but not both), then she is able to care for aquatic life.",
      "If Mikaela is specialized, then she can either handle delicate fish or is experienced, but not both.",
      "Mikaela does not breed rare species.",
      "If Mikaela is experienced, then she can either breed rare species or advance aquarium knowledge, but not both."
    ],
    "context_fol": [
      "¬raises_tetra(Mikaela)",
      "keeps_guppies(Mikaela)",
      "(raises_tetra(Mikaela) ⊕ keeps_guppies(Mikaela)) → specialized(Mikaela)",
      "know_aquatics(Mikaela)",
      "protect_marine(Mikaela)",
      "∀x (know_aquatics(x) → (save_habitats(x) ∨ protect_marine(x)))",
      "¬study_fish(Mikaela)",
      "understand_ecosystems(Mikaela) → (study_fish(Mikaela) ∧ save_habitats(Mikaela))",
      "¬monitor_water_quality(Mikaela)",
      "∀x ((care_aquatic(x) ⊕ monitor_water_quality(x)) → understand_ecosystems(x))",
      "¬maintain_tanks(Mikaela)",
      "(maintain_tanks(Mikaela) ⊕ handle_delicate_fish(Mikaela)) → care_aquatic(Mikaela)",
      "specialized(Mikaela) → (handle_delicate_fish(Mikaela) ⊕ experienced(Mikaela))",
      "¬breed_rare_species(Mikaela)",
      "experienced(Mikaela) → (breed_rare_species(Mikaela) ⊕ advance_aquarium_knowledge(Mikaela))"
    ],
    "background_story": "Mikaela was a passionate aquarist with a fascination for exotic fish. Among her favorites were the Paracheirodon, a genus of small freshwater fish native to South America. She spent years studying and breeding these fish, particularly the neon tetra, a species within the Paracheirodon genus. Mikaela's dedication to understanding the intricate social behaviors and habitat requirements of these fish led to breakthroughs in their care and breeding in captivity. Her aquarium, filled with schools of Paracheirodon, became a marvel, showcasing the iridescent blues and reds of these tiny creatures. Mikaela's work not only advanced the field of aquarium-keeping but also highlighted the importance of preserving the natural habitats of these and other aquatic species.",
    "name": "Mikaela",
    "keyword": "paracheirodon",
    "subject_category": "aquarist"
  },
  {
    "facts": [
      "Julia raises awareness about the conflict.",
      "Julia tells stories.",
      "Julia does not explore cultures.",
      "Julia takes risks.",
      "Julia pursues her passion.",
      "Julia does not drive change.",
      "Julia is not influential."
    ],
    "facts_fol": [
      "raise_awareness(Julia)",
      "tell_stories(Julia)",
      "¬explore_cultures(Julia)",
      "takes_risks(Julia)",
      "pursue_passion(Julia)",
      "¬drives_change(Julia)",
      "¬is_influential(Julia)"
    ],
    "rules": [
      "Julia either captures beauty through her photography or documents war, but she does not do both simultaneously.",
      "If Julia travels abroad, then she tells stories and captures beauty.",
      "Anyone who works in a conflict zone will face dangers.",
      "If Julia has courage and works in a conflict zone, then she will gain recognition.",
      "For all people, gaining recognition and pursuing their passion are mutually exclusive, meaning that one does not necessarily lead to the other.",
      "Julia either travels abroad or explores cultures.",
      "If Julia either takes risks or has courage (but not both), then she will make an impact.",
      "If Julia either makes an impact or drives change (but not both), then she is influential."
    ],
    "rules_fol": [
      "capture_beauty(Julia) ⊕ document_war(Julia)",
      "travel_abroad(Julia) → (tell_stories(Julia) ∧ capture_beauty(Julia))",
      "∀x (work_in_conflict(x) → face_dangers(x))",
      "(has_courage(Julia) ∧ work_in_conflict(Julia)) → gain_recognition(Julia)",
      "∀x (gain_recognition(x) ⊕ pursue_passion(x))",
      "travel_abroad(Julia) ∨ explore_cultures(Julia)",
      "(takes_risks(Julia) ⊕ has_courage(Julia)) → makes_impact(Julia)",
      "(makes_impact(Julia) ⊕ drives_change(Julia)) → is_influential(Julia)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If someone uses a camera and seeks truth, then they can document war.",
      "Anyone who uses good light or frames shots well can capture beauty through photography.",
      "If Julia exposes the truth, then she will face dangers.",
      "Any person who reports from the frontline or covers rebellions works in a conflict zone.",
      "If Julia either exposes truth or highlights injustice (but not both), then she gains recognition.",
      "If Julia seeks knowledge, then she meets people and travels abroad.",
      "If Julia either speaks the truth or fights against injustice (but not both), then she has courage.",
      "Julia either seeks truth or makes an impact."
    ],
    "distracting_rules_fol": [
      "∀x ((uses_camera(x) ∧ seeks_truth(x)) → document_war(x))",
      "∀x ((use_good_light(x) ∨ frame_shots(x)) → capture_beauty(x))",
      "expose_truth(Julia) → face_dangers(Julia)",
      "∀x ((report_from_frontline(x) ∨ cover_rebellions(x)) → work_in_conflict(x))",
      "(expose_truth(Julia) ⊕ highlight_injustice(Julia)) → gain_recognition(Julia)",
      "seek_knowledge(Julia) → (meet_people(Julia) ∧ travel_abroad(Julia))",
      "(speaks_truth(Julia) ⊕ fights_injustice(Julia)) → has_courage(Julia)",
      "seeks_truth(Julia) ∨ makes_impact(Julia)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Julia does not drive change.",
          "Julia is not influential."
        ],
        "rules": "If Julia either makes an impact or drives change (but not both), then she is influential.",
        "conclusion": "Julia does not make an impact."
      },
      {
        "facts": [
          "Julia takes risks.",
          "Julia does not make an impact."
        ],
        "rules": "If Julia either takes risks or has courage (but not both), then she will make an impact.",
        "conclusion": "Julia has courage."
      },
      {
        "facts": [
          "Julia does not explore cultures."
        ],
        "rules": "Julia either travels abroad or explores cultures.",
        "conclusion": "Julia travels abroad."
      },
      {
        "facts": [
          "Julia pursues her passion."
        ],
        "rules": "For all people, gaining recognition and pursuing their passion are mutually exclusive, meaning that one does not necessarily lead to the other.",
        "conclusion": "Julia does not gain recognition."
      },
      {
        "facts": [
          "Julia has courage.",
          "Julia does not gain recognition."
        ],
        "rules": "If Julia has courage and works in a conflict zone, then she will gain recognition.",
        "conclusion": "Julia does not work in a conflict zone."
      },
      {
        "facts": [
          "Julia does not work in a conflict zone."
        ],
        "rules": "Anyone who works in a conflict zone will face dangers.",
        "conclusion": null
      },
      {
        "facts": [
          "Julia travels abroad.",
          "Julia tells stories."
        ],
        "rules": "If Julia travels abroad, then she tells stories and captures beauty.",
        "conclusion": "Julia captures beauty through her photography."
      },
      {
        "facts": [
          "Julia captures beauty through her photography."
        ],
        "rules": "Julia either captures beauty through her photography or documents war, but she does not do both simultaneously.",
        "conclusion": "Julia does not document war."
      },
      {
        "facts": [
          "Julia does not document war.",
          "Julia raises awareness about the conflict."
        ],
        "rules": null,
        "conclusion": "If Julia documents war, then she will face dangers and raise awareness about the conflict."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬drives_change(Julia)",
          "¬is_influential(Julia)"
        ],
        "rules": "(makes_impact(Julia) ⊕ drives_change(Julia)) → is_influential(Julia)",
        "conclusion": "¬makes_impact(Julia)"
      },
      {
        "facts": [
          "takes_risks(Julia)",
          "¬makes_impact(Julia)"
        ],
        "rules": "(takes_risks(Julia) ⊕ has_courage(Julia)) → makes_impact(Julia)",
        "conclusion": "has_courage(Julia)"
      },
      {
        "facts": [
          "¬explore_cultures(Julia)"
        ],
        "rules": "travel_abroad(Julia) ∨ explore_cultures(Julia)",
        "conclusion": "travel_abroad(Julia)"
      },
      {
        "facts": [
          "pursue_passion(Julia)"
        ],
        "rules": "∀x (gain_recognition(x) ⊕ pursue_passion(x))",
        "conclusion": "¬gain_recognition(Julia)"
      },
      {
        "facts": [
          "has_courage(Julia)",
          "¬gain_recognition(Julia)"
        ],
        "rules": "(has_courage(Julia) ∧ work_in_conflict(Julia)) → gain_recognition(Julia)",
        "conclusion": "¬work_in_conflict(Julia)"
      },
      {
        "facts": [
          "¬work_in_conflict(Julia)"
        ],
        "rules": "∀x (work_in_conflict(x) → face_dangers(x))",
        "conclusion": null
      },
      {
        "facts": [
          "travel_abroad(Julia)",
          "tell_stories(Julia)"
        ],
        "rules": "travel_abroad(Julia) → (tell_stories(Julia) ∧ capture_beauty(Julia))",
        "conclusion": "capture_beauty(Julia)"
      },
      {
        "facts": [
          "capture_beauty(Julia)"
        ],
        "rules": "capture_beauty(Julia) ⊕ document_war(Julia)",
        "conclusion": "¬document_war(Julia)"
      },
      {
        "facts": [
          "¬document_war(Julia)",
          "raise_awareness(Julia)"
        ],
        "rules": null,
        "conclusion": "document_war(Julia) → (face_dangers(Julia) ∧ raise_awareness(Julia))"
      }
    ],
    "conclusion": "If Julia documents war, then she will face dangers and raise awareness about the conflict.",
    "conclusion_fol": "document_war(Julia) → (face_dangers(Julia) ∧ raise_awareness(Julia))",
    "answer": "True",
    "context": [
      "Julia does not drive change.",
      "Julia is not influential.",
      "If Julia either makes an impact or drives change (but not both), then she is influential.",
      "Julia takes risks.",
      "If Julia either takes risks or has courage (but not both), then she will make an impact.",
      "Julia does not explore cultures.",
      "Julia either travels abroad or explores cultures.",
      "Julia pursues her passion.",
      "For all people, gaining recognition and pursuing their passion are mutually exclusive, meaning that one does not necessarily lead to the other.",
      "If Julia has courage and works in a conflict zone, then she will gain recognition.",
      "Anyone who works in a conflict zone will face dangers.",
      "Julia tells stories.",
      "If Julia travels abroad, then she tells stories and captures beauty.",
      "Julia either captures beauty through her photography or documents war, but she does not do both simultaneously.",
      "Julia raises awareness about the conflict."
    ],
    "context_fol": [
      "¬drives_change(Julia)",
      "¬is_influential(Julia)",
      "(makes_impact(Julia) ⊕ drives_change(Julia)) → is_influential(Julia)",
      "takes_risks(Julia)",
      "(takes_risks(Julia) ⊕ has_courage(Julia)) → makes_impact(Julia)",
      "¬explore_cultures(Julia)",
      "travel_abroad(Julia) ∨ explore_cultures(Julia)",
      "pursue_passion(Julia)",
      "∀x (gain_recognition(x) ⊕ pursue_passion(x))",
      "(has_courage(Julia) ∧ work_in_conflict(Julia)) → gain_recognition(Julia)",
      "∀x (work_in_conflict(x) → face_dangers(x))",
      "tell_stories(Julia)",
      "travel_abroad(Julia) → (tell_stories(Julia) ∧ capture_beauty(Julia))",
      "capture_beauty(Julia) ⊕ document_war(Julia)",
      "raise_awareness(Julia)"
    ],
    "background_story": "Julia, a skilled photographer, traveled to Nicaragua to document the lives of the people affected by the Contras, a rebel group opposed to the Sandinista government. As she captured the stark realities of war, Julia found herself drawn to the resilience and determination of the Nicaraguan people. Despite the dangers, she continued to take powerful photos, highlighting the contradictions between the beauty of the land and the brutality of the conflict. Her photographs humanized the victims and exposed the harsh conditions, sparking international outcry and support for the Nicaraguan people. Julia's work became a testament to the power of journalism in revealing the complexities and contrasts of war, earning her numerous awards and recognition for her courage and dedication.",
    "name": "Julia",
    "keyword": "contras",
    "subject_category": "human"
  },
  {
    "facts": [
      "Emmie can replace engines.",
      "Emmie does not excel in repair.",
      "Emmie knows electronics.",
      "Emmie has the necessary tools.",
      "Emmie does not work efficiently.",
      "Emmie runs a workshop.",
      "Emmie cannot diagnose issues.",
      "Emmie repairs cars.",
      "Emmie does not earn a reputation."
    ],
    "facts_fol": [
      "replace_engines(Emmie)",
      "¬excels_in_repair(Emmie)",
      "knows_electrics(Emmie)",
      "has_tools(Emmie)",
      "¬works_efficiently(Emmie)",
      "runs_workshop(Emmie)",
      "¬diagnoses_issues(Emmie)",
      "repairs_cars(Emmie)",
      "¬earns_reputation(Emmie)"
    ],
    "rules": [
      "If a mechanic owns a garage and is skilled, then they can solve problems.",
      "If Emmie either solves problems or troubleshoots issues (but not both), then she is resourceful.",
      "If a mechanic knows electronics and has equipment, then they can fix alternators.",
      "If Emmie is either resourceful or works efficiently (but not both), then she excels in repair.",
      "All mechanics who either own a garage or run a workshop are able to diagnose issues.",
      "If a mechanic troubleshoots issues and repairs cars, then they earn a reputation."
    ],
    "rules_fol": [
      "∀x ((owns_garage(x) ∧ skilled(x)) → solves_problems(x))",
      "(solves_problems(Emmie) ⊕ troubleshoots_issues(Emmie)) → is_resourceful(Emmie)",
      "∀x ((knows_electrics(x) ∧ has_tools(x)) → fix_alternators(x))",
      "(is_resourceful(Emmie) ⊕ works_efficiently(Emmie)) → excels_in_repair(Emmie)",
      "∀x ((owns_garage(x) ⊕ runs_workshop(x)) → diagnoses_issues(x))",
      "∀x ((troubleshoots_issues(x) ∧ repairs_cars(x)) → earns_reputation(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Emmie either tunes transmissions or overhauls brakes (but not both), then she is skilled.",
      "If a mechanic has experience and is meticulous, then they can solve problems.",
      "If Emmie works precisely, then she either maintains vehicles or fixes alternators (or both).",
      "All mechanics who fix cars and help customers are resourceful.",
      "If Emmie has a shop, then she owns a garage.",
      "All mechanics who like challenges have expertise and troubleshoot issues."
    ],
    "distracting_rules_fol": [
      "(tunes_transmissions(Emmie) ⊕ overhauls_brakes(Emmie)) → skilled(Emmie)",
      "∀x ((has_experience(x) ∧ is_meticulous(x)) → solves_problems(x))",
      "work_precisely(Emmie) → (maintain_vehicles(Emmie) ∨ fix_alternators(Emmie))",
      "∀x (fixes_cars(x) → (helps_customers(x) ∧ is_resourceful(x)))",
      "has_shop(Emmie) → owns_garage(Emmie)",
      "∀x (likes_challenges(x) → (has_expertise(x) ∧ troubleshoots_issues(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Emmie repairs cars.",
          "Emmie does not earn a reputation."
        ],
        "rules": "If a mechanic troubleshoots issues and repairs cars, then they earn a reputation.",
        "conclusion": "Emmie does not troubleshoot issues."
      },
      {
        "facts": [
          "Emmie runs a workshop.",
          "Emmie cannot diagnose issues."
        ],
        "rules": "All mechanics who either own a garage or run a workshop are able to diagnose issues.",
        "conclusion": "Emmie owns a garage."
      },
      {
        "facts": [
          "Emmie does not work efficiently.",
          "Emmie does not excel in repair."
        ],
        "rules": "If Emmie is either resourceful or works efficiently (but not both), then she excels in repair.",
        "conclusion": "Emmie is not resourceful."
      },
      {
        "facts": [
          "Emmie knows electronics.",
          "Emmie has the necessary tools."
        ],
        "rules": "If a mechanic knows electronics and has equipment, then they can fix alternators.",
        "conclusion": "Emmie can fix alternators."
      },
      {
        "facts": [
          "Emmie does not troubleshoot issues.",
          "Emmie is not resourceful."
        ],
        "rules": "If Emmie either solves problems or troubleshoots issues (but not both), then she is resourceful.",
        "conclusion": "Emmie cannot solve problems."
      },
      {
        "facts": [
          "Emmie owns a garage.",
          "Emmie cannot solve problems."
        ],
        "rules": "If a mechanic owns a garage and is skilled, then they can solve problems.",
        "conclusion": "Emmie is not skilled."
      },
      {
        "facts": [
          "Emmie can fix alternators.",
          "Emmie can replace engines.",
          "Emmie is not skilled."
        ],
        "rules": null,
        "conclusion": "If Emmie can either fix alternators or replace engines (but not both), then she is skilled."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "repairs_cars(Emmie)",
          "¬earns_reputation(Emmie)"
        ],
        "rules": "∀x ((troubleshoots_issues(x) ∧ repairs_cars(x)) → earns_reputation(x))",
        "conclusion": "¬troubleshoots_issues(Emmie)"
      },
      {
        "facts": [
          "runs_workshop(Emmie)",
          "¬diagnoses_issues(Emmie)"
        ],
        "rules": "∀x ((owns_garage(x) ⊕ runs_workshop(x)) → diagnoses_issues(x))",
        "conclusion": "owns_garage(Emmie)"
      },
      {
        "facts": [
          "¬works_efficiently(Emmie)",
          "¬excels_in_repair(Emmie)"
        ],
        "rules": "(is_resourceful(Emmie) ⊕ works_efficiently(Emmie)) → excels_in_repair(Emmie)",
        "conclusion": "¬is_resourceful(Emmie)"
      },
      {
        "facts": [
          "knows_electrics(Emmie)",
          "has_tools(Emmie)"
        ],
        "rules": "∀x ((knows_electrics(x) ∧ has_tools(x)) → fix_alternators(x))",
        "conclusion": "fix_alternators(Emmie)"
      },
      {
        "facts": [
          "¬troubleshoots_issues(Emmie)",
          "¬is_resourceful(Emmie)"
        ],
        "rules": "(solves_problems(Emmie) ⊕ troubleshoots_issues(Emmie)) → is_resourceful(Emmie)",
        "conclusion": "¬solves_problems(Emmie)"
      },
      {
        "facts": [
          "owns_garage(Emmie)",
          "¬solves_problems(Emmie)"
        ],
        "rules": "∀x ((owns_garage(x) ∧ skilled(x)) → solves_problems(x))",
        "conclusion": "¬skilled(Emmie)"
      },
      {
        "facts": [
          "fix_alternators(Emmie)",
          "replace_engines(Emmie)",
          "¬skilled(Emmie)"
        ],
        "rules": null,
        "conclusion": "(fix_alternators(Emmie) ⊕ replace_engines(Emmie)) → skilled(Emmie)"
      }
    ],
    "conclusion": "If Emmie can either fix alternators or replace engines (but not both), then she is skilled.",
    "conclusion_fol": "(fix_alternators(Emmie) ⊕ replace_engines(Emmie)) → skilled(Emmie)",
    "answer": "True",
    "context": [
      "Emmie repairs cars.",
      "Emmie does not earn a reputation.",
      "If a mechanic troubleshoots issues and repairs cars, then they earn a reputation.",
      "Emmie runs a workshop.",
      "Emmie cannot diagnose issues.",
      "All mechanics who either own a garage or run a workshop are able to diagnose issues.",
      "Emmie does not work efficiently.",
      "Emmie does not excel in repair.",
      "If Emmie is either resourceful or works efficiently (but not both), then she excels in repair.",
      "Emmie knows electronics.",
      "Emmie has the necessary tools.",
      "If a mechanic knows electronics and has equipment, then they can fix alternators.",
      "If Emmie either solves problems or troubleshoots issues (but not both), then she is resourceful.",
      "If a mechanic owns a garage and is skilled, then they can solve problems.",
      "Emmie can replace engines."
    ],
    "context_fol": [
      "repairs_cars(Emmie)",
      "¬earns_reputation(Emmie)",
      "∀x ((troubleshoots_issues(x) ∧ repairs_cars(x)) → earns_reputation(x))",
      "runs_workshop(Emmie)",
      "¬diagnoses_issues(Emmie)",
      "∀x ((owns_garage(x) ⊕ runs_workshop(x)) → diagnoses_issues(x))",
      "¬works_efficiently(Emmie)",
      "¬excels_in_repair(Emmie)",
      "(is_resourceful(Emmie) ⊕ works_efficiently(Emmie)) → excels_in_repair(Emmie)",
      "knows_electrics(Emmie)",
      "has_tools(Emmie)",
      "∀x ((knows_electrics(x) ∧ has_tools(x)) → fix_alternators(x))",
      "(solves_problems(Emmie) ⊕ troubleshoots_issues(Emmie)) → is_resourceful(Emmie)",
      "∀x ((owns_garage(x) ∧ skilled(x)) → solves_problems(x))",
      "replace_engines(Emmie)"
    ],
    "background_story": "Emmie was a brilliant and resourceful mechanic with a passion for fixing cars. She owned a small garage where she spent most of her days tinkering with engines and solving complex problems. One day, a customer brought in a vintage Mustang with a faulty alternator. Emmie took on the challenge, diagnosing the issue and replacing the alternator with a rebuilt unit. Her attention to detail and expertise ensured that the car's electrical system was restored to perfect working order. The customer was thrilled, and word of Emmie's exceptional skills spread quickly. Soon, her garage became the go-to destination for classic car enthusiasts and owners of vehicles with tricky electrical issues. Emmie's ability to repair and replace alternators, among other components, earned her a reputation as one of the most skilled mechanics in town.",
    "name": "Emmie",
    "keyword": "alternator",
    "subject_category": "mechanic"
  },
  {
    "facts": [
      "Joel is not dedicated to research.",
      "Joel is an expert.",
      "Joel does not gain recognition.",
      "Joel does not take risks.",
      "Joel is a mentor.",
      "Joel is curious.",
      "Joel is a driven person."
    ],
    "facts_fol": [
      "¬dedicated_to_research(Joel)",
      "is_expert(Joel)",
      "¬gains_recognition(Joel)",
      "¬takes_risks(Joel)",
      "is_mentor(Joel)",
      "curious(Joel)",
      "driven_person(Joel)"
    ],
    "rules": [
      "For Joel, either he faces skepticism or he makes significant discoveries, but not both.",
      "If Joel is an innovator, then he either faces skepticism or gains recognition, but not both.",
      "If Joel is a pioneer, then he either takes risks or is an innovator, but not both.",
      "If Joel is an expert, then he is either a pioneer or a leader, but not both.",
      "If Joel has vision, then he is either a mentor or a leader, but not both.",
      "If Joel is curious, then he has vision and is a driven person."
    ],
    "rules_fol": [
      "faces_skepticism(Joel) ⊕ makes_significant_discoveries(Joel)",
      "is_innovator(Joel) → (faces_skepticism(Joel) ⊕ gains_recognition(Joel))",
      "is_pioneer(Joel) → (takes_risks(Joel) ⊕ is_innovator(Joel))",
      "is_expert(Joel) → (is_pioneer(Joel) ⊕ is_leader(Joel))",
      "has_vision(Joel) → (is_mentor(Joel) ⊕ is_leader(Joel))",
      "curious(Joel) → (has_vision(Joel) ∧ driven_person(Joel))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Joel explores nature, then he either contributes to science or makes significant discoveries (or both).",
      "Anyone who pursues unconventional ideas either faces skepticism or challenges conventional wisdom.",
      "If Joel is a specialist, then he is either an innovator or an entrepreneur, but not both.",
      "If Joel thinks critically or explores nature, then he can be a pioneer.",
      "If Joel has knowledge, then he is either influential or a leader, but not both.",
      "If Joel either thinks critically or solves problems (but not both), then he has vision."
    ],
    "distracting_rules_fol": [
      "explores_nature(Joel) → (contributes_to_science(Joel) ∨ makes_significant_discoveries(Joel))",
      "∀x (pursues_unconventional_ideas(x) → (faces_skepticism(x) ∨ challenges_conventional_wisdom(x)))",
      "is_specialist(Joel) → (is_innovator(Joel) ⊕ is_entrepreneur(Joel))",
      "(thinks_critically(Joel) ∨ explores_nature(Joel)) → is_pioneer(Joel)",
      "has_knowledge(Joel) → (is_influential(Joel) ⊕ is_leader(Joel))",
      "(thinks_critically(Joel) ⊕ solves_problems(Joel)) → has_vision(Joel)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Joel is curious.",
          "Joel is a driven person."
        ],
        "rules": "If Joel is curious, then he has vision and is a driven person.",
        "conclusion": "Joel has vision."
      },
      {
        "facts": [
          "Joel has vision.",
          "Joel is a mentor."
        ],
        "rules": "If Joel has vision, then he is either a mentor or a leader, but not both.",
        "conclusion": "Joel is not a leader."
      },
      {
        "facts": [
          "Joel is an expert.",
          "Joel is not a leader."
        ],
        "rules": "If Joel is an expert, then he is either a pioneer or a leader, but not both.",
        "conclusion": "Joel is a pioneer."
      },
      {
        "facts": [
          "Joel is a pioneer.",
          "Joel does not take risks."
        ],
        "rules": "If Joel is a pioneer, then he either takes risks or is an innovator, but not both.",
        "conclusion": "Joel is an innovator."
      },
      {
        "facts": [
          "Joel is an innovator.",
          "Joel does not gain recognition."
        ],
        "rules": "If Joel is an innovator, then he either faces skepticism or gains recognition, but not both.",
        "conclusion": "Joel faces skepticism."
      },
      {
        "facts": [
          "Joel faces skepticism."
        ],
        "rules": "For Joel, either he faces skepticism or he makes significant discoveries, but not both.",
        "conclusion": "Joel does not make significant discoveries."
      },
      {
        "facts": [
          "Joel is not dedicated to research.",
          "Joel does not make significant discoveries."
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "curious(Joel)",
          "driven_person(Joel)"
        ],
        "rules": "curious(Joel) → (has_vision(Joel) ∧ driven_person(Joel))",
        "conclusion": "has_vision(Joel)"
      },
      {
        "facts": [
          "has_vision(Joel)",
          "is_mentor(Joel)"
        ],
        "rules": "has_vision(Joel) → (is_mentor(Joel) ⊕ is_leader(Joel))",
        "conclusion": "¬is_leader(Joel)"
      },
      {
        "facts": [
          "is_expert(Joel)",
          "¬is_leader(Joel)"
        ],
        "rules": "is_expert(Joel) → (is_pioneer(Joel) ⊕ is_leader(Joel))",
        "conclusion": "is_pioneer(Joel)"
      },
      {
        "facts": [
          "is_pioneer(Joel)",
          "¬takes_risks(Joel)"
        ],
        "rules": "is_pioneer(Joel) → (takes_risks(Joel) ⊕ is_innovator(Joel))",
        "conclusion": "is_innovator(Joel)"
      },
      {
        "facts": [
          "is_innovator(Joel)",
          "¬gains_recognition(Joel)"
        ],
        "rules": "is_innovator(Joel) → (faces_skepticism(Joel) ⊕ gains_recognition(Joel))",
        "conclusion": "faces_skepticism(Joel)"
      },
      {
        "facts": [
          "faces_skepticism(Joel)"
        ],
        "rules": "faces_skepticism(Joel) ⊕ makes_significant_discoveries(Joel)",
        "conclusion": "¬makes_significant_discoveries(Joel)"
      },
      {
        "facts": [
          "¬dedicated_to_research(Joel)",
          "¬makes_significant_discoveries(Joel)"
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "conclusion": "If Joel is dedicated to research or passionate about mycology (or both), then he makes significant discoveries.",
    "conclusion_fol": "(dedicated_to_research(Joel) ∨ passionate_about_mycology(Joel)) → makes_significant_discoveries(Joel)",
    "answer": "Uncertain",
    "context": [
      "Joel is curious.",
      "Joel is a driven person.",
      "If Joel is curious, then he has vision and is a driven person.",
      "Joel is a mentor.",
      "If Joel has vision, then he is either a mentor or a leader, but not both.",
      "Joel is an expert.",
      "If Joel is an expert, then he is either a pioneer or a leader, but not both.",
      "Joel does not take risks.",
      "If Joel is a pioneer, then he either takes risks or is an innovator, but not both.",
      "Joel does not gain recognition.",
      "If Joel is an innovator, then he either faces skepticism or gains recognition, but not both.",
      "For Joel, either he faces skepticism or he makes significant discoveries, but not both.",
      "Joel is not dedicated to research."
    ],
    "context_fol": [
      "curious(Joel)",
      "driven_person(Joel)",
      "curious(Joel) → (has_vision(Joel) ∧ driven_person(Joel))",
      "is_mentor(Joel)",
      "has_vision(Joel) → (is_mentor(Joel) ⊕ is_leader(Joel))",
      "is_expert(Joel)",
      "is_expert(Joel) → (is_pioneer(Joel) ⊕ is_leader(Joel))",
      "¬takes_risks(Joel)",
      "is_pioneer(Joel) → (takes_risks(Joel) ⊕ is_innovator(Joel))",
      "¬gains_recognition(Joel)",
      "is_innovator(Joel) → (faces_skepticism(Joel) ⊕ gains_recognition(Joel))",
      "faces_skepticism(Joel) ⊕ makes_significant_discoveries(Joel)",
      "¬dedicated_to_research(Joel)"
    ],
    "background_story": "Joel was a renowned mycologist, spending most of his career studying the unique properties of various fungi. His obsession, however, was with the Fistulina hepatica, a rare beefsteak fungus. Joel spent years researching its potential medicinal applications, convinced that it held the key to breakthroughs in modern medicine. His dedication was unyielding, often leading him to remote forests in search of specimens. Despite facing numerous setbacks and skepticism from his peers, Joel remained committed to his research. His work eventually led to the discovery of novel compounds with significant health benefits, earning him international recognition and respect. Joel's story is a testament to the power of persistence and the importance of exploring the natural world for solutions to human challenges.",
    "name": "Joel",
    "keyword": "fistulina",
    "subject_category": "human"
  },
  {
    "facts": [
      "Dewdrop is not gentle.",
      "Dewdrop is not curious.",
      "Dewdrop is agile.",
      "Dewdrop does not like to have fun."
    ],
    "facts_fol": [
      "¬gentle(Dewdrop)",
      "¬curious(Dewdrop)",
      "agile(Dewdrop)",
      "¬likes_fun(Dewdrop)"
    ],
    "rules": [
      "If Dewdrop is playful, then she is either affectionate or mischievous, but not both.",
      "Dewdrop is either gentle or affectionate.",
      "All playful animals are curious and energetic.",
      "If Dewdrop is adventurous, then she is both a fast mover and energetic.",
      "All fast-moving animals are agile.",
      "Dewdrop is either adventurous or likes to have fun."
    ],
    "rules_fol": [
      "playful(Dewdrop) → (affectionate(Dewdrop) ⊕ mischievous(Dewdrop))",
      "gentle(Dewdrop) ∨ affectionate(Dewdrop)",
      "∀x (playful(x) → (curious(x) ∧ energetic(x)))",
      "adventurous(Dewdrop) → (fast_mover(Dewdrop) ∧ energetic(Dewdrop))",
      "∀x (fast_mover(x) → agile(x))",
      "adventurous(Dewdrop) ∨ likes_fun(Dewdrop)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Dewdrop has fur, then she is either loud or affectionate, but not both.",
      "Any animal that chases toys or pounces fast is playful.",
      "All young animals are energetic and active.",
      "All animals that run quickly are fast movers.",
      "Dewdrop either likes toys or is adventurous."
    ],
    "distracting_rules_fol": [
      "has_fur(Dewdrop) → (is_loud(Dewdrop) ⊕ affectionate(Dewdrop))",
      "∀x ((chases_toys(x) ∨ pounces_fast(x)) → playful(x))",
      "∀x (young(x) → (energetic(x) ∧ active(x)))",
      "∀x (runs_quick(x) → fast_mover(x))",
      "likes_toys(Dewdrop) ∨ adventurous(Dewdrop)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Dewdrop does not like to have fun."
        ],
        "rules": "Dewdrop is either adventurous or likes to have fun.",
        "conclusion": "Dewdrop is adventurous."
      },
      {
        "facts": [
          "Dewdrop is agile."
        ],
        "rules": "All fast-moving animals are agile.",
        "conclusion": null
      },
      {
        "facts": [
          "Dewdrop is adventurous."
        ],
        "rules": "If Dewdrop is adventurous, then she is both a fast mover and energetic.",
        "conclusion": "Dewdrop is energetic."
      },
      {
        "facts": [
          "Dewdrop is not curious.",
          "Dewdrop is energetic."
        ],
        "rules": "All playful animals are curious and energetic.",
        "conclusion": "Dewdrop is not playful."
      },
      {
        "facts": [
          "Dewdrop is not gentle."
        ],
        "rules": "Dewdrop is either gentle or affectionate.",
        "conclusion": "Dewdrop is affectionate."
      },
      {
        "facts": [
          "Dewdrop is not playful.",
          "Dewdrop is affectionate."
        ],
        "rules": "If Dewdrop is playful, then she is either affectionate or mischievous, but not both.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬likes_fun(Dewdrop)"
        ],
        "rules": "adventurous(Dewdrop) ∨ likes_fun(Dewdrop)",
        "conclusion": "adventurous(Dewdrop)"
      },
      {
        "facts": [
          "agile(Dewdrop)"
        ],
        "rules": "∀x (fast_mover(x) → agile(x))",
        "conclusion": null
      },
      {
        "facts": [
          "adventurous(Dewdrop)"
        ],
        "rules": "adventurous(Dewdrop) → (fast_mover(Dewdrop) ∧ energetic(Dewdrop))",
        "conclusion": "energetic(Dewdrop)"
      },
      {
        "facts": [
          "¬curious(Dewdrop)",
          "energetic(Dewdrop)"
        ],
        "rules": "∀x (playful(x) → (curious(x) ∧ energetic(x)))",
        "conclusion": "¬playful(Dewdrop)"
      },
      {
        "facts": [
          "¬gentle(Dewdrop)"
        ],
        "rules": "gentle(Dewdrop) ∨ affectionate(Dewdrop)",
        "conclusion": "affectionate(Dewdrop)"
      },
      {
        "facts": [
          "¬playful(Dewdrop)",
          "affectionate(Dewdrop)"
        ],
        "rules": "playful(Dewdrop) → (affectionate(Dewdrop) ⊕ mischievous(Dewdrop))",
        "conclusion": null
      }
    ],
    "conclusion": "Dewdrop is mischievous.",
    "conclusion_fol": "mischievous(Dewdrop)",
    "answer": "Uncertain",
    "context": [
      "Dewdrop does not like to have fun.",
      "Dewdrop is either adventurous or likes to have fun.",
      "Dewdrop is agile.",
      "All fast-moving animals are agile.",
      "If Dewdrop is adventurous, then she is both a fast mover and energetic.",
      "Dewdrop is not curious.",
      "All playful animals are curious and energetic.",
      "Dewdrop is not gentle.",
      "Dewdrop is either gentle or affectionate.",
      "If Dewdrop is playful, then she is either affectionate or mischievous, but not both."
    ],
    "context_fol": [
      "¬likes_fun(Dewdrop)",
      "adventurous(Dewdrop) ∨ likes_fun(Dewdrop)",
      "agile(Dewdrop)",
      "∀x (fast_mover(x) → agile(x))",
      "adventurous(Dewdrop) → (fast_mover(Dewdrop) ∧ energetic(Dewdrop))",
      "¬curious(Dewdrop)",
      "∀x (playful(x) → (curious(x) ∧ energetic(x)))",
      "¬gentle(Dewdrop)",
      "gentle(Dewdrop) ∨ affectionate(Dewdrop)",
      "playful(Dewdrop) → (affectionate(Dewdrop) ⊕ mischievous(Dewdrop))"
    ],
    "background_story": "Dewdrop, a petite and playful kitten, was the recent addition to the Green family. Adopted just last week, she has already stolen the hearts of everyone in the household. With her soft, fluffy fur and curious nature, Dewdrop loves to explore every nook and cranny of her new home. Her recent adventures include chasing after a ball of yarn, pouncing on invisible prey, and snuggling up in the warmest laps. As the family adjusts to life with a new pet, they are delighted by Dewdrop's antics and look forward to many more joyful moments with their recent little bundle of joy.",
    "name": "Dewdrop",
    "keyword": "recent",
    "subject_category": "animal"
  },
  {
    "facts": [
      "Penelope tests prototypes.",
      "Penelope teaches flight lessons.",
      "Penelope experiments with materials.",
      "Penelope flies solo.",
      "Penelope has experience.",
      "Penelope does not teach aerobatics."
    ],
    "facts_fol": [
      "test_prototypes(Penelope)",
      "_dạy_flight_lessons(Penelope)",
      "experiment_materials(Penelope)",
      "fly_solo(Penelope)",
      "has_experience(Penelope)",
      "¬teach_aerobatics(Penelope)"
    ],
    "rules": [
      "Penelope either pilots planes or designs innovative aircraft, but not both.",
      "If Penelope tests prototypes, then she builds lightweight fuselages and improves flight safety.",
      "If Penelope holds a license, then she either teaches flight lessons or pilots planes, but not both.",
      "If Penelope studies aerodynamics or experiments with materials, then she can build lightweight fuselages.",
      "Penelope either studies aerodynamics or flies solo, but not both at the same time.",
      "If Penelope has experience, then she either teaches aerobatics or holds a license, but not both."
    ],
    "rules_fol": [
      "pilot_planes(Penelope) ⊕ design_innovative_aircraft(Penelope)",
      "test_prototypes(Penelope) → (build_lightweight_fuselages(Penelope) ∧ improve_flight_safety(Penelope))",
      "holds_license(Penelope) → (_dạy_flight_lessons(Penelope) ⊕ pilot_planes(Penelope))",
      "(study_aerodynamics(Penelope) ∨ experiment_materials(Penelope)) → build_lightweight_fuselages(Penelope)",
      "study_aerodynamics(Penelope) ⊕ fly_solo(Penelope)",
      "has_experience(Penelope) → (teach_aerobatics(Penelope) ⊕ holds_license(Penelope))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Penelope leads a project, then she either designs innovative aircraft or optimizes performance, but not both.",
      "Every aviator who develops new techniques either improves flight safety or increases flight efficiency.",
      "If Penelope builds aircraft, then she either creates blueprints or pilots planes.",
      "Penelope either develops engines or builds lightweight fuselages.",
      "If Penelope joins the airforce, then she either learns navigation or studies aerodynamics, but not both.",
      "Every aviator either flies commercially or holds a license."
    ],
    "distracting_rules_fol": [
      "leads_project(Penelope) → (design_innovative_aircraft(Penelope) ⊕ optimize_performance(Penelope))",
      "∀x (develop_new_techniques(x) → (improve_flight_safety(x) ∨ increase_flight_efficiency(x)))",
      "build_aircraft(Penelope) → (create_blueprints(Penelope) ∨ pilot_planes(Penelope))",
      "develops_engines(Penelope) ∨ build_lightweight_fuselages(Penelope)",
      "join_airforce(Penelope) → (learn_navigation(Penelope) ⊕ study_aerodynamics(Penelope))",
      "∀x (flies_commercially(x) ∨ holds_license(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Penelope has experience.",
          "Penelope does not teach aerobatics."
        ],
        "rules": "If Penelope has experience, then she either teaches aerobatics or holds a license, but not both.",
        "conclusion": "Penelope holds a license."
      },
      {
        "facts": [
          "Penelope flies solo."
        ],
        "rules": "Penelope either studies aerodynamics or flies solo, but not both at the same time.",
        "conclusion": "Penelope does not study aerodynamics."
      },
      {
        "facts": [
          "Penelope does not study aerodynamics.",
          "Penelope experiments with materials."
        ],
        "rules": "If Penelope studies aerodynamics or experiments with materials, then she can build lightweight fuselages.",
        "conclusion": "Penelope builds lightweight fuselages."
      },
      {
        "facts": [
          "Penelope holds a license.",
          "Penelope teaches flight lessons."
        ],
        "rules": "If Penelope holds a license, then she either teaches flight lessons or pilots planes, but not both.",
        "conclusion": "Penelope does not pilot planes."
      },
      {
        "facts": [
          "Penelope tests prototypes.",
          "Penelope builds lightweight fuselages."
        ],
        "rules": "If Penelope tests prototypes, then she builds lightweight fuselages and improves flight safety.",
        "conclusion": "Penelope improves flight safety."
      },
      {
        "facts": [
          "Penelope does not pilot planes."
        ],
        "rules": "Penelope either pilots planes or designs innovative aircraft, but not both.",
        "conclusion": "Penelope designs innovative aircraft."
      },
      {
        "facts": [
          "Penelope designs innovative aircraft.",
          "Penelope improves flight safety."
        ],
        "rules": null,
        "conclusion": "Penelope designs innovative aircraft and improves flight safety."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "has_experience(Penelope)",
          "¬teach_aerobatics(Penelope)"
        ],
        "rules": "has_experience(Penelope) → (teach_aerobatics(Penelope) ⊕ holds_license(Penelope))",
        "conclusion": "holds_license(Penelope)"
      },
      {
        "facts": [
          "fly_solo(Penelope)"
        ],
        "rules": "study_aerodynamics(Penelope) ⊕ fly_solo(Penelope)",
        "conclusion": "¬study_aerodynamics(Penelope)"
      },
      {
        "facts": [
          "¬study_aerodynamics(Penelope)",
          "experiment_materials(Penelope)"
        ],
        "rules": "(study_aerodynamics(Penelope) ∨ experiment_materials(Penelope)) → build_lightweight_fuselages(Penelope)",
        "conclusion": "build_lightweight_fuselages(Penelope)"
      },
      {
        "facts": [
          "holds_license(Penelope)",
          "_dạy_flight_lessons(Penelope)"
        ],
        "rules": "holds_license(Penelope) → (_dạy_flight_lessons(Penelope) ⊕ pilot_planes(Penelope))",
        "conclusion": "¬pilot_planes(Penelope)"
      },
      {
        "facts": [
          "test_prototypes(Penelope)",
          "build_lightweight_fuselages(Penelope)"
        ],
        "rules": "test_prototypes(Penelope) → (build_lightweight_fuselages(Penelope) ∧ improve_flight_safety(Penelope))",
        "conclusion": "improve_flight_safety(Penelope)"
      },
      {
        "facts": [
          "¬pilot_planes(Penelope)"
        ],
        "rules": "pilot_planes(Penelope) ⊕ design_innovative_aircraft(Penelope)",
        "conclusion": "design_innovative_aircraft(Penelope)"
      },
      {
        "facts": [
          "design_innovative_aircraft(Penelope)",
          "improve_flight_safety(Penelope)"
        ],
        "rules": null,
        "conclusion": "design_innovative_aircraft(Penelope) ∧ improve_flight_safety(Penelope)"
      }
    ],
    "conclusion": "Penelope designs innovative aircraft and improves flight safety.",
    "conclusion_fol": "design_innovative_aircraft(Penelope) ∧ improve_flight_safety(Penelope)",
    "answer": "True",
    "context": [
      "Penelope has experience.",
      "Penelope does not teach aerobatics.",
      "If Penelope has experience, then she either teaches aerobatics or holds a license, but not both.",
      "Penelope flies solo.",
      "Penelope either studies aerodynamics or flies solo, but not both at the same time.",
      "Penelope experiments with materials.",
      "If Penelope studies aerodynamics or experiments with materials, then she can build lightweight fuselages.",
      "Penelope teaches flight lessons.",
      "If Penelope holds a license, then she either teaches flight lessons or pilots planes, but not both.",
      "Penelope tests prototypes.",
      "If Penelope tests prototypes, then she builds lightweight fuselages and improves flight safety.",
      "Penelope either pilots planes or designs innovative aircraft, but not both."
    ],
    "context_fol": [
      "has_experience(Penelope)",
      "¬teach_aerobatics(Penelope)",
      "has_experience(Penelope) → (teach_aerobatics(Penelope) ⊕ holds_license(Penelope))",
      "fly_solo(Penelope)",
      "study_aerodynamics(Penelope) ⊕ fly_solo(Penelope)",
      "experiment_materials(Penelope)",
      "(study_aerodynamics(Penelope) ∨ experiment_materials(Penelope)) → build_lightweight_fuselages(Penelope)",
      "_dạy_flight_lessons(Penelope)",
      "holds_license(Penelope) → (_dạy_flight_lessons(Penelope) ⊕ pilot_planes(Penelope))",
      "test_prototypes(Penelope)",
      "test_prototypes(Penelope) → (build_lightweight_fuselages(Penelope) ∧ improve_flight_safety(Penelope))",
      "pilot_planes(Penelope) ⊕ design_innovative_aircraft(Penelope)"
    ],
    "background_story": "Penelope was a pioneering female aviator in the early 20th century. With a passion for flight and engineering, she spent most of her career designing and building innovative aircraft. Her most notable contribution was the development of a lightweight yet incredibly strong fuselage for planes, which significantly improved flight safety and efficiency. Penelope's design allowed for a more streamlined shape, reducing air resistance and enabling planes to fly farther and faster. Her work revolutionized the aviation industry, earning her numerous accolades and recognition as one of the most influential figures in aviation history. Despite facing numerous challenges as a woman in a male-dominated field, Penelope persevered, leaving behind a legacy that would inspire generations of engineers and pilots to come.",
    "name": "Penelope",
    "keyword": "fuselage",
    "subject_category": "aviator"
  },
  {
    "facts": [
      "Skylar does not appreciate culture.",
      "Skylar collects memories.",
      "Skylar does not meet new people.",
      "Skylar does not understand others.",
      "Skylar documents landscapes.",
      "Skylar does not discover hidden gems."
    ],
    "facts_fol": [
      "¬appreciate_culture(Skylar)",
      "collect_memories(Skylar)",
      "¬meet_new_people(Skylar)",
      "¬understand_others(Skylar)",
      "document_landscape(Skylar)",
      "¬discover_hidden_gems(Skylar)"
    ],
    "rules": [
      "Skylar enjoys art or loves photography.",
      "Skylar either helps others or tells compelling stories, but not both.",
      "If Skylar travels abroad, then she either collects memories or enjoys art, but not both.",
      "If someone cares deeply, then they will help other people.",
      "Anyone who listens actively or shows empathy cares deeply.",
      "If Skylar explores the world, then she either meets new people or travels abroad, but not both.",
      "Skylar understands others or shows empathy.",
      "Anyone who documents landscapes either explores the world or discovers hidden gems."
    ],
    "rules_fol": [
      "enjoy_art(Skylar) ∨ love_photography(Skylar)",
      "help_others(Skylar) ⊕ tell_compelling_stories(Skylar)",
      "travel_abroad(Skylar) → (collect_memories(Skylar) ⊕ enjoy_art(Skylar))",
      "∀x (care_deeply(x) → help_others(x))",
      "∀x ((listen_actively(x) ∨ show_empathy(x)) → care_deeply(x))",
      "explore_world(Skylar) → (meet_new_people(Skylar) ⊕ travel_abroad(Skylar))",
      "understand_others(Skylar) ∨ show_empathy(Skylar)",
      "∀x (document_landscape(x) → (explore_world(x) ∨ discover_hidden_gems(x)))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Skylar is creative, then she either loves photography or has imagination, but not both.",
      "If Skylar captures moments or finds beauty, then she can tell compelling stories.",
      "Anyone who captures moments either expresses themselves creatively or enjoys art.",
      "If someone either teaches skills or supports their community (but not both), then they help others.",
      "If someone feels connected to their community, then they care deeply about them.",
      "If Skylar seeks adventure, then she travels abroad.",
      "If Skylar either hears concerns or feels pain (but not both), then she shows empathy.",
      "If Skylar seeks adventure, then she explores the world and gains knowledge."
    ],
    "distracting_rules_fol": [
      "is_creative(Skylar) → (love_photography(Skylar) ⊕ has_imagination(Skylar))",
      "(capture_moments(Skylar) ∨ find_beauty(Skylar)) → tell_compelling_stories(Skylar)",
      "∀x (capture_moments(x) → (express_creatively(x) ∨ enjoy_art(x)))",
      "∀x ((teach_skills(x) ⊕ support_community(x)) → help_others(x))",
      "∀x (feel_connected(x) → care_deeply(x))",
      "seek_adventure(Skylar) → travel_abroad(Skylar)",
      "(hear_concerns(Skylar) ⊕ feel_pain(Skylar)) → show_empathy(Skylar)",
      "seek_adventure(Skylar) → (explore_world(Skylar) ∧ gain_knowledge(Skylar))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Skylar documents landscapes.",
          "Skylar does not discover hidden gems."
        ],
        "rules": "Anyone who documents landscapes either explores the world or discovers hidden gems.",
        "conclusion": "Skylar explores the world."
      },
      {
        "facts": [
          "Skylar does not understand others."
        ],
        "rules": "Skylar understands others or shows empathy.",
        "conclusion": "Skylar shows empathy."
      },
      {
        "facts": [
          "Skylar explores the world.",
          "Skylar does not meet new people."
        ],
        "rules": "If Skylar explores the world, then she either meets new people or travels abroad, but not both.",
        "conclusion": "Skylar travels abroad."
      },
      {
        "facts": [
          "Skylar shows empathy."
        ],
        "rules": "Anyone who listens actively or shows empathy cares deeply.",
        "conclusion": "Skylar cares deeply."
      },
      {
        "facts": [
          "Skylar cares deeply."
        ],
        "rules": "If someone cares deeply, then they will help other people.",
        "conclusion": "Skylar helps others."
      },
      {
        "facts": [
          "Skylar travels abroad.",
          "Skylar collects memories."
        ],
        "rules": "If Skylar travels abroad, then she either collects memories or enjoys art, but not both.",
        "conclusion": "Skylar does not enjoy art."
      },
      {
        "facts": [
          "Skylar helps others."
        ],
        "rules": "Skylar either helps others or tells compelling stories, but not both.",
        "conclusion": "Skylar cannot tell compelling stories."
      },
      {
        "facts": [
          "Skylar does not enjoy art."
        ],
        "rules": "Skylar enjoys art or loves photography.",
        "conclusion": "Skylar loves photography."
      },
      {
        "facts": [
          "Skylar loves photography.",
          "Skylar does not appreciate culture.",
          "Skylar cannot tell compelling stories."
        ],
        "rules": null,
        "conclusion": "If Skylar loves photography or appreciates culture, then she can tell compelling stories."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "document_landscape(Skylar)",
          "¬discover_hidden_gems(Skylar)"
        ],
        "rules": "∀x (document_landscape(x) → (explore_world(x) ∨ discover_hidden_gems(x)))",
        "conclusion": "explore_world(Skylar)"
      },
      {
        "facts": [
          "¬understand_others(Skylar)"
        ],
        "rules": "understand_others(Skylar) ∨ show_empathy(Skylar)",
        "conclusion": "show_empathy(Skylar)"
      },
      {
        "facts": [
          "explore_world(Skylar)",
          "¬meet_new_people(Skylar)"
        ],
        "rules": "explore_world(Skylar) → (meet_new_people(Skylar) ⊕ travel_abroad(Skylar))",
        "conclusion": "travel_abroad(Skylar)"
      },
      {
        "facts": [
          "show_empathy(Skylar)"
        ],
        "rules": "∀x ((listen_actively(x) ∨ show_empathy(x)) → care_deeply(x))",
        "conclusion": "care_deeply(Skylar)"
      },
      {
        "facts": [
          "care_deeply(Skylar)"
        ],
        "rules": "∀x (care_deeply(x) → help_others(x))",
        "conclusion": "help_others(Skylar)"
      },
      {
        "facts": [
          "travel_abroad(Skylar)",
          "collect_memories(Skylar)"
        ],
        "rules": "travel_abroad(Skylar) → (collect_memories(Skylar) ⊕ enjoy_art(Skylar))",
        "conclusion": "¬enjoy_art(Skylar)"
      },
      {
        "facts": [
          "help_others(Skylar)"
        ],
        "rules": "help_others(Skylar) ⊕ tell_compelling_stories(Skylar)",
        "conclusion": "¬tell_compelling_stories(Skylar)"
      },
      {
        "facts": [
          "¬enjoy_art(Skylar)"
        ],
        "rules": "enjoy_art(Skylar) ∨ love_photography(Skylar)",
        "conclusion": "love_photography(Skylar)"
      },
      {
        "facts": [
          "love_photography(Skylar)",
          "¬appreciate_culture(Skylar)",
          "¬tell_compelling_stories(Skylar)"
        ],
        "rules": null,
        "conclusion": "(love_photography(Skylar) ∨ appreciate_culture(Skylar)) → tell_compelling_stories(Skylar)"
      }
    ],
    "conclusion": "If Skylar loves photography or appreciates culture, then she can tell compelling stories.",
    "conclusion_fol": "(love_photography(Skylar) ∨ appreciate_culture(Skylar)) → tell_compelling_stories(Skylar)",
    "answer": "False",
    "context": [
      "Skylar documents landscapes.",
      "Skylar does not discover hidden gems.",
      "Anyone who documents landscapes either explores the world or discovers hidden gems.",
      "Skylar does not understand others.",
      "Skylar understands others or shows empathy.",
      "Skylar does not meet new people.",
      "If Skylar explores the world, then she either meets new people or travels abroad, but not both.",
      "Anyone who listens actively or shows empathy cares deeply.",
      "If someone cares deeply, then they will help other people.",
      "Skylar collects memories.",
      "If Skylar travels abroad, then she either collects memories or enjoys art, but not both.",
      "Skylar either helps others or tells compelling stories, but not both.",
      "Skylar enjoys art or loves photography.",
      "Skylar does not appreciate culture."
    ],
    "context_fol": [
      "document_landscape(Skylar)",
      "¬discover_hidden_gems(Skylar)",
      "∀x (document_landscape(x) → (explore_world(x) ∨ discover_hidden_gems(x)))",
      "¬understand_others(Skylar)",
      "understand_others(Skylar) ∨ show_empathy(Skylar)",
      "¬meet_new_people(Skylar)",
      "explore_world(Skylar) → (meet_new_people(Skylar) ⊕ travel_abroad(Skylar))",
      "∀x ((listen_actively(x) ∨ show_empathy(x)) → care_deeply(x))",
      "∀x (care_deeply(x) → help_others(x))",
      "collect_memories(Skylar)",
      "travel_abroad(Skylar) → (collect_memories(Skylar) ⊕ enjoy_art(Skylar))",
      "help_others(Skylar) ⊕ tell_compelling_stories(Skylar)",
      "enjoy_art(Skylar) ∨ love_photography(Skylar)",
      "¬appreciate_culture(Skylar)"
    ],
    "background_story": "Skylar, a young and adventurous photographer, traveled to the Arauca region of Colombia to document the vibrant culture and breathtaking landscapes. As she immersed herself in the local community, she fell in love with the resilience and warmth of the Araucan people. Skylar spent months capturing the beauty of the Arauca River, the rolling hills, and the traditional festivals. Her photographs told a story of hope and joy, showcasing the region's untapped potential. The locals welcomed her with open arms, and Skylar soon found herself feeling at home. She decided to stay and help establish a community center, where she taught photography to the local youth, empowering them to tell their own stories. Skylar's experience in Arauca was a life-changing journey that taught her the value of community and the power of storytelling.",
    "name": "Skylar",
    "keyword": "arauca",
    "subject_category": "human"
  },
  {
    "facts": [
      "Lukas performs well.",
      "Lukas heals emotionally.",
      "Lukas faces challenges.",
      "Lukas is not confident.",
      "Lukas does not practice regularly.",
      "Lukas focuses on his passion.",
      "Lukas does not have a loving family.",
      "Lukas grows personally.",
      "Lukas does not accept criticism.",
      "Lukas does not develop coping skills."
    ],
    "facts_fol": [
      "perform_well(Lukas)",
      "heal_emotionally(Lukas)",
      "face_challenge(Lukas)",
      "¬confident(Lukas)",
      "¬practice_regularly(Lukas)",
      "focus_on_passion(Lukas)",
      "¬have_loving_family(Lukas)",
      "grow_personally(Lukas)",
      "¬accept_criticism(Lukas)",
      "¬develop_coping_skills(Lukas)"
    ],
    "rules": [
      "If Lukas overcomes adversity, then he either finds inner beauty or inspires others, but not both.",
      "If Lukas inspires others, then he is both talented and confident.",
      "Anyone who practices regularly or is talented will perform well.",
      "If Lukas faces challenges, then he either overcomes adversity or gains wisdom, but not both.",
      "If Lukas either learns from mistakes or gains wisdom (but not both), then he becomes resilient.",
      "If Lukas either finds support or becomes resilient (but not both), then he stays positive.",
      "If Lukas stays positive, then he focuses on his passion and has a loving family.",
      "If Lukas finds support, then he either heals emotionally or grows personally (but not both).",
      "If Lukas either learns from mistakes or accepts criticism (but not both), then he develops coping skills."
    ],
    "rules_fol": [
      "overcome_adversity(Lukas) → (find_inner_beauty(Lukas) ⊕ inspire_others(Lukas))",
      "inspire_others(Lukas) → (talented(Lukas) ∧ confident(Lukas))",
      "∀x ((practice_regularly(x) ∨ talented(x)) → perform_well(x))",
      "face_challenge(Lukas) → (overcome_adversity(Lukas) ⊕ gain_wisdom(Lukas))",
      "(learn_from_mistakes(Lukas) ⊕ gain_wisdom(Lukas)) → become_resilient(Lukas)",
      "(find_support(Lukas) ⊕ become_resilient(Lukas)) → stay_positive(Lukas)",
      "stay_positive(Lukas) → (focus_on_passion(Lukas) ∧ have_loving_family(Lukas))",
      "find_support(Lukas) → (heal_emotionally(Lukas) ⊕ grow_personally(Lukas))",
      "(learn_from_mistakes(Lukas) ⊕ accept_criticism(Lukas)) → develop_coping_skills(Lukas)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Lukas either helps others or inspires others.",
      "Anyone who sings well or plays an instrument is talented.",
      "If Lukas fosters creativity, then he either overcomes adversity or builds self-esteem, but not both.",
      "If Lukas experiences failure, then he either gains wisdom or develops resilience, but not both.",
      "Everyone who embraces their uniqueness either finds their passion or becomes resilient (or both).",
      "If Lukas loves music, then he shares his story and stays positive.",
      "If Lukas joins a community, then he will find support.",
      "If Lukas either admits faults or analyzes errors (but not both), then he learns from mistakes."
    ],
    "distracting_rules_fol": [
      "help_others(Lukas) ∨ inspire_others(Lukas)",
      "∀x ((sing_well(x) ∨ play_instrument(x)) → talented(x))",
      "foster_creativity(Lukas) → (overcome_adversity(Lukas) ⊕ build_self-esteem(Lukas))",
      "experience_failure(Lukas) → (gain_wisdom(Lukas) ⊕ develop_resilience(Lukas))",
      "∀x (embrace_uniqueness(x) → (find_passion(x) ∨ become_resilient(x)))",
      "love_music(Lukas) → (share_story(Lukas) ∧ stay_positive(Lukas))",
      "join_community(Lukas) → find_support(Lukas)",
      "(admit_faults(Lukas) ⊕ analyze_errors(Lukas)) → learn_from_mistakes(Lukas)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Lukas does not accept criticism.",
          "Lukas does not develop coping skills."
        ],
        "rules": "If Lukas either learns from mistakes or accepts criticism (but not both), then he develops coping skills.",
        "conclusion": "Lukas does not learn from mistakes."
      },
      {
        "facts": [
          "Lukas heals emotionally.",
          "Lukas grows personally."
        ],
        "rules": "If Lukas finds support, then he either heals emotionally or grows personally (but not both).",
        "conclusion": "Lukas does not find support."
      },
      {
        "facts": [
          "Lukas focuses on his passion.",
          "Lukas does not have a loving family."
        ],
        "rules": "If Lukas stays positive, then he focuses on his passion and has a loving family.",
        "conclusion": "Lukas does not stay positive."
      },
      {
        "facts": [
          "Lukas does not find support.",
          "Lukas does not stay positive."
        ],
        "rules": "If Lukas either finds support or becomes resilient (but not both), then he stays positive.",
        "conclusion": "Lukas does not become resilient."
      },
      {
        "facts": [
          "Lukas does not learn from mistakes.",
          "Lukas does not become resilient."
        ],
        "rules": "If Lukas either learns from mistakes or gains wisdom (but not both), then he becomes resilient.",
        "conclusion": "Lukas does not gain wisdom."
      },
      {
        "facts": [
          "Lukas faces challenges.",
          "Lukas does not gain wisdom."
        ],
        "rules": "If Lukas faces challenges, then he either overcomes adversity or gains wisdom, but not both.",
        "conclusion": "Lukas overcomes adversity."
      },
      {
        "facts": [
          "Lukas does not practice regularly.",
          "Lukas performs well."
        ],
        "rules": "Anyone who practices regularly or is talented will perform well.",
        "conclusion": null
      },
      {
        "facts": [
          "Lukas is not confident."
        ],
        "rules": "If Lukas inspires others, then he is both talented and confident.",
        "conclusion": "Lukas does not inspire others."
      },
      {
        "facts": [
          "Lukas overcomes adversity.",
          "Lukas does not inspire others."
        ],
        "rules": "If Lukas overcomes adversity, then he either finds inner beauty or inspires others, but not both.",
        "conclusion": "Lukas finds inner beauty."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬accept_criticism(Lukas)",
          "¬develop_coping_skills(Lukas)"
        ],
        "rules": "(learn_from_mistakes(Lukas) ⊕ accept_criticism(Lukas)) → develop_coping_skills(Lukas)",
        "conclusion": "¬learn_from_mistakes(Lukas)"
      },
      {
        "facts": [
          "heal_emotionally(Lukas)",
          "grow_personally(Lukas)"
        ],
        "rules": "find_support(Lukas) → (heal_emotionally(Lukas) ⊕ grow_personally(Lukas))",
        "conclusion": "¬find_support(Lukas)"
      },
      {
        "facts": [
          "focus_on_passion(Lukas)",
          "¬have_loving_family(Lukas)"
        ],
        "rules": "stay_positive(Lukas) → (focus_on_passion(Lukas) ∧ have_loving_family(Lukas))",
        "conclusion": "¬stay_positive(Lukas)"
      },
      {
        "facts": [
          "¬find_support(Lukas)",
          "¬stay_positive(Lukas)"
        ],
        "rules": "(find_support(Lukas) ⊕ become_resilient(Lukas)) → stay_positive(Lukas)",
        "conclusion": "¬become_resilient(Lukas)"
      },
      {
        "facts": [
          "¬learn_from_mistakes(Lukas)",
          "¬become_resilient(Lukas)"
        ],
        "rules": "(learn_from_mistakes(Lukas) ⊕ gain_wisdom(Lukas)) → become_resilient(Lukas)",
        "conclusion": "¬gain_wisdom(Lukas)"
      },
      {
        "facts": [
          "face_challenge(Lukas)",
          "¬gain_wisdom(Lukas)"
        ],
        "rules": "face_challenge(Lukas) → (overcome_adversity(Lukas) ⊕ gain_wisdom(Lukas))",
        "conclusion": "overcome_adversity(Lukas)"
      },
      {
        "facts": [
          "¬practice_regularly(Lukas)",
          "perform_well(Lukas)"
        ],
        "rules": "∀x ((practice_regularly(x) ∨ talented(x)) → perform_well(x))",
        "conclusion": null
      },
      {
        "facts": [
          "¬confident(Lukas)"
        ],
        "rules": "inspire_others(Lukas) → (talented(Lukas) ∧ confident(Lukas))",
        "conclusion": "¬inspire_others(Lukas)"
      },
      {
        "facts": [
          "overcome_adversity(Lukas)",
          "¬inspire_others(Lukas)"
        ],
        "rules": "overcome_adversity(Lukas) → (find_inner_beauty(Lukas) ⊕ inspire_others(Lukas))",
        "conclusion": "find_inner_beauty(Lukas)"
      }
    ],
    "conclusion": "Lukas finds inner beauty.",
    "conclusion_fol": "find_inner_beauty(Lukas)",
    "answer": "True",
    "context": [
      "Lukas does not accept criticism.",
      "Lukas does not develop coping skills.",
      "If Lukas either learns from mistakes or accepts criticism (but not both), then he develops coping skills.",
      "Lukas heals emotionally.",
      "Lukas grows personally.",
      "If Lukas finds support, then he either heals emotionally or grows personally (but not both).",
      "Lukas focuses on his passion.",
      "Lukas does not have a loving family.",
      "If Lukas stays positive, then he focuses on his passion and has a loving family.",
      "If Lukas either finds support or becomes resilient (but not both), then he stays positive.",
      "If Lukas either learns from mistakes or gains wisdom (but not both), then he becomes resilient.",
      "Lukas faces challenges.",
      "If Lukas faces challenges, then he either overcomes adversity or gains wisdom, but not both.",
      "Lukas does not practice regularly.",
      "Lukas performs well.",
      "Anyone who practices regularly or is talented will perform well.",
      "Lukas is not confident.",
      "If Lukas inspires others, then he is both talented and confident.",
      "If Lukas overcomes adversity, then he either finds inner beauty or inspires others, but not both."
    ],
    "context_fol": [
      "¬accept_criticism(Lukas)",
      "¬develop_coping_skills(Lukas)",
      "(learn_from_mistakes(Lukas) ⊕ accept_criticism(Lukas)) → develop_coping_skills(Lukas)",
      "heal_emotionally(Lukas)",
      "grow_personally(Lukas)",
      "find_support(Lukas) → (heal_emotionally(Lukas) ⊕ grow_personally(Lukas))",
      "focus_on_passion(Lukas)",
      "¬have_loving_family(Lukas)",
      "stay_positive(Lukas) → (focus_on_passion(Lukas) ∧ have_loving_family(Lukas))",
      "(find_support(Lukas) ⊕ become_resilient(Lukas)) → stay_positive(Lukas)",
      "(learn_from_mistakes(Lukas) ⊕ gain_wisdom(Lukas)) → become_resilient(Lukas)",
      "face_challenge(Lukas)",
      "face_challenge(Lukas) → (overcome_adversity(Lukas) ⊕ gain_wisdom(Lukas))",
      "¬practice_regularly(Lukas)",
      "perform_well(Lukas)",
      "∀x ((practice_regularly(x) ∨ talented(x)) → perform_well(x))",
      "¬confident(Lukas)",
      "inspire_others(Lukas) → (talented(Lukas) ∧ confident(Lukas))",
      "overcome_adversity(Lukas) → (find_inner_beauty(Lukas) ⊕ inspire_others(Lukas))"
    ],
    "background_story": "Lukas was a bright and confident young boy until he started losing his hair due to alopecia areata. The condition progressed rapidly, leaving him completely bald by the age of 10. Despite the challenges he faced, Lukas refused to let his alopecic condition define him. With the support of his loving family, he learned to embrace his unique appearance and found solace in his passion for music. Lukas began playing the guitar and soon discovered a talent for singing. His powerful voice and inspiring story touched the hearts of many, and he became a local celebrity, performing at charity events and raising awareness about alopecia. Lukas's journey taught him that true beauty comes from within, and he continues to inspire others with his courage and resilience.",
    "name": "Lukas",
    "keyword": "alopecic",
    "subject_category": "human"
  },
  {
    "facts": [
      "Ashlyn does not eat mussels.",
      "Ashlyn is flexible.",
      "Ashlyn is not nocturnal.",
      "Ashlyn has spines.",
      "Ashlyn does not adapt quickly.",
      "Ashlyn releases offspring."
    ],
    "facts_fol": [
      "¬eats_mussels(Ashlyn)",
      "is_flexible(Ashlyn)",
      "¬is_nocturnal(Ashlyn)",
      "has_spines(Ashlyn)",
      "¬adapts_quickly(Ashlyn)",
      "releases_offspring(Ashlyn)"
    ],
    "rules": [
      "For all starfish, if a starfish is an actinopod, then it either has tube feet or is slow moving (or both).",
      "If Ashlyn either lives in water or is an actinopod (but not both), then she eats mussels.",
      "Every starfish either has tube feet or is flexible, but not necessarily both.",
      "Any starfish that has arms or is marine lives in water.",
      "If a starfish is marine, then it either has spines or is nocturnal, but not both.",
      "All starfish either regrow limbs or have arms.",
      "If Ashlyn either loses limbs or regrows limbs (but not both), then she is able to adapt quickly.",
      "For Ashlyn, either she releases offspring or loses limbs, but not both at the same time."
    ],
    "rules_fol": [
      "∀x (is_actinopod(x) → (has_tube_feet(x) ∨ is_slow_moving(x)))",
      "(lives_in_water(Ashlyn) ⊕ is_actinopod(Ashlyn)) → eats_mussels(Ashlyn)",
      "∀x (has_tube_feet(x) ⊕ is_flexible(x))",
      "∀x ((has_arms(x) ∨ is_marine(x)) → lives_in_water(x))",
      "is_marine(Ashlyn) → (has_spines(Ashlyn) ⊕ is_nocturnal(Ashlyn))",
      "∀x (regrows_limbs(x) ∨ has_arms(x))",
      "(loses_limbs(Ashlyn) ⊕ regrows_limbs(Ashlyn)) → adapts_quickly(Ashlyn)",
      "releases_offspring(Ashlyn) ⊕ loses_limbs(Ashlyn)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Ashlyn has radial symmetry, then she is either an actinopod or a bottom dweller, but not both.",
      "All starfish either crawl slowly or have tube feet.",
      "If Ashlyn is an ancient starfish, then she either lives in water or has predators, but not both.",
      "All starfish that live in the ocean and eat clams are marine.",
      "All starfish that crawl have arms.",
      "If Ashlyn either heals wounds or renews skin (but not both), then she is able to regrow limbs.",
      "All injured starfish lose limbs and heal fast."
    ],
    "distracting_rules_fol": [
      "has_radial_symmetry(Ashlyn) → (is_actinopod(Ashlyn) ⊕ is_bottom_dweller(Ashlyn))",
      "∀x (crawls_slowly(x) ∨ has_tube_feet(x))",
      "is_ancient(Ashlyn) → (lives_in_water(Ashlyn) ⊕ has_predators(Ashlyn))",
      "∀x ((lives_in_ocean(x) ∧ eats_clams(x)) → is_marine(x))",
      "∀x (crawls(x) → has_arms(x))",
      "(heals_wounds(Ashlyn) ⊕ renews_skin(Ashlyn)) → regrows_limbs(Ashlyn)",
      "∀x (is_injured(x) → (loses_limbs(x) ∧ heals_fast(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Ashlyn releases offspring."
        ],
        "rules": "For Ashlyn, either she releases offspring or loses limbs, but not both at the same time.",
        "conclusion": "Ashlyn does not lose limbs."
      },
      {
        "facts": [
          "Ashlyn does not lose limbs.",
          "Ashlyn does not adapt quickly."
        ],
        "rules": "If Ashlyn either loses limbs or regrows limbs (but not both), then she is able to adapt quickly.",
        "conclusion": "Ashlyn does not regrow limbs."
      },
      {
        "facts": [
          "Ashlyn does not regrow limbs."
        ],
        "rules": "All starfish either regrow limbs or have arms.",
        "conclusion": "Ashlyn has arms."
      },
      {
        "facts": [
          "Ashlyn has spines.",
          "Ashlyn is not nocturnal."
        ],
        "rules": "If a starfish is marine, then it either has spines or is nocturnal, but not both.",
        "conclusion": null
      },
      {
        "facts": [
          "Ashlyn has arms."
        ],
        "rules": "Any starfish that has arms or is marine lives in water.",
        "conclusion": "Ashlyn lives in water."
      },
      {
        "facts": [
          "Ashlyn is flexible."
        ],
        "rules": "Every starfish either has tube feet or is flexible, but not necessarily both.",
        "conclusion": "Ashlyn does not have tube feet."
      },
      {
        "facts": [
          "Ashlyn lives in water.",
          "Ashlyn does not eat mussels."
        ],
        "rules": "If Ashlyn either lives in water or is an actinopod (but not both), then she eats mussels.",
        "conclusion": "Ashlyn is an actinopod."
      },
      {
        "facts": [
          "Ashlyn is an actinopod.",
          "Ashlyn does not have tube feet."
        ],
        "rules": "For all starfish, if a starfish is an actinopod, then it either has tube feet or is slow moving (or both).",
        "conclusion": "Ashlyn is not slow moving."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "releases_offspring(Ashlyn)"
        ],
        "rules": "releases_offspring(Ashlyn) ⊕ loses_limbs(Ashlyn)",
        "conclusion": "¬loses_limbs(Ashlyn)"
      },
      {
        "facts": [
          "¬loses_limbs(Ashlyn)",
          "¬adapts_quickly(Ashlyn)"
        ],
        "rules": "(loses_limbs(Ashlyn) ⊕ regrows_limbs(Ashlyn)) → adapts_quickly(Ashlyn)",
        "conclusion": "¬regrows_limbs(Ashlyn)"
      },
      {
        "facts": [
          "¬regrows_limbs(Ashlyn)"
        ],
        "rules": "∀x (regrows_limbs(x) ∨ has_arms(x))",
        "conclusion": "has_arms(Ashlyn)"
      },
      {
        "facts": [
          "has_spines(Ashlyn)",
          "¬is_nocturnal(Ashlyn)"
        ],
        "rules": "is_marine(Ashlyn) → (has_spines(Ashlyn) ⊕ is_nocturnal(Ashlyn))",
        "conclusion": null
      },
      {
        "facts": [
          "has_arms(Ashlyn)"
        ],
        "rules": "∀x ((has_arms(x) ∨ is_marine(x)) → lives_in_water(x))",
        "conclusion": "lives_in_water(Ashlyn)"
      },
      {
        "facts": [
          "is_flexible(Ashlyn)"
        ],
        "rules": "∀x (has_tube_feet(x) ⊕ is_flexible(x))",
        "conclusion": "¬has_tube_feet(Ashlyn)"
      },
      {
        "facts": [
          "lives_in_water(Ashlyn)",
          "¬eats_mussels(Ashlyn)"
        ],
        "rules": "(lives_in_water(Ashlyn) ⊕ is_actinopod(Ashlyn)) → eats_mussels(Ashlyn)",
        "conclusion": "is_actinopod(Ashlyn)"
      },
      {
        "facts": [
          "is_actinopod(Ashlyn)",
          "¬has_tube_feet(Ashlyn)"
        ],
        "rules": "∀x (is_actinopod(x) → (has_tube_feet(x) ∨ is_slow_moving(x)))",
        "conclusion": "¬is_slow_moving(Ashlyn)"
      }
    ],
    "conclusion": "Ashlyn is not slow moving.",
    "conclusion_fol": "¬is_slow_moving(Ashlyn)",
    "answer": "False",
    "context": [
      "Ashlyn releases offspring.",
      "For Ashlyn, either she releases offspring or loses limbs, but not both at the same time.",
      "Ashlyn does not adapt quickly.",
      "If Ashlyn either loses limbs or regrows limbs (but not both), then she is able to adapt quickly.",
      "All starfish either regrow limbs or have arms.",
      "Ashlyn has spines.",
      "Ashlyn is not nocturnal.",
      "If a starfish is marine, then it either has spines or is nocturnal, but not both.",
      "Any starfish that has arms or is marine lives in water.",
      "Ashlyn is flexible.",
      "Every starfish either has tube feet or is flexible, but not necessarily both.",
      "Ashlyn does not eat mussels.",
      "If Ashlyn either lives in water or is an actinopod (but not both), then she eats mussels.",
      "For all starfish, if a starfish is an actinopod, then it either has tube feet or is slow moving (or both)."
    ],
    "context_fol": [
      "releases_offspring(Ashlyn)",
      "releases_offspring(Ashlyn) ⊕ loses_limbs(Ashlyn)",
      "¬adapts_quickly(Ashlyn)",
      "(loses_limbs(Ashlyn) ⊕ regrows_limbs(Ashlyn)) → adapts_quickly(Ashlyn)",
      "∀x (regrows_limbs(x) ∨ has_arms(x))",
      "has_spines(Ashlyn)",
      "¬is_nocturnal(Ashlyn)",
      "is_marine(Ashlyn) → (has_spines(Ashlyn) ⊕ is_nocturnal(Ashlyn))",
      "∀x ((has_arms(x) ∨ is_marine(x)) → lives_in_water(x))",
      "is_flexible(Ashlyn)",
      "∀x (has_tube_feet(x) ⊕ is_flexible(x))",
      "¬eats_mussels(Ashlyn)",
      "(lives_in_water(Ashlyn) ⊕ is_actinopod(Ashlyn)) → eats_mussels(Ashlyn)",
      "∀x (is_actinopod(x) → (has_tube_feet(x) ∨ is_slow_moving(x)))"
    ],
    "background_story": "Ashlyn, the curious starfish, was an actinopod, a member of the ancient and fascinating group of echinoderms. She lived in a vibrant coral reef, surrounded by schools of fish and colorful sea anemones. Ashlyn's actinopod body was perfectly adapted to her underwater world, with flexible arms that allowed her to crawl, sense, and even taste her surroundings. As she slowly made her way across the reef, she used her water vascular system to extend and retract her many tiny tube feet, searching for clams and mussels to eat. Despite her slow pace, Ashlyn was a vital part of the reef ecosystem, helping to keep the mussel population under control. Her unique actinopod characteristics made her a beloved and integral member of the ocean's community.",
    "name": "Ashlyn",
    "keyword": "actinopod",
    "subject_category": "starfish"
  },
  {
    "facts": [
      "Karter is not large.",
      "Karter does not jump high.",
      "Karter is mature.",
      "Karter roams freely.",
      "Karter does not grow strong.",
      "Karter is gentle.",
      "Karter has a distinct voice."
    ],
    "facts_fol": [
      "¬large(Karter)",
      "¬jump_high(Karter)",
      "is_mature(Karter)",
      "roam_free(Karter)",
      "¬grow_strong(Karter)",
      "is_gentle(Karter)",
      "has_distinct_voice(Karter)"
    ],
    "rules": [
      "Karter either dives deep or feeds on krill, but not both.",
      "Karter either swims fast or feeds on krill.",
      "Karter either makes a low rumble or swims fast, but not both.",
      "If Karter is mature, then he either makes a low rumble or jumps high, but not both.",
      "Every whale that migrates long distances either roams freely or finds food.",
      "If Karter finds food, then he either lives long or grows strong, but not both.",
      "If a whale lives a long life, it may not necessarily have an enormous size, and if a whale has an enormous size, it may not necessarily live a long life.",
      "If Karter is a gentle whale, then he either has a distinct voice or an enormous size, but not both."
    ],
    "rules_fol": [
      "dive_deep(Karter) ⊕ feed_on_krill(Karter)",
      "swim_fast(Karter) ∨ feed_on_krill(Karter)",
      "make_low_rumble(Karter) ⊕ swim_fast(Karter)",
      "is_mature(Karter) → (make_low_rumble(Karter) ⊕ jump_high(Karter))",
      "∀x (migrate_long_distances(x) → (roam_free(x) ∨ find_food(x)))",
      "find_food(Karter) → (live_long(Karter) ⊕ grow_strong(Karter))",
      "∀x (live_long(x) ⊕ have_enormous_size(x))",
      "is_gentle(Karter) → (has_distinct_voice(Karter) ⊕ have_enormous_size(Karter))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Any whale that has power or is strong can dive deep.",
      "Any whale that has baleen or filter feeds can feed on krill.",
      "If Karter explores the ocean, then he either swims fast or sings loudly.",
      "If Karter is a blue whale, then he either has fins or makes a low rumble, but not both.",
      "All whales that have fins and live in the ocean migrate long distances.",
      "Every whale that explores the ocean either finds food or avoids hunters.",
      "Karter either stays healthy or lives long.",
      "All whales that eat plenty and grow slowly will have enormous size."
    ],
    "distracting_rules_fol": [
      "∀x ((have_power(x) ∨ be_strong(x)) → dive_deep(x))",
      "∀x ((has_baleen(x) ∨ filter_feeds(x)) → feed_on_krill(x))",
      "explore_ocean(Karter) → (sing_loudly(Karter) ∨ swim_fast(Karter))",
      "is_blue(Karter) → (has_fins(Karter) ⊕ make_low_rumble(Karter))",
      "∀x ((has_fins(x) ∧ lives_in_ocean(x)) → migrate_long_distances(x))",
      "∀x (explore_ocean(x) → (find_food(x) ∨ avoid_hunters(x)))",
      "stay_healthy(Karter) ∨ live_long(Karter)",
      "∀x ((eat_plenty(x) ∧ grow_slowly(x)) → have_enormous_size(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Karter is gentle.",
          "Karter has a distinct voice."
        ],
        "rules": "If Karter is a gentle whale, then he either has a distinct voice or an enormous size, but not both.",
        "conclusion": "Karter does not have an enormous size."
      },
      {
        "facts": [
          "Karter does not have an enormous size."
        ],
        "rules": "If a whale lives a long life, it may not necessarily have an enormous size, and if a whale has an enormous size, it may not necessarily live a long life.",
        "conclusion": "Karter lives long."
      },
      {
        "facts": [
          "Karter lives long.",
          "Karter does not grow strong."
        ],
        "rules": "If Karter finds food, then he either lives long or grows strong, but not both.",
        "conclusion": null
      },
      {
        "facts": [
          "Karter roams freely."
        ],
        "rules": "Every whale that migrates long distances either roams freely or finds food.",
        "conclusion": null
      },
      {
        "facts": [
          "Karter is mature.",
          "Karter does not jump high."
        ],
        "rules": "If Karter is mature, then he either makes a low rumble or jumps high, but not both.",
        "conclusion": "Karter makes a low rumble."
      },
      {
        "facts": [
          "Karter makes a low rumble."
        ],
        "rules": "Karter either makes a low rumble or swims fast, but not both.",
        "conclusion": "Karter does not swim fast."
      },
      {
        "facts": [
          "Karter does not swim fast."
        ],
        "rules": "Karter either swims fast or feeds on krill.",
        "conclusion": "Karter feeds on krill."
      },
      {
        "facts": [
          "Karter feeds on krill."
        ],
        "rules": "Karter either dives deep or feeds on krill, but not both.",
        "conclusion": "Karter does not dive deep."
      },
      {
        "facts": [
          "Karter is not large.",
          "Karter does not dive deep."
        ],
        "rules": null,
        "conclusion": "Karter is large and either dives deep or migrates long distances (or both)."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "is_gentle(Karter)",
          "has_distinct_voice(Karter)"
        ],
        "rules": "is_gentle(Karter) → (has_distinct_voice(Karter) ⊕ have_enormous_size(Karter))",
        "conclusion": "¬have_enormous_size(Karter)"
      },
      {
        "facts": [
          "¬have_enormous_size(Karter)"
        ],
        "rules": "∀x (live_long(x) ⊕ have_enormous_size(x))",
        "conclusion": "live_long(Karter)"
      },
      {
        "facts": [
          "live_long(Karter)",
          "¬grow_strong(Karter)"
        ],
        "rules": "find_food(Karter) → (live_long(Karter) ⊕ grow_strong(Karter))",
        "conclusion": null
      },
      {
        "facts": [
          "roam_free(Karter)"
        ],
        "rules": "∀x (migrate_long_distances(x) → (roam_free(x) ∨ find_food(x)))",
        "conclusion": null
      },
      {
        "facts": [
          "is_mature(Karter)",
          "¬jump_high(Karter)"
        ],
        "rules": "is_mature(Karter) → (make_low_rumble(Karter) ⊕ jump_high(Karter))",
        "conclusion": "make_low_rumble(Karter)"
      },
      {
        "facts": [
          "make_low_rumble(Karter)"
        ],
        "rules": "make_low_rumble(Karter) ⊕ swim_fast(Karter)",
        "conclusion": "¬swim_fast(Karter)"
      },
      {
        "facts": [
          "¬swim_fast(Karter)"
        ],
        "rules": "swim_fast(Karter) ∨ feed_on_krill(Karter)",
        "conclusion": "feed_on_krill(Karter)"
      },
      {
        "facts": [
          "feed_on_krill(Karter)"
        ],
        "rules": "dive_deep(Karter) ⊕ feed_on_krill(Karter)",
        "conclusion": "¬dive_deep(Karter)"
      },
      {
        "facts": [
          "¬large(Karter)",
          "¬dive_deep(Karter)"
        ],
        "rules": null,
        "conclusion": "large(Karter) ∧ (dive_deep(Karter) ∨ migrate_long_distances(Karter))"
      }
    ],
    "conclusion": "Karter is large and either dives deep or migrates long distances (or both).",
    "conclusion_fol": "large(Karter) ∧ (dive_deep(Karter) ∨ migrate_long_distances(Karter))",
    "answer": "False",
    "context": [
      "Karter is gentle.",
      "Karter has a distinct voice.",
      "If Karter is a gentle whale, then he either has a distinct voice or an enormous size, but not both.",
      "If a whale lives a long life, it may not necessarily have an enormous size, and if a whale has an enormous size, it may not necessarily live a long life.",
      "Karter does not grow strong.",
      "If Karter finds food, then he either lives long or grows strong, but not both.",
      "Karter roams freely.",
      "Every whale that migrates long distances either roams freely or finds food.",
      "Karter is mature.",
      "Karter does not jump high.",
      "If Karter is mature, then he either makes a low rumble or jumps high, but not both.",
      "Karter either makes a low rumble or swims fast, but not both.",
      "Karter either swims fast or feeds on krill.",
      "Karter either dives deep or feeds on krill, but not both.",
      "Karter is not large."
    ],
    "context_fol": [
      "is_gentle(Karter)",
      "has_distinct_voice(Karter)",
      "is_gentle(Karter) → (has_distinct_voice(Karter) ⊕ have_enormous_size(Karter))",
      "∀x (live_long(x) ⊕ have_enormous_size(x))",
      "¬grow_strong(Karter)",
      "find_food(Karter) → (live_long(Karter) ⊕ grow_strong(Karter))",
      "roam_free(Karter)",
      "∀x (migrate_long_distances(x) → (roam_free(x) ∨ find_food(x)))",
      "is_mature(Karter)",
      "¬jump_high(Karter)",
      "is_mature(Karter) → (make_low_rumble(Karter) ⊕ jump_high(Karter))",
      "make_low_rumble(Karter) ⊕ swim_fast(Karter)",
      "swim_fast(Karter) ∨ feed_on_krill(Karter)",
      "dive_deep(Karter) ⊕ feed_on_krill(Karter)",
      "¬large(Karter)"
    ],
    "background_story": "Karter was an enormous blue whale, the largest in the Pacific Ocean. His massive body could reach lengths of over 100 feet and weigh hundreds of tons. Despite his enormous size, Karter was a gentle giant, roaming the seas in search of krill and small fish to feed on. His enormous voice could be heard for miles, a low rumble that resonated through the water. Karter's enormous strength allowed him to dive to incredible depths, exploring shipwrecks and underwater caverns that few other creatures could reach. His enormity was a wonder to behold, and scientists and whale watchers alike would travel from around the world to catch a glimpse of Karter in his natural habitat.",
    "name": "Karter",
    "keyword": "enormous",
    "subject_category": "whale"
  },
  {
    "facts": [
      "Ellie does not exercise regularly.",
      "Ellie does not eat well.",
      "Ellie needs treatment.",
      "Ellie does not listen to her doctor."
    ],
    "facts_fol": [
      "¬exercises_regularly(Ellie)",
      "¬eats_well(Ellie)",
      "needs_treatment(Ellie)",
      "¬listens_doctor(Ellie)"
    ],
    "rules": [
      "Ellie either has good oral hygiene or seeks dental care for others (or both).",
      "If someone seeks dental care, then they will get help.",
      "If a person needs treatment, then they will either pay attention to their health or receive the necessary help, but not both.",
      "If Ellie either pays attention to her health or follows advice (but not both), then she stays healthy.",
      "If Ellie stays healthy, then she either eats well or exercises regularly (but not both).",
      "Ellie either follows advice or listens to her doctor."
    ],
    "rules_fol": [
      "has_good_oral_hygiene(Ellie) ∨ seeks_dental_care(Ellie)",
      "∀x (seeks_dental_care(x) → gets_help(x))",
      "needs_treatment(Ellie) → (pays_attention(Ellie) ⊕ gets_help(Ellie))",
      "(pays_attention(Ellie) ⊕ follows_advice(Ellie)) → stays_healthy(Ellie)",
      "stays_healthy(Ellie) → (eats_well(Ellie) ⊕ exercises_regularly(Ellie))",
      "follows_advice(Ellie) ∨ listens_doctor(Ellie)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Ellie fixes teeth, then she will seek dental care for others.",
      "Anyone who visits a clinic will receive help.",
      "If Ellie either reads labels or follows guidelines (but not both), then she pays attention to her health.",
      "Anyone who takes care of themselves either feels confident or stays healthy (or both).",
      "If Ellie either reads labels or asks questions (but not both), then she follows advice."
    ],
    "distracting_rules_fol": [
      "fixes_teeth(Ellie) → seeks_dental_care(Ellie)",
      "∀x (visits_clinic(x) → gets_help(x))",
      "(reads_labels(Ellie) ⊕ follows_guidelines(Ellie)) → pays_attention(Ellie)",
      "∀x (takes_care(x) → (feels_confident(x) ∨ stays_healthy(x)))",
      "(reads_labels(Ellie) ⊕ asks_questions(Ellie)) → follows_advice(Ellie)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Ellie does not listen to her doctor."
        ],
        "rules": "Ellie either follows advice or listens to her doctor.",
        "conclusion": "Ellie follows advice."
      },
      {
        "facts": [
          "Ellie does not eat well.",
          "Ellie does not exercise regularly."
        ],
        "rules": "If Ellie stays healthy, then she either eats well or exercises regularly (but not both).",
        "conclusion": "Ellie does not stay healthy."
      },
      {
        "facts": [
          "Ellie follows advice.",
          "Ellie does not stay healthy."
        ],
        "rules": "If Ellie either pays attention to her health or follows advice (but not both), then she stays healthy.",
        "conclusion": "Ellie pays attention to her health."
      },
      {
        "facts": [
          "Ellie needs treatment.",
          "Ellie pays attention to her health."
        ],
        "rules": "If a person needs treatment, then they will either pay attention to their health or receive the necessary help, but not both.",
        "conclusion": "Ellie does not receive the necessary treatment."
      },
      {
        "facts": [
          "Ellie does not receive the necessary treatment."
        ],
        "rules": "If someone seeks dental care, then they will get help.",
        "conclusion": "Ellie does not seek dental care."
      },
      {
        "facts": [
          "Ellie does not seek dental care."
        ],
        "rules": "Ellie either has good oral hygiene or seeks dental care for others (or both).",
        "conclusion": "Ellie has good oral hygiene."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬listens_doctor(Ellie)"
        ],
        "rules": "follows_advice(Ellie) ∨ listens_doctor(Ellie)",
        "conclusion": "follows_advice(Ellie)"
      },
      {
        "facts": [
          "¬eats_well(Ellie)",
          "¬exercises_regularly(Ellie)"
        ],
        "rules": "stays_healthy(Ellie) → (eats_well(Ellie) ⊕ exercises_regularly(Ellie))",
        "conclusion": "¬stays_healthy(Ellie)"
      },
      {
        "facts": [
          "follows_advice(Ellie)",
          "¬stays_healthy(Ellie)"
        ],
        "rules": "(pays_attention(Ellie) ⊕ follows_advice(Ellie)) → stays_healthy(Ellie)",
        "conclusion": "pays_attention(Ellie)"
      },
      {
        "facts": [
          "needs_treatment(Ellie)",
          "pays_attention(Ellie)"
        ],
        "rules": "needs_treatment(Ellie) → (pays_attention(Ellie) ⊕ gets_help(Ellie))",
        "conclusion": "¬gets_help(Ellie)"
      },
      {
        "facts": [
          "¬gets_help(Ellie)"
        ],
        "rules": "∀x (seeks_dental_care(x) → gets_help(x))",
        "conclusion": "¬seeks_dental_care(Ellie)"
      },
      {
        "facts": [
          "¬seeks_dental_care(Ellie)"
        ],
        "rules": "has_good_oral_hygiene(Ellie) ∨ seeks_dental_care(Ellie)",
        "conclusion": "has_good_oral_hygiene(Ellie)"
      }
    ],
    "conclusion": "Ellie has good oral hygiene.",
    "conclusion_fol": "has_good_oral_hygiene(Ellie)",
    "answer": "True",
    "context": [
      "Ellie does not listen to her doctor.",
      "Ellie either follows advice or listens to her doctor.",
      "Ellie does not eat well.",
      "Ellie does not exercise regularly.",
      "If Ellie stays healthy, then she either eats well or exercises regularly (but not both).",
      "If Ellie either pays attention to her health or follows advice (but not both), then she stays healthy.",
      "Ellie needs treatment.",
      "If a person needs treatment, then they will either pay attention to their health or receive the necessary help, but not both.",
      "If someone seeks dental care, then they will get help.",
      "Ellie either has good oral hygiene or seeks dental care for others (or both)."
    ],
    "context_fol": [
      "¬listens_doctor(Ellie)",
      "follows_advice(Ellie) ∨ listens_doctor(Ellie)",
      "¬eats_well(Ellie)",
      "¬exercises_regularly(Ellie)",
      "stays_healthy(Ellie) → (eats_well(Ellie) ⊕ exercises_regularly(Ellie))",
      "(pays_attention(Ellie) ⊕ follows_advice(Ellie)) → stays_healthy(Ellie)",
      "needs_treatment(Ellie)",
      "needs_treatment(Ellie) → (pays_attention(Ellie) ⊕ gets_help(Ellie))",
      "∀x (seeks_dental_care(x) → gets_help(x))",
      "has_good_oral_hygiene(Ellie) ∨ seeks_dental_care(Ellie)"
    ],
    "background_story": "Ellie, a dedicated orthodontist, had always been passionate about helping people achieve perfect smiles. She specialized in corrective dentistry, using her expertise to fix misaligned teeth and jaws. With a gentle touch and a keen eye for detail, Ellie worked tirelessly to ensure her patients received the best possible care. Her corrective measures didn't just stop at teeth alignment; she also took the time to educate her patients on proper oral hygiene and preventative care. Ellie's commitment to her craft had transformed countless lives, boosting her patients' confidence and self-esteem. Her corrective approach extended beyond the dental chair, as she volunteered at local clinics, providing access to quality dental care for underprivileged communities.",
    "name": "Ellie",
    "keyword": "corrective",
    "subject_category": "human"
  },
  {
    "facts": [
      "Alison does not read research.",
      "Alison helps patients.",
      "Alison shares knowledge.",
      "Alison leads workshops.",
      "Alison does not train her colleagues."
    ],
    "facts_fol": [
      "¬reads_research(Alison)",
      "helps_patients(Alison)",
      "shares_knowledge(Alison)",
      "leads_workshops(Alison)",
      "¬trains_colleagues(Alison)"
    ],
    "rules": [
      "For all medical professionals, if someone is a skilled surgeon, then they develop innovative procedures and improve patient outcomes.",
      "If a medical professional stays updated and improves patient outcomes, then they earn recognition.",
      "Every medical professional either reads research or stays updated.",
      "If a medical professional earns recognition and helps patients, then they advance medicine.",
      "For Alison, either she teaches others or advances medicine, but not both simultaneously.",
      "Any medical professional who has expertise or shares knowledge can teach others.",
      "If Alison either leads workshops or has expertise (but not both), then she can train colleagues."
    ],
    "rules_fol": [
      "∀x (skilled_surgeon(x) → (develop_innovative_procedures(x) ∧ improve_patient_outcomes(x)))",
      "∀x ((stays_updated(x) ∧ improve_patient_outcomes(x)) → earns_recognition(x))",
      "∀x (reads_research(x) ∨ stays_updated(x))",
      "∀x ((earns_recognition(x) ∧ helps_patients(x)) → advances_medicine(x))",
      "teaches_others(Alison) ⊕ advances_medicine(Alison)",
      "∀x ((has_expertise(x) ∨ shares_knowledge(x)) → teaches_others(x))",
      "(leads_workshops(Alison) ⊕ has_expertise(Alison)) → trains_colleagues(Alison)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Any medical professional who performs precise operations or makes accurate diagnoses can improve patient outcomes.",
      "All medical professionals who attend conferences and follow medical guidelines stay updated.",
      "Alison either saves lives or earns recognition.",
      "All medical professionals who have passion and collaborate with teams advance medicine.",
      "All medical professionals who mentor residents will teach others.",
      "Any medical professional who solves complex cases or publishes papers has expertise."
    ],
    "distracting_rules_fol": [
      "∀x ((performs_precise(x) ∨ makes_accurate_diagnoses(x)) → improve_patient_outcomes(x))",
      "∀x ((attends_conferences(x) ∧ follows_medical_guidelines(x)) → stays_updated(x))",
      "saves_lives(Alison) ∨ earns_recognition(Alison)",
      "∀x (has_passion(x) → (collaborate_teams(x) ∧ advances_medicine(x)))",
      "∀x (mentors_residents(x) → teaches_others(x))",
      "∀x ((solves_complex_cases(x) ∨ publishes_papers(x)) → has_expertise(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Alison leads workshops.",
          "Alison does not train her colleagues."
        ],
        "rules": "If Alison either leads workshops or has expertise (but not both), then she can train colleagues.",
        "conclusion": "Alison has expertise."
      },
      {
        "facts": [
          "Alison has expertise.",
          "Alison shares knowledge."
        ],
        "rules": "Any medical professional who has expertise or shares knowledge can teach others.",
        "conclusion": "Alison teaches others."
      },
      {
        "facts": [
          "Alison teaches others."
        ],
        "rules": "For Alison, either she teaches others or advances medicine, but not both simultaneously.",
        "conclusion": "Alison does not advance medicine."
      },
      {
        "facts": [
          "Alison helps patients.",
          "Alison does not advance medicine."
        ],
        "rules": "If a medical professional earns recognition and helps patients, then they advance medicine.",
        "conclusion": "Alison does not earn recognition."
      },
      {
        "facts": [
          "Alison does not read research."
        ],
        "rules": "Every medical professional either reads research or stays updated.",
        "conclusion": "Alison stays updated."
      },
      {
        "facts": [
          "Alison stays updated.",
          "Alison does not earn recognition."
        ],
        "rules": "If a medical professional stays updated and improves patient outcomes, then they earn recognition.",
        "conclusion": "Alison does not improve patient outcomes."
      },
      {
        "facts": [
          "Alison does not improve patient outcomes."
        ],
        "rules": "For all medical professionals, if someone is a skilled surgeon, then they develop innovative procedures and improve patient outcomes.",
        "conclusion": "Alison is not a skilled surgeon."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "leads_workshops(Alison)",
          "¬trains_colleagues(Alison)"
        ],
        "rules": "(leads_workshops(Alison) ⊕ has_expertise(Alison)) → trains_colleagues(Alison)",
        "conclusion": "has_expertise(Alison)"
      },
      {
        "facts": [
          "has_expertise(Alison)",
          "shares_knowledge(Alison)"
        ],
        "rules": "∀x ((has_expertise(x) ∨ shares_knowledge(x)) → teaches_others(x))",
        "conclusion": "teaches_others(Alison)"
      },
      {
        "facts": [
          "teaches_others(Alison)"
        ],
        "rules": "teaches_others(Alison) ⊕ advances_medicine(Alison)",
        "conclusion": "¬advances_medicine(Alison)"
      },
      {
        "facts": [
          "helps_patients(Alison)",
          "¬advances_medicine(Alison)"
        ],
        "rules": "∀x ((earns_recognition(x) ∧ helps_patients(x)) → advances_medicine(x))",
        "conclusion": "¬earns_recognition(Alison)"
      },
      {
        "facts": [
          "¬reads_research(Alison)"
        ],
        "rules": "∀x (reads_research(x) ∨ stays_updated(x))",
        "conclusion": "stays_updated(Alison)"
      },
      {
        "facts": [
          "stays_updated(Alison)",
          "¬earns_recognition(Alison)"
        ],
        "rules": "∀x ((stays_updated(x) ∧ improve_patient_outcomes(x)) → earns_recognition(x))",
        "conclusion": "¬improve_patient_outcomes(Alison)"
      },
      {
        "facts": [
          "¬improve_patient_outcomes(Alison)"
        ],
        "rules": "∀x (skilled_surgeon(x) → (develop_innovative_procedures(x) ∧ improve_patient_outcomes(x)))",
        "conclusion": "¬skilled_surgeon(Alison)"
      }
    ],
    "conclusion": "Alison is not a skilled surgeon.",
    "conclusion_fol": "¬skilled_surgeon(Alison)",
    "answer": "True",
    "context": [
      "Alison leads workshops.",
      "Alison does not train her colleagues.",
      "If Alison either leads workshops or has expertise (but not both), then she can train colleagues.",
      "Alison shares knowledge.",
      "Any medical professional who has expertise or shares knowledge can teach others.",
      "For Alison, either she teaches others or advances medicine, but not both simultaneously.",
      "Alison helps patients.",
      "If a medical professional earns recognition and helps patients, then they advance medicine.",
      "Alison does not read research.",
      "Every medical professional either reads research or stays updated.",
      "If a medical professional stays updated and improves patient outcomes, then they earn recognition.",
      "For all medical professionals, if someone is a skilled surgeon, then they develop innovative procedures and improve patient outcomes."
    ],
    "context_fol": [
      "leads_workshops(Alison)",
      "¬trains_colleagues(Alison)",
      "(leads_workshops(Alison) ⊕ has_expertise(Alison)) → trains_colleagues(Alison)",
      "shares_knowledge(Alison)",
      "∀x ((has_expertise(x) ∨ shares_knowledge(x)) → teaches_others(x))",
      "teaches_others(Alison) ⊕ advances_medicine(Alison)",
      "helps_patients(Alison)",
      "∀x ((earns_recognition(x) ∧ helps_patients(x)) → advances_medicine(x))",
      "¬reads_research(Alison)",
      "∀x (reads_research(x) ∨ stays_updated(x))",
      "∀x ((stays_updated(x) ∧ improve_patient_outcomes(x)) → earns_recognition(x))",
      "∀x (skilled_surgeon(x) → (develop_innovative_procedures(x) ∧ improve_patient_outcomes(x)))"
    ],
    "background_story": "Alison, a skilled vascular surgeon, had a passion for improving blood flow in the human body. Her area of expertise was arterialization, a complex procedure that involved converting venous blood vessels into arterial ones to bypass blocked or damaged arteries. One of her most notable cases involved a young patient named Alex, who suffered from a rare condition that restricted blood flow to his lower limbs. Alison performed a groundbreaking arterialization surgery, carefully transforming a vein into an artery to restore blood flow. The procedure was a resounding success, and Alex was able to walk again without pain. Alison's innovative approach to arterialization earned her international recognition, and she continued to push the boundaries of medical science to help patients like Alex regain their mobility and quality of life.",
    "name": "Alison",
    "keyword": "arterialize",
    "subject_category": "medical professional"
  },
  {
    "facts": [
      "Charley is benevolent.",
      "Charley does not bring prosperity.",
      "Charley shapes the universe.",
      "Charley does not teach wisdom.",
      "Charley spreads love.",
      "Charley does not foster peace.",
      "Charley does not imbue wisdom.",
      "Charley does not nurture nature."
    ],
    "facts_fol": [
      "is_benevolent(Charley)",
      "¬bring_prosperity(Charley)",
      "shape_universe(Charley)",
      "¬teach_wisdom(Charley)",
      "spread_love(Charley)",
      "¬foster_peace(Charley)",
      "¬imbue_wisdom(Charley)",
      "¬nurture_nature(Charley)"
    ],
    "rules": [
      "For all mythological figures, if they possess divine power and share knowledge, then they will be revered.",
      "If Charley either heals wounds or shares knowledge (but not both), then he inspires devotion.",
      "If Charley is benevolent, then he either heals wounds or brings prosperity, but not both.",
      "If Charley inspires devotion or guides mortals, then he can create harmony.",
      "Every mythological figure who shapes the universe either possesses divine power or teaches wisdom.",
      "If a mythological figure spreads love and creates harmony, then they foster peace.",
      "Any mythological figure who imbues wisdom either guides mortals or nurtures nature."
    ],
    "rules_fol": [
      "∀x ((possess_divine_power(x) ∧ share_knowledge(x)) → be_revered(x))",
      "(heal_wounds(Charley) ⊕ share_knowledge(Charley)) → inspire_devotion(Charley)",
      "is_benevolent(Charley) → (heal_wounds(Charley) ⊕ bring_prosperity(Charley))",
      "(inspire_devotion(Charley) ∨ guide_mortals(Charley)) → create_harmony(Charley)",
      "∀x (shape_universe(x) → (possess_divine_power(x) ∨ teach_wisdom(x)))",
      "∀x ((spread_love(x) ∧ create_harmony(x)) → foster_peace(x))",
      "∀x (imbue_wisdom(x) → (guide_mortals(x) ∨ nurture_nature(x)))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Charley holds truth and seeks balance, then he shares knowledge.",
      "Charley either brings protection or heals wounds.",
      "Any mythological figure that offers protection or grants wisdom inspires devotion.",
      "Every mythological figure who crafts worlds either possesses divine power or holds wisdom.",
      "Any mythological figure who balances nature can create harmony.",
      "If Charley holds a staff, then he crafts worlds and guides mortals."
    ],
    "distracting_rules_fol": [
      "(holds_truth(Charley) ∧ seeks_balance(Charley)) → share_knowledge(Charley)",
      "brings_protection(Charley) ∨ heal_wounds(Charley)",
      "∀x ((offer_protection(x) ∨ grant_wisdom(x)) → inspire_devotion(x))",
      "∀x (craft_worlds(x) → (possess_divine_power(x) ∨ hold_wisdom(x)))",
      "∀x (balance_nature(x) → create_harmony(x))",
      "hold_staff(Charley) → (craft_worlds(Charley) ∧ guide_mortals(Charley))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Charley does not imbue wisdom.",
          "Charley does not nurture nature."
        ],
        "rules": "Any mythological figure who imbues wisdom either guides mortals or nurtures nature.",
        "conclusion": null
      },
      {
        "facts": [
          "Charley spreads love.",
          "Charley does not foster peace."
        ],
        "rules": "If a mythological figure spreads love and creates harmony, then they foster peace.",
        "conclusion": "Charley does not create harmony."
      },
      {
        "facts": [
          "Charley shapes the universe.",
          "Charley does not teach wisdom."
        ],
        "rules": "Every mythological figure who shapes the universe either possesses divine power or teaches wisdom.",
        "conclusion": "Charley possesses divine power."
      },
      {
        "facts": [
          "Charley does not create harmony."
        ],
        "rules": "If Charley inspires devotion or guides mortals, then he can create harmony.",
        "conclusion": "Charley does not inspire devotion."
      },
      {
        "facts": [
          "Charley is benevolent.",
          "Charley does not bring prosperity."
        ],
        "rules": "If Charley is benevolent, then he either heals wounds or brings prosperity, but not both.",
        "conclusion": "Charley heals wounds."
      },
      {
        "facts": [
          "Charley heals wounds.",
          "Charley does not inspire devotion."
        ],
        "rules": "If Charley either heals wounds or shares knowledge (but not both), then he inspires devotion.",
        "conclusion": "Charley shares knowledge."
      },
      {
        "facts": [
          "Charley possesses divine power.",
          "Charley shares knowledge."
        ],
        "rules": "For all mythological figures, if they possess divine power and share knowledge, then they will be revered.",
        "conclusion": "Charley is revered."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬imbue_wisdom(Charley)",
          "¬nurture_nature(Charley)"
        ],
        "rules": "∀x (imbue_wisdom(x) → (guide_mortals(x) ∨ nurture_nature(x)))",
        "conclusion": null
      },
      {
        "facts": [
          "spread_love(Charley)",
          "¬foster_peace(Charley)"
        ],
        "rules": "∀x ((spread_love(x) ∧ create_harmony(x)) → foster_peace(x))",
        "conclusion": "¬create_harmony(Charley)"
      },
      {
        "facts": [
          "shape_universe(Charley)",
          "¬teach_wisdom(Charley)"
        ],
        "rules": "∀x (shape_universe(x) → (possess_divine_power(x) ∨ teach_wisdom(x)))",
        "conclusion": "possess_divine_power(Charley)"
      },
      {
        "facts": [
          "¬create_harmony(Charley)"
        ],
        "rules": "(inspire_devotion(Charley) ∨ guide_mortals(Charley)) → create_harmony(Charley)",
        "conclusion": "¬inspire_devotion(Charley)"
      },
      {
        "facts": [
          "is_benevolent(Charley)",
          "¬bring_prosperity(Charley)"
        ],
        "rules": "is_benevolent(Charley) → (heal_wounds(Charley) ⊕ bring_prosperity(Charley))",
        "conclusion": "heal_wounds(Charley)"
      },
      {
        "facts": [
          "heal_wounds(Charley)",
          "¬inspire_devotion(Charley)"
        ],
        "rules": "(heal_wounds(Charley) ⊕ share_knowledge(Charley)) → inspire_devotion(Charley)",
        "conclusion": "share_knowledge(Charley)"
      },
      {
        "facts": [
          "possess_divine_power(Charley)",
          "share_knowledge(Charley)"
        ],
        "rules": "∀x ((possess_divine_power(x) ∧ share_knowledge(x)) → be_revered(x))",
        "conclusion": "be_revered(Charley)"
      }
    ],
    "conclusion": "Charley is revered.",
    "conclusion_fol": "be_revered(Charley)",
    "answer": "True",
    "context": [
      "Charley does not imbue wisdom.",
      "Charley does not nurture nature.",
      "Any mythological figure who imbues wisdom either guides mortals or nurtures nature.",
      "Charley spreads love.",
      "Charley does not foster peace.",
      "If a mythological figure spreads love and creates harmony, then they foster peace.",
      "Charley shapes the universe.",
      "Charley does not teach wisdom.",
      "Every mythological figure who shapes the universe either possesses divine power or teaches wisdom.",
      "If Charley inspires devotion or guides mortals, then he can create harmony.",
      "Charley is benevolent.",
      "Charley does not bring prosperity.",
      "If Charley is benevolent, then he either heals wounds or brings prosperity, but not both.",
      "If Charley either heals wounds or shares knowledge (but not both), then he inspires devotion.",
      "For all mythological figures, if they possess divine power and share knowledge, then they will be revered."
    ],
    "context_fol": [
      "¬imbue_wisdom(Charley)",
      "¬nurture_nature(Charley)",
      "∀x (imbue_wisdom(x) → (guide_mortals(x) ∨ nurture_nature(x)))",
      "spread_love(Charley)",
      "¬foster_peace(Charley)",
      "∀x ((spread_love(x) ∧ create_harmony(x)) → foster_peace(x))",
      "shape_universe(Charley)",
      "¬teach_wisdom(Charley)",
      "∀x (shape_universe(x) → (possess_divine_power(x) ∨ teach_wisdom(x)))",
      "(inspire_devotion(Charley) ∨ guide_mortals(Charley)) → create_harmony(Charley)",
      "is_benevolent(Charley)",
      "¬bring_prosperity(Charley)",
      "is_benevolent(Charley) → (heal_wounds(Charley) ⊕ bring_prosperity(Charley))",
      "(heal_wounds(Charley) ⊕ share_knowledge(Charley)) → inspire_devotion(Charley)",
      "∀x ((possess_divine_power(x) ∧ share_knowledge(x)) → be_revered(x))"
    ],
    "background_story": "In ancient mythology, Charley was revered as a god of creation and wisdom. Born from the primordial chaos, he wielded the power to shape the universe and bring forth life. With his staff, Charley crafted the mountains, oceans, and forests, imbuing each element with a spark of his divine essence. Mortals sought his counsel, and Charley shared his knowledge generously, teaching them the secrets of the cosmos and the balance of nature. His wisdom was boundless, and his compassion knew no limits. As the legend goes, Charley's divine presence still resonates throughout the world, guiding those who seek harmony and understanding. His legacy as a benevolent deity continues to inspire generations, reminding them of the beauty and wonder of the world he created.",
    "name": "Charley",
    "keyword": "god",
    "subject_category": "mythological figure"
  },
  {
    "facts": [
      "Zain does not take risks.",
      "Zain does not value diversity.",
      "Zain does not respect traditions.",
      "Zain does not have a passion for life."
    ],
    "facts_fol": [
      "¬takes_risks(Zain)",
      "¬value_diversity(Zain)",
      "¬respect_traditions(Zain)",
      "¬has_passion(Zain)"
    ],
    "rules": [
      "If Zain is adventurous, then he explores new places and shares his experiences.",
      "If Zain shares his experiences, then he is happy.",
      "If someone is adventurous, then they are bold.",
      "Zain is either bold or cautious, but not both.",
      "Zain sees beauty or is happy.",
      "Zain is either cautious or takes risks, but not both.",
      "Anyone who sees beauty either appreciates culture or captures moments.",
      "Anyone who appreciates culture either values diversity or respects traditions.",
      "If Zain captures moments, then he has a passion for life."
    ],
    "rules_fol": [
      "adventurous(Zain) → (explore_new_places(Zain) ∧ share_experiences(Zain))",
      "share_experiences(Zain) → happy(Zain)",
      "∀x (adventurous(x) → bold(x))",
      "bold(Zain) ⊕ is_cautious(Zain)",
      "sees_beauty(Zain) ∨ happy(Zain)",
      "is_cautious(Zain) ⊕ takes_risks(Zain)",
      "∀x (sees_beauty(x) → (appreciate_culture(x) ∨ capture_moments(x)))",
      "∀x (appreciate_culture(x) → (value_diversity(x) ∨ respect_traditions(x)))",
      "capture_moments(Zain) → has_passion(Zain)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Anyone who takes photos or writes stories shares their experiences.",
      "If Zain loves to travel, then he is adventurous.",
      "Anyone who is fearless is either bold or spontaneous (or both).",
      "Zain enjoys travel or is happy.",
      "If Zain travels frequently, then he is either cautious or enjoys freedom.",
      "If someone either loves nature or enjoys art (but not both), then they see beauty.",
      "If someone meets people and tries food, then they appreciate culture.",
      "If someone owns a camera and travels frequently, then they capture moments."
    ],
    "distracting_rules_fol": [
      "∀x ((takes_photos(x) ∨ writes_stories(x)) → share_experiences(x))",
      "loves_travel(Zain) → adventurous(Zain)",
      "∀x (fearless(x) → (bold(x) ∨ spontaneous(x)))",
      "enjoys_travel(Zain) ∨ happy(Zain)",
      "travels_frequently(Zain) → (is_cautious(Zain) ∨ enjoys_freedom(Zain))",
      "∀x ((loves_nature(x) ⊕ enjoys_art(x)) → sees_beauty(x))",
      "∀x ((meets_people(x) ∧ tries_food(x)) → appreciate_culture(x))",
      "∀x ((owns_camera(x) ∧ travels_frequently(x)) → capture_moments(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Zain does not have a passion for life."
        ],
        "rules": "If Zain captures moments, then he has a passion for life.",
        "conclusion": "Zain does not capture moments."
      },
      {
        "facts": [
          "Zain does not value diversity.",
          "Zain does not respect traditions."
        ],
        "rules": "Anyone who appreciates culture either values diversity or respects traditions.",
        "conclusion": "Zain does not appreciate culture."
      },
      {
        "facts": [
          "Zain does not appreciate culture.",
          "Zain does not capture moments."
        ],
        "rules": "Anyone who sees beauty either appreciates culture or captures moments.",
        "conclusion": "Zain does not see beauty."
      },
      {
        "facts": [
          "Zain does not take risks."
        ],
        "rules": "Zain is either cautious or takes risks, but not both.",
        "conclusion": "Zain is cautious."
      },
      {
        "facts": [
          "Zain does not see beauty."
        ],
        "rules": "Zain sees beauty or is happy.",
        "conclusion": "Zain is happy."
      },
      {
        "facts": [
          "Zain is cautious."
        ],
        "rules": "Zain is either bold or cautious, but not both.",
        "conclusion": "Zain is not bold."
      },
      {
        "facts": [
          "Zain is not bold."
        ],
        "rules": "If someone is adventurous, then they are bold.",
        "conclusion": "Zain is not adventurous."
      },
      {
        "facts": [
          "Zain is happy."
        ],
        "rules": "If Zain shares his experiences, then he is happy.",
        "conclusion": null
      },
      {
        "facts": [
          "Zain is not adventurous."
        ],
        "rules": "If Zain is adventurous, then he explores new places and shares his experiences.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬has_passion(Zain)"
        ],
        "rules": "capture_moments(Zain) → has_passion(Zain)",
        "conclusion": "¬capture_moments(Zain)"
      },
      {
        "facts": [
          "¬value_diversity(Zain)",
          "¬respect_traditions(Zain)"
        ],
        "rules": "∀x (appreciate_culture(x) → (value_diversity(x) ∨ respect_traditions(x)))",
        "conclusion": "¬appreciate_culture(Zain)"
      },
      {
        "facts": [
          "¬appreciate_culture(Zain)",
          "¬capture_moments(Zain)"
        ],
        "rules": "∀x (sees_beauty(x) → (appreciate_culture(x) ∨ capture_moments(x)))",
        "conclusion": "¬sees_beauty(Zain)"
      },
      {
        "facts": [
          "¬takes_risks(Zain)"
        ],
        "rules": "is_cautious(Zain) ⊕ takes_risks(Zain)",
        "conclusion": "is_cautious(Zain)"
      },
      {
        "facts": [
          "¬sees_beauty(Zain)"
        ],
        "rules": "sees_beauty(Zain) ∨ happy(Zain)",
        "conclusion": "happy(Zain)"
      },
      {
        "facts": [
          "is_cautious(Zain)"
        ],
        "rules": "bold(Zain) ⊕ is_cautious(Zain)",
        "conclusion": "¬bold(Zain)"
      },
      {
        "facts": [
          "¬bold(Zain)"
        ],
        "rules": "∀x (adventurous(x) → bold(x))",
        "conclusion": "¬adventurous(Zain)"
      },
      {
        "facts": [
          "happy(Zain)"
        ],
        "rules": "share_experiences(Zain) → happy(Zain)",
        "conclusion": null
      },
      {
        "facts": [
          "¬adventurous(Zain)"
        ],
        "rules": "adventurous(Zain) → (explore_new_places(Zain) ∧ share_experiences(Zain))",
        "conclusion": null
      }
    ],
    "conclusion": "Zain explores new places.",
    "conclusion_fol": "explore_new_places(Zain)",
    "answer": "Uncertain",
    "context": [
      "Zain does not have a passion for life.",
      "If Zain captures moments, then he has a passion for life.",
      "Zain does not value diversity.",
      "Zain does not respect traditions.",
      "Anyone who appreciates culture either values diversity or respects traditions.",
      "Anyone who sees beauty either appreciates culture or captures moments.",
      "Zain does not take risks.",
      "Zain is either cautious or takes risks, but not both.",
      "Zain sees beauty or is happy.",
      "Zain is either bold or cautious, but not both.",
      "If someone is adventurous, then they are bold.",
      "If Zain shares his experiences, then he is happy.",
      "If Zain is adventurous, then he explores new places and shares his experiences."
    ],
    "context_fol": [
      "¬has_passion(Zain)",
      "capture_moments(Zain) → has_passion(Zain)",
      "¬value_diversity(Zain)",
      "¬respect_traditions(Zain)",
      "∀x (appreciate_culture(x) → (value_diversity(x) ∨ respect_traditions(x)))",
      "∀x (sees_beauty(x) → (appreciate_culture(x) ∨ capture_moments(x)))",
      "¬takes_risks(Zain)",
      "is_cautious(Zain) ⊕ takes_risks(Zain)",
      "sees_beauty(Zain) ∨ happy(Zain)",
      "bold(Zain) ⊕ is_cautious(Zain)",
      "∀x (adventurous(x) → bold(x))",
      "share_experiences(Zain) → happy(Zain)",
      "adventurous(Zain) → (explore_new_places(Zain) ∧ share_experiences(Zain))"
    ],
    "background_story": "Zain, a free-spirited traveler, had a passion for sightseeing that knew no bounds. With a backpack full of maps and a camera slung over his shoulder, he explored the world's most breathtaking destinations. From the towering skyscrapers of Tokyo to the ancient ruins of Rome, Zain immersed himself in every culture, marveling at the unique sights, sounds, and flavors. His friends often joked that he had a sixth sense for discovering hidden gems, and his social media feeds were filled with stunning photos of sunsets, mountains, and cityscapes. Zain's love for sightseeing wasn't just about checking off a list; it was about experiencing the beauty and diversity of the world, and sharing that joy with others.",
    "name": "Zain",
    "keyword": "sightseeing",
    "subject_category": "human"
  },
  {
    "facts": [
      "Baker does not live harmoniously with others.",
      "Baker does not value reflection.",
      "Baker does not create beauty through his art.",
      "Baker does not cultivate serenity in his life.",
      "Baker pursues clarity."
    ],
    "facts_fol": [
      "¬live_harmoniously(Baker)",
      "¬value_reflection(Baker)",
      "¬create_beauty(Baker)",
      "¬cultivate_serenity(Baker)",
      "pursue_clarity(Baker)"
    ],
    "rules": [
      "If Baker appreciates nature and practices art, then he will be calm.",
      "Baker either appreciates nature or enjoys solitude.",
      "Anyone who is calm either creates beauty or finds inner peace (or both).",
      "Anyone who enjoys solitude either values reflection or seeks simplicity.",
      "Anyone who finds inner peace either lives harmoniously with others or cultivates serenity in their life.",
      "For Baker, seeking simplicity and pursuing clarity are mutually exclusive, meaning that if he seeks simplicity, he does not necessarily pursue clarity, and vice versa."
    ],
    "rules_fol": [
      "(appreciate_nature(Baker) ∧ practice_art(Baker)) → be_calm(Baker)",
      "appreciate_nature(Baker) ∨ enjoy_solitude(Baker)",
      "∀x (be_calm(x) → (create_beauty(x) ∨ find_inner_peace(x)))",
      "∀x (enjoy_solitude(x) → (value_reflection(x) ∨ seek_simplicity(x)))",
      "∀x (find_inner_peace(x) → (live_harmoniously(x) ∨ cultivate_serenity(x)))",
      "seek_simplicity(Baker) ⊕ pursue_clarity(Baker)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If a person either watches sunsets or hikes trails (but not both), then they appreciate nature.",
      "Baker feels happy or is calm.",
      "Everyone who loves quiet mornings either enjoys solitude or finds inspiration.",
      "If Baker meditates, then he either writes poetry or finds inner peace, but not both.",
      "If Baker embraces clarity and fosters personal growth, then he seeks simplicity."
    ],
    "distracting_rules_fol": [
      "∀x ((watch_sunsets(x) ⊕ hike_trails(x)) → appreciate_nature(x))",
      "feel_happy(Baker) ∨ be_calm(Baker)",
      "∀x (love_quiet_mornings(x) → (enjoy_solitude(x) ∨ find_inspiration(x)))",
      "meditate(Baker) → (write_poetry(Baker) ⊕ find_inner_peace(Baker))",
      "(embraces_clarity(Baker) ∧ fosters_growth(Baker)) → seek_simplicity(Baker)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Baker pursues clarity."
        ],
        "rules": "For Baker, seeking simplicity and pursuing clarity are mutually exclusive, meaning that if he seeks simplicity, he does not necessarily pursue clarity, and vice versa.",
        "conclusion": "Baker does not seek simplicity."
      },
      {
        "facts": [
          "Baker does not live harmoniously with others.",
          "Baker does not cultivate serenity in his life."
        ],
        "rules": "Anyone who finds inner peace either lives harmoniously with others or cultivates serenity in their life.",
        "conclusion": "Baker does not find inner peace."
      },
      {
        "facts": [
          "Baker does not value reflection.",
          "Baker does not seek simplicity."
        ],
        "rules": "Anyone who enjoys solitude either values reflection or seeks simplicity.",
        "conclusion": "Baker does not enjoy solitude."
      },
      {
        "facts": [
          "Baker does not create beauty through his art.",
          "Baker does not find inner peace."
        ],
        "rules": "Anyone who is calm either creates beauty or finds inner peace (or both).",
        "conclusion": "Baker is not calm."
      },
      {
        "facts": [
          "Baker does not enjoy solitude."
        ],
        "rules": "Baker either appreciates nature or enjoys solitude.",
        "conclusion": "Baker appreciates nature."
      },
      {
        "facts": [
          "Baker appreciates nature.",
          "Baker is not calm."
        ],
        "rules": "If Baker appreciates nature and practices art, then he will be calm.",
        "conclusion": "Baker practices art."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "pursue_clarity(Baker)"
        ],
        "rules": "seek_simplicity(Baker) ⊕ pursue_clarity(Baker)",
        "conclusion": "¬seek_simplicity(Baker)"
      },
      {
        "facts": [
          "¬live_harmoniously(Baker)",
          "¬cultivate_serenity(Baker)"
        ],
        "rules": "∀x (find_inner_peace(x) → (live_harmoniously(x) ∨ cultivate_serenity(x)))",
        "conclusion": "¬find_inner_peace(Baker)"
      },
      {
        "facts": [
          "¬value_reflection(Baker)",
          "¬seek_simplicity(Baker)"
        ],
        "rules": "∀x (enjoy_solitude(x) → (value_reflection(x) ∨ seek_simplicity(x)))",
        "conclusion": "¬enjoy_solitude(Baker)"
      },
      {
        "facts": [
          "¬create_beauty(Baker)",
          "¬find_inner_peace(Baker)"
        ],
        "rules": "∀x (be_calm(x) → (create_beauty(x) ∨ find_inner_peace(x)))",
        "conclusion": "¬be_calm(Baker)"
      },
      {
        "facts": [
          "¬enjoy_solitude(Baker)"
        ],
        "rules": "appreciate_nature(Baker) ∨ enjoy_solitude(Baker)",
        "conclusion": "appreciate_nature(Baker)"
      },
      {
        "facts": [
          "appreciate_nature(Baker)",
          "¬be_calm(Baker)"
        ],
        "rules": "(appreciate_nature(Baker) ∧ practice_art(Baker)) → be_calm(Baker)",
        "conclusion": "practice_art(Baker)"
      }
    ],
    "conclusion": "Baker practices art.",
    "conclusion_fol": "practice_art(Baker)",
    "answer": "False",
    "context": [
      "Baker pursues clarity.",
      "For Baker, seeking simplicity and pursuing clarity are mutually exclusive, meaning that if he seeks simplicity, he does not necessarily pursue clarity, and vice versa.",
      "Baker does not live harmoniously with others.",
      "Baker does not cultivate serenity in his life.",
      "Anyone who finds inner peace either lives harmoniously with others or cultivates serenity in their life.",
      "Baker does not value reflection.",
      "Anyone who enjoys solitude either values reflection or seeks simplicity.",
      "Baker does not create beauty through his art.",
      "Anyone who is calm either creates beauty or finds inner peace (or both).",
      "Baker either appreciates nature or enjoys solitude.",
      "If Baker appreciates nature and practices art, then he will be calm."
    ],
    "context_fol": [
      "pursue_clarity(Baker)",
      "seek_simplicity(Baker) ⊕ pursue_clarity(Baker)",
      "¬live_harmoniously(Baker)",
      "¬cultivate_serenity(Baker)",
      "∀x (find_inner_peace(x) → (live_harmoniously(x) ∨ cultivate_serenity(x)))",
      "¬value_reflection(Baker)",
      "∀x (enjoy_solitude(x) → (value_reflection(x) ∨ seek_simplicity(x)))",
      "¬create_beauty(Baker)",
      "∀x (be_calm(x) → (create_beauty(x) ∨ find_inner_peace(x)))",
      "appreciate_nature(Baker) ∨ enjoy_solitude(Baker)",
      "(appreciate_nature(Baker) ∧ practice_art(Baker)) → be_calm(Baker)"
    ],
    "background_story": "Baker was a gentle soul with a serene presence that calmed those around him. A talented painter, he found solace in the quiet mornings spent by the lake, watching the sunrise paint the sky with hues of pink and gold. His art studio, nestled among the trees, was a reflection of his peaceful nature. Baker's brushstrokes danced across the canvas, capturing the serenity of the natural world. As he worked, the soft lapping of the water against the shore and the sweet songs of birds created a symphony of tranquility. Baker's serene demeanor and art inspired all who met him, inviting them to step into his world of peaceful contemplation and creative expression.",
    "name": "Baker",
    "keyword": "serene",
    "subject_category": "human"
  },
  {
    "facts": [
      "Zamir is resilient.",
      "Zamir does not lead his crew.",
      "Zamir does not gain respect.",
      "Zamir is compassionate.",
      "Zamir does not lend a hand.",
      "Zamir does not read winds.",
      "Zamir charts courses."
    ],
    "facts_fol": [
      "is_resilient(Zamir)",
      "¬lead_crew(Zamir)",
      "¬gain_respect(Zamir)",
      "be_compassionate(Zamir)",
      "¬lend_a_hand(Zamir)",
      "¬read_winds(Zamir)",
      "chart_courses(Zamir)"
    ],
    "rules": [
      "If Zamir has experience and is determined, then he is a good sailor.",
      "Zamir sets goals or is determined.",
      "Zamir either sets goals or is resilient, but not necessarily both.",
      "If Zamir faces challenges, then he is experienced and stays focused.",
      "Anyone who navigates storms either leads their crew or faces challenges (or both).",
      "Zamir either stays focused on navigating the seas or shows empathy towards his crewmates and the stray cats he cares for, but not necessarily both at the same time.",
      "If a person shows empathy and helps others, then they gain respect.",
      "If Zamir is compassionate, then he either helps others or lends a hand, but not both.",
      "If Zamir either reads winds or charts courses (but not both), then he navigates storms."
    ],
    "rules_fol": [
      "(have_experience(Zamir) ∧ be_determined(Zamir)) → be_a_good_sailor(Zamir)",
      "sets_goals(Zamir) ∨ be_determined(Zamir)",
      "sets_goals(Zamir) ⊕ is_resilient(Zamir)",
      "face_challenges(Zamir) → (stay_focused(Zamir) ∧ have_experience(Zamir))",
      "∀x (navigate_storms(x) → (lead_crew(x) ∨ face_challenges(x)))",
      "stay_focused(Zamir) ⊕ show_empathy(Zamir)",
      "∀x ((show_empathy(x) ∧ help_others(x)) → gain_respect(x))",
      "be_compassionate(Zamir) → (help_others(Zamir) ⊕ lend_a_hand(Zamir))",
      "(read_winds(Zamir) ⊕ chart_courses(Zamir)) → navigate_storms(Zamir)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Anyone who works hard or stays motivated is determined.",
      "If Zamir either makes plans or seeks success (but not both), then he sets goals.",
      "If Zamir is confident, then he knows the sea and has experience.",
      "Anyone who works hard will face challenges.",
      "If a person works hard, then they stay focused and get results.",
      "If Zamir is disciplined, then he either has an adventurous spirit or shows empathy towards others, but not necessarily both at the same time.",
      "If Zamir cares for animals, then he either donates to charity or helps others.",
      "If Zamir sails the seas, then he either mentors others or navigates storms (or both)."
    ],
    "distracting_rules_fol": [
      "∀x ((works_hard(x) ∨ stays_motivated(x)) → be_determined(x))",
      "(makes_plans(Zamir) ⊕ seeks_success(Zamir)) → sets_goals(Zamir)",
      "be_confident(Zamir) → (know_sea(Zamir) ∧ have_experience(Zamir))",
      "∀x (work_hard(x) → face_challenges(x))",
      "∀x (work_hard(x) → (stay_focused(x) ∧ get_results(x)))",
      "is_disciplined(Zamir) → (be_adventurous(Zamir) ⊕ show_empathy(Zamir))",
      "care_for_animals(Zamir) → (donate_to_charity(Zamir) ∨ help_others(Zamir))",
      "sail_seas(Zamir) → (mentor_others(Zamir) ∨ navigate_storms(Zamir))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Zamir does not read winds.",
          "Zamir charts courses."
        ],
        "rules": "If Zamir either reads winds or charts courses (but not both), then he navigates storms.",
        "conclusion": "Zamir navigates storms."
      },
      {
        "facts": [
          "Zamir is compassionate.",
          "Zamir does not lend a hand."
        ],
        "rules": "If Zamir is compassionate, then he either helps others or lends a hand, but not both.",
        "conclusion": "Zamir helps others."
      },
      {
        "facts": [
          "Zamir helps others.",
          "Zamir does not gain respect."
        ],
        "rules": "If a person shows empathy and helps others, then they gain respect.",
        "conclusion": "Zamir does not show empathy towards his crewmates and the stray cats he cares for."
      },
      {
        "facts": [
          "Zamir does not show empathy towards his crewmates and the stray cats he cares for."
        ],
        "rules": "Zamir either stays focused on navigating the seas or shows empathy towards his crewmates and the stray cats he cares for, but not necessarily both at the same time.",
        "conclusion": "Zamir stays focused."
      },
      {
        "facts": [
          "Zamir navigates storms.",
          "Zamir does not lead his crew."
        ],
        "rules": "Anyone who navigates storms either leads their crew or faces challenges (or both).",
        "conclusion": "Zamir faces challenges."
      },
      {
        "facts": [
          "Zamir faces challenges.",
          "Zamir stays focused."
        ],
        "rules": "If Zamir faces challenges, then he is experienced and stays focused.",
        "conclusion": "Zamir has experience."
      },
      {
        "facts": [
          "Zamir is resilient."
        ],
        "rules": "Zamir either sets goals or is resilient, but not necessarily both.",
        "conclusion": "Zamir does not set goals."
      },
      {
        "facts": [
          "Zamir does not set goals."
        ],
        "rules": "Zamir sets goals or is determined.",
        "conclusion": "Zamir is determined."
      },
      {
        "facts": [
          "Zamir has experience.",
          "Zamir is determined."
        ],
        "rules": "If Zamir has experience and is determined, then he is a good sailor.",
        "conclusion": "Zamir is a good sailor."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬read_winds(Zamir)",
          "chart_courses(Zamir)"
        ],
        "rules": "(read_winds(Zamir) ⊕ chart_courses(Zamir)) → navigate_storms(Zamir)",
        "conclusion": "navigate_storms(Zamir)"
      },
      {
        "facts": [
          "be_compassionate(Zamir)",
          "¬lend_a_hand(Zamir)"
        ],
        "rules": "be_compassionate(Zamir) → (help_others(Zamir) ⊕ lend_a_hand(Zamir))",
        "conclusion": "help_others(Zamir)"
      },
      {
        "facts": [
          "help_others(Zamir)",
          "¬gain_respect(Zamir)"
        ],
        "rules": "∀x ((show_empathy(x) ∧ help_others(x)) → gain_respect(x))",
        "conclusion": "¬show_empathy(Zamir)"
      },
      {
        "facts": [
          "¬show_empathy(Zamir)"
        ],
        "rules": "stay_focused(Zamir) ⊕ show_empathy(Zamir)",
        "conclusion": "stay_focused(Zamir)"
      },
      {
        "facts": [
          "navigate_storms(Zamir)",
          "¬lead_crew(Zamir)"
        ],
        "rules": "∀x (navigate_storms(x) → (lead_crew(x) ∨ face_challenges(x)))",
        "conclusion": "face_challenges(Zamir)"
      },
      {
        "facts": [
          "face_challenges(Zamir)",
          "stay_focused(Zamir)"
        ],
        "rules": "face_challenges(Zamir) → (stay_focused(Zamir) ∧ have_experience(Zamir))",
        "conclusion": "have_experience(Zamir)"
      },
      {
        "facts": [
          "is_resilient(Zamir)"
        ],
        "rules": "sets_goals(Zamir) ⊕ is_resilient(Zamir)",
        "conclusion": "¬sets_goals(Zamir)"
      },
      {
        "facts": [
          "¬sets_goals(Zamir)"
        ],
        "rules": "sets_goals(Zamir) ∨ be_determined(Zamir)",
        "conclusion": "be_determined(Zamir)"
      },
      {
        "facts": [
          "have_experience(Zamir)",
          "be_determined(Zamir)"
        ],
        "rules": "(have_experience(Zamir) ∧ be_determined(Zamir)) → be_a_good_sailor(Zamir)",
        "conclusion": "be_a_good_sailor(Zamir)"
      }
    ],
    "conclusion": "Zamir is a good sailor.",
    "conclusion_fol": "be_a_good_sailor(Zamir)",
    "answer": "True",
    "context": [
      "Zamir does not read winds.",
      "Zamir charts courses.",
      "If Zamir either reads winds or charts courses (but not both), then he navigates storms.",
      "Zamir is compassionate.",
      "Zamir does not lend a hand.",
      "If Zamir is compassionate, then he either helps others or lends a hand, but not both.",
      "Zamir does not gain respect.",
      "If a person shows empathy and helps others, then they gain respect.",
      "Zamir either stays focused on navigating the seas or shows empathy towards his crewmates and the stray cats he cares for, but not necessarily both at the same time.",
      "Zamir does not lead his crew.",
      "Anyone who navigates storms either leads their crew or faces challenges (or both).",
      "If Zamir faces challenges, then he is experienced and stays focused.",
      "Zamir is resilient.",
      "Zamir either sets goals or is resilient, but not necessarily both.",
      "Zamir sets goals or is determined.",
      "If Zamir has experience and is determined, then he is a good sailor."
    ],
    "context_fol": [
      "¬read_winds(Zamir)",
      "chart_courses(Zamir)",
      "(read_winds(Zamir) ⊕ chart_courses(Zamir)) → navigate_storms(Zamir)",
      "be_compassionate(Zamir)",
      "¬lend_a_hand(Zamir)",
      "be_compassionate(Zamir) → (help_others(Zamir) ⊕ lend_a_hand(Zamir))",
      "¬gain_respect(Zamir)",
      "∀x ((show_empathy(x) ∧ help_others(x)) → gain_respect(x))",
      "stay_focused(Zamir) ⊕ show_empathy(Zamir)",
      "¬lead_crew(Zamir)",
      "∀x (navigate_storms(x) → (lead_crew(x) ∨ face_challenges(x)))",
      "face_challenges(Zamir) → (stay_focused(Zamir) ∧ have_experience(Zamir))",
      "is_resilient(Zamir)",
      "sets_goals(Zamir) ⊕ is_resilient(Zamir)",
      "sets_goals(Zamir) ∨ be_determined(Zamir)",
      "(have_experience(Zamir) ∧ be_determined(Zamir)) → be_a_good_sailor(Zamir)"
    ],
    "background_story": "Zamir was a gruff but lovable sailor who spent his life at sea. His weathered face would often scow in concentration as he navigated the choppiest of waters. Despite his tough exterior, Zamir had a soft spot for stray cats and would often sneak them onto his ship. His crewmates would joke that his scowl could curdle milk at 50 paces, but they knew that beneath his gruff demeanor lay a heart of gold. Zamir's years of experience had earned him a reputation as one of the most skilled sailors on the seven seas, and his scow of determination would inspire his crew to push through even the most treacherous storms.",
    "name": "Zamir",
    "keyword": "scow",
    "subject_category": "person"
  }
]