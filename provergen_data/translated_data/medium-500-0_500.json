[
  {
    "facts": [
      "Novah is a celebrated author.",
      "Novah conveys wisdom.",
      "Novah expresses herself deeply."
    ],
    "facts_fol": [
      "celebrated_author(Novah)",
      "conveys_wisdom(Novah)",
      "expresses_deeply(Novah)"
    ],
    "rules": [
      "For all authors, if an author is celebrated, then they either write profoundly or inspire readers (or both).",
      "Novah either crafts her words beautifully or writes profoundly, but not necessarily both.",
      "Any author who uses few words or conveys wisdom can craft their words beautifully.",
      "All authors who are terse use few words.",
      "Novah either expresses herself deeply or is terse in her writing, but not both."
    ],
    "rules_fol": [
      "∀x (celebrated_author(x) → (write_profoundly(x) ∨ inspire_readers(x)))",
      "craft_beautifully(Novah) ⊕ write_profoundly(Novah)",
      "∀x ((uses_few_words(x) ∨ conveys_wisdom(x)) → craft_beautifully(x))",
      "∀x (is_terse(x) → uses_few_words(x))",
      "expresses_deeply(Novah) ⊕ is_terse(Novah)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Novah is a widely published author, then she either writes profoundly or edits carefully, but not both.",
      "Every author who composes epigrams either creates timeless works or crafts their words beautifully.",
      "Novah writes clearly or uses few words.",
      "Every author who masters the epigram either writes elegantly or is terse (or both)."
    ],
    "distracting_rules_fol": [
      "published_widely(Novah) → (write_profoundly(Novah) ⊕ edits_carefully(Novah))",
      "∀x (compose_epigrams(x) → (create_timeless_works(x) ∨ craft_beautifully(x)))",
      "writes_clearly(Novah) ∨ uses_few_words(Novah)",
      "∀x (masters_epigram(x) → (writes_elegantly(x) ∨ is_terse(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Novah expresses herself deeply."
        ],
        "rules": "Novah either expresses herself deeply or is terse in her writing, but not both.",
        "conclusion": "Novah is not terse."
      },
      {
        "facts": [
          "Novah is not terse."
        ],
        "rules": "All authors who are terse use few words.",
        "conclusion": null
      },
      {
        "facts": [
          "Novah conveys wisdom."
        ],
        "rules": "Any author who uses few words or conveys wisdom can craft their words beautifully.",
        "conclusion": "Novah crafts her words beautifully."
      },
      {
        "facts": [
          "Novah crafts her words beautifully."
        ],
        "rules": "Novah either crafts her words beautifully or writes profoundly, but not necessarily both.",
        "conclusion": "Novah does not write profoundly."
      },
      {
        "facts": [
          "Novah is a celebrated author.",
          "Novah does not write profoundly."
        ],
        "rules": "For all authors, if an author is celebrated, then they either write profoundly or inspire readers (or both).",
        "conclusion": "Novah inspires readers."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "expresses_deeply(Novah)"
        ],
        "rules": "expresses_deeply(Novah) ⊕ is_terse(Novah)",
        "conclusion": "¬is_terse(Novah)"
      },
      {
        "facts": [
          "¬is_terse(Novah)"
        ],
        "rules": "∀x (is_terse(x) → uses_few_words(x))",
        "conclusion": null
      },
      {
        "facts": [
          "conveys_wisdom(Novah)"
        ],
        "rules": "∀x ((uses_few_words(x) ∨ conveys_wisdom(x)) → craft_beautifully(x))",
        "conclusion": "craft_beautifully(Novah)"
      },
      {
        "facts": [
          "craft_beautifully(Novah)"
        ],
        "rules": "craft_beautifully(Novah) ⊕ write_profoundly(Novah)",
        "conclusion": "¬write_profoundly(Novah)"
      },
      {
        "facts": [
          "celebrated_author(Novah)",
          "¬write_profoundly(Novah)"
        ],
        "rules": "∀x (celebrated_author(x) → (write_profoundly(x) ∨ inspire_readers(x)))",
        "conclusion": "inspire_readers(Novah)"
      }
    ],
    "conclusion": "Novah inspires readers.",
    "conclusion_fol": "inspire_readers(Novah)",
    "answer": "True",
    "context": [
      "Novah expresses herself deeply.",
      "Novah either expresses herself deeply or is terse in her writing, but not both.",
      "All authors who are terse use few words.",
      "Novah conveys wisdom.",
      "Any author who uses few words or conveys wisdom can craft their words beautifully.",
      "Novah either crafts her words beautifully or writes profoundly, but not necessarily both.",
      "Novah is a celebrated author.",
      "For all authors, if an author is celebrated, then they either write profoundly or inspire readers (or both)."
    ],
    "context_fol": [
      "expresses_deeply(Novah)",
      "expresses_deeply(Novah) ⊕ is_terse(Novah)",
      "∀x (is_terse(x) → uses_few_words(x))",
      "conveys_wisdom(Novah)",
      "∀x ((uses_few_words(x) ∨ conveys_wisdom(x)) → craft_beautifully(x))",
      "craft_beautifully(Novah) ⊕ write_profoundly(Novah)",
      "celebrated_author(Novah)",
      "∀x (celebrated_author(x) → (write_profoundly(x) ∨ inspire_readers(x)))"
    ],
    "background_story": "Novah was a celebrated author and poet known for her concise yet profound writings. She had a knack for crafting epigrams that cut to the heart of human experience. Her words, though few, were imbued with wisdom and wit, leaving readers to ponder their depth long after finishing her works. One of her most famous epigrams, 'Stars shine brightest in the darkest night,' became a beacon of hope for many. Novah's ability to distill complex emotions and ideas into brief, elegant phrases earned her a reputation as a master of the epigram. Her writings continue to inspire and provoke thought, a testament to the power of well-chosen words to illuminate the human condition.",
    "name": "Novah",
    "keyword": "epigram",
    "subject_category": "author"
  },
  {
    "facts": [
      "Adley is empathetic.",
      "Adley is supportive."
    ],
    "facts_fol": [
      "empathetic(Adley)",
      "is_supportive(Adley)"
    ],
    "rules": [
      "Adley is either a good listener or a bad listener, but not both.",
      "Anyone who is empathetic either has a caring nature or is a good listener.",
      "Adley is either supportive or has a caring nature, but not necessarily both."
    ],
    "rules_fol": [
      "good_listener(Adley) ⊕ bad_listener(Adley)",
      "∀x (empathetic(x) → (caring_nature(x) ∨ good_listener(x)))",
      "is_supportive(Adley) ⊕ caring_nature(Adley)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Anyone who remains calm or asks openly is a good listener.",
      "Anyone who nurtures others has a caring nature."
    ],
    "distracting_rules_fol": [
      "∀x ((remains_calm(x) ∨ asks_openly(x)) → good_listener(x))",
      "∀x (nurtures_others(x) → caring_nature(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Adley is supportive."
        ],
        "rules": "Adley is either supportive or has a caring nature, but not necessarily both.",
        "conclusion": "Adley does not have a caring nature."
      },
      {
        "facts": [
          "Adley is empathetic.",
          "Adley does not have a caring nature."
        ],
        "rules": "Anyone who is empathetic either has a caring nature or is a good listener.",
        "conclusion": "Adley is a good listener."
      },
      {
        "facts": [
          "Adley is a good listener."
        ],
        "rules": "Adley is either a good listener or a bad listener, but not both.",
        "conclusion": "Adley is a bad listener."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "is_supportive(Adley)"
        ],
        "rules": "is_supportive(Adley) ⊕ caring_nature(Adley)",
        "conclusion": "¬caring_nature(Adley)"
      },
      {
        "facts": [
          "empathetic(Adley)",
          "¬caring_nature(Adley)"
        ],
        "rules": "∀x (empathetic(x) → (caring_nature(x) ∨ good_listener(x)))",
        "conclusion": "good_listener(Adley)"
      },
      {
        "facts": [
          "good_listener(Adley)"
        ],
        "rules": "good_listener(Adley) ⊕ bad_listener(Adley)",
        "conclusion": "bad_listener(Adley)"
      }
    ],
    "conclusion": "Adley is a bad listener.",
    "conclusion_fol": "bad_listener(Adley)",
    "answer": "False",
    "context": [
      "Adley is supportive.",
      "Adley is either supportive or has a caring nature, but not necessarily both.",
      "Adley is empathetic.",
      "Anyone who is empathetic either has a caring nature or is a good listener.",
      "Adley is either a good listener or a bad listener, but not both."
    ],
    "context_fol": [
      "is_supportive(Adley)",
      "is_supportive(Adley) ⊕ caring_nature(Adley)",
      "empathetic(Adley)",
      "∀x (empathetic(x) → (caring_nature(x) ∨ good_listener(x)))",
      "good_listener(Adley) ⊕ bad_listener(Adley)"
    ],
    "background_story": "Adley was more than just a friend to those who knew her; she was a trusted confidant. With a keen listening ear and a compassionate heart, she had a way of making everyone feel heard and understood. People from all walks of life found solace in sharing their deepest secrets and fears with Adley, knowing that her discretion was unwavering. As a counselor at the local community center, Adley used her gift to help those struggling with mental health issues, relationship problems, and personal crises. Her calm demeanor and non-judgmental attitude created a safe space for open and honest conversations. Adley's role as a confidant extended beyond her professional life, as she was always available to lend a listening ear to friends and family, offering words of wisdom and comfort whenever needed.",
    "name": "Adley",
    "keyword": "confidant",
    "subject_category": "human"
  },
  {
    "facts": [
      "Tucker has low numbers.",
      "Tucker faces threats.",
      "Tucker is social."
    ],
    "facts_fol": [
      "has_low_numbers(Tucker)",
      "faces_threats(Tucker)",
      "is_social(Tucker)"
    ],
    "rules": [
      "If the aperea is endangered or rare, then it is protected.",
      "The aperea is either adaptive or rare, but not necessarily both.",
      "If the aperea either has low numbers or faces threats (but not both), then it is endangered.",
      "The aperea is either social or adaptive, but not necessarily both."
    ],
    "rules_fol": [
      "(endangered(Tucker) ∨ rare(Tucker)) → protected(Tucker)",
      "is_adaptive(Tucker) ⊕ rare(Tucker)",
      "(has_low_numbers(Tucker) ⊕ faces_threats(Tucker)) → endangered(Tucker)",
      "is_social(Tucker) ⊕ is_adaptive(Tucker)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If the aperea is a unique species, then it either receives conservation efforts or is rare.",
      "If the aperea is vulnerable, then it is endangered.",
      "Any animal that lives flexibly and evolves quickly is adaptive."
    ],
    "distracting_rules_fol": [
      "unique_species(Tucker) → (conservation_efforts(Tucker) ∨ rare(Tucker))",
      "vulnerable(Tucker) → endangered(Tucker)",
      "∀x ((lives_flexibly(x) ∧ evolves_quickly(x)) → is_adaptive(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Tucker is social."
        ],
        "rules": "The aperea is either social or adaptive, but not necessarily both.",
        "conclusion": "Tucker is not adaptive."
      },
      {
        "facts": [
          "Tucker has low numbers.",
          "Tucker faces threats."
        ],
        "rules": "If the aperea either has low numbers or faces threats (but not both), then it is endangered.",
        "conclusion": null
      },
      {
        "facts": [
          "Tucker is not adaptive."
        ],
        "rules": "The aperea is either adaptive or rare, but not necessarily both.",
        "conclusion": "The aperea Tucker is rare."
      },
      {
        "facts": [
          "The aperea Tucker is rare."
        ],
        "rules": "If the aperea is endangered or rare, then it is protected.",
        "conclusion": "Tucker is protected."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "is_social(Tucker)"
        ],
        "rules": "is_social(Tucker) ⊕ is_adaptive(Tucker)",
        "conclusion": "¬is_adaptive(Tucker)"
      },
      {
        "facts": [
          "has_low_numbers(Tucker)",
          "faces_threats(Tucker)"
        ],
        "rules": "(has_low_numbers(Tucker) ⊕ faces_threats(Tucker)) → endangered(Tucker)",
        "conclusion": null
      },
      {
        "facts": [
          "¬is_adaptive(Tucker)"
        ],
        "rules": "is_adaptive(Tucker) ⊕ rare(Tucker)",
        "conclusion": "rare(Tucker)"
      },
      {
        "facts": [
          "rare(Tucker)"
        ],
        "rules": "(endangered(Tucker) ∨ rare(Tucker)) → protected(Tucker)",
        "conclusion": "protected(Tucker)"
      }
    ],
    "conclusion": "Tucker is protected.",
    "conclusion_fol": "protected(Tucker)",
    "answer": "True",
    "context": [
      "Tucker is social.",
      "The aperea is either social or adaptive, but not necessarily both.",
      "Tucker has low numbers.",
      "Tucker faces threats.",
      "If the aperea either has low numbers or faces threats (but not both), then it is endangered.",
      "The aperea is either adaptive or rare, but not necessarily both.",
      "If the aperea is endangered or rare, then it is protected."
    ],
    "context_fol": [
      "is_social(Tucker)",
      "is_social(Tucker) ⊕ is_adaptive(Tucker)",
      "has_low_numbers(Tucker)",
      "faces_threats(Tucker)",
      "(has_low_numbers(Tucker) ⊕ faces_threats(Tucker)) → endangered(Tucker)",
      "is_adaptive(Tucker) ⊕ rare(Tucker)",
      "(endangered(Tucker) ∨ rare(Tucker)) → protected(Tucker)"
    ],
    "background_story": "Tucker was a unique and adventurous individual who had a fascination with the aperea, a rare and endangered rodent species native to South America. As a wildlife conservationist, Tucker dedicated his life to studying and protecting these remarkable creatures. He spent years in the Amazon rainforest, observing apereas in their natural habitat and learning about their behavior, diet, and social structures. Tucker's groundbreaking research helped raise awareness about the aperea's plight and the importance of preserving their habitats. His tireless efforts ultimately led to the establishment of a protected reserve, ensuring the long-term survival of this incredible species. Through his work, Tucker formed a deep bond with the apereas, earning their trust and respect, and proving himself to be a true champion of wildlife conservation.",
    "name": "Tucker",
    "keyword": "aperea",
    "subject_category": "animal"
  },
  {
    "facts": [
      "Giana is successful.",
      "Giana is talented.",
      "Giana does not connect with her audience.",
      "Giana does not compose original music.",
      "Giana records albums.",
      "Giana does not produce music."
    ],
    "facts_fol": [
      "successful(Giana)",
      "talented(Giana)",
      "¬connects_audience(Giana)",
      "¬composes_original(Giana)",
      "records_albums(Giana)",
      "¬produces_music(Giana)"
    ],
    "rules": [
      "If Giana is talented, then she is either famous or influential, but not both.",
      "If Giana is charismatic, then she is either influential or successful, but not both.",
      "If Giana either connects with her audience or writes hit songs (but not both), then she is charismatic.",
      "If Giana performs live, then she is either a composer of original music or a writer of hit songs, but not both.",
      "Every musician who records albums either performs live or produces music."
    ],
    "rules_fol": [
      "talented(Giana) → (famous(Giana) ⊕ influential(Giana))",
      "charismatic(Giana) → (influential(Giana) ⊕ successful(Giana))",
      "(connects_audience(Giana) ⊕ writes_hits(Giana)) → charismatic(Giana)",
      "performs_live(Giana) → (composes_original(Giana) ⊕ writes_hits(Giana))",
      "∀x (records_albums(x) → (performs_live(x) ∨ produces_music(x)))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Giana is creative, then she is both passionate and influential.",
      "If a musician has a strong stage presence and can move the crowd, then they are charismatic.",
      "If Giana crafts lyrics and creates melodies, then she writes hits.",
      "If Giana entertains the crowd, then she is either a creator of music videos or a live performer, but not both."
    ],
    "distracting_rules_fol": [
      "creative(Giana) → (passionate(Giana) ∧ influential(Giana))",
      "∀x ((has_stage(x) ∧ moves_crowd(x)) → charismatic(x))",
      "(crafts_lyrics(Giana) ∧ creates_melodies(Giana)) → writes_hits(Giana)",
      "entertains_crowd(Giana) → (creates_music_videos(Giana) ⊕ performs_live(Giana))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Giana records albums.",
          "Giana does not produce music."
        ],
        "rules": "Every musician who records albums either performs live or produces music.",
        "conclusion": "Giana performs live."
      },
      {
        "facts": [
          "Giana performs live.",
          "Giana does not compose original music."
        ],
        "rules": "If Giana performs live, then she is either a composer of original music or a writer of hit songs, but not both.",
        "conclusion": "Giana writes hit songs."
      },
      {
        "facts": [
          "Giana does not connect with her audience.",
          "Giana writes hit songs."
        ],
        "rules": "If Giana either connects with her audience or writes hit songs (but not both), then she is charismatic.",
        "conclusion": "Giana is charismatic."
      },
      {
        "facts": [
          "Giana is charismatic.",
          "Giana is successful."
        ],
        "rules": "If Giana is charismatic, then she is either influential or successful, but not both.",
        "conclusion": "Giana is not influential."
      },
      {
        "facts": [
          "Giana is talented.",
          "Giana is not influential."
        ],
        "rules": "If Giana is talented, then she is either famous or influential, but not both.",
        "conclusion": "Giana is famous."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "records_albums(Giana)",
          "¬produces_music(Giana)"
        ],
        "rules": "∀x (records_albums(x) → (performs_live(x) ∨ produces_music(x)))",
        "conclusion": "performs_live(Giana)"
      },
      {
        "facts": [
          "performs_live(Giana)",
          "¬composes_original(Giana)"
        ],
        "rules": "performs_live(Giana) → (composes_original(Giana) ⊕ writes_hits(Giana))",
        "conclusion": "writes_hits(Giana)"
      },
      {
        "facts": [
          "¬connects_audience(Giana)",
          "writes_hits(Giana)"
        ],
        "rules": "(connects_audience(Giana) ⊕ writes_hits(Giana)) → charismatic(Giana)",
        "conclusion": "charismatic(Giana)"
      },
      {
        "facts": [
          "charismatic(Giana)",
          "successful(Giana)"
        ],
        "rules": "charismatic(Giana) → (influential(Giana) ⊕ successful(Giana))",
        "conclusion": "¬influential(Giana)"
      },
      {
        "facts": [
          "talented(Giana)",
          "¬influential(Giana)"
        ],
        "rules": "talented(Giana) → (famous(Giana) ⊕ influential(Giana))",
        "conclusion": "famous(Giana)"
      }
    ],
    "conclusion": "Giana is famous.",
    "conclusion_fol": "famous(Giana)",
    "answer": "True",
    "context": [
      "Giana records albums.",
      "Giana does not produce music.",
      "Every musician who records albums either performs live or produces music.",
      "Giana does not compose original music.",
      "If Giana performs live, then she is either a composer of original music or a writer of hit songs, but not both.",
      "Giana does not connect with her audience.",
      "If Giana either connects with her audience or writes hit songs (but not both), then she is charismatic.",
      "Giana is successful.",
      "If Giana is charismatic, then she is either influential or successful, but not both.",
      "Giana is talented.",
      "If Giana is talented, then she is either famous or influential, but not both."
    ],
    "context_fol": [
      "records_albums(Giana)",
      "¬produces_music(Giana)",
      "∀x (records_albums(x) → (performs_live(x) ∨ produces_music(x)))",
      "¬composes_original(Giana)",
      "performs_live(Giana) → (composes_original(Giana) ⊕ writes_hits(Giana))",
      "¬connects_audience(Giana)",
      "(connects_audience(Giana) ⊕ writes_hits(Giana)) → charismatic(Giana)",
      "successful(Giana)",
      "charismatic(Giana) → (influential(Giana) ⊕ successful(Giana))",
      "talented(Giana)",
      "talented(Giana) → (famous(Giana) ⊕ influential(Giana))"
    ],
    "background_story": "Giana was a charismatic singer-songwriter who rose to fame with her powerful voice and captivating stage presence. After years of performing at local venues and festivals, she finally got her big break when she was invited to be the headliner at a major music festival. Giana's energetic performance, complete with dazzling light shows and heartfelt ballads, brought the crowd to its feet. Her setlist included hits from her latest album, which debuted at number one on the charts. As the headliner, Giana drew in a record-breaking audience, solidifying her position as a leading artist in the music industry. Her name became synonymous with exciting live performances, and she continued to tour the world, entertaining thousands with her unique talent and charisma.",
    "name": "Giana",
    "keyword": "headliner",
    "subject_category": "musician"
  },
  {
    "facts": [
      "Estella does not ignore warnings.",
      "Estella is not isolated.",
      "Estella seeks power.",
      "Estella takes risks."
    ],
    "facts_fol": [
      "¬ignore_warnings(Estella)",
      "¬isolated(Estella)",
      "seek_power(Estella)",
      "take_risks(Estella)"
    ],
    "rules": [
      "If Estella meddles with forces beyond her control, then she is either haunted or suffers consequences.",
      "If Estella either ignores warnings or defies superstitions (but not both), then she suffers consequences.",
      "If Estella seeks power, then she will defy superstitions and take risks."
    ],
    "rules_fol": [
      "meddle_with_forces(Estella) → (haunted(Estella) ∨ suffer_consequences(Estella))",
      "(ignore_warnings(Estella) ⊕ defy_superstitions(Estella)) → suffer_consequences(Estella)",
      "seek_power(Estella) → (defy_superstitions(Estella) ∧ take_risks(Estella))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Estella uncovers a dark secret, then she either faces paranoia or is haunted.",
      "If someone either disregards caution or tempts fate (but not both), then they will suffer consequences.",
      "If Estella doubts legends, then she will defy superstitions."
    ],
    "distracting_rules_fol": [
      "uncover_dark_secret(Estella) → (face_paranoia(Estella) ∨ haunted(Estella))",
      "∀x ((disregard_caution(x) ⊕ tempt_fate(x)) → suffer_consequences(x))",
      "doubt_legends(Estella) → defy_superstitions(Estella)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Estella seeks power.",
          "Estella takes risks."
        ],
        "rules": "If Estella seeks power, then she will defy superstitions and take risks.",
        "conclusion": "Estella defies superstitions."
      },
      {
        "facts": [
          "Estella does not ignore warnings.",
          "Estella defies superstitions."
        ],
        "rules": "If Estella either ignores warnings or defies superstitions (but not both), then she suffers consequences.",
        "conclusion": "Estella suffers consequences."
      },
      {
        "facts": [
          "Estella suffers consequences."
        ],
        "rules": "If Estella meddles with forces beyond her control, then she is either haunted or suffers consequences.",
        "conclusion": null
      },
      {
        "facts": [
          "Estella is not isolated."
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "seek_power(Estella)",
          "take_risks(Estella)"
        ],
        "rules": "seek_power(Estella) → (defy_superstitions(Estella) ∧ take_risks(Estella))",
        "conclusion": "defy_superstitions(Estella)"
      },
      {
        "facts": [
          "¬ignore_warnings(Estella)",
          "defy_superstitions(Estella)"
        ],
        "rules": "(ignore_warnings(Estella) ⊕ defy_superstitions(Estella)) → suffer_consequences(Estella)",
        "conclusion": "suffer_consequences(Estella)"
      },
      {
        "facts": [
          "suffer_consequences(Estella)"
        ],
        "rules": "meddle_with_forces(Estella) → (haunted(Estella) ∨ suffer_consequences(Estella))",
        "conclusion": null
      },
      {
        "facts": [
          "¬isolated(Estella)"
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "conclusion": "Estella is cursed, or haunted, or isolated.",
    "conclusion_fol": "cursed(Estella) ∨ (haunted(Estella) ∨ isolated(Estella))",
    "answer": "Uncertain",
    "context": [
      "Estella seeks power.",
      "Estella takes risks.",
      "If Estella seeks power, then she will defy superstitions and take risks.",
      "Estella does not ignore warnings.",
      "If Estella either ignores warnings or defies superstitions (but not both), then she suffers consequences.",
      "If Estella meddles with forces beyond her control, then she is either haunted or suffers consequences.",
      "Estella is not isolated."
    ],
    "context_fol": [
      "seek_power(Estella)",
      "take_risks(Estella)",
      "seek_power(Estella) → (defy_superstitions(Estella) ∧ take_risks(Estella))",
      "¬ignore_warnings(Estella)",
      "(ignore_warnings(Estella) ⊕ defy_superstitions(Estella)) → suffer_consequences(Estella)",
      "meddle_with_forces(Estella) → (haunted(Estella) ∨ suffer_consequences(Estella))",
      "¬isolated(Estella)"
    ],
    "background_story": "Estella was once a beautiful and kind-hearted young woman, but her life took a dark turn after she stumbled upon an ancient artifact. Unbeknownst to her, the artifact was cursed, bringing a terrible fate upon her family. One by one, her loved ones began to fall ill or suffer unfortunate accidents. Estella, realizing her connection to the curse, became isolated and withdrawn, afraid to let anyone close to her for fear of harming them. She spent her days researching ways to break the curse, but every attempt seemed to fail. The curse had become a constant, haunting presence in her life, a reminder of the destruction she felt she had unleashed. Estella's story became a cautionary tale, whispered about in hushed tones, a reminder of the dangers of meddling with forces beyond human understanding.",
    "name": "Estella",
    "keyword": "curse",
    "subject_category": "human"
  },
  {
    "facts": [
      "Abigail is not creative.",
      "Abigail is a pastry chef.",
      "Abigail makes cake."
    ],
    "facts_fol": [
      "¬creative(Abigail)",
      "pastry_chef(Abigail)",
      "makes_cake(Abigail)"
    ],
    "rules": [
      "If Abigail is a talented baker, then she is creative and successful.",
      "If Abigail is a pastry chef, then she is either a talented baker or a skilled decorator, but not both.",
      "Anyone who makes cake or designs well can be a skilled decorator."
    ],
    "rules_fol": [
      "talented_baker(Abigail) → (creative(Abigail) ∧ successful(Abigail))",
      "pastry_chef(Abigail) → (talented_baker(Abigail) ⊕ skilled_decorator(Abigail))",
      "∀x ((makes_cake(x) ∨ designs_well(x)) → skilled_decorator(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Anyone who perfects recipes or innovates flavors is a talented baker.",
      "If Abigail owns a bakery, then she is either a skilled decorator or an expert in icings, but not both."
    ],
    "distracting_rules_fol": [
      "∀x ((perfects_recipe(x) ∨ innovates_flavors(x)) → talented_baker(x))",
      "owns_bakery(Abigail) → (skilled_decorator(Abigail) ⊕ expert_icings(Abigail))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Abigail makes cake."
        ],
        "rules": "Anyone who makes cake or designs well can be a skilled decorator.",
        "conclusion": "Abigail is a skilled decorator."
      },
      {
        "facts": [
          "Abigail is a pastry chef.",
          "Abigail is a skilled decorator."
        ],
        "rules": "If Abigail is a pastry chef, then she is either a talented baker or a skilled decorator, but not both.",
        "conclusion": "Abigail is not a talented baker."
      },
      {
        "facts": [
          "Abigail is not a talented baker.",
          "Abigail is not creative."
        ],
        "rules": "If Abigail is a talented baker, then she is creative and successful.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "makes_cake(Abigail)"
        ],
        "rules": "∀x ((makes_cake(x) ∨ designs_well(x)) → skilled_decorator(x))",
        "conclusion": "skilled_decorator(Abigail)"
      },
      {
        "facts": [
          "pastry_chef(Abigail)",
          "skilled_decorator(Abigail)"
        ],
        "rules": "pastry_chef(Abigail) → (talented_baker(Abigail) ⊕ skilled_decorator(Abigail))",
        "conclusion": "¬talented_baker(Abigail)"
      },
      {
        "facts": [
          "¬talented_baker(Abigail)",
          "¬creative(Abigail)"
        ],
        "rules": "talented_baker(Abigail) → (creative(Abigail) ∧ successful(Abigail))",
        "conclusion": null
      }
    ],
    "conclusion": "Abigail is not successful.",
    "conclusion_fol": "¬successful(Abigail)",
    "answer": "Uncertain",
    "context": [
      "Abigail makes cake.",
      "Anyone who makes cake or designs well can be a skilled decorator.",
      "Abigail is a pastry chef.",
      "If Abigail is a pastry chef, then she is either a talented baker or a skilled decorator, but not both.",
      "Abigail is not creative.",
      "If Abigail is a talented baker, then she is creative and successful."
    ],
    "context_fol": [
      "makes_cake(Abigail)",
      "∀x ((makes_cake(x) ∨ designs_well(x)) → skilled_decorator(x))",
      "pastry_chef(Abigail)",
      "pastry_chef(Abigail) → (talented_baker(Abigail) ⊕ skilled_decorator(Abigail))",
      "¬creative(Abigail)",
      "talented_baker(Abigail) → (creative(Abigail) ∧ successful(Abigail))"
    ],
    "background_story": "Abigail was a talented baker known for her creative cake designs. However, she had a quirky preference - she loved her cakes unfrosted. While most bakers would slather on rich, sweet frosting, Abigail believed that the true beauty of a cake lay in its naked form. She would spend hours perfecting the texture and flavor of her cakes, from vanilla sponge to decadent chocolate. Abigail's bakery, 'Unfrosted Delights,' quickly gained a loyal following from those who appreciated the simplicity and elegance of her unfrosted creations. Despite the initial shock from traditional cake lovers, Abigail's passion and dedication to her craft earned her a reputation as a bold and innovative pastry chef.",
    "name": "Abigail",
    "keyword": "unfrosted",
    "subject_category": "human"
  },
  {
    "facts": [
      "Kenzo is a farm animal.",
      "Kenzo does not obey commands.",
      "Kenzo performs tricks."
    ],
    "facts_fol": [
      "farm_animal(Kenzo)",
      "¬obeys_commands(Kenzo)",
      "performs_tricks(Kenzo)"
    ],
    "rules": [
      "Every animal is either domesticated or wild.",
      "Kenzo is either tamed or domesticated.",
      "If Kenzo is a farm animal, then he is either tamed or trained, but not both.",
      "If Kenzo either obeys commands or performs tricks (but not both), then he is trained."
    ],
    "rules_fol": [
      "∀x (domesticated(x) ∨ wild(x))",
      "tamed(Kenzo) ∨ domesticated(Kenzo)",
      "farm_animal(Kenzo) → (tamed(Kenzo) ⊕ trained(Kenzo))",
      "(obeys_commands(Kenzo) ⊕ performs_tricks(Kenzo)) → trained(Kenzo)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Kenzo has feathers, then he is either feral or domesticated, but not both.",
      "If Kenzo receives affection or eats treats, then he is tamed.",
      "If Kenzo lives on a farm, then he is either social or trained, but not both."
    ],
    "distracting_rules_fol": [
      "has_feathers(Kenzo) → (is_feral(Kenzo) ⊕ domesticated(Kenzo))",
      "(receives_affection(Kenzo) ∨ eats_treats(Kenzo)) → tamed(Kenzo)",
      "lives_on_farm(Kenzo) → (is_social(Kenzo) ⊕ trained(Kenzo))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Kenzo does not obey commands.",
          "Kenzo performs tricks."
        ],
        "rules": "If Kenzo either obeys commands or performs tricks (but not both), then he is trained.",
        "conclusion": "Kenzo is trained."
      },
      {
        "facts": [
          "Kenzo is a farm animal.",
          "Kenzo is trained."
        ],
        "rules": "If Kenzo is a farm animal, then he is either tamed or trained, but not both.",
        "conclusion": "Kenzo is not tamed."
      },
      {
        "facts": [
          "Kenzo is not tamed."
        ],
        "rules": "Kenzo is either tamed or domesticated.",
        "conclusion": "Kenzo is domesticated."
      },
      {
        "facts": [
          "Kenzo is domesticated."
        ],
        "rules": "Every animal is either domesticated or wild.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬obeys_commands(Kenzo)",
          "performs_tricks(Kenzo)"
        ],
        "rules": "(obeys_commands(Kenzo) ⊕ performs_tricks(Kenzo)) → trained(Kenzo)",
        "conclusion": "trained(Kenzo)"
      },
      {
        "facts": [
          "farm_animal(Kenzo)",
          "trained(Kenzo)"
        ],
        "rules": "farm_animal(Kenzo) → (tamed(Kenzo) ⊕ trained(Kenzo))",
        "conclusion": "¬tamed(Kenzo)"
      },
      {
        "facts": [
          "¬tamed(Kenzo)"
        ],
        "rules": "tamed(Kenzo) ∨ domesticated(Kenzo)",
        "conclusion": "domesticated(Kenzo)"
      },
      {
        "facts": [
          "domesticated(Kenzo)"
        ],
        "rules": "∀x (domesticated(x) ∨ wild(x))",
        "conclusion": null
      }
    ],
    "conclusion": "Kenzo is not wild.",
    "conclusion_fol": "¬wild(Kenzo)",
    "answer": "Uncertain",
    "context": [
      "Kenzo does not obey commands.",
      "Kenzo performs tricks.",
      "If Kenzo either obeys commands or performs tricks (but not both), then he is trained.",
      "Kenzo is a farm animal.",
      "If Kenzo is a farm animal, then he is either tamed or trained, but not both.",
      "Kenzo is either tamed or domesticated.",
      "Every animal is either domesticated or wild."
    ],
    "context_fol": [
      "¬obeys_commands(Kenzo)",
      "performs_tricks(Kenzo)",
      "(obeys_commands(Kenzo) ⊕ performs_tricks(Kenzo)) → trained(Kenzo)",
      "farm_animal(Kenzo)",
      "farm_animal(Kenzo) → (tamed(Kenzo) ⊕ trained(Kenzo))",
      "tamed(Kenzo) ∨ domesticated(Kenzo)",
      "∀x (domesticated(x) ∨ wild(x))"
    ],
    "background_story": "Kenzo was a proud and fierce rooster who ruled the farm with his loud, melodious crow. His shiny black feathers and vibrant red comb made him a stunning sight to behold. Kenzo took his job as the farm's alarm clock very seriously, letting out a loud 'cock-a-doodle-doo' at the crack of dawn every day. He was protective of the hens and would fiercely defend them from any predators. Despite his tough exterior, Kenzo had a soft spot for the farmer's children, who would feed him treats and pet him gently. As the years passed, Kenzo became a beloved fixture on the farm, and his loud crowing was a reassuring sound that signaled the start of a new day.",
    "name": "Kenzo",
    "keyword": "cock",
    "subject_category": "animal"
  },
  {
    "facts": [
      "Dewdrop is rare.",
      "Dewdrop lives in the rainforest.",
      "Dewdrop is well-adapted to her environment.",
      "Dewdrop has wings."
    ],
    "facts_fol": [
      "rare(Dewdrop)",
      "lives_in_rainforest(Dewdrop)",
      "is_adapted(Dewdrop)",
      "has_wings(Dewdrop)"
    ],
    "rules": [
      "If Dewdrop has unique characteristics and faces threats, then she is endangered.",
      "All animals that live in the rainforest face threats.",
      "If Dewdrop is a specimen, then she either has unique characteristics or is well-adapted to her environment, but not both.",
      "If Dewdrop has wings, then she is a specimen."
    ],
    "rules_fol": [
      "(has_unique(Dewdrop) ∧ faces_threats(Dewdrop)) → endangered(Dewdrop)",
      "∀x (lives_in_rainforest(x) → faces_threats(x))",
      "is_specimen(Dewdrop) → (has_unique(Dewdrop) ⊕ is_adapted(Dewdrop))",
      "has_wings(Dewdrop) → is_specimen(Dewdrop)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Dewdrop is vulnerable, then she is endangered and needs protection.",
      "Any discovered animal either needs protection or faces threats (or both).",
      "If Dewdrop either reflects color or shines bright (but not both), then she has unique characteristics.",
      "Dewdrop is either wild or a specimen."
    ],
    "distracting_rules_fol": [
      "vulnerable(Dewdrop) → (endangered(Dewdrop) ∧ needs_protection(Dewdrop))",
      "∀x (is_discovered(x) → (needs_protection(x) ∨ faces_threats(x)))",
      "(reflects_color(Dewdrop) ⊕ shines_bright(Dewdrop)) → has_unique(Dewdrop)",
      "is_wild(Dewdrop) ∨ is_specimen(Dewdrop)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Dewdrop has wings."
        ],
        "rules": "If Dewdrop has wings, then she is a specimen.",
        "conclusion": "Dewdrop is a specimen."
      },
      {
        "facts": [
          "Dewdrop is a specimen.",
          "Dewdrop is well-adapted to her environment."
        ],
        "rules": "If Dewdrop is a specimen, then she either has unique characteristics or is well-adapted to her environment, but not both.",
        "conclusion": "Dewdrop does not have unique characteristics."
      },
      {
        "facts": [
          "Dewdrop lives in the rainforest."
        ],
        "rules": "All animals that live in the rainforest face threats.",
        "conclusion": "Dewdrop faces threats."
      },
      {
        "facts": [
          "Dewdrop does not have unique characteristics.",
          "Dewdrop faces threats."
        ],
        "rules": "If Dewdrop has unique characteristics and faces threats, then she is endangered.",
        "conclusion": null
      },
      {
        "facts": [
          "Dewdrop is rare."
        ],
        "rules": null,
        "conclusion": "Dewdrop is either rare or endangered (or both)."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "has_wings(Dewdrop)"
        ],
        "rules": "has_wings(Dewdrop) → is_specimen(Dewdrop)",
        "conclusion": "is_specimen(Dewdrop)"
      },
      {
        "facts": [
          "is_specimen(Dewdrop)",
          "is_adapted(Dewdrop)"
        ],
        "rules": "is_specimen(Dewdrop) → (has_unique(Dewdrop) ⊕ is_adapted(Dewdrop))",
        "conclusion": "¬has_unique(Dewdrop)"
      },
      {
        "facts": [
          "lives_in_rainforest(Dewdrop)"
        ],
        "rules": "∀x (lives_in_rainforest(x) → faces_threats(x))",
        "conclusion": "faces_threats(Dewdrop)"
      },
      {
        "facts": [
          "¬has_unique(Dewdrop)",
          "faces_threats(Dewdrop)"
        ],
        "rules": "(has_unique(Dewdrop) ∧ faces_threats(Dewdrop)) → endangered(Dewdrop)",
        "conclusion": null
      },
      {
        "facts": [
          "rare(Dewdrop)"
        ],
        "rules": null,
        "conclusion": "rare(Dewdrop) ∨ endangered(Dewdrop)"
      }
    ],
    "conclusion": "Dewdrop is either rare or endangered (or both).",
    "conclusion_fol": "rare(Dewdrop) ∨ endangered(Dewdrop)",
    "answer": "True",
    "context": [
      "Dewdrop has wings.",
      "If Dewdrop has wings, then she is a specimen.",
      "Dewdrop is well-adapted to her environment.",
      "If Dewdrop is a specimen, then she either has unique characteristics or is well-adapted to her environment, but not both.",
      "Dewdrop lives in the rainforest.",
      "All animals that live in the rainforest face threats.",
      "If Dewdrop has unique characteristics and faces threats, then she is endangered.",
      "Dewdrop is rare."
    ],
    "context_fol": [
      "has_wings(Dewdrop)",
      "has_wings(Dewdrop) → is_specimen(Dewdrop)",
      "is_adapted(Dewdrop)",
      "is_specimen(Dewdrop) → (has_unique(Dewdrop) ⊕ is_adapted(Dewdrop))",
      "lives_in_rainforest(Dewdrop)",
      "∀x (lives_in_rainforest(x) → faces_threats(x))",
      "(has_unique(Dewdrop) ∧ faces_threats(Dewdrop)) → endangered(Dewdrop)",
      "rare(Dewdrop)"
    ],
    "background_story": "Dewdrop, a rare and exquisite butterfly, was discovered in a recent expedition to the Amazon rainforest. Her species, thought to be extinct, was found thriving in a hidden valley. The news of her discovery sent shockwaves through the scientific community, as Dewdrop's existence shed new light on the region's unique ecosystem. Researchers were fascinated by her iridescent wings, which reflected the colors of the rainbow. As the most recent discovery in the field of entomology, Dewdrop has become an ambassador for her species, inspiring efforts to protect and preserve the delicate balance of the rainforest. Her discovery has also sparked new initiatives to explore and understand the uncharted territories of the Amazon, making her a symbol of the wonders that still await us in the natural world.",
    "name": "Dewdrop",
    "keyword": "recent",
    "subject_category": "animal"
  },
  {
    "facts": [
      "Melanie has a curious mind.",
      "Melanie has a bold spirit."
    ],
    "facts_fol": [
      "curious_mind(Melanie)",
      "bold_spirit(Melanie)"
    ],
    "rules": [
      "Melanie is either an explorer or a scholar (or both).",
      "All adventurous fictional characters are explorers and have a curious mind.",
      "If Melanie has a bold spirit, then she seeks knowledge and is adventurous."
    ],
    "rules_fol": [
      "explorer(Melanie) ∨ scholar(Melanie)",
      "∀x (adventurous(x) → (explorer(x) ∧ curious_mind(x)))",
      "bold_spirit(Melanie) → (seek_knowledge(Melanie) ∧ adventurous(Melanie))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Melanie is a space traveler, then she is either an explorer or an archaeologist, but not both.",
      "If Melanie is fearless, then she is adventurous and quick-witted."
    ],
    "distracting_rules_fol": [
      "space_traveler(Melanie) → (explorer(Melanie) ⊕ archaeologist(Melanie))",
      "fearless(Melanie) → (adventurous(Melanie) ∧ quick_witted(Melanie))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Melanie has a bold spirit."
        ],
        "rules": "If Melanie has a bold spirit, then she seeks knowledge and is adventurous.",
        "conclusion": "Melanie is adventurous."
      },
      {
        "facts": [
          "Melanie is adventurous.",
          "Melanie has a curious mind."
        ],
        "rules": "All adventurous fictional characters are explorers and have a curious mind.",
        "conclusion": "Melanie is an explorer."
      },
      {
        "facts": [
          "Melanie is an explorer."
        ],
        "rules": "Melanie is either an explorer or a scholar (or both).",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "bold_spirit(Melanie)"
        ],
        "rules": "bold_spirit(Melanie) → (seek_knowledge(Melanie) ∧ adventurous(Melanie))",
        "conclusion": "adventurous(Melanie)"
      },
      {
        "facts": [
          "adventurous(Melanie)",
          "curious_mind(Melanie)"
        ],
        "rules": "∀x (adventurous(x) → (explorer(x) ∧ curious_mind(x)))",
        "conclusion": "explorer(Melanie)"
      },
      {
        "facts": [
          "explorer(Melanie)"
        ],
        "rules": "explorer(Melanie) ∨ scholar(Melanie)",
        "conclusion": null
      }
    ],
    "conclusion": "Melanie is a scholar.",
    "conclusion_fol": "scholar(Melanie)",
    "answer": "Uncertain",
    "context": [
      "Melanie has a bold spirit.",
      "If Melanie has a bold spirit, then she seeks knowledge and is adventurous.",
      "Melanie has a curious mind.",
      "All adventurous fictional characters are explorers and have a curious mind.",
      "Melanie is either an explorer or a scholar (or both)."
    ],
    "context_fol": [
      "bold_spirit(Melanie)",
      "bold_spirit(Melanie) → (seek_knowledge(Melanie) ∧ adventurous(Melanie))",
      "curious_mind(Melanie)",
      "∀x (adventurous(x) → (explorer(x) ∧ curious_mind(x)))",
      "explorer(Melanie) ∨ scholar(Melanie)"
    ],
    "background_story": "Melanie was an intergalactic explorer who stumbled upon a mysterious planet called Trilisa. This enigmatic world was hidden in a distant galaxy, filled with ancient artifacts and untold wonders. As Melanie delved deeper into the planet's secrets, she discovered that Trilisa was once home to an advanced civilization that possessed knowledge and technologies beyond human understanding. With her curiosity piqued, Melanie dedicated herself to unraveling the mysteries of Trilisa, deciphering its ancient texts and unlocking its hidden chambers. Her journey on Trilisa became a quest for knowledge, adventure, and self-discovery, changing her life forever and earning her the title of the foremost expert on this mystical planet.",
    "name": "Melanie",
    "keyword": "trilisa",
    "subject_category": "fictional character"
  },
  {
    "facts": [
      "Skylar reduces waste.",
      "Skylar loves nature.",
      "Skylar preserves land."
    ],
    "facts_fol": [
      "reduces_waste(Skylar)",
      "loves_nature(Skylar)",
      "preserves_land(Skylar)"
    ],
    "rules": [
      "Skylar either protects the environment or supports local communities (or both).",
      "Anyone who fights deforestation either protects the environment or promotes conservation.",
      "If Skylar loves nature, then she either reduces waste or promotes conservation, but not both.",
      "Anyone who saves wildlife or preserves land can fight deforestation."
    ],
    "rules_fol": [
      "protects_environment(Skylar) ∨ supports_local_communities(Skylar)",
      "∀x (fights_deforestation(x) → (protects_environment(x) ∨ promotes_conservation(x)))",
      "loves_nature(Skylar) → (reduces_waste(Skylar) ⊕ promotes_conservation(Skylar))",
      "∀x ((saves_wildlife(x) ∨ preserves_land(x)) → fights_deforestation(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If a person cares about ecosystems and works with villages, then they protect the environment.",
      "If Skylar either educates others or restores habitats (but not both), then she promotes conservation.",
      "If Skylar is an environmentalist, then she either raises awareness or fights deforestation (but not both)."
    ],
    "distracting_rules_fol": [
      "∀x ((cares_about_ecosystems(x) ∧ works_with_villages(x)) → protects_environment(x))",
      "(educates_others(Skylar) ⊕ restores_habitats(Skylar)) → promotes_conservation(Skylar)",
      "is_environmentalist(Skylar) → (raises_awareness(Skylar) ⊕ fights_deforestation(Skylar))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Skylar preserves land."
        ],
        "rules": "Anyone who saves wildlife or preserves land can fight deforestation.",
        "conclusion": "Skylar fights deforestation."
      },
      {
        "facts": [
          "Skylar loves nature.",
          "Skylar reduces waste."
        ],
        "rules": "If Skylar loves nature, then she either reduces waste or promotes conservation, but not both.",
        "conclusion": "Skylar does not promote conservation."
      },
      {
        "facts": [
          "Skylar fights deforestation.",
          "Skylar does not promote conservation."
        ],
        "rules": "Anyone who fights deforestation either protects the environment or promotes conservation.",
        "conclusion": "Skylar protects the environment."
      },
      {
        "facts": [
          "Skylar protects the environment."
        ],
        "rules": "Skylar either protects the environment or supports local communities (or both).",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "preserves_land(Skylar)"
        ],
        "rules": "∀x ((saves_wildlife(x) ∨ preserves_land(x)) → fights_deforestation(x))",
        "conclusion": "fights_deforestation(Skylar)"
      },
      {
        "facts": [
          "loves_nature(Skylar)",
          "reduces_waste(Skylar)"
        ],
        "rules": "loves_nature(Skylar) → (reduces_waste(Skylar) ⊕ promotes_conservation(Skylar))",
        "conclusion": "¬promotes_conservation(Skylar)"
      },
      {
        "facts": [
          "fights_deforestation(Skylar)",
          "¬promotes_conservation(Skylar)"
        ],
        "rules": "∀x (fights_deforestation(x) → (protects_environment(x) ∨ promotes_conservation(x)))",
        "conclusion": "protects_environment(Skylar)"
      },
      {
        "facts": [
          "protects_environment(Skylar)"
        ],
        "rules": "protects_environment(Skylar) ∨ supports_local_communities(Skylar)",
        "conclusion": null
      }
    ],
    "conclusion": "Skylar supports local communities.",
    "conclusion_fol": "supports_local_communities(Skylar)",
    "answer": "Uncertain",
    "context": [
      "Skylar preserves land.",
      "Anyone who saves wildlife or preserves land can fight deforestation.",
      "Skylar loves nature.",
      "Skylar reduces waste.",
      "If Skylar loves nature, then she either reduces waste or promotes conservation, but not both.",
      "Anyone who fights deforestation either protects the environment or promotes conservation.",
      "Skylar either protects the environment or supports local communities (or both)."
    ],
    "context_fol": [
      "preserves_land(Skylar)",
      "∀x ((saves_wildlife(x) ∨ preserves_land(x)) → fights_deforestation(x))",
      "loves_nature(Skylar)",
      "reduces_waste(Skylar)",
      "loves_nature(Skylar) → (reduces_waste(Skylar) ⊕ promotes_conservation(Skylar))",
      "∀x (fights_deforestation(x) → (protects_environment(x) ∨ promotes_conservation(x)))",
      "protects_environment(Skylar) ∨ supports_local_communities(Skylar)"
    ],
    "background_story": "Skylar, a passionate environmentalist, had always been drawn to the lush forests of South America. She spent years researching the unique ecosystem of the Arauca region in Colombia, known for its incredible biodiversity. Determined to make a difference, Skylar founded a non-profit organization aimed at preserving the Arauca's natural wonders. She worked tirelessly with local communities to develop sustainable farming practices, protecting the land from deforestation and habitat destruction. Skylar's efforts paid off as the Arauca began to flourish once more, becoming a thriving example of conservation success. Her dedication to the region and its people earned her the respect and admiration of the community, who welcomed her as one of their own.",
    "name": "Skylar",
    "keyword": "arauca",
    "subject_category": "human"
  },
  {
    "facts": [
      "Lina is a singer."
    ],
    "facts_fol": [
      "singer(Lina)"
    ],
    "rules": [
      "Lina is either a comedian or a serious actor, but not both.",
      "Lina is either a dancer or a comedian.",
      "Lina is either a singer or a dancer, but not both."
    ],
    "rules_fol": [
      "comedian(Lina) ⊕ serious_actor(Lina)",
      "dancer(Lina) ∨ comedian(Lina)",
      "singer(Lina) ⊕ dancer(Lina)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Lina either makes jokes or tells stories (but not both), then she is a comedian.",
      "If an entertainer loves rhythm and enjoys performing, then they can be a dancer."
    ],
    "distracting_rules_fol": [
      "(makes_jokes(Lina) ⊕ tells_stories(Lina)) → comedian(Lina)",
      "∀x ((loves_rhythm(x) ∧ enjoys_performing(x)) → dancer(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Lina is a singer."
        ],
        "rules": "Lina is either a singer or a dancer, but not both.",
        "conclusion": "Lina is not a dancer."
      },
      {
        "facts": [
          "Lina is not a dancer."
        ],
        "rules": "Lina is either a dancer or a comedian.",
        "conclusion": "Lina is a comedian."
      },
      {
        "facts": [
          "Lina is a comedian."
        ],
        "rules": "Lina is either a comedian or a serious actor, but not both.",
        "conclusion": "Lina is a serious actor."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "singer(Lina)"
        ],
        "rules": "singer(Lina) ⊕ dancer(Lina)",
        "conclusion": "¬dancer(Lina)"
      },
      {
        "facts": [
          "¬dancer(Lina)"
        ],
        "rules": "dancer(Lina) ∨ comedian(Lina)",
        "conclusion": "comedian(Lina)"
      },
      {
        "facts": [
          "comedian(Lina)"
        ],
        "rules": "comedian(Lina) ⊕ serious_actor(Lina)",
        "conclusion": "serious_actor(Lina)"
      }
    ],
    "conclusion": "Lina is a serious actor.",
    "conclusion_fol": "serious_actor(Lina)",
    "answer": "False",
    "context": [
      "Lina is a singer.",
      "Lina is either a singer or a dancer, but not both.",
      "Lina is either a dancer or a comedian.",
      "Lina is either a comedian or a serious actor, but not both."
    ],
    "context_fol": [
      "singer(Lina)",
      "singer(Lina) ⊕ dancer(Lina)",
      "dancer(Lina) ∨ comedian(Lina)",
      "comedian(Lina) ⊕ serious_actor(Lina)"
    ],
    "background_story": "Lina was a comedian known for her infectious laughter and ability to make anyone laugh. Born into a family of jesters, she learned the art of comedy from a young age. Her stage name, 'Laffer,' was coined due to her contagious giggles that could bring joy to even the most solemn of faces. Lina's stand-up routines often poked fun at everyday situations, making her a beloved figure in the comedy world. She had a gift for finding humor in the mundane, and her audiences adored her for it. With a career spanning decades, Lina 'Laffer' became synonymous with laughter and good cheer, spreading joy to countless people around the world.",
    "name": "Lina",
    "keyword": "laffer",
    "subject_category": "entertainer"
  },
  {
    "facts": [
      "Cutie plays outside.",
      "Cutie does not protect her habitat."
    ],
    "facts_fol": [
      "play_outside(Cutie)",
      "¬protect_habitat(Cutie)"
    ],
    "rules": [
      "If Cutie loves nature, then she either educates visitors or promotes conservation, but not both.",
      "Cutie either hops freely or loves nature, but not both.",
      "Cutie either plays outside or hops freely, but not both.",
      "Cutie either protects her habitat or promotes conservation, but not both."
    ],
    "rules_fol": [
      "love_nature(Cutie) → (educate_visitors(Cutie) ⊕ promote_conservation(Cutie))",
      "hop_freely(Cutie) ⊕ love_nature(Cutie)",
      "play_outside(Cutie) ⊕ hop_freely(Cutie)",
      "protect_habitat(Cutie) ⊕ promote_conservation(Cutie)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Cutie lives in the wild, then she either loves nature or cares for the environment.",
      "Every rabbit that feels joy hops freely.",
      "If Cutie lives in the wild, then she either promotes conservation or cares for her environment."
    ],
    "distracting_rules_fol": [
      "live_wild(Cutie) → (love_nature(Cutie) ∨ care_environment(Cutie))",
      "∀x (feel_joy(x) → hop_freely(x))",
      "live_wild(Cutie) → (promote_conservation(Cutie) ∨ care_environment(Cutie))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Cutie does not protect her habitat."
        ],
        "rules": "Cutie either protects her habitat or promotes conservation, but not both.",
        "conclusion": "Cutie promotes conservation."
      },
      {
        "facts": [
          "Cutie plays outside."
        ],
        "rules": "Cutie either plays outside or hops freely, but not both.",
        "conclusion": "Cutie does not hop freely."
      },
      {
        "facts": [
          "Cutie does not hop freely."
        ],
        "rules": "Cutie either hops freely or loves nature, but not both.",
        "conclusion": "Cutie loves nature."
      },
      {
        "facts": [
          "Cutie loves nature.",
          "Cutie promotes conservation."
        ],
        "rules": "If Cutie loves nature, then she either educates visitors or promotes conservation, but not both.",
        "conclusion": "Cutie educates visitors."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬protect_habitat(Cutie)"
        ],
        "rules": "protect_habitat(Cutie) ⊕ promote_conservation(Cutie)",
        "conclusion": "promote_conservation(Cutie)"
      },
      {
        "facts": [
          "play_outside(Cutie)"
        ],
        "rules": "play_outside(Cutie) ⊕ hop_freely(Cutie)",
        "conclusion": "¬hop_freely(Cutie)"
      },
      {
        "facts": [
          "¬hop_freely(Cutie)"
        ],
        "rules": "hop_freely(Cutie) ⊕ love_nature(Cutie)",
        "conclusion": "love_nature(Cutie)"
      },
      {
        "facts": [
          "love_nature(Cutie)",
          "promote_conservation(Cutie)"
        ],
        "rules": "love_nature(Cutie) → (educate_visitors(Cutie) ⊕ promote_conservation(Cutie))",
        "conclusion": "educate_visitors(Cutie)"
      }
    ],
    "conclusion": "Cutie educates visitors.",
    "conclusion_fol": "educate_visitors(Cutie)",
    "answer": "False",
    "context": [
      "Cutie does not protect her habitat.",
      "Cutie either protects her habitat or promotes conservation, but not both.",
      "Cutie plays outside.",
      "Cutie either plays outside or hops freely, but not both.",
      "Cutie either hops freely or loves nature, but not both.",
      "If Cutie loves nature, then she either educates visitors or promotes conservation, but not both."
    ],
    "context_fol": [
      "¬protect_habitat(Cutie)",
      "protect_habitat(Cutie) ⊕ promote_conservation(Cutie)",
      "play_outside(Cutie)",
      "play_outside(Cutie) ⊕ hop_freely(Cutie)",
      "hop_freely(Cutie) ⊕ love_nature(Cutie)",
      "love_nature(Cutie) → (educate_visitors(Cutie) ⊕ promote_conservation(Cutie))"
    ],
    "background_story": "Cutie, the adorable rabbit, lived in a cozy burrow near Bradley Woods, a nature reserve named after the local conservationist, Mr. Bradley. Cutie spent her days hopping through the woods, exploring the trails and meadows. She loved to listen to the stories of the park rangers about Mr. Bradley's efforts to protect the wildlife and their habitats. Inspired by his legacy, Cutie became an ambassador for the woods, helping to educate visitors about the importance of conservation and respect for nature. With her big brown eyes and fluffy fur, Cutie charmed everyone she met, spreading the message of preservation and care for the beautiful Bradley Woods.",
    "name": "Cutie",
    "keyword": "bradley",
    "subject_category": "rabbit"
  },
  {
    "facts": [
      "Miguel solves problems.",
      "Miguel does not improve systems.",
      "Miguel does not analyze data.",
      "Miguel builds circuits."
    ],
    "facts_fol": [
      "solves_problems(Miguel)",
      "¬improves_system(Miguel)",
      "¬analyzes_data(Miguel)",
      "builds_circuits(Miguel)"
    ],
    "rules": [
      "Miguel is either an innovative engineer or a traditional engineer, but not both.",
      "If Miguel either thinks creatively or solves problems (but not both), then he is innovative.",
      "If Miguel designs devices, then he either thinks creatively or optimizes code, but not both.",
      "Every engineer improves systems or optimizes code.",
      "If Miguel either analyzes data or builds circuits (but not both), then he designs devices."
    ],
    "rules_fol": [
      "innovative(Miguel) ⊕ traditional(Miguel)",
      "(thinks_creatively(Miguel) ⊕ solves_problems(Miguel)) → innovative(Miguel)",
      "designs_devices(Miguel) → (thinks_creatively(Miguel) ⊕ optimizes_code(Miguel))",
      "∀x (improves_system(x) ∨ optimizes_code(x))",
      "(analyzes_data(Miguel) ⊕ builds_circuits(Miguel)) → designs_devices(Miguel)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Every engineer who develops solutions is either innovative or enhances technology.",
      "All engineers who brainstorm think creatively.",
      "If Miguel develops products, then he either writes manuals or optimizes code, but not both.",
      "Every engineer who develops solutions either enhances performance or designs devices (or both)."
    ],
    "distracting_rules_fol": [
      "∀x (develops_solutions(x) → (innovative(x) ∨ enhances_technology(x)))",
      "∀x (brainstorms(x) → thinks_creatively(x))",
      "develops_products(Miguel) → (writes_manuals(Miguel) ⊕ optimizes_code(Miguel))",
      "∀x (develops_solutions(x) → (enhances_performance(x) ∨ designs_devices(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Miguel does not analyze data.",
          "Miguel builds circuits."
        ],
        "rules": "If Miguel either analyzes data or builds circuits (but not both), then he designs devices.",
        "conclusion": "Miguel designs devices."
      },
      {
        "facts": [
          "Miguel does not improve systems."
        ],
        "rules": "Every engineer improves systems or optimizes code.",
        "conclusion": "Miguel optimizes code."
      },
      {
        "facts": [
          "Miguel designs devices.",
          "Miguel optimizes code."
        ],
        "rules": "If Miguel designs devices, then he either thinks creatively or optimizes code, but not both.",
        "conclusion": "Miguel does not think creatively."
      },
      {
        "facts": [
          "Miguel does not think creatively.",
          "Miguel solves problems."
        ],
        "rules": "If Miguel either thinks creatively or solves problems (but not both), then he is innovative.",
        "conclusion": "Miguel is an innovative engineer."
      },
      {
        "facts": [
          "Miguel is an innovative engineer."
        ],
        "rules": "Miguel is either an innovative engineer or a traditional engineer, but not both.",
        "conclusion": "Miguel is a traditional engineer."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬analyzes_data(Miguel)",
          "builds_circuits(Miguel)"
        ],
        "rules": "(analyzes_data(Miguel) ⊕ builds_circuits(Miguel)) → designs_devices(Miguel)",
        "conclusion": "designs_devices(Miguel)"
      },
      {
        "facts": [
          "¬improves_system(Miguel)"
        ],
        "rules": "∀x (improves_system(x) ∨ optimizes_code(x))",
        "conclusion": "optimizes_code(Miguel)"
      },
      {
        "facts": [
          "designs_devices(Miguel)",
          "optimizes_code(Miguel)"
        ],
        "rules": "designs_devices(Miguel) → (thinks_creatively(Miguel) ⊕ optimizes_code(Miguel))",
        "conclusion": "¬thinks_creatively(Miguel)"
      },
      {
        "facts": [
          "¬thinks_creatively(Miguel)",
          "solves_problems(Miguel)"
        ],
        "rules": "(thinks_creatively(Miguel) ⊕ solves_problems(Miguel)) → innovative(Miguel)",
        "conclusion": "innovative(Miguel)"
      },
      {
        "facts": [
          "innovative(Miguel)"
        ],
        "rules": "innovative(Miguel) ⊕ traditional(Miguel)",
        "conclusion": "traditional(Miguel)"
      }
    ],
    "conclusion": "Miguel is a traditional engineer.",
    "conclusion_fol": "traditional(Miguel)",
    "answer": "False",
    "context": [
      "Miguel does not analyze data.",
      "Miguel builds circuits.",
      "If Miguel either analyzes data or builds circuits (but not both), then he designs devices.",
      "Miguel does not improve systems.",
      "Every engineer improves systems or optimizes code.",
      "If Miguel designs devices, then he either thinks creatively or optimizes code, but not both.",
      "Miguel solves problems.",
      "If Miguel either thinks creatively or solves problems (but not both), then he is innovative.",
      "Miguel is either an innovative engineer or a traditional engineer, but not both."
    ],
    "context_fol": [
      "¬analyzes_data(Miguel)",
      "builds_circuits(Miguel)",
      "(analyzes_data(Miguel) ⊕ builds_circuits(Miguel)) → designs_devices(Miguel)",
      "¬improves_system(Miguel)",
      "∀x (improves_system(x) ∨ optimizes_code(x))",
      "designs_devices(Miguel) → (thinks_creatively(Miguel) ⊕ optimizes_code(Miguel))",
      "solves_problems(Miguel)",
      "(thinks_creatively(Miguel) ⊕ solves_problems(Miguel)) → innovative(Miguel)",
      "innovative(Miguel) ⊕ traditional(Miguel)"
    ],
    "background_story": "Miguel was a brilliant electrical engineer with a passion for telecommunications. He spent most of his career designing and developing innovative networking devices. One of his most notable contributions was the creation of a high-speed multiplexer that could handle vast amounts of data simultaneously. This device revolutionized the field of telecommunications, enabling faster and more reliable data transfer. Miguel's expertise in signal processing and his ability to think outside the box made him a leading figure in his company. He continued to work on improving his multiplexer design, pushing the boundaries of what was thought possible. Miguel's work had a lasting impact on the industry, and his name became synonymous with excellence in telecommunications engineering.",
    "name": "Miguel",
    "keyword": "multiplexer",
    "subject_category": "engineer"
  },
  {
    "facts": [
      "Karter has a melody.",
      "Karter feeds on krill.",
      "Karter does not live in the ocean."
    ],
    "facts_fol": [
      "has_melody(Karter)",
      "feed_krill(Karter)",
      "¬live_in_ocean(Karter)"
    ],
    "rules": [
      "For all whales, if they are gentle or large, then they command respect.",
      "Karter either swims deep or is large, but not both.",
      "Karter either has a melody or is gentle, but not both.",
      "If Karter migrates seasonally, then he feeds on krill and swims deep.",
      "Every whale either lives in the ocean or migrates seasonally, but not both is not a rule, instead they can do both."
    ],
    "rules_fol": [
      "∀x ((gentle(x) ∨ large(x)) → command_respect(x))",
      "swim_deep(Karter) ⊕ large(Karter)",
      "has_melody(Karter) ⊕ gentle(Karter)",
      "migrate_seasonally(Karter) → (feed_krill(Karter) ∧ swim_deep(Karter))",
      "∀x (live_in_ocean(x) ⊕ migrate_seasonally(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Karter is mature, then he is either large or powerful, but not both.",
      "If Karter has fins, then he is either sociable or gentle, but not both.",
      "Any whale that dives long or explores dark waters can swim deep.",
      "All whales either dive freely or migrate seasonally."
    ],
    "distracting_rules_fol": [
      "mature(Karter) → (large(Karter) ⊕ powerful(Karter))",
      "has_fins(Karter) → (is_sociable(Karter) ⊕ gentle(Karter))",
      "∀x ((dive_long(x) ∨ explore_dark(x)) → swim_deep(x))",
      "∀x (dive_freely(x) ∨ migrate_seasonally(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Karter does not live in the ocean."
        ],
        "rules": "Every whale either lives in the ocean or migrates seasonally, but not both is not a rule, instead they can do both.",
        "conclusion": "Karter migrates seasonally."
      },
      {
        "facts": [
          "Karter migrates seasonally.",
          "Karter feeds on krill."
        ],
        "rules": "If Karter migrates seasonally, then he feeds on krill and swims deep.",
        "conclusion": "Karter swims deep."
      },
      {
        "facts": [
          "Karter has a melody."
        ],
        "rules": "Karter either has a melody or is gentle, but not both.",
        "conclusion": "Karter is not gentle."
      },
      {
        "facts": [
          "Karter swims deep."
        ],
        "rules": "Karter either swims deep or is large, but not both.",
        "conclusion": "Karter is not large."
      },
      {
        "facts": [
          "Karter is not gentle.",
          "Karter is not large."
        ],
        "rules": "For all whales, if they are gentle or large, then they command respect.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬live_in_ocean(Karter)"
        ],
        "rules": "∀x (live_in_ocean(x) ⊕ migrate_seasonally(x))",
        "conclusion": "migrate_seasonally(Karter)"
      },
      {
        "facts": [
          "migrate_seasonally(Karter)",
          "feed_krill(Karter)"
        ],
        "rules": "migrate_seasonally(Karter) → (feed_krill(Karter) ∧ swim_deep(Karter))",
        "conclusion": "swim_deep(Karter)"
      },
      {
        "facts": [
          "has_melody(Karter)"
        ],
        "rules": "has_melody(Karter) ⊕ gentle(Karter)",
        "conclusion": "¬gentle(Karter)"
      },
      {
        "facts": [
          "swim_deep(Karter)"
        ],
        "rules": "swim_deep(Karter) ⊕ large(Karter)",
        "conclusion": "¬large(Karter)"
      },
      {
        "facts": [
          "¬gentle(Karter)",
          "¬large(Karter)"
        ],
        "rules": "∀x ((gentle(x) ∨ large(x)) → command_respect(x))",
        "conclusion": null
      }
    ],
    "conclusion": "Karter commands respect.",
    "conclusion_fol": "command_respect(Karter)",
    "answer": "Uncertain",
    "context": [
      "Karter does not live in the ocean.",
      "Every whale either lives in the ocean or migrates seasonally, but not both is not a rule, instead they can do both.",
      "Karter feeds on krill.",
      "If Karter migrates seasonally, then he feeds on krill and swims deep.",
      "Karter has a melody.",
      "Karter either has a melody or is gentle, but not both.",
      "Karter either swims deep or is large, but not both.",
      "For all whales, if they are gentle or large, then they command respect."
    ],
    "context_fol": [
      "¬live_in_ocean(Karter)",
      "∀x (live_in_ocean(x) ⊕ migrate_seasonally(x))",
      "feed_krill(Karter)",
      "migrate_seasonally(Karter) → (feed_krill(Karter) ∧ swim_deep(Karter))",
      "has_melody(Karter)",
      "has_melody(Karter) ⊕ gentle(Karter)",
      "swim_deep(Karter) ⊕ large(Karter)",
      "∀x ((gentle(x) ∨ large(x)) → command_respect(x))"
    ],
    "background_story": "Karter was an enormous blue whale who roamed the depths of the Pacific Ocean. His massive body could stretch up to 100 feet in length, making him a sight to behold for the occasional diver or sailor who crossed his path. Despite his enormous size, Karter was a gentle giant, feeding on tiny krill and small fish. He was known to swim alongside ships, his enormous voice echoing through the water as he sang a deep, rumbling song. Karter's enormous presence commanded respect, yet his calm nature inspired wonder and awe in all who encountered him. He was a reminder of the ocean's vastness and the incredible creatures that call it home.",
    "name": "Karter",
    "keyword": "enormous",
    "subject_category": "whale"
  },
  {
    "facts": [
      "Camryn does not learn fast.",
      "Camryn is not sensitive.",
      "Camryn practices medicine.",
      "Camryn does not develop expertise."
    ],
    "facts_fol": [
      "¬learns_fast(Camryn)",
      "¬is_sensitive(Camryn)",
      "practices_medicine(Camryn)",
      "¬develops_expertise(Camryn)"
    ],
    "rules": [
      "If Camryn is skilled, then she is either empathetic or detached, but not both.",
      "For all humans, if they study hard and gain experience, then they can become skilled.",
      "Camryn learns fast or studies hard.",
      "Camryn is either sensitive or detached, but not both, reflecting the two contrasting aspects of her personality.",
      "Anyone who practices medicine either develops expertise or gains experience."
    ],
    "rules_fol": [
      "skilled(Camryn) → (empathetic(Camryn) ⊕ detached(Camryn))",
      "∀x ((studies_hard(x) ∧ gains_experience(x)) → skilled(x))",
      "learns_fast(Camryn) ∨ studies_hard(Camryn)",
      "is_sensitive(Camryn) ⊕ detached(Camryn)",
      "∀x (practices_medicine(x) → (develops_expertise(x) ∨ gains_experience(x)))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Camryn makes decisions, then she either forms meaningful connections with others or is skilled (or both).",
      "If Camryn either reads books or attends seminars (but not both), then she studies hard.",
      "If Camryn is cold, then she is detached.",
      "Anyone who faces challenges either finds solutions or gains experience."
    ],
    "distracting_rules_fol": [
      "makes_decisions(Camryn) → (forms_connections(Camryn) ∨ skilled(Camryn))",
      "(reads_books(Camryn) ⊕ attends_seminars(Camryn)) → studies_hard(Camryn)",
      "cold(Camryn) → detached(Camryn)",
      "∀x (faces_challenges(x) → (finds_solutions(x) ∨ gains_experience(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Camryn practices medicine.",
          "Camryn does not develop expertise."
        ],
        "rules": "Anyone who practices medicine either develops expertise or gains experience.",
        "conclusion": "Camryn gains experience."
      },
      {
        "facts": [
          "Camryn is not sensitive."
        ],
        "rules": "Camryn is either sensitive or detached, but not both, reflecting the two contrasting aspects of her personality.",
        "conclusion": "Camryn is detached."
      },
      {
        "facts": [
          "Camryn does not learn fast."
        ],
        "rules": "Camryn learns fast or studies hard.",
        "conclusion": "Camryn studies hard."
      },
      {
        "facts": [
          "Camryn studies hard.",
          "Camryn gains experience."
        ],
        "rules": "For all humans, if they study hard and gain experience, then they can become skilled.",
        "conclusion": "Camryn is skilled."
      },
      {
        "facts": [
          "Camryn is skilled.",
          "Camryn is detached."
        ],
        "rules": "If Camryn is skilled, then she is either empathetic or detached, but not both.",
        "conclusion": "Camryn is empathetic."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "practices_medicine(Camryn)",
          "¬develops_expertise(Camryn)"
        ],
        "rules": "∀x (practices_medicine(x) → (develops_expertise(x) ∨ gains_experience(x)))",
        "conclusion": "gains_experience(Camryn)"
      },
      {
        "facts": [
          "¬is_sensitive(Camryn)"
        ],
        "rules": "is_sensitive(Camryn) ⊕ detached(Camryn)",
        "conclusion": "detached(Camryn)"
      },
      {
        "facts": [
          "¬learns_fast(Camryn)"
        ],
        "rules": "learns_fast(Camryn) ∨ studies_hard(Camryn)",
        "conclusion": "studies_hard(Camryn)"
      },
      {
        "facts": [
          "studies_hard(Camryn)",
          "gains_experience(Camryn)"
        ],
        "rules": "∀x ((studies_hard(x) ∧ gains_experience(x)) → skilled(x))",
        "conclusion": "skilled(Camryn)"
      },
      {
        "facts": [
          "skilled(Camryn)",
          "detached(Camryn)"
        ],
        "rules": "skilled(Camryn) → (empathetic(Camryn) ⊕ detached(Camryn))",
        "conclusion": "empathetic(Camryn)"
      }
    ],
    "conclusion": "Camryn is empathetic.",
    "conclusion_fol": "empathetic(Camryn)",
    "answer": "False",
    "context": [
      "Camryn practices medicine.",
      "Camryn does not develop expertise.",
      "Anyone who practices medicine either develops expertise or gains experience.",
      "Camryn is not sensitive.",
      "Camryn is either sensitive or detached, but not both, reflecting the two contrasting aspects of her personality.",
      "Camryn does not learn fast.",
      "Camryn learns fast or studies hard.",
      "For all humans, if they study hard and gain experience, then they can become skilled.",
      "If Camryn is skilled, then she is either empathetic or detached, but not both."
    ],
    "context_fol": [
      "practices_medicine(Camryn)",
      "¬develops_expertise(Camryn)",
      "∀x (practices_medicine(x) → (develops_expertise(x) ∨ gains_experience(x)))",
      "¬is_sensitive(Camryn)",
      "is_sensitive(Camryn) ⊕ detached(Camryn)",
      "¬learns_fast(Camryn)",
      "learns_fast(Camryn) ∨ studies_hard(Camryn)",
      "∀x ((studies_hard(x) ∧ gains_experience(x)) → skilled(x))",
      "skilled(Camryn) → (empathetic(Camryn) ⊕ detached(Camryn))"
    ],
    "background_story": "Camryn was a brilliant and ambitious neurosurgeon, known for her exceptional skills in the operating room. However, her unfeeling demeanor often made her colleagues and patients uneasy. She approached each case with a detached logic, never allowing emotions to cloud her judgment. This stoic nature was both a blessing and a curse, as it enabled her to make life-or-death decisions with clarity, but also made it difficult for her to form genuine connections with others. Despite her tough exterior, there were whispers of a tragic past that had led to her emotional numbness. Few knew the real Camryn, hidden behind the mask of a highly skilled, yet unfeeling, doctor.",
    "name": "Camryn",
    "keyword": "unfeeling",
    "subject_category": "human"
  },
  {
    "facts": [
      "Katelyn practices daily.",
      "Katelyn is an experienced musician.",
      "Katelyn is inspirational.",
      "Katelyn does not record albums.",
      "Katelyn does not compose songs."
    ],
    "facts_fol": [
      "practice_daily(Katelyn)",
      "is_experienced(Katelyn)",
      "is_inspirational(Katelyn)",
      "¬record_albums(Katelyn)",
      "¬compose_songs(Katelyn)"
    ],
    "rules": [
      "For all musicians, if they play with passion and have talent, then they create beauty.",
      "If Katelyn is an experienced musician, then she either plays with passion or is inspirational, but not both.",
      "If Katelyn practices daily, then she has talent and moves audiences.",
      "If Katelyn performs live, then she either moves audiences or records albums, but not both.",
      "Katelyn either composes songs or performs live."
    ],
    "rules_fol": [
      "∀x ((play_with_passion(x) ∧ have_talent(x)) → create_beauty(x))",
      "is_experienced(Katelyn) → (play_with_passion(Katelyn) ⊕ is_inspirational(Katelyn))",
      "practice_daily(Katelyn) → (have_talent(Katelyn) ∧ move_audiences(Katelyn))",
      "perform_live(Katelyn) → (move_audiences(Katelyn) ⊕ record_albums(Katelyn))",
      "compose_songs(Katelyn) ∨ perform_live(Katelyn)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Every musician who fills spaces with music either plays with passion or touches the hearts of their audience.",
      "If Katelyn performs regularly, then she either makes people cry or has talent, but not both.",
      "Every musician who fills spaces with music either moves audiences or echoes emotions.",
      "If Katelyn tours nationally, then she either performs live or collaborates with other artists, but not both."
    ],
    "distracting_rules_fol": [
      "∀x (fill_spaces(x) → (play_with_passion(x) ∨ touch_hearts(x)))",
      "perform_regularly(Katelyn) → (make_people_cry(Katelyn) ⊕ have_talent(Katelyn))",
      "∀x (fill_spaces(x) → (move_audiences(x) ∨ echo_emotions(x)))",
      "tour_nationally(Katelyn) → (perform_live(Katelyn) ⊕ collaborate_artists(Katelyn))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Katelyn does not compose songs."
        ],
        "rules": "Katelyn either composes songs or performs live.",
        "conclusion": "Katelyn performs live."
      },
      {
        "facts": [
          "Katelyn performs live.",
          "Katelyn does not record albums."
        ],
        "rules": "If Katelyn performs live, then she either moves audiences or records albums, but not both.",
        "conclusion": "Katelyn moves audiences."
      },
      {
        "facts": [
          "Katelyn practices daily.",
          "Katelyn moves audiences."
        ],
        "rules": "If Katelyn practices daily, then she has talent and moves audiences.",
        "conclusion": "Katelyn has talent."
      },
      {
        "facts": [
          "Katelyn is an experienced musician.",
          "Katelyn is inspirational."
        ],
        "rules": "If Katelyn is an experienced musician, then she either plays with passion or is inspirational, but not both.",
        "conclusion": "Katelyn does not play with passion."
      },
      {
        "facts": [
          "Katelyn does not play with passion.",
          "Katelyn has talent."
        ],
        "rules": "For all musicians, if they play with passion and have talent, then they create beauty.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬compose_songs(Katelyn)"
        ],
        "rules": "compose_songs(Katelyn) ∨ perform_live(Katelyn)",
        "conclusion": "perform_live(Katelyn)"
      },
      {
        "facts": [
          "perform_live(Katelyn)",
          "¬record_albums(Katelyn)"
        ],
        "rules": "perform_live(Katelyn) → (move_audiences(Katelyn) ⊕ record_albums(Katelyn))",
        "conclusion": "move_audiences(Katelyn)"
      },
      {
        "facts": [
          "practice_daily(Katelyn)",
          "move_audiences(Katelyn)"
        ],
        "rules": "practice_daily(Katelyn) → (have_talent(Katelyn) ∧ move_audiences(Katelyn))",
        "conclusion": "have_talent(Katelyn)"
      },
      {
        "facts": [
          "is_experienced(Katelyn)",
          "is_inspirational(Katelyn)"
        ],
        "rules": "is_experienced(Katelyn) → (play_with_passion(Katelyn) ⊕ is_inspirational(Katelyn))",
        "conclusion": "¬play_with_passion(Katelyn)"
      },
      {
        "facts": [
          "¬play_with_passion(Katelyn)",
          "have_talent(Katelyn)"
        ],
        "rules": "∀x ((play_with_passion(x) ∧ have_talent(x)) → create_beauty(x))",
        "conclusion": null
      }
    ],
    "conclusion": "Katelyn does not create beauty.",
    "conclusion_fol": "¬create_beauty(Katelyn)",
    "answer": "Uncertain",
    "context": [
      "Katelyn does not compose songs.",
      "Katelyn either composes songs or performs live.",
      "Katelyn does not record albums.",
      "If Katelyn performs live, then she either moves audiences or records albums, but not both.",
      "Katelyn practices daily.",
      "If Katelyn practices daily, then she has talent and moves audiences.",
      "Katelyn is an experienced musician.",
      "Katelyn is inspirational.",
      "If Katelyn is an experienced musician, then she either plays with passion or is inspirational, but not both.",
      "For all musicians, if they play with passion and have talent, then they create beauty."
    ],
    "context_fol": [
      "¬compose_songs(Katelyn)",
      "compose_songs(Katelyn) ∨ perform_live(Katelyn)",
      "¬record_albums(Katelyn)",
      "perform_live(Katelyn) → (move_audiences(Katelyn) ⊕ record_albums(Katelyn))",
      "practice_daily(Katelyn)",
      "practice_daily(Katelyn) → (have_talent(Katelyn) ∧ move_audiences(Katelyn))",
      "is_experienced(Katelyn)",
      "is_inspirational(Katelyn)",
      "is_experienced(Katelyn) → (play_with_passion(Katelyn) ⊕ is_inspirational(Katelyn))",
      "∀x ((play_with_passion(x) ∧ have_talent(x)) → create_beauty(x))"
    ],
    "background_story": "Katelyn was a young, talented cellist with a passion for filling spaces with resonant melodies. Her music was known for being reverberant, echoing through concert halls and leaving audiences spellbound. With each stroke of her bow, the notes seemed to linger, hauntingly beautiful and full of emotion. Katelyn's favorite venue was an ancient, abandoned church on the outskirts of town, where the acoustics were so divine that every performance felt like a spiritual experience. As she played, her music would reverberate off the stone walls, creating an otherworldly ambiance that transported all who listened to another realm. Her talent and the reverberant quality of her music soon made her a sensation, drawing fans from all over to experience the enchantment of her sound.",
    "name": "Katelyn",
    "keyword": "reverberant",
    "subject_category": "musician"
  },
  {
    "facts": [
      "Anika values nature.",
      "Anika tells stories.",
      "Anika is an adventurer.",
      "Anika is playful.",
      "Anika does not paint landscapes.",
      "Anika collects masterpieces."
    ],
    "facts_fol": [
      "values_nature(Anika)",
      "tell_stories(Anika)",
      "is_adventurer(Anika)",
      "is_playful(Anika)",
      "¬paints_landscapes(Anika)",
      "collects_masterpieces(Anika)"
    ],
    "rules": [
      "Anika is either spontaneous or creative, but not both.",
      "If someone loves art and values nature, then they appreciate beauty.",
      "If Anika is an adventurer, then she is either spontaneous or playful, but not both.",
      "If someone either paints landscapes or collects masterpieces (but not both), then they love art."
    ],
    "rules_fol": [
      "is_spontaneous(Anika) ⊕ creative(Anika)",
      "∀x ((loves_art(x) ∧ values_nature(x)) → appreciate_beauty(x))",
      "is_adventurer(Anika) → (is_spontaneous(Anika) ⊕ is_playful(Anika))",
      "∀x ((paints_landscapes(x) ⊕ collects_masterpieces(x)) → loves_art(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Anika sees details or expresses emotion, then she is creative.",
      "If Anika observes details, then she appreciates beauty and expresses emotions.",
      "If Anika expresses emotions, then she is spontaneous and finds inspiration.",
      "If Anika enjoys music, then she either reads books or loves art, but not both."
    ],
    "distracting_rules_fol": [
      "(sees_details(Anika) ∨ expresses_emotion(Anika)) → creative(Anika)",
      "observe_details(Anika) → (appreciate_beauty(Anika) ∧ express_emotions(Anika))",
      "express_emotions(Anika) → (is_spontaneous(Anika) ∧ find_inspiration(Anika))",
      "enjoys_music(Anika) → (reads_books(Anika) ⊕ loves_art(Anika))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Anika does not paint landscapes.",
          "Anika collects masterpieces."
        ],
        "rules": "If someone either paints landscapes or collects masterpieces (but not both), then they love art.",
        "conclusion": "Anika loves art."
      },
      {
        "facts": [
          "Anika is an adventurer.",
          "Anika is playful."
        ],
        "rules": "If Anika is an adventurer, then she is either spontaneous or playful, but not both.",
        "conclusion": "Anika is not spontaneous."
      },
      {
        "facts": [
          "Anika loves art.",
          "Anika values nature."
        ],
        "rules": "If someone loves art and values nature, then they appreciate beauty.",
        "conclusion": "Anika appreciates beauty."
      },
      {
        "facts": [
          "Anika is not spontaneous."
        ],
        "rules": "Anika is either spontaneous or creative, but not both.",
        "conclusion": "Anika is creative."
      },
      {
        "facts": [
          "Anika is creative.",
          "Anika appreciates beauty.",
          "Anika tells stories."
        ],
        "rules": null,
        "conclusion": "Anika is creative, appreciates beauty and tells stories through her art."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬paints_landscapes(Anika)",
          "collects_masterpieces(Anika)"
        ],
        "rules": "∀x ((paints_landscapes(x) ⊕ collects_masterpieces(x)) → loves_art(x))",
        "conclusion": "loves_art(Anika)"
      },
      {
        "facts": [
          "is_adventurer(Anika)",
          "is_playful(Anika)"
        ],
        "rules": "is_adventurer(Anika) → (is_spontaneous(Anika) ⊕ is_playful(Anika))",
        "conclusion": "¬is_spontaneous(Anika)"
      },
      {
        "facts": [
          "loves_art(Anika)",
          "values_nature(Anika)"
        ],
        "rules": "∀x ((loves_art(x) ∧ values_nature(x)) → appreciate_beauty(x))",
        "conclusion": "appreciate_beauty(Anika)"
      },
      {
        "facts": [
          "¬is_spontaneous(Anika)"
        ],
        "rules": "is_spontaneous(Anika) ⊕ creative(Anika)",
        "conclusion": "creative(Anika)"
      },
      {
        "facts": [
          "creative(Anika)",
          "appreciate_beauty(Anika)",
          "tell_stories(Anika)"
        ],
        "rules": null,
        "conclusion": "creative(Anika) ∧ (appreciate_beauty(Anika) ∧ tell_stories(Anika))"
      }
    ],
    "conclusion": "Anika is creative, appreciates beauty and tells stories through her art.",
    "conclusion_fol": "creative(Anika) ∧ (appreciate_beauty(Anika) ∧ tell_stories(Anika))",
    "answer": "True",
    "context": [
      "Anika does not paint landscapes.",
      "Anika collects masterpieces.",
      "If someone either paints landscapes or collects masterpieces (but not both), then they love art.",
      "Anika is an adventurer.",
      "Anika is playful.",
      "If Anika is an adventurer, then she is either spontaneous or playful, but not both.",
      "Anika values nature.",
      "If someone loves art and values nature, then they appreciate beauty.",
      "Anika is either spontaneous or creative, but not both.",
      "Anika tells stories."
    ],
    "context_fol": [
      "¬paints_landscapes(Anika)",
      "collects_masterpieces(Anika)",
      "∀x ((paints_landscapes(x) ⊕ collects_masterpieces(x)) → loves_art(x))",
      "is_adventurer(Anika)",
      "is_playful(Anika)",
      "is_adventurer(Anika) → (is_spontaneous(Anika) ⊕ is_playful(Anika))",
      "values_nature(Anika)",
      "∀x ((loves_art(x) ∧ values_nature(x)) → appreciate_beauty(x))",
      "is_spontaneous(Anika) ⊕ creative(Anika)",
      "tell_stories(Anika)"
    ],
    "background_story": "Anika was a free-spirited artist who found inspiration in the small, seaside town of Marly. The quaint French village, with its cobblestone streets and historic architecture, became her muse. She spent her days painting the vibrant market scenes, the old stone bridges, and the serene Marly Forest. Anika's art studio, nestled in the heart of the village, became a hub for locals and travelers alike, drawn by her captivating portraits of Marly's everyday life. As she delved deeper into the community, Anika discovered the rich history and folklore of Marly, which she wove into her art. Her paintings not only reflected the beauty of the town but also told the stories of its people, making her a beloved figure in Marly.",
    "name": "Anika",
    "keyword": "marly",
    "subject_category": "human"
  },
  {
    "facts": [
      "Evie is ambitious.",
      "Evie builds networks.",
      "Evie sets goals."
    ],
    "facts_fol": [
      "is_ambitious(Evie)",
      "builds_networks(Evie)",
      "sets_goals(Evie)"
    ],
    "rules": [
      "If Evie is disciplined, then she either invests wisely or takes risks.",
      "If Evie is ambitious, then she takes risks and builds networks.",
      "If Evie sets goals, then she is disciplined."
    ],
    "rules_fol": [
      "is_disciplined(Evie) → (invests_wisely(Evie) ⊕ takes_risks(Evie))",
      "is_ambitious(Evie) → (takes_risks(Evie) ∧ builds_networks(Evie))",
      "sets_goals(Evie) → is_disciplined(Evie)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Evie has insight, then she invests wisely.",
      "If Evie is confident, then she takes risks and thinks strategically.",
      "If Evie has vision, then she is disciplined and makes strategic moves."
    ],
    "distracting_rules_fol": [
      "has_insight(Evie) → invests_wisely(Evie)",
      "is_confident(Evie) → (takes_risks(Evie) ∧ thinks_strategically(Evie))",
      "has_vision(Evie) → (is_disciplined(Evie) ∧ makes_strategic_moves(Evie))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Evie sets goals."
        ],
        "rules": "If Evie sets goals, then she is disciplined.",
        "conclusion": "Evie is disciplined."
      },
      {
        "facts": [
          "Evie is ambitious.",
          "Evie builds networks."
        ],
        "rules": "If Evie is ambitious, then she takes risks and builds networks.",
        "conclusion": "Evie takes risks."
      },
      {
        "facts": [
          "Evie is disciplined.",
          "Evie takes risks."
        ],
        "rules": "If Evie is disciplined, then she either invests wisely or takes risks.",
        "conclusion": "Evie does not invest wisely."
      },
      {
        "facts": [
          "Evie does not invest wisely."
        ],
        "rules": null,
        "conclusion": "If Evie invests wisely, then she achieves financial success."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "sets_goals(Evie)"
        ],
        "rules": "sets_goals(Evie) → is_disciplined(Evie)",
        "conclusion": "is_disciplined(Evie)"
      },
      {
        "facts": [
          "is_ambitious(Evie)",
          "builds_networks(Evie)"
        ],
        "rules": "is_ambitious(Evie) → (takes_risks(Evie) ∧ builds_networks(Evie))",
        "conclusion": "takes_risks(Evie)"
      },
      {
        "facts": [
          "is_disciplined(Evie)",
          "takes_risks(Evie)"
        ],
        "rules": "is_disciplined(Evie) → (invests_wisely(Evie) ⊕ takes_risks(Evie))",
        "conclusion": "¬invests_wisely(Evie)"
      },
      {
        "facts": [
          "¬invests_wisely(Evie)"
        ],
        "rules": null,
        "conclusion": "invests_wisely(Evie) → achieves_financial_success(Evie)"
      }
    ],
    "conclusion": "If Evie invests wisely, then she achieves financial success.",
    "conclusion_fol": "invests_wisely(Evie) → achieves_financial_success(Evie)",
    "answer": "True",
    "context": [
      "Evie sets goals.",
      "If Evie sets goals, then she is disciplined.",
      "Evie is ambitious.",
      "Evie builds networks.",
      "If Evie is ambitious, then she takes risks and builds networks.",
      "If Evie is disciplined, then she either invests wisely or takes risks."
    ],
    "context_fol": [
      "sets_goals(Evie)",
      "sets_goals(Evie) → is_disciplined(Evie)",
      "is_ambitious(Evie)",
      "builds_networks(Evie)",
      "is_ambitious(Evie) → (takes_risks(Evie) ∧ builds_networks(Evie))",
      "is_disciplined(Evie) → (invests_wisely(Evie) ⊕ takes_risks(Evie))"
    ],
    "background_story": "Evie was a shrewd businesswoman with a passion for investing. She made her fortune by wisely bankrolling several successful startups, earning her the nickname 'The Angel Investor.' With her keen eye for potential and willingness to take calculated risks, Evie's investments yielded impressive returns. She used her wealth to support emerging entrepreneurs, providing them with the financial backing they needed to turn their ideas into reality. Evie's bankroll not only catapulted her own career but also helped launch numerous innovative companies, creating jobs and driving economic growth. Her legacy as a savvy and generous investor continues to inspire a new generation of business leaders.",
    "name": "Evie",
    "keyword": "bankroll",
    "subject_category": "human"
  },
  {
    "facts": [
      "Zain visits places.",
      "Zain meets people."
    ],
    "facts_fol": [
      "visits_places(Zain)",
      "meets_people(Zain)"
    ],
    "rules": [
      "Zain is either a traveler or a homebody, but not both.",
      "If Zain explores, then he is a traveler.",
      "If someone visits places and meets people, then they explore."
    ],
    "rules_fol": [
      "traveler(Zain) ⊕ homebody(Zain)",
      "explores(Zain) → traveler(Zain)",
      "∀x ((visits_places(x) ∧ meets_people(x)) → explores(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Zain loves adventure or enjoys discovery, then he is a traveler.",
      "If someone seeks adventure and loves cultures, then they explore."
    ],
    "distracting_rules_fol": [
      "(loves_adventure(Zain) ∨ enjoys_discovery(Zain)) → traveler(Zain)",
      "∀x ((seeks_adventure(x) ∧ loves_cultures(x)) → explores(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Zain visits places.",
          "Zain meets people."
        ],
        "rules": "If someone visits places and meets people, then they explore.",
        "conclusion": "Zain explores."
      },
      {
        "facts": [
          "Zain explores."
        ],
        "rules": "If Zain explores, then he is a traveler.",
        "conclusion": "Zain is a traveler."
      },
      {
        "facts": [
          "Zain is a traveler."
        ],
        "rules": "Zain is either a traveler or a homebody, but not both.",
        "conclusion": "Zain is a homebody."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "visits_places(Zain)",
          "meets_people(Zain)"
        ],
        "rules": "∀x ((visits_places(x) ∧ meets_people(x)) → explores(x))",
        "conclusion": "explores(Zain)"
      },
      {
        "facts": [
          "explores(Zain)"
        ],
        "rules": "explores(Zain) → traveler(Zain)",
        "conclusion": "traveler(Zain)"
      },
      {
        "facts": [
          "traveler(Zain)"
        ],
        "rules": "traveler(Zain) ⊕ homebody(Zain)",
        "conclusion": "homebody(Zain)"
      }
    ],
    "conclusion": "Zain is a homebody.",
    "conclusion_fol": "homebody(Zain)",
    "answer": "False",
    "context": [
      "Zain visits places.",
      "Zain meets people.",
      "If someone visits places and meets people, then they explore.",
      "If Zain explores, then he is a traveler.",
      "Zain is either a traveler or a homebody, but not both."
    ],
    "context_fol": [
      "visits_places(Zain)",
      "meets_people(Zain)",
      "∀x ((visits_places(x) ∧ meets_people(x)) → explores(x))",
      "explores(Zain) → traveler(Zain)",
      "traveler(Zain) ⊕ homebody(Zain)"
    ],
    "background_story": "Zain, a travel enthusiast, had always been fascinated by the world's diverse landscapes and cultures. After saving up for years, he embarked on a global sightseeing adventure, visiting over 20 countries in a single year. From the majestic Taj Mahal to the breathtaking Grand Canyon, Zain marveled at each new wonder. He wandered through the vibrant streets of Tokyo, sampled local cuisine in Italy, and hiked to the summit of Kilimanjaro. Zain's travels not only broadened his perspective but also deepened his appreciation for the beauty of human connection. He documented his journey on social media, inspiring countless others to explore and discover the magic of sightseeing for themselves.",
    "name": "Zain",
    "keyword": "sightseeing",
    "subject_category": "human"
  },
  {
    "facts": [
      "Salma visits a vineyard.",
      "Salma loves Italy.",
      "Salma attends gatherings.",
      "Salma enjoys laughter."
    ],
    "facts_fol": [
      "visits_vineyard(Salma)",
      "loves_italy(Salma)",
      "attends_gatherings(Salma)",
      "enjoys_laughs(Salma)"
    ],
    "rules": [
      "If a wine enthusiast drinks grappa and appreciates wine, then they enjoy Salma's gatherings.",
      "If Salma visits a vineyard, then she loves Italy and appreciates wine.",
      "If Salma attends gatherings, then she either enjoys laughter or drinks grappa, but not both."
    ],
    "rules_fol": [
      "(drinks_grappa(Salma) ∧ appreciates_wine(Salma)) → enjoys_Salma_events(Salma)",
      "visits_vineyard(Salma) → (loves_italy(Salma) ∧ appreciates_wine(Salma))",
      "attends_gatherings(Salma) → (enjoys_laughs(Salma) ⊕ drinks_grappa(Salma))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Salma enjoys nights out, then she either appreciates wine or likes music, but not both.",
      "If Salma socializes, then she drinks grappa and values quality."
    ],
    "distracting_rules_fol": [
      "enjoys_nights(Salma) → (appreciates_wine(Salma) ⊕ likes_music(Salma))",
      "socializes(Salma) → (drinks_grappa(Salma) ∧ values_quality(Salma))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Salma attends gatherings.",
          "Salma enjoys laughter."
        ],
        "rules": "If Salma attends gatherings, then she either enjoys laughter or drinks grappa, but not both.",
        "conclusion": "Salma does not drink grappa."
      },
      {
        "facts": [
          "Salma visits a vineyard.",
          "Salma loves Italy."
        ],
        "rules": "If Salma visits a vineyard, then she loves Italy and appreciates wine.",
        "conclusion": "Salma appreciates wine."
      },
      {
        "facts": [
          "Salma does not drink grappa.",
          "Salma appreciates wine."
        ],
        "rules": "If a wine enthusiast drinks grappa and appreciates wine, then they enjoy Salma's gatherings.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "attends_gatherings(Salma)",
          "enjoys_laughs(Salma)"
        ],
        "rules": "attends_gatherings(Salma) → (enjoys_laughs(Salma) ⊕ drinks_grappa(Salma))",
        "conclusion": "¬drinks_grappa(Salma)"
      },
      {
        "facts": [
          "visits_vineyard(Salma)",
          "loves_italy(Salma)"
        ],
        "rules": "visits_vineyard(Salma) → (loves_italy(Salma) ∧ appreciates_wine(Salma))",
        "conclusion": "appreciates_wine(Salma)"
      },
      {
        "facts": [
          "¬drinks_grappa(Salma)",
          "appreciates_wine(Salma)"
        ],
        "rules": "(drinks_grappa(Salma) ∧ appreciates_wine(Salma)) → enjoys_Salma_events(Salma)",
        "conclusion": null
      }
    ],
    "conclusion": "Salma does not enjoy Salma's events.",
    "conclusion_fol": "¬enjoys_Salma_events(Salma)",
    "answer": "Uncertain",
    "context": [
      "Salma attends gatherings.",
      "Salma enjoys laughter.",
      "If Salma attends gatherings, then she either enjoys laughter or drinks grappa, but not both.",
      "Salma visits a vineyard.",
      "Salma loves Italy.",
      "If Salma visits a vineyard, then she loves Italy and appreciates wine.",
      "If a wine enthusiast drinks grappa and appreciates wine, then they enjoy Salma's gatherings."
    ],
    "context_fol": [
      "attends_gatherings(Salma)",
      "enjoys_laughs(Salma)",
      "attends_gatherings(Salma) → (enjoys_laughs(Salma) ⊕ drinks_grappa(Salma))",
      "visits_vineyard(Salma)",
      "loves_italy(Salma)",
      "visits_vineyard(Salma) → (loves_italy(Salma) ∧ appreciates_wine(Salma))",
      "(drinks_grappa(Salma) ∧ appreciates_wine(Salma)) → enjoys_Salma_events(Salma)"
    ],
    "background_story": "Salma was a vibrant Italian winemaker from the rolling hills of Tuscany. She spent most of her days tending to her family's vineyard, where they produced some of the region's finest wines. However, Salma's true passion was crafting the perfect grappa. She experimented with various grape varieties and distillation techniques to create a grappa that was both potent and smooth. Her dedication paid off when her grappa won a prestigious award at a local competition. Soon, wine enthusiasts from all over Italy were flocking to her vineyard to taste Salma's renowned grappa. She would often host lively gatherings, sharing stories and laughter as she poured shots of her prized spirit. Salma's love for grappa had not only brought her success but also created a sense of community and joy among those who tasted her exquisite creations.",
    "name": "Salma",
    "keyword": "grappa",
    "subject_category": "human"
  },
  {
    "facts": [
      "Remi practices daily.",
      "Remi feels passion.",
      "Remi plays piano.",
      "Remi sets goals.",
      "Remi works hard."
    ],
    "facts_fol": [
      "practices_daily(Remi)",
      "feels_passion(Remi)",
      "plays_piano(Remi)",
      "sets_goals(Remi)",
      "works_hard(Remi)"
    ],
    "rules": [
      "If Remi is either talented or dedicated (but not both), then he is acclaimed.",
      "If Remi practices daily, then he is talented and expresses emotion.",
      "If someone feels passion and plays piano, then they express emotion.",
      "Anyone who sets goals or works hard is dedicated."
    ],
    "rules_fol": [
      "(talented(Remi) ⊕ dedicated(Remi)) → acclaimed(Remi)",
      "practices_daily(Remi) → (talented(Remi) ∧ expresses_emotion(Remi))",
      "∀x ((feels_passion(x) ∧ plays_piano(x)) → expresses_emotion(x))",
      "∀x ((sets_goals(x) ∨ works_hard(x)) → dedicated(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Remi is creative, then he is both disciplined and talented.",
      "Anyone who loves music expresses emotion.",
      "If someone loves music and refines their skill, then they are dedicated."
    ],
    "distracting_rules_fol": [
      "creative(Remi) → (disciplined(Remi) ∧ talented(Remi))",
      "∀x (loves_music(x) → expresses_emotion(x))",
      "∀x ((loves_music(x) ∧ refines_skill(x)) → dedicated(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Remi sets goals.",
          "Remi works hard."
        ],
        "rules": "Anyone who sets goals or works hard is dedicated.",
        "conclusion": "Remi is dedicated."
      },
      {
        "facts": [
          "Remi feels passion.",
          "Remi plays piano."
        ],
        "rules": "If someone feels passion and plays piano, then they express emotion.",
        "conclusion": "Remi expresses emotion."
      },
      {
        "facts": [
          "Remi practices daily.",
          "Remi expresses emotion."
        ],
        "rules": "If Remi practices daily, then he is talented and expresses emotion.",
        "conclusion": "Remi is talented."
      },
      {
        "facts": [
          "Remi is talented.",
          "Remi is dedicated."
        ],
        "rules": "If Remi is either talented or dedicated (but not both), then he is acclaimed.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "sets_goals(Remi)",
          "works_hard(Remi)"
        ],
        "rules": "∀x ((sets_goals(x) ∨ works_hard(x)) → dedicated(x))",
        "conclusion": "dedicated(Remi)"
      },
      {
        "facts": [
          "feels_passion(Remi)",
          "plays_piano(Remi)"
        ],
        "rules": "∀x ((feels_passion(x) ∧ plays_piano(x)) → expresses_emotion(x))",
        "conclusion": "expresses_emotion(Remi)"
      },
      {
        "facts": [
          "practices_daily(Remi)",
          "expresses_emotion(Remi)"
        ],
        "rules": "practices_daily(Remi) → (talented(Remi) ∧ expresses_emotion(Remi))",
        "conclusion": "talented(Remi)"
      },
      {
        "facts": [
          "talented(Remi)",
          "dedicated(Remi)"
        ],
        "rules": "(talented(Remi) ⊕ dedicated(Remi)) → acclaimed(Remi)",
        "conclusion": null
      }
    ],
    "conclusion": "Remi is acclaimed.",
    "conclusion_fol": "acclaimed(Remi)",
    "answer": "Uncertain",
    "context": [
      "Remi sets goals.",
      "Remi works hard.",
      "Anyone who sets goals or works hard is dedicated.",
      "Remi feels passion.",
      "Remi plays piano.",
      "If someone feels passion and plays piano, then they express emotion.",
      "Remi practices daily.",
      "If Remi practices daily, then he is talented and expresses emotion.",
      "If Remi is either talented or dedicated (but not both), then he is acclaimed."
    ],
    "context_fol": [
      "sets_goals(Remi)",
      "works_hard(Remi)",
      "∀x ((sets_goals(x) ∨ works_hard(x)) → dedicated(x))",
      "feels_passion(Remi)",
      "plays_piano(Remi)",
      "∀x ((feels_passion(x) ∧ plays_piano(x)) → expresses_emotion(x))",
      "practices_daily(Remi)",
      "practices_daily(Remi) → (talented(Remi) ∧ expresses_emotion(Remi))",
      "(talented(Remi) ⊕ dedicated(Remi)) → acclaimed(Remi)"
    ],
    "background_story": "Remi's fingers danced across the piano keys with a grace that belied his young age. Discovered to have a prodigious talent for pianism at the age of five, he was enrolled in the prestigious Paris Conservatory. Under the tutelage of renowned pianists, Remi's skill flourished. His interpretations of Chopin and Debussy were particularly acclaimed, capturing the nuances and emotions of the composers with uncanny depth. As he grew older, Remi's performances took him to concert halls around the world, earning him standing ovations and critical acclaim. Despite his rise to fame, he remained humble and dedicated to his craft, always seeking to refine his pianism and connect with his audience through the universal language of music.",
    "name": "Remi",
    "keyword": "pianism",
    "subject_category": "human"
  },
  {
    "facts": [
      "Zamir is skilled.",
      "Zamir is a veteran.",
      "Zamir is not resilient.",
      "Zamir takes charge.",
      "Zamir does not make decisions."
    ],
    "facts_fol": [
      "skilled(Zamir)",
      "veteran(Zamir)",
      "¬resilient(Zamir)",
      "takes_charge(Zamir)",
      "¬makes_decisions(Zamir)"
    ],
    "rules": [
      "If Zamir is experienced, then he is either authoritative or nurturing, but not both.",
      "If Zamir is skilled, then he is experienced.",
      "If Zamir is seasoned, then he is both authoritative and confident.",
      "If Zamir is a veteran, then he is either seasoned or resilient, but not both.",
      "Anyone who takes charge either makes decisions or is confident (or both)."
    ],
    "rules_fol": [
      "experienced(Zamir) → (authoritative(Zamir) ⊕ nurturing(Zamir))",
      "skilled(Zamir) → experienced(Zamir)",
      "seasoned(Zamir) → (authoritative(Zamir) ∧ confident(Zamir))",
      "veteran(Zamir) → (seasoned(Zamir) ⊕ resilient(Zamir))",
      "∀x (takes_charge(x) → (makes_decisions(x) ∨ confident(x)))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Zamir leads a crew, then he is experienced.",
      "Anyone who leads a crew either calms the fears of others or is authoritative (or both).",
      "If Zamir is adaptable, then he is both strong-willed and seasoned.",
      "If Zamir faces challenges, then he either stays calm or is confident (or both)."
    ],
    "distracting_rules_fol": [
      "leads_crew(Zamir) → experienced(Zamir)",
      "∀x (leads_crew(x) → (calms_fears(x) ∨ authoritative(x)))",
      "adaptable(Zamir) → (strong_willed(Zamir) ∧ seasoned(Zamir))",
      "faces_challenges(Zamir) → (stays_calm(Zamir) ∨ confident(Zamir))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Zamir takes charge.",
          "Zamir does not make decisions."
        ],
        "rules": "Anyone who takes charge either makes decisions or is confident (or both).",
        "conclusion": "Zamir is confident."
      },
      {
        "facts": [
          "Zamir is a veteran.",
          "Zamir is not resilient."
        ],
        "rules": "If Zamir is a veteran, then he is either seasoned or resilient, but not both.",
        "conclusion": "Zamir is seasoned."
      },
      {
        "facts": [
          "Zamir is seasoned.",
          "Zamir is confident."
        ],
        "rules": "If Zamir is seasoned, then he is both authoritative and confident.",
        "conclusion": "Zamir is authoritative."
      },
      {
        "facts": [
          "Zamir is skilled."
        ],
        "rules": "If Zamir is skilled, then he is experienced.",
        "conclusion": "Zamir is experienced."
      },
      {
        "facts": [
          "Zamir is experienced.",
          "Zamir is authoritative."
        ],
        "rules": "If Zamir is experienced, then he is either authoritative or nurturing, but not both.",
        "conclusion": "Zamir is nurturing."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "takes_charge(Zamir)",
          "¬makes_decisions(Zamir)"
        ],
        "rules": "∀x (takes_charge(x) → (makes_decisions(x) ∨ confident(x)))",
        "conclusion": "confident(Zamir)"
      },
      {
        "facts": [
          "veteran(Zamir)",
          "¬resilient(Zamir)"
        ],
        "rules": "veteran(Zamir) → (seasoned(Zamir) ⊕ resilient(Zamir))",
        "conclusion": "seasoned(Zamir)"
      },
      {
        "facts": [
          "seasoned(Zamir)",
          "confident(Zamir)"
        ],
        "rules": "seasoned(Zamir) → (authoritative(Zamir) ∧ confident(Zamir))",
        "conclusion": "authoritative(Zamir)"
      },
      {
        "facts": [
          "skilled(Zamir)"
        ],
        "rules": "skilled(Zamir) → experienced(Zamir)",
        "conclusion": "experienced(Zamir)"
      },
      {
        "facts": [
          "experienced(Zamir)",
          "authoritative(Zamir)"
        ],
        "rules": "experienced(Zamir) → (authoritative(Zamir) ⊕ nurturing(Zamir))",
        "conclusion": "nurturing(Zamir)"
      }
    ],
    "conclusion": "Zamir is nurturing.",
    "conclusion_fol": "nurturing(Zamir)",
    "answer": "False",
    "context": [
      "Zamir takes charge.",
      "Zamir does not make decisions.",
      "Anyone who takes charge either makes decisions or is confident (or both).",
      "Zamir is a veteran.",
      "Zamir is not resilient.",
      "If Zamir is a veteran, then he is either seasoned or resilient, but not both.",
      "If Zamir is seasoned, then he is both authoritative and confident.",
      "Zamir is skilled.",
      "If Zamir is skilled, then he is experienced.",
      "If Zamir is experienced, then he is either authoritative or nurturing, but not both."
    ],
    "context_fol": [
      "takes_charge(Zamir)",
      "¬makes_decisions(Zamir)",
      "∀x (takes_charge(x) → (makes_decisions(x) ∨ confident(x)))",
      "veteran(Zamir)",
      "¬resilient(Zamir)",
      "veteran(Zamir) → (seasoned(Zamir) ⊕ resilient(Zamir))",
      "seasoned(Zamir) → (authoritative(Zamir) ∧ confident(Zamir))",
      "skilled(Zamir)",
      "skilled(Zamir) → experienced(Zamir)",
      "experienced(Zamir) → (authoritative(Zamir) ⊕ nurturing(Zamir))"
    ],
    "background_story": "Zamir was a gruff but lovable sailor who spent his life at sea. His weathered face would often scow in concentration as he navigated the treacherous waters of the North Atlantic. Despite his tough exterior, Zamir had a soft spot for his crew and would go to great lengths to protect them. When a fierce storm hit, Zamir's scow-like expression turned into a fierce determination to keep his ship and crew safe. He bellowed orders above the howling wind, his eyes fixed on the horizon as he rode out the tempest. As the storm subsided, Zamir's scow relaxed into a warm smile, relieved that his crew had made it through unscathed.",
    "name": "Zamir",
    "keyword": "scow",
    "subject_category": "person"
  },
  {
    "facts": [
      "Dr. Harlow does not advance knowledge.",
      "Dr. Harlow develops new drugs.",
      "Dr. Harlow examines data.",
      "Dr. Harlow conducts experiments."
    ],
    "facts_fol": [
      "¬advance_knowledge(Harlow)",
      "develop_new_drugs(Harlow)",
      "examines_data(Harlow)",
      "conducts_experiments(Harlow)"
    ],
    "rules": [
      "If Dr. Harlow is dedicated to research, then she makes new discoveries and improves human lives.",
      "Every scientist either advances knowledge or improves human lives.",
      "If Dr. Harlow studies microbes, then she either develops new drugs or is dedicated to research, but not both.",
      "If Dr. Harlow examines data or conducts experiments, then she studies microbes."
    ],
    "rules_fol": [
      "dedicated_to_research(Harlow) → (make_new_discoveries(Harlow) ∧ improve_human_lives(Harlow))",
      "∀x (advance_knowledge(x) ∨ improve_human_lives(x))",
      "study_microbes(Harlow) → (develop_new_drugs(Harlow) ⊕ dedicated_to_research(Harlow))",
      "(examines_data(Harlow) ∨ conducts_experiments(Harlow)) → study_microbes(Harlow)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "All scientists who collaborate globally improve human lives and share their expertise.",
      "Any scientist who publishes papers or collaborates with colleagues is dedicated to research.",
      "All scientists who investigate bacteria study microbes."
    ],
    "distracting_rules_fol": [
      "∀x (collaborate_globally(x) → (improve_human_lives(x) ∧ share_expertise(x)))",
      "∀x ((publish_papers(x) ∨ collaborate_colleagues(x)) → dedicated_to_research(x))",
      "∀x (investigates_bacteria(x) → study_microbes(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Dr. Harlow examines data.",
          "Dr. Harlow conducts experiments."
        ],
        "rules": "If Dr. Harlow examines data or conducts experiments, then she studies microbes.",
        "conclusion": "Dr. Harlow studies microbes."
      },
      {
        "facts": [
          "Dr. Harlow studies microbes.",
          "Dr. Harlow develops new drugs."
        ],
        "rules": "If Dr. Harlow studies microbes, then she either develops new drugs or is dedicated to research, but not both.",
        "conclusion": "Dr. Harlow is not dedicated to research."
      },
      {
        "facts": [
          "Dr. Harlow does not advance knowledge."
        ],
        "rules": "Every scientist either advances knowledge or improves human lives.",
        "conclusion": "Dr. Harlow improves human lives."
      },
      {
        "facts": [
          "Dr. Harlow is not dedicated to research.",
          "Dr. Harlow improves human lives."
        ],
        "rules": "If Dr. Harlow is dedicated to research, then she makes new discoveries and improves human lives.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "examines_data(Harlow)",
          "conducts_experiments(Harlow)"
        ],
        "rules": "(examines_data(Harlow) ∨ conducts_experiments(Harlow)) → study_microbes(Harlow)",
        "conclusion": "study_microbes(Harlow)"
      },
      {
        "facts": [
          "study_microbes(Harlow)",
          "develop_new_drugs(Harlow)"
        ],
        "rules": "study_microbes(Harlow) → (develop_new_drugs(Harlow) ⊕ dedicated_to_research(Harlow))",
        "conclusion": "¬dedicated_to_research(Harlow)"
      },
      {
        "facts": [
          "¬advance_knowledge(Harlow)"
        ],
        "rules": "∀x (advance_knowledge(x) ∨ improve_human_lives(x))",
        "conclusion": "improve_human_lives(Harlow)"
      },
      {
        "facts": [
          "¬dedicated_to_research(Harlow)",
          "improve_human_lives(Harlow)"
        ],
        "rules": "dedicated_to_research(Harlow) → (make_new_discoveries(Harlow) ∧ improve_human_lives(Harlow))",
        "conclusion": null
      }
    ],
    "conclusion": "Dr. Harlow makes new discoveries.",
    "conclusion_fol": "make_new_discoveries(Harlow)",
    "answer": "Uncertain",
    "context": [
      "Dr. Harlow examines data.",
      "Dr. Harlow conducts experiments.",
      "If Dr. Harlow examines data or conducts experiments, then she studies microbes.",
      "Dr. Harlow develops new drugs.",
      "If Dr. Harlow studies microbes, then she either develops new drugs or is dedicated to research, but not both.",
      "Dr. Harlow does not advance knowledge.",
      "Every scientist either advances knowledge or improves human lives.",
      "If Dr. Harlow is dedicated to research, then she makes new discoveries and improves human lives."
    ],
    "context_fol": [
      "examines_data(Harlow)",
      "conducts_experiments(Harlow)",
      "(examines_data(Harlow) ∨ conducts_experiments(Harlow)) → study_microbes(Harlow)",
      "develop_new_drugs(Harlow)",
      "study_microbes(Harlow) → (develop_new_drugs(Harlow) ⊕ dedicated_to_research(Harlow))",
      "¬advance_knowledge(Harlow)",
      "∀x (advance_knowledge(x) ∨ improve_human_lives(x))",
      "dedicated_to_research(Harlow) → (make_new_discoveries(Harlow) ∧ improve_human_lives(Harlow))"
    ],
    "background_story": "Dr. Harlow was a renowned microbiologist specializing in the study of Actinomycetaceae, a family of bacteria known for producing antibiotics. Her groundbreaking research focused on harnessing the potential of these microbes to develop novel drugs against resistant infections. Harlow's lab discovered several new species of Actinomycetaceae with remarkable properties, leading to the creation of lifesaving medicines. Her dedication to understanding the complex relationships between these bacteria and their environments earned her international recognition. As a leading expert, Harlow traveled the world, collaborating with other scientists and sharing her knowledge to combat the growing threat of antibiotic resistance. Her work not only advanced the field of microbiology but also improved the lives of countless individuals affected by infectious diseases.",
    "name": "Harlow",
    "keyword": "actinomycetaceae",
    "subject_category": "scientist"
  },
  {
    "facts": [
      "Lincoln is a motivational author.",
      "Lincoln is charismatic.",
      "Lincoln shares knowledge.",
      "Lincoln is a thought leader.",
      "Lincoln offers advice.",
      "Lincoln is a leader.",
      "Lincoln writes books."
    ],
    "facts_fol": [
      "motivational_author(Lincoln)",
      "charismatic(Lincoln)",
      "share_knowledge(Lincoln)",
      "thought_leader(Lincoln)",
      "offers_advice(Lincoln)",
      "is_leader(Lincoln)",
      "writes_book(Lincoln)"
    ],
    "rules": [
      "If Lincoln is charismatic, then he shares knowledge and is a public speaker.",
      "If Lincoln is influential, then he is either inspiring or a thought leader, but not both.",
      "Anyone who empowers others is influential.",
      "Anyone who tells their story or offers advice can empower others.",
      "If Lincoln is a leader, then he either tells his story or writes books, but not both."
    ],
    "rules_fol": [
      "charismatic(Lincoln) → (share_knowledge(Lincoln) ∧ public_speaker(Lincoln))",
      "influential(Lincoln) → (inspiring(Lincoln) ⊕ thought_leader(Lincoln))",
      "∀x (empowers_others(x) → influential(x))",
      "∀x ((tells_story(x) ∨ offers_advice(x)) → empowers_others(x))",
      "is_leader(Lincoln) → (tells_story(Lincoln) ⊕ writes_book(Lincoln))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Lincoln is respected, then he is either a teacher online or a public speaker, but not both.",
      "If someone has passion and helps people, then they are inspiring.",
      "Anyone who has a vision or makes an impact is influential.",
      "If Lincoln cares deeply about others, then he empowers them.",
      "If Lincoln either shares his experiences or gives lectures (but not both), then he tells his story."
    ],
    "distracting_rules_fol": [
      "is_respected(Lincoln) → (teaches_online(Lincoln) ⊕ public_speaker(Lincoln))",
      "∀x ((has_passion(x) ∧ helps_people(x)) → inspiring(x))",
      "∀x ((has_vision(x) ∨ makes_impact(x)) → influential(x))",
      "cares_deeply(Lincoln) → empowers_others(Lincoln)",
      "(shares_experiences(Lincoln) ⊕ gives_lectures(Lincoln)) → tells_story(Lincoln)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Lincoln is a leader.",
          "Lincoln writes books."
        ],
        "rules": "If Lincoln is a leader, then he either tells his story or writes books, but not both.",
        "conclusion": "Lincoln does not tell his story."
      },
      {
        "facts": [
          "Lincoln does not tell his story.",
          "Lincoln offers advice."
        ],
        "rules": "Anyone who tells their story or offers advice can empower others.",
        "conclusion": "Lincoln empowers others."
      },
      {
        "facts": [
          "Lincoln empowers others."
        ],
        "rules": "Anyone who empowers others is influential.",
        "conclusion": "Lincoln is influential."
      },
      {
        "facts": [
          "Lincoln is influential.",
          "Lincoln is a thought leader."
        ],
        "rules": "If Lincoln is influential, then he is either inspiring or a thought leader, but not both.",
        "conclusion": "Lincoln is not inspiring."
      },
      {
        "facts": [
          "Lincoln is charismatic.",
          "Lincoln shares knowledge."
        ],
        "rules": "If Lincoln is charismatic, then he shares knowledge and is a public speaker.",
        "conclusion": "Lincoln is a public speaker."
      },
      {
        "facts": [
          "Lincoln is not inspiring.",
          "Lincoln is a public speaker.",
          "Lincoln is a motivational author."
        ],
        "rules": null,
        "conclusion": "Lincoln is inspiring and is either a public speaker or a motivational author (or both)."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "is_leader(Lincoln)",
          "writes_book(Lincoln)"
        ],
        "rules": "is_leader(Lincoln) → (tells_story(Lincoln) ⊕ writes_book(Lincoln))",
        "conclusion": "¬tells_story(Lincoln)"
      },
      {
        "facts": [
          "¬tells_story(Lincoln)",
          "offers_advice(Lincoln)"
        ],
        "rules": "∀x ((tells_story(x) ∨ offers_advice(x)) → empowers_others(x))",
        "conclusion": "empowers_others(Lincoln)"
      },
      {
        "facts": [
          "empowers_others(Lincoln)"
        ],
        "rules": "∀x (empowers_others(x) → influential(x))",
        "conclusion": "influential(Lincoln)"
      },
      {
        "facts": [
          "influential(Lincoln)",
          "thought_leader(Lincoln)"
        ],
        "rules": "influential(Lincoln) → (inspiring(Lincoln) ⊕ thought_leader(Lincoln))",
        "conclusion": "¬inspiring(Lincoln)"
      },
      {
        "facts": [
          "charismatic(Lincoln)",
          "share_knowledge(Lincoln)"
        ],
        "rules": "charismatic(Lincoln) → (share_knowledge(Lincoln) ∧ public_speaker(Lincoln))",
        "conclusion": "public_speaker(Lincoln)"
      },
      {
        "facts": [
          "¬inspiring(Lincoln)",
          "public_speaker(Lincoln)",
          "motivational_author(Lincoln)"
        ],
        "rules": null,
        "conclusion": "inspiring(Lincoln) ∧ (public_speaker(Lincoln) ∨ motivational_author(Lincoln))"
      }
    ],
    "conclusion": "Lincoln is inspiring and is either a public speaker or a motivational author (or both).",
    "conclusion_fol": "inspiring(Lincoln) ∧ (public_speaker(Lincoln) ∨ motivational_author(Lincoln))",
    "answer": "False",
    "context": [
      "Lincoln is a leader.",
      "Lincoln writes books.",
      "If Lincoln is a leader, then he either tells his story or writes books, but not both.",
      "Lincoln offers advice.",
      "Anyone who tells their story or offers advice can empower others.",
      "Anyone who empowers others is influential.",
      "Lincoln is a thought leader.",
      "If Lincoln is influential, then he is either inspiring or a thought leader, but not both.",
      "Lincoln is charismatic.",
      "Lincoln shares knowledge.",
      "If Lincoln is charismatic, then he shares knowledge and is a public speaker.",
      "Lincoln is a motivational author."
    ],
    "context_fol": [
      "is_leader(Lincoln)",
      "writes_book(Lincoln)",
      "is_leader(Lincoln) → (tells_story(Lincoln) ⊕ writes_book(Lincoln))",
      "offers_advice(Lincoln)",
      "∀x ((tells_story(x) ∨ offers_advice(x)) → empowers_others(x))",
      "∀x (empowers_others(x) → influential(x))",
      "thought_leader(Lincoln)",
      "influential(Lincoln) → (inspiring(Lincoln) ⊕ thought_leader(Lincoln))",
      "charismatic(Lincoln)",
      "share_knowledge(Lincoln)",
      "charismatic(Lincoln) → (share_knowledge(Lincoln) ∧ public_speaker(Lincoln))",
      "motivational_author(Lincoln)"
    ],
    "background_story": "Lincoln, a renowned motivational speaker, was frequently requested to deliver keynote addresses at conferences and seminars worldwide. His inspiring story of overcoming adversity and achieving success resonated deeply with audiences. After publishing his bestselling memoir, Lincoln became a highly sought-after speaker, requested by top corporations, universities, and non-profit organizations. His message of hope and perseverance touched the hearts of millions, making him one of the most requested speakers of his time. Lincoln's humility and kindness, despite his immense popularity, only added to his appeal, as he continued to inspire and motivate people from all walks of life.",
    "name": "Lincoln",
    "keyword": "requested",
    "subject_category": "human"
  },
  {
    "facts": [
      "Sexyness does not lead a guild.",
      "Sexyness does not break rules.",
      "Sexyness controls valuable assets.",
      "Sexyness is charismatic.",
      "Sexyness does not manipulate others."
    ],
    "facts_fol": [
      "¬leads_guild(Sexyness)",
      "¬breaks_rules(Sexyness)",
      "controls_assets(Sexyness)",
      "is_charismatic(Sexyness)",
      "¬manipulates_others(Sexyness)"
    ],
    "rules": [
      "For all fictional characters, if a character has power and abuses trust, then they will face consequences.",
      "If Sexyness either leads a guild or controls valuable assets (but not both), then they have power.",
      "If Sexyness holds influence, then they either break rules or abuse trust, but not both.",
      "If Sexyness is charismatic, then they either manipulate others or hold influence, but not both."
    ],
    "rules_fol": [
      "∀x ((has_power(x) ∧ abuses_trust(x)) → faces_consequences(x))",
      "(leads_guild(Sexyness) ⊕ controls_assets(Sexyness)) → has_power(Sexyness)",
      "holds_influence(Sexyness) → (breaks_rules(Sexyness) ⊕ abuses_trust(Sexyness))",
      "is_charismatic(Sexyness) → (manipulates_others(Sexyness) ⊕ holds_influence(Sexyness))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Sexyness either gains fame or has power.",
      "If Sexyness gains fame, then Sexyness seeks wealth and abuses trust.",
      "Any fictional character who gains fame and earns respect can hold influence."
    ],
    "distracting_rules_fol": [
      "gains_fame(Sexyness) ∨ has_power(Sexyness)",
      "gains_fame(Sexyness) → (seeks_wealth(Sexyness) ∧ abuses_trust(Sexyness))",
      "∀x ((gains_fame(x) ∧ earns_respect(x)) → holds_influence(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Sexyness is charismatic.",
          "Sexyness does not manipulate others."
        ],
        "rules": "If Sexyness is charismatic, then they either manipulate others or hold influence, but not both.",
        "conclusion": "Sexyness holds influence."
      },
      {
        "facts": [
          "Sexyness holds influence.",
          "Sexyness does not break rules."
        ],
        "rules": "If Sexyness holds influence, then they either break rules or abuse trust, but not both.",
        "conclusion": "Sexyness abuses trust."
      },
      {
        "facts": [
          "Sexyness does not lead a guild.",
          "Sexyness controls valuable assets."
        ],
        "rules": "If Sexyness either leads a guild or controls valuable assets (but not both), then they have power.",
        "conclusion": "Sexyness has power."
      },
      {
        "facts": [
          "Sexyness has power.",
          "Sexyness abuses trust."
        ],
        "rules": "For all fictional characters, if a character has power and abuses trust, then they will face consequences.",
        "conclusion": "Sexyness faces consequences."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "is_charismatic(Sexyness)",
          "¬manipulates_others(Sexyness)"
        ],
        "rules": "is_charismatic(Sexyness) → (manipulates_others(Sexyness) ⊕ holds_influence(Sexyness))",
        "conclusion": "holds_influence(Sexyness)"
      },
      {
        "facts": [
          "holds_influence(Sexyness)",
          "¬breaks_rules(Sexyness)"
        ],
        "rules": "holds_influence(Sexyness) → (breaks_rules(Sexyness) ⊕ abuses_trust(Sexyness))",
        "conclusion": "abuses_trust(Sexyness)"
      },
      {
        "facts": [
          "¬leads_guild(Sexyness)",
          "controls_assets(Sexyness)"
        ],
        "rules": "(leads_guild(Sexyness) ⊕ controls_assets(Sexyness)) → has_power(Sexyness)",
        "conclusion": "has_power(Sexyness)"
      },
      {
        "facts": [
          "has_power(Sexyness)",
          "abuses_trust(Sexyness)"
        ],
        "rules": "∀x ((has_power(x) ∧ abuses_trust(x)) → faces_consequences(x))",
        "conclusion": "faces_consequences(Sexyness)"
      }
    ],
    "conclusion": "Sexyness faces consequences.",
    "conclusion_fol": "faces_consequences(Sexyness)",
    "answer": "True",
    "context": [
      "Sexyness is charismatic.",
      "Sexyness does not manipulate others.",
      "If Sexyness is charismatic, then they either manipulate others or hold influence, but not both.",
      "Sexyness does not break rules.",
      "If Sexyness holds influence, then they either break rules or abuse trust, but not both.",
      "Sexyness does not lead a guild.",
      "Sexyness controls valuable assets.",
      "If Sexyness either leads a guild or controls valuable assets (but not both), then they have power.",
      "For all fictional characters, if a character has power and abuses trust, then they will face consequences."
    ],
    "context_fol": [
      "is_charismatic(Sexyness)",
      "¬manipulates_others(Sexyness)",
      "is_charismatic(Sexyness) → (manipulates_others(Sexyness) ⊕ holds_influence(Sexyness))",
      "¬breaks_rules(Sexyness)",
      "holds_influence(Sexyness) → (breaks_rules(Sexyness) ⊕ abuses_trust(Sexyness))",
      "¬leads_guild(Sexyness)",
      "controls_assets(Sexyness)",
      "(leads_guild(Sexyness) ⊕ controls_assets(Sexyness)) → has_power(Sexyness)",
      "∀x ((has_power(x) ∧ abuses_trust(x)) → faces_consequences(x))"
    ],
    "background_story": "Sexyness, a mysterious and alluring figure, was once a revered hero in the virtual world of Elyria. With unparalleled charisma and cunning, Sexyness led a guild of adventurers to countless victories against the dark forces of the digital realm. However, as time passed, whispers of wrongdoing began to circulate. It was discovered that Sexyness had been secretly manipulating the game's code, exploiting weaknesses to amass wealth and power. The community was shocked and outraged by the betrayal. Sexyness's guild was disbanded, and the once-celebrated hero was shunned by the very people they had once protected. The legend of Sexyness serves as a cautionary tale about the dangers of corruption and the importance of accountability, even in virtual worlds.",
    "name": "Sexyness",
    "keyword": "wrongdoing",
    "subject_category": "fictional character"
  },
  {
    "facts": [
      "Elaine collects rare samples.",
      "Elaine analyzes specimens.",
      "Elaine does not classify species.",
      "Elaine explores the rainforest.",
      "Elaine documents flora."
    ],
    "facts_fol": [
      "collect_rare_samples(Elaine)",
      "analyze_specimens(Elaine)",
      "¬classify_species(Elaine)",
      "explore_rainforest(Elaine)",
      "document_flora(Elaine)"
    ],
    "rules": [
      "For all botanists, if they study Rapateaceae and conduct expeditions, then they will make new discoveries.",
      "If Elaine researches tropical plants, then she either conducts expeditions or collects rare samples, but not both.",
      "If Elaine either analyzes specimens or classifies species (but not both), then she researches tropical plants.",
      "If Elaine explores the rainforest, then she either studies Rapateaceae or documents flora, but not both."
    ],
    "rules_fol": [
      "∀x ((study_Rapateaceae(x) ∧ conduct_expeditons(x)) → make_new_discoveries(x))",
      "research_tropical_plants(Elaine) → (conduct_expeditons(Elaine) ⊕ collect_rare_samples(Elaine))",
      "(analyze_specimens(Elaine) ⊕ classify_species(Elaine)) → research_tropical_plants(Elaine)",
      "explore_rainforest(Elaine) → (study_Rapateaceae(Elaine) ⊕ document_flora(Elaine))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Every botanist who investigates biodiversity either conducts expeditions or publishes papers.",
      "Elaine either examines flora or researches tropical plants.",
      "If Elaine investigates plant life, then she either studies Rapateaceae or contributes to conservation."
    ],
    "distracting_rules_fol": [
      "∀x (investigate_biodiversity(x) → (conduct_expeditons(x) ∨ publish_papers(x)))",
      "examines_flora(Elaine) ∨ research_tropical_plants(Elaine)",
      "investigate_plant_life(Elaine) → (study_Rapateaceae(Elaine) ∨ contribute_to_conservation(Elaine))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Elaine explores the rainforest.",
          "Elaine documents flora."
        ],
        "rules": "If Elaine explores the rainforest, then she either studies Rapateaceae or documents flora, but not both.",
        "conclusion": "Elaine does not study Rapateaceae."
      },
      {
        "facts": [
          "Elaine analyzes specimens.",
          "Elaine does not classify species."
        ],
        "rules": "If Elaine either analyzes specimens or classifies species (but not both), then she researches tropical plants.",
        "conclusion": "Elaine researches tropical plants."
      },
      {
        "facts": [
          "Elaine researches tropical plants.",
          "Elaine collects rare samples."
        ],
        "rules": "If Elaine researches tropical plants, then she either conducts expeditions or collects rare samples, but not both.",
        "conclusion": "Elaine does not conduct expeditions."
      },
      {
        "facts": [
          "Elaine does not study Rapateaceae.",
          "Elaine does not conduct expeditions."
        ],
        "rules": "For all botanists, if they study Rapateaceae and conduct expeditions, then they will make new discoveries.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "explore_rainforest(Elaine)",
          "document_flora(Elaine)"
        ],
        "rules": "explore_rainforest(Elaine) → (study_Rapateaceae(Elaine) ⊕ document_flora(Elaine))",
        "conclusion": "¬study_Rapateaceae(Elaine)"
      },
      {
        "facts": [
          "analyze_specimens(Elaine)",
          "¬classify_species(Elaine)"
        ],
        "rules": "(analyze_specimens(Elaine) ⊕ classify_species(Elaine)) → research_tropical_plants(Elaine)",
        "conclusion": "research_tropical_plants(Elaine)"
      },
      {
        "facts": [
          "research_tropical_plants(Elaine)",
          "collect_rare_samples(Elaine)"
        ],
        "rules": "research_tropical_plants(Elaine) → (conduct_expeditons(Elaine) ⊕ collect_rare_samples(Elaine))",
        "conclusion": "¬conduct_expeditons(Elaine)"
      },
      {
        "facts": [
          "¬study_Rapateaceae(Elaine)",
          "¬conduct_expeditons(Elaine)"
        ],
        "rules": "∀x ((study_Rapateaceae(x) ∧ conduct_expeditons(x)) → make_new_discoveries(x))",
        "conclusion": null
      }
    ],
    "conclusion": "Elaine makes new discoveries.",
    "conclusion_fol": "make_new_discoveries(Elaine)",
    "answer": "Uncertain",
    "context": [
      "Elaine explores the rainforest.",
      "Elaine documents flora.",
      "If Elaine explores the rainforest, then she either studies Rapateaceae or documents flora, but not both.",
      "Elaine analyzes specimens.",
      "Elaine does not classify species.",
      "If Elaine either analyzes specimens or classifies species (but not both), then she researches tropical plants.",
      "Elaine collects rare samples.",
      "If Elaine researches tropical plants, then she either conducts expeditions or collects rare samples, but not both.",
      "For all botanists, if they study Rapateaceae and conduct expeditions, then they will make new discoveries."
    ],
    "context_fol": [
      "explore_rainforest(Elaine)",
      "document_flora(Elaine)",
      "explore_rainforest(Elaine) → (study_Rapateaceae(Elaine) ⊕ document_flora(Elaine))",
      "analyze_specimens(Elaine)",
      "¬classify_species(Elaine)",
      "(analyze_specimens(Elaine) ⊕ classify_species(Elaine)) → research_tropical_plants(Elaine)",
      "collect_rare_samples(Elaine)",
      "research_tropical_plants(Elaine) → (conduct_expeditons(Elaine) ⊕ collect_rare_samples(Elaine))",
      "∀x ((study_Rapateaceae(x) ∧ conduct_expeditons(x)) → make_new_discoveries(x))"
    ],
    "background_story": "Elaine was a renowned botanist with a passion for the rare and exotic Rapateaceae family of plants. She spent years studying these unique species, native to the tropical regions of South America. Elaine's fascination with the Rapateaceae led her to embark on numerous expeditions into the Amazon rainforest, where she discovered several new species. Her groundbreaking research on the family's evolution and diversity earned her international recognition. Elaine's work not only expanded the scientific community's understanding of the Rapateaceae but also contributed to conservation efforts, ensuring the preservation of these extraordinary plants for future generations. Her dedication to botany and the Rapateaceae family was unparalleled, leaving a lasting legacy in the field.",
    "name": "Elaine",
    "keyword": "rapateaceae",
    "subject_category": "botanist"
  },
  {
    "facts": [
      "Gideon is a master cook.",
      "Gideon owns a restaurant.",
      "Gideon is a skilled cook.",
      "Gideon cooks with love.",
      "Gideon uses fresh ingredients."
    ],
    "facts_fol": [
      "master_cook(Gideon)",
      "own_restaurant(Gideon)",
      "skilled_cook(Gideon)",
      "cook_with_love(Gideon)",
      "use_fresh_ingredients(Gideon)"
    ],
    "rules": [
      "For all humans, if someone is a good chef, then they either create delicious recipes or bring people together through their cooking (or both).",
      "If Gideon is a master cook, then he either owns a restaurant or is a good chef, but not both.",
      "If Gideon is a skilled cook, then he either creates delicious recipes or makes people happy through his cooking, but not both.",
      "Anyone who cooks with love or uses fresh ingredients can make people happy."
    ],
    "rules_fol": [
      "∀x (good_chef(x) → (create_delicious_recipes(x) ∨ bring_people_together(x)))",
      "master_cook(Gideon) → (own_restaurant(Gideon) ⊕ good_chef(Gideon))",
      "skilled_cook(Gideon) → (create_delicious_recipes(Gideon) ⊕ make_people_happy(Gideon))",
      "∀x ((cook_with_love(x) ∨ use_fresh_ingredients(x)) → make_people_happy(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Gideon either prepares meals or is a good chef.",
      "If Gideon is passionate about food, then he either creates delicious recipes or supports local farmers (or both).",
      "If Gideon cares deeply about his customers, then he will make them happy."
    ],
    "distracting_rules_fol": [
      "prepares_meals(Gideon) ∨ good_chef(Gideon)",
      "passionate_about_food(Gideon) → (support_local_farmers(Gideon) ∨ create_delicious_recipes(Gideon))",
      "care_deeply(Gideon) → make_people_happy(Gideon)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Gideon cooks with love.",
          "Gideon uses fresh ingredients."
        ],
        "rules": "Anyone who cooks with love or uses fresh ingredients can make people happy.",
        "conclusion": "Gideon makes people happy through his cooking."
      },
      {
        "facts": [
          "Gideon is a skilled cook.",
          "Gideon makes people happy through his cooking."
        ],
        "rules": "If Gideon is a skilled cook, then he either creates delicious recipes or makes people happy through his cooking, but not both.",
        "conclusion": "Gideon does not create delicious recipes."
      },
      {
        "facts": [
          "Gideon is a master cook.",
          "Gideon owns a restaurant."
        ],
        "rules": "If Gideon is a master cook, then he either owns a restaurant or is a good chef, but not both.",
        "conclusion": "Gideon is not a good chef."
      },
      {
        "facts": [
          "Gideon is not a good chef.",
          "Gideon does not create delicious recipes."
        ],
        "rules": "For all humans, if someone is a good chef, then they either create delicious recipes or bring people together through their cooking (or both).",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "cook_with_love(Gideon)",
          "use_fresh_ingredients(Gideon)"
        ],
        "rules": "∀x ((cook_with_love(x) ∨ use_fresh_ingredients(x)) → make_people_happy(x))",
        "conclusion": "make_people_happy(Gideon)"
      },
      {
        "facts": [
          "skilled_cook(Gideon)",
          "make_people_happy(Gideon)"
        ],
        "rules": "skilled_cook(Gideon) → (create_delicious_recipes(Gideon) ⊕ make_people_happy(Gideon))",
        "conclusion": "¬create_delicious_recipes(Gideon)"
      },
      {
        "facts": [
          "master_cook(Gideon)",
          "own_restaurant(Gideon)"
        ],
        "rules": "master_cook(Gideon) → (own_restaurant(Gideon) ⊕ good_chef(Gideon))",
        "conclusion": "¬good_chef(Gideon)"
      },
      {
        "facts": [
          "¬good_chef(Gideon)",
          "¬create_delicious_recipes(Gideon)"
        ],
        "rules": "∀x (good_chef(x) → (create_delicious_recipes(x) ∨ bring_people_together(x)))",
        "conclusion": null
      }
    ],
    "conclusion": "Gideon does not bring people together through his cooking.",
    "conclusion_fol": "¬bring_people_together(Gideon)",
    "answer": "Uncertain",
    "context": [
      "Gideon cooks with love.",
      "Gideon uses fresh ingredients.",
      "Anyone who cooks with love or uses fresh ingredients can make people happy.",
      "Gideon is a skilled cook.",
      "If Gideon is a skilled cook, then he either creates delicious recipes or makes people happy through his cooking, but not both.",
      "Gideon is a master cook.",
      "Gideon owns a restaurant.",
      "If Gideon is a master cook, then he either owns a restaurant or is a good chef, but not both.",
      "For all humans, if someone is a good chef, then they either create delicious recipes or bring people together through their cooking (or both)."
    ],
    "context_fol": [
      "cook_with_love(Gideon)",
      "use_fresh_ingredients(Gideon)",
      "∀x ((cook_with_love(x) ∨ use_fresh_ingredients(x)) → make_people_happy(x))",
      "skilled_cook(Gideon)",
      "skilled_cook(Gideon) → (create_delicious_recipes(Gideon) ⊕ make_people_happy(Gideon))",
      "master_cook(Gideon)",
      "own_restaurant(Gideon)",
      "master_cook(Gideon) → (own_restaurant(Gideon) ⊕ good_chef(Gideon))",
      "∀x (good_chef(x) → (create_delicious_recipes(x) ∨ bring_people_together(x)))"
    ],
    "background_story": "Gideon was a humble chef from the southern United States, renowned for his delectable soups. His signature 'Gideon's Goodness' soup, a secret blend of spices and herbs, warmed the hearts and bellies of the entire town. Every morning, Gideon would wake up before dawn to prepare his soups, carefully selecting the freshest ingredients from local farmers. As the aroma of his soups wafted through the streets, people would gather at his small café, eager to taste his latest creations. Gideon's soups brought the community together, providing comfort and solace to all who savored them. His passion for cooking and dedication to his craft made him a beloved figure, and his soups a staple of the town's culinary scene.",
    "name": "Gideon",
    "keyword": "sou",
    "subject_category": "human"
  },
  {
    "facts": [
      "Bunny does not care for animals.",
      "Bunny explores the garden."
    ],
    "facts_fol": [
      "¬cares_animals(Bunny)",
      "explore_garden(Bunny)"
    ],
    "rules": [
      "For all rabbits, if a rabbit is gentle, then it is helpful and brings joy.",
      "If Bunny loves flowers, then she either heals others or brings joy (or both).",
      "Bunny either cares for animals or is gentle.",
      "Bunny either explores the garden or loves flowers, but not necessarily both."
    ],
    "rules_fol": [
      "∀x (gentle(x) → (helpful(x) ∧ bring_joy(x)))",
      "love_flowers(Bunny) → (heal_others(Bunny) ∨ bring_joy(Bunny))",
      "cares_animals(Bunny) ∨ gentle(Bunny)",
      "explore_garden(Bunny) ⊕ love_flowers(Bunny)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If a rabbit likes to play and shares food, then it brings joy.",
      "Any rabbit that hops slowly or nuzzles softly is gentle.",
      "If Bunny visits the garden, then she either watches butterflies or loves flowers (or both)."
    ],
    "distracting_rules_fol": [
      "∀x ((likes_play(x) ∧ shares_food(x)) → bring_joy(x))",
      "∀x ((hops_slowly(x) ∨ nuzzles_softly(x)) → gentle(x))",
      "visit_garden(Bunny) → (watch_butterflies(Bunny) ∨ love_flowers(Bunny))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Bunny explores the garden."
        ],
        "rules": "Bunny either explores the garden or loves flowers, but not necessarily both.",
        "conclusion": "Bunny does not love flowers."
      },
      {
        "facts": [
          "Bunny does not care for animals."
        ],
        "rules": "Bunny either cares for animals or is gentle.",
        "conclusion": "Bunny is gentle."
      },
      {
        "facts": [
          "Bunny does not love flowers."
        ],
        "rules": "If Bunny loves flowers, then she either heals others or brings joy (or both).",
        "conclusion": null
      },
      {
        "facts": [
          "Bunny is gentle."
        ],
        "rules": "For all rabbits, if a rabbit is gentle, then it is helpful and brings joy.",
        "conclusion": "Bunny is not helpful."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "explore_garden(Bunny)"
        ],
        "rules": "explore_garden(Bunny) ⊕ love_flowers(Bunny)",
        "conclusion": "¬love_flowers(Bunny)"
      },
      {
        "facts": [
          "¬cares_animals(Bunny)"
        ],
        "rules": "cares_animals(Bunny) ∨ gentle(Bunny)",
        "conclusion": "gentle(Bunny)"
      },
      {
        "facts": [
          "¬love_flowers(Bunny)"
        ],
        "rules": "love_flowers(Bunny) → (heal_others(Bunny) ∨ bring_joy(Bunny))",
        "conclusion": null
      },
      {
        "facts": [
          "gentle(Bunny)"
        ],
        "rules": "∀x (gentle(x) → (helpful(x) ∧ bring_joy(x)))",
        "conclusion": "¬helpful(Bunny)"
      }
    ],
    "conclusion": "Bunny is not helpful.",
    "conclusion_fol": "¬helpful(Bunny)",
    "answer": "False",
    "context": [
      "Bunny explores the garden.",
      "Bunny either explores the garden or loves flowers, but not necessarily both.",
      "Bunny does not care for animals.",
      "Bunny either cares for animals or is gentle.",
      "If Bunny loves flowers, then she either heals others or brings joy (or both).",
      "For all rabbits, if a rabbit is gentle, then it is helpful and brings joy."
    ],
    "context_fol": [
      "explore_garden(Bunny)",
      "explore_garden(Bunny) ⊕ love_flowers(Bunny)",
      "¬cares_animals(Bunny)",
      "cares_animals(Bunny) ∨ gentle(Bunny)",
      "love_flowers(Bunny) → (heal_others(Bunny) ∨ bring_joy(Bunny))",
      "∀x (gentle(x) → (helpful(x) ∧ bring_joy(x)))"
    ],
    "background_story": "Bunny, a gentle and curious rabbit, lived in a small garden filled with vibrant flowers. Among her favorites was the catharanthus, with its delicate pink and white petals. She loved to hop around the patches of catharanthus, feeling the soft leaves and watching the butterflies dance around the blooms. One day, while exploring, Bunny discovered that the catharanthus was not only beautiful but also had healing properties. She began to help her owner, a kind old gardener, harvest the flowers to make medicine for the sick animals in the neighborhood. Bunny's love for catharanthus and her desire to help others made her a special rabbit, spreading joy and health wherever she hopped.",
    "name": "Bunny",
    "keyword": "catharanthus",
    "subject_category": "rabbit"
  },
  {
    "facts": [
      "Chase is not confident.",
      "Chase is refined.",
      "Chase sews with precision.",
      "Chase does not make patterns.",
      "Chase attends formal events.",
      "Chase does not feel poised."
    ],
    "facts_fol": [
      "¬confident(Chase)",
      "refined(Chase)",
      "sews_precise(Chase)",
      "¬makes_patterns(Chase)",
      "attends_formal_events(Chase)",
      "¬feels_poised(Chase)"
    ],
    "rules": [
      "If Chase is elegant, then he is either refined or sophisticated, but not both.",
      "If Chase sews with precision and designs creatively, then he is elegant.",
      "Chase either makes patterns or designs creatively.",
      "If Chase attends formal events, then he is either poised or well-dressed, but not both."
    ],
    "rules_fol": [
      "elegant(Chase) → (refined(Chase) ⊕ sophisticated(Chase))",
      "(sews_precise(Chase) ∧ designs_creative(Chase)) → elegant(Chase)",
      "makes_patterns(Chase) ∨ designs_creative(Chase)",
      "attends_formal_events(Chase) → (feels_poised(Chase) ⊕ well_dressed(Chase))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Chase either dresses sharp or is sophisticated.",
      "If someone has flair and creates beauty, then they are elegant.",
      "Everyone who crafts garments either tailors with flair or designs creatively (or both).",
      "Anyone who dresses impeccably is well-dressed."
    ],
    "distracting_rules_fol": [
      "dresses_sharp(Chase) ∨ sophisticated(Chase)",
      "∀x ((has_flair(x) ∧ creates_beauty(x)) → elegant(x))",
      "∀x (crafts_garments(x) → (tailors_with_flair(x) ∨ designs_creative(x)))",
      "∀x (dresses_impeccably(x) → well_dressed(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Chase attends formal events.",
          "Chase does not feel poised."
        ],
        "rules": "If Chase attends formal events, then he is either poised or well-dressed, but not both.",
        "conclusion": "Chase is well-dressed."
      },
      {
        "facts": [
          "Chase does not make patterns."
        ],
        "rules": "Chase either makes patterns or designs creatively.",
        "conclusion": "Chase designs creatively."
      },
      {
        "facts": [
          "Chase sews with precision.",
          "Chase designs creatively."
        ],
        "rules": "If Chase sews with precision and designs creatively, then he is elegant.",
        "conclusion": "Chase is elegant."
      },
      {
        "facts": [
          "Chase is elegant.",
          "Chase is refined."
        ],
        "rules": "If Chase is elegant, then he is either refined or sophisticated, but not both.",
        "conclusion": "Chase is not sophisticated."
      },
      {
        "facts": [
          "Chase is well-dressed.",
          "Chase is not confident.",
          "Chase is not sophisticated."
        ],
        "rules": null,
        "conclusion": "If Chase is well-dressed, then he is either confident or sophisticated, but not both."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "attends_formal_events(Chase)",
          "¬feels_poised(Chase)"
        ],
        "rules": "attends_formal_events(Chase) → (feels_poised(Chase) ⊕ well_dressed(Chase))",
        "conclusion": "well_dressed(Chase)"
      },
      {
        "facts": [
          "¬makes_patterns(Chase)"
        ],
        "rules": "makes_patterns(Chase) ∨ designs_creative(Chase)",
        "conclusion": "designs_creative(Chase)"
      },
      {
        "facts": [
          "sews_precise(Chase)",
          "designs_creative(Chase)"
        ],
        "rules": "(sews_precise(Chase) ∧ designs_creative(Chase)) → elegant(Chase)",
        "conclusion": "elegant(Chase)"
      },
      {
        "facts": [
          "elegant(Chase)",
          "refined(Chase)"
        ],
        "rules": "elegant(Chase) → (refined(Chase) ⊕ sophisticated(Chase))",
        "conclusion": "¬sophisticated(Chase)"
      },
      {
        "facts": [
          "well_dressed(Chase)",
          "¬confident(Chase)",
          "¬sophisticated(Chase)"
        ],
        "rules": null,
        "conclusion": "well_dressed(Chase) → (confident(Chase) ⊕ sophisticated(Chase))"
      }
    ],
    "conclusion": "If Chase is well-dressed, then he is either confident or sophisticated, but not both.",
    "conclusion_fol": "well_dressed(Chase) → (confident(Chase) ⊕ sophisticated(Chase))",
    "answer": "False",
    "context": [
      "Chase attends formal events.",
      "Chase does not feel poised.",
      "If Chase attends formal events, then he is either poised or well-dressed, but not both.",
      "Chase does not make patterns.",
      "Chase either makes patterns or designs creatively.",
      "Chase sews with precision.",
      "If Chase sews with precision and designs creatively, then he is elegant.",
      "Chase is refined.",
      "If Chase is elegant, then he is either refined or sophisticated, but not both.",
      "Chase is not confident."
    ],
    "context_fol": [
      "attends_formal_events(Chase)",
      "¬feels_poised(Chase)",
      "attends_formal_events(Chase) → (feels_poised(Chase) ⊕ well_dressed(Chase))",
      "¬makes_patterns(Chase)",
      "makes_patterns(Chase) ∨ designs_creative(Chase)",
      "sews_precise(Chase)",
      "(sews_precise(Chase) ∧ designs_creative(Chase)) → elegant(Chase)",
      "refined(Chase)",
      "elegant(Chase) → (refined(Chase) ⊕ sophisticated(Chase))",
      "¬confident(Chase)"
    ],
    "background_story": "Chase was a talented fashion designer with a passion for creating unique and elegant clothing. Growing up, he was fascinated by the way a well-crafted garment could transform a person's confidence and demeanor. After completing fashion school, Chase opened his own boutique, where he offered bespoke clothing services to his clients. He took great pride in ensuring that every individual who walked into his store left feeling clothed in not just beautiful attire, but also in a sense of self-assurance. Chase's attention to detail and commitment to quality earned him a reputation as one of the city's top designers, with clients seeking him out for custom pieces that made them feel truly clothed in style and sophistication.",
    "name": "Chase",
    "keyword": "clothed",
    "subject_category": "human"
  },
  {
    "facts": [
      "Adelynn is honest about her pursuits.",
      "Adelynn is expressive.",
      "Adelynn is reserved."
    ],
    "facts_fol": [
      "is_honest(Adelynn)",
      "expressive(Adelynn)",
      "reserved(Adelynn)"
    ],
    "rules": [
      "If Adelynn is creative, then she is either publicly recognized for her work or privately fulfilled by it, but not both.",
      "If Adelynn is talented, then she is publicly recognized.",
      "Adelynn is either honest about her pursuits or talented in her work, but being one does not guarantee the other.",
      "If Adelynn is expressive, then she is either reserved or creative, but not both."
    ],
    "rules_fol": [
      "creative(Adelynn) → (publicly_recognized(Adelynn) ⊕ privately_fulfilled(Adelynn))",
      "talented(Adelynn) → publicly_recognized(Adelynn)",
      "is_honest(Adelynn) ⊕ talented(Adelynn)",
      "expressive(Adelynn) → (reserved(Adelynn) ⊕ creative(Adelynn))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If someone either wins awards or receives acclaim (but not both), then they are publicly recognized.",
      "If Adelynn is an inspired individual, then she is either talented or a skilled artist (or both).",
      "Anyone who imagines stories is creative."
    ],
    "distracting_rules_fol": [
      "∀x ((wins_awards(x) ⊕ receives_acclaim(x)) → publicly_recognized(x))",
      "inspired_individual(Adelynn) → (talented(Adelynn) ∨ skilled_artist(Adelynn))",
      "∀x (imagines_stories(x) → creative(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Adelynn is expressive.",
          "Adelynn is reserved."
        ],
        "rules": "If Adelynn is expressive, then she is either reserved or creative, but not both.",
        "conclusion": "Adelynn is not creative."
      },
      {
        "facts": [
          "Adelynn is honest about her pursuits."
        ],
        "rules": "Adelynn is either honest about her pursuits or talented in her work, but being one does not guarantee the other.",
        "conclusion": "Adelynn is not talented."
      },
      {
        "facts": [
          "Adelynn is not talented."
        ],
        "rules": "If Adelynn is talented, then she is publicly recognized.",
        "conclusion": null
      },
      {
        "facts": [
          "Adelynn is not creative."
        ],
        "rules": "If Adelynn is creative, then she is either publicly recognized for her work or privately fulfilled by it, but not both.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "expressive(Adelynn)",
          "reserved(Adelynn)"
        ],
        "rules": "expressive(Adelynn) → (reserved(Adelynn) ⊕ creative(Adelynn))",
        "conclusion": "¬creative(Adelynn)"
      },
      {
        "facts": [
          "is_honest(Adelynn)"
        ],
        "rules": "is_honest(Adelynn) ⊕ talented(Adelynn)",
        "conclusion": "¬talented(Adelynn)"
      },
      {
        "facts": [
          "¬talented(Adelynn)"
        ],
        "rules": "talented(Adelynn) → publicly_recognized(Adelynn)",
        "conclusion": null
      },
      {
        "facts": [
          "¬creative(Adelynn)"
        ],
        "rules": "creative(Adelynn) → (publicly_recognized(Adelynn) ⊕ privately_fulfilled(Adelynn))",
        "conclusion": null
      }
    ],
    "conclusion": "Adelynn is not privately fulfilled by her work.",
    "conclusion_fol": "¬privately_fulfilled(Adelynn)",
    "answer": "Uncertain",
    "context": [
      "Adelynn is expressive.",
      "Adelynn is reserved.",
      "If Adelynn is expressive, then she is either reserved or creative, but not both.",
      "Adelynn is honest about her pursuits.",
      "Adelynn is either honest about her pursuits or talented in her work, but being one does not guarantee the other.",
      "If Adelynn is talented, then she is publicly recognized.",
      "If Adelynn is creative, then she is either publicly recognized for her work or privately fulfilled by it, but not both."
    ],
    "context_fol": [
      "expressive(Adelynn)",
      "reserved(Adelynn)",
      "expressive(Adelynn) → (reserved(Adelynn) ⊕ creative(Adelynn))",
      "is_honest(Adelynn)",
      "is_honest(Adelynn) ⊕ talented(Adelynn)",
      "talented(Adelynn) → publicly_recognized(Adelynn)",
      "creative(Adelynn) → (publicly_recognized(Adelynn) ⊕ privately_fulfilled(Adelynn))"
    ],
    "background_story": "Adelynn was a shy and introverted artist, known to her friends and family for her beautiful paintings. However, secretly, she was also a skilled writer, penning novels under a pseudonym. By day, she taught art classes at a local studio, but by night, she poured her heart into her writing, weaving intricate stories and characters. Adelynn's secret life as a novelist was hidden from the world, known only to her closest confidant. She feared that her loved ones might not understand her passion for writing, or worse, criticize her work. So, she kept it hidden, secretly publishing her books online and watching as they gained a loyal following. As her writing career began to flourish, Adelynn struggled to keep her two worlds separate, but the thrill of her secret life only added to her creative inspiration.",
    "name": "Adelynn",
    "keyword": "secretly",
    "subject_category": "human"
  },
  {
    "facts": [
      "Lian weaves leaves.",
      "Lian makes baskets.",
      "Lian is creative.",
      "Lian does not learn fast."
    ],
    "facts_fol": [
      "weaves_leaves(Lian)",
      "makes_baskets(Lian)",
      "creative(Lian)",
      "¬learns_fast(Lian)"
    ],
    "rules": [
      "If Lian is either traditional or innovative (but not both), then she is successful.",
      "If Lian is an artisan, then she is either creative or traditional, but not both.",
      "If someone makes baskets and weaves leaves, then they are an artisan.",
      "If Lian improves her areca palm products, then she is innovative.",
      "Lian learns fast or improves."
    ],
    "rules_fol": [
      "(traditional(Lian) ⊕ innovative(Lian)) → successful(Lian)",
      "artisan(Lian) → (creative(Lian) ⊕ traditional(Lian))",
      "∀x ((makes_baskets(x) ∧ weaves_leaves(x)) → artisan(x))",
      "improves(Lian) → innovative(Lian)",
      "learns_fast(Lian) ∨ improves(Lian)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Anyone who uses ancestral methods or preserves culture is traditional.",
      "If Lian is skilled, then she is an artisan and patient.",
      "If someone thinks outside the box and experiments with new ideas, then they are innovative.",
      "Lian develops skills or improves."
    ],
    "distracting_rules_fol": [
      "∀x ((uses_ancestral_methods(x) ∨ preserves_culture(x)) → traditional(x))",
      "skilled(Lian) → (artisan(Lian) ∧ patient(Lian))",
      "∀x ((thinks_outside(x) ∧ experiments_new(x)) → innovative(x))",
      "develops_skills(Lian) ∨ improves(Lian)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Lian does not learn fast."
        ],
        "rules": "Lian learns fast or improves.",
        "conclusion": "Lian improves her areca palm products."
      },
      {
        "facts": [
          "Lian improves her areca palm products."
        ],
        "rules": "If Lian improves her areca palm products, then she is innovative.",
        "conclusion": "Lian is innovative."
      },
      {
        "facts": [
          "Lian makes baskets.",
          "Lian weaves leaves."
        ],
        "rules": "If someone makes baskets and weaves leaves, then they are an artisan.",
        "conclusion": "Lian is an artisan."
      },
      {
        "facts": [
          "Lian is an artisan.",
          "Lian is creative."
        ],
        "rules": "If Lian is an artisan, then she is either creative or traditional, but not both.",
        "conclusion": "Lian is not traditional."
      },
      {
        "facts": [
          "Lian is not traditional.",
          "Lian is innovative."
        ],
        "rules": "If Lian is either traditional or innovative (but not both), then she is successful.",
        "conclusion": "Lian is successful."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬learns_fast(Lian)"
        ],
        "rules": "learns_fast(Lian) ∨ improves(Lian)",
        "conclusion": "improves(Lian)"
      },
      {
        "facts": [
          "improves(Lian)"
        ],
        "rules": "improves(Lian) → innovative(Lian)",
        "conclusion": "innovative(Lian)"
      },
      {
        "facts": [
          "makes_baskets(Lian)",
          "weaves_leaves(Lian)"
        ],
        "rules": "∀x ((makes_baskets(x) ∧ weaves_leaves(x)) → artisan(x))",
        "conclusion": "artisan(Lian)"
      },
      {
        "facts": [
          "artisan(Lian)",
          "creative(Lian)"
        ],
        "rules": "artisan(Lian) → (creative(Lian) ⊕ traditional(Lian))",
        "conclusion": "¬traditional(Lian)"
      },
      {
        "facts": [
          "¬traditional(Lian)",
          "innovative(Lian)"
        ],
        "rules": "(traditional(Lian) ⊕ innovative(Lian)) → successful(Lian)",
        "conclusion": "successful(Lian)"
      }
    ],
    "conclusion": "Lian is successful.",
    "conclusion_fol": "successful(Lian)",
    "answer": "True",
    "context": [
      "Lian does not learn fast.",
      "Lian learns fast or improves.",
      "If Lian improves her areca palm products, then she is innovative.",
      "Lian makes baskets.",
      "Lian weaves leaves.",
      "If someone makes baskets and weaves leaves, then they are an artisan.",
      "Lian is creative.",
      "If Lian is an artisan, then she is either creative or traditional, but not both.",
      "If Lian is either traditional or innovative (but not both), then she is successful."
    ],
    "context_fol": [
      "¬learns_fast(Lian)",
      "learns_fast(Lian) ∨ improves(Lian)",
      "improves(Lian) → innovative(Lian)",
      "makes_baskets(Lian)",
      "weaves_leaves(Lian)",
      "∀x ((makes_baskets(x) ∧ weaves_leaves(x)) → artisan(x))",
      "creative(Lian)",
      "artisan(Lian) → (creative(Lian) ⊕ traditional(Lian))",
      "(traditional(Lian) ⊕ innovative(Lian)) → successful(Lian)"
    ],
    "background_story": "Lian was a skilled artisan from a small village in Southeast Asia, known for her exquisite craftsmanship with areca palm products. She spent most of her days weaving intricate baskets and bags from the versatile areca leaves. Lian's family had been involved in this traditional craft for generations, and she took great pride in preserving the techniques and stories passed down through her ancestors. As her skills improved, Lian began to innovate, combining modern designs with ancient methods to create unique and sought-after pieces. Her areca creations soon gained popularity in local markets and beyond, earning her recognition as a master artisan and helping to sustain her community's cultural heritage.",
    "name": "Lian",
    "keyword": "areca",
    "subject_category": "human"
  },
  {
    "facts": [
      "Maxton is confident.",
      "Maxton has style.",
      "Maxton cannot run fast."
    ],
    "facts_fol": [
      "is_confident(Maxton)",
      "has_style(Maxton)",
      "¬run_fast(Maxton)"
    ],
    "rules": [
      "For all humans, if someone is tall, then they can either play basketball well or have a physical advantage (or both).",
      "Maxton is either athletic or has a physical advantage, but not necessarily both.",
      "If Maxton stands out in a crowd, then he is tall.",
      "Anyone who is confident or has style can stand out in a crowd.",
      "Maxton is either athletic or can run fast, but not necessarily both."
    ],
    "rules_fol": [
      "∀x (tall(x) → (play_basketball(x) ∨ have_advantage(x)))",
      "are_athletic(Maxton) ⊕ have_advantage(Maxton)",
      "stands_out(Maxton) → tall(Maxton)",
      "∀x ((is_confident(x) ∨ has_style(x)) → stands_out(x))",
      "run_fast(Maxton) ⊕ are_athletic(Maxton)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If someone is coordinated, then they have a physical advantage.",
      "If Maxton is coordinated, then he is both a strong jumper and tall.",
      "Anyone who dresses uniquely stands out in a crowd.",
      "Anyone who excels in sports is athletic."
    ],
    "distracting_rules_fol": [
      "∀x (is_coordinated(x) → have_advantage(x))",
      "coordinated(Maxton) → (strong_jumper(Maxton) ∧ tall(Maxton))",
      "∀x (dresses_unique(x) → stands_out(x))",
      "∀x (excel_sports(x) → are_athletic(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Maxton cannot run fast."
        ],
        "rules": "Maxton is either athletic or can run fast, but not necessarily both.",
        "conclusion": "Maxton is athletic."
      },
      {
        "facts": [
          "Maxton is confident.",
          "Maxton has style."
        ],
        "rules": "Anyone who is confident or has style can stand out in a crowd.",
        "conclusion": "Maxton stands out in a crowd."
      },
      {
        "facts": [
          "Maxton stands out in a crowd."
        ],
        "rules": "If Maxton stands out in a crowd, then he is tall.",
        "conclusion": "Maxton is tall."
      },
      {
        "facts": [
          "Maxton is athletic."
        ],
        "rules": "Maxton is either athletic or has a physical advantage, but not necessarily both.",
        "conclusion": "Maxton does not have a physical advantage."
      },
      {
        "facts": [
          "Maxton is tall.",
          "Maxton does not have a physical advantage."
        ],
        "rules": "For all humans, if someone is tall, then they can either play basketball well or have a physical advantage (or both).",
        "conclusion": "Maxton can play basketball well."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬run_fast(Maxton)"
        ],
        "rules": "run_fast(Maxton) ⊕ are_athletic(Maxton)",
        "conclusion": "are_athletic(Maxton)"
      },
      {
        "facts": [
          "is_confident(Maxton)",
          "has_style(Maxton)"
        ],
        "rules": "∀x ((is_confident(x) ∨ has_style(x)) → stands_out(x))",
        "conclusion": "stands_out(Maxton)"
      },
      {
        "facts": [
          "stands_out(Maxton)"
        ],
        "rules": "stands_out(Maxton) → tall(Maxton)",
        "conclusion": "tall(Maxton)"
      },
      {
        "facts": [
          "are_athletic(Maxton)"
        ],
        "rules": "are_athletic(Maxton) ⊕ have_advantage(Maxton)",
        "conclusion": "¬have_advantage(Maxton)"
      },
      {
        "facts": [
          "tall(Maxton)",
          "¬have_advantage(Maxton)"
        ],
        "rules": "∀x (tall(x) → (play_basketball(x) ∨ have_advantage(x)))",
        "conclusion": "play_basketball(Maxton)"
      }
    ],
    "conclusion": "Maxton can play basketball well.",
    "conclusion_fol": "play_basketball(Maxton)",
    "answer": "True",
    "context": [
      "Maxton cannot run fast.",
      "Maxton is either athletic or can run fast, but not necessarily both.",
      "Maxton is confident.",
      "Maxton has style.",
      "Anyone who is confident or has style can stand out in a crowd.",
      "If Maxton stands out in a crowd, then he is tall.",
      "Maxton is either athletic or has a physical advantage, but not necessarily both.",
      "For all humans, if someone is tall, then they can either play basketball well or have a physical advantage (or both)."
    ],
    "context_fol": [
      "¬run_fast(Maxton)",
      "run_fast(Maxton) ⊕ are_athletic(Maxton)",
      "is_confident(Maxton)",
      "has_style(Maxton)",
      "∀x ((is_confident(x) ∨ has_style(x)) → stands_out(x))",
      "stands_out(Maxton) → tall(Maxton)",
      "are_athletic(Maxton) ⊕ have_advantage(Maxton)",
      "∀x (tall(x) → (play_basketball(x) ∨ have_advantage(x)))"
    ],
    "background_story": "Maxton was a teenager who stood out in a crowd, not just because of his bright smile, but also due to his noticeable lankiness. His long legs and arms seemed to go on forever, making him appear like a giraffe among his peers. Despite initial self-consciousness about his height and gangly appearance, Maxton learned to embrace his unique physique. He discovered a passion for basketball, where his lankiness became a significant advantage, allowing him to dunk with ease and block shots with his long arms. As he grew into his body, Maxton's confidence soared, and he became a star player on his school team. His lankiness, once a source of insecurity, had transformed into a defining feature that brought him success and pride.",
    "name": "Maxton",
    "keyword": "lankiness",
    "subject_category": "human"
  },
  {
    "facts": [
      "Mira attends university.",
      "Mira does not speak multiple languages.",
      "Mira works in diplomacy."
    ],
    "facts_fol": [
      "attend_university(Mira)",
      "¬speak_languages(Mira)",
      "work_diplomacy(Mira)"
    ],
    "rules": [
      "If Mira attends university, then she can either pursue a career or travel abroad, but not both.",
      "Anyone who studies abroad will travel abroad.",
      "If Mira either speaks multiple languages or lives overseas (but not both), then she studies abroad.",
      "If Mira works in diplomacy or has a passport, then she can live overseas."
    ],
    "rules_fol": [
      "attend_university(Mira) → (pursue_career(Mira) ⊕ travel_abroad(Mira))",
      "∀x (study_abroad(x) → travel_abroad(x))",
      "(speak_languages(Mira) ⊕ live_overseas(Mira)) → study_abroad(Mira)",
      "(work_diplomacy(Mira) ∨ have_passport(Mira)) → live_overseas(Mira)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Mira either explores cultures or learns history (but not both), then she travels abroad.",
      "If Mira seeks education, then she will study abroad.",
      "If Mira is an expatriate, then she either lives overseas or holds a visa, but not both."
    ],
    "distracting_rules_fol": [
      "(explore_cultures(Mira) ⊕ learn_history(Mira)) → travel_abroad(Mira)",
      "seek_education(Mira) → study_abroad(Mira)",
      "is_expatriate(Mira) → (live_overseas(Mira) ⊕ hold_visa(Mira))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Mira works in diplomacy."
        ],
        "rules": "If Mira works in diplomacy or has a passport, then she can live overseas.",
        "conclusion": "Mira lives overseas."
      },
      {
        "facts": [
          "Mira does not speak multiple languages.",
          "Mira lives overseas."
        ],
        "rules": "If Mira either speaks multiple languages or lives overseas (but not both), then she studies abroad.",
        "conclusion": "Mira studies abroad."
      },
      {
        "facts": [
          "Mira studies abroad."
        ],
        "rules": "Anyone who studies abroad will travel abroad.",
        "conclusion": "Mira travels abroad."
      },
      {
        "facts": [
          "Mira attends university.",
          "Mira travels abroad."
        ],
        "rules": "If Mira attends university, then she can either pursue a career or travel abroad, but not both.",
        "conclusion": "Mira pursues a career."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "work_diplomacy(Mira)"
        ],
        "rules": "(work_diplomacy(Mira) ∨ have_passport(Mira)) → live_overseas(Mira)",
        "conclusion": "live_overseas(Mira)"
      },
      {
        "facts": [
          "¬speak_languages(Mira)",
          "live_overseas(Mira)"
        ],
        "rules": "(speak_languages(Mira) ⊕ live_overseas(Mira)) → study_abroad(Mira)",
        "conclusion": "study_abroad(Mira)"
      },
      {
        "facts": [
          "study_abroad(Mira)"
        ],
        "rules": "∀x (study_abroad(x) → travel_abroad(x))",
        "conclusion": "travel_abroad(Mira)"
      },
      {
        "facts": [
          "attend_university(Mira)",
          "travel_abroad(Mira)"
        ],
        "rules": "attend_university(Mira) → (pursue_career(Mira) ⊕ travel_abroad(Mira))",
        "conclusion": "pursue_career(Mira)"
      }
    ],
    "conclusion": "Mira pursues a career.",
    "conclusion_fol": "pursue_career(Mira)",
    "answer": "False",
    "context": [
      "Mira works in diplomacy.",
      "If Mira works in diplomacy or has a passport, then she can live overseas.",
      "Mira does not speak multiple languages.",
      "If Mira either speaks multiple languages or lives overseas (but not both), then she studies abroad.",
      "Anyone who studies abroad will travel abroad.",
      "Mira attends university.",
      "If Mira attends university, then she can either pursue a career or travel abroad, but not both."
    ],
    "context_fol": [
      "work_diplomacy(Mira)",
      "(work_diplomacy(Mira) ∨ have_passport(Mira)) → live_overseas(Mira)",
      "¬speak_languages(Mira)",
      "(speak_languages(Mira) ⊕ live_overseas(Mira)) → study_abroad(Mira)",
      "∀x (study_abroad(x) → travel_abroad(x))",
      "attend_university(Mira)",
      "attend_university(Mira) → (pursue_career(Mira) ⊕ travel_abroad(Mira))"
    ],
    "background_story": "Mira was a bright and ambitious student who had always dreamed of attending Georgetown University. Growing up in a small town, she worked multiple part-time jobs to save up for tuition, determined to make her way to the prestigious school. Finally, after years of hard work, Mira was accepted into Georgetown's international relations program. She threw herself into campus life, joining the debate team and interning at a think tank. Mira's time at Georgetown was a whirlwind of late-night study sessions, lively discussions, and formative experiences that shaped her into a confident and cosmopolitan young woman. After graduating, she landed a job at the State Department, where she applied the skills and knowledge she gained at Georgetown to make a meaningful impact in global affairs.",
    "name": "Mira",
    "keyword": "georgetown",
    "subject_category": "human"
  },
  {
    "facts": [
      "Luciana does not regulate her emotions.",
      "Luciana exercises regularly.",
      "Luciana stays active."
    ],
    "facts_fol": [
      "¬regulate_emotions(Luciana)",
      "exercise_regularly(Luciana)",
      "stay_active(Luciana)"
    ],
    "rules": [
      "If Luciana experiences stress, then she will either gain weight or develop disorders, but not both.",
      "Luciana either regulates her emotions or experiences stress, but not both.",
      "Luciana either eats healthily or gains weight.",
      "If Luciana exercises regularly, then she either eats healthily or stays active, but not both."
    ],
    "rules_fol": [
      "experience_stress(Luciana) → (gain_weight(Luciana) ⊕ develop_disorders(Luciana))",
      "regulate_emotions(Luciana) ⊕ experience_stress(Luciana)",
      "eat_healthily(Luciana) ∨ gain_weight(Luciana)",
      "exercise_regularly(Luciana) → (eat_healthily(Luciana) ⊕ stay_active(Luciana))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Anyone who faces pressure or feels anxious can experience stress.",
      "Anyone who lives a sedentary lifestyle either gains weight or has mood swings.",
      "Luciana sleeps well or eats healthily."
    ],
    "distracting_rules_fol": [
      "∀x ((face_pressure(x) ∨ feel_anxious(x)) → experience_stress(x))",
      "∀x (live_sedentary(x) → (gain_weight(x) ∨ have_mood_swings(x)))",
      "sleep_well(Luciana) ∨ eat_healthily(Luciana)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Luciana exercises regularly.",
          "Luciana stays active."
        ],
        "rules": "If Luciana exercises regularly, then she either eats healthily or stays active, but not both.",
        "conclusion": "Luciana does not eat healthily."
      },
      {
        "facts": [
          "Luciana does not eat healthily."
        ],
        "rules": "Luciana either eats healthily or gains weight.",
        "conclusion": "Luciana gains weight."
      },
      {
        "facts": [
          "Luciana does not regulate her emotions."
        ],
        "rules": "Luciana either regulates her emotions or experiences stress, but not both.",
        "conclusion": "Luciana experiences stress."
      },
      {
        "facts": [
          "Luciana experiences stress.",
          "Luciana gains weight."
        ],
        "rules": "If Luciana experiences stress, then she will either gain weight or develop disorders, but not both.",
        "conclusion": "Luciana develops disorders."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "exercise_regularly(Luciana)",
          "stay_active(Luciana)"
        ],
        "rules": "exercise_regularly(Luciana) → (eat_healthily(Luciana) ⊕ stay_active(Luciana))",
        "conclusion": "¬eat_healthily(Luciana)"
      },
      {
        "facts": [
          "¬eat_healthily(Luciana)"
        ],
        "rules": "eat_healthily(Luciana) ∨ gain_weight(Luciana)",
        "conclusion": "gain_weight(Luciana)"
      },
      {
        "facts": [
          "¬regulate_emotions(Luciana)"
        ],
        "rules": "regulate_emotions(Luciana) ⊕ experience_stress(Luciana)",
        "conclusion": "experience_stress(Luciana)"
      },
      {
        "facts": [
          "experience_stress(Luciana)",
          "gain_weight(Luciana)"
        ],
        "rules": "experience_stress(Luciana) → (gain_weight(Luciana) ⊕ develop_disorders(Luciana))",
        "conclusion": "develop_disorders(Luciana)"
      }
    ],
    "conclusion": "Luciana develops disorders.",
    "conclusion_fol": "develop_disorders(Luciana)",
    "answer": "False",
    "context": [
      "Luciana exercises regularly.",
      "Luciana stays active.",
      "If Luciana exercises regularly, then she either eats healthily or stays active, but not both.",
      "Luciana either eats healthily or gains weight.",
      "Luciana does not regulate her emotions.",
      "Luciana either regulates her emotions or experiences stress, but not both.",
      "If Luciana experiences stress, then she will either gain weight or develop disorders, but not both."
    ],
    "context_fol": [
      "exercise_regularly(Luciana)",
      "stay_active(Luciana)",
      "exercise_regularly(Luciana) → (eat_healthily(Luciana) ⊕ stay_active(Luciana))",
      "eat_healthily(Luciana) ∨ gain_weight(Luciana)",
      "¬regulate_emotions(Luciana)",
      "regulate_emotions(Luciana) ⊕ experience_stress(Luciana)",
      "experience_stress(Luciana) → (gain_weight(Luciana) ⊕ develop_disorders(Luciana))"
    ],
    "background_story": "Luciana was a brilliant neuroscientist with a fascination for the human brain's most intricate functions. Her research focused on the hypothalamus, a small yet crucial region that regulates body temperature, hunger, and emotional responses. Luciana's groundbreaking studies on the hypothalamus led to a deeper understanding of its role in appetite control and metabolism. Her work had significant implications for the treatment of eating disorders and obesity. As she delved deeper into her research, Luciana became particularly interested in how the hypothalamus responds to stress and emotional stimuli, uncovering new pathways that could lead to more effective therapies for mood disorders. Her dedication to understanding the hypothalamus earned her international recognition and paved the way for new avenues in neuroscience research.",
    "name": "Luciana",
    "keyword": "hypothalamus",
    "subject_category": "human"
  },
  {
    "facts": [
      "Enzo is fair.",
      "Enzo does not serve others.",
      "Enzo fosters unity."
    ],
    "facts_fol": [
      "is_fair(Enzo)",
      "¬serves_others(Enzo)",
      "fosters_unity(Enzo)"
    ],
    "rules": [
      "For all humans, if someone is a community leader, then they are either honest or compassionate (or both).",
      "If Enzo is fair, then he may not necessarily be honest, and if Enzo is honest, then he may not necessarily be fair.",
      "Enzo either unites people or is a community leader, but not both.",
      "If Enzo either serves others or fosters unity (but not both), then he unites people."
    ],
    "rules_fol": [
      "∀x (community_leader(x) → (honest(x) ∨ compassionate(x)))",
      "is_fair(Enzo) ⊕ honest(Enzo)",
      "unites_people(Enzo) ⊕ community_leader(Enzo)",
      "(serves_others(Enzo) ⊕ fosters_unity(Enzo)) → unites_people(Enzo)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Everyone who speaks the truth is honest.",
      "All humans with strong morals who are community leaders are also good listeners.",
      "Anyone who brings harmony to their community unites people."
    ],
    "distracting_rules_fol": [
      "∀x (speaks_truth(x) → honest(x))",
      "∀x (strong_morals(x) → (community_leader(x) ∧ good_listener(x)))",
      "∀x (brings_harmony(x) → unites_people(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Enzo does not serve others.",
          "Enzo fosters unity."
        ],
        "rules": "If Enzo either serves others or fosters unity (but not both), then he unites people.",
        "conclusion": "Enzo unites people."
      },
      {
        "facts": [
          "Enzo unites people."
        ],
        "rules": "Enzo either unites people or is a community leader, but not both.",
        "conclusion": "Enzo is not a community leader."
      },
      {
        "facts": [
          "Enzo is fair."
        ],
        "rules": "If Enzo is fair, then he may not necessarily be honest, and if Enzo is honest, then he may not necessarily be fair.",
        "conclusion": "Enzo is not honest."
      },
      {
        "facts": [
          "Enzo is not a community leader.",
          "Enzo is not honest."
        ],
        "rules": "For all humans, if someone is a community leader, then they are either honest or compassionate (or both).",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬serves_others(Enzo)",
          "fosters_unity(Enzo)"
        ],
        "rules": "(serves_others(Enzo) ⊕ fosters_unity(Enzo)) → unites_people(Enzo)",
        "conclusion": "unites_people(Enzo)"
      },
      {
        "facts": [
          "unites_people(Enzo)"
        ],
        "rules": "unites_people(Enzo) ⊕ community_leader(Enzo)",
        "conclusion": "¬community_leader(Enzo)"
      },
      {
        "facts": [
          "is_fair(Enzo)"
        ],
        "rules": "is_fair(Enzo) ⊕ honest(Enzo)",
        "conclusion": "¬honest(Enzo)"
      },
      {
        "facts": [
          "¬community_leader(Enzo)",
          "¬honest(Enzo)"
        ],
        "rules": "∀x (community_leader(x) → (honest(x) ∨ compassionate(x)))",
        "conclusion": null
      }
    ],
    "conclusion": "Enzo is not compassionate.",
    "conclusion_fol": "¬compassionate(Enzo)",
    "answer": "Uncertain",
    "context": [
      "Enzo does not serve others.",
      "Enzo fosters unity.",
      "If Enzo either serves others or fosters unity (but not both), then he unites people.",
      "Enzo either unites people or is a community leader, but not both.",
      "Enzo is fair.",
      "If Enzo is fair, then he may not necessarily be honest, and if Enzo is honest, then he may not necessarily be fair.",
      "For all humans, if someone is a community leader, then they are either honest or compassionate (or both)."
    ],
    "context_fol": [
      "¬serves_others(Enzo)",
      "fosters_unity(Enzo)",
      "(serves_others(Enzo) ⊕ fosters_unity(Enzo)) → unites_people(Enzo)",
      "unites_people(Enzo) ⊕ community_leader(Enzo)",
      "is_fair(Enzo)",
      "is_fair(Enzo) ⊕ honest(Enzo)",
      "∀x (community_leader(x) → (honest(x) ∨ compassionate(x)))"
    ],
    "background_story": "Enzo was a man of tall stature and strong principles, often described as having a lincolnesque presence. His tall, lanky frame and rugged features drew comparisons to the 16th President, but it was his honest and compassionate demeanor that truly embodied the spirit of Lincoln. As a community leader, Enzo worked tirelessly to unite the town's factions and bring about positive change. His folksy, straightforward approach to problem-solving and his commitment to fairness and equality earned him the respect and admiration of all who knew him. Enzo's humble beginnings and self-education only added to his lincolnesque charm, making him a beloved figure in the community.",
    "name": "Enzo",
    "keyword": "lincolnesque",
    "subject_category": "human"
  },
  {
    "facts": [
      "Aadhya is not exploring ecosystems.",
      "Aadhya tracks species."
    ],
    "facts_fol": [
      "¬exploring_ecosystems(Aadhya)",
      "track_species(Aadhya)"
    ],
    "rules": [
      "All marine biologists either explore ecosystems or study ocean life.",
      "All marine biologists who analyze data contribute to research.",
      "Any marine biologist who tracks species or collects samples can analyze data."
    ],
    "rules_fol": [
      "∀x (exploring_ecosystems(x) ∨ study_ocean_life(x))",
      "∀x (analyze_data(x) → contribute_to_research(x))",
      "∀x ((track_species(x) ∨ collect_samples(x)) → analyze_data(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "All marine biologists who investigate marine life study ocean life.",
      "For all marine biologists, if they examine habitats and understand behavior, then they contribute to research.",
      "Any marine biologist who observes behaviors or examines habitats can analyze data."
    ],
    "distracting_rules_fol": [
      "∀x (investigate_marine(x) → study_ocean_life(x))",
      "∀x ((examines_habitats(x) ∧ understands_behavior(x)) → contribute_to_research(x))",
      "∀x ((observe_behaviors(x) ∨ examine_habitats(x)) → analyze_data(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Aadhya tracks species."
        ],
        "rules": "Any marine biologist who tracks species or collects samples can analyze data.",
        "conclusion": "Aadhya analyzes data."
      },
      {
        "facts": [
          "Aadhya analyzes data."
        ],
        "rules": "All marine biologists who analyze data contribute to research.",
        "conclusion": "Aadhya contributes to research."
      },
      {
        "facts": [
          "Aadhya is not exploring ecosystems."
        ],
        "rules": "All marine biologists either explore ecosystems or study ocean life.",
        "conclusion": "Aadhya studies ocean life."
      },
      {
        "facts": [
          "Aadhya studies ocean life.",
          "Aadhya contributes to research."
        ],
        "rules": null,
        "conclusion": "Aadhya's work on sperm whales involves studying ocean life and contributing to research."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "track_species(Aadhya)"
        ],
        "rules": "∀x ((track_species(x) ∨ collect_samples(x)) → analyze_data(x))",
        "conclusion": "analyze_data(Aadhya)"
      },
      {
        "facts": [
          "analyze_data(Aadhya)"
        ],
        "rules": "∀x (analyze_data(x) → contribute_to_research(x))",
        "conclusion": "contribute_to_research(Aadhya)"
      },
      {
        "facts": [
          "¬exploring_ecosystems(Aadhya)"
        ],
        "rules": "∀x (exploring_ecosystems(x) ∨ study_ocean_life(x))",
        "conclusion": "study_ocean_life(Aadhya)"
      },
      {
        "facts": [
          "study_ocean_life(Aadhya)",
          "contribute_to_research(Aadhya)"
        ],
        "rules": null,
        "conclusion": "study_ocean_life(Aadhya) ∧ contribute_to_research(Aadhya)"
      }
    ],
    "conclusion": "Aadhya's work on sperm whales involves studying ocean life and contributing to research.",
    "conclusion_fol": "study_ocean_life(Aadhya) ∧ contribute_to_research(Aadhya)",
    "answer": "True",
    "context": [
      "Aadhya tracks species.",
      "Any marine biologist who tracks species or collects samples can analyze data.",
      "All marine biologists who analyze data contribute to research.",
      "Aadhya is not exploring ecosystems.",
      "All marine biologists either explore ecosystems or study ocean life."
    ],
    "context_fol": [
      "track_species(Aadhya)",
      "∀x ((track_species(x) ∨ collect_samples(x)) → analyze_data(x))",
      "∀x (analyze_data(x) → contribute_to_research(x))",
      "¬exploring_ecosystems(Aadhya)",
      "∀x (exploring_ecosystems(x) ∨ study_ocean_life(x))"
    ],
    "background_story": "Aadhya was a dedicated marine biologist who spent most of her career studying the sperm whale. Her fascination with these massive creatures began when she was a child, listening to her grandfather's tales of the sea. As she delved deeper into her research, Aadhya became particularly interested in the social behaviors of sperm whales, noting their complex communication patterns and loyal pod structures. She spent years at sea, tracking and observing these gentle giants, earning their trust and respect. Aadhya's groundbreaking research on sperm whales revealed new insights into their migratory patterns, feeding habits, and unique cultural behaviors, contributing significantly to the field of marine biology and inspiring a new generation of researchers to follow in her footsteps.",
    "name": "Aadhya",
    "keyword": "spermous",
    "subject_category": "marine biology"
  },
  {
    "facts": [
      "Malia thinks creatively.",
      "Malia is dedicated.",
      "Malia does not solve problems.",
      "Malia improves people's lives."
    ],
    "facts_fol": [
      "thinks_creatively(Malia)",
      "is_dedicated(Malia)",
      "¬solves_problems(Malia)",
      "improves_lives(Malia)"
    ],
    "rules": [
      "If Malia is innovative, then she can either revolutionize an industry or inspire others, but not both.",
      "If someone thinks creatively and works tirelessly, then they can revolutionize an industry.",
      "If Malia is dedicated, then she either solves problems or works tirelessly, but not both.",
      "If Malia improves people's lives, then she is innovative."
    ],
    "rules_fol": [
      "innovative(Malia) → (revolutionize_industry(Malia) ⊕ inspire_others(Malia))",
      "∀x ((thinks_creatively(x) ∧ works_tirelessly(x)) → revolutionize_industry(x))",
      "is_dedicated(Malia) → (solves_problems(Malia) ⊕ works_tirelessly(Malia))",
      "improves_lives(Malia) → innovative(Malia)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If someone develops new technology and pushes boundaries, then they can revolutionize an industry.",
      "Anyone who is passionate either works tirelessly or makes breakthroughs.",
      "If Malia is a pioneer, then she is either innovative or makes breakthroughs, but not both."
    ],
    "distracting_rules_fol": [
      "∀x ((develops_new_technology(x) ∧ pushes_boundaries(x)) → revolutionize_industry(x))",
      "∀x (is_passionate(x) → (works_tirelessly(x) ∨ makes_breakthroughs(x)))",
      "is_pioneer(Malia) → (innovative(Malia) ⊕ makes_breakthroughs(Malia))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Malia improves people's lives."
        ],
        "rules": "If Malia improves people's lives, then she is innovative.",
        "conclusion": "Malia is innovative."
      },
      {
        "facts": [
          "Malia is dedicated.",
          "Malia does not solve problems."
        ],
        "rules": "If Malia is dedicated, then she either solves problems or works tirelessly, but not both.",
        "conclusion": "Malia works tirelessly."
      },
      {
        "facts": [
          "Malia thinks creatively.",
          "Malia works tirelessly."
        ],
        "rules": "If someone thinks creatively and works tirelessly, then they can revolutionize an industry.",
        "conclusion": "Malia revolutionizes an industry."
      },
      {
        "facts": [
          "Malia is innovative.",
          "Malia revolutionizes an industry."
        ],
        "rules": "If Malia is innovative, then she can either revolutionize an industry or inspire others, but not both.",
        "conclusion": "Malia does not inspire others."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "improves_lives(Malia)"
        ],
        "rules": "improves_lives(Malia) → innovative(Malia)",
        "conclusion": "innovative(Malia)"
      },
      {
        "facts": [
          "is_dedicated(Malia)",
          "¬solves_problems(Malia)"
        ],
        "rules": "is_dedicated(Malia) → (solves_problems(Malia) ⊕ works_tirelessly(Malia))",
        "conclusion": "works_tirelessly(Malia)"
      },
      {
        "facts": [
          "thinks_creatively(Malia)",
          "works_tirelessly(Malia)"
        ],
        "rules": "∀x ((thinks_creatively(x) ∧ works_tirelessly(x)) → revolutionize_industry(x))",
        "conclusion": "revolutionize_industry(Malia)"
      },
      {
        "facts": [
          "innovative(Malia)",
          "revolutionize_industry(Malia)"
        ],
        "rules": "innovative(Malia) → (revolutionize_industry(Malia) ⊕ inspire_others(Malia))",
        "conclusion": "¬inspire_others(Malia)"
      }
    ],
    "conclusion": "Malia does not inspire others.",
    "conclusion_fol": "¬inspire_others(Malia)",
    "answer": "True",
    "context": [
      "Malia improves people's lives.",
      "If Malia improves people's lives, then she is innovative.",
      "Malia is dedicated.",
      "Malia does not solve problems.",
      "If Malia is dedicated, then she either solves problems or works tirelessly, but not both.",
      "Malia thinks creatively.",
      "If someone thinks creatively and works tirelessly, then they can revolutionize an industry.",
      "If Malia is innovative, then she can either revolutionize an industry or inspire others, but not both."
    ],
    "context_fol": [
      "improves_lives(Malia)",
      "improves_lives(Malia) → innovative(Malia)",
      "is_dedicated(Malia)",
      "¬solves_problems(Malia)",
      "is_dedicated(Malia) → (solves_problems(Malia) ⊕ works_tirelessly(Malia))",
      "thinks_creatively(Malia)",
      "∀x ((thinks_creatively(x) ∧ works_tirelessly(x)) → revolutionize_industry(x))",
      "innovative(Malia) → (revolutionize_industry(Malia) ⊕ inspire_others(Malia))"
    ],
    "background_story": "Malia was a brilliant and innovative engineer known for her groundbreaking work on extensile technology. Growing up, she was fascinated by the potential of materials that could stretch and adapt to different situations. Malia dedicated herself to developing new polymers and alloys that could be used in everything from medical devices to space exploration equipment. Her most notable invention was an extensile robotic arm that could reach and retrieve objects from tight spaces, revolutionizing search and rescue operations. Malia's work not only showcased her technical genius but also her ability to think outside the box, pushing the boundaries of what was thought possible with extensile materials. Her contributions to the field have paved the way for a new generation of engineers and inventors.",
    "name": "Malia",
    "keyword": "extensile",
    "subject_category": "human"
  },
  {
    "facts": [
      "Baker is healthy in her well-being.",
      "Baker learns quickly.",
      "Baker does not seek guidance."
    ],
    "facts_fol": [
      "healthy(Baker)",
      "learns_fast(Baker)",
      "¬seeks_guidance(Baker)"
    ],
    "rules": [
      "If Baker is informed about menstrual health, then she is either confident in her teaching or healthy in her well-being, but not both.",
      "If someone learns quickly and asks questions, then they become informed.",
      "For Baker, either she seeks guidance or she asks questions, but not both."
    ],
    "rules_fol": [
      "informed(Baker) → (confident(Baker) ⊕ healthy(Baker))",
      "∀x ((learns_fast(x) ∧ asks_questions(x)) → informed(x))",
      "seeks_guidance(Baker) ⊕ asks_questions(Baker)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Baker either reads widely or shares knowledge (but not both), then she is informed.",
      "Everyone who seeks knowledge either asks questions or explores topics."
    ],
    "distracting_rules_fol": [
      "(reads_widely(Baker) ⊕ shares_knowledge(Baker)) → informed(Baker)",
      "∀x (seeks_knowledge(x) → (asks_questions(x) ∨ explores_topics(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Baker does not seek guidance."
        ],
        "rules": "For Baker, either she seeks guidance or she asks questions, but not both.",
        "conclusion": "Baker asks questions."
      },
      {
        "facts": [
          "Baker learns quickly.",
          "Baker asks questions."
        ],
        "rules": "If someone learns quickly and asks questions, then they become informed.",
        "conclusion": "Baker is informed about menstrual health."
      },
      {
        "facts": [
          "Baker is informed about menstrual health.",
          "Baker is healthy in her well-being."
        ],
        "rules": "If Baker is informed about menstrual health, then she is either confident in her teaching or healthy in her well-being, but not both.",
        "conclusion": "Baker is not confident in her teaching."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬seeks_guidance(Baker)"
        ],
        "rules": "seeks_guidance(Baker) ⊕ asks_questions(Baker)",
        "conclusion": "asks_questions(Baker)"
      },
      {
        "facts": [
          "learns_fast(Baker)",
          "asks_questions(Baker)"
        ],
        "rules": "∀x ((learns_fast(x) ∧ asks_questions(x)) → informed(x))",
        "conclusion": "informed(Baker)"
      },
      {
        "facts": [
          "informed(Baker)",
          "healthy(Baker)"
        ],
        "rules": "informed(Baker) → (confident(Baker) ⊕ healthy(Baker))",
        "conclusion": "¬confident(Baker)"
      }
    ],
    "conclusion": "Baker is not confident in her teaching.",
    "conclusion_fol": "¬confident(Baker)",
    "answer": "True",
    "context": [
      "Baker does not seek guidance.",
      "For Baker, either she seeks guidance or she asks questions, but not both.",
      "Baker learns quickly.",
      "If someone learns quickly and asks questions, then they become informed.",
      "Baker is healthy in her well-being.",
      "If Baker is informed about menstrual health, then she is either confident in her teaching or healthy in her well-being, but not both."
    ],
    "context_fol": [
      "¬seeks_guidance(Baker)",
      "seeks_guidance(Baker) ⊕ asks_questions(Baker)",
      "learns_fast(Baker)",
      "∀x ((learns_fast(x) ∧ asks_questions(x)) → informed(x))",
      "healthy(Baker)",
      "informed(Baker) → (confident(Baker) ⊕ healthy(Baker))"
    ],
    "background_story": "Baker, a high school health educator, was passionate about breaking the stigma surrounding menstruation. Growing up, she had felt embarrassed and unprepared for her first period, and she wanted to ensure her students didn't suffer the same fate. Baker developed a comprehensive program to teach adolescents about menstrual health, hygiene, and self-care. She created a safe space for open discussions, addressing myths and misconceptions about menstruation. Baker's efforts didn't go unnoticed; her students became more confident and informed, and the school saw a significant reduction in period-related absences. Baker's dedication to menstrual education earned her a community award, and she continued to inspire a new generation of young people to prioritize their reproductive health and well-being.",
    "name": "Baker",
    "keyword": "menstruation",
    "subject_category": "human"
  },
  {
    "facts": [
      "Kayleigh is spontaneous.",
      "Kayleigh is expressive."
    ],
    "facts_fol": [
      "is_spontaneous(Kayleigh)",
      "expressive(Kayleigh)"
    ],
    "rules": [
      "Kayleigh is either creative or relaxed (or both).",
      "If Kayleigh is artistic, then she is either creative or spontaneous, but not both.",
      "If Kayleigh is expressive, then she is both open-minded and artistic."
    ],
    "rules_fol": [
      "creative(Kayleigh) ∨ relaxed(Kayleigh)",
      "is_artistic(Kayleigh) → (creative(Kayleigh) ⊕ is_spontaneous(Kayleigh))",
      "expressive(Kayleigh) → (open_minded(Kayleigh) ∧ is_artistic(Kayleigh))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If someone sees beauty and makes art, then they are creative.",
      "If Kayleigh is imaginative, then she is either artistic or adventurous, but not both."
    ],
    "distracting_rules_fol": [
      "∀x ((sees_beauty(x) ∧ makes_art(x)) → creative(x))",
      "imaginative(Kayleigh) → (is_artistic(Kayleigh) ⊕ adventurous(Kayleigh))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Kayleigh is expressive."
        ],
        "rules": "If Kayleigh is expressive, then she is both open-minded and artistic.",
        "conclusion": "Kayleigh is artistic."
      },
      {
        "facts": [
          "Kayleigh is artistic.",
          "Kayleigh is spontaneous."
        ],
        "rules": "If Kayleigh is artistic, then she is either creative or spontaneous, but not both.",
        "conclusion": "Kayleigh is not creative."
      },
      {
        "facts": [
          "Kayleigh is not creative."
        ],
        "rules": "Kayleigh is either creative or relaxed (or both).",
        "conclusion": "Kayleigh is relaxed."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "expressive(Kayleigh)"
        ],
        "rules": "expressive(Kayleigh) → (open_minded(Kayleigh) ∧ is_artistic(Kayleigh))",
        "conclusion": "is_artistic(Kayleigh)"
      },
      {
        "facts": [
          "is_artistic(Kayleigh)",
          "is_spontaneous(Kayleigh)"
        ],
        "rules": "is_artistic(Kayleigh) → (creative(Kayleigh) ⊕ is_spontaneous(Kayleigh))",
        "conclusion": "¬creative(Kayleigh)"
      },
      {
        "facts": [
          "¬creative(Kayleigh)"
        ],
        "rules": "creative(Kayleigh) ∨ relaxed(Kayleigh)",
        "conclusion": "relaxed(Kayleigh)"
      }
    ],
    "conclusion": "Kayleigh is relaxed.",
    "conclusion_fol": "relaxed(Kayleigh)",
    "answer": "True",
    "context": [
      "Kayleigh is expressive.",
      "If Kayleigh is expressive, then she is both open-minded and artistic.",
      "Kayleigh is spontaneous.",
      "If Kayleigh is artistic, then she is either creative or spontaneous, but not both.",
      "Kayleigh is either creative or relaxed (or both)."
    ],
    "context_fol": [
      "expressive(Kayleigh)",
      "expressive(Kayleigh) → (open_minded(Kayleigh) ∧ is_artistic(Kayleigh))",
      "is_spontaneous(Kayleigh)",
      "is_artistic(Kayleigh) → (creative(Kayleigh) ⊕ is_spontaneous(Kayleigh))",
      "creative(Kayleigh) ∨ relaxed(Kayleigh)"
    ],
    "background_story": "Kayleigh was a free-spirited artist who lived life on her own terms. She approached each day with a carefree attitude, often lackadaisically drifting from one creative project to the next. Her friends and family would often describe her as laid-back, never one to rush or stress about deadlines. Kayleigh's art studio was a reflection of her easy-going nature, with half-finished paintings and scattered brushes a testament to her meandering creative process. Despite her relaxed demeanor, Kayleigh's artwork was highly sought after, with many admiring her unique, effortless style. As she would say, 'Why rush when inspiration will come to you?' Kayleigh's lackadaisical approach to life had become a defining characteristic, one that brought her a sense of peace and fulfillment.",
    "name": "Kayleigh",
    "keyword": "lackadaisically",
    "subject_category": "human"
  },
  {
    "facts": [
      "Tiana does not manage logistics."
    ],
    "facts_fol": [
      "¬manages_logistics(Tiana)"
    ],
    "rules": [
      "If Tiana is meticulous, then she plans successful events.",
      "Tiana is either meticulous or thinks creatively, but not necessarily both, in her approach to event planning.",
      "Tiana either manages logistics or thinks creatively."
    ],
    "rules_fol": [
      "is_meticulous(Tiana) → plans_successful_events(Tiana)",
      "thinks_creatively(Tiana) ⊕ is_meticulous(Tiana)",
      "manages_logistics(Tiana) ∨ thinks_creatively(Tiana)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Anyone who pays attention or has patience is meticulous.",
      "Anyone who designs venues either thinks creatively or coordinates details."
    ],
    "distracting_rules_fol": [
      "∀x ((pays_attention(x) ∨ has_patience(x)) → is_meticulous(x))",
      "∀x (designs_venues(x) → (thinks_creatively(x) ∨ coordinates_details(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Tiana does not manage logistics."
        ],
        "rules": "Tiana either manages logistics or thinks creatively.",
        "conclusion": "Tiana thinks creatively."
      },
      {
        "facts": [
          "Tiana thinks creatively."
        ],
        "rules": "Tiana is either meticulous or thinks creatively, but not necessarily both, in her approach to event planning.",
        "conclusion": "Tiana is not meticulous."
      },
      {
        "facts": [
          "Tiana is not meticulous."
        ],
        "rules": "If Tiana is meticulous, then she plans successful events.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬manages_logistics(Tiana)"
        ],
        "rules": "manages_logistics(Tiana) ∨ thinks_creatively(Tiana)",
        "conclusion": "thinks_creatively(Tiana)"
      },
      {
        "facts": [
          "thinks_creatively(Tiana)"
        ],
        "rules": "thinks_creatively(Tiana) ⊕ is_meticulous(Tiana)",
        "conclusion": "¬is_meticulous(Tiana)"
      },
      {
        "facts": [
          "¬is_meticulous(Tiana)"
        ],
        "rules": "is_meticulous(Tiana) → plans_successful_events(Tiana)",
        "conclusion": null
      }
    ],
    "conclusion": "Tiana does not plan successful events.",
    "conclusion_fol": "¬plans_successful_events(Tiana)",
    "answer": "Uncertain",
    "context": [
      "Tiana does not manage logistics.",
      "Tiana either manages logistics or thinks creatively.",
      "Tiana is either meticulous or thinks creatively, but not necessarily both, in her approach to event planning.",
      "If Tiana is meticulous, then she plans successful events."
    ],
    "context_fol": [
      "¬manages_logistics(Tiana)",
      "manages_logistics(Tiana) ∨ thinks_creatively(Tiana)",
      "thinks_creatively(Tiana) ⊕ is_meticulous(Tiana)",
      "is_meticulous(Tiana) → plans_successful_events(Tiana)"
    ],
    "background_story": "Tiana was a meticulous event planner known for her impeccable taste and ability to bring order to chaos. With a keen eye for detail, she could transform any space into a stunning venue, whether it was a wedding, corporate gala, or intimate dinner party. Clients adored her for her calm demeanor and ability to manage even the most complex logistics with ease. Tiana's passion for planning began when she helped organize her sister's wedding, and soon, word of her exceptional skills spread. She founded her own event planning company, where she and her team worked tirelessly to ensure every event was flawless. Tiana's dedication to her craft earned her the reputation as the 'orderer' of events, where every detail, no matter how small, was meticulously considered to create unforgettable experiences.",
    "name": "Tiana",
    "keyword": "orderer",
    "subject_category": "human"
  },
  {
    "facts": [
      "Elsie is documenting common fungi.",
      "Elsie identifies new species."
    ],
    "facts_fol": [
      "documenting_common_fungi(Elsie)",
      "identifies_species(Elsie)"
    ],
    "rules": [
      "If Elsie is either studying rare fungi or documenting common fungi (but not both), then she is respected.",
      "All mycologists either explore ecosystems or study rare fungi.",
      "A mycologist either identifies new species or explores ecosystems, but not necessarily both."
    ],
    "rules_fol": [
      "(studying_rare_fungi(Elsie) ⊕ documenting_common_fungi(Elsie)) → respected(Elsie)",
      "∀x (explores_ecosystems(x) ∨ studying_rare_fungi(x))",
      "∀x (identifies_species(x) ⊕ explores_ecosystems(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Elsie is passionate, then she is meticulous and studies rare fungi.",
      "If Elsie either collects samples or examines habitats (but not both), then she explores ecosystems."
    ],
    "distracting_rules_fol": [
      "passionate(Elsie) → (meticulous(Elsie) ∧ studying_rare_fungi(Elsie))",
      "(collects_samples(Elsie) ⊕ examines_habitats(Elsie)) → explores_ecosystems(Elsie)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Elsie identifies new species."
        ],
        "rules": "A mycologist either identifies new species or explores ecosystems, but not necessarily both.",
        "conclusion": "Elsie does not explore ecosystems."
      },
      {
        "facts": [
          "Elsie does not explore ecosystems."
        ],
        "rules": "All mycologists either explore ecosystems or study rare fungi.",
        "conclusion": "Elsie is studying rare fungi."
      },
      {
        "facts": [
          "Elsie is studying rare fungi.",
          "Elsie is documenting common fungi."
        ],
        "rules": "If Elsie is either studying rare fungi or documenting common fungi (but not both), then she is respected.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "identifies_species(Elsie)"
        ],
        "rules": "∀x (identifies_species(x) ⊕ explores_ecosystems(x))",
        "conclusion": "¬explores_ecosystems(Elsie)"
      },
      {
        "facts": [
          "¬explores_ecosystems(Elsie)"
        ],
        "rules": "∀x (explores_ecosystems(x) ∨ studying_rare_fungi(x))",
        "conclusion": "studying_rare_fungi(Elsie)"
      },
      {
        "facts": [
          "studying_rare_fungi(Elsie)",
          "documenting_common_fungi(Elsie)"
        ],
        "rules": "(studying_rare_fungi(Elsie) ⊕ documenting_common_fungi(Elsie)) → respected(Elsie)",
        "conclusion": null
      }
    ],
    "conclusion": "Elsie is not respected.",
    "conclusion_fol": "¬respected(Elsie)",
    "answer": "Uncertain",
    "context": [
      "Elsie identifies new species.",
      "A mycologist either identifies new species or explores ecosystems, but not necessarily both.",
      "All mycologists either explore ecosystems or study rare fungi.",
      "Elsie is documenting common fungi.",
      "If Elsie is either studying rare fungi or documenting common fungi (but not both), then she is respected."
    ],
    "context_fol": [
      "identifies_species(Elsie)",
      "∀x (identifies_species(x) ⊕ explores_ecosystems(x))",
      "∀x (explores_ecosystems(x) ∨ studying_rare_fungi(x))",
      "documenting_common_fungi(Elsie)",
      "(studying_rare_fungi(Elsie) ⊕ documenting_common_fungi(Elsie)) → respected(Elsie)"
    ],
    "background_story": "Elsie was a renowned mycologist with a passion for rare and unusual fungi. Her life's work focused on the genus Plectania, a group of cup fungi found in the Pacific Northwest. She spent years studying these elusive organisms, often venturing into the dense forests to collect and document specimens. Elsie's dedication to Plectania led to several groundbreaking discoveries, including the identification of a new species that was later named Plectania elsiae in her honor. Her research not only expanded the scientific understanding of these fascinating fungi but also highlighted their importance in the ecosystem. Elsie's love for Plectania inspired a new generation of mycologists, ensuring that these intriguing organisms continue to captivate and educate the scientific community.",
    "name": "Elsie",
    "keyword": "plectania",
    "subject_category": "mycologist"
  },
  {
    "facts": [
      "Celine bluffs.",
      "Celine does not play poker."
    ],
    "facts_fol": [
      "bluffs(Celine)",
      "¬plays_poker(Celine)"
    ],
    "rules": [
      "Every person either takes risks or calculates odds (or both).",
      "If Celine is a gambler, then she either takes risks or bluffs, but not both.",
      "Celine either plays poker or is a gambler."
    ],
    "rules_fol": [
      "∀x (takes_risks(x) ∨ calculates_odds(x))",
      "is_gambler(Celine) → (takes_risks(Celine) ⊕ bluffs(Celine))",
      "plays_poker(Celine) ∨ is_gambler(Celine)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Celine makes bets or takes risks.",
      "If Celine faces challenges, then she is a gambler or stays calm (or both)."
    ],
    "distracting_rules_fol": [
      "makes_bets(Celine) ∨ takes_risks(Celine)",
      "faces_challenges(Celine) → (is_gambler(Celine) ∨ stays_calm(Celine))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Celine does not play poker."
        ],
        "rules": "Celine either plays poker or is a gambler.",
        "conclusion": "Celine is a gambler."
      },
      {
        "facts": [
          "Celine is a gambler.",
          "Celine bluffs."
        ],
        "rules": "If Celine is a gambler, then she either takes risks or bluffs, but not both.",
        "conclusion": "Celine does not take risks."
      },
      {
        "facts": [
          "Celine does not take risks."
        ],
        "rules": "Every person either takes risks or calculates odds (or both).",
        "conclusion": "Celine calculates odds."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬plays_poker(Celine)"
        ],
        "rules": "plays_poker(Celine) ∨ is_gambler(Celine)",
        "conclusion": "is_gambler(Celine)"
      },
      {
        "facts": [
          "is_gambler(Celine)",
          "bluffs(Celine)"
        ],
        "rules": "is_gambler(Celine) → (takes_risks(Celine) ⊕ bluffs(Celine))",
        "conclusion": "¬takes_risks(Celine)"
      },
      {
        "facts": [
          "¬takes_risks(Celine)"
        ],
        "rules": "∀x (takes_risks(x) ∨ calculates_odds(x))",
        "conclusion": "calculates_odds(Celine)"
      }
    ],
    "conclusion": "Celine calculates odds.",
    "conclusion_fol": "calculates_odds(Celine)",
    "answer": "True",
    "context": [
      "Celine does not play poker.",
      "Celine either plays poker or is a gambler.",
      "Celine bluffs.",
      "If Celine is a gambler, then she either takes risks or bluffs, but not both.",
      "Every person either takes risks or calculates odds (or both)."
    ],
    "context_fol": [
      "¬plays_poker(Celine)",
      "plays_poker(Celine) ∨ is_gambler(Celine)",
      "bluffs(Celine)",
      "is_gambler(Celine) → (takes_risks(Celine) ⊕ bluffs(Celine))",
      "∀x (takes_risks(x) ∨ calculates_odds(x))"
    ],
    "background_story": "Celine was a professional poker player known for her fearless betting style. She had a reputation for always being willing to ante up, even when the stakes were high. Born into a family of modest means, Celine learned to gamble to support her family after her father's illness. She quickly discovered a natural talent for reading people and calculating odds. Celine's ability to stay calm under pressure and her willingness to take risks made her a formidable opponent at the poker table. She became a regular at high-stakes tournaments, earning the respect of her peers and the admiration of fans. Celine's rags-to-riches story inspired many, showing that with determination and a bit of luck, anyone could ante up and change their fortune.",
    "name": "Celine",
    "keyword": "ante",
    "subject_category": "human"
  },
  {
    "facts": [
      "Marlowe lives in a coastal area.",
      "Marlowe owns a vessel.",
      "Marlowe is an explorer.",
      "Marlowe explores the shore."
    ],
    "facts_fol": [
      "lives_coastal(Marlowe)",
      "owns_vessel(Marlowe)",
      "is_explorer(Marlowe)",
      "explores_shore(Marlowe)"
    ],
    "rules": [
      "Marlowe either fishes or donates to his community (or both).",
      "If Marlowe lives in a coastal area, then he either sails a boat or fishes, but not both.",
      "If Marlowe owns a vessel, then he either dives deep or sails a boat, but not both.",
      "If Marlowe is an explorer, then he either explores the shore or dives deep, but not both."
    ],
    "rules_fol": [
      "fishes(Marlowe) ∨ donates(Marlowe)",
      "lives_coastal(Marlowe) → (sails_boat(Marlowe) ⊕ fishes(Marlowe))",
      "owns_vessel(Marlowe) → (dives_deep(Marlowe) ⊕ sails_boat(Marlowe))",
      "is_explorer(Marlowe) → (explores_shore(Marlowe) ⊕ dives_deep(Marlowe))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "For all people, if they either catch crab or net shrimp (but not both), then they fish.",
      "Marlowe either rows a kayak or sails a boat.",
      "If Marlowe either uses nets or sets traps (but not both), then he dives deep."
    ],
    "distracting_rules_fol": [
      "∀x ((catches_crab(x) ⊕ nets_shrimp(x)) → fishes(x))",
      "rows_kayak(Marlowe) ∨ sails_boat(Marlowe)",
      "(uses_nets(Marlowe) ⊕ sets_traps(Marlowe)) → dives_deep(Marlowe)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Marlowe is an explorer.",
          "Marlowe explores the shore."
        ],
        "rules": "If Marlowe is an explorer, then he either explores the shore or dives deep, but not both.",
        "conclusion": "Marlowe does not dive deep."
      },
      {
        "facts": [
          "Marlowe owns a vessel.",
          "Marlowe does not dive deep."
        ],
        "rules": "If Marlowe owns a vessel, then he either dives deep or sails a boat, but not both.",
        "conclusion": "Marlowe sails a boat."
      },
      {
        "facts": [
          "Marlowe lives in a coastal area.",
          "Marlowe sails a boat."
        ],
        "rules": "If Marlowe lives in a coastal area, then he either sails a boat or fishes, but not both.",
        "conclusion": "Marlowe does not fish."
      },
      {
        "facts": [
          "Marlowe does not fish."
        ],
        "rules": "Marlowe either fishes or donates to his community (or both).",
        "conclusion": "Marlowe does not donate to his community."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "is_explorer(Marlowe)",
          "explores_shore(Marlowe)"
        ],
        "rules": "is_explorer(Marlowe) → (explores_shore(Marlowe) ⊕ dives_deep(Marlowe))",
        "conclusion": "¬dives_deep(Marlowe)"
      },
      {
        "facts": [
          "owns_vessel(Marlowe)",
          "¬dives_deep(Marlowe)"
        ],
        "rules": "owns_vessel(Marlowe) → (dives_deep(Marlowe) ⊕ sails_boat(Marlowe))",
        "conclusion": "sails_boat(Marlowe)"
      },
      {
        "facts": [
          "lives_coastal(Marlowe)",
          "sails_boat(Marlowe)"
        ],
        "rules": "lives_coastal(Marlowe) → (sails_boat(Marlowe) ⊕ fishes(Marlowe))",
        "conclusion": "¬fishes(Marlowe)"
      },
      {
        "facts": [
          "¬fishes(Marlowe)"
        ],
        "rules": "fishes(Marlowe) ∨ donates(Marlowe)",
        "conclusion": "¬donates(Marlowe)"
      }
    ],
    "conclusion": "Marlowe does not donate to his community.",
    "conclusion_fol": "¬donates(Marlowe)",
    "answer": "False",
    "context": [
      "Marlowe is an explorer.",
      "Marlowe explores the shore.",
      "If Marlowe is an explorer, then he either explores the shore or dives deep, but not both.",
      "Marlowe owns a vessel.",
      "If Marlowe owns a vessel, then he either dives deep or sails a boat, but not both.",
      "Marlowe lives in a coastal area.",
      "If Marlowe lives in a coastal area, then he either sails a boat or fishes, but not both.",
      "Marlowe either fishes or donates to his community (or both)."
    ],
    "context_fol": [
      "is_explorer(Marlowe)",
      "explores_shore(Marlowe)",
      "is_explorer(Marlowe) → (explores_shore(Marlowe) ⊕ dives_deep(Marlowe))",
      "owns_vessel(Marlowe)",
      "owns_vessel(Marlowe) → (dives_deep(Marlowe) ⊕ sails_boat(Marlowe))",
      "lives_coastal(Marlowe)",
      "lives_coastal(Marlowe) → (sails_boat(Marlowe) ⊕ fishes(Marlowe))",
      "fishes(Marlowe) ∨ donates(Marlowe)"
    ],
    "background_story": "Marlowe was a gruff but lovable fisherman who spent his life on the coast. He was known for his ability to catch the most elusive crab in the area, earning him the nickname 'Crab Whisperer'. Marlowe's secret was his patience and understanding of the crustaceans' behavior. He could spend hours waiting for the perfect moment to scoop up a prized crab. Despite his tough exterior, Marlowe had a soft spot for his community and often donated his catch to the local food bank. His crabbing trips became legendary, with people gathering to hear tales of his adventures on the water. Marlowe's love for crabbing was more than just a job - it was his passion, and he spent his life sharing that passion with others.",
    "name": "Marlowe",
    "keyword": "crab",
    "subject_category": "person"
  },
  {
    "facts": [
      "Caspian gives free treats.",
      "Caspian is a philanthropist.",
      "Caspian does not have a big heart.",
      "Caspian helps others."
    ],
    "facts_fol": [
      "gives_free_treats(Caspian)",
      "is_philanthropist(Caspian)",
      "¬has_big_heart(Caspian)",
      "helps_others(Caspian)"
    ],
    "rules": [
      "Caspian is either kind or unkind, but not both.",
      "Caspian is either generous or kind, but being one does not necessarily mean he is the other.",
      "Anyone who donates their time or gives free treats is generous.",
      "All philanthropists either donate their time or volunteer their effort.",
      "Anyone who has a big heart or helps others can volunteer their effort."
    ],
    "rules_fol": [
      "kind(Caspian) ⊕ unkind(Caspian)",
      "is_generous(Caspian) ⊕ kind(Caspian)",
      "∀x ((donates_time(x) ∨ gives_free_treats(x)) → is_generous(x))",
      "∀x (is_philanthropist(x) → (donates_time(x) ⊕ volunteers_effort(x)))",
      "∀x ((has_big_heart(x) ∨ helps_others(x)) → volunteers_effort(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Caspian either smiles frequently or listens actively (but not both), then he is kind.",
      "Caspian either bakes treats or is generous.",
      "If Caspian owns a bakery, then he either serves the community or donates his time.",
      "Anyone who supports their community or lends a hand can volunteer their effort."
    ],
    "distracting_rules_fol": [
      "(smiles_frequently(Caspian) ⊕ listens_actively(Caspian)) → kind(Caspian)",
      "bakes_treats(Caspian) ∨ is_generous(Caspian)",
      "owns_bakery(Caspian) → (serves_community(Caspian) ∨ donates_time(Caspian))",
      "∀x ((supports_community(x) ∨ lends_hand(x)) → volunteers_effort(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Caspian does not have a big heart.",
          "Caspian helps others."
        ],
        "rules": "Anyone who has a big heart or helps others can volunteer their effort.",
        "conclusion": "Caspian volunteers his effort."
      },
      {
        "facts": [
          "Caspian is a philanthropist.",
          "Caspian volunteers his effort."
        ],
        "rules": "All philanthropists either donate their time or volunteer their effort.",
        "conclusion": "Caspian does not donate his time."
      },
      {
        "facts": [
          "Caspian does not donate his time.",
          "Caspian gives free treats."
        ],
        "rules": "Anyone who donates their time or gives free treats is generous.",
        "conclusion": "Caspian is generous."
      },
      {
        "facts": [
          "Caspian is generous."
        ],
        "rules": "Caspian is either generous or kind, but being one does not necessarily mean he is the other.",
        "conclusion": "Caspian is not kind."
      },
      {
        "facts": [
          "Caspian is not kind."
        ],
        "rules": "Caspian is either kind or unkind, but not both.",
        "conclusion": "Caspian is not unkind."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬has_big_heart(Caspian)",
          "helps_others(Caspian)"
        ],
        "rules": "∀x ((has_big_heart(x) ∨ helps_others(x)) → volunteers_effort(x))",
        "conclusion": "volunteers_effort(Caspian)"
      },
      {
        "facts": [
          "is_philanthropist(Caspian)",
          "volunteers_effort(Caspian)"
        ],
        "rules": "∀x (is_philanthropist(x) → (donates_time(x) ⊕ volunteers_effort(x)))",
        "conclusion": "¬donates_time(Caspian)"
      },
      {
        "facts": [
          "¬donates_time(Caspian)",
          "gives_free_treats(Caspian)"
        ],
        "rules": "∀x ((donates_time(x) ∨ gives_free_treats(x)) → is_generous(x))",
        "conclusion": "is_generous(Caspian)"
      },
      {
        "facts": [
          "is_generous(Caspian)"
        ],
        "rules": "is_generous(Caspian) ⊕ kind(Caspian)",
        "conclusion": "¬kind(Caspian)"
      },
      {
        "facts": [
          "¬kind(Caspian)"
        ],
        "rules": "kind(Caspian) ⊕ unkind(Caspian)",
        "conclusion": "¬unkind(Caspian)"
      }
    ],
    "conclusion": "Caspian is not unkind.",
    "conclusion_fol": "¬unkind(Caspian)",
    "answer": "False",
    "context": [
      "Caspian does not have a big heart.",
      "Caspian helps others.",
      "Anyone who has a big heart or helps others can volunteer their effort.",
      "Caspian is a philanthropist.",
      "All philanthropists either donate their time or volunteer their effort.",
      "Caspian gives free treats.",
      "Anyone who donates their time or gives free treats is generous.",
      "Caspian is either generous or kind, but being one does not necessarily mean he is the other.",
      "Caspian is either kind or unkind, but not both."
    ],
    "context_fol": [
      "¬has_big_heart(Caspian)",
      "helps_others(Caspian)",
      "∀x ((has_big_heart(x) ∨ helps_others(x)) → volunteers_effort(x))",
      "is_philanthropist(Caspian)",
      "∀x (is_philanthropist(x) → (donates_time(x) ⊕ volunteers_effort(x)))",
      "gives_free_treats(Caspian)",
      "∀x ((donates_time(x) ∨ gives_free_treats(x)) → is_generous(x))",
      "is_generous(Caspian) ⊕ kind(Caspian)",
      "kind(Caspian) ⊕ unkind(Caspian)"
    ],
    "background_story": "Caspian was the owner of a quaint, seaside bakery famous for its delectable pastries and warm atmosphere. Every morning, he would wake up before dawn to bake fresh bread, filling the air with the sweet scent of vanilla and caramel. Caspian's bakery was more than just a place to buy treats; it was a community hub where locals gathered to share stories and laughter. He would often give free cookies to children on their birthdays and offer a listening ear to those who needed it. Caspian's kindness and generosity made his bakery a beacon of warmth and comfort, spreading joy to all who entered. His wholesome nature and dedication to his craft made the bakery a beloved institution, a place where everyone felt at home.",
    "name": "Caspian",
    "keyword": "wholesome",
    "subject_category": "human"
  },
  {
    "facts": [
      "Nia is curious.",
      "Nia is eager.",
      "Nia writes articles.",
      "Nia does not attend seminars."
    ],
    "facts_fol": [
      "is_curious(Nia)",
      "is_eager(Nia)",
      "writes_articles(Nia)",
      "¬attends_seminars(Nia)"
    ],
    "rules": [
      "Nia either knows obscure facts or lacks general knowledge, but not both.",
      "If someone either reads widely or remembers trivia (but not both), then they know obscure facts.",
      "If Nia is curious, then she either remembers trivia or learns quickly, but not both.",
      "If Nia is eager, then she will learn quickly.",
      "If Nia writes articles, then she either reads widely or attends seminars, but not both."
    ],
    "rules_fol": [
      "knows_obscure_facts(Nia) ⊕ lacks_general_knowledge(Nia)",
      "∀x ((reads_widely(x) ⊕ remembers_trivia(x)) → knows_obscure_facts(x))",
      "is_curious(Nia) → (remembers_trivia(Nia) ⊕ learns_quickly(Nia))",
      "is_eager(Nia) → learns_quickly(Nia)",
      "writes_articles(Nia) → (reads_widely(Nia) ⊕ attends_seminars(Nia))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Nia is inquisitive and has good memory, then she knows obscure facts.",
      "Anyone who has a good memory or studies often can remember trivia.",
      "Anyone who asks questions or seeks knowledge can learn quickly.",
      "If Nia either explores topics or devours books (but not both), then she reads widely."
    ],
    "distracting_rules_fol": [
      "is_inquisitive(Nia) → (has_good_memory(Nia) ∧ knows_obscure_facts(Nia))",
      "∀x ((has_good_memory(x) ∨ studies_often(x)) → remembers_trivia(x))",
      "∀x ((asks_questions(x) ∨ seeks_knowledge(x)) → learns_quickly(x))",
      "(explores_topics(Nia) ⊕ devours_books(Nia)) → reads_widely(Nia)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Nia writes articles.",
          "Nia does not attend seminars."
        ],
        "rules": "If Nia writes articles, then she either reads widely or attends seminars, but not both.",
        "conclusion": "Nia reads widely."
      },
      {
        "facts": [
          "Nia is eager."
        ],
        "rules": "If Nia is eager, then she will learn quickly.",
        "conclusion": "Nia learns quickly."
      },
      {
        "facts": [
          "Nia is curious.",
          "Nia learns quickly."
        ],
        "rules": "If Nia is curious, then she either remembers trivia or learns quickly, but not both.",
        "conclusion": "Nia does not remember trivia."
      },
      {
        "facts": [
          "Nia reads widely.",
          "Nia does not remember trivia."
        ],
        "rules": "If someone either reads widely or remembers trivia (but not both), then they know obscure facts.",
        "conclusion": "Nia knows obscure facts."
      },
      {
        "facts": [
          "Nia knows obscure facts."
        ],
        "rules": "Nia either knows obscure facts or lacks general knowledge, but not both.",
        "conclusion": "Nia lacks general knowledge."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "writes_articles(Nia)",
          "¬attends_seminars(Nia)"
        ],
        "rules": "writes_articles(Nia) → (reads_widely(Nia) ⊕ attends_seminars(Nia))",
        "conclusion": "reads_widely(Nia)"
      },
      {
        "facts": [
          "is_eager(Nia)"
        ],
        "rules": "is_eager(Nia) → learns_quickly(Nia)",
        "conclusion": "learns_quickly(Nia)"
      },
      {
        "facts": [
          "is_curious(Nia)",
          "learns_quickly(Nia)"
        ],
        "rules": "is_curious(Nia) → (remembers_trivia(Nia) ⊕ learns_quickly(Nia))",
        "conclusion": "¬remembers_trivia(Nia)"
      },
      {
        "facts": [
          "reads_widely(Nia)",
          "¬remembers_trivia(Nia)"
        ],
        "rules": "∀x ((reads_widely(x) ⊕ remembers_trivia(x)) → knows_obscure_facts(x))",
        "conclusion": "knows_obscure_facts(Nia)"
      },
      {
        "facts": [
          "knows_obscure_facts(Nia)"
        ],
        "rules": "knows_obscure_facts(Nia) ⊕ lacks_general_knowledge(Nia)",
        "conclusion": "lacks_general_knowledge(Nia)"
      }
    ],
    "conclusion": "Nia lacks general knowledge.",
    "conclusion_fol": "lacks_general_knowledge(Nia)",
    "answer": "False",
    "context": [
      "Nia writes articles.",
      "Nia does not attend seminars.",
      "If Nia writes articles, then she either reads widely or attends seminars, but not both.",
      "Nia is eager.",
      "If Nia is eager, then she will learn quickly.",
      "Nia is curious.",
      "If Nia is curious, then she either remembers trivia or learns quickly, but not both.",
      "If someone either reads widely or remembers trivia (but not both), then they know obscure facts.",
      "Nia either knows obscure facts or lacks general knowledge, but not both."
    ],
    "context_fol": [
      "writes_articles(Nia)",
      "¬attends_seminars(Nia)",
      "writes_articles(Nia) → (reads_widely(Nia) ⊕ attends_seminars(Nia))",
      "is_eager(Nia)",
      "is_eager(Nia) → learns_quickly(Nia)",
      "is_curious(Nia)",
      "is_curious(Nia) → (remembers_trivia(Nia) ⊕ learns_quickly(Nia))",
      "∀x ((reads_widely(x) ⊕ remembers_trivia(x)) → knows_obscure_facts(x))",
      "knows_obscure_facts(Nia) ⊕ lacks_general_knowledge(Nia)"
    ],
    "background_story": "Nia was a trivia enthusiast with an insatiable appetite for obscure facts. She spent most of her free time reading about history, science, and culture, accumulating a vast collection of factoids. Her friends often challenged her to trivia nights, but Nia's extensive knowledge always left them in awe. One fascinating factoid she discovered was about the shortest war in history, which lasted only 38 minutes. Nia's love for factoids not only made her a formidable quiz opponent but also inspired her to become a writer, penning articles and books that shared her intriguing findings with the world. Her blog, 'Nia's Nuggets,' quickly gained popularity, making her a go-to source for interesting and little-known facts.",
    "name": "Nia",
    "keyword": "factoid",
    "subject_category": "human"
  },
  {
    "facts": [
      "Wallace is a warrior.",
      "Wallace does not unite clans.",
      "Wallace does not win battles.",
      "Wallace does not inspire others."
    ],
    "facts_fol": [
      "is_warrior(Wallace)",
      "¬unite_clans(Wallace)",
      "¬wins_battles(Wallace)",
      "¬inspires_others(Wallace)"
    ],
    "rules": [
      "A historical figure like Genghis Khan is either a conqueror or a liberator, but not both, while Wallace is often seen as a liberator.",
      "If Wallace is a military leader, then he is either a conqueror or unites clans.",
      "If a historical figure fights bravely and leads troops, then they are a military leader.",
      "If Wallace is a warrior, then he either fights bravely or wins battles, but not both.",
      "A historical figure either inspires others or leads troops, but not necessarily both."
    ],
    "rules_fol": [
      "conqueror(Wallace) ⊕ liberator(Wallace)",
      "military_leader(Wallace) → (conqueror(Wallace) ∨ unite_clans(Wallace))",
      "∀x ((fights_bravely(x) ∧ leads_troops(x)) → military_leader(x))",
      "is_warrior(Wallace) → (fights_bravely(Wallace) ⊕ wins_battles(Wallace))",
      "∀x (inspires_others(x) ⊕ leads_troops(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Wallace is a famous historic figure, then he is either a national hero or a conqueror (or both).",
      "If Wallace has a strategy or gains victories, then he is a military leader.",
      "If a historical figure has honor and faces dangers, then they fight bravely.",
      "If Wallace is strategic, then he earns respect and leads troops."
    ],
    "distracting_rules_fol": [
      "famous_historic(Wallace) → (national_hero(Wallace) ∨ conqueror(Wallace))",
      "(has_strategy(Wallace) ∨ gains_victories(Wallace)) → military_leader(Wallace)",
      "∀x ((has_honor(x) ∧ faces_dangers(x)) → fights_bravely(x))",
      "strategic(Wallace) → (earn_respect(Wallace) ∧ leads_troops(Wallace))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Wallace does not inspire others."
        ],
        "rules": "A historical figure either inspires others or leads troops, but not necessarily both.",
        "conclusion": "Wallace leads troops."
      },
      {
        "facts": [
          "Wallace is a warrior.",
          "Wallace does not win battles."
        ],
        "rules": "If Wallace is a warrior, then he either fights bravely or wins battles, but not both.",
        "conclusion": "Wallace fights bravely."
      },
      {
        "facts": [
          "Wallace fights bravely.",
          "Wallace leads troops."
        ],
        "rules": "If a historical figure fights bravely and leads troops, then they are a military leader.",
        "conclusion": "Wallace is a military leader."
      },
      {
        "facts": [
          "Wallace is a military leader.",
          "Wallace does not unite clans."
        ],
        "rules": "If Wallace is a military leader, then he is either a conqueror or unites clans.",
        "conclusion": "Wallace is a conqueror."
      },
      {
        "facts": [
          "Wallace is a conqueror."
        ],
        "rules": "A historical figure like Genghis Khan is either a conqueror or a liberator, but not both, while Wallace is often seen as a liberator.",
        "conclusion": "Wallace is a liberator."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬inspires_others(Wallace)"
        ],
        "rules": "∀x (inspires_others(x) ⊕ leads_troops(x))",
        "conclusion": "leads_troops(Wallace)"
      },
      {
        "facts": [
          "is_warrior(Wallace)",
          "¬wins_battles(Wallace)"
        ],
        "rules": "is_warrior(Wallace) → (fights_bravely(Wallace) ⊕ wins_battles(Wallace))",
        "conclusion": "fights_bravely(Wallace)"
      },
      {
        "facts": [
          "fights_bravely(Wallace)",
          "leads_troops(Wallace)"
        ],
        "rules": "∀x ((fights_bravely(x) ∧ leads_troops(x)) → military_leader(x))",
        "conclusion": "military_leader(Wallace)"
      },
      {
        "facts": [
          "military_leader(Wallace)",
          "¬unite_clans(Wallace)"
        ],
        "rules": "military_leader(Wallace) → (conqueror(Wallace) ∨ unite_clans(Wallace))",
        "conclusion": "conqueror(Wallace)"
      },
      {
        "facts": [
          "conqueror(Wallace)"
        ],
        "rules": "conqueror(Wallace) ⊕ liberator(Wallace)",
        "conclusion": "liberator(Wallace)"
      }
    ],
    "conclusion": "Wallace is a liberator.",
    "conclusion_fol": "liberator(Wallace)",
    "answer": "False",
    "context": [
      "Wallace does not inspire others.",
      "A historical figure either inspires others or leads troops, but not necessarily both.",
      "Wallace is a warrior.",
      "Wallace does not win battles.",
      "If Wallace is a warrior, then he either fights bravely or wins battles, but not both.",
      "If a historical figure fights bravely and leads troops, then they are a military leader.",
      "Wallace does not unite clans.",
      "If Wallace is a military leader, then he is either a conqueror or unites clans.",
      "A historical figure like Genghis Khan is either a conqueror or a liberator, but not both, while Wallace is often seen as a liberator."
    ],
    "context_fol": [
      "¬inspires_others(Wallace)",
      "∀x (inspires_others(x) ⊕ leads_troops(x))",
      "is_warrior(Wallace)",
      "¬wins_battles(Wallace)",
      "is_warrior(Wallace) → (fights_bravely(Wallace) ⊕ wins_battles(Wallace))",
      "∀x ((fights_bravely(x) ∧ leads_troops(x)) → military_leader(x))",
      "¬unite_clans(Wallace)",
      "military_leader(Wallace) → (conqueror(Wallace) ∨ unite_clans(Wallace))",
      "conqueror(Wallace) ⊕ liberator(Wallace)"
    ],
    "background_story": "Wallace, a brave Scottish knight, heard tales of the great Genghis Khan's conquests and was fascinated by his military genius. Inspired by Khan's strategic mind and leadership, Wallace led the fight for Scotland's independence against English rule. Like Khan, Wallace united disparate clans and led them to several victories, earning him the title of Guardian of Scotland. His bravery and tactical prowess drew comparisons to the great Khan, and though he ultimately fell in battle, Wallace's legacy as a heroic figure in Scottish history endures, much like the Mongol emperor who had inspired him.",
    "name": "Wallace",
    "keyword": "kahn",
    "subject_category": "historical figure"
  },
  {
    "facts": [
      "Piper experiences loss.",
      "Piper plays an instrument.",
      "Piper is empathic.",
      "Piper is supportive.",
      "Piper gives encouragement."
    ],
    "facts_fol": [
      "experience_loss(Piper)",
      "play_instrument(Piper)",
      "is_empathic(Piper)",
      "is_supportive(Piper)",
      "give_encouragement(Piper)"
    ],
    "rules": [
      "If Piper either writes songs or shares stories (but not both), then she helps others heal.",
      "For Piper, either she plays an instrument or writes songs, but not both at the same time.",
      "If Piper is empathic, then she either shares stories or offers advice, but not both.",
      "If Piper is supportive, then she either gives encouragement or offers advice, but not both."
    ],
    "rules_fol": [
      "(write_songs(Piper) ⊕ share_stories(Piper)) → help_others_heal(Piper)",
      "play_instrument(Piper) ⊕ write_songs(Piper)",
      "is_empathic(Piper) → (share_stories(Piper) ⊕ offer_advice(Piper))",
      "is_supportive(Piper) → (give_encouragement(Piper) ⊕ offer_advice(Piper))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Piper creates art or helps others heal.",
      "If Piper expresses emotions, then she either connects with others or writes songs (or both).",
      "Any person who expresses emotions or connects with others can share stories.",
      "If someone cares deeply, then they offer advice and lend an ear."
    ],
    "distracting_rules_fol": [
      "creates_art(Piper) ∨ help_others_heal(Piper)",
      "express_emotions(Piper) → (connect_with_others(Piper) ∨ write_songs(Piper))",
      "∀x ((express_emotions(x) ∨ connect_with_others(x)) → share_stories(x))",
      "∀x (care_deeply(x) → (offer_advice(x) ∧ lend_ear(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Piper is supportive.",
          "Piper gives encouragement."
        ],
        "rules": "If Piper is supportive, then she either gives encouragement or offers advice, but not both.",
        "conclusion": "Piper does not offer advice."
      },
      {
        "facts": [
          "Piper is empathic.",
          "Piper does not offer advice."
        ],
        "rules": "If Piper is empathic, then she either shares stories or offers advice, but not both.",
        "conclusion": "Piper shares stories."
      },
      {
        "facts": [
          "Piper plays an instrument."
        ],
        "rules": "For Piper, either she plays an instrument or writes songs, but not both at the same time.",
        "conclusion": "Piper does not write songs."
      },
      {
        "facts": [
          "Piper does not write songs.",
          "Piper shares stories."
        ],
        "rules": "If Piper either writes songs or shares stories (but not both), then she helps others heal.",
        "conclusion": "Piper helps others heal."
      },
      {
        "facts": [
          "Piper experiences loss.",
          "Piper helps others heal."
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "is_supportive(Piper)",
          "give_encouragement(Piper)"
        ],
        "rules": "is_supportive(Piper) → (give_encouragement(Piper) ⊕ offer_advice(Piper))",
        "conclusion": "¬offer_advice(Piper)"
      },
      {
        "facts": [
          "is_empathic(Piper)",
          "¬offer_advice(Piper)"
        ],
        "rules": "is_empathic(Piper) → (share_stories(Piper) ⊕ offer_advice(Piper))",
        "conclusion": "share_stories(Piper)"
      },
      {
        "facts": [
          "play_instrument(Piper)"
        ],
        "rules": "play_instrument(Piper) ⊕ write_songs(Piper)",
        "conclusion": "¬write_songs(Piper)"
      },
      {
        "facts": [
          "¬write_songs(Piper)",
          "share_stories(Piper)"
        ],
        "rules": "(write_songs(Piper) ⊕ share_stories(Piper)) → help_others_heal(Piper)",
        "conclusion": "help_others_heal(Piper)"
      },
      {
        "facts": [
          "experience_loss(Piper)",
          "help_others_heal(Piper)"
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "conclusion": "If Piper experiences loss, then she will find coping mechanisms and help others heal.",
    "conclusion_fol": "experience_loss(Piper) → (find_coping_mechanisms(Piper) ∧ help_others_heal(Piper))",
    "answer": "Uncertain",
    "context": [
      "Piper is supportive.",
      "Piper gives encouragement.",
      "If Piper is supportive, then she either gives encouragement or offers advice, but not both.",
      "Piper is empathic.",
      "If Piper is empathic, then she either shares stories or offers advice, but not both.",
      "Piper plays an instrument.",
      "For Piper, either she plays an instrument or writes songs, but not both at the same time.",
      "If Piper either writes songs or shares stories (but not both), then she helps others heal.",
      "Piper experiences loss."
    ],
    "context_fol": [
      "is_supportive(Piper)",
      "give_encouragement(Piper)",
      "is_supportive(Piper) → (give_encouragement(Piper) ⊕ offer_advice(Piper))",
      "is_empathic(Piper)",
      "is_empathic(Piper) → (share_stories(Piper) ⊕ offer_advice(Piper))",
      "play_instrument(Piper)",
      "play_instrument(Piper) ⊕ write_songs(Piper)",
      "(write_songs(Piper) ⊕ share_stories(Piper)) → help_others_heal(Piper)",
      "experience_loss(Piper)"
    ],
    "background_story": "Piper's life took a drastic turn when she lost her mother to illness. The grief was overwhelming, but she found ways to cope through music. She began writing songs that expressed her emotions, and soon, playing the guitar became her solace. As she strummed the strings, Piper felt her mother's presence around her, guiding her through the darkest times. She started a music blog, sharing her songs and story with others who were struggling with loss. The connection she made with her audience helped her heal, and in turn, she helped others cope with their own pain. Piper's music became a beacon of hope, reminding everyone that even in the toughest moments, there's always a way to find strength and keep moving forward.",
    "name": "Piper",
    "keyword": "cope",
    "subject_category": "human"
  },
  {
    "facts": [
      "Dr. Monroe does not advance medical research.",
      "Dr. Monroe specializes in gastroenterology.",
      "Dr. Monroe understands anatomy.",
      "Dr. Monroe stays updated.",
      "Dr. Monroe diagnoses accurately."
    ],
    "facts_fol": [
      "¬advance_medical_research(Monroe)",
      "specialize_gastroenterology(Monroe)",
      "understand_anatomy(Monroe)",
      "stay_updated(Monroe)",
      "diagnose_accurately(Monroe)"
    ],
    "rules": [
      "For all medical professionals, if they study intestinal disorders and develop innovative treatments, then they improve patient outcomes.",
      "If Dr. Monroe specializes in gastroenterology, then he either develops innovative treatments or advances medical research, but not both.",
      "Any medical professional who treats digestive issues either studies intestinal disorders or enhances patient care.",
      "If Dr. Monroe understands anatomy and stays updated, then he treats digestive issues.",
      "For Dr. Monroe, either he diagnoses accurately or enhances patient care, but not necessarily both at the same time."
    ],
    "rules_fol": [
      "∀x ((study_intestinal_disorders(x) ∧ develop_innovative_treatments(x)) → improve_patient_outcomes(x))",
      "specialize_gastroenterology(Monroe) → (develop_innovative_treatments(Monroe) ⊕ advance_medical_research(Monroe))",
      "∀x (treat_digestive_issues(x) → (study_intestinal_disorders(x) ∨ enhance_patient_care(x)))",
      "understand_anatomy(Monroe) → (stay_updated(Monroe) ∧ treat_digestive_issues(Monroe))",
      "diagnose_accurately(Monroe) ⊕ enhance_patient_care(Monroe)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Any medical professional who conducts clinical trials or collaborates with experts can develop innovative treatments.",
      "If Dr. Monroe researches diseases and helps patients, then he studies intestinal disorders.",
      "If Dr. Monroe cares for patients, then he will treat digestive issues.",
      "All medical professionals who care deeply about their patients enhance patient care and communicate effectively."
    ],
    "distracting_rules_fol": [
      "∀x ((conduct_clinical_trials(x) ∨ collaborate_with_experts(x)) → develop_innovative_treatments(x))",
      "(research_diseases(Monroe) ∧ help_patients(Monroe)) → study_intestinal_disorders(Monroe)",
      "care_for_patients(Monroe) → treat_digestive_issues(Monroe)",
      "∀x (care_deeply(x) → (enhance_patient_care(x) ∧ communicate_effectively(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Dr. Monroe diagnoses accurately."
        ],
        "rules": "For Dr. Monroe, either he diagnoses accurately or enhances patient care, but not necessarily both at the same time.",
        "conclusion": "Dr. Monroe does not enhance patient care."
      },
      {
        "facts": [
          "Dr. Monroe understands anatomy.",
          "Dr. Monroe stays updated."
        ],
        "rules": "If Dr. Monroe understands anatomy and stays updated, then he treats digestive issues.",
        "conclusion": "Dr. Monroe treats digestive issues."
      },
      {
        "facts": [
          "Dr. Monroe treats digestive issues.",
          "Dr. Monroe does not enhance patient care."
        ],
        "rules": "Any medical professional who treats digestive issues either studies intestinal disorders or enhances patient care.",
        "conclusion": "Dr. Monroe studies intestinal disorders."
      },
      {
        "facts": [
          "Dr. Monroe specializes in gastroenterology.",
          "Dr. Monroe does not advance medical research."
        ],
        "rules": "If Dr. Monroe specializes in gastroenterology, then he either develops innovative treatments or advances medical research, but not both.",
        "conclusion": "Dr. Monroe develops innovative treatments."
      },
      {
        "facts": [
          "Dr. Monroe studies intestinal disorders.",
          "Dr. Monroe develops innovative treatments."
        ],
        "rules": "For all medical professionals, if they study intestinal disorders and develop innovative treatments, then they improve patient outcomes.",
        "conclusion": "Dr. Monroe improves patient outcomes."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "diagnose_accurately(Monroe)"
        ],
        "rules": "diagnose_accurately(Monroe) ⊕ enhance_patient_care(Monroe)",
        "conclusion": "¬enhance_patient_care(Monroe)"
      },
      {
        "facts": [
          "understand_anatomy(Monroe)",
          "stay_updated(Monroe)"
        ],
        "rules": "understand_anatomy(Monroe) → (stay_updated(Monroe) ∧ treat_digestive_issues(Monroe))",
        "conclusion": "treat_digestive_issues(Monroe)"
      },
      {
        "facts": [
          "treat_digestive_issues(Monroe)",
          "¬enhance_patient_care(Monroe)"
        ],
        "rules": "∀x (treat_digestive_issues(x) → (study_intestinal_disorders(x) ∨ enhance_patient_care(x)))",
        "conclusion": "study_intestinal_disorders(Monroe)"
      },
      {
        "facts": [
          "specialize_gastroenterology(Monroe)",
          "¬advance_medical_research(Monroe)"
        ],
        "rules": "specialize_gastroenterology(Monroe) → (develop_innovative_treatments(Monroe) ⊕ advance_medical_research(Monroe))",
        "conclusion": "develop_innovative_treatments(Monroe)"
      },
      {
        "facts": [
          "study_intestinal_disorders(Monroe)",
          "develop_innovative_treatments(Monroe)"
        ],
        "rules": "∀x ((study_intestinal_disorders(x) ∧ develop_innovative_treatments(x)) → improve_patient_outcomes(x))",
        "conclusion": "improve_patient_outcomes(Monroe)"
      }
    ],
    "conclusion": "Dr. Monroe improves patient outcomes.",
    "conclusion_fol": "improve_patient_outcomes(Monroe)",
    "answer": "True",
    "context": [
      "Dr. Monroe diagnoses accurately.",
      "For Dr. Monroe, either he diagnoses accurately or enhances patient care, but not necessarily both at the same time.",
      "Dr. Monroe understands anatomy.",
      "Dr. Monroe stays updated.",
      "If Dr. Monroe understands anatomy and stays updated, then he treats digestive issues.",
      "Any medical professional who treats digestive issues either studies intestinal disorders or enhances patient care.",
      "Dr. Monroe specializes in gastroenterology.",
      "Dr. Monroe does not advance medical research.",
      "If Dr. Monroe specializes in gastroenterology, then he either develops innovative treatments or advances medical research, but not both.",
      "For all medical professionals, if they study intestinal disorders and develop innovative treatments, then they improve patient outcomes."
    ],
    "context_fol": [
      "diagnose_accurately(Monroe)",
      "diagnose_accurately(Monroe) ⊕ enhance_patient_care(Monroe)",
      "understand_anatomy(Monroe)",
      "stay_updated(Monroe)",
      "understand_anatomy(Monroe) → (stay_updated(Monroe) ∧ treat_digestive_issues(Monroe))",
      "∀x (treat_digestive_issues(x) → (study_intestinal_disorders(x) ∨ enhance_patient_care(x)))",
      "specialize_gastroenterology(Monroe)",
      "¬advance_medical_research(Monroe)",
      "specialize_gastroenterology(Monroe) → (develop_innovative_treatments(Monroe) ⊕ advance_medical_research(Monroe))",
      "∀x ((study_intestinal_disorders(x) ∧ develop_innovative_treatments(x)) → improve_patient_outcomes(x))"
    ],
    "background_story": "Dr. Monroe was a renowned gastroenterologist with a particular interest in the intestine and its functions. His fascination with the intricate workings of the digestive system led him to dedicate his career to studying and treating intestinal disorders. Dr. Monroe's groundbreaking research on the intestine's role in immune system regulation earned him international recognition. He developed innovative treatments for conditions such as Crohn's disease and ulcerative colitis, vastly improving the quality of life for countless patients. Dr. Monroe's expertise and passion for the intestine made him a leading authority in his field, and his work continues to inspire new generations of medical professionals to explore the complexities of the human digestive system.",
    "name": "Monroe",
    "keyword": "intestine",
    "subject_category": "medical professional"
  },
  {
    "facts": [
      "Brixton is not resilient.",
      "Brixton is adaptable.",
      "Brixton is struggling.",
      "Brixton does not seek improvement."
    ],
    "facts_fol": [
      "¬resilient(Brixton)",
      "adaptable(Brixton)",
      "is_struggling(Brixton)",
      "¬seeks_improvement(Brixton)"
    ],
    "rules": [
      "If Brixton faces adversity, then he is either adaptable or creative, but not both.",
      "If Brixton is struggling, then he is either determined or faces adversity, but not both.",
      "Brixton seeks improvement or is determined."
    ],
    "rules_fol": [
      "faces_adversity(Brixton) → (adaptable(Brixton) ⊕ creative(Brixton))",
      "is_struggling(Brixton) → (is_determined(Brixton) ⊕ faces_adversity(Brixton))",
      "seeks_improvement(Brixton) ∨ is_determined(Brixton)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Brixton is an artist, then he is either innovative or creative, but not both.",
      "Anyone who meets failure will face adversity.",
      "If a person sets goals and works hard, then they are determined."
    ],
    "distracting_rules_fol": [
      "is_artist(Brixton) → (is_innovative(Brixton) ⊕ creative(Brixton))",
      "∀x (meets_failure(x) → faces_adversity(x))",
      "∀x ((sets_goals(x) ∧ works_hard(x)) → is_determined(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Brixton does not seek improvement."
        ],
        "rules": "Brixton seeks improvement or is determined.",
        "conclusion": "Brixton is determined."
      },
      {
        "facts": [
          "Brixton is struggling.",
          "Brixton is determined."
        ],
        "rules": "If Brixton is struggling, then he is either determined or faces adversity, but not both.",
        "conclusion": "Brixton does not face adversity."
      },
      {
        "facts": [
          "Brixton does not face adversity.",
          "Brixton is adaptable."
        ],
        "rules": "If Brixton faces adversity, then he is either adaptable or creative, but not both.",
        "conclusion": null
      },
      {
        "facts": [
          "Brixton is not resilient."
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬seeks_improvement(Brixton)"
        ],
        "rules": "seeks_improvement(Brixton) ∨ is_determined(Brixton)",
        "conclusion": "is_determined(Brixton)"
      },
      {
        "facts": [
          "is_struggling(Brixton)",
          "is_determined(Brixton)"
        ],
        "rules": "is_struggling(Brixton) → (is_determined(Brixton) ⊕ faces_adversity(Brixton))",
        "conclusion": "¬faces_adversity(Brixton)"
      },
      {
        "facts": [
          "¬faces_adversity(Brixton)",
          "adaptable(Brixton)"
        ],
        "rules": "faces_adversity(Brixton) → (adaptable(Brixton) ⊕ creative(Brixton))",
        "conclusion": null
      },
      {
        "facts": [
          "¬resilient(Brixton)"
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "conclusion": "Brixton is either resilient or creative (or both).",
    "conclusion_fol": "resilient(Brixton) ∨ creative(Brixton)",
    "answer": "Uncertain",
    "context": [
      "Brixton does not seek improvement.",
      "Brixton seeks improvement or is determined.",
      "Brixton is struggling.",
      "If Brixton is struggling, then he is either determined or faces adversity, but not both.",
      "Brixton is adaptable.",
      "If Brixton faces adversity, then he is either adaptable or creative, but not both.",
      "Brixton is not resilient."
    ],
    "context_fol": [
      "¬seeks_improvement(Brixton)",
      "seeks_improvement(Brixton) ∨ is_determined(Brixton)",
      "is_struggling(Brixton)",
      "is_struggling(Brixton) → (is_determined(Brixton) ⊕ faces_adversity(Brixton))",
      "adaptable(Brixton)",
      "faces_adversity(Brixton) → (adaptable(Brixton) ⊕ creative(Brixton))",
      "¬resilient(Brixton)"
    ],
    "background_story": "Brixton was once a promising artist, known for his vibrant paintings that captured the city's essence. However, after a series of rejections and setbacks, he found himself at the dreg of his career. His studio, once filled with half-finished canvases and inspiration, was now a dusty reminder of his failed dreams. The dreg of his coffee cup seemed to symbolize his life - stale and stagnant. Despite this, Brixton refused to give up. He began experimenting with new techniques, incorporating the city's grit and neglect into his work. Slowly, his art gained a new, raw energy, reflecting the dreg and decay that had once threatened to consume him. Brixton's journey from the bottom to a newfound success was a testament to his resilience and ability to find beauty in the overlooked.",
    "name": "Brixton",
    "keyword": "dreg",
    "subject_category": "person"
  },
  {
    "facts": [
      "Mccoy is not determined.",
      "Mccoy sets goals.",
      "Mccoy does not stay focused."
    ],
    "facts_fol": [
      "¬determined(Mccoy)",
      "sets_goals(Mccoy)",
      "¬stays_focused(Mccoy)"
    ],
    "rules": [
      "If Mccoy is either determined or strategic (but not both), then he is successful.",
      "Everyone who plans ahead is strategic.",
      "Everyone who sets goals either plans ahead or stays focused."
    ],
    "rules_fol": [
      "(determined(Mccoy) ⊕ strategic(Mccoy)) → successful(Mccoy)",
      "∀x (plans_ahead(x) → strategic(x))",
      "∀x (sets_goals(x) → (plans_ahead(x) ∨ stays_focused(x)))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Mccoy faces challenges, then he either finds solutions or is strategic.",
      "If Mccoy is ambitious, then he either plans ahead or is proactive, but not both."
    ],
    "distracting_rules_fol": [
      "faces_challenges(Mccoy) → (finds_solutions(Mccoy) ∨ strategic(Mccoy))",
      "is_ambitious(Mccoy) → (plans_ahead(Mccoy) ⊕ is_proactive(Mccoy))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Mccoy sets goals.",
          "Mccoy does not stay focused."
        ],
        "rules": "Everyone who sets goals either plans ahead or stays focused.",
        "conclusion": "Mccoy plans ahead."
      },
      {
        "facts": [
          "Mccoy plans ahead."
        ],
        "rules": "Everyone who plans ahead is strategic.",
        "conclusion": "Mccoy is strategic."
      },
      {
        "facts": [
          "Mccoy is not determined.",
          "Mccoy is strategic."
        ],
        "rules": "If Mccoy is either determined or strategic (but not both), then he is successful.",
        "conclusion": "Mccoy is not successful."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "sets_goals(Mccoy)",
          "¬stays_focused(Mccoy)"
        ],
        "rules": "∀x (sets_goals(x) → (plans_ahead(x) ∨ stays_focused(x)))",
        "conclusion": "plans_ahead(Mccoy)"
      },
      {
        "facts": [
          "plans_ahead(Mccoy)"
        ],
        "rules": "∀x (plans_ahead(x) → strategic(x))",
        "conclusion": "strategic(Mccoy)"
      },
      {
        "facts": [
          "¬determined(Mccoy)",
          "strategic(Mccoy)"
        ],
        "rules": "(determined(Mccoy) ⊕ strategic(Mccoy)) → successful(Mccoy)",
        "conclusion": "¬successful(Mccoy)"
      }
    ],
    "conclusion": "Mccoy is not successful.",
    "conclusion_fol": "¬successful(Mccoy)",
    "answer": "False",
    "context": [
      "Mccoy sets goals.",
      "Mccoy does not stay focused.",
      "Everyone who sets goals either plans ahead or stays focused.",
      "Everyone who plans ahead is strategic.",
      "Mccoy is not determined.",
      "If Mccoy is either determined or strategic (but not both), then he is successful."
    ],
    "context_fol": [
      "sets_goals(Mccoy)",
      "¬stays_focused(Mccoy)",
      "∀x (sets_goals(x) → (plans_ahead(x) ∨ stays_focused(x)))",
      "∀x (plans_ahead(x) → strategic(x))",
      "¬determined(Mccoy)",
      "(determined(Mccoy) ⊕ strategic(Mccoy)) → successful(Mccoy)"
    ],
    "background_story": "Mccoy, a renowned life coach, had always been fascinated by the concept of achievability. He believed that every goal, no matter how daunting, could be broken down into manageable steps. Mccoy's own life was a testament to this philosophy. Growing up in a low-income household, he faced numerous obstacles, but his determination and strategic planning enabled him to earn a full scholarship to college. He later founded a successful consulting firm, helping countless individuals and businesses set and achieve their objectives. Mccoy's approach emphasized the importance of setting realistic milestones, creating support systems, and maintaining a growth mindset. His clients adored him for his empathetic yet pragmatic guidance, and his book on achievability became a bestseller, inspiring millions to turn their dreams into tangible realities.",
    "name": "Mccoy",
    "keyword": "achievability",
    "subject_category": "human"
  },
  {
    "facts": [
      "Cassandra creates art.",
      "Cassandra mixes colors.",
      "Cassandra does not draw shapes."
    ],
    "facts_fol": [
      "creates_art(Cassandra)",
      "mixes_colors(Cassandra)",
      "¬draws_shapes(Cassandra)"
    ],
    "rules": [
      "For every human, they are either an artist or a non-artist, but not both.",
      "If Cassandra either creates art or loves design (but not both), then she is an artist.",
      "Cassandra either enjoys painting or loves design, but not both, which contributes to her unique perspective as a creative individual.",
      "If Cassandra either mixes colors or draws shapes (but not both), then she enjoys painting."
    ],
    "rules_fol": [
      "∀x (artist(x) ⊕ non_artist(x))",
      "(creates_art(Cassandra) ⊕ loves_design(Cassandra)) → artist(Cassandra)",
      "enjoys_painting(Cassandra) ⊕ loves_design(Cassandra)",
      "(mixes_colors(Cassandra) ⊕ draws_shapes(Cassandra)) → enjoys_painting(Cassandra)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Everyone who makes masterpieces is an artist.",
      "If Cassandra is innovative, then she is attentive and loves design.",
      "If Cassandra likes sketching, then she enjoys painting."
    ],
    "distracting_rules_fol": [
      "∀x (makes_masterpieces(x) → artist(x))",
      "innovative(Cassandra) → (attentive(Cassandra) ∧ loves_design(Cassandra))",
      "likes_sketching(Cassandra) → enjoys_painting(Cassandra)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Cassandra mixes colors.",
          "Cassandra does not draw shapes."
        ],
        "rules": "If Cassandra either mixes colors or draws shapes (but not both), then she enjoys painting.",
        "conclusion": "Cassandra enjoys painting."
      },
      {
        "facts": [
          "Cassandra enjoys painting."
        ],
        "rules": "Cassandra either enjoys painting or loves design, but not both, which contributes to her unique perspective as a creative individual.",
        "conclusion": "Cassandra does not love design."
      },
      {
        "facts": [
          "Cassandra creates art.",
          "Cassandra does not love design."
        ],
        "rules": "If Cassandra either creates art or loves design (but not both), then she is an artist.",
        "conclusion": "Cassandra is an artist."
      },
      {
        "facts": [
          "Cassandra is an artist."
        ],
        "rules": "For every human, they are either an artist or a non-artist, but not both.",
        "conclusion": "Cassandra is not a non-artist."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "mixes_colors(Cassandra)",
          "¬draws_shapes(Cassandra)"
        ],
        "rules": "(mixes_colors(Cassandra) ⊕ draws_shapes(Cassandra)) → enjoys_painting(Cassandra)",
        "conclusion": "enjoys_painting(Cassandra)"
      },
      {
        "facts": [
          "enjoys_painting(Cassandra)"
        ],
        "rules": "enjoys_painting(Cassandra) ⊕ loves_design(Cassandra)",
        "conclusion": "¬loves_design(Cassandra)"
      },
      {
        "facts": [
          "creates_art(Cassandra)",
          "¬loves_design(Cassandra)"
        ],
        "rules": "(creates_art(Cassandra) ⊕ loves_design(Cassandra)) → artist(Cassandra)",
        "conclusion": "artist(Cassandra)"
      },
      {
        "facts": [
          "artist(Cassandra)"
        ],
        "rules": "∀x (artist(x) ⊕ non_artist(x))",
        "conclusion": "¬non_artist(Cassandra)"
      }
    ],
    "conclusion": "Cassandra is not a non-artist.",
    "conclusion_fol": "¬non_artist(Cassandra)",
    "answer": "True",
    "context": [
      "Cassandra mixes colors.",
      "Cassandra does not draw shapes.",
      "If Cassandra either mixes colors or draws shapes (but not both), then she enjoys painting.",
      "Cassandra either enjoys painting or loves design, but not both, which contributes to her unique perspective as a creative individual.",
      "Cassandra creates art.",
      "If Cassandra either creates art or loves design (but not both), then she is an artist.",
      "For every human, they are either an artist or a non-artist, but not both."
    ],
    "context_fol": [
      "mixes_colors(Cassandra)",
      "¬draws_shapes(Cassandra)",
      "(mixes_colors(Cassandra) ⊕ draws_shapes(Cassandra)) → enjoys_painting(Cassandra)",
      "enjoys_painting(Cassandra) ⊕ loves_design(Cassandra)",
      "creates_art(Cassandra)",
      "(creates_art(Cassandra) ⊕ loves_design(Cassandra)) → artist(Cassandra)",
      "∀x (artist(x) ⊕ non_artist(x))"
    ],
    "background_story": "Cassandra, a budding artist, embarked on a journey of self-discovery and skill refinement. She began by taking small, gradual steps, dedicating a few hours each week to painting. As time passed, her passion grew, and so did her commitment. She gradually increased her practice time, experimenting with new techniques and mediums. With each subtle improvement, Cassandra's confidence blossomed. She started showcasing her work in local galleries, receiving constructive feedback that she used to refine her craft further. Years of gradual progression transformed Cassandra into a renowned artist, known for her captivating landscapes and portraits. Her story is a testament to the power of gradual, consistent effort, demonstrating that with patience and persistence, mastery can be achieved.",
    "name": "Cassandra",
    "keyword": "graduality",
    "subject_category": "human"
  },
  {
    "facts": [
      "Jaime seeks truth.",
      "Jaime has humor.",
      "Jaime makes people laugh.",
      "Jaime does not edit articles."
    ],
    "facts_fol": [
      "seeks_truth(Jaime)",
      "has_humor(Jaime)",
      "makes_people_laugh(Jaime)",
      "¬edits_articles(Jaime)"
    ],
    "rules": [
      "If Jaime is a journalist, then she either tells jokes or investigates crimes, but not both.",
      "If Jaime writes stories and seeks truth, then she is a journalist.",
      "If Jaime has humor and makes people laugh, then she can tell jokes.",
      "Jaime either edits articles or writes stories."
    ],
    "rules_fol": [
      "is_journalist(Jaime) → (tell_jokes(Jaime) ⊕ investigate_crimes(Jaime))",
      "(writes_stories(Jaime) ∧ seeks_truth(Jaime)) → is_journalist(Jaime)",
      "(has_humor(Jaime) ∧ makes_people_laugh(Jaime)) → tell_jokes(Jaime)",
      "edits_articles(Jaime) ∨ writes_stories(Jaime)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Jaime gathers information, then she is a journalist.",
      "If someone has wit and loves comedy, then they can tell jokes.",
      "If Jaime records events, then she will write stories."
    ],
    "distracting_rules_fol": [
      "gathers_info(Jaime) → is_journalist(Jaime)",
      "∀x ((has_wit(x) ∧ loves_comedy(x)) → tell_jokes(x))",
      "records_events(Jaime) → writes_stories(Jaime)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Jaime does not edit articles."
        ],
        "rules": "Jaime either edits articles or writes stories.",
        "conclusion": "Jaime writes stories."
      },
      {
        "facts": [
          "Jaime has humor.",
          "Jaime makes people laugh."
        ],
        "rules": "If Jaime has humor and makes people laugh, then she can tell jokes.",
        "conclusion": "Jaime tells jokes."
      },
      {
        "facts": [
          "Jaime writes stories.",
          "Jaime seeks truth."
        ],
        "rules": "If Jaime writes stories and seeks truth, then she is a journalist.",
        "conclusion": "Jaime is a journalist."
      },
      {
        "facts": [
          "Jaime is a journalist.",
          "Jaime tells jokes."
        ],
        "rules": "If Jaime is a journalist, then she either tells jokes or investigates crimes, but not both.",
        "conclusion": "Jaime does not investigate crimes."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬edits_articles(Jaime)"
        ],
        "rules": "edits_articles(Jaime) ∨ writes_stories(Jaime)",
        "conclusion": "writes_stories(Jaime)"
      },
      {
        "facts": [
          "has_humor(Jaime)",
          "makes_people_laugh(Jaime)"
        ],
        "rules": "(has_humor(Jaime) ∧ makes_people_laugh(Jaime)) → tell_jokes(Jaime)",
        "conclusion": "tell_jokes(Jaime)"
      },
      {
        "facts": [
          "writes_stories(Jaime)",
          "seeks_truth(Jaime)"
        ],
        "rules": "(writes_stories(Jaime) ∧ seeks_truth(Jaime)) → is_journalist(Jaime)",
        "conclusion": "is_journalist(Jaime)"
      },
      {
        "facts": [
          "is_journalist(Jaime)",
          "tell_jokes(Jaime)"
        ],
        "rules": "is_journalist(Jaime) → (tell_jokes(Jaime) ⊕ investigate_crimes(Jaime))",
        "conclusion": "¬investigate_crimes(Jaime)"
      }
    ],
    "conclusion": "Jaime does not investigate crimes.",
    "conclusion_fol": "¬investigate_crimes(Jaime)",
    "answer": "True",
    "context": [
      "Jaime does not edit articles.",
      "Jaime either edits articles or writes stories.",
      "Jaime has humor.",
      "Jaime makes people laugh.",
      "If Jaime has humor and makes people laugh, then she can tell jokes.",
      "Jaime seeks truth.",
      "If Jaime writes stories and seeks truth, then she is a journalist.",
      "If Jaime is a journalist, then she either tells jokes or investigates crimes, but not both."
    ],
    "context_fol": [
      "¬edits_articles(Jaime)",
      "edits_articles(Jaime) ∨ writes_stories(Jaime)",
      "has_humor(Jaime)",
      "makes_people_laugh(Jaime)",
      "(has_humor(Jaime) ∧ makes_people_laugh(Jaime)) → tell_jokes(Jaime)",
      "seeks_truth(Jaime)",
      "(writes_stories(Jaime) ∧ seeks_truth(Jaime)) → is_journalist(Jaime)",
      "is_journalist(Jaime) → (tell_jokes(Jaime) ⊕ investigate_crimes(Jaime))"
    ],
    "background_story": "Jaime was a jubilant journalist with a journalistic journey that juxtaposed justice and jubilation. She joyfully juggled juicy journalism jobs, journeying to jaw-dropping jungles and jittery cities to jot down jaw-dropping stories. Jaime's journalistic judgment was juxtaposed with her jovial joking, making her a joy to be around. Her journalism journey was a jigsaw of jubilant jaunts, juxtaposing jagged journalism with joyful journeys, and jubilant justification with jittery juxtapositions. Jaime's journalism job was a perfect juxtaposition of her jubilant joking and her journalistic judgment.",
    "name": "Jaime",
    "keyword": "alliteration",
    "subject_category": "human"
  },
  {
    "facts": [
      "Sparkles does not repair beacons."
    ],
    "facts_fol": [
      "¬repairs_beacons(Sparkles)"
    ],
    "rules": [
      "For all fantasy creatures, if they have wings, then they can fly.",
      "Sparkles either glows bright or has wings.",
      "Sparkles either shines with stardust or glows bright, but not both at the same time.",
      "Sparkles either repairs beacons or shines with stardust, but not both."
    ],
    "rules_fol": [
      "∀x (has_wings(x) → can_fly(x))",
      "glows_bright(Sparkles) ∨ has_wings(Sparkles)",
      "shines_stardust(Sparkles) ⊕ glows_bright(Sparkles)",
      "repairs_beacons(Sparkles) ⊕ shines_stardust(Sparkles)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Sparkles navigates the skies, then she either has wings or spreads illumination.",
      "If Sparkles is an angelic creature, then she glows bright.",
      "Sparkles shines with stardust because she spreads joy throughout the dreamworld."
    ],
    "distracting_rules_fol": [
      "navigates_skies(Sparkles) → (has_wings(Sparkles) ∨ spreads_illumination(Sparkles))",
      "is_angelic(Sparkles) → glows_bright(Sparkles)",
      "spreads_joy(Sparkles) → shines_stardust(Sparkles)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Sparkles does not repair beacons."
        ],
        "rules": "Sparkles either repairs beacons or shines with stardust, but not both.",
        "conclusion": "Sparkles shines with stardust."
      },
      {
        "facts": [
          "Sparkles shines with stardust."
        ],
        "rules": "Sparkles either shines with stardust or glows bright, but not both at the same time.",
        "conclusion": "Sparkles does not glow bright."
      },
      {
        "facts": [
          "Sparkles does not glow bright."
        ],
        "rules": "Sparkles either glows bright or has wings.",
        "conclusion": "Sparkles has wings."
      },
      {
        "facts": [
          "Sparkles has wings."
        ],
        "rules": "For all fantasy creatures, if they have wings, then they can fly.",
        "conclusion": "Sparkles can fly."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬repairs_beacons(Sparkles)"
        ],
        "rules": "repairs_beacons(Sparkles) ⊕ shines_stardust(Sparkles)",
        "conclusion": "shines_stardust(Sparkles)"
      },
      {
        "facts": [
          "shines_stardust(Sparkles)"
        ],
        "rules": "shines_stardust(Sparkles) ⊕ glows_bright(Sparkles)",
        "conclusion": "¬glows_bright(Sparkles)"
      },
      {
        "facts": [
          "¬glows_bright(Sparkles)"
        ],
        "rules": "glows_bright(Sparkles) ∨ has_wings(Sparkles)",
        "conclusion": "has_wings(Sparkles)"
      },
      {
        "facts": [
          "has_wings(Sparkles)"
        ],
        "rules": "∀x (has_wings(x) → can_fly(x))",
        "conclusion": "can_fly(Sparkles)"
      }
    ],
    "conclusion": "Sparkles can fly.",
    "conclusion_fol": "can_fly(Sparkles)",
    "answer": "True",
    "context": [
      "Sparkles does not repair beacons.",
      "Sparkles either repairs beacons or shines with stardust, but not both.",
      "Sparkles either shines with stardust or glows bright, but not both at the same time.",
      "Sparkles either glows bright or has wings.",
      "For all fantasy creatures, if they have wings, then they can fly."
    ],
    "context_fol": [
      "¬repairs_beacons(Sparkles)",
      "repairs_beacons(Sparkles) ⊕ shines_stardust(Sparkles)",
      "shines_stardust(Sparkles) ⊕ glows_bright(Sparkles)",
      "glows_bright(Sparkles) ∨ has_wings(Sparkles)",
      "∀x (has_wings(x) → can_fly(x))"
    ],
    "background_story": "Sparkles was a mystical lighterman, a being tasked with navigating and maintaining the luminous pathways that crisscrossed the dreamworld. With wings as delicate as a butterfly and hair that shone like stardust, Sparkles danced across the skies, ensuring that the soft glow of the luminescent roads remained constant. As a lighterman, Sparkles possessed the ability to communicate with the essence of light itself, allowing her to repair flickering beacons and ignite new pathways where darkness threatened to consume the dreamscape. Her work was crucial, for without the lightermen, the dreamworld would plunge into darkness, and the sleeping minds of mortals would be lost in an endless void. Sparkles took pride in her role, spreading joy and illumination wherever she flew.",
    "name": "Sparkles",
    "keyword": "lighterman",
    "subject_category": "fantasy creature"
  },
  {
    "facts": [
      "Juliet is fair in her judgments.",
      "Juliet enjoys the outdoors."
    ],
    "facts_fol": [
      "is_fair(Juliet)",
      "enjoys_outdoors(Juliet)"
    ],
    "rules": [
      "If Juliet is passionate about baseball, then she is respected by players and loved by fans.",
      "Juliet is either fair in her judgments or loved by fans, but being one does not guarantee the other.",
      "A person either enjoys the outdoors or is passionate about baseball, but not necessarily both."
    ],
    "rules_fol": [
      "passionate_about_baseball(Juliet) → (respected_by_players(Juliet) ∧ loved_by_fans(Juliet))",
      "is_fair(Juliet) ⊕ loved_by_fans(Juliet)",
      "∀x (enjoys_outdoors(x) ⊕ passionate_about_baseball(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Juliet knows the rules and makes accurate calls, then she is loved by fans.",
      "If Juliet either knows the rules or calls games (but not both), then she is passionate about baseball."
    ],
    "distracting_rules_fol": [
      "(knows_rules(Juliet) ∧ makes_accurate_calls(Juliet)) → loved_by_fans(Juliet)",
      "(knows_rules(Juliet) ⊕ calls_games(Juliet)) → passionate_about_baseball(Juliet)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Juliet enjoys the outdoors."
        ],
        "rules": "A person either enjoys the outdoors or is passionate about baseball, but not necessarily both.",
        "conclusion": "Juliet is not passionate about baseball."
      },
      {
        "facts": [
          "Juliet is fair in her judgments."
        ],
        "rules": "Juliet is either fair in her judgments or loved by fans, but being one does not guarantee the other.",
        "conclusion": "Juliet is not loved by the fans."
      },
      {
        "facts": [
          "Juliet is not passionate about baseball.",
          "Juliet is not loved by the fans."
        ],
        "rules": "If Juliet is passionate about baseball, then she is respected by players and loved by fans.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "enjoys_outdoors(Juliet)"
        ],
        "rules": "∀x (enjoys_outdoors(x) ⊕ passionate_about_baseball(x))",
        "conclusion": "¬passionate_about_baseball(Juliet)"
      },
      {
        "facts": [
          "is_fair(Juliet)"
        ],
        "rules": "is_fair(Juliet) ⊕ loved_by_fans(Juliet)",
        "conclusion": "¬loved_by_fans(Juliet)"
      },
      {
        "facts": [
          "¬passionate_about_baseball(Juliet)",
          "¬loved_by_fans(Juliet)"
        ],
        "rules": "passionate_about_baseball(Juliet) → (respected_by_players(Juliet) ∧ loved_by_fans(Juliet))",
        "conclusion": null
      }
    ],
    "conclusion": "Juliet is not respected by players.",
    "conclusion_fol": "¬respected_by_players(Juliet)",
    "answer": "Uncertain",
    "context": [
      "Juliet enjoys the outdoors.",
      "A person either enjoys the outdoors or is passionate about baseball, but not necessarily both.",
      "Juliet is fair in her judgments.",
      "Juliet is either fair in her judgments or loved by fans, but being one does not guarantee the other.",
      "If Juliet is passionate about baseball, then she is respected by players and loved by fans."
    ],
    "context_fol": [
      "enjoys_outdoors(Juliet)",
      "∀x (enjoys_outdoors(x) ⊕ passionate_about_baseball(x))",
      "is_fair(Juliet)",
      "is_fair(Juliet) ⊕ loved_by_fans(Juliet)",
      "passionate_about_baseball(Juliet) → (respected_by_players(Juliet) ∧ loved_by_fans(Juliet))"
    ],
    "background_story": "Juliet spent her summers working as an umpire at the local ballpark. She loved the smell of fresh-cut grass and the crack of the bat as players took their swings. Juliet's passion for baseball was contagious, and she quickly became a fan favorite among the regulars. Her keen eye and fair calls earned her respect from players and coaches alike. When she wasn't calling games, Juliet could be found exploring the ballpark's nostalgic charm, from the vintage scoreboard to the classic concession stands. For her, the ballpark was more than just a place to work – it was a community, a family, and a home away from home. Juliet's love for the game and the ballpark made every day feel like a home run.",
    "name": "Juliet",
    "keyword": "ballpark",
    "subject_category": "human"
  },
  {
    "facts": [
      "Lyric is passionate.",
      "Lyric is not sincere."
    ],
    "facts_fol": [
      "is_passionate(Lyric)",
      "¬is_sincere(Lyric)"
    ],
    "rules": [
      "Lyric is either creative or inspirational (or both).",
      "Lyric is either authentic or creative, but not necessarily both.",
      "If Lyric is passionate, then she is either sincere or authentic, but not both."
    ],
    "rules_fol": [
      "creative(Lyric) ∨ inspirational(Lyric)",
      "is_authentic(Lyric) ⊕ creative(Lyric)",
      "is_passionate(Lyric) → (is_sincere(Lyric) ⊕ is_authentic(Lyric))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Lyric either writes songs or composes music (but not both), then she is creative.",
      "If Lyric is artistic, then she is either expressive or authentic, but not both."
    ],
    "distracting_rules_fol": [
      "(writes_songs(Lyric) ⊕ composes_music(Lyric)) → creative(Lyric)",
      "is_artistic(Lyric) → (is_expressive(Lyric) ⊕ is_authentic(Lyric))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Lyric is passionate.",
          "Lyric is not sincere."
        ],
        "rules": "If Lyric is passionate, then she is either sincere or authentic, but not both.",
        "conclusion": "Lyric is authentic."
      },
      {
        "facts": [
          "Lyric is authentic."
        ],
        "rules": "Lyric is either authentic or creative, but not necessarily both.",
        "conclusion": "Lyric is not creative."
      },
      {
        "facts": [
          "Lyric is not creative."
        ],
        "rules": "Lyric is either creative or inspirational (or both).",
        "conclusion": "Lyric is inspirational."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "is_passionate(Lyric)",
          "¬is_sincere(Lyric)"
        ],
        "rules": "is_passionate(Lyric) → (is_sincere(Lyric) ⊕ is_authentic(Lyric))",
        "conclusion": "is_authentic(Lyric)"
      },
      {
        "facts": [
          "is_authentic(Lyric)"
        ],
        "rules": "is_authentic(Lyric) ⊕ creative(Lyric)",
        "conclusion": "¬creative(Lyric)"
      },
      {
        "facts": [
          "¬creative(Lyric)"
        ],
        "rules": "creative(Lyric) ∨ inspirational(Lyric)",
        "conclusion": "inspirational(Lyric)"
      }
    ],
    "conclusion": "Lyric is inspirational.",
    "conclusion_fol": "inspirational(Lyric)",
    "answer": "True",
    "context": [
      "Lyric is passionate.",
      "Lyric is not sincere.",
      "If Lyric is passionate, then she is either sincere or authentic, but not both.",
      "Lyric is either authentic or creative, but not necessarily both.",
      "Lyric is either creative or inspirational (or both)."
    ],
    "context_fol": [
      "is_passionate(Lyric)",
      "¬is_sincere(Lyric)",
      "is_passionate(Lyric) → (is_sincere(Lyric) ⊕ is_authentic(Lyric))",
      "is_authentic(Lyric) ⊕ creative(Lyric)",
      "creative(Lyric) ∨ inspirational(Lyric)"
    ],
    "background_story": "Lyric, born with the given name Emily, earned her agnomen - a nickname that reflected her true nature - through her extraordinary musical talents. She was a poet and a singer-songwriter, known for her soulful voice and lyrics that spoke directly to the hearts of those who listened. As her fame grew, so did the use of 'Lyric' as her moniker, a name that encapsulated the essence of her art. The term 'Lyric' became synonymous with heartfelt, evocative music, and she wore her agnomen with pride, seeing it as a badge of honor bestowed upon her by her fans and peers. Over time, 'Lyric' became the only name she needed, a symbol of her artistic identity and legacy.",
    "name": "Lyric",
    "keyword": "agnomen",
    "subject_category": "human"
  },
  {
    "facts": [
      "Taylor is elderly.",
      "Taylor does not stay active."
    ],
    "facts_fol": [
      "is_elderly(Taylor)",
      "¬stays_active(Taylor)"
    ],
    "rules": [
      "If Taylor has bronchitis, then he either needs oxygen or requires care, but not both.",
      "If Taylor is elderly, then he requires care.",
      "Taylor either stays active or has bronchitis, but not both."
    ],
    "rules_fol": [
      "has_bronchitis(Taylor) → (needs_oxygen(Taylor) ⊕ requires_care(Taylor))",
      "is_elderly(Taylor) → requires_care(Taylor)",
      "stays_active(Taylor) ⊕ has_bronchitis(Taylor)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Taylor either uses medication or requires care.",
      "If Taylor is ill, then he either uses medication or has bronchitis, but not both."
    ],
    "distracting_rules_fol": [
      "uses_medication(Taylor) ∨ requires_care(Taylor)",
      "is_ill(Taylor) → (uses_medication(Taylor) ⊕ has_bronchitis(Taylor))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Taylor does not stay active."
        ],
        "rules": "Taylor either stays active or has bronchitis, but not both.",
        "conclusion": "Taylor has bronchitis."
      },
      {
        "facts": [
          "Taylor is elderly."
        ],
        "rules": "If Taylor is elderly, then he requires care.",
        "conclusion": "Taylor requires care."
      },
      {
        "facts": [
          "Taylor has bronchitis.",
          "Taylor requires care."
        ],
        "rules": "If Taylor has bronchitis, then he either needs oxygen or requires care, but not both.",
        "conclusion": "Taylor needs oxygen."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬stays_active(Taylor)"
        ],
        "rules": "stays_active(Taylor) ⊕ has_bronchitis(Taylor)",
        "conclusion": "has_bronchitis(Taylor)"
      },
      {
        "facts": [
          "is_elderly(Taylor)"
        ],
        "rules": "is_elderly(Taylor) → requires_care(Taylor)",
        "conclusion": "requires_care(Taylor)"
      },
      {
        "facts": [
          "has_bronchitis(Taylor)",
          "requires_care(Taylor)"
        ],
        "rules": "has_bronchitis(Taylor) → (needs_oxygen(Taylor) ⊕ requires_care(Taylor))",
        "conclusion": "needs_oxygen(Taylor)"
      }
    ],
    "conclusion": "Taylor needs oxygen.",
    "conclusion_fol": "needs_oxygen(Taylor)",
    "answer": "False",
    "context": [
      "Taylor does not stay active.",
      "Taylor either stays active or has bronchitis, but not both.",
      "Taylor is elderly.",
      "If Taylor is elderly, then he requires care.",
      "If Taylor has bronchitis, then he either needs oxygen or requires care, but not both."
    ],
    "context_fol": [
      "¬stays_active(Taylor)",
      "stays_active(Taylor) ⊕ has_bronchitis(Taylor)",
      "is_elderly(Taylor)",
      "is_elderly(Taylor) → requires_care(Taylor)",
      "has_bronchitis(Taylor) → (needs_oxygen(Taylor) ⊕ requires_care(Taylor))"
    ],
    "background_story": "Taylor, a 75-year-old retired miner, had spent most of his life working underground. Years of inhaling dust and pollutants took a toll on his lungs, leaving him bronchitic. Despite his condition, Taylor remained optimistic and continued to tend to his garden, finding solace in the fresh air and greenery. However, as the winters grew colder, his bronchitis worsened, forcing him to rely on oxygen tanks to breathe. Taylor's family and friends rallied around him, providing care and support. With their help, he learned to manage his condition and adapt to his new limitations. Though his bronchitis had slowed him down, Taylor's spirit remained unbroken, and he continued to share his wisdom and stories with those around him.",
    "name": "Taylor",
    "keyword": "bronchitic",
    "subject_category": "human"
  },
  {
    "facts": [
      "Jeremy maps stars.",
      "Jeremy does not examine images."
    ],
    "facts_fol": [
      "map_stars(Jeremy)",
      "¬examine_images(Jeremy)"
    ],
    "rules": [
      "If Jeremy studies the cosmos, then he either makes new discoveries or inspires colleagues, but not both.",
      "If Jeremy analyzes data, then he makes new discoveries.",
      "All astronomers who explore space study the cosmos.",
      "All astronomers who map stars explore space.",
      "All astronomers either examine images or analyze data."
    ],
    "rules_fol": [
      "study_cosmos(Jeremy) → (make_new_discoveries(Jeremy) ⊕ inspire_colleagues(Jeremy))",
      "analyze_data(Jeremy) → make_new_discoveries(Jeremy)",
      "∀x (explore_space(x) → study_cosmos(x))",
      "∀x (map_stars(x) → explore_space(x))",
      "∀x (examine_images(x) ∨ analyze_data(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Jeremy investigates phenomena, then he either makes new discoveries or authors papers, but not both.",
      "For all astronomers, if they understand black holes and research galaxies, then they study the cosmos.",
      "If an astronomer understands the universe and researches black holes, then they explore space.",
      "If Jeremy conducts research, then he either collects samples or analyzes data, but not both."
    ],
    "distracting_rules_fol": [
      "investigate_phenomena(Jeremy) → (make_new_discoveries(Jeremy) ⊕ author_papers(Jeremy))",
      "∀x ((understand_blackholes(x) ∧ research_galaxies(x)) → study_cosmos(x))",
      "∀x ((understand_universe(x) ∧ research_blackholes(x)) → explore_space(x))",
      "conduct_research(Jeremy) → (collect_samples(Jeremy) ⊕ analyze_data(Jeremy))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Jeremy does not examine images."
        ],
        "rules": "All astronomers either examine images or analyze data.",
        "conclusion": "Jeremy analyzes data."
      },
      {
        "facts": [
          "Jeremy maps stars."
        ],
        "rules": "All astronomers who map stars explore space.",
        "conclusion": "Jeremy explores space."
      },
      {
        "facts": [
          "Jeremy explores space."
        ],
        "rules": "All astronomers who explore space study the cosmos.",
        "conclusion": "Jeremy studies the cosmos."
      },
      {
        "facts": [
          "Jeremy analyzes data."
        ],
        "rules": "If Jeremy analyzes data, then he makes new discoveries.",
        "conclusion": "Jeremy makes new discoveries."
      },
      {
        "facts": [
          "Jeremy studies the cosmos.",
          "Jeremy makes new discoveries."
        ],
        "rules": "If Jeremy studies the cosmos, then he either makes new discoveries or inspires colleagues, but not both.",
        "conclusion": "Jeremy inspires his colleagues."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬examine_images(Jeremy)"
        ],
        "rules": "∀x (examine_images(x) ∨ analyze_data(x))",
        "conclusion": "analyze_data(Jeremy)"
      },
      {
        "facts": [
          "map_stars(Jeremy)"
        ],
        "rules": "∀x (map_stars(x) → explore_space(x))",
        "conclusion": "explore_space(Jeremy)"
      },
      {
        "facts": [
          "explore_space(Jeremy)"
        ],
        "rules": "∀x (explore_space(x) → study_cosmos(x))",
        "conclusion": "study_cosmos(Jeremy)"
      },
      {
        "facts": [
          "analyze_data(Jeremy)"
        ],
        "rules": "analyze_data(Jeremy) → make_new_discoveries(Jeremy)",
        "conclusion": "make_new_discoveries(Jeremy)"
      },
      {
        "facts": [
          "study_cosmos(Jeremy)",
          "make_new_discoveries(Jeremy)"
        ],
        "rules": "study_cosmos(Jeremy) → (make_new_discoveries(Jeremy) ⊕ inspire_colleagues(Jeremy))",
        "conclusion": "inspire_colleagues(Jeremy)"
      }
    ],
    "conclusion": "Jeremy inspires his colleagues.",
    "conclusion_fol": "inspire_colleagues(Jeremy)",
    "answer": "False",
    "context": [
      "Jeremy does not examine images.",
      "All astronomers either examine images or analyze data.",
      "Jeremy maps stars.",
      "All astronomers who map stars explore space.",
      "All astronomers who explore space study the cosmos.",
      "If Jeremy analyzes data, then he makes new discoveries.",
      "If Jeremy studies the cosmos, then he either makes new discoveries or inspires colleagues, but not both."
    ],
    "context_fol": [
      "¬examine_images(Jeremy)",
      "∀x (examine_images(x) ∨ analyze_data(x))",
      "map_stars(Jeremy)",
      "∀x (map_stars(x) → explore_space(x))",
      "∀x (explore_space(x) → study_cosmos(x))",
      "analyze_data(Jeremy) → make_new_discoveries(Jeremy)",
      "study_cosmos(Jeremy) → (make_new_discoveries(Jeremy) ⊕ inspire_colleagues(Jeremy))"
    ],
    "background_story": "Jeremy was an astronomer with an unquenchable thirst for understanding the macrocosmic universe. He spent years studying the vast expanse of stars, galaxies, and celestial phenomena. His research focused on the intricate dance between black holes and dark matter, seeking to unravel the mysteries of the cosmos. Jeremy's work took him to some of the world's most advanced observatories, where he pored over data and images from distant reaches of the universe. His findings shed new light on the macrocosmic forces that shape the universe, earning him accolades within the scientific community. Jeremy's fascination with the macrocosmic realm inspired a new generation of astronomers to explore the infinite wonders of the universe.",
    "name": "Jeremy",
    "keyword": "macrocosmic",
    "subject_category": "astronomer"
  },
  {
    "facts": [
      "Brinley does not plant bee-friendly flowers.",
      "Brinley studies the life of bees.",
      "Brinley tends to an apiary.",
      "Brinley raises queen bees."
    ],
    "facts_fol": [
      "¬plant_bee_friendly(Brinley)",
      "study_beelife(Brinley)",
      "tend_apiary(Brinley)",
      "raise_queens(Brinley)"
    ],
    "rules": [
      "For all beekeepers, if they cultivate a mason bee habitat and protect pollinators, then they will increase the bee population.",
      "If Brinley either plants bee-friendly flowers or maintains hives (but not both), then she cultivates a mason bee habitat.",
      "Brinley either studies the life of bees or protects pollinators, but not necessarily both.",
      "If Brinley tends to an apiary, then she either raises queen bees or maintains hives, but not both."
    ],
    "rules_fol": [
      "∀x ((cultivate_mason_bee_habitat(x) ∧ protect_pollinators(x)) → increase_bee_population(x))",
      "(plant_bee_friendly(Brinley) ⊕ maintain_hives(Brinley)) → cultivate_mason_bee_habitat(Brinley)",
      "study_beelife(Brinley) ⊕ protect_pollinators(Brinley)",
      "tend_apiary(Brinley) → (raise_queens(Brinley) ⊕ maintain_hives(Brinley))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Brinley either nurtures flowers or provides shelters (but not both), then she cultivates a mason bee habitat.",
      "If Brinley breeds queen bees, then she either creates a bee sanctuary or protects pollinators, but not both.",
      "If a beekeeper builds nesting boxes and harvests honey, then they maintain hives."
    ],
    "distracting_rules_fol": [
      "(nurture_flowers(Brinley) ⊕ provide_shelters(Brinley)) → cultivate_mason_bee_habitat(Brinley)",
      "breed_queen_bees(Brinley) → (create_bee_sanctuary(Brinley) ⊕ protect_pollinators(Brinley))",
      "∀x ((build_nesting_boxes(x) ∧ harvest_honey(x)) → maintain_hives(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Brinley tends to an apiary.",
          "Brinley raises queen bees."
        ],
        "rules": "If Brinley tends to an apiary, then she either raises queen bees or maintains hives, but not both.",
        "conclusion": "Brinley does not maintain hives."
      },
      {
        "facts": [
          "Brinley studies the life of bees."
        ],
        "rules": "Brinley either studies the life of bees or protects pollinators, but not necessarily both.",
        "conclusion": "Brinley does not protect pollinators."
      },
      {
        "facts": [
          "Brinley does not plant bee-friendly flowers.",
          "Brinley does not maintain hives."
        ],
        "rules": "If Brinley either plants bee-friendly flowers or maintains hives (but not both), then she cultivates a mason bee habitat.",
        "conclusion": null
      },
      {
        "facts": [
          "Brinley does not protect pollinators."
        ],
        "rules": "For all beekeepers, if they cultivate a mason bee habitat and protect pollinators, then they will increase the bee population.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "tend_apiary(Brinley)",
          "raise_queens(Brinley)"
        ],
        "rules": "tend_apiary(Brinley) → (raise_queens(Brinley) ⊕ maintain_hives(Brinley))",
        "conclusion": "¬maintain_hives(Brinley)"
      },
      {
        "facts": [
          "study_beelife(Brinley)"
        ],
        "rules": "study_beelife(Brinley) ⊕ protect_pollinators(Brinley)",
        "conclusion": "¬protect_pollinators(Brinley)"
      },
      {
        "facts": [
          "¬plant_bee_friendly(Brinley)",
          "¬maintain_hives(Brinley)"
        ],
        "rules": "(plant_bee_friendly(Brinley) ⊕ maintain_hives(Brinley)) → cultivate_mason_bee_habitat(Brinley)",
        "conclusion": null
      },
      {
        "facts": [
          "¬protect_pollinators(Brinley)"
        ],
        "rules": "∀x ((cultivate_mason_bee_habitat(x) ∧ protect_pollinators(x)) → increase_bee_population(x))",
        "conclusion": null
      }
    ],
    "conclusion": "Brinley does not increase the bee population.",
    "conclusion_fol": "¬increase_bee_population(Brinley)",
    "answer": "Uncertain",
    "context": [
      "Brinley tends to an apiary.",
      "Brinley raises queen bees.",
      "If Brinley tends to an apiary, then she either raises queen bees or maintains hives, but not both.",
      "Brinley studies the life of bees.",
      "Brinley either studies the life of bees or protects pollinators, but not necessarily both.",
      "Brinley does not plant bee-friendly flowers.",
      "If Brinley either plants bee-friendly flowers or maintains hives (but not both), then she cultivates a mason bee habitat.",
      "For all beekeepers, if they cultivate a mason bee habitat and protect pollinators, then they will increase the bee population."
    ],
    "context_fol": [
      "tend_apiary(Brinley)",
      "raise_queens(Brinley)",
      "tend_apiary(Brinley) → (raise_queens(Brinley) ⊕ maintain_hives(Brinley))",
      "study_beelife(Brinley)",
      "study_beelife(Brinley) ⊕ protect_pollinators(Brinley)",
      "¬plant_bee_friendly(Brinley)",
      "(plant_bee_friendly(Brinley) ⊕ maintain_hives(Brinley)) → cultivate_mason_bee_habitat(Brinley)",
      "∀x ((cultivate_mason_bee_habitat(x) ∧ protect_pollinators(x)) → increase_bee_population(x))"
    ],
    "background_story": "Brinley was a passionate beekeeper with a special fondness for the megachilidae family, also known as mason bees. She spent most of her days tending to her bee farm, where she cultivated a variety of flowers that attracted these gentle, solitary bees. Brinley's fascination with megachilidae began when she discovered their unique nesting habits, using mud to construct intricate cells for their young. She dedicated her life to studying and protecting these vital pollinators, often hosting workshops to educate her community about their importance. Brinley's farm became a haven for megachilidae, and her efforts helped increase their population, earning her the title of 'Mason Bee Whisperer' among local bee enthusiasts.",
    "name": "Brinley",
    "keyword": "megachilidae",
    "subject_category": "beekeeper"
  },
  {
    "facts": [
      "Ellie is experimental.",
      "Ellie mixes media.",
      "Ellie creates a masterpiece.",
      "Ellie takes risks."
    ],
    "facts_fol": [
      "experimental(Ellie)",
      "mixes_media(Ellie)",
      "creates_masterpiece(Ellie)",
      "takes_risks(Ellie)"
    ],
    "rules": [
      "Ellie is either a traditional artist or an avant-garde artist, but not both.",
      "If an artist uses classic techniques and follows established guidelines, then they are a traditional artist.",
      "Ellie either breaks molds or follows rules.",
      "If Ellie is experimental, then she mixes media and uses classic techniques.",
      "If Ellie creates a masterpiece, then she either takes risks or breaks molds, but not both."
    ],
    "rules_fol": [
      "traditional(Ellie) ⊕ avant_garde(Ellie)",
      "∀x ((uses_classic(x) ∧ follows_rules(x)) → traditional(x))",
      "breaks_molds(Ellie) ∨ follows_rules(Ellie)",
      "experimental(Ellie) → (mixes_media(Ellie) ∧ uses_classic(Ellie))",
      "creates_masterpiece(Ellie) → (takes_risks(Ellie) ⊕ breaks_molds(Ellie))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Ellie follows trends and likes symmetry, then she is a traditional artist.",
      "Any artist who studies the canon or respects established forms follows rules.",
      "If Ellie paints freely, then she either makes a statement or uses classic techniques, but not both.",
      "Any artist who thinks freely or defies conformity can break molds."
    ],
    "distracting_rules_fol": [
      "(follows_trends(Ellie) ∧ likes_symmetry(Ellie)) → traditional(Ellie)",
      "∀x ((studies_canon(x) ∨ respects_form(x)) → follows_rules(x))",
      "paints_freely(Ellie) → (makes_statement(Ellie) ⊕ uses_classic(Ellie))",
      "∀x ((thinks_freely(x) ∨ defies_conformity(x)) → breaks_molds(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Ellie creates a masterpiece.",
          "Ellie takes risks."
        ],
        "rules": "If Ellie creates a masterpiece, then she either takes risks or breaks molds, but not both.",
        "conclusion": "Ellie does not break molds."
      },
      {
        "facts": [
          "Ellie is experimental.",
          "Ellie mixes media."
        ],
        "rules": "If Ellie is experimental, then she mixes media and uses classic techniques.",
        "conclusion": "Ellie uses classic techniques."
      },
      {
        "facts": [
          "Ellie does not break molds."
        ],
        "rules": "Ellie either breaks molds or follows rules.",
        "conclusion": "Ellie follows established guidelines."
      },
      {
        "facts": [
          "Ellie uses classic techniques.",
          "Ellie follows established guidelines."
        ],
        "rules": "If an artist uses classic techniques and follows established guidelines, then they are a traditional artist.",
        "conclusion": "Ellie is a traditional artist."
      },
      {
        "facts": [
          "Ellie is a traditional artist."
        ],
        "rules": "Ellie is either a traditional artist or an avant-garde artist, but not both.",
        "conclusion": "Ellie is an avant-garde artist."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "creates_masterpiece(Ellie)",
          "takes_risks(Ellie)"
        ],
        "rules": "creates_masterpiece(Ellie) → (takes_risks(Ellie) ⊕ breaks_molds(Ellie))",
        "conclusion": "¬breaks_molds(Ellie)"
      },
      {
        "facts": [
          "experimental(Ellie)",
          "mixes_media(Ellie)"
        ],
        "rules": "experimental(Ellie) → (mixes_media(Ellie) ∧ uses_classic(Ellie))",
        "conclusion": "uses_classic(Ellie)"
      },
      {
        "facts": [
          "¬breaks_molds(Ellie)"
        ],
        "rules": "breaks_molds(Ellie) ∨ follows_rules(Ellie)",
        "conclusion": "follows_rules(Ellie)"
      },
      {
        "facts": [
          "uses_classic(Ellie)",
          "follows_rules(Ellie)"
        ],
        "rules": "∀x ((uses_classic(x) ∧ follows_rules(x)) → traditional(x))",
        "conclusion": "traditional(Ellie)"
      },
      {
        "facts": [
          "traditional(Ellie)"
        ],
        "rules": "traditional(Ellie) ⊕ avant_garde(Ellie)",
        "conclusion": "avant_garde(Ellie)"
      }
    ],
    "conclusion": "Ellie is an avant-garde artist.",
    "conclusion_fol": "avant_garde(Ellie)",
    "answer": "False",
    "context": [
      "Ellie creates a masterpiece.",
      "Ellie takes risks.",
      "If Ellie creates a masterpiece, then she either takes risks or breaks molds, but not both.",
      "Ellie is experimental.",
      "Ellie mixes media.",
      "If Ellie is experimental, then she mixes media and uses classic techniques.",
      "Ellie either breaks molds or follows rules.",
      "If an artist uses classic techniques and follows established guidelines, then they are a traditional artist.",
      "Ellie is either a traditional artist or an avant-garde artist, but not both."
    ],
    "context_fol": [
      "creates_masterpiece(Ellie)",
      "takes_risks(Ellie)",
      "creates_masterpiece(Ellie) → (takes_risks(Ellie) ⊕ breaks_molds(Ellie))",
      "experimental(Ellie)",
      "mixes_media(Ellie)",
      "experimental(Ellie) → (mixes_media(Ellie) ∧ uses_classic(Ellie))",
      "breaks_molds(Ellie) ∨ follows_rules(Ellie)",
      "∀x ((uses_classic(x) ∧ follows_rules(x)) → traditional(x))",
      "traditional(Ellie) ⊕ avant_garde(Ellie)"
    ],
    "background_story": "Ellie was a free-spirited artist known for her original and eclectic style. She rejected conventional norms, instead embracing a unique fusion of colors, textures, and mediums. Her artwork was a reflection of her adventurous personality, often incorporating found objects and unexpected materials. Ellie's studio was a treasure trove of curious trinkets and unusual artifacts, each one inspiring a new piece of art. Her original approach to creativity earned her a reputation as a trailblazer in the art world, with critics and collectors clamoring for her latest works. Ellie's passion for innovation and self-expression made her a true original, leaving an indelible mark on the world of art.",
    "name": "Ellie",
    "keyword": "original",
    "subject_category": "artist"
  },
  {
    "facts": [
      "Jazlyn can solve crimes.",
      "Jazlyn does not reason well."
    ],
    "facts_fol": [
      "solve_crimes(Jazlyn)",
      "¬reasons_well(Jazlyn)"
    ],
    "rules": [
      "Jazlyn is analytical or detail-oriented.",
      "Jazlyn is either intuitive or analytical, but not necessarily both.",
      "If someone can solve crimes, then they think logically and are intuitive.",
      "All people who reason well think logically."
    ],
    "rules_fol": [
      "analytical(Jazlyn) ∨ detail_oriented(Jazlyn)",
      "is_intuitive(Jazlyn) ⊕ analytical(Jazlyn)",
      "∀x (solve_crimes(x) → (think_logically(x) ∧ is_intuitive(x)))",
      "∀x (reasons_well(x) → think_logically(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If someone studies clues and evaluates evidence, then they are analytical.",
      "Jazlyn either thinks critically or is intuitive.",
      "If a person investigates, then they think logically and find clues."
    ],
    "distracting_rules_fol": [
      "∀x ((studies_clues(x) ∧ evaluates_evidence(x)) → analytical(x))",
      "thinks_critic(Jazlyn) ∨ is_intuitive(Jazlyn)",
      "∀x (investigate(x) → (think_logically(x) ∧ find_clues(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Jazlyn does not reason well."
        ],
        "rules": "All people who reason well think logically.",
        "conclusion": null
      },
      {
        "facts": [
          "Jazlyn can solve crimes."
        ],
        "rules": "If someone can solve crimes, then they think logically and are intuitive.",
        "conclusion": "Jazlyn is intuitive."
      },
      {
        "facts": [
          "Jazlyn is intuitive."
        ],
        "rules": "Jazlyn is either intuitive or analytical, but not necessarily both.",
        "conclusion": "Jazlyn is not analytical."
      },
      {
        "facts": [
          "Jazlyn is not analytical."
        ],
        "rules": "Jazlyn is analytical or detail-oriented.",
        "conclusion": "Jazlyn is not detail-oriented."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬reasons_well(Jazlyn)"
        ],
        "rules": "∀x (reasons_well(x) → think_logically(x))",
        "conclusion": null
      },
      {
        "facts": [
          "solve_crimes(Jazlyn)"
        ],
        "rules": "∀x (solve_crimes(x) → (think_logically(x) ∧ is_intuitive(x)))",
        "conclusion": "is_intuitive(Jazlyn)"
      },
      {
        "facts": [
          "is_intuitive(Jazlyn)"
        ],
        "rules": "is_intuitive(Jazlyn) ⊕ analytical(Jazlyn)",
        "conclusion": "¬analytical(Jazlyn)"
      },
      {
        "facts": [
          "¬analytical(Jazlyn)"
        ],
        "rules": "analytical(Jazlyn) ∨ detail_oriented(Jazlyn)",
        "conclusion": "¬detail_oriented(Jazlyn)"
      }
    ],
    "conclusion": "Jazlyn is not detail-oriented.",
    "conclusion_fol": "¬detail_oriented(Jazlyn)",
    "answer": "False",
    "context": [
      "Jazlyn does not reason well.",
      "All people who reason well think logically.",
      "Jazlyn can solve crimes.",
      "If someone can solve crimes, then they think logically and are intuitive.",
      "Jazlyn is either intuitive or analytical, but not necessarily both.",
      "Jazlyn is analytical or detail-oriented."
    ],
    "context_fol": [
      "¬reasons_well(Jazlyn)",
      "∀x (reasons_well(x) → think_logically(x))",
      "solve_crimes(Jazlyn)",
      "∀x (solve_crimes(x) → (think_logically(x) ∧ is_intuitive(x)))",
      "is_intuitive(Jazlyn) ⊕ analytical(Jazlyn)",
      "analytical(Jazlyn) ∨ detail_oriented(Jazlyn)"
    ],
    "background_story": "Jazlyn was a brilliant and meticulous detective with a knack for detection. She had a keen eye for detail and an analytical mind that served her well in solving even the most complex crimes. With years of experience in forensic science, Jazlyn was known for her ability to piece together seemingly unrelated evidence to uncover the truth. Her latest case involved a string of high-end jewelry store robberies, where the thief left no apparent trail. Jazlyn's detection skills were put to the test as she carefully examined every shred of evidence, from security footage to microscopic DNA samples. Her tireless work eventually led to a breakthrough, and she was able to identify the culprit, solving the case and earning her a commendation for outstanding detective work.",
    "name": "Jazlyn",
    "keyword": "detection",
    "subject_category": "human"
  },
  {
    "facts": [
      "Joziah asks questions.",
      "Joziah thinks critically.",
      "Joziah loves reading.",
      "Joziah explores ideas."
    ],
    "facts_fol": [
      "asks_questions(Joziah)",
      "thinks_critically(Joziah)",
      "loves_reading(Joziah)",
      "explores_ideas(Joziah)"
    ],
    "rules": [
      "Joziah is either a seeker of knowledge or indifferent to learning, but not both.",
      "For all humans, if they read widely and ask questions, then they are a seeker of knowledge.",
      "If someone has a curious mind, then they read widely and think critically.",
      "For all humans, if they love reading and explore ideas, then they have a curious mind."
    ],
    "rules_fol": [
      "seeker_of_knowledge(Joziah) ⊕ indifferent_to_learning(Joziah)",
      "∀x ((reads_widely(x) ∧ asks_questions(x)) → seeker_of_knowledge(x))",
      "∀x (curious_mind(x) → (reads_widely(x) ∧ thinks_critically(x)))",
      "∀x ((loves_reading(x) ∧ explores_ideas(x)) → curious_mind(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Everyone who pursues wisdom either values education or is a seeker of knowledge.",
      "If Joziah visits libraries and collects books, then he reads widely.",
      "If someone values insight and pursues understanding, then they have a curious mind."
    ],
    "distracting_rules_fol": [
      "∀x (pursues_wisdom(x) → (values_education(x) ∨ seeker_of_knowledge(x)))",
      "(visits_libraries(Joziah) ∧ collects_books(Joziah)) → reads_widely(Joziah)",
      "∀x ((values_insight(x) ∧ pursues_understanding(x)) → curious_mind(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Joziah loves reading.",
          "Joziah explores ideas."
        ],
        "rules": "For all humans, if they love reading and explore ideas, then they have a curious mind.",
        "conclusion": "Joziah has a curious mind."
      },
      {
        "facts": [
          "Joziah has a curious mind.",
          "Joziah thinks critically."
        ],
        "rules": "If someone has a curious mind, then they read widely and think critically.",
        "conclusion": "Joziah reads widely."
      },
      {
        "facts": [
          "Joziah reads widely.",
          "Joziah asks questions."
        ],
        "rules": "For all humans, if they read widely and ask questions, then they are a seeker of knowledge.",
        "conclusion": "Joziah is a seeker of knowledge."
      },
      {
        "facts": [
          "Joziah is a seeker of knowledge."
        ],
        "rules": "Joziah is either a seeker of knowledge or indifferent to learning, but not both.",
        "conclusion": "Joziah is not indifferent to learning."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "loves_reading(Joziah)",
          "explores_ideas(Joziah)"
        ],
        "rules": "∀x ((loves_reading(x) ∧ explores_ideas(x)) → curious_mind(x))",
        "conclusion": "curious_mind(Joziah)"
      },
      {
        "facts": [
          "curious_mind(Joziah)",
          "thinks_critically(Joziah)"
        ],
        "rules": "∀x (curious_mind(x) → (reads_widely(x) ∧ thinks_critically(x)))",
        "conclusion": "reads_widely(Joziah)"
      },
      {
        "facts": [
          "reads_widely(Joziah)",
          "asks_questions(Joziah)"
        ],
        "rules": "∀x ((reads_widely(x) ∧ asks_questions(x)) → seeker_of_knowledge(x))",
        "conclusion": "seeker_of_knowledge(Joziah)"
      },
      {
        "facts": [
          "seeker_of_knowledge(Joziah)"
        ],
        "rules": "seeker_of_knowledge(Joziah) ⊕ indifferent_to_learning(Joziah)",
        "conclusion": "¬indifferent_to_learning(Joziah)"
      }
    ],
    "conclusion": "Joziah is not indifferent to learning.",
    "conclusion_fol": "¬indifferent_to_learning(Joziah)",
    "answer": "True",
    "context": [
      "Joziah loves reading.",
      "Joziah explores ideas.",
      "For all humans, if they love reading and explore ideas, then they have a curious mind.",
      "Joziah thinks critically.",
      "If someone has a curious mind, then they read widely and think critically.",
      "Joziah asks questions.",
      "For all humans, if they read widely and ask questions, then they are a seeker of knowledge.",
      "Joziah is either a seeker of knowledge or indifferent to learning, but not both."
    ],
    "context_fol": [
      "loves_reading(Joziah)",
      "explores_ideas(Joziah)",
      "∀x ((loves_reading(x) ∧ explores_ideas(x)) → curious_mind(x))",
      "thinks_critically(Joziah)",
      "∀x (curious_mind(x) → (reads_widely(x) ∧ thinks_critically(x)))",
      "asks_questions(Joziah)",
      "∀x ((reads_widely(x) ∧ asks_questions(x)) → seeker_of_knowledge(x))",
      "seeker_of_knowledge(Joziah) ⊕ indifferent_to_learning(Joziah)"
    ],
    "background_story": "Joziah was a brilliant philosopher who spent his life pondering the mysteries of existence. He believed that the pursuit of knowledge was insomuch a part of human nature that it defined our very essence. As he delved deeper into his studies, Joziah became convinced that understanding the universe was insomuch a noble endeavor that it justified any sacrifice. His obsession with learning led him to travel the world, seeking out ancient texts and forgotten wisdom. Insomuch as he was driven by curiosity, Joziah's quest for knowledge also brought him a sense of purpose and fulfillment. Though his journey was long and arduous, he remained committed to his pursuit, insomuch that his name became synonymous with intellectual passion and dedication.",
    "name": "Joziah",
    "keyword": "insomuch",
    "subject_category": "human"
  },
  {
    "facts": [
      "Crew does not seek material wealth.",
      "Crew works hard."
    ],
    "facts_fol": [
      "¬seek_material_wealth(Crew)",
      "work_hard(Crew)"
    ],
    "rules": [
      "Either Crew seeks material wealth or he lives virtuously, but not both.",
      "If someone leads humbly, then they value integrity and respect tradition.",
      "Anyone who works hard or stays modest can lead humbly."
    ],
    "rules_fol": [
      "seek_material_wealth(Crew) ⊕ live_virtuously(Crew)",
      "∀x (lead_humbly(x) → (value_integrity(x) ∧ respect_tradition(x)))",
      "∀x ((work_hard(x) ∨ stay_modest(x)) → lead_humbly(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Anyone who acts honorably or is disciplined can live virtuously.",
      "For all humans, if they uphold principles and act with honor, then they value integrity.",
      "If Crew holds office, then he either leads humbly or serves others, but not both."
    ],
    "distracting_rules_fol": [
      "∀x ((act_honorably(x) ∨ be_disciplined(x)) → live_virtuously(x))",
      "∀x ((uphold_principles(x) ∧ act_with_honor(x)) → value_integrity(x))",
      "hold_office(Crew) → (lead_humbly(Crew) ⊕ serve_others(Crew))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Crew works hard."
        ],
        "rules": "Anyone who works hard or stays modest can lead humbly.",
        "conclusion": "Crew leads humbly."
      },
      {
        "facts": [
          "Crew leads humbly."
        ],
        "rules": "If someone leads humbly, then they value integrity and respect tradition.",
        "conclusion": "Crew values integrity."
      },
      {
        "facts": [
          "Crew does not seek material wealth."
        ],
        "rules": "Either Crew seeks material wealth or he lives virtuously, but not both.",
        "conclusion": "Crew lives virtuously."
      },
      {
        "facts": [
          "Crew values integrity.",
          "Crew lives virtuously."
        ],
        "rules": null,
        "conclusion": "Crew values integrity and lives virtuously."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "work_hard(Crew)"
        ],
        "rules": "∀x ((work_hard(x) ∨ stay_modest(x)) → lead_humbly(x))",
        "conclusion": "lead_humbly(Crew)"
      },
      {
        "facts": [
          "lead_humbly(Crew)"
        ],
        "rules": "∀x (lead_humbly(x) → (value_integrity(x) ∧ respect_tradition(x)))",
        "conclusion": "value_integrity(Crew)"
      },
      {
        "facts": [
          "¬seek_material_wealth(Crew)"
        ],
        "rules": "seek_material_wealth(Crew) ⊕ live_virtuously(Crew)",
        "conclusion": "live_virtuously(Crew)"
      },
      {
        "facts": [
          "value_integrity(Crew)",
          "live_virtuously(Crew)"
        ],
        "rules": null,
        "conclusion": "value_integrity(Crew) ∧ live_virtuously(Crew)"
      }
    ],
    "conclusion": "Crew values integrity and lives virtuously.",
    "conclusion_fol": "value_integrity(Crew) ∧ live_virtuously(Crew)",
    "answer": "True",
    "context": [
      "Crew works hard.",
      "Anyone who works hard or stays modest can lead humbly.",
      "If someone leads humbly, then they value integrity and respect tradition.",
      "Crew does not seek material wealth.",
      "Either Crew seeks material wealth or he lives virtuously, but not both."
    ],
    "context_fol": [
      "work_hard(Crew)",
      "∀x ((work_hard(x) ∨ stay_modest(x)) → lead_humbly(x))",
      "∀x (lead_humbly(x) → (value_integrity(x) ∧ respect_tradition(x)))",
      "¬seek_material_wealth(Crew)",
      "seek_material_wealth(Crew) ⊕ live_virtuously(Crew)"
    ],
    "background_story": "Crew was raised in a strict, traditional household where values of simplicity and modesty were deeply ingrained. His family, descended from early American settlers, adhered to a puritanical lifestyle, eschewing modern conveniences and worldly temptations. Crew's upbringing instilled in him a strong sense of discipline and moral rectitude. He believed in hard work, self-reliance, and the importance of living a virtuous life. As he grew older, Crew became a respected member of his community, known for his integrity and uncompromising principles. Despite the changing times, he remained committed to his values, viewing them as a beacon of hope in a world he saw as increasingly decadent and corrupt. His unwavering commitment to his puritanical roots often put him at odds with his more liberal peers, but Crew remained unshakeable in his convictions.",
    "name": "Crew",
    "keyword": "puritanical",
    "subject_category": "human"
  },
  {
    "facts": [
      "Kristian does not meditate daily.",
      "Kristian likes solitude.",
      "Kristian does not read books.",
      "Kristian is reflective.",
      "Kristian lives simply.",
      "Kristian does not value clarity."
    ],
    "facts_fol": [
      "¬meditates_daily(Kristian)",
      "likes_solitude(Kristian)",
      "¬reads_books(Kristian)",
      "is_reflective(Kristian)",
      "lives_simply(Kristian)",
      "¬values_clarity(Kristian)"
    ],
    "rules": [
      "If Kristian either likes solitude or avoids crowds (but not both), then he is introverted.",
      "If Kristian is a philosopher, then he either avoids crowds or seeks silence, but not both.",
      "If Kristian either reads books or writes journals (but not both), then he seeks silence.",
      "If Kristian is reflective, then he either writes journals or meditates daily, but not both.",
      "If Kristian lives simply, then he is either a philosopher or values clarity, but not both."
    ],
    "rules_fol": [
      "(likes_solitude(Kristian) ⊕ avoids_crowds(Kristian)) → introvert(Kristian)",
      "is_philosopher(Kristian) → (avoids_crowds(Kristian) ⊕ seeks_silence(Kristian))",
      "(reads_books(Kristian) ⊕ writes_journals(Kristian)) → seeks_silence(Kristian)",
      "is_reflective(Kristian) → (writes_journals(Kristian) ⊕ meditates_daily(Kristian))",
      "lives_simply(Kristian) → (is_philosopher(Kristian) ⊕ values_clarity(Kristian))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Kristian is contemplative, then he is either adventurous or introverted, but not both.",
      "If Kristian enjoys nature, then he either prefers being alone or avoids crowds, but not both.",
      "If Kristian enjoys nature and thinks deeply, then he seeks silence.",
      "If Kristian has insights or explores nature, then he can write journals.",
      "If Kristian ponders life, then he is a philosopher."
    ],
    "distracting_rules_fol": [
      "is_contemplative(Kristian) → (is_adventurous(Kristian) ⊕ introvert(Kristian))",
      "enjoys_nature(Kristian) → (prefers_alone(Kristian) ⊕ avoids_crowds(Kristian))",
      "(enjoys_nature(Kristian) ∧ thinks_deeply(Kristian)) → seeks_silence(Kristian)",
      "(has_insights(Kristian) ∨ explores_nature(Kristian)) → writes_journals(Kristian)",
      "ponders_life(Kristian) → is_philosopher(Kristian)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Kristian lives simply.",
          "Kristian does not value clarity."
        ],
        "rules": "If Kristian lives simply, then he is either a philosopher or values clarity, but not both.",
        "conclusion": "Kristian is a philosopher."
      },
      {
        "facts": [
          "Kristian is reflective.",
          "Kristian does not meditate daily."
        ],
        "rules": "If Kristian is reflective, then he either writes journals or meditates daily, but not both.",
        "conclusion": "Kristian writes journals."
      },
      {
        "facts": [
          "Kristian does not read books.",
          "Kristian writes journals."
        ],
        "rules": "If Kristian either reads books or writes journals (but not both), then he seeks silence.",
        "conclusion": "Kristian seeks silence."
      },
      {
        "facts": [
          "Kristian is a philosopher.",
          "Kristian seeks silence."
        ],
        "rules": "If Kristian is a philosopher, then he either avoids crowds or seeks silence, but not both.",
        "conclusion": "Kristian does not avoid crowds."
      },
      {
        "facts": [
          "Kristian likes solitude.",
          "Kristian does not avoid crowds."
        ],
        "rules": "If Kristian either likes solitude or avoids crowds (but not both), then he is introverted.",
        "conclusion": "Kristian is an introvert."
      },
      {
        "facts": [
          "Kristian is an introvert."
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "lives_simply(Kristian)",
          "¬values_clarity(Kristian)"
        ],
        "rules": "lives_simply(Kristian) → (is_philosopher(Kristian) ⊕ values_clarity(Kristian))",
        "conclusion": "is_philosopher(Kristian)"
      },
      {
        "facts": [
          "is_reflective(Kristian)",
          "¬meditates_daily(Kristian)"
        ],
        "rules": "is_reflective(Kristian) → (writes_journals(Kristian) ⊕ meditates_daily(Kristian))",
        "conclusion": "writes_journals(Kristian)"
      },
      {
        "facts": [
          "¬reads_books(Kristian)",
          "writes_journals(Kristian)"
        ],
        "rules": "(reads_books(Kristian) ⊕ writes_journals(Kristian)) → seeks_silence(Kristian)",
        "conclusion": "seeks_silence(Kristian)"
      },
      {
        "facts": [
          "is_philosopher(Kristian)",
          "seeks_silence(Kristian)"
        ],
        "rules": "is_philosopher(Kristian) → (avoids_crowds(Kristian) ⊕ seeks_silence(Kristian))",
        "conclusion": "¬avoids_crowds(Kristian)"
      },
      {
        "facts": [
          "likes_solitude(Kristian)",
          "¬avoids_crowds(Kristian)"
        ],
        "rules": "(likes_solitude(Kristian) ⊕ avoids_crowds(Kristian)) → introvert(Kristian)",
        "conclusion": "introvert(Kristian)"
      },
      {
        "facts": [
          "introvert(Kristian)"
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "conclusion": "Kristian is either an introvert or an extrovert, but not both.",
    "conclusion_fol": "introvert(Kristian) ⊕ extrovert(Kristian)",
    "answer": "Uncertain",
    "context": [
      "Kristian lives simply.",
      "Kristian does not value clarity.",
      "If Kristian lives simply, then he is either a philosopher or values clarity, but not both.",
      "Kristian is reflective.",
      "Kristian does not meditate daily.",
      "If Kristian is reflective, then he either writes journals or meditates daily, but not both.",
      "Kristian does not read books.",
      "If Kristian either reads books or writes journals (but not both), then he seeks silence.",
      "If Kristian is a philosopher, then he either avoids crowds or seeks silence, but not both.",
      "Kristian likes solitude.",
      "If Kristian either likes solitude or avoids crowds (but not both), then he is introverted."
    ],
    "context_fol": [
      "lives_simply(Kristian)",
      "¬values_clarity(Kristian)",
      "lives_simply(Kristian) → (is_philosopher(Kristian) ⊕ values_clarity(Kristian))",
      "is_reflective(Kristian)",
      "¬meditates_daily(Kristian)",
      "is_reflective(Kristian) → (writes_journals(Kristian) ⊕ meditates_daily(Kristian))",
      "¬reads_books(Kristian)",
      "(reads_books(Kristian) ⊕ writes_journals(Kristian)) → seeks_silence(Kristian)",
      "is_philosopher(Kristian) → (avoids_crowds(Kristian) ⊕ seeks_silence(Kristian))",
      "likes_solitude(Kristian)",
      "(likes_solitude(Kristian) ⊕ avoids_crowds(Kristian)) → introvert(Kristian)"
    ],
    "background_story": "Kristian was a solitary figure, content with being one with nature. He lived in a secluded cabin on the outskirts of a forest, where he spent his days writing, reading, and exploring. Kristian believed that in a world filled with noise and distractions, being alone allowed him to tap into his deepest thoughts and creativity. He was a philosopher at heart, often pondering the mysteries of the universe and the human condition. Despite his reclusive lifestyle, Kristian's writings gained a significant following, with many drawn to his unique perspective and insightful thoughts. For Kristian, being one with himself and the natural world was the key to a life of simplicity, clarity, and profound understanding.",
    "name": "Kristian",
    "keyword": "one",
    "subject_category": "human"
  },
  {
    "facts": [
      "Rudy has passion.",
      "Rudy leads historical reenactments.",
      "Rudy does not honor his heroes.",
      "Rudy defends rights."
    ],
    "facts_fol": [
      "has_passion(Rudy)",
      "leads_reenactments(Rudy)",
      "¬honors_heroes(Rudy)",
      "defends_rights(Rudy)"
    ],
    "rules": [
      "If Rudy is a patriot, then he either seeks justice or fights for freedom, but not both.",
      "If Rudy leads historical reenactments, then he either honors his heroes or is a patriot (or both).",
      "For Rudy, either he defends rights or seeks justice, but not both."
    ],
    "rules_fol": [
      "is_patriot(Rudy) → (seeks_justice(Rudy) ⊕ fights_for_freedom(Rudy))",
      "leads_reenactments(Rudy) → (honors_heroes(Rudy) ∨ is_patriot(Rudy))",
      "defends_rights(Rudy) ⊕ seeks_justice(Rudy)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Rudy either challenges oppression or supports reform (but not both), then he fights for freedom.",
      "If Rudy loves his country, then he is either a patriot or supports unification, but not both.",
      "If Rudy either challenges injustice or supports equality (but not both), then he seeks justice."
    ],
    "distracting_rules_fol": [
      "(challenges_oppression(Rudy) ⊕ supports_reform(Rudy)) → fights_for_freedom(Rudy)",
      "loves_country(Rudy) → (is_patriot(Rudy) ⊕ supports_unification(Rudy))",
      "(challenges_injustice(Rudy) ⊕ supports_equality(Rudy)) → seeks_justice(Rudy)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Rudy defends rights."
        ],
        "rules": "For Rudy, either he defends rights or seeks justice, but not both.",
        "conclusion": "Rudy does not seek justice."
      },
      {
        "facts": [
          "Rudy leads historical reenactments.",
          "Rudy does not honor his heroes."
        ],
        "rules": "If Rudy leads historical reenactments, then he either honors his heroes or is a patriot (or both).",
        "conclusion": "Rudy is a patriot."
      },
      {
        "facts": [
          "Rudy is a patriot.",
          "Rudy does not seek justice."
        ],
        "rules": "If Rudy is a patriot, then he either seeks justice or fights for freedom, but not both.",
        "conclusion": "Rudy fights for freedom."
      },
      {
        "facts": [
          "Rudy has passion.",
          "Rudy fights for freedom."
        ],
        "rules": null,
        "conclusion": "Rudy has passion and fights for freedom, inspired by Garibaldi's legacy."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "defends_rights(Rudy)"
        ],
        "rules": "defends_rights(Rudy) ⊕ seeks_justice(Rudy)",
        "conclusion": "¬seeks_justice(Rudy)"
      },
      {
        "facts": [
          "leads_reenactments(Rudy)",
          "¬honors_heroes(Rudy)"
        ],
        "rules": "leads_reenactments(Rudy) → (honors_heroes(Rudy) ∨ is_patriot(Rudy))",
        "conclusion": "is_patriot(Rudy)"
      },
      {
        "facts": [
          "is_patriot(Rudy)",
          "¬seeks_justice(Rudy)"
        ],
        "rules": "is_patriot(Rudy) → (seeks_justice(Rudy) ⊕ fights_for_freedom(Rudy))",
        "conclusion": "fights_for_freedom(Rudy)"
      },
      {
        "facts": [
          "has_passion(Rudy)",
          "fights_for_freedom(Rudy)"
        ],
        "rules": null,
        "conclusion": "has_passion(Rudy) ∧ fights_for_freedom(Rudy)"
      }
    ],
    "conclusion": "Rudy has passion and fights for freedom, inspired by Garibaldi's legacy.",
    "conclusion_fol": "has_passion(Rudy) ∧ fights_for_freedom(Rudy)",
    "answer": "True",
    "context": [
      "Rudy defends rights.",
      "For Rudy, either he defends rights or seeks justice, but not both.",
      "Rudy leads historical reenactments.",
      "Rudy does not honor his heroes.",
      "If Rudy leads historical reenactments, then he either honors his heroes or is a patriot (or both).",
      "If Rudy is a patriot, then he either seeks justice or fights for freedom, but not both.",
      "Rudy has passion."
    ],
    "context_fol": [
      "defends_rights(Rudy)",
      "defends_rights(Rudy) ⊕ seeks_justice(Rudy)",
      "leads_reenactments(Rudy)",
      "¬honors_heroes(Rudy)",
      "leads_reenactments(Rudy) → (honors_heroes(Rudy) ∨ is_patriot(Rudy))",
      "is_patriot(Rudy) → (seeks_justice(Rudy) ⊕ fights_for_freedom(Rudy))",
      "has_passion(Rudy)"
    ],
    "background_story": "Rudy was a passionate Italian historian, specializing in the life and times of Giuseppe Garibaldi, the legendary unifier of Italy. Growing up in Rome, Rudy was fascinated by the stories of Garibaldi's bravery and strategic genius. He spent years studying the hero's military campaigns and political ideologies. Rudy's admiration for Garibaldi went beyond mere academic interest; he saw him as a symbol of courage, conviction, and the fight for freedom. Rudy often led historical reenactments of Garibaldi's battles, donning the iconic red shirt that had become synonymous with the general's name. Through his work, Rudy aimed to keep Garibaldi's legacy alive, inspiring future generations to stand up for their beliefs and fight for a united and just society.",
    "name": "Rudy",
    "keyword": "garibaldi",
    "subject_category": "human"
  },
  {
    "facts": [
      "Malayah has a curious mind.",
      "Malahay loves learning.",
      "Malayah studies protista.",
      "Malahay takes AP classes.",
      "Malayah does not participate in science fairs."
    ],
    "facts_fol": [
      "curious_mind(Malayah)",
      "love_learning(Malayah)",
      "study_protista(Malayah)",
      "takes_ap_classes(Malayah)",
      "¬participate_in_fairs(Malayah)"
    ],
    "rules": [
      "If Malayah has a curious mind, then she will discover new species and excel academically.",
      "If Malayah excels in science, then she will either become a researcher or pursue a career in microbiology, but not both.",
      "Malayah either joins the science club or becomes a researcher, but not both.",
      "If Malayah loves learning, then she will excel in science.",
      "If Malayah takes AP classes, then she either participates in science fairs or joins the science club, but not both."
    ],
    "rules_fol": [
      "curious_mind(Malayah) → (discover_new_species(Malayah) ∧ excel_academically(Malayah))",
      "excel_in_science(Malayah) → (become_researcher(Malayah) ⊕ pursue_microbiology(Malayah))",
      "join_science_club(Malayah) ⊕ become_researcher(Malayah)",
      "love_learning(Malayah) → excel_in_science(Malayah)",
      "takes_ap_classes(Malayah) → (participate_in_fairs(Malayah) ⊕ join_science_club(Malayah))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Malayah conducts experiments, then she discovers new species and understands ecosystems.",
      "If Malayah explores eukaryotes, then she either investigates ecosystems or pursues a career in microbiology (or both).",
      "If Malayah either analyzes data or conducts experiments (but not both), then she will become a researcher.",
      "If Malayah likes biology, then she will excel in science.",
      "If Malayah likes experiments, then she will join the science club."
    ],
    "distracting_rules_fol": [
      "conduct_experiments(Malayah) → (discover_new_species(Malayah) ∧ understand_ecosystems(Malayah))",
      "explore_eukaryotes(Malayah) → (investigate_ecosystems(Malayah) ∨ pursue_microbiology(Malayah))",
      "(analyze_data(Malayah) ⊕ conduct_experiments(Malayah)) → become_researcher(Malayah)",
      "likes_biology(Malayah) → excel_in_science(Malayah)",
      "likes_experiments(Malayah) → join_science_club(Malayah)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Malahay takes AP classes.",
          "Malayah does not participate in science fairs."
        ],
        "rules": "If Malayah takes AP classes, then she either participates in science fairs or joins the science club, but not both.",
        "conclusion": "Malayah joins the science club."
      },
      {
        "facts": [
          "Malahay loves learning."
        ],
        "rules": "If Malayah loves learning, then she will excel in science.",
        "conclusion": "Malahay excels in science."
      },
      {
        "facts": [
          "Malayah joins the science club."
        ],
        "rules": "Malayah either joins the science club or becomes a researcher, but not both.",
        "conclusion": "Malahay does not become a researcher."
      },
      {
        "facts": [
          "Malahay excels in science.",
          "Malahay does not become a researcher."
        ],
        "rules": "If Malayah excels in science, then she will either become a researcher or pursue a career in microbiology, but not both.",
        "conclusion": "Malayah pursues a career in microbiology."
      },
      {
        "facts": [
          "Malayah has a curious mind."
        ],
        "rules": "If Malayah has a curious mind, then she will discover new species and excel academically.",
        "conclusion": "Malayah discovers new species."
      },
      {
        "facts": [
          "Malayah studies protista.",
          "Malayah pursues a career in microbiology.",
          "Malayah discovers new species."
        ],
        "rules": null,
        "conclusion": "If Malayah studies protista, then she will either pursue a career in microbiology or discover new species, but not both."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "takes_ap_classes(Malayah)",
          "¬participate_in_fairs(Malayah)"
        ],
        "rules": "takes_ap_classes(Malayah) → (participate_in_fairs(Malayah) ⊕ join_science_club(Malayah))",
        "conclusion": "join_science_club(Malayah)"
      },
      {
        "facts": [
          "love_learning(Malayah)"
        ],
        "rules": "love_learning(Malayah) → excel_in_science(Malayah)",
        "conclusion": "excel_in_science(Malayah)"
      },
      {
        "facts": [
          "join_science_club(Malayah)"
        ],
        "rules": "join_science_club(Malayah) ⊕ become_researcher(Malayah)",
        "conclusion": "¬become_researcher(Malayah)"
      },
      {
        "facts": [
          "excel_in_science(Malayah)",
          "¬become_researcher(Malayah)"
        ],
        "rules": "excel_in_science(Malayah) → (become_researcher(Malayah) ⊕ pursue_microbiology(Malayah))",
        "conclusion": "pursue_microbiology(Malayah)"
      },
      {
        "facts": [
          "curious_mind(Malayah)"
        ],
        "rules": "curious_mind(Malayah) → (discover_new_species(Malayah) ∧ excel_academically(Malayah))",
        "conclusion": "discover_new_species(Malayah)"
      },
      {
        "facts": [
          "study_protista(Malayah)",
          "pursue_microbiology(Malayah)",
          "discover_new_species(Malayah)"
        ],
        "rules": null,
        "conclusion": "study_protista(Malayah) → (pursue_microbiology(Malayah) ⊕ discover_new_species(Malayah))"
      }
    ],
    "conclusion": "If Malayah studies protista, then she will either pursue a career in microbiology or discover new species, but not both.",
    "conclusion_fol": "study_protista(Malayah) → (pursue_microbiology(Malayah) ⊕ discover_new_species(Malayah))",
    "answer": "False",
    "context": [
      "Malahay takes AP classes.",
      "Malayah does not participate in science fairs.",
      "If Malayah takes AP classes, then she either participates in science fairs or joins the science club, but not both.",
      "Malahay loves learning.",
      "If Malayah loves learning, then she will excel in science.",
      "Malayah either joins the science club or becomes a researcher, but not both.",
      "If Malayah excels in science, then she will either become a researcher or pursue a career in microbiology, but not both.",
      "Malayah has a curious mind.",
      "If Malayah has a curious mind, then she will discover new species and excel academically.",
      "Malayah studies protista."
    ],
    "context_fol": [
      "takes_ap_classes(Malayah)",
      "¬participate_in_fairs(Malayah)",
      "takes_ap_classes(Malayah) → (participate_in_fairs(Malayah) ⊕ join_science_club(Malayah))",
      "love_learning(Malayah)",
      "love_learning(Malayah) → excel_in_science(Malayah)",
      "join_science_club(Malayah) ⊕ become_researcher(Malayah)",
      "excel_in_science(Malayah) → (become_researcher(Malayah) ⊕ pursue_microbiology(Malayah))",
      "curious_mind(Malayah)",
      "curious_mind(Malayah) → (discover_new_species(Malayah) ∧ excel_academically(Malayah))",
      "study_protista(Malayah)"
    ],
    "background_story": "Malayah was a curious and ambitious high school student with a passion for biology. In her advanced placement class, she became fascinated with the diverse world of protista, a group of eukaryotic microorganisms that don't fit into any other category. She spent countless hours studying the unique characteristics of amoebas, paramecia, and euglena, marveling at their adaptability and resilience. For her science fair project, Malayah designed an experiment to observe the behavior of protists in different environments, earning her first place and recognition from the local scientific community. Her fascination with protista sparked a desire to pursue a career in microbiology, with the goal of discovering new species and understanding their role in the ecosystem.",
    "name": "Malayah",
    "keyword": "protista",
    "subject_category": "student"
  },
  {
    "facts": [
      "Cowgirl produces mucilage.",
      "Cowgirl does not absorb nutrients.",
      "Cowgirl has blooms."
    ],
    "facts_fol": [
      "produce_mucilage(Cowgirl)",
      "¬absorb_nutrients(Cowgirl)",
      "has_blooms(Cowgirl)"
    ],
    "rules": [
      "If Cowgirl can thrive in the desert, then she can either attract pollinators or deter predators, but not both.",
      "If Cowgirl has deep roots, then she can thrive in the desert and store water.",
      "If Cowgirl produces mucilage, then she can either provide shelter or deter predators, but not both.",
      "Cowgirl either absorbs nutrients or has deep roots.",
      "If Cowgirl has blooms, then she provides shelter and gives sustenance."
    ],
    "rules_fol": [
      "thrive_in_desert(Cowgirl) → (attract_pollinators(Cowgirl) ⊕ deter_predators(Cowgirl))",
      "has_deep_roots(Cowgirl) → (thrive_in_desert(Cowgirl) ∧ store_water(Cowgirl))",
      "produce_mucilage(Cowgirl) → (provide_shelter(Cowgirl) ⊕ deter_predators(Cowgirl))",
      "absorb_nutrients(Cowgirl) ∨ has_deep_roots(Cowgirl)",
      "has_blooms(Cowgirl) → (provide_shelter(Cowgirl) ∧ give_sustenance(Cowgirl))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Any plant that secretes a substance either thrives in the desert or retains moisture.",
      "Any plant that retains moisture either deters predators or secretes a substance.",
      "Cowgirl either grows slowly or has deep roots.",
      "If Cowgirl either grows thorns or spreads her canopy (but not both), then she provides shelter."
    ],
    "distracting_rules_fol": [
      "∀x (secrete_substance(x) → (thrive_in_desert(x) ∨ retain_moisture(x)))",
      "∀x (retain_moisture(x) → (deter_predators(x) ∨ secrete_substance(x)))",
      "grow_slowly(Cowgirl) ∨ has_deep_roots(Cowgirl)",
      "(grow_thorns(Cowgirl) ⊕ spread_canopy(Cowgirl)) → provide_shelter(Cowgirl)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Cowgirl has blooms."
        ],
        "rules": "If Cowgirl has blooms, then she provides shelter and gives sustenance.",
        "conclusion": "Cowgirl provides shelter."
      },
      {
        "facts": [
          "Cowgirl does not absorb nutrients."
        ],
        "rules": "Cowgirl either absorbs nutrients or has deep roots.",
        "conclusion": "Cowgirl has deep roots."
      },
      {
        "facts": [
          "Cowgirl produces mucilage.",
          "Cowgirl provides shelter."
        ],
        "rules": "If Cowgirl produces mucilage, then she can either provide shelter or deter predators, but not both.",
        "conclusion": "Cowgirl does not deter predators."
      },
      {
        "facts": [
          "Cowgirl has deep roots."
        ],
        "rules": "If Cowgirl has deep roots, then she can thrive in the desert and store water.",
        "conclusion": "Cowgirl can thrive in the desert."
      },
      {
        "facts": [
          "Cowgirl can thrive in the desert.",
          "Cowgirl does not deter predators."
        ],
        "rules": "If Cowgirl can thrive in the desert, then she can either attract pollinators or deter predators, but not both.",
        "conclusion": "Cowgirl does not attract pollinators."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "has_blooms(Cowgirl)"
        ],
        "rules": "has_blooms(Cowgirl) → (provide_shelter(Cowgirl) ∧ give_sustenance(Cowgirl))",
        "conclusion": "provide_shelter(Cowgirl)"
      },
      {
        "facts": [
          "¬absorb_nutrients(Cowgirl)"
        ],
        "rules": "absorb_nutrients(Cowgirl) ∨ has_deep_roots(Cowgirl)",
        "conclusion": "has_deep_roots(Cowgirl)"
      },
      {
        "facts": [
          "produce_mucilage(Cowgirl)",
          "provide_shelter(Cowgirl)"
        ],
        "rules": "produce_mucilage(Cowgirl) → (provide_shelter(Cowgirl) ⊕ deter_predators(Cowgirl))",
        "conclusion": "¬deter_predators(Cowgirl)"
      },
      {
        "facts": [
          "has_deep_roots(Cowgirl)"
        ],
        "rules": "has_deep_roots(Cowgirl) → (thrive_in_desert(Cowgirl) ∧ store_water(Cowgirl))",
        "conclusion": "thrive_in_desert(Cowgirl)"
      },
      {
        "facts": [
          "thrive_in_desert(Cowgirl)",
          "¬deter_predators(Cowgirl)"
        ],
        "rules": "thrive_in_desert(Cowgirl) → (attract_pollinators(Cowgirl) ⊕ deter_predators(Cowgirl))",
        "conclusion": "¬attract_pollinators(Cowgirl)"
      }
    ],
    "conclusion": "Cowgirl does not attract pollinators.",
    "conclusion_fol": "¬attract_pollinators(Cowgirl)",
    "answer": "False",
    "context": [
      "Cowgirl has blooms.",
      "If Cowgirl has blooms, then she provides shelter and gives sustenance.",
      "Cowgirl does not absorb nutrients.",
      "Cowgirl either absorbs nutrients or has deep roots.",
      "Cowgirl produces mucilage.",
      "If Cowgirl produces mucilage, then she can either provide shelter or deter predators, but not both.",
      "If Cowgirl has deep roots, then she can thrive in the desert and store water.",
      "If Cowgirl can thrive in the desert, then she can either attract pollinators or deter predators, but not both."
    ],
    "context_fol": [
      "has_blooms(Cowgirl)",
      "has_blooms(Cowgirl) → (provide_shelter(Cowgirl) ∧ give_sustenance(Cowgirl))",
      "¬absorb_nutrients(Cowgirl)",
      "absorb_nutrients(Cowgirl) ∨ has_deep_roots(Cowgirl)",
      "produce_mucilage(Cowgirl)",
      "produce_mucilage(Cowgirl) → (provide_shelter(Cowgirl) ⊕ deter_predators(Cowgirl))",
      "has_deep_roots(Cowgirl) → (thrive_in_desert(Cowgirl) ∧ store_water(Cowgirl))",
      "thrive_in_desert(Cowgirl) → (attract_pollinators(Cowgirl) ⊕ deter_predators(Cowgirl))"
    ],
    "background_story": "Cowgirl was a rare, muciferous plant species discovered in the arid deserts of the American West. This unusual cactus produced a protective mucilaginous coating that helped retain moisture, allowing it to thrive in the harshest conditions. As the sun beat down, Cowgirl's stems would secrete a thick, gooey substance, which not only shielded her from dehydration but also deterred predators. At night, her delicate white blooms would unfurl, releasing a sweet fragrance that attracted pollinators from afar. Despite her tough exterior, Cowgirl had a soft spot for the local wildlife, providing sustenance and shelter to those in need. Her remarkable adaptability and unique muciferous properties made her a beloved and resilient symbol of the desert landscape.",
    "name": "Cowgirl",
    "keyword": "muciferous",
    "subject_category": "plant"
  },
  {
    "facts": [
      "Aylin does not evoke emotions.",
      "Aylin writes lyrics.",
      "Aylin does not play guitar."
    ],
    "facts_fol": [
      "¬evoke_emotions(Aylin)",
      "writes_lyrics(Aylin)",
      "¬plays_guitar(Aylin)"
    ],
    "rules": [
      "For all musicians, if a musician is inspirational, then they either tell stories or evoke emotions (or both).",
      "If Aylin writes lyrics and composes melodies, then she is inspirational.",
      "Aylin plays guitar or composes melodies."
    ],
    "rules_fol": [
      "∀x (inspirational(x) → (tell_stories(x) ∨ evoke_emotions(x)))",
      "(writes_lyrics(Aylin) ∧ composes_melodies(Aylin)) → inspirational(Aylin)",
      "plays_guitar(Aylin) ∨ composes_melodies(Aylin)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Aylin is creative, then she is inspirational and able to connect with her audience.",
      "If Aylin is creative, then she has a soulful voice and composes melodies."
    ],
    "distracting_rules_fol": [
      "creative(Aylin) → (inspirational(Aylin) ∧ connect_audience(Aylin))",
      "creative(Aylin) → (soulful_voice(Aylin) ∧ composes_melodies(Aylin))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Aylin does not play guitar."
        ],
        "rules": "Aylin plays guitar or composes melodies.",
        "conclusion": "Aylin composes melodies."
      },
      {
        "facts": [
          "Aylin writes lyrics.",
          "Aylin composes melodies."
        ],
        "rules": "If Aylin writes lyrics and composes melodies, then she is inspirational.",
        "conclusion": "Aylin is an inspirational musician."
      },
      {
        "facts": [
          "Aylin is an inspirational musician.",
          "Aylin does not evoke emotions."
        ],
        "rules": "For all musicians, if a musician is inspirational, then they either tell stories or evoke emotions (or both).",
        "conclusion": "Aylin tells stories."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬plays_guitar(Aylin)"
        ],
        "rules": "plays_guitar(Aylin) ∨ composes_melodies(Aylin)",
        "conclusion": "composes_melodies(Aylin)"
      },
      {
        "facts": [
          "writes_lyrics(Aylin)",
          "composes_melodies(Aylin)"
        ],
        "rules": "(writes_lyrics(Aylin) ∧ composes_melodies(Aylin)) → inspirational(Aylin)",
        "conclusion": "inspirational(Aylin)"
      },
      {
        "facts": [
          "inspirational(Aylin)",
          "¬evoke_emotions(Aylin)"
        ],
        "rules": "∀x (inspirational(x) → (tell_stories(x) ∨ evoke_emotions(x)))",
        "conclusion": "tell_stories(Aylin)"
      }
    ],
    "conclusion": "Aylin tells stories.",
    "conclusion_fol": "tell_stories(Aylin)",
    "answer": "True",
    "context": [
      "Aylin does not play guitar.",
      "Aylin plays guitar or composes melodies.",
      "Aylin writes lyrics.",
      "If Aylin writes lyrics and composes melodies, then she is inspirational.",
      "Aylin does not evoke emotions.",
      "For all musicians, if a musician is inspirational, then they either tell stories or evoke emotions (or both)."
    ],
    "context_fol": [
      "¬plays_guitar(Aylin)",
      "plays_guitar(Aylin) ∨ composes_melodies(Aylin)",
      "writes_lyrics(Aylin)",
      "(writes_lyrics(Aylin) ∧ composes_melodies(Aylin)) → inspirational(Aylin)",
      "¬evoke_emotions(Aylin)",
      "∀x (inspirational(x) → (tell_stories(x) ∨ evoke_emotions(x)))"
    ],
    "background_story": "Aylin was a free-spirited musician who found inspiration in the works of William Wyler, a renowned film director. She believed that music, like Wyler's films, could evoke powerful emotions and tell profound stories. Aylin's songs often reflected themes of social justice and personal freedom, echoing the spirit of Wyler's classics like 'Ben-Hur' and 'Mrs. Miniver'. With her soulful voice and poetic lyrics, Aylin's music quickly gained a loyal following. She saw herself as a storyteller, using her melodies to convey messages of hope and resilience, much like Wyler used the cinematic medium to explore the human condition. Aylin's debut album, 'Wyler's Muse', was a tribute to the director's legacy, weaving a sonic tapestry that was both deeply personal and universally relatable.",
    "name": "Aylin",
    "keyword": "wyler",
    "subject_category": "musician"
  },
  {
    "facts": [
      "Archie is not brave.",
      "Archie is skilled.",
      "Archie is not decorated.",
      "Archie does not lead by example.",
      "Archie excels as a pilot."
    ],
    "facts_fol": [
      "¬brave(Archie)",
      "skilled(Archie)",
      "¬decorated(Archie)",
      "¬leads_by_example(Archie)",
      "excells(Archie)"
    ],
    "rules": [
      "If Archie is famous, then he is either legendary or influential, but not both.",
      "Every distinguished historical figure is either influential or decorated (or both).",
      "Archie either leads by example or is famous.",
      "All historical figures who excel in their field are distinguished."
    ],
    "rules_fol": [
      "famous(Archie) → (legendary(Archie) ⊕ influential(Archie))",
      "∀x (distinguished(x) → (influential(x) ∨ decorated(x)))",
      "leads_by_example(Archie) ∨ famous(Archie)",
      "∀x (excells(x) → distinguished(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Archie takes risks or achieves victories, then he is legendary.",
      "All historical figures who inspire others are influential.",
      "If Archie has heroic feats and inspires others, then he is famous.",
      "If Archie is renowned, then he is either heroic or distinguished, but not both."
    ],
    "distracting_rules_fol": [
      "(takes_risks(Archie) ∨ achieves_victories(Archie)) → legendary(Archie)",
      "∀x (inspires(x) → influential(x))",
      "(has_heroic_feats(Archie) ∧ inspires_others(Archie)) → famous(Archie)",
      "renowned(Archie) → (heroic(Archie) ⊕ distinguished(Archie))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Archie excels as a pilot."
        ],
        "rules": "All historical figures who excel in their field are distinguished.",
        "conclusion": "Archie is distinguished."
      },
      {
        "facts": [
          "Archie does not lead by example."
        ],
        "rules": "Archie either leads by example or is famous.",
        "conclusion": "Archie is famous."
      },
      {
        "facts": [
          "Archie is distinguished.",
          "Archie is not decorated."
        ],
        "rules": "Every distinguished historical figure is either influential or decorated (or both).",
        "conclusion": "Archie is influential."
      },
      {
        "facts": [
          "Archie is famous.",
          "Archie is influential."
        ],
        "rules": "If Archie is famous, then he is either legendary or influential, but not both.",
        "conclusion": "Archie is not legendary."
      },
      {
        "facts": [
          "Archie is not brave.",
          "Archie is skilled.",
          "Archie is not legendary."
        ],
        "rules": null,
        "conclusion": "If Archie is either brave or skilled (but not both), then he is legendary."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "excells(Archie)"
        ],
        "rules": "∀x (excells(x) → distinguished(x))",
        "conclusion": "distinguished(Archie)"
      },
      {
        "facts": [
          "¬leads_by_example(Archie)"
        ],
        "rules": "leads_by_example(Archie) ∨ famous(Archie)",
        "conclusion": "famous(Archie)"
      },
      {
        "facts": [
          "distinguished(Archie)",
          "¬decorated(Archie)"
        ],
        "rules": "∀x (distinguished(x) → (influential(x) ∨ decorated(x)))",
        "conclusion": "influential(Archie)"
      },
      {
        "facts": [
          "famous(Archie)",
          "influential(Archie)"
        ],
        "rules": "famous(Archie) → (legendary(Archie) ⊕ influential(Archie))",
        "conclusion": "¬legendary(Archie)"
      },
      {
        "facts": [
          "¬brave(Archie)",
          "skilled(Archie)",
          "¬legendary(Archie)"
        ],
        "rules": null,
        "conclusion": "(brave(Archie) ⊕ skilled(Archie)) → legendary(Archie)"
      }
    ],
    "conclusion": "If Archie is either brave or skilled (but not both), then he is legendary.",
    "conclusion_fol": "(brave(Archie) ⊕ skilled(Archie)) → legendary(Archie)",
    "answer": "False",
    "context": [
      "Archie excels as a pilot.",
      "All historical figures who excel in their field are distinguished.",
      "Archie does not lead by example.",
      "Archie either leads by example or is famous.",
      "Archie is not decorated.",
      "Every distinguished historical figure is either influential or decorated (or both).",
      "If Archie is famous, then he is either legendary or influential, but not both.",
      "Archie is not brave.",
      "Archie is skilled."
    ],
    "context_fol": [
      "excells(Archie)",
      "∀x (excells(x) → distinguished(x))",
      "¬leads_by_example(Archie)",
      "leads_by_example(Archie) ∨ famous(Archie)",
      "¬decorated(Archie)",
      "∀x (distinguished(x) → (influential(x) ∨ decorated(x)))",
      "famous(Archie) → (legendary(Archie) ⊕ influential(Archie))",
      "¬brave(Archie)",
      "skilled(Archie)"
    ],
    "background_story": "Archie was a skilled pilot in World War I, known for his bravery and exceptional flying skills. He earned the nickname 'dogfighter' for his ability to engage and outmaneuver enemy aircraft in close combat. Archie's career as a fighter pilot began when he joined the Royal Flying Corps, where he quickly distinguished himself with his daring tactics and precision flying. His most notable exploit was during the Battle of the Somme, where he single-handedly took down three enemy planes in a single mission. Archie's heroics made him a celebrated figure, and his name became synonymous with aerial combat prowess. Despite the dangers, Archie continued to fly and fight, earning numerous accolades and inspiring a generation of pilots with his fearless spirit and unwavering dedication to duty.",
    "name": "Archie",
    "keyword": "dogfighter",
    "subject_category": "historical figure"
  },
  {
    "facts": [
      "Stinky loves plants.",
      "Stinky explores the beach.",
      "Stinky cannot find food."
    ],
    "facts_fol": [
      "love_plants(Stinky)",
      "explore_beach(Stinky)",
      "¬find_food(Stinky)"
    ],
    "rules": [
      "For all tortoises, if a tortoise lives on an island and knows the terrain, then it can navigate easily.",
      "Every tortoise either eats grass or lives on the island, but not both is not a requirement.",
      "If Stinky loves plants, then he will eat grass.",
      "If Stinky explores the beach, then he either knows the terrain or can find food."
    ],
    "rules_fol": [
      "∀x ((live_on_island(x) ∧ know_the_terrain(x)) → navigate_easily(x))",
      "∀x (eat_grass(x) ⊕ live_on_island(x))",
      "love_plants(Stinky) → eat_grass(Stinky)",
      "explore_beach(Stinky) → (know_the_terrain(Stinky) ∨ find_food(Stinky))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Stinky has a shell or likes the sun, then he lives on the island.",
      "Every tortoise that basks in the sun either takes strolls or eats grass.",
      "If Stinky either climbs rocks or crosses sands (but not both), then he knows the terrain."
    ],
    "distracting_rules_fol": [
      "(have_shell(Stinky) ∨ like_sun(Stinky)) → live_on_island(Stinky)",
      "∀x (bask_in_sun(x) → (take_strolls(x) ∨ eat_grass(x)))",
      "(climb_rocks(Stinky) ⊕ cross_sands(Stinky)) → know_the_terrain(Stinky)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Stinky explores the beach.",
          "Stinky cannot find food."
        ],
        "rules": "If Stinky explores the beach, then he either knows the terrain or can find food.",
        "conclusion": "Stinky knows the terrain."
      },
      {
        "facts": [
          "Stinky loves plants."
        ],
        "rules": "If Stinky loves plants, then he will eat grass.",
        "conclusion": "Stinky eats grass."
      },
      {
        "facts": [
          "Stinky eats grass."
        ],
        "rules": "Every tortoise either eats grass or lives on the island, but not both is not a requirement.",
        "conclusion": "Stinky does not live on the island."
      },
      {
        "facts": [
          "Stinky does not live on the island.",
          "Stinky knows the terrain."
        ],
        "rules": "For all tortoises, if a tortoise lives on an island and knows the terrain, then it can navigate easily.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "explore_beach(Stinky)",
          "¬find_food(Stinky)"
        ],
        "rules": "explore_beach(Stinky) → (know_the_terrain(Stinky) ∨ find_food(Stinky))",
        "conclusion": "know_the_terrain(Stinky)"
      },
      {
        "facts": [
          "love_plants(Stinky)"
        ],
        "rules": "love_plants(Stinky) → eat_grass(Stinky)",
        "conclusion": "eat_grass(Stinky)"
      },
      {
        "facts": [
          "eat_grass(Stinky)"
        ],
        "rules": "∀x (eat_grass(x) ⊕ live_on_island(x))",
        "conclusion": "¬live_on_island(Stinky)"
      },
      {
        "facts": [
          "¬live_on_island(Stinky)",
          "know_the_terrain(Stinky)"
        ],
        "rules": "∀x ((live_on_island(x) ∧ know_the_terrain(x)) → navigate_easily(x))",
        "conclusion": null
      }
    ],
    "conclusion": "Stinky cannot navigate easily.",
    "conclusion_fol": "¬navigate_easily(Stinky)",
    "answer": "Uncertain",
    "context": [
      "Stinky explores the beach.",
      "Stinky cannot find food.",
      "If Stinky explores the beach, then he either knows the terrain or can find food.",
      "Stinky loves plants.",
      "If Stinky loves plants, then he will eat grass.",
      "Every tortoise either eats grass or lives on the island, but not both is not a requirement.",
      "For all tortoises, if a tortoise lives on an island and knows the terrain, then it can navigate easily."
    ],
    "context_fol": [
      "explore_beach(Stinky)",
      "¬find_food(Stinky)",
      "explore_beach(Stinky) → (know_the_terrain(Stinky) ∨ find_food(Stinky))",
      "love_plants(Stinky)",
      "love_plants(Stinky) → eat_grass(Stinky)",
      "∀x (eat_grass(x) ⊕ live_on_island(x))",
      "∀x ((live_on_island(x) ∧ know_the_terrain(x)) → navigate_easily(x))"
    ],
    "background_story": "Stinky, a gentle Bermudan tortoise, spent his days basking in the warm sun on the pink sands of Horseshoe Bay. Born and raised on the island, he loved nothing more than munching on juicy Bermuda grass and taking leisurely strolls along the beach. Stinky was a local celebrity, with tourists flocking to catch a glimpse of his shell, adorned with vibrant Bermudan flowers. Despite his laid-back demeanor, Stinky had a secret: he was a skilled navigator, able to find his way back to his favorite spots even after a strong storm. His Bermudan home was a paradise, and Stinky felt grateful to call it his own, living life at his own slow and peaceful pace.",
    "name": "Stinky",
    "keyword": "bermudan",
    "subject_category": "tortoise"
  },
  {
    "facts": [
      "Alina is not classically trained.",
      "Alina has a good ear.",
      "Alina does not love jazz."
    ],
    "facts_fol": [
      "¬classically_trained(Alina)",
      "has_good_ear(Alina)",
      "¬loves_jazz(Alina)"
    ],
    "rules": [
      "If Alina is classically trained or passionate about music (or both), then she is critically acclaimed.",
      "Alina either plays the vibraphone or is passionate about music, but not necessarily both.",
      "If Alina has a good ear or loves jazz, then she can play the vibraphone."
    ],
    "rules_fol": [
      "(classically_trained(Alina) ∨ passionate_about_music(Alina)) → critically_acclaimed(Alina)",
      "plays_vibraphone(Alina) ⊕ passionate_about_music(Alina)",
      "(has_good_ear(Alina) ∨ loves_jazz(Alina)) → plays_vibraphone(Alina)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Every musician who creates emotion is passionate about music.",
      "If Alina has a good tone or practices daily, then she can play the vibraphone."
    ],
    "distracting_rules_fol": [
      "∀x (creates_emotion(x) → passionate_about_music(x))",
      "(has_good_tone(Alina) ∨ practices_daily(Alina)) → plays_vibraphone(Alina)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Alina has a good ear.",
          "Alina does not love jazz."
        ],
        "rules": "If Alina has a good ear or loves jazz, then she can play the vibraphone.",
        "conclusion": "Alina plays the vibraphone."
      },
      {
        "facts": [
          "Alina plays the vibraphone."
        ],
        "rules": "Alina either plays the vibraphone or is passionate about music, but not necessarily both.",
        "conclusion": "Alina is not passionate about music."
      },
      {
        "facts": [
          "Alina is not classically trained.",
          "Alina is not passionate about music."
        ],
        "rules": "If Alina is classically trained or passionate about music (or both), then she is critically acclaimed.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "has_good_ear(Alina)",
          "¬loves_jazz(Alina)"
        ],
        "rules": "(has_good_ear(Alina) ∨ loves_jazz(Alina)) → plays_vibraphone(Alina)",
        "conclusion": "plays_vibraphone(Alina)"
      },
      {
        "facts": [
          "plays_vibraphone(Alina)"
        ],
        "rules": "plays_vibraphone(Alina) ⊕ passionate_about_music(Alina)",
        "conclusion": "¬passionate_about_music(Alina)"
      },
      {
        "facts": [
          "¬classically_trained(Alina)",
          "¬passionate_about_music(Alina)"
        ],
        "rules": "(classically_trained(Alina) ∨ passionate_about_music(Alina)) → critically_acclaimed(Alina)",
        "conclusion": null
      }
    ],
    "conclusion": "Alina is not critically acclaimed.",
    "conclusion_fol": "¬critically_acclaimed(Alina)",
    "answer": "Uncertain",
    "context": [
      "Alina has a good ear.",
      "Alina does not love jazz.",
      "If Alina has a good ear or loves jazz, then she can play the vibraphone.",
      "Alina either plays the vibraphone or is passionate about music, but not necessarily both.",
      "Alina is not classically trained.",
      "If Alina is classically trained or passionate about music (or both), then she is critically acclaimed."
    ],
    "context_fol": [
      "has_good_ear(Alina)",
      "¬loves_jazz(Alina)",
      "(has_good_ear(Alina) ∨ loves_jazz(Alina)) → plays_vibraphone(Alina)",
      "plays_vibraphone(Alina) ⊕ passionate_about_music(Alina)",
      "¬classically_trained(Alina)",
      "(classically_trained(Alina) ∨ passionate_about_music(Alina)) → critically_acclaimed(Alina)"
    ],
    "background_story": "Alina was a talented vibist with a unique sound that captivated audiences worldwide. Born into a family of musicians, she was introduced to the vibraphone at a young age and quickly fell in love with its ethereal tones. As she honed her craft, Alina developed a distinctive style that blended jazz, classical, and world music elements. Her performances were mesmerizing, with the vibraphone's resonant notes seeming to transport listeners to another realm. Alina's music was not just a technical showcase, but an emotional journey that connected her with her audience on a deep level. She released several critically acclaimed albums and collaborated with renowned musicians, solidifying her reputation as one of the most innovative and expressive vibists of her generation.",
    "name": "Alina",
    "keyword": "vibist",
    "subject_category": "musician"
  },
  {
    "facts": [
      "Poppy is curious.",
      "Poppy does not embrace diversity.",
      "Poppy finds common ground with others."
    ],
    "facts_fol": [
      "is_curious(Poppy)",
      "¬embrace_diversity(Poppy)",
      "find_common_ground(Poppy)"
    ],
    "rules": [
      "For all humans, if a person is open-minded, then they can adapt to change and build connections with others.",
      "Poppy is either curious or open-minded, but not necessarily both, as her ability to navigate different worlds may stem from one or the other trait.",
      "Everyone who embraces diversity can either find common ground with others or adapt to change."
    ],
    "rules_fol": [
      "∀x (open_minded(x) → (adapt_to_change(x) ∧ build_connections(x)))",
      "is_curious(Poppy) ⊕ open_minded(Poppy)",
      "∀x (embrace_diversity(x) → (find_common_ground(x) ∨ adapt_to_change(x)))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If someone seeks knowledge and values empathy, then they are open-minded.",
      "If Poppy has empathy, then she can either adapt to change or foster creativity, but not both."
    ],
    "distracting_rules_fol": [
      "∀x ((seeks_knowledge(x) ∧ values_empathy(x)) → open_minded(x))",
      "has_empathy(Poppy) → (adapt_to_change(Poppy) ⊕ fosters_creativity(Poppy))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Poppy does not embrace diversity.",
          "Poppy finds common ground with others."
        ],
        "rules": "Everyone who embraces diversity can either find common ground with others or adapt to change.",
        "conclusion": null
      },
      {
        "facts": [
          "Poppy is curious."
        ],
        "rules": "Poppy is either curious or open-minded, but not necessarily both, as her ability to navigate different worlds may stem from one or the other trait.",
        "conclusion": "Poppy is not open-minded."
      },
      {
        "facts": [
          "Poppy is not open-minded."
        ],
        "rules": "For all humans, if a person is open-minded, then they can adapt to change and build connections with others.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬embrace_diversity(Poppy)",
          "find_common_ground(Poppy)"
        ],
        "rules": "∀x (embrace_diversity(x) → (find_common_ground(x) ∨ adapt_to_change(x)))",
        "conclusion": null
      },
      {
        "facts": [
          "is_curious(Poppy)"
        ],
        "rules": "is_curious(Poppy) ⊕ open_minded(Poppy)",
        "conclusion": "¬open_minded(Poppy)"
      },
      {
        "facts": [
          "¬open_minded(Poppy)"
        ],
        "rules": "∀x (open_minded(x) → (adapt_to_change(x) ∧ build_connections(x)))",
        "conclusion": null
      }
    ],
    "conclusion": "Poppy does not build connections with others.",
    "conclusion_fol": "¬build_connections(Poppy)",
    "answer": "Uncertain",
    "context": [
      "Poppy does not embrace diversity.",
      "Poppy finds common ground with others.",
      "Everyone who embraces diversity can either find common ground with others or adapt to change.",
      "Poppy is curious.",
      "Poppy is either curious or open-minded, but not necessarily both, as her ability to navigate different worlds may stem from one or the other trait.",
      "For all humans, if a person is open-minded, then they can adapt to change and build connections with others."
    ],
    "context_fol": [
      "¬embrace_diversity(Poppy)",
      "find_common_ground(Poppy)",
      "∀x (embrace_diversity(x) → (find_common_ground(x) ∨ adapt_to_change(x)))",
      "is_curious(Poppy)",
      "is_curious(Poppy) ⊕ open_minded(Poppy)",
      "∀x (open_minded(x) → (adapt_to_change(x) ∧ build_connections(x)))"
    ],
    "background_story": "Poppy was born on the cusp of two generations, her birthdate falling on the threshold between two astrological signs. This unique positioning seemed to define her life, as she often found herself at the crossroads of different worlds. Growing up, Poppy struggled to identify with a single group or ideology, instead navigating the spaces between different social circles and interests. However, this liminal state also gave her a unique perspective, allowing her to bridge gaps and connect with people from diverse backgrounds. As she entered adulthood, Poppy discovered that her cusp nature was not a curse, but a gift, enabling her to adapt, innovate, and thrive in an ever-changing world. She became a sought-after mediator and problem-solver, celebrated for her ability to find common ground and forge new paths.",
    "name": "Poppy",
    "keyword": "cusp",
    "subject_category": "human"
  },
  {
    "facts": [
      "Diana is a wise being.",
      "Diana is a lunar being.",
      "Diana is an ancient soul.",
      "Diana is a cosmic being.",
      "Diana is not divine."
    ],
    "facts_fol": [
      "wise_being(Diana)",
      "lunar(Diana)",
      "ancient_soul(Diana)",
      "cosmic(Diana)",
      "¬divine(Diana)"
    ],
    "rules": [
      "If Diana is powerful, then she is mysterious and inspiring.",
      "All ethereal beings are mysterious.",
      "If Diana is a lunar being, then she is either ethereal or magical, but not both.",
      "If Diana is a wise being and an ancient soul, then she is powerful.",
      "All mythical beings that are cosmic are either magical or divine."
    ],
    "rules_fol": [
      "powerful(Diana) → (mysterious(Diana) ∧ inspiring(Diana))",
      "∀x (ethereal(x) → mysterious(x))",
      "lunar(Diana) → (ethereal(Diana) ⊕ magical(Diana))",
      "(wise_being(Diana) ∧ ancient_soul(Diana)) → powerful(Diana)",
      "∀x (cosmic(x) → (magical(x) ∨ divine(x)))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Diana seeks knowledge, then she either guides others or is mysterious (or both).",
      "If Diana either has a glow or sees visions (but not both), then she is ethereal.",
      "If Diana seeks knowledge, then she is either powerful or guides others.",
      "All timeless mythical beings are enchanting and magical."
    ],
    "distracting_rules_fol": [
      "seek_knowledge(Diana) → (guides_others(Diana) ∨ mysterious(Diana))",
      "(has_glow(Diana) ⊕ sees_visions(Diana)) → ethereal(Diana)",
      "seek_knowledge(Diana) → (powerful(Diana) ∨ guiding_others(Diana))",
      "∀x (timeless(x) → (enchanting(x) ∧ magical(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Diana is a cosmic being.",
          "Diana is not divine."
        ],
        "rules": "All mythical beings that are cosmic are either magical or divine.",
        "conclusion": "Diana is magical."
      },
      {
        "facts": [
          "Diana is a wise being.",
          "Diana is an ancient soul."
        ],
        "rules": "If Diana is a wise being and an ancient soul, then she is powerful.",
        "conclusion": "Diana is powerful."
      },
      {
        "facts": [
          "Diana is a lunar being.",
          "Diana is magical."
        ],
        "rules": "If Diana is a lunar being, then she is either ethereal or magical, but not both.",
        "conclusion": "Diana is not ethereal."
      },
      {
        "facts": [
          "Diana is not ethereal."
        ],
        "rules": "All ethereal beings are mysterious.",
        "conclusion": null
      },
      {
        "facts": [
          "Diana is powerful."
        ],
        "rules": "If Diana is powerful, then she is mysterious and inspiring.",
        "conclusion": "Diana is inspiring."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "cosmic(Diana)",
          "¬divine(Diana)"
        ],
        "rules": "∀x (cosmic(x) → (magical(x) ∨ divine(x)))",
        "conclusion": "magical(Diana)"
      },
      {
        "facts": [
          "wise_being(Diana)",
          "ancient_soul(Diana)"
        ],
        "rules": "(wise_being(Diana) ∧ ancient_soul(Diana)) → powerful(Diana)",
        "conclusion": "powerful(Diana)"
      },
      {
        "facts": [
          "lunar(Diana)",
          "magical(Diana)"
        ],
        "rules": "lunar(Diana) → (ethereal(Diana) ⊕ magical(Diana))",
        "conclusion": "¬ethereal(Diana)"
      },
      {
        "facts": [
          "¬ethereal(Diana)"
        ],
        "rules": "∀x (ethereal(x) → mysterious(x))",
        "conclusion": null
      },
      {
        "facts": [
          "powerful(Diana)"
        ],
        "rules": "powerful(Diana) → (mysterious(Diana) ∧ inspiring(Diana))",
        "conclusion": "inspiring(Diana)"
      }
    ],
    "conclusion": "Diana is inspiring.",
    "conclusion_fol": "inspiring(Diana)",
    "answer": "True",
    "context": [
      "Diana is a cosmic being.",
      "Diana is not divine.",
      "All mythical beings that are cosmic are either magical or divine.",
      "Diana is a wise being.",
      "Diana is an ancient soul.",
      "If Diana is a wise being and an ancient soul, then she is powerful.",
      "Diana is a lunar being.",
      "If Diana is a lunar being, then she is either ethereal or magical, but not both.",
      "All ethereal beings are mysterious.",
      "If Diana is powerful, then she is mysterious and inspiring."
    ],
    "context_fol": [
      "cosmic(Diana)",
      "¬divine(Diana)",
      "∀x (cosmic(x) → (magical(x) ∨ divine(x)))",
      "wise_being(Diana)",
      "ancient_soul(Diana)",
      "(wise_being(Diana) ∧ ancient_soul(Diana)) → powerful(Diana)",
      "lunar(Diana)",
      "lunar(Diana) → (ethereal(Diana) ⊕ magical(Diana))",
      "∀x (ethereal(x) → mysterious(x))",
      "powerful(Diana) → (mysterious(Diana) ∧ inspiring(Diana))"
    ],
    "background_story": "Diana, the mystical moon goddess, was often asked whence she came, for her origins were shrouded in mystery. Legend had it that she was born from the dreams of the celestial deities, her essence woven from the silken threads of stardust and lunar beams. As she wandered the cosmos, Diana's path was guided by an insatiable curiosity about her own beginnings. She traversed realms, seeking answers to the whispers of her heart, whence did her power come, and what was her true purpose? Her journey led her to ancient forests, where wise trees shared tales of old, and to forgotten mountains, where echoes of the past revealed fragments of her forgotten history. And though the truth of her origins remained elusive, Diana's quest for knowledge became the stuff of legend, inspiring generations to seek their own whence, and to follow the call of their own mysterious destinies.",
    "name": "Diana",
    "keyword": "whence",
    "subject_category": "mythical"
  },
  {
    "facts": [
      "Juliana leaves a lasting legacy.",
      "Juliana is an explorer.",
      "Juliana has a curious mind.",
      "Juliana loves history."
    ],
    "facts_fol": [
      "leave_lasting_legacy(Juliana)",
      "is_explorer(Juliana)",
      "curious_mind(Juliana)",
      "love_history(Juliana)"
    ],
    "rules": [
      "If Juliana is a dedicated researcher, then she will make new discoveries and leave a lasting legacy.",
      "If Juliana is a scholar, then she is either an explorer or a dedicated researcher, but not both.",
      "If Juliana has a curious mind, then she is a scholar and loves history."
    ],
    "rules_fol": [
      "dedicated_researcher(Juliana) → (make_new_discoveries(Juliana) ∧ leave_lasting_legacy(Juliana))",
      "is_scholar(Juliana) → (is_explorer(Juliana) ⊕ dedicated_researcher(Juliana))",
      "curious_mind(Juliana) → (is_scholar(Juliana) ∧ love_history(Juliana))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Juliana pursues knowledge, then she is either a dedicated researcher or achieves recognition, but not both.",
      "If Juliana reads widely or writes papers, then she is a scholar."
    ],
    "distracting_rules_fol": [
      "pursue_knowledge(Juliana) → (dedicated_researcher(Juliana) ⊕ achieve_recognition(Juliana))",
      "(reads_widely(Juliana) ∨ writes_papers(Juliana)) → is_scholar(Juliana)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Juliana has a curious mind.",
          "Juliana loves history."
        ],
        "rules": "If Juliana has a curious mind, then she is a scholar and loves history.",
        "conclusion": "Juliana is a scholar."
      },
      {
        "facts": [
          "Juliana is a scholar.",
          "Juliana is an explorer."
        ],
        "rules": "If Juliana is a scholar, then she is either an explorer or a dedicated researcher, but not both.",
        "conclusion": "Juliana is not a dedicated researcher."
      },
      {
        "facts": [
          "Juliana is not a dedicated researcher.",
          "Juliana leaves a lasting legacy."
        ],
        "rules": "If Juliana is a dedicated researcher, then she will make new discoveries and leave a lasting legacy.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "curious_mind(Juliana)",
          "love_history(Juliana)"
        ],
        "rules": "curious_mind(Juliana) → (is_scholar(Juliana) ∧ love_history(Juliana))",
        "conclusion": "is_scholar(Juliana)"
      },
      {
        "facts": [
          "is_scholar(Juliana)",
          "is_explorer(Juliana)"
        ],
        "rules": "is_scholar(Juliana) → (is_explorer(Juliana) ⊕ dedicated_researcher(Juliana))",
        "conclusion": "¬dedicated_researcher(Juliana)"
      },
      {
        "facts": [
          "¬dedicated_researcher(Juliana)",
          "leave_lasting_legacy(Juliana)"
        ],
        "rules": "dedicated_researcher(Juliana) → (make_new_discoveries(Juliana) ∧ leave_lasting_legacy(Juliana))",
        "conclusion": null
      }
    ],
    "conclusion": "Juliana makes new discoveries.",
    "conclusion_fol": "make_new_discoveries(Juliana)",
    "answer": "Uncertain",
    "context": [
      "Juliana has a curious mind.",
      "Juliana loves history.",
      "If Juliana has a curious mind, then she is a scholar and loves history.",
      "Juliana is an explorer.",
      "If Juliana is a scholar, then she is either an explorer or a dedicated researcher, but not both.",
      "Juliana leaves a lasting legacy.",
      "If Juliana is a dedicated researcher, then she will make new discoveries and leave a lasting legacy."
    ],
    "context_fol": [
      "curious_mind(Juliana)",
      "love_history(Juliana)",
      "curious_mind(Juliana) → (is_scholar(Juliana) ∧ love_history(Juliana))",
      "is_explorer(Juliana)",
      "is_scholar(Juliana) → (is_explorer(Juliana) ⊕ dedicated_researcher(Juliana))",
      "leave_lasting_legacy(Juliana)",
      "dedicated_researcher(Juliana) → (make_new_discoveries(Juliana) ∧ leave_lasting_legacy(Juliana))"
    ],
    "background_story": "Juliana Caldwell was a renowned historian and archaeologist, known for her groundbreaking research on ancient civilizations. Born into a family of scholars, she inherited her passion for discovery from her father, a respected professor. Juliana's most notable achievement was uncovering the lost city of Zerzura, hidden deep within the Egyptian desert. Her meticulous excavation and documentation of the site revealed a previously unknown culture, shedding new light on human history. The Caldwell Foundation, established in her name, continues to support archaeological expeditions and educational initiatives, inspiring future generations to explore and preserve our cultural heritage. Juliana's legacy is a testament to her tireless pursuit of knowledge and her contributions to the field of archaeology.",
    "name": "Juliana",
    "keyword": "caldwell",
    "subject_category": "human"
  },
  {
    "facts": [
      "Cuddles cares deeply.",
      "Cuddles is large.",
      "Cuddles lives alone.",
      "Cuddles picks berries.",
      "Cuddles gathers honey."
    ],
    "facts_fol": [
      "cares_deeply(Cuddles)",
      "is_large(Cuddles)",
      "lives_alone(Cuddles)",
      "picks_berries(Cuddles)",
      "gathers_honey(Cuddles)"
    ],
    "rules": [
      "If Cuddles is gentle, then he either helps others or frightens others, but not both.",
      "If Cuddles cares deeply, then he is gentle.",
      "If Cuddles is large and has a warm heart, then he helps others.",
      "If Cuddles lives alone and shares food, then he has a warm heart.",
      "If Cuddles picks berries or gathers honey, then he will share food."
    ],
    "rules_fol": [
      "gentle(Cuddles) → (help_others(Cuddles) ⊕ frighten_others(Cuddles))",
      "cares_deeply(Cuddles) → gentle(Cuddles)",
      "(is_large(Cuddles) ∧ has_heart(Cuddles)) → help_others(Cuddles)",
      "(lives_alone(Cuddles) ∧ shares_food(Cuddles)) → has_heart(Cuddles)",
      "(picks_berries(Cuddles) ∨ gathers_honey(Cuddles)) → shares_food(Cuddles)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Cuddles moves slowly or speaks softly, then he is gentle.",
      "If Cuddles feeds his friends, then he helps other bears.",
      "If a bear is tall, then it is either warm-hearted or playful, but not both.",
      "If Cuddles roams free, then he either protects his young or shares food, but not both."
    ],
    "distracting_rules_fol": [
      "(moves_slowly(Cuddles) ∨ speaks_softly(Cuddles)) → gentle(Cuddles)",
      "feeds_friends(Cuddles) → help_others(Cuddles)",
      "is_tall(Cuddles) → (has_heart(Cuddles) ⊕ is_playful(Cuddles))",
      "roams_free(Cuddles) → (protects_young(Cuddles) ⊕ shares_food(Cuddles))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Cuddles picks berries.",
          "Cuddles gathers honey."
        ],
        "rules": "If Cuddles picks berries or gathers honey, then he will share food.",
        "conclusion": "Cuddles shares food."
      },
      {
        "facts": [
          "Cuddles lives alone.",
          "Cuddles shares food."
        ],
        "rules": "If Cuddles lives alone and shares food, then he has a warm heart.",
        "conclusion": "Cuddles has a warm heart."
      },
      {
        "facts": [
          "Cuddles is large.",
          "Cuddles has a warm heart."
        ],
        "rules": "If Cuddles is large and has a warm heart, then he helps others.",
        "conclusion": "Cuddles helps others."
      },
      {
        "facts": [
          "Cuddles cares deeply."
        ],
        "rules": "If Cuddles cares deeply, then he is gentle.",
        "conclusion": "Cuddles is gentle."
      },
      {
        "facts": [
          "Cuddles is gentle.",
          "Cuddles helps others."
        ],
        "rules": "If Cuddles is gentle, then he either helps others or frightens others, but not both.",
        "conclusion": "Cuddles does not frighten others."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "picks_berries(Cuddles)",
          "gathers_honey(Cuddles)"
        ],
        "rules": "(picks_berries(Cuddles) ∨ gathers_honey(Cuddles)) → shares_food(Cuddles)",
        "conclusion": "shares_food(Cuddles)"
      },
      {
        "facts": [
          "lives_alone(Cuddles)",
          "shares_food(Cuddles)"
        ],
        "rules": "(lives_alone(Cuddles) ∧ shares_food(Cuddles)) → has_heart(Cuddles)",
        "conclusion": "has_heart(Cuddles)"
      },
      {
        "facts": [
          "is_large(Cuddles)",
          "has_heart(Cuddles)"
        ],
        "rules": "(is_large(Cuddles) ∧ has_heart(Cuddles)) → help_others(Cuddles)",
        "conclusion": "help_others(Cuddles)"
      },
      {
        "facts": [
          "cares_deeply(Cuddles)"
        ],
        "rules": "cares_deeply(Cuddles) → gentle(Cuddles)",
        "conclusion": "gentle(Cuddles)"
      },
      {
        "facts": [
          "gentle(Cuddles)",
          "help_others(Cuddles)"
        ],
        "rules": "gentle(Cuddles) → (help_others(Cuddles) ⊕ frighten_others(Cuddles))",
        "conclusion": "¬frighten_others(Cuddles)"
      }
    ],
    "conclusion": "Cuddles does not frighten others.",
    "conclusion_fol": "¬frighten_others(Cuddles)",
    "answer": "True",
    "context": [
      "Cuddles picks berries.",
      "Cuddles gathers honey.",
      "If Cuddles picks berries or gathers honey, then he will share food.",
      "Cuddles lives alone.",
      "If Cuddles lives alone and shares food, then he has a warm heart.",
      "Cuddles is large.",
      "If Cuddles is large and has a warm heart, then he helps others.",
      "Cuddles cares deeply.",
      "If Cuddles cares deeply, then he is gentle.",
      "If Cuddles is gentle, then he either helps others or frightens others, but not both."
    ],
    "context_fol": [
      "picks_berries(Cuddles)",
      "gathers_honey(Cuddles)",
      "(picks_berries(Cuddles) ∨ gathers_honey(Cuddles)) → shares_food(Cuddles)",
      "lives_alone(Cuddles)",
      "(lives_alone(Cuddles) ∧ shares_food(Cuddles)) → has_heart(Cuddles)",
      "is_large(Cuddles)",
      "(is_large(Cuddles) ∧ has_heart(Cuddles)) → help_others(Cuddles)",
      "cares_deeply(Cuddles)",
      "cares_deeply(Cuddles) → gentle(Cuddles)",
      "gentle(Cuddles) → (help_others(Cuddles) ⊕ frighten_others(Cuddles))"
    ],
    "background_story": "Cuddles, despite the misleading name, was a giant of a bear who roamed the forest with a gentle demeanor. Standing at an astonishing 12 feet tall on his hind legs, he was an intimidating sight, yet his heart was as warm as his fur was fluffy. Cuddles spent his days lumbering through the woods, careful not to disturb the smaller creatures that lived among the underbrush. His size allowed him to reach the highest branches, and he would often pluck fruit for his forest friends, earning him the title of gentle giant. At night, Cuddles would curl up by the river, his massive frame a comforting presence, proving that even the largest of creatures can have the kindest of souls.",
    "name": "Cuddles",
    "keyword": "giant",
    "subject_category": "bear"
  },
  {
    "facts": [
      "Allan practices self-care.",
      "Allan does not experience pain.",
      "Allan has symptoms."
    ],
    "facts_fol": [
      "practices_self_care(Allan)",
      "¬experiences_pain(Allan)",
      "has_symptoms(Allan)"
    ],
    "rules": [
      "If Allan has a chronic condition, then he either seeks medical help or practices self-care, but not both.",
      "If Allan needs treatment, then he has a chronic condition.",
      "Any person who experiences pain or has symptoms needs treatment."
    ],
    "rules_fol": [
      "has_chronic_condition(Allan) → (seeks_medical_help(Allan) ⊕ practices_self_care(Allan))",
      "needs_treatment(Allan) → has_chronic_condition(Allan)",
      "∀x ((experiences_pain(x) ∨ has_symptoms(x)) → needs_treatment(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Allan either manages stress or tracks his health (but not both), then he has a chronic condition.",
      "If Allan is ill, then he either needs treatment or requires rest, but not both."
    ],
    "distracting_rules_fol": [
      "(manages_stress(Allan) ⊕ tracks_health(Allan)) → has_chronic_condition(Allan)",
      "is_ill(Allan) → (needs_treatment(Allan) ⊕ requires_rest(Allan))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Allan does not experience pain.",
          "Allan has symptoms."
        ],
        "rules": "Any person who experiences pain or has symptoms needs treatment.",
        "conclusion": "Allan needs treatment."
      },
      {
        "facts": [
          "Allan needs treatment."
        ],
        "rules": "If Allan needs treatment, then he has a chronic condition.",
        "conclusion": "Allan has a chronic condition."
      },
      {
        "facts": [
          "Allan has a chronic condition.",
          "Allan practices self-care."
        ],
        "rules": "If Allan has a chronic condition, then he either seeks medical help or practices self-care, but not both.",
        "conclusion": "Allan seeks medical help."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬experiences_pain(Allan)",
          "has_symptoms(Allan)"
        ],
        "rules": "∀x ((experiences_pain(x) ∨ has_symptoms(x)) → needs_treatment(x))",
        "conclusion": "needs_treatment(Allan)"
      },
      {
        "facts": [
          "needs_treatment(Allan)"
        ],
        "rules": "needs_treatment(Allan) → has_chronic_condition(Allan)",
        "conclusion": "has_chronic_condition(Allan)"
      },
      {
        "facts": [
          "has_chronic_condition(Allan)",
          "practices_self_care(Allan)"
        ],
        "rules": "has_chronic_condition(Allan) → (seeks_medical_help(Allan) ⊕ practices_self_care(Allan))",
        "conclusion": "seeks_medical_help(Allan)"
      }
    ],
    "conclusion": "Allan seeks medical help.",
    "conclusion_fol": "seeks_medical_help(Allan)",
    "answer": "False",
    "context": [
      "Allan does not experience pain.",
      "Allan has symptoms.",
      "Any person who experiences pain or has symptoms needs treatment.",
      "If Allan needs treatment, then he has a chronic condition.",
      "Allan practices self-care.",
      "If Allan has a chronic condition, then he either seeks medical help or practices self-care, but not both."
    ],
    "context_fol": [
      "¬experiences_pain(Allan)",
      "has_symptoms(Allan)",
      "∀x ((experiences_pain(x) ∨ has_symptoms(x)) → needs_treatment(x))",
      "needs_treatment(Allan) → has_chronic_condition(Allan)",
      "practices_self_care(Allan)",
      "has_chronic_condition(Allan) → (seeks_medical_help(Allan) ⊕ practices_self_care(Allan))"
    ],
    "background_story": "Allan had always been an active person, enjoying outdoor activities like hiking and gardening. However, his life took a drastic turn when he developed prurigo, a chronic skin condition characterized by intense itching and nodules on the skin. The condition left him with constant discomfort, affecting not only his physical health but also his mental well-being. Despite the challenges, Allan remained determined to find relief. He worked closely with his dermatologist to manage his symptoms, trying various treatments and lifestyle changes. With time and persistence, Allan learned to cope with his condition, adapting his daily routines to minimize flare-ups. His journey with prurigo taught him the importance of self-care and the value of seeking support from loved ones and medical professionals.",
    "name": "Allan",
    "keyword": "prurigo",
    "subject_category": "human"
  },
  {
    "facts": [
      "Valentino is an experienced artist.",
      "Valentino is not disciplined."
    ],
    "facts_fol": [
      "is_experienced(Valentino)",
      "¬is_disciplined(Valentino)"
    ],
    "rules": [
      "For all artists, if they master ceramic techniques, then they create beautiful pieces.",
      "Valentino is either innovative or masters ceramic techniques, but not both.",
      "Valentino either learns quickly or is innovative.",
      "Valentino either has creativity or learns quickly, but not necessarily both.",
      "If Valentino is an experienced artist, then he is either disciplined or has creativity, but not both."
    ],
    "rules_fol": [
      "∀x (master_ceramic_techniques(x) → create_beautiful_pieces(x))",
      "is_innovative(Valentino) ⊕ master_ceramic_techniques(Valentino)",
      "learns_fast(Valentino) ∨ is_innovative(Valentino)",
      "has_creativity(Valentino) ⊕ learns_fast(Valentino)",
      "is_experienced(Valentino) → (is_disciplined(Valentino) ⊕ has_creativity(Valentino))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Any artist who practices daily or studies design can master ceramic techniques.",
      "Every artist either develops skills or is innovative.",
      "Valentino either makes art or learns quickly.",
      "If Valentino either thinks outside the box or makes original work (but not both), then he has creativity."
    ],
    "distracting_rules_fol": [
      "∀x ((practices_daily(x) ∨ studies_design(x)) → master_ceramic_techniques(x))",
      "∀x (develops_skills(x) ∨ is_innovative(x))",
      "makes_art(Valentino) ∨ learns_fast(Valentino)",
      "(thinks_outside(Valentino) ⊕ makes_original(Valentino)) → has_creativity(Valentino)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Valentino is an experienced artist.",
          "Valentino is not disciplined."
        ],
        "rules": "If Valentino is an experienced artist, then he is either disciplined or has creativity, but not both.",
        "conclusion": "Valentino has creativity."
      },
      {
        "facts": [
          "Valentino has creativity."
        ],
        "rules": "Valentino either has creativity or learns quickly, but not necessarily both.",
        "conclusion": "Valentino does not learn quickly."
      },
      {
        "facts": [
          "Valentino does not learn quickly."
        ],
        "rules": "Valentino either learns quickly or is innovative.",
        "conclusion": "Valentino is innovative."
      },
      {
        "facts": [
          "Valentino is innovative."
        ],
        "rules": "Valentino is either innovative or masters ceramic techniques, but not both.",
        "conclusion": "Valentino does not master ceramic techniques."
      },
      {
        "facts": [
          "Valentino does not master ceramic techniques."
        ],
        "rules": "For all artists, if they master ceramic techniques, then they create beautiful pieces.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "is_experienced(Valentino)",
          "¬is_disciplined(Valentino)"
        ],
        "rules": "is_experienced(Valentino) → (is_disciplined(Valentino) ⊕ has_creativity(Valentino))",
        "conclusion": "has_creativity(Valentino)"
      },
      {
        "facts": [
          "has_creativity(Valentino)"
        ],
        "rules": "has_creativity(Valentino) ⊕ learns_fast(Valentino)",
        "conclusion": "¬learns_fast(Valentino)"
      },
      {
        "facts": [
          "¬learns_fast(Valentino)"
        ],
        "rules": "learns_fast(Valentino) ∨ is_innovative(Valentino)",
        "conclusion": "is_innovative(Valentino)"
      },
      {
        "facts": [
          "is_innovative(Valentino)"
        ],
        "rules": "is_innovative(Valentino) ⊕ master_ceramic_techniques(Valentino)",
        "conclusion": "¬master_ceramic_techniques(Valentino)"
      },
      {
        "facts": [
          "¬master_ceramic_techniques(Valentino)"
        ],
        "rules": "∀x (master_ceramic_techniques(x) → create_beautiful_pieces(x))",
        "conclusion": null
      }
    ],
    "conclusion": "Valentino creates beautiful pieces.",
    "conclusion_fol": "create_beautiful_pieces(Valentino)",
    "answer": "Uncertain",
    "context": [
      "Valentino is an experienced artist.",
      "Valentino is not disciplined.",
      "If Valentino is an experienced artist, then he is either disciplined or has creativity, but not both.",
      "Valentino either has creativity or learns quickly, but not necessarily both.",
      "Valentino either learns quickly or is innovative.",
      "Valentino is either innovative or masters ceramic techniques, but not both.",
      "For all artists, if they master ceramic techniques, then they create beautiful pieces."
    ],
    "context_fol": [
      "is_experienced(Valentino)",
      "¬is_disciplined(Valentino)",
      "is_experienced(Valentino) → (is_disciplined(Valentino) ⊕ has_creativity(Valentino))",
      "has_creativity(Valentino) ⊕ learns_fast(Valentino)",
      "learns_fast(Valentino) ∨ is_innovative(Valentino)",
      "is_innovative(Valentino) ⊕ master_ceramic_techniques(Valentino)",
      "∀x (master_ceramic_techniques(x) → create_beautiful_pieces(x))"
    ],
    "background_story": "Valentino was a renowned Italian ceramicist from the 19th century, celebrated for his exquisite work in majolica. Born in Orvieto, a town famous for its rich ceramic traditions, Valentino learned the art of majolica from his father. He perfected his technique, creating pieces that were not only functional but also stunning works of art. Valentino's majolica pieces, adorned with vibrant colors and intricate designs, were highly sought after by European royalty and aristocrats. His workshop became a hub for artistic innovation, where he experimented with new glazes and techniques, pushing the boundaries of what was possible with majolica. Valentino's legacy continues to inspire ceramic artists around the world, and his pieces remain highly prized by collectors for their beauty and historical significance.",
    "name": "Valentino",
    "keyword": "majolica",
    "subject_category": "artist"
  },
  {
    "facts": [
      "Norah is specialized.",
      "Norah is creative.",
      "Norah is not talented.",
      "Norah designs sonar systems.",
      "Norah builds robots."
    ],
    "facts_fol": [
      "specialized(Norah)",
      "creative(Norah)",
      "¬talented(Norah)",
      "designs_sonar(Norah)",
      "builds_robots(Norah)"
    ],
    "rules": [
      "If Norah is an expert engineer, then she is either precise or creative, but not both.",
      "All skilled engineers are experts in their field.",
      "If Norah is an experienced engineer, then she is either skilled or talented, but not both.",
      "An engineer either works on underwater projects or has extensive experience, but not necessarily both.",
      "If Norah designs sonar systems, then she either works on underwater projects or builds robots, but not both."
    ],
    "rules_fol": [
      "expert(Norah) → (precise(Norah) ⊕ creative(Norah))",
      "∀x (skilled(x) → expert(x))",
      "experienced(Norah) → (skilled(Norah) ⊕ talented(Norah))",
      "∀x (works_underwater(x) ⊕ experienced(x))",
      "designs_sonar(Norah) → (works_underwater(Norah) ⊕ builds_robots(Norah))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "All attentive engineers are precise.",
      "If Norah studies acoustics and develops devices, then she is an expert.",
      "All motivated engineers are problem solvers and skilled.",
      "If Norah knows math and solves problems, then she is experienced.",
      "If Norah develops transducers, then she either enhances navigation systems or works on underwater projects."
    ],
    "distracting_rules_fol": [
      "∀x (attentive(x) → precise(x))",
      "(studies_acoustics(Norah) ∧ develops_devices(Norah)) → expert(Norah)",
      "∀x (motivated(x) → (problem_solver(x) ∧ skilled(x)))",
      "(knows_math(Norah) ∧ solves_problems(Norah)) → experienced(Norah)",
      "develops_transducers(Norah) → (enhances_navigation(Norah) ∨ works_underwater(Norah))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Norah designs sonar systems.",
          "Norah builds robots."
        ],
        "rules": "If Norah designs sonar systems, then she either works on underwater projects or builds robots, but not both.",
        "conclusion": "Norah does not work on underwater projects."
      },
      {
        "facts": [
          "Norah does not work on underwater projects."
        ],
        "rules": "An engineer either works on underwater projects or has extensive experience, but not necessarily both.",
        "conclusion": "Norah is experienced."
      },
      {
        "facts": [
          "Norah is experienced.",
          "Norah is not talented."
        ],
        "rules": "If Norah is an experienced engineer, then she is either skilled or talented, but not both.",
        "conclusion": "Norah is a skilled engineer."
      },
      {
        "facts": [
          "Norah is a skilled engineer."
        ],
        "rules": "All skilled engineers are experts in their field.",
        "conclusion": "Norah is an expert."
      },
      {
        "facts": [
          "Norah is an expert.",
          "Norah is creative."
        ],
        "rules": "If Norah is an expert engineer, then she is either precise or creative, but not both.",
        "conclusion": "Norah is not precise."
      },
      {
        "facts": [
          "Norah is specialized.",
          "Norah is not precise."
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "designs_sonar(Norah)",
          "builds_robots(Norah)"
        ],
        "rules": "designs_sonar(Norah) → (works_underwater(Norah) ⊕ builds_robots(Norah))",
        "conclusion": "¬works_underwater(Norah)"
      },
      {
        "facts": [
          "¬works_underwater(Norah)"
        ],
        "rules": "∀x (works_underwater(x) ⊕ experienced(x))",
        "conclusion": "experienced(Norah)"
      },
      {
        "facts": [
          "experienced(Norah)",
          "¬talented(Norah)"
        ],
        "rules": "experienced(Norah) → (skilled(Norah) ⊕ talented(Norah))",
        "conclusion": "skilled(Norah)"
      },
      {
        "facts": [
          "skilled(Norah)"
        ],
        "rules": "∀x (skilled(x) → expert(x))",
        "conclusion": "expert(Norah)"
      },
      {
        "facts": [
          "expert(Norah)",
          "creative(Norah)"
        ],
        "rules": "expert(Norah) → (precise(Norah) ⊕ creative(Norah))",
        "conclusion": "¬precise(Norah)"
      },
      {
        "facts": [
          "specialized(Norah)",
          "¬precise(Norah)"
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "conclusion": "Norah is innovative, or she is both specialized and precise.",
    "conclusion_fol": "innovative(Norah) ∨ (specialized(Norah) ∧ precise(Norah))",
    "answer": "Uncertain",
    "context": [
      "Norah designs sonar systems.",
      "Norah builds robots.",
      "If Norah designs sonar systems, then she either works on underwater projects or builds robots, but not both.",
      "An engineer either works on underwater projects or has extensive experience, but not necessarily both.",
      "Norah is not talented.",
      "If Norah is an experienced engineer, then she is either skilled or talented, but not both.",
      "All skilled engineers are experts in their field.",
      "Norah is creative.",
      "If Norah is an expert engineer, then she is either precise or creative, but not both.",
      "Norah is specialized."
    ],
    "context_fol": [
      "designs_sonar(Norah)",
      "builds_robots(Norah)",
      "designs_sonar(Norah) → (works_underwater(Norah) ⊕ builds_robots(Norah))",
      "∀x (works_underwater(x) ⊕ experienced(x))",
      "¬talented(Norah)",
      "experienced(Norah) → (skilled(Norah) ⊕ talented(Norah))",
      "∀x (skilled(x) → expert(x))",
      "creative(Norah)",
      "expert(Norah) → (precise(Norah) ⊕ creative(Norah))",
      "specialized(Norah)"
    ],
    "background_story": "Norah was a brilliant engineer specializing in acoustic technology. She spent most of her career designing and developing innovative transducers for underwater applications. Her work focused on creating devices that could efficiently convert electrical signals into sound waves, and vice versa, to enhance sonar and communication systems for marine research and exploration. Norah's breakthroughs in transducer technology led to significant improvements in oceanic data collection and navigation. Her dedication to precision and her passion for the intricacies of sound wave propagation made her a leading expert in her field. Norah's innovative transducers have been used in numerous expeditions, contributing to a better understanding of the world's oceans and the life within them.",
    "name": "Norah",
    "keyword": "transducer",
    "subject_category": "engineer"
  },
  {
    "facts": [
      "Danny is dedicated to his faith and community.",
      "Danny leads a congregation.",
      "Danny is caring."
    ],
    "facts_fol": [
      "dedicated(Danny)",
      "leads_congregation(Danny)",
      "caring(Danny)"
    ],
    "rules": [
      "If Danny is dedicated to his faith and community, then he is either respected by the people he serves or wealthy, but not both.",
      "If Danny either helps others or serves the community (but not both), then he is respected.",
      "Either Danny leads a congregation or serves the community, but not both.",
      "All caring individuals help other people."
    ],
    "rules_fol": [
      "dedicated(Danny) → (respected(Danny) ⊕ wealthy(Danny))",
      "(helps_others(Danny) ⊕ serves_community(Danny)) → respected(Danny)",
      "leads_congregation(Danny) ⊕ serves_community(Danny)",
      "∀x (caring(x) → helps_others(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Anyone who lives humbly or shows empathy is respected.",
      "All who aid the needy serve the community.",
      "If Danny is selfless, then he either donates his time or helps others, but not both."
    ],
    "distracting_rules_fol": [
      "∀x ((lives_humbly(x) ∨ shows_empathy(x)) → respected(x))",
      "∀x (aid_needy(x) → serves_community(x))",
      "is_selfless(Danny) → (donates_time(Danny) ⊕ helps_others(Danny))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Danny is caring."
        ],
        "rules": "All caring individuals help other people.",
        "conclusion": "Danny helps others."
      },
      {
        "facts": [
          "Danny leads a congregation."
        ],
        "rules": "Either Danny leads a congregation or serves the community, but not both.",
        "conclusion": "Danny does not serve the community."
      },
      {
        "facts": [
          "Danny helps others.",
          "Danny does not serve the community."
        ],
        "rules": "If Danny either helps others or serves the community (but not both), then he is respected.",
        "conclusion": "Danny is respected by the people he serves."
      },
      {
        "facts": [
          "Danny is dedicated to his faith and community.",
          "Danny is respected by the people he serves."
        ],
        "rules": "If Danny is dedicated to his faith and community, then he is either respected by the people he serves or wealthy, but not both.",
        "conclusion": "Danny is wealthy."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "caring(Danny)"
        ],
        "rules": "∀x (caring(x) → helps_others(x))",
        "conclusion": "helps_others(Danny)"
      },
      {
        "facts": [
          "leads_congregation(Danny)"
        ],
        "rules": "leads_congregation(Danny) ⊕ serves_community(Danny)",
        "conclusion": "¬serves_community(Danny)"
      },
      {
        "facts": [
          "helps_others(Danny)",
          "¬serves_community(Danny)"
        ],
        "rules": "(helps_others(Danny) ⊕ serves_community(Danny)) → respected(Danny)",
        "conclusion": "respected(Danny)"
      },
      {
        "facts": [
          "dedicated(Danny)",
          "respected(Danny)"
        ],
        "rules": "dedicated(Danny) → (respected(Danny) ⊕ wealthy(Danny))",
        "conclusion": "wealthy(Danny)"
      }
    ],
    "conclusion": "Danny is wealthy.",
    "conclusion_fol": "wealthy(Danny)",
    "answer": "False",
    "context": [
      "Danny is caring.",
      "All caring individuals help other people.",
      "Danny leads a congregation.",
      "Either Danny leads a congregation or serves the community, but not both.",
      "If Danny either helps others or serves the community (but not both), then he is respected.",
      "Danny is dedicated to his faith and community.",
      "If Danny is dedicated to his faith and community, then he is either respected by the people he serves or wealthy, but not both."
    ],
    "context_fol": [
      "caring(Danny)",
      "∀x (caring(x) → helps_others(x))",
      "leads_congregation(Danny)",
      "leads_congregation(Danny) ⊕ serves_community(Danny)",
      "(helps_others(Danny) ⊕ serves_community(Danny)) → respected(Danny)",
      "dedicated(Danny)",
      "dedicated(Danny) → (respected(Danny) ⊕ wealthy(Danny))"
    ],
    "background_story": "Danny was a skilled but unbeneficed clergyman, living in a small rural town in the 19th century. Despite his dedication to his faith and community, he had not been assigned a benefice, or a church with a steady income, to support himself. Danny relied on the charity of his congregation and the meager earnings from performing occasional services. His situation was precarious, with limited financial security and no clear path for advancement. Nevertheless, Danny remained committed to his calling, using his talents to serve the poor and needy, and finding joy in the simple act of serving others. His selflessness and devotion earned him the respect and admiration of the community, even if it didn't bring him material comfort.",
    "name": "Danny",
    "keyword": "unbeneficed",
    "subject_category": "human"
  },
  {
    "facts": [
      "Camilo explores society.",
      "Camilo does not admire authors.",
      "Camilo enjoys literature.",
      "Camilo does not craft stories."
    ],
    "facts_fol": [
      "explore_society(Camilo)",
      "¬admires_authors(Camilo)",
      "enjoys_literature(Camilo)",
      "¬craft_stories(Camilo)"
    ],
    "rules": [
      "If Camilo studies Auchincloss and writes novels, then he portrays social hierarchy.",
      "If Camilo reads classics or explores society, then he studies Auchincloss.",
      "If Camilo admires authors and enjoys literature, then he reads classics.",
      "Every literary figure either crafts stories or writes novels."
    ],
    "rules_fol": [
      "(study_Auchincloss(Camilo) ∧ write_novels(Camilo)) → portray_social_hierarchy(Camilo)",
      "(read_classics(Camilo) ∨ explore_society(Camilo)) → study_Auchincloss(Camilo)",
      "(admires_authors(Camilo) ∧ enjoys_literature(Camilo)) → read_classics(Camilo)",
      "∀x (craft_stories(x) ∨ write_novels(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Camilo respects Auchincloss, then he will study Auchincloss's works.",
      "If Camilo influences others, then he either reads classics or analyzes human nature, but not both.",
      "If Camilo has talent or gets inspired, then he can write novels."
    ],
    "distracting_rules_fol": [
      "respects_auchincloss(Camilo) → study_Auchincloss(Camilo)",
      "influences_others(Camilo) → (read_classics(Camilo) ⊕ analyzes_human_nature(Camilo))",
      "(has_talent(Camilo) ∨ gets_inspired(Camilo)) → write_novels(Camilo)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Camilo does not craft stories."
        ],
        "rules": "Every literary figure either crafts stories or writes novels.",
        "conclusion": "Camilo writes novels."
      },
      {
        "facts": [
          "Camilo does not admire authors.",
          "Camilo enjoys literature."
        ],
        "rules": "If Camilo admires authors and enjoys literature, then he reads classics.",
        "conclusion": null
      },
      {
        "facts": [
          "Camilo explores society."
        ],
        "rules": "If Camilo reads classics or explores society, then he studies Auchincloss.",
        "conclusion": "Camilo studies Auchincloss."
      },
      {
        "facts": [
          "Camilo studies Auchincloss.",
          "Camilo writes novels."
        ],
        "rules": "If Camilo studies Auchincloss and writes novels, then he portrays social hierarchy.",
        "conclusion": "Camilo portrays social hierarchy."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬craft_stories(Camilo)"
        ],
        "rules": "∀x (craft_stories(x) ∨ write_novels(x))",
        "conclusion": "write_novels(Camilo)"
      },
      {
        "facts": [
          "¬admires_authors(Camilo)",
          "enjoys_literature(Camilo)"
        ],
        "rules": "(admires_authors(Camilo) ∧ enjoys_literature(Camilo)) → read_classics(Camilo)",
        "conclusion": null
      },
      {
        "facts": [
          "explore_society(Camilo)"
        ],
        "rules": "(read_classics(Camilo) ∨ explore_society(Camilo)) → study_Auchincloss(Camilo)",
        "conclusion": "study_Auchincloss(Camilo)"
      },
      {
        "facts": [
          "study_Auchincloss(Camilo)",
          "write_novels(Camilo)"
        ],
        "rules": "(study_Auchincloss(Camilo) ∧ write_novels(Camilo)) → portray_social_hierarchy(Camilo)",
        "conclusion": "portray_social_hierarchy(Camilo)"
      }
    ],
    "conclusion": "Camilo portrays social hierarchy.",
    "conclusion_fol": "portray_social_hierarchy(Camilo)",
    "answer": "True",
    "context": [
      "Camilo does not craft stories.",
      "Every literary figure either crafts stories or writes novels.",
      "Camilo does not admire authors.",
      "Camilo enjoys literature.",
      "If Camilo admires authors and enjoys literature, then he reads classics.",
      "Camilo explores society.",
      "If Camilo reads classics or explores society, then he studies Auchincloss.",
      "If Camilo studies Auchincloss and writes novels, then he portrays social hierarchy."
    ],
    "context_fol": [
      "¬craft_stories(Camilo)",
      "∀x (craft_stories(x) ∨ write_novels(x))",
      "¬admires_authors(Camilo)",
      "enjoys_literature(Camilo)",
      "(admires_authors(Camilo) ∧ enjoys_literature(Camilo)) → read_classics(Camilo)",
      "explore_society(Camilo)",
      "(read_classics(Camilo) ∨ explore_society(Camilo)) → study_Auchincloss(Camilo)",
      "(study_Auchincloss(Camilo) ∧ write_novels(Camilo)) → portray_social_hierarchy(Camilo)"
    ],
    "background_story": "Camilo, a budding writer, had always been fascinated by the works of Louis Auchincloss, an American novelist known for his insightful portrayals of the American upper class. Aspiring to follow in Auchincloss's footsteps, Camilo dedicated himself to crafting stories that explored the intricacies of human relationships and the nuances of social hierarchy. His debut novel, set in the elite communities of New York City, garnered critical acclaim for its thoughtful characterizations and nuanced exploration of class dynamics, drawing comparisons to Auchincloss's own works. Camilo's writing was not only a testament to his literary talent but also a tribute to the influence of Auchincloss, whose legacy continued to inspire a new generation of writers.",
    "name": "Camilo",
    "keyword": "auchincloss",
    "subject_category": "literary figure"
  },
  {
    "facts": [
      "Anderson cares deeply.",
      "Anderson seeks truth."
    ],
    "facts_fol": [
      "care_deeply(Anderson)",
      "seek_truth(Anderson)"
    ],
    "rules": [
      "For all philosophers, if they believe in human dignity and promote empathy, then they inspire others.",
      "Every philosopher who values human life promotes empathy.",
      "Anderson either respects diversity or believes in human dignity, but not necessarily both.",
      "All philosophers who care deeply about humanity value human life.",
      "Anderson either seeks truth or respects diversity, but not necessarily both."
    ],
    "rules_fol": [
      "∀x ((believe_in_human_dignity(x) ∧ promote_empathy(x)) → inspire_others(x))",
      "∀x (value_life(x) → promote_empathy(x))",
      "respect_diversity(Anderson) ⊕ believe_in_human_dignity(Anderson)",
      "∀x (care_deeply(x) → value_life(x))",
      "seek_truth(Anderson) ⊕ respect_diversity(Anderson)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Any philosopher who studies human nature or fosters compassion can promote empathy.",
      "If Anderson studies human nature, then he either advocates for justice or believes in human dignity, but not both.",
      "If Anderson either supports equality or fosters compassion (but not both), then he values human life.",
      "Any philosopher who studies cultures or embraces individuality respects diversity."
    ],
    "distracting_rules_fol": [
      "∀x ((study_human_nature(x) ∨ foster_compassion(x)) → promote_empathy(x))",
      "study_human_nature(Anderson) → (advocate_for_justice(Anderson) ⊕ believe_in_human_dignity(Anderson))",
      "(support_equality(Anderson) ⊕ foster_compassion(Anderson)) → value_life(Anderson)",
      "∀x ((study_cultures(x) ∨ embrace_individuality(x)) → respect_diversity(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Anderson seeks truth."
        ],
        "rules": "Anderson either seeks truth or respects diversity, but not necessarily both.",
        "conclusion": "Anderson does not respect diversity."
      },
      {
        "facts": [
          "Anderson cares deeply."
        ],
        "rules": "All philosophers who care deeply about humanity value human life.",
        "conclusion": "Anderson values human life."
      },
      {
        "facts": [
          "Anderson does not respect diversity."
        ],
        "rules": "Anderson either respects diversity or believes in human dignity, but not necessarily both.",
        "conclusion": "Anderson believes in human dignity."
      },
      {
        "facts": [
          "Anderson values human life."
        ],
        "rules": "Every philosopher who values human life promotes empathy.",
        "conclusion": "Anderson promotes empathy."
      },
      {
        "facts": [
          "Anderson believes in human dignity.",
          "Anderson promotes empathy."
        ],
        "rules": "For all philosophers, if they believe in human dignity and promote empathy, then they inspire others.",
        "conclusion": "Anderson inspires others."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "seek_truth(Anderson)"
        ],
        "rules": "seek_truth(Anderson) ⊕ respect_diversity(Anderson)",
        "conclusion": "¬respect_diversity(Anderson)"
      },
      {
        "facts": [
          "care_deeply(Anderson)"
        ],
        "rules": "∀x (care_deeply(x) → value_life(x))",
        "conclusion": "value_life(Anderson)"
      },
      {
        "facts": [
          "¬respect_diversity(Anderson)"
        ],
        "rules": "respect_diversity(Anderson) ⊕ believe_in_human_dignity(Anderson)",
        "conclusion": "believe_in_human_dignity(Anderson)"
      },
      {
        "facts": [
          "value_life(Anderson)"
        ],
        "rules": "∀x (value_life(x) → promote_empathy(x))",
        "conclusion": "promote_empathy(Anderson)"
      },
      {
        "facts": [
          "believe_in_human_dignity(Anderson)",
          "promote_empathy(Anderson)"
        ],
        "rules": "∀x ((believe_in_human_dignity(x) ∧ promote_empathy(x)) → inspire_others(x))",
        "conclusion": "inspire_others(Anderson)"
      }
    ],
    "conclusion": "Anderson inspires others.",
    "conclusion_fol": "inspire_others(Anderson)",
    "answer": "True",
    "context": [
      "Anderson seeks truth.",
      "Anderson either seeks truth or respects diversity, but not necessarily both.",
      "Anderson cares deeply.",
      "All philosophers who care deeply about humanity value human life.",
      "Anderson either respects diversity or believes in human dignity, but not necessarily both.",
      "Every philosopher who values human life promotes empathy.",
      "For all philosophers, if they believe in human dignity and promote empathy, then they inspire others."
    ],
    "context_fol": [
      "seek_truth(Anderson)",
      "seek_truth(Anderson) ⊕ respect_diversity(Anderson)",
      "care_deeply(Anderson)",
      "∀x (care_deeply(x) → value_life(x))",
      "respect_diversity(Anderson) ⊕ believe_in_human_dignity(Anderson)",
      "∀x (value_life(x) → promote_empathy(x))",
      "∀x ((believe_in_human_dignity(x) ∧ promote_empathy(x)) → inspire_others(x))"
    ],
    "background_story": "Anderson was a renowned philosopher known for his humanistic approach to understanding human nature. He believed that every individual has inherent value and deserves dignity, respect, and compassion. Anderson's work focused on promoting empathy, tolerance, and social justice. He traveled the world, engaging with people from diverse backgrounds, and listening to their stories. His book, 'The Human Condition,' became a classic, exploring the complexities of human emotions, relationships, and experiences. Anderson's humanistic philosophy inspired a generation of thinkers, artists, and activists to prioritize human well-being, creativity, and freedom. Through his teachings, he encouraged people to embrace their uniqueness and to strive for a more harmonious and equitable world.",
    "name": "Anderson",
    "keyword": "humanistic",
    "subject_category": "philosopher"
  },
  {
    "facts": [
      "Pooka lives in high pH environments.",
      "Pooka stains darkly.",
      "Pooka survives in extreme conditions.",
      "Pooka fixes nitrogen.",
      "Pooka does not adapt quickly."
    ],
    "facts_fol": [
      "live_in_pH(Pooka)",
      "stain_darkly(Pooka)",
      "survive_in_extremes(Pooka)",
      "fix_nitrogen(Pooka)",
      "¬adapt_quickly(Pooka)"
    ],
    "rules": [
      "For all microorganisms, if a microorganism thrives in alkaline environments and binds to acidic dyes, then it is basophilic.",
      "If Pooka lives in high pH environments and stains darkly, then it will bind to acidic dyes.",
      "If Pooka either tolerates high pH or metabolizes sulfur (but not both), then it thrives in alkaline environments.",
      "If Pooka survives in extreme conditions, then it either fixes nitrogen or metabolizes sulfur, but not both.",
      "Pooka either adapts quickly or tolerates high pH."
    ],
    "rules_fol": [
      "∀x ((thrive_in_alkaline(x) ∧ bind_to_acidic_dyes(x)) → basophilic(x))",
      "(live_in_pH(Pooka) ∧ stain_darkly(Pooka)) → bind_to_acidic_dyes(Pooka)",
      "(tolerate_high_pH(Pooka) ⊕ metabolize_sulfur(Pooka)) → thrive_in_alkaline(Pooka)",
      "survive_in_extremes(Pooka) → (fix_nitrogen(Pooka) ⊕ metabolize_sulfur(Pooka))",
      "adapt_quickly(Pooka) ∨ tolerate_high_pH(Pooka)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Pooka contains dye, then it will bind to acidic dyes.",
      "Pooka either grows in warmth or thrives in alkaline environments.",
      "Pooka either uses iron or metabolizes sulfur.",
      "Pooka either grows in salt or tolerates high pH."
    ],
    "distracting_rules_fol": [
      "contain_dye(Pooka) → bind_to_acidic_dyes(Pooka)",
      "grow_in_warmth(Pooka) ∨ thrive_in_alkaline(Pooka)",
      "use_iron(Pooka) ∨ metabolize_sulfur(Pooka)",
      "grow_in_salt(Pooka) ∨ tolerate_high_pH(Pooka)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Pooka does not adapt quickly."
        ],
        "rules": "Pooka either adapts quickly or tolerates high pH.",
        "conclusion": "Pooka tolerates high pH."
      },
      {
        "facts": [
          "Pooka survives in extreme conditions.",
          "Pooka fixes nitrogen."
        ],
        "rules": "If Pooka survives in extreme conditions, then it either fixes nitrogen or metabolizes sulfur, but not both.",
        "conclusion": "Pooka does not metabolize sulfur."
      },
      {
        "facts": [
          "Pooka tolerates high pH.",
          "Pooka does not metabolize sulfur."
        ],
        "rules": "If Pooka either tolerates high pH or metabolizes sulfur (but not both), then it thrives in alkaline environments.",
        "conclusion": "Pooka thrives in alkaline environments."
      },
      {
        "facts": [
          "Pooka lives in high pH environments.",
          "Pooka stains darkly."
        ],
        "rules": "If Pooka lives in high pH environments and stains darkly, then it will bind to acidic dyes.",
        "conclusion": "Pooka binds to acidic dyes."
      },
      {
        "facts": [
          "Pooka thrives in alkaline environments.",
          "Pooka binds to acidic dyes."
        ],
        "rules": "For all microorganisms, if a microorganism thrives in alkaline environments and binds to acidic dyes, then it is basophilic.",
        "conclusion": "Pooka is basophilic."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬adapt_quickly(Pooka)"
        ],
        "rules": "adapt_quickly(Pooka) ∨ tolerate_high_pH(Pooka)",
        "conclusion": "tolerate_high_pH(Pooka)"
      },
      {
        "facts": [
          "survive_in_extremes(Pooka)",
          "fix_nitrogen(Pooka)"
        ],
        "rules": "survive_in_extremes(Pooka) → (fix_nitrogen(Pooka) ⊕ metabolize_sulfur(Pooka))",
        "conclusion": "¬metabolize_sulfur(Pooka)"
      },
      {
        "facts": [
          "tolerate_high_pH(Pooka)",
          "¬metabolize_sulfur(Pooka)"
        ],
        "rules": "(tolerate_high_pH(Pooka) ⊕ metabolize_sulfur(Pooka)) → thrive_in_alkaline(Pooka)",
        "conclusion": "thrive_in_alkaline(Pooka)"
      },
      {
        "facts": [
          "live_in_pH(Pooka)",
          "stain_darkly(Pooka)"
        ],
        "rules": "(live_in_pH(Pooka) ∧ stain_darkly(Pooka)) → bind_to_acidic_dyes(Pooka)",
        "conclusion": "bind_to_acidic_dyes(Pooka)"
      },
      {
        "facts": [
          "thrive_in_alkaline(Pooka)",
          "bind_to_acidic_dyes(Pooka)"
        ],
        "rules": "∀x ((thrive_in_alkaline(x) ∧ bind_to_acidic_dyes(x)) → basophilic(x))",
        "conclusion": "basophilic(Pooka)"
      }
    ],
    "conclusion": "Pooka is basophilic.",
    "conclusion_fol": "basophilic(Pooka)",
    "answer": "True",
    "context": [
      "Pooka does not adapt quickly.",
      "Pooka either adapts quickly or tolerates high pH.",
      "Pooka survives in extreme conditions.",
      "Pooka fixes nitrogen.",
      "If Pooka survives in extreme conditions, then it either fixes nitrogen or metabolizes sulfur, but not both.",
      "If Pooka either tolerates high pH or metabolizes sulfur (but not both), then it thrives in alkaline environments.",
      "Pooka lives in high pH environments.",
      "Pooka stains darkly.",
      "If Pooka lives in high pH environments and stains darkly, then it will bind to acidic dyes.",
      "For all microorganisms, if a microorganism thrives in alkaline environments and binds to acidic dyes, then it is basophilic."
    ],
    "context_fol": [
      "¬adapt_quickly(Pooka)",
      "adapt_quickly(Pooka) ∨ tolerate_high_pH(Pooka)",
      "survive_in_extremes(Pooka)",
      "fix_nitrogen(Pooka)",
      "survive_in_extremes(Pooka) → (fix_nitrogen(Pooka) ⊕ metabolize_sulfur(Pooka))",
      "(tolerate_high_pH(Pooka) ⊕ metabolize_sulfur(Pooka)) → thrive_in_alkaline(Pooka)",
      "live_in_pH(Pooka)",
      "stain_darkly(Pooka)",
      "(live_in_pH(Pooka) ∧ stain_darkly(Pooka)) → bind_to_acidic_dyes(Pooka)",
      "∀x ((thrive_in_alkaline(x) ∧ bind_to_acidic_dyes(x)) → basophilic(x))"
    ],
    "background_story": "Pooka was a unique microorganism discovered in a remote, alkaline lake. It was named for its peculiar affinity for basic environments, thriving in conditions where others would perish. Pooka's cells had a distinctive basophilic staining pattern, revealing its preference for binding to acidic dyes. Scientists were fascinated by Pooka's ability to survive in high pH levels, and its unique metabolic processes that allowed it to exploit this niche. As research on Pooka progressed, it became clear that this microbe played a crucial role in the lake's ecosystem, contributing to the cycling of nutrients and supporting a diverse array of aquatic life. Pooka's basophilic nature made it an intriguing subject for study, shedding light on the complex interactions between microorganisms and their environments.",
    "name": "Pooka",
    "keyword": "basophilic",
    "subject_category": "microorganism"
  },
  {
    "facts": [
      "Madilyn explores oceans.",
      "Madilyn publishes papers.",
      "Madilyn does not lead research.",
      "Madilyn collects samples."
    ],
    "facts_fol": [
      "explore_oceans(Madilyn)",
      "publish_papers(Madilyn)",
      "¬lead_research(Madilyn)",
      "collect_samples(Madilyn)"
    ],
    "rules": [
      "All marine biologists who explore oceans study fish and understand ecosystems.",
      "If a marine biologist publishes papers and leads research, then they are respected.",
      "Madilyn either examines shells or studies crabs, but not both.",
      "If Madilyn collects samples, then she examines shells and analyzes data."
    ],
    "rules_fol": [
      "∀x (explore_oceans(x) → (study_fish(x) ∧ understand_ecosystems(x)))",
      "∀x ((publish_papers(x) ∧ lead_research(x)) → respected(x))",
      "examine_shells(Madilyn) ⊕ study_crabs(Madilyn)",
      "collect_samples(Madilyn) → (examine_shells(Madilyn) ∧ analyze_data(Madilyn))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Madilyn either tracks dolphins or monitors sharks (but not both), then she studies fish.",
      "If Madilyn specializes in mollusks, then she either discovers new species or is respected (but not both).",
      "If Madilyn specializes in mollusks, then she either investigates plankton or studies crabs, but not both.",
      "If Madilyn either classifies species or investigates habitats (but not both), then she examines shells."
    ],
    "distracting_rules_fol": [
      "(track_dolphins(Madilyn) ⊕ monitor_sharks(Madilyn)) → study_fish(Madilyn)",
      "specialize_in_mollusks(Madilyn) → (discover_new_species(Madilyn) ⊕ respected(Madilyn))",
      "specialize_in_mollusks(Madilyn) → (investigate_plankton(Madilyn) ⊕ study_crabs(Madilyn))",
      "(classify_species(Madilyn) ⊕ investigate_habitats(Madilyn)) → examine_shells(Madilyn)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Madilyn collects samples."
        ],
        "rules": "If Madilyn collects samples, then she examines shells and analyzes data.",
        "conclusion": "Madilyn examines shells."
      },
      {
        "facts": [
          "Madilyn examines shells."
        ],
        "rules": "Madilyn either examines shells or studies crabs, but not both.",
        "conclusion": "Madilyn does not study crabs."
      },
      {
        "facts": [
          "Madilyn publishes papers.",
          "Madilyn does not lead research."
        ],
        "rules": "If a marine biologist publishes papers and leads research, then they are respected.",
        "conclusion": null
      },
      {
        "facts": [
          "Madilyn explores oceans."
        ],
        "rules": "All marine biologists who explore oceans study fish and understand ecosystems.",
        "conclusion": "Madilyn studies fish."
      },
      {
        "facts": [
          "Madilyn does not study crabs.",
          "Madilyn studies fish."
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "collect_samples(Madilyn)"
        ],
        "rules": "collect_samples(Madilyn) → (examine_shells(Madilyn) ∧ analyze_data(Madilyn))",
        "conclusion": "examine_shells(Madilyn)"
      },
      {
        "facts": [
          "examine_shells(Madilyn)"
        ],
        "rules": "examine_shells(Madilyn) ⊕ study_crabs(Madilyn)",
        "conclusion": "¬study_crabs(Madilyn)"
      },
      {
        "facts": [
          "publish_papers(Madilyn)",
          "¬lead_research(Madilyn)"
        ],
        "rules": "∀x ((publish_papers(x) ∧ lead_research(x)) → respected(x))",
        "conclusion": null
      },
      {
        "facts": [
          "explore_oceans(Madilyn)"
        ],
        "rules": "∀x (explore_oceans(x) → (study_fish(x) ∧ understand_ecosystems(x)))",
        "conclusion": "study_fish(Madilyn)"
      },
      {
        "facts": [
          "¬study_crabs(Madilyn)",
          "study_fish(Madilyn)"
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "conclusion": "If Madilyn studies either crabs or fish (but not both), then she is respected.",
    "conclusion_fol": "(study_crabs(Madilyn) ⊕ study_fish(Madilyn)) → respected(Madilyn)",
    "answer": "Uncertain",
    "context": [
      "Madilyn collects samples.",
      "If Madilyn collects samples, then she examines shells and analyzes data.",
      "Madilyn either examines shells or studies crabs, but not both.",
      "Madilyn publishes papers.",
      "Madilyn does not lead research.",
      "If a marine biologist publishes papers and leads research, then they are respected.",
      "Madilyn explores oceans.",
      "All marine biologists who explore oceans study fish and understand ecosystems."
    ],
    "context_fol": [
      "collect_samples(Madilyn)",
      "collect_samples(Madilyn) → (examine_shells(Madilyn) ∧ analyze_data(Madilyn))",
      "examine_shells(Madilyn) ⊕ study_crabs(Madilyn)",
      "publish_papers(Madilyn)",
      "¬lead_research(Madilyn)",
      "∀x ((publish_papers(x) ∧ lead_research(x)) → respected(x))",
      "explore_oceans(Madilyn)",
      "∀x (explore_oceans(x) → (study_fish(x) ∧ understand_ecosystems(x)))"
    ],
    "background_story": "Madilyn was a renowned marine biologist specializing in the study of crabs, particularly those belonging to the family Cancridae. Her fascination with these crustaceans began during her childhood, spending hours exploring the tide pools along the coast. As she delved deeper into her research, Madilyn made several groundbreaking discoveries about the behavior, habitat, and evolutionary patterns of Cancridae crabs. Her work took her to various parts of the world, from the coral reefs of the Caribbean to the rocky shores of Japan. Madilyn's dedication to understanding and protecting these often-overlooked creatures has significantly contributed to the field of marine biology, earning her the respect and admiration of her peers.",
    "name": "Madilyn",
    "keyword": "cancridae",
    "subject_category": "marine biologist"
  },
  {
    "facts": [
      "Josie is not a proud local.",
      "Josie loves her hometown.",
      "Josie does not enjoy traditions."
    ],
    "facts_fol": [
      "¬proud_local(Josie)",
      "loves_hometown(Josie)",
      "¬enjoys_traditions(Josie)"
    ],
    "rules": [
      "For all humans, if someone is a proud local, then they either know the local history or support the community (or both).",
      "If Josie loves her hometown, then she either knows the local history or appreciates the culture, but not both.",
      "Everyone enjoys traditions or appreciates culture."
    ],
    "rules_fol": [
      "∀x (proud_local(x) → (knows_local_history(x) ∨ supports_community(x)))",
      "loves_hometown(Josie) → (knows_local_history(Josie) ⊕ appreciates_culture(Josie))",
      "∀x (enjoys_traditions(x) ∨ appreciates_culture(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Josie lives locally, then she either knows the local history or shares her knowledge with others.",
      "If someone either visits museums or attends festivals (but not both), then they appreciate culture."
    ],
    "distracting_rules_fol": [
      "lives_locally(Josie) → (knows_local_history(Josie) ∨ shares_knowledge(Josie))",
      "∀x ((visits_museums(x) ⊕ attends_festivals(x)) → appreciates_culture(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Josie does not enjoy traditions."
        ],
        "rules": "Everyone enjoys traditions or appreciates culture.",
        "conclusion": "Josie appreciates the culture."
      },
      {
        "facts": [
          "Josie loves her hometown.",
          "Josie appreciates the culture."
        ],
        "rules": "If Josie loves her hometown, then she either knows the local history or appreciates the culture, but not both.",
        "conclusion": "Josie does not know the local history."
      },
      {
        "facts": [
          "Josie is not a proud local.",
          "Josie does not know the local history."
        ],
        "rules": "For all humans, if someone is a proud local, then they either know the local history or support the community (or both).",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬enjoys_traditions(Josie)"
        ],
        "rules": "∀x (enjoys_traditions(x) ∨ appreciates_culture(x))",
        "conclusion": "appreciates_culture(Josie)"
      },
      {
        "facts": [
          "loves_hometown(Josie)",
          "appreciates_culture(Josie)"
        ],
        "rules": "loves_hometown(Josie) → (knows_local_history(Josie) ⊕ appreciates_culture(Josie))",
        "conclusion": "¬knows_local_history(Josie)"
      },
      {
        "facts": [
          "¬proud_local(Josie)",
          "¬knows_local_history(Josie)"
        ],
        "rules": "∀x (proud_local(x) → (knows_local_history(x) ∨ supports_community(x)))",
        "conclusion": null
      }
    ],
    "conclusion": "Josie does not support the community.",
    "conclusion_fol": "¬supports_community(Josie)",
    "answer": "Uncertain",
    "context": [
      "Josie does not enjoy traditions.",
      "Everyone enjoys traditions or appreciates culture.",
      "Josie loves her hometown.",
      "If Josie loves her hometown, then she either knows the local history or appreciates the culture, but not both.",
      "Josie is not a proud local.",
      "For all humans, if someone is a proud local, then they either know the local history or support the community (or both)."
    ],
    "context_fol": [
      "¬enjoys_traditions(Josie)",
      "∀x (enjoys_traditions(x) ∨ appreciates_culture(x))",
      "loves_hometown(Josie)",
      "loves_hometown(Josie) → (knows_local_history(Josie) ⊕ appreciates_culture(Josie))",
      "¬proud_local(Josie)",
      "∀x (proud_local(x) → (knows_local_history(x) ∨ supports_community(x)))"
    ],
    "background_story": "Josie was born and raised in Drogheda, a charming town on the east coast of Ireland. She grew up exploring the historic streets, visiting the ancient Magdalene Tower, and listening to the tales of her ancestors who had lived in the town for generations. Josie's love for Drogheda only deepened as she got older, and she became an active member of the local community, volunteering at the town's museum and helping to organize cultural events. Her passion for the town's heritage led her to start a successful tour guide business, sharing the rich history and hidden gems of Drogheda with visitors from around the world. Josie's pride and dedication to her hometown made her a beloved figure in the community, and her tours a must-do experience for anyone visiting Drogheda.",
    "name": "Josie",
    "keyword": "drogheda",
    "subject_category": "human"
  },
  {
    "facts": [
      "Eloise is a bibliophile.",
      "Eloise does not preserve pages.",
      "Eloise reads classics.",
      "Eloise is a scholar.",
      "Eloise translates tomes."
    ],
    "facts_fol": [
      "is_bibliophile(Eloise)",
      "¬preserve_pages(Eloise)",
      "read_classics(Eloise)",
      "is_scholar(Eloise)",
      "translate_tomes(Eloise)"
    ],
    "rules": [
      "If Eloise handles rare books, then she gains historical knowledge.",
      "If Eloise is a bibliophile, then she either collects manuscripts or handles rare books, but not both.",
      "If Eloise either studies texts or preserves pages (but not both), then she collects manuscripts.",
      "If someone either reads classics or analyzes scripts (but not both), then they study texts.",
      "If Eloise is a scholar, then she either analyzes scripts or translates tomes, but not both."
    ],
    "rules_fol": [
      "handle_rare_books(Eloise) → gain_historical_knowledge(Eloise)",
      "is_bibliophile(Eloise) → (collect_manuscripts(Eloise) ⊕ handle_rare_books(Eloise))",
      "(study_texts(Eloise) ⊕ preserve_pages(Eloise)) → collect_manuscripts(Eloise)",
      "∀x ((read_classics(x) ⊕ analyze_scripts(x)) → study_texts(x))",
      "is_scholar(Eloise) → (analyze_scripts(Eloise) ⊕ translate_tomes(Eloise))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Anyone who restores artifacts or conserves tomes can handle rare books.",
      "If Eloise loves reading, then she collects manuscripts and values history.",
      "If Eloise loves literature, then she either studies texts or conserves artifacts.",
      "If Eloise loves history, then she analyzes scripts and learns languages."
    ],
    "distracting_rules_fol": [
      "∀x ((restore_artifacts(x) ∨ conserve_tomes(x)) → handle_rare_books(x))",
      "love_reading(Eloise) → (collect_manuscripts(Eloise) ∧ value_history(Eloise))",
      "love_literature(Eloise) → (study_texts(Eloise) ∨ conserve_artifacts(Eloise))",
      "love_history(Eloise) → (analyze_scripts(Eloise) ∧ learn_languages(Eloise))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Eloise is a scholar.",
          "Eloise translates tomes."
        ],
        "rules": "If Eloise is a scholar, then she either analyzes scripts or translates tomes, but not both.",
        "conclusion": "Eloise does not analyze scripts."
      },
      {
        "facts": [
          "Eloise reads classics.",
          "Eloise does not analyze scripts."
        ],
        "rules": "If someone either reads classics or analyzes scripts (but not both), then they study texts.",
        "conclusion": "Eloise studies texts."
      },
      {
        "facts": [
          "Eloise studies texts.",
          "Eloise does not preserve pages."
        ],
        "rules": "If Eloise either studies texts or preserves pages (but not both), then she collects manuscripts.",
        "conclusion": "Eloise collects manuscripts."
      },
      {
        "facts": [
          "Eloise is a bibliophile.",
          "Eloise collects manuscripts."
        ],
        "rules": "If Eloise is a bibliophile, then she either collects manuscripts or handles rare books, but not both.",
        "conclusion": "Eloise does not handle rare books."
      },
      {
        "facts": [
          "Eloise does not handle rare books."
        ],
        "rules": "If Eloise handles rare books, then she gains historical knowledge.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "is_scholar(Eloise)",
          "translate_tomes(Eloise)"
        ],
        "rules": "is_scholar(Eloise) → (analyze_scripts(Eloise) ⊕ translate_tomes(Eloise))",
        "conclusion": "¬analyze_scripts(Eloise)"
      },
      {
        "facts": [
          "read_classics(Eloise)",
          "¬analyze_scripts(Eloise)"
        ],
        "rules": "∀x ((read_classics(x) ⊕ analyze_scripts(x)) → study_texts(x))",
        "conclusion": "study_texts(Eloise)"
      },
      {
        "facts": [
          "study_texts(Eloise)",
          "¬preserve_pages(Eloise)"
        ],
        "rules": "(study_texts(Eloise) ⊕ preserve_pages(Eloise)) → collect_manuscripts(Eloise)",
        "conclusion": "collect_manuscripts(Eloise)"
      },
      {
        "facts": [
          "is_bibliophile(Eloise)",
          "collect_manuscripts(Eloise)"
        ],
        "rules": "is_bibliophile(Eloise) → (collect_manuscripts(Eloise) ⊕ handle_rare_books(Eloise))",
        "conclusion": "¬handle_rare_books(Eloise)"
      },
      {
        "facts": [
          "¬handle_rare_books(Eloise)"
        ],
        "rules": "handle_rare_books(Eloise) → gain_historical_knowledge(Eloise)",
        "conclusion": null
      }
    ],
    "conclusion": "Eloise does not gain historical knowledge.",
    "conclusion_fol": "¬gain_historical_knowledge(Eloise)",
    "answer": "Uncertain",
    "context": [
      "Eloise is a scholar.",
      "Eloise translates tomes.",
      "If Eloise is a scholar, then she either analyzes scripts or translates tomes, but not both.",
      "Eloise reads classics.",
      "If someone either reads classics or analyzes scripts (but not both), then they study texts.",
      "Eloise does not preserve pages.",
      "If Eloise either studies texts or preserves pages (but not both), then she collects manuscripts.",
      "Eloise is a bibliophile.",
      "If Eloise is a bibliophile, then she either collects manuscripts or handles rare books, but not both.",
      "If Eloise handles rare books, then she gains historical knowledge."
    ],
    "context_fol": [
      "is_scholar(Eloise)",
      "translate_tomes(Eloise)",
      "is_scholar(Eloise) → (analyze_scripts(Eloise) ⊕ translate_tomes(Eloise))",
      "read_classics(Eloise)",
      "∀x ((read_classics(x) ⊕ analyze_scripts(x)) → study_texts(x))",
      "¬preserve_pages(Eloise)",
      "(study_texts(Eloise) ⊕ preserve_pages(Eloise)) → collect_manuscripts(Eloise)",
      "is_bibliophile(Eloise)",
      "is_bibliophile(Eloise) → (collect_manuscripts(Eloise) ⊕ handle_rare_books(Eloise))",
      "handle_rare_books(Eloise) → gain_historical_knowledge(Eloise)"
    ],
    "background_story": "Eloise was a renowned bibliotist with a passion for rare and ancient books. Her love affair with literature began in her childhood, spending hours in the dusty corners of her father's antique bookstore. As she grew older, Eloise's fascination with the written word only deepened, leading her to become a respected collector and conservator of rare manuscripts. Her workshop, tucked away in a quiet alley, was a treasure trove of leather-bound tomes and yellowed scrolls. Eloise spent her days meticulously restoring and studying these precious artifacts, uncovering hidden secrets and stories within their yellowed pages. Her dedication to the preservation of knowledge earned her the admiration of scholars and book lovers worldwide, cementing her reputation as one of the leading bibliotists of her time.",
    "name": "Eloise",
    "keyword": "bibliotist",
    "subject_category": "human"
  },
  {
    "facts": [
      "Kaliyah speaks out against injustice.",
      "Kaliyah is influential.",
      "Kaliyah touches hearts.",
      "Kaliyah sings soulfully."
    ],
    "facts_fol": [
      "speak_out_against_injustice(Kaliyah)",
      "is_influential(Kaliyah)",
      "touches_hearts(Kaliyah)",
      "sings_soulfully(Kaliyah)"
    ],
    "rules": [
      "If Kaliyah has a platform and speaks out against injustice, then she will inspire others.",
      "If Kaliyah is influential, then she either has a platform or is charismatic, but not both.",
      "For all humans, if they can move the crowd and touch hearts, then they are charismatic.",
      "If Kaliyah sings soulfully, then she will move the crowd."
    ],
    "rules_fol": [
      "(have_a_platform(Kaliyah) ∧ speak_out_against_injustice(Kaliyah)) → inspire_others(Kaliyah)",
      "is_influential(Kaliyah) → (have_a_platform(Kaliyah) ⊕ is_charismatic(Kaliyah))",
      "∀x ((moves_crowd(x) ∧ touches_hearts(x)) → is_charismatic(x))",
      "sings_soulfully(Kaliyah) → moves_crowd(Kaliyah)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Any human who is famous or has followers will have a platform.",
      "Anyone who leads with passion is charismatic.",
      "Kaliyah either writes songs or moves the crowd."
    ],
    "distracting_rules_fol": [
      "∀x ((is_famous(x) ∨ has_followers(x)) → have_a_platform(x))",
      "∀x (leads_with_passion(x) → is_charismatic(x))",
      "writes_songs(Kaliyah) ∨ moves_crowd(Kaliyah)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Kaliyah sings soulfully."
        ],
        "rules": "If Kaliyah sings soulfully, then she will move the crowd.",
        "conclusion": "Kaliyah moves the crowd."
      },
      {
        "facts": [
          "Kaliyah moves the crowd.",
          "Kaliyah touches hearts."
        ],
        "rules": "For all humans, if they can move the crowd and touch hearts, then they are charismatic.",
        "conclusion": "Kaliyah is charismatic."
      },
      {
        "facts": [
          "Kaliyah is influential.",
          "Kaliyah is charismatic."
        ],
        "rules": "If Kaliyah is influential, then she either has a platform or is charismatic, but not both.",
        "conclusion": "Kaliyah does not have a platform."
      },
      {
        "facts": [
          "Kaliyah does not have a platform.",
          "Kaliyah speaks out against injustice."
        ],
        "rules": "If Kaliyah has a platform and speaks out against injustice, then she will inspire others.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "sings_soulfully(Kaliyah)"
        ],
        "rules": "sings_soulfully(Kaliyah) → moves_crowd(Kaliyah)",
        "conclusion": "moves_crowd(Kaliyah)"
      },
      {
        "facts": [
          "moves_crowd(Kaliyah)",
          "touches_hearts(Kaliyah)"
        ],
        "rules": "∀x ((moves_crowd(x) ∧ touches_hearts(x)) → is_charismatic(x))",
        "conclusion": "is_charismatic(Kaliyah)"
      },
      {
        "facts": [
          "is_influential(Kaliyah)",
          "is_charismatic(Kaliyah)"
        ],
        "rules": "is_influential(Kaliyah) → (have_a_platform(Kaliyah) ⊕ is_charismatic(Kaliyah))",
        "conclusion": "¬have_a_platform(Kaliyah)"
      },
      {
        "facts": [
          "¬have_a_platform(Kaliyah)",
          "speak_out_against_injustice(Kaliyah)"
        ],
        "rules": "(have_a_platform(Kaliyah) ∧ speak_out_against_injustice(Kaliyah)) → inspire_others(Kaliyah)",
        "conclusion": null
      }
    ],
    "conclusion": "Kaliyah inspires others.",
    "conclusion_fol": "inspire_others(Kaliyah)",
    "answer": "Uncertain",
    "context": [
      "Kaliyah sings soulfully.",
      "If Kaliyah sings soulfully, then she will move the crowd.",
      "Kaliyah touches hearts.",
      "For all humans, if they can move the crowd and touch hearts, then they are charismatic.",
      "Kaliyah is influential.",
      "If Kaliyah is influential, then she either has a platform or is charismatic, but not both.",
      "Kaliyah speaks out against injustice.",
      "If Kaliyah has a platform and speaks out against injustice, then she will inspire others."
    ],
    "context_fol": [
      "sings_soulfully(Kaliyah)",
      "sings_soulfully(Kaliyah) → moves_crowd(Kaliyah)",
      "touches_hearts(Kaliyah)",
      "∀x ((moves_crowd(x) ∧ touches_hearts(x)) → is_charismatic(x))",
      "is_influential(Kaliyah)",
      "is_influential(Kaliyah) → (have_a_platform(Kaliyah) ⊕ is_charismatic(Kaliyah))",
      "speak_out_against_injustice(Kaliyah)",
      "(have_a_platform(Kaliyah) ∧ speak_out_against_injustice(Kaliyah)) → inspire_others(Kaliyah)"
    ],
    "background_story": "Kaliyah was a talented young singer-songwriter with a voice that could melt hearts. Growing up in a musical family, she was always encouraged to express herself through song. As she grew older, Kaliyah found her voice not just in music, but also in advocacy. She used her platform to speak out against social injustices, inspiring countless others to join her. With every performance, Kaliyah's voiced messages of hope and equality resonated deeply with her audience. Her debut album, 'Voices United,' became a chart-topper, cementing her status as a rising star in the music industry. Through her music, Kaliyah continues to empower and uplift, proving that a single, strong voice can make a profound difference.",
    "name": "Kaliyah",
    "keyword": "voiced",
    "subject_category": "human"
  },
  {
    "facts": [
      "Kaydence is well-maintained.",
      "Kaydence does not run smoothly."
    ],
    "facts_fol": [
      "is_maintained(Kaydence)",
      "¬runs_smoothly(Kaydence)"
    ],
    "rules": [
      "For every car, it is either damaged or undamaged, but not both.",
      "Kaydence is either polished or damaged, but not both.",
      "If Kaydence is well-maintained, then she is either rusty or polished, but not both.",
      "A car is either rusty or runs smoothly, but not both."
    ],
    "rules_fol": [
      "∀x (damaged(x) ⊕ undamaged(x))",
      "is_polished(Kaydence) ⊕ damaged(Kaydence)",
      "is_maintained(Kaydence) → (is_rusty(Kaydence) ⊕ is_polished(Kaydence))",
      "∀x (runs_smoothly(x) ⊕ is_rusty(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Any car that has a dent or needs repair is damaged.",
      "If Kaydence is fast, then she is polished and looks new.",
      "If Kaydence has a dent, then she either needs a repaint or is rusty (or both)."
    ],
    "distracting_rules_fol": [
      "∀x ((has_dent(x) ∨ needs_repair(x)) → damaged(x))",
      "fast(Kaydence) → (is_polished(Kaydence) ∧ looks_new(Kaydence))",
      "has_dent(Kaydence) → (needs_repaint(Kaydence) ∨ is_rusty(Kaydence))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Kaydence does not run smoothly."
        ],
        "rules": "A car is either rusty or runs smoothly, but not both.",
        "conclusion": "Kaydence is rusty."
      },
      {
        "facts": [
          "Kaydence is well-maintained.",
          "Kaydence is rusty."
        ],
        "rules": "If Kaydence is well-maintained, then she is either rusty or polished, but not both.",
        "conclusion": "Kaydence is not polished."
      },
      {
        "facts": [
          "Kaydence is not polished."
        ],
        "rules": "Kaydence is either polished or damaged, but not both.",
        "conclusion": "Kaydence is damaged."
      },
      {
        "facts": [
          "Kaydence is damaged."
        ],
        "rules": "For every car, it is either damaged or undamaged, but not both.",
        "conclusion": "Kaydence is not undamaged, which means Kaydence is damaged."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬runs_smoothly(Kaydence)"
        ],
        "rules": "∀x (runs_smoothly(x) ⊕ is_rusty(x))",
        "conclusion": "is_rusty(Kaydence)"
      },
      {
        "facts": [
          "is_maintained(Kaydence)",
          "is_rusty(Kaydence)"
        ],
        "rules": "is_maintained(Kaydence) → (is_rusty(Kaydence) ⊕ is_polished(Kaydence))",
        "conclusion": "¬is_polished(Kaydence)"
      },
      {
        "facts": [
          "¬is_polished(Kaydence)"
        ],
        "rules": "is_polished(Kaydence) ⊕ damaged(Kaydence)",
        "conclusion": "damaged(Kaydence)"
      },
      {
        "facts": [
          "damaged(Kaydence)"
        ],
        "rules": "∀x (damaged(x) ⊕ undamaged(x))",
        "conclusion": "¬undamaged(Kaydence)"
      }
    ],
    "conclusion": "Kaydence is not undamaged, which means Kaydence is damaged.",
    "conclusion_fol": "¬undamaged(Kaydence)",
    "answer": "True",
    "context": [
      "Kaydence does not run smoothly.",
      "A car is either rusty or runs smoothly, but not both.",
      "Kaydence is well-maintained.",
      "If Kaydence is well-maintained, then she is either rusty or polished, but not both.",
      "Kaydence is either polished or damaged, but not both.",
      "For every car, it is either damaged or undamaged, but not both."
    ],
    "context_fol": [
      "¬runs_smoothly(Kaydence)",
      "∀x (runs_smoothly(x) ⊕ is_rusty(x))",
      "is_maintained(Kaydence)",
      "is_maintained(Kaydence) → (is_rusty(Kaydence) ⊕ is_polished(Kaydence))",
      "is_polished(Kaydence) ⊕ damaged(Kaydence)",
      "∀x (damaged(x) ⊕ undamaged(x))"
    ],
    "background_story": "Kaydence was a sleek, black sports car owned by a young professional named Alex. She was his pride and joy, always meticulously maintained and polished. However, one fateful day, disaster struck when a careless parking lot incident left a noticeable dent on Kaydence's otherwise flawless hood. Alex was devastated, feeling as though a part of him had been damaged. Despite the setback, he decided to repair Kaydence to her former glory. The process was lengthy and expensive, but the end result was worth it. Kaydence emerged from the repair shop looking better than ever, her dent a distant memory. The experience taught Alex the value of perseverance and the importance of taking care of the things that matter most.",
    "name": "Kaydence",
    "keyword": "dent",
    "subject_category": "car"
  },
  {
    "facts": [
      "Grey loves wildlife.",
      "Grey is a biology expert."
    ],
    "facts_fol": [
      "love_wildlife(Grey)",
      "is_biology_expert(Grey)"
    ],
    "rules": [
      "If Grey either studies reptiles or studies amphibians (but not both), then he is a herpetologist.",
      "If Grey loves wildlife, then he studies amphibians and explores habitats.",
      "Grey is either a biology expert or studies reptiles, but not both."
    ],
    "rules_fol": [
      "(study_reptiles(Grey) ⊕ study_amphibians(Grey)) → herpetologist(Grey)",
      "love_wildlife(Grey) → (study_amphibians(Grey) ∧ explore_habitats(Grey))",
      "is_biology_expert(Grey) ⊕ study_reptiles(Grey)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Grey pursues conservation, then he travels extensively and studies amphibians.",
      "If Grey has a curious mind, then he enjoys the outdoors and studies reptiles."
    ],
    "distracting_rules_fol": [
      "pursue_conservation(Grey) → (travel_extensively(Grey) ∧ study_amphibians(Grey))",
      "curious_mind(Grey) → (enjoy_outdoors(Grey) ∧ study_reptiles(Grey))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Grey is a biology expert."
        ],
        "rules": "Grey is either a biology expert or studies reptiles, but not both.",
        "conclusion": "Grey does not study reptiles."
      },
      {
        "facts": [
          "Grey loves wildlife."
        ],
        "rules": "If Grey loves wildlife, then he studies amphibians and explores habitats.",
        "conclusion": "Grey studies amphibians."
      },
      {
        "facts": [
          "Grey does not study reptiles.",
          "Grey studies amphibians."
        ],
        "rules": "If Grey either studies reptiles or studies amphibians (but not both), then he is a herpetologist.",
        "conclusion": "Grey is a herpetologist."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "is_biology_expert(Grey)"
        ],
        "rules": "is_biology_expert(Grey) ⊕ study_reptiles(Grey)",
        "conclusion": "¬study_reptiles(Grey)"
      },
      {
        "facts": [
          "love_wildlife(Grey)"
        ],
        "rules": "love_wildlife(Grey) → (study_amphibians(Grey) ∧ explore_habitats(Grey))",
        "conclusion": "study_amphibians(Grey)"
      },
      {
        "facts": [
          "¬study_reptiles(Grey)",
          "study_amphibians(Grey)"
        ],
        "rules": "(study_reptiles(Grey) ⊕ study_amphibians(Grey)) → herpetologist(Grey)",
        "conclusion": "herpetologist(Grey)"
      }
    ],
    "conclusion": "Grey is a herpetologist.",
    "conclusion_fol": "herpetologist(Grey)",
    "answer": "True",
    "context": [
      "Grey is a biology expert.",
      "Grey is either a biology expert or studies reptiles, but not both.",
      "Grey loves wildlife.",
      "If Grey loves wildlife, then he studies amphibians and explores habitats.",
      "If Grey either studies reptiles or studies amphibians (but not both), then he is a herpetologist."
    ],
    "context_fol": [
      "is_biology_expert(Grey)",
      "is_biology_expert(Grey) ⊕ study_reptiles(Grey)",
      "love_wildlife(Grey)",
      "love_wildlife(Grey) → (study_amphibians(Grey) ∧ explore_habitats(Grey))",
      "(study_reptiles(Grey) ⊕ study_amphibians(Grey)) → herpetologist(Grey)"
    ],
    "background_story": "Grey had always been fascinated by the scaly creatures that slithered and crawled through the underbrush. As a child, he spent hours exploring the woods behind his home, catching snakes and lizards to study and learn from. This early fascination blossomed into a full-blown passion for herpetology, the study of reptiles and amphibians. Grey pursued his interest with zeal, earning a degree in biology and going on to become a renowned herpetologist. He traveled the world, discovering new species and working tirelessly to protect and conserve habitats for these often-misunderstood creatures. Grey's work took him from the desert landscapes of Australia to the rainforests of South America, always seeking to advance the field of herpetology and share his love for these incredible animals with the world.",
    "name": "Grey",
    "keyword": "herpetology",
    "subject_category": "human"
  },
  {
    "facts": [
      "Sylas rides clouds.",
      "Sylas controls the weather."
    ],
    "facts_fol": [
      "rides_clouds(Sylas)",
      "controls_weather(Sylas)"
    ],
    "rules": [
      "Sylas either has wings or is powerful (or both).",
      "Any mythical creature that rides clouds and commands winds has wings.",
      "If Sylas controls the weather, then he can command the winds."
    ],
    "rules_fol": [
      "has_wings(Sylas) ∨ is_powerful(Sylas)",
      "∀x ((rides_clouds(x) ∧ commands_winds(x)) → has_wings(x))",
      "controls_weather(Sylas) → commands_winds(Sylas)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Sylas either flies or soars high (but not both), then he has wings.",
      "If Sylas soars through the skies, then he can command the winds."
    ],
    "distracting_rules_fol": [
      "(is_flying(Sylas) ⊕ soars_high(Sylas)) → has_wings(Sylas)",
      "soars_skies(Sylas) → commands_winds(Sylas)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Sylas controls the weather."
        ],
        "rules": "If Sylas controls the weather, then he can command the winds.",
        "conclusion": "Sylas commands winds."
      },
      {
        "facts": [
          "Sylas rides clouds.",
          "Sylas commands winds."
        ],
        "rules": "Any mythical creature that rides clouds and commands winds has wings.",
        "conclusion": "Sylas has wings."
      },
      {
        "facts": [
          "Sylas has wings."
        ],
        "rules": "Sylas either has wings or is powerful (or both).",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "controls_weather(Sylas)"
        ],
        "rules": "controls_weather(Sylas) → commands_winds(Sylas)",
        "conclusion": "commands_winds(Sylas)"
      },
      {
        "facts": [
          "rides_clouds(Sylas)",
          "commands_winds(Sylas)"
        ],
        "rules": "∀x ((rides_clouds(x) ∧ commands_winds(x)) → has_wings(x))",
        "conclusion": "has_wings(Sylas)"
      },
      {
        "facts": [
          "has_wings(Sylas)"
        ],
        "rules": "has_wings(Sylas) ∨ is_powerful(Sylas)",
        "conclusion": null
      }
    ],
    "conclusion": "Sylas is powerful.",
    "conclusion_fol": "is_powerful(Sylas)",
    "answer": "Uncertain",
    "context": [
      "Sylas controls the weather.",
      "If Sylas controls the weather, then he can command the winds.",
      "Sylas rides clouds.",
      "Any mythical creature that rides clouds and commands winds has wings.",
      "Sylas either has wings or is powerful (or both)."
    ],
    "context_fol": [
      "controls_weather(Sylas)",
      "controls_weather(Sylas) → commands_winds(Sylas)",
      "rides_clouds(Sylas)",
      "∀x ((rides_clouds(x) ∧ commands_winds(x)) → has_wings(x))",
      "has_wings(Sylas) ∨ is_powerful(Sylas)"
    ],
    "background_story": "In the ancient lore of the mystical realm, Sylas was a revered sura - a winged, lion-like creature of immense power and wisdom. With the body of a lion and the wings of an eagle, Sylas soared through the skies, commanding the winds and the clouds. His domain was the realm of the sun, where he rode the solar winds and harnessed its energy. Sylas was known for his fierce protection of the innocent and his unwavering dedication to justice. His roar could be heard for miles, striking fear into the hearts of wrongdoers, while his gentle purrs could heal the deepest wounds. As a sura, Sylas embodied the perfect balance of strength, courage, and compassion, making him a legendary hero in the annals of mythical history.",
    "name": "Sylas",
    "keyword": "sura",
    "subject_category": "mythical creature"
  },
  {
    "facts": [
      "Daleyza is an activist.",
      "Daleyza covers politics.",
      "Daleyza is a seeker of fact.",
      "Daleyza does not write editorials.",
      "Daleyza does not champion free speech."
    ],
    "facts_fol": [
      "activist(Daleyza)",
      "covers_politics(Daleyza)",
      "seeker_of_fact(Daleyza)",
      "¬writes_editorials(Daleyza)",
      "¬champions_free_speech(Daleyza)"
    ],
    "rules": [
      "For all people, if they are an investigative journalist or a truth seeker, then they expose injustice.",
      "If Daleyza is a reporter, then she is either an activist or an investigative journalist, but not both.",
      "If Daleyza either writes editorials or covers politics (but not both), then she is a reporter.",
      "If Daleyza is a seeker of fact, then she is either a whistleblower or a truth seeker, but not both.",
      "Daleyza is either a champion of free speech or a whistleblower, but not both."
    ],
    "rules_fol": [
      "∀x ((investigative_journalist(x) ∨ truth_seeker(x)) → exposes_injustice(x))",
      "reporter(Daleyza) → (activist(Daleyza) ⊕ investigative_journalist(Daleyza))",
      "(writes_editorials(Daleyza) ⊕ covers_politics(Daleyza)) → reporter(Daleyza)",
      "seeker_of_fact(Daleyza) → (whistleblower(Daleyza) ⊕ truth_seeker(Daleyza))",
      "champions_free_speech(Daleyza) ⊕ whistleblower(Daleyza)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Daleyza is a fearless writer, then she is a passionate advocate and an investigative journalist.",
      "Daleyza either seeks truth or is a reporter.",
      "If Daleyza is a fearless writer, then she either speaks for the marginalized or is a truth seeker (or both).",
      "Any person who reveals corruption or speaks out can be a whistleblower."
    ],
    "distracting_rules_fol": [
      "fearless_writer(Daleyza) → (passionate_advocate(Daleyza) ∧ investigative_journalist(Daleyza))",
      "seeks_truth(Daleyza) ∨ reporter(Daleyza)",
      "fearless_writer(Daleyza) → (speaks_for_marginalized(Daleyza) ∨ truth_seeker(Daleyza))",
      "∀x ((reveals_corruption(x) ∨ speaks_out(x)) → whistleblower(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Daleyza does not champion free speech."
        ],
        "rules": "Daleyza is either a champion of free speech or a whistleblower, but not both.",
        "conclusion": "Daleyza is a whistleblower."
      },
      {
        "facts": [
          "Daleyza is a seeker of fact.",
          "Daleyza is a whistleblower."
        ],
        "rules": "If Daleyza is a seeker of fact, then she is either a whistleblower or a truth seeker, but not both.",
        "conclusion": "Daleyza is not a truth seeker."
      },
      {
        "facts": [
          "Daleyza does not write editorials.",
          "Daleyza covers politics."
        ],
        "rules": "If Daleyza either writes editorials or covers politics (but not both), then she is a reporter.",
        "conclusion": "Daleyza is a reporter."
      },
      {
        "facts": [
          "Daleyza is a reporter.",
          "Daleyza is an activist."
        ],
        "rules": "If Daleyza is a reporter, then she is either an activist or an investigative journalist, but not both.",
        "conclusion": "Daleyza is not an investigative journalist."
      },
      {
        "facts": [
          "Daleyza is not an investigative journalist.",
          "Daleyza is not a truth seeker."
        ],
        "rules": "For all people, if they are an investigative journalist or a truth seeker, then they expose injustice.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬champions_free_speech(Daleyza)"
        ],
        "rules": "champions_free_speech(Daleyza) ⊕ whistleblower(Daleyza)",
        "conclusion": "whistleblower(Daleyza)"
      },
      {
        "facts": [
          "seeker_of_fact(Daleyza)",
          "whistleblower(Daleyza)"
        ],
        "rules": "seeker_of_fact(Daleyza) → (whistleblower(Daleyza) ⊕ truth_seeker(Daleyza))",
        "conclusion": "¬truth_seeker(Daleyza)"
      },
      {
        "facts": [
          "¬writes_editorials(Daleyza)",
          "covers_politics(Daleyza)"
        ],
        "rules": "(writes_editorials(Daleyza) ⊕ covers_politics(Daleyza)) → reporter(Daleyza)",
        "conclusion": "reporter(Daleyza)"
      },
      {
        "facts": [
          "reporter(Daleyza)",
          "activist(Daleyza)"
        ],
        "rules": "reporter(Daleyza) → (activist(Daleyza) ⊕ investigative_journalist(Daleyza))",
        "conclusion": "¬investigative_journalist(Daleyza)"
      },
      {
        "facts": [
          "¬investigative_journalist(Daleyza)",
          "¬truth_seeker(Daleyza)"
        ],
        "rules": "∀x ((investigative_journalist(x) ∨ truth_seeker(x)) → exposes_injustice(x))",
        "conclusion": null
      }
    ],
    "conclusion": "Daleyza exposes injustice.",
    "conclusion_fol": "exposes_injustice(Daleyza)",
    "answer": "Uncertain",
    "context": [
      "Daleyza does not champion free speech.",
      "Daleyza is either a champion of free speech or a whistleblower, but not both.",
      "Daleyza is a seeker of fact.",
      "If Daleyza is a seeker of fact, then she is either a whistleblower or a truth seeker, but not both.",
      "Daleyza does not write editorials.",
      "Daleyza covers politics.",
      "If Daleyza either writes editorials or covers politics (but not both), then she is a reporter.",
      "Daleyza is an activist.",
      "If Daleyza is a reporter, then she is either an activist or an investigative journalist, but not both.",
      "For all people, if they are an investigative journalist or a truth seeker, then they expose injustice."
    ],
    "context_fol": [
      "¬champions_free_speech(Daleyza)",
      "champions_free_speech(Daleyza) ⊕ whistleblower(Daleyza)",
      "seeker_of_fact(Daleyza)",
      "seeker_of_fact(Daleyza) → (whistleblower(Daleyza) ⊕ truth_seeker(Daleyza))",
      "¬writes_editorials(Daleyza)",
      "covers_politics(Daleyza)",
      "(writes_editorials(Daleyza) ⊕ covers_politics(Daleyza)) → reporter(Daleyza)",
      "activist(Daleyza)",
      "reporter(Daleyza) → (activist(Daleyza) ⊕ investigative_journalist(Daleyza))",
      "∀x ((investigative_journalist(x) ∨ truth_seeker(x)) → exposes_injustice(x))"
    ],
    "background_story": "Daleyza, a passionate journalist, was known for her fearless reporting. She had a knack for animadverting on social injustices, using her platform to criticize and expose wrongdoing. Her latest investigative series targeted corrupt government officials, sparking a national debate. Despite facing backlash and intimidation, Daleyza remained resolute, refusing to back down from her pursuit of truth. Her scathing editorials and commentaries were widely read and shared, earning her both accolades and enemies. Through her work, Daleyza gave voice to the marginalized and held those in power accountable, proving that a free press is the cornerstone of a healthy democracy. Her unwavering commitment to speaking truth to power inspired a new generation of journalists to follow in her footsteps.",
    "name": "Daleyza",
    "keyword": "animadvert",
    "subject_category": "person"
  },
  {
    "facts": [
      "Yara is inspirational.",
      "Yara is not skilled.",
      "Yara trains hard.",
      "Yara does not set goals."
    ],
    "facts_fol": [
      "inspirational(Yara)",
      "¬skilled(Yara)",
      "trains_hard(Yara)",
      "¬sets_goals(Yara)"
    ],
    "rules": [
      "If Yara is athletic, then she is either competitive or inspirational, but not both.",
      "If Yara is dedicated, then she either has skills or is athletic (or both).",
      "If Yara either trains hard or sets goals (but not both), then she is dedicated."
    ],
    "rules_fol": [
      "athletic(Yara) → (competitive(Yara) ⊕ inspirational(Yara))",
      "dedicated(Yara) → (skilled(Yara) ∨ athletic(Yara))",
      "(trains_hard(Yara) ⊕ sets_goals(Yara)) → dedicated(Yara)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Yara is fit, then she is athletic.",
      "If someone is focused, then they are disciplined and dedicated."
    ],
    "distracting_rules_fol": [
      "is_fit(Yara) → athletic(Yara)",
      "∀x (focused(x) → (disciplined(x) ∧ dedicated(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Yara trains hard.",
          "Yara does not set goals."
        ],
        "rules": "If Yara either trains hard or sets goals (but not both), then she is dedicated.",
        "conclusion": "Yara is dedicated."
      },
      {
        "facts": [
          "Yara is dedicated.",
          "Yara is not skilled."
        ],
        "rules": "If Yara is dedicated, then she either has skills or is athletic (or both).",
        "conclusion": "Yara is athletic."
      },
      {
        "facts": [
          "Yara is athletic.",
          "Yara is inspirational."
        ],
        "rules": "If Yara is athletic, then she is either competitive or inspirational, but not both.",
        "conclusion": "Yara is not competitive."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "trains_hard(Yara)",
          "¬sets_goals(Yara)"
        ],
        "rules": "(trains_hard(Yara) ⊕ sets_goals(Yara)) → dedicated(Yara)",
        "conclusion": "dedicated(Yara)"
      },
      {
        "facts": [
          "dedicated(Yara)",
          "¬skilled(Yara)"
        ],
        "rules": "dedicated(Yara) → (skilled(Yara) ∨ athletic(Yara))",
        "conclusion": "athletic(Yara)"
      },
      {
        "facts": [
          "athletic(Yara)",
          "inspirational(Yara)"
        ],
        "rules": "athletic(Yara) → (competitive(Yara) ⊕ inspirational(Yara))",
        "conclusion": "¬competitive(Yara)"
      }
    ],
    "conclusion": "Yara is not competitive.",
    "conclusion_fol": "¬competitive(Yara)",
    "answer": "True",
    "context": [
      "Yara trains hard.",
      "Yara does not set goals.",
      "If Yara either trains hard or sets goals (but not both), then she is dedicated.",
      "Yara is not skilled.",
      "If Yara is dedicated, then she either has skills or is athletic (or both).",
      "Yara is inspirational.",
      "If Yara is athletic, then she is either competitive or inspirational, but not both."
    ],
    "context_fol": [
      "trains_hard(Yara)",
      "¬sets_goals(Yara)",
      "(trains_hard(Yara) ⊕ sets_goals(Yara)) → dedicated(Yara)",
      "¬skilled(Yara)",
      "dedicated(Yara) → (skilled(Yara) ∨ athletic(Yara))",
      "inspirational(Yara)",
      "athletic(Yara) → (competitive(Yara) ⊕ inspirational(Yara))"
    ],
    "background_story": "Yara was a wiry and energetic young athlete from a small village. She had a natural talent for gymnastics, which she honed through years of rigorous training. Her petite frame and wiry physique allowed her to perform intricate routines with ease, dodging and weaving through obstacles with agility. Yara's coach noticed her exceptional flexibility and endurance, and soon she was competing in national championships. Despite her small stature, Yara's wiry strength and determination earned her a reputation as a formidable opponent on the gymnastics floor. She inspired countless young girls in her village to pursue their dreams, showing them that with hard work and dedication, even the wiry and petite could achieve greatness.",
    "name": "Yara",
    "keyword": "wiry",
    "subject_category": "human"
  },
  {
    "facts": [
      "Zahir shares knowledge.",
      "Zahir does not mentor developers.",
      "Zahir develops algorithms.",
      "Zahir solves complex problems."
    ],
    "facts_fol": [
      "share_knowledge(Zahir)",
      "¬mentor_developers(Zahir)",
      "develop_algorithms(Zahir)",
      "solve_complex_problems(Zahir)"
    ],
    "rules": [
      "If Zahir innovates, then he receives accolades and publishes research.",
      "Everyone who shares knowledge either inspires others or mentors developers (or both).",
      "Any person who develops algorithms or solves complex problems can innovate."
    ],
    "rules_fol": [
      "innovate(Zahir) → (receive_accolades(Zahir) ∧ publish_research(Zahir))",
      "∀x (share_knowledge(x) → (inspire_others(x) ∨ mentor_developers(x)))",
      "∀x ((develop_algorithms(x) ∨ solve_complex_problems(x)) → innovate(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Zahir either leads projects or writes papers (but not both), then he receives accolades.",
      "If Zahir codes creatively, then he helps the community and inspires others.",
      "If Zahir pursues a PhD, then he leads projects and innovates."
    ],
    "distracting_rules_fol": [
      "(lead_projects(Zahir) ⊕ write_papers(Zahir)) → receive_accolades(Zahir)",
      "code_creatively(Zahir) → (help_community(Zahir) ∧ inspire_others(Zahir))",
      "pursue_phd(Zahir) → (lead_projects(Zahir) ∧ innovate(Zahir))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Zahir develops algorithms.",
          "Zahir solves complex problems."
        ],
        "rules": "Any person who develops algorithms or solves complex problems can innovate.",
        "conclusion": "Zahir innovates."
      },
      {
        "facts": [
          "Zahir shares knowledge.",
          "Zahir does not mentor developers."
        ],
        "rules": "Everyone who shares knowledge either inspires others or mentors developers (or both).",
        "conclusion": "Zahir inspires others."
      },
      {
        "facts": [
          "Zahir innovates."
        ],
        "rules": "If Zahir innovates, then he receives accolades and publishes research.",
        "conclusion": "Zahir receives accolades."
      },
      {
        "facts": [
          "Zahir receives accolades.",
          "Zahir inspires others."
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "develop_algorithms(Zahir)",
          "solve_complex_problems(Zahir)"
        ],
        "rules": "∀x ((develop_algorithms(x) ∨ solve_complex_problems(x)) → innovate(x))",
        "conclusion": "innovate(Zahir)"
      },
      {
        "facts": [
          "share_knowledge(Zahir)",
          "¬mentor_developers(Zahir)"
        ],
        "rules": "∀x (share_knowledge(x) → (inspire_others(x) ∨ mentor_developers(x)))",
        "conclusion": "inspire_others(Zahir)"
      },
      {
        "facts": [
          "innovate(Zahir)"
        ],
        "rules": "innovate(Zahir) → (receive_accolades(Zahir) ∧ publish_research(Zahir))",
        "conclusion": "receive_accolades(Zahir)"
      },
      {
        "facts": [
          "receive_accolades(Zahir)",
          "inspire_others(Zahir)"
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "conclusion": "If Zahir contributes to open-source projects, then he either receives accolades or inspires others, but not both.",
    "conclusion_fol": "contribute_to_open_source(Zahir) → (receive_accolades(Zahir) ⊕ inspire_others(Zahir))",
    "answer": "Uncertain",
    "context": [
      "Zahir develops algorithms.",
      "Zahir solves complex problems.",
      "Any person who develops algorithms or solves complex problems can innovate.",
      "Zahir shares knowledge.",
      "Zahir does not mentor developers.",
      "Everyone who shares knowledge either inspires others or mentors developers (or both).",
      "If Zahir innovates, then he receives accolades and publishes research."
    ],
    "context_fol": [
      "develop_algorithms(Zahir)",
      "solve_complex_problems(Zahir)",
      "∀x ((develop_algorithms(x) ∨ solve_complex_problems(x)) → innovate(x))",
      "share_knowledge(Zahir)",
      "¬mentor_developers(Zahir)",
      "∀x (share_knowledge(x) → (inspire_others(x) ∨ mentor_developers(x)))",
      "innovate(Zahir) → (receive_accolades(Zahir) ∧ publish_research(Zahir))"
    ],
    "background_story": "Zahir was a brilliant computer scientist with a passion for natural language processing. He spent most of his career developing algorithms that could efficiently stem words to their base form, allowing for more accurate text analysis. His work on the 'Zahir Stemmer' became a benchmark in the field, widely used in search engines and text mining applications. Zahir's dedication to his craft earned him numerous accolades, including the prestigious 'Innovator of the Year' award. Despite his success, he remained humble and continued to contribute to open-source projects, inspiring a new generation of developers to explore the fascinating world of linguistics and computer science.",
    "name": "Zahir",
    "keyword": "stemmer",
    "subject_category": "person"
  },
  {
    "facts": [
      "Lea does not appreciate the medicinal properties of horseradish.",
      "Lea does not innovate recipes.",
      "Lea uses horseradish in her recipes.",
      "Lea is a talented chef.",
      "Lea is health conscious.",
      "Lea enjoys gardening.",
      "Lea cultivates plants."
    ],
    "facts_fol": [
      "¬appreciate_medicinal_properties(Lea)",
      "¬innovate_recipes(Lea)",
      "use_horseradish_in_recipes(Lea)",
      "talented_chef(Lea)",
      "is_health_conscious(Lea)",
      "enjoy_gardening(Lea)",
      "cultivate_plants(Lea)"
    ],
    "rules": [
      "If Lea is a creative person who grows her own ingredients, then she is an experienced cook.",
      "Every talented chef either innovates recipes or is a creative person (or both).",
      "If Lea either tends a garden or makes remedies (but not both), then she grows her own ingredients.",
      "If Lea is health conscious, then she either enjoys gardening or makes remedies (but not both).",
      "Anyone who cultivates plants tends a garden."
    ],
    "rules_fol": [
      "creative_person(Lea) → (grow_own_ingredients(Lea) ∧ experienced_cook(Lea))",
      "∀x (talented_chef(x) → (innovate_recipes(x) ∨ creative_person(x)))",
      "(tend_garden(Lea) ⊕ make_remedies(Lea)) → grow_own_ingredients(Lea)",
      "is_health_conscious(Lea) → (enjoy_gardening(Lea) ⊕ make_remedies(Lea))",
      "∀x (cultivate_plants(x) → tend_garden(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Lea either tries new spices or experiments with flavors (but not both), then she is an experienced cook.",
      "If Lea either tries new flavors or experiments with spices (but not both), then she is a creative person.",
      "Anyone who has a green thumb or enjoys farming can grow their own ingredients.",
      "If Lea shares knowledge, then she cares for others and makes remedies.",
      "If Lea likes botany or enjoys nature, then she tends a garden."
    ],
    "distracting_rules_fol": [
      "(try_new_spices(Lea) ⊕ experiment_flavors(Lea)) → experienced_cook(Lea)",
      "(tries_new_flavors(Lea) ⊕ periments_with_spices(Lea)) → creative_person(Lea)",
      "∀x ((has_green_thumb(x) ∨ enjoys_farming(x)) → grow_own_ingredients(x))",
      "share_knowledge(Lea) → (care_for_others(Lea) ∧ make_remedies(Lea))",
      "(likes_botany(Lea) ∨ enjoys_nature(Lea)) → tend_garden(Lea)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Lea cultivates plants."
        ],
        "rules": "Anyone who cultivates plants tends a garden.",
        "conclusion": "Lea tends a garden."
      },
      {
        "facts": [
          "Lea is health conscious.",
          "Lea enjoys gardening."
        ],
        "rules": "If Lea is health conscious, then she either enjoys gardening or makes remedies (but not both).",
        "conclusion": "Lea does not make remedies."
      },
      {
        "facts": [
          "Lea tends a garden.",
          "Lea does not make remedies."
        ],
        "rules": "If Lea either tends a garden or makes remedies (but not both), then she grows her own ingredients.",
        "conclusion": "Lea grows her own ingredients."
      },
      {
        "facts": [
          "Lea is a talented chef.",
          "Lea does not innovate recipes."
        ],
        "rules": "Every talented chef either innovates recipes or is a creative person (or both).",
        "conclusion": "Lea is a creative person."
      },
      {
        "facts": [
          "Lea is a creative person.",
          "Lea grows her own ingredients."
        ],
        "rules": "If Lea is a creative person who grows her own ingredients, then she is an experienced cook.",
        "conclusion": "Lea is an experienced cook."
      },
      {
        "facts": [
          "Lea is an experienced cook.",
          "Lea uses horseradish in her recipes.",
          "Lea does not appreciate the medicinal properties of horseradish."
        ],
        "rules": null,
        "conclusion": "Lea is an experienced cook and either uses horseradish in recipes or appreciates its medicinal properties (or both)."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "cultivate_plants(Lea)"
        ],
        "rules": "∀x (cultivate_plants(x) → tend_garden(x))",
        "conclusion": "tend_garden(Lea)"
      },
      {
        "facts": [
          "is_health_conscious(Lea)",
          "enjoy_gardening(Lea)"
        ],
        "rules": "is_health_conscious(Lea) → (enjoy_gardening(Lea) ⊕ make_remedies(Lea))",
        "conclusion": "¬make_remedies(Lea)"
      },
      {
        "facts": [
          "tend_garden(Lea)",
          "¬make_remedies(Lea)"
        ],
        "rules": "(tend_garden(Lea) ⊕ make_remedies(Lea)) → grow_own_ingredients(Lea)",
        "conclusion": "grow_own_ingredients(Lea)"
      },
      {
        "facts": [
          "talented_chef(Lea)",
          "¬innovate_recipes(Lea)"
        ],
        "rules": "∀x (talented_chef(x) → (innovate_recipes(x) ∨ creative_person(x)))",
        "conclusion": "creative_person(Lea)"
      },
      {
        "facts": [
          "creative_person(Lea)",
          "grow_own_ingredients(Lea)"
        ],
        "rules": "creative_person(Lea) → (grow_own_ingredients(Lea) ∧ experienced_cook(Lea))",
        "conclusion": "experienced_cook(Lea)"
      },
      {
        "facts": [
          "experienced_cook(Lea)",
          "use_horseradish_in_recipes(Lea)",
          "¬appreciate_medicinal_properties(Lea)"
        ],
        "rules": null,
        "conclusion": "experienced_cook(Lea) ∧ (use_horseradish_in_recipes(Lea) ∨ appreciate_medicinal_properties(Lea))"
      }
    ],
    "conclusion": "Lea is an experienced cook and either uses horseradish in recipes or appreciates its medicinal properties (or both).",
    "conclusion_fol": "experienced_cook(Lea) ∧ (use_horseradish_in_recipes(Lea) ∨ appreciate_medicinal_properties(Lea))",
    "answer": "True",
    "context": [
      "Lea cultivates plants.",
      "Anyone who cultivates plants tends a garden.",
      "Lea is health conscious.",
      "Lea enjoys gardening.",
      "If Lea is health conscious, then she either enjoys gardening or makes remedies (but not both).",
      "If Lea either tends a garden or makes remedies (but not both), then she grows her own ingredients.",
      "Lea is a talented chef.",
      "Lea does not innovate recipes.",
      "Every talented chef either innovates recipes or is a creative person (or both).",
      "If Lea is a creative person who grows her own ingredients, then she is an experienced cook.",
      "Lea uses horseradish in her recipes.",
      "Lea does not appreciate the medicinal properties of horseradish."
    ],
    "context_fol": [
      "cultivate_plants(Lea)",
      "∀x (cultivate_plants(x) → tend_garden(x))",
      "is_health_conscious(Lea)",
      "enjoy_gardening(Lea)",
      "is_health_conscious(Lea) → (enjoy_gardening(Lea) ⊕ make_remedies(Lea))",
      "(tend_garden(Lea) ⊕ make_remedies(Lea)) → grow_own_ingredients(Lea)",
      "talented_chef(Lea)",
      "¬innovate_recipes(Lea)",
      "∀x (talented_chef(x) → (innovate_recipes(x) ∨ creative_person(x)))",
      "creative_person(Lea) → (grow_own_ingredients(Lea) ∧ experienced_cook(Lea))",
      "use_horseradish_in_recipes(Lea)",
      "¬appreciate_medicinal_properties(Lea)"
    ],
    "background_story": "Lea was a talented chef with a passion for experimenting with unique ingredients. She stumbled upon armoracia, also known as horseradish, while exploring a local farmer's market. Intrigued by its pungent flavor, Lea began incorporating armoracia into her recipes, creating innovative dishes that quickly gained popularity at her restaurant. Her signature armoracia sauce became a favorite among patrons, who raved about its bold, tangy taste. As Lea's culinary reputation grew, so did her fascination with the medicinal properties of armoracia. She started a small garden, cultivating the plant and using it not only in her cooking but also in homemade remedies for colds and sore throats. Lea's dedication to showcasing the versatility of armoracia earned her the title of 'Horseradish Queen' among foodies and health enthusiasts alike.",
    "name": "Lea",
    "keyword": "armoracia",
    "subject_category": "human"
  },
  {
    "facts": [
      "Lacey produces accurate work.",
      "Lacey publishes a book.",
      "Lacey writes clearly.",
      "Lacey does not edit rigorously."
    ],
    "facts_fol": [
      "accurate(Lacey)",
      "publishes_book(Lacey)",
      "writes_clearly(Lacey)",
      "¬edits_rigorously(Lacey)"
    ],
    "rules": [
      "Every historian who is thorough either produces accurate work or is passionate about their research (or both).",
      "If Lacey publishes a book, then she is either thorough in her research or wins an award (but not both).",
      "If Lacey either writes clearly or edits rigorously (but not both), then she wins an award."
    ],
    "rules_fol": [
      "∀x (thorough(x) → (accurate(x) ∨ passionate(x)))",
      "publishes_book(Lacey) → (thorough(Lacey) ⊕ wins_award(Lacey))",
      "(writes_clearly(Lacey) ⊕ edits_rigorously(Lacey)) → wins_award(Lacey)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Every historian who conducts research either shares knowledge or is passionate about their work (or both).",
      "Any historian who reads widely or analyzes deeply is thorough in their research.",
      "If Lacey produces a masterpiece, then she will win an award."
    ],
    "distracting_rules_fol": [
      "∀x (conducts_research(x) → (shares_knowledge(x) ∨ passionate(x)))",
      "∀x ((reads_widely(x) ∨ analyzes_deeply(x)) → thorough(x))",
      "produces_masterpiece(Lacey) → wins_award(Lacey)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Lacey writes clearly.",
          "Lacey does not edit rigorously."
        ],
        "rules": "If Lacey either writes clearly or edits rigorously (but not both), then she wins an award.",
        "conclusion": "Lacey wins an award."
      },
      {
        "facts": [
          "Lacey publishes a book.",
          "Lacey wins an award."
        ],
        "rules": "If Lacey publishes a book, then she is either thorough in her research or wins an award (but not both).",
        "conclusion": "Lacey is not thorough in her research."
      },
      {
        "facts": [
          "Lacey is not thorough in her research.",
          "Lacey produces accurate work."
        ],
        "rules": "Every historian who is thorough either produces accurate work or is passionate about their research (or both).",
        "conclusion": null
      },
      {
        "facts": [],
        "rules": null,
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "writes_clearly(Lacey)",
          "¬edits_rigorously(Lacey)"
        ],
        "rules": "(writes_clearly(Lacey) ⊕ edits_rigorously(Lacey)) → wins_award(Lacey)",
        "conclusion": "wins_award(Lacey)"
      },
      {
        "facts": [
          "publishes_book(Lacey)",
          "wins_award(Lacey)"
        ],
        "rules": "publishes_book(Lacey) → (thorough(Lacey) ⊕ wins_award(Lacey))",
        "conclusion": "¬thorough(Lacey)"
      },
      {
        "facts": [
          "¬thorough(Lacey)",
          "accurate(Lacey)"
        ],
        "rules": "∀x (thorough(x) → (accurate(x) ∨ passionate(x)))",
        "conclusion": null
      },
      {
        "facts": [],
        "rules": null,
        "conclusion": null
      }
    ],
    "conclusion": "Lacey is meticulous or passionate about her research (or both).",
    "conclusion_fol": "meticulous(Lacey) ∨ passionate(Lacey)",
    "answer": "Uncertain",
    "context": [
      "Lacey writes clearly.",
      "Lacey does not edit rigorously.",
      "If Lacey either writes clearly or edits rigorously (but not both), then she wins an award.",
      "Lacey publishes a book.",
      "If Lacey publishes a book, then she is either thorough in her research or wins an award (but not both).",
      "Lacey produces accurate work.",
      "Every historian who is thorough either produces accurate work or is passionate about their research (or both)."
    ],
    "context_fol": [
      "writes_clearly(Lacey)",
      "¬edits_rigorously(Lacey)",
      "(writes_clearly(Lacey) ⊕ edits_rigorously(Lacey)) → wins_award(Lacey)",
      "publishes_book(Lacey)",
      "publishes_book(Lacey) → (thorough(Lacey) ⊕ wins_award(Lacey))",
      "accurate(Lacey)",
      "∀x (thorough(x) → (accurate(x) ∨ passionate(x)))"
    ],
    "background_story": "Lacey was a brilliant historian with a fascination for the Napoleonic Wars. Her magnum opus, a comprehensive study of the Battle of Austerlitz, was hailed as a masterpiece by her peers. Lacey spent years researching the intricacies of Napoleon's tactics and the bravery of his soldiers. She became particularly intrigued by the stories of the common soldiers who fought at Austerlitz, pouring over letters and diaries to bring their experiences to life. Lacey's dedication to historical accuracy and her passion for storytelling made her book a bestseller, earning her the respect and admiration of the academic community. Her work on Austerlitz remains the definitive account of one of history's most pivotal battles.",
    "name": "Lacey",
    "keyword": "austerlitz",
    "subject_category": "historian"
  },
  {
    "facts": [
      "Fernanda does not start her career early.",
      "Fernanda is in college.",
      "Fernanda is ambitious.",
      "Fernanda is not driven."
    ],
    "facts_fol": [
      "¬starts_early(Fernanda)",
      "in_college(Fernanda)",
      "is_ambitious(Fernanda)",
      "¬is_driven(Fernanda)"
    ],
    "rules": [
      "If Fernanda is either young or experienced (but not both), then she is innovative.",
      "Anyone who is in college or starts their career early is young.",
      "If Fernanda is ambitious, then she is either experienced or talented, but not both.",
      "Fernanda is either driven or talented, but not necessarily both."
    ],
    "rules_fol": [
      "(young(Fernanda) ⊕ experienced(Fernanda)) → innovative(Fernanda)",
      "∀x ((in_college(x) ∨ starts_early(x)) → young(x))",
      "is_ambitious(Fernanda) → (experienced(Fernanda) ⊕ is_talented(Fernanda))",
      "is_driven(Fernanda) ⊕ is_talented(Fernanda)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Fernanda either uses social media or has fresh ideas (but not both), then she is young.",
      "If someone has knowledge and gains insight, then they become experienced.",
      "Everyone has a skill or is talented."
    ],
    "distracting_rules_fol": [
      "(uses_social_media(Fernanda) ⊕ has_fresh_ideas(Fernanda)) → young(Fernanda)",
      "∀x ((has_knowledge(x) ∧ gains_insight(x)) → experienced(x))",
      "∀x (has_skill(x) ∨ is_talented(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Fernanda is not driven."
        ],
        "rules": "Fernanda is either driven or talented, but not necessarily both.",
        "conclusion": "Fernanda is talented."
      },
      {
        "facts": [
          "Fernanda is ambitious.",
          "Fernanda is talented."
        ],
        "rules": "If Fernanda is ambitious, then she is either experienced or talented, but not both.",
        "conclusion": "Fernanda is not experienced."
      },
      {
        "facts": [
          "Fernanda is in college.",
          "Fernanda does not start her career early."
        ],
        "rules": "Anyone who is in college or starts their career early is young.",
        "conclusion": "Fernanda is young."
      },
      {
        "facts": [
          "Fernanda is young.",
          "Fernanda is not experienced."
        ],
        "rules": "If Fernanda is either young or experienced (but not both), then she is innovative.",
        "conclusion": "Fernanda is innovative."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬is_driven(Fernanda)"
        ],
        "rules": "is_driven(Fernanda) ⊕ is_talented(Fernanda)",
        "conclusion": "is_talented(Fernanda)"
      },
      {
        "facts": [
          "is_ambitious(Fernanda)",
          "is_talented(Fernanda)"
        ],
        "rules": "is_ambitious(Fernanda) → (experienced(Fernanda) ⊕ is_talented(Fernanda))",
        "conclusion": "¬experienced(Fernanda)"
      },
      {
        "facts": [
          "in_college(Fernanda)",
          "¬starts_early(Fernanda)"
        ],
        "rules": "∀x ((in_college(x) ∨ starts_early(x)) → young(x))",
        "conclusion": "young(Fernanda)"
      },
      {
        "facts": [
          "young(Fernanda)",
          "¬experienced(Fernanda)"
        ],
        "rules": "(young(Fernanda) ⊕ experienced(Fernanda)) → innovative(Fernanda)",
        "conclusion": "innovative(Fernanda)"
      }
    ],
    "conclusion": "Fernanda is innovative.",
    "conclusion_fol": "innovative(Fernanda)",
    "answer": "True",
    "context": [
      "Fernanda is not driven.",
      "Fernanda is either driven or talented, but not necessarily both.",
      "Fernanda is ambitious.",
      "If Fernanda is ambitious, then she is either experienced or talented, but not both.",
      "Fernanda is in college.",
      "Fernanda does not start her career early.",
      "Anyone who is in college or starts their career early is young.",
      "If Fernanda is either young or experienced (but not both), then she is innovative."
    ],
    "context_fol": [
      "¬is_driven(Fernanda)",
      "is_driven(Fernanda) ⊕ is_talented(Fernanda)",
      "is_ambitious(Fernanda)",
      "is_ambitious(Fernanda) → (experienced(Fernanda) ⊕ is_talented(Fernanda))",
      "in_college(Fernanda)",
      "¬starts_early(Fernanda)",
      "∀x ((in_college(x) ∨ starts_early(x)) → young(x))",
      "(young(Fernanda) ⊕ experienced(Fernanda)) → innovative(Fernanda)"
    ],
    "background_story": "Fernanda was a bright and ambitious 17-year-old who had already made a name for herself in the world of competitive coding. Despite being underage, she had begun attending college courses and was determined to start her own tech company. However, her age often posed challenges, as many investors and clients were hesitant to take her seriously. Undeterred, Fernanda used her youth to her advantage, leveraging social media and online platforms to build a community of supporters and showcase her talents. She became an advocate for youth entrepreneurship, speaking at conferences and inspiring other young people to pursue their passions, regardless of their age. Fernanda's story highlighted the potential and ingenuity of underage innovators, challenging traditional notions of what it means to be a successful entrepreneur.",
    "name": "Fernanda",
    "keyword": "underage",
    "subject_category": "human"
  },
  {
    "facts": [
      "Rhodes needs surgery.",
      "Rhodes undergoes tests.",
      "Rhodes is diagnosed.",
      "Rhodes needs treatment.",
      "Rhodes is a high-risk patient."
    ],
    "facts_fol": [
      "needs_surgery(Rhodes)",
      "undergoes_tests(Rhodes)",
      "is_diagnosed(Rhodes)",
      "needs_treatment(Rhodes)",
      "is_high_risk(Rhodes)"
    ],
    "rules": [
      "For all medical cases, if a patient has a bicuspid valve or has a heart condition, then they require regular monitoring.",
      "If a medical patient needs surgery, then they are either treated with medication or have a heart condition, but not both.",
      "If Rhodes shows symptoms and undergoes tests, then he requires medication.",
      "For all medical cases, if a patient is diagnosed, then they show symptoms and need treatment.",
      "A patient is either high risk or has a bicuspid valve, but not necessarily both."
    ],
    "rules_fol": [
      "∀x ((has_bicuspid_valve(x) ∨ has_heart_condition(x)) → requires_regular_monitoring(x))",
      "needs_surgery(Rhodes) → (requires_medication(Rhodes) ⊕ has_heart_condition(Rhodes))",
      "(shows_symptoms(Rhodes) ∧ undergoes_tests(Rhodes)) → requires_medication(Rhodes)",
      "∀x (is_diagnosed(x) → (shows_symptoms(x) ∧ needs_treatment(x)))",
      "∀x (is_high_risk(x) ⊕ has_bicuspid_valve(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Dr. Rhodes is a cardiologist, then he either specializes in valve repair or has a heart condition, but not both.",
      "If a patient gets hospitalized, then they are either treated with medication or receive therapy, but not both.",
      "If a patient experiences pain and feels fatigue, then they show symptoms.",
      "If a medical patient either experiences murmurs or has arrhythmia (but not both), then they have a bicuspid valve, as observed in Dr. Rhodes' medical expertise."
    ],
    "distracting_rules_fol": [
      "is_cardiologist(Rhodes) → (specializes_in_valve_repair(Rhodes) ⊕ has_heart_condition(Rhodes))",
      "gets_hospitalized(Rhodes) → (receives_therapy(Rhodes) ⊕ requires_medication(Rhodes))",
      "∀x ((experiences_pain(x) ∧ feels_fatigue(x)) → shows_symptoms(x))",
      "(experiences_murmurs(Rhodes) ⊕ has_arrhythmia(Rhodes)) → has_bicuspid_valve(Rhodes)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Rhodes is a high-risk patient."
        ],
        "rules": "A patient is either high risk or has a bicuspid valve, but not necessarily both.",
        "conclusion": "Dr. Rhodes does not have a bicuspid valve."
      },
      {
        "facts": [
          "Rhodes is diagnosed.",
          "Rhodes needs treatment."
        ],
        "rules": "For all medical cases, if a patient is diagnosed, then they show symptoms and need treatment.",
        "conclusion": "Rhodes shows symptoms."
      },
      {
        "facts": [
          "Rhodes shows symptoms.",
          "Rhodes undergoes tests."
        ],
        "rules": "If Rhodes shows symptoms and undergoes tests, then he requires medication.",
        "conclusion": "Rhodes is treated with medication."
      },
      {
        "facts": [
          "Rhodes needs surgery.",
          "Rhodes is treated with medication."
        ],
        "rules": "If a medical patient needs surgery, then they are either treated with medication or have a heart condition, but not both.",
        "conclusion": "Dr. Rhodes does not have a heart condition."
      },
      {
        "facts": [
          "Dr. Rhodes does not have a bicuspid valve.",
          "Dr. Rhodes does not have a heart condition."
        ],
        "rules": "For all medical cases, if a patient has a bicuspid valve or has a heart condition, then they require regular monitoring.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "is_high_risk(Rhodes)"
        ],
        "rules": "∀x (is_high_risk(x) ⊕ has_bicuspid_valve(x))",
        "conclusion": "¬has_bicuspid_valve(Rhodes)"
      },
      {
        "facts": [
          "is_diagnosed(Rhodes)",
          "needs_treatment(Rhodes)"
        ],
        "rules": "∀x (is_diagnosed(x) → (shows_symptoms(x) ∧ needs_treatment(x)))",
        "conclusion": "shows_symptoms(Rhodes)"
      },
      {
        "facts": [
          "shows_symptoms(Rhodes)",
          "undergoes_tests(Rhodes)"
        ],
        "rules": "(shows_symptoms(Rhodes) ∧ undergoes_tests(Rhodes)) → requires_medication(Rhodes)",
        "conclusion": "requires_medication(Rhodes)"
      },
      {
        "facts": [
          "needs_surgery(Rhodes)",
          "requires_medication(Rhodes)"
        ],
        "rules": "needs_surgery(Rhodes) → (requires_medication(Rhodes) ⊕ has_heart_condition(Rhodes))",
        "conclusion": "¬has_heart_condition(Rhodes)"
      },
      {
        "facts": [
          "¬has_bicuspid_valve(Rhodes)",
          "¬has_heart_condition(Rhodes)"
        ],
        "rules": "∀x ((has_bicuspid_valve(x) ∨ has_heart_condition(x)) → requires_regular_monitoring(x))",
        "conclusion": null
      }
    ],
    "conclusion": "Rhodes requires regular monitoring.",
    "conclusion_fol": "requires_regular_monitoring(Rhodes)",
    "answer": "Uncertain",
    "context": [
      "Rhodes is a high-risk patient.",
      "A patient is either high risk or has a bicuspid valve, but not necessarily both.",
      "Rhodes is diagnosed.",
      "Rhodes needs treatment.",
      "For all medical cases, if a patient is diagnosed, then they show symptoms and need treatment.",
      "Rhodes undergoes tests.",
      "If Rhodes shows symptoms and undergoes tests, then he requires medication.",
      "Rhodes needs surgery.",
      "If a medical patient needs surgery, then they are either treated with medication or have a heart condition, but not both.",
      "For all medical cases, if a patient has a bicuspid valve or has a heart condition, then they require regular monitoring."
    ],
    "context_fol": [
      "is_high_risk(Rhodes)",
      "∀x (is_high_risk(x) ⊕ has_bicuspid_valve(x))",
      "is_diagnosed(Rhodes)",
      "needs_treatment(Rhodes)",
      "∀x (is_diagnosed(x) → (shows_symptoms(x) ∧ needs_treatment(x)))",
      "undergoes_tests(Rhodes)",
      "(shows_symptoms(Rhodes) ∧ undergoes_tests(Rhodes)) → requires_medication(Rhodes)",
      "needs_surgery(Rhodes)",
      "needs_surgery(Rhodes) → (requires_medication(Rhodes) ⊕ has_heart_condition(Rhodes))",
      "∀x ((has_bicuspid_valve(x) ∨ has_heart_condition(x)) → requires_regular_monitoring(x))"
    ],
    "background_story": "Rhodes was a young cardiologist with a keen interest in heart valve anomalies. He had always been fascinated by the complexity of the human heart, particularly the bicuspid aortic valve condition. Born with this condition himself, Rhodes understood the importance of regular monitoring and care. His personal experience drove him to dedicate his career to helping others with similar heart conditions. Rhodes became a leading expert in the field, publishing numerous papers and developing new surgical techniques to repair and replace bicuspid valves. His work improved the lives of countless patients, and he continued to advocate for increased awareness and research into this often misunderstood condition.",
    "name": "Rhodes",
    "keyword": "bicuspid",
    "subject_category": "medical"
  },
  {
    "facts": [
      "Danielle studies ecology.",
      "Danielle does not love the outdoors.",
      "Danielle does not explore the wilderness.",
      "Danielle cares about the environment."
    ],
    "facts_fol": [
      "study_ecology(Danielle)",
      "¬love_outdoors(Danielle)",
      "¬explore_wilderness(Danielle)",
      "care_environment(Danielle)"
    ],
    "rules": [
      "For all humans, if they study ecology or appreciate wild nature (or both), then they support conservation.",
      "For any person, either they enjoy hiking or they appreciate wild nature, but not necessarily both.",
      "If Danielle either loves the outdoors or collects plants (but not both), then she enjoys hiking.",
      "Anyone who pursues botany either collects plants or explores wilderness (or both).",
      "All people who care about the environment and pursue botany also have knowledge of species."
    ],
    "rules_fol": [
      "∀x ((study_ecology(x) ∨ appreciate_wild_nature(x)) → support_conservation(x))",
      "∀x (enjoy_hiking(x) ⊕ appreciate_wild_nature(x))",
      "(love_outdoors(Danielle) ⊕ collect_plants(Danielle)) → enjoy_hiking(Danielle)",
      "∀x (pursue_botany(x) → (collect_plants(x) ∨ explore_wilderness(x)))",
      "∀x (care_environment(x) → (pursue_botany(x) ∧ know_species(x)))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Anyone who respects the earth appreciates wild nature.",
      "If Danielle lives in a rural area, then she enjoys hiking.",
      "If someone either grows gardens or presses flowers (but not both), then they collect plants.",
      "Everyone who values biodiversity either protects habitats or pursues botany (or both)."
    ],
    "distracting_rules_fol": [
      "∀x (respects_earth(x) → appreciate_wild_nature(x))",
      "live_rural(Danielle) → enjoy_hiking(Danielle)",
      "∀x ((grow_gardens(x) ⊕ press_flowers(x)) → collect_plants(x))",
      "∀x (value_biodiversity(x) → (protect_habitats(x) ∨ pursue_botany(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Danielle cares about the environment."
        ],
        "rules": "All people who care about the environment and pursue botany also have knowledge of species.",
        "conclusion": "Danielle pursues botany."
      },
      {
        "facts": [
          "Danielle pursues botany.",
          "Danielle does not explore the wilderness."
        ],
        "rules": "Anyone who pursues botany either collects plants or explores wilderness (or both).",
        "conclusion": "Danielle collects plants."
      },
      {
        "facts": [
          "Danielle does not love the outdoors.",
          "Danielle collects plants."
        ],
        "rules": "If Danielle either loves the outdoors or collects plants (but not both), then she enjoys hiking.",
        "conclusion": "Danielle enjoys hiking."
      },
      {
        "facts": [
          "Danielle enjoys hiking."
        ],
        "rules": "For any person, either they enjoy hiking or they appreciate wild nature, but not necessarily both.",
        "conclusion": "Danielle does not appreciate wild nature."
      },
      {
        "facts": [
          "Danielle studies ecology.",
          "Danielle does not appreciate wild nature."
        ],
        "rules": "For all humans, if they study ecology or appreciate wild nature (or both), then they support conservation.",
        "conclusion": "Danielle does not support conservation."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "care_environment(Danielle)"
        ],
        "rules": "∀x (care_environment(x) → (pursue_botany(x) ∧ know_species(x)))",
        "conclusion": "pursue_botany(Danielle)"
      },
      {
        "facts": [
          "pursue_botany(Danielle)",
          "¬explore_wilderness(Danielle)"
        ],
        "rules": "∀x (pursue_botany(x) → (collect_plants(x) ∨ explore_wilderness(x)))",
        "conclusion": "collect_plants(Danielle)"
      },
      {
        "facts": [
          "¬love_outdoors(Danielle)",
          "collect_plants(Danielle)"
        ],
        "rules": "(love_outdoors(Danielle) ⊕ collect_plants(Danielle)) → enjoy_hiking(Danielle)",
        "conclusion": "enjoy_hiking(Danielle)"
      },
      {
        "facts": [
          "enjoy_hiking(Danielle)"
        ],
        "rules": "∀x (enjoy_hiking(x) ⊕ appreciate_wild_nature(x))",
        "conclusion": "¬appreciate_wild_nature(Danielle)"
      },
      {
        "facts": [
          "study_ecology(Danielle)",
          "¬appreciate_wild_nature(Danielle)"
        ],
        "rules": "∀x ((study_ecology(x) ∨ appreciate_wild_nature(x)) → support_conservation(x))",
        "conclusion": "¬support_conservation(Danielle)"
      }
    ],
    "conclusion": "Danielle does not support conservation.",
    "conclusion_fol": "¬support_conservation(Danielle)",
    "answer": "False",
    "context": [
      "Danielle cares about the environment.",
      "All people who care about the environment and pursue botany also have knowledge of species.",
      "Danielle does not explore the wilderness.",
      "Anyone who pursues botany either collects plants or explores wilderness (or both).",
      "Danielle does not love the outdoors.",
      "If Danielle either loves the outdoors or collects plants (but not both), then she enjoys hiking.",
      "For any person, either they enjoy hiking or they appreciate wild nature, but not necessarily both.",
      "Danielle studies ecology.",
      "For all humans, if they study ecology or appreciate wild nature (or both), then they support conservation."
    ],
    "context_fol": [
      "care_environment(Danielle)",
      "∀x (care_environment(x) → (pursue_botany(x) ∧ know_species(x)))",
      "¬explore_wilderness(Danielle)",
      "∀x (pursue_botany(x) → (collect_plants(x) ∨ explore_wilderness(x)))",
      "¬love_outdoors(Danielle)",
      "(love_outdoors(Danielle) ⊕ collect_plants(Danielle)) → enjoy_hiking(Danielle)",
      "∀x (enjoy_hiking(x) ⊕ appreciate_wild_nature(x))",
      "study_ecology(Danielle)",
      "∀x ((study_ecology(x) ∨ appreciate_wild_nature(x)) → support_conservation(x))"
    ],
    "background_story": "Danielle grew up in a rural area, surrounded by vast fields and forests that had been left uncultivated for years. She spent most of her childhood exploring these wild landscapes, fascinated by the untamed beauty of nature. As she grew older, Danielle developed a passion for botany and ecology, driven by a desire to understand and preserve the unique ecosystems found in these untouched areas. She pursued a career in conservation, working tirelessly to protect and restore uncultivated lands, recognizing their importance as habitats for endangered species and as carbon sinks. Danielle's work took her to various parts of the world, from the Amazon rainforest to the African savannah, always advocating for the preservation of wild, uncultivated spaces.",
    "name": "Danielle",
    "keyword": "uncultivated",
    "subject_category": "human"
  },
  {
    "facts": [
      "Lucy discovers species.",
      "Lucy classifies organisms.",
      "Lucy understands fungi.",
      "Lucy analyzes soil."
    ],
    "facts_fol": [
      "discover_species(Lucy)",
      "classify_organisms(Lucy)",
      "understand_fungi(Lucy)",
      "analyze_soil(Lucy)"
    ],
    "rules": [
      "For all mycologists, if they study mushrooms or research ecosystems (or both), then they contribute to sustainability.",
      "All mycologists either explore nature or study mushrooms.",
      "If Lucy discovers species, then she either explores nature or classifies organisms, but not both.",
      "If Lucy understands fungi, then she either researches ecosystems or analyzes soil, but not both."
    ],
    "rules_fol": [
      "∀x ((study_mushrooms(x) ∨ research_ecosystems(x)) → contribute_to_sustainability(x))",
      "∀x (explore_nature(x) ∨ study_mushrooms(x))",
      "discover_species(Lucy) → (explore_nature(Lucy) ⊕ classify_organisms(Lucy))",
      "understand_fungi(Lucy) → (research_ecosystems(Lucy) ⊕ analyze_soil(Lucy))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "For all mycologists, if they examine fungi and investigate habitats, then they study mushrooms.",
      "If a mycologist either examines trees or collects samples (but not both), then they explore nature.",
      "If Lucy examines samples, then she publishes papers and researches ecosystems."
    ],
    "distracting_rules_fol": [
      "∀x ((examines_fungi(x) ∧ investigates_habitats(x)) → study_mushrooms(x))",
      "∀x ((examine_trees(x) ⊕ collect_samples(x)) → explore_nature(x))",
      "examine_samples(Lucy) → (publish_papers(Lucy) ∧ research_ecosystems(Lucy))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Lucy understands fungi.",
          "Lucy analyzes soil."
        ],
        "rules": "If Lucy understands fungi, then she either researches ecosystems or analyzes soil, but not both.",
        "conclusion": "Lucy does not research ecosystems."
      },
      {
        "facts": [
          "Lucy discovers species.",
          "Lucy classifies organisms."
        ],
        "rules": "If Lucy discovers species, then she either explores nature or classifies organisms, but not both.",
        "conclusion": "Lucy does not explore nature."
      },
      {
        "facts": [
          "Lucy does not explore nature."
        ],
        "rules": "All mycologists either explore nature or study mushrooms.",
        "conclusion": "Lucy studies mushrooms."
      },
      {
        "facts": [
          "Lucy studies mushrooms.",
          "Lucy does not research ecosystems."
        ],
        "rules": "For all mycologists, if they study mushrooms or research ecosystems (or both), then they contribute to sustainability.",
        "conclusion": "Lucy contributes to sustainability."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "understand_fungi(Lucy)",
          "analyze_soil(Lucy)"
        ],
        "rules": "understand_fungi(Lucy) → (research_ecosystems(Lucy) ⊕ analyze_soil(Lucy))",
        "conclusion": "¬research_ecosystems(Lucy)"
      },
      {
        "facts": [
          "discover_species(Lucy)",
          "classify_organisms(Lucy)"
        ],
        "rules": "discover_species(Lucy) → (explore_nature(Lucy) ⊕ classify_organisms(Lucy))",
        "conclusion": "¬explore_nature(Lucy)"
      },
      {
        "facts": [
          "¬explore_nature(Lucy)"
        ],
        "rules": "∀x (explore_nature(x) ∨ study_mushrooms(x))",
        "conclusion": "study_mushrooms(Lucy)"
      },
      {
        "facts": [
          "study_mushrooms(Lucy)",
          "¬research_ecosystems(Lucy)"
        ],
        "rules": "∀x ((study_mushrooms(x) ∨ research_ecosystems(x)) → contribute_to_sustainability(x))",
        "conclusion": "contribute_to_sustainability(Lucy)"
      }
    ],
    "conclusion": "Lucy contributes to sustainability.",
    "conclusion_fol": "contribute_to_sustainability(Lucy)",
    "answer": "True",
    "context": [
      "Lucy understands fungi.",
      "Lucy analyzes soil.",
      "If Lucy understands fungi, then she either researches ecosystems or analyzes soil, but not both.",
      "Lucy discovers species.",
      "Lucy classifies organisms.",
      "If Lucy discovers species, then she either explores nature or classifies organisms, but not both.",
      "All mycologists either explore nature or study mushrooms.",
      "For all mycologists, if they study mushrooms or research ecosystems (or both), then they contribute to sustainability."
    ],
    "context_fol": [
      "understand_fungi(Lucy)",
      "analyze_soil(Lucy)",
      "understand_fungi(Lucy) → (research_ecosystems(Lucy) ⊕ analyze_soil(Lucy))",
      "discover_species(Lucy)",
      "classify_organisms(Lucy)",
      "discover_species(Lucy) → (explore_nature(Lucy) ⊕ classify_organisms(Lucy))",
      "∀x (explore_nature(x) ∨ study_mushrooms(x))",
      "∀x ((study_mushrooms(x) ∨ research_ecosystems(x)) → contribute_to_sustainability(x))"
    ],
    "background_story": "Lucy was a renowned mycologist with a passion for studying basidiomycetous fungi, particularly mushrooms. Her fascination with the complex relationships between these organisms and their environments led her to dedicate her career to understanding their role in ecosystems. Lucy spent years researching in the Amazon rainforest, discovering new species and documenting their unique characteristics. Her groundbreaking work on the basidiomycetous fungi's ability to break down organic matter and recycle nutrients earned her international recognition. Lucy's findings have significant implications for sustainable forestry and agriculture, and she continues to inspire a new generation of mycologists to explore the fascinating world of fungi.",
    "name": "Lucy",
    "keyword": "basidiomycetous",
    "subject_category": "mycologist"
  },
  {
    "facts": [
      "Stella sets goals.",
      "Stella meets deadlines."
    ],
    "facts_fol": [
      "sets_goals(Stella)",
      "meets_deadlines(Stella)"
    ],
    "rules": [
      "If Stella is spontaneous, then she takes risks.",
      "Stella either values planning or is spontaneous, but given her nature, she is more likely to be spontaneous and not value planning.",
      "If someone sets goals and meets deadlines, then they value planning."
    ],
    "rules_fol": [
      "is_spontaneous(Stella) → takes_risks(Stella)",
      "values_planning(Stella) ⊕ is_spontaneous(Stella)",
      "∀x ((sets_goals(x) ∧ meets_deadlines(x)) → values_planning(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If someone either acts on impulse or dislikes structure (but not both), then they are spontaneous.",
      "All disciplined individuals prioritize tasks and value planning."
    ],
    "distracting_rules_fol": [
      "∀x ((acts_on_impulse(x) ⊕ dislikes_structure(x)) → is_spontaneous(x))",
      "∀x (is_disciplined(x) → (prioritizes_tasks(x) ∧ values_planning(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Stella sets goals.",
          "Stella meets deadlines."
        ],
        "rules": "If someone sets goals and meets deadlines, then they value planning.",
        "conclusion": "Stella values planning."
      },
      {
        "facts": [
          "Stella values planning."
        ],
        "rules": "Stella either values planning or is spontaneous, but given her nature, she is more likely to be spontaneous and not value planning.",
        "conclusion": "Stella is not spontaneous."
      },
      {
        "facts": [
          "Stella is not spontaneous."
        ],
        "rules": "If Stella is spontaneous, then she takes risks.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "sets_goals(Stella)",
          "meets_deadlines(Stella)"
        ],
        "rules": "∀x ((sets_goals(x) ∧ meets_deadlines(x)) → values_planning(x))",
        "conclusion": "values_planning(Stella)"
      },
      {
        "facts": [
          "values_planning(Stella)"
        ],
        "rules": "values_planning(Stella) ⊕ is_spontaneous(Stella)",
        "conclusion": "¬is_spontaneous(Stella)"
      },
      {
        "facts": [
          "¬is_spontaneous(Stella)"
        ],
        "rules": "is_spontaneous(Stella) → takes_risks(Stella)",
        "conclusion": null
      }
    ],
    "conclusion": "Stella takes risks.",
    "conclusion_fol": "takes_risks(Stella)",
    "answer": "Uncertain",
    "context": [
      "Stella sets goals.",
      "Stella meets deadlines.",
      "If someone sets goals and meets deadlines, then they value planning.",
      "Stella either values planning or is spontaneous, but given her nature, she is more likely to be spontaneous and not value planning.",
      "If Stella is spontaneous, then she takes risks."
    ],
    "context_fol": [
      "sets_goals(Stella)",
      "meets_deadlines(Stella)",
      "∀x ((sets_goals(x) ∧ meets_deadlines(x)) → values_planning(x))",
      "values_planning(Stella) ⊕ is_spontaneous(Stella)",
      "is_spontaneous(Stella) → takes_risks(Stella)"
    ],
    "background_story": "Stella was a free-spirited artist, known for her carefree nature and lack of direction. Her fecklessness often led to chaotic situations, as she would jump from one project to another without finishing any. Despite her talent, Stella's inability to commit to anything made it difficult for her to achieve her goals. She would spend months planning an art exhibition, only to abandon it at the last minute for a spontaneous road trip. Her friends and family admired her spontaneity, but also worried about her lack of responsibility. Stella's life was a series of unfinished canvases, abandoned apartments, and missed opportunities. Yet, in her own mind, she was living life to the fullest, unencumbered by the burdens of planning and responsibility.",
    "name": "Stella",
    "keyword": "fecklessness",
    "subject_category": "human"
  },
  {
    "facts": [
      "Leighton does not publish research.",
      "Leighton studies phenomena.",
      "Leighton formulates theories."
    ],
    "facts_fol": [
      "¬publish_research(Leighton)",
      "study_phenomena(Leighton)",
      "formulate_theories(Leighton)"
    ],
    "rules": [
      "Every scientist either gathers data or advances knowledge.",
      "Leighton either teaches students or conducts experiments, but not necessarily both.",
      "Every scientist either publishes research or teaches students, but not necessarily both.",
      "Leighton either analyzes results or gathers data, but not both simultaneously.",
      "If Leighton studies phenomena, then he either analyzes results or formulates theories, but not both."
    ],
    "rules_fol": [
      "∀x (gather_data(x) ∨ advance_knowledge(x))",
      "teach_students(Leighton) ⊕ conduct_experiments(Leighton)",
      "∀x (publish_research(x) ⊕ teach_students(x))",
      "analyze_results(Leighton) ⊕ gather_data(Leighton)",
      "study_phenomena(Leighton) → (analyze_results(Leighton) ⊕ formulate_theories(Leighton))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Every scientist makes discoveries or advances knowledge.",
      "Every scientist who investigates matter either makes discoveries or conducts experiments.",
      "If Leighton earns awards, then he teaches students and mentors colleagues.",
      "If a scientist reads literature and designs studies, then they gather data.",
      "If a scientist either designs models or runs simulations (but not both), then they analyze results."
    ],
    "distracting_rules_fol": [
      "∀x (makes_discoveries(x) ∨ advance_knowledge(x))",
      "∀x (investigate_matter(x) → (make_discoveries(x) ∨ conduct_experiments(x)))",
      "earn_awards(Leighton) → (teach_students(Leighton) ∧ mentor_colleagues(Leighton))",
      "∀x ((read_literature(x) ∧ design_studies(x)) → gather_data(x))",
      "∀x ((design_models(x) ⊕ run_simulations(x)) → analyze_results(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Leighton studies phenomena.",
          "Leighton formulates theories."
        ],
        "rules": "If Leighton studies phenomena, then he either analyzes results or formulates theories, but not both.",
        "conclusion": "Leighton does not analyze results."
      },
      {
        "facts": [
          "Leighton does not analyze results."
        ],
        "rules": "Leighton either analyzes results or gathers data, but not both simultaneously.",
        "conclusion": "Leighton gathers data."
      },
      {
        "facts": [
          "Leighton does not publish research."
        ],
        "rules": "Every scientist either publishes research or teaches students, but not necessarily both.",
        "conclusion": "Leighton teaches students."
      },
      {
        "facts": [
          "Leighton teaches students."
        ],
        "rules": "Leighton either teaches students or conducts experiments, but not necessarily both.",
        "conclusion": "Leighton does not conduct experiments."
      },
      {
        "facts": [
          "Leighton gathers data."
        ],
        "rules": "Every scientist either gathers data or advances knowledge.",
        "conclusion": null
      },
      {
        "facts": [
          "Leighton does not conduct experiments."
        ],
        "rules": null,
        "conclusion": "Leighton conducts experiments and advances knowledge in particle physics."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "study_phenomena(Leighton)",
          "formulate_theories(Leighton)"
        ],
        "rules": "study_phenomena(Leighton) → (analyze_results(Leighton) ⊕ formulate_theories(Leighton))",
        "conclusion": "¬analyze_results(Leighton)"
      },
      {
        "facts": [
          "¬analyze_results(Leighton)"
        ],
        "rules": "analyze_results(Leighton) ⊕ gather_data(Leighton)",
        "conclusion": "gather_data(Leighton)"
      },
      {
        "facts": [
          "¬publish_research(Leighton)"
        ],
        "rules": "∀x (publish_research(x) ⊕ teach_students(x))",
        "conclusion": "teach_students(Leighton)"
      },
      {
        "facts": [
          "teach_students(Leighton)"
        ],
        "rules": "teach_students(Leighton) ⊕ conduct_experiments(Leighton)",
        "conclusion": "¬conduct_experiments(Leighton)"
      },
      {
        "facts": [
          "gather_data(Leighton)"
        ],
        "rules": "∀x (gather_data(x) ∨ advance_knowledge(x))",
        "conclusion": null
      },
      {
        "facts": [
          "¬conduct_experiments(Leighton)"
        ],
        "rules": null,
        "conclusion": "conduct_experiments(Leighton) ∧ advance_knowledge(Leighton)"
      }
    ],
    "conclusion": "Leighton conducts experiments and advances knowledge in particle physics.",
    "conclusion_fol": "conduct_experiments(Leighton) ∧ advance_knowledge(Leighton)",
    "answer": "False",
    "context": [
      "Leighton studies phenomena.",
      "Leighton formulates theories.",
      "If Leighton studies phenomena, then he either analyzes results or formulates theories, but not both.",
      "Leighton either analyzes results or gathers data, but not both simultaneously.",
      "Leighton does not publish research.",
      "Every scientist either publishes research or teaches students, but not necessarily both.",
      "Leighton either teaches students or conducts experiments, but not necessarily both.",
      "Every scientist either gathers data or advances knowledge."
    ],
    "context_fol": [
      "study_phenomena(Leighton)",
      "formulate_theories(Leighton)",
      "study_phenomena(Leighton) → (analyze_results(Leighton) ⊕ formulate_theories(Leighton))",
      "analyze_results(Leighton) ⊕ gather_data(Leighton)",
      "¬publish_research(Leighton)",
      "∀x (publish_research(x) ⊕ teach_students(x))",
      "teach_students(Leighton) ⊕ conduct_experiments(Leighton)",
      "∀x (gather_data(x) ∨ advance_knowledge(x))"
    ],
    "background_story": "Leighton was a brilliant physicist renowned for his groundbreaking research in particle physics. His work focused on the behavior of subatomic particles at distances measured in femtometers, a unit so small it's used to describe the size of protons and neutrons. Leighton's curiosity about the fundamental nature of matter led him to spend years studying the interactions at this minuscule scale. His experiments at the particle accelerator provided unprecedented insights into the strong nuclear force, earning him a Nobel Prize in Physics. Leighton's dedication to understanding the universe at its smallest scale has paved the way for future generations of scientists to explore the mysteries of quantum mechanics and beyond.",
    "name": "Leighton",
    "keyword": "femtometer",
    "subject_category": "scientist"
  },
  {
    "facts": [
      "Crew follows the rules.",
      "Crew enforces policies.",
      "Crew does not suppress dissent.",
      "Crew attends meetings.",
      "Crew seeks consensus."
    ],
    "facts_fol": [
      "follows_rules(Crew)",
      "enforce_policies(Crew)",
      "¬suppress_dissent(Crew)",
      "attends_meetings(Crew)",
      "seeks_consensus(Crew)"
    ],
    "rules": [
      "If Crew is loyal, then he will either rise to power or maintain the status quo, but not both.",
      "Any politician who follows rules and supports leaders is loyal.",
      "If Crew either enforces policies or suppresses dissent (but not both), then he maintains the status quo.",
      "If Crew either attends meetings or upholds the party (but not both), then he supports his leaders.",
      "Crew either seeks consensus or upholds the party, but not both."
    ],
    "rules_fol": [
      "loyal(Crew) → (rise_to_power(Crew) ⊕ maintain_status_quo(Crew))",
      "∀x ((follows_rules(x) ∧ supports_leaders(x)) → loyal(x))",
      "(enforce_policies(Crew) ⊕ suppress_dissent(Crew)) → maintain_status_quo(Crew)",
      "(attends_meetings(Crew) ⊕ upholds_party(Crew)) → supports_leaders(Crew)",
      "seeks_consensus(Crew) ⊕ upholds_party(Crew)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Crew is ambitious, then he is either loyal or pragmatic, but not both.",
      "If Crew defends policy, then he will maintain the status quo.",
      "All politicians who defend their party support its leaders.",
      "If Crew holds office, then he either upholds the party or makes key decisions, but not both."
    ],
    "distracting_rules_fol": [
      "ambitious(Crew) → (loyal(Crew) ⊕ pragmatic(Crew))",
      "defends_policy(Crew) → maintain_status_quo(Crew)",
      "∀x (defends_party(x) → supports_leaders(x))",
      "holds_office(Crew) → (upholds_party(Crew) ⊕ makes_key_decisions(Crew))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Crew seeks consensus."
        ],
        "rules": "Crew either seeks consensus or upholds the party, but not both.",
        "conclusion": "Crew does not uphold the party."
      },
      {
        "facts": [
          "Crew attends meetings.",
          "Crew does not uphold the party."
        ],
        "rules": "If Crew either attends meetings or upholds the party (but not both), then he supports his leaders.",
        "conclusion": "Crew supports the leaders."
      },
      {
        "facts": [
          "Crew enforces policies.",
          "Crew does not suppress dissent."
        ],
        "rules": "If Crew either enforces policies or suppresses dissent (but not both), then he maintains the status quo.",
        "conclusion": "Crew maintains the status quo."
      },
      {
        "facts": [
          "Crew follows the rules.",
          "Crew supports the leaders."
        ],
        "rules": "Any politician who follows rules and supports leaders is loyal.",
        "conclusion": "Crew is loyal."
      },
      {
        "facts": [
          "Crew is loyal.",
          "Crew maintains the status quo."
        ],
        "rules": "If Crew is loyal, then he will either rise to power or maintain the status quo, but not both.",
        "conclusion": "Crew rises to power."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "seeks_consensus(Crew)"
        ],
        "rules": "seeks_consensus(Crew) ⊕ upholds_party(Crew)",
        "conclusion": "¬upholds_party(Crew)"
      },
      {
        "facts": [
          "attends_meetings(Crew)",
          "¬upholds_party(Crew)"
        ],
        "rules": "(attends_meetings(Crew) ⊕ upholds_party(Crew)) → supports_leaders(Crew)",
        "conclusion": "supports_leaders(Crew)"
      },
      {
        "facts": [
          "enforce_policies(Crew)",
          "¬suppress_dissent(Crew)"
        ],
        "rules": "(enforce_policies(Crew) ⊕ suppress_dissent(Crew)) → maintain_status_quo(Crew)",
        "conclusion": "maintain_status_quo(Crew)"
      },
      {
        "facts": [
          "follows_rules(Crew)",
          "supports_leaders(Crew)"
        ],
        "rules": "∀x ((follows_rules(x) ∧ supports_leaders(x)) → loyal(x))",
        "conclusion": "loyal(Crew)"
      },
      {
        "facts": [
          "loyal(Crew)",
          "maintain_status_quo(Crew)"
        ],
        "rules": "loyal(Crew) → (rise_to_power(Crew) ⊕ maintain_status_quo(Crew))",
        "conclusion": "rise_to_power(Crew)"
      }
    ],
    "conclusion": "Crew rises to power.",
    "conclusion_fol": "rise_to_power(Crew)",
    "answer": "False",
    "context": [
      "Crew seeks consensus.",
      "Crew either seeks consensus or upholds the party, but not both.",
      "Crew attends meetings.",
      "If Crew either attends meetings or upholds the party (but not both), then he supports his leaders.",
      "Crew enforces policies.",
      "Crew does not suppress dissent.",
      "If Crew either enforces policies or suppresses dissent (but not both), then he maintains the status quo.",
      "Crew follows the rules.",
      "Any politician who follows rules and supports leaders is loyal.",
      "If Crew is loyal, then he will either rise to power or maintain the status quo, but not both."
    ],
    "context_fol": [
      "seeks_consensus(Crew)",
      "seeks_consensus(Crew) ⊕ upholds_party(Crew)",
      "attends_meetings(Crew)",
      "(attends_meetings(Crew) ⊕ upholds_party(Crew)) → supports_leaders(Crew)",
      "enforce_policies(Crew)",
      "¬suppress_dissent(Crew)",
      "(enforce_policies(Crew) ⊕ suppress_dissent(Crew)) → maintain_status_quo(Crew)",
      "follows_rules(Crew)",
      "∀x ((follows_rules(x) ∧ supports_leaders(x)) → loyal(x))",
      "loyal(Crew) → (rise_to_power(Crew) ⊕ maintain_status_quo(Crew))"
    ],
    "background_story": "Crew rose through the ranks of the party with calculated precision, earning a reputation as a dependable apparatchik. He began his career as a low-level functionary, diligently carrying out tasks assigned by his superiors. Crew's unwavering loyalty and ability to navigate the complex web of party politics caught the attention of higher-ups. He was soon promoted to key positions, where he oversaw the implementation of party policies and ensured that dissenting voices were silenced. Crew's role was not to innovate or challenge the status quo, but to maintain the machinery of the party, making him an indispensable cog in its operation. His name became synonymous with bureaucratic efficiency and adherence to the party line, though whispers of his ruthlessness in dealing with opponents often circulated in hushed tones.",
    "name": "Crew",
    "keyword": "apparatchik",
    "subject_category": "politician"
  },
  {
    "facts": [
      "Ivy is confident.",
      "Ivy does not dress well.",
      "Ivy carries herself with poise."
    ],
    "facts_fol": [
      "confident(Ivy)",
      "¬dresses_well(Ivy)",
      "carries_herself(Ivy)"
    ],
    "rules": [
      "Ivy is either fashionable or professional (or both).",
      "If Ivy is confident, then she is both elegant and fashionable.",
      "If someone dresses well and carries themselves with poise, then they are elegant."
    ],
    "rules_fol": [
      "fashionable(Ivy) ∨ professional(Ivy)",
      "confident(Ivy) → (elegant(Ivy) ∧ fashionable(Ivy))",
      "∀x ((dresses_well(x) ∧ carries_herself(x)) → elegant(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Anyone who styles themselves well is fashionable.",
      "If Ivy is successful, then she is either elegant or refined, but not both."
    ],
    "distracting_rules_fol": [
      "∀x (styles_well(x) → fashionable(x))",
      "successful(Ivy) → (elegant(Ivy) ⊕ refined(Ivy))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Ivy does not dress well.",
          "Ivy carries herself with poise."
        ],
        "rules": "If someone dresses well and carries themselves with poise, then they are elegant.",
        "conclusion": null
      },
      {
        "facts": [
          "Ivy is confident."
        ],
        "rules": "If Ivy is confident, then she is both elegant and fashionable.",
        "conclusion": "Ivy is fashionable."
      },
      {
        "facts": [
          "Ivy is fashionable."
        ],
        "rules": "Ivy is either fashionable or professional (or both).",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬dresses_well(Ivy)",
          "carries_herself(Ivy)"
        ],
        "rules": "∀x ((dresses_well(x) ∧ carries_herself(x)) → elegant(x))",
        "conclusion": null
      },
      {
        "facts": [
          "confident(Ivy)"
        ],
        "rules": "confident(Ivy) → (elegant(Ivy) ∧ fashionable(Ivy))",
        "conclusion": "fashionable(Ivy)"
      },
      {
        "facts": [
          "fashionable(Ivy)"
        ],
        "rules": "fashionable(Ivy) ∨ professional(Ivy)",
        "conclusion": null
      }
    ],
    "conclusion": "Ivy is professional.",
    "conclusion_fol": "professional(Ivy)",
    "answer": "Uncertain",
    "context": [
      "Ivy does not dress well.",
      "Ivy carries herself with poise.",
      "If someone dresses well and carries themselves with poise, then they are elegant.",
      "Ivy is confident.",
      "If Ivy is confident, then she is both elegant and fashionable.",
      "Ivy is either fashionable or professional (or both)."
    ],
    "context_fol": [
      "¬dresses_well(Ivy)",
      "carries_herself(Ivy)",
      "∀x ((dresses_well(x) ∧ carries_herself(x)) → elegant(x))",
      "confident(Ivy)",
      "confident(Ivy) → (elegant(Ivy) ∧ fashionable(Ivy))",
      "fashionable(Ivy) ∨ professional(Ivy)"
    ],
    "background_story": "Ivy was a stylish and ambitious young professional who made a statement with her impeccable fashion sense. Among her extensive wardrobe, one accessory stood out: a vintage necktie she had inherited from her grandfather, a retired businessman. The tie, with its unique pattern and soft silk texture, held sentimental value and served as a reminder of her grandfather's advice to always dress for success. Ivy often wore the necktie on important days, such as job interviews and client meetings, where it became a conversation starter and a symbol of her confidence and professionalism. As she climbed the corporate ladder, the necktie remained her trusted companion, a tangible connection to her family's legacy and a personal trademark that set her apart in the business world.",
    "name": "Ivy",
    "keyword": "necktie",
    "subject_category": "human"
  },
  {
    "facts": [
      "Chance loves the outdoors.",
      "Chance supports the local community."
    ],
    "facts_fol": [
      "loves_outdoors(Chance)",
      "supports_local_community(Chance)"
    ],
    "rules": [
      "Chance is either a conservationist or a polluter, but not both.",
      "Chance either protects nature or is a conservationist.",
      "If Chance loves the outdoors, then he either protects nature or saves wildlife (but not both).",
      "Chance either helps the environment or saves wildlife.",
      "Chance either supports the local Saba community or helps the environment, which reflects his dedication to the island and its people."
    ],
    "rules_fol": [
      "conservationist(Chance) ⊕ polluter(Chance)",
      "protects_nature(Chance) ∨ conservationist(Chance)",
      "loves_outdoors(Chance) → (protects_nature(Chance) ⊕ saves_wildlife(Chance))",
      "helps_environment(Chance) ∨ saves_wildlife(Chance)",
      "supports_local_community(Chance) ⊕ helps_environment(Chance)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "For all humans, if they respect the earth and fight waste, then they are conservationists.",
      "If Chance lives on an island, then he either protects nature or fights climate change, but not both.",
      "If Chance either rescues animals or preserves habitats (but not both), then he saves wildlife.",
      "Anyone who reduces waste or promotes sustainability helps the environment."
    ],
    "distracting_rules_fol": [
      "∀x ((respects_earth(x) ∧ fights_waste(x)) → conservationist(x))",
      "lives_on_island(Chance) → (protects_nature(Chance) ⊕ fights_climate_change(Chance))",
      "(rescues_animals(Chance) ⊕ preserves_habitats(Chance)) → saves_wildlife(Chance)",
      "∀x ((reduces_waste(x) ∨ promotes_sustainability(x)) → helps_environment(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Chance supports the local community."
        ],
        "rules": "Chance either supports the local Saba community or helps the environment, which reflects his dedication to the island and its people.",
        "conclusion": "Chance does not help the environment."
      },
      {
        "facts": [
          "Chance does not help the environment."
        ],
        "rules": "Chance either helps the environment or saves wildlife.",
        "conclusion": "Chance saves wildlife."
      },
      {
        "facts": [
          "Chance loves the outdoors.",
          "Chance saves wildlife."
        ],
        "rules": "If Chance loves the outdoors, then he either protects nature or saves wildlife (but not both).",
        "conclusion": "Chance does not protect nature."
      },
      {
        "facts": [
          "Chance does not protect nature."
        ],
        "rules": "Chance either protects nature or is a conservationist.",
        "conclusion": "Chance is a conservationist."
      },
      {
        "facts": [
          "Chance is a conservationist."
        ],
        "rules": "Chance is either a conservationist or a polluter, but not both.",
        "conclusion": "Chance is not a polluter."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "supports_local_community(Chance)"
        ],
        "rules": "supports_local_community(Chance) ⊕ helps_environment(Chance)",
        "conclusion": "¬helps_environment(Chance)"
      },
      {
        "facts": [
          "¬helps_environment(Chance)"
        ],
        "rules": "helps_environment(Chance) ∨ saves_wildlife(Chance)",
        "conclusion": "saves_wildlife(Chance)"
      },
      {
        "facts": [
          "loves_outdoors(Chance)",
          "saves_wildlife(Chance)"
        ],
        "rules": "loves_outdoors(Chance) → (protects_nature(Chance) ⊕ saves_wildlife(Chance))",
        "conclusion": "¬protects_nature(Chance)"
      },
      {
        "facts": [
          "¬protects_nature(Chance)"
        ],
        "rules": "protects_nature(Chance) ∨ conservationist(Chance)",
        "conclusion": "conservationist(Chance)"
      },
      {
        "facts": [
          "conservationist(Chance)"
        ],
        "rules": "conservationist(Chance) ⊕ polluter(Chance)",
        "conclusion": "¬polluter(Chance)"
      }
    ],
    "conclusion": "Chance is not a polluter.",
    "conclusion_fol": "¬polluter(Chance)",
    "answer": "True",
    "context": [
      "Chance supports the local community.",
      "Chance either supports the local Saba community or helps the environment, which reflects his dedication to the island and its people.",
      "Chance either helps the environment or saves wildlife.",
      "Chance loves the outdoors.",
      "If Chance loves the outdoors, then he either protects nature or saves wildlife (but not both).",
      "Chance either protects nature or is a conservationist.",
      "Chance is either a conservationist or a polluter, but not both."
    ],
    "context_fol": [
      "supports_local_community(Chance)",
      "supports_local_community(Chance) ⊕ helps_environment(Chance)",
      "helps_environment(Chance) ∨ saves_wildlife(Chance)",
      "loves_outdoors(Chance)",
      "loves_outdoors(Chance) → (protects_nature(Chance) ⊕ saves_wildlife(Chance))",
      "protects_nature(Chance) ∨ conservationist(Chance)",
      "conservationist(Chance) ⊕ polluter(Chance)"
    ],
    "background_story": "Chance, a free-spirited traveler, stumbled upon a small, secluded Saba island in the Caribbean. Enchanted by its untouched beauty and rugged landscapes, he decided to stay and explore. As he delved deeper into the island's culture, Chance discovered a passion for preserving Saba's unique ecosystem. He joined a local conservation effort, dedicating himself to protecting the island's coral reefs and marine life. The islanders, impressed by his dedication, welcomed Chance as one of their own. He soon became known for his tireless work in promoting sustainable tourism and educating visitors about Saba's fragile environment. Chance's love for the island and its people had brought him a sense of belonging and purpose, and he knew that Saba would forever be his home.",
    "name": "Chance",
    "keyword": "saba",
    "subject_category": "human"
  },
  {
    "facts": [
      "Charleigh gets enough rest.",
      "Charleigh is not resilient.",
      "Charleigh prioritizes self-care.",
      "Charleigh does not practice mindfulness.",
      "Charleigh drinks water.",
      "Charleigh eats fruits."
    ],
    "facts_fol": [
      "gets_rest(Charleigh)",
      "¬resilient(Charleigh)",
      "prioritizes_selfcare(Charleigh)",
      "¬practices_mindfulness(Charleigh)",
      "drinks_water(Charleigh)",
      "eats_fruits(Charleigh)"
    ],
    "rules": [
      "If Charleigh eats well and exercises regularly, then she is healthy.",
      "For all people, either they get enough rest or they eat well, but it's not necessary for both conditions to be met simultaneously.",
      "If Charleigh manages stress, then she either stays hydrated or exercises regularly (but not both).",
      "If Charleigh prioritizes self-care, then she either manages stress or practices mindfulness (but not both).",
      "For all humans, if they drink water and eat fruits, then they stay hydrated."
    ],
    "rules_fol": [
      "(eats_well(Charleigh) ∧ exercises_regularly(Charleigh)) → healthy(Charleigh)",
      "∀x (gets_rest(x) ⊕ eats_well(x))",
      "manages_stress(Charleigh) → (stays_hydrated(Charleigh) ⊕ exercises_regularly(Charleigh))",
      "prioritizes_selfcare(Charleigh) → (manages_stress(Charleigh) ⊕ practices_mindfulness(Charleigh))",
      "∀x ((drinks_water(x) ∧ eats_fruits(x)) → stays_hydrated(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Anyone who has balance in life or seeks help when needed is healthy.",
      "If Charleigh takes medicine, then she either avoids junk food or eats well, but not both.",
      "If someone joins a gym and tracks their progress, then they exercise regularly.",
      "If Charleigh seeks help, then she sets goals and manages stress.",
      "If Charleigh watches her diet and limits sugar, then she stays hydrated."
    ],
    "distracting_rules_fol": [
      "∀x ((has_balance(x) ∨ seeks_help(x)) → healthy(x))",
      "takes_medicine(Charleigh) → (avoids_junk(Charleigh) ⊕ eats_well(Charleigh))",
      "∀x ((joins_gym(x) ∧ tracks_progress(x)) → exercises_regularly(x))",
      "seeks_help(Charleigh) → (sets_goals(Charleigh) ∧ manages_stress(Charleigh))",
      "(watches_diet(Charleigh) ∧ limits_sugar(Charleigh)) → stays_hydrated(Charleigh)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Charleigh drinks water.",
          "Charleigh eats fruits."
        ],
        "rules": "For all humans, if they drink water and eat fruits, then they stay hydrated.",
        "conclusion": "Charleigh stays hydrated."
      },
      {
        "facts": [
          "Charleigh prioritizes self-care.",
          "Charleigh does not practice mindfulness."
        ],
        "rules": "If Charleigh prioritizes self-care, then she either manages stress or practices mindfulness (but not both).",
        "conclusion": "Charleigh manages stress."
      },
      {
        "facts": [
          "Charleigh manages stress.",
          "Charleigh stays hydrated."
        ],
        "rules": "If Charleigh manages stress, then she either stays hydrated or exercises regularly (but not both).",
        "conclusion": "Charleigh does not exercise regularly."
      },
      {
        "facts": [
          "Charleigh gets enough rest."
        ],
        "rules": "For all people, either they get enough rest or they eat well, but it's not necessary for both conditions to be met simultaneously.",
        "conclusion": "Charleigh does not eat well."
      },
      {
        "facts": [
          "Charleigh does not eat well.",
          "Charleigh does not exercise regularly."
        ],
        "rules": "If Charleigh eats well and exercises regularly, then she is healthy.",
        "conclusion": null
      },
      {
        "facts": [
          "Charleigh is not resilient."
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "drinks_water(Charleigh)",
          "eats_fruits(Charleigh)"
        ],
        "rules": "∀x ((drinks_water(x) ∧ eats_fruits(x)) → stays_hydrated(x))",
        "conclusion": "stays_hydrated(Charleigh)"
      },
      {
        "facts": [
          "prioritizes_selfcare(Charleigh)",
          "¬practices_mindfulness(Charleigh)"
        ],
        "rules": "prioritizes_selfcare(Charleigh) → (manages_stress(Charleigh) ⊕ practices_mindfulness(Charleigh))",
        "conclusion": "manages_stress(Charleigh)"
      },
      {
        "facts": [
          "manages_stress(Charleigh)",
          "stays_hydrated(Charleigh)"
        ],
        "rules": "manages_stress(Charleigh) → (stays_hydrated(Charleigh) ⊕ exercises_regularly(Charleigh))",
        "conclusion": "¬exercises_regularly(Charleigh)"
      },
      {
        "facts": [
          "gets_rest(Charleigh)"
        ],
        "rules": "∀x (gets_rest(x) ⊕ eats_well(x))",
        "conclusion": "¬eats_well(Charleigh)"
      },
      {
        "facts": [
          "¬eats_well(Charleigh)",
          "¬exercises_regularly(Charleigh)"
        ],
        "rules": "(eats_well(Charleigh) ∧ exercises_regularly(Charleigh)) → healthy(Charleigh)",
        "conclusion": null
      },
      {
        "facts": [
          "¬resilient(Charleigh)"
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "conclusion": "Charleigh is either healthy or resilient (or both).",
    "conclusion_fol": "healthy(Charleigh) ∨ resilient(Charleigh)",
    "answer": "Uncertain",
    "context": [
      "Charleigh drinks water.",
      "Charleigh eats fruits.",
      "For all humans, if they drink water and eat fruits, then they stay hydrated.",
      "Charleigh prioritizes self-care.",
      "Charleigh does not practice mindfulness.",
      "If Charleigh prioritizes self-care, then she either manages stress or practices mindfulness (but not both).",
      "If Charleigh manages stress, then she either stays hydrated or exercises regularly (but not both).",
      "Charleigh gets enough rest.",
      "For all people, either they get enough rest or they eat well, but it's not necessary for both conditions to be met simultaneously.",
      "If Charleigh eats well and exercises regularly, then she is healthy.",
      "Charleigh is not resilient."
    ],
    "context_fol": [
      "drinks_water(Charleigh)",
      "eats_fruits(Charleigh)",
      "∀x ((drinks_water(x) ∧ eats_fruits(x)) → stays_hydrated(x))",
      "prioritizes_selfcare(Charleigh)",
      "¬practices_mindfulness(Charleigh)",
      "prioritizes_selfcare(Charleigh) → (manages_stress(Charleigh) ⊕ practices_mindfulness(Charleigh))",
      "manages_stress(Charleigh) → (stays_hydrated(Charleigh) ⊕ exercises_regularly(Charleigh))",
      "gets_rest(Charleigh)",
      "∀x (gets_rest(x) ⊕ eats_well(x))",
      "(eats_well(Charleigh) ∧ exercises_regularly(Charleigh)) → healthy(Charleigh)",
      "¬resilient(Charleigh)"
    ],
    "background_story": "Charleigh, a vibrant college student, had always been active and healthy. However, during her sophomore year, she began to experience recurring bouts of furunculosis, a painful skin condition characterized by boils and carbuncles. Despite her initial embarrassment and frustration, Charleigh tackled the issue head-on, researching extensively and working closely with her dermatologist to manage her condition. With time, patience, and the right treatment, Charleigh learned to control her furunculosis, adapting her lifestyle to prevent future outbreaks. Her experience taught her valuable lessons about resilience, self-care, and the importance of seeking help when needed. Charleigh's journey not only improved her physical health but also boosted her confidence and empathy for others dealing with chronic conditions.",
    "name": "Charleigh",
    "keyword": "furunculosis",
    "subject_category": "human"
  },
  {
    "facts": [
      "Pooh has a big appetite.",
      "Pooh eats berries.",
      "Pooh does not win prizes."
    ],
    "facts_fol": [
      "has_big_appetite(Pooh)",
      "eats_berries(Pooh)",
      "¬wins_prizes(Pooh)"
    ],
    "rules": [
      "For every bear, the bear either loves honey or dislikes honey, but not both.",
      "If Pooh enjoys picnics, then he either eats berries or loves honey, but not both.",
      "If Pooh likes the outdoors or has a big appetite, then he can enjoy picnics.",
      "Pooh either plays games or likes the outdoors, but not necessarily both.",
      "Pooh either wins prizes or plays games, but not both."
    ],
    "rules_fol": [
      "∀x (loves_honey(x) ⊕ dislikes_honey(x))",
      "enjoys_picnics(Pooh) → (eats_berries(Pooh) ⊕ loves_honey(Pooh))",
      "(likes_outdoors(Pooh) ∨ has_big_appetite(Pooh)) → enjoys_picnics(Pooh)",
      "plays_games(Pooh) ⊕ likes_outdoors(Pooh)",
      "wins_prizes(Pooh) ⊕ plays_games(Pooh)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Pooh is curious, then he loves honey and makes friends.",
      "If Pooh visits the beach, then he either makes friends or enjoys picnics (or both).",
      "Any bear that explores woods or climbs trees likes the outdoors.",
      "If Pooh visits arcades or enjoys competitions, then he can play games."
    ],
    "distracting_rules_fol": [
      "is_curious(Pooh) → (loves_honey(Pooh) ∧ makes_friends(Pooh))",
      "visits_beach(Pooh) → (makes_friends(Pooh) ∨ enjoys_picnics(Pooh))",
      "∀x ((explores_woods(x) ∨ climbs_trees(x)) → likes_outdoors(x))",
      "(visits_arcades(Pooh) ∨ enjoys_competitions(Pooh)) → plays_games(Pooh)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Pooh does not win prizes."
        ],
        "rules": "Pooh either wins prizes or plays games, but not both.",
        "conclusion": "Pooh plays games."
      },
      {
        "facts": [
          "Pooh plays games."
        ],
        "rules": "Pooh either plays games or likes the outdoors, but not necessarily both.",
        "conclusion": "Pooh does not like the outdoors."
      },
      {
        "facts": [
          "Pooh does not like the outdoors.",
          "Pooh has a big appetite."
        ],
        "rules": "If Pooh likes the outdoors or has a big appetite, then he can enjoy picnics.",
        "conclusion": "Pooh enjoys picnics."
      },
      {
        "facts": [
          "Pooh enjoys picnics.",
          "Pooh eats berries."
        ],
        "rules": "If Pooh enjoys picnics, then he either eats berries or loves honey, but not both.",
        "conclusion": "Pooh does not love honey."
      },
      {
        "facts": [
          "Pooh does not love honey."
        ],
        "rules": "For every bear, the bear either loves honey or dislikes honey, but not both.",
        "conclusion": "Pooh dislikes honey."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬wins_prizes(Pooh)"
        ],
        "rules": "wins_prizes(Pooh) ⊕ plays_games(Pooh)",
        "conclusion": "plays_games(Pooh)"
      },
      {
        "facts": [
          "plays_games(Pooh)"
        ],
        "rules": "plays_games(Pooh) ⊕ likes_outdoors(Pooh)",
        "conclusion": "¬likes_outdoors(Pooh)"
      },
      {
        "facts": [
          "¬likes_outdoors(Pooh)",
          "has_big_appetite(Pooh)"
        ],
        "rules": "(likes_outdoors(Pooh) ∨ has_big_appetite(Pooh)) → enjoys_picnics(Pooh)",
        "conclusion": "enjoys_picnics(Pooh)"
      },
      {
        "facts": [
          "enjoys_picnics(Pooh)",
          "eats_berries(Pooh)"
        ],
        "rules": "enjoys_picnics(Pooh) → (eats_berries(Pooh) ⊕ loves_honey(Pooh))",
        "conclusion": "¬loves_honey(Pooh)"
      },
      {
        "facts": [
          "¬loves_honey(Pooh)"
        ],
        "rules": "∀x (loves_honey(x) ⊕ dislikes_honey(x))",
        "conclusion": "dislikes_honey(Pooh)"
      }
    ],
    "conclusion": "Pooh dislikes honey.",
    "conclusion_fol": "dislikes_honey(Pooh)",
    "answer": "True",
    "context": [
      "Pooh does not win prizes.",
      "Pooh either wins prizes or plays games, but not both.",
      "Pooh either plays games or likes the outdoors, but not necessarily both.",
      "Pooh has a big appetite.",
      "If Pooh likes the outdoors or has a big appetite, then he can enjoy picnics.",
      "Pooh eats berries.",
      "If Pooh enjoys picnics, then he either eats berries or loves honey, but not both.",
      "For every bear, the bear either loves honey or dislikes honey, but not both."
    ],
    "context_fol": [
      "¬wins_prizes(Pooh)",
      "wins_prizes(Pooh) ⊕ plays_games(Pooh)",
      "plays_games(Pooh) ⊕ likes_outdoors(Pooh)",
      "has_big_appetite(Pooh)",
      "(likes_outdoors(Pooh) ∨ has_big_appetite(Pooh)) → enjoys_picnics(Pooh)",
      "eats_berries(Pooh)",
      "enjoys_picnics(Pooh) → (eats_berries(Pooh) ⊕ loves_honey(Pooh))",
      "∀x (loves_honey(x) ⊕ dislikes_honey(x))"
    ],
    "background_story": "Pooh, the lovable bear from the Hundred Acre Wood, once embarked on a seaside adventure to Margate. Entranced by the tales of his friend, Christopher Robin, about the town's beautiful beaches and delicious sticks of rock, Pooh decided to visit. As he strolled along Margate's sandy shores, he discovered a fondness for the town's nostalgic charm. Pooh spent his days playing in the amusement arcades, winning stuffed animals for his friends back home, and indulging in honey-flavored ice cream. The locals adored the friendly bear, and he quickly became a Margate celebrity. Though he eventually returned to the Wood, Pooh never forgot his wonderful adventures in Margate and often shared stories of his seaside escapades with Eeyore and Piglet.",
    "name": "Pooh",
    "keyword": "margate",
    "subject_category": "bear"
  },
  {
    "facts": [
      "Paislee faces her fears.",
      "Paislee uncovers secrets.",
      "Paislee is skilled.",
      "Paislee seeks knowledge.",
      "Paislee explores the wild.",
      "Paislee tries challenges.",
      "Paislee pursues adventure.",
      "Paislee joins an expedition."
    ],
    "facts_fol": [
      "faces_fears(Paislee)",
      "uncovers_secrets(Paislee)",
      "skilled(Paislee)",
      "seeks_knowledge(Paislee)",
      "explores_wild(Paislee)",
      "tries_challenges(Paislee)",
      "pursues_adventure(Paislee)",
      "joins_expedition(Paislee)"
    ],
    "rules": [
      "All adventurers who seek knowledge and enjoy discovery are curious.",
      "Any adventurer who faces fears and takes risks is brave.",
      "All adventurers who uncover secrets and explore the wild enjoy discovery.",
      "All adventurers who either venture alone or try challenges (but not both) take risks.",
      "If Paislee pursues adventure, then she either joins an expedition or ventures alone, but not both."
    ],
    "rules_fol": [
      "∀x ((seeks_knowledge(x) ∧ enjoys_discovery(x)) → curious(x))",
      "∀x ((faces_fears(x) ∧ takes_risks(x)) → brave(x))",
      "∀x ((uncovers_secrets(x) ∧ explores_wild(x)) → enjoys_discovery(x))",
      "∀x ((vents_alone(x) ⊕ tries_challenges(x)) → takes_risks(x))",
      "pursues_adventure(Paislee) → (joins_expedition(Paislee) ⊕ vents_alone(Paislee))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Paislee maps terrain, then she is either curious or finds hidden passages.",
      "All adventurers who lead expeditions are brave.",
      "If Paislee either maps paths or finds artifacts (but not both), then she enjoys discovery.",
      "All adventurers either chart courses or take risks.",
      "If Paislee either maps terrain or navigates dark environments (but not both), then she ventures alone."
    ],
    "distracting_rules_fol": [
      "maps_terrain(Paislee) → (curious(Paislee) ∨ finds_hidden_passages(Paislee))",
      "∀x (leads_expeditions(x) → brave(x))",
      "(maps_paths(Paislee) ⊕ finds_artifacts(Paislee)) → enjoys_discovery(Paislee)",
      "∀x (charts_courses(x) ∨ takes_risks(x))",
      "(maps_terrain(Paislee) ⊕ navigates_dark(Paislee)) → vents_alone(Paislee)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Paislee pursues adventure.",
          "Paislee joins an expedition."
        ],
        "rules": "If Paislee pursues adventure, then she either joins an expedition or ventures alone, but not both.",
        "conclusion": "Paislee does not venture alone."
      },
      {
        "facts": [
          "Paislee does not venture alone.",
          "Paislee tries challenges."
        ],
        "rules": "All adventurers who either venture alone or try challenges (but not both) take risks.",
        "conclusion": "Paislee takes risks."
      },
      {
        "facts": [
          "Paislee uncovers secrets.",
          "Paislee explores the wild."
        ],
        "rules": "All adventurers who uncover secrets and explore the wild enjoy discovery.",
        "conclusion": "Paislee enjoys discovery."
      },
      {
        "facts": [
          "Paislee faces her fears.",
          "Paislee takes risks."
        ],
        "rules": "Any adventurer who faces fears and takes risks is brave.",
        "conclusion": "Paislee is brave."
      },
      {
        "facts": [
          "Paislee seeks knowledge.",
          "Paislee enjoys discovery."
        ],
        "rules": "All adventurers who seek knowledge and enjoy discovery are curious.",
        "conclusion": "Paislee is curious."
      },
      {
        "facts": [
          "Paislee is brave.",
          "Paislee is skilled.",
          "Paislee is curious."
        ],
        "rules": null,
        "conclusion": "Paislee, as an adventurer, is brave, skilled and curious."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "pursues_adventure(Paislee)",
          "joins_expedition(Paislee)"
        ],
        "rules": "pursues_adventure(Paislee) → (joins_expedition(Paislee) ⊕ vents_alone(Paislee))",
        "conclusion": "¬vents_alone(Paislee)"
      },
      {
        "facts": [
          "¬vents_alone(Paislee)",
          "tries_challenges(Paislee)"
        ],
        "rules": "∀x ((vents_alone(x) ⊕ tries_challenges(x)) → takes_risks(x))",
        "conclusion": "takes_risks(Paislee)"
      },
      {
        "facts": [
          "uncovers_secrets(Paislee)",
          "explores_wild(Paislee)"
        ],
        "rules": "∀x ((uncovers_secrets(x) ∧ explores_wild(x)) → enjoys_discovery(x))",
        "conclusion": "enjoys_discovery(Paislee)"
      },
      {
        "facts": [
          "faces_fears(Paislee)",
          "takes_risks(Paislee)"
        ],
        "rules": "∀x ((faces_fears(x) ∧ takes_risks(x)) → brave(x))",
        "conclusion": "brave(Paislee)"
      },
      {
        "facts": [
          "seeks_knowledge(Paislee)",
          "enjoys_discovery(Paislee)"
        ],
        "rules": "∀x ((seeks_knowledge(x) ∧ enjoys_discovery(x)) → curious(x))",
        "conclusion": "curious(Paislee)"
      },
      {
        "facts": [
          "brave(Paislee)",
          "skilled(Paislee)",
          "curious(Paislee)"
        ],
        "rules": null,
        "conclusion": "brave(Paislee) ∧ (skilled(Paislee) ∧ curious(Paislee))"
      }
    ],
    "conclusion": "Paislee, as an adventurer, is brave, skilled and curious.",
    "conclusion_fol": "brave(Paislee) ∧ (skilled(Paislee) ∧ curious(Paislee))",
    "answer": "True",
    "context": [
      "Paislee pursues adventure.",
      "Paislee joins an expedition.",
      "If Paislee pursues adventure, then she either joins an expedition or ventures alone, but not both.",
      "Paislee tries challenges.",
      "All adventurers who either venture alone or try challenges (but not both) take risks.",
      "Paislee uncovers secrets.",
      "Paislee explores the wild.",
      "All adventurers who uncover secrets and explore the wild enjoy discovery.",
      "Paislee faces her fears.",
      "Any adventurer who faces fears and takes risks is brave.",
      "Paislee seeks knowledge.",
      "All adventurers who seek knowledge and enjoy discovery are curious.",
      "Paislee is skilled."
    ],
    "context_fol": [
      "pursues_adventure(Paislee)",
      "joins_expedition(Paislee)",
      "pursues_adventure(Paislee) → (joins_expedition(Paislee) ⊕ vents_alone(Paislee))",
      "tries_challenges(Paislee)",
      "∀x ((vents_alone(x) ⊕ tries_challenges(x)) → takes_risks(x))",
      "uncovers_secrets(Paislee)",
      "explores_wild(Paislee)",
      "∀x ((uncovers_secrets(x) ∧ explores_wild(x)) → enjoys_discovery(x))",
      "faces_fears(Paislee)",
      "∀x ((faces_fears(x) ∧ takes_risks(x)) → brave(x))",
      "seeks_knowledge(Paislee)",
      "∀x ((seeks_knowledge(x) ∧ enjoys_discovery(x)) → curious(x))",
      "skilled(Paislee)"
    ],
    "background_story": "Paislee was an intrepid explorer with a passion for uncovering hidden wonders. Her latest obsession was a mysterious cave system deep in the mountains. Legends spoke of ancient formations and hidden treasures within its depths. Paislee spent months planning her expedition, assembling a team of experts and gathering state-of-the-art equipment. As they ventured into the cave, the darkness was illuminated only by the light of their headlamps. Paislee's determination and expertise led them through narrow passages and vast caverns, finally stumbling upon an untouched underground lake. The discovery sparked international interest, and Paislee's name became synonymous with bravery and discovery. Her journey into the cave unveiled secrets that had lain hidden for millennia, inspiring a new generation of explorers.",
    "name": "Paislee",
    "keyword": "cave",
    "subject_category": "adventurer"
  },
  {
    "facts": [
      "Mira advances mathematics.",
      "Mira uses algorithms.",
      "Mira models systems."
    ],
    "facts_fol": [
      "advance_mathematics(Mira)",
      "use_algorithms(Mira)",
      "model_systems(Mira)"
    ],
    "rules": [
      "If Mira studies recursion, then she can either advance mathematics or discover natural patterns, but not both.",
      "Mira either solves equations or studies recursion.",
      "If Mira uses algorithms, then she either models systems or solves equations, but not both."
    ],
    "rules_fol": [
      "study_recursion(Mira) → (advance_mathematics(Mira) ⊕ discover_natural_patterns(Mira))",
      "solve_equations(Mira) ∨ study_recursion(Mira)",
      "use_algorithms(Mira) → (model_systems(Mira) ⊕ solve_equations(Mira))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Mira analyzes data, then she either finds harmonies or studies recursion (or both).",
      "Mira either analyzes data or solves equations."
    ],
    "distracting_rules_fol": [
      "analyze_data(Mira) → (find_harmonies(Mira) ∨ study_recursion(Mira))",
      "analyzes_data(Mira) ∨ solve_equations(Mira)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Mira uses algorithms.",
          "Mira models systems."
        ],
        "rules": "If Mira uses algorithms, then she either models systems or solves equations, but not both.",
        "conclusion": "Mira does not solve equations."
      },
      {
        "facts": [
          "Mira does not solve equations."
        ],
        "rules": "Mira either solves equations or studies recursion.",
        "conclusion": "Mira studies recursion."
      },
      {
        "facts": [
          "Mira studies recursion.",
          "Mira advances mathematics."
        ],
        "rules": "If Mira studies recursion, then she can either advance mathematics or discover natural patterns, but not both.",
        "conclusion": "Mira discovers natural patterns."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "use_algorithms(Mira)",
          "model_systems(Mira)"
        ],
        "rules": "use_algorithms(Mira) → (model_systems(Mira) ⊕ solve_equations(Mira))",
        "conclusion": "¬solve_equations(Mira)"
      },
      {
        "facts": [
          "¬solve_equations(Mira)"
        ],
        "rules": "solve_equations(Mira) ∨ study_recursion(Mira)",
        "conclusion": "study_recursion(Mira)"
      },
      {
        "facts": [
          "study_recursion(Mira)",
          "advance_mathematics(Mira)"
        ],
        "rules": "study_recursion(Mira) → (advance_mathematics(Mira) ⊕ discover_natural_patterns(Mira))",
        "conclusion": "discover_natural_patterns(Mira)"
      }
    ],
    "conclusion": "Mira discovers natural patterns.",
    "conclusion_fol": "discover_natural_patterns(Mira)",
    "answer": "False",
    "context": [
      "Mira uses algorithms.",
      "Mira models systems.",
      "If Mira uses algorithms, then she either models systems or solves equations, but not both.",
      "Mira either solves equations or studies recursion.",
      "Mira advances mathematics.",
      "If Mira studies recursion, then she can either advance mathematics or discover natural patterns, but not both."
    ],
    "context_fol": [
      "use_algorithms(Mira)",
      "model_systems(Mira)",
      "use_algorithms(Mira) → (model_systems(Mira) ⊕ solve_equations(Mira))",
      "solve_equations(Mira) ∨ study_recursion(Mira)",
      "advance_mathematics(Mira)",
      "study_recursion(Mira) → (advance_mathematics(Mira) ⊕ discover_natural_patterns(Mira))"
    ],
    "background_story": "Mira was a brilliant mathematician fascinated by the intricacies of recursive functions. She spent most of her days studying and applying recursive algorithms to solve complex problems. Her magnum opus was a recursive function that could predict population growth patterns with uncanny accuracy. The function, dubbed 'Mira's Mirror', used recursive calls to model the feedback loops inherent in population dynamics. As Mira delved deeper into her research, she became obsessed with the self-similar patterns that emerged from her recursive models. She saw reflections of these patterns in nature, from the branching of trees to the flow of rivers. Mira's work on recursive functions not only advanced the field of mathematics but also revealed the hidden harmonies that govern the natural world.",
    "name": "Mira",
    "keyword": "recursive",
    "subject_category": "mathematician"
  },
  {
    "facts": [
      "Lucas specializes in cardiology.",
      "Lucas does not enhance patient care."
    ],
    "facts_fol": [
      "specialize_cardiology(Lucas)",
      "¬enhance_patient_care(Lucas)"
    ],
    "rules": [
      "For all medical professionals, if they understand hemodynamics, then they can improve surgical outcomes.",
      "A medical professional either develops new techniques or understands hemodynamics, but not necessarily both.",
      "If Lucas specializes in cardiology, then he either develops new techniques or enhances patient care, but not both."
    ],
    "rules_fol": [
      "∀x (understand_hemodynamics(x) → improve_surgical_outcomes(x))",
      "∀x (develop_new_techniques(x) ⊕ understand_hemodynamics(x))",
      "specialize_cardiology(Lucas) → (develop_new_techniques(Lucas) ⊕ enhance_patient_care(Lucas))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "All medical professionals who study circulation understand hemodynamics.",
      "If Lucas studies medicine, then he will develop new techniques."
    ],
    "distracting_rules_fol": [
      "∀x (study_circulation(x) → understand_hemodynamics(x))",
      "study_medicine(Lucas) → develop_new_techniques(Lucas)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Lucas specializes in cardiology.",
          "Lucas does not enhance patient care."
        ],
        "rules": "If Lucas specializes in cardiology, then he either develops new techniques or enhances patient care, but not both.",
        "conclusion": "Lucas develops new techniques."
      },
      {
        "facts": [
          "Lucas develops new techniques."
        ],
        "rules": "A medical professional either develops new techniques or understands hemodynamics, but not necessarily both.",
        "conclusion": "Lucas does not understand hemodynamics."
      },
      {
        "facts": [
          "Lucas does not understand hemodynamics."
        ],
        "rules": "For all medical professionals, if they understand hemodynamics, then they can improve surgical outcomes.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "specialize_cardiology(Lucas)",
          "¬enhance_patient_care(Lucas)"
        ],
        "rules": "specialize_cardiology(Lucas) → (develop_new_techniques(Lucas) ⊕ enhance_patient_care(Lucas))",
        "conclusion": "develop_new_techniques(Lucas)"
      },
      {
        "facts": [
          "develop_new_techniques(Lucas)"
        ],
        "rules": "∀x (develop_new_techniques(x) ⊕ understand_hemodynamics(x))",
        "conclusion": "¬understand_hemodynamics(Lucas)"
      },
      {
        "facts": [
          "¬understand_hemodynamics(Lucas)"
        ],
        "rules": "∀x (understand_hemodynamics(x) → improve_surgical_outcomes(x))",
        "conclusion": null
      }
    ],
    "conclusion": "Lucas cannot improve surgical outcomes.",
    "conclusion_fol": "¬improve_surgical_outcomes(Lucas)",
    "answer": "Uncertain",
    "context": [
      "Lucas specializes in cardiology.",
      "Lucas does not enhance patient care.",
      "If Lucas specializes in cardiology, then he either develops new techniques or enhances patient care, but not both.",
      "A medical professional either develops new techniques or understands hemodynamics, but not necessarily both.",
      "For all medical professionals, if they understand hemodynamics, then they can improve surgical outcomes."
    ],
    "context_fol": [
      "specialize_cardiology(Lucas)",
      "¬enhance_patient_care(Lucas)",
      "specialize_cardiology(Lucas) → (develop_new_techniques(Lucas) ⊕ enhance_patient_care(Lucas))",
      "∀x (develop_new_techniques(x) ⊕ understand_hemodynamics(x))",
      "∀x (understand_hemodynamics(x) → improve_surgical_outcomes(x))"
    ],
    "background_story": "Lucas was a brilliant cardiovascular surgeon with a keen interest in hemodynamics. He spent years studying the dynamics of blood flow and its impact on the human body. Lucas's groundbreaking research on vascular resistance and blood pressure led to the development of innovative surgical techniques. His work focused on improving blood flow to the heart, reducing the risk of cardiac arrests and strokes. As a leading expert in his field, Lucas was often called upon to consult on complex cases. His dedication to understanding the intricacies of hemodynamics saved countless lives, earning him numerous accolades and a reputation as one of the top cardiovascular surgeons in the country.",
    "name": "Lucas",
    "keyword": "hemodynamics",
    "subject_category": "medical professional"
  },
  {
    "facts": [
      "Payton casts spells.",
      "Payton uses herbs.",
      "Payton respects her ancestors.",
      "Payton heals others.",
      "Payton studies botany.",
      "Payton does not make potions."
    ],
    "facts_fol": [
      "casts_spells(Payton)",
      "use_herbs(Payton)",
      "respects_ancestors(Payton)",
      "heals_others(Payton)",
      "studies_botany(Payton)",
      "¬makes_potions(Payton)"
    ],
    "rules": [
      "If Payton lives near a forest, then she either uses herbs or harnesses nature energy, but not both.",
      "Payton either casts spells or practices magic.",
      "If Payton respects her ancestors, then she either heals others or communicates with spirits, but not both.",
      "If Payton studies botany, then she either lives near a forest or makes potions (or both)."
    ],
    "rules_fol": [
      "lives_near_forest(Payton) → (use_herbs(Payton) ⊕ harness_nature_energy(Payton))",
      "casts_spells(Payton) ∨ practice_magic(Payton)",
      "respects_ancestors(Payton) → (heals_others(Payton) ⊕ communicate_with_spirits(Payton))",
      "studies_botany(Payton) → (lives_near_forest(Payton) ∨ makes_potions(Payton))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Payton either reads aura or senses vibes (but not both), then she harnesses nature energy.",
      "If Payton can sense auras or read omens, then she can practice magic.",
      "If Payton senses energies, then she can communicate with spirits and understand the ancients.",
      "If Payton has knowledge, then she either appreciates nature or lives near a forest (or both)."
    ],
    "distracting_rules_fol": [
      "(reads_aura(Payton) ⊕ senses_vibes(Payton)) → harness_nature_energy(Payton)",
      "(sense_aura(Payton) ∨ read_omens(Payton)) → practice_magic(Payton)",
      "sense_energies(Payton) → (communicate_with_spirits(Payton) ∧ understand_ancients(Payton))",
      "has_knowledge(Payton) → (appreciate_nature(Payton) ∨ lives_near_forest(Payton))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Payton studies botany.",
          "Payton does not make potions."
        ],
        "rules": "If Payton studies botany, then she either lives near a forest or makes potions (or both).",
        "conclusion": "Payton lives near a forest."
      },
      {
        "facts": [
          "Payton respects her ancestors.",
          "Payton heals others."
        ],
        "rules": "If Payton respects her ancestors, then she either heals others or communicates with spirits, but not both.",
        "conclusion": "Payton does not communicate with spirits."
      },
      {
        "facts": [
          "Payton casts spells."
        ],
        "rules": "Payton either casts spells or practices magic.",
        "conclusion": null
      },
      {
        "facts": [
          "Payton lives near a forest.",
          "Payton uses herbs."
        ],
        "rules": "If Payton lives near a forest, then she either uses herbs or harnesses nature energy, but not both.",
        "conclusion": "Payton does not harness nature energy."
      },
      {
        "facts": [
          "Payton does not harness nature energy.",
          "Payton does not communicate with spirits."
        ],
        "rules": null,
        "conclusion": "Payton practices magic and either harnesses nature energy or communicates with spirits (or both)."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "studies_botany(Payton)",
          "¬makes_potions(Payton)"
        ],
        "rules": "studies_botany(Payton) → (lives_near_forest(Payton) ∨ makes_potions(Payton))",
        "conclusion": "lives_near_forest(Payton)"
      },
      {
        "facts": [
          "respects_ancestors(Payton)",
          "heals_others(Payton)"
        ],
        "rules": "respects_ancestors(Payton) → (heals_others(Payton) ⊕ communicate_with_spirits(Payton))",
        "conclusion": "¬communicate_with_spirits(Payton)"
      },
      {
        "facts": [
          "casts_spells(Payton)"
        ],
        "rules": "casts_spells(Payton) ∨ practice_magic(Payton)",
        "conclusion": null
      },
      {
        "facts": [
          "lives_near_forest(Payton)",
          "use_herbs(Payton)"
        ],
        "rules": "lives_near_forest(Payton) → (use_herbs(Payton) ⊕ harness_nature_energy(Payton))",
        "conclusion": "¬harness_nature_energy(Payton)"
      },
      {
        "facts": [
          "¬harness_nature_energy(Payton)",
          "¬communicate_with_spirits(Payton)"
        ],
        "rules": null,
        "conclusion": "practice_magic(Payton) ∧ (harness_nature_energy(Payton) ∨ communicate_with_spirits(Payton))"
      }
    ],
    "conclusion": "Payton practices magic and either harnesses nature energy or communicates with spirits (or both).",
    "conclusion_fol": "practice_magic(Payton) ∧ (harness_nature_energy(Payton) ∨ communicate_with_spirits(Payton))",
    "answer": "False",
    "context": [
      "Payton studies botany.",
      "Payton does not make potions.",
      "If Payton studies botany, then she either lives near a forest or makes potions (or both).",
      "Payton respects her ancestors.",
      "Payton heals others.",
      "If Payton respects her ancestors, then she either heals others or communicates with spirits, but not both.",
      "Payton casts spells.",
      "Payton either casts spells or practices magic.",
      "Payton uses herbs.",
      "If Payton lives near a forest, then she either uses herbs or harnesses nature energy, but not both."
    ],
    "context_fol": [
      "studies_botany(Payton)",
      "¬makes_potions(Payton)",
      "studies_botany(Payton) → (lives_near_forest(Payton) ∨ makes_potions(Payton))",
      "respects_ancestors(Payton)",
      "heals_others(Payton)",
      "respects_ancestors(Payton) → (heals_others(Payton) ⊕ communicate_with_spirits(Payton))",
      "casts_spells(Payton)",
      "casts_spells(Payton) ∨ practice_magic(Payton)",
      "use_herbs(Payton)",
      "lives_near_forest(Payton) → (use_herbs(Payton) ⊕ harness_nature_energy(Payton))"
    ],
    "background_story": "Payton was a skilled witch who lived on the outskirts of a mystical forest, where the ancient blackthorn trees were said to hold powerful magic. She was particularly drawn to the blackthorn, with its dark, thorny branches and white, star-like flowers. Payton spent years studying the properties of the blackthorn, learning how to harness its energy for protection and healing. As her skills grew, so did her reputation, and people from all over would seek her out for remedies and spells. Payton's deep connection to the blackthorn gave her an uncanny ability to communicate with the spirits of the land, making her a respected and feared figure in the mystical community. Her cottage, surrounded by a thicket of blackthorn, became a beacon for those seeking solace and magical aid.",
    "name": "Payton",
    "keyword": "blackthorn",
    "subject_category": "human"
  },
  {
    "facts": [
      "Jane is an influential diplomat.",
      "Jane is a skilled negotiator.",
      "Jane resolves conflicts.",
      "Jane builds trust.",
      "Jane finds common ground."
    ],
    "facts_fol": [
      "influential_diplomat(Jane)",
      "skilled_negotiator(Jane)",
      "resolve_conflicts(Jane)",
      "builds_trust(Jane)",
      "finds_common_ground(Jane)"
    ],
    "rules": [
      "Jane either fosters cooperation or brokers peace treaties, but her legacy is marked by her ability to do both.",
      "If Jane is a skilled negotiator, then she either resolves conflicts or eases international tensions, but not both.",
      "If a historical figure builds trust and finds common ground, then they can foster cooperation."
    ],
    "rules_fol": [
      "foster_cooperation(Jane) ⊕ broker_peace_treaties(Jane)",
      "skilled_negotiator(Jane) → (resolve_conflicts(Jane) ⊕ ease_international_tensions(Jane))",
      "∀x ((builds_trust(x) ∧ finds_common_ground(x)) → foster_cooperation(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Jane either resolves disputes or promotes dialogue (but not both), then she brokers peace treaties.",
      "If Jane respects opinions or listens actively, then she can ease international tensions.",
      "Jane advocates for peace or fosters cooperation."
    ],
    "distracting_rules_fol": [
      "(resolves_disputes(Jane) ⊕ promotes_dialogue(Jane)) → broker_peace_treaties(Jane)",
      "(respects_opinions(Jane) ∨ listens_actively(Jane)) → ease_international_tensions(Jane)",
      "advocates_peace(Jane) ∨ foster_cooperation(Jane)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Jane builds trust.",
          "Jane finds common ground."
        ],
        "rules": "If a historical figure builds trust and finds common ground, then they can foster cooperation.",
        "conclusion": "Jane fosters cooperation."
      },
      {
        "facts": [
          "Jane is a skilled negotiator.",
          "Jane resolves conflicts."
        ],
        "rules": "If Jane is a skilled negotiator, then she either resolves conflicts or eases international tensions, but not both.",
        "conclusion": "Jane does not ease international tensions."
      },
      {
        "facts": [
          "Jane fosters cooperation."
        ],
        "rules": "Jane either fosters cooperation or brokers peace treaties, but her legacy is marked by her ability to do both.",
        "conclusion": "Jane does not broker peace treaties."
      },
      {
        "facts": [
          "Jane is an influential diplomat.",
          "Jane does not broker peace treaties.",
          "Jane does not ease international tensions."
        ],
        "rules": null,
        "conclusion": "If Jane is an influential diplomat, then she either brokers peace treaties or eases international tensions (or both)."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "builds_trust(Jane)",
          "finds_common_ground(Jane)"
        ],
        "rules": "∀x ((builds_trust(x) ∧ finds_common_ground(x)) → foster_cooperation(x))",
        "conclusion": "foster_cooperation(Jane)"
      },
      {
        "facts": [
          "skilled_negotiator(Jane)",
          "resolve_conflicts(Jane)"
        ],
        "rules": "skilled_negotiator(Jane) → (resolve_conflicts(Jane) ⊕ ease_international_tensions(Jane))",
        "conclusion": "¬ease_international_tensions(Jane)"
      },
      {
        "facts": [
          "foster_cooperation(Jane)"
        ],
        "rules": "foster_cooperation(Jane) ⊕ broker_peace_treaties(Jane)",
        "conclusion": "¬broker_peace_treaties(Jane)"
      },
      {
        "facts": [
          "influential_diplomat(Jane)",
          "¬broker_peace_treaties(Jane)",
          "¬ease_international_tensions(Jane)"
        ],
        "rules": null,
        "conclusion": "influential_diplomat(Jane) → (broker_peace_treaties(Jane) ∨ ease_international_tensions(Jane))"
      }
    ],
    "conclusion": "If Jane is an influential diplomat, then she either brokers peace treaties or eases international tensions (or both).",
    "conclusion_fol": "influential_diplomat(Jane) → (broker_peace_treaties(Jane) ∨ ease_international_tensions(Jane))",
    "answer": "False",
    "context": [
      "Jane builds trust.",
      "Jane finds common ground.",
      "If a historical figure builds trust and finds common ground, then they can foster cooperation.",
      "Jane is a skilled negotiator.",
      "Jane resolves conflicts.",
      "If Jane is a skilled negotiator, then she either resolves conflicts or eases international tensions, but not both.",
      "Jane either fosters cooperation or brokers peace treaties, but her legacy is marked by her ability to do both.",
      "Jane is an influential diplomat."
    ],
    "context_fol": [
      "builds_trust(Jane)",
      "finds_common_ground(Jane)",
      "∀x ((builds_trust(x) ∧ finds_common_ground(x)) → foster_cooperation(x))",
      "skilled_negotiator(Jane)",
      "resolve_conflicts(Jane)",
      "skilled_negotiator(Jane) → (resolve_conflicts(Jane) ⊕ ease_international_tensions(Jane))",
      "foster_cooperation(Jane) ⊕ broker_peace_treaties(Jane)",
      "influential_diplomat(Jane)"
    ],
    "background_story": "Jane was a key figure in the diplomatic negotiations between two warring nations in the early 19th century. As a skilled mediator, she played a crucial role in brokering a peace treaty that ended years of conflict. The treaty, which involved the cession of a significant amount of land from one nation to the other, was a contentious issue. However, Jane's tireless efforts and persuasive arguments helped to ease tensions and find a mutually acceptable solution. Her work on the treaty earned her international recognition and paved the way for a new era of cooperation between the two nations. Despite the challenges she faced, Jane remained committed to her goal of achieving peace, and her legacy as a champion of diplomacy continues to inspire leaders to this day.",
    "name": "Jane",
    "keyword": "cession",
    "subject_category": "historical figure"
  },
  {
    "facts": [
      "Chanel does not win an award.",
      "Chanel earns international acclaim.",
      "Chanel admires history.",
      "Chanel builds beautiful structures."
    ],
    "facts_fol": [
      "¬win_award(Chanel)",
      "earn_acclaim(Chanel)",
      "admire_history(Chanel)",
      "build_beauty(Chanel)"
    ],
    "rules": [
      "If Chanel creates a masterpiece, then she either earns international acclaim or influences the architectural style of others, but not both.",
      "If Chanel designs a landmark, then she either creates a masterpiece or wins an award, but not both.",
      "If Chanel studies classics, then she innovates designs and designs landmarks.",
      "If Chanel admires history, then she studies classics and builds beautiful structures."
    ],
    "rules_fol": [
      "create_masterpiece(Chanel) → (earn_acclaim(Chanel) ⊕ influence_style(Chanel))",
      "design_landmark(Chanel) → (create_masterpiece(Chanel) ⊕ win_award(Chanel))",
      "study_classics(Chanel) → (innovate_designs(Chanel) ∧ design_landmark(Chanel))",
      "admire_history(Chanel) → (study_classics(Chanel) ∧ build_beauty(Chanel))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If an architect crafts details and balances form, then they can create a masterpiece.",
      "If Chanel blends styles, then she either designs landmarks or crafts details.",
      "All architects who respect tradition study classics and craft details."
    ],
    "distracting_rules_fol": [
      "∀x ((craft_details(x) ∧ balance_form(x)) → create_masterpiece(x))",
      "blend_styles(Chanel) → (design_landmark(Chanel) ∨ craft_details(Chanel))",
      "∀x (respect_tradition(x) → (study_classics(x) ∧ craft_details(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Chanel admires history.",
          "Chanel builds beautiful structures."
        ],
        "rules": "If Chanel admires history, then she studies classics and builds beautiful structures.",
        "conclusion": "Chanel studies classics."
      },
      {
        "facts": [
          "Chanel studies classics."
        ],
        "rules": "If Chanel studies classics, then she innovates designs and designs landmarks.",
        "conclusion": "Chanel designs a landmark."
      },
      {
        "facts": [
          "Chanel designs a landmark.",
          "Chanel does not win an award."
        ],
        "rules": "If Chanel designs a landmark, then she either creates a masterpiece or wins an award, but not both.",
        "conclusion": "Chanel creates a masterpiece."
      },
      {
        "facts": [
          "Chanel creates a masterpiece.",
          "Chanel earns international acclaim."
        ],
        "rules": "If Chanel creates a masterpiece, then she either earns international acclaim or influences the architectural style of others, but not both.",
        "conclusion": "Chanel influences the architectural style of others."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "admire_history(Chanel)",
          "build_beauty(Chanel)"
        ],
        "rules": "admire_history(Chanel) → (study_classics(Chanel) ∧ build_beauty(Chanel))",
        "conclusion": "study_classics(Chanel)"
      },
      {
        "facts": [
          "study_classics(Chanel)"
        ],
        "rules": "study_classics(Chanel) → (innovate_designs(Chanel) ∧ design_landmark(Chanel))",
        "conclusion": "design_landmark(Chanel)"
      },
      {
        "facts": [
          "design_landmark(Chanel)",
          "¬win_award(Chanel)"
        ],
        "rules": "design_landmark(Chanel) → (create_masterpiece(Chanel) ⊕ win_award(Chanel))",
        "conclusion": "create_masterpiece(Chanel)"
      },
      {
        "facts": [
          "create_masterpiece(Chanel)",
          "earn_acclaim(Chanel)"
        ],
        "rules": "create_masterpiece(Chanel) → (earn_acclaim(Chanel) ⊕ influence_style(Chanel))",
        "conclusion": "influence_style(Chanel)"
      }
    ],
    "conclusion": "Chanel influences the architectural style of others.",
    "conclusion_fol": "influence_style(Chanel)",
    "answer": "False",
    "context": [
      "Chanel admires history.",
      "Chanel builds beautiful structures.",
      "If Chanel admires history, then she studies classics and builds beautiful structures.",
      "If Chanel studies classics, then she innovates designs and designs landmarks.",
      "Chanel does not win an award.",
      "If Chanel designs a landmark, then she either creates a masterpiece or wins an award, but not both.",
      "Chanel earns international acclaim.",
      "If Chanel creates a masterpiece, then she either earns international acclaim or influences the architectural style of others, but not both."
    ],
    "context_fol": [
      "admire_history(Chanel)",
      "build_beauty(Chanel)",
      "admire_history(Chanel) → (study_classics(Chanel) ∧ build_beauty(Chanel))",
      "study_classics(Chanel) → (innovate_designs(Chanel) ∧ design_landmark(Chanel))",
      "¬win_award(Chanel)",
      "design_landmark(Chanel) → (create_masterpiece(Chanel) ⊕ win_award(Chanel))",
      "earn_acclaim(Chanel)",
      "create_masterpiece(Chanel) → (earn_acclaim(Chanel) ⊕ influence_style(Chanel))"
    ],
    "background_story": "Chanel was a renowned architect known for her breathtaking designs that blended ancient elegance with modern functionality. Her most famous project, the Grand Estate, featured a stunning colonnade that wrapped around the central courtyard, creating a sense of grandeur and serenity. Inspired by the classical styles of ancient Greece and Rome, Chanel's colonnade was composed of 20 Corinthian columns, each one meticulously crafted to perfection. The colonnade not only provided shade and shelter but also framed the surrounding gardens, creating a picturesque backdrop for lavish events and intimate gatherings. Chanel's masterpiece earned her international acclaim, and her use of the colonnade as a central design element became a signature feature of her architectural style.",
    "name": "Chanel",
    "keyword": "colonnade",
    "subject_category": "architect"
  },
  {
    "facts": [
      "Kenji does not specialize in kyphosidae.",
      "Kenji tracks fish.",
      "Kenji studies oceans.",
      "Kenji analyzes data."
    ],
    "facts_fol": [
      "¬specializes_in_kyphosidae(Kenji)",
      "tracks_fish(Kenji)",
      "studies_oceans(Kenji)",
      "analyzes_data(Kenji)"
    ],
    "rules": [
      "If Kenji examines plankton and researches habitats, then he studies other species.",
      "Kenji either tracks fish or examines plankton.",
      "If Kenji studies oceans, then he either researches habitats or analyzes data, but not both."
    ],
    "rules_fol": [
      "(examines_plankton(Kenji) ∧ researches_habitats(Kenji)) → studies_other_species(Kenji)",
      "tracks_fish(Kenji) ∨ examines_plankton(Kenji)",
      "studies_oceans(Kenji) → (researches_habitats(Kenji) ⊕ analyzes_data(Kenji))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Kenji either investigates crustaceans or explores mollusks (but not both), then he studies other species.",
      "If Kenji studies reefs or investigates algae, then he examines plankton.",
      "All marine biologists who explore reefs research habitats."
    ],
    "distracting_rules_fol": [
      "(investigates_crustaceans(Kenji) ⊕ explores_mollusks(Kenji)) → studies_other_species(Kenji)",
      "(studies_reefs(Kenji) ∨ investigates_algae(Kenji)) → examines_plankton(Kenji)",
      "∀x (explores_reefs(x) → researches_habitats(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Kenji studies oceans.",
          "Kenji analyzes data."
        ],
        "rules": "If Kenji studies oceans, then he either researches habitats or analyzes data, but not both.",
        "conclusion": "Kenji does not research habitats."
      },
      {
        "facts": [
          "Kenji tracks fish."
        ],
        "rules": "Kenji either tracks fish or examines plankton.",
        "conclusion": null
      },
      {
        "facts": [
          "Kenji does not research habitats."
        ],
        "rules": "If Kenji examines plankton and researches habitats, then he studies other species.",
        "conclusion": null
      },
      {
        "facts": [
          "Kenji does not specialize in kyphosidae."
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "studies_oceans(Kenji)",
          "analyzes_data(Kenji)"
        ],
        "rules": "studies_oceans(Kenji) → (researches_habitats(Kenji) ⊕ analyzes_data(Kenji))",
        "conclusion": "¬researches_habitats(Kenji)"
      },
      {
        "facts": [
          "tracks_fish(Kenji)"
        ],
        "rules": "tracks_fish(Kenji) ∨ examines_plankton(Kenji)",
        "conclusion": null
      },
      {
        "facts": [
          "¬researches_habitats(Kenji)"
        ],
        "rules": "(examines_plankton(Kenji) ∧ researches_habitats(Kenji)) → studies_other_species(Kenji)",
        "conclusion": null
      },
      {
        "facts": [
          "¬specializes_in_kyphosidae(Kenji)"
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "conclusion": "Kenji either specializes in kyphosidae or studies other species, but not both.",
    "conclusion_fol": "specializes_in_kyphosidae(Kenji) ⊕ studies_other_species(Kenji)",
    "answer": "Uncertain",
    "context": [
      "Kenji studies oceans.",
      "Kenji analyzes data.",
      "If Kenji studies oceans, then he either researches habitats or analyzes data, but not both.",
      "Kenji tracks fish.",
      "Kenji either tracks fish or examines plankton.",
      "If Kenji examines plankton and researches habitats, then he studies other species.",
      "Kenji does not specialize in kyphosidae."
    ],
    "context_fol": [
      "studies_oceans(Kenji)",
      "analyzes_data(Kenji)",
      "studies_oceans(Kenji) → (researches_habitats(Kenji) ⊕ analyzes_data(Kenji))",
      "tracks_fish(Kenji)",
      "tracks_fish(Kenji) ∨ examines_plankton(Kenji)",
      "(examines_plankton(Kenji) ∧ researches_habitats(Kenji)) → studies_other_species(Kenji)",
      "¬specializes_in_kyphosidae(Kenji)"
    ],
    "background_story": "Kenji was a renowned marine biologist with a passion for studying the kyphosidae family, commonly known as sea chubs. Growing up by the ocean, he spent most of his childhood snorkeling and exploring the marine life. His fascination with the feeding behaviors of kyphosidae led him to dedicate his career to understanding their role in the ocean's ecosystem. Kenji's groundbreaking research on the species' unique schooling patterns and herbivorous diet earned him international recognition. He spent years in the field, from the coral reefs of Australia to the kelp forests of California, always seeking to learn more about these incredible fish. Kenji's work not only advanced the scientific community's knowledge of kyphosidae but also contributed to conservation efforts aimed at protecting their habitats.",
    "name": "Kenji",
    "keyword": "kyphosidae",
    "subject_category": "marine biologist"
  },
  {
    "facts": [
      "Kenzo is a meat lover.",
      "Kenzo does not cook well."
    ],
    "facts_fol": [
      "meat_lover(Kenzo)",
      "¬cooks_well(Kenzo)"
    ],
    "rules": [
      "Kenzo is either a foodie or a picky eater, but not both.",
      "If Kenzo is a chef, then he is either a foodie or a meat lover, but not both.",
      "Kenzo either cooks well or is a chef."
    ],
    "rules_fol": [
      "foodie(Kenzo) ⊕ picky_eater(Kenzo)",
      "chef(Kenzo) → (foodie(Kenzo) ⊕ meat_lover(Kenzo))",
      "cooks_well(Kenzo) ∨ chef(Kenzo)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Kenzo likes spicy food or is a foodie.",
      "If Kenzo loves cuisine, then he is a chef."
    ],
    "distracting_rules_fol": [
      "likes_spicy(Kenzo) ∨ foodie(Kenzo)",
      "loves_cuisine(Kenzo) → chef(Kenzo)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Kenzo does not cook well."
        ],
        "rules": "Kenzo either cooks well or is a chef.",
        "conclusion": "Kenzo is a chef."
      },
      {
        "facts": [
          "Kenzo is a chef.",
          "Kenzo is a meat lover."
        ],
        "rules": "If Kenzo is a chef, then he is either a foodie or a meat lover, but not both.",
        "conclusion": "Kenzo is not a foodie."
      },
      {
        "facts": [
          "Kenzo is not a foodie."
        ],
        "rules": "Kenzo is either a foodie or a picky eater, but not both.",
        "conclusion": "Kenzo is a picky eater."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬cooks_well(Kenzo)"
        ],
        "rules": "cooks_well(Kenzo) ∨ chef(Kenzo)",
        "conclusion": "chef(Kenzo)"
      },
      {
        "facts": [
          "chef(Kenzo)",
          "meat_lover(Kenzo)"
        ],
        "rules": "chef(Kenzo) → (foodie(Kenzo) ⊕ meat_lover(Kenzo))",
        "conclusion": "¬foodie(Kenzo)"
      },
      {
        "facts": [
          "¬foodie(Kenzo)"
        ],
        "rules": "foodie(Kenzo) ⊕ picky_eater(Kenzo)",
        "conclusion": "picky_eater(Kenzo)"
      }
    ],
    "conclusion": "Kenzo is a picky eater.",
    "conclusion_fol": "picky_eater(Kenzo)",
    "answer": "True",
    "context": [
      "Kenzo does not cook well.",
      "Kenzo either cooks well or is a chef.",
      "Kenzo is a meat lover.",
      "If Kenzo is a chef, then he is either a foodie or a meat lover, but not both.",
      "Kenzo is either a foodie or a picky eater, but not both."
    ],
    "context_fol": [
      "¬cooks_well(Kenzo)",
      "cooks_well(Kenzo) ∨ chef(Kenzo)",
      "meat_lover(Kenzo)",
      "chef(Kenzo) → (foodie(Kenzo) ⊕ meat_lover(Kenzo))",
      "foodie(Kenzo) ⊕ picky_eater(Kenzo)"
    ],
    "background_story": "Kenzo, a young and ambitious chef, had always been fascinated by the culinary scene in Lomé, the vibrant capital of Togo. Growing up in a small village, he would often hear stories of the city's rich cultural heritage and its unique blend of traditional and modern cuisine. Determined to make a name for himself, Kenzo moved to Lomé and opened a small restaurant, where he served innovative dishes that showcased the city's flavors. His restaurant quickly became a sensation, attracting visitors from all over the world. Kenzo's passion for Lomé's cuisine and culture led him to become a respected figure in the community, known for his delicious dishes and his love for the city.",
    "name": "Kenzo",
    "keyword": "lome",
    "subject_category": "human"
  },
  {
    "facts": [
      "Zachariah cannot navigate the skies.",
      "Zachariah does not drive vehicles."
    ],
    "facts_fol": [
      "¬navigate_skies(Zachariah)",
      "¬drives_vehicles(Zachariah)"
    ],
    "rules": [
      "For all humans, if they hold a pilot license, then they can fly an aircraft.",
      "Anyone who operates a plane either holds a pilot license or can navigate skies.",
      "Zachariah either drives vehicles or operates planes."
    ],
    "rules_fol": [
      "∀x (holds_pilot_license(x) → can_fly_aircraft(x))",
      "∀x (operate_plane(x) → (holds_pilot_license(x) ∨ navigate_skies(x)))",
      "drives_vehicles(Zachariah) ∨ operate_plane(Zachariah)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Zachariah completes training or passes an exam, then he can hold a pilot license.",
      "If Zachariah is airline staff, then he either knows air traffic rules or operates planes, but not both."
    ],
    "distracting_rules_fol": [
      "(complete_training(Zachariah) ∨ pass_exam(Zachariah)) → holds_pilot_license(Zachariah)",
      "is_airline_staff(Zachariah) → (knows_air_traffic(Zachariah) ⊕ operate_plane(Zachariah))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Zachariah does not drive vehicles."
        ],
        "rules": "Zachariah either drives vehicles or operates planes.",
        "conclusion": "Zachariah operates a plane."
      },
      {
        "facts": [
          "Zachariah operates a plane.",
          "Zachariah cannot navigate the skies."
        ],
        "rules": "Anyone who operates a plane either holds a pilot license or can navigate skies.",
        "conclusion": "Zachariah holds a pilot license."
      },
      {
        "facts": [
          "Zachariah holds a pilot license."
        ],
        "rules": "For all humans, if they hold a pilot license, then they can fly an aircraft.",
        "conclusion": "Zachariah can fly an aircraft."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬drives_vehicles(Zachariah)"
        ],
        "rules": "drives_vehicles(Zachariah) ∨ operate_plane(Zachariah)",
        "conclusion": "operate_plane(Zachariah)"
      },
      {
        "facts": [
          "operate_plane(Zachariah)",
          "¬navigate_skies(Zachariah)"
        ],
        "rules": "∀x (operate_plane(x) → (holds_pilot_license(x) ∨ navigate_skies(x)))",
        "conclusion": "holds_pilot_license(Zachariah)"
      },
      {
        "facts": [
          "holds_pilot_license(Zachariah)"
        ],
        "rules": "∀x (holds_pilot_license(x) → can_fly_aircraft(x))",
        "conclusion": "can_fly_aircraft(Zachariah)"
      }
    ],
    "conclusion": "Zachariah can fly an aircraft.",
    "conclusion_fol": "can_fly_aircraft(Zachariah)",
    "answer": "True",
    "context": [
      "Zachariah does not drive vehicles.",
      "Zachariah either drives vehicles or operates planes.",
      "Zachariah cannot navigate the skies.",
      "Anyone who operates a plane either holds a pilot license or can navigate skies.",
      "For all humans, if they hold a pilot license, then they can fly an aircraft."
    ],
    "context_fol": [
      "¬drives_vehicles(Zachariah)",
      "drives_vehicles(Zachariah) ∨ operate_plane(Zachariah)",
      "¬navigate_skies(Zachariah)",
      "∀x (operate_plane(x) → (holds_pilot_license(x) ∨ navigate_skies(x)))",
      "∀x (holds_pilot_license(x) → can_fly_aircraft(x))"
    ],
    "background_story": "Zachariah had always dreamed of becoming a pilot. After years of rigorous training and dedication, he finally obtained his commercial pilot's license. The sense of accomplishment and freedom that came with it was exhilarating. With his license in hand, Zachariah landed a job at a reputable airline, flying passengers to destinations around the world. He took his responsibility seriously, always ensuring the safety of those on board. As he soared through the skies, Zachariah felt a deep sense of pride and fulfillment, knowing that his license was not just a piece of paper, but a key to a lifetime of adventure and possibility.",
    "name": "Zachariah",
    "keyword": "license",
    "subject_category": "human"
  },
  {
    "facts": [
      "Axton does not care deeply.",
      "Axton is a practitioner of acupuncture.",
      "Axton seeks healing.",
      "Axton is curious.",
      "Axton is disciplined."
    ],
    "facts_fol": [
      "¬cares_deeply(Axton)",
      "practitioner(Axton)",
      "seek_healing(Axton)",
      "is_curious(Axton)",
      "is_disciplined(Axton)"
    ],
    "rules": [
      "If Axton seeks healing, then he is a patient and is open-minded.",
      "Axton either learns fast or is informed.",
      "Axton either cares deeply or is open-minded.",
      "If Axton is curious, then he either learns fast or is disciplined."
    ],
    "rules_fol": [
      "seek_healing(Axton) → (patient(Axton) ∧ open_minded(Axton))",
      "learns_fast(Axton) ∨ informed(Axton)",
      "cares_deeply(Axton) ∨ open_minded(Axton)",
      "is_curious(Axton) → (learns_fast(Axton) ⊕ is_disciplined(Axton))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Axton seeks balance, then he is either receiving treatment or offering treatment, but not both.",
      "Anyone who studies acupuncture or teaches wellness is informed about holistic health.",
      "Anyone who tries new things or listens well is open-minded.",
      "If Axton stays focused, then he has experience and learns fast."
    ],
    "distracting_rules_fol": [
      "seeks_balance(Axton) → (patient(Axton) ⊕ offers_treatment(Axton))",
      "∀x ((studies_acupuncture(x) ∨ teaches_wellness(x)) → informed(x))",
      "∀x ((tries_new_things(x) ∨ listens_well(x)) → open_minded(x))",
      "stays_focused(Axton) → (has_experience(Axton) ∧ learns_fast(Axton))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Axton is curious.",
          "Axton is disciplined."
        ],
        "rules": "If Axton is curious, then he either learns fast or is disciplined.",
        "conclusion": "Axton does not learn fast."
      },
      {
        "facts": [
          "Axton does not care deeply."
        ],
        "rules": "Axton either cares deeply or is open-minded.",
        "conclusion": "Axton is open-minded."
      },
      {
        "facts": [
          "Axton does not learn fast."
        ],
        "rules": "Axton either learns fast or is informed.",
        "conclusion": "Axton is informed about holistic health."
      },
      {
        "facts": [
          "Axton seeks healing.",
          "Axton is open-minded."
        ],
        "rules": "If Axton seeks healing, then he is a patient and is open-minded.",
        "conclusion": "Axton is a patient of acupuncture."
      },
      {
        "facts": [
          "Axton is a practitioner of acupuncture.",
          "Axton is a patient of acupuncture.",
          "Axton is informed about holistic health."
        ],
        "rules": null,
        "conclusion": "If Axton is either a practitioner or a patient (but not both) of acupuncture, then he is informed about holistic health."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "is_curious(Axton)",
          "is_disciplined(Axton)"
        ],
        "rules": "is_curious(Axton) → (learns_fast(Axton) ⊕ is_disciplined(Axton))",
        "conclusion": "¬learns_fast(Axton)"
      },
      {
        "facts": [
          "¬cares_deeply(Axton)"
        ],
        "rules": "cares_deeply(Axton) ∨ open_minded(Axton)",
        "conclusion": "open_minded(Axton)"
      },
      {
        "facts": [
          "¬learns_fast(Axton)"
        ],
        "rules": "learns_fast(Axton) ∨ informed(Axton)",
        "conclusion": "informed(Axton)"
      },
      {
        "facts": [
          "seek_healing(Axton)",
          "open_minded(Axton)"
        ],
        "rules": "seek_healing(Axton) → (patient(Axton) ∧ open_minded(Axton))",
        "conclusion": "patient(Axton)"
      },
      {
        "facts": [
          "practitioner(Axton)",
          "patient(Axton)",
          "informed(Axton)"
        ],
        "rules": null,
        "conclusion": "(practitioner(Axton) ⊕ patient(Axton)) → informed(Axton)"
      }
    ],
    "conclusion": "If Axton is either a practitioner or a patient (but not both) of acupuncture, then he is informed about holistic health.",
    "conclusion_fol": "(practitioner(Axton) ⊕ patient(Axton)) → informed(Axton)",
    "answer": "True",
    "context": [
      "Axton is curious.",
      "Axton is disciplined.",
      "If Axton is curious, then he either learns fast or is disciplined.",
      "Axton does not care deeply.",
      "Axton either cares deeply or is open-minded.",
      "Axton either learns fast or is informed.",
      "Axton seeks healing.",
      "If Axton seeks healing, then he is a patient and is open-minded.",
      "Axton is a practitioner of acupuncture."
    ],
    "context_fol": [
      "is_curious(Axton)",
      "is_disciplined(Axton)",
      "is_curious(Axton) → (learns_fast(Axton) ⊕ is_disciplined(Axton))",
      "¬cares_deeply(Axton)",
      "cares_deeply(Axton) ∨ open_minded(Axton)",
      "learns_fast(Axton) ∨ informed(Axton)",
      "seek_healing(Axton)",
      "seek_healing(Axton) → (patient(Axton) ∧ open_minded(Axton))",
      "practitioner(Axton)"
    ],
    "background_story": "Axton was a skilled practitioner of traditional Chinese medicine, specializing in acupuncture. Growing up in a family of healers, he was drawn to the ancient art of balancing the body's energy. After years of study and apprenticeship, Axton opened his own clinic, where he used his knowledge of acupuncture to help patients alleviate pain, stress, and chronic conditions. His gentle touch and intuitive understanding of the human body made him a sought-after therapist. Axton's approach was holistic, combining acupuncture with herbal remedies and lifestyle advice to promote overall well-being. As his reputation grew, so did his passion for sharing the benefits of acupuncture with his community, leading workshops and seminars to educate others about this ancient yet effective healing art.",
    "name": "Axton",
    "keyword": "acupuncture",
    "subject_category": "human"
  },
  {
    "facts": [
      "Ahmir researches nature.",
      "Ahmir does not classify species.",
      "Ahmir investigates wildlife.",
      "Ahmir does not observe wasps."
    ],
    "facts_fol": [
      "researches_nature(Ahmir)",
      "¬classifies_species(Ahmir)",
      "investigates_wildlife(Ahmir)",
      "¬observes_wasps(Ahmir)"
    ],
    "rules": [
      "Ahmir either studies wasps or studies butterflies, but not both.",
      "If Ahmir examines insects, then he specializes in bees and understands ecosystems.",
      "If Ahmir researches nature, then he either examines insects or classifies species, but not both.",
      "If Ahmir investigates wildlife, then he either studies butterflies or observes wasps."
    ],
    "rules_fol": [
      "studies_butterflies(Ahmir) ⊕ specializes_in_wasps(Ahmir)",
      "examines_insects(Ahmir) → (specializes_in_bees(Ahmir) ∧ understands_ecosystems(Ahmir))",
      "researches_nature(Ahmir) → (examines_insects(Ahmir) ⊕ classifies_species(Ahmir))",
      "investigates_wildlife(Ahmir) → (studies_butterflies(Ahmir) ∨ observes_wasps(Ahmir))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "All entomologists who focus on hornets specialize in wasps.",
      "If Ahmir researches pollinators, then he is either focused on moths or specializes in bees, but not both.",
      "Every entomologist who analyzes nests either identifies habitats or examines insects.",
      "If Ahmir is an expert entomologist, then he either studies butterflies or studies moths, but not both."
    ],
    "distracting_rules_fol": [
      "∀x (focuses_on_hornets(x) → specializes_in_wasps(x))",
      "researches_pollinators(Ahmir) → (focuses_on_moths(Ahmir) ⊕ specializes_in_bees(Ahmir))",
      "∀x (analyzes_nests(x) → (identifies_habitats(x) ∨ examines_insects(x)))",
      "expert_entomologist(Ahmir) → (studies_butterflies(Ahmir) ⊕ studies_moths(Ahmir))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Ahmir investigates wildlife.",
          "Ahmir does not observe wasps."
        ],
        "rules": "If Ahmir investigates wildlife, then he either studies butterflies or observes wasps.",
        "conclusion": "Ahmir studies butterflies."
      },
      {
        "facts": [
          "Ahmir researches nature.",
          "Ahmir does not classify species."
        ],
        "rules": "If Ahmir researches nature, then he either examines insects or classifies species, but not both.",
        "conclusion": "Ahmir examines insects."
      },
      {
        "facts": [
          "Ahmir examines insects."
        ],
        "rules": "If Ahmir examines insects, then he specializes in bees and understands ecosystems.",
        "conclusion": "Ahmir specializes in bees."
      },
      {
        "facts": [
          "Ahmir studies butterflies."
        ],
        "rules": "Ahmir either studies wasps or studies butterflies, but not both.",
        "conclusion": "Ahmir is not an entomologist who specializes in wasps."
      },
      {
        "facts": [
          "Ahmir is not an entomologist who specializes in wasps.",
          "Ahmir specializes in bees."
        ],
        "rules": null,
        "conclusion": "Ahmir is either an entomologist who specializes in wasps or an entomologist who specializes in bees, but not both."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "investigates_wildlife(Ahmir)",
          "¬observes_wasps(Ahmir)"
        ],
        "rules": "investigates_wildlife(Ahmir) → (studies_butterflies(Ahmir) ∨ observes_wasps(Ahmir))",
        "conclusion": "studies_butterflies(Ahmir)"
      },
      {
        "facts": [
          "researches_nature(Ahmir)",
          "¬classifies_species(Ahmir)"
        ],
        "rules": "researches_nature(Ahmir) → (examines_insects(Ahmir) ⊕ classifies_species(Ahmir))",
        "conclusion": "examines_insects(Ahmir)"
      },
      {
        "facts": [
          "examines_insects(Ahmir)"
        ],
        "rules": "examines_insects(Ahmir) → (specializes_in_bees(Ahmir) ∧ understands_ecosystems(Ahmir))",
        "conclusion": "specializes_in_bees(Ahmir)"
      },
      {
        "facts": [
          "studies_butterflies(Ahmir)"
        ],
        "rules": "studies_butterflies(Ahmir) ⊕ specializes_in_wasps(Ahmir)",
        "conclusion": "¬specializes_in_wasps(Ahmir)"
      },
      {
        "facts": [
          "¬specializes_in_wasps(Ahmir)",
          "specializes_in_bees(Ahmir)"
        ],
        "rules": null,
        "conclusion": "specializes_in_wasps(Ahmir) ⊕ specializes_in_bees(Ahmir)"
      }
    ],
    "conclusion": "Ahmir is either an entomologist who specializes in wasps or an entomologist who specializes in bees, but not both.",
    "conclusion_fol": "specializes_in_wasps(Ahmir) ⊕ specializes_in_bees(Ahmir)",
    "answer": "True",
    "context": [
      "Ahmir investigates wildlife.",
      "Ahmir does not observe wasps.",
      "If Ahmir investigates wildlife, then he either studies butterflies or observes wasps.",
      "Ahmir researches nature.",
      "Ahmir does not classify species.",
      "If Ahmir researches nature, then he either examines insects or classifies species, but not both.",
      "If Ahmir examines insects, then he specializes in bees and understands ecosystems.",
      "Ahmir either studies wasps or studies butterflies, but not both."
    ],
    "context_fol": [
      "investigates_wildlife(Ahmir)",
      "¬observes_wasps(Ahmir)",
      "investigates_wildlife(Ahmir) → (studies_butterflies(Ahmir) ∨ observes_wasps(Ahmir))",
      "researches_nature(Ahmir)",
      "¬classifies_species(Ahmir)",
      "researches_nature(Ahmir) → (examines_insects(Ahmir) ⊕ classifies_species(Ahmir))",
      "examines_insects(Ahmir) → (specializes_in_bees(Ahmir) ∧ understands_ecosystems(Ahmir))",
      "studies_butterflies(Ahmir) ⊕ specializes_in_wasps(Ahmir)"
    ],
    "background_story": "Ahmir was a renowned entomologist with a specialization in the Vespidae family, commonly known as wasps. His fascination with these insects began as a child, watching paper wasps build intricate nests in his backyard. Ahmir's research focused on the social structures of different Vespidae species, particularly the yellowjacket and hornet. He spent years studying their communication patterns, nest architectures, and predatory behaviors. Ahmir's groundbreaking work led to a deeper understanding of these often-misunderstood creatures, revealing their crucial role in pollination and pest control. His dedication to the field of entomology earned him the nickname 'The Wasp Whisperer' among his peers, and his findings have contributed significantly to the preservation of Vespidae populations worldwide.",
    "name": "Ahmir",
    "keyword": "vespidae",
    "subject_category": "entomologist"
  },
  {
    "facts": [
      "Huxley does not persist.",
      "Huxley is resilient.",
      "Huxley adapts quickly.",
      "Huxley has passion.",
      "Huxley does not create beauty."
    ],
    "facts_fol": [
      "¬persist(Huxley)",
      "is_resilient(Huxley)",
      "adapt_quickly(Huxley)",
      "have_passion(Huxley)",
      "¬create_beauty(Huxley)"
    ],
    "rules": [
      "If someone persists, then they find solutions and overcome adversity.",
      "If Huxley is resilient, then he either adapts quickly or finds solutions, but not both.",
      "Everyone who has passion either creates beauty or faces challenges."
    ],
    "rules_fol": [
      "∀x (persist(x) → (find_solutions(x) ∧ overcome_adversity(x)))",
      "is_resilient(Huxley) → (adapt_quickly(Huxley) ⊕ find_solutions(Huxley))",
      "∀x (have_passion(x) → (create_beauty(x) ∨ face_challenges(x)))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Huxley has a disability, then he either seeks support or overcomes adversity, but not both.",
      "If Huxley either thinks critically or learns quickly (but not both), then he finds solutions.",
      "Anyone who develops skills either faces challenges or inspires others."
    ],
    "distracting_rules_fol": [
      "has_disability(Huxley) → (seek_support(Huxley) ⊕ overcome_adversity(Huxley))",
      "(think_critically(Huxley) ⊕ learn_quickly(Huxley)) → find_solutions(Huxley)",
      "∀x (develop_skills(x) → (face_challenges(x) ∨ inspire_others(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Huxley has passion.",
          "Huxley does not create beauty."
        ],
        "rules": "Everyone who has passion either creates beauty or faces challenges.",
        "conclusion": "Huxley faces challenges."
      },
      {
        "facts": [
          "Huxley is resilient.",
          "Huxley adapts quickly."
        ],
        "rules": "If Huxley is resilient, then he either adapts quickly or finds solutions, but not both.",
        "conclusion": "Huxley does not find solutions."
      },
      {
        "facts": [
          "Huxley does not persist.",
          "Huxley does not find solutions."
        ],
        "rules": "If someone persists, then they find solutions and overcome adversity.",
        "conclusion": null
      },
      {
        "facts": [
          "Huxley faces challenges."
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "have_passion(Huxley)",
          "¬create_beauty(Huxley)"
        ],
        "rules": "∀x (have_passion(x) → (create_beauty(x) ∨ face_challenges(x)))",
        "conclusion": "face_challenges(Huxley)"
      },
      {
        "facts": [
          "is_resilient(Huxley)",
          "adapt_quickly(Huxley)"
        ],
        "rules": "is_resilient(Huxley) → (adapt_quickly(Huxley) ⊕ find_solutions(Huxley))",
        "conclusion": "¬find_solutions(Huxley)"
      },
      {
        "facts": [
          "¬persist(Huxley)",
          "¬find_solutions(Huxley)"
        ],
        "rules": "∀x (persist(x) → (find_solutions(x) ∧ overcome_adversity(x)))",
        "conclusion": null
      },
      {
        "facts": [
          "face_challenges(Huxley)"
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "conclusion": "Huxley faces challenges and overcomes adversity.",
    "conclusion_fol": "face_challenges(Huxley) ∧ overcome_adversity(Huxley)",
    "answer": "Uncertain",
    "context": [
      "Huxley has passion.",
      "Huxley does not create beauty.",
      "Everyone who has passion either creates beauty or faces challenges.",
      "Huxley is resilient.",
      "Huxley adapts quickly.",
      "If Huxley is resilient, then he either adapts quickly or finds solutions, but not both.",
      "Huxley does not persist.",
      "If someone persists, then they find solutions and overcome adversity."
    ],
    "context_fol": [
      "have_passion(Huxley)",
      "¬create_beauty(Huxley)",
      "∀x (have_passion(x) → (create_beauty(x) ∨ face_challenges(x)))",
      "is_resilient(Huxley)",
      "adapt_quickly(Huxley)",
      "is_resilient(Huxley) → (adapt_quickly(Huxley) ⊕ find_solutions(Huxley))",
      "¬persist(Huxley)",
      "∀x (persist(x) → (find_solutions(x) ∧ overcome_adversity(x)))"
    ],
    "background_story": "Huxley was born with anopia, a rare condition that left him completely blind. Despite this, he never let his lack of sight hold him back. With the help of his supportive family and assistive technology, Huxley learned to navigate the world in his own way. He developed a keen sense of hearing and touch, becoming an expert in soundscapes and tactile art. Huxley's passion for music led him to learn braille and play the piano, composing beautiful melodies that echoed his unique perspective. His resilience and determination inspired those around him, proving that with the right mindset, even the darkest of circumstances can be transformed into something extraordinary.",
    "name": "Huxley",
    "keyword": "anopia",
    "subject_category": "human"
  },
  {
    "facts": [
      "Makai studies hard.",
      "Makai is not an expert.",
      "Makai teaches others."
    ],
    "facts_fol": [
      "studies_hard(Makai)",
      "¬expert(Makai)",
      "teach_others(Makai)"
    ],
    "rules": [
      "For all humans, if someone is a dedicated researcher, then they gain recognition and contribute to knowledge.",
      "Anyone who studies hard or publishes papers is a dedicated researcher.",
      "If Makai is an expert, then he either wins awards or gains recognition, but not both.",
      "Makai either teaches others or publishes papers, but not both."
    ],
    "rules_fol": [
      "∀x (dedicated_researcher(x) → (gain_recognition(x) ∧ contribute_knowledge(x)))",
      "∀x ((studies_hard(x) ∨ publishes_papers(x)) → dedicated_researcher(x))",
      "expert(Makai) → (wins_award(Makai) ⊕ gain_recognition(Makai))",
      "teach_others(Makai) ⊕ publishes_papers(Makai)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Makai is passionate about history, then he is a dedicated researcher or makes new discoveries.",
      "Anyone who conducts fieldwork either gains recognition or makes new discoveries.",
      "If Makai reads widely and writes clearly, then he can publish papers."
    ],
    "distracting_rules_fol": [
      "passionate_about_history(Makai) → (dedicated_researcher(Makai) ∨ makes_new_discoveries(Makai))",
      "∀x (conducts_fieldwork(x) → (gain_recognition(x) ∨ makes_new_discoveries(x)))",
      "(reads_widely(Makai) ∧ writes_clearly(Makai)) → publishes_papers(Makai)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Makai teaches others."
        ],
        "rules": "Makai either teaches others or publishes papers, but not both.",
        "conclusion": "Makai does not publish papers."
      },
      {
        "facts": [
          "Makai is not an expert."
        ],
        "rules": "If Makai is an expert, then he either wins awards or gains recognition, but not both.",
        "conclusion": null
      },
      {
        "facts": [
          "Makai studies hard.",
          "Makai does not publish papers."
        ],
        "rules": "Anyone who studies hard or publishes papers is a dedicated researcher.",
        "conclusion": "Makai is a dedicated researcher."
      },
      {
        "facts": [
          "Makai is a dedicated researcher."
        ],
        "rules": "For all humans, if someone is a dedicated researcher, then they gain recognition and contribute to knowledge.",
        "conclusion": "Makai does not contribute to knowledge."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "teach_others(Makai)"
        ],
        "rules": "teach_others(Makai) ⊕ publishes_papers(Makai)",
        "conclusion": "¬publishes_papers(Makai)"
      },
      {
        "facts": [
          "¬expert(Makai)"
        ],
        "rules": "expert(Makai) → (wins_award(Makai) ⊕ gain_recognition(Makai))",
        "conclusion": null
      },
      {
        "facts": [
          "studies_hard(Makai)",
          "¬publishes_papers(Makai)"
        ],
        "rules": "∀x ((studies_hard(x) ∨ publishes_papers(x)) → dedicated_researcher(x))",
        "conclusion": "dedicated_researcher(Makai)"
      },
      {
        "facts": [
          "dedicated_researcher(Makai)"
        ],
        "rules": "∀x (dedicated_researcher(x) → (gain_recognition(x) ∧ contribute_knowledge(x)))",
        "conclusion": "¬contribute_knowledge(Makai)"
      }
    ],
    "conclusion": "Makai does not contribute to knowledge.",
    "conclusion_fol": "¬contribute_knowledge(Makai)",
    "answer": "False",
    "context": [
      "Makai teaches others.",
      "Makai either teaches others or publishes papers, but not both.",
      "Makai is not an expert.",
      "If Makai is an expert, then he either wins awards or gains recognition, but not both.",
      "Makai studies hard.",
      "Anyone who studies hard or publishes papers is a dedicated researcher.",
      "For all humans, if someone is a dedicated researcher, then they gain recognition and contribute to knowledge."
    ],
    "context_fol": [
      "teach_others(Makai)",
      "teach_others(Makai) ⊕ publishes_papers(Makai)",
      "¬expert(Makai)",
      "expert(Makai) → (wins_award(Makai) ⊕ gain_recognition(Makai))",
      "studies_hard(Makai)",
      "∀x ((studies_hard(x) ∨ publishes_papers(x)) → dedicated_researcher(x))",
      "∀x (dedicated_researcher(x) → (gain_recognition(x) ∧ contribute_knowledge(x)))"
    ],
    "background_story": "Makai was a young scholar fascinated by the ancient cultures of the African continent. His research focused on the Hamitic peoples, who were believed to have migrated from the Horn of Africa to various parts of the continent. Makai spent years studying the languages, customs, and traditions of these groups, including the Tutsi, Maasai, and Somalis. He became particularly interested in the linguistic connections between these cultures, tracing the roots of their languages back to a common ancestral tongue. Makai's work shed new light on the complex history of the Hamitic peoples, highlighting their significant contributions to African civilization. His dedication to understanding and preserving their heritage earned him recognition in academic circles and among the communities he studied.",
    "name": "Makai",
    "keyword": "hamitic",
    "subject_category": "human"
  },
  {
    "facts": [
      "Galilea can solve problems.",
      "Galilea works tirelessly."
    ],
    "facts_fol": [
      "solve_problems(Galilea)",
      "work_tirelessly(Galilea)"
    ],
    "rules": [
      "Galilea is either calm in a crisis or panicked in a crisis, but not both.",
      "Galilea either stays focused or remains calm in a crisis.",
      "Galilea either thinks critically or stays focused, but not both at the same time.",
      "If Galilea can solve problems, then she works tirelessly and thinks critically."
    ],
    "rules_fol": [
      "calm_in_crisis(Galilea) ⊕ panicked_in_crisis(Galilea)",
      "stays_focused(Galilea) ∨ calm_in_crisis(Galilea)",
      "thinks_critically(Galilea) ⊕ stays_focused(Galilea)",
      "solve_problems(Galilea) → (work_tirelessly(Galilea) ∧ thinks_critically(Galilea))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Galilea remains cool or is calm in a crisis.",
      "Galilea either acts quickly or stays focused.",
      "Galilea either acts quickly or thinks critically."
    ],
    "distracting_rules_fol": [
      "remains_cool(Galilea) ∨ calm_in_crisis(Galilea)",
      "acts_quickly(Galilea) ∨ stays_focused(Galilea)",
      "acts_quickly(Galilea) ∨ thinks_critically(Galilea)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Galilea can solve problems.",
          "Galilea works tirelessly."
        ],
        "rules": "If Galilea can solve problems, then she works tirelessly and thinks critically.",
        "conclusion": "Galilea thinks critically."
      },
      {
        "facts": [
          "Galilea thinks critically."
        ],
        "rules": "Galilea either thinks critically or stays focused, but not both at the same time.",
        "conclusion": "Galilea does not stay focused."
      },
      {
        "facts": [
          "Galilea does not stay focused."
        ],
        "rules": "Galilea either stays focused or remains calm in a crisis.",
        "conclusion": "Galilea remains calm in a crisis."
      },
      {
        "facts": [
          "Galilea remains calm in a crisis."
        ],
        "rules": "Galilea is either calm in a crisis or panicked in a crisis, but not both.",
        "conclusion": "Galilea is not panicked in a crisis."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "solve_problems(Galilea)",
          "work_tirelessly(Galilea)"
        ],
        "rules": "solve_problems(Galilea) → (work_tirelessly(Galilea) ∧ thinks_critically(Galilea))",
        "conclusion": "thinks_critically(Galilea)"
      },
      {
        "facts": [
          "thinks_critically(Galilea)"
        ],
        "rules": "thinks_critically(Galilea) ⊕ stays_focused(Galilea)",
        "conclusion": "¬stays_focused(Galilea)"
      },
      {
        "facts": [
          "¬stays_focused(Galilea)"
        ],
        "rules": "stays_focused(Galilea) ∨ calm_in_crisis(Galilea)",
        "conclusion": "calm_in_crisis(Galilea)"
      },
      {
        "facts": [
          "calm_in_crisis(Galilea)"
        ],
        "rules": "calm_in_crisis(Galilea) ⊕ panicked_in_crisis(Galilea)",
        "conclusion": "¬panicked_in_crisis(Galilea)"
      }
    ],
    "conclusion": "Galilea is not panicked in a crisis.",
    "conclusion_fol": "¬panicked_in_crisis(Galilea)",
    "answer": "True",
    "context": [
      "Galilea can solve problems.",
      "Galilea works tirelessly.",
      "If Galilea can solve problems, then she works tirelessly and thinks critically.",
      "Galilea either thinks critically or stays focused, but not both at the same time.",
      "Galilea either stays focused or remains calm in a crisis.",
      "Galilea is either calm in a crisis or panicked in a crisis, but not both."
    ],
    "context_fol": [
      "solve_problems(Galilea)",
      "work_tirelessly(Galilea)",
      "solve_problems(Galilea) → (work_tirelessly(Galilea) ∧ thinks_critically(Galilea))",
      "thinks_critically(Galilea) ⊕ stays_focused(Galilea)",
      "stays_focused(Galilea) ∨ calm_in_crisis(Galilea)",
      "calm_in_crisis(Galilea) ⊕ panicked_in_crisis(Galilea)"
    ],
    "background_story": "Galilea was a brilliant engineer who worked for the city's power grid management team. One fateful evening, a severe storm hit the city, causing a widespread power outage that left thousands without electricity. Galilea sprang into action, coordinating with her team to identify the source of the problem and implement a solution. Despite the chaos, she remained calm and focused, working tirelessly through the night to restore power to the affected areas. Her expertise and quick thinking helped to minimize the downtime, and soon the city's lights were back on. The community hailed Galilea as a hero, grateful for her dedication and expertise in resolving the outage and bringing their lives back to normal.",
    "name": "Galilea",
    "keyword": "outage",
    "subject_category": "human"
  },
  {
    "facts": [
      "Lilith gains recognition within the community.",
      "Lilith cuts hair.",
      "Lilith knows personality.",
      "Lilith does not sense emotions."
    ],
    "facts_fol": [
      "gains_community_recognition(Lilith)",
      "cuts_hair(Lilith)",
      "knows_personality(Lilith)",
      "¬senses_emotions(Lilith)"
    ],
    "rules": [
      "If Lilith is a skilled stylist, then she either builds client loyalty or gains community recognition, but not both.",
      "If Lilith can cut hair and understand faces, then she is a skilled stylist.",
      "Anyone who can read people well understands faces.",
      "If Lilith either knows personality or senses emotions (but not both), then she can read people."
    ],
    "rules_fol": [
      "skilled_stylist(Lilith) → (builds_client_loyalty(Lilith) ⊕ gains_community_recognition(Lilith))",
      "(cuts_hair(Lilith) ∧ understands_faces(Lilith)) → skilled_stylist(Lilith)",
      "∀x (reads_people(x) → understands_faces(x))",
      "(knows_personality(Lilith) ⊕ senses_emotions(Lilith)) → reads_people(Lilith)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Lilith is a creative professional, then she is either a skilled stylist or makes people happy (or both).",
      "If Lilith styles hair, then she either colors locks or understands faces, but not both.",
      "If someone listens actively and observes body language, then they can read people."
    ],
    "distracting_rules_fol": [
      "creative_professional(Lilith) → (skilled_stylist(Lilith) ∨ makes_people_happy(Lilith))",
      "styles_hair(Lilith) → (colors_locks(Lilith) ⊕ understands_faces(Lilith))",
      "∀x ((listens_actively(x) ∧ observes_body(x)) → reads_people(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Lilith knows personality.",
          "Lilith does not sense emotions."
        ],
        "rules": "If Lilith either knows personality or senses emotions (but not both), then she can read people.",
        "conclusion": "Lilith can read people."
      },
      {
        "facts": [
          "Lilith can read people."
        ],
        "rules": "Anyone who can read people well understands faces.",
        "conclusion": "Lilith understands faces."
      },
      {
        "facts": [
          "Lilith cuts hair.",
          "Lilith understands faces."
        ],
        "rules": "If Lilith can cut hair and understand faces, then she is a skilled stylist.",
        "conclusion": "Lilith is a skilled stylist."
      },
      {
        "facts": [
          "Lilith is a skilled stylist.",
          "Lilith gains recognition within the community."
        ],
        "rules": "If Lilith is a skilled stylist, then she either builds client loyalty or gains community recognition, but not both.",
        "conclusion": "Lilith does not build client loyalty."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "knows_personality(Lilith)",
          "¬senses_emotions(Lilith)"
        ],
        "rules": "(knows_personality(Lilith) ⊕ senses_emotions(Lilith)) → reads_people(Lilith)",
        "conclusion": "reads_people(Lilith)"
      },
      {
        "facts": [
          "reads_people(Lilith)"
        ],
        "rules": "∀x (reads_people(x) → understands_faces(x))",
        "conclusion": "understands_faces(Lilith)"
      },
      {
        "facts": [
          "cuts_hair(Lilith)",
          "understands_faces(Lilith)"
        ],
        "rules": "(cuts_hair(Lilith) ∧ understands_faces(Lilith)) → skilled_stylist(Lilith)",
        "conclusion": "skilled_stylist(Lilith)"
      },
      {
        "facts": [
          "skilled_stylist(Lilith)",
          "gains_community_recognition(Lilith)"
        ],
        "rules": "skilled_stylist(Lilith) → (builds_client_loyalty(Lilith) ⊕ gains_community_recognition(Lilith))",
        "conclusion": "¬builds_client_loyalty(Lilith)"
      }
    ],
    "conclusion": "Lilith does not build client loyalty.",
    "conclusion_fol": "¬builds_client_loyalty(Lilith)",
    "answer": "True",
    "context": [
      "Lilith knows personality.",
      "Lilith does not sense emotions.",
      "If Lilith either knows personality or senses emotions (but not both), then she can read people.",
      "Anyone who can read people well understands faces.",
      "Lilith cuts hair.",
      "If Lilith can cut hair and understand faces, then she is a skilled stylist.",
      "Lilith gains recognition within the community.",
      "If Lilith is a skilled stylist, then she either builds client loyalty or gains community recognition, but not both."
    ],
    "context_fol": [
      "knows_personality(Lilith)",
      "¬senses_emotions(Lilith)",
      "(knows_personality(Lilith) ⊕ senses_emotions(Lilith)) → reads_people(Lilith)",
      "∀x (reads_people(x) → understands_faces(x))",
      "cuts_hair(Lilith)",
      "(cuts_hair(Lilith) ∧ understands_faces(Lilith)) → skilled_stylist(Lilith)",
      "gains_community_recognition(Lilith)",
      "skilled_stylist(Lilith) → (builds_client_loyalty(Lilith) ⊕ gains_community_recognition(Lilith))"
    ],
    "background_story": "Lilith was a quirky and charming hairstylist who owned a small salon in the heart of the city. She was particularly famous for her signature 'bob' haircut, which she could style in countless ways to suit each client's unique face shape and personality. Lilith's passion for her craft was evident in every snip of her scissors and every stroke of her comb. Her clients adored her not just for her exceptional skills, but also for her warm and engaging personality. As the years passed, Lilith's salon became a staple in the community, with people coming from all over to get their hair styled by the 'bob queen' herself. Lilith's story is one of creativity, dedication, and the joy of making people look and feel their best.",
    "name": "Lilith",
    "keyword": "bob",
    "subject_category": "human"
  },
  {
    "facts": [
      "Westin does not discover new species.",
      "Westin observes insects.",
      "Westin explores ecosystems.",
      "Westin tracks behavior."
    ],
    "facts_fol": [
      "¬discover_new_species(Westin)",
      "observes_insects(Westin)",
      "explores_ecosystems(Westin)",
      "tracks_behavior(Westin)"
    ],
    "rules": [
      "For all entomologists, if they study water striders and discover new species, then they will gain recognition.",
      "If Westin observes insects and researches habitats, then he studies water striders.",
      "Any entomologist who explores ecosystems or tracks behavior researches habitats."
    ],
    "rules_fol": [
      "∀x ((study_water_striders(x) ∧ discover_new_species(x)) → gain_recognition(x))",
      "(observes_insects(Westin) ∧ researches_habitats(Westin)) → study_water_striders(Westin)",
      "∀x ((explores_ecosystems(x) ∨ tracks_behavior(x)) → researches_habitats(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Westin either examines specimens or studies water striders.",
      "All entomologists who either examine ponds or analyze rivers (but not both) research habitats."
    ],
    "distracting_rules_fol": [
      "examines_specimens(Westin) ∨ study_water_striders(Westin)",
      "∀x ((examines_ponds(x) ⊕ analyzes_rivers(x)) → researches_habitats(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Westin explores ecosystems.",
          "Westin tracks behavior."
        ],
        "rules": "Any entomologist who explores ecosystems or tracks behavior researches habitats.",
        "conclusion": "Westin researches habitats."
      },
      {
        "facts": [
          "Westin observes insects.",
          "Westin researches habitats."
        ],
        "rules": "If Westin observes insects and researches habitats, then he studies water striders.",
        "conclusion": "Westin studies water striders."
      },
      {
        "facts": [
          "Westin studies water striders.",
          "Westin does not discover new species."
        ],
        "rules": "For all entomologists, if they study water striders and discover new species, then they will gain recognition.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "explores_ecosystems(Westin)",
          "tracks_behavior(Westin)"
        ],
        "rules": "∀x ((explores_ecosystems(x) ∨ tracks_behavior(x)) → researches_habitats(x))",
        "conclusion": "researches_habitats(Westin)"
      },
      {
        "facts": [
          "observes_insects(Westin)",
          "researches_habitats(Westin)"
        ],
        "rules": "(observes_insects(Westin) ∧ researches_habitats(Westin)) → study_water_striders(Westin)",
        "conclusion": "study_water_striders(Westin)"
      },
      {
        "facts": [
          "study_water_striders(Westin)",
          "¬discover_new_species(Westin)"
        ],
        "rules": "∀x ((study_water_striders(x) ∧ discover_new_species(x)) → gain_recognition(x))",
        "conclusion": null
      }
    ],
    "conclusion": "Westin gains recognition.",
    "conclusion_fol": "gain_recognition(Westin)",
    "answer": "Uncertain",
    "context": [
      "Westin explores ecosystems.",
      "Westin tracks behavior.",
      "Any entomologist who explores ecosystems or tracks behavior researches habitats.",
      "Westin observes insects.",
      "If Westin observes insects and researches habitats, then he studies water striders.",
      "Westin does not discover new species.",
      "For all entomologists, if they study water striders and discover new species, then they will gain recognition."
    ],
    "context_fol": [
      "explores_ecosystems(Westin)",
      "tracks_behavior(Westin)",
      "∀x ((explores_ecosystems(x) ∨ tracks_behavior(x)) → researches_habitats(x))",
      "observes_insects(Westin)",
      "(observes_insects(Westin) ∧ researches_habitats(Westin)) → study_water_striders(Westin)",
      "¬discover_new_species(Westin)",
      "∀x ((study_water_striders(x) ∧ discover_new_species(x)) → gain_recognition(x))"
    ],
    "background_story": "Westin was a renowned entomologist with a passion for water striders, particularly those from the family Notonectidae. His fascination began as a child, watching these insects skim across ponds with effortless ease. As he delved deeper into his research, Westin discovered several new species of Notonectidae in remote regions of South America. His groundbreaking work on the unique adaptations of these insects, such as their ability to walk on water, earned him international recognition. Westin's dedication to the study of Notonectidae not only expanded the field of entomology but also inspired a new generation of scientists to explore the intricate world of aquatic insects.",
    "name": "Westin",
    "keyword": "notonectidae",
    "subject_category": "entomologist"
  },
  {
    "facts": [
      "Kenna is creative.",
      "Kenna is an experienced musician.",
      "Kenna is inspired.",
      "Kenna is passionate.",
      "Kenna is not devoted.",
      "Kenna practices daily."
    ],
    "facts_fol": [
      "creative(Kenna)",
      "experienced(Kenna)",
      "inspired(Kenna)",
      "passionate(Kenna)",
      "¬devoted(Kenna)",
      "practice_daily(Kenna)"
    ],
    "rules": [
      "For all musicians, if a musician is skilled, then they possess emotional expression or technical mastery (or both).",
      "If Kenna is an experienced musician, then she either possesses technical mastery or is creative, but not both.",
      "If Kenna is dedicated, then she is either skilled or inspired, but not both.",
      "All passionate musicians are disciplined and dedicated.",
      "All devoted musicians practice daily and are disciplined."
    ],
    "rules_fol": [
      "∀x (skilled(x) → (emotional_expression(x) ∨ technical_mastery(x)))",
      "experienced(Kenna) → (technical_mastery(Kenna) ⊕ creative(Kenna))",
      "dedicated(Kenna) → (skilled(Kenna) ⊕ inspired(Kenna))",
      "∀x (passionate(x) → (disciplined(x) ∧ dedicated(x)))",
      "∀x (devoted(x) → (practice_daily(x) ∧ disciplined(x)))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Any musician who understands music and masters their instrument can achieve technical mastery.",
      "If Kenna either plays with feeling or masters composition (but not both), then she is skilled.",
      "If a musician loves music and performs well, then they are dedicated.",
      "All musicians who are perfectionists are disciplined."
    ],
    "distracting_rules_fol": [
      "∀x ((understands_music(x) ∧ masters_instrument(x)) → technical_mastery(x))",
      "(plays_with_feeling(Kenna) ⊕ masters_composition(Kenna)) → skilled(Kenna)",
      "∀x ((loves_music(x) ∧ performs_well(x)) → dedicated(x))",
      "∀x (perfectionist(x) → disciplined(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Kenna is not devoted.",
          "Kenna practices daily."
        ],
        "rules": "All devoted musicians practice daily and are disciplined.",
        "conclusion": null
      },
      {
        "facts": [
          "Kenna is passionate."
        ],
        "rules": "All passionate musicians are disciplined and dedicated.",
        "conclusion": "Kenna is dedicated."
      },
      {
        "facts": [
          "Kenna is dedicated.",
          "Kenna is inspired."
        ],
        "rules": "If Kenna is dedicated, then she is either skilled or inspired, but not both.",
        "conclusion": "Kenna is not skilled."
      },
      {
        "facts": [
          "Kenna is an experienced musician.",
          "Kenna is creative."
        ],
        "rules": "If Kenna is an experienced musician, then she either possesses technical mastery or is creative, but not both.",
        "conclusion": "Kenna does not possess technical mastery."
      },
      {
        "facts": [
          "Kenna is not skilled.",
          "Kenna does not possess technical mastery."
        ],
        "rules": "For all musicians, if a musician is skilled, then they possess emotional expression or technical mastery (or both).",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬devoted(Kenna)",
          "practice_daily(Kenna)"
        ],
        "rules": "∀x (devoted(x) → (practice_daily(x) ∧ disciplined(x)))",
        "conclusion": null
      },
      {
        "facts": [
          "passionate(Kenna)"
        ],
        "rules": "∀x (passionate(x) → (disciplined(x) ∧ dedicated(x)))",
        "conclusion": "dedicated(Kenna)"
      },
      {
        "facts": [
          "dedicated(Kenna)",
          "inspired(Kenna)"
        ],
        "rules": "dedicated(Kenna) → (skilled(Kenna) ⊕ inspired(Kenna))",
        "conclusion": "¬skilled(Kenna)"
      },
      {
        "facts": [
          "experienced(Kenna)",
          "creative(Kenna)"
        ],
        "rules": "experienced(Kenna) → (technical_mastery(Kenna) ⊕ creative(Kenna))",
        "conclusion": "¬technical_mastery(Kenna)"
      },
      {
        "facts": [
          "¬skilled(Kenna)",
          "¬technical_mastery(Kenna)"
        ],
        "rules": "∀x (skilled(x) → (emotional_expression(x) ∨ technical_mastery(x)))",
        "conclusion": null
      }
    ],
    "conclusion": "Kenna does not possess emotional expression.",
    "conclusion_fol": "¬emotional_expression(Kenna)",
    "answer": "Uncertain",
    "context": [
      "Kenna is not devoted.",
      "Kenna practices daily.",
      "All devoted musicians practice daily and are disciplined.",
      "Kenna is passionate.",
      "All passionate musicians are disciplined and dedicated.",
      "Kenna is inspired.",
      "If Kenna is dedicated, then she is either skilled or inspired, but not both.",
      "Kenna is an experienced musician.",
      "Kenna is creative.",
      "If Kenna is an experienced musician, then she either possesses technical mastery or is creative, but not both.",
      "For all musicians, if a musician is skilled, then they possess emotional expression or technical mastery (or both)."
    ],
    "context_fol": [
      "¬devoted(Kenna)",
      "practice_daily(Kenna)",
      "∀x (devoted(x) → (practice_daily(x) ∧ disciplined(x)))",
      "passionate(Kenna)",
      "∀x (passionate(x) → (disciplined(x) ∧ dedicated(x)))",
      "inspired(Kenna)",
      "dedicated(Kenna) → (skilled(Kenna) ⊕ inspired(Kenna))",
      "experienced(Kenna)",
      "creative(Kenna)",
      "experienced(Kenna) → (technical_mastery(Kenna) ⊕ creative(Kenna))",
      "∀x (skilled(x) → (emotional_expression(x) ∨ technical_mastery(x)))"
    ],
    "background_story": "Kenna was a virtuosic violinist known for her mesmerizing performances on her prized 18th-century Stradivari. The instrument, passed down through generations of musicians, was said to possess a unique, haunting tone that only revealed itself to those with the purest of intentions and the most skilled of hands. Kenna's journey with the Stradivari began when she was just a child, listening in awe as her mother, a renowned violinist, brought the instrument to life. As she grew older, Kenna became the Stradivari's custodian, mastering its nuances and unlocking its deepest secrets. Her concerts were met with standing ovations, critics and audience alike praising the symbiotic relationship between Kenna and her beloved Stradivari, an alliance that seemed to transcend the boundaries of musician and instrument, creating something sublime and eternal.",
    "name": "Kenna",
    "keyword": "stradivari",
    "subject_category": "musician"
  },
  {
    "facts": [
      "Irene gives feedback.",
      "Irene loves music.",
      "Irene expects greatness.",
      "Irene does not set high goals.",
      "Irene demands quality."
    ],
    "facts_fol": [
      "give_feedback(Irene)",
      "love_music(Irene)",
      "expect_greatness(Irene)",
      "¬set_high_goals(Irene)",
      "demand_quality(Irene)"
    ],
    "rules": [
      "Irene gives feedback or receives harsh criticism.",
      "If Irene loves music, then she expects greatness and is perfectionistic.",
      "If Irene either sets high goals or demands quality (but not both), then she strives for excellence."
    ],
    "rules_fol": [
      "give_feedback(Irene) ∨ receive_harsh_criticism(Irene)",
      "love_music(Irene) → (expect_greatness(Irene) ∧ be_perfectionistic(Irene))",
      "(set_high_goals(Irene) ⊕ demand_quality(Irene)) → strive_for_excellence(Irene)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Irene values honesty, then she receives harsh criticism and pursues improvement.",
      "Anyone who has high standards either pushes for improvement or is perfectionistic (or both).",
      "If someone has high standards and is discerning, then they strive for excellence."
    ],
    "distracting_rules_fol": [
      "value_honesty(Irene) → (receive_harsh_criticism(Irene) ∧ pursue_improvement(Irene))",
      "∀x (have_high_standards(x) → (push_for_improvement(x) ∨ be_perfectionistic(x)))",
      "∀x ((has_high_standards(x) ∧ is_discerning(x)) → strive_for_excellence(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Irene does not set high goals.",
          "Irene demands quality."
        ],
        "rules": "If Irene either sets high goals or demands quality (but not both), then she strives for excellence.",
        "conclusion": "Irene strives for excellence."
      },
      {
        "facts": [
          "Irene loves music.",
          "Irene expects greatness."
        ],
        "rules": "If Irene loves music, then she expects greatness and is perfectionistic.",
        "conclusion": "Irene is perfectionistic."
      },
      {
        "facts": [
          "Irene gives feedback."
        ],
        "rules": "Irene gives feedback or receives harsh criticism.",
        "conclusion": null
      },
      {
        "facts": [
          "Irene is perfectionistic.",
          "Irene strives for excellence."
        ],
        "rules": null,
        "conclusion": "If Irene receives harsh criticism or is perfectionistic (or both), then she strives for excellence."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬set_high_goals(Irene)",
          "demand_quality(Irene)"
        ],
        "rules": "(set_high_goals(Irene) ⊕ demand_quality(Irene)) → strive_for_excellence(Irene)",
        "conclusion": "strive_for_excellence(Irene)"
      },
      {
        "facts": [
          "love_music(Irene)",
          "expect_greatness(Irene)"
        ],
        "rules": "love_music(Irene) → (expect_greatness(Irene) ∧ be_perfectionistic(Irene))",
        "conclusion": "be_perfectionistic(Irene)"
      },
      {
        "facts": [
          "give_feedback(Irene)"
        ],
        "rules": "give_feedback(Irene) ∨ receive_harsh_criticism(Irene)",
        "conclusion": null
      },
      {
        "facts": [
          "be_perfectionistic(Irene)",
          "strive_for_excellence(Irene)"
        ],
        "rules": null,
        "conclusion": "(receive_harsh_criticism(Irene) ∨ be_perfectionistic(Irene)) → strive_for_excellence(Irene)"
      }
    ],
    "conclusion": "If Irene receives harsh criticism or is perfectionistic (or both), then she strives for excellence.",
    "conclusion_fol": "(receive_harsh_criticism(Irene) ∨ be_perfectionistic(Irene)) → strive_for_excellence(Irene)",
    "answer": "True",
    "context": [
      "Irene does not set high goals.",
      "Irene demands quality.",
      "If Irene either sets high goals or demands quality (but not both), then she strives for excellence.",
      "Irene loves music.",
      "Irene expects greatness.",
      "If Irene loves music, then she expects greatness and is perfectionistic.",
      "Irene gives feedback.",
      "Irene gives feedback or receives harsh criticism."
    ],
    "context_fol": [
      "¬set_high_goals(Irene)",
      "demand_quality(Irene)",
      "(set_high_goals(Irene) ⊕ demand_quality(Irene)) → strive_for_excellence(Irene)",
      "love_music(Irene)",
      "expect_greatness(Irene)",
      "love_music(Irene) → (expect_greatness(Irene) ∧ be_perfectionistic(Irene))",
      "give_feedback(Irene)",
      "give_feedback(Irene) ∨ receive_harsh_criticism(Irene)"
    ],
    "background_story": "Irene was a renowned music critic known for her scathing reviews. She critiqued performances harshly, sparing no detail in her assessments. Her sharp tongue and unflinching honesty earned her both admiration and fear from the music community. Despite her tough exterior, Irene had a deep love for music and wanted to see artists strive for perfection. She believed that by criticizing harshly, she was pushing them to reach new heights. Many artists who survived Irene's critiques went on to achieve great success, often attributing their growth to her brutal yet constructive feedback. Irene's legacy was complex, leaving behind a trail of both wounded and elevated artists, all of whom respected her unwavering commitment to musical excellence.",
    "name": "Irene",
    "keyword": "harshly",
    "subject_category": "human"
  },
  {
    "facts": [
      "Amir jogs weekly.",
      "Amir has discipline."
    ],
    "facts_fol": [
      "jogs_weekly(Amir)",
      "has_discipline(Amir)"
    ],
    "rules": [
      "If Amir trains regularly, then he can either achieve his personal best or develop mental toughness, but not both.",
      "Amir either sets high goals or achieves his personal best, but not both.",
      "Amir either runs daily or trains regularly.",
      "Amir either jogs weekly or runs daily, but not both.",
      "Amir either has discipline or sets high goals, but not both."
    ],
    "rules_fol": [
      "train_regularly(Amir) → (achieve_personal_best(Amir) ⊕ develop_mental_toughness(Amir))",
      "set_high_goals(Amir) ⊕ achieve_personal_best(Amir)",
      "runs_daily(Amir) ∨ train_regularly(Amir)",
      "jogs_weekly(Amir) ⊕ runs_daily(Amir)",
      "has_discipline(Amir) ⊕ set_high_goals(Amir)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Amir stays focused or achieves his personal best.",
      "Anyone who is dedicated will train regularly.",
      "If Amir is athletic, then he either runs daily or competes frequently.",
      "If Amir is athletic, then he either sets high goals or wins competitions, but not both."
    ],
    "distracting_rules_fol": [
      "stays_focused(Amir) ∨ achieve_personal_best(Amir)",
      "∀x (is_dedicated(x) → train_regularly(x))",
      "is_athletic(Amir) → (runs_daily(Amir) ∨ competes_frequently(Amir))",
      "is_athletic(Amir) → (set_high_goals(Amir) ⊕ wins_competitions(Amir))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Amir has discipline."
        ],
        "rules": "Amir either has discipline or sets high goals, but not both.",
        "conclusion": "Amir does not set high goals."
      },
      {
        "facts": [
          "Amir jogs weekly."
        ],
        "rules": "Amir either jogs weekly or runs daily, but not both.",
        "conclusion": "Amir does not run daily."
      },
      {
        "facts": [
          "Amir does not run daily."
        ],
        "rules": "Amir either runs daily or trains regularly.",
        "conclusion": "Amir trains regularly."
      },
      {
        "facts": [
          "Amir does not set high goals."
        ],
        "rules": "Amir either sets high goals or achieves his personal best, but not both.",
        "conclusion": "Amir achieves his personal best."
      },
      {
        "facts": [
          "Amir trains regularly.",
          "Amir achieves his personal best."
        ],
        "rules": "If Amir trains regularly, then he can either achieve his personal best or develop mental toughness, but not both.",
        "conclusion": "Amir develops mental toughness."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "has_discipline(Amir)"
        ],
        "rules": "has_discipline(Amir) ⊕ set_high_goals(Amir)",
        "conclusion": "¬set_high_goals(Amir)"
      },
      {
        "facts": [
          "jogs_weekly(Amir)"
        ],
        "rules": "jogs_weekly(Amir) ⊕ runs_daily(Amir)",
        "conclusion": "¬runs_daily(Amir)"
      },
      {
        "facts": [
          "¬runs_daily(Amir)"
        ],
        "rules": "runs_daily(Amir) ∨ train_regularly(Amir)",
        "conclusion": "train_regularly(Amir)"
      },
      {
        "facts": [
          "¬set_high_goals(Amir)"
        ],
        "rules": "set_high_goals(Amir) ⊕ achieve_personal_best(Amir)",
        "conclusion": "achieve_personal_best(Amir)"
      },
      {
        "facts": [
          "train_regularly(Amir)",
          "achieve_personal_best(Amir)"
        ],
        "rules": "train_regularly(Amir) → (achieve_personal_best(Amir) ⊕ develop_mental_toughness(Amir))",
        "conclusion": "develop_mental_toughness(Amir)"
      }
    ],
    "conclusion": "Amir develops mental toughness.",
    "conclusion_fol": "develop_mental_toughness(Amir)",
    "answer": "False",
    "context": [
      "Amir has discipline.",
      "Amir either has discipline or sets high goals, but not both.",
      "Amir jogs weekly.",
      "Amir either jogs weekly or runs daily, but not both.",
      "Amir either runs daily or trains regularly.",
      "Amir either sets high goals or achieves his personal best, but not both.",
      "If Amir trains regularly, then he can either achieve his personal best or develop mental toughness, but not both."
    ],
    "context_fol": [
      "has_discipline(Amir)",
      "has_discipline(Amir) ⊕ set_high_goals(Amir)",
      "jogs_weekly(Amir)",
      "jogs_weekly(Amir) ⊕ runs_daily(Amir)",
      "runs_daily(Amir) ∨ train_regularly(Amir)",
      "set_high_goals(Amir) ⊕ achieve_personal_best(Amir)",
      "train_regularly(Amir) → (achieve_personal_best(Amir) ⊕ develop_mental_toughness(Amir))"
    ],
    "background_story": "Amir was a determined young athlete with a passion for long-distance running. He had always been fascinated by the idea of completing a marathon, and after months of rigorous training, he was ready to take the challenge. As he stood at the starting line, Amir felt a surge of adrenaline coursing through his veins. With a confident stride, he began his journey, his feet pounding the pavement in a steady rhythm. The miles flew by, and Amir found himself in a meditative state, his stride becoming more effortless with each step. He crossed the finish line with a personal best time, beaming with pride and a sense of accomplishment. Amir's long stride had carried him not just through the marathon, but through the journey of self-discovery and perseverance.",
    "name": "Amir",
    "keyword": "stride",
    "subject_category": "human"
  },
  {
    "facts": [
      "Leslie shares knowledge."
    ],
    "facts_fol": [
      "share_knowledge(Leslie)"
    ],
    "rules": [
      "For all humans, if they understand music, then they can feel emotions deeply.",
      "A person either plays instruments or understands music, but not necessarily both.",
      "A person either composes songs or plays instruments, but not necessarily both.",
      "A person either teaches music or composes songs, but not necessarily both.",
      "If Leslie shares knowledge, then she will teach music."
    ],
    "rules_fol": [
      "∀x (understand_music(x) → feel_emotions(x))",
      "∀x (play_instruments(x) ⊕ understand_music(x))",
      "∀x (compose_songs(x) ⊕ play_instruments(x))",
      "∀x (teach_music(x) ⊕ compose_songs(x))",
      "share_knowledge(Leslie) → teach_music(Leslie)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Leslie either hears rhythms or senses harmony (but not both), then she understands music.",
      "If Leslie either reads scores or hears melodies (but not both), then she plays instruments.",
      "If Leslie loves harmony, then she expresses herself creatively and composes songs.",
      "Leslie either makes art or teaches music."
    ],
    "distracting_rules_fol": [
      "(hear_rhythms(Leslie) ⊕ sense_harmony(Leslie)) → understand_music(Leslie)",
      "(read_scores(Leslie) ⊕ hear_melodies(Leslie)) → play_instruments(Leslie)",
      "love_harmony(Leslie) → (express_creatively(Leslie) ∧ compose_songs(Leslie))",
      "makes_art(Leslie) ∨ teach_music(Leslie)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Leslie shares knowledge."
        ],
        "rules": "If Leslie shares knowledge, then she will teach music.",
        "conclusion": "Leslie teaches music."
      },
      {
        "facts": [
          "Leslie teaches music."
        ],
        "rules": "A person either teaches music or composes songs, but not necessarily both.",
        "conclusion": "Leslie does not compose songs."
      },
      {
        "facts": [
          "Leslie does not compose songs."
        ],
        "rules": "A person either composes songs or plays instruments, but not necessarily both.",
        "conclusion": "Leslie plays instruments."
      },
      {
        "facts": [
          "Leslie plays instruments."
        ],
        "rules": "A person either plays instruments or understands music, but not necessarily both.",
        "conclusion": "Leslie does not understand music."
      },
      {
        "facts": [
          "Leslie does not understand music."
        ],
        "rules": "For all humans, if they understand music, then they can feel emotions deeply.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "share_knowledge(Leslie)"
        ],
        "rules": "share_knowledge(Leslie) → teach_music(Leslie)",
        "conclusion": "teach_music(Leslie)"
      },
      {
        "facts": [
          "teach_music(Leslie)"
        ],
        "rules": "∀x (teach_music(x) ⊕ compose_songs(x))",
        "conclusion": "¬compose_songs(Leslie)"
      },
      {
        "facts": [
          "¬compose_songs(Leslie)"
        ],
        "rules": "∀x (compose_songs(x) ⊕ play_instruments(x))",
        "conclusion": "play_instruments(Leslie)"
      },
      {
        "facts": [
          "play_instruments(Leslie)"
        ],
        "rules": "∀x (play_instruments(x) ⊕ understand_music(x))",
        "conclusion": "¬understand_music(Leslie)"
      },
      {
        "facts": [
          "¬understand_music(Leslie)"
        ],
        "rules": "∀x (understand_music(x) → feel_emotions(x))",
        "conclusion": null
      }
    ],
    "conclusion": "Leslie can feel emotions deeply.",
    "conclusion_fol": "feel_emotions(Leslie)",
    "answer": "Uncertain",
    "context": [
      "Leslie shares knowledge.",
      "If Leslie shares knowledge, then she will teach music.",
      "A person either teaches music or composes songs, but not necessarily both.",
      "A person either composes songs or plays instruments, but not necessarily both.",
      "A person either plays instruments or understands music, but not necessarily both.",
      "For all humans, if they understand music, then they can feel emotions deeply."
    ],
    "context_fol": [
      "share_knowledge(Leslie)",
      "share_knowledge(Leslie) → teach_music(Leslie)",
      "∀x (teach_music(x) ⊕ compose_songs(x))",
      "∀x (compose_songs(x) ⊕ play_instruments(x))",
      "∀x (play_instruments(x) ⊕ understand_music(x))",
      "∀x (understand_music(x) → feel_emotions(x))"
    ],
    "background_story": "Leslie had an undeniable affinity for music from a young age. As a child, she would spend hours listening to her mother's old records, mesmerized by the melodies and harmonies. This early fascination blossomed into a deep passion, leading her to learn multiple instruments and eventually compose her own pieces. Leslie's affinity for sound was not limited to music; she had a unique ability to perceive the emotional resonance of those around her, often sensing when someone was distressed or in need of comfort. Her empathetic nature, combined with her musical talent, made her a beloved music therapist, helping countless individuals find solace and healing through the universal language of music.",
    "name": "Leslie",
    "keyword": "affinity",
    "subject_category": "human"
  },
  {
    "facts": [
      "Alexis blends her buildings with the surrounding nature.",
      "Alexis creates iconic buildings.",
      "Alexis does not focus on minimalism.",
      "Alexis creates unique spaces.",
      "Alexis does not incorporate angles in her designs."
    ],
    "facts_fol": [
      "blend_with_nature(Alexis)",
      "create_iconic_buildings(Alexis)",
      "¬focus_on_minimalism(Alexis)",
      "create_unique_spaces(Alexis)",
      "¬incorporate_angles(Alexis)"
    ],
    "rules": [
      "If Alexis emphasizes either horizontal or vertical elements (but not both) in her designs, then she creates sustainable buildings.",
      "If Alexis is a design pioneer, then she either emphasizes horizontal elements or uses curves in her designs, but not both.",
      "If Alexis creates iconic buildings, then she is either a design pioneer or focuses on minimalism, but not both.",
      "Alexis either blends her buildings with the surrounding nature or emphasizes vertical elements, but not both.",
      "If Alexis creates unique spaces, then she either incorporates angles or uses curves in her designs, but not both."
    ],
    "rules_fol": [
      "(emphasize_horizontal(Alexis) ⊕ emphasize_vertical(Alexis)) → sustainable(Alexis)",
      "design_pioneer(Alexis) → (emphasize_horizontal(Alexis) ⊕ use_curves(Alexis))",
      "create_iconic_buildings(Alexis) → (focus_on_minimalism(Alexis) ⊕ design_pioneer(Alexis))",
      "blend_with_nature(Alexis) ⊕ emphasize_vertical(Alexis)",
      "create_unique_spaces(Alexis) → (incorporate_angles(Alexis) ⊕ use_curves(Alexis))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Alexis prioritizes space, then she will emphasize horizontal elements in her designs.",
      "All innovative-thinking architects value functionality and are design pioneers.",
      "Any architect who uses skyscrapers or builds high-rise structures emphasizes vertical elements.",
      "If Alexis is an innovative designer, then she either prioritizes functionality or uses curves in her designs (or both)."
    ],
    "distracting_rules_fol": [
      "prioritize_space(Alexis) → emphasize_horizontal(Alexis)",
      "∀x (think_innovative(x) → (value_functionality(x) ∧ design_pioneer(x)))",
      "∀x ((use_skyscrapers(x) ∨ build_high_rise(x)) → emphasize_vertical(x))",
      "innovative_designer(Alexis) → (prioritize_functionality(Alexis) ∨ use_curves(Alexis))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Alexis creates unique spaces.",
          "Alexis does not incorporate angles in her designs."
        ],
        "rules": "If Alexis creates unique spaces, then she either incorporates angles or uses curves in her designs, but not both.",
        "conclusion": "Alexis uses curves in her designs."
      },
      {
        "facts": [
          "Alexis blends her buildings with the surrounding nature."
        ],
        "rules": "Alexis either blends her buildings with the surrounding nature or emphasizes vertical elements, but not both.",
        "conclusion": "Alexis does not emphasize vertical elements in her designs."
      },
      {
        "facts": [
          "Alexis creates iconic buildings.",
          "Alexis does not focus on minimalism."
        ],
        "rules": "If Alexis creates iconic buildings, then she is either a design pioneer or focuses on minimalism, but not both.",
        "conclusion": "Alexis is a design pioneer."
      },
      {
        "facts": [
          "Alexis is a design pioneer.",
          "Alexis uses curves in her designs."
        ],
        "rules": "If Alexis is a design pioneer, then she either emphasizes horizontal elements or uses curves in her designs, but not both.",
        "conclusion": "Alexis does not emphasize horizontal elements in her designs."
      },
      {
        "facts": [
          "Alexis does not emphasize horizontal elements in her designs.",
          "Alexis does not emphasize vertical elements in her designs."
        ],
        "rules": "If Alexis emphasizes either horizontal or vertical elements (but not both) in her designs, then she creates sustainable buildings.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "create_unique_spaces(Alexis)",
          "¬incorporate_angles(Alexis)"
        ],
        "rules": "create_unique_spaces(Alexis) → (incorporate_angles(Alexis) ⊕ use_curves(Alexis))",
        "conclusion": "use_curves(Alexis)"
      },
      {
        "facts": [
          "blend_with_nature(Alexis)"
        ],
        "rules": "blend_with_nature(Alexis) ⊕ emphasize_vertical(Alexis)",
        "conclusion": "¬emphasize_vertical(Alexis)"
      },
      {
        "facts": [
          "create_iconic_buildings(Alexis)",
          "¬focus_on_minimalism(Alexis)"
        ],
        "rules": "create_iconic_buildings(Alexis) → (focus_on_minimalism(Alexis) ⊕ design_pioneer(Alexis))",
        "conclusion": "design_pioneer(Alexis)"
      },
      {
        "facts": [
          "design_pioneer(Alexis)",
          "use_curves(Alexis)"
        ],
        "rules": "design_pioneer(Alexis) → (emphasize_horizontal(Alexis) ⊕ use_curves(Alexis))",
        "conclusion": "¬emphasize_horizontal(Alexis)"
      },
      {
        "facts": [
          "¬emphasize_horizontal(Alexis)",
          "¬emphasize_vertical(Alexis)"
        ],
        "rules": "(emphasize_horizontal(Alexis) ⊕ emphasize_vertical(Alexis)) → sustainable(Alexis)",
        "conclusion": null
      }
    ],
    "conclusion": "Alexis creates sustainable buildings.",
    "conclusion_fol": "sustainable(Alexis)",
    "answer": "Uncertain",
    "context": [
      "Alexis creates unique spaces.",
      "Alexis does not incorporate angles in her designs.",
      "If Alexis creates unique spaces, then she either incorporates angles or uses curves in her designs, but not both.",
      "Alexis blends her buildings with the surrounding nature.",
      "Alexis either blends her buildings with the surrounding nature or emphasizes vertical elements, but not both.",
      "Alexis creates iconic buildings.",
      "Alexis does not focus on minimalism.",
      "If Alexis creates iconic buildings, then she is either a design pioneer or focuses on minimalism, but not both.",
      "If Alexis is a design pioneer, then she either emphasizes horizontal elements or uses curves in her designs, but not both.",
      "If Alexis emphasizes either horizontal or vertical elements (but not both) in her designs, then she creates sustainable buildings."
    ],
    "context_fol": [
      "create_unique_spaces(Alexis)",
      "¬incorporate_angles(Alexis)",
      "create_unique_spaces(Alexis) → (incorporate_angles(Alexis) ⊕ use_curves(Alexis))",
      "blend_with_nature(Alexis)",
      "blend_with_nature(Alexis) ⊕ emphasize_vertical(Alexis)",
      "create_iconic_buildings(Alexis)",
      "¬focus_on_minimalism(Alexis)",
      "create_iconic_buildings(Alexis) → (focus_on_minimalism(Alexis) ⊕ design_pioneer(Alexis))",
      "design_pioneer(Alexis) → (emphasize_horizontal(Alexis) ⊕ use_curves(Alexis))",
      "(emphasize_horizontal(Alexis) ⊕ emphasize_vertical(Alexis)) → sustainable(Alexis)"
    ],
    "background_story": "Alexis was a visionary architect known for her innovative designs that emphasized horizontal lines and expansive spaces. Her most famous project, the 'Horizon House', was a sprawling, one-story mansion that seemed to blend seamlessly into its surroundings. The building's horizontal profile was punctuated by large windows and sliding glass doors, creating a sense of fluidity between indoors and outdoors. Alexis's design philosophy focused on creating structures that were in harmony with the natural environment, rather than imposing upon it. Her use of horizontal elements not only produced aesthetically striking buildings but also helped to minimize their visual impact on the landscape, making her a leading figure in sustainable architecture.",
    "name": "Alexis",
    "keyword": "horizontal",
    "subject_category": "architect"
  },
  {
    "facts": [
      "Jose is not rhythmic.",
      "Jose is flexible.",
      "Jose has good balance."
    ],
    "facts_fol": [
      "¬rhythmic(Jose)",
      "flexible(Jose)",
      "good_balance(Jose)"
    ],
    "rules": [
      "Jose is either in step or out of step, but not both.",
      "If Jose is a dancer, then he is either rhythmic or in step, but not both.",
      "If Jose is flexible, then he has a strong core and is a dancer.",
      "Anyone who is athletic either has a strong core or has good balance."
    ],
    "rules_fol": [
      "in_step(Jose) ⊕ out_of_step(Jose)",
      "dancer(Jose) → (rhythmic(Jose) ⊕ in_step(Jose))",
      "flexible(Jose) → (strong_core(Jose) ∧ dancer(Jose))",
      "∀x (athletic(x) → (strong_core(x) ∨ good_balance(x)))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Any person who has good timing or moves gracefully is in step.",
      "Jose either moves gracefully or is a dancer.",
      "If Jose trains regularly and eats healthy, then he has a strong core."
    ],
    "distracting_rules_fol": [
      "∀x ((has_good_timing(x) ∨ moves_gracefully(x)) → in_step(x))",
      "moves_gracefully(Jose) ∨ dancer(Jose)",
      "(trains_regularly(Jose) ∧ eats_healthy(Jose)) → strong_core(Jose)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Jose has good balance."
        ],
        "rules": "Anyone who is athletic either has a strong core or has good balance.",
        "conclusion": null
      },
      {
        "facts": [
          "Jose is flexible."
        ],
        "rules": "If Jose is flexible, then he has a strong core and is a dancer.",
        "conclusion": "Jose is a dancer."
      },
      {
        "facts": [
          "Jose is a dancer.",
          "Jose is not rhythmic."
        ],
        "rules": "If Jose is a dancer, then he is either rhythmic or in step, but not both.",
        "conclusion": "Jose is in step."
      },
      {
        "facts": [
          "Jose is in step."
        ],
        "rules": "Jose is either in step or out of step, but not both.",
        "conclusion": "Jose is not out of step."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "good_balance(Jose)"
        ],
        "rules": "∀x (athletic(x) → (strong_core(x) ∨ good_balance(x)))",
        "conclusion": null
      },
      {
        "facts": [
          "flexible(Jose)"
        ],
        "rules": "flexible(Jose) → (strong_core(Jose) ∧ dancer(Jose))",
        "conclusion": "dancer(Jose)"
      },
      {
        "facts": [
          "dancer(Jose)",
          "¬rhythmic(Jose)"
        ],
        "rules": "dancer(Jose) → (rhythmic(Jose) ⊕ in_step(Jose))",
        "conclusion": "in_step(Jose)"
      },
      {
        "facts": [
          "in_step(Jose)"
        ],
        "rules": "in_step(Jose) ⊕ out_of_step(Jose)",
        "conclusion": "¬out_of_step(Jose)"
      }
    ],
    "conclusion": "Jose is not out of step.",
    "conclusion_fol": "¬out_of_step(Jose)",
    "answer": "True",
    "context": [
      "Jose has good balance.",
      "Anyone who is athletic either has a strong core or has good balance.",
      "Jose is flexible.",
      "If Jose is flexible, then he has a strong core and is a dancer.",
      "Jose is not rhythmic.",
      "If Jose is a dancer, then he is either rhythmic or in step, but not both.",
      "Jose is either in step or out of step, but not both."
    ],
    "context_fol": [
      "good_balance(Jose)",
      "∀x (athletic(x) → (strong_core(x) ∨ good_balance(x)))",
      "flexible(Jose)",
      "flexible(Jose) → (strong_core(Jose) ∧ dancer(Jose))",
      "¬rhythmic(Jose)",
      "dancer(Jose) → (rhythmic(Jose) ⊕ in_step(Jose))",
      "in_step(Jose) ⊕ out_of_step(Jose)"
    ],
    "background_story": "Jose was a professional dancer known for his impeccable timing and footwork. As a lead dancer in a renowned ballet company, he had to be always in step with his partner. However, Jose's career almost came to a halt when he suffered a severe ankle injury that left him unable to dance for months. Determined to get back on stage, Jose worked tirelessly with his physical therapist to regain his strength and technique. He focused particularly on getting his instep flexible again, a crucial aspect for any ballet dancer. After a long and arduous recovery, Jose made a triumphant return to the stage, his movements as fluid and precise as ever. His ability to stay in step, both physically and mentally, inspired his fellow dancers and earned him a standing ovation from the audience.",
    "name": "Jose",
    "keyword": "instep",
    "subject_category": "human"
  },
  {
    "facts": [
      "Anaya does not treat jaw pain.",
      "Anaya is an orthopedic surgeon.",
      "Anaya is a medical doctor.",
      "Anaya examines tissue."
    ],
    "facts_fol": [
      "¬treat_jaw_pain(Anaya)",
      "is_orthopedic_surgeon(Anaya)",
      "is_medical_doctor(Anaya)",
      "examine_tissue(Anaya)"
    ],
    "rules": [
      "For all medical professionals, if they specialize in TMJ, then they improve patient outcomes.",
      "If Anaya studies jaw movement or treats jaw pain, then she specializes in TMJ.",
      "If Anaya is an orthopedic surgeon, then she either researches bone structure or studies jaw movement, but not both.",
      "If Anaya is a medical doctor, then she either examines tissue or researches bone structure, but not both."
    ],
    "rules_fol": [
      "∀x (specialize_in_TMJ(x) → improve_patient_outcomes(x))",
      "(study_jaw_movement(Anaya) ∨ treat_jaw_pain(Anaya)) → specialize_in_TMJ(Anaya)",
      "is_orthopedic_surgeon(Anaya) → (research_bone_structure(Anaya) ⊕ study_jaw_movement(Anaya))",
      "is_medical_doctor(Anaya) → (examine_tissue(Anaya) ⊕ research_bone_structure(Anaya))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Anaya performs surgery, then she either specializes in TMJ or develops new techniques.",
      "If a medical professional investigates the condyle and analyzes jaw function, then they study jaw movement.",
      "Anaya either treats injuries or researches bone structure."
    ],
    "distracting_rules_fol": [
      "perform_surgery(Anaya) → (specialize_in_TMJ(Anaya) ∨ develop_new_techniques(Anaya))",
      "∀x ((investigates_condyle(x) ∧ analyzes_jaw_function(x)) → study_jaw_movement(x))",
      "treat_injuries(Anaya) ∨ research_bone_structure(Anaya)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Anaya is a medical doctor.",
          "Anaya examines tissue."
        ],
        "rules": "If Anaya is a medical doctor, then she either examines tissue or researches bone structure, but not both.",
        "conclusion": "Anaya does not research bone structure."
      },
      {
        "facts": [
          "Anaya is an orthopedic surgeon.",
          "Anaya does not research bone structure."
        ],
        "rules": "If Anaya is an orthopedic surgeon, then she either researches bone structure or studies jaw movement, but not both.",
        "conclusion": "Anaya studies jaw movement."
      },
      {
        "facts": [
          "Anaya studies jaw movement.",
          "Anaya does not treat jaw pain."
        ],
        "rules": "If Anaya studies jaw movement or treats jaw pain, then she specializes in TMJ.",
        "conclusion": "Anaya specializes in TMJ."
      },
      {
        "facts": [
          "Anaya specializes in TMJ."
        ],
        "rules": "For all medical professionals, if they specialize in TMJ, then they improve patient outcomes.",
        "conclusion": "Anaya improves patient outcomes."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "is_medical_doctor(Anaya)",
          "examine_tissue(Anaya)"
        ],
        "rules": "is_medical_doctor(Anaya) → (examine_tissue(Anaya) ⊕ research_bone_structure(Anaya))",
        "conclusion": "¬research_bone_structure(Anaya)"
      },
      {
        "facts": [
          "is_orthopedic_surgeon(Anaya)",
          "¬research_bone_structure(Anaya)"
        ],
        "rules": "is_orthopedic_surgeon(Anaya) → (research_bone_structure(Anaya) ⊕ study_jaw_movement(Anaya))",
        "conclusion": "study_jaw_movement(Anaya)"
      },
      {
        "facts": [
          "study_jaw_movement(Anaya)",
          "¬treat_jaw_pain(Anaya)"
        ],
        "rules": "(study_jaw_movement(Anaya) ∨ treat_jaw_pain(Anaya)) → specialize_in_TMJ(Anaya)",
        "conclusion": "specialize_in_TMJ(Anaya)"
      },
      {
        "facts": [
          "specialize_in_TMJ(Anaya)"
        ],
        "rules": "∀x (specialize_in_TMJ(x) → improve_patient_outcomes(x))",
        "conclusion": "improve_patient_outcomes(Anaya)"
      }
    ],
    "conclusion": "Anaya improves patient outcomes.",
    "conclusion_fol": "improve_patient_outcomes(Anaya)",
    "answer": "True",
    "context": [
      "Anaya is a medical doctor.",
      "Anaya examines tissue.",
      "If Anaya is a medical doctor, then she either examines tissue or researches bone structure, but not both.",
      "Anaya is an orthopedic surgeon.",
      "If Anaya is an orthopedic surgeon, then she either researches bone structure or studies jaw movement, but not both.",
      "Anaya does not treat jaw pain.",
      "If Anaya studies jaw movement or treats jaw pain, then she specializes in TMJ.",
      "For all medical professionals, if they specialize in TMJ, then they improve patient outcomes."
    ],
    "context_fol": [
      "is_medical_doctor(Anaya)",
      "examine_tissue(Anaya)",
      "is_medical_doctor(Anaya) → (examine_tissue(Anaya) ⊕ research_bone_structure(Anaya))",
      "is_orthopedic_surgeon(Anaya)",
      "is_orthopedic_surgeon(Anaya) → (research_bone_structure(Anaya) ⊕ study_jaw_movement(Anaya))",
      "¬treat_jaw_pain(Anaya)",
      "(study_jaw_movement(Anaya) ∨ treat_jaw_pain(Anaya)) → specialize_in_TMJ(Anaya)",
      "∀x (specialize_in_TMJ(x) → improve_patient_outcomes(x))"
    ],
    "background_story": "Anaya was a brilliant and meticulous orthopedic surgeon with a special interest in temporomandibular joint (TMJ) disorders. Her focus on the condyle, the part of the jawbone that connects to the skull, led to groundbreaking research on its role in jaw movement and pain. Anaya's innovative surgical techniques for condyle repair and replacement significantly improved the quality of life for countless patients suffering from TMJ disorders. Her dedication to her work and her patients earned her recognition as a leading expert in her field. Anaya continued to push the boundaries of medical knowledge, always seeking new ways to alleviate pain and restore function to the condyle and the complex jaw system it was a part of.",
    "name": "Anaya",
    "keyword": "condyle",
    "subject_category": "medical professional"
  },
  {
    "facts": [
      "Valentina is a private person.",
      "Valentina is a socialite.",
      "Valentina is manipulative."
    ],
    "facts_fol": [
      "is_private(Valentina)",
      "socialite(Valentina)",
      "manipulative(Valentina)"
    ],
    "rules": [
      "If Valentina is either sincere or insincere (but not both), then she is noticeable.",
      "A person is either genuine or can come across as insincere, but not both at the same time.",
      "Valentina is either a private person or has a sincere nature, but she cannot be both.",
      "If Valentina is a socialite, then she is either genuine or manipulative, but not both."
    ],
    "rules_fol": [
      "(sincere(Valentina) ⊕ insincere(Valentina)) → noticeable(Valentina)",
      "∀x (is_genuine(x) ⊕ insincere(x))",
      "is_private(Valentina) ⊕ sincere(Valentina)",
      "socialite(Valentina) → (manipulative(Valentina) ⊕ is_genuine(Valentina))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Valentina seeks validation and gives excessive praise, then she is insincere.",
      "Valentina is either honest or sincere.",
      "Everyone who seeks attention is either genuine or craves affection."
    ],
    "distracting_rules_fol": [
      "(seeks_validation(Valentina) ∧ gives_excessive_praise(Valentina)) → insincere(Valentina)",
      "is_honest(Valentina) ∨ sincere(Valentina)",
      "∀x (seek_attention(x) → (is_genuine(x) ∨ crave_affection(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Valentina is a socialite.",
          "Valentina is manipulative."
        ],
        "rules": "If Valentina is a socialite, then she is either genuine or manipulative, but not both.",
        "conclusion": "Valentina is not genuine."
      },
      {
        "facts": [
          "Valentina is a private person."
        ],
        "rules": "Valentina is either a private person or has a sincere nature, but she cannot be both.",
        "conclusion": "Valentina is not sincere."
      },
      {
        "facts": [
          "Valentina is not genuine."
        ],
        "rules": "A person is either genuine or can come across as insincere, but not both at the same time.",
        "conclusion": "Valentina is insincere."
      },
      {
        "facts": [
          "Valentina is not sincere.",
          "Valentina is insincere."
        ],
        "rules": "If Valentina is either sincere or insincere (but not both), then she is noticeable.",
        "conclusion": "Valentina is not noticeable."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "socialite(Valentina)",
          "manipulative(Valentina)"
        ],
        "rules": "socialite(Valentina) → (manipulative(Valentina) ⊕ is_genuine(Valentina))",
        "conclusion": "¬is_genuine(Valentina)"
      },
      {
        "facts": [
          "is_private(Valentina)"
        ],
        "rules": "is_private(Valentina) ⊕ sincere(Valentina)",
        "conclusion": "¬sincere(Valentina)"
      },
      {
        "facts": [
          "¬is_genuine(Valentina)"
        ],
        "rules": "∀x (is_genuine(x) ⊕ insincere(x))",
        "conclusion": "insincere(Valentina)"
      },
      {
        "facts": [
          "¬sincere(Valentina)",
          "insincere(Valentina)"
        ],
        "rules": "(sincere(Valentina) ⊕ insincere(Valentina)) → noticeable(Valentina)",
        "conclusion": "¬noticeable(Valentina)"
      }
    ],
    "conclusion": "Valentina is not noticeable.",
    "conclusion_fol": "¬noticeable(Valentina)",
    "answer": "False",
    "context": [
      "Valentina is a socialite.",
      "Valentina is manipulative.",
      "If Valentina is a socialite, then she is either genuine or manipulative, but not both.",
      "Valentina is a private person.",
      "Valentina is either a private person or has a sincere nature, but she cannot be both.",
      "A person is either genuine or can come across as insincere, but not both at the same time.",
      "If Valentina is either sincere or insincere (but not both), then she is noticeable."
    ],
    "context_fol": [
      "socialite(Valentina)",
      "manipulative(Valentina)",
      "socialite(Valentina) → (manipulative(Valentina) ⊕ is_genuine(Valentina))",
      "is_private(Valentina)",
      "is_private(Valentina) ⊕ sincere(Valentina)",
      "∀x (is_genuine(x) ⊕ insincere(x))",
      "(sincere(Valentina) ⊕ insincere(Valentina)) → noticeable(Valentina)"
    ],
    "background_story": "Valentina was known for her overly sweet and cloyingly charming personality. She would often lavish excessive praise on those around her, making them feel uncomfortable and skeptical of her intentions. Her constant need for validation and attention led her to be overly flattering, which sometimes came across as insincere. Despite this, Valentina had a certain charm that drew people to her, and she was always the center of attention at social gatherings. However, those close to her knew that beneath her sugary exterior, Valentina had a complex and sensitive soul, desperate to be loved and accepted for who she truly was.",
    "name": "Valentina",
    "keyword": "cloyingly",
    "subject_category": "person"
  },
  {
    "facts": [
      "Addilynn does not design elegantly.",
      "Addilynn hates clutter.",
      "Addilynn does not prioritize function.",
      "Addilynn values elegance.",
      "Addilynn does not create harmony."
    ],
    "facts_fol": [
      "¬designs_elegantly(Addilynn)",
      "hates_clutter(Addilynn)",
      "¬prioritizes_function(Addilynn)",
      "values_elegance(Addilynn)",
      "¬creates_harmony(Addilynn)"
    ],
    "rules": [
      "For all humans, if they embrace minimalism, then they live clutter-free.",
      "Anyone who values simplicity either embraces minimalism or designs elegantly.",
      "If someone hates clutter and loves order, then they value simplicity.",
      "Anyone who curates their space either prioritizes function or loves order (or both).",
      "Everyone who values elegance either creates harmony or curates their space (or both)."
    ],
    "rules_fol": [
      "∀x (embraces_minimalism(x) → lives_clutter_free(x))",
      "∀x (values_simplicity(x) → (embraces_minimalism(x) ∨ designs_elegantly(x)))",
      "∀x ((hates_clutter(x) ∧ loves_order(x)) → values_simplicity(x))",
      "∀x (curates_space(x) → (prioritizes_function(x) ∨ loves_order(x)))",
      "∀x (values_elegance(x) → (creates_harmony(x) ∨ curates_space(x)))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Anyone who rejects excess embraces minimalism.",
      "If Addilynn either reduces waste or favors neutral colors (but not both), then she values simplicity.",
      "Everyone who appreciates cleanliness either enjoys organization or loves order (or both).",
      "If Addilynn appreciates beauty, then she curates her space and respects details."
    ],
    "distracting_rules_fol": [
      "∀x (rejects_excess(x) → embraces_minimalism(x))",
      "(reduces_waste(Addilynn) ⊕ favors_neutrals(Addilynn)) → values_simplicity(Addilynn)",
      "∀x (appreciates_cleanliness(x) → (enjoys_organization(x) ∨ loves_order(x)))",
      "appreciates_beauty(Addilynn) → (curates_space(Addilynn) ∧ respects_details(Addilynn))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Addilynn values elegance.",
          "Addilynn does not create harmony."
        ],
        "rules": "Everyone who values elegance either creates harmony or curates their space (or both).",
        "conclusion": "Addilynn curates her space."
      },
      {
        "facts": [
          "Addilynn curates her space.",
          "Addilynn does not prioritize function."
        ],
        "rules": "Anyone who curates their space either prioritizes function or loves order (or both).",
        "conclusion": "Addilynn loves order."
      },
      {
        "facts": [
          "Addilynn hates clutter.",
          "Addilynn loves order."
        ],
        "rules": "If someone hates clutter and loves order, then they value simplicity.",
        "conclusion": "Addilynn values simplicity."
      },
      {
        "facts": [
          "Addilynn values simplicity.",
          "Addilynn does not design elegantly."
        ],
        "rules": "Anyone who values simplicity either embraces minimalism or designs elegantly.",
        "conclusion": "Addilynn embraces minimalism."
      },
      {
        "facts": [
          "Addilynn embraces minimalism."
        ],
        "rules": "For all humans, if they embrace minimalism, then they live clutter-free.",
        "conclusion": "Addilynn lives clutter-free."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "values_elegance(Addilynn)",
          "¬creates_harmony(Addilynn)"
        ],
        "rules": "∀x (values_elegance(x) → (creates_harmony(x) ∨ curates_space(x)))",
        "conclusion": "curates_space(Addilynn)"
      },
      {
        "facts": [
          "curates_space(Addilynn)",
          "¬prioritizes_function(Addilynn)"
        ],
        "rules": "∀x (curates_space(x) → (prioritizes_function(x) ∨ loves_order(x)))",
        "conclusion": "loves_order(Addilynn)"
      },
      {
        "facts": [
          "hates_clutter(Addilynn)",
          "loves_order(Addilynn)"
        ],
        "rules": "∀x ((hates_clutter(x) ∧ loves_order(x)) → values_simplicity(x))",
        "conclusion": "values_simplicity(Addilynn)"
      },
      {
        "facts": [
          "values_simplicity(Addilynn)",
          "¬designs_elegantly(Addilynn)"
        ],
        "rules": "∀x (values_simplicity(x) → (embraces_minimalism(x) ∨ designs_elegantly(x)))",
        "conclusion": "embraces_minimalism(Addilynn)"
      },
      {
        "facts": [
          "embraces_minimalism(Addilynn)"
        ],
        "rules": "∀x (embraces_minimalism(x) → lives_clutter_free(x))",
        "conclusion": "lives_clutter_free(Addilynn)"
      }
    ],
    "conclusion": "Addilynn lives clutter-free.",
    "conclusion_fol": "lives_clutter_free(Addilynn)",
    "answer": "True",
    "context": [
      "Addilynn values elegance.",
      "Addilynn does not create harmony.",
      "Everyone who values elegance either creates harmony or curates their space (or both).",
      "Addilynn does not prioritize function.",
      "Anyone who curates their space either prioritizes function or loves order (or both).",
      "Addilynn hates clutter.",
      "If someone hates clutter and loves order, then they value simplicity.",
      "Addilynn does not design elegantly.",
      "Anyone who values simplicity either embraces minimalism or designs elegantly.",
      "For all humans, if they embrace minimalism, then they live clutter-free."
    ],
    "context_fol": [
      "values_elegance(Addilynn)",
      "¬creates_harmony(Addilynn)",
      "∀x (values_elegance(x) → (creates_harmony(x) ∨ curates_space(x)))",
      "¬prioritizes_function(Addilynn)",
      "∀x (curates_space(x) → (prioritizes_function(x) ∨ loves_order(x)))",
      "hates_clutter(Addilynn)",
      "∀x ((hates_clutter(x) ∧ loves_order(x)) → values_simplicity(x))",
      "¬designs_elegantly(Addilynn)",
      "∀x (values_simplicity(x) → (embraces_minimalism(x) ∨ designs_elegantly(x)))",
      "∀x (embraces_minimalism(x) → lives_clutter_free(x))"
    ],
    "background_story": "Addilynn was a brilliant architect who had always been fascinated by the concept of minimalism. Growing up in a cluttered household, she found solace in designing spaces that were sleek, simple, and functional. As she began her career, Addilynn made it her mission to create homes and buildings that not only minimized waste but also promoted a sense of calm and clarity. Her designs often featured large windows, monochromatic color schemes, and multi-purpose furniture. Addilynn's own living space was a testament to her philosophy, with every item carefully curated to serve a purpose. By minimizing the unnecessary, she found that she could focus on what truly mattered: creativity, relationships, and personal growth. Addilynn's work inspired others to rethink their relationship with stuff and embrace the beauty of simplicity.",
    "name": "Addilynn",
    "keyword": "minimized",
    "subject_category": "human"
  },
  {
    "facts": [
      "Jaxx is true to herself.",
      "Jaxx does not live a fulfilling life.",
      "Jaxx is an artist.",
      "Jaxx has passion.",
      "Jaxx seeks challenge."
    ],
    "facts_fol": [
      "be_true(Jaxx)",
      "¬live_fully(Jaxx)",
      "is_artist(Jaxx)",
      "has_passion(Jaxx)",
      "seeks_challenge(Jaxx)"
    ],
    "rules": [
      "If Jaxx is authentic, then she either inspires others or finds happiness, but not both.",
      "Jaxx either expresses herself freely or is authentic, but not both.",
      "Everyone who is true to themselves either finds happiness or lives a fulfilling life.",
      "If Jaxx is an artist, then she either takes risks or expresses herself freely, but not both.",
      "For all humans, if they have passion and seek challenge, then they take risks."
    ],
    "rules_fol": [
      "authentic(Jaxx) → (inspire_others(Jaxx) ⊕ find_happiness(Jaxx))",
      "express_freely(Jaxx) ⊕ authentic(Jaxx)",
      "∀x (be_true(x) → (find_happiness(x) ∨ live_fully(x)))",
      "is_artist(Jaxx) → (takes_risks(Jaxx) ⊕ express_freely(Jaxx))",
      "∀x ((has_passion(x) ∧ seeks_challenge(x)) → takes_risks(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Anyone who embraces themselves is authentic.",
      "If Jaxx loves deeply and lives openly, then she finds happiness.",
      "If Jaxx is confident, then she either expresses herself freely or is vulnerable, but not both.",
      "Anyone who thinks creatively or acts boldly takes risks."
    ],
    "distracting_rules_fol": [
      "∀x (embraces_self(x) → authentic(x))",
      "(loves_deeply(Jaxx) ∧ lives_openly(Jaxx)) → find_happiness(Jaxx)",
      "is_confident(Jaxx) → (express_freely(Jaxx) ⊕ is_vulnerable(Jaxx))",
      "∀x ((thinks_creatively(x) ∨ acts_boldly(x)) → takes_risks(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Jaxx has passion.",
          "Jaxx seeks challenge."
        ],
        "rules": "For all humans, if they have passion and seek challenge, then they take risks.",
        "conclusion": "Jaxx takes risks."
      },
      {
        "facts": [
          "Jaxx is an artist.",
          "Jaxx takes risks."
        ],
        "rules": "If Jaxx is an artist, then she either takes risks or expresses herself freely, but not both.",
        "conclusion": "Jaxx does not express herself freely."
      },
      {
        "facts": [
          "Jaxx is true to herself.",
          "Jaxx does not live a fulfilling life."
        ],
        "rules": "Everyone who is true to themselves either finds happiness or lives a fulfilling life.",
        "conclusion": "Jaxx finds happiness."
      },
      {
        "facts": [
          "Jaxx does not express herself freely."
        ],
        "rules": "Jaxx either expresses herself freely or is authentic, but not both.",
        "conclusion": "Jaxx is authentic."
      },
      {
        "facts": [
          "Jaxx is authentic.",
          "Jaxx finds happiness."
        ],
        "rules": "If Jaxx is authentic, then she either inspires others or finds happiness, but not both.",
        "conclusion": "Jaxx inspires others."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "has_passion(Jaxx)",
          "seeks_challenge(Jaxx)"
        ],
        "rules": "∀x ((has_passion(x) ∧ seeks_challenge(x)) → takes_risks(x))",
        "conclusion": "takes_risks(Jaxx)"
      },
      {
        "facts": [
          "is_artist(Jaxx)",
          "takes_risks(Jaxx)"
        ],
        "rules": "is_artist(Jaxx) → (takes_risks(Jaxx) ⊕ express_freely(Jaxx))",
        "conclusion": "¬express_freely(Jaxx)"
      },
      {
        "facts": [
          "be_true(Jaxx)",
          "¬live_fully(Jaxx)"
        ],
        "rules": "∀x (be_true(x) → (find_happiness(x) ∨ live_fully(x)))",
        "conclusion": "find_happiness(Jaxx)"
      },
      {
        "facts": [
          "¬express_freely(Jaxx)"
        ],
        "rules": "express_freely(Jaxx) ⊕ authentic(Jaxx)",
        "conclusion": "authentic(Jaxx)"
      },
      {
        "facts": [
          "authentic(Jaxx)",
          "find_happiness(Jaxx)"
        ],
        "rules": "authentic(Jaxx) → (inspire_others(Jaxx) ⊕ find_happiness(Jaxx))",
        "conclusion": "inspire_others(Jaxx)"
      }
    ],
    "conclusion": "Jaxx inspires others.",
    "conclusion_fol": "inspire_others(Jaxx)",
    "answer": "False",
    "context": [
      "Jaxx has passion.",
      "Jaxx seeks challenge.",
      "For all humans, if they have passion and seek challenge, then they take risks.",
      "Jaxx is an artist.",
      "If Jaxx is an artist, then she either takes risks or expresses herself freely, but not both.",
      "Jaxx is true to herself.",
      "Jaxx does not live a fulfilling life.",
      "Everyone who is true to themselves either finds happiness or lives a fulfilling life.",
      "Jaxx either expresses herself freely or is authentic, but not both.",
      "If Jaxx is authentic, then she either inspires others or finds happiness, but not both."
    ],
    "context_fol": [
      "has_passion(Jaxx)",
      "seeks_challenge(Jaxx)",
      "∀x ((has_passion(x) ∧ seeks_challenge(x)) → takes_risks(x))",
      "is_artist(Jaxx)",
      "is_artist(Jaxx) → (takes_risks(Jaxx) ⊕ express_freely(Jaxx))",
      "be_true(Jaxx)",
      "¬live_fully(Jaxx)",
      "∀x (be_true(x) → (find_happiness(x) ∨ live_fully(x)))",
      "express_freely(Jaxx) ⊕ authentic(Jaxx)",
      "authentic(Jaxx) → (inspire_others(Jaxx) ⊕ find_happiness(Jaxx))"
    ],
    "background_story": "Jaxx was a free-spirited artist who had always been true to herself. Growing up in a small town, she faced challenges in expressing her identity, but she never let that suppress her authenticity. As she discovered her lesbian identity, Jaxx found solace in the local LGBTQ+ community, where she met her partner, Alex. Together, they traveled the world, capturing their love and adventures through Jaxx's lens as a photographer. Their love story was one of courage, acceptance, and the beauty of embracing one's true self. Jaxx's art became a symbol of hope and inspiration for many young women struggling to find their place in the world. She and Alex proved that love knows no bounds and that being true to oneself is the greatest freedom of all.",
    "name": "Jaxx",
    "keyword": "lesbian",
    "subject_category": "human"
  },
  {
    "facts": [
      "Khloe does not enjoy food.",
      "Khloe takes risks."
    ],
    "facts_fol": [
      "¬enjoys_food(Khloe)",
      "takes_risks(Khloe)"
    ],
    "rules": [
      "Khloe is either adventurous or cautious, but not both.",
      "Anyone who explores is adventurous.",
      "Anyone who seeks thrills or loves to travel will explore.",
      "Khloe either enjoys food or loves to travel, but not necessarily both.",
      "If Khloe takes risks, then she seeks thrills."
    ],
    "rules_fol": [
      "adventurous(Khloe) ⊕ cautious(Khloe)",
      "∀x (explores(x) → adventurous(x))",
      "∀x ((seeks_thrills(x) ∨ loves_travel(x)) → explores(x))",
      "enjoys_food(Khloe) ⊕ loves_travel(Khloe)",
      "takes_risks(Khloe) → seeks_thrills(Khloe)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Khloe either tries new things or meets new people (but not both), then she is adventurous.",
      "If Khloe either visits temples or discovers art (but not both), then she explores the city.",
      "If Khloe speaks multiple languages and visits different cities, then she loves to travel.",
      "If Khloe has a curious mind, then she meets new people and seeks thrills."
    ],
    "distracting_rules_fol": [
      "(tries_new_things(Khloe) ⊕ meets_new_people(Khloe)) → adventurous(Khloe)",
      "(visits_temples(Khloe) ⊕ discovers_art(Khloe)) → explores(Khloe)",
      "(speaks_languages(Khloe) ∧ visits_cities(Khloe)) → loves_travel(Khloe)",
      "curious_mind(Khloe) → (meets_new_people(Khloe) ∧ seeks_thrills(Khloe))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Khloe takes risks."
        ],
        "rules": "If Khloe takes risks, then she seeks thrills.",
        "conclusion": "Khloe seeks thrills."
      },
      {
        "facts": [
          "Khloe does not enjoy food."
        ],
        "rules": "Khloe either enjoys food or loves to travel, but not necessarily both.",
        "conclusion": "Khloe loves to travel."
      },
      {
        "facts": [
          "Khloe seeks thrills.",
          "Khloe loves to travel."
        ],
        "rules": "Anyone who seeks thrills or loves to travel will explore.",
        "conclusion": "Khloe explores."
      },
      {
        "facts": [
          "Khloe explores."
        ],
        "rules": "Anyone who explores is adventurous.",
        "conclusion": "Khloe is adventurous."
      },
      {
        "facts": [
          "Khloe is adventurous."
        ],
        "rules": "Khloe is either adventurous or cautious, but not both.",
        "conclusion": "Khloe is cautious."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "takes_risks(Khloe)"
        ],
        "rules": "takes_risks(Khloe) → seeks_thrills(Khloe)",
        "conclusion": "seeks_thrills(Khloe)"
      },
      {
        "facts": [
          "¬enjoys_food(Khloe)"
        ],
        "rules": "enjoys_food(Khloe) ⊕ loves_travel(Khloe)",
        "conclusion": "loves_travel(Khloe)"
      },
      {
        "facts": [
          "seeks_thrills(Khloe)",
          "loves_travel(Khloe)"
        ],
        "rules": "∀x ((seeks_thrills(x) ∨ loves_travel(x)) → explores(x))",
        "conclusion": "explores(Khloe)"
      },
      {
        "facts": [
          "explores(Khloe)"
        ],
        "rules": "∀x (explores(x) → adventurous(x))",
        "conclusion": "adventurous(Khloe)"
      },
      {
        "facts": [
          "adventurous(Khloe)"
        ],
        "rules": "adventurous(Khloe) ⊕ cautious(Khloe)",
        "conclusion": "cautious(Khloe)"
      }
    ],
    "conclusion": "Khloe is cautious.",
    "conclusion_fol": "cautious(Khloe)",
    "answer": "False",
    "context": [
      "Khloe takes risks.",
      "If Khloe takes risks, then she seeks thrills.",
      "Khloe does not enjoy food.",
      "Khloe either enjoys food or loves to travel, but not necessarily both.",
      "Anyone who seeks thrills or loves to travel will explore.",
      "Anyone who explores is adventurous.",
      "Khloe is either adventurous or cautious, but not both."
    ],
    "context_fol": [
      "takes_risks(Khloe)",
      "takes_risks(Khloe) → seeks_thrills(Khloe)",
      "¬enjoys_food(Khloe)",
      "enjoys_food(Khloe) ⊕ loves_travel(Khloe)",
      "∀x ((seeks_thrills(x) ∨ loves_travel(x)) → explores(x))",
      "∀x (explores(x) → adventurous(x))",
      "adventurous(Khloe) ⊕ cautious(Khloe)"
    ],
    "background_story": "Khloe, a young and adventurous journalist, had always been fascinated by the vibrant culture of Beijing. She spent a year studying Mandarin and learning about the city's rich history. Finally, she landed a job at a local English-language newspaper in Beijing, where she immersed herself in the city's fast-paced lifestyle. Khloe's curiosity and love for exploration led her to discover hidden gems, from ancient temples to modern art districts. She wrote captivating stories about the city's contrasts, from traditional hutongs to sleek skyscrapers. As she delved deeper into the community, Khloe formed strong bonds with the locals, who appreciated her genuine interest in their customs and way of life. Her time in Beijing not only shaped her career but also left an indelible mark on her heart.",
    "name": "Khloe",
    "keyword": "beijing",
    "subject_category": "human"
  },
  {
    "facts": [
      "Sterling plays an instrument.",
      "Sterling does not love harmony.",
      "Sterling practices daily.",
      "Sterling seeks perfection.",
      "Sterling learns musical scores."
    ],
    "facts_fol": [
      "plays_instrument(Sterling)",
      "¬loves_harmony(Sterling)",
      "practices_daily(Sterling)",
      "seeks_perfection(Sterling)",
      "learns_scores(Sterling)"
    ],
    "rules": [
      "Sterling either plays an instrument or creates beautiful music.",
      "If Sterling either feels emotion or loves harmony (but not both), then he is passionate about music.",
      "If Sterling either practices daily or reads sheet music (but not both), then he is technically skilled.",
      "Sterling either seeks perfection in his music or feels emotion, but he cannot do both simultaneously.",
      "Anyone who learns musical scores will read sheet music."
    ],
    "rules_fol": [
      "plays_instrument(Sterling) ∨ create_beautiful_music(Sterling)",
      "(feels_emotion(Sterling) ⊕ loves_harmony(Sterling)) → passionate_about_music(Sterling)",
      "(practices_daily(Sterling) ⊕ reads_sheet(Sterling)) → technically_skilled(Sterling)",
      "seeks_perfection(Sterling) ⊕ feels_emotion(Sterling)",
      "∀x (learns_scores(x) → reads_sheet(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Sterling has vision or is inspired, then he can create beautiful music.",
      "If Sterling either composes songs or sings from the heart (but not both), then he is passionate about music.",
      "If Sterling dedicates his life to music, then he is technically skilled.",
      "If someone either values sentiment or resonates with depth (but not both), then they feel emotion.",
      "If Sterling studies music, then he either composes pieces or reads sheet music."
    ],
    "distracting_rules_fol": [
      "(has_vision(Sterling) ∨ is_inspired(Sterling)) → create_beautiful_music(Sterling)",
      "(composes_songs(Sterling) ⊕ sings_from_heart(Sterling)) → passionate_about_music(Sterling)",
      "dedicates_life(Sterling) → technically_skilled(Sterling)",
      "∀x ((values_sentiment(x) ⊕ resonates_depth(x)) → feels_emotion(x))",
      "studies_music(Sterling) → (composes_pieces(Sterling) ∨ reads_sheet(Sterling))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Sterling learns musical scores."
        ],
        "rules": "Anyone who learns musical scores will read sheet music.",
        "conclusion": "Sterling reads sheet music."
      },
      {
        "facts": [
          "Sterling seeks perfection."
        ],
        "rules": "Sterling either seeks perfection in his music or feels emotion, but he cannot do both simultaneously.",
        "conclusion": "Sterling does not feel emotion."
      },
      {
        "facts": [
          "Sterling practices daily.",
          "Sterling reads sheet music."
        ],
        "rules": "If Sterling either practices daily or reads sheet music (but not both), then he is technically skilled.",
        "conclusion": null
      },
      {
        "facts": [
          "Sterling does not feel emotion.",
          "Sterling does not love harmony."
        ],
        "rules": "If Sterling either feels emotion or loves harmony (but not both), then he is passionate about music.",
        "conclusion": null
      },
      {
        "facts": [
          "Sterling plays an instrument."
        ],
        "rules": "Sterling either plays an instrument or creates beautiful music.",
        "conclusion": null
      },
      {
        "facts": [],
        "rules": null,
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "learns_scores(Sterling)"
        ],
        "rules": "∀x (learns_scores(x) → reads_sheet(x))",
        "conclusion": "reads_sheet(Sterling)"
      },
      {
        "facts": [
          "seeks_perfection(Sterling)"
        ],
        "rules": "seeks_perfection(Sterling) ⊕ feels_emotion(Sterling)",
        "conclusion": "¬feels_emotion(Sterling)"
      },
      {
        "facts": [
          "practices_daily(Sterling)",
          "reads_sheet(Sterling)"
        ],
        "rules": "(practices_daily(Sterling) ⊕ reads_sheet(Sterling)) → technically_skilled(Sterling)",
        "conclusion": null
      },
      {
        "facts": [
          "¬feels_emotion(Sterling)",
          "¬loves_harmony(Sterling)"
        ],
        "rules": "(feels_emotion(Sterling) ⊕ loves_harmony(Sterling)) → passionate_about_music(Sterling)",
        "conclusion": null
      },
      {
        "facts": [
          "plays_instrument(Sterling)"
        ],
        "rules": "plays_instrument(Sterling) ∨ create_beautiful_music(Sterling)",
        "conclusion": null
      },
      {
        "facts": [],
        "rules": null,
        "conclusion": null
      }
    ],
    "conclusion": "If Sterling is passionate about music or technically skilled (or both), then he creates beautiful music.",
    "conclusion_fol": "(passionate_about_music(Sterling) ∨ technically_skilled(Sterling)) → create_beautiful_music(Sterling)",
    "answer": "Uncertain",
    "context": [
      "Sterling learns musical scores.",
      "Anyone who learns musical scores will read sheet music.",
      "Sterling seeks perfection.",
      "Sterling either seeks perfection in his music or feels emotion, but he cannot do both simultaneously.",
      "Sterling practices daily.",
      "If Sterling either practices daily or reads sheet music (but not both), then he is technically skilled.",
      "Sterling does not love harmony.",
      "If Sterling either feels emotion or loves harmony (but not both), then he is passionate about music.",
      "Sterling plays an instrument.",
      "Sterling either plays an instrument or creates beautiful music."
    ],
    "context_fol": [
      "learns_scores(Sterling)",
      "∀x (learns_scores(x) → reads_sheet(x))",
      "seeks_perfection(Sterling)",
      "seeks_perfection(Sterling) ⊕ feels_emotion(Sterling)",
      "practices_daily(Sterling)",
      "(practices_daily(Sterling) ⊕ reads_sheet(Sterling)) → technically_skilled(Sterling)",
      "¬loves_harmony(Sterling)",
      "(feels_emotion(Sterling) ⊕ loves_harmony(Sterling)) → passionate_about_music(Sterling)",
      "plays_instrument(Sterling)",
      "plays_instrument(Sterling) ∨ create_beautiful_music(Sterling)"
    ],
    "background_story": "Sterling was a renowned musician, known for his technical proficiency on the piano. However, despite his impressive skills, he had become dissonant with his own music. The notes that once flowed from his heart now felt hollow, lacking the emotional depth that truly great music requires. His performances, though flawless, were criticized for being disconnected and lacking soul. Sterling's dissonance with his art stemmed from a creative block that had been plaguing him for months. He felt like he was just going through the motions, unable to tap into the passion that once drove him to create. As he struggled to find his muse again, Sterling began to question whether he still had a place in the world of music, or if his sound had simply fallen out of tune with his own desires.",
    "name": "Sterling",
    "keyword": "dissonate",
    "subject_category": "human"
  },
  {
    "facts": [
      "Amiri enjoys landscaping.",
      "Amiri loves nature.",
      "Amiri knows botany.",
      "Amiri does not experiment with plants.",
      "Amiri focuses on details."
    ],
    "facts_fol": [
      "enjoys_landscaping(Amiri)",
      "loves_nature(Amiri)",
      "knows_botany(Amiri)",
      "¬experiment_plants(Amiri)",
      "focus_on_details(Amiri)"
    ],
    "rules": [
      "If Amiri appreciates kniphofia or values unique designs (or both), then he creates breathtaking gardens.",
      "If Amiri has a green thumb, then he either enjoys landscaping or appreciates kniphofia, but not both.",
      "All gardeners who love nature and know botany have a green thumb.",
      "If Amiri experiments with plants or focuses on details, then he values unique designs."
    ],
    "rules_fol": [
      "(appreciate_kniphofia(Amiri) ∨ value_unique_designs(Amiri)) → create_breathtaking_gardens(Amiri)",
      "has_green_thumb(Amiri) → (enjoys_landscaping(Amiri) ⊕ appreciate_kniphofia(Amiri))",
      "∀x (loves_nature(x) → (knows_botany(x) ∧ has_green_thumb(x)))",
      "(experiment_plants(Amiri) ∨ focus_on_details(Amiri)) → value_unique_designs(Amiri)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Amiri designs innovative spaces, then he either appreciates kniphofia or collects rare flowers (or both).",
      "If Amiri nurtures plants, then he has a green thumb.",
      "If Amiri respects nature, then he either enjoys color or values unique designs, but not both."
    ],
    "distracting_rules_fol": [
      "design_innovative_spaces(Amiri) → (appreciate_kniphofia(Amiri) ∨ collect_rare_flowers(Amiri))",
      "nurtures_plants(Amiri) → has_green_thumb(Amiri)",
      "respect_nature(Amiri) → (enjoy_color(Amiri) ⊕ value_unique_designs(Amiri))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Amiri does not experiment with plants.",
          "Amiri focuses on details."
        ],
        "rules": "If Amiri experiments with plants or focuses on details, then he values unique designs.",
        "conclusion": "Amiri values unique designs."
      },
      {
        "facts": [
          "Amiri loves nature.",
          "Amiri knows botany."
        ],
        "rules": "All gardeners who love nature and know botany have a green thumb.",
        "conclusion": "Amiri has a green thumb."
      },
      {
        "facts": [
          "Amiri has a green thumb.",
          "Amiri enjoys landscaping."
        ],
        "rules": "If Amiri has a green thumb, then he either enjoys landscaping or appreciates kniphofia, but not both.",
        "conclusion": "Amiri does not appreciate kniphofia."
      },
      {
        "facts": [
          "Amiri does not appreciate kniphofia.",
          "Amiri values unique designs."
        ],
        "rules": "If Amiri appreciates kniphofia or values unique designs (or both), then he creates breathtaking gardens.",
        "conclusion": "Amiri creates breathtaking gardens."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬experiment_plants(Amiri)",
          "focus_on_details(Amiri)"
        ],
        "rules": "(experiment_plants(Amiri) ∨ focus_on_details(Amiri)) → value_unique_designs(Amiri)",
        "conclusion": "value_unique_designs(Amiri)"
      },
      {
        "facts": [
          "loves_nature(Amiri)",
          "knows_botany(Amiri)"
        ],
        "rules": "∀x (loves_nature(x) → (knows_botany(x) ∧ has_green_thumb(x)))",
        "conclusion": "has_green_thumb(Amiri)"
      },
      {
        "facts": [
          "has_green_thumb(Amiri)",
          "enjoys_landscaping(Amiri)"
        ],
        "rules": "has_green_thumb(Amiri) → (enjoys_landscaping(Amiri) ⊕ appreciate_kniphofia(Amiri))",
        "conclusion": "¬appreciate_kniphofia(Amiri)"
      },
      {
        "facts": [
          "¬appreciate_kniphofia(Amiri)",
          "value_unique_designs(Amiri)"
        ],
        "rules": "(appreciate_kniphofia(Amiri) ∨ value_unique_designs(Amiri)) → create_breathtaking_gardens(Amiri)",
        "conclusion": "create_breathtaking_gardens(Amiri)"
      }
    ],
    "conclusion": "Amiri creates breathtaking gardens.",
    "conclusion_fol": "create_breathtaking_gardens(Amiri)",
    "answer": "True",
    "context": [
      "Amiri does not experiment with plants.",
      "Amiri focuses on details.",
      "If Amiri experiments with plants or focuses on details, then he values unique designs.",
      "Amiri loves nature.",
      "Amiri knows botany.",
      "All gardeners who love nature and know botany have a green thumb.",
      "Amiri enjoys landscaping.",
      "If Amiri has a green thumb, then he either enjoys landscaping or appreciates kniphofia, but not both.",
      "If Amiri appreciates kniphofia or values unique designs (or both), then he creates breathtaking gardens."
    ],
    "context_fol": [
      "¬experiment_plants(Amiri)",
      "focus_on_details(Amiri)",
      "(experiment_plants(Amiri) ∨ focus_on_details(Amiri)) → value_unique_designs(Amiri)",
      "loves_nature(Amiri)",
      "knows_botany(Amiri)",
      "∀x (loves_nature(x) → (knows_botany(x) ∧ has_green_thumb(x)))",
      "enjoys_landscaping(Amiri)",
      "has_green_thumb(Amiri) → (enjoys_landscaping(Amiri) ⊕ appreciate_kniphofia(Amiri))",
      "(appreciate_kniphofia(Amiri) ∨ value_unique_designs(Amiri)) → create_breathtaking_gardens(Amiri)"
    ],
    "background_story": "Amiri was a gentle soul with a green thumb, renowned for his breathtaking garden designs. Among his favorite flowers was the kniphofia, also known as the red hot poker, which he admired for its vibrant, torch-like blooms. Amiri spent years perfecting his craft, experimenting with various combinations of plants and colors. His garden, aptly named 'Ember's Glow', featured a stunning array of kniphofia, carefully arranged to resemble a sunset over the African savannah. As visitors wandered through the garden, they were mesmerized by the kniphofia's majestic spikes, which seemed to dance in the breeze. Amiri's love for the kniphofia was contagious, inspiring countless gardening enthusiasts to incorporate the striking flower into their own designs.",
    "name": "Amiri",
    "keyword": "kniphofia",
    "subject_category": "gardener"
  },
  {
    "facts": [
      "Nola works hard.",
      "Nola is an engineer.",
      "Nola has expertise."
    ],
    "facts_fol": [
      "works_hard(Nola)",
      "is_engineer(Nola)",
      "has_expertise(Nola)"
    ],
    "rules": [
      "If Nola is detail-oriented or highly skilled (or both), then she is reliable.",
      "Nola is either highly skilled or works hard, but not necessarily both.",
      "Nola is either precise or detail-oriented, but not necessarily both.",
      "A person either uses tools or is precise, but not necessarily both.",
      "If Nola is an engineer, then she either uses tools or has expertise, but not both."
    ],
    "rules_fol": [
      "(detail_oriented(Nola) ∨ highly_skilled(Nola)) → reliable(Nola)",
      "works_hard(Nola) ⊕ highly_skilled(Nola)",
      "is_precise(Nola) ⊕ detail_oriented(Nola)",
      "∀x (uses_tools(x) ⊕ is_precise(x))",
      "is_engineer(Nola) → (uses_tools(Nola) ⊕ has_expertise(Nola))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "For all humans, if they solve problems and learn quickly, then they are highly skilled.",
      "If Nola either measures twice or checks thoroughly (but not both), then she is detail-oriented.",
      "Anyone who measures carefully is precise.",
      "If someone measures parts and checks quality, then they use tools."
    ],
    "distracting_rules_fol": [
      "∀x ((solves_problems(x) ∧ learns_quickly(x)) → highly_skilled(x))",
      "(measures_twice(Nola) ⊕ checks_thoroughly(Nola)) → detail_oriented(Nola)",
      "∀x (measures_carefully(x) → is_precise(x))",
      "∀x ((measures_parts(x) ∧ checks_quality(x)) → uses_tools(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Nola is an engineer.",
          "Nola has expertise."
        ],
        "rules": "If Nola is an engineer, then she either uses tools or has expertise, but not both.",
        "conclusion": "Nola does not use tools."
      },
      {
        "facts": [
          "Nola does not use tools."
        ],
        "rules": "A person either uses tools or is precise, but not necessarily both.",
        "conclusion": "Nola is precise."
      },
      {
        "facts": [
          "Nola is precise."
        ],
        "rules": "Nola is either precise or detail-oriented, but not necessarily both.",
        "conclusion": "Nola is not detail-oriented."
      },
      {
        "facts": [
          "Nola works hard."
        ],
        "rules": "Nola is either highly skilled or works hard, but not necessarily both.",
        "conclusion": "Nola is not highly skilled."
      },
      {
        "facts": [
          "Nola is not detail-oriented.",
          "Nola is not highly skilled."
        ],
        "rules": "If Nola is detail-oriented or highly skilled (or both), then she is reliable.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "is_engineer(Nola)",
          "has_expertise(Nola)"
        ],
        "rules": "is_engineer(Nola) → (uses_tools(Nola) ⊕ has_expertise(Nola))",
        "conclusion": "¬uses_tools(Nola)"
      },
      {
        "facts": [
          "¬uses_tools(Nola)"
        ],
        "rules": "∀x (uses_tools(x) ⊕ is_precise(x))",
        "conclusion": "is_precise(Nola)"
      },
      {
        "facts": [
          "is_precise(Nola)"
        ],
        "rules": "is_precise(Nola) ⊕ detail_oriented(Nola)",
        "conclusion": "¬detail_oriented(Nola)"
      },
      {
        "facts": [
          "works_hard(Nola)"
        ],
        "rules": "works_hard(Nola) ⊕ highly_skilled(Nola)",
        "conclusion": "¬highly_skilled(Nola)"
      },
      {
        "facts": [
          "¬detail_oriented(Nola)",
          "¬highly_skilled(Nola)"
        ],
        "rules": "(detail_oriented(Nola) ∨ highly_skilled(Nola)) → reliable(Nola)",
        "conclusion": null
      }
    ],
    "conclusion": "Nola is reliable.",
    "conclusion_fol": "reliable(Nola)",
    "answer": "Uncertain",
    "context": [
      "Nola is an engineer.",
      "Nola has expertise.",
      "If Nola is an engineer, then she either uses tools or has expertise, but not both.",
      "A person either uses tools or is precise, but not necessarily both.",
      "Nola is either precise or detail-oriented, but not necessarily both.",
      "Nola works hard.",
      "Nola is either highly skilled or works hard, but not necessarily both.",
      "If Nola is detail-oriented or highly skilled (or both), then she is reliable."
    ],
    "context_fol": [
      "is_engineer(Nola)",
      "has_expertise(Nola)",
      "is_engineer(Nola) → (uses_tools(Nola) ⊕ has_expertise(Nola))",
      "∀x (uses_tools(x) ⊕ is_precise(x))",
      "is_precise(Nola) ⊕ detail_oriented(Nola)",
      "works_hard(Nola)",
      "works_hard(Nola) ⊕ highly_skilled(Nola)",
      "(detail_oriented(Nola) ∨ highly_skilled(Nola)) → reliable(Nola)"
    ],
    "background_story": "Nola was a brilliant and meticulous engineer with a passion for precision. She spent most of her days in the factory, ensuring that every machine part met the highest standards of quality. Her trusty caliper was always by her side, a tool she used to measure even the smallest details with utmost accuracy. Nola's attention to detail and dedication to her work earned her the respect of her colleagues and the admiration of her superiors. One day, she discovered a critical flaw in a batch of components, which could have led to catastrophic failures. Thanks to Nola's sharp eye and her faithful caliper, the issue was caught and rectified, saving the company from a potential disaster. Her diligence and expertise made her an invaluable asset to the team.",
    "name": "Nola",
    "keyword": "caliper",
    "subject_category": "human"
  },
  {
    "facts": [
      "Sophia is an editor.",
      "Sophia does not design book covers.",
      "Sophia is curious."
    ],
    "facts_fol": [
      "is_editor(Sophia)",
      "¬design_covers(Sophia)",
      "curious(Sophia)"
    ],
    "rules": [
      "For all humans, if someone is a bookworm, then they either love reading or appreciate literature (or both).",
      "If Sophia writes stories, then she may not necessarily love reading, and if Sophia loves reading, then she may not necessarily write stories.",
      "If Sophia is an editor, then she is either a designer of book covers or a writer of stories, but not both.",
      "If Sophia is curious and values knowledge, then she is a bookworm."
    ],
    "rules_fol": [
      "∀x (bookworm(x) → (love_reading(x) ∨ appreciate_literature(x)))",
      "write_stories(Sophia) ⊕ love_reading(Sophia)",
      "is_editor(Sophia) → (design_covers(Sophia) ⊕ write_stories(Sophia))",
      "curious(Sophia) → (value_knowledge(Sophia) ∧ bookworm(Sophia))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If someone either collects books or joins bookclubs (but not both), then they love reading.",
      "Sophia either reads books or writes stories.",
      "If Sophia reads often, then she is a bookworm."
    ],
    "distracting_rules_fol": [
      "∀x ((collects_books(x) ⊕ joins_bookclubs(x)) → love_reading(x))",
      "reads_books(Sophia) ∨ write_stories(Sophia)",
      "read_often(Sophia) → bookworm(Sophia)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Sophia is curious."
        ],
        "rules": "If Sophia is curious and values knowledge, then she is a bookworm.",
        "conclusion": "Sophia is a bookworm."
      },
      {
        "facts": [
          "Sophia is an editor.",
          "Sophia does not design book covers."
        ],
        "rules": "If Sophia is an editor, then she is either a designer of book covers or a writer of stories, but not both.",
        "conclusion": "Sophia writes stories."
      },
      {
        "facts": [
          "Sophia writes stories."
        ],
        "rules": "If Sophia writes stories, then she may not necessarily love reading, and if Sophia loves reading, then she may not necessarily write stories.",
        "conclusion": "Sophia does not love reading."
      },
      {
        "facts": [
          "Sophia is a bookworm.",
          "Sophia does not love reading."
        ],
        "rules": "For all humans, if someone is a bookworm, then they either love reading or appreciate literature (or both).",
        "conclusion": "Sophia appreciates literature."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "curious(Sophia)"
        ],
        "rules": "curious(Sophia) → (value_knowledge(Sophia) ∧ bookworm(Sophia))",
        "conclusion": "bookworm(Sophia)"
      },
      {
        "facts": [
          "is_editor(Sophia)",
          "¬design_covers(Sophia)"
        ],
        "rules": "is_editor(Sophia) → (design_covers(Sophia) ⊕ write_stories(Sophia))",
        "conclusion": "write_stories(Sophia)"
      },
      {
        "facts": [
          "write_stories(Sophia)"
        ],
        "rules": "write_stories(Sophia) ⊕ love_reading(Sophia)",
        "conclusion": "¬love_reading(Sophia)"
      },
      {
        "facts": [
          "bookworm(Sophia)",
          "¬love_reading(Sophia)"
        ],
        "rules": "∀x (bookworm(x) → (love_reading(x) ∨ appreciate_literature(x)))",
        "conclusion": "appreciate_literature(Sophia)"
      }
    ],
    "conclusion": "Sophia appreciates literature.",
    "conclusion_fol": "appreciate_literature(Sophia)",
    "answer": "True",
    "context": [
      "Sophia is curious.",
      "If Sophia is curious and values knowledge, then she is a bookworm.",
      "Sophia is an editor.",
      "Sophia does not design book covers.",
      "If Sophia is an editor, then she is either a designer of book covers or a writer of stories, but not both.",
      "If Sophia writes stories, then she may not necessarily love reading, and if Sophia loves reading, then she may not necessarily write stories.",
      "For all humans, if someone is a bookworm, then they either love reading or appreciate literature (or both)."
    ],
    "context_fol": [
      "curious(Sophia)",
      "curious(Sophia) → (value_knowledge(Sophia) ∧ bookworm(Sophia))",
      "is_editor(Sophia)",
      "¬design_covers(Sophia)",
      "is_editor(Sophia) → (design_covers(Sophia) ⊕ write_stories(Sophia))",
      "write_stories(Sophia) ⊕ love_reading(Sophia)",
      "∀x (bookworm(x) → (love_reading(x) ∨ appreciate_literature(x)))"
    ],
    "background_story": "Sophia was a bookworm who read avidly, devouring novels of all genres. Her love affair with literature began when she stumbled upon a dusty old bookstore in her neighborhood. The owner, noticing her fascination with the shelves, introduced her to the works of classic authors. Sophia's curiosity was piqued, and she spent every spare moment reading avidly, exploring worlds and meeting characters that became her closest friends. As she grew older, Sophia's passion for reading only intensified, leading her to pursue a career in editing and publishing. She worked tirelessly to promote literacy and make great literature accessible to everyone, inspiring a new generation of readers to explore the magic of words.",
    "name": "Sophia",
    "keyword": "avidly",
    "subject_category": "human"
  },
  {
    "facts": [
      "Naya classifies species.",
      "Naya collects samples.",
      "Naya raises awareness about the importance of conservation.",
      "Naya is a botanist.",
      "Naya is a scientist.",
      "Naya does not explore wildlife."
    ],
    "facts_fol": [
      "classify_species(Naya)",
      "collect_samples(Naya)",
      "raise_awareness(Naya)",
      "is_botanist(Naya)",
      "is_scientist(Naya)",
      "¬explore_wildlife(Naya)"
    ],
    "rules": [
      "If Naya either collects samples or classifies species (but not both), then she studies plants.",
      "Anyone who researches ecosystems or protects habitats contributes to conservation.",
      "A person either raises awareness about environmental issues or protects habitats, but not necessarily both.",
      "If Naya is a botanist, then she either preserves biodiversity or researches ecosystems, but not both.",
      "If Naya is a scientist, then she either explores wildlife or preserves biodiversity, but not both."
    ],
    "rules_fol": [
      "(collect_samples(Naya) ⊕ classify_species(Naya)) → study_plants(Naya)",
      "∀x ((research_ecosystem(x) ∨ protect_habitat(x)) → contribute_to_conservation(x))",
      "∀x (raise_awareness(x) ⊕ protect_habitat(x))",
      "is_botanist(Naya) → (preserve_biodiversity(Naya) ⊕ research_ecosystem(Naya))",
      "is_scientist(Naya) → (explore_wildlife(Naya) ⊕ preserve_biodiversity(Naya))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Naya loves nature, then she will study plants.",
      "If Naya explores nature, then she either discovers new species or contributes to conservation.",
      "If Naya defends nature, then she either makes discoveries or protects habitats, but not both.",
      "Anyone who explores the jungle or documents nature can research ecosystems.",
      "If Naya either saves trees or defends wildlife (but not both), then she preserves biodiversity."
    ],
    "distracting_rules_fol": [
      "love_nature(Naya) → study_plants(Naya)",
      "explore_nature(Naya) → (discover_new_species(Naya) ∨ contribute_to_conservation(Naya))",
      "defend_nature(Naya) → (make_discovery(Naya) ⊕ protect_habitat(Naya))",
      "∀x ((explore_jungle(x) ∨ document_nature(x)) → research_ecosystem(x))",
      "(save_trees(Naya) ⊕ defend_wildlife(Naya)) → preserve_biodiversity(Naya)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Naya is a scientist.",
          "Naya does not explore wildlife."
        ],
        "rules": "If Naya is a scientist, then she either explores wildlife or preserves biodiversity, but not both.",
        "conclusion": "Naya preserves biodiversity."
      },
      {
        "facts": [
          "Naya is a botanist.",
          "Naya preserves biodiversity."
        ],
        "rules": "If Naya is a botanist, then she either preserves biodiversity or researches ecosystems, but not both.",
        "conclusion": "Naya does not research ecosystems."
      },
      {
        "facts": [
          "Naya raises awareness about the importance of conservation."
        ],
        "rules": "A person either raises awareness about environmental issues or protects habitats, but not necessarily both.",
        "conclusion": "Naya does not protect habitats."
      },
      {
        "facts": [
          "Naya does not research ecosystems.",
          "Naya does not protect habitats."
        ],
        "rules": "Anyone who researches ecosystems or protects habitats contributes to conservation.",
        "conclusion": null
      },
      {
        "facts": [
          "Naya collects samples.",
          "Naya classifies species."
        ],
        "rules": "If Naya either collects samples or classifies species (but not both), then she studies plants.",
        "conclusion": null
      },
      {
        "facts": [],
        "rules": null,
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "is_scientist(Naya)",
          "¬explore_wildlife(Naya)"
        ],
        "rules": "is_scientist(Naya) → (explore_wildlife(Naya) ⊕ preserve_biodiversity(Naya))",
        "conclusion": "preserve_biodiversity(Naya)"
      },
      {
        "facts": [
          "is_botanist(Naya)",
          "preserve_biodiversity(Naya)"
        ],
        "rules": "is_botanist(Naya) → (preserve_biodiversity(Naya) ⊕ research_ecosystem(Naya))",
        "conclusion": "¬research_ecosystem(Naya)"
      },
      {
        "facts": [
          "raise_awareness(Naya)"
        ],
        "rules": "∀x (raise_awareness(x) ⊕ protect_habitat(x))",
        "conclusion": "¬protect_habitat(Naya)"
      },
      {
        "facts": [
          "¬research_ecosystem(Naya)",
          "¬protect_habitat(Naya)"
        ],
        "rules": "∀x ((research_ecosystem(x) ∨ protect_habitat(x)) → contribute_to_conservation(x))",
        "conclusion": null
      },
      {
        "facts": [
          "collect_samples(Naya)",
          "classify_species(Naya)"
        ],
        "rules": "(collect_samples(Naya) ⊕ classify_species(Naya)) → study_plants(Naya)",
        "conclusion": null
      },
      {
        "facts": [],
        "rules": null,
        "conclusion": null
      }
    ],
    "conclusion": "If Naya studies plants, then she contributes to conservation.",
    "conclusion_fol": "study_plants(Naya) → contribute_to_conservation(Naya)",
    "answer": "Uncertain",
    "context": [
      "Naya is a scientist.",
      "Naya does not explore wildlife.",
      "If Naya is a scientist, then she either explores wildlife or preserves biodiversity, but not both.",
      "Naya is a botanist.",
      "If Naya is a botanist, then she either preserves biodiversity or researches ecosystems, but not both.",
      "Naya raises awareness about the importance of conservation.",
      "A person either raises awareness about environmental issues or protects habitats, but not necessarily both.",
      "Anyone who researches ecosystems or protects habitats contributes to conservation.",
      "Naya collects samples.",
      "Naya classifies species.",
      "If Naya either collects samples or classifies species (but not both), then she studies plants."
    ],
    "context_fol": [
      "is_scientist(Naya)",
      "¬explore_wildlife(Naya)",
      "is_scientist(Naya) → (explore_wildlife(Naya) ⊕ preserve_biodiversity(Naya))",
      "is_botanist(Naya)",
      "is_botanist(Naya) → (preserve_biodiversity(Naya) ⊕ research_ecosystem(Naya))",
      "raise_awareness(Naya)",
      "∀x (raise_awareness(x) ⊕ protect_habitat(x))",
      "∀x ((research_ecosystem(x) ∨ protect_habitat(x)) → contribute_to_conservation(x))",
      "collect_samples(Naya)",
      "classify_species(Naya)",
      "(collect_samples(Naya) ⊕ classify_species(Naya)) → study_plants(Naya)"
    ],
    "background_story": "Naya was a skilled botanist with a passion for rare and exotic plants. Her latest obsession was the Triplochiton scleroxylon, a majestic African tree known for its beautiful wood and medicinal properties. Naya embarked on an expedition to the dense forests of West Africa to study the Triplochiton in its natural habitat. As she trekked through the jungle, she discovered a hidden grove of these magnificent trees, their trunks towering above her. Naya spent weeks researching and documenting the Triplochiton, learning about its unique characteristics and the vital role it played in the ecosystem. Her findings contributed significantly to the conservation efforts of this incredible species, earning her international recognition in the botanical community.",
    "name": "Naya",
    "keyword": "triplochiton",
    "subject_category": "human"
  },
  {
    "facts": [
      "Grace does not enjoy games.",
      "Grace is creative.",
      "Grace analyzes data."
    ],
    "facts_fol": [
      "¬enjoys_games(Grace)",
      "is_creative(Grace)",
      "analyzes_data(Grace)"
    ],
    "rules": [
      "For every human, they are either a puzzle solver or a non-puzzle solver, but not both.",
      "If Grace is patient, then she is either a puzzle solver or artistic, but not both.",
      "Grace enjoys games or is patient.",
      "If Grace is creative, then she is either artistic or logical, but not both.",
      "Anyone who thinks critically or analyzes data is logical."
    ],
    "rules_fol": [
      "∀x (puzzle_solver(x) ⊕ non_puzzle_solver(x))",
      "is_patient(Grace) → (puzzle_solver(Grace) ⊕ is_artistic(Grace))",
      "enjoys_games(Grace) ∨ is_patient(Grace)",
      "is_creative(Grace) → (is_artistic(Grace) ⊕ is_logical(Grace))",
      "∀x ((thinks_critically(x) ∨ analyzes_data(x)) → is_logical(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Grace likes challenges, then she is either a puzzle solver or someone who seeks order.",
      "If Grace likes challenges, then she is either patient or methodical, but not both.",
      "If Grace loves challenges, then she is either artistic or makes music.",
      "If Grace either solves problems or thinks methodically (but not both), then she is logical."
    ],
    "distracting_rules_fol": [
      "likes_challenges(Grace) → (puzzle_solver(Grace) ∨ seeks_order(Grace))",
      "likes_challenges(Grace) → (is_patient(Grace) ⊕ is_methodical(Grace))",
      "loves_challenges(Grace) → (is_artistic(Grace) ∨ makes_music(Grace))",
      "(solves_problems(Grace) ⊕ thinks_methodically(Grace)) → is_logical(Grace)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Grace analyzes data."
        ],
        "rules": "Anyone who thinks critically or analyzes data is logical.",
        "conclusion": "Grace is logical."
      },
      {
        "facts": [
          "Grace is creative.",
          "Grace is logical."
        ],
        "rules": "If Grace is creative, then she is either artistic or logical, but not both.",
        "conclusion": "Grace is not artistic."
      },
      {
        "facts": [
          "Grace does not enjoy games."
        ],
        "rules": "Grace enjoys games or is patient.",
        "conclusion": "Grace is patient."
      },
      {
        "facts": [
          "Grace is patient.",
          "Grace is not artistic."
        ],
        "rules": "If Grace is patient, then she is either a puzzle solver or artistic, but not both.",
        "conclusion": "Grace is a puzzle solver."
      },
      {
        "facts": [
          "Grace is a puzzle solver."
        ],
        "rules": "For every human, they are either a puzzle solver or a non-puzzle solver, but not both.",
        "conclusion": "Grace is not a non-puzzle solver."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "analyzes_data(Grace)"
        ],
        "rules": "∀x ((thinks_critically(x) ∨ analyzes_data(x)) → is_logical(x))",
        "conclusion": "is_logical(Grace)"
      },
      {
        "facts": [
          "is_creative(Grace)",
          "is_logical(Grace)"
        ],
        "rules": "is_creative(Grace) → (is_artistic(Grace) ⊕ is_logical(Grace))",
        "conclusion": "¬is_artistic(Grace)"
      },
      {
        "facts": [
          "¬enjoys_games(Grace)"
        ],
        "rules": "enjoys_games(Grace) ∨ is_patient(Grace)",
        "conclusion": "is_patient(Grace)"
      },
      {
        "facts": [
          "is_patient(Grace)",
          "¬is_artistic(Grace)"
        ],
        "rules": "is_patient(Grace) → (puzzle_solver(Grace) ⊕ is_artistic(Grace))",
        "conclusion": "puzzle_solver(Grace)"
      },
      {
        "facts": [
          "puzzle_solver(Grace)"
        ],
        "rules": "∀x (puzzle_solver(x) ⊕ non_puzzle_solver(x))",
        "conclusion": "¬non_puzzle_solver(Grace)"
      }
    ],
    "conclusion": "Grace is not a non-puzzle solver.",
    "conclusion_fol": "¬non_puzzle_solver(Grace)",
    "answer": "True",
    "context": [
      "Grace analyzes data.",
      "Anyone who thinks critically or analyzes data is logical.",
      "Grace is creative.",
      "If Grace is creative, then she is either artistic or logical, but not both.",
      "Grace does not enjoy games.",
      "Grace enjoys games or is patient.",
      "If Grace is patient, then she is either a puzzle solver or artistic, but not both.",
      "For every human, they are either a puzzle solver or a non-puzzle solver, but not both."
    ],
    "context_fol": [
      "analyzes_data(Grace)",
      "∀x ((thinks_critically(x) ∨ analyzes_data(x)) → is_logical(x))",
      "is_creative(Grace)",
      "is_creative(Grace) → (is_artistic(Grace) ⊕ is_logical(Grace))",
      "¬enjoys_games(Grace)",
      "enjoys_games(Grace) ∨ is_patient(Grace)",
      "is_patient(Grace) → (puzzle_solver(Grace) ⊕ is_artistic(Grace))",
      "∀x (puzzle_solver(x) ⊕ non_puzzle_solver(x))"
    ],
    "background_story": "Grace was a puzzle enthusiast with a unique talent for solving jigsaw puzzles. She spent most of her childhood piecing together complex images, and as she grew older, her fascination with puzzles only deepened. Grace's room was filled with half-finished jigsaw puzzles, each one a challenge she was determined to conquer. Her friends and family often joked that her life was like a jigsaw puzzle, with each experience and relationship being a piece that helped form the complete picture. As she navigated through life's twists and turns, Grace applied the same patience and persistence she used to solve jigsaw puzzles, carefully fitting each piece into place to reveal a beautiful and cohesive whole.",
    "name": "Grace",
    "keyword": "jigsaw",
    "subject_category": "human"
  },
  {
    "facts": [
      "Asaiah does not experiment innovatively.",
      "Asaiah does not defy expectations.",
      "Asaiah does not ask odd questions.",
      "Asaiah seeks alternate solutions."
    ],
    "facts_fol": [
      "¬experiment_innovatively(Asaiah)",
      "¬defy_expectations(Asaiah)",
      "¬asks_odd_questions(Asaiah)",
      "seeks_alternate_solutions(Asaiah)"
    ],
    "rules": [
      "Asaiah either challenges conventions or thinks outside the box.",
      "Anyone who defies expectations or pursues unusual ideas challenges conventions.",
      "If Asaiah either asks odd questions or seeks alternate solutions (but not both), then he pursues unusual ideas."
    ],
    "rules_fol": [
      "challenges_conventions(Asaiah) ∨ think_outside_box(Asaiah)",
      "∀x ((defy_expectations(x) ∨ pursue_unusual_ideas(x)) → challenges_conventions(x))",
      "(asks_odd_questions(Asaiah) ⊕ seeks_alternate_solutions(Asaiah)) → pursue_unusual_ideas(Asaiah)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Asaiah either sees patterns or finds links (but not both), then he thinks outside the box.",
      "If Asaiah has a creative mind, then he challenges conventions and solves complex problems.",
      "Asaiah explores options or pursues unusual ideas."
    ],
    "distracting_rules_fol": [
      "(sees_patterns(Asaiah) ⊕ finds_links(Asaiah)) → think_outside_box(Asaiah)",
      "creative_mind(Asaiah) → (challenges_conventions(Asaiah) ∧ solve_complex_problems(Asaiah))",
      "explores_options(Asaiah) ∨ pursue_unusual_ideas(Asaiah)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Asaiah does not ask odd questions.",
          "Asaiah seeks alternate solutions."
        ],
        "rules": "If Asaiah either asks odd questions or seeks alternate solutions (but not both), then he pursues unusual ideas.",
        "conclusion": "Asaiah pursues unusual ideas."
      },
      {
        "facts": [
          "Asaiah does not defy expectations.",
          "Asaiah pursues unusual ideas."
        ],
        "rules": "Anyone who defies expectations or pursues unusual ideas challenges conventions.",
        "conclusion": "Asaiah challenges conventions."
      },
      {
        "facts": [
          "Asaiah challenges conventions."
        ],
        "rules": "Asaiah either challenges conventions or thinks outside the box.",
        "conclusion": null
      },
      {
        "facts": [
          "Asaiah does not experiment innovatively."
        ],
        "rules": null,
        "conclusion": "If Asaiah thinks outside the box and experiments innovatively, then he makes breakthroughs."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬asks_odd_questions(Asaiah)",
          "seeks_alternate_solutions(Asaiah)"
        ],
        "rules": "(asks_odd_questions(Asaiah) ⊕ seeks_alternate_solutions(Asaiah)) → pursue_unusual_ideas(Asaiah)",
        "conclusion": "pursue_unusual_ideas(Asaiah)"
      },
      {
        "facts": [
          "¬defy_expectations(Asaiah)",
          "pursue_unusual_ideas(Asaiah)"
        ],
        "rules": "∀x ((defy_expectations(x) ∨ pursue_unusual_ideas(x)) → challenges_conventions(x))",
        "conclusion": "challenges_conventions(Asaiah)"
      },
      {
        "facts": [
          "challenges_conventions(Asaiah)"
        ],
        "rules": "challenges_conventions(Asaiah) ∨ think_outside_box(Asaiah)",
        "conclusion": null
      },
      {
        "facts": [
          "¬experiment_innovatively(Asaiah)"
        ],
        "rules": null,
        "conclusion": "(think_outside_box(Asaiah) ∧ experiment_innovatively(Asaiah)) → make_breakthroughs(Asaiah)"
      }
    ],
    "conclusion": "If Asaiah thinks outside the box and experiments innovatively, then he makes breakthroughs.",
    "conclusion_fol": "(think_outside_box(Asaiah) ∧ experiment_innovatively(Asaiah)) → make_breakthroughs(Asaiah)",
    "answer": "True",
    "context": [
      "Asaiah does not ask odd questions.",
      "Asaiah seeks alternate solutions.",
      "If Asaiah either asks odd questions or seeks alternate solutions (but not both), then he pursues unusual ideas.",
      "Asaiah does not defy expectations.",
      "Anyone who defies expectations or pursues unusual ideas challenges conventions.",
      "Asaiah either challenges conventions or thinks outside the box.",
      "Asaiah does not experiment innovatively."
    ],
    "context_fol": [
      "¬asks_odd_questions(Asaiah)",
      "seeks_alternate_solutions(Asaiah)",
      "(asks_odd_questions(Asaiah) ⊕ seeks_alternate_solutions(Asaiah)) → pursue_unusual_ideas(Asaiah)",
      "¬defy_expectations(Asaiah)",
      "∀x ((defy_expectations(x) ∨ pursue_unusual_ideas(x)) → challenges_conventions(x))",
      "challenges_conventions(Asaiah) ∨ think_outside_box(Asaiah)",
      "¬experiment_innovatively(Asaiah)"
    ],
    "background_story": "Asaiah was a brilliant scientist known for his unconventional approaches to problem-solving. His tendency to aberrate from traditional methods often led to groundbreaking discoveries, but also sometimes resulted in chaotic lab conditions. Asaiah's colleagues would often joke that his mind worked like a maze, full of unexpected turns and surprising connections. One day, while experimenting with an innovative material, Asaiah deviated so far from the norm that he stumbled upon a revolutionary new alloy. Its unique properties made it incredibly strong and lightweight, opening up new possibilities for space exploration. Asaiah's willingness to aberrate from the norm had led to a breakthrough that would change the course of space travel forever.",
    "name": "Asaiah",
    "keyword": "aberrate",
    "subject_category": "human"
  },
  {
    "facts": [
      "Adonis exerts influence.",
      "Adonis does not leave a lasting impact.",
      "Adonis dies a tragic death.",
      "Adonis is worshipped.",
      "Adonis has a tragic story."
    ],
    "facts_fol": [
      "exert_influence(Adonis)",
      "¬leave_lasting_impact(Adonis)",
      "tragically_die(Adonis)",
      "be_worshipped(Adonis)",
      "have_tragic_story(Adonis)"
    ],
    "rules": [
      "If Adonis dies tragically, then he either becomes symbolic of the transience of life or inspires legends, but not both.",
      "Every mythological figure who possesses beauty either inspires legends or leaves a lasting impact.",
      "If Adonis is remembered, then he is either beautiful or has divine powers, but not both.",
      "If Adonis is worshipped, then he either exerts influence or has divine powers, but not both.",
      "Any mythological figure with a tragic story or who captures hearts will be remembered."
    ],
    "rules_fol": [
      "tragically_die(Adonis) → (become_symbolic(Adonis) ⊕ inspire_legends(Adonis))",
      "∀x (possess_beauty(x) → (inspire_legends(x) ∨ leave_lasting_impact(x)))",
      "be_remembered(Adonis) → (possess_beauty(Adonis) ⊕ have_divine_powers(Adonis))",
      "be_worshipped(Adonis) → (exert_influence(Adonis) ⊕ have_divine_powers(Adonis))",
      "∀x ((have_tragic_story(x) ∨ capture_hearts(x)) → be_remembered(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Any mythological figure with a tragic fate or who shows courage can inspire legends.",
      "All charming mythological figures possess beauty and gain admirers.",
      "Any mythological figure who can heal others or control nature has divine powers.",
      "If Adonis either shows courage or spreads love (but not both), then he is remembered."
    ],
    "distracting_rules_fol": [
      "∀x ((have_tragic_fate(x) ∨ show_courage(x)) → inspire_legends(x))",
      "∀x (be_charming(x) → (possess_beauty(x) ∧ gain_admirers(x)))",
      "∀x ((heal_others(x) ∨ control_nature(x)) → have_divine_powers(x))",
      "(show_courage(Adonis) ⊕ spread_love(Adonis)) → be_remembered(Adonis)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Adonis has a tragic story."
        ],
        "rules": "Any mythological figure with a tragic story or who captures hearts will be remembered.",
        "conclusion": "Adonis is remembered."
      },
      {
        "facts": [
          "Adonis is worshipped.",
          "Adonis exerts influence."
        ],
        "rules": "If Adonis is worshipped, then he either exerts influence or has divine powers, but not both.",
        "conclusion": "Adonis does not have divine powers."
      },
      {
        "facts": [
          "Adonis is remembered.",
          "Adonis does not have divine powers."
        ],
        "rules": "If Adonis is remembered, then he is either beautiful or has divine powers, but not both.",
        "conclusion": "Adonis possesses beauty."
      },
      {
        "facts": [
          "Adonis possesses beauty.",
          "Adonis does not leave a lasting impact."
        ],
        "rules": "Every mythological figure who possesses beauty either inspires legends or leaves a lasting impact.",
        "conclusion": "Adonis inspires legends."
      },
      {
        "facts": [
          "Adonis dies a tragic death.",
          "Adonis inspires legends."
        ],
        "rules": "If Adonis dies tragically, then he either becomes symbolic of the transience of life or inspires legends, but not both.",
        "conclusion": "Adonis becomes symbolic of the transience of life."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "have_tragic_story(Adonis)"
        ],
        "rules": "∀x ((have_tragic_story(x) ∨ capture_hearts(x)) → be_remembered(x))",
        "conclusion": "be_remembered(Adonis)"
      },
      {
        "facts": [
          "be_worshipped(Adonis)",
          "exert_influence(Adonis)"
        ],
        "rules": "be_worshipped(Adonis) → (exert_influence(Adonis) ⊕ have_divine_powers(Adonis))",
        "conclusion": "¬have_divine_powers(Adonis)"
      },
      {
        "facts": [
          "be_remembered(Adonis)",
          "¬have_divine_powers(Adonis)"
        ],
        "rules": "be_remembered(Adonis) → (possess_beauty(Adonis) ⊕ have_divine_powers(Adonis))",
        "conclusion": "possess_beauty(Adonis)"
      },
      {
        "facts": [
          "possess_beauty(Adonis)",
          "¬leave_lasting_impact(Adonis)"
        ],
        "rules": "∀x (possess_beauty(x) → (inspire_legends(x) ∨ leave_lasting_impact(x)))",
        "conclusion": "inspire_legends(Adonis)"
      },
      {
        "facts": [
          "tragically_die(Adonis)",
          "inspire_legends(Adonis)"
        ],
        "rules": "tragically_die(Adonis) → (become_symbolic(Adonis) ⊕ inspire_legends(Adonis))",
        "conclusion": "become_symbolic(Adonis)"
      }
    ],
    "conclusion": "Adonis becomes symbolic of the transience of life.",
    "conclusion_fol": "become_symbolic(Adonis)",
    "answer": "False",
    "context": [
      "Adonis has a tragic story.",
      "Any mythological figure with a tragic story or who captures hearts will be remembered.",
      "Adonis is worshipped.",
      "Adonis exerts influence.",
      "If Adonis is worshipped, then he either exerts influence or has divine powers, but not both.",
      "If Adonis is remembered, then he is either beautiful or has divine powers, but not both.",
      "Adonis does not leave a lasting impact.",
      "Every mythological figure who possesses beauty either inspires legends or leaves a lasting impact.",
      "Adonis dies a tragic death.",
      "If Adonis dies tragically, then he either becomes symbolic of the transience of life or inspires legends, but not both."
    ],
    "context_fol": [
      "have_tragic_story(Adonis)",
      "∀x ((have_tragic_story(x) ∨ capture_hearts(x)) → be_remembered(x))",
      "be_worshipped(Adonis)",
      "exert_influence(Adonis)",
      "be_worshipped(Adonis) → (exert_influence(Adonis) ⊕ have_divine_powers(Adonis))",
      "be_remembered(Adonis) → (possess_beauty(Adonis) ⊕ have_divine_powers(Adonis))",
      "¬leave_lasting_impact(Adonis)",
      "∀x (possess_beauty(x) → (inspire_legends(x) ∨ leave_lasting_impact(x)))",
      "tragically_die(Adonis)",
      "tragically_die(Adonis) → (become_symbolic(Adonis) ⊕ inspire_legends(Adonis))"
    ],
    "background_story": "In ancient myth, Adonis was a handsome and charming god, beloved by both Aphrodite and Persephone. However, his life was cut short when he was killed by a wild boar sent by the god Ares. As Adonis lay dying, his blood spilled onto the earth, and from it sprouted the beautiful and fragrant cocculus, a vine with blood-red berries. The cocculus became a symbol of Adonis' tragic fate and enduring beauty. According to legend, Aphrodite's tears watered the vine, allowing it to flourish and bloom annually, reminding all of the transience of life and the power of love. The myth of Adonis and the cocculus has been retold for centuries, a poignant reminder of the human experience.",
    "name": "Adonis",
    "keyword": "cocculus",
    "subject_category": "mythological figure"
  },
  {
    "facts": [
      "Kylian is daring.",
      "Kylian takes chances.",
      "Kylian acts quickly."
    ],
    "facts_fol": [
      "is_daring(Kylian)",
      "takes_chances(Kylian)",
      "acts_quickly(Kylian)"
    ],
    "rules": [
      "Either Kylian is adventurous or cautious, but not both.",
      "Kylian is either risky or adventurous, but not both.",
      "If Kylian is daring, then he is either risky or bold, but not both.",
      "If Kylian takes chances, then he is either bold or acts quickly, but not both."
    ],
    "rules_fol": [
      "adventurous(Kylian) ⊕ cautious(Kylian)",
      "risky(Kylian) ⊕ adventurous(Kylian)",
      "is_daring(Kylian) → (risky(Kylian) ⊕ is_bold(Kylian))",
      "takes_chances(Kylian) → (acts_quickly(Kylian) ⊕ is_bold(Kylian))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "All open-minded individuals are adventurous and have a curious nature.",
      "If Kylian either travels alone or meets strangers (but not both), then he is risky.",
      "Anyone who speaks the truth or faces challenges can be bold."
    ],
    "distracting_rules_fol": [
      "∀x (open_minded(x) → (adventurous(x) ∧ curious_nature(x)))",
      "(travels_alone(Kylian) ⊕ meets_strangers(Kylian)) → risky(Kylian)",
      "∀x ((speaks_truth(x) ∨ faces_challenge(x)) → is_bold(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Kylian takes chances.",
          "Kylian acts quickly."
        ],
        "rules": "If Kylian takes chances, then he is either bold or acts quickly, but not both.",
        "conclusion": "Kylian is not bold."
      },
      {
        "facts": [
          "Kylian is daring.",
          "Kylian is not bold."
        ],
        "rules": "If Kylian is daring, then he is either risky or bold, but not both.",
        "conclusion": "Kylian is risky."
      },
      {
        "facts": [
          "Kylian is risky."
        ],
        "rules": "Kylian is either risky or adventurous, but not both.",
        "conclusion": "Kylian is not adventurous."
      },
      {
        "facts": [
          "Kylian is not adventurous."
        ],
        "rules": "Either Kylian is adventurous or cautious, but not both.",
        "conclusion": "Kylian is cautious."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "takes_chances(Kylian)",
          "acts_quickly(Kylian)"
        ],
        "rules": "takes_chances(Kylian) → (acts_quickly(Kylian) ⊕ is_bold(Kylian))",
        "conclusion": "¬is_bold(Kylian)"
      },
      {
        "facts": [
          "is_daring(Kylian)",
          "¬is_bold(Kylian)"
        ],
        "rules": "is_daring(Kylian) → (risky(Kylian) ⊕ is_bold(Kylian))",
        "conclusion": "risky(Kylian)"
      },
      {
        "facts": [
          "risky(Kylian)"
        ],
        "rules": "risky(Kylian) ⊕ adventurous(Kylian)",
        "conclusion": "¬adventurous(Kylian)"
      },
      {
        "facts": [
          "¬adventurous(Kylian)"
        ],
        "rules": "adventurous(Kylian) ⊕ cautious(Kylian)",
        "conclusion": "cautious(Kylian)"
      }
    ],
    "conclusion": "Kylian is cautious.",
    "conclusion_fol": "cautious(Kylian)",
    "answer": "True",
    "context": [
      "Kylian takes chances.",
      "Kylian acts quickly.",
      "If Kylian takes chances, then he is either bold or acts quickly, but not both.",
      "Kylian is daring.",
      "If Kylian is daring, then he is either risky or bold, but not both.",
      "Kylian is either risky or adventurous, but not both.",
      "Either Kylian is adventurous or cautious, but not both."
    ],
    "context_fol": [
      "takes_chances(Kylian)",
      "acts_quickly(Kylian)",
      "takes_chances(Kylian) → (acts_quickly(Kylian) ⊕ is_bold(Kylian))",
      "is_daring(Kylian)",
      "is_daring(Kylian) → (risky(Kylian) ⊕ is_bold(Kylian))",
      "risky(Kylian) ⊕ adventurous(Kylian)",
      "adventurous(Kylian) ⊕ cautious(Kylian)"
    ],
    "background_story": "Kylian, a young and ambitious journalist, had always been fascinated by the rich cultural heritage of Honduras. Born in France, he spent most of his summers visiting his grandparents in the coastal town of Tela, Honduras. As he grew older, Kylian became increasingly interested in the social and economic challenges faced by the Honduran people. He decided to embark on a journey to document the stories of resilience and hope in the face of adversity. From the vibrant streets of San Pedro Sula to the ancient Mayan ruins of Copán, Kylian traveled the country, capturing the essence of Honduras through his lens. His photographs and stories shed light on the beauty and strength of the Honduran spirit, inspiring a new wave of international support and solidarity for the country.",
    "name": "Kylian",
    "keyword": "honduras",
    "subject_category": "human"
  },
  {
    "facts": [
      "Damari is not spontaneous.",
      "Damari embraces difference.",
      "Damari does not respect tradition."
    ],
    "facts_fol": [
      "¬is_spontaneous(Damari)",
      "embrace_difference(Damari)",
      "¬respect_tradition(Damari)"
    ],
    "rules": [
      "If Damari is creative or inspired by culture, then he produces unique art.",
      "A person is either spontaneous or creative, but not necessarily both.",
      "Anyone who loves diversity is inspired by culture.",
      "Anyone who values inclusion or appreciates heritage loves diversity.",
      "If Damari embraces difference, then he either values inclusion or respects tradition."
    ],
    "rules_fol": [
      "(creative(Damari) ∨ inspired_by_culture(Damari)) → produces_unique_art(Damari)",
      "∀x (is_spontaneous(x) ⊕ creative(x))",
      "∀x (loves_diversity(x) → inspired_by_culture(x))",
      "∀x ((values_inclusion(x) ∨ appreciates_heritage(x)) → loves_diversity(x))",
      "embrace_difference(Damari) → (values_inclusion(Damari) ∨ respect_tradition(Damari))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Damari either thinks outside the box or sees patterns (but not both), then he is creative.",
      "If Damari lives in Marrakech, then he either enjoys experimenting or is inspired by culture, but not both.",
      "Everyone who lives in Marrakech either loves diversity or enjoys exploring (or both).",
      "Anyone who lives in a melting pot either values inclusion or seeks new experiences."
    ],
    "distracting_rules_fol": [
      "(thinks_outside(Damari) ⊕ sees_patterns(Damari)) → creative(Damari)",
      "lives_in_marrakech(Damari) → (enjoys_experimenting(Damari) ⊕ inspired_by_culture(Damari))",
      "∀x (lives_in_Marrakech(x) → (loves_diversity(x) ∨ enjoys_exploring(x)))",
      "∀x (lives_in_melting_pot(x) → (values_inclusion(x) ∨ seeks_new_experiences(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Damari embraces difference.",
          "Damari does not respect tradition."
        ],
        "rules": "If Damari embraces difference, then he either values inclusion or respects tradition.",
        "conclusion": "Damari values inclusion."
      },
      {
        "facts": [
          "Damari values inclusion."
        ],
        "rules": "Anyone who values inclusion or appreciates heritage loves diversity.",
        "conclusion": "Damari loves diversity."
      },
      {
        "facts": [
          "Damari loves diversity."
        ],
        "rules": "Anyone who loves diversity is inspired by culture.",
        "conclusion": "Damari is inspired by culture."
      },
      {
        "facts": [
          "Damari is not spontaneous."
        ],
        "rules": "A person is either spontaneous or creative, but not necessarily both.",
        "conclusion": "Damari is creative."
      },
      {
        "facts": [
          "Damari is creative.",
          "Damari is inspired by culture."
        ],
        "rules": "If Damari is creative or inspired by culture, then he produces unique art.",
        "conclusion": "Damari does not produce unique art."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "embrace_difference(Damari)",
          "¬respect_tradition(Damari)"
        ],
        "rules": "embrace_difference(Damari) → (values_inclusion(Damari) ∨ respect_tradition(Damari))",
        "conclusion": "values_inclusion(Damari)"
      },
      {
        "facts": [
          "values_inclusion(Damari)"
        ],
        "rules": "∀x ((values_inclusion(x) ∨ appreciates_heritage(x)) → loves_diversity(x))",
        "conclusion": "loves_diversity(Damari)"
      },
      {
        "facts": [
          "loves_diversity(Damari)"
        ],
        "rules": "∀x (loves_diversity(x) → inspired_by_culture(x))",
        "conclusion": "inspired_by_culture(Damari)"
      },
      {
        "facts": [
          "¬is_spontaneous(Damari)"
        ],
        "rules": "∀x (is_spontaneous(x) ⊕ creative(x))",
        "conclusion": "creative(Damari)"
      },
      {
        "facts": [
          "creative(Damari)",
          "inspired_by_culture(Damari)"
        ],
        "rules": "(creative(Damari) ∨ inspired_by_culture(Damari)) → produces_unique_art(Damari)",
        "conclusion": "¬produces_unique_art(Damari)"
      }
    ],
    "conclusion": "Damari does not produce unique art.",
    "conclusion_fol": "¬produces_unique_art(Damari)",
    "answer": "False",
    "context": [
      "Damari embraces difference.",
      "Damari does not respect tradition.",
      "If Damari embraces difference, then he either values inclusion or respects tradition.",
      "Anyone who values inclusion or appreciates heritage loves diversity.",
      "Anyone who loves diversity is inspired by culture.",
      "Damari is not spontaneous.",
      "A person is either spontaneous or creative, but not necessarily both.",
      "If Damari is creative or inspired by culture, then he produces unique art."
    ],
    "context_fol": [
      "embrace_difference(Damari)",
      "¬respect_tradition(Damari)",
      "embrace_difference(Damari) → (values_inclusion(Damari) ∨ respect_tradition(Damari))",
      "∀x ((values_inclusion(x) ∨ appreciates_heritage(x)) → loves_diversity(x))",
      "∀x (loves_diversity(x) → inspired_by_culture(x))",
      "¬is_spontaneous(Damari)",
      "∀x (is_spontaneous(x) ⊕ creative(x))",
      "(creative(Damari) ∨ inspired_by_culture(Damari)) → produces_unique_art(Damari)"
    ],
    "background_story": "Damari was a free-spirited artist who lived in the vibrant city of Marrakech. He was known for his eclectic paintings that reflected the city's rich cultural heritage. In his small studio, filled with the scent of hashish and freshly brewed coffee, Damari would spend hours perfecting his craft. The intoxicating aroma of hashish inspired him to create bold, colorful pieces that captured the essence of the city's bustling souks. As his art gained popularity, Damari became a fixture in the local art scene, with his work sought after by collectors and connoisseurs. Despite his success, he remained true to his bohemian roots, always seeking new sources of inspiration in the city's hidden corners and secret gardens.",
    "name": "Damari",
    "keyword": "hashish",
    "subject_category": "person"
  },
  {
    "facts": [
      "Smiles has an experienced pilot.",
      "Smiles is not reliable.",
      "Smiles has advanced propulsion.",
      "Smiles is an intergalactic spaceship.",
      "Smiles has fast speed."
    ],
    "facts_fol": [
      "experienced_pilot(Smiles)",
      "¬reliable(Smiles)",
      "advanced_propulsion(Smiles)",
      "intergalactic(Smiles)",
      "fast_speed(Smiles)"
    ],
    "rules": [
      "If Smiles is reliable, then it has successful missions and gains historical significance.",
      "Any spaceship with precise control and an experienced pilot can have successful missions.",
      "If Smiles has advanced propulsion, then it is either maneuverable or has precise control, but not both.",
      "If Smiles is an intergalactic spaceship, then it is either maneuverable or has fast speed, but not both."
    ],
    "rules_fol": [
      "reliable(Smiles) → (successful_missions(Smiles) ∧ historical_significance(Smiles))",
      "∀x ((precise_control(x) ∧ experienced_pilot(x)) → successful_missions(x))",
      "advanced_propulsion(Smiles) → (maneuverable(Smiles) ⊕ precise_control(Smiles))",
      "intergalactic(Smiles) → (maneuverable(Smiles) ⊕ fast_speed(Smiles))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Smiles either carries crew or transmits data (but not both), then it has successful missions.",
      "Smiles has stable flight or precise control.",
      "All spaceships with agile design are maneuverable."
    ],
    "distracting_rules_fol": [
      "(carries_crew(Smiles) ⊕ transmits_data(Smiles)) → successful_missions(Smiles)",
      "stable_flight(Smiles) ∨ precise_control(Smiles)",
      "∀x (agile_design(x) → maneuverable(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Smiles is an intergalactic spaceship.",
          "Smiles has fast speed."
        ],
        "rules": "If Smiles is an intergalactic spaceship, then it is either maneuverable or has fast speed, but not both.",
        "conclusion": "Smiles is not maneuverable."
      },
      {
        "facts": [
          "Smiles has advanced propulsion.",
          "Smiles is not maneuverable."
        ],
        "rules": "If Smiles has advanced propulsion, then it is either maneuverable or has precise control, but not both.",
        "conclusion": "Smiles has precise control."
      },
      {
        "facts": [
          "Smiles has precise control.",
          "Smiles has an experienced pilot."
        ],
        "rules": "Any spaceship with precise control and an experienced pilot can have successful missions.",
        "conclusion": "Smiles has successful missions."
      },
      {
        "facts": [
          "Smiles is not reliable.",
          "Smiles has successful missions."
        ],
        "rules": "If Smiles is reliable, then it has successful missions and gains historical significance.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "intergalactic(Smiles)",
          "fast_speed(Smiles)"
        ],
        "rules": "intergalactic(Smiles) → (maneuverable(Smiles) ⊕ fast_speed(Smiles))",
        "conclusion": "¬maneuverable(Smiles)"
      },
      {
        "facts": [
          "advanced_propulsion(Smiles)",
          "¬maneuverable(Smiles)"
        ],
        "rules": "advanced_propulsion(Smiles) → (maneuverable(Smiles) ⊕ precise_control(Smiles))",
        "conclusion": "precise_control(Smiles)"
      },
      {
        "facts": [
          "precise_control(Smiles)",
          "experienced_pilot(Smiles)"
        ],
        "rules": "∀x ((precise_control(x) ∧ experienced_pilot(x)) → successful_missions(x))",
        "conclusion": "successful_missions(Smiles)"
      },
      {
        "facts": [
          "¬reliable(Smiles)",
          "successful_missions(Smiles)"
        ],
        "rules": "reliable(Smiles) → (successful_missions(Smiles) ∧ historical_significance(Smiles))",
        "conclusion": null
      }
    ],
    "conclusion": "Smiles does not gain historical significance.",
    "conclusion_fol": "¬historical_significance(Smiles)",
    "answer": "Uncertain",
    "context": [
      "Smiles is an intergalactic spaceship.",
      "Smiles has fast speed.",
      "If Smiles is an intergalactic spaceship, then it is either maneuverable or has fast speed, but not both.",
      "Smiles has advanced propulsion.",
      "If Smiles has advanced propulsion, then it is either maneuverable or has precise control, but not both.",
      "Smiles has an experienced pilot.",
      "Any spaceship with precise control and an experienced pilot can have successful missions.",
      "Smiles is not reliable.",
      "If Smiles is reliable, then it has successful missions and gains historical significance."
    ],
    "context_fol": [
      "intergalactic(Smiles)",
      "fast_speed(Smiles)",
      "intergalactic(Smiles) → (maneuverable(Smiles) ⊕ fast_speed(Smiles))",
      "advanced_propulsion(Smiles)",
      "advanced_propulsion(Smiles) → (maneuverable(Smiles) ⊕ precise_control(Smiles))",
      "experienced_pilot(Smiles)",
      "∀x ((precise_control(x) ∧ experienced_pilot(x)) → successful_missions(x))",
      "¬reliable(Smiles)",
      "reliable(Smiles) → (successful_missions(Smiles) ∧ historical_significance(Smiles))"
    ],
    "background_story": "Smiles was a vintage spaceship named after the joyful grin of its first pilot. Built in the early days of space exploration, Smiles was equipped with a revolutionary retrorocket system that allowed it to land safely on distant planets. The retrorocket's precise control enabled Smiles to touch down in tight spots, making it an ideal vessel for reconnaissance missions. After years of service, Smiles was retired and converted into a museum piece, a testament to the ingenuity of early space travel. However, when a distress signal from a remote planet was received, Smiles was refurbished and sent back into action. Its trusty retrorocket system still functioning perfectly, Smiles successfully landed on the planet's surface, rescuing a stranded crew and earning its place in the annals of space history.",
    "name": "Smiles",
    "keyword": "retrorocket",
    "subject_category": "spaceship"
  },
  {
    "facts": [
      "Noah teaches others.",
      "Noah is a scholar.",
      "Noah is an explorer."
    ],
    "facts_fol": [
      "teach_others(Noah)",
      "scholar(Noah)",
      "explorer(Noah)"
    ],
    "rules": [
      "For all humans, if someone is a historian, then they either write accurate books or preserve history (or both).",
      "If Noah is a scholar, then he is either a historian or an archivist (but not both).",
      "For Noah, either he teaches others or writes accurate books, but not necessarily both.",
      "Noah is either an explorer or an archivist, but not both."
    ],
    "rules_fol": [
      "∀x (historian(x) → (write_accurate_books(x) ∨ preserve_history(x)))",
      "scholar(Noah) → (historian(Noah) ⊕ archivist(Noah))",
      "teach_others(Noah) ⊕ write_accurate_books(Noah)",
      "explorer(Noah) ⊕ archivist(Noah)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Noah studies the past or analyzes artifacts, then he is a historian.",
      "If Noah studies medieval times, then he speaks ancient languages and writes accurate books.",
      "If Noah is a researcher, then he is either an archivist or a curator, but not both."
    ],
    "distracting_rules_fol": [
      "(study_past(Noah) ∨ analyze_artifacts(Noah)) → historian(Noah)",
      "study_medieval(Noah) → (speak_ancient(Noah) ∧ write_accurate_books(Noah))",
      "researcher(Noah) → (archivist(Noah) ⊕ curator(Noah))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Noah is an explorer."
        ],
        "rules": "Noah is either an explorer or an archivist, but not both.",
        "conclusion": "Noah is not an archivist."
      },
      {
        "facts": [
          "Noah teaches others."
        ],
        "rules": "For Noah, either he teaches others or writes accurate books, but not necessarily both.",
        "conclusion": "Noah does not write accurate books."
      },
      {
        "facts": [
          "Noah is a scholar.",
          "Noah is not an archivist."
        ],
        "rules": "If Noah is a scholar, then he is either a historian or an archivist (but not both).",
        "conclusion": "Noah is a historian."
      },
      {
        "facts": [
          "Noah is a historian.",
          "Noah does not write accurate books."
        ],
        "rules": "For all humans, if someone is a historian, then they either write accurate books or preserve history (or both).",
        "conclusion": "Noah preserves history."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "explorer(Noah)"
        ],
        "rules": "explorer(Noah) ⊕ archivist(Noah)",
        "conclusion": "¬archivist(Noah)"
      },
      {
        "facts": [
          "teach_others(Noah)"
        ],
        "rules": "teach_others(Noah) ⊕ write_accurate_books(Noah)",
        "conclusion": "¬write_accurate_books(Noah)"
      },
      {
        "facts": [
          "scholar(Noah)",
          "¬archivist(Noah)"
        ],
        "rules": "scholar(Noah) → (historian(Noah) ⊕ archivist(Noah))",
        "conclusion": "historian(Noah)"
      },
      {
        "facts": [
          "historian(Noah)",
          "¬write_accurate_books(Noah)"
        ],
        "rules": "∀x (historian(x) → (write_accurate_books(x) ∨ preserve_history(x)))",
        "conclusion": "preserve_history(Noah)"
      }
    ],
    "conclusion": "Noah preserves history.",
    "conclusion_fol": "preserve_history(Noah)",
    "answer": "True",
    "context": [
      "Noah is an explorer.",
      "Noah is either an explorer or an archivist, but not both.",
      "Noah teaches others.",
      "For Noah, either he teaches others or writes accurate books, but not necessarily both.",
      "Noah is a scholar.",
      "If Noah is a scholar, then he is either a historian or an archivist (but not both).",
      "For all humans, if someone is a historian, then they either write accurate books or preserve history (or both)."
    ],
    "context_fol": [
      "explorer(Noah)",
      "explorer(Noah) ⊕ archivist(Noah)",
      "teach_others(Noah)",
      "teach_others(Noah) ⊕ write_accurate_books(Noah)",
      "scholar(Noah)",
      "scholar(Noah) → (historian(Noah) ⊕ archivist(Noah))",
      "∀x (historian(x) → (write_accurate_books(x) ∨ preserve_history(x)))"
    ],
    "background_story": "Noah was a historian with a passion for the days of yore. He spent most of his life studying the medieval period, fascinated by the chivalry, honor, and valor of knights. In his quest for knowledge, Noah traveled to ancient castles, monasteries, and villages, uncovering hidden artifacts and manuscripts. He became an expert in the language, customs, and traditions of a bygone era. Noah's friends would often joke that he was a knight himself, transported from the past to the present. His love for history inspired him to write a bestselling novel about a legendary knight, which transported readers back to the days of yore. Through his work, Noah kept the spirit of a forgotten age alive, reminding people of the values and heroism that once defined a nation.",
    "name": "Noah",
    "keyword": "yore",
    "subject_category": "human"
  },
  {
    "facts": [
      "Yahir does not play traditional music.",
      "Yahir does not learn regional tunes.",
      "Yahir respects his ancestors.",
      "Yahir loves the fiddle."
    ],
    "facts_fol": [
      "¬play_traditional_music(Yahir)",
      "¬learn_regional_tunes(Yahir)",
      "respect_ancestors(Yahir)",
      "love_fiddle(Yahir)"
    ],
    "rules": [
      "If Yahir performs folk songs, then he either appreciates cultural heritage or values local customs, but not both.",
      "If Yahir either learns regional tunes or respects his ancestors (but not both), then he values local customs.",
      "If Yahir loves the fiddle, then he will perform folk songs."
    ],
    "rules_fol": [
      "perform_folk_songs(Yahir) → (appreciate_cultural_heritage(Yahir) ⊕ value_local_customs(Yahir))",
      "(learn_regional_tunes(Yahir) ⊕ respect_ancestors(Yahir)) → value_local_customs(Yahir)",
      "love_fiddle(Yahir) → perform_folk_songs(Yahir)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Any musician who knows old songs or honors their roots appreciates cultural heritage.",
      "If a musician enjoys local gatherings and knows traditional dances, then they value local customs.",
      "Yahir either composes tunes or performs folk songs."
    ],
    "distracting_rules_fol": [
      "∀x ((knows_old_songs(x) ∨ honors_roots(x)) → appreciate_cultural_heritage(x))",
      "∀x ((enjoy_ceilis(x) ∧ know_ceilis(x)) → value_local_customs(x))",
      "compose_tunes(Yahir) ∨ perform_folk_songs(Yahir)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Yahir loves the fiddle."
        ],
        "rules": "If Yahir loves the fiddle, then he will perform folk songs.",
        "conclusion": "Yahir performs folk songs."
      },
      {
        "facts": [
          "Yahir does not learn regional tunes.",
          "Yahir respects his ancestors."
        ],
        "rules": "If Yahir either learns regional tunes or respects his ancestors (but not both), then he values local customs.",
        "conclusion": "Yahir values local customs."
      },
      {
        "facts": [
          "Yahir performs folk songs.",
          "Yahir values local customs."
        ],
        "rules": "If Yahir performs folk songs, then he either appreciates cultural heritage or values local customs, but not both.",
        "conclusion": "Yahir does not appreciate cultural heritage."
      },
      {
        "facts": [
          "Yahir does not play traditional music.",
          "Yahir does not appreciate cultural heritage."
        ],
        "rules": null,
        "conclusion": "Yahir plays traditional music and appreciates cultural heritage."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "love_fiddle(Yahir)"
        ],
        "rules": "love_fiddle(Yahir) → perform_folk_songs(Yahir)",
        "conclusion": "perform_folk_songs(Yahir)"
      },
      {
        "facts": [
          "¬learn_regional_tunes(Yahir)",
          "respect_ancestors(Yahir)"
        ],
        "rules": "(learn_regional_tunes(Yahir) ⊕ respect_ancestors(Yahir)) → value_local_customs(Yahir)",
        "conclusion": "value_local_customs(Yahir)"
      },
      {
        "facts": [
          "perform_folk_songs(Yahir)",
          "value_local_customs(Yahir)"
        ],
        "rules": "perform_folk_songs(Yahir) → (appreciate_cultural_heritage(Yahir) ⊕ value_local_customs(Yahir))",
        "conclusion": "¬appreciate_cultural_heritage(Yahir)"
      },
      {
        "facts": [
          "¬play_traditional_music(Yahir)",
          "¬appreciate_cultural_heritage(Yahir)"
        ],
        "rules": null,
        "conclusion": "play_traditional_music(Yahir) ∧ appreciate_cultural_heritage(Yahir)"
      }
    ],
    "conclusion": "Yahir plays traditional music and appreciates cultural heritage.",
    "conclusion_fol": "play_traditional_music(Yahir) ∧ appreciate_cultural_heritage(Yahir)",
    "answer": "False",
    "context": [
      "Yahir loves the fiddle.",
      "If Yahir loves the fiddle, then he will perform folk songs.",
      "Yahir does not learn regional tunes.",
      "Yahir respects his ancestors.",
      "If Yahir either learns regional tunes or respects his ancestors (but not both), then he values local customs.",
      "If Yahir performs folk songs, then he either appreciates cultural heritage or values local customs, but not both.",
      "Yahir does not play traditional music."
    ],
    "context_fol": [
      "love_fiddle(Yahir)",
      "love_fiddle(Yahir) → perform_folk_songs(Yahir)",
      "¬learn_regional_tunes(Yahir)",
      "respect_ancestors(Yahir)",
      "(learn_regional_tunes(Yahir) ⊕ respect_ancestors(Yahir)) → value_local_customs(Yahir)",
      "perform_folk_songs(Yahir) → (appreciate_cultural_heritage(Yahir) ⊕ value_local_customs(Yahir))",
      "¬play_traditional_music(Yahir)"
    ],
    "background_story": "Yahir was a young musician from a small village nestled in the rolling hills of Ireland. Growing up, he was enchanted by the traditional music sessions in the local pub, where folk musicians would gather to play lively jigs and reels. Yahir was especially drawn to the sound of the fiddle, and he spent countless hours practicing the traditional tunes of his ancestors. As he grew older, Yahir became known throughout the region for his mastery of traditional Irish music, playing at festivals and ceilis with a passion and energy that rivaled the great musicians of old. His love for the trad music of his heritage led him to form a band, which quickly gained a following among those who appreciated the authentic sound of Ireland's rich musical past.",
    "name": "Yahir",
    "keyword": "trad",
    "subject_category": "musician"
  },
  {
    "facts": [
      "Augustus does not get regular tune-ups.",
      "Augustus has a classic look.",
      "Augustus has a high value.",
      "Augustus does not have a sleek design."
    ],
    "facts_fol": [
      "¬gets_regular_tune(Augustus)",
      "classic_look(Augustus)",
      "has_high_value(Augustus)",
      "¬has_sleek_design(Augustus)"
    ],
    "rules": [
      "If Augustus either has a clean engine or gets regular tune-ups (but not both), then it is well maintained.",
      "If Augustus is a rare model, then it will last longer.",
      "If Augustus is a vintage car, then it is either highly valuable or a rare model, but not both.",
      "Augustus is vintage because it has a classic look.",
      "A car either has a sleek design or a clean engine, but it's not necessary for it to have both."
    ],
    "rules_fol": [
      "(has_clean_engine(Augustus) ⊕ gets_regular_tune(Augustus)) → well_maintained(Augustus)",
      "rare_model(Augustus) → last_longer(Augustus)",
      "is_vintage(Augustus) → (has_high_value(Augustus) ⊕ rare_model(Augustus))",
      "classic_look(Augustus) → is_vintage(Augustus)",
      "∀x (has_sleek_design(x) ⊕ has_clean_engine(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Augustus has a powerful engine, then it is either well maintained or handles well.",
      "Any car that has a strong frame or is built to last will last longer.",
      "If Augustus has low mileage, then it is a rare model.",
      "If Augustus has original parts or was built before 1980, then it is a vintage car.",
      "All well-cared-for cars have clean engines."
    ],
    "distracting_rules_fol": [
      "has_powerful_engine(Augustus) → (well_maintained(Augustus) ∨ handle_well(Augustus))",
      "∀x ((has_strong_frame(x) ∨ built_to_last(x)) → last_longer(x))",
      "low_mileage(Augustus) → rare_model(Augustus)",
      "(has_original_parts(Augustus) ∨ built_before_1980(Augustus)) → is_vintage(Augustus)",
      "∀x (is_well_cared(x) → has_clean_engine(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Augustus does not have a sleek design."
        ],
        "rules": "A car either has a sleek design or a clean engine, but it's not necessary for it to have both.",
        "conclusion": "Augustus has a clean engine."
      },
      {
        "facts": [
          "Augustus has a classic look."
        ],
        "rules": "Augustus is vintage because it has a classic look.",
        "conclusion": "Augustus is a vintage car."
      },
      {
        "facts": [
          "Augustus is a vintage car.",
          "Augustus has a high value."
        ],
        "rules": "If Augustus is a vintage car, then it is either highly valuable or a rare model, but not both.",
        "conclusion": "Augustus is not a rare model."
      },
      {
        "facts": [
          "Augustus is not a rare model."
        ],
        "rules": "If Augustus is a rare model, then it will last longer.",
        "conclusion": null
      },
      {
        "facts": [
          "Augustus has a clean engine.",
          "Augustus does not get regular tune-ups."
        ],
        "rules": "If Augustus either has a clean engine or gets regular tune-ups (but not both), then it is well maintained.",
        "conclusion": "Augustus is well maintained."
      },
      {
        "facts": [
          "Augustus is well maintained."
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬has_sleek_design(Augustus)"
        ],
        "rules": "∀x (has_sleek_design(x) ⊕ has_clean_engine(x))",
        "conclusion": "has_clean_engine(Augustus)"
      },
      {
        "facts": [
          "classic_look(Augustus)"
        ],
        "rules": "classic_look(Augustus) → is_vintage(Augustus)",
        "conclusion": "is_vintage(Augustus)"
      },
      {
        "facts": [
          "is_vintage(Augustus)",
          "has_high_value(Augustus)"
        ],
        "rules": "is_vintage(Augustus) → (has_high_value(Augustus) ⊕ rare_model(Augustus))",
        "conclusion": "¬rare_model(Augustus)"
      },
      {
        "facts": [
          "¬rare_model(Augustus)"
        ],
        "rules": "rare_model(Augustus) → last_longer(Augustus)",
        "conclusion": null
      },
      {
        "facts": [
          "has_clean_engine(Augustus)",
          "¬gets_regular_tune(Augustus)"
        ],
        "rules": "(has_clean_engine(Augustus) ⊕ gets_regular_tune(Augustus)) → well_maintained(Augustus)",
        "conclusion": "well_maintained(Augustus)"
      },
      {
        "facts": [
          "well_maintained(Augustus)"
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "conclusion": "If Augustus is well maintained, then it will run smoothly and last longer.",
    "conclusion_fol": "well_maintained(Augustus) → (run_smoothly(Augustus) ∧ last_longer(Augustus))",
    "answer": "Uncertain",
    "context": [
      "Augustus does not have a sleek design.",
      "A car either has a sleek design or a clean engine, but it's not necessary for it to have both.",
      "Augustus has a classic look.",
      "Augustus is vintage because it has a classic look.",
      "Augustus has a high value.",
      "If Augustus is a vintage car, then it is either highly valuable or a rare model, but not both.",
      "If Augustus is a rare model, then it will last longer.",
      "Augustus does not get regular tune-ups.",
      "If Augustus either has a clean engine or gets regular tune-ups (but not both), then it is well maintained."
    ],
    "context_fol": [
      "¬has_sleek_design(Augustus)",
      "∀x (has_sleek_design(x) ⊕ has_clean_engine(x))",
      "classic_look(Augustus)",
      "classic_look(Augustus) → is_vintage(Augustus)",
      "has_high_value(Augustus)",
      "is_vintage(Augustus) → (has_high_value(Augustus) ⊕ rare_model(Augustus))",
      "rare_model(Augustus) → last_longer(Augustus)",
      "¬gets_regular_tune(Augustus)",
      "(has_clean_engine(Augustus) ⊕ gets_regular_tune(Augustus)) → well_maintained(Augustus)"
    ],
    "background_story": "Augustus was a vintage 1969 Mustang, meticulously restored to its former glory by its owner, a car enthusiast. For years, Augustus cruised the highways, turning heads with its sleek design and powerful engine. However, one fateful night, disaster struck. A reckless driver ran a red light, colliding with Augustus and sending it spinning out of control. The impact was severe, and Augustus suffered extensive damage. The owner was devastated as the insurance company declared Augustus 'totaled', deeming the repairs too costly. Though Augustus would never again hit the open road, its legacy lived on, a reminder of the transience of beauty and the importance of cherishing every moment.",
    "name": "Augustus",
    "keyword": "totaled",
    "subject_category": "car"
  },
  {
    "facts": [
      "Meir does not create compounds.",
      "Meir does not study isomers.",
      "Meir investigates properties.",
      "Meir does not design experiments."
    ],
    "facts_fol": [
      "¬create_compounds(Meir)",
      "¬study_isomers(Meir)",
      "investigate_properties(Meir)",
      "¬design_experiments(Meir)"
    ],
    "rules": [
      "If Meir studies isomers, then he either develops new drugs or advances the field of stereochemistry, but not both.",
      "If Meir either analyzes molecules or creates compounds (but not both), then he advances the field of stereochemistry.",
      "If Meir understands structures, then he analyzes molecules.",
      "If Meir investigates properties, then he either understands structures or designs experiments, but not both."
    ],
    "rules_fol": [
      "study_isomers(Meir) → (develop_new_drugs(Meir) ⊕ advance_stereochemistry(Meir))",
      "(analyze_molecules(Meir) ⊕ create_compounds(Meir)) → advance_stereochemistry(Meir)",
      "understand_structures(Meir) → analyze_molecules(Meir)",
      "investigate_properties(Meir) → (understand_structures(Meir) ⊕ design_experiments(Meir))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Meir pursues research, then he advances the field of stereochemistry.",
      "Every scientist who researches chemistry either analyzes molecules or synthesizes materials.",
      "If Meir either identifies patterns or models reactions (but not both), then he understands structures."
    ],
    "distracting_rules_fol": [
      "pursue_research(Meir) → advance_stereochemistry(Meir)",
      "∀x (research_chemistry(x) → (analyze_molecules(x) ∨ synthesize_materials(x)))",
      "(identify_patterns(Meir) ⊕ model_reactions(Meir)) → understand_structures(Meir)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Meir investigates properties.",
          "Meir does not design experiments."
        ],
        "rules": "If Meir investigates properties, then he either understands structures or designs experiments, but not both.",
        "conclusion": "Meir understands structures."
      },
      {
        "facts": [
          "Meir understands structures."
        ],
        "rules": "If Meir understands structures, then he analyzes molecules.",
        "conclusion": "Meir analyzes molecules."
      },
      {
        "facts": [
          "Meir analyzes molecules.",
          "Meir does not create compounds."
        ],
        "rules": "If Meir either analyzes molecules or creates compounds (but not both), then he advances the field of stereochemistry.",
        "conclusion": "Meir advances the field of stereochemistry."
      },
      {
        "facts": [
          "Meir does not study isomers.",
          "Meir advances the field of stereochemistry."
        ],
        "rules": "If Meir studies isomers, then he either develops new drugs or advances the field of stereochemistry, but not both.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "investigate_properties(Meir)",
          "¬design_experiments(Meir)"
        ],
        "rules": "investigate_properties(Meir) → (understand_structures(Meir) ⊕ design_experiments(Meir))",
        "conclusion": "understand_structures(Meir)"
      },
      {
        "facts": [
          "understand_structures(Meir)"
        ],
        "rules": "understand_structures(Meir) → analyze_molecules(Meir)",
        "conclusion": "analyze_molecules(Meir)"
      },
      {
        "facts": [
          "analyze_molecules(Meir)",
          "¬create_compounds(Meir)"
        ],
        "rules": "(analyze_molecules(Meir) ⊕ create_compounds(Meir)) → advance_stereochemistry(Meir)",
        "conclusion": "advance_stereochemistry(Meir)"
      },
      {
        "facts": [
          "¬study_isomers(Meir)",
          "advance_stereochemistry(Meir)"
        ],
        "rules": "study_isomers(Meir) → (develop_new_drugs(Meir) ⊕ advance_stereochemistry(Meir))",
        "conclusion": null
      }
    ],
    "conclusion": "Meir does not develop new drugs.",
    "conclusion_fol": "¬develop_new_drugs(Meir)",
    "answer": "Uncertain",
    "context": [
      "Meir investigates properties.",
      "Meir does not design experiments.",
      "If Meir investigates properties, then he either understands structures or designs experiments, but not both.",
      "If Meir understands structures, then he analyzes molecules.",
      "Meir does not create compounds.",
      "If Meir either analyzes molecules or creates compounds (but not both), then he advances the field of stereochemistry.",
      "Meir does not study isomers.",
      "If Meir studies isomers, then he either develops new drugs or advances the field of stereochemistry, but not both."
    ],
    "context_fol": [
      "investigate_properties(Meir)",
      "¬design_experiments(Meir)",
      "investigate_properties(Meir) → (understand_structures(Meir) ⊕ design_experiments(Meir))",
      "understand_structures(Meir) → analyze_molecules(Meir)",
      "¬create_compounds(Meir)",
      "(analyze_molecules(Meir) ⊕ create_compounds(Meir)) → advance_stereochemistry(Meir)",
      "¬study_isomers(Meir)",
      "study_isomers(Meir) → (develop_new_drugs(Meir) ⊕ advance_stereochemistry(Meir))"
    ],
    "background_story": "Meir was a brilliant organic chemist who spent his career studying the ers, molecules with the same molecular formula but different arrangeintricacies of molecular structures. His fascination with isomh. Meir's work focused on the synthesis and applicationments of atoms, led to groundbreaking researce and targeted drugs. His discovery of a n of isomers in pharmaceuticals, aiming to create more effectivtant bacterial infections. Meir's dedication to understandovel isomer of a common antibiotic opened new avenues for treating resisecognition and paved the way for future breakthroughing the subtle differences in isomer configurations earned him international rs in the field of stereochemistry.",
    "name": "Meir",
    "keyword": "isomer",
    "subject_category": "scientist"
  },
  {
    "facts": [
      "Augustus analyzes data.",
      "Augustus makes breakthroughs.",
      "Augustus saves lives.",
      "Augustus does not mix compounds.",
      "Augustus does not develop treatments."
    ],
    "facts_fol": [
      "analyze_data(Augustus)",
      "make_breakthroughs(Augustus)",
      "save_lives(Augustus)",
      "¬mix_compounds(Augustus)",
      "¬develops_treatments(Augustus)"
    ],
    "rules": [
      "Anyone who helps others or finds cures can improve lives.",
      "For Augustus, either he saves lives or helps others, but not necessarily both.",
      "If Augustus tests medications and studies diseases, then he can find cures.",
      "If Augustus mixes compounds or analyzes data, then he can test medications.",
      "Augustus either develops treatments or studies diseases."
    ],
    "rules_fol": [
      "∀x ((help_others(x) ∨ find_cures(x)) → improve_lives(x))",
      "save_lives(Augustus) ⊕ help_others(Augustus)",
      "(tests_medics(Augustus) ∧ studies_disease(Augustus)) → find_cures(Augustus)",
      "(mix_compounds(Augustus) ∨ analyze_data(Augustus)) → tests_medics(Augustus)",
      "develops_treatments(Augustus) ∨ studies_disease(Augustus)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If someone cares deeply, then they work tirelessly and improve lives.",
      "Augustus cares for people or helps others.",
      "If Augustus cares deeply, then he will find cures.",
      "Augustus either creates formulas or tests medications.",
      "Augustus reads books or studies diseases."
    ],
    "distracting_rules_fol": [
      "∀x (care_deeply(x) → (work_tirelessly(x) ∧ improve_lives(x)))",
      "care_for_people(Augustus) ∨ help_others(Augustus)",
      "care_deeply(Augustus) → find_cures(Augustus)",
      "creates_formulas(Augustus) ∨ tests_medics(Augustus)",
      "reads_books(Augustus) ∨ studies_disease(Augustus)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Augustus does not develop treatments."
        ],
        "rules": "Augustus either develops treatments or studies diseases.",
        "conclusion": "Augustus studies diseases."
      },
      {
        "facts": [
          "Augustus does not mix compounds.",
          "Augustus analyzes data."
        ],
        "rules": "If Augustus mixes compounds or analyzes data, then he can test medications.",
        "conclusion": "Augustus tests medications."
      },
      {
        "facts": [
          "Augustus tests medications.",
          "Augustus studies diseases."
        ],
        "rules": "If Augustus tests medications and studies diseases, then he can find cures.",
        "conclusion": "Augustus finds cures."
      },
      {
        "facts": [
          "Augustus saves lives."
        ],
        "rules": "For Augustus, either he saves lives or helps others, but not necessarily both.",
        "conclusion": "Augustus does not help others."
      },
      {
        "facts": [
          "Augustus does not help others.",
          "Augustus finds cures."
        ],
        "rules": "Anyone who helps others or finds cures can improve lives.",
        "conclusion": "Augustus improves lives."
      },
      {
        "facts": [
          "Augustus makes breakthroughs.",
          "Augustus improves lives."
        ],
        "rules": null,
        "conclusion": "If Augustus is a dedicated researcher, then he will make breakthroughs and improve lives."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬develops_treatments(Augustus)"
        ],
        "rules": "develops_treatments(Augustus) ∨ studies_disease(Augustus)",
        "conclusion": "studies_disease(Augustus)"
      },
      {
        "facts": [
          "¬mix_compounds(Augustus)",
          "analyze_data(Augustus)"
        ],
        "rules": "(mix_compounds(Augustus) ∨ analyze_data(Augustus)) → tests_medics(Augustus)",
        "conclusion": "tests_medics(Augustus)"
      },
      {
        "facts": [
          "tests_medics(Augustus)",
          "studies_disease(Augustus)"
        ],
        "rules": "(tests_medics(Augustus) ∧ studies_disease(Augustus)) → find_cures(Augustus)",
        "conclusion": "find_cures(Augustus)"
      },
      {
        "facts": [
          "save_lives(Augustus)"
        ],
        "rules": "save_lives(Augustus) ⊕ help_others(Augustus)",
        "conclusion": "¬help_others(Augustus)"
      },
      {
        "facts": [
          "¬help_others(Augustus)",
          "find_cures(Augustus)"
        ],
        "rules": "∀x ((help_others(x) ∨ find_cures(x)) → improve_lives(x))",
        "conclusion": "improve_lives(Augustus)"
      },
      {
        "facts": [
          "make_breakthroughs(Augustus)",
          "improve_lives(Augustus)"
        ],
        "rules": null,
        "conclusion": "dedicated_researcher(Augustus) → (make_breakthroughs(Augustus) ∧ improve_lives(Augustus))"
      }
    ],
    "conclusion": "If Augustus is a dedicated researcher, then he will make breakthroughs and improve lives.",
    "conclusion_fol": "dedicated_researcher(Augustus) → (make_breakthroughs(Augustus) ∧ improve_lives(Augustus))",
    "answer": "True",
    "context": [
      "Augustus does not develop treatments.",
      "Augustus either develops treatments or studies diseases.",
      "Augustus does not mix compounds.",
      "Augustus analyzes data.",
      "If Augustus mixes compounds or analyzes data, then he can test medications.",
      "If Augustus tests medications and studies diseases, then he can find cures.",
      "Augustus saves lives.",
      "For Augustus, either he saves lives or helps others, but not necessarily both.",
      "Anyone who helps others or finds cures can improve lives.",
      "Augustus makes breakthroughs."
    ],
    "context_fol": [
      "¬develops_treatments(Augustus)",
      "develops_treatments(Augustus) ∨ studies_disease(Augustus)",
      "¬mix_compounds(Augustus)",
      "analyze_data(Augustus)",
      "(mix_compounds(Augustus) ∨ analyze_data(Augustus)) → tests_medics(Augustus)",
      "(tests_medics(Augustus) ∧ studies_disease(Augustus)) → find_cures(Augustus)",
      "save_lives(Augustus)",
      "save_lives(Augustus) ⊕ help_others(Augustus)",
      "∀x ((help_others(x) ∨ find_cures(x)) → improve_lives(x))",
      "make_breakthroughs(Augustus)"
    ],
    "background_story": "Augustus was a brilliant pharmacist who dedicated his life to finding the perfect dose of medication to cure a rare disease. His sister had fallen ill with the condition, and he became determined to save her. Augustus spent years researching and experimenting, testing different combinations and dosages. Finally, after a decade of tireless work, he discovered the exact dose required to balance the medication's efficacy with its potential side effects. His breakthrough led to the development of a new treatment, saving countless lives, including his sister's. Augustus's work reminded everyone that even the smallest dose can make a huge difference when administered with precision and care.",
    "name": "Augustus",
    "keyword": "dose",
    "subject_category": "human"
  },
  {
    "facts": [
      "Anakin optimizes energy.",
      "Anakin eats rare sugar.",
      "Anakin makes special enzymes."
    ],
    "facts_fol": [
      "optimizes_energy(Anakin)",
      "eats_rare_sugar(Anakin)",
      "makes_special_enzyme(Anakin)"
    ],
    "rules": [
      "For every bacterial cell, it either has the Anakin switch or lacks the Anakin switch, but not both.",
      "If Anakin thrives in sugar and optimizes energy, then he has the Anakin switch.",
      "For all bacterial cells, if they eat rare sugar and make special enzymes, then they thrive in sugar."
    ],
    "rules_fol": [
      "∀x (has_Anakin_switch(x) ⊕ lacks_Anakin_switch(x))",
      "(thrives_in_sugar(Anakin) ∧ optimizes_energy(Anakin)) → has_Anakin_switch(Anakin)",
      "∀x ((eats_rare_sugar(x) ∧ makes_special_enzyme(x)) → thrives_in_sugar(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If a bacterial cell like Anakin regulates metabolism or adapts quickly, then it has the Anakin switch.",
      "If Anakin metabolizes efficiently, then he thrives in sugar."
    ],
    "distracting_rules_fol": [
      "(regulates_metabolism(Anakin) ∨ adapts_quickly(Anakin)) → has_Anakin_switch(Anakin)",
      "metabolizes_efficiently(Anakin) → thrives_in_sugar(Anakin)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Anakin eats rare sugar.",
          "Anakin makes special enzymes."
        ],
        "rules": "For all bacterial cells, if they eat rare sugar and make special enzymes, then they thrive in sugar.",
        "conclusion": "Anakin thrives in sugar."
      },
      {
        "facts": [
          "Anakin thrives in sugar.",
          "Anakin optimizes energy."
        ],
        "rules": "If Anakin thrives in sugar and optimizes energy, then he has the Anakin switch.",
        "conclusion": "Anakin is equipped with the Anakin switch."
      },
      {
        "facts": [
          "Anakin is equipped with the Anakin switch."
        ],
        "rules": "For every bacterial cell, it either has the Anakin switch or lacks the Anakin switch, but not both.",
        "conclusion": "The bacterial cell Anakin lacks the Anakin switch."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "eats_rare_sugar(Anakin)",
          "makes_special_enzyme(Anakin)"
        ],
        "rules": "∀x ((eats_rare_sugar(x) ∧ makes_special_enzyme(x)) → thrives_in_sugar(x))",
        "conclusion": "thrives_in_sugar(Anakin)"
      },
      {
        "facts": [
          "thrives_in_sugar(Anakin)",
          "optimizes_energy(Anakin)"
        ],
        "rules": "(thrives_in_sugar(Anakin) ∧ optimizes_energy(Anakin)) → has_Anakin_switch(Anakin)",
        "conclusion": "has_Anakin_switch(Anakin)"
      },
      {
        "facts": [
          "has_Anakin_switch(Anakin)"
        ],
        "rules": "∀x (has_Anakin_switch(x) ⊕ lacks_Anakin_switch(x))",
        "conclusion": "lacks_Anakin_switch(Anakin)"
      }
    ],
    "conclusion": "The bacterial cell Anakin lacks the Anakin switch.",
    "conclusion_fol": "lacks_Anakin_switch(Anakin)",
    "answer": "False",
    "context": [
      "Anakin eats rare sugar.",
      "Anakin makes special enzymes.",
      "For all bacterial cells, if they eat rare sugar and make special enzymes, then they thrive in sugar.",
      "Anakin optimizes energy.",
      "If Anakin thrives in sugar and optimizes energy, then he has the Anakin switch.",
      "For every bacterial cell, it either has the Anakin switch or lacks the Anakin switch, but not both."
    ],
    "context_fol": [
      "eats_rare_sugar(Anakin)",
      "makes_special_enzyme(Anakin)",
      "∀x ((eats_rare_sugar(x) ∧ makes_special_enzyme(x)) → thrives_in_sugar(x))",
      "optimizes_energy(Anakin)",
      "(thrives_in_sugar(Anakin) ∧ optimizes_energy(Anakin)) → has_Anakin_switch(Anakin)",
      "∀x (has_Anakin_switch(x) ⊕ lacks_Anakin_switch(x))"
    ],
    "background_story": "In a microscopic world, Anakin was a peculiar bacterium with a unique genetic makeup. Within his DNA, a specific operon regulated the production of enzymes crucial for metabolizing a rare sugar. This operon, named 'Anakin's switch,' was highly efficient, allowing him to thrive in environments where others would struggle. As Anakin navigated through the sugary broth, his operon worked tirelessly, switching on and off to optimize energy production. His remarkable adaptability caught the attention of a team of scientists, who studied Anakin to understand the intricacies of gene regulation. The discovery of 'Anakin's switch' operon opened new avenues for research into bacterial genetics and metabolism, making Anakin an unlikely hero in the field of microbiology.",
    "name": "Anakin",
    "keyword": "operon",
    "subject_category": "bacterial cell"
  },
  {
    "facts": [
      "Tiger does not alter words.",
      "Tiger adds vowels.",
      "Tiger is widespread.",
      "Tiger enhances clarity.",
      "Tiger eases articulation."
    ],
    "facts_fol": [
      "¬alters_words(Tiger)",
      "adds_vowels(Tiger)",
      "is_widespread(Tiger)",
      "enhances_clarity(Tiger)",
      "eases_articulation(Tiger)"
    ],
    "rules": [
      "For all linguistic phenomena, if a phenomenon occurs frequently, then it affects pronunciation and influences language evolution.",
      "Any linguistic phenomenon that alters words either simplifies spelling or affects pronunciation.",
      "If epenthesis adds vowels or modifies sound, then it can simplify spelling.",
      "If epenthesis is widespread, then it either occurs frequently or enhances clarity, but not both.",
      "Any linguistic phenomenon that eases articulation will modify the sound."
    ],
    "rules_fol": [
      "∀x (occurs_frequently(x) → (affects_pronunciation(x) ∧ influences_language_evolution(x)))",
      "∀x (alters_words(x) → (simplifies_spelling(x) ∨ affects_pronunciation(x)))",
      "(adds_vowels(Tiger) ∨ modifies_sound(Tiger)) → simplifies_spelling(Tiger)",
      "is_widespread(Tiger) → (occurs_frequently(Tiger) ⊕ enhances_clarity(Tiger))",
      "∀x (eases_articulation(x) → modifies_sound(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If epenthesis changes meaning, then it either alters syntax or affects pronunciation, but not both.",
      "Epenthesis simplifies spelling if it eases reading.",
      "If epenthesis shapes morphology, then it occurs frequently and impacts semantics.",
      "All linguistic phenomena that involve epenthesis modify sound and facilitate expression."
    ],
    "distracting_rules_fol": [
      "changes_meaning(Tiger) → (alters_syntax(Tiger) ⊕ affects_pronunciation(Tiger))",
      "eases_reading(Tiger) → simplifies_spelling(Tiger)",
      "shapes_morphology(Tiger) → (occurs_frequently(Tiger) ∧ impacts_semantics(Tiger))",
      "∀x (involves_epenthesis(x) → (modifies_sound(x) ∧ facilitates_expression(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Tiger eases articulation."
        ],
        "rules": "Any linguistic phenomenon that eases articulation will modify the sound.",
        "conclusion": "Tiger modifies sound."
      },
      {
        "facts": [
          "Tiger is widespread.",
          "Tiger enhances clarity."
        ],
        "rules": "If epenthesis is widespread, then it either occurs frequently or enhances clarity, but not both.",
        "conclusion": "Epenthesis does not occur frequently."
      },
      {
        "facts": [
          "Tiger adds vowels.",
          "Tiger modifies sound."
        ],
        "rules": "If epenthesis adds vowels or modifies sound, then it can simplify spelling.",
        "conclusion": "Tiger simplifies spelling."
      },
      {
        "facts": [
          "Tiger does not alter words.",
          "Tiger simplifies spelling."
        ],
        "rules": "Any linguistic phenomenon that alters words either simplifies spelling or affects pronunciation.",
        "conclusion": null
      },
      {
        "facts": [
          "Epenthesis does not occur frequently."
        ],
        "rules": "For all linguistic phenomena, if a phenomenon occurs frequently, then it affects pronunciation and influences language evolution.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "eases_articulation(Tiger)"
        ],
        "rules": "∀x (eases_articulation(x) → modifies_sound(x))",
        "conclusion": "modifies_sound(Tiger)"
      },
      {
        "facts": [
          "is_widespread(Tiger)",
          "enhances_clarity(Tiger)"
        ],
        "rules": "is_widespread(Tiger) → (occurs_frequently(Tiger) ⊕ enhances_clarity(Tiger))",
        "conclusion": "¬occurs_frequently(Tiger)"
      },
      {
        "facts": [
          "adds_vowels(Tiger)",
          "modifies_sound(Tiger)"
        ],
        "rules": "(adds_vowels(Tiger) ∨ modifies_sound(Tiger)) → simplifies_spelling(Tiger)",
        "conclusion": "simplifies_spelling(Tiger)"
      },
      {
        "facts": [
          "¬alters_words(Tiger)",
          "simplifies_spelling(Tiger)"
        ],
        "rules": "∀x (alters_words(x) → (simplifies_spelling(x) ∨ affects_pronunciation(x)))",
        "conclusion": null
      },
      {
        "facts": [
          "¬occurs_frequently(Tiger)"
        ],
        "rules": "∀x (occurs_frequently(x) → (affects_pronunciation(x) ∧ influences_language_evolution(x)))",
        "conclusion": null
      }
    ],
    "conclusion": "Epenthesis does not influence language evolution.",
    "conclusion_fol": "¬influences_language_evolution(Tiger)",
    "answer": "Uncertain",
    "context": [
      "Tiger eases articulation.",
      "Any linguistic phenomenon that eases articulation will modify the sound.",
      "Tiger is widespread.",
      "Tiger enhances clarity.",
      "If epenthesis is widespread, then it either occurs frequently or enhances clarity, but not both.",
      "Tiger adds vowels.",
      "If epenthesis adds vowels or modifies sound, then it can simplify spelling.",
      "Tiger does not alter words.",
      "Any linguistic phenomenon that alters words either simplifies spelling or affects pronunciation.",
      "For all linguistic phenomena, if a phenomenon occurs frequently, then it affects pronunciation and influences language evolution."
    ],
    "context_fol": [
      "eases_articulation(Tiger)",
      "∀x (eases_articulation(x) → modifies_sound(x))",
      "is_widespread(Tiger)",
      "enhances_clarity(Tiger)",
      "is_widespread(Tiger) → (occurs_frequently(Tiger) ⊕ enhances_clarity(Tiger))",
      "adds_vowels(Tiger)",
      "(adds_vowels(Tiger) ∨ modifies_sound(Tiger)) → simplifies_spelling(Tiger)",
      "¬alters_words(Tiger)",
      "∀x (alters_words(x) → (simplifies_spelling(x) ∨ affects_pronunciation(x)))",
      "∀x (occurs_frequently(x) → (affects_pronunciation(x) ∧ influences_language_evolution(x)))"
    ],
    "background_story": "Tiger was a linguistics enthusiast who spent most of his days studying the intricacies of language. One concept that fascinated him was epenthesis, the process of adding a sound or syllable to a word to make it easier to pronounce. Tiger noticed that in his native language, epenthesis occurred frequently, especially when borrowing words from other languages. He spent years researching and documenting examples of epenthesis, from the insertion of vowels in Arabic loanwords to the addition of consonants in Japanese adaptations. Tiger's work shed new light on this phenomenon, and his findings were published in a prestigious linguistic journal. His research helped linguists better understand the complexities of language evolution and the role of epenthesis in shaping the sound and structure of words.",
    "name": "Tiger",
    "keyword": "epenthesis",
    "subject_category": "linguistic phenomenon"
  },
  {
    "facts": [
      "Zahra does not find solutions.",
      "Zahra studies infinity.",
      "Zahra does not think critically.",
      "Zahra analyzes data."
    ],
    "facts_fol": [
      "¬find_solutions(Zahra)",
      "study_infinity(Zahra)",
      "¬think_critically(Zahra)",
      "analyze_data(Zahra)"
    ],
    "rules": [
      "If Zahra studies infinity and understands finite constraints, then she can make groundbreaking discoveries.",
      "If Zahra explores patterns, then she understands finite constraints and sees beyond limits.",
      "For Zahra, either she finds solutions or explores patterns, but not both at the same time.",
      "Anyone who thinks critically or analyzes data can see beyond limits."
    ],
    "rules_fol": [
      "(study_infinity(Zahra) ∧ understand_finite_constraints(Zahra)) → make_groundbreaking_discoveries(Zahra)",
      "explore_patterns(Zahra) → (understand_finite_constraints(Zahra) ∧ see_beyond_limits(Zahra))",
      "find_solutions(Zahra) ⊕ explore_patterns(Zahra)",
      "∀x ((think_critically(x) ∨ analyze_data(x)) → see_beyond_limits(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Everyone grasps concepts or understands finite constraints.",
      "Everyone who investigates structures either recognizes connections or explores patterns.",
      "Anyone who investigates phenomena either sees beyond limits or recognizes connections."
    ],
    "distracting_rules_fol": [
      "∀x (grasp_concepts(x) ∨ understand_finite_constraints(x))",
      "∀x (investigate_structures(x) → (recognize_connections(x) ∨ explore_patterns(x)))",
      "∀x (investigate_phenomena(x) → (see_beyond_limits(x) ∨ recognize_connections(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Zahra does not think critically.",
          "Zahra analyzes data."
        ],
        "rules": "Anyone who thinks critically or analyzes data can see beyond limits.",
        "conclusion": "Zahra sees beyond limits."
      },
      {
        "facts": [
          "Zahra does not find solutions."
        ],
        "rules": "For Zahra, either she finds solutions or explores patterns, but not both at the same time.",
        "conclusion": "Zahra explores patterns."
      },
      {
        "facts": [
          "Zahra explores patterns.",
          "Zahra sees beyond limits."
        ],
        "rules": "If Zahra explores patterns, then she understands finite constraints and sees beyond limits.",
        "conclusion": "Zahra understands finite constraints."
      },
      {
        "facts": [
          "Zahra studies infinity.",
          "Zahra understands finite constraints."
        ],
        "rules": "If Zahra studies infinity and understands finite constraints, then she can make groundbreaking discoveries.",
        "conclusion": "Zahra makes groundbreaking discoveries."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬think_critically(Zahra)",
          "analyze_data(Zahra)"
        ],
        "rules": "∀x ((think_critically(x) ∨ analyze_data(x)) → see_beyond_limits(x))",
        "conclusion": "see_beyond_limits(Zahra)"
      },
      {
        "facts": [
          "¬find_solutions(Zahra)"
        ],
        "rules": "find_solutions(Zahra) ⊕ explore_patterns(Zahra)",
        "conclusion": "explore_patterns(Zahra)"
      },
      {
        "facts": [
          "explore_patterns(Zahra)",
          "see_beyond_limits(Zahra)"
        ],
        "rules": "explore_patterns(Zahra) → (understand_finite_constraints(Zahra) ∧ see_beyond_limits(Zahra))",
        "conclusion": "understand_finite_constraints(Zahra)"
      },
      {
        "facts": [
          "study_infinity(Zahra)",
          "understand_finite_constraints(Zahra)"
        ],
        "rules": "(study_infinity(Zahra) ∧ understand_finite_constraints(Zahra)) → make_groundbreaking_discoveries(Zahra)",
        "conclusion": "make_groundbreaking_discoveries(Zahra)"
      }
    ],
    "conclusion": "Zahra makes groundbreaking discoveries.",
    "conclusion_fol": "make_groundbreaking_discoveries(Zahra)",
    "answer": "True",
    "context": [
      "Zahra does not think critically.",
      "Zahra analyzes data.",
      "Anyone who thinks critically or analyzes data can see beyond limits.",
      "Zahra does not find solutions.",
      "For Zahra, either she finds solutions or explores patterns, but not both at the same time.",
      "If Zahra explores patterns, then she understands finite constraints and sees beyond limits.",
      "Zahra studies infinity.",
      "If Zahra studies infinity and understands finite constraints, then she can make groundbreaking discoveries."
    ],
    "context_fol": [
      "¬think_critically(Zahra)",
      "analyze_data(Zahra)",
      "∀x ((think_critically(x) ∨ analyze_data(x)) → see_beyond_limits(x))",
      "¬find_solutions(Zahra)",
      "find_solutions(Zahra) ⊕ explore_patterns(Zahra)",
      "explore_patterns(Zahra) → (understand_finite_constraints(Zahra) ∧ see_beyond_limits(Zahra))",
      "study_infinity(Zahra)",
      "(study_infinity(Zahra) ∧ understand_finite_constraints(Zahra)) → make_groundbreaking_discoveries(Zahra)"
    ],
    "background_story": "Zahra, a brilliant mathematician, had always been fascinated by the concept of infinity. She spent her career studying the intricacies of infinite series and their applications. However, as she delved deeper into her research, Zahra began to realize the importance of the finite in a seemingly infinite universe. She discovered that even within infinite sets, there existed finitely defined patterns and structures. This epiphany led her to develop a groundbreaking theory that explained how finite constraints could give rise to infinite possibilities. Zahra's work revolutionized the field of mathematics, showing that the finite and infinite were not mutually exclusive, but intertwined aspects of the universe. Her findings had far-reaching implications, from physics to philosophy, and cemented her legacy as a pioneer in her field.",
    "name": "Zahra",
    "keyword": "finitely",
    "subject_category": "human"
  },
  {
    "facts": [
      "Mason is a leader.",
      "Mason is dishonest.",
      "Mason is driven.",
      "Mason is not wealthy."
    ],
    "facts_fol": [
      "leader(Mason)",
      "dishonest(Mason)",
      "driven(Mason)",
      "¬wealthy(Mason)"
    ],
    "rules": [
      "If Mason is ambitious, then he is either successful or unethical, but not both.",
      "Mason either has integrity or is ambitious, but not both.",
      "If Mason is a leader, then he is either dishonest or has integrity, but not both.",
      "If Mason is driven, then he is either successful or wealthy (or both)."
    ],
    "rules_fol": [
      "ambitious(Mason) → (successful(Mason) ⊕ unethical(Mason))",
      "has_integrity(Mason) ⊕ ambitious(Mason)",
      "leader(Mason) → (dishonest(Mason) ⊕ has_integrity(Mason))",
      "driven(Mason) → (successful(Mason) ∨ wealthy(Mason))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Anyone who takes risks or sets goals is ambitious.",
      "If Mason either tells the truth or keeps promises (but not both), then he has integrity.",
      "If Mason is talented, then he is both confident and successful."
    ],
    "distracting_rules_fol": [
      "∀x ((takes_risks(x) ∨ sets_goals(x)) → ambitious(x))",
      "(tells_truth(Mason) ⊕ keeps_promises(Mason)) → has_integrity(Mason)",
      "talented(Mason) → (confident(Mason) ∧ successful(Mason))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Mason is driven.",
          "Mason is not wealthy."
        ],
        "rules": "If Mason is driven, then he is either successful or wealthy (or both).",
        "conclusion": "Mason is successful."
      },
      {
        "facts": [
          "Mason is a leader.",
          "Mason is dishonest."
        ],
        "rules": "If Mason is a leader, then he is either dishonest or has integrity, but not both.",
        "conclusion": "Mason does not have integrity."
      },
      {
        "facts": [
          "Mason does not have integrity."
        ],
        "rules": "Mason either has integrity or is ambitious, but not both.",
        "conclusion": "Mason is ambitious."
      },
      {
        "facts": [
          "Mason is ambitious.",
          "Mason is successful."
        ],
        "rules": "If Mason is ambitious, then he is either successful or unethical, but not both.",
        "conclusion": "Mason is not unethical."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "driven(Mason)",
          "¬wealthy(Mason)"
        ],
        "rules": "driven(Mason) → (successful(Mason) ∨ wealthy(Mason))",
        "conclusion": "successful(Mason)"
      },
      {
        "facts": [
          "leader(Mason)",
          "dishonest(Mason)"
        ],
        "rules": "leader(Mason) → (dishonest(Mason) ⊕ has_integrity(Mason))",
        "conclusion": "¬has_integrity(Mason)"
      },
      {
        "facts": [
          "¬has_integrity(Mason)"
        ],
        "rules": "has_integrity(Mason) ⊕ ambitious(Mason)",
        "conclusion": "ambitious(Mason)"
      },
      {
        "facts": [
          "ambitious(Mason)",
          "successful(Mason)"
        ],
        "rules": "ambitious(Mason) → (successful(Mason) ⊕ unethical(Mason))",
        "conclusion": "¬unethical(Mason)"
      }
    ],
    "conclusion": "Mason is not unethical.",
    "conclusion_fol": "¬unethical(Mason)",
    "answer": "True",
    "context": [
      "Mason is driven.",
      "Mason is not wealthy.",
      "If Mason is driven, then he is either successful or wealthy (or both).",
      "Mason is a leader.",
      "Mason is dishonest.",
      "If Mason is a leader, then he is either dishonest or has integrity, but not both.",
      "Mason either has integrity or is ambitious, but not both.",
      "If Mason is ambitious, then he is either successful or unethical, but not both."
    ],
    "context_fol": [
      "driven(Mason)",
      "¬wealthy(Mason)",
      "driven(Mason) → (successful(Mason) ∨ wealthy(Mason))",
      "leader(Mason)",
      "dishonest(Mason)",
      "leader(Mason) → (dishonest(Mason) ⊕ has_integrity(Mason))",
      "has_integrity(Mason) ⊕ ambitious(Mason)",
      "ambitious(Mason) → (successful(Mason) ⊕ unethical(Mason))"
    ],
    "background_story": "Mason was a young executive who rose to prominence quickly, but his success was marred by controversy. He was known for his ruthless business tactics, often stepping on others to get ahead. When his company's financial reports were found to be falsified, Mason was at the center of the scandal. Despite attempts to shift the blame to his subordinates, it became clear that he was the mastermind behind the deception. Mason's blameworthiness was undeniable, and he was held accountable for his actions. The scandal led to his downfall, serving as a cautionary tale about the dangers of unchecked ambition and the importance of ethics in leadership.",
    "name": "Mason",
    "keyword": "blameworthiness",
    "subject_category": "human"
  },
  {
    "facts": [
      "Leandro is diligent.",
      "Leandro is not thorough.",
      "Leandro cleans thoroughly.",
      "Leandro does not organize spaces."
    ],
    "facts_fol": [
      "is_diligent(Leandro)",
      "¬is_thorough(Leandro)",
      "cleans_thoroughly(Leandro)",
      "¬organizes_spaces(Leandro)"
    ],
    "rules": [
      "For all humans, if they work hard or are kind (or both), then they make a positive impact.",
      "For Leandro, being diligent and being kind are mutually exclusive, yet he embodies one of these traits, making him a valuable member of the community.",
      "Everyone who takes pride in their work will work hard.",
      "If Leandro is either thorough or meticulous (but not both), then he takes pride in his work.",
      "If Leandro either cleans thoroughly or organizes spaces (but not both), then he is meticulous."
    ],
    "rules_fol": [
      "∀x ((works_hard(x) ∨ is_kind(x)) → makes_a_positive_impact(x))",
      "is_diligent(Leandro) ⊕ is_kind(Leandro)",
      "∀x (takes_pride(x) → works_hard(x))",
      "(is_thorough(Leandro) ⊕ is_meticulous(Leandro)) → takes_pride(Leandro)",
      "(cleans_thoroughly(Leandro) ⊕ organizes_spaces(Leandro)) → is_meticulous(Leandro)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Leandro is kind because he cares deeply about the people around him.",
      "If Leandro is reliable, then he either works hard or is helpful, but not both.",
      "If someone enjoys their job and cares deeply about their work, then they take pride in it.",
      "If someone pays attention to details and has patience, then they are meticulous."
    ],
    "distracting_rules_fol": [
      "cares_deeply(Leandro) → is_kind(Leandro)",
      "is_reliable(Leandro) → (works_hard(Leandro) ⊕ is_helpful(Leandro))",
      "∀x ((enjoys_job(x) ∧ cares_deeply(x)) → takes_pride(x))",
      "∀x ((pays_attention(x) ∧ has_patience(x)) → is_meticulous(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Leandro cleans thoroughly.",
          "Leandro does not organize spaces."
        ],
        "rules": "If Leandro either cleans thoroughly or organizes spaces (but not both), then he is meticulous.",
        "conclusion": "Leandro is meticulous."
      },
      {
        "facts": [
          "Leandro is not thorough.",
          "Leandro is meticulous."
        ],
        "rules": "If Leandro is either thorough or meticulous (but not both), then he takes pride in his work.",
        "conclusion": "Leandro takes pride in his work."
      },
      {
        "facts": [
          "Leandro takes pride in his work."
        ],
        "rules": "Everyone who takes pride in their work will work hard.",
        "conclusion": "Leandro works hard."
      },
      {
        "facts": [
          "Leandro is diligent."
        ],
        "rules": "For Leandro, being diligent and being kind are mutually exclusive, yet he embodies one of these traits, making him a valuable member of the community.",
        "conclusion": "Leandro is not kind."
      },
      {
        "facts": [
          "Leandro works hard.",
          "Leandro is not kind."
        ],
        "rules": "For all humans, if they work hard or are kind (or both), then they make a positive impact.",
        "conclusion": "Leandro makes a positive impact."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "cleans_thoroughly(Leandro)",
          "¬organizes_spaces(Leandro)"
        ],
        "rules": "(cleans_thoroughly(Leandro) ⊕ organizes_spaces(Leandro)) → is_meticulous(Leandro)",
        "conclusion": "is_meticulous(Leandro)"
      },
      {
        "facts": [
          "¬is_thorough(Leandro)",
          "is_meticulous(Leandro)"
        ],
        "rules": "(is_thorough(Leandro) ⊕ is_meticulous(Leandro)) → takes_pride(Leandro)",
        "conclusion": "takes_pride(Leandro)"
      },
      {
        "facts": [
          "takes_pride(Leandro)"
        ],
        "rules": "∀x (takes_pride(x) → works_hard(x))",
        "conclusion": "works_hard(Leandro)"
      },
      {
        "facts": [
          "is_diligent(Leandro)"
        ],
        "rules": "is_diligent(Leandro) ⊕ is_kind(Leandro)",
        "conclusion": "¬is_kind(Leandro)"
      },
      {
        "facts": [
          "works_hard(Leandro)",
          "¬is_kind(Leandro)"
        ],
        "rules": "∀x ((works_hard(x) ∨ is_kind(x)) → makes_a_positive_impact(x))",
        "conclusion": "makes_a_positive_impact(Leandro)"
      }
    ],
    "conclusion": "Leandro makes a positive impact.",
    "conclusion_fol": "makes_a_positive_impact(Leandro)",
    "answer": "True",
    "context": [
      "Leandro cleans thoroughly.",
      "Leandro does not organize spaces.",
      "If Leandro either cleans thoroughly or organizes spaces (but not both), then he is meticulous.",
      "Leandro is not thorough.",
      "If Leandro is either thorough or meticulous (but not both), then he takes pride in his work.",
      "Everyone who takes pride in their work will work hard.",
      "Leandro is diligent.",
      "For Leandro, being diligent and being kind are mutually exclusive, yet he embodies one of these traits, making him a valuable member of the community.",
      "For all humans, if they work hard or are kind (or both), then they make a positive impact."
    ],
    "context_fol": [
      "cleans_thoroughly(Leandro)",
      "¬organizes_spaces(Leandro)",
      "(cleans_thoroughly(Leandro) ⊕ organizes_spaces(Leandro)) → is_meticulous(Leandro)",
      "¬is_thorough(Leandro)",
      "(is_thorough(Leandro) ⊕ is_meticulous(Leandro)) → takes_pride(Leandro)",
      "∀x (takes_pride(x) → works_hard(x))",
      "is_diligent(Leandro)",
      "is_diligent(Leandro) ⊕ is_kind(Leandro)",
      "∀x ((works_hard(x) ∨ is_kind(x)) → makes_a_positive_impact(x))"
    ],
    "background_story": "Leandro worked as a janitor at a local high school, often going unnoticed by the bustling students and faculty. However, his diligence and dedication to his work didn't go unappreciated. Every morning, Leandro would arrive before dawn to ensure the hallways were spotless and the classrooms were tidy. He took pride in his work, often going above and beyond to make the school a welcoming environment. Leandro's kindness and generosity also extended beyond his janitorial duties. He would often help students who were struggling, offering words of encouragement and support. Despite being behind the scenes, Leandro was the backbone of the school, keeping everything running smoothly and making a positive impact on the lives of those around him.",
    "name": "Leandro",
    "keyword": "janitor",
    "subject_category": "human"
  },
  {
    "facts": [
      "Jordan is spontaneous.",
      "Jordan enjoys taking risks.",
      "Jordan values stability.",
      "Jordan chases his dreams."
    ],
    "facts_fol": [
      "is_spontaneous(Jordan)",
      "enjoy_risk(Jordan)",
      "values_stability(Jordan)",
      "chase_dreams(Jordan)"
    ],
    "rules": [
      "If Jordan is spontaneous, then he either craves exploration or seeks adventure, but not both.",
      "Jordan loves travel or craves exploration.",
      "Jordan either values stability or loves to travel, but not both.",
      "Jordan either pursues his passion or lives life to the fullest.",
      "Anyone who takes risks or chases their dreams pursues their passion."
    ],
    "rules_fol": [
      "is_spontaneous(Jordan) → (crave_exploration(Jordan) ⊕ seek_adventure(Jordan))",
      "loves_travel(Jordan) ∨ crave_exploration(Jordan)",
      "values_stability(Jordan) ⊕ loves_travel(Jordan)",
      "pursue_passion(Jordan) ∨ live_life_fully(Jordan)",
      "∀x ((takes_risks(x) ∨ chase_dreams(x)) → pursue_passion(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Every fearless person either seeks adventure or tries new things.",
      "If someone has curiosity and seeks challenge, then they crave exploration.",
      "If Jordan is adventurous, then he loves to travel and capture moments.",
      "If Jordan is adventurous, then he either has curiosity or lives life to the fullest, but not both.",
      "If someone has energy and seeks challenge, then they pursue their passion."
    ],
    "distracting_rules_fol": [
      "∀x (fearless_person(x) → (seek_adventure(x) ∨ try_new_things(x)))",
      "∀x ((has_curiosity(x) ∧ seeks_challenge(x)) → crave_exploration(x))",
      "is_adventurous(Jordan) → (loves_travel(Jordan) ∧ capture_moments(Jordan))",
      "is_adventurous(Jordan) → (has_curiosity(Jordan) ⊕ live_life_fully(Jordan))",
      "∀x ((has_energy(x) ∧ seeks_challenge(x)) → pursue_passion(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Jordan chases his dreams."
        ],
        "rules": "Anyone who takes risks or chases their dreams pursues their passion.",
        "conclusion": "Jordan pursues his passion."
      },
      {
        "facts": [
          "Jordan pursues his passion."
        ],
        "rules": "Jordan either pursues his passion or lives life to the fullest.",
        "conclusion": null
      },
      {
        "facts": [
          "Jordan values stability."
        ],
        "rules": "Jordan either values stability or loves to travel, but not both.",
        "conclusion": "Jordan does not love travel."
      },
      {
        "facts": [
          "Jordan does not love travel."
        ],
        "rules": "Jordan loves travel or craves exploration.",
        "conclusion": "Jordan craves exploration."
      },
      {
        "facts": [
          "Jordan is spontaneous.",
          "Jordan craves exploration."
        ],
        "rules": "If Jordan is spontaneous, then he either craves exploration or seeks adventure, but not both.",
        "conclusion": "Jordan does not seek adventure."
      },
      {
        "facts": [
          "Jordan does not seek adventure.",
          "Jordan enjoys taking risks."
        ],
        "rules": null,
        "conclusion": "Jordan seeks adventure, enjoys taking risks and lives his life to the fullest."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "chase_dreams(Jordan)"
        ],
        "rules": "∀x ((takes_risks(x) ∨ chase_dreams(x)) → pursue_passion(x))",
        "conclusion": "pursue_passion(Jordan)"
      },
      {
        "facts": [
          "pursue_passion(Jordan)"
        ],
        "rules": "pursue_passion(Jordan) ∨ live_life_fully(Jordan)",
        "conclusion": null
      },
      {
        "facts": [
          "values_stability(Jordan)"
        ],
        "rules": "values_stability(Jordan) ⊕ loves_travel(Jordan)",
        "conclusion": "¬loves_travel(Jordan)"
      },
      {
        "facts": [
          "¬loves_travel(Jordan)"
        ],
        "rules": "loves_travel(Jordan) ∨ crave_exploration(Jordan)",
        "conclusion": "crave_exploration(Jordan)"
      },
      {
        "facts": [
          "is_spontaneous(Jordan)",
          "crave_exploration(Jordan)"
        ],
        "rules": "is_spontaneous(Jordan) → (crave_exploration(Jordan) ⊕ seek_adventure(Jordan))",
        "conclusion": "¬seek_adventure(Jordan)"
      },
      {
        "facts": [
          "¬seek_adventure(Jordan)",
          "enjoy_risk(Jordan)"
        ],
        "rules": null,
        "conclusion": "seek_adventure(Jordan) ∧ (enjoy_risk(Jordan) ∧ live_life_fully(Jordan))"
      }
    ],
    "conclusion": "Jordan seeks adventure, enjoys taking risks and lives his life to the fullest.",
    "conclusion_fol": "seek_adventure(Jordan) ∧ (enjoy_risk(Jordan) ∧ live_life_fully(Jordan))",
    "answer": "False",
    "context": [
      "Jordan chases his dreams.",
      "Anyone who takes risks or chases their dreams pursues their passion.",
      "Jordan either pursues his passion or lives life to the fullest.",
      "Jordan values stability.",
      "Jordan either values stability or loves to travel, but not both.",
      "Jordan loves travel or craves exploration.",
      "Jordan is spontaneous.",
      "If Jordan is spontaneous, then he either craves exploration or seeks adventure, but not both.",
      "Jordan enjoys taking risks."
    ],
    "context_fol": [
      "chase_dreams(Jordan)",
      "∀x ((takes_risks(x) ∨ chase_dreams(x)) → pursue_passion(x))",
      "pursue_passion(Jordan) ∨ live_life_fully(Jordan)",
      "values_stability(Jordan)",
      "values_stability(Jordan) ⊕ loves_travel(Jordan)",
      "loves_travel(Jordan) ∨ crave_exploration(Jordan)",
      "is_spontaneous(Jordan)",
      "is_spontaneous(Jordan) → (crave_exploration(Jordan) ⊕ seek_adventure(Jordan))",
      "enjoy_risk(Jordan)"
    ],
    "background_story": "Jordan was a thrill-seeking adventurer with an ergotropic lifestyle, always chasing the next adrenaline rush. By day, he worked as a freelance photographer, capturing breathtaking shots of extreme sports. By night, he planned his next escapambing, or deep-sea diving. Jordan's friends admirede, whether it was skydiving, rock clid his fearless attitude and energy, but also worried about his reckless abandon. Despite the risks, Jordan f reflected his passion for the intense and unknown. elt most alive when pushing his limits, and his photographsnd he inspired many to embrace their own ergotropic tendeHis mantra was 'live life on the edge,' ancies, seeking excitement and challenge in every waking moment.",
    "name": "Jordan",
    "keyword": "ergotropic",
    "subject_category": "human"
  },
  {
    "facts": [
      "Nathalia does not improve educational programs.",
      "Nathalia develops frameworks.",
      "Nathalia understands educational policies.",
      "Nathalia does not conduct studies."
    ],
    "facts_fol": [
      "¬improves_educational_programs(Nathalia)",
      "develops_frameworks(Nathalia)",
      "understands_educational_policies(Nathalia)",
      "¬conducts_studies(Nathalia)"
    ],
    "rules": [
      "If Nathalia is an analyst, then she is either an expert in evaluation or an educational researcher, but not both.",
      "Nathalia either assesses programs or is an educational researcher.",
      "Nathalia either develops frameworks or assesses programs, but not both.",
      "Nathalia either conducts studies or is an analyst."
    ],
    "rules_fol": [
      "analyst(Nathalia) → (expert_in_evaluation(Nathalia) ⊕ educational_researcher(Nathalia))",
      "assesses_programs(Nathalia) ∨ educational_researcher(Nathalia)",
      "develops_frameworks(Nathalia) ⊕ assesses_programs(Nathalia)",
      "conducts_studies(Nathalia) ∨ analyst(Nathalia)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Nathalia provides feedback, then she either enhances strategies or is an expert in evaluation.",
      "If Nathalia is a policy maker, then she is either an educational researcher or a curriculum specialist, but not both.",
      "Every professional who measures effectiveness either assesses programs or refines strategies.",
      "Nathalia either collects data or is an analyst."
    ],
    "distracting_rules_fol": [
      "provides_feedback(Nathalia) → (enhances_strategies(Nathalia) ∨ expert_in_evaluation(Nathalia))",
      "policy_maker(Nathalia) → (educational_researcher(Nathalia) ⊕ curriculum_specialist(Nathalia))",
      "∀x (measures_effectiveness(x) → (refines_strategies(x) ∨ assesses_programs(x)))",
      "collects_data(Nathalia) ∨ analyst(Nathalia)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Nathalia does not conduct studies."
        ],
        "rules": "Nathalia either conducts studies or is an analyst.",
        "conclusion": "Nathalia is an analyst."
      },
      {
        "facts": [
          "Nathalia develops frameworks."
        ],
        "rules": "Nathalia either develops frameworks or assesses programs, but not both.",
        "conclusion": "Nathalia does not assess programs."
      },
      {
        "facts": [
          "Nathalia does not assess programs."
        ],
        "rules": "Nathalia either assesses programs or is an educational researcher.",
        "conclusion": "Nathalia is an educational researcher."
      },
      {
        "facts": [
          "Nathalia is an analyst.",
          "Nathalia is an educational researcher."
        ],
        "rules": "If Nathalia is an analyst, then she is either an expert in evaluation or an educational researcher, but not both.",
        "conclusion": "Nathalia is not an expert in evaluation."
      },
      {
        "facts": [
          "Nathalia is not an expert in evaluation.",
          "Nathalia understands educational policies.",
          "Nathalia does not improve educational programs."
        ],
        "rules": null,
        "conclusion": "If Nathalia is an expert in evaluation or understands educational policies, then she can improve educational programs."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬conducts_studies(Nathalia)"
        ],
        "rules": "conducts_studies(Nathalia) ∨ analyst(Nathalia)",
        "conclusion": "analyst(Nathalia)"
      },
      {
        "facts": [
          "develops_frameworks(Nathalia)"
        ],
        "rules": "develops_frameworks(Nathalia) ⊕ assesses_programs(Nathalia)",
        "conclusion": "¬assesses_programs(Nathalia)"
      },
      {
        "facts": [
          "¬assesses_programs(Nathalia)"
        ],
        "rules": "assesses_programs(Nathalia) ∨ educational_researcher(Nathalia)",
        "conclusion": "educational_researcher(Nathalia)"
      },
      {
        "facts": [
          "analyst(Nathalia)",
          "educational_researcher(Nathalia)"
        ],
        "rules": "analyst(Nathalia) → (expert_in_evaluation(Nathalia) ⊕ educational_researcher(Nathalia))",
        "conclusion": "¬expert_in_evaluation(Nathalia)"
      },
      {
        "facts": [
          "¬expert_in_evaluation(Nathalia)",
          "understands_educational_policies(Nathalia)",
          "¬improves_educational_programs(Nathalia)"
        ],
        "rules": null,
        "conclusion": "(expert_in_evaluation(Nathalia) ∨ understands_educational_policies(Nathalia)) → improves_educational_programs(Nathalia)"
      }
    ],
    "conclusion": "If Nathalia is an expert in evaluation or understands educational policies, then she can improve educational programs.",
    "conclusion_fol": "(expert_in_evaluation(Nathalia) ∨ understands_educational_policies(Nathalia)) → improves_educational_programs(Nathalia)",
    "answer": "False",
    "context": [
      "Nathalia does not conduct studies.",
      "Nathalia either conducts studies or is an analyst.",
      "Nathalia develops frameworks.",
      "Nathalia either develops frameworks or assesses programs, but not both.",
      "Nathalia either assesses programs or is an educational researcher.",
      "If Nathalia is an analyst, then she is either an expert in evaluation or an educational researcher, but not both.",
      "Nathalia understands educational policies.",
      "Nathalia does not improve educational programs."
    ],
    "context_fol": [
      "¬conducts_studies(Nathalia)",
      "conducts_studies(Nathalia) ∨ analyst(Nathalia)",
      "develops_frameworks(Nathalia)",
      "develops_frameworks(Nathalia) ⊕ assesses_programs(Nathalia)",
      "assesses_programs(Nathalia) ∨ educational_researcher(Nathalia)",
      "analyst(Nathalia) → (expert_in_evaluation(Nathalia) ⊕ educational_researcher(Nathalia))",
      "understands_educational_policies(Nathalia)",
      "¬improves_educational_programs(Nathalia)"
    ],
    "background_story": "Nathalia was a renowned evaluator in the field of education, known for her meticulous eye for detail and ability to assess complex programs. With a background in psychology and statistics, she had developed a unique framework for evaluating educational initiatives. Schools and organizations from around the world sought her expertise to measure the effectiveness of their programs. Nathalia's approach was not only about numbers and data but also about understanding the human impact of educational policies. She believed that every evaluation should lead to improvement, not just judgment. Through her work, Nathalia helped countless institutions refine their strategies, ultimately enhancing the learning experience for thousands of students. Her reputation as a fair and insightful evaluator made her a sought-after consultant in the education sector.",
    "name": "Nathalia",
    "keyword": "evaluator",
    "subject_category": "professional"
  },
  {
    "facts": [
      "Atreus does not cast spells.",
      "Atreus defends nature.",
      "Atreus heals the land.",
      "Atreus does not save the world."
    ],
    "facts_fol": [
      "¬casts_spells(Atreus)",
      "defend_nature(Atreus)",
      "heal_land(Atreus)",
      "¬saves_world(Atreus)"
    ],
    "rules": [
      "If Atreus knows ancient lore and uses antiredeposition, then he can cleanse rivers.",
      "Atreus either casts spells or knows ancient lore.",
      "If Atreus protects the environment, then he either uses antiredeposition or restores balance in nature.",
      "If Atreus defends nature, then he either heals the land or restores balance in nature, but not both.",
      "Atreus either saves the world or protects the environment."
    ],
    "rules_fol": [
      "(know_ancient_lore(Atreus) ∧ use_antiredeposition(Atreus)) → cleanse_rivers(Atreus)",
      "casts_spells(Atreus) ∨ know_ancient_lore(Atreus)",
      "protect_environment(Atreus) → (use_antiredeposition(Atreus) ∨ restore_balance(Atreus))",
      "defend_nature(Atreus) → (heal_land(Atreus) ⊕ restore_balance(Atreus))",
      "saves_world(Atreus) ∨ protect_environment(Atreus)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Atreus wields magic, then he either knows ancient lore or possesses wisdom, but not both.",
      "If Atreus has magic powers or understands nature, then he can use antiredeposition.",
      "All mythical figures who purify will restore balance in nature.",
      "All mythical figures who respect nature protect the environment and fight pollution."
    ],
    "distracting_rules_fol": [
      "wield_magic(Atreus) → (know_ancient_lore(Atreus) ⊕ possess_wisdom(Atreus))",
      "(has_magic_powers(Atreus) ∨ understands_nature(Atreus)) → use_antiredeposition(Atreus)",
      "∀x (purify(x) → restore_balance(x))",
      "∀x (respects_nature(x) → (protect_environment(x) ∧ fights_pollution(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Atreus does not save the world."
        ],
        "rules": "Atreus either saves the world or protects the environment.",
        "conclusion": "Atreus protects the environment."
      },
      {
        "facts": [
          "Atreus defends nature.",
          "Atreus heals the land."
        ],
        "rules": "If Atreus defends nature, then he either heals the land or restores balance in nature, but not both.",
        "conclusion": "Atreus does not restore balance in nature."
      },
      {
        "facts": [
          "Atreus protects the environment.",
          "Atreus does not restore balance in nature."
        ],
        "rules": "If Atreus protects the environment, then he either uses antiredeposition or restores balance in nature.",
        "conclusion": "Atreus uses antiredeposition."
      },
      {
        "facts": [
          "Atreus does not cast spells."
        ],
        "rules": "Atreus either casts spells or knows ancient lore.",
        "conclusion": "Atreus knows ancient lore."
      },
      {
        "facts": [
          "Atreus knows ancient lore.",
          "Atreus uses antiredeposition."
        ],
        "rules": "If Atreus knows ancient lore and uses antiredeposition, then he can cleanse rivers.",
        "conclusion": "Atreus can cleanse rivers."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬saves_world(Atreus)"
        ],
        "rules": "saves_world(Atreus) ∨ protect_environment(Atreus)",
        "conclusion": "protect_environment(Atreus)"
      },
      {
        "facts": [
          "defend_nature(Atreus)",
          "heal_land(Atreus)"
        ],
        "rules": "defend_nature(Atreus) → (heal_land(Atreus) ⊕ restore_balance(Atreus))",
        "conclusion": "¬restore_balance(Atreus)"
      },
      {
        "facts": [
          "protect_environment(Atreus)",
          "¬restore_balance(Atreus)"
        ],
        "rules": "protect_environment(Atreus) → (use_antiredeposition(Atreus) ∨ restore_balance(Atreus))",
        "conclusion": "use_antiredeposition(Atreus)"
      },
      {
        "facts": [
          "¬casts_spells(Atreus)"
        ],
        "rules": "casts_spells(Atreus) ∨ know_ancient_lore(Atreus)",
        "conclusion": "know_ancient_lore(Atreus)"
      },
      {
        "facts": [
          "know_ancient_lore(Atreus)",
          "use_antiredeposition(Atreus)"
        ],
        "rules": "(know_ancient_lore(Atreus) ∧ use_antiredeposition(Atreus)) → cleanse_rivers(Atreus)",
        "conclusion": "cleanse_rivers(Atreus)"
      }
    ],
    "conclusion": "Atreus can cleanse rivers.",
    "conclusion_fol": "cleanse_rivers(Atreus)",
    "answer": "True",
    "context": [
      "Atreus does not save the world.",
      "Atreus either saves the world or protects the environment.",
      "Atreus defends nature.",
      "Atreus heals the land.",
      "If Atreus defends nature, then he either heals the land or restores balance in nature, but not both.",
      "If Atreus protects the environment, then he either uses antiredeposition or restores balance in nature.",
      "Atreus does not cast spells.",
      "Atreus either casts spells or knows ancient lore.",
      "If Atreus knows ancient lore and uses antiredeposition, then he can cleanse rivers."
    ],
    "context_fol": [
      "¬saves_world(Atreus)",
      "saves_world(Atreus) ∨ protect_environment(Atreus)",
      "defend_nature(Atreus)",
      "heal_land(Atreus)",
      "defend_nature(Atreus) → (heal_land(Atreus) ⊕ restore_balance(Atreus))",
      "protect_environment(Atreus) → (use_antiredeposition(Atreus) ∨ restore_balance(Atreus))",
      "¬casts_spells(Atreus)",
      "casts_spells(Atreus) ∨ know_ancient_lore(Atreus)",
      "(know_ancient_lore(Atreus) ∧ use_antiredeposition(Atreus)) → cleanse_rivers(Atreus)"
    ],
    "background_story": "In ancient mythology, Atreus was a hero known for his role in the great River Purification. The rivers had become polluted with the residue of dark magic, causing the waters to stagnate and the land to wither. Atreus, with his knowledge of ancient lore, discovered the secret of antiredeposition - the ability to prevent the reaccumulation of pollutants. Using this power, he created a series of rituals and spells that cleansed the rivers, restoring their natural flow and purity. The people rejoiced as the land flourished once more, and Atreus was hailed as a champion of the environment. His legacy lived on, inspiring generations to protect the natural world and preserve the delicate balance of nature.",
    "name": "Atreus",
    "keyword": "antiredeposition",
    "subject_category": "mythical figure"
  },
  {
    "facts": [
      "Pinup does not have blazing speed.",
      "Pinup does not have endurance."
    ],
    "facts_fol": [
      "¬blazing_speed(Pinup)",
      "¬has_endurance(Pinup)"
    ],
    "rules": [
      "If Pinup has either blazing speed or a fiery spirit (but not both), then she is a champion.",
      "Pinup is either a fast runner or has a fiery spirit, but not both.",
      "Pinup is either a fast runner or has endurance, but not both."
    ],
    "rules_fol": [
      "(blazing_speed(Pinup) ⊕ fiery_spirit(Pinup)) → champion(Pinup)",
      "fast_runner(Pinup) ⊕ fiery_spirit(Pinup)",
      "has_endurance(Pinup) ⊕ fast_runner(Pinup)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Pinup either races well or has a fiery spirit.",
      "If Pinup has strong legs, then she has a keen instinct and is a fast runner."
    ],
    "distracting_rules_fol": [
      "races_well(Pinup) ∨ fiery_spirit(Pinup)",
      "strong_legs(Pinup) → (keen_instinct(Pinup) ∧ fast_runner(Pinup))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Pinup does not have endurance."
        ],
        "rules": "Pinup is either a fast runner or has endurance, but not both.",
        "conclusion": "Pinup is a fast runner."
      },
      {
        "facts": [
          "Pinup is a fast runner."
        ],
        "rules": "Pinup is either a fast runner or has a fiery spirit, but not both.",
        "conclusion": "Pinup does not have a fiery spirit."
      },
      {
        "facts": [
          "Pinup does not have blazing speed.",
          "Pinup does not have a fiery spirit."
        ],
        "rules": "If Pinup has either blazing speed or a fiery spirit (but not both), then she is a champion.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬has_endurance(Pinup)"
        ],
        "rules": "has_endurance(Pinup) ⊕ fast_runner(Pinup)",
        "conclusion": "fast_runner(Pinup)"
      },
      {
        "facts": [
          "fast_runner(Pinup)"
        ],
        "rules": "fast_runner(Pinup) ⊕ fiery_spirit(Pinup)",
        "conclusion": "¬fiery_spirit(Pinup)"
      },
      {
        "facts": [
          "¬blazing_speed(Pinup)",
          "¬fiery_spirit(Pinup)"
        ],
        "rules": "(blazing_speed(Pinup) ⊕ fiery_spirit(Pinup)) → champion(Pinup)",
        "conclusion": null
      }
    ],
    "conclusion": "Pinup is a champion.",
    "conclusion_fol": "champion(Pinup)",
    "answer": "Uncertain",
    "context": [
      "Pinup does not have endurance.",
      "Pinup is either a fast runner or has endurance, but not both.",
      "Pinup is either a fast runner or has a fiery spirit, but not both.",
      "Pinup does not have blazing speed.",
      "If Pinup has either blazing speed or a fiery spirit (but not both), then she is a champion."
    ],
    "context_fol": [
      "¬has_endurance(Pinup)",
      "has_endurance(Pinup) ⊕ fast_runner(Pinup)",
      "fast_runner(Pinup) ⊕ fiery_spirit(Pinup)",
      "¬blazing_speed(Pinup)",
      "(blazing_speed(Pinup) ⊕ fiery_spirit(Pinup)) → champion(Pinup)"
    ],
    "background_story": "Pinup was a fieryto run, with a blazing speed that left all other hors flames in the wind. She was born ed jockey, Pinup quickly rose through the ranks of compees in her dust. Trained by a seasonmost memorable win was at the prestigious Golden titive racing, her name becoming synonymous with victory. Her l length ahead of the pack. The crowd erCup, where she blazed across the finish line a fulle, her spirit and speed captivating the hearts of all wupted as Pinup pranced into the winner's circ her legacy as a blazing sensation on the track forho watched her. She retired as a champion,ever etched in the annals of racing history.",
    "name": "Pinup",
    "keyword": "blazing",
    "subject_category": "ho chestnut mare with a mane that rippled likerse"
  },
  {
    "facts": [
      "Aliya has vision.",
      "Aliya writes poetry.",
      "Aliya does not find her muse.",
      "Aliya discovers her passion."
    ],
    "facts_fol": [
      "has_vision(Aliya)",
      "writes_poetry(Aliya)",
      "¬finds_muse(Aliya)",
      "discovers_passion(Aliya)"
    ],
    "rules": [
      "Aliya is either creative or uninspired, but not both.",
      "If someone either makes music or writes poetry (but not both), then they are creative.",
      "Aliya either paints art or makes music, but not both, reflecting her focused approach to artistic expression.",
      "If Aliya sees beauty or has vision, then she can paint art.",
      "Anyone who finds their muse either discovers their passion or sees beauty."
    ],
    "rules_fol": [
      "creative(Aliya) ⊕ uninspired(Aliya)",
      "∀x ((makes_music(x) ⊕ writes_poetry(x)) → creative(x))",
      "paints_art(Aliya) ⊕ makes_music(Aliya)",
      "(sees_beauty(Aliya) ∨ has_vision(Aliya)) → paints_art(Aliya)",
      "∀x (finds_muse(x) → (discovers_passion(x) ∨ sees_beauty(x)))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Aliya is an artist, then she is either experimental or creative, but not both.",
      "If Aliya expresses emotions, then she makes music and tells stories.",
      "Aliya either dances freely or paints art.",
      "Everyone who appreciates life either sees beauty or expresses emotion."
    ],
    "distracting_rules_fol": [
      "is_artist(Aliya) → (is_experimental(Aliya) ⊕ creative(Aliya))",
      "expresses_emotions(Aliya) → (makes_music(Aliya) ∧ tells_stories(Aliya))",
      "dances_freely(Aliya) ∨ paints_art(Aliya)",
      "∀x (appreciates_life(x) → (sees_beauty(x) ∨ expresses_emotion(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Aliya does not find her muse.",
          "Aliya discovers her passion."
        ],
        "rules": "Anyone who finds their muse either discovers their passion or sees beauty.",
        "conclusion": null
      },
      {
        "facts": [
          "Aliya has vision."
        ],
        "rules": "If Aliya sees beauty or has vision, then she can paint art.",
        "conclusion": "Aliya paints art."
      },
      {
        "facts": [
          "Aliya paints art."
        ],
        "rules": "Aliya either paints art or makes music, but not both, reflecting her focused approach to artistic expression.",
        "conclusion": "Aliya does not make music."
      },
      {
        "facts": [
          "Aliya does not make music.",
          "Aliya writes poetry."
        ],
        "rules": "If someone either makes music or writes poetry (but not both), then they are creative.",
        "conclusion": "Aliya is creative."
      },
      {
        "facts": [
          "Aliya is creative."
        ],
        "rules": "Aliya is either creative or uninspired, but not both.",
        "conclusion": "Aliya is not uninspired."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬finds_muse(Aliya)",
          "discovers_passion(Aliya)"
        ],
        "rules": "∀x (finds_muse(x) → (discovers_passion(x) ∨ sees_beauty(x)))",
        "conclusion": null
      },
      {
        "facts": [
          "has_vision(Aliya)"
        ],
        "rules": "(sees_beauty(Aliya) ∨ has_vision(Aliya)) → paints_art(Aliya)",
        "conclusion": "paints_art(Aliya)"
      },
      {
        "facts": [
          "paints_art(Aliya)"
        ],
        "rules": "paints_art(Aliya) ⊕ makes_music(Aliya)",
        "conclusion": "¬makes_music(Aliya)"
      },
      {
        "facts": [
          "¬makes_music(Aliya)",
          "writes_poetry(Aliya)"
        ],
        "rules": "∀x ((makes_music(x) ⊕ writes_poetry(x)) → creative(x))",
        "conclusion": "creative(Aliya)"
      },
      {
        "facts": [
          "creative(Aliya)"
        ],
        "rules": "creative(Aliya) ⊕ uninspired(Aliya)",
        "conclusion": "¬uninspired(Aliya)"
      }
    ],
    "conclusion": "Aliya is not uninspired.",
    "conclusion_fol": "¬uninspired(Aliya)",
    "answer": "True",
    "context": [
      "Aliya does not find her muse.",
      "Aliya discovers her passion.",
      "Anyone who finds their muse either discovers their passion or sees beauty.",
      "Aliya has vision.",
      "If Aliya sees beauty or has vision, then she can paint art.",
      "Aliya either paints art or makes music, but not both, reflecting her focused approach to artistic expression.",
      "Aliya writes poetry.",
      "If someone either makes music or writes poetry (but not both), then they are creative.",
      "Aliya is either creative or uninspired, but not both."
    ],
    "context_fol": [
      "¬finds_muse(Aliya)",
      "discovers_passion(Aliya)",
      "∀x (finds_muse(x) → (discovers_passion(x) ∨ sees_beauty(x)))",
      "has_vision(Aliya)",
      "(sees_beauty(Aliya) ∨ has_vision(Aliya)) → paints_art(Aliya)",
      "paints_art(Aliya) ⊕ makes_music(Aliya)",
      "writes_poetry(Aliya)",
      "∀x ((makes_music(x) ⊕ writes_poetry(x)) → creative(x))",
      "creative(Aliya) ⊕ uninspired(Aliya)"
    ],
    "background_story": "Aliya was once a thriving artist, known for her vibrant paintings that captured the essence of the city. However, after a painful breakup and a series of rejections from galleries, she felt abandoned by her muse and her community. Her studio, once a symbol of creativity and passion, collected dust as she struggled to find inspiration. Aliya's friends and family tried to encourage her, but she felt lost and alone. One day, she made the difficult decision to abandon her studio and take a break from art. Though it was a painful choice, it ultimately allowed her to recharge and discover new sources of inspiration. Aliya's story serves as a reminder that sometimes, letting go is necessary for growth and renewal.",
    "name": "Aliya",
    "keyword": "abandon",
    "subject_category": "human"
  },
  {
    "facts": [
      "Babe is not feral.",
      "Babe is disciplined.",
      "Babe listens to commands."
    ],
    "facts_fol": [
      "¬feral(Babe)",
      "is_disciplined(Babe)",
      "listens_commands(Babe)"
    ],
    "rules": [
      "For every animal, it is either domesticated or wild, but not both.",
      "All trained animals are either feral or domesticated, but not both.",
      "Any animal that is disciplined and listens to commands can be trained."
    ],
    "rules_fol": [
      "∀x (domesticated(x) ⊕ wild(x))",
      "∀x (trained(x) → (feral(x) ⊕ domesticated(x)))",
      "∀x ((is_disciplined(x) ∧ listens_commands(x)) → trained(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Babe is domesticated because she lives on a farm.",
      "If Babe is tamed, then she is either trained or social, but not both."
    ],
    "distracting_rules_fol": [
      "lives_on_farm(Babe) → domesticated(Babe)",
      "tamed(Babe) → (trained(Babe) ⊕ social(Babe))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Babe is disciplined.",
          "Babe listens to commands."
        ],
        "rules": "Any animal that is disciplined and listens to commands can be trained.",
        "conclusion": "Babe is trained."
      },
      {
        "facts": [
          "Babe is trained.",
          "Babe is not feral."
        ],
        "rules": "All trained animals are either feral or domesticated, but not both.",
        "conclusion": "Babe is a domesticated animal."
      },
      {
        "facts": [
          "Babe is a domesticated animal."
        ],
        "rules": "For every animal, it is either domesticated or wild, but not both.",
        "conclusion": "Babe is a wild animal."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "is_disciplined(Babe)",
          "listens_commands(Babe)"
        ],
        "rules": "∀x ((is_disciplined(x) ∧ listens_commands(x)) → trained(x))",
        "conclusion": "trained(Babe)"
      },
      {
        "facts": [
          "trained(Babe)",
          "¬feral(Babe)"
        ],
        "rules": "∀x (trained(x) → (feral(x) ⊕ domesticated(x)))",
        "conclusion": "domesticated(Babe)"
      },
      {
        "facts": [
          "domesticated(Babe)"
        ],
        "rules": "∀x (domesticated(x) ⊕ wild(x))",
        "conclusion": "wild(Babe)"
      }
    ],
    "conclusion": "Babe is a wild animal.",
    "conclusion_fol": "wild(Babe)",
    "answer": "False",
    "context": [
      "Babe is disciplined.",
      "Babe listens to commands.",
      "Any animal that is disciplined and listens to commands can be trained.",
      "Babe is not feral.",
      "All trained animals are either feral or domesticated, but not both.",
      "For every animal, it is either domesticated or wild, but not both."
    ],
    "context_fol": [
      "is_disciplined(Babe)",
      "listens_commands(Babe)",
      "∀x ((is_disciplined(x) ∧ listens_commands(x)) → trained(x))",
      "¬feral(Babe)",
      "∀x (trained(x) → (feral(x) ⊕ domesticated(x)))",
      "∀x (domesticated(x) ⊕ wild(x))"
    ],
    "background_story": "Babe, the energetic kangaroo, lived on a sunny farm surrounded by rolling hills and green pastures. However, her adventurous spirit was bounded by the farm's fences, which she longed to explore beyond. Despite the limitations, Babe made the most of her enclosed world, bouncing around the farm with incredible speed and agility. She became a local legend for her bounded leaps, which could clear impressive distances within the farm's confines. The farmer, noticing Babe's unique talent, began training her for agility competitions. Soon, Babe was winning awards and entertaining crowds with her bounded jumps, proving that even within boundaries, one can find freedom and excellence.",
    "name": "Babe",
    "keyword": "bounded",
    "subject_category": "animal"
  },
  {
    "facts": [
      "George explores places.",
      "George reads books.",
      "George does not meet experts."
    ],
    "facts_fol": [
      "explores_places(George)",
      "reads_books(George)",
      "¬meets_experts(George)"
    ],
    "rules": [
      "George is either curious or apathetic, but not both.",
      "If George either asks questions or seeks knowledge (but not both), then he is curious.",
      "George either explores places or asks questions, but not both, in his pursuit of understanding and discovery.",
      "If George either reads books or meets experts (but not both), then he seeks knowledge."
    ],
    "rules_fol": [
      "curious(George) ⊕ apathetic(George)",
      "(asks_questions(George) ⊕ seeks_knowledge(George)) → curious(George)",
      "explores_places(George) ⊕ asks_questions(George)",
      "(reads_books(George) ⊕ meets_experts(George)) → seeks_knowledge(George)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "All people who love learning are curious.",
      "All people who investigate will ask questions.",
      "George either learns quickly or seeks knowledge."
    ],
    "distracting_rules_fol": [
      "∀x (loves_learning(x) → curious(x))",
      "∀x (investigates(x) → asks_questions(x))",
      "learns_fast(George) ∨ seeks_knowledge(George)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "George reads books.",
          "George does not meet experts."
        ],
        "rules": "If George either reads books or meets experts (but not both), then he seeks knowledge.",
        "conclusion": "George seeks knowledge."
      },
      {
        "facts": [
          "George explores places."
        ],
        "rules": "George either explores places or asks questions, but not both, in his pursuit of understanding and discovery.",
        "conclusion": "George does not ask questions."
      },
      {
        "facts": [
          "George does not ask questions.",
          "George seeks knowledge."
        ],
        "rules": "If George either asks questions or seeks knowledge (but not both), then he is curious.",
        "conclusion": "George is curious."
      },
      {
        "facts": [
          "George is curious."
        ],
        "rules": "George is either curious or apathetic, but not both.",
        "conclusion": "George is apathetic."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "reads_books(George)",
          "¬meets_experts(George)"
        ],
        "rules": "(reads_books(George) ⊕ meets_experts(George)) → seeks_knowledge(George)",
        "conclusion": "seeks_knowledge(George)"
      },
      {
        "facts": [
          "explores_places(George)"
        ],
        "rules": "explores_places(George) ⊕ asks_questions(George)",
        "conclusion": "¬asks_questions(George)"
      },
      {
        "facts": [
          "¬asks_questions(George)",
          "seeks_knowledge(George)"
        ],
        "rules": "(asks_questions(George) ⊕ seeks_knowledge(George)) → curious(George)",
        "conclusion": "curious(George)"
      },
      {
        "facts": [
          "curious(George)"
        ],
        "rules": "curious(George) ⊕ apathetic(George)",
        "conclusion": "apathetic(George)"
      }
    ],
    "conclusion": "George is apathetic.",
    "conclusion_fol": "apathetic(George)",
    "answer": "False",
    "context": [
      "George reads books.",
      "George does not meet experts.",
      "If George either reads books or meets experts (but not both), then he seeks knowledge.",
      "George explores places.",
      "George either explores places or asks questions, but not both, in his pursuit of understanding and discovery.",
      "If George either asks questions or seeks knowledge (but not both), then he is curious.",
      "George is either curious or apathetic, but not both."
    ],
    "context_fol": [
      "reads_books(George)",
      "¬meets_experts(George)",
      "(reads_books(George) ⊕ meets_experts(George)) → seeks_knowledge(George)",
      "explores_places(George)",
      "explores_places(George) ⊕ asks_questions(George)",
      "(asks_questions(George) ⊕ seeks_knowledge(George)) → curious(George)",
      "curious(George) ⊕ apathetic(George)"
    ],
    "background_story": "George, a seasoned journalist, found himself in Luanda, the vibrant capital of Angola, on a mission to cover the country's economic resurgence. As he navigated the bustling streets, he was struck by the city's unique blend of African and Portuguese influences. George's curiosity led him to explore the historic Fortaleza de São Miguel, where he uncovered stories of Luanda's rich past. He spent his evenings mingling with locals at the Mercado do Kinaxixe, immersing himself in the rhythms and flavors of the city. George's experiences in Luanda inspired a series of captivating articles, showcasing the city's resilience and beauty to the world. His time in Luanda not only broadened his perspective but also left him with a deep affection for the Angolan people and their captivating culture.",
    "name": "George",
    "keyword": "luanda",
    "subject_category": "human"
  },
  {
    "facts": [
      "Faye inspires a new generation of researchers.",
      "Faye does not publish research.",
      "Faye analyzes bones.",
      "Faye does not examine rocks."
    ],
    "facts_fol": [
      "inspire_new_generation(Faye)",
      "¬publish_research(Faye)",
      "analyze_bones(Faye)",
      "¬examine_rocks(Faye)"
    ],
    "rules": [
      "If Faye studies marine reptiles, then she either makes groundbreaking discoveries or inspires a new generation of researchers, but not both.",
      "If Faye excavates fossils, then she either publishes research or studies marine reptiles (or both).",
      "If Faye either analyzes bones or examines rocks (but not both), then she excavates fossils."
    ],
    "rules_fol": [
      "study_marine_reptiles(Faye) → (make_groundbreaking_discoveries(Faye) ⊕ inspire_new_generation(Faye))",
      "excavate_fossils(Faye) → (publish_research(Faye) ∨ study_marine_reptiles(Faye))",
      "(analyze_bones(Faye) ⊕ examine_rocks(Faye)) → excavate_fossils(Faye)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Faye explores ancient oceans or investigates prehistoric life, then she studies marine reptiles.",
      "Any paleontologist who searches deserts or explores coasts can excavate fossils."
    ],
    "distracting_rules_fol": [
      "(explore_ancient_oceans(Faye) ∨ investigate_prehistoric_life(Faye)) → study_marine_reptiles(Faye)",
      "∀x ((search_deserts(x) ∨ explore_coasts(x)) → excavate_fossils(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Faye analyzes bones.",
          "Faye does not examine rocks."
        ],
        "rules": "If Faye either analyzes bones or examines rocks (but not both), then she excavates fossils.",
        "conclusion": "Faye excavates fossils."
      },
      {
        "facts": [
          "Faye excavates fossils.",
          "Faye does not publish research."
        ],
        "rules": "If Faye excavates fossils, then she either publishes research or studies marine reptiles (or both).",
        "conclusion": "Faye studies marine reptiles."
      },
      {
        "facts": [
          "Faye studies marine reptiles.",
          "Faye inspires a new generation of researchers."
        ],
        "rules": "If Faye studies marine reptiles, then she either makes groundbreaking discoveries or inspires a new generation of researchers, but not both.",
        "conclusion": "Faye makes groundbreaking discoveries."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "analyze_bones(Faye)",
          "¬examine_rocks(Faye)"
        ],
        "rules": "(analyze_bones(Faye) ⊕ examine_rocks(Faye)) → excavate_fossils(Faye)",
        "conclusion": "excavate_fossils(Faye)"
      },
      {
        "facts": [
          "excavate_fossils(Faye)",
          "¬publish_research(Faye)"
        ],
        "rules": "excavate_fossils(Faye) → (publish_research(Faye) ∨ study_marine_reptiles(Faye))",
        "conclusion": "study_marine_reptiles(Faye)"
      },
      {
        "facts": [
          "study_marine_reptiles(Faye)",
          "inspire_new_generation(Faye)"
        ],
        "rules": "study_marine_reptiles(Faye) → (make_groundbreaking_discoveries(Faye) ⊕ inspire_new_generation(Faye))",
        "conclusion": "make_groundbreaking_discoveries(Faye)"
      }
    ],
    "conclusion": "Faye makes groundbreaking discoveries.",
    "conclusion_fol": "make_groundbreaking_discoveries(Faye)",
    "answer": "False",
    "context": [
      "Faye analyzes bones.",
      "Faye does not examine rocks.",
      "If Faye either analyzes bones or examines rocks (but not both), then she excavates fossils.",
      "Faye does not publish research.",
      "If Faye excavates fossils, then she either publishes research or studies marine reptiles (or both).",
      "Faye inspires a new generation of researchers.",
      "If Faye studies marine reptiles, then she either makes groundbreaking discoveries or inspires a new generation of researchers, but not both."
    ],
    "context_fol": [
      "analyze_bones(Faye)",
      "¬examine_rocks(Faye)",
      "(analyze_bones(Faye) ⊕ examine_rocks(Faye)) → excavate_fossils(Faye)",
      "¬publish_research(Faye)",
      "excavate_fossils(Faye) → (publish_research(Faye) ∨ study_marine_reptiles(Faye))",
      "inspire_new_generation(Faye)",
      "study_marine_reptiles(Faye) → (make_groundbreaking_discoveries(Faye) ⊕ inspire_new_generation(Faye))"
    ],
    "background_story": "Faye was a renowned paleontologist with a passion for marine reptiles. Her life's work focused on the Pliosaurus, a short-necked plesiosaur that roamed the ancient oceans. Faye spent years excavating fossils in the Patagonia region, uncovering crucial evidence of the Pliosaurus's existence. Her groundbreaking research shed new light on the creature's behavior, diet, and habitat. Faye's fascination with the Pliosaurus, often referred to as the 'Pisanosaur' due to its discovery near Pisa, led her to write several books and papers on the subject. Her dedication to the field inspired a new generation of paleontologists, and her name became synonymous with Pliosaurus research.",
    "name": "Faye",
    "keyword": "pisanosaur",
    "subject_category": "paleontologist"
  },
  {
    "facts": [
      "Savannah makes groundbreaking discoveries.",
      "Savannah does not have an adventurous spirit."
    ],
    "facts_fol": [
      "make_groundbreaking_discoveries(Savannah)",
      "¬has_adventurous_spirit(Savannah)"
    ],
    "rules": [
      "For all humans, if someone is a renowned archaeologist, then they either make groundbreaking discoveries or uncover hidden secrets (or both).",
      "Savannah Connors is either curious or a renowned archaeologist, but being one does not necessarily imply the other.",
      "A person is either curious or has an adventurous spirit, but having one trait does not necessarily imply the other."
    ],
    "rules_fol": [
      "∀x (renowned_archaeologist(x) → (make_groundbreaking_discoveries(x) ∨ uncover_hidden_secrets(x)))",
      "is_curious(Savannah) ⊕ renowned_archaeologist(Savannah)",
      "∀x (has_adventurous_spirit(x) ⊕ is_curious(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Savannah Connors excavates sites or analyzes artifacts, then she is a renowned archaeologist.",
      "Anyone who asks questions or seeks knowledge is curious."
    ],
    "distracting_rules_fol": [
      "(excavates_sites(Savannah) ∨ analyzes_artifacts(Savannah)) → renowned_archaeologist(Savannah)",
      "∀x ((asks_questions(x) ∨ seeks_knowledge(x)) → is_curious(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Savannah does not have an adventurous spirit."
        ],
        "rules": "A person is either curious or has an adventurous spirit, but having one trait does not necessarily imply the other.",
        "conclusion": "Savannah is curious."
      },
      {
        "facts": [
          "Savannah is curious."
        ],
        "rules": "Savannah Connors is either curious or a renowned archaeologist, but being one does not necessarily imply the other.",
        "conclusion": "Savannah is not a renowned archaeologist."
      },
      {
        "facts": [
          "Savannah is not a renowned archaeologist.",
          "Savannah makes groundbreaking discoveries."
        ],
        "rules": "For all humans, if someone is a renowned archaeologist, then they either make groundbreaking discoveries or uncover hidden secrets (or both).",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬has_adventurous_spirit(Savannah)"
        ],
        "rules": "∀x (has_adventurous_spirit(x) ⊕ is_curious(x))",
        "conclusion": "is_curious(Savannah)"
      },
      {
        "facts": [
          "is_curious(Savannah)"
        ],
        "rules": "is_curious(Savannah) ⊕ renowned_archaeologist(Savannah)",
        "conclusion": "¬renowned_archaeologist(Savannah)"
      },
      {
        "facts": [
          "¬renowned_archaeologist(Savannah)",
          "make_groundbreaking_discoveries(Savannah)"
        ],
        "rules": "∀x (renowned_archaeologist(x) → (make_groundbreaking_discoveries(x) ∨ uncover_hidden_secrets(x)))",
        "conclusion": null
      }
    ],
    "conclusion": "Savannah does not uncover hidden secrets.",
    "conclusion_fol": "¬uncover_hidden_secrets(Savannah)",
    "answer": "Uncertain",
    "context": [
      "Savannah does not have an adventurous spirit.",
      "A person is either curious or has an adventurous spirit, but having one trait does not necessarily imply the other.",
      "Savannah Connors is either curious or a renowned archaeologist, but being one does not necessarily imply the other.",
      "Savannah makes groundbreaking discoveries.",
      "For all humans, if someone is a renowned archaeologist, then they either make groundbreaking discoveries or uncover hidden secrets (or both)."
    ],
    "context_fol": [
      "¬has_adventurous_spirit(Savannah)",
      "∀x (has_adventurous_spirit(x) ⊕ is_curious(x))",
      "is_curious(Savannah) ⊕ renowned_archaeologist(Savannah)",
      "make_groundbreaking_discoveries(Savannah)",
      "∀x (renowned_archaeologist(x) → (make_groundbreaking_discoveries(x) ∨ uncover_hidden_secrets(x)))"
    ],
    "background_story": "Savannah Connors was a renowned archaeologist known for her groundbreaking discoveries. Born into a family of historians, she grew up surrounded by tales of ancient civilizations. Her fascination with the past led her to embark on a career uncovering the secrets of long-lost cultures. Savannah's most notable excavation was in Egypt, where she unearthed a previously unknown pharaonic tomb. Her findings shed new light on the region's history, earning her international acclaim. With her sharp mind and adventurous spirit, Savannah Connors continued to explore the mysteries of the past, leaving behind a legacy that inspired generations of archaeologists and historians to follow in her footsteps.",
    "name": "Savannah",
    "keyword": "connors",
    "subject_category": "human"
  },
  {
    "facts": [
      "Jace travels extensively.",
      "Jace researches flora.",
      "Jace explores nature.",
      "Jace collects specimens."
    ],
    "facts_fol": [
      "travel_extensively(Jace)",
      "research_flora(Jace)",
      "explore_nature(Jace)",
      "collect_specimens(Jace)"
    ],
    "rules": [
      "A botanist either classifies plant species or makes notable discoveries, but not necessarily both.",
      "Every botanist who researches flora either classifies plant species or contributes to botanical knowledge.",
      "If Jace explores nature, then he either collects specimens or contributes to knowledge, but not both."
    ],
    "rules_fol": [
      "∀x (classify_plant_species(x) ⊕ make_notable_discoveries(x))",
      "∀x (research_flora(x) → (classify_plant_species(x) ∨ contribute_knowledge(x)))",
      "explore_nature(Jace) → (collect_specimens(Jace) ⊕ contribute_knowledge(Jace))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Any botanist who investigates rare plants or analyzes botanical data can make notable discoveries.",
      "If Jace either identifies flowers or analyzes leaves (but not both), then he classifies plant species.",
      "If Jace investigates plants, then he either contributes to botanical knowledge or preserves plant samples, but not both."
    ],
    "distracting_rules_fol": [
      "∀x ((investigate_rare_plants(x) ∨ analyze_botanical_data(x)) → make_notable_discoveries(x))",
      "(identify_flowers(Jace) ⊕ analyze_leaves(Jace)) → classify_plant_species(Jace)",
      "investigate_plants(Jace) → (contribute_knowledge(Jace) ⊕ preserve_samples(Jace))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Jace explores nature.",
          "Jace collects specimens."
        ],
        "rules": "If Jace explores nature, then he either collects specimens or contributes to knowledge, but not both.",
        "conclusion": "Jace does not contribute to botanical knowledge."
      },
      {
        "facts": [
          "Jace researches flora.",
          "Jace does not contribute to botanical knowledge."
        ],
        "rules": "Every botanist who researches flora either classifies plant species or contributes to botanical knowledge.",
        "conclusion": "Jace classifies plant species."
      },
      {
        "facts": [
          "Jace classifies plant species."
        ],
        "rules": "A botanist either classifies plant species or makes notable discoveries, but not necessarily both.",
        "conclusion": "Jace does not make notable discoveries."
      },
      {
        "facts": [
          "Jace travels extensively.",
          "Jace does not make notable discoveries."
        ],
        "rules": null,
        "conclusion": "If Jace studies Resedaceae or travels extensively (or both), then he makes notable discoveries."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "explore_nature(Jace)",
          "collect_specimens(Jace)"
        ],
        "rules": "explore_nature(Jace) → (collect_specimens(Jace) ⊕ contribute_knowledge(Jace))",
        "conclusion": "¬contribute_knowledge(Jace)"
      },
      {
        "facts": [
          "research_flora(Jace)",
          "¬contribute_knowledge(Jace)"
        ],
        "rules": "∀x (research_flora(x) → (classify_plant_species(x) ∨ contribute_knowledge(x)))",
        "conclusion": "classify_plant_species(Jace)"
      },
      {
        "facts": [
          "classify_plant_species(Jace)"
        ],
        "rules": "∀x (classify_plant_species(x) ⊕ make_notable_discoveries(x))",
        "conclusion": "¬make_notable_discoveries(Jace)"
      },
      {
        "facts": [
          "travel_extensively(Jace)",
          "¬make_notable_discoveries(Jace)"
        ],
        "rules": null,
        "conclusion": "(study_Resedaceae(Jace) ∨ travel_extensively(Jace)) → make_notable_discoveries(Jace)"
      }
    ],
    "conclusion": "If Jace studies Resedaceae or travels extensively (or both), then he makes notable discoveries.",
    "conclusion_fol": "(study_Resedaceae(Jace) ∨ travel_extensively(Jace)) → make_notable_discoveries(Jace)",
    "answer": "False",
    "context": [
      "Jace explores nature.",
      "Jace collects specimens.",
      "If Jace explores nature, then he either collects specimens or contributes to knowledge, but not both.",
      "Jace researches flora.",
      "Every botanist who researches flora either classifies plant species or contributes to botanical knowledge.",
      "A botanist either classifies plant species or makes notable discoveries, but not necessarily both.",
      "Jace travels extensively."
    ],
    "context_fol": [
      "explore_nature(Jace)",
      "collect_specimens(Jace)",
      "explore_nature(Jace) → (collect_specimens(Jace) ⊕ contribute_knowledge(Jace))",
      "research_flora(Jace)",
      "∀x (research_flora(x) → (classify_plant_species(x) ∨ contribute_knowledge(x)))",
      "∀x (classify_plant_species(x) ⊕ make_notable_discoveries(x))",
      "travel_extensively(Jace)"
    ],
    "background_story": "Jace was a renowned botanist with a passion for the Resedaceae family, commonly known as the mignonette family. He spent years studying the unique characteristics of these plants, which are often overlooked due to their small, delicate flowers. Jace's fascination with Resedaceae led him to travel the world, from the Mediterranean regions to the deserts of North America, in search of new species. His extensive research and discoveries earned him international recognition, and he became a leading expert in his field. Jace's work not only shed light on the Resedaceae family but also contributed significantly to the understanding of plant evolution and diversity. His dedication to the study of these often-underappreciated plants inspired a new generation of botanists to explore the wonders of the natural world.",
    "name": "Jace",
    "keyword": "resedaceae",
    "subject_category": "botanist"
  },
  {
    "facts": [
      "Billie develops training.",
      "Billie designs effective processes.",
      "Billie does not innovate solutions."
    ],
    "facts_fol": [
      "develop_training(Billie)",
      "design_processes(Billie)",
      "¬innovate_solutions(Billie)"
    ],
    "rules": [
      "For all entrepreneurs, if they create duplicable systems and franchise their business, then they will achieve rapid expansion.",
      "If Billie develops training, then she franchises her business and builds a strong brand.",
      "Any entrepreneur who thinks scalably or designs effective processes can create duplicable systems.",
      "Every entrepreneur either innovates solutions or thinks scalably."
    ],
    "rules_fol": [
      "∀x ((create_duplicable_systems(x) ∧ franchise_the_business(x)) → achieve_rapid_expansion(x))",
      "develop_training(Billie) → (franchise_the_business(Billie) ∧ build_strong_brand(Billie))",
      "∀x ((think_scalably(x) ∨ design_processes(x)) → create_duplicable_systems(x))",
      "∀x (innovate_solutions(x) ∨ think_scalably(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If an entrepreneur identifies opportunities and builds strong teams, then they can franchise their business.",
      "If an entrepreneur identifies gaps and streamlines operations, then they can create duplicable systems.",
      "For all entrepreneurs, if they set goals and seek efficiency, then they think scalably."
    ],
    "distracting_rules_fol": [
      "∀x ((identifies_opportunities(x) ∧ builds_strong_teams(x)) → franchise_the_business(x))",
      "∀x ((identifies_gaps(x) ∧ streamlines_operations(x)) → create_duplicable_systems(x))",
      "∀x ((sets_goals(x) ∧ seeks_efficiency(x)) → think_scalably(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Billie does not innovate solutions."
        ],
        "rules": "Every entrepreneur either innovates solutions or thinks scalably.",
        "conclusion": "Billie thinks scalably."
      },
      {
        "facts": [
          "Billie thinks scalably.",
          "Billie designs effective processes."
        ],
        "rules": "Any entrepreneur who thinks scalably or designs effective processes can create duplicable systems.",
        "conclusion": "Billie creates duplicable systems."
      },
      {
        "facts": [
          "Billie develops training."
        ],
        "rules": "If Billie develops training, then she franchises her business and builds a strong brand.",
        "conclusion": "Billie franchises her business."
      },
      {
        "facts": [
          "Billie creates duplicable systems.",
          "Billie franchises her business."
        ],
        "rules": "For all entrepreneurs, if they create duplicable systems and franchise their business, then they will achieve rapid expansion.",
        "conclusion": "Billie does not achieve rapid expansion."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬innovate_solutions(Billie)"
        ],
        "rules": "∀x (innovate_solutions(x) ∨ think_scalably(x))",
        "conclusion": "think_scalably(Billie)"
      },
      {
        "facts": [
          "think_scalably(Billie)",
          "design_processes(Billie)"
        ],
        "rules": "∀x ((think_scalably(x) ∨ design_processes(x)) → create_duplicable_systems(x))",
        "conclusion": "create_duplicable_systems(Billie)"
      },
      {
        "facts": [
          "develop_training(Billie)"
        ],
        "rules": "develop_training(Billie) → (franchise_the_business(Billie) ∧ build_strong_brand(Billie))",
        "conclusion": "franchise_the_business(Billie)"
      },
      {
        "facts": [
          "create_duplicable_systems(Billie)",
          "franchise_the_business(Billie)"
        ],
        "rules": "∀x ((create_duplicable_systems(x) ∧ franchise_the_business(x)) → achieve_rapid_expansion(x))",
        "conclusion": "¬achieve_rapid_expansion(Billie)"
      }
    ],
    "conclusion": "Billie does not achieve rapid expansion.",
    "conclusion_fol": "¬achieve_rapid_expansion(Billie)",
    "answer": "False",
    "context": [
      "Billie does not innovate solutions.",
      "Every entrepreneur either innovates solutions or thinks scalably.",
      "Billie designs effective processes.",
      "Any entrepreneur who thinks scalably or designs effective processes can create duplicable systems.",
      "Billie develops training.",
      "If Billie develops training, then she franchises her business and builds a strong brand.",
      "For all entrepreneurs, if they create duplicable systems and franchise their business, then they will achieve rapid expansion."
    ],
    "context_fol": [
      "¬innovate_solutions(Billie)",
      "∀x (innovate_solutions(x) ∨ think_scalably(x))",
      "design_processes(Billie)",
      "∀x ((think_scalably(x) ∨ design_processes(x)) → create_duplicable_systems(x))",
      "develop_training(Billie)",
      "develop_training(Billie) → (franchise_the_business(Billie) ∧ build_strong_brand(Billie))",
      "∀x ((create_duplicable_systems(x) ∧ franchise_the_business(x)) → achieve_rapid_expansion(x))"
    ],
    "background_story": "Billie was a savvy businesswoman who had a knack for creating duplicable systems. She started her career as a solo consultant, but soon realized that her services could be scaled up if she could replicate her success. Billie developed a comprehensive training program that taught others how to deliver her signature consulting services. She then franchised her business, allowing qualified individuals to purchase licenses and operate under her brand. The model was highly duplicable, with each franchisee receiving the same training, support, and tools. As a result, Billie's business expanded rapidly, with locations opening across the country. Her duplicable system not only brought her wealth but also created opportunities for countless others to build successful careers.",
    "name": "Billie",
    "keyword": "duplicable",
    "subject_category": "entrepreneur"
  },
  {
    "facts": [
      "Selena advocates for conservation."
    ],
    "facts_fol": [
      "advocate_conservation(Selena)"
    ],
    "rules": [
      "Selena either appreciates nature or studies insects (or both).",
      "For Selena, either she protects the environment or appreciates nature, but not necessarily both.",
      "For Selena, either she cares for wildlife or protects the environment, but not both.",
      "For Selena, either she advocates for conservation or cares for wildlife, but not both."
    ],
    "rules_fol": [
      "appreciate_nature(Selena) ∨ study_insects(Selena)",
      "protect_environment(Selena) ⊕ appreciate_nature(Selena)",
      "care_for_wildlife(Selena) ⊕ protect_environment(Selena)",
      "advocate_conservation(Selena) ⊕ care_for_wildlife(Selena)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Anyone who enjoys hiking or watches birds appreciates nature.",
      "If Selena either conserves resources or reduces waste (but not both), then she protects the environment.",
      "For all humans, if they respect the ecosystem and love animals, then they care for wildlife."
    ],
    "distracting_rules_fol": [
      "∀x ((enjoy_hiking(x) ∨ watch_birds(x)) → appreciate_nature(x))",
      "(conserve_resources(Selena) ⊕ reduce_waste(Selena)) → protect_environment(Selena)",
      "∀x ((respects_ecosystem(x) ∧ loves_animals(x)) → care_for_wildlife(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Selena advocates for conservation."
        ],
        "rules": "For Selena, either she advocates for conservation or cares for wildlife, but not both.",
        "conclusion": "Selena does not care for wildlife."
      },
      {
        "facts": [
          "Selena does not care for wildlife."
        ],
        "rules": "For Selena, either she cares for wildlife or protects the environment, but not both.",
        "conclusion": "Selena protects the environment."
      },
      {
        "facts": [
          "Selena protects the environment."
        ],
        "rules": "For Selena, either she protects the environment or appreciates nature, but not necessarily both.",
        "conclusion": "Selena does not appreciate nature."
      },
      {
        "facts": [
          "Selena does not appreciate nature."
        ],
        "rules": "Selena either appreciates nature or studies insects (or both).",
        "conclusion": "Selena studies insects."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "advocate_conservation(Selena)"
        ],
        "rules": "advocate_conservation(Selena) ⊕ care_for_wildlife(Selena)",
        "conclusion": "¬care_for_wildlife(Selena)"
      },
      {
        "facts": [
          "¬care_for_wildlife(Selena)"
        ],
        "rules": "care_for_wildlife(Selena) ⊕ protect_environment(Selena)",
        "conclusion": "protect_environment(Selena)"
      },
      {
        "facts": [
          "protect_environment(Selena)"
        ],
        "rules": "protect_environment(Selena) ⊕ appreciate_nature(Selena)",
        "conclusion": "¬appreciate_nature(Selena)"
      },
      {
        "facts": [
          "¬appreciate_nature(Selena)"
        ],
        "rules": "appreciate_nature(Selena) ∨ study_insects(Selena)",
        "conclusion": "study_insects(Selena)"
      }
    ],
    "conclusion": "Selena studies insects.",
    "conclusion_fol": "study_insects(Selena)",
    "answer": "True",
    "context": [
      "Selena advocates for conservation.",
      "For Selena, either she advocates for conservation or cares for wildlife, but not both.",
      "For Selena, either she cares for wildlife or protects the environment, but not both.",
      "For Selena, either she protects the environment or appreciates nature, but not necessarily both.",
      "Selena either appreciates nature or studies insects (or both)."
    ],
    "context_fol": [
      "advocate_conservation(Selena)",
      "advocate_conservation(Selena) ⊕ care_for_wildlife(Selena)",
      "care_for_wildlife(Selena) ⊕ protect_environment(Selena)",
      "protect_environment(Selena) ⊕ appreciate_nature(Selena)",
      "appreciate_nature(Selena) ∨ study_insects(Selena)"
    ],
    "background_story": "Selena was an entomologist with a peculiar fascination for the cockchafer, also known as the May bug. Growing up in a rural village surrounded by lush green fields, she spent most of her childhood observing these beetles. Selena's curiosity about the cockchafer's life cycle, from its underground larval stage to its nocturnal adult flights, drove her to pursue a career in insect ecology. Her research focused on the impact of these insects on soil quality and agricultural productivity. Selena's dedication to her work earned her the nickname 'Cockchafer Queen' among her peers. She continued to study and protect these often-misunderstood creatures, advocating for their importance in the ecosystem and inspiring a new generation of entomologists to follow in her footsteps.",
    "name": "Selena",
    "keyword": "cockchafer",
    "subject_category": "human"
  },
  {
    "facts": [
      "Alia leads the community.",
      "Alia supports the needy.",
      "Alia asks openly.",
      "Alia speaks gently."
    ],
    "facts_fol": [
      "lead_community(Alia)",
      "support_needy(Alia)",
      "asks_openly(Alia)",
      "speaks_gently(Alia)"
    ],
    "rules": [
      "For all humans, if a person is compassionate, then they help others and earn respect.",
      "All caring individuals help other people.",
      "If Alia leads the community, then she cares and supports the needy.",
      "Any person who gives generously or listens actively is compassionate.",
      "If someone asks openly and speaks gently, then they listen actively."
    ],
    "rules_fol": [
      "∀x (compassionate(x) → (help_others(x) ∧ earn_respect(x)))",
      "∀x (care(x) → help_others(x))",
      "lead_community(Alia) → (care(Alia) ∧ support_needy(Alia))",
      "∀x ((give_generously(x) ∨ listen_actively(x)) → compassionate(x))",
      "∀x ((asks_openly(x) ∧ speaks_gently(x)) → listen_actively(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Alia donates time or helps others.",
      "Any person who shows empathy or serves others cares about them.",
      "If Alia is empathetic, then she is either compassionate or charitable, but not both.",
      "Alia speaks kindly or listens actively."
    ],
    "distracting_rules_fol": [
      "donate_time(Alia) ∨ help_others(Alia)",
      "∀x ((show_empathy(x) ∨ serve_others(x)) → care(x))",
      "is_empathetic(Alia) → (compassionate(Alia) ⊕ is_charitable(Alia))",
      "speak_kindly(Alia) ∨ listen_actively(Alia)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Alia asks openly.",
          "Alia speaks gently."
        ],
        "rules": "If someone asks openly and speaks gently, then they listen actively.",
        "conclusion": "Alia listens actively."
      },
      {
        "facts": [
          "Alia listens actively."
        ],
        "rules": "Any person who gives generously or listens actively is compassionate.",
        "conclusion": "Alia is compassionate."
      },
      {
        "facts": [
          "Alia leads the community.",
          "Alia supports the needy."
        ],
        "rules": "If Alia leads the community, then she cares and supports the needy.",
        "conclusion": "Alia cares."
      },
      {
        "facts": [
          "Alia cares."
        ],
        "rules": "All caring individuals help other people.",
        "conclusion": "Alia helps others."
      },
      {
        "facts": [
          "Alia is compassionate.",
          "Alia helps others."
        ],
        "rules": "For all humans, if a person is compassionate, then they help others and earn respect.",
        "conclusion": "Alia does not earn respect."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "asks_openly(Alia)",
          "speaks_gently(Alia)"
        ],
        "rules": "∀x ((asks_openly(x) ∧ speaks_gently(x)) → listen_actively(x))",
        "conclusion": "listen_actively(Alia)"
      },
      {
        "facts": [
          "listen_actively(Alia)"
        ],
        "rules": "∀x ((give_generously(x) ∨ listen_actively(x)) → compassionate(x))",
        "conclusion": "compassionate(Alia)"
      },
      {
        "facts": [
          "lead_community(Alia)",
          "support_needy(Alia)"
        ],
        "rules": "lead_community(Alia) → (care(Alia) ∧ support_needy(Alia))",
        "conclusion": "care(Alia)"
      },
      {
        "facts": [
          "care(Alia)"
        ],
        "rules": "∀x (care(x) → help_others(x))",
        "conclusion": "help_others(Alia)"
      },
      {
        "facts": [
          "compassionate(Alia)",
          "help_others(Alia)"
        ],
        "rules": "∀x (compassionate(x) → (help_others(x) ∧ earn_respect(x)))",
        "conclusion": "¬earn_respect(Alia)"
      }
    ],
    "conclusion": "Alia does not earn respect.",
    "conclusion_fol": "¬earn_respect(Alia)",
    "answer": "False",
    "context": [
      "Alia asks openly.",
      "Alia speaks gently.",
      "If someone asks openly and speaks gently, then they listen actively.",
      "Any person who gives generously or listens actively is compassionate.",
      "Alia leads the community.",
      "Alia supports the needy.",
      "If Alia leads the community, then she cares and supports the needy.",
      "All caring individuals help other people.",
      "For all humans, if a person is compassionate, then they help others and earn respect."
    ],
    "context_fol": [
      "asks_openly(Alia)",
      "speaks_gently(Alia)",
      "∀x ((asks_openly(x) ∧ speaks_gently(x)) → listen_actively(x))",
      "∀x ((give_generously(x) ∨ listen_actively(x)) → compassionate(x))",
      "lead_community(Alia)",
      "support_needy(Alia)",
      "lead_community(Alia) → (care(Alia) ∧ support_needy(Alia))",
      "∀x (care(x) → help_others(x))",
      "∀x (compassionate(x) → (help_others(x) ∧ earn_respect(x)))"
    ],
    "background_story": "Alia was a highly respected figure in her community, serving as a minister at the local church. Her ministerial duties went beyond the pulpit, as she dedicated herself to helping those in need. With a compassionate heart and a strong sense of justice, Alia worked tirelessly to support the marginalized and the poor. She established programs for food distribution, education, and job training, earning the admiration of her congregation and the wider community. Alia's ministerial work was not limited to her church; she was a beacon of hope and a symbol of faith in action, inspiring countless individuals to follow in her footsteps and make a positive impact in the world.",
    "name": "Alia",
    "keyword": "ministerial",
    "subject_category": "human"
  },
  {
    "facts": [
      "Hailey gets hurt.",
      "Hailey has an injury.",
      "Hailey carries a child.",
      "Hailey does not expect a baby.",
      "Hailey cares for a baby.",
      "Hailey does not feed a child."
    ],
    "facts_fol": [
      "gets_hurt(Hailey)",
      "has_injury(Hailey)",
      "carries_child(Hailey)",
      "¬expects_baby(Hailey)",
      "cares_baby(Hailey)",
      "¬feeds_child(Hailey)"
    ],
    "rules": [
      "If Hailey gives birth, then she either experiences pain or feels joy, but not both.",
      "For all humans, if they have an injury and get hurt, then they experience pain.",
      "All pregnant humans nurture life and give birth.",
      "If Hailey either carries a child or expects a baby (but not both), then she is pregnant.",
      "If Hailey either cares for a baby or feeds a child (but not both), then she nurtures life."
    ],
    "rules_fol": [
      "give_birth(Hailey) → (experience_pain(Hailey) ⊕ feel_joy(Hailey))",
      "∀x ((has_injury(x) ∧ gets_hurt(x)) → experience_pain(x))",
      "∀x (is_pregnant(x) → (nurture_life(x) ∧ give_birth(x)))",
      "(carries_child(Hailey) ⊕ expects_baby(Hailey)) → is_pregnant(Hailey)",
      "(cares_baby(Hailey) ⊕ feeds_child(Hailey)) → nurture_life(Hailey)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Any person who has a complication or undergoes surgery will experience pain.",
      "All mothers give birth and love unconditionally.",
      "Hailey raises a family or is pregnant.",
      "Any human who has a baby or receives care can nurture life."
    ],
    "distracting_rules_fol": [
      "∀x ((has_complication(x) ∨ undergoes_surgery(x)) → experience_pain(x))",
      "∀x (is_mother(x) → (give_birth(x) ∧ love_unconditionally(x)))",
      "raises_family(Hailey) ∨ is_pregnant(Hailey)",
      "∀x ((has_baby(x) ∨ receives_care(x)) → nurture_life(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Hailey cares for a baby.",
          "Hailey does not feed a child."
        ],
        "rules": "If Hailey either cares for a baby or feeds a child (but not both), then she nurtures life.",
        "conclusion": "Hailey nurtures life."
      },
      {
        "facts": [
          "Hailey carries a child.",
          "Hailey does not expect a baby."
        ],
        "rules": "If Hailey either carries a child or expects a baby (but not both), then she is pregnant.",
        "conclusion": "Hailey is pregnant."
      },
      {
        "facts": [
          "Hailey is pregnant.",
          "Hailey nurtures life."
        ],
        "rules": "All pregnant humans nurture life and give birth.",
        "conclusion": "Hailey gives birth."
      },
      {
        "facts": [
          "Hailey has an injury.",
          "Hailey gets hurt."
        ],
        "rules": "For all humans, if they have an injury and get hurt, then they experience pain.",
        "conclusion": "Hailey experiences pain."
      },
      {
        "facts": [
          "Hailey gives birth.",
          "Hailey experiences pain."
        ],
        "rules": "If Hailey gives birth, then she either experiences pain or feels joy, but not both.",
        "conclusion": "Hailey feels joy."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "cares_baby(Hailey)",
          "¬feeds_child(Hailey)"
        ],
        "rules": "(cares_baby(Hailey) ⊕ feeds_child(Hailey)) → nurture_life(Hailey)",
        "conclusion": "nurture_life(Hailey)"
      },
      {
        "facts": [
          "carries_child(Hailey)",
          "¬expects_baby(Hailey)"
        ],
        "rules": "(carries_child(Hailey) ⊕ expects_baby(Hailey)) → is_pregnant(Hailey)",
        "conclusion": "is_pregnant(Hailey)"
      },
      {
        "facts": [
          "is_pregnant(Hailey)",
          "nurture_life(Hailey)"
        ],
        "rules": "∀x (is_pregnant(x) → (nurture_life(x) ∧ give_birth(x)))",
        "conclusion": "give_birth(Hailey)"
      },
      {
        "facts": [
          "has_injury(Hailey)",
          "gets_hurt(Hailey)"
        ],
        "rules": "∀x ((has_injury(x) ∧ gets_hurt(x)) → experience_pain(x))",
        "conclusion": "experience_pain(Hailey)"
      },
      {
        "facts": [
          "give_birth(Hailey)",
          "experience_pain(Hailey)"
        ],
        "rules": "give_birth(Hailey) → (experience_pain(Hailey) ⊕ feel_joy(Hailey))",
        "conclusion": "feel_joy(Hailey)"
      }
    ],
    "conclusion": "Hailey feels joy.",
    "conclusion_fol": "feel_joy(Hailey)",
    "answer": "False",
    "context": [
      "Hailey cares for a baby.",
      "Hailey does not feed a child.",
      "If Hailey either cares for a baby or feeds a child (but not both), then she nurtures life.",
      "Hailey carries a child.",
      "Hailey does not expect a baby.",
      "If Hailey either carries a child or expects a baby (but not both), then she is pregnant.",
      "All pregnant humans nurture life and give birth.",
      "Hailey has an injury.",
      "Hailey gets hurt.",
      "For all humans, if they have an injury and get hurt, then they experience pain.",
      "If Hailey gives birth, then she either experiences pain or feels joy, but not both."
    ],
    "context_fol": [
      "cares_baby(Hailey)",
      "¬feeds_child(Hailey)",
      "(cares_baby(Hailey) ⊕ feeds_child(Hailey)) → nurture_life(Hailey)",
      "carries_child(Hailey)",
      "¬expects_baby(Hailey)",
      "(carries_child(Hailey) ⊕ expects_baby(Hailey)) → is_pregnant(Hailey)",
      "∀x (is_pregnant(x) → (nurture_life(x) ∧ give_birth(x)))",
      "has_injury(Hailey)",
      "gets_hurt(Hailey)",
      "∀x ((has_injury(x) ∧ gets_hurt(x)) → experience_pain(x))",
      "give_birth(Hailey) → (experience_pain(Hailey) ⊕ feel_joy(Hailey))"
    ],
    "background_story": "Hailey's journey into motherhood was nothing short of miraculous. After years of trying, she finally conceived, and her pregnancy was a celebration of life and love. As her due date approached, Hailey prepared herself for the miracle of parturiency, the process of giving birth. With each passing day, her anticipation and excitement grew. Finally, the day arrived, and Hailey welcomed her baby boy, Ethan, into the world. The moment of parturiency was overwhelming, a mix of pain, joy, and relief. As she held Ethan in her arms for the first time, Hailey felt an unparalleled sense of accomplishment and love. She had nurtured life within her and brought it into the world, an experience that would forever change her life and fill her heart with unending joy.",
    "name": "Hailey",
    "keyword": "parturiency",
    "subject_category": "human"
  },
  {
    "facts": [
      "Paxton is organized.",
      "Paxton does not set goals."
    ],
    "facts_fol": [
      "is_organized(Paxton)",
      "¬sets_goals(Paxton)"
    ],
    "rules": [
      "For every human, they are either punctual or late, but not both.",
      "If someone plans ahead and manages their time, then they are punctual.",
      "All organized individuals manage their time effectively.",
      "Everyone sets goals or plans ahead."
    ],
    "rules_fol": [
      "∀x (punctual(x) ⊕ late(x))",
      "∀x ((plansahead(x) ∧ manages_time(x)) → punctual(x))",
      "∀x (is_organized(x) → manages_time(x))",
      "∀x (sets_goals(x) ∨ plansahead(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "All reliable individuals are punctual and meet deadlines.",
      "Paxton meets deadlines or manages his time.",
      "Everyone who meets deadlines either delegates tasks or plans ahead (or both)."
    ],
    "distracting_rules_fol": [
      "∀x (reliable(x) → (punctual(x) ∧ meets_deadlines(x)))",
      "meets_deadlines(Paxton) ∨ manages_time(Paxton)",
      "∀x (meets_deadlines(x) → (delegates_tasks(x) ∨ plansahead(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Paxton does not set goals."
        ],
        "rules": "Everyone sets goals or plans ahead.",
        "conclusion": "Paxton plans ahead."
      },
      {
        "facts": [
          "Paxton is organized."
        ],
        "rules": "All organized individuals manage their time effectively.",
        "conclusion": "Paxton manages his time."
      },
      {
        "facts": [
          "Paxton plans ahead.",
          "Paxton manages his time."
        ],
        "rules": "If someone plans ahead and manages their time, then they are punctual.",
        "conclusion": "Paxton is punctual."
      },
      {
        "facts": [
          "Paxton is punctual."
        ],
        "rules": "For every human, they are either punctual or late, but not both.",
        "conclusion": "Paxton is late."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬sets_goals(Paxton)"
        ],
        "rules": "∀x (sets_goals(x) ∨ plansahead(x))",
        "conclusion": "plansahead(Paxton)"
      },
      {
        "facts": [
          "is_organized(Paxton)"
        ],
        "rules": "∀x (is_organized(x) → manages_time(x))",
        "conclusion": "manages_time(Paxton)"
      },
      {
        "facts": [
          "plansahead(Paxton)",
          "manages_time(Paxton)"
        ],
        "rules": "∀x ((plansahead(x) ∧ manages_time(x)) → punctual(x))",
        "conclusion": "punctual(Paxton)"
      },
      {
        "facts": [
          "punctual(Paxton)"
        ],
        "rules": "∀x (punctual(x) ⊕ late(x))",
        "conclusion": "late(Paxton)"
      }
    ],
    "conclusion": "Paxton is late.",
    "conclusion_fol": "late(Paxton)",
    "answer": "False",
    "context": [
      "Paxton does not set goals.",
      "Everyone sets goals or plans ahead.",
      "Paxton is organized.",
      "All organized individuals manage their time effectively.",
      "If someone plans ahead and manages their time, then they are punctual.",
      "For every human, they are either punctual or late, but not both."
    ],
    "context_fol": [
      "¬sets_goals(Paxton)",
      "∀x (sets_goals(x) ∨ plansahead(x))",
      "is_organized(Paxton)",
      "∀x (is_organized(x) → manages_time(x))",
      "∀x ((plansahead(x) ∧ manages_time(x)) → punctual(x))",
      "∀x (punctual(x) ⊕ late(x))"
    ],
    "background_story": "Paxton was a meticulous and organized individual who valued timework above all else. As a project manager at a prestigious firm, he ensured that every task was completed with precision and on schedule. Paxton's colleagues admired his ability to prioritize tasks, delegate responsibilities, and meet deadlines. He was known for his detailed timelines and progress reports, which helped the team stay on track. Paxton's dedication to timework didn't stop at the office; he applied the same principles to his personal life, scheduling time for exercise, hobbies, and relationships. His friends and family appreciated his reliability and punctuality, making him a trusted and respected member of his community.",
    "name": "Paxton",
    "keyword": "timework",
    "subject_category": "human"
  },
  {
    "facts": [
      "Emmanuel visits a restaurant.",
      "Emmanuel is in love.",
      "Emmanuel dines out.",
      "Emmanuel does not enjoy the cuisine."
    ],
    "facts_fol": [
      "visit_restaurant(Emmanuel)",
      "be_in_love(Emmanuel)",
      "dine_out(Emmanuel)",
      "¬enjoy_cuisine(Emmanuel)"
    ],
    "rules": [
      "If a couple eats Moules d'Amour and is in love, then they will rekindle their passion.",
      "If Emmanuel visits a restaurant, then he either eats Moules d'Amour or tries a special dish.",
      "Everyone who dines out either enjoys the cuisine or tries a special dish."
    ],
    "rules_fol": [
      "(eat_Moules_dAmour(Emmanuel) ∧ be_in_love(Emmanuel)) → rekindle_passion(Emmanuel)",
      "visit_restaurant(Emmanuel) → (eat_Moules_dAmour(Emmanuel) ⊕ try_special_dish(Emmanuel))",
      "∀x (dine_out(x) → (enjoy_cuisine(x) ∨ try_special_dish(x)))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Emmanuel seeks romance, then he either feels desire or eats Moules d'Amour.",
      "If Emmanuel seeks romance, then he either tries a special dish or explores flavors."
    ],
    "distracting_rules_fol": [
      "seek_romance(Emmanuel) → (feel_desire(Emmanuel) ∨ eat_Moules_dAmour(Emmanuel))",
      "seek_romance(Emmanuel) → (try_special_dish(Emmanuel) ∨ explore_flavors(Emmanuel))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Emmanuel dines out.",
          "Emmanuel does not enjoy the cuisine."
        ],
        "rules": "Everyone who dines out either enjoys the cuisine or tries a special dish.",
        "conclusion": "Emmanuel tries a special dish."
      },
      {
        "facts": [
          "Emmanuel visits a restaurant.",
          "Emmanuel tries a special dish."
        ],
        "rules": "If Emmanuel visits a restaurant, then he either eats Moules d'Amour or tries a special dish.",
        "conclusion": "Emmanuel does not eat Moules d'Amour."
      },
      {
        "facts": [
          "Emmanuel does not eat Moules d'Amour.",
          "Emmanuel is in love."
        ],
        "rules": "If a couple eats Moules d'Amour and is in love, then they will rekindle their passion.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "dine_out(Emmanuel)",
          "¬enjoy_cuisine(Emmanuel)"
        ],
        "rules": "∀x (dine_out(x) → (enjoy_cuisine(x) ∨ try_special_dish(x)))",
        "conclusion": "try_special_dish(Emmanuel)"
      },
      {
        "facts": [
          "visit_restaurant(Emmanuel)",
          "try_special_dish(Emmanuel)"
        ],
        "rules": "visit_restaurant(Emmanuel) → (eat_Moules_dAmour(Emmanuel) ⊕ try_special_dish(Emmanuel))",
        "conclusion": "¬eat_Moules_dAmour(Emmanuel)"
      },
      {
        "facts": [
          "¬eat_Moules_dAmour(Emmanuel)",
          "be_in_love(Emmanuel)"
        ],
        "rules": "(eat_Moules_dAmour(Emmanuel) ∧ be_in_love(Emmanuel)) → rekindle_passion(Emmanuel)",
        "conclusion": null
      }
    ],
    "conclusion": "Emmanuel rekindles his passion.",
    "conclusion_fol": "rekindle_passion(Emmanuel)",
    "answer": "Uncertain",
    "context": [
      "Emmanuel dines out.",
      "Emmanuel does not enjoy the cuisine.",
      "Everyone who dines out either enjoys the cuisine or tries a special dish.",
      "Emmanuel visits a restaurant.",
      "If Emmanuel visits a restaurant, then he either eats Moules d'Amour or tries a special dish.",
      "Emmanuel is in love.",
      "If a couple eats Moules d'Amour and is in love, then they will rekindle their passion."
    ],
    "context_fol": [
      "dine_out(Emmanuel)",
      "¬enjoy_cuisine(Emmanuel)",
      "∀x (dine_out(x) → (enjoy_cuisine(x) ∨ try_special_dish(x)))",
      "visit_restaurant(Emmanuel)",
      "visit_restaurant(Emmanuel) → (eat_Moules_dAmour(Emmanuel) ⊕ try_special_dish(Emmanuel))",
      "be_in_love(Emmanuel)",
      "(eat_Moules_dAmour(Emmanuel) ∧ be_in_love(Emmanuel)) → rekindle_passion(Emmanuel)"
    ],
    "background_story": "Emmanuel was a renowned chef in 18th century France, celebrated for his exquisite culinary skills. He owned a petite, exclusive restaurant where the elite would gather for a taste of his divine creations. Emmanuel's true claim to fame, however, was his ability to craft dishes that were rumored to be potent aphrodisiacs. His restaurant, 'Le Coeur de la Nuit', became a haven for couples seeking to rekindle their passion. Emmanuel's signature dish, 'Moules d'Amour', was said to ignite fervent desire in those who dared to indulge. With its succulent mussels, rare spices, and a hint of truffle, the dish was a masterpiece. People whispered that Emmanuel's culinary art was not just about taste, but about evoking emotions and sparking love. His restaurant remained a secret haven for those seeking more than just a meal, but an experience that could ignite the flames of passion.",
    "name": "Emmanuel",
    "keyword": "aphrodisiac",
    "subject_category": "human"
  },
  {
    "facts": [
      "Reid does not study tangency.",
      "Reid analyzes data.",
      "Reid does not master trigonometry.",
      "Reid recognizes series.",
      "Reid does not explore theorems.",
      "Reid develops theories."
    ],
    "facts_fol": [
      "¬study_tangency(Reid)",
      "analyze_data(Reid)",
      "¬master_trigon(Reid)",
      "recognize_series(Reid)",
      "¬explore_theorems(Reid)",
      "develop_theories(Reid)"
    ],
    "rules": [
      "Every mathematician who studies tangency either applies geometric principles or models complex systems.",
      "If Reid can solve equations, then he either understands calculus or analyzes data, but not both.",
      "Any mathematician who knows algebra or visualizes patterns can solve equations.",
      "Any mathematician who masters trigonometry or recognizes series can know algebra.",
      "If a mathematician explores theorems and develops theories, then they can model complex systems."
    ],
    "rules_fol": [
      "∀x (study_tangency(x) → (apply_geometric_principles(x) ∨ model_complex_systems(x)))",
      "solve_equations(Reid) → (understand_calculus(Reid) ⊕ analyze_data(Reid))",
      "∀x ((know_algebra(x) ∨ visualize_patterns(x)) → solve_equations(x))",
      "∀x ((master_trigon(x) ∨ recognize_series(x)) → know_algebra(x))",
      "∀x ((explore_theorems(x) ∧ develop_theories(x)) → model_complex_systems(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Any mathematician who uses spatial reasoning or thinks logically can apply geometric principles.",
      "If Reid likes logic and enjoys problem solving, then he understands calculus.",
      "If Reid thinks logically, then he can solve equations and loves puzzles.",
      "If Reid either reads graphs or derives formulas (but not both), then he knows algebra.",
      "If Reid researches dynamics, then he either models complex systems or investigates fractals."
    ],
    "distracting_rules_fol": [
      "∀x ((use_spatial_reasoning(x) ∨ think_logically(x)) → apply_geometric_principles(x))",
      "(likes_logic(Reid) ∧ enjoys_problem(Reid)) → understand_calculus(Reid)",
      "think_logically(Reid) → (solve_equations(Reid) ∧ love_puzzles(Reid))",
      "(read_graphs(Reid) ⊕ derive_formulas(Reid)) → know_algebra(Reid)",
      "research_dynamics(Reid) → (model_complex_systems(Reid) ⊕ investigate_fractals(Reid))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Reid does not explore theorems.",
          "Reid develops theories."
        ],
        "rules": "If a mathematician explores theorems and develops theories, then they can model complex systems.",
        "conclusion": null
      },
      {
        "facts": [
          "Reid does not master trigonometry.",
          "Reid recognizes series."
        ],
        "rules": "Any mathematician who masters trigonometry or recognizes series can know algebra.",
        "conclusion": "Reid knows algebra."
      },
      {
        "facts": [
          "Reid knows algebra."
        ],
        "rules": "Any mathematician who knows algebra or visualizes patterns can solve equations.",
        "conclusion": "Reid can solve equations."
      },
      {
        "facts": [
          "Reid can solve equations.",
          "Reid analyzes data."
        ],
        "rules": "If Reid can solve equations, then he either understands calculus or analyzes data, but not both.",
        "conclusion": "Reid does not understand calculus."
      },
      {
        "facts": [
          "Reid does not study tangency."
        ],
        "rules": "Every mathematician who studies tangency either applies geometric principles or models complex systems.",
        "conclusion": null
      },
      {
        "facts": [
          "Reid does not understand calculus."
        ],
        "rules": null,
        "conclusion": "Reid understands calculus and applies geometric principles."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬explore_theorems(Reid)",
          "develop_theories(Reid)"
        ],
        "rules": "∀x ((explore_theorems(x) ∧ develop_theories(x)) → model_complex_systems(x))",
        "conclusion": null
      },
      {
        "facts": [
          "¬master_trigon(Reid)",
          "recognize_series(Reid)"
        ],
        "rules": "∀x ((master_trigon(x) ∨ recognize_series(x)) → know_algebra(x))",
        "conclusion": "know_algebra(Reid)"
      },
      {
        "facts": [
          "know_algebra(Reid)"
        ],
        "rules": "∀x ((know_algebra(x) ∨ visualize_patterns(x)) → solve_equations(x))",
        "conclusion": "solve_equations(Reid)"
      },
      {
        "facts": [
          "solve_equations(Reid)",
          "analyze_data(Reid)"
        ],
        "rules": "solve_equations(Reid) → (understand_calculus(Reid) ⊕ analyze_data(Reid))",
        "conclusion": "¬understand_calculus(Reid)"
      },
      {
        "facts": [
          "¬study_tangency(Reid)"
        ],
        "rules": "∀x (study_tangency(x) → (apply_geometric_principles(x) ∨ model_complex_systems(x)))",
        "conclusion": null
      },
      {
        "facts": [
          "¬understand_calculus(Reid)"
        ],
        "rules": null,
        "conclusion": "understand_calculus(Reid) ∧ apply_geometric_principles(Reid)"
      }
    ],
    "conclusion": "Reid understands calculus and applies geometric principles.",
    "conclusion_fol": "understand_calculus(Reid) ∧ apply_geometric_principles(Reid)",
    "answer": "False",
    "context": [
      "Reid does not explore theorems.",
      "Reid develops theories.",
      "If a mathematician explores theorems and develops theories, then they can model complex systems.",
      "Reid does not master trigonometry.",
      "Reid recognizes series.",
      "Any mathematician who masters trigonometry or recognizes series can know algebra.",
      "Any mathematician who knows algebra or visualizes patterns can solve equations.",
      "Reid analyzes data.",
      "If Reid can solve equations, then he either understands calculus or analyzes data, but not both.",
      "Reid does not study tangency.",
      "Every mathematician who studies tangency either applies geometric principles or models complex systems."
    ],
    "context_fol": [
      "¬explore_theorems(Reid)",
      "develop_theories(Reid)",
      "∀x ((explore_theorems(x) ∧ develop_theories(x)) → model_complex_systems(x))",
      "¬master_trigon(Reid)",
      "recognize_series(Reid)",
      "∀x ((master_trigon(x) ∨ recognize_series(x)) → know_algebra(x))",
      "∀x ((know_algebra(x) ∨ visualize_patterns(x)) → solve_equations(x))",
      "analyze_data(Reid)",
      "solve_equations(Reid) → (understand_calculus(Reid) ⊕ analyze_data(Reid))",
      "¬study_tangency(Reid)",
      "∀x (study_tangency(x) → (apply_geometric_principles(x) ∨ model_complex_systems(x)))"
    ],
    "background_story": "Reid was a brilliant mathematician fascinated by the concept of tangency. His work focused on the point where a line touches a curve, exploring the intricacies of calculus and geometry. Reid's groundbreaking research on tangency led to a deeper understanding of mathematical modeling in physics and engineering. His theory on 'tangential stability' was particularly notable, as it helped predict the behavior of complex systems at their points of tangency. Reid's work, though highly specialized, had profound implications for fields ranging from materials science to astrophysics. Despite his reserved nature, Reid's passion for tangency inspired a new generation of mathematicians to explore the beauty and utility of this fundamental concept.",
    "name": "Reid",
    "keyword": "tangency",
    "subject_category": "mathematician"
  },
  {
    "facts": [
      "Francis is outgoing.",
      "Francis does not help others.",
      "Francis does not have empathy."
    ],
    "facts_fol": [
      "is_outgoing(Francis)",
      "¬help_others(Francis)",
      "¬has_empathy(Francis)"
    ],
    "rules": [
      "If Francis is friendly, then he either helps others or brings people together, but not both.",
      "Francis is either approachable or friendly, but not both.",
      "If Francis is outgoing, then he is either approachable or gentle, but not both.",
      "A person is either gentle or has empathy, but these traits are not necessarily intertwined."
    ],
    "rules_fol": [
      "friendly(Francis) → (help_others(Francis) ⊕ bring_people_together(Francis))",
      "is_approachable(Francis) ⊕ friendly(Francis)",
      "is_outgoing(Francis) → (is_approachable(Francis) ⊕ is_gentle(Francis))",
      "∀x (has_empathy(x) ⊕ is_gentle(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Francis either offers guidance or shares smiles (but not both), then he is friendly.",
      "If Francis smiles, then he is approachable.",
      "If Francis is sincere, then he is either thoughtful or gentle, but not both."
    ],
    "distracting_rules_fol": [
      "(offers_guidance(Francis) ⊕ shares_smiles(Francis)) → friendly(Francis)",
      "smile(Francis) → is_approachable(Francis)",
      "is_sincere(Francis) → (is_thoughtful(Francis) ⊕ is_gentle(Francis))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Francis does not have empathy."
        ],
        "rules": "A person is either gentle or has empathy, but these traits are not necessarily intertwined.",
        "conclusion": "Francis is gentle."
      },
      {
        "facts": [
          "Francis is outgoing.",
          "Francis is gentle."
        ],
        "rules": "If Francis is outgoing, then he is either approachable or gentle, but not both.",
        "conclusion": "Francis is not approachable."
      },
      {
        "facts": [
          "Francis is not approachable."
        ],
        "rules": "Francis is either approachable or friendly, but not both.",
        "conclusion": "Francis is friendly."
      },
      {
        "facts": [
          "Francis is friendly.",
          "Francis does not help others."
        ],
        "rules": "If Francis is friendly, then he either helps others or brings people together, but not both.",
        "conclusion": "Francis brings people together."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬has_empathy(Francis)"
        ],
        "rules": "∀x (has_empathy(x) ⊕ is_gentle(x))",
        "conclusion": "is_gentle(Francis)"
      },
      {
        "facts": [
          "is_outgoing(Francis)",
          "is_gentle(Francis)"
        ],
        "rules": "is_outgoing(Francis) → (is_approachable(Francis) ⊕ is_gentle(Francis))",
        "conclusion": "¬is_approachable(Francis)"
      },
      {
        "facts": [
          "¬is_approachable(Francis)"
        ],
        "rules": "is_approachable(Francis) ⊕ friendly(Francis)",
        "conclusion": "friendly(Francis)"
      },
      {
        "facts": [
          "friendly(Francis)",
          "¬help_others(Francis)"
        ],
        "rules": "friendly(Francis) → (help_others(Francis) ⊕ bring_people_together(Francis))",
        "conclusion": "bring_people_together(Francis)"
      }
    ],
    "conclusion": "Francis brings people together.",
    "conclusion_fol": "bring_people_together(Francis)",
    "answer": "True",
    "context": [
      "Francis does not have empathy.",
      "A person is either gentle or has empathy, but these traits are not necessarily intertwined.",
      "Francis is outgoing.",
      "If Francis is outgoing, then he is either approachable or gentle, but not both.",
      "Francis is either approachable or friendly, but not both.",
      "Francis does not help others.",
      "If Francis is friendly, then he either helps others or brings people together, but not both."
    ],
    "context_fol": [
      "¬has_empathy(Francis)",
      "∀x (has_empathy(x) ⊕ is_gentle(x))",
      "is_outgoing(Francis)",
      "is_outgoing(Francis) → (is_approachable(Francis) ⊕ is_gentle(Francis))",
      "is_approachable(Francis) ⊕ friendly(Francis)",
      "¬help_others(Francis)",
      "friendly(Francis) → (help_others(Francis) ⊕ bring_people_together(Francis))"
    ],
    "background_story": "Francis was the kind of person who made everyone feel at ease. His warm smile and gentle mannerisms were unmistakably familiar, like a comforting hug from an old friend. Growing up in a small village, Francis knew almost everyone, and everyone knew him. He'd help out at his family's bakery, where the scent of freshly baked bread and pastries filled the air, making the place feel like a second home to the locals. Francis's familiar face and welcoming nature made him a beloved figure, always ready to lend a listening ear or a helping hand. As he grew older, Francis became the village's trusted postman, delivering not just mail, but also stories and news that kept the community connected.",
    "name": "Francis",
    "keyword": "familiar",
    "subject_category": "human"
  },
  {
    "facts": [
      "Eden receives water.",
      "Eden is manicured."
    ],
    "facts_fol": [
      "receives_water(Eden)",
      "is_manicured(Eden)"
    ],
    "rules": [
      "For every garden, it is either well-tended or neglected, but not both.",
      "Any garden that has a caretaker and receives water is well-tended.",
      "Every manicured garden has a caretaker."
    ],
    "rules_fol": [
      "∀x (well_tended(x) ⊕ neglected(x))",
      "∀x ((has_caretaker(x) ∧ receives_water(x)) → well_tended(x))",
      "∀x (is_manicured(x) → has_caretaker(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If the Eden garden is flourishing, then it is either wild or well-tended, but not both.",
      "If Eden is flourishing, then it either gets pruned or has a caretaker, but not both."
    ],
    "distracting_rules_fol": [
      "is_flourishing(Eden) → (is_wild(Eden) ⊕ well_tended(Eden))",
      "is_flourishing(Eden) → (gets_pruned(Eden) ⊕ has_caretaker(Eden))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Eden is manicured."
        ],
        "rules": "Every manicured garden has a caretaker.",
        "conclusion": "Eden has a caretaker."
      },
      {
        "facts": [
          "Eden has a caretaker.",
          "Eden receives water."
        ],
        "rules": "Any garden that has a caretaker and receives water is well-tended.",
        "conclusion": "The Eden garden is well-tended."
      },
      {
        "facts": [
          "The Eden garden is well-tended."
        ],
        "rules": "For every garden, it is either well-tended or neglected, but not both.",
        "conclusion": "The Eden garden is neglected."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "is_manicured(Eden)"
        ],
        "rules": "∀x (is_manicured(x) → has_caretaker(x))",
        "conclusion": "has_caretaker(Eden)"
      },
      {
        "facts": [
          "has_caretaker(Eden)",
          "receives_water(Eden)"
        ],
        "rules": "∀x ((has_caretaker(x) ∧ receives_water(x)) → well_tended(x))",
        "conclusion": "well_tended(Eden)"
      },
      {
        "facts": [
          "well_tended(Eden)"
        ],
        "rules": "∀x (well_tended(x) ⊕ neglected(x))",
        "conclusion": "neglected(Eden)"
      }
    ],
    "conclusion": "The Eden garden is neglected.",
    "conclusion_fol": "neglected(Eden)",
    "answer": "False",
    "context": [
      "Eden is manicured.",
      "Every manicured garden has a caretaker.",
      "Eden receives water.",
      "Any garden that has a caretaker and receives water is well-tended.",
      "For every garden, it is either well-tended or neglected, but not both."
    ],
    "context_fol": [
      "is_manicured(Eden)",
      "∀x (is_manicured(x) → has_caretaker(x))",
      "receives_water(Eden)",
      "∀x ((has_caretaker(x) ∧ receives_water(x)) → well_tended(x))",
      "∀x (well_tended(x) ⊕ neglected(x))"
    ],
    "background_story": "In the quaint town of Willowdale, there existed a mystical garden named Eden, where the rare and exquisite Vara flower bloomed only once a decade. The garden, tended by generations of green-thumbed caretakers, was a marvel of nature. As the story goes, the Vara's appearance was a sign of great change and renewal. Eden, with its lush greenery and vibrant flora, was a place of serenity and wonder. People would travel from afar to catch a glimpse of the Vara, said to possess healing properties and the essence of beauty. The garden's caretaker, an elderly woman named Ava, believed that Eden's magic lay not just in the Vara, but in the love and care that nourished it, making it a symbol of hope and tranquility.",
    "name": "Eden",
    "keyword": "vara",
    "subject_category": "garden"
  },
  {
    "facts": [
      "Francesca does not gain recognition.",
      "Francesca uses natural forms."
    ],
    "facts_fol": [
      "¬gain_recognition(Francesca)",
      "uses_natural_forms(Francesca)"
    ],
    "rules": [
      "For all artists, if an artist is visionary, then they create innovative works and gain recognition.",
      "Francesca either experiments with materials or is a visionary, but not both.",
      "Francesca either combines techniques or experiments with materials.",
      "Francesca either uses natural forms or combines techniques, but not both."
    ],
    "rules_fol": [
      "∀x (visionary(x) → (create_innovative_works(x) ∧ gain_recognition(x)))",
      "experiment_with_materials(Francesca) ⊕ visionary(Francesca)",
      "combines_techniques(Francesca) ∨ experiment_with_materials(Francesca)",
      "uses_natural_forms(Francesca) ⊕ combines_techniques(Francesca)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Every artist either makes art or is a visionary.",
      "All skilled craftsmen who experiment with materials also understand form.",
      "Any artist who blends styles or merges media combines techniques."
    ],
    "distracting_rules_fol": [
      "∀x (makes_art(x) ∨ visionary(x))",
      "∀x (skilled_craftsman(x) → (experiment_with_materials(x) ∧ understand_form(x)))",
      "∀x ((blends_styles(x) ∨ merges_media(x)) → combines_techniques(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Francesca uses natural forms."
        ],
        "rules": "Francesca either uses natural forms or combines techniques, but not both.",
        "conclusion": "Francesca does not combine techniques."
      },
      {
        "facts": [
          "Francesca does not combine techniques."
        ],
        "rules": "Francesca either combines techniques or experiments with materials.",
        "conclusion": "Francesca experiments with materials."
      },
      {
        "facts": [
          "Francesca experiments with materials."
        ],
        "rules": "Francesca either experiments with materials or is a visionary, but not both.",
        "conclusion": "Francesca is not a visionary artist."
      },
      {
        "facts": [
          "Francesca is not a visionary artist.",
          "Francesca does not gain recognition."
        ],
        "rules": "For all artists, if an artist is visionary, then they create innovative works and gain recognition.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "uses_natural_forms(Francesca)"
        ],
        "rules": "uses_natural_forms(Francesca) ⊕ combines_techniques(Francesca)",
        "conclusion": "¬combines_techniques(Francesca)"
      },
      {
        "facts": [
          "¬combines_techniques(Francesca)"
        ],
        "rules": "combines_techniques(Francesca) ∨ experiment_with_materials(Francesca)",
        "conclusion": "experiment_with_materials(Francesca)"
      },
      {
        "facts": [
          "experiment_with_materials(Francesca)"
        ],
        "rules": "experiment_with_materials(Francesca) ⊕ visionary(Francesca)",
        "conclusion": "¬visionary(Francesca)"
      },
      {
        "facts": [
          "¬visionary(Francesca)",
          "¬gain_recognition(Francesca)"
        ],
        "rules": "∀x (visionary(x) → (create_innovative_works(x) ∧ gain_recognition(x)))",
        "conclusion": null
      }
    ],
    "conclusion": "Francesca does not create innovative works.",
    "conclusion_fol": "¬create_innovative_works(Francesca)",
    "answer": "Uncertain",
    "context": [
      "Francesca uses natural forms.",
      "Francesca either uses natural forms or combines techniques, but not both.",
      "Francesca either combines techniques or experiments with materials.",
      "Francesca either experiments with materials or is a visionary, but not both.",
      "Francesca does not gain recognition.",
      "For all artists, if an artist is visionary, then they create innovative works and gain recognition."
    ],
    "context_fol": [
      "uses_natural_forms(Francesca)",
      "uses_natural_forms(Francesca) ⊕ combines_techniques(Francesca)",
      "combines_techniques(Francesca) ∨ experiment_with_materials(Francesca)",
      "experiment_with_materials(Francesca) ⊕ visionary(Francesca)",
      "¬gain_recognition(Francesca)",
      "∀x (visionary(x) → (create_innovative_works(x) ∧ gain_recognition(x)))"
    ],
    "background_story": "Francesca was a visionary sculptor known for her unique ability to meld disparate materials into breathtaking works of art. She would often combine metal, wood, and glass to create intricate, flowing pieces that seemed to defy gravity. Born in Italy, Francesca drew inspiration from the ancient ruins and the modern cityscapes, blending traditional techniques with contemporary themes. Her studio was a testament to her creative process, where she would meld old and new, experimenting with textures and forms. One of her most celebrated pieces, 'Eternal Dance,' was a stunning fusion of bronze, marble, and light, symbolizing the harmony between opposites. Francesca's art not only reflected her technical skill but also her profound understanding of how different elements could come together in perfect harmony.",
    "name": "Francesca",
    "keyword": "meld",
    "subject_category": "artist"
  },
  {
    "facts": [
      "Thomas is dedicated.",
      "Thomas does not have clarity.",
      "Thomas is reclusive in his approach to writing and personal life."
    ],
    "facts_fol": [
      "dedicated(Thomas)",
      "¬has_clarity(Thomas)",
      "is_reclusive(Thomas)"
    ],
    "rules": [
      "If Thomas is either solitary or creative (but not both), then he is productive.",
      "Thomas is either disciplined or creative, but not both, which contributes to his unique writing style and literary contributions.",
      "All focused individuals are disciplined.",
      "Anyone who is dedicated is either focused or has clarity.",
      "Thomas is either reclusive or solitary, but not both, in his approach to writing and personal life."
    ],
    "rules_fol": [
      "(solitary(Thomas) ⊕ creative(Thomas)) → productive(Thomas)",
      "is_disciplined(Thomas) ⊕ creative(Thomas)",
      "∀x (focused(x) → is_disciplined(x))",
      "∀x (dedicated(x) → (focused(x) ∨ has_clarity(x)))",
      "is_reclusive(Thomas) ⊕ solitary(Thomas)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Thomas either thinks deeply or imagines freely (but not both), then he is creative.",
      "Anyone who sets goals or works regularly is disciplined.",
      "If Thomas is quiet-natured, then he is focused and methodical.",
      "If Thomas lives alone, then he is either solitary or introspective (but not both)."
    ],
    "distracting_rules_fol": [
      "(thinks_deeply(Thomas) ⊕ imagines_freely(Thomas)) → creative(Thomas)",
      "∀x ((sets_goals(x) ∨ works_regularly(x)) → is_disciplined(x))",
      "quiet_natured(Thomas) → (focused(Thomas) ∧ methodical(Thomas))",
      "lives_alone(Thomas) → (solitary(Thomas) ⊕ is_introspective(Thomas))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Thomas is reclusive in his approach to writing and personal life."
        ],
        "rules": "Thomas is either reclusive or solitary, but not both, in his approach to writing and personal life.",
        "conclusion": "Thomas is not solitary."
      },
      {
        "facts": [
          "Thomas is dedicated.",
          "Thomas does not have clarity."
        ],
        "rules": "Anyone who is dedicated is either focused or has clarity.",
        "conclusion": "Thomas is focused."
      },
      {
        "facts": [
          "Thomas is focused."
        ],
        "rules": "All focused individuals are disciplined.",
        "conclusion": "Thomas is disciplined."
      },
      {
        "facts": [
          "Thomas is disciplined."
        ],
        "rules": "Thomas is either disciplined or creative, but not both, which contributes to his unique writing style and literary contributions.",
        "conclusion": "Thomas is not creative."
      },
      {
        "facts": [
          "Thomas is not solitary.",
          "Thomas is not creative."
        ],
        "rules": "If Thomas is either solitary or creative (but not both), then he is productive.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "is_reclusive(Thomas)"
        ],
        "rules": "is_reclusive(Thomas) ⊕ solitary(Thomas)",
        "conclusion": "¬solitary(Thomas)"
      },
      {
        "facts": [
          "dedicated(Thomas)",
          "¬has_clarity(Thomas)"
        ],
        "rules": "∀x (dedicated(x) → (focused(x) ∨ has_clarity(x)))",
        "conclusion": "focused(Thomas)"
      },
      {
        "facts": [
          "focused(Thomas)"
        ],
        "rules": "∀x (focused(x) → is_disciplined(x))",
        "conclusion": "is_disciplined(Thomas)"
      },
      {
        "facts": [
          "is_disciplined(Thomas)"
        ],
        "rules": "is_disciplined(Thomas) ⊕ creative(Thomas)",
        "conclusion": "¬creative(Thomas)"
      },
      {
        "facts": [
          "¬solitary(Thomas)",
          "¬creative(Thomas)"
        ],
        "rules": "(solitary(Thomas) ⊕ creative(Thomas)) → productive(Thomas)",
        "conclusion": null
      }
    ],
    "conclusion": "Thomas is not productive.",
    "conclusion_fol": "¬productive(Thomas)",
    "answer": "Uncertain",
    "context": [
      "Thomas is reclusive in his approach to writing and personal life.",
      "Thomas is either reclusive or solitary, but not both, in his approach to writing and personal life.",
      "Thomas is dedicated.",
      "Thomas does not have clarity.",
      "Anyone who is dedicated is either focused or has clarity.",
      "All focused individuals are disciplined.",
      "Thomas is either disciplined or creative, but not both, which contributes to his unique writing style and literary contributions.",
      "If Thomas is either solitary or creative (but not both), then he is productive."
    ],
    "context_fol": [
      "is_reclusive(Thomas)",
      "is_reclusive(Thomas) ⊕ solitary(Thomas)",
      "dedicated(Thomas)",
      "¬has_clarity(Thomas)",
      "∀x (dedicated(x) → (focused(x) ∨ has_clarity(x)))",
      "∀x (focused(x) → is_disciplined(x))",
      "is_disciplined(Thomas) ⊕ creative(Thomas)",
      "(solitary(Thomas) ⊕ creative(Thomas)) → productive(Thomas)"
    ],
    "background_story": "Thomas was a renowned writer who sought solitude to fuel his creativity. He found an old, secluded cottage on the outskirts of a quiet village, where he could live and work undisturbed. The cottage, surrounded by lush green forests and a serene lake, became his haven. For years, Thomas lived a peaceful life, dedicating his days to writing and his nights to stargazing. His isolation allowed him to tap into his deepest thoughts and emotions, resulting in some of the most profound literary works of his time. The villagers rarely saw him, but they respected his desire for solitude, leaving him to his craft. Thomas's undisturbed life enabled him to produce masterpieces that would be cherished for generations to come.",
    "name": "Thomas",
    "keyword": "undisturbed",
    "subject_category": "human"
  },
  {
    "facts": [
      "Shepard is playful.",
      "Shepard likes scratches."
    ],
    "facts_fol": [
      "is_playful(Shepard)",
      "likes_scratches(Shepard)"
    ],
    "rules": [
      "Shepard either has silky fur or is affectionate (or both).",
      "If Shepard is gentle, then he either has silky fur or is playful, but not both.",
      "Shepard either purrs loud or is gentle.",
      "Shepard either likes scratches or purrs loud, but not both."
    ],
    "rules_fol": [
      "has_silky_fur(Shepard) ∨ is_affectionate(Shepard)",
      "is_gentle(Shepard) → (has_silky_fur(Shepard) ⊕ is_playful(Shepard))",
      "purrs_loud(Shepard) ∨ is_gentle(Shepard)",
      "likes_scratches(Shepard) ⊕ purrs_loud(Shepard)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Any cat that feels soft and looks luxurious has silky fur.",
      "For all cats, if they have soft whiskers and make soft noises, then they are gentle.",
      "For all cats, if they feel relaxed and get attention, then they purr loudly."
    ],
    "distracting_rules_fol": [
      "∀x ((feels_soft(x) ∧ looks_luxurious(x)) → has_silky_fur(x))",
      "∀x ((has_soft_whiskers(x) ∧ makes_soft_noises(x)) → is_gentle(x))",
      "∀x ((feels_relaxed(x) ∧ gets_attention(x)) → purrs_loud(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Shepard likes scratches."
        ],
        "rules": "Shepard either likes scratches or purrs loud, but not both.",
        "conclusion": "Shepard does not purr loud."
      },
      {
        "facts": [
          "Shepard does not purr loud."
        ],
        "rules": "Shepard either purrs loud or is gentle.",
        "conclusion": "Shepard is gentle."
      },
      {
        "facts": [
          "Shepard is gentle.",
          "Shepard is playful."
        ],
        "rules": "If Shepard is gentle, then he either has silky fur or is playful, but not both.",
        "conclusion": "Shepard does not have silky fur."
      },
      {
        "facts": [
          "Shepard does not have silky fur."
        ],
        "rules": "Shepard either has silky fur or is affectionate (or both).",
        "conclusion": "Shepard is affectionate."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "likes_scratches(Shepard)"
        ],
        "rules": "likes_scratches(Shepard) ⊕ purrs_loud(Shepard)",
        "conclusion": "¬purrs_loud(Shepard)"
      },
      {
        "facts": [
          "¬purrs_loud(Shepard)"
        ],
        "rules": "purrs_loud(Shepard) ∨ is_gentle(Shepard)",
        "conclusion": "is_gentle(Shepard)"
      },
      {
        "facts": [
          "is_gentle(Shepard)",
          "is_playful(Shepard)"
        ],
        "rules": "is_gentle(Shepard) → (has_silky_fur(Shepard) ⊕ is_playful(Shepard))",
        "conclusion": "¬has_silky_fur(Shepard)"
      },
      {
        "facts": [
          "¬has_silky_fur(Shepard)"
        ],
        "rules": "has_silky_fur(Shepard) ∨ is_affectionate(Shepard)",
        "conclusion": "is_affectionate(Shepard)"
      }
    ],
    "conclusion": "Shepard is affectionate.",
    "conclusion_fol": "is_affectionate(Shepard)",
    "answer": "True",
    "context": [
      "Shepard likes scratches.",
      "Shepard either likes scratches or purrs loud, but not both.",
      "Shepard either purrs loud or is gentle.",
      "Shepard is playful.",
      "If Shepard is gentle, then he either has silky fur or is playful, but not both.",
      "Shepard either has silky fur or is affectionate (or both)."
    ],
    "context_fol": [
      "likes_scratches(Shepard)",
      "likes_scratches(Shepard) ⊕ purrs_loud(Shepard)",
      "purrs_loud(Shepard) ∨ is_gentle(Shepard)",
      "is_playful(Shepard)",
      "is_gentle(Shepard) → (has_silky_fur(Shepard) ⊕ is_playful(Shepard))",
      "has_silky_fur(Shepard) ∨ is_affectionate(Shepard)"
    ],
    "background_story": "Shepard was a stunning feline with a coat of unparalleled silkiness. His fur felt like soft, luxurious fabric to the touch, inviting everyone to pet him. As a prize-winning show cat, Shepard's silkiness was his crowning glory, setting him apart from his competitors. But it wasn't just his appearance that made him special - his gentle purrs and affectionate nature made him a beloved companion. At home, Shepard loved to curl up on his owner's lap, his silky fur a joy to stroke as he purred contentedly. Whether he was strutting his stuff in the show ring or lounging in the sun, Shepard's silkiness made him a true feline treasure.",
    "name": "Shepard",
    "keyword": "silkiness",
    "subject_category": "cat"
  },
  {
    "facts": [
      "Pearl studies the Compositae family.",
      "Pearl protects species.",
      "Pearl does not examine flora."
    ],
    "facts_fol": [
      "study_Compositae(Pearl)",
      "protect_species(Pearl)",
      "¬examines_flora(Pearl)"
    ],
    "rules": [
      "If Pearl studies the Compositae family and discovers new species, then she becomes renowned.",
      "If Pearl either explores habitats or classifies plants (but not both), then she discovers new species.",
      "For Pearl, she either protects species or classifies plants, but not both.",
      "Every botanist either examines flora or explores habitats."
    ],
    "rules_fol": [
      "(study_Compositae(Pearl) ∧ discover_new_species(Pearl)) → become_renowned(Pearl)",
      "(explore_habitats(Pearl) ⊕ classify_plants(Pearl)) → discover_new_species(Pearl)",
      "protect_species(Pearl) ⊕ classify_plants(Pearl)",
      "∀x (examines_flora(x) ∨ explore_habitats(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Pearl researches plants, then she will discover new species.",
      "If a botanist knows taxonomy and loves nature, then they can classify plants.",
      "All botanists who research plants explore their habitats."
    ],
    "distracting_rules_fol": [
      "research_plants(Pearl) → discover_new_species(Pearl)",
      "∀x ((knows_taxonomy(x) ∧ loves_nature(x)) → classify_plants(x))",
      "∀x (research_plants(x) → explore_habitats(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Pearl does not examine flora."
        ],
        "rules": "Every botanist either examines flora or explores habitats.",
        "conclusion": "Pearl explores habitats."
      },
      {
        "facts": [
          "Pearl protects species."
        ],
        "rules": "For Pearl, she either protects species or classifies plants, but not both.",
        "conclusion": "Pearl does not classify plants."
      },
      {
        "facts": [
          "Pearl explores habitats.",
          "Pearl does not classify plants."
        ],
        "rules": "If Pearl either explores habitats or classifies plants (but not both), then she discovers new species.",
        "conclusion": "Pearl discovers new species."
      },
      {
        "facts": [
          "Pearl studies the Compositae family.",
          "Pearl discovers new species."
        ],
        "rules": "If Pearl studies the Compositae family and discovers new species, then she becomes renowned.",
        "conclusion": "Pearl does not become renowned."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬examines_flora(Pearl)"
        ],
        "rules": "∀x (examines_flora(x) ∨ explore_habitats(x))",
        "conclusion": "explore_habitats(Pearl)"
      },
      {
        "facts": [
          "protect_species(Pearl)"
        ],
        "rules": "protect_species(Pearl) ⊕ classify_plants(Pearl)",
        "conclusion": "¬classify_plants(Pearl)"
      },
      {
        "facts": [
          "explore_habitats(Pearl)",
          "¬classify_plants(Pearl)"
        ],
        "rules": "(explore_habitats(Pearl) ⊕ classify_plants(Pearl)) → discover_new_species(Pearl)",
        "conclusion": "discover_new_species(Pearl)"
      },
      {
        "facts": [
          "study_Compositae(Pearl)",
          "discover_new_species(Pearl)"
        ],
        "rules": "(study_Compositae(Pearl) ∧ discover_new_species(Pearl)) → become_renowned(Pearl)",
        "conclusion": "¬become_renowned(Pearl)"
      }
    ],
    "conclusion": "Pearl does not become renowned.",
    "conclusion_fol": "¬become_renowned(Pearl)",
    "answer": "False",
    "context": [
      "Pearl does not examine flora.",
      "Every botanist either examines flora or explores habitats.",
      "Pearl protects species.",
      "For Pearl, she either protects species or classifies plants, but not both.",
      "If Pearl either explores habitats or classifies plants (but not both), then she discovers new species.",
      "Pearl studies the Compositae family.",
      "If Pearl studies the Compositae family and discovers new species, then she becomes renowned."
    ],
    "context_fol": [
      "¬examines_flora(Pearl)",
      "∀x (examines_flora(x) ∨ explore_habitats(x))",
      "protect_species(Pearl)",
      "protect_species(Pearl) ⊕ classify_plants(Pearl)",
      "(explore_habitats(Pearl) ⊕ classify_plants(Pearl)) → discover_new_species(Pearl)",
      "study_Compositae(Pearl)",
      "(study_Compositae(Pearl) ∧ discover_new_species(Pearl)) → become_renowned(Pearl)"
    ],
    "background_story": "Pearl was a renowned botanist with a passion for the Compositae family, one of the largest and most diverse groups of flowering plants. She spent her career studying the intricacies of sunflowers, daisies, and asters, uncovering new species and understanding their unique characteristics. Pearl's groundbreaking research on the Compositae family took her to remote corners of the globe, from the sun-kissed fields of Africa to the mountain meadows of South America. Her discoveries and classifications significantly expanded the botanical community's knowledge of these plants, earning her numerous accolades and a prestigious position at a leading botanical garden. Pearl's love for the Compositae family was contagious, inspiring a new generation of botanists to explore and protect these incredible plants.",
    "name": "Pearl",
    "keyword": "compositae",
    "subject_category": "botanist"
  },
  {
    "facts": [
      "Zachary studies parasites.",
      "Zachary does not advance knowledge.",
      "Zachary earns awards.",
      "Zachary mentors students.",
      "Zachary develops new methods."
    ],
    "facts_fol": [
      "study_parasites(Zachary)",
      "¬advance_knowledge(Zachary)",
      "earn_awards(Zachary)",
      "mentor_students(Zachary)",
      "develop_new_methods(Zachary)"
    ],
    "rules": [
      "If Zachary studies parasites, then he either conducts research or teaches biology, but not both.",
      "Every scientist who publishes papers either contributes to conservation or advances knowledge.",
      "If Zachary earns awards, then he publishes papers and mentors students.",
      "Zachary either develops new methods or teaches biology, but not both."
    ],
    "rules_fol": [
      "study_parasites(Zachary) → (conduct_research(Zachary) ⊕ teach_biology(Zachary))",
      "∀x (publish_papers(x) → (contribute_to_conservation(x) ∨ advance_knowledge(x)))",
      "earn_awards(Zachary) → (publish_papers(Zachary) ∧ mentor_students(Zachary))",
      "develop_new_methods(Zachary) ⊕ teach_biology(Zachary)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Zachary investigates diseases, then he either protects environments or conducts research.",
      "If Zachary understands ecology, then he either contributes to conservation or protects the environment, but not both.",
      "If Zachary is an expert, then he publishes papers.",
      "If Zachary specializes in parasitology, then he either teaches biology or works in a laboratory, but not both."
    ],
    "distracting_rules_fol": [
      "investigate_diseases(Zachary) → (protect_environments(Zachary) ∨ conduct_research(Zachary))",
      "understand_ecology(Zachary) → (contribute_to_conservation(Zachary) ⊕ protect_environment(Zachary))",
      "is_expert(Zachary) → publish_papers(Zachary)",
      "specialize_in_parasitology(Zachary) → (teach_biology(Zachary) ⊕ work_in_laboratory(Zachary))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Zachary develops new methods."
        ],
        "rules": "Zachary either develops new methods or teaches biology, but not both.",
        "conclusion": "Zachary does not teach biology."
      },
      {
        "facts": [
          "Zachary earns awards.",
          "Zachary mentors students."
        ],
        "rules": "If Zachary earns awards, then he publishes papers and mentors students.",
        "conclusion": "Zachary publishes papers."
      },
      {
        "facts": [
          "Zachary publishes papers.",
          "Zachary does not advance knowledge."
        ],
        "rules": "Every scientist who publishes papers either contributes to conservation or advances knowledge.",
        "conclusion": "Zachary contributes to conservation."
      },
      {
        "facts": [
          "Zachary studies parasites.",
          "Zachary does not teach biology."
        ],
        "rules": "If Zachary studies parasites, then he either conducts research or teaches biology, but not both.",
        "conclusion": "Zachary conducts research."
      },
      {
        "facts": [
          "Zachary conducts research.",
          "Zachary contributes to conservation."
        ],
        "rules": null,
        "conclusion": "Zachary conducts research and contributes to conservation."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "develop_new_methods(Zachary)"
        ],
        "rules": "develop_new_methods(Zachary) ⊕ teach_biology(Zachary)",
        "conclusion": "¬teach_biology(Zachary)"
      },
      {
        "facts": [
          "earn_awards(Zachary)",
          "mentor_students(Zachary)"
        ],
        "rules": "earn_awards(Zachary) → (publish_papers(Zachary) ∧ mentor_students(Zachary))",
        "conclusion": "publish_papers(Zachary)"
      },
      {
        "facts": [
          "publish_papers(Zachary)",
          "¬advance_knowledge(Zachary)"
        ],
        "rules": "∀x (publish_papers(x) → (contribute_to_conservation(x) ∨ advance_knowledge(x)))",
        "conclusion": "contribute_to_conservation(Zachary)"
      },
      {
        "facts": [
          "study_parasites(Zachary)",
          "¬teach_biology(Zachary)"
        ],
        "rules": "study_parasites(Zachary) → (conduct_research(Zachary) ⊕ teach_biology(Zachary))",
        "conclusion": "conduct_research(Zachary)"
      },
      {
        "facts": [
          "conduct_research(Zachary)",
          "contribute_to_conservation(Zachary)"
        ],
        "rules": null,
        "conclusion": "conduct_research(Zachary) ∧ contribute_to_conservation(Zachary)"
      }
    ],
    "conclusion": "Zachary conducts research and contributes to conservation.",
    "conclusion_fol": "conduct_research(Zachary) ∧ contribute_to_conservation(Zachary)",
    "answer": "True",
    "context": [
      "Zachary develops new methods.",
      "Zachary either develops new methods or teaches biology, but not both.",
      "Zachary earns awards.",
      "Zachary mentors students.",
      "If Zachary earns awards, then he publishes papers and mentors students.",
      "Zachary does not advance knowledge.",
      "Every scientist who publishes papers either contributes to conservation or advances knowledge.",
      "Zachary studies parasites.",
      "If Zachary studies parasites, then he either conducts research or teaches biology, but not both."
    ],
    "context_fol": [
      "develop_new_methods(Zachary)",
      "develop_new_methods(Zachary) ⊕ teach_biology(Zachary)",
      "earn_awards(Zachary)",
      "mentor_students(Zachary)",
      "earn_awards(Zachary) → (publish_papers(Zachary) ∧ mentor_students(Zachary))",
      "¬advance_knowledge(Zachary)",
      "∀x (publish_papers(x) → (contribute_to_conservation(x) ∨ advance_knowledge(x)))",
      "study_parasites(Zachary)",
      "study_parasites(Zachary) → (conduct_research(Zachary) ⊕ teach_biology(Zachary))"
    ],
    "background_story": "Zachary was a renowned parasitologist with a fascination for myxosporidia, a class of parasitic organisms that infect fish and other aquatic animals. Growing up near a lake, he spent countless hours observing the local fish populations, noticing the periodic outbreaks of disease that decimated their numbers. Zachary's curiosity led him to pursue a career in science, determined to understand the intricacies of myxosporidian biology. His groundbreaking research on the life cycle and transmission of these parasites earned him international recognition, including the prestigious Golden Microscope Award. Zachary's work has significant implications for aquaculture and conservation, helping to protect vulnerable fish populations from the devastating effects of myxosporidian infections. His dedication to the field has inspired a new generation of scientists to explore the complex world of parasites.",
    "name": "Zachary",
    "keyword": "myxosporidia",
    "subject_category": "scientist"
  },
  {
    "facts": [
      "Cullen investigates microbes.",
      "Cullen studies myxobacteria.",
      "Cullen does not understand diseases."
    ],
    "facts_fol": [
      "investigate_microbes(Cullen)",
      "study_myxobacteria(Cullen)",
      "¬understand_diseases(Cullen)"
    ],
    "rules": [
      "If Cullen studies myxobacteria, then he can either develop new therapies or advance biotechnology, but not both.",
      "All microbiologists who investigate microbes can develop therapies and improve public health.",
      "All microbiologists who understand diseases improve public health."
    ],
    "rules_fol": [
      "study_myxobacteria(Cullen) → (develop_therapies(Cullen) ⊕ advance_biotechnology(Cullen))",
      "∀x (investigate_microbes(x) → (develop_therapies(x) ∧ improve_public_health(x)))",
      "∀x (understand_diseases(x) → improve_public_health(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Cullen finds cures, then he will develop therapies.",
      "Every microbiologist who researches microbes either improves public health or enhances knowledge."
    ],
    "distracting_rules_fol": [
      "find_cures(Cullen) → develop_therapies(Cullen)",
      "∀x (research_microbes(x) → (improve_public_health(x) ∨ enhance_knowledge(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Cullen does not understand diseases."
        ],
        "rules": "All microbiologists who understand diseases improve public health.",
        "conclusion": null
      },
      {
        "facts": [
          "Cullen investigates microbes."
        ],
        "rules": "All microbiologists who investigate microbes can develop therapies and improve public health.",
        "conclusion": "Cullen develops new therapies."
      },
      {
        "facts": [
          "Cullen studies myxobacteria.",
          "Cullen develops new therapies."
        ],
        "rules": "If Cullen studies myxobacteria, then he can either develop new therapies or advance biotechnology, but not both.",
        "conclusion": "Cullen does not advance biotechnology."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬understand_diseases(Cullen)"
        ],
        "rules": "∀x (understand_diseases(x) → improve_public_health(x))",
        "conclusion": null
      },
      {
        "facts": [
          "investigate_microbes(Cullen)"
        ],
        "rules": "∀x (investigate_microbes(x) → (develop_therapies(x) ∧ improve_public_health(x)))",
        "conclusion": "develop_therapies(Cullen)"
      },
      {
        "facts": [
          "study_myxobacteria(Cullen)",
          "develop_therapies(Cullen)"
        ],
        "rules": "study_myxobacteria(Cullen) → (develop_therapies(Cullen) ⊕ advance_biotechnology(Cullen))",
        "conclusion": "¬advance_biotechnology(Cullen)"
      }
    ],
    "conclusion": "Cullen does not advance biotechnology.",
    "conclusion_fol": "¬advance_biotechnology(Cullen)",
    "answer": "True",
    "context": [
      "Cullen does not understand diseases.",
      "All microbiologists who understand diseases improve public health.",
      "Cullen investigates microbes.",
      "All microbiologists who investigate microbes can develop therapies and improve public health.",
      "Cullen studies myxobacteria.",
      "If Cullen studies myxobacteria, then he can either develop new therapies or advance biotechnology, but not both."
    ],
    "context_fol": [
      "¬understand_diseases(Cullen)",
      "∀x (understand_diseases(x) → improve_public_health(x))",
      "investigate_microbes(Cullen)",
      "∀x (investigate_microbes(x) → (develop_therapies(x) ∧ improve_public_health(x)))",
      "study_myxobacteria(Cullen)",
      "study_myxobacteria(Cullen) → (develop_therapies(Cullen) ⊕ advance_biotechnology(Cullen))"
    ],
    "background_story": "Cullen was a renowned microbiologist specializing in the study of myxobacteria, a group of bacteria that exhibit unique social behaviors. His fascination with these microbes, particularly those in the genus Myxococcus, led him to dedicate his career to understanding their intricate interactions. Cullen's groundbreaking research on the micromyx, a term he coined to describe the microscopic networks formed by myxobacteria, revealed novel insights into cooperative behavior and biofilm formation. His work had significant implications for the development of new antimicrobial therapies and biotechnological applications. Cullen's passion for the tiny, yet complex world of myxobacteria, earned him recognition as a leading expert in the field, and his discoveries continue to inspire future generations of microbiologists.",
    "name": "Cullen",
    "keyword": "micromyx",
    "subject_category": "microbiologist"
  },
  {
    "facts": [
      "Hadleigh studies botany.",
      "Hadleigh explores nature.",
      "Hadleigh loves gardens."
    ],
    "facts_fol": [
      "study_botany(Hadleigh)",
      "explore_nature(Hadleigh)",
      "love_gardens(Hadleigh)"
    ],
    "rules": [
      "If Hadleigh studies botany, then she can either conserve plants or discover new species, but not both.",
      "For all humans, if they explore nature and research plants, then they can discover new species.",
      "If Hadleigh loves gardens, then she will research plants."
    ],
    "rules_fol": [
      "study_botany(Hadleigh) → (conserve_plants(Hadleigh) ⊕ discover_new_species(Hadleigh))",
      "∀x ((explore_nature(x) ∧ research_plants(x)) → discover_new_species(x))",
      "love_gardens(Hadleigh) → research_plants(Hadleigh)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Hadleigh pursues horticulture, then she either develops sustainable methods or discovers new species (or both).",
      "Anyone who grows their own herbs or learns ecology can research plants."
    ],
    "distracting_rules_fol": [
      "pursue_horticulture(Hadleigh) → (develop_sustainable_methods(Hadleigh) ∨ discover_new_species(Hadleigh))",
      "∀x ((grow_own_herbs(x) ∨ learn_ecology(x)) → research_plants(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Hadleigh loves gardens."
        ],
        "rules": "If Hadleigh loves gardens, then she will research plants.",
        "conclusion": "Hadleigh researches plants."
      },
      {
        "facts": [
          "Hadleigh explores nature.",
          "Hadleigh researches plants."
        ],
        "rules": "For all humans, if they explore nature and research plants, then they can discover new species.",
        "conclusion": "Hadleigh discovers new species."
      },
      {
        "facts": [
          "Hadleigh studies botany.",
          "Hadleigh discovers new species."
        ],
        "rules": "If Hadleigh studies botany, then she can either conserve plants or discover new species, but not both.",
        "conclusion": "Hadleigh does not conserve plants."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "love_gardens(Hadleigh)"
        ],
        "rules": "love_gardens(Hadleigh) → research_plants(Hadleigh)",
        "conclusion": "research_plants(Hadleigh)"
      },
      {
        "facts": [
          "explore_nature(Hadleigh)",
          "research_plants(Hadleigh)"
        ],
        "rules": "∀x ((explore_nature(x) ∧ research_plants(x)) → discover_new_species(x))",
        "conclusion": "discover_new_species(Hadleigh)"
      },
      {
        "facts": [
          "study_botany(Hadleigh)",
          "discover_new_species(Hadleigh)"
        ],
        "rules": "study_botany(Hadleigh) → (conserve_plants(Hadleigh) ⊕ discover_new_species(Hadleigh))",
        "conclusion": "¬conserve_plants(Hadleigh)"
      }
    ],
    "conclusion": "Hadleigh does not conserve plants.",
    "conclusion_fol": "¬conserve_plants(Hadleigh)",
    "answer": "True",
    "context": [
      "Hadleigh loves gardens.",
      "If Hadleigh loves gardens, then she will research plants.",
      "Hadleigh explores nature.",
      "For all humans, if they explore nature and research plants, then they can discover new species.",
      "Hadleigh studies botany.",
      "If Hadleigh studies botany, then she can either conserve plants or discover new species, but not both."
    ],
    "context_fol": [
      "love_gardens(Hadleigh)",
      "love_gardens(Hadleigh) → research_plants(Hadleigh)",
      "explore_nature(Hadleigh)",
      "∀x ((explore_nature(x) ∧ research_plants(x)) → discover_new_species(x))",
      "study_botany(Hadleigh)",
      "study_botany(Hadleigh) → (conserve_plants(Hadleigh) ⊕ discover_new_species(Hadleigh))"
    ],
    "background_story": "Hadleigh's fascination with botany stemmed from her childhood spent in her grandmother's lush garden. As a young girl, she would spend hours exploring the vibrant flowers and trees, learning about their unique properties and uses. Her curiosity and love for nature only deepened as she grew older, leading her to pursue a career in horticultural science. Hadleigh's research focused on developing sustainable methods for plant conservation, and her work soon gained international recognition. She became a leading expert in her field, known for her groundbreaking discoveries and innovative approaches to environmental preservation. Hadleigh's passion for botany, which had stemmed from those early days in her grandmother's garden, continued to drive her towards making a positive impact on the world.",
    "name": "Hadleigh",
    "keyword": "stemmed",
    "subject_category": "human"
  },
  {
    "facts": [
      "Gia is adventurous.",
      "Gia does not seek knowledge.",
      "Gia tries new foods."
    ],
    "facts_fol": [
      "is_adventurous(Gia)",
      "¬seeks_knowledge(Gia)",
      "tries_new_foods(Gia)"
    ],
    "rules": [
      "If Gia is curious, then she loves exploring and inspires others.",
      "If Gia is adventurous, then she either loves exploring or enjoys photography, but not both.",
      "Everyone seeks knowledge or is curious.",
      "Gia either tries new foods or enjoys photography, but not both."
    ],
    "rules_fol": [
      "curious(Gia) → (love_exploring(Gia) ∧ inspire_others(Gia))",
      "is_adventurous(Gia) → (love_exploring(Gia) ⊕ enjoys_photography(Gia))",
      "∀x (seeks_knowledge(x) ∨ curious(x))",
      "tries_new_foods(Gia) ⊕ enjoys_photography(Gia)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Gia is open-minded, then she either loves exploring or appreciates history, but not both.",
      "If Gia either visits museums or reads books (but not both), then she is curious.",
      "Everyone who captures moments enjoys photography."
    ],
    "distracting_rules_fol": [
      "is_open_minded(Gia) → (love_exploring(Gia) ⊕ appreciate_history(Gia))",
      "(visits_museums(Gia) ⊕ reads_books(Gia)) → curious(Gia)",
      "∀x (captures_moments(x) → enjoys_photography(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Gia tries new foods."
        ],
        "rules": "Gia either tries new foods or enjoys photography, but not both.",
        "conclusion": "Gia does not enjoy photography."
      },
      {
        "facts": [
          "Gia does not seek knowledge."
        ],
        "rules": "Everyone seeks knowledge or is curious.",
        "conclusion": "Gia is curious."
      },
      {
        "facts": [
          "Gia is adventurous.",
          "Gia does not enjoy photography."
        ],
        "rules": "If Gia is adventurous, then she either loves exploring or enjoys photography, but not both.",
        "conclusion": "Gia loves exploring."
      },
      {
        "facts": [
          "Gia is curious.",
          "Gia loves exploring."
        ],
        "rules": "If Gia is curious, then she loves exploring and inspires others.",
        "conclusion": "Gia inspires others."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "tries_new_foods(Gia)"
        ],
        "rules": "tries_new_foods(Gia) ⊕ enjoys_photography(Gia)",
        "conclusion": "¬enjoys_photography(Gia)"
      },
      {
        "facts": [
          "¬seeks_knowledge(Gia)"
        ],
        "rules": "∀x (seeks_knowledge(x) ∨ curious(x))",
        "conclusion": "curious(Gia)"
      },
      {
        "facts": [
          "is_adventurous(Gia)",
          "¬enjoys_photography(Gia)"
        ],
        "rules": "is_adventurous(Gia) → (love_exploring(Gia) ⊕ enjoys_photography(Gia))",
        "conclusion": "love_exploring(Gia)"
      },
      {
        "facts": [
          "curious(Gia)",
          "love_exploring(Gia)"
        ],
        "rules": "curious(Gia) → (love_exploring(Gia) ∧ inspire_others(Gia))",
        "conclusion": "inspire_others(Gia)"
      }
    ],
    "conclusion": "Gia inspires others.",
    "conclusion_fol": "inspire_others(Gia)",
    "answer": "True",
    "context": [
      "Gia tries new foods.",
      "Gia either tries new foods or enjoys photography, but not both.",
      "Gia does not seek knowledge.",
      "Everyone seeks knowledge or is curious.",
      "Gia is adventurous.",
      "If Gia is adventurous, then she either loves exploring or enjoys photography, but not both.",
      "If Gia is curious, then she loves exploring and inspires others."
    ],
    "context_fol": [
      "tries_new_foods(Gia)",
      "tries_new_foods(Gia) ⊕ enjoys_photography(Gia)",
      "¬seeks_knowledge(Gia)",
      "∀x (seeks_knowledge(x) ∨ curious(x))",
      "is_adventurous(Gia)",
      "is_adventurous(Gia) → (love_exploring(Gia) ⊕ enjoys_photography(Gia))",
      "curious(Gia) → (love_exploring(Gia) ∧ inspire_others(Gia))"
    ],
    "background_story": "Gia was a travel blogger with a passion for exploring the world's most hidden gems. She had a fascinatingly curious mind, always seeking out unique experiences and immersing herself in different cultures. From hiking through the vibrant markets of Marrakech to scuba diving in the crystal-clear waters of Bora Bora, Gia's adventures were the stuff of legend. Her blog, filled with captivating stories and stunning photographs, inspired countless readers to step out of their comfort zones and explore the world. Gia's fascinatingly eclectic approach to travel, combining history, food, and nature, made her a sought-after speaker and influencer, sharing her love for discovery with audiences worldwide.",
    "name": "Gia",
    "keyword": "fascinatingly",
    "subject_category": "human"
  },
  {
    "facts": [
      "Ailani seeks truth.",
      "Ailani questions reality.",
      "Ailani accepts particulars."
    ],
    "facts_fol": [
      "seek_truth(Ailani)",
      "question_reality(Ailani)",
      "accept_particulars(Ailani)"
    ],
    "rules": [
      "For all philosophers, if a philosopher studies nominalism and rejects universals, then they embrace individualism.",
      "Ailani either seeks truth or studies nominalism, but not both.",
      "If Ailani questions reality, then she either rejects universals or accepts particulars, but not both."
    ],
    "rules_fol": [
      "∀x ((study_nominalism(x) ∧ reject_universals(x)) → embrace_individualism(x))",
      "seek_truth(Ailani) ⊕ study_nominalism(Ailani)",
      "question_reality(Ailani) → (reject_universals(Ailani) ⊕ accept_particulars(Ailani))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If a philosopher examines labels and investigates language, then they study nominalism.",
      "If Ailani favors empiricism, then she will reject universals."
    ],
    "distracting_rules_fol": [
      "∀x ((examines_labels(x) ∧ investigates_language(x)) → study_nominalism(x))",
      "favor_empiricism(Ailani) → reject_universals(Ailani)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Ailani questions reality.",
          "Ailani accepts particulars."
        ],
        "rules": "If Ailani questions reality, then she either rejects universals or accepts particulars, but not both.",
        "conclusion": "Ailani does not reject universals."
      },
      {
        "facts": [
          "Ailani seeks truth."
        ],
        "rules": "Ailani either seeks truth or studies nominalism, but not both.",
        "conclusion": "Ailani does not study nominalism."
      },
      {
        "facts": [
          "Ailani does not study nominalism.",
          "Ailani does not reject universals."
        ],
        "rules": "For all philosophers, if a philosopher studies nominalism and rejects universals, then they embrace individualism.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "question_reality(Ailani)",
          "accept_particulars(Ailani)"
        ],
        "rules": "question_reality(Ailani) → (reject_universals(Ailani) ⊕ accept_particulars(Ailani))",
        "conclusion": "¬reject_universals(Ailani)"
      },
      {
        "facts": [
          "seek_truth(Ailani)"
        ],
        "rules": "seek_truth(Ailani) ⊕ study_nominalism(Ailani)",
        "conclusion": "¬study_nominalism(Ailani)"
      },
      {
        "facts": [
          "¬study_nominalism(Ailani)",
          "¬reject_universals(Ailani)"
        ],
        "rules": "∀x ((study_nominalism(x) ∧ reject_universals(x)) → embrace_individualism(x))",
        "conclusion": null
      }
    ],
    "conclusion": "Ailani does not embrace individualism.",
    "conclusion_fol": "¬embrace_individualism(Ailani)",
    "answer": "Uncertain",
    "context": [
      "Ailani questions reality.",
      "Ailani accepts particulars.",
      "If Ailani questions reality, then she either rejects universals or accepts particulars, but not both.",
      "Ailani seeks truth.",
      "Ailani either seeks truth or studies nominalism, but not both.",
      "For all philosophers, if a philosopher studies nominalism and rejects universals, then they embrace individualism."
    ],
    "context_fol": [
      "question_reality(Ailani)",
      "accept_particulars(Ailani)",
      "question_reality(Ailani) → (reject_universals(Ailani) ⊕ accept_particulars(Ailani))",
      "seek_truth(Ailani)",
      "seek_truth(Ailani) ⊕ study_nominalism(Ailani)",
      "∀x ((study_nominalism(x) ∧ reject_universals(x)) → embrace_individualism(x))"
    ],
    "background_story": "Ailani was a medieval philosopher who delved deep into the concept of nominalism. She believed that universal concepts and general terms have no reality independent of the individual objects they describe. According to Ailani, words like 'tree' or 'justice' are merely labels that humans use to categorize and communicate about the world. She argued that only specific, individual things exist, and that abstraction is a product of human perception. Ailani's philosophical stance was met with both criticism and admiration from her peers, but her dedication to understanding the nature of reality and knowledge earned her a respected place in the history of philosophical thought. Her writings on nominalism continue to influence scholars and spark debates to this day.",
    "name": "Ailani",
    "keyword": "nominalism",
    "subject_category": "philosopher"
  },
  {
    "facts": [
      "Leah is not an opera singer.",
      "Leah performs music.",
      "Leah is versatile."
    ],
    "facts_fol": [
      "¬opera_singer(Leah)",
      "performs_music(Leah)",
      "is_versatile(Leah)"
    ],
    "rules": [
      "Leah is either a vocalist or an instrumentalist, but not both.",
      "If Leah performs music, then she plays an instrument.",
      "A musician is either versatile or classically trained, but not necessarily both."
    ],
    "rules_fol": [
      "plays_instrument(Leah) ⊕ soprano(Leah)",
      "performs_music(Leah) → plays_instrument(Leah)",
      "∀x (is_versatile(x) ⊕ classically_trained(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Leah has a high vocal range or sings Baroque music, then she is a soprano.",
      "Every musician who tours to perform either plays an instrument or composes music (or both).",
      "All musicians who study Baroque music are classically trained."
    ],
    "distracting_rules_fol": [
      "(has_high_range(Leah) ∨ sings_baroque(Leah)) → soprano(Leah)",
      "∀x (tour_perform(x) → (plays_instrument(x) ∨ compose_music(x)))",
      "∀x (studies_baroque(x) → classically_trained(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Leah is versatile."
        ],
        "rules": "A musician is either versatile or classically trained, but not necessarily both.",
        "conclusion": "Leah is not classically trained."
      },
      {
        "facts": [
          "Leah performs music."
        ],
        "rules": "If Leah performs music, then she plays an instrument.",
        "conclusion": "Leah plays an instrument."
      },
      {
        "facts": [
          "Leah plays an instrument."
        ],
        "rules": "Leah is either a vocalist or an instrumentalist, but not both.",
        "conclusion": "Leah is not a soprano."
      },
      {
        "facts": [
          "Leah is not a soprano.",
          "Leah is not an opera singer.",
          "Leah is not classically trained."
        ],
        "rules": null,
        "conclusion": "Leah is a soprano, or an opera singer, or classically trained."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "is_versatile(Leah)"
        ],
        "rules": "∀x (is_versatile(x) ⊕ classically_trained(x))",
        "conclusion": "¬classically_trained(Leah)"
      },
      {
        "facts": [
          "performs_music(Leah)"
        ],
        "rules": "performs_music(Leah) → plays_instrument(Leah)",
        "conclusion": "plays_instrument(Leah)"
      },
      {
        "facts": [
          "plays_instrument(Leah)"
        ],
        "rules": "plays_instrument(Leah) ⊕ soprano(Leah)",
        "conclusion": "¬soprano(Leah)"
      },
      {
        "facts": [
          "¬soprano(Leah)",
          "¬opera_singer(Leah)",
          "¬classically_trained(Leah)"
        ],
        "rules": null,
        "conclusion": "soprano(Leah) ∨ (opera_singer(Leah) ∨ classically_trained(Leah))"
      }
    ],
    "conclusion": "Leah is a soprano, or an opera singer, or classically trained.",
    "conclusion_fol": "soprano(Leah) ∨ (opera_singer(Leah) ∨ classically_trained(Leah))",
    "answer": "False",
    "context": [
      "Leah is versatile.",
      "A musician is either versatile or classically trained, but not necessarily both.",
      "Leah performs music.",
      "If Leah performs music, then she plays an instrument.",
      "Leah is either a vocalist or an instrumentalist, but not both.",
      "Leah is not an opera singer."
    ],
    "context_fol": [
      "is_versatile(Leah)",
      "∀x (is_versatile(x) ⊕ classically_trained(x))",
      "performs_music(Leah)",
      "performs_music(Leah) → plays_instrument(Leah)",
      "plays_instrument(Leah) ⊕ soprano(Leah)",
      "¬opera_singer(Leah)"
    ],
    "background_story": "Leah was a soprano renowned for her Handelian expertise, bringing to life the complex operas of George Frideric Handel with breathtaking precision and emotion. Her voice, capable of soaring to the highest notes with ease, was perfectly suited to the Baroque style. Leah's journey to becoming a leading Handel interpreter began with her discovery of 'Messiah' as a child, which ignited a passion that would guide her career. She spent years studying the nuances of Handel's compositions, from the dramatic arias of 'Alcina' to the majestic choruses of 'Saul'. Leah's performances were met with critical acclaim, praised for their historical accuracy and expressive depth. Her love for Handel's music took her to concert halls and opera houses around the world, sharing the beauty and power of his works with a new generation of music lovers.",
    "name": "Leah",
    "keyword": "handelian",
    "subject_category": "musician"
  },
  {
    "facts": [
      "Nova is not creative.",
      "Nova is passionate.",
      "Nova is focused."
    ],
    "facts_fol": [
      "¬creative(Nova)",
      "passionate(Nova)",
      "is_focused(Nova)"
    ],
    "rules": [
      "If Nova is creative or determined (or both), then she is successful.",
      "If Nova is passionate, then she is either determined or talented, but not both.",
      "A person is either focused or talented, but not necessarily both."
    ],
    "rules_fol": [
      "(creative(Nova) ∨ determined(Nova)) → successful(Nova)",
      "passionate(Nova) → (determined(Nova) ⊕ talented(Nova))",
      "∀x (is_focused(x) ⊕ talented(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Anyone who sets goals either is determined or works hard (or both).",
      "If Nova has imagination and works hard, then she is talented."
    ],
    "distracting_rules_fol": [
      "∀x (sets_goals(x) → (determined(x) ∨ works_hard(x)))",
      "(has_imagination(Nova) ∧ works_hard(Nova)) → talented(Nova)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Nova is focused."
        ],
        "rules": "A person is either focused or talented, but not necessarily both.",
        "conclusion": "Nova is not talented."
      },
      {
        "facts": [
          "Nova is passionate.",
          "Nova is not talented."
        ],
        "rules": "If Nova is passionate, then she is either determined or talented, but not both.",
        "conclusion": "Nova is determined."
      },
      {
        "facts": [
          "Nova is not creative.",
          "Nova is determined."
        ],
        "rules": "If Nova is creative or determined (or both), then she is successful.",
        "conclusion": "Nova is successful."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "is_focused(Nova)"
        ],
        "rules": "∀x (is_focused(x) ⊕ talented(x))",
        "conclusion": "¬talented(Nova)"
      },
      {
        "facts": [
          "passionate(Nova)",
          "¬talented(Nova)"
        ],
        "rules": "passionate(Nova) → (determined(Nova) ⊕ talented(Nova))",
        "conclusion": "determined(Nova)"
      },
      {
        "facts": [
          "¬creative(Nova)",
          "determined(Nova)"
        ],
        "rules": "(creative(Nova) ∨ determined(Nova)) → successful(Nova)",
        "conclusion": "successful(Nova)"
      }
    ],
    "conclusion": "Nova is successful.",
    "conclusion_fol": "successful(Nova)",
    "answer": "True",
    "context": [
      "Nova is focused.",
      "A person is either focused or talented, but not necessarily both.",
      "Nova is passionate.",
      "If Nova is passionate, then she is either determined or talented, but not both.",
      "Nova is not creative.",
      "If Nova is creative or determined (or both), then she is successful."
    ],
    "context_fol": [
      "is_focused(Nova)",
      "∀x (is_focused(x) ⊕ talented(x))",
      "passionate(Nova)",
      "passionate(Nova) → (determined(Nova) ⊕ talented(Nova))",
      "¬creative(Nova)",
      "(creative(Nova) ∨ determined(Nova)) → successful(Nova)"
    ],
    "background_story": "Nova was a free-spirited artist with a passion for painting and writing, but music was not her forte. Despite her parents' encouragement to learn an instrument, Nova's attempts at playing the piano or singing were met with off-key notes and awkward rhythms. Her music teacher politely suggested she explore other creative outlets, and Nova happily obliged. She found solace in the visual arts, where her creativity flourished. Nova's vibrant paintings and thought-provoking stories earned her recognition in local art competitions. Her unmusical nature didn't hold her back; instead, it led her to discover her true talents and pursue a successful career in graphic design.",
    "name": "Nova",
    "keyword": "unmusical",
    "subject_category": "human"
  },
  {
    "facts": [
      "Nathalia develops new methods.",
      "Nathalia does not advance sustainability.",
      "Nathalia explores microorganisms.",
      "Nathalia investigates bacteria.",
      "Nathalia analyzes proteins."
    ],
    "facts_fol": [
      "develop_new_methods(Nathalia)",
      "¬advance_sustainability(Nathalia)",
      "explore_microorganisms(Nathalia)",
      "investigate_bacteria(Nathalia)",
      "analyze_proteins(Nathalia)"
    ],
    "rules": [
      "If Nathalia explores microorganisms or researches enzymes, then she studies fungi.",
      "Nathalia either develops new methods or contributes to biotechnology, but not both.",
      "If Nathalia investigates bacteria, then she either researches enzymes or analyzes proteins, but not both."
    ],
    "rules_fol": [
      "(explore_microorganisms(Nathalia) ∨ research_enzymes(Nathalia)) → study_fungi(Nathalia)",
      "develop_new_methods(Nathalia) ⊕ contribute_to_biotechnology(Nathalia)",
      "investigate_bacteria(Nathalia) → (research_enzymes(Nathalia) ⊕ analyze_proteins(Nathalia))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Any scientist who examines Tiliomycetes will study fungi.",
      "If Nathalia pursues a PhD, then she either publishes papers or contributes to biotechnology, but not both.",
      "If Nathalia examines samples and tests hypotheses, then she researches enzymes."
    ],
    "distracting_rules_fol": [
      "∀x (examines_tiliomycetes(x) → study_fungi(x))",
      "pursue_phd(Nathalia) → (publish_papers(Nathalia) ⊕ contribute_to_biotechnology(Nathalia))",
      "(examines_samples(Nathalia) ∧ tests_hypotheses(Nathalia)) → research_enzymes(Nathalia)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Nathalia investigates bacteria.",
          "Nathalia analyzes proteins."
        ],
        "rules": "If Nathalia investigates bacteria, then she either researches enzymes or analyzes proteins, but not both.",
        "conclusion": "Nathalia does not research enzymes."
      },
      {
        "facts": [
          "Nathalia develops new methods."
        ],
        "rules": "Nathalia either develops new methods or contributes to biotechnology, but not both.",
        "conclusion": "Nathalia does not contribute to biotechnology."
      },
      {
        "facts": [
          "Nathalia explores microorganisms.",
          "Nathalia does not research enzymes."
        ],
        "rules": "If Nathalia explores microorganisms or researches enzymes, then she studies fungi.",
        "conclusion": "Nathalia studies fungi."
      },
      {
        "facts": [
          "Nathalia studies fungi.",
          "Nathalia does not contribute to biotechnology.",
          "Nathalia does not advance sustainability."
        ],
        "rules": null,
        "conclusion": "If Nathalia studies fungi or contributes to biotechnology, then she advances sustainability."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "investigate_bacteria(Nathalia)",
          "analyze_proteins(Nathalia)"
        ],
        "rules": "investigate_bacteria(Nathalia) → (research_enzymes(Nathalia) ⊕ analyze_proteins(Nathalia))",
        "conclusion": "¬research_enzymes(Nathalia)"
      },
      {
        "facts": [
          "develop_new_methods(Nathalia)"
        ],
        "rules": "develop_new_methods(Nathalia) ⊕ contribute_to_biotechnology(Nathalia)",
        "conclusion": "¬contribute_to_biotechnology(Nathalia)"
      },
      {
        "facts": [
          "explore_microorganisms(Nathalia)",
          "¬research_enzymes(Nathalia)"
        ],
        "rules": "(explore_microorganisms(Nathalia) ∨ research_enzymes(Nathalia)) → study_fungi(Nathalia)",
        "conclusion": "study_fungi(Nathalia)"
      },
      {
        "facts": [
          "study_fungi(Nathalia)",
          "¬contribute_to_biotechnology(Nathalia)",
          "¬advance_sustainability(Nathalia)"
        ],
        "rules": null,
        "conclusion": "(study_fungi(Nathalia) ∨ contribute_to_biotechnology(Nathalia)) → advance_sustainability(Nathalia)"
      }
    ],
    "conclusion": "If Nathalia studies fungi or contributes to biotechnology, then she advances sustainability.",
    "conclusion_fol": "(study_fungi(Nathalia) ∨ contribute_to_biotechnology(Nathalia)) → advance_sustainability(Nathalia)",
    "answer": "False",
    "context": [
      "Nathalia investigates bacteria.",
      "Nathalia analyzes proteins.",
      "If Nathalia investigates bacteria, then she either researches enzymes or analyzes proteins, but not both.",
      "Nathalia develops new methods.",
      "Nathalia either develops new methods or contributes to biotechnology, but not both.",
      "Nathalia explores microorganisms.",
      "If Nathalia explores microorganisms or researches enzymes, then she studies fungi.",
      "Nathalia does not advance sustainability."
    ],
    "context_fol": [
      "investigate_bacteria(Nathalia)",
      "analyze_proteins(Nathalia)",
      "investigate_bacteria(Nathalia) → (research_enzymes(Nathalia) ⊕ analyze_proteins(Nathalia))",
      "develop_new_methods(Nathalia)",
      "develop_new_methods(Nathalia) ⊕ contribute_to_biotechnology(Nathalia)",
      "explore_microorganisms(Nathalia)",
      "(explore_microorganisms(Nathalia) ∨ research_enzymes(Nathalia)) → study_fungi(Nathalia)",
      "¬advance_sustainability(Nathalia)"
    ],
    "background_story": "Nathalia was a renowned mycologist specializing in the fascinating world of fungi, particularly the order Tiliomycetes. Her groundbreaking research on the unique characteristics and potential applications of these microorganisms led to significant breakthroughs in the field of biotechnology. Nathalia's work focused on harnessing the enzymes produced by Tiliomycetes to develop more efficient methods for biofuel production and organic waste management. Her dedication and innovative approach earned her numerous awards and recognition within the scientific community. Nathalia's passion for Tiliomycetes not only expanded the understanding of these intriguing fungi but also opened new avenues for sustainable solutions, inspiring a new generation of scientists to explore the vast and uncharted territories of mycology.",
    "name": "Nathalia",
    "keyword": "tiliomycetes",
    "subject_category": "scientist"
  },
  {
    "facts": [
      "Kiya has sarcoplasm.",
      "Kiya does not live in deep waters.",
      "Kiya is marine.",
      "Kiya needs energy."
    ],
    "facts_fol": [
      "has_sarcoplasm(Kiya)",
      "¬lives_deep(Kiya)",
      "is_marine(Kiya)",
      "needs_energy(Kiya)"
    ],
    "rules": [
      "For every biological organism, it is either bioluminescent or non_bioluminescent, but not both.",
      "For all biological organisms, if they have sarcoplasm and glow in the dark, then they are bioluminescent.",
      "If Kiya lives in deep waters or has specialized proteins, then she can glow in the dark.",
      "All marine organisms that need energy have specialized proteins and utilize them to function."
    ],
    "rules_fol": [
      "∀x (bioluminescent(x) ⊕ non_bioluminescent(x))",
      "∀x ((has_sarcoplasm(x) ∧ glows_dark(x)) → bioluminescent(x))",
      "(lives_deep(Kiya) ∨ has_proteins(Kiya)) → glows_dark(Kiya)",
      "∀x (is_marine(x) → (needs_energy(x) ∧ has_proteins(x)))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Kiya attracts prey, then she either has camouflage or is bioluminescent.",
      "Any biological organism that contains luciferin or emits light can glow in the dark.",
      "If Kiya either contains enzymes or produces hormones (but not both), then she has proteins."
    ],
    "distracting_rules_fol": [
      "attracts_prey(Kiya) → (has_camouflage(Kiya) ∨ bioluminescent(Kiya))",
      "∀x ((contains_luciferin(x) ∨ emits_light(x)) → glows_dark(x))",
      "(contains_enzymes(Kiya) ⊕ produces_hormones(Kiya)) → has_proteins(Kiya)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Kiya is marine.",
          "Kiya needs energy."
        ],
        "rules": "All marine organisms that need energy have specialized proteins and utilize them to function.",
        "conclusion": "Kiya has specialized proteins."
      },
      {
        "facts": [
          "Kiya does not live in deep waters.",
          "Kiya has specialized proteins."
        ],
        "rules": "If Kiya lives in deep waters or has specialized proteins, then she can glow in the dark.",
        "conclusion": "Kiya glows in the dark."
      },
      {
        "facts": [
          "Kiya has sarcoplasm.",
          "Kiya glows in the dark."
        ],
        "rules": "For all biological organisms, if they have sarcoplasm and glow in the dark, then they are bioluminescent.",
        "conclusion": "Kiya is bioluminescent."
      },
      {
        "facts": [
          "Kiya is bioluminescent."
        ],
        "rules": "For every biological organism, it is either bioluminescent or non_bioluminescent, but not both.",
        "conclusion": "Kiya is not non_bioluminescent, which means Kiya is bioluminescent."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "is_marine(Kiya)",
          "needs_energy(Kiya)"
        ],
        "rules": "∀x (is_marine(x) → (needs_energy(x) ∧ has_proteins(x)))",
        "conclusion": "has_proteins(Kiya)"
      },
      {
        "facts": [
          "¬lives_deep(Kiya)",
          "has_proteins(Kiya)"
        ],
        "rules": "(lives_deep(Kiya) ∨ has_proteins(Kiya)) → glows_dark(Kiya)",
        "conclusion": "glows_dark(Kiya)"
      },
      {
        "facts": [
          "has_sarcoplasm(Kiya)",
          "glows_dark(Kiya)"
        ],
        "rules": "∀x ((has_sarcoplasm(x) ∧ glows_dark(x)) → bioluminescent(x))",
        "conclusion": "bioluminescent(Kiya)"
      },
      {
        "facts": [
          "bioluminescent(Kiya)"
        ],
        "rules": "∀x (bioluminescent(x) ⊕ non_bioluminescent(x))",
        "conclusion": "¬non_bioluminescent(Kiya)"
      }
    ],
    "conclusion": "Kiya is not non_bioluminescent, which means Kiya is bioluminescent.",
    "conclusion_fol": "¬non_bioluminescent(Kiya)",
    "answer": "True",
    "context": [
      "Kiya is marine.",
      "Kiya needs energy.",
      "All marine organisms that need energy have specialized proteins and utilize them to function.",
      "Kiya does not live in deep waters.",
      "If Kiya lives in deep waters or has specialized proteins, then she can glow in the dark.",
      "Kiya has sarcoplasm.",
      "For all biological organisms, if they have sarcoplasm and glow in the dark, then they are bioluminescent.",
      "For every biological organism, it is either bioluminescent or non_bioluminescent, but not both."
    ],
    "context_fol": [
      "is_marine(Kiya)",
      "needs_energy(Kiya)",
      "∀x (is_marine(x) → (needs_energy(x) ∧ has_proteins(x)))",
      "¬lives_deep(Kiya)",
      "(lives_deep(Kiya) ∨ has_proteins(Kiya)) → glows_dark(Kiya)",
      "has_sarcoplasm(Kiya)",
      "∀x ((has_sarcoplasm(x) ∧ glows_dark(x)) → bioluminescent(x))",
      "∀x (bioluminescent(x) ⊕ non_bioluminescent(x))"
    ],
    "background_story": "Kiya was a unique species of jellyfish discovered in the depths of the ocean. What made her remarkable was the composition of her cytoplasm, specifically the sarcoplasm that filled her muscle cells. The sarcoplasm in Kiya's cells contained specialized proteins that allowed her to glow in the dark, attracting prey in the dimly lit waters. This adaptation made her a fascinating subject for marine biologists, who studied her to understand the intricacies of her bioluminescence. As research on Kiya progressed, scientists uncovered more about the role of sarcoplasm in her muscles, shedding light on the mysteries of marine life and the incredible diversity of life forms on Earth.",
    "name": "Kiya",
    "keyword": "sarcoplasm",
    "subject_category": "biological organism"
  },
  {
    "facts": [
      "Mila investigates corruption.",
      "Mila seeks truth.",
      "Mila uncovers lies.",
      "Mila does not conduct interviews.",
      "Mila gathers evidence."
    ],
    "facts_fol": [
      "investigate_corruption(Mila)",
      "seek_truth(Mila)",
      "uncovered_lies(Mila)",
      "¬conducts_interviews(Mila)",
      "gathers_evidence(Mila)"
    ],
    "rules": [
      "If Mila investigates corruption, then she will face danger and inspire others.",
      "If Mila seeks truth and exposes scandals, then she will face danger.",
      "If someone writes stories and uncovers lies, then they can expose scandals.",
      "If Mila either conducts interviews or gathers evidence (but not both), then she writes stories."
    ],
    "rules_fol": [
      "investigate_corruption(Mila) → (face_danger(Mila) ∧ inspire_others(Mila))",
      "(seek_truth(Mila) ∧ expose_scandals(Mila)) → face_danger(Mila)",
      "∀x ((writes_stories(x) ∧ uncovered_lies(x)) → expose_scandals(x))",
      "(conducts_interviews(Mila) ⊕ gathers_evidence(Mila)) → writes_stories(Mila)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Mila pursues justice, then she will take risks and face danger.",
      "If Mila reports wrongdoings, then she will expose scandals.",
      "All journalists write stories."
    ],
    "distracting_rules_fol": [
      "pursue_justice(Mila) → (take_risks(Mila) ∧ face_danger(Mila))",
      "reports_wrongdoings(Mila) → expose_scandals(Mila)",
      "∀x (is_journalist(x) → writes_stories(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Mila does not conduct interviews.",
          "Mila gathers evidence."
        ],
        "rules": "If Mila either conducts interviews or gathers evidence (but not both), then she writes stories.",
        "conclusion": "Mila writes stories."
      },
      {
        "facts": [
          "Mila writes stories.",
          "Mila uncovers lies."
        ],
        "rules": "If someone writes stories and uncovers lies, then they can expose scandals.",
        "conclusion": "Mila exposes scandals."
      },
      {
        "facts": [
          "Mila seeks truth.",
          "Mila exposes scandals."
        ],
        "rules": "If Mila seeks truth and exposes scandals, then she will face danger.",
        "conclusion": "Mila faces danger."
      },
      {
        "facts": [
          "Mila investigates corruption.",
          "Mila faces danger."
        ],
        "rules": "If Mila investigates corruption, then she will face danger and inspire others.",
        "conclusion": "Mila does not inspire others."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬conducts_interviews(Mila)",
          "gathers_evidence(Mila)"
        ],
        "rules": "(conducts_interviews(Mila) ⊕ gathers_evidence(Mila)) → writes_stories(Mila)",
        "conclusion": "writes_stories(Mila)"
      },
      {
        "facts": [
          "writes_stories(Mila)",
          "uncovered_lies(Mila)"
        ],
        "rules": "∀x ((writes_stories(x) ∧ uncovered_lies(x)) → expose_scandals(x))",
        "conclusion": "expose_scandals(Mila)"
      },
      {
        "facts": [
          "seek_truth(Mila)",
          "expose_scandals(Mila)"
        ],
        "rules": "(seek_truth(Mila) ∧ expose_scandals(Mila)) → face_danger(Mila)",
        "conclusion": "face_danger(Mila)"
      },
      {
        "facts": [
          "investigate_corruption(Mila)",
          "face_danger(Mila)"
        ],
        "rules": "investigate_corruption(Mila) → (face_danger(Mila) ∧ inspire_others(Mila))",
        "conclusion": "¬inspire_others(Mila)"
      }
    ],
    "conclusion": "Mila does not inspire others.",
    "conclusion_fol": "¬inspire_others(Mila)",
    "answer": "False",
    "context": [
      "Mila does not conduct interviews.",
      "Mila gathers evidence.",
      "If Mila either conducts interviews or gathers evidence (but not both), then she writes stories.",
      "Mila uncovers lies.",
      "If someone writes stories and uncovers lies, then they can expose scandals.",
      "Mila seeks truth.",
      "If Mila seeks truth and exposes scandals, then she will face danger.",
      "Mila investigates corruption.",
      "If Mila investigates corruption, then she will face danger and inspire others."
    ],
    "context_fol": [
      "¬conducts_interviews(Mila)",
      "gathers_evidence(Mila)",
      "(conducts_interviews(Mila) ⊕ gathers_evidence(Mila)) → writes_stories(Mila)",
      "uncovered_lies(Mila)",
      "∀x ((writes_stories(x) ∧ uncovered_lies(x)) → expose_scandals(x))",
      "seek_truth(Mila)",
      "(seek_truth(Mila) ∧ expose_scandals(Mila)) → face_danger(Mila)",
      "investigate_corruption(Mila)",
      "investigate_corruption(Mila) → (face_danger(Mila) ∧ inspire_others(Mila))"
    ],
    "background_story": "Mila was a brilliant and ambitious journalist, known for her fearless pursuit of truth. She had been investigating a string of corruption cases involving high-ranking government officials. Her determination to expose the scandal ultimately proved to be fatally flawed, as she underestimated the danger that came with it. One fateful night, while working late in her office, Mila was confronted by those she had been seeking to uncover. Despite her bravery, she was fatally wounded in the confrontation. Her death sent shockwaves through the community, but it also galvanized her colleagues to continue her work, ensuring that her sacrifice would not be in vain. Mila's legacy lived on, a reminder of the risks journalists take to bring truth to light.",
    "name": "Mila",
    "keyword": "fatally",
    "subject_category": "human"
  },
  {
    "facts": [
      "Zen is creative.",
      "Zen loves music.",
      "Zen sets goals.",
      "Zen takes risks."
    ],
    "facts_fol": [
      "creative(Zen)",
      "loves_music(Zen)",
      "sets_goals(Zen)",
      "takes_risks(Zen)"
    ],
    "rules": [
      "If Zen is passionate, then he is creative and successful.",
      "Any person who loves music or is a driven person is passionate.",
      "If Zen sets goals, then he is a driven person and takes risks."
    ],
    "rules_fol": [
      "passionate(Zen) → (creative(Zen) ∧ successful(Zen))",
      "∀x ((loves_music(x) ∨ driven_person(x)) → passionate(x))",
      "sets_goals(Zen) → (driven_person(Zen) ∧ takes_risks(Zen))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Zen is inspired, then he is either passionate or talented, but not both.",
      "Everyone who pursues their dreams either finds inspiration or is a driven person (or both)."
    ],
    "distracting_rules_fol": [
      "inspired(Zen) → (passionate(Zen) ⊕ talented(Zen))",
      "∀x (pursues_dreams(x) → (finds_inspiration(x) ∨ driven_person(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Zen sets goals.",
          "Zen takes risks."
        ],
        "rules": "If Zen sets goals, then he is a driven person and takes risks.",
        "conclusion": "Zen is a driven person."
      },
      {
        "facts": [
          "Zen loves music.",
          "Zen is a driven person."
        ],
        "rules": "Any person who loves music or is a driven person is passionate.",
        "conclusion": "Zen is passionate."
      },
      {
        "facts": [
          "Zen is passionate.",
          "Zen is creative."
        ],
        "rules": "If Zen is passionate, then he is creative and successful.",
        "conclusion": "Zen is not successful."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "sets_goals(Zen)",
          "takes_risks(Zen)"
        ],
        "rules": "sets_goals(Zen) → (driven_person(Zen) ∧ takes_risks(Zen))",
        "conclusion": "driven_person(Zen)"
      },
      {
        "facts": [
          "loves_music(Zen)",
          "driven_person(Zen)"
        ],
        "rules": "∀x ((loves_music(x) ∨ driven_person(x)) → passionate(x))",
        "conclusion": "passionate(Zen)"
      },
      {
        "facts": [
          "passionate(Zen)",
          "creative(Zen)"
        ],
        "rules": "passionate(Zen) → (creative(Zen) ∧ successful(Zen))",
        "conclusion": "¬successful(Zen)"
      }
    ],
    "conclusion": "Zen is not successful.",
    "conclusion_fol": "¬successful(Zen)",
    "answer": "False",
    "context": [
      "Zen sets goals.",
      "Zen takes risks.",
      "If Zen sets goals, then he is a driven person and takes risks.",
      "Zen loves music.",
      "Any person who loves music or is a driven person is passionate.",
      "Zen is creative.",
      "If Zen is passionate, then he is creative and successful."
    ],
    "context_fol": [
      "sets_goals(Zen)",
      "takes_risks(Zen)",
      "sets_goals(Zen) → (driven_person(Zen) ∧ takes_risks(Zen))",
      "loves_music(Zen)",
      "∀x ((loves_music(x) ∨ driven_person(x)) → passionate(x))",
      "creative(Zen)",
      "passionate(Zen) → (creative(Zen) ∧ successful(Zen))"
    ],
    "background_story": "Zen was once a promising young musician, known for his captivating stage presence and soulful voice. His band's debut album had garnered critical acclaim, and their future seemed bright. However, as time went on, Zen's focus and passion began to dissipate. The pressures of fame, combined with personal struggles, took a toll on his creativity and motivation. He found himself going through the motions, and his music suffered as a result. The band's subsequent albums received lukewarm reception, and their fanbase slowly dwindled. Zen's spark had dissipated, leaving behind a faint glow of what once was. He eventually stepped away from the spotlight, seeking to rediscover the inspiration and drive that had initially fueled his artistic journey.",
    "name": "Zen",
    "keyword": "dissipated",
    "subject_category": "person"
  },
  {
    "facts": [
      "Briana is a scientist.",
      "Briana is an innovator.",
      "Briana conducts experiments.",
      "Briana advances knowledge."
    ],
    "facts_fol": [
      "is_scientist(Briana)",
      "is_innovator(Briana)",
      "conduct_experiments(Briana)",
      "advance_knowledge(Briana)"
    ],
    "rules": [
      "If Briana is a dedicated researcher, then she makes new discoveries and earns recognition.",
      "If Briana is a scientist, then she is either a dedicated researcher or an innovator, but not both.",
      "Anyone who conducts experiments either makes new discoveries or advances knowledge."
    ],
    "rules_fol": [
      "dedicated_researcher(Briana) → (make_new_discoveries(Briana) ∧ earn_recognition(Briana))",
      "is_scientist(Briana) → (dedicated_researcher(Briana) ⊕ is_innovator(Briana))",
      "∀x (conduct_experiments(x) → (advance_knowledge(x) ∨ make_new_discoveries(x)))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Briana pursues a PhD, then she either publishes papers or is a dedicated researcher, but not both.",
      "If Briana either studies data or analyzes results (but not both), then she makes new discoveries."
    ],
    "distracting_rules_fol": [
      "pursue_phd(Briana) → (publish_papers(Briana) ⊕ dedicated_researcher(Briana))",
      "(study_data(Briana) ⊕ analyze_results(Briana)) → make_new_discoveries(Briana)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Briana conducts experiments.",
          "Briana advances knowledge."
        ],
        "rules": "Anyone who conducts experiments either makes new discoveries or advances knowledge.",
        "conclusion": null
      },
      {
        "facts": [
          "Briana is a scientist.",
          "Briana is an innovator."
        ],
        "rules": "If Briana is a scientist, then she is either a dedicated researcher or an innovator, but not both.",
        "conclusion": "Briana is not a dedicated researcher."
      },
      {
        "facts": [
          "Briana is not a dedicated researcher."
        ],
        "rules": "If Briana is a dedicated researcher, then she makes new discoveries and earns recognition.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "conduct_experiments(Briana)",
          "advance_knowledge(Briana)"
        ],
        "rules": "∀x (conduct_experiments(x) → (advance_knowledge(x) ∨ make_new_discoveries(x)))",
        "conclusion": null
      },
      {
        "facts": [
          "is_scientist(Briana)",
          "is_innovator(Briana)"
        ],
        "rules": "is_scientist(Briana) → (dedicated_researcher(Briana) ⊕ is_innovator(Briana))",
        "conclusion": "¬dedicated_researcher(Briana)"
      },
      {
        "facts": [
          "¬dedicated_researcher(Briana)"
        ],
        "rules": "dedicated_researcher(Briana) → (make_new_discoveries(Briana) ∧ earn_recognition(Briana))",
        "conclusion": null
      }
    ],
    "conclusion": "Briana does not earn recognition.",
    "conclusion_fol": "¬earn_recognition(Briana)",
    "answer": "Uncertain",
    "context": [
      "Briana conducts experiments.",
      "Briana advances knowledge.",
      "Anyone who conducts experiments either makes new discoveries or advances knowledge.",
      "Briana is a scientist.",
      "Briana is an innovator.",
      "If Briana is a scientist, then she is either a dedicated researcher or an innovator, but not both.",
      "If Briana is a dedicated researcher, then she makes new discoveries and earns recognition."
    ],
    "context_fol": [
      "conduct_experiments(Briana)",
      "advance_knowledge(Briana)",
      "∀x (conduct_experiments(x) → (advance_knowledge(x) ∨ make_new_discoveries(x)))",
      "is_scientist(Briana)",
      "is_innovator(Briana)",
      "is_scientist(Briana) → (dedicated_researcher(Briana) ⊕ is_innovator(Briana))",
      "dedicated_researcher(Briana) → (make_new_discoveries(Briana) ∧ earn_recognition(Briana))"
    ],
    "background_story": "Briana, a brilliant biochemist, dedicated her life to understanding the human body's metabolic processes. Her focus was on catabolic reactions, where complex molecules are broken down into simpler ones, releasing energy. Briana's groundbreaking research on catabolic pathways led to a deeper understanding of how the body responds to stress and disease. Her work had significant implications for the development of new treatments for metabolic disorders. Despite facing numerous challenges, Briana's passion for her work drove her forward. She spent countless hours in the lab, often forgetting to eat or sleep, as she unraveled the mysteries of catabolism. Her dedication earned her numerous accolades, and her name became synonymous with excellence in the field of biochemistry.",
    "name": "Briana",
    "keyword": "catabolic",
    "subject_category": "human"
  },
  {
    "facts": [
      "Dustin follows rules.",
      "Dustin does not challenge norms."
    ],
    "facts_fol": [
      "follows_rules(Dustin)",
      "¬challenges_norms(Dustin)"
    ],
    "rules": [
      "Dustin is either conventional or avant-garde, but not both.",
      "If an artist follows rules and respects tradition, then they are conventional.",
      "Dustin either challenges norms or respects tradition, but given his reputation, it is more likely that he challenges norms."
    ],
    "rules_fol": [
      "conventional(Dustin) ⊕ avant_garde(Dustin)",
      "∀x ((follows_rules(x) ∧ respects_tradition(x)) → conventional(x))",
      "challenges_norms(Dustin) ⊕ respects_tradition(Dustin)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Dustin is innovative, then he is either conventional or expressive.",
      "Any artist who honors history or adheres to standards respects tradition."
    ],
    "distracting_rules_fol": [
      "innovative(Dustin) → (conventional(Dustin) ∨ expressive(Dustin))",
      "∀x ((honors_history(x) ∨ adheres_standards(x)) → respects_tradition(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Dustin does not challenge norms."
        ],
        "rules": "Dustin either challenges norms or respects tradition, but given his reputation, it is more likely that he challenges norms.",
        "conclusion": "Dustin respects tradition."
      },
      {
        "facts": [
          "Dustin follows rules.",
          "Dustin respects tradition."
        ],
        "rules": "If an artist follows rules and respects tradition, then they are conventional.",
        "conclusion": "Dustin is conventional."
      },
      {
        "facts": [
          "Dustin is conventional."
        ],
        "rules": "Dustin is either conventional or avant-garde, but not both.",
        "conclusion": "Dustin is avant-garde."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬challenges_norms(Dustin)"
        ],
        "rules": "challenges_norms(Dustin) ⊕ respects_tradition(Dustin)",
        "conclusion": "respects_tradition(Dustin)"
      },
      {
        "facts": [
          "follows_rules(Dustin)",
          "respects_tradition(Dustin)"
        ],
        "rules": "∀x ((follows_rules(x) ∧ respects_tradition(x)) → conventional(x))",
        "conclusion": "conventional(Dustin)"
      },
      {
        "facts": [
          "conventional(Dustin)"
        ],
        "rules": "conventional(Dustin) ⊕ avant_garde(Dustin)",
        "conclusion": "avant_garde(Dustin)"
      }
    ],
    "conclusion": "Dustin is avant-garde.",
    "conclusion_fol": "avant_garde(Dustin)",
    "answer": "False",
    "context": [
      "Dustin does not challenge norms.",
      "Dustin either challenges norms or respects tradition, but given his reputation, it is more likely that he challenges norms.",
      "Dustin follows rules.",
      "If an artist follows rules and respects tradition, then they are conventional.",
      "Dustin is either conventional or avant-garde, but not both."
    ],
    "context_fol": [
      "¬challenges_norms(Dustin)",
      "challenges_norms(Dustin) ⊕ respects_tradition(Dustin)",
      "follows_rules(Dustin)",
      "∀x ((follows_rules(x) ∧ respects_tradition(x)) → conventional(x))",
      "conventional(Dustin) ⊕ avant_garde(Dustin)"
    ],
    "background_story": "Dustin was a visionary artist known for his bold and unapologetic rejection of traditional norms. His work embodied the spirit of iconoclasm, challenging societal conventions and pushing the boundaries of what was considered acceptable. With each new piece, Dustin aimed to shatter the status quo, incorporating elements of satire and social commentary. His paintings, which often featured destroyed or reimagined icons of culture and history, sparked intense debate and controversy. Critics labeled him a provocateur, but Dustin saw himself as a catalyst for change, forcing people to question their assumptions and confront the flaws in their beloved institutions. Through his art, he inspired a new generation of thinkers and creators to challenge the established order and forge their own paths.",
    "name": "Dustin",
    "keyword": "iconoclasm",
    "subject_category": "artist"
  },
  {
    "facts": [
      "Andrea is an entrepreneur.",
      "Andrea does not trade goods.",
      "Andrea sells items.",
      "Andrea manages funds.",
      "Andrea attends auctions.",
      "Andrea restores artifacts."
    ],
    "facts_fol": [
      "entrepreneur(Andrea)",
      "¬trades_goods(Andrea)",
      "sells_items(Andrea)",
      "manages_funds(Andrea)",
      "attends_auctions(Andrea)",
      "restores_artifacts(Andrea)"
    ],
    "rules": [
      "If Andrea finds rare items and makes smart purchases, then she is a collector.",
      "If Andrea sells items, then she either makes smart purchases or trades goods, but not both.",
      "If Andrea manages funds, then she is an investor.",
      "If Andrea attends auctions, then she either finds rare items or restores artifacts, but not both."
    ],
    "rules_fol": [
      "(finds_rarities(Andrea) ∧ buys_smart(Andrea)) → collector(Andrea)",
      "sells_items(Andrea) → (buys_smart(Andrea) ⊕ trades_goods(Andrea))",
      "manages_funds(Andrea) → investor(Andrea)",
      "attends_auctions(Andrea) → (finds_rarities(Andrea) ⊕ restores_artifacts(Andrea))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Andrea spots gems or values antiques, then she is a collector.",
      "If Andrea respects the value of items, then she buys smart.",
      "If Andrea either owns stocks or holds bonds (but not both), then she is an investor.",
      "If Andrea scours markets, then she either finds rare items or spots gems."
    ],
    "distracting_rules_fol": [
      "(spots_gems(Andrea) ∨ values_antiques(Andrea)) → collector(Andrea)",
      "respects_value(Andrea) → buys_smart(Andrea)",
      "(owns_stocks(Andrea) ⊕ holds_bonds(Andrea)) → investor(Andrea)",
      "scours_markets(Andrea) → (finds_rarities(Andrea) ∨ spots_gems(Andrea))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Andrea attends auctions.",
          "Andrea restores artifacts."
        ],
        "rules": "If Andrea attends auctions, then she either finds rare items or restores artifacts, but not both.",
        "conclusion": "Andrea does not find rare items."
      },
      {
        "facts": [
          "Andrea manages funds."
        ],
        "rules": "If Andrea manages funds, then she is an investor.",
        "conclusion": "Andrea is an investor."
      },
      {
        "facts": [
          "Andrea sells items.",
          "Andrea does not trade goods."
        ],
        "rules": "If Andrea sells items, then she either makes smart purchases or trades goods, but not both.",
        "conclusion": "Andrea makes smart purchases."
      },
      {
        "facts": [
          "Andrea does not find rare items.",
          "Andrea makes smart purchases."
        ],
        "rules": "If Andrea finds rare items and makes smart purchases, then she is a collector.",
        "conclusion": null
      },
      {
        "facts": [
          "Andrea is an entrepreneur.",
          "Andrea is an investor."
        ],
        "rules": null,
        "conclusion": "Andrea is an entrepreneur, or a collector, or an investor."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "attends_auctions(Andrea)",
          "restores_artifacts(Andrea)"
        ],
        "rules": "attends_auctions(Andrea) → (finds_rarities(Andrea) ⊕ restores_artifacts(Andrea))",
        "conclusion": "¬finds_rarities(Andrea)"
      },
      {
        "facts": [
          "manages_funds(Andrea)"
        ],
        "rules": "manages_funds(Andrea) → investor(Andrea)",
        "conclusion": "investor(Andrea)"
      },
      {
        "facts": [
          "sells_items(Andrea)",
          "¬trades_goods(Andrea)"
        ],
        "rules": "sells_items(Andrea) → (buys_smart(Andrea) ⊕ trades_goods(Andrea))",
        "conclusion": "buys_smart(Andrea)"
      },
      {
        "facts": [
          "¬finds_rarities(Andrea)",
          "buys_smart(Andrea)"
        ],
        "rules": "(finds_rarities(Andrea) ∧ buys_smart(Andrea)) → collector(Andrea)",
        "conclusion": null
      },
      {
        "facts": [
          "entrepreneur(Andrea)",
          "investor(Andrea)"
        ],
        "rules": null,
        "conclusion": "entrepreneur(Andrea) ∨ (collector(Andrea) ∨ investor(Andrea))"
      }
    ],
    "conclusion": "Andrea is an entrepreneur, or a collector, or an investor.",
    "conclusion_fol": "entrepreneur(Andrea) ∨ (collector(Andrea) ∨ investor(Andrea))",
    "answer": "True",
    "context": [
      "Andrea attends auctions.",
      "Andrea restores artifacts.",
      "If Andrea attends auctions, then she either finds rare items or restores artifacts, but not both.",
      "Andrea manages funds.",
      "If Andrea manages funds, then she is an investor.",
      "Andrea sells items.",
      "Andrea does not trade goods.",
      "If Andrea sells items, then she either makes smart purchases or trades goods, but not both.",
      "If Andrea finds rare items and makes smart purchases, then she is a collector.",
      "Andrea is an entrepreneur."
    ],
    "context_fol": [
      "attends_auctions(Andrea)",
      "restores_artifacts(Andrea)",
      "attends_auctions(Andrea) → (finds_rarities(Andrea) ⊕ restores_artifacts(Andrea))",
      "manages_funds(Andrea)",
      "manages_funds(Andrea) → investor(Andrea)",
      "sells_items(Andrea)",
      "¬trades_goods(Andrea)",
      "sells_items(Andrea) → (buys_smart(Andrea) ⊕ trades_goods(Andrea))",
      "(finds_rarities(Andrea) ∧ buys_smart(Andrea)) → collector(Andrea)",
      "entrepreneur(Andrea)"
    ],
    "background_story": "Andrea was a skilled entrepreneur with a knack for turning small investments into large profits. She made her fortune by buying and selling rare collectibles, often referred to as a 'boodle' of goods. With a keen eye for valuable items, Andrea would scour estate sales, auctions, and thrift stores to find hidden gems. Her boodle of treasures included everything from vintage jewelry to antique furniture. As her business grew, so did her reputation as a shrewd and savvy collector. People would come from all over to see Andrea's boodle, hoping to find a rare item to add to their own collection. Her success was a testament to her hard work and ability to spot a valuable boodle when she saw one.",
    "name": "Andrea",
    "keyword": "boodle",
    "subject_category": "human"
  },
  {
    "facts": [
      "Mikaela learns the language.",
      "Mikaela appreciates the history of the country she is exploring.",
      "Mikaela does not visit landmarks.",
      "Mikaela tries local food."
    ],
    "facts_fol": [
      "learn_language(Mikaela)",
      "appreciate_history(Mikaela)",
      "¬visit_landmarks(Mikaela)",
      "try_local_food(Mikaela)"
    ],
    "rules": [
      "If Mikaela acculturate to Japanese culture, then she either develops respect for the culture or builds a community, but not both.",
      "Anyone who learns the language or adopts local customs can acculturate.",
      "If Mikaela explores Japan, then she either respects its culture or appreciates its history, but not both.",
      "If Mikaela either visits landmarks or tries local food (but not both), then she is exploring the country."
    ],
    "rules_fol": [
      "acculturate(Mikaela) → (respect_culture(Mikaela) ⊕ build_community(Mikaela))",
      "∀x ((learn_language(x) ∨ adopt_customs(x)) → acculturate(x))",
      "explore_country(Mikaela) → (respect_culture(Mikaela) ⊕ appreciate_history(Mikaela))",
      "(visit_landmarks(Mikaela) ⊕ try_local_food(Mikaela)) → explore_country(Mikaela)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If someone embraces diversity and values traditions, then they can acculturate.",
      "All open-minded individuals respect culture and value diversity.",
      "If Mikaela is open-minded, then she values diversity and explores her country."
    ],
    "distracting_rules_fol": [
      "∀x ((embrace_diversity(x) ∧ value_traditions(x)) → acculturate(x))",
      "∀x (open_minded(x) → (respect_culture(x) ∧ value_diversity(x)))",
      "open_minded(Mikaela) → (value_diversity(Mikaela) ∧ explore_country(Mikaela))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Mikaela does not visit landmarks.",
          "Mikaela tries local food."
        ],
        "rules": "If Mikaela either visits landmarks or tries local food (but not both), then she is exploring the country.",
        "conclusion": "Mikaela explores a country."
      },
      {
        "facts": [
          "Mikaela explores a country.",
          "Mikaela appreciates the history of the country she is exploring."
        ],
        "rules": "If Mikaela explores Japan, then she either respects its culture or appreciates its history, but not both.",
        "conclusion": "Mikaela does not develop respect for the culture."
      },
      {
        "facts": [
          "Mikaela learns the language."
        ],
        "rules": "Anyone who learns the language or adopts local customs can acculturate.",
        "conclusion": "Mikaela acculturates to Japanese culture."
      },
      {
        "facts": [
          "Mikaela acculturates to Japanese culture.",
          "Mikaela does not develop respect for the culture."
        ],
        "rules": "If Mikaela acculturate to Japanese culture, then she either develops respect for the culture or builds a community, but not both.",
        "conclusion": "Mikaela does not build a community."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬visit_landmarks(Mikaela)",
          "try_local_food(Mikaela)"
        ],
        "rules": "(visit_landmarks(Mikaela) ⊕ try_local_food(Mikaela)) → explore_country(Mikaela)",
        "conclusion": "explore_country(Mikaela)"
      },
      {
        "facts": [
          "explore_country(Mikaela)",
          "appreciate_history(Mikaela)"
        ],
        "rules": "explore_country(Mikaela) → (respect_culture(Mikaela) ⊕ appreciate_history(Mikaela))",
        "conclusion": "¬respect_culture(Mikaela)"
      },
      {
        "facts": [
          "learn_language(Mikaela)"
        ],
        "rules": "∀x ((learn_language(x) ∨ adopt_customs(x)) → acculturate(x))",
        "conclusion": "acculturate(Mikaela)"
      },
      {
        "facts": [
          "acculturate(Mikaela)",
          "¬respect_culture(Mikaela)"
        ],
        "rules": "acculturate(Mikaela) → (respect_culture(Mikaela) ⊕ build_community(Mikaela))",
        "conclusion": "¬build_community(Mikaela)"
      }
    ],
    "conclusion": "Mikaela does not build a community.",
    "conclusion_fol": "¬build_community(Mikaela)",
    "answer": "False",
    "context": [
      "Mikaela does not visit landmarks.",
      "Mikaela tries local food.",
      "If Mikaela either visits landmarks or tries local food (but not both), then she is exploring the country.",
      "Mikaela appreciates the history of the country she is exploring.",
      "If Mikaela explores Japan, then she either respects its culture or appreciates its history, but not both.",
      "Mikaela learns the language.",
      "Anyone who learns the language or adopts local customs can acculturate.",
      "If Mikaela acculturate to Japanese culture, then she either develops respect for the culture or builds a community, but not both."
    ],
    "context_fol": [
      "¬visit_landmarks(Mikaela)",
      "try_local_food(Mikaela)",
      "(visit_landmarks(Mikaela) ⊕ try_local_food(Mikaela)) → explore_country(Mikaela)",
      "appreciate_history(Mikaela)",
      "explore_country(Mikaela) → (respect_culture(Mikaela) ⊕ appreciate_history(Mikaela))",
      "learn_language(Mikaela)",
      "∀x ((learn_language(x) ∨ adopt_customs(x)) → acculturate(x))",
      "acculturate(Mikaela) → (respect_culture(Mikaela) ⊕ build_community(Mikaela))"
    ],
    "background_story": "Mikaela, a young professional from Sweden, was excited to start her new life in Japan. As she settled into her Tokyo apartment, she was determined to acculturate into the local customs and way of life. She enrolled in a Japanese language course, practiced calligraphy, and even joined a traditional tea ceremony club. Mikaela's coworkers were impressed by her eagerness to learn and adapt, and soon she was invited to participate in company ceremonies and events. As she navigated the nuances of Japanese culture, Mikaela discovered the value of respect, humility, and community. She found that acculturation was not just about learning new habits, but about embracing a new perspective and sense of belonging. Mikaela's journey was a testament to the power of cultural exchange and the rewards of embracing diversity.",
    "name": "Mikaela",
    "keyword": "acculturate",
    "subject_category": "human"
  },
  {
    "facts": [
      "Jose analyzes data.",
      "Jose collaborates with peers."
    ],
    "facts_fol": [
      "analyzes_data(Jose)",
      "collaborates_with_peers(Jose)"
    ],
    "rules": [
      "Every scientist either conducts experiments or publishes research (or both).",
      "If Jose leads a team, then he either conducts experiments or analyzes data, but not both.",
      "Jose either develops theories or leads a team, but not both.",
      "Jose either collaborates with peers or develops theories, but not both."
    ],
    "rules_fol": [
      "∀x (conducts_experiments(x) ∨ publishes_research(x))",
      "leads_team(Jose) → (conducts_experiments(Jose) ⊕ analyzes_data(Jose))",
      "develops_theories(Jose) ⊕ leads_team(Jose)",
      "collaborates_with_peers(Jose) ⊕ develops_theories(Jose)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "All scientists with a curious mind have expertise and conduct experiments.",
      "If Jose mentors his colleagues, then he leads a team.",
      "Any scientist who studies cells or makes discoveries can develop theories."
    ],
    "distracting_rules_fol": [
      "∀x (curious_mind(x) → (has_expertise(x) ∧ conducts_experiments(x)))",
      "mentors_colleagues(Jose) → leads_team(Jose)",
      "∀x ((studies_cell(x) ∨ makes_discoveries(x)) → develops_theories(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Jose collaborates with peers."
        ],
        "rules": "Jose either collaborates with peers or develops theories, but not both.",
        "conclusion": "Jose does not develop theories."
      },
      {
        "facts": [
          "Jose does not develop theories."
        ],
        "rules": "Jose either develops theories or leads a team, but not both.",
        "conclusion": "Jose leads a team."
      },
      {
        "facts": [
          "Jose leads a team.",
          "Jose analyzes data."
        ],
        "rules": "If Jose leads a team, then he either conducts experiments or analyzes data, but not both.",
        "conclusion": "Jose does not conduct experiments."
      },
      {
        "facts": [
          "Jose does not conduct experiments."
        ],
        "rules": "Every scientist either conducts experiments or publishes research (or both).",
        "conclusion": "Jose publishes research."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "collaborates_with_peers(Jose)"
        ],
        "rules": "collaborates_with_peers(Jose) ⊕ develops_theories(Jose)",
        "conclusion": "¬develops_theories(Jose)"
      },
      {
        "facts": [
          "¬develops_theories(Jose)"
        ],
        "rules": "develops_theories(Jose) ⊕ leads_team(Jose)",
        "conclusion": "leads_team(Jose)"
      },
      {
        "facts": [
          "leads_team(Jose)",
          "analyzes_data(Jose)"
        ],
        "rules": "leads_team(Jose) → (conducts_experiments(Jose) ⊕ analyzes_data(Jose))",
        "conclusion": "¬conducts_experiments(Jose)"
      },
      {
        "facts": [
          "¬conducts_experiments(Jose)"
        ],
        "rules": "∀x (conducts_experiments(x) ∨ publishes_research(x))",
        "conclusion": "publishes_research(Jose)"
      }
    ],
    "conclusion": "Jose publishes research.",
    "conclusion_fol": "publishes_research(Jose)",
    "answer": "True",
    "context": [
      "Jose collaborates with peers.",
      "Jose either collaborates with peers or develops theories, but not both.",
      "Jose either develops theories or leads a team, but not both.",
      "Jose analyzes data.",
      "If Jose leads a team, then he either conducts experiments or analyzes data, but not both.",
      "Every scientist either conducts experiments or publishes research (or both)."
    ],
    "context_fol": [
      "collaborates_with_peers(Jose)",
      "collaborates_with_peers(Jose) ⊕ develops_theories(Jose)",
      "develops_theories(Jose) ⊕ leads_team(Jose)",
      "analyzes_data(Jose)",
      "leads_team(Jose) → (conducts_experiments(Jose) ⊕ analyzes_data(Jose))",
      "∀x (conducts_experiments(x) ∨ publishes_research(x))"
    ],
    "background_story": "Jose was a renowned cell biologist who had dedicated his career to studying the intricacies of cellular structures. His fascination with the cytoplasmic machinery of cells led to groundbreaking discoveries in the field of cellular transport. Jose's laboratory at the prestigious research institute was a hub of activity, where he and his team worked tirelessly to unravel the mysteries of cytoplasmic streaming and its role in cell signaling. His pioneering work on cytoplasmic dynein and its functions in cellular processes earned him numerous accolades, including the coveted Nobel Prize in Physiology or Medicine. Jose's contributions to the understanding of cytoplasmic dynamics have paved the way for new therapeutic approaches to diseases affecting cellular function.",
    "name": "Jose",
    "keyword": "cytoplasmic",
    "subject_category": "scientist"
  },
  {
    "facts": [
      "Colette does not explore nature.",
      "Colette loves trees.",
      "Colette researches."
    ],
    "facts_fol": [
      "¬explores_nature(Colette)",
      "loves_trees(Colette)",
      "researches(Colette)"
    ],
    "rules": [
      "For every human, they are either a botanist or a non-botanist, but not both.",
      "If Colette studies plants or explores nature, then she is a botanist.",
      "If Colette loves trees and documents findings, then she studies plants.",
      "If Colette researches, then she will document her findings."
    ],
    "rules_fol": [
      "∀x (botanist(x) ⊕ non_botanist(x))",
      "(studies_plants(Colette) ∨ explores_nature(Colette)) → botanist(Colette)",
      "(loves_trees(Colette) ∧ documents_findings(Colette)) → studies_plants(Colette)",
      "researches(Colette) → documents_findings(Colette)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Colette classifies species or discovers specimens, then she is a botanist.",
      "Colette discovers species or studies plants.",
      "Anyone who travels widely or reads studies can document findings."
    ],
    "distracting_rules_fol": [
      "(classifies_species(Colette) ∨ discovers_specimens(Colette)) → botanist(Colette)",
      "discovers_species(Colette) ∨ studies_plants(Colette)",
      "∀x ((travels_widely(x) ∨ reads_studies(x)) → documents_findings(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Colette researches."
        ],
        "rules": "If Colette researches, then she will document her findings.",
        "conclusion": "Colette documents her findings."
      },
      {
        "facts": [
          "Colette loves trees.",
          "Colette documents her findings."
        ],
        "rules": "If Colette loves trees and documents findings, then she studies plants.",
        "conclusion": "Colette studies plants."
      },
      {
        "facts": [
          "Colette studies plants.",
          "Colette does not explore nature."
        ],
        "rules": "If Colette studies plants or explores nature, then she is a botanist.",
        "conclusion": "Colette is a botanist."
      },
      {
        "facts": [
          "Colette is a botanist."
        ],
        "rules": "For every human, they are either a botanist or a non-botanist, but not both.",
        "conclusion": "Colette is not a non-botanist."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "researches(Colette)"
        ],
        "rules": "researches(Colette) → documents_findings(Colette)",
        "conclusion": "documents_findings(Colette)"
      },
      {
        "facts": [
          "loves_trees(Colette)",
          "documents_findings(Colette)"
        ],
        "rules": "(loves_trees(Colette) ∧ documents_findings(Colette)) → studies_plants(Colette)",
        "conclusion": "studies_plants(Colette)"
      },
      {
        "facts": [
          "studies_plants(Colette)",
          "¬explores_nature(Colette)"
        ],
        "rules": "(studies_plants(Colette) ∨ explores_nature(Colette)) → botanist(Colette)",
        "conclusion": "botanist(Colette)"
      },
      {
        "facts": [
          "botanist(Colette)"
        ],
        "rules": "∀x (botanist(x) ⊕ non_botanist(x))",
        "conclusion": "¬non_botanist(Colette)"
      }
    ],
    "conclusion": "Colette is not a non-botanist.",
    "conclusion_fol": "¬non_botanist(Colette)",
    "answer": "True",
    "context": [
      "Colette researches.",
      "If Colette researches, then she will document her findings.",
      "Colette loves trees.",
      "If Colette loves trees and documents findings, then she studies plants.",
      "Colette does not explore nature.",
      "If Colette studies plants or explores nature, then she is a botanist.",
      "For every human, they are either a botanist or a non-botanist, but not both."
    ],
    "context_fol": [
      "researches(Colette)",
      "researches(Colette) → documents_findings(Colette)",
      "loves_trees(Colette)",
      "(loves_trees(Colette) ∧ documents_findings(Colette)) → studies_plants(Colette)",
      "¬explores_nature(Colette)",
      "(studies_plants(Colette) ∨ explores_nature(Colette)) → botanist(Colette)",
      "∀x (botanist(x) ⊕ non_botanist(x))"
    ],
    "background_story": "Colette was a renowned botanist with a passion for rare and exotic plants. Her fascination with the Phellodendron amurense, a species of tree native to East Asia, led her to dedicate her life's work to studying its unique properties. She spent years traveling to remote regions, documenting and researching the Phellodendron's adaptability and medicinal uses. Colette's groundbreaking research revealed the tree's potential in combating certain diseases, earning her international recognition and accolades. Her love for the Phellodendron not only advanced the field of botany but also inspired a new generation of scientists to explore the secrets of the natural world. Colette's dedication to her craft was as resilient as the Phellodendron itself, thriving in the face of adversity and leaving a lasting legacy.",
    "name": "Colette",
    "keyword": "phellodendron",
    "subject_category": "human"
  },
  {
    "facts": [
      "Zander does not observe behavior.",
      "Zander does not collect data in his pursuit of understanding rodents."
    ],
    "facts_fol": [
      "¬observes_behavior(Zander)",
      "¬collects_data(Zander)"
    ],
    "rules": [
      "For all rodent enthusiasts, if they study rodents, then they gain knowledge.",
      "All rodent enthusiasts who either examine habitats or observe behavior (but not both) study rodents.",
      "Zander either collects data or examines habitats, but not both, in his pursuit of understanding rodents."
    ],
    "rules_fol": [
      "∀x (study_rodents(x) → gain_knowledge(x))",
      "∀x ((examines_habitats(x) ⊕ observes_behavior(x)) → study_rodents(x))",
      "collects_data(Zander) ⊕ examines_habitats(Zander)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Zander travels wildly, then he either studies rodents or reads literature, but not both.",
      "Any rodent enthusiast who travels widely or reads research can examine habitats."
    ],
    "distracting_rules_fol": [
      "travels_wildly(Zander) → (study_rodents(Zander) ⊕ reads_literature(Zander))",
      "∀x ((travels_wildly(x) ∨ reads_research(x)) → examines_habitats(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Zander does not collect data in his pursuit of understanding rodents."
        ],
        "rules": "Zander either collects data or examines habitats, but not both, in his pursuit of understanding rodents.",
        "conclusion": "Zander examines habitats."
      },
      {
        "facts": [
          "Zander examines habitats.",
          "Zander does not observe behavior."
        ],
        "rules": "All rodent enthusiasts who either examine habitats or observe behavior (but not both) study rodents.",
        "conclusion": "Zander studies rodents."
      },
      {
        "facts": [
          "Zander studies rodents."
        ],
        "rules": "For all rodent enthusiasts, if they study rodents, then they gain knowledge.",
        "conclusion": "Zander gains knowledge."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬collects_data(Zander)"
        ],
        "rules": "collects_data(Zander) ⊕ examines_habitats(Zander)",
        "conclusion": "examines_habitats(Zander)"
      },
      {
        "facts": [
          "examines_habitats(Zander)",
          "¬observes_behavior(Zander)"
        ],
        "rules": "∀x ((examines_habitats(x) ⊕ observes_behavior(x)) → study_rodents(x))",
        "conclusion": "study_rodents(Zander)"
      },
      {
        "facts": [
          "study_rodents(Zander)"
        ],
        "rules": "∀x (study_rodents(x) → gain_knowledge(x))",
        "conclusion": "gain_knowledge(Zander)"
      }
    ],
    "conclusion": "Zander gains knowledge.",
    "conclusion_fol": "gain_knowledge(Zander)",
    "answer": "True",
    "context": [
      "Zander does not collect data in his pursuit of understanding rodents.",
      "Zander either collects data or examines habitats, but not both, in his pursuit of understanding rodents.",
      "Zander does not observe behavior.",
      "All rodent enthusiasts who either examine habitats or observe behavior (but not both) study rodents.",
      "For all rodent enthusiasts, if they study rodents, then they gain knowledge."
    ],
    "context_fol": [
      "¬collects_data(Zander)",
      "collects_data(Zander) ⊕ examines_habitats(Zander)",
      "¬observes_behavior(Zander)",
      "∀x ((examines_habitats(x) ⊕ observes_behavior(x)) → study_rodents(x))",
      "∀x (study_rodents(x) → gain_knowledge(x))"
    ],
    "background_story": "Zander was a passionate researcher specializing in the Hystricomorpha suborder, which includes guinea pigs, capybaras, and porcupines. His fascination with these rodents began when he was a child, spending hours observing the unique characteristics of his pet guinea pig, Mr. Whiskers. As he delved deeper into his studies, Zander became particularly interested in the evolutionary adaptations of Hystricomorpha, such as their distinctive teeth and robust bodies. He spent years traveling to South America to study capybaras in their natural habitats, learning about their social behaviors and habitats. Zander's dedication to the field of Hystricomorpha research earned him international recognition, and he was often invited to lecture at conferences and universities, sharing his knowledge with fellow enthusiasts and inspiring a new generation of rodent researchers.",
    "name": "Zander",
    "keyword": "hystricomorpha",
    "subject_category": "rodent enthusiast"
  },
  {
    "facts": [
      "Chelsea is not focused.",
      "Chelsea is disciplined.",
      "Chelsea is a champion.",
      "Chelsea is not talented."
    ],
    "facts_fol": [
      "¬focused(Chelsea)",
      "disciplined(Chelsea)",
      "is_champion(Chelsea)",
      "¬is_talented(Chelsea)"
    ],
    "rules": [
      "Chelsea is either athletic or determined (or both).",
      "If Chelsea is trained, then she is either athletic or focused, but not both.",
      "Everyone who is disciplined is either trained or skilled (or both).",
      "A person is either experienced or skilled, but not necessarily both.",
      "If Chelsea is a champion, then she is either experienced or talented, but not both."
    ],
    "rules_fol": [
      "athletic(Chelsea) ∨ determined(Chelsea)",
      "trained(Chelsea) → (athletic(Chelsea) ⊕ focused(Chelsea))",
      "∀x (disciplined(x) → (trained(x) ∨ skilled(x)))",
      "∀x (is_experienced(x) ⊕ skilled(x))",
      "is_champion(Chelsea) → (is_experienced(Chelsea) ⊕ is_talented(Chelsea))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Everyone who plays a sport is athletic.",
      "Anyone who has a coach or practices daily is trained.",
      "Anyone who practices regularly becomes skilled.",
      "Anyone who has knowledge or has practice is experienced."
    ],
    "distracting_rules_fol": [
      "∀x (plays_sport(x) → athletic(x))",
      "∀x ((has_coach(x) ∨ practices_daily(x)) → trained(x))",
      "∀x (practices(x) → skilled(x))",
      "∀x ((has_knowledge(x) ∨ has_practice(x)) → is_experienced(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Chelsea is a champion.",
          "Chelsea is not talented."
        ],
        "rules": "If Chelsea is a champion, then she is either experienced or talented, but not both.",
        "conclusion": "Chelsea is experienced."
      },
      {
        "facts": [
          "Chelsea is experienced."
        ],
        "rules": "A person is either experienced or skilled, but not necessarily both.",
        "conclusion": "Chelsea is not skilled."
      },
      {
        "facts": [
          "Chelsea is disciplined.",
          "Chelsea is not skilled."
        ],
        "rules": "Everyone who is disciplined is either trained or skilled (or both).",
        "conclusion": "Chelsea is trained."
      },
      {
        "facts": [
          "Chelsea is trained.",
          "Chelsea is not focused."
        ],
        "rules": "If Chelsea is trained, then she is either athletic or focused, but not both.",
        "conclusion": "Chelsea is athletic."
      },
      {
        "facts": [
          "Chelsea is athletic."
        ],
        "rules": "Chelsea is either athletic or determined (or both).",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "is_champion(Chelsea)",
          "¬is_talented(Chelsea)"
        ],
        "rules": "is_champion(Chelsea) → (is_experienced(Chelsea) ⊕ is_talented(Chelsea))",
        "conclusion": "is_experienced(Chelsea)"
      },
      {
        "facts": [
          "is_experienced(Chelsea)"
        ],
        "rules": "∀x (is_experienced(x) ⊕ skilled(x))",
        "conclusion": "¬skilled(Chelsea)"
      },
      {
        "facts": [
          "disciplined(Chelsea)",
          "¬skilled(Chelsea)"
        ],
        "rules": "∀x (disciplined(x) → (trained(x) ∨ skilled(x)))",
        "conclusion": "trained(Chelsea)"
      },
      {
        "facts": [
          "trained(Chelsea)",
          "¬focused(Chelsea)"
        ],
        "rules": "trained(Chelsea) → (athletic(Chelsea) ⊕ focused(Chelsea))",
        "conclusion": "athletic(Chelsea)"
      },
      {
        "facts": [
          "athletic(Chelsea)"
        ],
        "rules": "athletic(Chelsea) ∨ determined(Chelsea)",
        "conclusion": null
      }
    ],
    "conclusion": "Chelsea is not determined.",
    "conclusion_fol": "¬determined(Chelsea)",
    "answer": "Uncertain",
    "context": [
      "Chelsea is a champion.",
      "Chelsea is not talented.",
      "If Chelsea is a champion, then she is either experienced or talented, but not both.",
      "A person is either experienced or skilled, but not necessarily both.",
      "Chelsea is disciplined.",
      "Everyone who is disciplined is either trained or skilled (or both).",
      "Chelsea is not focused.",
      "If Chelsea is trained, then she is either athletic or focused, but not both.",
      "Chelsea is either athletic or determined (or both)."
    ],
    "context_fol": [
      "is_champion(Chelsea)",
      "¬is_talented(Chelsea)",
      "is_champion(Chelsea) → (is_experienced(Chelsea) ⊕ is_talented(Chelsea))",
      "∀x (is_experienced(x) ⊕ skilled(x))",
      "disciplined(Chelsea)",
      "∀x (disciplined(x) → (trained(x) ∨ skilled(x)))",
      "¬focused(Chelsea)",
      "trained(Chelsea) → (athletic(Chelsea) ⊕ focused(Chelsea))",
      "athletic(Chelsea) ∨ determined(Chelsea)"
    ],
    "background_story": "Chelsea was a talented young wrestler with a fierce determination in her eyes. She spent most of her high school years training tirelessly, perfecting her moves and building her strength. Her specialty was the art of pinning, where she could swiftly maneuver her opponents into a helpless position. Chelsea's hard work paid off when she won the state championship, pinning her opponent in a thrilling finale. Her victory was not just about the win; it was about the pride she brought to her team and the inspiration she became for younger wrestlers. Chelsea's passion for wrestling and her mastery of pinning techniques earned her a college scholarship, paving the way for a promising athletic career.",
    "name": "Chelsea",
    "keyword": "pinning",
    "subject_category": "human"
  },
  {
    "facts": [
      "Kaizen is a rare specimen.",
      "Kaizen grows slowly.",
      "Kaizen has tender leaves.",
      "Kaizen has a unique color.",
      "Kaizen needs gentle sunlight."
    ],
    "facts_fol": [
      "rare_specimen(Kaizen)",
      "grow_slowly(Kaizen)",
      "tender_leaves(Kaizen)",
      "has_unique_color(Kaizen)",
      "needs_gentle_sun(Kaizen)"
    ],
    "rules": [
      "If Kaizen is fragile, then it either requires special care or blooms beautifully, but not both.",
      "If Kaizen is a rare specimen, then it either has delicate petals or is fragile, but not both.",
      "Kaizen either grows slowly or blooms beautifully, but not both.",
      "If Kaizen is an exotic flower, then it either has tender leaves or delicate petals, but not both.",
      "If Kaizen has a unique color and needs gentle sunlight, then it can be an exotic flower."
    ],
    "rules_fol": [
      "fragile(Kaizen) → (require_special_care(Kaizen) ⊕ bloom_beautifully(Kaizen))",
      "rare_specimen(Kaizen) → (delicate_petal(Kaizen) ⊕ fragile(Kaizen))",
      "grow_slowly(Kaizen) ⊕ bloom_beautifully(Kaizen)",
      "exotic_flower(Kaizen) → (tender_leaves(Kaizen) ⊕ delicate_petal(Kaizen))",
      "(has_unique_color(Kaizen) ∧ needs_gentle_sun(Kaizen)) → exotic_flower(Kaizen)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Kaizen needs humidity, then it either has an elegant appearance or is fragile (or both).",
      "All plants that get nourished and stay healthy bloom beautifully.",
      "If Kaizen has precise roots, then it has soft stems and delicate petals.",
      "If Kaizen has soft buds and needs high humidity, then it is an exotic flower."
    ],
    "distracting_rules_fol": [
      "needs_humidity(Kaizen) → (has_elegant_appearance(Kaizen) ∨ fragile(Kaizen))",
      "∀x ((gets_nourished(x) ∧ stays_healthy(x)) → bloom_beautifully(x))",
      "precise_root(Kaizen) → (soft_stem(Kaizen) ∧ delicate_petal(Kaizen))",
      "(has_soft_buds(Kaizen) ∧ needs_high_humidity(Kaizen)) → exotic_flower(Kaizen)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Kaizen has a unique color.",
          "Kaizen needs gentle sunlight."
        ],
        "rules": "If Kaizen has a unique color and needs gentle sunlight, then it can be an exotic flower.",
        "conclusion": "Kaizen is an exotic flower."
      },
      {
        "facts": [
          "Kaizen is an exotic flower.",
          "Kaizen has tender leaves."
        ],
        "rules": "If Kaizen is an exotic flower, then it either has tender leaves or delicate petals, but not both.",
        "conclusion": "Kaizen does not have delicate petals."
      },
      {
        "facts": [
          "Kaizen grows slowly."
        ],
        "rules": "Kaizen either grows slowly or blooms beautifully, but not both.",
        "conclusion": "Kaizen does not bloom beautifully."
      },
      {
        "facts": [
          "Kaizen is a rare specimen.",
          "Kaizen does not have delicate petals."
        ],
        "rules": "If Kaizen is a rare specimen, then it either has delicate petals or is fragile, but not both.",
        "conclusion": "Kaizen is fragile."
      },
      {
        "facts": [
          "Kaizen is fragile.",
          "Kaizen does not bloom beautifully."
        ],
        "rules": "If Kaizen is fragile, then it either requires special care or blooms beautifully, but not both.",
        "conclusion": "Kaizen requires special care."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "has_unique_color(Kaizen)",
          "needs_gentle_sun(Kaizen)"
        ],
        "rules": "(has_unique_color(Kaizen) ∧ needs_gentle_sun(Kaizen)) → exotic_flower(Kaizen)",
        "conclusion": "exotic_flower(Kaizen)"
      },
      {
        "facts": [
          "exotic_flower(Kaizen)",
          "tender_leaves(Kaizen)"
        ],
        "rules": "exotic_flower(Kaizen) → (tender_leaves(Kaizen) ⊕ delicate_petal(Kaizen))",
        "conclusion": "¬delicate_petal(Kaizen)"
      },
      {
        "facts": [
          "grow_slowly(Kaizen)"
        ],
        "rules": "grow_slowly(Kaizen) ⊕ bloom_beautifully(Kaizen)",
        "conclusion": "¬bloom_beautifully(Kaizen)"
      },
      {
        "facts": [
          "rare_specimen(Kaizen)",
          "¬delicate_petal(Kaizen)"
        ],
        "rules": "rare_specimen(Kaizen) → (delicate_petal(Kaizen) ⊕ fragile(Kaizen))",
        "conclusion": "fragile(Kaizen)"
      },
      {
        "facts": [
          "fragile(Kaizen)",
          "¬bloom_beautifully(Kaizen)"
        ],
        "rules": "fragile(Kaizen) → (require_special_care(Kaizen) ⊕ bloom_beautifully(Kaizen))",
        "conclusion": "require_special_care(Kaizen)"
      }
    ],
    "conclusion": "Kaizen requires special care.",
    "conclusion_fol": "require_special_care(Kaizen)",
    "answer": "True",
    "context": [
      "Kaizen has a unique color.",
      "Kaizen needs gentle sunlight.",
      "If Kaizen has a unique color and needs gentle sunlight, then it can be an exotic flower.",
      "Kaizen has tender leaves.",
      "If Kaizen is an exotic flower, then it either has tender leaves or delicate petals, but not both.",
      "Kaizen grows slowly.",
      "Kaizen either grows slowly or blooms beautifully, but not both.",
      "Kaizen is a rare specimen.",
      "If Kaizen is a rare specimen, then it either has delicate petals or is fragile, but not both.",
      "If Kaizen is fragile, then it either requires special care or blooms beautifully, but not both."
    ],
    "context_fol": [
      "has_unique_color(Kaizen)",
      "needs_gentle_sun(Kaizen)",
      "(has_unique_color(Kaizen) ∧ needs_gentle_sun(Kaizen)) → exotic_flower(Kaizen)",
      "tender_leaves(Kaizen)",
      "exotic_flower(Kaizen) → (tender_leaves(Kaizen) ⊕ delicate_petal(Kaizen))",
      "grow_slowly(Kaizen)",
      "grow_slowly(Kaizen) ⊕ bloom_beautifully(Kaizen)",
      "rare_specimen(Kaizen)",
      "rare_specimen(Kaizen) → (delicate_petal(Kaizen) ⊕ fragile(Kaizen))",
      "fragile(Kaizen) → (require_special_care(Kaizen) ⊕ bloom_beautifully(Kaizen))"
    ],
    "background_story": "Kaizen was a rare and exquisite orchid, prized for its delicate beauty. Its petals were a soft blend of pink and white, as fragile as the morning dew. Kaizen required precise care, thriving only in environments with gentle humidity and indirect sunlight. Its owner, a skilled botanist, tended to it with meticulous attention, ensuring the soil was just moist enough and the temperature remained constant. Despite its fragility, Kaizen bloomed with breathtaking elegance, its beauty captivating all who saw it. However, its delicate nature made it vulnerable to even the slightest change, reminding its caretaker of the importance of patience and gentle handling. Kaizen's fragility was a reminder of the beauty in vulnerability and the need for careful nurturing.",
    "name": "Kaizen",
    "keyword": "fragile",
    "subject_category": "plant"
  },
  {
    "facts": [
      "Ameer is an environmental conservationist.",
      "Ameer is not ecofriendly.",
      "Ameer reduces water usage."
    ],
    "facts_fol": [
      "environmental_conservationist(Ameer)",
      "¬ecofriendly(Ameer)",
      "reduce_water_usage(Ameer)"
    ],
    "rules": [
      "If Ameer is an innovative farmer, then he either uses hydroponics or practices sustainable agriculture (or both).",
      "If Ameer is an environmental conservationist, then he is either an innovative farmer or ecofriendly, but not both.",
      "For Ameer, either he reduces water usage or practices sustainable agriculture, but not necessarily both."
    ],
    "rules_fol": [
      "innovative_farmers(Ameer) → (use_hydroponics(Ameer) ∨ practice_sustainable_agriculture(Ameer))",
      "environmental_conservationist(Ameer) → (innovative_farmers(Ameer) ⊕ ecofriendly(Ameer))",
      "reduce_water_usage(Ameer) ⊕ practice_sustainable_agriculture(Ameer)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Anyone who experiments with crops is either an innovative farmer or develops new methods (or both).",
      "If Ameer is a farm specialist, then he either applies new techniques or practices sustainable agriculture, but not both."
    ],
    "distracting_rules_fol": [
      "∀x (experiment_with_crops(x) → (innovative_farmers(x) ∨ develop_new_methods(x)))",
      "farm_specialist(Ameer) → (apply_new_techniques(Ameer) ⊕ practice_sustainable_agriculture(Ameer))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Ameer reduces water usage."
        ],
        "rules": "For Ameer, either he reduces water usage or practices sustainable agriculture, but not necessarily both.",
        "conclusion": "Ameer does not practice sustainable agriculture."
      },
      {
        "facts": [
          "Ameer is an environmental conservationist.",
          "Ameer is not ecofriendly."
        ],
        "rules": "If Ameer is an environmental conservationist, then he is either an innovative farmer or ecofriendly, but not both.",
        "conclusion": "Ameer is an innovative farmer."
      },
      {
        "facts": [
          "Ameer is an innovative farmer.",
          "Ameer does not practice sustainable agriculture."
        ],
        "rules": "If Ameer is an innovative farmer, then he either uses hydroponics or practices sustainable agriculture (or both).",
        "conclusion": "Ameer does not use hydroponics."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "reduce_water_usage(Ameer)"
        ],
        "rules": "reduce_water_usage(Ameer) ⊕ practice_sustainable_agriculture(Ameer)",
        "conclusion": "¬practice_sustainable_agriculture(Ameer)"
      },
      {
        "facts": [
          "environmental_conservationist(Ameer)",
          "¬ecofriendly(Ameer)"
        ],
        "rules": "environmental_conservationist(Ameer) → (innovative_farmers(Ameer) ⊕ ecofriendly(Ameer))",
        "conclusion": "innovative_farmers(Ameer)"
      },
      {
        "facts": [
          "innovative_farmers(Ameer)",
          "¬practice_sustainable_agriculture(Ameer)"
        ],
        "rules": "innovative_farmers(Ameer) → (use_hydroponics(Ameer) ∨ practice_sustainable_agriculture(Ameer))",
        "conclusion": "¬use_hydroponics(Ameer)"
      }
    ],
    "conclusion": "Ameer does not use hydroponics.",
    "conclusion_fol": "¬use_hydroponics(Ameer)",
    "answer": "False",
    "context": [
      "Ameer reduces water usage.",
      "For Ameer, either he reduces water usage or practices sustainable agriculture, but not necessarily both.",
      "Ameer is an environmental conservationist.",
      "Ameer is not ecofriendly.",
      "If Ameer is an environmental conservationist, then he is either an innovative farmer or ecofriendly, but not both.",
      "If Ameer is an innovative farmer, then he either uses hydroponics or practices sustainable agriculture (or both)."
    ],
    "context_fol": [
      "reduce_water_usage(Ameer)",
      "reduce_water_usage(Ameer) ⊕ practice_sustainable_agriculture(Ameer)",
      "environmental_conservationist(Ameer)",
      "¬ecofriendly(Ameer)",
      "environmental_conservationist(Ameer) → (innovative_farmers(Ameer) ⊕ ecofriendly(Ameer))",
      "innovative_farmers(Ameer) → (use_hydroponics(Ameer) ∨ practice_sustainable_agriculture(Ameer))"
    ],
    "background_story": "Ameer, a brilliant and innovative farmer, had always been fascinated by the potential of hydroponics to revolutionize food production. Growing up in a desert region where water was scarce, he saw the limitations of traditional farming methods. Ameer dedicated himself to studying and experimenting with hydroponic systems, aiming to create a sustainable and efficient way to grow crops. He founded a cutting-edge hydroponic farm, where he successfully cultivated a wide variety of fruits and vegetables using minimal water and land. Ameer's farm became a model for sustainable agriculture, attracting visitors and investors from around the world. His work in hydroponics not only helped to increase food production in water-scarce areas but also inspired a new generation of farmers to adopt innovative and environmentally friendly practices.",
    "name": "Ameer",
    "keyword": "hydroponics",
    "subject_category": "human"
  },
  {
    "facts": [
      "Dorothy is not a healer.",
      "Dorothy is a health specialist.",
      "Dorothy is caring.",
      "Dorothy is a researcher.",
      "Dorothy helps others.",
      "Dorothy does not treat patients."
    ],
    "facts_fol": [
      "¬healer(Dorothy)",
      "health_specialist(Dorothy)",
      "caring(Dorothy)",
      "researcher(Dorothy)",
      "helps_others(Dorothy)",
      "¬treats_patients(Dorothy)"
    ],
    "rules": [
      "If Dorothy is a medical expert, then she is either a researcher or a physician, but not both.",
      "If Dorothy is a health specialist, then she is either a therapist or a medical expert, but not both.",
      "Dorothy either helps others or is an advocate, but not both.",
      "If Dorothy is caring, then she is a therapist and knows anatomy.",
      "Dorothy either treats patients or knows anatomy."
    ],
    "rules_fol": [
      "medical_expert(Dorothy) → (researcher(Dorothy) ⊕ physician(Dorothy))",
      "health_specialist(Dorothy) → (therapist(Dorothy) ⊕ medical_expert(Dorothy))",
      "helps_others(Dorothy) ⊕ advocate(Dorothy)",
      "caring(Dorothy) → (therapist(Dorothy) ∧ knows_anatomy(Dorothy))",
      "treats_patients(Dorothy) ∨ knows_anatomy(Dorothy)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Anyone who founds a sanitarium either pioneers new treatments or is a physician.",
      "If Dorothy is a pioneering figure, then she is either an innovative practitioner or a medical expert (or both).",
      "If Dorothy is a sanitarium owner, then she is either an advocate or a social reformer, but not both.",
      "Dorothy is either a nurse or a therapist.",
      "If Dorothy diagnoses illness, then she either knows anatomy or prescribes treatment, but not both."
    ],
    "distracting_rules_fol": [
      "∀x (found_sanitarium(x) → (pioneers_treatments(x) ∨ physician(x)))",
      "pioneering_figure(Dorothy) → (innovative_practitioner(Dorothy) ∨ medical_expert(Dorothy))",
      "sanitarium_owner(Dorothy) → (advocate(Dorothy) ⊕ social_reformer(Dorothy))",
      "nurse(Dorothy) ∨ therapist(Dorothy)",
      "diagnoses_illness(Dorothy) → (knows_anatomy(Dorothy) ⊕ prescribes_treatment(Dorothy))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Dorothy does not treat patients."
        ],
        "rules": "Dorothy either treats patients or knows anatomy.",
        "conclusion": "Dorothy knows anatomy."
      },
      {
        "facts": [
          "Dorothy is caring.",
          "Dorothy knows anatomy."
        ],
        "rules": "If Dorothy is caring, then she is a therapist and knows anatomy.",
        "conclusion": "Dorothy is a therapist."
      },
      {
        "facts": [
          "Dorothy helps others."
        ],
        "rules": "Dorothy either helps others or is an advocate, but not both.",
        "conclusion": "Dorothy is not an advocate."
      },
      {
        "facts": [
          "Dorothy is a health specialist.",
          "Dorothy is a therapist."
        ],
        "rules": "If Dorothy is a health specialist, then she is either a therapist or a medical expert, but not both.",
        "conclusion": "Dorothy is not a medical expert."
      },
      {
        "facts": [
          "Dorothy is not a medical expert.",
          "Dorothy is a researcher."
        ],
        "rules": "If Dorothy is a medical expert, then she is either a researcher or a physician, but not both.",
        "conclusion": null
      },
      {
        "facts": [
          "Dorothy is not an advocate.",
          "Dorothy is not a healer."
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬treats_patients(Dorothy)"
        ],
        "rules": "treats_patients(Dorothy) ∨ knows_anatomy(Dorothy)",
        "conclusion": "knows_anatomy(Dorothy)"
      },
      {
        "facts": [
          "caring(Dorothy)",
          "knows_anatomy(Dorothy)"
        ],
        "rules": "caring(Dorothy) → (therapist(Dorothy) ∧ knows_anatomy(Dorothy))",
        "conclusion": "therapist(Dorothy)"
      },
      {
        "facts": [
          "helps_others(Dorothy)"
        ],
        "rules": "helps_others(Dorothy) ⊕ advocate(Dorothy)",
        "conclusion": "¬advocate(Dorothy)"
      },
      {
        "facts": [
          "health_specialist(Dorothy)",
          "therapist(Dorothy)"
        ],
        "rules": "health_specialist(Dorothy) → (therapist(Dorothy) ⊕ medical_expert(Dorothy))",
        "conclusion": "¬medical_expert(Dorothy)"
      },
      {
        "facts": [
          "¬medical_expert(Dorothy)",
          "researcher(Dorothy)"
        ],
        "rules": "medical_expert(Dorothy) → (researcher(Dorothy) ⊕ physician(Dorothy))",
        "conclusion": null
      },
      {
        "facts": [
          "¬advocate(Dorothy)",
          "¬healer(Dorothy)"
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "conclusion": "Dorothy is a physician, or an advocate, or a healer.",
    "conclusion_fol": "physician(Dorothy) ∨ (advocate(Dorothy) ∨ healer(Dorothy))",
    "answer": "Uncertain",
    "context": [
      "Dorothy does not treat patients.",
      "Dorothy either treats patients or knows anatomy.",
      "Dorothy is caring.",
      "If Dorothy is caring, then she is a therapist and knows anatomy.",
      "Dorothy helps others.",
      "Dorothy either helps others or is an advocate, but not both.",
      "Dorothy is a health specialist.",
      "If Dorothy is a health specialist, then she is either a therapist or a medical expert, but not both.",
      "Dorothy is a researcher.",
      "If Dorothy is a medical expert, then she is either a researcher or a physician, but not both.",
      "Dorothy is not a healer."
    ],
    "context_fol": [
      "¬treats_patients(Dorothy)",
      "treats_patients(Dorothy) ∨ knows_anatomy(Dorothy)",
      "caring(Dorothy)",
      "caring(Dorothy) → (therapist(Dorothy) ∧ knows_anatomy(Dorothy))",
      "helps_others(Dorothy)",
      "helps_others(Dorothy) ⊕ advocate(Dorothy)",
      "health_specialist(Dorothy)",
      "health_specialist(Dorothy) → (therapist(Dorothy) ⊕ medical_expert(Dorothy))",
      "researcher(Dorothy)",
      "medical_expert(Dorothy) → (researcher(Dorothy) ⊕ physician(Dorothy))",
      "¬healer(Dorothy)"
    ],
    "background_story": "Dorothy was a pioneering physician in the late 19th century, known for her unconventional approach to medicine. She believed in the healing properties of water and became an advocate for hydropathic treatments. Dorothy established a reputable sanitarium where patients could undergo various water-based therapies, from hydrotherapy baths to aquatic exercises. Her methods, though unorthodox at the time, yielded remarkable results, and soon her sanitarium attracted patients from across the country. Dorothy's work in hydropathy not only helped countless people but also paved the way for modern hydrotherapy practices. Her dedication to the field and her patients earned her the respect and admiration of her peers, cementing her legacy as a trailblazer in the medical community.",
    "name": "Dorothy",
    "keyword": "hydropathic",
    "subject_category": "human"
  },
  {
    "facts": [
      "Eleanor speaks fluently.",
      "Eleanor appreciates diversity.",
      "Eleanor enjoys traditions."
    ],
    "facts_fol": [
      "speak_fluently(Eleanor)",
      "appreciate_diversity(Eleanor)",
      "enjoy_traditions(Eleanor)"
    ],
    "rules": [
      "For all humans, if they study linguistics, then they understand phonetics.",
      "If Eleanor teaches language, then she either studies linguistics or speaks fluently, but not both.",
      "If Eleanor knows grammar or loves cultures, then she can teach language.",
      "If someone appreciates diversity and enjoys traditions, then they love cultures."
    ],
    "rules_fol": [
      "∀x (study_linguistics(x) → understand_phonetics(x))",
      "teach_language(Eleanor) → (study_linguistics(Eleanor) ⊕ speak_fluently(Eleanor))",
      "(know_grammar(Eleanor) ∨ love_cultures(Eleanor)) → teach_language(Eleanor)",
      "∀x ((appreciate_diversity(x) ∧ enjoy_traditions(x)) → love_cultures(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Eleanor analyzes sounds, then she is either skilled at recognizing patterns or studies linguistics, but not both.",
      "If Eleanor reads widely or explains clearly, then she can teach language.",
      "Anyone who values heritage either loves cultures or respects customs."
    ],
    "distracting_rules_fol": [
      "analyze_sounds(Eleanor) → (recognize_patterns(Eleanor) ⊕ study_linguistics(Eleanor))",
      "(read_widely(Eleanor) ∨ explain_clearly(Eleanor)) → teach_language(Eleanor)",
      "∀x (value_heritage(x) → (love_cultures(x) ∨ respect_customs(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Eleanor appreciates diversity.",
          "Eleanor enjoys traditions."
        ],
        "rules": "If someone appreciates diversity and enjoys traditions, then they love cultures.",
        "conclusion": "Eleanor loves cultures."
      },
      {
        "facts": [
          "Eleanor loves cultures."
        ],
        "rules": "If Eleanor knows grammar or loves cultures, then she can teach language.",
        "conclusion": "Eleanor teaches language."
      },
      {
        "facts": [
          "Eleanor teaches language.",
          "Eleanor speaks fluently."
        ],
        "rules": "If Eleanor teaches language, then she either studies linguistics or speaks fluently, but not both.",
        "conclusion": "Eleanor does not study linguistics."
      },
      {
        "facts": [
          "Eleanor does not study linguistics."
        ],
        "rules": "For all humans, if they study linguistics, then they understand phonetics.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "appreciate_diversity(Eleanor)",
          "enjoy_traditions(Eleanor)"
        ],
        "rules": "∀x ((appreciate_diversity(x) ∧ enjoy_traditions(x)) → love_cultures(x))",
        "conclusion": "love_cultures(Eleanor)"
      },
      {
        "facts": [
          "love_cultures(Eleanor)"
        ],
        "rules": "(know_grammar(Eleanor) ∨ love_cultures(Eleanor)) → teach_language(Eleanor)",
        "conclusion": "teach_language(Eleanor)"
      },
      {
        "facts": [
          "teach_language(Eleanor)",
          "speak_fluently(Eleanor)"
        ],
        "rules": "teach_language(Eleanor) → (study_linguistics(Eleanor) ⊕ speak_fluently(Eleanor))",
        "conclusion": "¬study_linguistics(Eleanor)"
      },
      {
        "facts": [
          "¬study_linguistics(Eleanor)"
        ],
        "rules": "∀x (study_linguistics(x) → understand_phonetics(x))",
        "conclusion": null
      }
    ],
    "conclusion": "Eleanor understands phonetics.",
    "conclusion_fol": "understand_phonetics(Eleanor)",
    "answer": "Uncertain",
    "context": [
      "Eleanor appreciates diversity.",
      "Eleanor enjoys traditions.",
      "If someone appreciates diversity and enjoys traditions, then they love cultures.",
      "If Eleanor knows grammar or loves cultures, then she can teach language.",
      "Eleanor speaks fluently.",
      "If Eleanor teaches language, then she either studies linguistics or speaks fluently, but not both.",
      "For all humans, if they study linguistics, then they understand phonetics."
    ],
    "context_fol": [
      "appreciate_diversity(Eleanor)",
      "enjoy_traditions(Eleanor)",
      "∀x ((appreciate_diversity(x) ∧ enjoy_traditions(x)) → love_cultures(x))",
      "(know_grammar(Eleanor) ∨ love_cultures(Eleanor)) → teach_language(Eleanor)",
      "speak_fluently(Eleanor)",
      "teach_language(Eleanor) → (study_linguistics(Eleanor) ⊕ speak_fluently(Eleanor))",
      "∀x (study_linguistics(x) → understand_phonetics(x))"
    ],
    "background_story": "Eleanor was a brilliant linguistics professor with a fascination for phonetics. Her area of expertise was nasalization, the process by which vowels take on a nasal quality when pronounced near nasal consonants. Born in Paris, Eleanor grew up surrounded by the melodic sounds of the French language, where nasalization plays a significant role. She spent years studying the nuances of nasalization in various languages, from the soft 'an' in French to the distinctive 'ã' in Portuguese. Eleanor's groundbreaking research and engaging teaching style made her a beloved figure on campus. Her students adored her for making complex concepts, like nasalization, accessible and interesting. Eleanor's work not only contributed significantly to the field of linguistics but also inspired a new generation of language learners and scholars.",
    "name": "Eleanor",
    "keyword": "nasalization",
    "subject_category": "human"
  },
  {
    "facts": [
      "Alessandro solves conflicts.",
      "Alessandro does not build trust."
    ],
    "facts_fol": [
      "solves_conflicts(Alessandro)",
      "¬builds_trust(Alessandro)"
    ],
    "rules": [
      "Alessandro is either diplomatic or influential (or both).",
      "If Alessandro is respected, then he is diplomatic.",
      "If Alessandro either solves conflicts or builds trust (but not both), then he is respected."
    ],
    "rules_fol": [
      "diplomatic(Alessandro) ∨ influential(Alessandro)",
      "respected(Alessandro) → diplomatic(Alessandro)",
      "(solves_conflicts(Alessandro) ⊕ builds_trust(Alessandro)) → respected(Alessandro)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Anyone who speaks multiple languages or negotiates effectively is diplomatic.",
      "Anyone who is a skilled negotiator is either respected or an effective leader (or both)."
    ],
    "distracting_rules_fol": [
      "∀x ((speaks_multiple_languages(x) ∨ negotiates_effectively(x)) → diplomatic(x))",
      "∀x (skilled_negotiator(x) → (respected(x) ∨ effective_leader(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Alessandro solves conflicts.",
          "Alessandro does not build trust."
        ],
        "rules": "If Alessandro either solves conflicts or builds trust (but not both), then he is respected.",
        "conclusion": "Alessandro is respected."
      },
      {
        "facts": [
          "Alessandro is respected."
        ],
        "rules": "If Alessandro is respected, then he is diplomatic.",
        "conclusion": "Alessandro is diplomatic."
      },
      {
        "facts": [
          "Alessandro is diplomatic."
        ],
        "rules": "Alessandro is either diplomatic or influential (or both).",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "solves_conflicts(Alessandro)",
          "¬builds_trust(Alessandro)"
        ],
        "rules": "(solves_conflicts(Alessandro) ⊕ builds_trust(Alessandro)) → respected(Alessandro)",
        "conclusion": "respected(Alessandro)"
      },
      {
        "facts": [
          "respected(Alessandro)"
        ],
        "rules": "respected(Alessandro) → diplomatic(Alessandro)",
        "conclusion": "diplomatic(Alessandro)"
      },
      {
        "facts": [
          "diplomatic(Alessandro)"
        ],
        "rules": "diplomatic(Alessandro) ∨ influential(Alessandro)",
        "conclusion": null
      }
    ],
    "conclusion": "Alessandro is not influential.",
    "conclusion_fol": "¬influential(Alessandro)",
    "answer": "Uncertain",
    "context": [
      "Alessandro solves conflicts.",
      "Alessandro does not build trust.",
      "If Alessandro either solves conflicts or builds trust (but not both), then he is respected.",
      "If Alessandro is respected, then he is diplomatic.",
      "Alessandro is either diplomatic or influential (or both)."
    ],
    "context_fol": [
      "solves_conflicts(Alessandro)",
      "¬builds_trust(Alessandro)",
      "(solves_conflicts(Alessandro) ⊕ builds_trust(Alessandro)) → respected(Alessandro)",
      "respected(Alessandro) → diplomatic(Alessandro)",
      "diplomatic(Alessandro) ∨ influential(Alessandro)"
    ],
    "background_story": "Alessandro's career in international diplomacy was marked by his ascent to the position of Undersecretary for Economic Affairs. Born in Rome, he studied economics and politics, later joining the Italian Foreign Service. His intellect, linguistic skills, and negotiating prowess quickly made him a standout. As Undersecretary, Alessandro played a crucial role in brokering trade agreements and fostering economic cooperation between nations. His tireless work ethic and ability to find common ground among disparate parties earned him respect globally. Under his leadership, several key treaties were signed, enhancing economic stability and cooperation worldwide. Alessandro's dedication to public service and his achievements as Undersecretary left a lasting impact on global economic policy.",
    "name": "Alessandro",
    "keyword": "undersecretary",
    "subject_category": "human"
  },
  {
    "facts": [
      "London is a linguist.",
      "London does not study Aztec culture.",
      "London teaches language.",
      "London does not write novels."
    ],
    "facts_fol": [
      "is_linguist(London)",
      "¬studies_Aztec_culture(London)",
      "teaches_language(London)",
      "¬writes_novels(London)"
    ],
    "rules": [
      "For all humans, if they speak Nahuatl or study Aztec culture, then they appreciate indigenous history.",
      "If London is a linguist, then she either speaks Nahuatl or translates texts, but not both.",
      "If London teaches language, then she either writes novels or translates texts, but not both."
    ],
    "rules_fol": [
      "∀x ((speaks_Nahuatl(x) ∨ studies_Aztec_culture(x)) → appreciates_indigenous_history(x))",
      "is_linguist(London) → (speaks_Nahuatl(London) ⊕ translates_texts(London))",
      "teaches_language(London) → (writes_novels(London) ⊕ translates_texts(London))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If London loves poetry, then she speaks Nahuatl.",
      "If London reads classics, then she will translate texts."
    ],
    "distracting_rules_fol": [
      "loves_poetry(London) → speaks_Nahuatl(London)",
      "reads_classics(London) → translates_texts(London)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "London teaches language.",
          "London does not write novels."
        ],
        "rules": "If London teaches language, then she either writes novels or translates texts, but not both.",
        "conclusion": "London translates texts."
      },
      {
        "facts": [
          "London is a linguist.",
          "London translates texts."
        ],
        "rules": "If London is a linguist, then she either speaks Nahuatl or translates texts, but not both.",
        "conclusion": "London does not speak Nahuatl."
      },
      {
        "facts": [
          "London does not speak Nahuatl.",
          "London does not study Aztec culture."
        ],
        "rules": "For all humans, if they speak Nahuatl or study Aztec culture, then they appreciate indigenous history.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "teaches_language(London)",
          "¬writes_novels(London)"
        ],
        "rules": "teaches_language(London) → (writes_novels(London) ⊕ translates_texts(London))",
        "conclusion": "translates_texts(London)"
      },
      {
        "facts": [
          "is_linguist(London)",
          "translates_texts(London)"
        ],
        "rules": "is_linguist(London) → (speaks_Nahuatl(London) ⊕ translates_texts(London))",
        "conclusion": "¬speaks_Nahuatl(London)"
      },
      {
        "facts": [
          "¬speaks_Nahuatl(London)",
          "¬studies_Aztec_culture(London)"
        ],
        "rules": "∀x ((speaks_Nahuatl(x) ∨ studies_Aztec_culture(x)) → appreciates_indigenous_history(x))",
        "conclusion": null
      }
    ],
    "conclusion": "London appreciates indigenous history.",
    "conclusion_fol": "appreciates_indigenous_history(London)",
    "answer": "Uncertain",
    "context": [
      "London teaches language.",
      "London does not write novels.",
      "If London teaches language, then she either writes novels or translates texts, but not both.",
      "London is a linguist.",
      "If London is a linguist, then she either speaks Nahuatl or translates texts, but not both.",
      "London does not study Aztec culture.",
      "For all humans, if they speak Nahuatl or study Aztec culture, then they appreciate indigenous history."
    ],
    "context_fol": [
      "teaches_language(London)",
      "¬writes_novels(London)",
      "teaches_language(London) → (writes_novels(London) ⊕ translates_texts(London))",
      "is_linguist(London)",
      "is_linguist(London) → (speaks_Nahuatl(London) ⊕ translates_texts(London))",
      "¬studies_Aztec_culture(London)",
      "∀x ((speaks_Nahuatl(x) ∨ studies_Aztec_culture(x)) → appreciates_indigenous_history(x))"
    ],
    "background_story": "London, a young and adventurous linguist, had always been fascinated by the ancient languages of Mesoamerica. She spent years studying Nahuatl, the language of the Aztecs, and became fluent in its complex grammar and poetic expressions. Her passion for Nahuatl led her to Mexico, where she immersed herself in the culture and history of the indigenous people. London worked tirelessly to document and preserve the language, collaborating with local communities to create educational materials and cultural programs. As she delved deeper into the language, she discovered the rich symbolism and mythology of the Aztecs, which inspired her to write a novel based on their legends. London's love for Nahuatl not only helped her connect with her own heritage but also allowed her to share the beauty of this ancient language with the world.",
    "name": "London",
    "keyword": "nahuatl",
    "subject_category": "human"
  },
  {
    "facts": [
      "Axton seeks challenges.",
      "Axton does not take risks."
    ],
    "facts_fol": [
      "seeks_challenges(Axton)",
      "¬takes_risks(Axton)"
    ],
    "rules": [
      "Axton is either creative or environmentally conscious (or both).",
      "Axton is either adventurous or creative, but not necessarily both.",
      "Everyone who seeks challenges is either adventurous or takes risks (or both)."
    ],
    "rules_fol": [
      "creative(Axton) ∨ environmentally_conscious(Axton)",
      "is_adventurous(Axton) ⊕ creative(Axton)",
      "∀x (seeks_challenges(x) → (is_adventurous(x) ∨ takes_risks(x)))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Axton is skillful, then he is creative and makes art.",
      "If Axton is an explorer, then he is either adventurous or artistic, but not both."
    ],
    "distracting_rules_fol": [
      "skillful(Axton) → (creative(Axton) ∧ make_art(Axton))",
      "is_explorer(Axton) → (is_artistic(Axton) ⊕ is_adventurous(Axton))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Axton seeks challenges.",
          "Axton does not take risks."
        ],
        "rules": "Everyone who seeks challenges is either adventurous or takes risks (or both).",
        "conclusion": "Axton is adventurous."
      },
      {
        "facts": [
          "Axton is adventurous."
        ],
        "rules": "Axton is either adventurous or creative, but not necessarily both.",
        "conclusion": "Axton is not creative."
      },
      {
        "facts": [
          "Axton is not creative."
        ],
        "rules": "Axton is either creative or environmentally conscious (or both).",
        "conclusion": "Axton is environmentally conscious."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "seeks_challenges(Axton)",
          "¬takes_risks(Axton)"
        ],
        "rules": "∀x (seeks_challenges(x) → (is_adventurous(x) ∨ takes_risks(x)))",
        "conclusion": "is_adventurous(Axton)"
      },
      {
        "facts": [
          "is_adventurous(Axton)"
        ],
        "rules": "is_adventurous(Axton) ⊕ creative(Axton)",
        "conclusion": "¬creative(Axton)"
      },
      {
        "facts": [
          "¬creative(Axton)"
        ],
        "rules": "creative(Axton) ∨ environmentally_conscious(Axton)",
        "conclusion": "environmentally_conscious(Axton)"
      }
    ],
    "conclusion": "Axton is environmentally conscious.",
    "conclusion_fol": "environmentally_conscious(Axton)",
    "answer": "True",
    "context": [
      "Axton seeks challenges.",
      "Axton does not take risks.",
      "Everyone who seeks challenges is either adventurous or takes risks (or both).",
      "Axton is either adventurous or creative, but not necessarily both.",
      "Axton is either creative or environmentally conscious (or both)."
    ],
    "context_fol": [
      "seeks_challenges(Axton)",
      "¬takes_risks(Axton)",
      "∀x (seeks_challenges(x) → (is_adventurous(x) ∨ takes_risks(x)))",
      "is_adventurous(Axton) ⊕ creative(Axton)",
      "creative(Axton) ∨ environmentally_conscious(Axton)"
    ],
    "background_story": "Axton was a 19th-century whaler who spent his life at sea. He was known for his exceptional craftsmanship, particularly in carving intricate items from whalebone. Axton's fascination with whales went beyond the hunt; he respected and admired these gentle giants. After a near-fatal encounter with a whale, Axton had a change of heart and decided to dedicate his life to protecting these creatures. He used his skills to create beautiful whalebone sculptures, selling them to raise awareness and funds for marine conservation. Axton's art studio became a haven for like-minded individuals, and together, they worked towards a future where whales could thrive, free from the threats of hunting and pollution. His legacy lived on through his stunning whalebone carvings, now prized possessions in museums and private collections worldwide.",
    "name": "Axton",
    "keyword": "whalebone",
    "subject_category": "human"
  },
  {
    "facts": [
      "Crew does not create art.",
      "Crew works hard.",
      "Crew does not develop skills."
    ],
    "facts_fol": [
      "¬creates_art(Crew)",
      "work_hard(Crew)",
      "¬develop_skills(Crew)"
    ],
    "rules": [
      "If Crew is a talented artist, then he will gain recognition and inspire others.",
      "Crew either creates art or is a talented artist.",
      "If Crew works hard, then he builds a network and gains recognition.",
      "Crew develops skills or builds a network."
    ],
    "rules_fol": [
      "talented_artist(Crew) → (gain_recognition(Crew) ∧ inspire_others(Crew))",
      "creates_art(Crew) ∨ talented_artist(Crew)",
      "work_hard(Crew) → (build_network(Crew) ∧ gain_recognition(Crew))",
      "develop_skills(Crew) ∨ build_network(Crew)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Crew either thinks creatively or sees beauty (but not both), then he is a talented artist.",
      "Any person who shows a unique style or gets a curator's attention will gain recognition.",
      "Anyone who attends events or collaborates can build a network."
    ],
    "distracting_rules_fol": [
      "(thinks_creatively(Crew) ⊕ sees_beauty(Crew)) → talented_artist(Crew)",
      "∀x ((show_unique_style(x) ∨ get_curator_attention(x)) → gain_recognition(x))",
      "∀x ((attend_events(x) ∨ collaborate(x)) → build_network(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Crew does not develop skills."
        ],
        "rules": "Crew develops skills or builds a network.",
        "conclusion": "Crew builds a network."
      },
      {
        "facts": [
          "Crew works hard.",
          "Crew builds a network."
        ],
        "rules": "If Crew works hard, then he builds a network and gains recognition.",
        "conclusion": "Crew gains recognition."
      },
      {
        "facts": [
          "Crew does not create art."
        ],
        "rules": "Crew either creates art or is a talented artist.",
        "conclusion": "Crew is a talented artist."
      },
      {
        "facts": [
          "Crew is a talented artist.",
          "Crew gains recognition."
        ],
        "rules": "If Crew is a talented artist, then he will gain recognition and inspire others.",
        "conclusion": "Crew does not inspire others."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬develop_skills(Crew)"
        ],
        "rules": "develop_skills(Crew) ∨ build_network(Crew)",
        "conclusion": "build_network(Crew)"
      },
      {
        "facts": [
          "work_hard(Crew)",
          "build_network(Crew)"
        ],
        "rules": "work_hard(Crew) → (build_network(Crew) ∧ gain_recognition(Crew))",
        "conclusion": "gain_recognition(Crew)"
      },
      {
        "facts": [
          "¬creates_art(Crew)"
        ],
        "rules": "creates_art(Crew) ∨ talented_artist(Crew)",
        "conclusion": "talented_artist(Crew)"
      },
      {
        "facts": [
          "talented_artist(Crew)",
          "gain_recognition(Crew)"
        ],
        "rules": "talented_artist(Crew) → (gain_recognition(Crew) ∧ inspire_others(Crew))",
        "conclusion": "¬inspire_others(Crew)"
      }
    ],
    "conclusion": "Crew does not inspire others.",
    "conclusion_fol": "¬inspire_others(Crew)",
    "answer": "False",
    "context": [
      "Crew does not develop skills.",
      "Crew develops skills or builds a network.",
      "Crew works hard.",
      "If Crew works hard, then he builds a network and gains recognition.",
      "Crew does not create art.",
      "Crew either creates art or is a talented artist.",
      "If Crew is a talented artist, then he will gain recognition and inspire others."
    ],
    "context_fol": [
      "¬develop_skills(Crew)",
      "develop_skills(Crew) ∨ build_network(Crew)",
      "work_hard(Crew)",
      "work_hard(Crew) → (build_network(Crew) ∧ gain_recognition(Crew))",
      "¬creates_art(Crew)",
      "creates_art(Crew) ∨ talented_artist(Crew)",
      "talented_artist(Crew) → (gain_recognition(Crew) ∧ inspire_others(Crew))"
    ],
    "background_story": "Crew was an artist who had been working behind the scenes for years, honing his craft and waiting for the right moment to showcase his talent. His emergence onto the art scene was nothing short of meteoric. After a chance encounter with a renowned curator, Crew's unique style and perspective caught the attention of the art world. His first solo exhibition was a massive success, with critics and collectors alike praising his bold and innovative works. As his star continued to rise, Crew remained grounded, using his platform to support emerging artists and give back to his community. His emergence marked not only a new chapter in his own career but also a shift in the art world, as his influence inspired a new generation of creatives.",
    "name": "Crew",
    "keyword": "emergence",
    "subject_category": "human"
  },
  {
    "facts": [
      "Melissa does not explore deeply.",
      "Melissa is curious.",
      "Melissa does not analyze data.",
      "Melissa interprets results.",
      "Melissa does not assess theories."
    ],
    "facts_fol": [
      "¬explores_deeply(Melissa)",
      "is_curious(Melissa)",
      "¬analyzes_data(Melissa)",
      "interprets_results(Melissa)",
      "¬assesses_theories(Melissa)"
    ],
    "rules": [
      "If Melissa conducts thorough research, then she makes groundbreaking discoveries.",
      "If someone reads widely and thinks critically, then they can conduct thorough research.",
      "If Melissa is curious, then she either explores deeply or reads widely, but not both.",
      "Anyone who analyzes data or evaluates evidence can think critically.",
      "If someone either interprets results or assesses theories (but not both), then they evaluate evidence."
    ],
    "rules_fol": [
      "conduct_thorough_research(Melissa) → make_groundbreaking_discoveries(Melissa)",
      "∀x ((reads_widely(x) ∧ thinks_critically(x)) → conduct_thorough_research(x))",
      "is_curious(Melissa) → (explores_deeply(Melissa) ⊕ reads_widely(Melissa))",
      "∀x ((analyzes_data(x) ∨ evaluates_evidence(x)) → thinks_critically(x))",
      "∀x ((interprets_results(x) ⊕ assesses_theories(x)) → evaluates_evidence(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Melissa sets goals or works diligently, then she can conduct thorough research.",
      "Everyone who stays informed either reads widely or attends seminars.",
      "Any person who asks questions or seeks answers can think critically.",
      "If Melissa either checks her hypothesis or tests theories (but not both), then she evaluates evidence."
    ],
    "distracting_rules_fol": [
      "(sets_goals(Melissa) ∨ works_diligently(Melissa)) → conduct_thorough_research(Melissa)",
      "∀x (stays_informed(x) → (reads_widely(x) ∨ attends_seminars(x)))",
      "∀x ((asks_questions(x) ∨ seeks_answers(x)) → thinks_critically(x))",
      "(checks_hypothesis(Melissa) ⊕ tests_theories(Melissa)) → evaluates_evidence(Melissa)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Melissa interprets results.",
          "Melissa does not assess theories."
        ],
        "rules": "If someone either interprets results or assesses theories (but not both), then they evaluate evidence.",
        "conclusion": "Melissa evaluates evidence."
      },
      {
        "facts": [
          "Melissa does not analyze data.",
          "Melissa evaluates evidence."
        ],
        "rules": "Anyone who analyzes data or evaluates evidence can think critically.",
        "conclusion": "Melissa thinks critically."
      },
      {
        "facts": [
          "Melissa is curious.",
          "Melissa does not explore deeply."
        ],
        "rules": "If Melissa is curious, then she either explores deeply or reads widely, but not both.",
        "conclusion": "Melissa reads widely."
      },
      {
        "facts": [
          "Melissa reads widely.",
          "Melissa thinks critically."
        ],
        "rules": "If someone reads widely and thinks critically, then they can conduct thorough research.",
        "conclusion": "Melissa conducts thorough research."
      },
      {
        "facts": [
          "Melissa conducts thorough research."
        ],
        "rules": "If Melissa conducts thorough research, then she makes groundbreaking discoveries.",
        "conclusion": "Melissa makes groundbreaking discoveries."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "interprets_results(Melissa)",
          "¬assesses_theories(Melissa)"
        ],
        "rules": "∀x ((interprets_results(x) ⊕ assesses_theories(x)) → evaluates_evidence(x))",
        "conclusion": "evaluates_evidence(Melissa)"
      },
      {
        "facts": [
          "¬analyzes_data(Melissa)",
          "evaluates_evidence(Melissa)"
        ],
        "rules": "∀x ((analyzes_data(x) ∨ evaluates_evidence(x)) → thinks_critically(x))",
        "conclusion": "thinks_critically(Melissa)"
      },
      {
        "facts": [
          "is_curious(Melissa)",
          "¬explores_deeply(Melissa)"
        ],
        "rules": "is_curious(Melissa) → (explores_deeply(Melissa) ⊕ reads_widely(Melissa))",
        "conclusion": "reads_widely(Melissa)"
      },
      {
        "facts": [
          "reads_widely(Melissa)",
          "thinks_critically(Melissa)"
        ],
        "rules": "∀x ((reads_widely(x) ∧ thinks_critically(x)) → conduct_thorough_research(x))",
        "conclusion": "conduct_thorough_research(Melissa)"
      },
      {
        "facts": [
          "conduct_thorough_research(Melissa)"
        ],
        "rules": "conduct_thorough_research(Melissa) → make_groundbreaking_discoveries(Melissa)",
        "conclusion": "make_groundbreaking_discoveries(Melissa)"
      }
    ],
    "conclusion": "Melissa makes groundbreaking discoveries.",
    "conclusion_fol": "make_groundbreaking_discoveries(Melissa)",
    "answer": "True",
    "context": [
      "Melissa interprets results.",
      "Melissa does not assess theories.",
      "If someone either interprets results or assesses theories (but not both), then they evaluate evidence.",
      "Melissa does not analyze data.",
      "Anyone who analyzes data or evaluates evidence can think critically.",
      "Melissa is curious.",
      "Melissa does not explore deeply.",
      "If Melissa is curious, then she either explores deeply or reads widely, but not both.",
      "If someone reads widely and thinks critically, then they can conduct thorough research.",
      "If Melissa conducts thorough research, then she makes groundbreaking discoveries."
    ],
    "context_fol": [
      "interprets_results(Melissa)",
      "¬assesses_theories(Melissa)",
      "∀x ((interprets_results(x) ⊕ assesses_theories(x)) → evaluates_evidence(x))",
      "¬analyzes_data(Melissa)",
      "∀x ((analyzes_data(x) ∨ evaluates_evidence(x)) → thinks_critically(x))",
      "is_curious(Melissa)",
      "¬explores_deeply(Melissa)",
      "is_curious(Melissa) → (explores_deeply(Melissa) ⊕ reads_widely(Melissa))",
      "∀x ((reads_widely(x) ∧ thinks_critically(x)) → conduct_thorough_research(x))",
      "conduct_thorough_research(Melissa) → make_groundbreaking_discoveries(Melissa)"
    ],
    "background_story": "Melissa was a brilliant and ambitious scientist who had always been fascinated by the work of Donald Glaser, the Nobel Prize-winning physicist. Inspired by his invention of the bubble chamber, she dedicated her career to advancing the field of particle physics. Melissa's research focused on developing new detection technologies, and her innovative approaches quickly gained international recognition. She became known for her meticulous attention to detail and her ability to collaborate with others, much like Glaser's own collaborative spirit. As she delved deeper into her work, Melissa made several groundbreaking discoveries, earning her numerous awards and a reputation as a leading expert in her field. Her work continued the legacy of Glaser's pioneering research, pushing the boundaries of human understanding in the realm of subatomic particles.",
    "name": "Melissa",
    "keyword": "glaser",
    "subject_category": "human"
  },
  {
    "facts": [
      "Krew is not a hidden talent.",
      "Krew is a well-known model.",
      "Krew makes his debut."
    ],
    "facts_fol": [
      "¬hidden_talent(Krew)",
      "well_known(Krew)",
      "debut(Krew)"
    ],
    "rules": [
      "If a model is either a new face or a hidden talent (but not both), then they are unknown.",
      "All well-known models are famous.",
      "All models who make their debut are new faces."
    ],
    "rules_fol": [
      "∀x ((new_face(x) ⊕ hidden_talent(x)) → unknown(x))",
      "∀x (well_known(x) → famous(x))",
      "∀x (debut(x) → new_face(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Krew needs experience or lacks exposure, then he is unknown.",
      "If Krew is talented, then he is both famous and confident.",
      "Any model with a fresh look or youthful appearance is a new face."
    ],
    "distracting_rules_fol": [
      "(needs_experience(Krew) ∨ lacks_exposure(Krew)) → unknown(Krew)",
      "talented(Krew) → (famous(Krew) ∧ confident(Krew))",
      "∀x ((fresh_look(x) ∨ youthful_appear(x)) → new_face(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Krew makes his debut."
        ],
        "rules": "All models who make their debut are new faces.",
        "conclusion": "Krew is a new face."
      },
      {
        "facts": [
          "Krew is a well-known model."
        ],
        "rules": "All well-known models are famous.",
        "conclusion": "Krew is a famous model."
      },
      {
        "facts": [
          "Krew is a new face.",
          "Krew is not a hidden talent."
        ],
        "rules": "If a model is either a new face or a hidden talent (but not both), then they are unknown.",
        "conclusion": "Krew is an unknown model."
      },
      {
        "facts": [
          "Krew is a famous model.",
          "Krew is an unknown model."
        ],
        "rules": null,
        "conclusion": "Krew is either a famous model or an unknown model, but not both."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "debut(Krew)"
        ],
        "rules": "∀x (debut(x) → new_face(x))",
        "conclusion": "new_face(Krew)"
      },
      {
        "facts": [
          "well_known(Krew)"
        ],
        "rules": "∀x (well_known(x) → famous(x))",
        "conclusion": "famous(Krew)"
      },
      {
        "facts": [
          "new_face(Krew)",
          "¬hidden_talent(Krew)"
        ],
        "rules": "∀x ((new_face(x) ⊕ hidden_talent(x)) → unknown(x))",
        "conclusion": "unknown(Krew)"
      },
      {
        "facts": [
          "famous(Krew)",
          "unknown(Krew)"
        ],
        "rules": null,
        "conclusion": "famous(Krew) ⊕ unknown(Krew)"
      }
    ],
    "conclusion": "Krew is either a famous model or an unknown model, but not both.",
    "conclusion_fol": "famous(Krew) ⊕ unknown(Krew)",
    "answer": "False",
    "context": [
      "Krew makes his debut.",
      "All models who make their debut are new faces.",
      "Krew is a well-known model.",
      "All well-known models are famous.",
      "Krew is not a hidden talent.",
      "If a model is either a new face or a hidden talent (but not both), then they are unknown."
    ],
    "context_fol": [
      "debut(Krew)",
      "∀x (debut(x) → new_face(x))",
      "well_known(Krew)",
      "∀x (well_known(x) → famous(x))",
      "¬hidden_talent(Krew)",
      "∀x ((new_face(x) ⊕ hidden_talent(x)) → unknown(x))"
    ],
    "background_story": "Krew was a rising star in the fashion world, known for his stunning looks and captivating presence on the runway. With chiseled features and piercing blue eyes, he turned heads wherever he went. Born in a small town, Krew was discovered by a talent scout at a local modeling competition. Soon, he was strutting down catwalks for top designers and gracing the covers of prestigious fashion magazines. His stunning physique and charming smile made him a favorite among designers and photographers alike. As his career soared, Krew remained humble and kind, using his platform to support emerging artists and charitable causes. His stunning beauty was only rivaled by his inner kindness, making him a beloved figure in the fashion industry.",
    "name": "Krew",
    "keyword": "stunning",
    "subject_category": "model"
  },
  {
    "facts": [
      "Asaiah attains mastery.",
      "Asaiah dedicates his lifecycle to a craft.",
      "Asaiah collects rare herbs."
    ],
    "facts_fol": [
      "attain_mastery(Asaiah)",
      "dedicate_lifecycle(Asaiah)",
      "collect_rare_herbs(Asaiah)"
    ],
    "rules": [
      "If Asaiah dedicates his lifecycle to a craft, then he will either become skilled or attain mastery, but not both.",
      "Everyone who pursues transmutation studies alchemy.",
      "Asaiah either collects rare herbs or pursues transmutation, but not both."
    ],
    "rules_fol": [
      "dedicate_lifecycle(Asaiah) → (become_skilled(Asaiah) ⊕ attain_mastery(Asaiah))",
      "∀x (pursue_transmutation(x) → study_alchemy(x))",
      "collect_rare_herbs(Asaiah) ⊕ pursue_transmutation(Asaiah)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Asaiah either reads ancient texts or practices daily (but not both), then he will become skilled.",
      "If Asaiah seeks knowledge, then he is either a master of magic or a student of alchemy, but not both.",
      "If Asaiah reads ancient texts and gathers minerals, then he pursues transmutation."
    ],
    "distracting_rules_fol": [
      "(read_ancient(Asaiah) ⊕ practice_daily(Asaiah)) → become_skilled(Asaiah)",
      "seek_knowledge(Asaiah) → (master_magic(Asaiah) ⊕ study_alchemy(Asaiah))",
      "(reads_ancient_texts(Asaiah) ∧ gathers_minerals(Asaiah)) → pursue_transmutation(Asaiah)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Asaiah collects rare herbs."
        ],
        "rules": "Asaiah either collects rare herbs or pursues transmutation, but not both.",
        "conclusion": "Asaiah does not pursue transmutation."
      },
      {
        "facts": [
          "Asaiah does not pursue transmutation."
        ],
        "rules": "Everyone who pursues transmutation studies alchemy.",
        "conclusion": null
      },
      {
        "facts": [
          "Asaiah dedicates his lifecycle to a craft.",
          "Asaiah attains mastery."
        ],
        "rules": "If Asaiah dedicates his lifecycle to a craft, then he will either become skilled or attain mastery, but not both.",
        "conclusion": "Asaiah does not become skilled."
      },
      {
        "facts": [
          "Asaiah does not become skilled."
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "collect_rare_herbs(Asaiah)"
        ],
        "rules": "collect_rare_herbs(Asaiah) ⊕ pursue_transmutation(Asaiah)",
        "conclusion": "¬pursue_transmutation(Asaiah)"
      },
      {
        "facts": [
          "¬pursue_transmutation(Asaiah)"
        ],
        "rules": "∀x (pursue_transmutation(x) → study_alchemy(x))",
        "conclusion": null
      },
      {
        "facts": [
          "dedicate_lifecycle(Asaiah)",
          "attain_mastery(Asaiah)"
        ],
        "rules": "dedicate_lifecycle(Asaiah) → (become_skilled(Asaiah) ⊕ attain_mastery(Asaiah))",
        "conclusion": "¬become_skilled(Asaiah)"
      },
      {
        "facts": [
          "¬become_skilled(Asaiah)"
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "conclusion": "If Asaiah studies alchemy and experiments regularly, then he will become skilled.",
    "conclusion_fol": "(study_alchemy(Asaiah) ∧ experiment_regularly(Asaiah)) → become_skilled(Asaiah)",
    "answer": "Uncertain",
    "context": [
      "Asaiah collects rare herbs.",
      "Asaiah either collects rare herbs or pursues transmutation, but not both.",
      "Everyone who pursues transmutation studies alchemy.",
      "Asaiah dedicates his lifecycle to a craft.",
      "Asaiah attains mastery.",
      "If Asaiah dedicates his lifecycle to a craft, then he will either become skilled or attain mastery, but not both."
    ],
    "context_fol": [
      "collect_rare_herbs(Asaiah)",
      "collect_rare_herbs(Asaiah) ⊕ pursue_transmutation(Asaiah)",
      "∀x (pursue_transmutation(x) → study_alchemy(x))",
      "dedicate_lifecycle(Asaiah)",
      "attain_mastery(Asaiah)",
      "dedicate_lifecycle(Asaiah) → (become_skilled(Asaiah) ⊕ attain_mastery(Asaiah))"
    ],
    "background_story": "Asaiah was a mysterious and reclusive alchemist who lived on the outskirts of a medieval village. His laboratory, hidden behind a waterfall, was a place of wonder and experimentation. Asaiah spent years studying the ancient arts of transmutation, seeking to unlock the secrets of turning base metals into gold and discovering the elixir of life. His alchemic pursuits often led him to venture into the nearby forest, where he would gather rare herbs and minerals under the light of the full moon. The villagers whispered about Asaiah's extraordinary abilities, claiming he could transform not only metals, but also the very essence of nature. Though his true intentions remained unknown, Asaiah's dedication to his craft was undeniable, and his laboratory continued to emit a soft, ethereal glow, as if the art of alchemy itself had come to life within its walls.",
    "name": "Asaiah",
    "keyword": "alchemic",
    "subject_category": "person"
  },
  {
    "facts": [
      "Iris does not classify species.",
      "Iris does not explore habitats.",
      "Iris analyzes data.",
      "Iris is an expert.",
      "Iris publishes papers."
    ],
    "facts_fol": [
      "¬classify_species(Iris)",
      "¬explore_habitats(Iris)",
      "analyze_data(Iris)",
      "is_expert(Iris)",
      "publish_papers(Iris)"
    ],
    "rules": [
      "If Iris studies Acanthaceae or travels for research (or both), then she makes notable discoveries.",
      "Iris either collects specimens or studies Acanthaceae, but not necessarily both.",
      "All botanists who research plants either classify species or collect specimens.",
      "Any botanist who explores habitats or analyzes data can research plants.",
      "If Iris is an expert botanist, then she either publishes papers or travels for research, but not both."
    ],
    "rules_fol": [
      "(study_Acanthaceae(Iris) ∨ travel_for_research(Iris)) → make_notable_discoveries(Iris)",
      "collect_specimens(Iris) ⊕ study_Acanthaceae(Iris)",
      "∀x (research_plants(x) → (classify_species(x) ∨ collect_specimens(x)))",
      "∀x ((explore_habitats(x) ∨ analyze_data(x)) → research_plants(x))",
      "is_expert(Iris) → (publish_papers(Iris) ⊕ travel_for_research(Iris))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Iris either examines flora or studies Acanthaceae.",
      "If Iris either examines flora or identifies plants (but not both), then she collects specimens.",
      "If Iris loves nature, then she finds new species and researches plants.",
      "If Iris has curiosity or seeks knowledge, then she will travel for research."
    ],
    "distracting_rules_fol": [
      "examines_flora(Iris) ∨ study_Acanthaceae(Iris)",
      "(examine_flora(Iris) ⊕ identify_plants(Iris)) → collect_specimens(Iris)",
      "love_nature(Iris) → (find_new_species(Iris) ∧ research_plants(Iris))",
      "(has_curiosity(Iris) ∨ seeks_knowledge(Iris)) → travel_for_research(Iris)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Iris is an expert.",
          "Iris publishes papers."
        ],
        "rules": "If Iris is an expert botanist, then she either publishes papers or travels for research, but not both.",
        "conclusion": "Iris does not travel for research."
      },
      {
        "facts": [
          "Iris does not explore habitats.",
          "Iris analyzes data."
        ],
        "rules": "Any botanist who explores habitats or analyzes data can research plants.",
        "conclusion": "Iris researches plants."
      },
      {
        "facts": [
          "Iris researches plants.",
          "Iris does not classify species."
        ],
        "rules": "All botanists who research plants either classify species or collect specimens.",
        "conclusion": "Iris collects specimens."
      },
      {
        "facts": [
          "Iris collects specimens."
        ],
        "rules": "Iris either collects specimens or studies Acanthaceae, but not necessarily both.",
        "conclusion": "Iris does not study Acanthaceae."
      },
      {
        "facts": [
          "Iris does not study Acanthaceae.",
          "Iris does not travel for research."
        ],
        "rules": "If Iris studies Acanthaceae or travels for research (or both), then she makes notable discoveries.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "is_expert(Iris)",
          "publish_papers(Iris)"
        ],
        "rules": "is_expert(Iris) → (publish_papers(Iris) ⊕ travel_for_research(Iris))",
        "conclusion": "¬travel_for_research(Iris)"
      },
      {
        "facts": [
          "¬explore_habitats(Iris)",
          "analyze_data(Iris)"
        ],
        "rules": "∀x ((explore_habitats(x) ∨ analyze_data(x)) → research_plants(x))",
        "conclusion": "research_plants(Iris)"
      },
      {
        "facts": [
          "research_plants(Iris)",
          "¬classify_species(Iris)"
        ],
        "rules": "∀x (research_plants(x) → (classify_species(x) ∨ collect_specimens(x)))",
        "conclusion": "collect_specimens(Iris)"
      },
      {
        "facts": [
          "collect_specimens(Iris)"
        ],
        "rules": "collect_specimens(Iris) ⊕ study_Acanthaceae(Iris)",
        "conclusion": "¬study_Acanthaceae(Iris)"
      },
      {
        "facts": [
          "¬study_Acanthaceae(Iris)",
          "¬travel_for_research(Iris)"
        ],
        "rules": "(study_Acanthaceae(Iris) ∨ travel_for_research(Iris)) → make_notable_discoveries(Iris)",
        "conclusion": null
      }
    ],
    "conclusion": "Iris does not make notable discoveries.",
    "conclusion_fol": "¬make_notable_discoveries(Iris)",
    "answer": "Uncertain",
    "context": [
      "Iris is an expert.",
      "Iris publishes papers.",
      "If Iris is an expert botanist, then she either publishes papers or travels for research, but not both.",
      "Iris does not explore habitats.",
      "Iris analyzes data.",
      "Any botanist who explores habitats or analyzes data can research plants.",
      "Iris does not classify species.",
      "All botanists who research plants either classify species or collect specimens.",
      "Iris either collects specimens or studies Acanthaceae, but not necessarily both.",
      "If Iris studies Acanthaceae or travels for research (or both), then she makes notable discoveries."
    ],
    "context_fol": [
      "is_expert(Iris)",
      "publish_papers(Iris)",
      "is_expert(Iris) → (publish_papers(Iris) ⊕ travel_for_research(Iris))",
      "¬explore_habitats(Iris)",
      "analyze_data(Iris)",
      "∀x ((explore_habitats(x) ∨ analyze_data(x)) → research_plants(x))",
      "¬classify_species(Iris)",
      "∀x (research_plants(x) → (classify_species(x) ∨ collect_specimens(x)))",
      "collect_specimens(Iris) ⊕ study_Acanthaceae(Iris)",
      "(study_Acanthaceae(Iris) ∨ travel_for_research(Iris)) → make_notable_discoveries(Iris)"
    ],
    "background_story": "Iris, a renowned botanist, had always been fascinated by the diverse family of flowering plants known as Acanthaceae. Her research focused on the unique characteristics and adaptations of these plants, which are commonly found in tropical and subtropical regions. Iris spent years studying the Acanthaceae family, traveling to remote areas to collect and classify specimens. Her groundbreaking work led to the discovery of several new species, shedding light on the evolutionary history of these plants. Iris's dedication to her craft earned her international recognition, and she became a leading expert in her field. Her love for Acanthaceae inspired a new generation of botanists, and her contributions continue to shape our understanding of the natural world.",
    "name": "Iris",
    "keyword": "acanthaceae",
    "subject_category": "botanist"
  },
  {
    "facts": [
      "Jianna does not think quickly.",
      "Jianna does not take risks."
    ],
    "facts_fol": [
      "¬think_quickly(Jianna)",
      "¬takes_risks(Jianna)"
    ],
    "rules": [
      "For all humans, if they work well under pressure or think quickly, then they deliver quality work.",
      "Jianna either stays focused or works well under pressure, but not both.",
      "Jianna either meets deadlines or stays focused.",
      "Jianna either remains composed or meets deadlines, but not necessarily both.",
      "Jianna either takes risks or remains composed, but not necessarily both."
    ],
    "rules_fol": [
      "∀x ((work_well_under_pressure(x) ∨ think_quickly(x)) → deliver_quality_work(x))",
      "stay_focused(Jianna) ⊕ work_well_under_pressure(Jianna)",
      "meets_deadlines(Jianna) ∨ stay_focused(Jianna)",
      "is_composed(Jianna) ⊕ meets_deadlines(Jianna)",
      "takes_risks(Jianna) ⊕ is_composed(Jianna)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Jianna acts decisively or works well under pressure.",
      "Anyone who prioritizes tasks will stay focused.",
      "If someone manages their time and prioritizes tasks, then they can meet deadlines.",
      "Any person who has experience or is confident remains composed."
    ],
    "distracting_rules_fol": [
      "acts_decisively(Jianna) ∨ work_well_under_pressure(Jianna)",
      "∀x (prioritizes_tasks(x) → stay_focused(x))",
      "∀x ((manages_time(x) ∧ prioritizes_tasks(x)) → meets_deadlines(x))",
      "∀x ((has_experience(x) ∨ is_confident(x)) → is_composed(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Jianna does not take risks."
        ],
        "rules": "Jianna either takes risks or remains composed, but not necessarily both.",
        "conclusion": "Jianna remains composed."
      },
      {
        "facts": [
          "Jianna remains composed."
        ],
        "rules": "Jianna either remains composed or meets deadlines, but not necessarily both.",
        "conclusion": "Jianna does not meet deadlines."
      },
      {
        "facts": [
          "Jianna does not meet deadlines."
        ],
        "rules": "Jianna either meets deadlines or stays focused.",
        "conclusion": "Jianna stays focused."
      },
      {
        "facts": [
          "Jianna stays focused."
        ],
        "rules": "Jianna either stays focused or works well under pressure, but not both.",
        "conclusion": "Jianna does not work well under pressure."
      },
      {
        "facts": [
          "Jianna does not work well under pressure.",
          "Jianna does not think quickly."
        ],
        "rules": "For all humans, if they work well under pressure or think quickly, then they deliver quality work.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬takes_risks(Jianna)"
        ],
        "rules": "takes_risks(Jianna) ⊕ is_composed(Jianna)",
        "conclusion": "is_composed(Jianna)"
      },
      {
        "facts": [
          "is_composed(Jianna)"
        ],
        "rules": "is_composed(Jianna) ⊕ meets_deadlines(Jianna)",
        "conclusion": "¬meets_deadlines(Jianna)"
      },
      {
        "facts": [
          "¬meets_deadlines(Jianna)"
        ],
        "rules": "meets_deadlines(Jianna) ∨ stay_focused(Jianna)",
        "conclusion": "stay_focused(Jianna)"
      },
      {
        "facts": [
          "stay_focused(Jianna)"
        ],
        "rules": "stay_focused(Jianna) ⊕ work_well_under_pressure(Jianna)",
        "conclusion": "¬work_well_under_pressure(Jianna)"
      },
      {
        "facts": [
          "¬work_well_under_pressure(Jianna)",
          "¬think_quickly(Jianna)"
        ],
        "rules": "∀x ((work_well_under_pressure(x) ∨ think_quickly(x)) → deliver_quality_work(x))",
        "conclusion": null
      }
    ],
    "conclusion": "Jianna does not deliver quality work.",
    "conclusion_fol": "¬deliver_quality_work(Jianna)",
    "answer": "Uncertain",
    "context": [
      "Jianna does not take risks.",
      "Jianna either takes risks or remains composed, but not necessarily both.",
      "Jianna either remains composed or meets deadlines, but not necessarily both.",
      "Jianna either meets deadlines or stays focused.",
      "Jianna either stays focused or works well under pressure, but not both.",
      "Jianna does not think quickly.",
      "For all humans, if they work well under pressure or think quickly, then they deliver quality work."
    ],
    "context_fol": [
      "¬takes_risks(Jianna)",
      "takes_risks(Jianna) ⊕ is_composed(Jianna)",
      "is_composed(Jianna) ⊕ meets_deadlines(Jianna)",
      "meets_deadlines(Jianna) ∨ stay_focused(Jianna)",
      "stay_focused(Jianna) ⊕ work_well_under_pressure(Jianna)",
      "¬think_quickly(Jianna)",
      "∀x ((work_well_under_pressure(x) ∨ think_quickly(x)) → deliver_quality_work(x))"
    ],
    "background_story": "Jianna was a talented and ambitious journalist known for her ability to work well under pressure. She thrived in the rush of the newsroom, where deadlines were tight and stories were constantly breaking. With a keen sense of instinct and a quick mind, Jianna could rush to assemble the pieces of a complex story, often scooping her competitors with her lightning-fast reporting. Her rush to uncover the truth led her to expose several high-profile scandals, earning her numerous awards and recognition in the industry. Despite the chaos that often surrounded her, Jianna remained focused and composed, always pushing to deliver the best story possible, even when the rush of the deadline seemed insurmountable.",
    "name": "Jianna",
    "keyword": "rush",
    "subject_category": "human"
  },
  {
    "facts": [
      "Bode is creative.",
      "Bode crafts with love.",
      "Bode cares deeply.",
      "Bode is kind-hearted.",
      "Bode spreads happiness."
    ],
    "facts_fol": [
      "creative(Bode)",
      "craft_with_love(Bode)",
      "care_deeply(Bode)",
      "kind_hearted(Bode)",
      "spread_happiness(Bode)"
    ],
    "rules": [
      "If Bode is creative, then he can either bring joy to others with his teddy bears or gain recognition for his artistic skills, but not both.",
      "Anyone who crafts with love either brings joy to others or makes people smile.",
      "If Bode cares deeply, then he either helps others or makes people smile, but not both.",
      "All kind-hearted people help others and spread happiness."
    ],
    "rules_fol": [
      "creative(Bode) → (bring_joy(Bode) ⊕ gain_recognition(Bode))",
      "∀x (craft_with_love(x) → (bring_joy(x) ∨ make_people_smile(x)))",
      "care_deeply(Bode) → (helpOthers(Bode) ⊕ make_people_smile(Bode))",
      "∀x (kind_hearted(x) → (helpOthers(x) ∧ spread_happiness(x)))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Anyone who sews teddy bears brings joy to others.",
      "Bode either spreads cheer or makes people smile.",
      "If Bode is empathetic, then he either donates his time or helps others, but not both."
    ],
    "distracting_rules_fol": [
      "∀x (sew_teddy(x) → bring_joy(x))",
      "spread_cheer(Bode) ∨ make_people_smile(Bode)",
      "is_empathetic(Bode) → (donate_time(Bode) ⊕ helpOthers(Bode))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Bode is kind-hearted.",
          "Bode spreads happiness."
        ],
        "rules": "All kind-hearted people help others and spread happiness.",
        "conclusion": "Bode helps others."
      },
      {
        "facts": [
          "Bode cares deeply.",
          "Bode helps others."
        ],
        "rules": "If Bode cares deeply, then he either helps others or makes people smile, but not both.",
        "conclusion": "Bode does not make people smile."
      },
      {
        "facts": [
          "Bode crafts with love.",
          "Bode does not make people smile."
        ],
        "rules": "Anyone who crafts with love either brings joy to others or makes people smile.",
        "conclusion": "Bode brings joy to others with his teddy bears."
      },
      {
        "facts": [
          "Bode is creative.",
          "Bode brings joy to others with his teddy bears."
        ],
        "rules": "If Bode is creative, then he can either bring joy to others with his teddy bears or gain recognition for his artistic skills, but not both.",
        "conclusion": "Bode does not gain recognition for his artistic skills."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "kind_hearted(Bode)",
          "spread_happiness(Bode)"
        ],
        "rules": "∀x (kind_hearted(x) → (helpOthers(x) ∧ spread_happiness(x)))",
        "conclusion": "helpOthers(Bode)"
      },
      {
        "facts": [
          "care_deeply(Bode)",
          "helpOthers(Bode)"
        ],
        "rules": "care_deeply(Bode) → (helpOthers(Bode) ⊕ make_people_smile(Bode))",
        "conclusion": "¬make_people_smile(Bode)"
      },
      {
        "facts": [
          "craft_with_love(Bode)",
          "¬make_people_smile(Bode)"
        ],
        "rules": "∀x (craft_with_love(x) → (bring_joy(x) ∨ make_people_smile(x)))",
        "conclusion": "bring_joy(Bode)"
      },
      {
        "facts": [
          "creative(Bode)",
          "bring_joy(Bode)"
        ],
        "rules": "creative(Bode) → (bring_joy(Bode) ⊕ gain_recognition(Bode))",
        "conclusion": "¬gain_recognition(Bode)"
      }
    ],
    "conclusion": "Bode does not gain recognition for his artistic skills.",
    "conclusion_fol": "¬gain_recognition(Bode)",
    "answer": "True",
    "context": [
      "Bode is kind-hearted.",
      "Bode spreads happiness.",
      "All kind-hearted people help others and spread happiness.",
      "Bode cares deeply.",
      "If Bode cares deeply, then he either helps others or makes people smile, but not both.",
      "Bode crafts with love.",
      "Anyone who crafts with love either brings joy to others or makes people smile.",
      "Bode is creative.",
      "If Bode is creative, then he can either bring joy to others with his teddy bears or gain recognition for his artistic skills, but not both."
    ],
    "context_fol": [
      "kind_hearted(Bode)",
      "spread_happiness(Bode)",
      "∀x (kind_hearted(x) → (helpOthers(x) ∧ spread_happiness(x)))",
      "care_deeply(Bode)",
      "care_deeply(Bode) → (helpOthers(Bode) ⊕ make_people_smile(Bode))",
      "craft_with_love(Bode)",
      "∀x (craft_with_love(x) → (bring_joy(x) ∨ make_people_smile(x)))",
      "creative(Bode)",
      "creative(Bode) → (bring_joy(Bode) ⊕ gain_recognition(Bode))"
    ],
    "background_story": "Bode was a free-spirited artist with a passion for creating unique teddy bears. He spent most of his days in his small workshop, surrounded by threads, fabrics, and half-finished projects. Bode's teddy bears were not just any ordinary stuffed animals; each one was carefully crafted with love and attention to detail, making them truly special. As his creations gained popularity, people would come from all over to commission custom teddy bears from Bode. He took pride in bringing joy to children and adults alike with his cuddly friends. Bode's workshop became a symbol of warmth and comfort, filled with the love he poured into every stitch and every teddy bear that left his hands.",
    "name": "Bode",
    "keyword": "ted",
    "subject_category": "human"
  },
  {
    "facts": [
      "Joaquin is not creative.",
      "Joaquin does not read classics.",
      "Joaquin does not seek truth.",
      "Joaquin collects art."
    ],
    "facts_fol": [
      "¬creative(Joaquin)",
      "¬reads_classics(Joaquin)",
      "¬seeks_truth(Joaquin)",
      "collects_art(Joaquin)"
    ],
    "rules": [
      "If Joaquin either reads classics or explores archaeology (but not both), then he studies history.",
      "Joaquin either visits museums or explores archaeology.",
      "If Joaquin seeks truth, then he is inspired by faith.",
      "A person either collects art or visits museums, but not necessarily both."
    ],
    "rules_fol": [
      "(reads_classics(Joaquin) ⊕ explores_archaeology(Joaquin)) → study_history(Joaquin)",
      "visits_museums(Joaquin) ∨ explores_archaeology(Joaquin)",
      "seeks_truth(Joaquin) → inspired_by_faith(Joaquin)",
      "∀x (collects_art(x) ⊕ visits_museums(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Joaquin loves art and values culture, then he studies history.",
      "If Joaquin either examines relics or deciphers scripts (but not both), then he explores archaeology.",
      "If Joaquin explores spirituality or finds solace, then he is inspired by faith.",
      "Joaquin attends exhibits or visits museums."
    ],
    "distracting_rules_fol": [
      "(loves_art(Joaquin) ∧ values_culture(Joaquin)) → study_history(Joaquin)",
      "(examines_relics(Joaquin) ⊕ deciphers_scripts(Joaquin)) → explores_archaeology(Joaquin)",
      "(explores_spirituality(Joaquin) ∨ finds_solace(Joaquin)) → inspired_by_faith(Joaquin)",
      "attends_exhibits(Joaquin) ∨ visits_museums(Joaquin)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Joaquin collects art."
        ],
        "rules": "A person either collects art or visits museums, but not necessarily both.",
        "conclusion": "Joaquin does not visit museums."
      },
      {
        "facts": [
          "Joaquin does not seek truth."
        ],
        "rules": "If Joaquin seeks truth, then he is inspired by faith.",
        "conclusion": null
      },
      {
        "facts": [
          "Joaquin does not visit museums."
        ],
        "rules": "Joaquin either visits museums or explores archaeology.",
        "conclusion": "Joaquin explores archaeology."
      },
      {
        "facts": [
          "Joaquin does not read classics.",
          "Joaquin explores archaeology."
        ],
        "rules": "If Joaquin either reads classics or explores archaeology (but not both), then he studies history.",
        "conclusion": "Joaquin studies history."
      },
      {
        "facts": [
          "Joaquin is not creative.",
          "Joaquin studies history."
        ],
        "rules": null,
        "conclusion": "Joaquin is creative and either studies history or is inspired by faith (or both)."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "collects_art(Joaquin)"
        ],
        "rules": "∀x (collects_art(x) ⊕ visits_museums(x))",
        "conclusion": "¬visits_museums(Joaquin)"
      },
      {
        "facts": [
          "¬seeks_truth(Joaquin)"
        ],
        "rules": "seeks_truth(Joaquin) → inspired_by_faith(Joaquin)",
        "conclusion": null
      },
      {
        "facts": [
          "¬visits_museums(Joaquin)"
        ],
        "rules": "visits_museums(Joaquin) ∨ explores_archaeology(Joaquin)",
        "conclusion": "explores_archaeology(Joaquin)"
      },
      {
        "facts": [
          "¬reads_classics(Joaquin)",
          "explores_archaeology(Joaquin)"
        ],
        "rules": "(reads_classics(Joaquin) ⊕ explores_archaeology(Joaquin)) → study_history(Joaquin)",
        "conclusion": "study_history(Joaquin)"
      },
      {
        "facts": [
          "¬creative(Joaquin)",
          "study_history(Joaquin)"
        ],
        "rules": null,
        "conclusion": "creative(Joaquin) ∧ (study_history(Joaquin) ∨ inspired_by_faith(Joaquin))"
      }
    ],
    "conclusion": "Joaquin is creative and either studies history or is inspired by faith (or both).",
    "conclusion_fol": "creative(Joaquin) ∧ (study_history(Joaquin) ∨ inspired_by_faith(Joaquin))",
    "answer": "False",
    "context": [
      "Joaquin collects art.",
      "A person either collects art or visits museums, but not necessarily both.",
      "Joaquin does not seek truth.",
      "If Joaquin seeks truth, then he is inspired by faith.",
      "Joaquin either visits museums or explores archaeology.",
      "Joaquin does not read classics.",
      "If Joaquin either reads classics or explores archaeology (but not both), then he studies history.",
      "Joaquin is not creative."
    ],
    "context_fol": [
      "collects_art(Joaquin)",
      "∀x (collects_art(x) ⊕ visits_museums(x))",
      "¬seeks_truth(Joaquin)",
      "seeks_truth(Joaquin) → inspired_by_faith(Joaquin)",
      "visits_museums(Joaquin) ∨ explores_archaeology(Joaquin)",
      "¬reads_classics(Joaquin)",
      "(reads_classics(Joaquin) ⊕ explores_archaeology(Joaquin)) → study_history(Joaquin)",
      "¬creative(Joaquin)"
    ],
    "background_story": "Joaquin was a young artist with a fascination for ancient cultures. During his travels, he stumbled upon the works of St. Cyprian, a 3rd-century bishop and martyr. Inspired by Cyprian's writings on faith, persecution, and redemption, Joaquin delved deeper into the history of early Christianity. He became particularly intrigued by the Plague of Cyprian, which had ravaged the Roman Empire. Joaquin's research and artistic expression led him to create a series of paintings depicting the struggles and triumphs of the early Christian community. His artwork, infused with the spirit of Cyprian's teachings, was met with critical acclaim. Joaquin's journey into the life and times of St. Cyprian not only influenced his art but also deepened his understanding of resilience, hope, and the human condition.",
    "name": "Joaquin",
    "keyword": "cyprian",
    "subject_category": "human"
  },
  {
    "facts": [
      "Theo blooms flowers.",
      "Theo stands tall.",
      "Theo does not provide shade.",
      "Theo is a mature tree.",
      "Theo drops leaves."
    ],
    "facts_fol": [
      "blooms_flowers(Theo)",
      "stands_tall(Theo)",
      "¬provides_shade(Theo)",
      "is_mature(Theo)",
      "drops_leaves(Theo)"
    ],
    "rules": [
      "If Theo either produces sap or bears fruit (but not both), then he nourishes others.",
      "If Theo has roots, then he either blooms flowers or bears fruit, but not both.",
      "If Theo stands tall, then he either has roots or provides shade, but not both.",
      "If Theo is a mature tree, then he either produces sap or drops leaves, but not both."
    ],
    "rules_fol": [
      "(produces_sap(Theo) ⊕ bears_fruit(Theo)) → nourishes_others(Theo)",
      "has_roots(Theo) → (blooms_flowers(Theo) ⊕ bears_fruit(Theo))",
      "stands_tall(Theo) → (has_roots(Theo) ⊕ provides_shade(Theo))",
      "is_mature(Theo) → (produces_sap(Theo) ⊕ drops_leaves(Theo))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "All trees that grow apples bear fruit.",
      "Theo either grows branches or has roots.",
      "If Theo either grows branches or makes seeds (but not both), then he produces sap."
    ],
    "distracting_rules_fol": [
      "∀x (grows_apples(x) → bears_fruit(x))",
      "grows_branches(Theo) ∨ has_roots(Theo)",
      "(grows_branches(Theo) ⊕ makes_seeds(Theo)) → produces_sap(Theo)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Theo is a mature tree.",
          "Theo drops leaves."
        ],
        "rules": "If Theo is a mature tree, then he either produces sap or drops leaves, but not both.",
        "conclusion": "Theo does not produce sap."
      },
      {
        "facts": [
          "Theo stands tall.",
          "Theo does not provide shade."
        ],
        "rules": "If Theo stands tall, then he either has roots or provides shade, but not both.",
        "conclusion": "Theo has roots."
      },
      {
        "facts": [
          "Theo has roots.",
          "Theo blooms flowers."
        ],
        "rules": "If Theo has roots, then he either blooms flowers or bears fruit, but not both.",
        "conclusion": "Theo does not bear fruit."
      },
      {
        "facts": [
          "Theo does not produce sap.",
          "Theo does not bear fruit."
        ],
        "rules": "If Theo either produces sap or bears fruit (but not both), then he nourishes others.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "is_mature(Theo)",
          "drops_leaves(Theo)"
        ],
        "rules": "is_mature(Theo) → (produces_sap(Theo) ⊕ drops_leaves(Theo))",
        "conclusion": "¬produces_sap(Theo)"
      },
      {
        "facts": [
          "stands_tall(Theo)",
          "¬provides_shade(Theo)"
        ],
        "rules": "stands_tall(Theo) → (has_roots(Theo) ⊕ provides_shade(Theo))",
        "conclusion": "has_roots(Theo)"
      },
      {
        "facts": [
          "has_roots(Theo)",
          "blooms_flowers(Theo)"
        ],
        "rules": "has_roots(Theo) → (blooms_flowers(Theo) ⊕ bears_fruit(Theo))",
        "conclusion": "¬bears_fruit(Theo)"
      },
      {
        "facts": [
          "¬produces_sap(Theo)",
          "¬bears_fruit(Theo)"
        ],
        "rules": "(produces_sap(Theo) ⊕ bears_fruit(Theo)) → nourishes_others(Theo)",
        "conclusion": null
      }
    ],
    "conclusion": "Theo does not nourish others.",
    "conclusion_fol": "¬nourishes_others(Theo)",
    "answer": "Uncertain",
    "context": [
      "Theo is a mature tree.",
      "Theo drops leaves.",
      "If Theo is a mature tree, then he either produces sap or drops leaves, but not both.",
      "Theo stands tall.",
      "Theo does not provide shade.",
      "If Theo stands tall, then he either has roots or provides shade, but not both.",
      "Theo blooms flowers.",
      "If Theo has roots, then he either blooms flowers or bears fruit, but not both.",
      "If Theo either produces sap or bears fruit (but not both), then he nourishes others."
    ],
    "context_fol": [
      "is_mature(Theo)",
      "drops_leaves(Theo)",
      "is_mature(Theo) → (produces_sap(Theo) ⊕ drops_leaves(Theo))",
      "stands_tall(Theo)",
      "¬provides_shade(Theo)",
      "stands_tall(Theo) → (has_roots(Theo) ⊕ provides_shade(Theo))",
      "blooms_flowers(Theo)",
      "has_roots(Theo) → (blooms_flowers(Theo) ⊕ bears_fruit(Theo))",
      "(produces_sap(Theo) ⊕ bears_fruit(Theo)) → nourishes_others(Theo)"
    ],
    "background_story": "Theo was a majestic maple tree standing tall in the heart of the forest. Every spring, he would produce an abundance of sap, which the local wildlife relied on for sustenance. The forest creatures would tap into Theo's bounty, collecting the sweet, sticky liquid to make syrup, honey, and other delicacies. As the seasons passed, Theo became a symbol of generosity and provision, his sap nourishing the community that lived among his roots and branches. The animals would often gather at his base, sharing stories and songs as they worked together to harvest the sap. Theo's selflessness and abundance made him a beloved fixture in the forest, a reminder of the beauty of giving and interconnectedness.",
    "name": "Theo",
    "keyword": "sap",
    "subject_category": "tree"
  },
  {
    "facts": [
      "Shawn overcomes anxiety.",
      "Shawn feels fulfilled.",
      "Shawn faces challenges."
    ],
    "facts_fol": [
      "overcomes_anxiety(Shawn)",
      "feels_fulfilled(Shawn)",
      "faces_challenges(Shawn)"
    ],
    "rules": [
      "If Shawn plays music or overcomes anxiety, then he finds inner peace.",
      "If Shawn expresses himself creatively, then he plays music and feels fulfilled.",
      "A person either faces challenges or expresses themselves creatively, but not necessarily both."
    ],
    "rules_fol": [
      "(plays_music(Shawn) ∨ overcomes_anxiety(Shawn)) → finds_inner_peace(Shawn)",
      "express_creatively(Shawn) → (plays_music(Shawn) ∧ feels_fulfilled(Shawn))",
      "∀x (faces_challenges(x) ⊕ express_creatively(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Everyone who practices an instrument either enjoys their performance or plays music.",
      "Shawn enjoys life or expresses himself creatively."
    ],
    "distracting_rules_fol": [
      "∀x (practices_instrument(x) → (enjoys_performance(x) ∨ plays_music(x)))",
      "enjoys_life(Shawn) ∨ express_creatively(Shawn)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Shawn faces challenges."
        ],
        "rules": "A person either faces challenges or expresses themselves creatively, but not necessarily both.",
        "conclusion": "Shawn does not express himself creatively."
      },
      {
        "facts": [
          "Shawn does not express himself creatively.",
          "Shawn feels fulfilled."
        ],
        "rules": "If Shawn expresses himself creatively, then he plays music and feels fulfilled.",
        "conclusion": null
      },
      {
        "facts": [
          "Shawn overcomes anxiety."
        ],
        "rules": "If Shawn plays music or overcomes anxiety, then he finds inner peace.",
        "conclusion": "Shawn finds inner peace."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "faces_challenges(Shawn)"
        ],
        "rules": "∀x (faces_challenges(x) ⊕ express_creatively(x))",
        "conclusion": "¬express_creatively(Shawn)"
      },
      {
        "facts": [
          "¬express_creatively(Shawn)",
          "feels_fulfilled(Shawn)"
        ],
        "rules": "express_creatively(Shawn) → (plays_music(Shawn) ∧ feels_fulfilled(Shawn))",
        "conclusion": null
      },
      {
        "facts": [
          "overcomes_anxiety(Shawn)"
        ],
        "rules": "(plays_music(Shawn) ∨ overcomes_anxiety(Shawn)) → finds_inner_peace(Shawn)",
        "conclusion": "finds_inner_peace(Shawn)"
      }
    ],
    "conclusion": "Shawn finds inner peace.",
    "conclusion_fol": "finds_inner_peace(Shawn)",
    "answer": "True",
    "context": [
      "Shawn faces challenges.",
      "A person either faces challenges or expresses themselves creatively, but not necessarily both.",
      "Shawn feels fulfilled.",
      "If Shawn expresses himself creatively, then he plays music and feels fulfilled.",
      "Shawn overcomes anxiety.",
      "If Shawn plays music or overcomes anxiety, then he finds inner peace."
    ],
    "context_fol": [
      "faces_challenges(Shawn)",
      "∀x (faces_challenges(x) ⊕ express_creatively(x))",
      "feels_fulfilled(Shawn)",
      "express_creatively(Shawn) → (plays_music(Shawn) ∧ feels_fulfilled(Shawn))",
      "overcomes_anxiety(Shawn)",
      "(plays_music(Shawn) ∨ overcomes_anxiety(Shawn)) → finds_inner_peace(Shawn)"
    ],
    "background_story": "Shawn was a talented guitarist who spent most of his days playing in a local band. However, despite his passion for music, he had a tendency to fret over every little thing. From worrying about upcoming gigs to stressing over minor mistakes during practice, Shawn's anxiety often got the better of him. One day, his bandmates staged an intervention, encouraging him to take a step back and enjoy the music. Shawn took their advice to heart and began to focus on the joy of playing, rather than the fear of failure. As he let go of his fretting, his music improved, and he found a sense of peace and contentment he had never known before.",
    "name": "Shawn",
    "keyword": "fret",
    "subject_category": "human"
  },
  {
    "facts": [
      "Moises faces challenges.",
      "Moises does not learn quickly."
    ],
    "facts_fol": [
      "faces_challenges(Moises)",
      "¬learns_fast(Moises)"
    ],
    "rules": [
      "Moises is either persistent or easily discouraged, but not both.",
      "Moises is either flexible or persistent, but not both.",
      "Moises is either able to adapt or is flexible, but not both.",
      "Everyone who faces challenges either learns quickly or adapts to new situations."
    ],
    "rules_fol": [
      "persistent(Moises) ⊕ easily_discouraged(Moises)",
      "flexible(Moises) ⊕ persistent(Moises)",
      "adapts(Moises) ⊕ flexible(Moises)",
      "∀x (faces_challenges(x) → (learns_fast(x) ∨ adapts(x)))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Moises either sets goals or overcomes obstacles (but not both), then he is persistent.",
      "Anyone who takes risks is either flexible or able to overcome obstacles.",
      "Anyone who thinks creatively or works hard can adapt."
    ],
    "distracting_rules_fol": [
      "(sets_goals(Moises) ⊕ overcomes_obstacles(Moises)) → persistent(Moises)",
      "∀x (takes_risks(x) → (flexible(x) ∨ overcomes_obstacles(x)))",
      "∀x ((thinks_creatively(x) ∨ works_hard(x)) → adapts(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Moises faces challenges.",
          "Moises does not learn quickly."
        ],
        "rules": "Everyone who faces challenges either learns quickly or adapts to new situations.",
        "conclusion": "Moises is able to adapt."
      },
      {
        "facts": [
          "Moises is able to adapt."
        ],
        "rules": "Moises is either able to adapt or is flexible, but not both.",
        "conclusion": "Moises is not flexible."
      },
      {
        "facts": [
          "Moises is not flexible."
        ],
        "rules": "Moises is either flexible or persistent, but not both.",
        "conclusion": "Moises is persistent."
      },
      {
        "facts": [
          "Moises is persistent."
        ],
        "rules": "Moises is either persistent or easily discouraged, but not both.",
        "conclusion": "Moises is not easily discouraged."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "faces_challenges(Moises)",
          "¬learns_fast(Moises)"
        ],
        "rules": "∀x (faces_challenges(x) → (learns_fast(x) ∨ adapts(x)))",
        "conclusion": "adapts(Moises)"
      },
      {
        "facts": [
          "adapts(Moises)"
        ],
        "rules": "adapts(Moises) ⊕ flexible(Moises)",
        "conclusion": "¬flexible(Moises)"
      },
      {
        "facts": [
          "¬flexible(Moises)"
        ],
        "rules": "flexible(Moises) ⊕ persistent(Moises)",
        "conclusion": "persistent(Moises)"
      },
      {
        "facts": [
          "persistent(Moises)"
        ],
        "rules": "persistent(Moises) ⊕ easily_discouraged(Moises)",
        "conclusion": "¬easily_discouraged(Moises)"
      }
    ],
    "conclusion": "Moises is not easily discouraged.",
    "conclusion_fol": "¬easily_discouraged(Moises)",
    "answer": "True",
    "context": [
      "Moises faces challenges.",
      "Moises does not learn quickly.",
      "Everyone who faces challenges either learns quickly or adapts to new situations.",
      "Moises is either able to adapt or is flexible, but not both.",
      "Moises is either flexible or persistent, but not both.",
      "Moises is either persistent or easily discouraged, but not both."
    ],
    "context_fol": [
      "faces_challenges(Moises)",
      "¬learns_fast(Moises)",
      "∀x (faces_challenges(x) → (learns_fast(x) ∨ adapts(x)))",
      "adapts(Moises) ⊕ flexible(Moises)",
      "flexible(Moises) ⊕ persistent(Moises)",
      "persistent(Moises) ⊕ easily_discouraged(Moises)"
    ],
    "background_story": "Moises, a young immigrant, arrived in a new country with little more than a suitcase and a dream. Despite the language barrier and cultural differences, he perseveringly pursued his goal of becoming a master chef. Moises worked multiple jobs to make ends meet, attending culinary school at night and practicing his craft in a small kitchen he rented. He faced numerous setbacks, including failed dishes and rejections from potential employers, but he never gave up. Years of hard work paid off when Moises opened his own restaurant, which quickly gained acclaim for its innovative fusion cuisine. His perseverance had not only achieved his dream but also created a culinary destination that brought his community together.",
    "name": "Moises",
    "keyword": "perseveringly",
    "subject_category": "human"
  },
  {
    "facts": [
      "Alicia is spontaneous.",
      "Alicia is not a lively person.",
      "Alicia is a class clown.",
      "Alicia is quirky."
    ],
    "facts_fol": [
      "spontaneous(Alicia)",
      "¬lively_person(Alicia)",
      "class_clown(Alicia)",
      "is_quirky(Alicia)"
    ],
    "rules": [
      "For all humans, if they are funny or spontaneous, then they are entertaining.",
      "If Alicia is a social butterfly, then she is either funny or charming, but not both.",
      "Alicia is either a lively person or a social butterfly.",
      "If Alicia is a class clown, then she is either charming or witty, but not both.",
      "Alicia is either quirky or witty, but not both."
    ],
    "rules_fol": [
      "∀x ((funny(x) ∨ spontaneous(x)) → entertaining(x))",
      "social_butterfly(Alicia) → (funny(Alicia) ⊕ charming(Alicia))",
      "lively_person(Alicia) ∨ social_butterfly(Alicia)",
      "class_clown(Alicia) → (charming(Alicia) ⊕ witty(Alicia))",
      "is_quirky(Alicia) ⊕ witty(Alicia)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Alicia makes jokes, then she is funny.",
      "If Alicia makes jokes or loves parties, then she is a social butterfly.",
      "If Alicia is outgoing, then she is both creative and charming.",
      "If Alicia is a jokester, then she is either sarcastic or witty, but not both."
    ],
    "distracting_rules_fol": [
      "makes_jokes(Alicia) → funny(Alicia)",
      "(makes_jokes(Alicia) ∨ loves_parties(Alicia)) → social_butterfly(Alicia)",
      "outgoing(Alicia) → (creative(Alicia) ∧ charming(Alicia))",
      "jokester(Alicia) → (sarcastic(Alicia) ⊕ witty(Alicia))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Alicia is quirky."
        ],
        "rules": "Alicia is either quirky or witty, but not both.",
        "conclusion": "Alicia is not witty."
      },
      {
        "facts": [
          "Alicia is a class clown.",
          "Alicia is not witty."
        ],
        "rules": "If Alicia is a class clown, then she is either charming or witty, but not both.",
        "conclusion": "Alicia is charming."
      },
      {
        "facts": [
          "Alicia is not a lively person."
        ],
        "rules": "Alicia is either a lively person or a social butterfly.",
        "conclusion": "Alicia is a social butterfly."
      },
      {
        "facts": [
          "Alicia is a social butterfly.",
          "Alicia is charming."
        ],
        "rules": "If Alicia is a social butterfly, then she is either funny or charming, but not both.",
        "conclusion": "Alicia is not funny."
      },
      {
        "facts": [
          "Alicia is not funny.",
          "Alicia is spontaneous."
        ],
        "rules": "For all humans, if they are funny or spontaneous, then they are entertaining.",
        "conclusion": "Alicia is not entertaining."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "is_quirky(Alicia)"
        ],
        "rules": "is_quirky(Alicia) ⊕ witty(Alicia)",
        "conclusion": "¬witty(Alicia)"
      },
      {
        "facts": [
          "class_clown(Alicia)",
          "¬witty(Alicia)"
        ],
        "rules": "class_clown(Alicia) → (charming(Alicia) ⊕ witty(Alicia))",
        "conclusion": "charming(Alicia)"
      },
      {
        "facts": [
          "¬lively_person(Alicia)"
        ],
        "rules": "lively_person(Alicia) ∨ social_butterfly(Alicia)",
        "conclusion": "social_butterfly(Alicia)"
      },
      {
        "facts": [
          "social_butterfly(Alicia)",
          "charming(Alicia)"
        ],
        "rules": "social_butterfly(Alicia) → (funny(Alicia) ⊕ charming(Alicia))",
        "conclusion": "¬funny(Alicia)"
      },
      {
        "facts": [
          "¬funny(Alicia)",
          "spontaneous(Alicia)"
        ],
        "rules": "∀x ((funny(x) ∨ spontaneous(x)) → entertaining(x))",
        "conclusion": "¬entertaining(Alicia)"
      }
    ],
    "conclusion": "Alicia is not entertaining.",
    "conclusion_fol": "¬entertaining(Alicia)",
    "answer": "False",
    "context": [
      "Alicia is quirky.",
      "Alicia is either quirky or witty, but not both.",
      "Alicia is a class clown.",
      "If Alicia is a class clown, then she is either charming or witty, but not both.",
      "Alicia is not a lively person.",
      "Alicia is either a lively person or a social butterfly.",
      "If Alicia is a social butterfly, then she is either funny or charming, but not both.",
      "Alicia is spontaneous.",
      "For all humans, if they are funny or spontaneous, then they are entertaining."
    ],
    "context_fol": [
      "is_quirky(Alicia)",
      "is_quirky(Alicia) ⊕ witty(Alicia)",
      "class_clown(Alicia)",
      "class_clown(Alicia) → (charming(Alicia) ⊕ witty(Alicia))",
      "¬lively_person(Alicia)",
      "lively_person(Alicia) ∨ social_butterfly(Alicia)",
      "social_butterfly(Alicia) → (funny(Alicia) ⊕ charming(Alicia))",
      "spontaneous(Alicia)",
      "∀x ((funny(x) ∨ spontaneous(x)) → entertaining(x))"
    ],
    "background_story": "Alicia was the life of the party, known for her outrageous and playful antics. She had a knack for turning any ordinary situation into a comedy show. Whether it was wearing a funny hat to a formal event or bursting into song in the middle of a quiet library, Alicia's antic behavior always left those around her in stitches. Her friends adored her for her ability to lighten the mood and make them laugh, even on their worst days. One time, she even filled her roommate's room with balloons and then pretended to be a balloon popper, creating a memorable and hilarious scene. Alicia's carefree spirit and love for silly antics made her a beloved and eccentric character in her social circle.",
    "name": "Alicia",
    "keyword": "antic",
    "subject_category": "human"
  },
  {
    "facts": [
      "Cowboy does not have an adventurous spirit.",
      "Cowboy visits museums."
    ],
    "facts_fol": [
      "¬has_adventurous_spirit(Cowboy)",
      "visits_museums(Cowboy)"
    ],
    "rules": [
      "For all people, if they explore culture, then they appreciate diversity.",
      "If Cowboy travels abroad, then he either learns history or explores culture, but not both.",
      "If Cowboy meets strangers, then he travels abroad.",
      "A person either has an adventurous spirit or meets strangers, but not necessarily both.",
      "Anyone who visits museums or talks to locals can learn history."
    ],
    "rules_fol": [
      "∀x (explore_culture(x) → appreciate_diversity(x))",
      "travel_abroad(Cowboy) → (learn_history(Cowboy) ⊕ explore_culture(Cowboy))",
      "meets_strangers(Cowboy) → travel_abroad(Cowboy)",
      "∀x (has_adventurous_spirit(x) ⊕ meets_strangers(x))",
      "∀x ((visits_museums(x) ∨ talks_locals(x)) → learn_history(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Every person enjoys music or explores culture.",
      "If Cowboy seeks experience, then he travels abroad.",
      "If Cowboy enjoys music and likes dancing, then he meets strangers.",
      "If Cowboy either reads books or sees documents (but not both), then he learns history."
    ],
    "distracting_rules_fol": [
      "∀x (enjoys_music(x) ∨ explore_culture(x))",
      "seeks_experience(Cowboy) → travel_abroad(Cowboy)",
      "(enjoys_music(Cowboy) ∧ likes_dancing(Cowboy)) → meets_strangers(Cowboy)",
      "(reads_books(Cowboy) ⊕ sees_documents(Cowboy)) → learn_history(Cowboy)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Cowboy visits museums."
        ],
        "rules": "Anyone who visits museums or talks to locals can learn history.",
        "conclusion": "Cowboy learns history."
      },
      {
        "facts": [
          "Cowboy does not have an adventurous spirit."
        ],
        "rules": "A person either has an adventurous spirit or meets strangers, but not necessarily both.",
        "conclusion": "Cowboy meets strangers."
      },
      {
        "facts": [
          "Cowboy meets strangers."
        ],
        "rules": "If Cowboy meets strangers, then he travels abroad.",
        "conclusion": "Cowboy travels abroad."
      },
      {
        "facts": [
          "Cowboy travels abroad.",
          "Cowboy learns history."
        ],
        "rules": "If Cowboy travels abroad, then he either learns history or explores culture, but not both.",
        "conclusion": "Cowboy does not explore the culture."
      },
      {
        "facts": [
          "Cowboy does not explore the culture."
        ],
        "rules": "For all people, if they explore culture, then they appreciate diversity.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "visits_museums(Cowboy)"
        ],
        "rules": "∀x ((visits_museums(x) ∨ talks_locals(x)) → learn_history(x))",
        "conclusion": "learn_history(Cowboy)"
      },
      {
        "facts": [
          "¬has_adventurous_spirit(Cowboy)"
        ],
        "rules": "∀x (has_adventurous_spirit(x) ⊕ meets_strangers(x))",
        "conclusion": "meets_strangers(Cowboy)"
      },
      {
        "facts": [
          "meets_strangers(Cowboy)"
        ],
        "rules": "meets_strangers(Cowboy) → travel_abroad(Cowboy)",
        "conclusion": "travel_abroad(Cowboy)"
      },
      {
        "facts": [
          "travel_abroad(Cowboy)",
          "learn_history(Cowboy)"
        ],
        "rules": "travel_abroad(Cowboy) → (learn_history(Cowboy) ⊕ explore_culture(Cowboy))",
        "conclusion": "¬explore_culture(Cowboy)"
      },
      {
        "facts": [
          "¬explore_culture(Cowboy)"
        ],
        "rules": "∀x (explore_culture(x) → appreciate_diversity(x))",
        "conclusion": null
      }
    ],
    "conclusion": "Cowboy appreciates diversity.",
    "conclusion_fol": "appreciate_diversity(Cowboy)",
    "answer": "Uncertain",
    "context": [
      "Cowboy visits museums.",
      "Anyone who visits museums or talks to locals can learn history.",
      "Cowboy does not have an adventurous spirit.",
      "A person either has an adventurous spirit or meets strangers, but not necessarily both.",
      "If Cowboy meets strangers, then he travels abroad.",
      "If Cowboy travels abroad, then he either learns history or explores culture, but not both.",
      "For all people, if they explore culture, then they appreciate diversity."
    ],
    "context_fol": [
      "visits_museums(Cowboy)",
      "∀x ((visits_museums(x) ∨ talks_locals(x)) → learn_history(x))",
      "¬has_adventurous_spirit(Cowboy)",
      "∀x (has_adventurous_spirit(x) ⊕ meets_strangers(x))",
      "meets_strangers(Cowboy) → travel_abroad(Cowboy)",
      "travel_abroad(Cowboy) → (learn_history(Cowboy) ⊕ explore_culture(Cowboy))",
      "∀x (explore_culture(x) → appreciate_diversity(x))"
    ],
    "background_story": "Cowboy, a rugged adventurer, found himself in Luanda, the vibrant capital of Angola, after years of traveling the world. Initially, he was drawn by the city's rich cultural heritage and the majestic Atlantic coastline. As he explored the bustling streets of Luanda, Cowboy discovered a passion for the local music, particularly the energetic semba rhythms. He soon became a regular at the city's lively nightlife spots, earning the respect of the locals with his dancing skills. Cowboy's love for Luanda deepened as he learned about its complex history and resilient people. He decided to stay, opening a small bar that became a melting pot for locals and travelers alike, where stories of adventure and the beauty of Luanda were shared over cold beers and to the sound of semba music.",
    "name": "Cowboy",
    "keyword": "luanda",
    "subject_category": "person"
  },
  {
    "facts": [
      "Liliana is not intuitive.",
      "Liliana is a problem solver.",
      "Liliana is not creative."
    ],
    "facts_fol": [
      "¬intuitive(Liliana)",
      "problem_solver(Liliana)",
      "¬creative(Liliana)"
    ],
    "rules": [
      "Liliana is either methodical or impulsive, but not both.",
      "If Liliana is an analyst, then she is either intuitive or methodical, but not both.",
      "If Liliana is a problem solver, then she is either creative or an analyst, but not both."
    ],
    "rules_fol": [
      "methodical(Liliana) ⊕ impulsive(Liliana)",
      "analyst(Liliana) → (intuitive(Liliana) ⊕ methodical(Liliana))",
      "problem_solver(Liliana) → (creative(Liliana) ⊕ analyst(Liliana))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If someone thinks logically and plans carefully, then they are methodical.",
      "Liliana thinks logically or is an analyst."
    ],
    "distracting_rules_fol": [
      "∀x ((thinks_logically(x) ∧ plans_carefully(x)) → methodical(x))",
      "thinks_logically(Liliana) ∨ analyst(Liliana)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Liliana is a problem solver.",
          "Liliana is not creative."
        ],
        "rules": "If Liliana is a problem solver, then she is either creative or an analyst, but not both.",
        "conclusion": "Liliana is an analyst."
      },
      {
        "facts": [
          "Liliana is an analyst.",
          "Liliana is not intuitive."
        ],
        "rules": "If Liliana is an analyst, then she is either intuitive or methodical, but not both.",
        "conclusion": "Liliana is methodical."
      },
      {
        "facts": [
          "Liliana is methodical."
        ],
        "rules": "Liliana is either methodical or impulsive, but not both.",
        "conclusion": "Liliana is not impulsive."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "problem_solver(Liliana)",
          "¬creative(Liliana)"
        ],
        "rules": "problem_solver(Liliana) → (creative(Liliana) ⊕ analyst(Liliana))",
        "conclusion": "analyst(Liliana)"
      },
      {
        "facts": [
          "analyst(Liliana)",
          "¬intuitive(Liliana)"
        ],
        "rules": "analyst(Liliana) → (intuitive(Liliana) ⊕ methodical(Liliana))",
        "conclusion": "methodical(Liliana)"
      },
      {
        "facts": [
          "methodical(Liliana)"
        ],
        "rules": "methodical(Liliana) ⊕ impulsive(Liliana)",
        "conclusion": "¬impulsive(Liliana)"
      }
    ],
    "conclusion": "Liliana is not impulsive.",
    "conclusion_fol": "¬impulsive(Liliana)",
    "answer": "True",
    "context": [
      "Liliana is a problem solver.",
      "Liliana is not creative.",
      "If Liliana is a problem solver, then she is either creative or an analyst, but not both.",
      "Liliana is not intuitive.",
      "If Liliana is an analyst, then she is either intuitive or methodical, but not both.",
      "Liliana is either methodical or impulsive, but not both."
    ],
    "context_fol": [
      "problem_solver(Liliana)",
      "¬creative(Liliana)",
      "problem_solver(Liliana) → (creative(Liliana) ⊕ analyst(Liliana))",
      "¬intuitive(Liliana)",
      "analyst(Liliana) → (intuitive(Liliana) ⊕ methodical(Liliana))",
      "methodical(Liliana) ⊕ impulsive(Liliana)"
    ],
    "background_story": "Liliana was a brilliant mathematician with a fascination for stochastic processes. Her research delved into the unpredictable nature of random events, seeking patterns in the chaos. She spent countless hours studying probability distributions, applying her knowledge to real-world problems like financial modeling and climate forecasting. Liliana's work was not without its challenges; she often encountered setbacks and dead ends. However, she approached each obstacle stochastically, analyzing the probabilities of success and adjusting her strategies accordingly. This mindset allowed her to navigate the uncertainties of her field with remarkable agility, leading to groundbreaking discoveries and a reputation as a leading expert in stochastic analysis. Liliana's story showcased how embracing the randomness of life can lead to innovative solutions and a deeper understanding of the world's complexities.",
    "name": "Liliana",
    "keyword": "stochastically",
    "subject_category": "human"
  },
  {
    "facts": [
      "Nathaniel teaches history.",
      "Nathaniel is meticulous.",
      "Nathaniel is accurate.",
      "Nathaniel investigates events.",
      "Nathaniel reads documents.",
      "Nathaniel seeks knowledge."
    ],
    "facts_fol": [
      "teaches_history(Nathaniel)",
      "meticulous(Nathaniel)",
      "accurate(Nathaniel)",
      "investigates_events(Nathaniel)",
      "reads_documents(Nathaniel)",
      "seeks_knowledge(Nathaniel)"
    ],
    "rules": [
      "Nathaniel either pursues truth or is respected, but not necessarily both.",
      "Every historian who conducts research either writes books or pursues truth.",
      "If Nathaniel investigates events, then he either teaches history or writes books, but not both.",
      "Any historian who reads documents or interviews experts conducts research.",
      "If Nathaniel seeks knowledge, then he will interview experts."
    ],
    "rules_fol": [
      "pursues_truth(Nathaniel) ⊕ respected(Nathaniel)",
      "∀x (conducts_research(x) → (writes_books(x) ∨ pursues_truth(x)))",
      "investigates_events(Nathaniel) → (teaches_history(Nathaniel) ⊕ writes_books(Nathaniel))",
      "∀x ((reads_documents(x) ∨ interviews_experts(x)) → conducts_research(x))",
      "seeks_knowledge(Nathaniel) → interviews_experts(Nathaniel)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Every historian provides insight or is respected.",
      "All historians who seek facts pursue the truth.",
      "If Nathaniel examines evidence, then he analyzes data and writes books.",
      "All historians who seek clarity conduct research and value precision.",
      "Every historian who analyzes data either verifies facts or interviews experts."
    ],
    "distracting_rules_fol": [
      "∀x (provides_insight(x) ∨ respected(x))",
      "∀x (seeks_facts(x) → pursues_truth(x))",
      "examines_evidence(Nathaniel) → (analyzes_data(Nathaniel) ∧ writes_books(Nathaniel))",
      "∀x (seeks_clarity(x) → (conducts_research(x) ∧ values_precision(x)))",
      "∀x (analyzes_data(x) → (verifies_facts(x) ∨ interviews_experts(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Nathaniel seeks knowledge."
        ],
        "rules": "If Nathaniel seeks knowledge, then he will interview experts.",
        "conclusion": "Nathaniel interviews experts."
      },
      {
        "facts": [
          "Nathaniel reads documents.",
          "Nathaniel interviews experts."
        ],
        "rules": "Any historian who reads documents or interviews experts conducts research.",
        "conclusion": "Nathaniel conducts research."
      },
      {
        "facts": [
          "Nathaniel investigates events.",
          "Nathaniel teaches history."
        ],
        "rules": "If Nathaniel investigates events, then he either teaches history or writes books, but not both.",
        "conclusion": "Nathaniel does not write books."
      },
      {
        "facts": [
          "Nathaniel conducts research.",
          "Nathaniel does not write books."
        ],
        "rules": "Every historian who conducts research either writes books or pursues truth.",
        "conclusion": "Nathaniel pursues truth."
      },
      {
        "facts": [
          "Nathaniel pursues truth."
        ],
        "rules": "Nathaniel either pursues truth or is respected, but not necessarily both.",
        "conclusion": "Nathaniel is not respected."
      },
      {
        "facts": [
          "Nathaniel is not respected.",
          "Nathaniel is meticulous.",
          "Nathaniel is accurate."
        ],
        "rules": null,
        "conclusion": "Nathaniel is respected, or he is meticulous and accurate."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "seeks_knowledge(Nathaniel)"
        ],
        "rules": "seeks_knowledge(Nathaniel) → interviews_experts(Nathaniel)",
        "conclusion": "interviews_experts(Nathaniel)"
      },
      {
        "facts": [
          "reads_documents(Nathaniel)",
          "interviews_experts(Nathaniel)"
        ],
        "rules": "∀x ((reads_documents(x) ∨ interviews_experts(x)) → conducts_research(x))",
        "conclusion": "conducts_research(Nathaniel)"
      },
      {
        "facts": [
          "investigates_events(Nathaniel)",
          "teaches_history(Nathaniel)"
        ],
        "rules": "investigates_events(Nathaniel) → (teaches_history(Nathaniel) ⊕ writes_books(Nathaniel))",
        "conclusion": "¬writes_books(Nathaniel)"
      },
      {
        "facts": [
          "conducts_research(Nathaniel)",
          "¬writes_books(Nathaniel)"
        ],
        "rules": "∀x (conducts_research(x) → (writes_books(x) ∨ pursues_truth(x)))",
        "conclusion": "pursues_truth(Nathaniel)"
      },
      {
        "facts": [
          "pursues_truth(Nathaniel)"
        ],
        "rules": "pursues_truth(Nathaniel) ⊕ respected(Nathaniel)",
        "conclusion": "¬respected(Nathaniel)"
      },
      {
        "facts": [
          "¬respected(Nathaniel)",
          "meticulous(Nathaniel)",
          "accurate(Nathaniel)"
        ],
        "rules": null,
        "conclusion": "respected(Nathaniel) ∨ (meticulous(Nathaniel) ∧ accurate(Nathaniel))"
      }
    ],
    "conclusion": "Nathaniel is respected, or he is meticulous and accurate.",
    "conclusion_fol": "respected(Nathaniel) ∨ (meticulous(Nathaniel) ∧ accurate(Nathaniel))",
    "answer": "True",
    "context": [
      "Nathaniel seeks knowledge.",
      "If Nathaniel seeks knowledge, then he will interview experts.",
      "Nathaniel reads documents.",
      "Any historian who reads documents or interviews experts conducts research.",
      "Nathaniel investigates events.",
      "Nathaniel teaches history.",
      "If Nathaniel investigates events, then he either teaches history or writes books, but not both.",
      "Every historian who conducts research either writes books or pursues truth.",
      "Nathaniel either pursues truth or is respected, but not necessarily both.",
      "Nathaniel is meticulous.",
      "Nathaniel is accurate."
    ],
    "context_fol": [
      "seeks_knowledge(Nathaniel)",
      "seeks_knowledge(Nathaniel) → interviews_experts(Nathaniel)",
      "reads_documents(Nathaniel)",
      "∀x ((reads_documents(x) ∨ interviews_experts(x)) → conducts_research(x))",
      "investigates_events(Nathaniel)",
      "teaches_history(Nathaniel)",
      "investigates_events(Nathaniel) → (teaches_history(Nathaniel) ⊕ writes_books(Nathaniel))",
      "∀x (conducts_research(x) → (writes_books(x) ∨ pursues_truth(x)))",
      "pursues_truth(Nathaniel) ⊕ respected(Nathaniel)",
      "meticulous(Nathaniel)",
      "accurate(Nathaniel)"
    ],
    "background_story": "Nathaniel was a meticulous historian known for his commitment to presenting information factually. He spent years researching the American Revolution, pouring over original documents and conducting exhaustive interviews with descendants of key figures. His book, 'A Truthful Account,' was hailed as a masterpiece of historical accuracy, offering a nuanced and detailed portrayal of the era. Nathaniel's insistence on verifying every detail, no matter how small, earned him the respect of his peers and the admiration of readers. He was often called upon to correct inaccuracies in other historical accounts, and his contributions to the field were recognized with numerous awards. Nathaniel's dedication to factual storytelling inspired a new generation of historians to prioritize precision and truth in their work.",
    "name": "Nathaniel",
    "keyword": "factually",
    "subject_category": "historian"
  },
  {
    "facts": [
      "Dario tracks migration patterns.",
      "Dario does not monitor habitats."
    ],
    "facts_fol": [
      "tracks_migration(Dario)",
      "¬monitors_habitats(Dario)"
    ],
    "rules": [
      "Every ornithologist either studies raptors or supports conservation (or both).",
      "Dario studies raptors because he researches birds.",
      "All ornithologists who observe nature will research birds.",
      "If an ornithologist either tracks migration patterns or monitors habitats (but not both), then they observe nature."
    ],
    "rules_fol": [
      "∀x (study_raptors(x) ∨ support_conservation(x))",
      "research_birds(Dario) → study_raptors(Dario)",
      "∀x (observes_nature(x) → research_birds(x))",
      "∀x ((tracks_migration(x) ⊕ monitors_habitats(x)) → observes_nature(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Dario either examines wings or analyzes plumage (but not both), then he studies raptors.",
      "All ornithologists who either examine plumes or document behaviors (but not both) research birds.",
      "Every ornithologist who investigates species either protects wildlife or observes nature (or both)."
    ],
    "distracting_rules_fol": [
      "(examines_wings(Dario) ⊕ analyzes_plumage(Dario)) → study_raptors(Dario)",
      "∀x ((examines_plumes(x) ⊕ documents_behaviors(x)) → research_birds(x))",
      "∀x (investigate_species(x) → (protect_wildlife(x) ∨ observes_nature(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Dario tracks migration patterns.",
          "Dario does not monitor habitats."
        ],
        "rules": "If an ornithologist either tracks migration patterns or monitors habitats (but not both), then they observe nature.",
        "conclusion": "Dario observes nature."
      },
      {
        "facts": [
          "Dario observes nature."
        ],
        "rules": "All ornithologists who observe nature will research birds.",
        "conclusion": "Dario researches birds."
      },
      {
        "facts": [
          "Dario researches birds."
        ],
        "rules": "Dario studies raptors because he researches birds.",
        "conclusion": "Dario studies raptors."
      },
      {
        "facts": [
          "Dario studies raptors."
        ],
        "rules": "Every ornithologist either studies raptors or supports conservation (or both).",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "tracks_migration(Dario)",
          "¬monitors_habitats(Dario)"
        ],
        "rules": "∀x ((tracks_migration(x) ⊕ monitors_habitats(x)) → observes_nature(x))",
        "conclusion": "observes_nature(Dario)"
      },
      {
        "facts": [
          "observes_nature(Dario)"
        ],
        "rules": "∀x (observes_nature(x) → research_birds(x))",
        "conclusion": "research_birds(Dario)"
      },
      {
        "facts": [
          "research_birds(Dario)"
        ],
        "rules": "research_birds(Dario) → study_raptors(Dario)",
        "conclusion": "study_raptors(Dario)"
      },
      {
        "facts": [
          "study_raptors(Dario)"
        ],
        "rules": "∀x (study_raptors(x) ∨ support_conservation(x))",
        "conclusion": null
      }
    ],
    "conclusion": "Dario supports conservation.",
    "conclusion_fol": "support_conservation(Dario)",
    "answer": "Uncertain",
    "context": [
      "Dario tracks migration patterns.",
      "Dario does not monitor habitats.",
      "If an ornithologist either tracks migration patterns or monitors habitats (but not both), then they observe nature.",
      "All ornithologists who observe nature will research birds.",
      "Dario studies raptors because he researches birds.",
      "Every ornithologist either studies raptors or supports conservation (or both)."
    ],
    "context_fol": [
      "tracks_migration(Dario)",
      "¬monitors_habitats(Dario)",
      "∀x ((tracks_migration(x) ⊕ monitors_habitats(x)) → observes_nature(x))",
      "∀x (observes_nature(x) → research_birds(x))",
      "research_birds(Dario) → study_raptors(Dario)",
      "∀x (study_raptors(x) ∨ support_conservation(x))"
    ],
    "background_story": "Dario was a renowned ornithologist with a passion for birds of prey. His life's work focused on the Milvus genus, particularly the red kite and the black kite. He spent years studying their habitats, migration patterns, and behaviors. Dario's groundbreaking research on the Milvus species helped raise awareness about the importance of conservation efforts. His dedication to protecting these magnificent birds led to the establishment of several wildlife reserves and sanctuaries. Dario's love for the Milvus genus was contagious, inspiring a new generation of ornithologists and bird enthusiasts to join him in his quest to preserve the beauty and wonder of these incredible creatures.",
    "name": "Dario",
    "keyword": "milvus",
    "subject_category": "ornithologist"
  },
  {
    "facts": [
      "Amaris does not love nature.",
      "Amaris does not protect habitats.",
      "Amaris does not reduce waste.",
      "Amaris promotes sustainability.",
      "Amaris does not defend species."
    ],
    "facts_fol": [
      "¬loves_nature(Amaris)",
      "¬protects_habitat(Amaris)",
      "¬reduces_waste(Amaris)",
      "promotes_sustainability(Amaris)",
      "¬defends_species(Amaris)"
    ],
    "rules": [
      "Amaris either loves nature or studies animals.",
      "If someone cares about the environment, then they respect wildlife and help the ecosystem.",
      "Amaris either protects habitats or helps the ecosystem.",
      "Anyone who reduces waste or promotes sustainability cares about the environment.",
      "Anyone who defends species will support conservation."
    ],
    "rules_fol": [
      "loves_nature(Amaris) ∨ studies_animals(Amaris)",
      "∀x (cares_environment(x) → (respects_wildlife(x) ∧ helps_ecosystem(x)))",
      "protects_habitat(Amaris) ∨ helps_ecosystem(Amaris)",
      "∀x ((reduces_waste(x) ∨ promotes_sustainability(x)) → cares_environment(x))",
      "∀x (defends_species(x) → supports_conservation(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Anyone who observes behaviors or examines habitats can study animals.",
      "Everyone who advocates for biodiversity either funds research or respects wildlife (or both).",
      "If Amaris either saves water or reduces pollution (but not both), then she helps the ecosystem.",
      "If Amaris either saves water or recycles trash (but not both), then she cares about the environment.",
      "If Amaris values biodiversity, then she teaches others and supports conservation."
    ],
    "distracting_rules_fol": [
      "∀x ((observes_behaviors(x) ∨ examines_habitats(x)) → studies_animals(x))",
      "∀x (advocates_biodiversity(x) → (funds_research(x) ∨ respects_wildlife(x)))",
      "(saves_water(Amaris) ⊕ reduces_pollution(Amaris)) → helps_ecosystem(Amaris)",
      "(saves_water(Amaris) ⊕ recycles_trash(Amaris)) → cares_environment(Amaris)",
      "values_biodiversity(Amaris) → (teaches_others(Amaris) ∧ supports_conservation(Amaris))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Amaris does not defend species."
        ],
        "rules": "Anyone who defends species will support conservation.",
        "conclusion": null
      },
      {
        "facts": [
          "Amaris does not reduce waste.",
          "Amaris promotes sustainability."
        ],
        "rules": "Anyone who reduces waste or promotes sustainability cares about the environment.",
        "conclusion": "Amaris cares about the environment."
      },
      {
        "facts": [
          "Amaris does not protect habitats."
        ],
        "rules": "Amaris either protects habitats or helps the ecosystem.",
        "conclusion": "Amaris helps the ecosystem."
      },
      {
        "facts": [
          "Amaris cares about the environment.",
          "Amaris helps the ecosystem."
        ],
        "rules": "If someone cares about the environment, then they respect wildlife and help the ecosystem.",
        "conclusion": "Amaris respects wildlife."
      },
      {
        "facts": [
          "Amaris does not love nature."
        ],
        "rules": "Amaris either loves nature or studies animals.",
        "conclusion": "Amaris studies animals."
      },
      {
        "facts": [
          "Amaris respects wildlife.",
          "Amaris studies animals."
        ],
        "rules": null,
        "conclusion": "Amaris respects wildlife and either studies animals, specifically warthogs, or supports conservation (or both)."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬defends_species(Amaris)"
        ],
        "rules": "∀x (defends_species(x) → supports_conservation(x))",
        "conclusion": null
      },
      {
        "facts": [
          "¬reduces_waste(Amaris)",
          "promotes_sustainability(Amaris)"
        ],
        "rules": "∀x ((reduces_waste(x) ∨ promotes_sustainability(x)) → cares_environment(x))",
        "conclusion": "cares_environment(Amaris)"
      },
      {
        "facts": [
          "¬protects_habitat(Amaris)"
        ],
        "rules": "protects_habitat(Amaris) ∨ helps_ecosystem(Amaris)",
        "conclusion": "helps_ecosystem(Amaris)"
      },
      {
        "facts": [
          "cares_environment(Amaris)",
          "helps_ecosystem(Amaris)"
        ],
        "rules": "∀x (cares_environment(x) → (respects_wildlife(x) ∧ helps_ecosystem(x)))",
        "conclusion": "respects_wildlife(Amaris)"
      },
      {
        "facts": [
          "¬loves_nature(Amaris)"
        ],
        "rules": "loves_nature(Amaris) ∨ studies_animals(Amaris)",
        "conclusion": "studies_animals(Amaris)"
      },
      {
        "facts": [
          "respects_wildlife(Amaris)",
          "studies_animals(Amaris)"
        ],
        "rules": null,
        "conclusion": "respects_wildlife(Amaris) ∧ (studies_animals(Amaris) ∨ supports_conservation(Amaris))"
      }
    ],
    "conclusion": "Amaris respects wildlife and either studies animals, specifically warthogs, or supports conservation (or both).",
    "conclusion_fol": "respects_wildlife(Amaris) ∧ (studies_animals(Amaris) ∨ supports_conservation(Amaris))",
    "answer": "True",
    "context": [
      "Amaris does not defend species.",
      "Anyone who defends species will support conservation.",
      "Amaris does not reduce waste.",
      "Amaris promotes sustainability.",
      "Anyone who reduces waste or promotes sustainability cares about the environment.",
      "Amaris does not protect habitats.",
      "Amaris either protects habitats or helps the ecosystem.",
      "If someone cares about the environment, then they respect wildlife and help the ecosystem.",
      "Amaris does not love nature.",
      "Amaris either loves nature or studies animals."
    ],
    "context_fol": [
      "¬defends_species(Amaris)",
      "∀x (defends_species(x) → supports_conservation(x))",
      "¬reduces_waste(Amaris)",
      "promotes_sustainability(Amaris)",
      "∀x ((reduces_waste(x) ∨ promotes_sustainability(x)) → cares_environment(x))",
      "¬protects_habitat(Amaris)",
      "protects_habitat(Amaris) ∨ helps_ecosystem(Amaris)",
      "∀x (cares_environment(x) → (respects_wildlife(x) ∧ helps_ecosystem(x)))",
      "¬loves_nature(Amaris)",
      "loves_nature(Amaris) ∨ studies_animals(Amaris)"
    ],
    "background_story": "Amaris, a passionate zoologist, had always been fascinated by the unique creatures of the African savannah. Her research focus was on the phacochoerus, commonly known as warthogs. She spent years studying their behavior, social structures, and habitats. Amaris's dedication to her work led to groundbreaking discoveries about the phacochoerus's role in maintaining the ecosystem balance. Her findings were published in several prestigious journals, earning her recognition within the scientific community. Amaris's love for these often-underappreciated animals inspired a new generation of zoologists to explore the fascinating world of phacochoerus, thanks to her tireless efforts in conservation and education.",
    "name": "Amaris",
    "keyword": "phacochoerus",
    "subject_category": "human"
  },
  {
    "facts": [
      "Zahra does not make dolls.",
      "Zahra does not share culture with others."
    ],
    "facts_fol": [
      "¬makes_dolls(Zahra)",
      "¬shares_culture(Zahra)"
    ],
    "rules": [
      "If Zahra is a skilled craftsman, then she either creates beautiful art or preserves tradition, but not both.",
      "Zahra either makes dolls or is a skilled craftsman.",
      "If Zahra shares Korean culture with others, then she does not necessarily preserve tradition, and if she preserves tradition, then she does not necessarily share culture with others."
    ],
    "rules_fol": [
      "skilled_craftsman(Zahra) → (create_beautiful_art(Zahra) ⊕ preserve_tradition(Zahra))",
      "makes_dolls(Zahra) ∨ skilled_craftsman(Zahra)",
      "shares_culture(Zahra) ⊕ preserve_tradition(Zahra)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Zahra is attentive, then she is a skilled craftsman and passionate.",
      "If Zahra either honors heritage or keeps customs (but not both), then she preserves tradition."
    ],
    "distracting_rules_fol": [
      "attentive(Zahra) → (skilled_craftsman(Zahra) ∧ passionate(Zahra))",
      "(honors_наследie(Zahra) ⊕ keeps_customs(Zahra)) → preserve_tradition(Zahra)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Zahra does not share culture with others."
        ],
        "rules": "If Zahra shares Korean culture with others, then she does not necessarily preserve tradition, and if she preserves tradition, then she does not necessarily share culture with others.",
        "conclusion": "Zahra preserves tradition."
      },
      {
        "facts": [
          "Zahra does not make dolls."
        ],
        "rules": "Zahra either makes dolls or is a skilled craftsman.",
        "conclusion": "Zahra is a skilled craftsman."
      },
      {
        "facts": [
          "Zahra is a skilled craftsman.",
          "Zahra preserves tradition."
        ],
        "rules": "If Zahra is a skilled craftsman, then she either creates beautiful art or preserves tradition, but not both.",
        "conclusion": "Zahra does not create beautiful art."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬shares_culture(Zahra)"
        ],
        "rules": "shares_culture(Zahra) ⊕ preserve_tradition(Zahra)",
        "conclusion": "preserve_tradition(Zahra)"
      },
      {
        "facts": [
          "¬makes_dolls(Zahra)"
        ],
        "rules": "makes_dolls(Zahra) ∨ skilled_craftsman(Zahra)",
        "conclusion": "skilled_craftsman(Zahra)"
      },
      {
        "facts": [
          "skilled_craftsman(Zahra)",
          "preserve_tradition(Zahra)"
        ],
        "rules": "skilled_craftsman(Zahra) → (create_beautiful_art(Zahra) ⊕ preserve_tradition(Zahra))",
        "conclusion": "¬create_beautiful_art(Zahra)"
      }
    ],
    "conclusion": "Zahra does not create beautiful art.",
    "conclusion_fol": "¬create_beautiful_art(Zahra)",
    "answer": "True",
    "context": [
      "Zahra does not share culture with others.",
      "If Zahra shares Korean culture with others, then she does not necessarily preserve tradition, and if she preserves tradition, then she does not necessarily share culture with others.",
      "Zahra does not make dolls.",
      "Zahra either makes dolls or is a skilled craftsman.",
      "If Zahra is a skilled craftsman, then she either creates beautiful art or preserves tradition, but not both."
    ],
    "context_fol": [
      "¬shares_culture(Zahra)",
      "shares_culture(Zahra) ⊕ preserve_tradition(Zahra)",
      "¬makes_dolls(Zahra)",
      "makes_dolls(Zahra) ∨ skilled_craftsman(Zahra)",
      "skilled_craftsman(Zahra) → (create_beautiful_art(Zahra) ⊕ preserve_tradition(Zahra))"
    ],
    "background_story": "Zahra was a skilled craftsman from a small village in Korea, where she specialized in creating traditional Korean dolls, known as 'dol'. With meticulous attention to detail, she would spend hours designing and crafting each doll, infusing them with a sense of love and care. Zahra's dol quickly gained popularity for their exquisite beauty and intricate designs. People would come from all over to purchase her dolls, not just for their aesthetic value, but also for the stories and legends that Zahra would weave into each one. As her reputation grew, so did her passion for sharing Korean culture and tradition with the world. Zahra's dol became a symbol of her country's rich heritage, and she continued to create them with love, dedication, and a deep sense of pride.",
    "name": "Zahra",
    "keyword": "dol",
    "subject_category": "human"
  },
  {
    "facts": [
      "Araya is a landmark.",
      "Araya has pillars.",
      "Araya does not have a grand entrance.",
      "Araya is not culturally relevant.",
      "Araya is in a classical style.",
      "Araya incorporates marble.",
      "Araya does not have an iconic design.",
      "Araya is communally valued."
    ],
    "facts_fol": [
      "landmark(Araya)",
      "has_pillars(Araya)",
      "¬has_grand_entrance(Araya)",
      "¬culturally_relevant(Araya)",
      "classical_style(Araya)",
      "incorporate_marble(Araya)",
      "¬iconic_design(Araya)",
      "communally_valued(Araya)"
    ],
    "rules": [
      "If the Azure Temple has a grand entrance or uses natural light, then it is aesthetically pleasing.",
      "If the Azure Temple has pillars, then it either uses natural light or has a symmetric design, but not both.",
      "If the Azure Temple is a landmark, then it is either culturally relevant or famous, but not both.",
      "If the Azure Temple is in a classical style, then it has a symmetric design and incorporates marble.",
      "Any architecture with an iconic design is either historically significant or communally valued (or both)."
    ],
    "rules_fol": [
      "(has_grand_entrance(Araya) ∨ uses_natural_light(Araya)) → aesthetically_pleasing(Araya)",
      "has_pillars(Araya) → (uses_natural_light(Araya) ⊕ symmetric_design(Araya))",
      "landmark(Araya) → (culturally_relevant(Araya) ⊕ famous(Araya))",
      "classical_style(Araya) → (symmetric_design(Araya) ∧ incorporate_marble(Araya))",
      "∀x (iconic_design(x) → (historically_significant(x) ∨ communally_valued(x)))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If the Azure Temple is timeless, then it is either functional or aesthetically pleasing, but not both.",
      "Any architecture that features a dome either has open spaces or uses natural light.",
      "If the Azure Temple is timeless, then it is either famous or functional, but not both.",
      "If the Azure Temple is balanced, then it has a symmetric design.",
      "Any architecture that preserves culture and inspires community is historically significant."
    ],
    "distracting_rules_fol": [
      "timeless(Araya) → (functional(Araya) ⊕ aesthetically_pleasing(Araya))",
      "∀x (features_dome(x) → (has_open_spaces(x) ∨ uses_natural_light(x)))",
      "timeless(Araya) → (famous(Araya) ⊕ functional(Araya))",
      "balanced(Araya) → symmetric_design(Araya)",
      "∀x ((preserves_culture(x) ∧ inspires_community(x)) → historically_significant(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Araya does not have an iconic design.",
          "Araya is communally valued."
        ],
        "rules": "Any architecture with an iconic design is either historically significant or communally valued (or both).",
        "conclusion": null
      },
      {
        "facts": [
          "Araya is in a classical style.",
          "Araya incorporates marble."
        ],
        "rules": "If the Azure Temple is in a classical style, then it has a symmetric design and incorporates marble.",
        "conclusion": "Araya has a symmetric design."
      },
      {
        "facts": [
          "Araya is a landmark.",
          "Araya is not culturally relevant."
        ],
        "rules": "If the Azure Temple is a landmark, then it is either culturally relevant or famous, but not both.",
        "conclusion": "The Azure Temple is famous."
      },
      {
        "facts": [
          "Araya has pillars.",
          "Araya has a symmetric design."
        ],
        "rules": "If the Azure Temple has pillars, then it either uses natural light or has a symmetric design, but not both.",
        "conclusion": "Araya does not use natural light."
      },
      {
        "facts": [
          "Araya does not have a grand entrance.",
          "Araya does not use natural light."
        ],
        "rules": "If the Azure Temple has a grand entrance or uses natural light, then it is aesthetically pleasing.",
        "conclusion": null
      },
      {
        "facts": [
          "The Azure Temple is famous."
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬iconic_design(Araya)",
          "communally_valued(Araya)"
        ],
        "rules": "∀x (iconic_design(x) → (historically_significant(x) ∨ communally_valued(x)))",
        "conclusion": null
      },
      {
        "facts": [
          "classical_style(Araya)",
          "incorporate_marble(Araya)"
        ],
        "rules": "classical_style(Araya) → (symmetric_design(Araya) ∧ incorporate_marble(Araya))",
        "conclusion": "symmetric_design(Araya)"
      },
      {
        "facts": [
          "landmark(Araya)",
          "¬culturally_relevant(Araya)"
        ],
        "rules": "landmark(Araya) → (culturally_relevant(Araya) ⊕ famous(Araya))",
        "conclusion": "famous(Araya)"
      },
      {
        "facts": [
          "has_pillars(Araya)",
          "symmetric_design(Araya)"
        ],
        "rules": "has_pillars(Araya) → (uses_natural_light(Araya) ⊕ symmetric_design(Araya))",
        "conclusion": "¬uses_natural_light(Araya)"
      },
      {
        "facts": [
          "¬has_grand_entrance(Araya)",
          "¬uses_natural_light(Araya)"
        ],
        "rules": "(has_grand_entrance(Araya) ∨ uses_natural_light(Araya)) → aesthetically_pleasing(Araya)",
        "conclusion": null
      },
      {
        "facts": [
          "famous(Araya)"
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "conclusion": "If the Azure Temple is famous, then it is either aesthetically pleasing or historically significant (or both).",
    "conclusion_fol": "famous(Araya) → (aesthetically_pleasing(Araya) ∨ historically_significant(Araya))",
    "answer": "Uncertain",
    "context": [
      "Araya does not have an iconic design.",
      "Araya is communally valued.",
      "Any architecture with an iconic design is either historically significant or communally valued (or both).",
      "Araya is in a classical style.",
      "Araya incorporates marble.",
      "If the Azure Temple is in a classical style, then it has a symmetric design and incorporates marble.",
      "Araya is a landmark.",
      "Araya is not culturally relevant.",
      "If the Azure Temple is a landmark, then it is either culturally relevant or famous, but not both.",
      "Araya has pillars.",
      "If the Azure Temple has pillars, then it either uses natural light or has a symmetric design, but not both.",
      "Araya does not have a grand entrance.",
      "If the Azure Temple has a grand entrance or uses natural light, then it is aesthetically pleasing."
    ],
    "context_fol": [
      "¬iconic_design(Araya)",
      "communally_valued(Araya)",
      "∀x (iconic_design(x) → (historically_significant(x) ∨ communally_valued(x)))",
      "classical_style(Araya)",
      "incorporate_marble(Araya)",
      "classical_style(Araya) → (symmetric_design(Araya) ∧ incorporate_marble(Araya))",
      "landmark(Araya)",
      "¬culturally_relevant(Araya)",
      "landmark(Araya) → (culturally_relevant(Araya) ⊕ famous(Araya))",
      "has_pillars(Araya)",
      "has_pillars(Araya) → (uses_natural_light(Araya) ⊕ symmetric_design(Araya))",
      "¬has_grand_entrance(Araya)",
      "(has_grand_entrance(Araya) ∨ uses_natural_light(Araya)) → aesthetically_pleasing(Araya)"
    ],
    "background_story": "Araya was a renowned architect known for her breathtaking designs that often featured grand, pillared entrances. Her most famous work, the Azure Temple, stood as a testament to her innovative style, with six majestic pillars supporting its impressive facade. The pillars, each uniquely carved with stories of ancient myths, became a hallmark of Araya's work, symbolizing strength, elegance, and historical depth. As visitors passed beneath the pillared entrance, they were transported into a world of beauty and tranquility, a true reflection of Araya's vision and craftsmanship. Her use of pillared structures not only added aesthetic appeal but also created a sense of community and gathering, making her buildings beloved landmarks in the city.",
    "name": "Araya",
    "keyword": "pillared",
    "subject_category": "architecture"
  },
  {
    "facts": [
      "Arya reduces waste.",
      "Arya does not protect wildlife.",
      "Arya conserves water."
    ],
    "facts_fol": [
      "reduce_waste(Arya)",
      "¬protect_wildlife(Arya)",
      "conserve_water(Arya)"
    ],
    "rules": [
      "Arya is either environmentally conscious or environmentally negligent, but not both.",
      "If Arya cares about nature, then she is environmentally conscious and reduces waste.",
      "If Arya either protects wildlife or conserves water (but not both), then she cares about nature."
    ],
    "rules_fol": [
      "environmentally_conscious(Arya) ⊕ environmentally_negligent(Arya)",
      "care_nature(Arya) → (environmentally_conscious(Arya) ∧ reduce_waste(Arya))",
      "(protect_wildlife(Arya) ⊕ conserve_water(Arya)) → care_nature(Arya)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Arya loves the outdoors, then she either supports sustainability or is environmentally conscious (or both).",
      "Anyone who loves the outdoors either cares about nature or promotes sustainability."
    ],
    "distracting_rules_fol": [
      "love_outdoors(Arya) → (support_sustainability(Arya) ∨ environmentally_conscious(Arya))",
      "∀x (love_outdoors(x) → (care_nature(x) ∨ promote_sustainability(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Arya does not protect wildlife.",
          "Arya conserves water."
        ],
        "rules": "If Arya either protects wildlife or conserves water (but not both), then she cares about nature.",
        "conclusion": "Arya cares about nature."
      },
      {
        "facts": [
          "Arya cares about nature.",
          "Arya reduces waste."
        ],
        "rules": "If Arya cares about nature, then she is environmentally conscious and reduces waste.",
        "conclusion": "Arya is environmentally conscious."
      },
      {
        "facts": [
          "Arya is environmentally conscious."
        ],
        "rules": "Arya is either environmentally conscious or environmentally negligent, but not both.",
        "conclusion": "Arya is environmentally negligent."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬protect_wildlife(Arya)",
          "conserve_water(Arya)"
        ],
        "rules": "(protect_wildlife(Arya) ⊕ conserve_water(Arya)) → care_nature(Arya)",
        "conclusion": "care_nature(Arya)"
      },
      {
        "facts": [
          "care_nature(Arya)",
          "reduce_waste(Arya)"
        ],
        "rules": "care_nature(Arya) → (environmentally_conscious(Arya) ∧ reduce_waste(Arya))",
        "conclusion": "environmentally_conscious(Arya)"
      },
      {
        "facts": [
          "environmentally_conscious(Arya)"
        ],
        "rules": "environmentally_conscious(Arya) ⊕ environmentally_negligent(Arya)",
        "conclusion": "environmentally_negligent(Arya)"
      }
    ],
    "conclusion": "Arya is environmentally negligent.",
    "conclusion_fol": "environmentally_negligent(Arya)",
    "answer": "False",
    "context": [
      "Arya does not protect wildlife.",
      "Arya conserves water.",
      "If Arya either protects wildlife or conserves water (but not both), then she cares about nature.",
      "Arya reduces waste.",
      "If Arya cares about nature, then she is environmentally conscious and reduces waste.",
      "Arya is either environmentally conscious or environmentally negligent, but not both."
    ],
    "context_fol": [
      "¬protect_wildlife(Arya)",
      "conserve_water(Arya)",
      "(protect_wildlife(Arya) ⊕ conserve_water(Arya)) → care_nature(Arya)",
      "reduce_waste(Arya)",
      "care_nature(Arya) → (environmentally_conscious(Arya) ∧ reduce_waste(Arya))",
      "environmentally_conscious(Arya) ⊕ environmentally_negligent(Arya)"
    ],
    "background_story": "Arya, a young environmentalist, dedicated her life to the stewardship of the planet. Growing up near a polluted river, she witnessed the devastating impact of human neglect on the ecosystem. Determined to make a difference, Arya founded a local conservation group, rallying her community to take action. Through tireless efforts, they cleaned up the riverbanks, planted native species, and established sustainable practices. Arya's leadership and passion inspired a new generation of environmental stewards, and soon the entire town was involved in the restoration efforts. As the river began to flourish, Arya's commitment to stewardship expanded to include educating others about the importance of preserving natural resources for future generations.",
    "name": "Arya",
    "keyword": "stewardship",
    "subject_category": "human"
  },
  {
    "facts": [
      "Julia is an artist.",
      "Julia has passion.",
      "Julia prefers a simple life.",
      "Julia does not hike mountains.",
      "Julia loves gardening."
    ],
    "facts_fol": [
      "artist(Julia)",
      "has_passion(Julia)",
      "prefers_simple_life(Julia)",
      "¬hikes_mountains(Julia)",
      "loves_gardening(Julia)"
    ],
    "rules": [
      "If Julia is an artist, then she either creates beautiful art or expresses emotion, but not both.",
      "Anyone who has passion or tells a story can express emotion.",
      "If Julia has a rural upbringing, then she values imperfections and appreciates natural beauty.",
      "If Julia enjoys the outdoors, then she is either from a rural background or prefers a simple life, but not both.",
      "If someone either hikes mountains or loves gardening (but not both), then they enjoy the outdoors."
    ],
    "rules_fol": [
      "artist(Julia) → (create_beautiful_art(Julia) ⊕ express_emotion(Julia))",
      "∀x ((has_passion(x) ∨ tell_story(x)) → express_emotion(x))",
      "rural_upbringing(Julia) → (value_imperfections(Julia) ∧ appreciate_natural_beauty(Julia))",
      "enjoys_outdoors(Julia) → (prefers_simple_life(Julia) ⊕ rural_upbringing(Julia))",
      "∀x ((hikes_mountains(x) ⊕ loves_gardening(x)) → enjoys_outdoors(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Julia works hard, then she creates beautiful art and learns quickly.",
      "Anyone who uses color or makes music can express emotion.",
      "If someone either likes rocks or admires landscapes (but not both), then they appreciate natural beauty.",
      "If Julia lives in the countryside and works hard, then she has a rural upbringing.",
      "If Julia lives off the grid, then she either farms organically or enjoys the outdoors, but not both."
    ],
    "distracting_rules_fol": [
      "work_hard(Julia) → (create_beautiful_art(Julia) ∧ learn_quickly(Julia))",
      "∀x ((uses_color(x) ∨ makes_music(x)) → express_emotion(x))",
      "∀x ((likes_rocks(x) ⊕ admires_landscapes(x)) → appreciate_natural_beauty(x))",
      "(lives_countryside(Julia) ∧ works_hard(Julia)) → rural_upbringing(Julia)",
      "lives_off_grid(Julia) → (farms_organically(Julia) ⊕ enjoys_outdoors(Julia))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Julia does not hike mountains.",
          "Julia loves gardening."
        ],
        "rules": "If someone either hikes mountains or loves gardening (but not both), then they enjoy the outdoors.",
        "conclusion": "Julia enjoys the outdoors."
      },
      {
        "facts": [
          "Julia enjoys the outdoors.",
          "Julia prefers a simple life."
        ],
        "rules": "If Julia enjoys the outdoors, then she is either from a rural background or prefers a simple life, but not both.",
        "conclusion": "Julia does not have a rural upbringing."
      },
      {
        "facts": [
          "Julia does not have a rural upbringing."
        ],
        "rules": "If Julia has a rural upbringing, then she values imperfections and appreciates natural beauty.",
        "conclusion": null
      },
      {
        "facts": [
          "Julia has passion."
        ],
        "rules": "Anyone who has passion or tells a story can express emotion.",
        "conclusion": "Julia expresses emotion."
      },
      {
        "facts": [
          "Julia is an artist.",
          "Julia expresses emotion."
        ],
        "rules": "If Julia is an artist, then she either creates beautiful art or expresses emotion, but not both.",
        "conclusion": "Julia does not create beautiful art."
      },
      {
        "facts": [
          "Julia does not create beautiful art."
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬hikes_mountains(Julia)",
          "loves_gardening(Julia)"
        ],
        "rules": "∀x ((hikes_mountains(x) ⊕ loves_gardening(x)) → enjoys_outdoors(x))",
        "conclusion": "enjoys_outdoors(Julia)"
      },
      {
        "facts": [
          "enjoys_outdoors(Julia)",
          "prefers_simple_life(Julia)"
        ],
        "rules": "enjoys_outdoors(Julia) → (prefers_simple_life(Julia) ⊕ rural_upbringing(Julia))",
        "conclusion": "¬rural_upbringing(Julia)"
      },
      {
        "facts": [
          "¬rural_upbringing(Julia)"
        ],
        "rules": "rural_upbringing(Julia) → (value_imperfections(Julia) ∧ appreciate_natural_beauty(Julia))",
        "conclusion": null
      },
      {
        "facts": [
          "has_passion(Julia)"
        ],
        "rules": "∀x ((has_passion(x) ∨ tell_story(x)) → express_emotion(x))",
        "conclusion": "express_emotion(Julia)"
      },
      {
        "facts": [
          "artist(Julia)",
          "express_emotion(Julia)"
        ],
        "rules": "artist(Julia) → (create_beautiful_art(Julia) ⊕ express_emotion(Julia))",
        "conclusion": "¬create_beautiful_art(Julia)"
      },
      {
        "facts": [
          "¬create_beautiful_art(Julia)"
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "conclusion": "If Julia is a skilled sculptor, then she either creates beautiful art or appreciates natural beauty (or both).",
    "conclusion_fol": "skilled_sculptor(Julia) → (create_beautiful_art(Julia) ∨ appreciate_natural_beauty(Julia))",
    "answer": "Uncertain",
    "context": [
      "Julia does not hike mountains.",
      "Julia loves gardening.",
      "If someone either hikes mountains or loves gardening (but not both), then they enjoy the outdoors.",
      "Julia prefers a simple life.",
      "If Julia enjoys the outdoors, then she is either from a rural background or prefers a simple life, but not both.",
      "If Julia has a rural upbringing, then she values imperfections and appreciates natural beauty.",
      "Julia has passion.",
      "Anyone who has passion or tells a story can express emotion.",
      "Julia is an artist.",
      "If Julia is an artist, then she either creates beautiful art or expresses emotion, but not both."
    ],
    "context_fol": [
      "¬hikes_mountains(Julia)",
      "loves_gardening(Julia)",
      "∀x ((hikes_mountains(x) ⊕ loves_gardening(x)) → enjoys_outdoors(x))",
      "prefers_simple_life(Julia)",
      "enjoys_outdoors(Julia) → (prefers_simple_life(Julia) ⊕ rural_upbringing(Julia))",
      "rural_upbringing(Julia) → (value_imperfections(Julia) ∧ appreciate_natural_beauty(Julia))",
      "has_passion(Julia)",
      "∀x ((has_passion(x) ∨ tell_story(x)) → express_emotion(x))",
      "artist(Julia)",
      "artist(Julia) → (create_beautiful_art(Julia) ⊕ express_emotion(Julia))"
    ],
    "background_story": "Julia was a roughhewn sculptor with a passion for shaping raw stone into beautiful works of art. Growing up on a rural farm, she developed a rugged resilience and a deep connection to the natural world. Her hands, worn from years of physical labor, moved deftly over the stone, coaxing out hidden forms and textures. Julia's art was a reflection of her own roughhewn upbringing, with its imperfections and uniqueness. She rejected the polished, refined styles of her contemporaries, instead embracing the raw, unbridled beauty of the natural world. As her reputation grew, so did her studio, where she continued to create pieces that were as much a testament to her own character as they were to her skill as an artist.",
    "name": "Julia",
    "keyword": "roughhewn",
    "subject_category": "human"
  },
  {
    "facts": [
      "Marigold is an artist.",
      "Marigold is creative.",
      "Marigold is idealistic."
    ],
    "facts_fol": [
      "artist(Marigold)",
      "creative(Marigold)",
      "idealistic(Marigold)"
    ],
    "rules": [
      "Marigold is either romantic or cynical, but not both.",
      "If Marigold is an artist, then she is either romantic or pragmatic, but not both.",
      "If Marigold is creative, then she is either idealistic or pragmatic, but not both."
    ],
    "rules_fol": [
      "romantic(Marigold) ⊕ cynical(Marigold)",
      "artist(Marigold) → (romantic(Marigold) ⊕ pragmatic(Marigold))",
      "creative(Marigold) → (idealistic(Marigold) ⊕ pragmatic(Marigold))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Marigold either likes dreams or is romantic.",
      "Anyone who plans ahead and makes lists is pragmatic."
    ],
    "distracting_rules_fol": [
      "likes_dreams(Marigold) ∨ romantic(Marigold)",
      "∀x ((plans_ahead(x) ∧ makes_lists(x)) → pragmatic(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Marigold is creative.",
          "Marigold is idealistic."
        ],
        "rules": "If Marigold is creative, then she is either idealistic or pragmatic, but not both.",
        "conclusion": "Marigold is not pragmatic."
      },
      {
        "facts": [
          "Marigold is an artist.",
          "Marigold is not pragmatic."
        ],
        "rules": "If Marigold is an artist, then she is either romantic or pragmatic, but not both.",
        "conclusion": "Marigold is romantic."
      },
      {
        "facts": [
          "Marigold is romantic."
        ],
        "rules": "Marigold is either romantic or cynical, but not both.",
        "conclusion": "Marigold is cynical."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "creative(Marigold)",
          "idealistic(Marigold)"
        ],
        "rules": "creative(Marigold) → (idealistic(Marigold) ⊕ pragmatic(Marigold))",
        "conclusion": "¬pragmatic(Marigold)"
      },
      {
        "facts": [
          "artist(Marigold)",
          "¬pragmatic(Marigold)"
        ],
        "rules": "artist(Marigold) → (romantic(Marigold) ⊕ pragmatic(Marigold))",
        "conclusion": "romantic(Marigold)"
      },
      {
        "facts": [
          "romantic(Marigold)"
        ],
        "rules": "romantic(Marigold) ⊕ cynical(Marigold)",
        "conclusion": "cynical(Marigold)"
      }
    ],
    "conclusion": "Marigold is cynical.",
    "conclusion_fol": "cynical(Marigold)",
    "answer": "False",
    "context": [
      "Marigold is creative.",
      "Marigold is idealistic.",
      "If Marigold is creative, then she is either idealistic or pragmatic, but not both.",
      "Marigold is an artist.",
      "If Marigold is an artist, then she is either romantic or pragmatic, but not both.",
      "Marigold is either romantic or cynical, but not both."
    ],
    "context_fol": [
      "creative(Marigold)",
      "idealistic(Marigold)",
      "creative(Marigold) → (idealistic(Marigold) ⊕ pragmatic(Marigold))",
      "artist(Marigold)",
      "artist(Marigold) → (romantic(Marigold) ⊕ pragmatic(Marigold))",
      "romantic(Marigold) ⊕ cynical(Marigold)"
    ],
    "background_story": "Marigold was a free-spirited artist who lived in a quaint, charming village surrounded by rolling hills and sunflower fields. She spent her days painting masterpieces in her cozy, rustic studio, filled with vintage trinkets and overflowing flower pots. Marigold's life was a picturesque cliché - she sipped coffee at the local café, wore flowing sundresses, and had a penchant for playing the guitar under starry nights. Despite the predictability of her life, Marigold found solace in the familiar rhythms and comforting routines. She was a hopeless romantic, always believing in fairy tales and true love, and her art reflected the beauty and simplicity she saw in the world.",
    "name": "Marigold",
    "keyword": "clichy",
    "subject_category": "person"
  },
  {
    "facts": [
      "Vivienne is not uninsured.",
      "Vivienne loses her job.",
      "Vivienne faces hardship.",
      "Vivienne does not require support."
    ],
    "facts_fol": [
      "¬uninsured(Vivienne)",
      "lost_job(Vivienne)",
      "faces_hardship(Vivienne)",
      "¬requires_support(Vivienne)"
    ],
    "rules": [
      "If Vivienne is uninsured, then she is either financially vulnerable or reliant on charity, but not both.",
      "If Vivienne loses her job, then she is either financially vulnerable or in need of assistance, but not both.",
      "If Vivienne faces hardship, then she is either in need of support or assistance, but not both."
    ],
    "rules_fol": [
      "uninsured(Vivienne) → (financially_vulnerable(Vivienne) ⊕ reliant_on_charity(Vivienne))",
      "lost_job(Vivienne) → (financially_vulnerable(Vivienne) ⊕ needs_assistance(Vivienne))",
      "faces_hardship(Vivienne) → (requires_support(Vivienne) ⊕ needs_assistance(Vivienne))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Anyone who lives paycheck to paycheck is financially vulnerable.",
      "If Vivienne has a low income, then she is either lacking in savings or in need of assistance, but not both."
    ],
    "distracting_rules_fol": [
      "∀x (lives_paycheck(x) → financially_vulnerable(x))",
      "has_low_income(Vivienne) → (lacks_savings(Vivienne) ⊕ needs_assistance(Vivienne))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Vivienne faces hardship.",
          "Vivienne does not require support."
        ],
        "rules": "If Vivienne faces hardship, then she is either in need of support or assistance, but not both.",
        "conclusion": "Vivienne needs assistance."
      },
      {
        "facts": [
          "Vivienne loses her job.",
          "Vivienne needs assistance."
        ],
        "rules": "If Vivienne loses her job, then she is either financially vulnerable or in need of assistance, but not both.",
        "conclusion": "Vivienne is not financially vulnerable."
      },
      {
        "facts": [
          "Vivienne is not uninsured.",
          "Vivienne is not financially vulnerable."
        ],
        "rules": "If Vivienne is uninsured, then she is either financially vulnerable or reliant on charity, but not both.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "faces_hardship(Vivienne)",
          "¬requires_support(Vivienne)"
        ],
        "rules": "faces_hardship(Vivienne) → (requires_support(Vivienne) ⊕ needs_assistance(Vivienne))",
        "conclusion": "needs_assistance(Vivienne)"
      },
      {
        "facts": [
          "lost_job(Vivienne)",
          "needs_assistance(Vivienne)"
        ],
        "rules": "lost_job(Vivienne) → (financially_vulnerable(Vivienne) ⊕ needs_assistance(Vivienne))",
        "conclusion": "¬financially_vulnerable(Vivienne)"
      },
      {
        "facts": [
          "¬uninsured(Vivienne)",
          "¬financially_vulnerable(Vivienne)"
        ],
        "rules": "uninsured(Vivienne) → (financially_vulnerable(Vivienne) ⊕ reliant_on_charity(Vivienne))",
        "conclusion": null
      }
    ],
    "conclusion": "Vivienne is not reliant on charity.",
    "conclusion_fol": "¬reliant_on_charity(Vivienne)",
    "answer": "Uncertain",
    "context": [
      "Vivienne faces hardship.",
      "Vivienne does not require support.",
      "If Vivienne faces hardship, then she is either in need of support or assistance, but not both.",
      "Vivienne loses her job.",
      "If Vivienne loses her job, then she is either financially vulnerable or in need of assistance, but not both.",
      "Vivienne is not uninsured.",
      "If Vivienne is uninsured, then she is either financially vulnerable or reliant on charity, but not both."
    ],
    "context_fol": [
      "faces_hardship(Vivienne)",
      "¬requires_support(Vivienne)",
      "faces_hardship(Vivienne) → (requires_support(Vivienne) ⊕ needs_assistance(Vivienne))",
      "lost_job(Vivienne)",
      "lost_job(Vivienne) → (financially_vulnerable(Vivienne) ⊕ needs_assistance(Vivienne))",
      "¬uninsured(Vivienne)",
      "uninsured(Vivienne) → (financially_vulnerable(Vivienne) ⊕ reliant_on_charity(Vivienne))"
    ],
    "background_story": "Vivienne, a hardworking single mother, struggled to make ends meet. Despite her best efforts, she found herself uninsured after losing her job due to company restructuring. Her new job didn't offer health benefits, and she couldn't afford private insurance. When Vivienne's daughter, Sophie, fell ill with a severe case of pneumonia, she was faced with a daunting medical bill. With no safety net, Vivienne had to rely on the kindness of strangers and local charities to help cover the costs. The experience was a harsh reminder of the vulnerabilities of being uninsured, and Vivienne became an advocate for affordable healthcare, determined to help others avoid the same struggles she faced.",
    "name": "Vivienne",
    "keyword": "uninsured",
    "subject_category": "human"
  },
  {
    "facts": [
      "Brycen is outgoing.",
      "Brycen does not support artists.",
      "Brycen does not have manners.",
      "Brycen meets the elite.",
      "Brycen does not build relationships.",
      "Brycen does not network often."
    ],
    "facts_fol": [
      "outgoing(Brycen)",
      "¬supports_artists(Brycen)",
      "¬has_manners(Brycen)",
      "meets_elite(Brycen)",
      "¬builds_relationships(Brycen)",
      "¬networks_often(Brycen)"
    ],
    "rules": [
      "If Brycen is outgoing, then he is either affable or charismatic, but not both.",
      "If Brycen attends galas, then he is either influential or supports artists.",
      "Brycen has manners or is affable.",
      "If Brycen meets the elite, then he will attend galas.",
      "Anyone who builds relationships or networks often is well-connected."
    ],
    "rules_fol": [
      "outgoing(Brycen) → (affable(Brycen) ⊕ charismatic(Brycen))",
      "attends_galas(Brycen) → (influential(Brycen) ∨ supports_artists(Brycen))",
      "has_manners(Brycen) ∨ affable(Brycen)",
      "meets_elite(Brycen) → attends_galas(Brycen)",
      "∀x ((builds_relationships(x) ∨ networks_often(x)) → well_connected(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "For all humans, if they speak well and listen actively, then they are charismatic.",
      "If Brycen hosts events, then he is either influential or funds causes.",
      "All sociable people are affable and empathetic.",
      "If Brycen is rich, then he attends galas.",
      "Anyone who knows many people is well-connected."
    ],
    "distracting_rules_fol": [
      "∀x ((speaks_well(x) ∧ listens_actively(x)) → charismatic(x))",
      "hosts_events(Brycen) → (influential(Brycen) ∨ funds_causes(Brycen))",
      "∀x (sociable(x) → (affable(x) ∧ empathetic(x)))",
      "rich(Brycen) → attends_galas(Brycen)",
      "∀x (knows_people(x) → well_connected(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Brycen does not build relationships.",
          "Brycen does not network often."
        ],
        "rules": "Anyone who builds relationships or networks often is well-connected.",
        "conclusion": null
      },
      {
        "facts": [
          "Brycen meets the elite."
        ],
        "rules": "If Brycen meets the elite, then he will attend galas.",
        "conclusion": "Brycen attends galas."
      },
      {
        "facts": [
          "Brycen does not have manners."
        ],
        "rules": "Brycen has manners or is affable.",
        "conclusion": "Brycen is affable."
      },
      {
        "facts": [
          "Brycen attends galas.",
          "Brycen does not support artists."
        ],
        "rules": "If Brycen attends galas, then he is either influential or supports artists.",
        "conclusion": "Brycen is influential."
      },
      {
        "facts": [
          "Brycen is outgoing.",
          "Brycen is affable."
        ],
        "rules": "If Brycen is outgoing, then he is either affable or charismatic, but not both.",
        "conclusion": "Brycen is not charismatic."
      },
      {
        "facts": [
          "Brycen is not charismatic.",
          "Brycen is influential."
        ],
        "rules": null,
        "conclusion": "If Brycen is charismatic or well-connected, then he is influential."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬builds_relationships(Brycen)",
          "¬networks_often(Brycen)"
        ],
        "rules": "∀x ((builds_relationships(x) ∨ networks_often(x)) → well_connected(x))",
        "conclusion": null
      },
      {
        "facts": [
          "meets_elite(Brycen)"
        ],
        "rules": "meets_elite(Brycen) → attends_galas(Brycen)",
        "conclusion": "attends_galas(Brycen)"
      },
      {
        "facts": [
          "¬has_manners(Brycen)"
        ],
        "rules": "has_manners(Brycen) ∨ affable(Brycen)",
        "conclusion": "affable(Brycen)"
      },
      {
        "facts": [
          "attends_galas(Brycen)",
          "¬supports_artists(Brycen)"
        ],
        "rules": "attends_galas(Brycen) → (influential(Brycen) ∨ supports_artists(Brycen))",
        "conclusion": "influential(Brycen)"
      },
      {
        "facts": [
          "outgoing(Brycen)",
          "affable(Brycen)"
        ],
        "rules": "outgoing(Brycen) → (affable(Brycen) ⊕ charismatic(Brycen))",
        "conclusion": "¬charismatic(Brycen)"
      },
      {
        "facts": [
          "¬charismatic(Brycen)",
          "influential(Brycen)"
        ],
        "rules": null,
        "conclusion": "(charismatic(Brycen) ∨ well_connected(Brycen)) → influential(Brycen)"
      }
    ],
    "conclusion": "If Brycen is charismatic or well-connected, then he is influential.",
    "conclusion_fol": "(charismatic(Brycen) ∨ well_connected(Brycen)) → influential(Brycen)",
    "answer": "True",
    "context": [
      "Brycen does not build relationships.",
      "Brycen does not network often.",
      "Anyone who builds relationships or networks often is well-connected.",
      "Brycen meets the elite.",
      "If Brycen meets the elite, then he will attend galas.",
      "Brycen does not have manners.",
      "Brycen has manners or is affable.",
      "Brycen does not support artists.",
      "If Brycen attends galas, then he is either influential or supports artists.",
      "Brycen is outgoing.",
      "If Brycen is outgoing, then he is either affable or charismatic, but not both."
    ],
    "context_fol": [
      "¬builds_relationships(Brycen)",
      "¬networks_often(Brycen)",
      "∀x ((builds_relationships(x) ∨ networks_often(x)) → well_connected(x))",
      "meets_elite(Brycen)",
      "meets_elite(Brycen) → attends_galas(Brycen)",
      "¬has_manners(Brycen)",
      "has_manners(Brycen) ∨ affable(Brycen)",
      "¬supports_artists(Brycen)",
      "attends_galas(Brycen) → (influential(Brycen) ∨ supports_artists(Brycen))",
      "outgoing(Brycen)",
      "outgoing(Brycen) → (affable(Brycen) ⊕ charismatic(Brycen))"
    ],
    "background_story": "Brycen was a charismatic socialite known for his ability to hobnob with the elite. As a young entrepreneur, he built a lucrative business by attending high-end networking events and rubbing shoulders with influential figures. His charm and wit made him a favorite among celebrities and politicians, who appreciated his discretion and savvy business sense. Brycen's calendar was filled with galas, parties, and exclusive gatherings, where he would effortlessly mingle with the wealthy and powerful. Despite his glamorous lifestyle, he remained humble and kind, using his connections to support emerging artists and philanthropic causes. Brycen's talent for hobnobbing had taken him to the pinnacle of society, but he never forgot his humble beginnings.",
    "name": "Brycen",
    "keyword": "hobnob",
    "subject_category": "human"
  },
  {
    "facts": [
      "Raphael has a secret.",
      "Raphael has integrity.",
      "Raphael manipulates."
    ],
    "facts_fol": [
      "has_secret(Raphael)",
      "has_integrity(Raphael)",
      "manipulates(Raphael)"
    ],
    "rules": [
      "Raphael is either honest or reliable (or both), but his actions often contradict this statement.",
      "A person is either deceptive or truthful, but not both.",
      "If Raphael has a secret, then he is either transparent or deceptive, but not both.",
      "All individuals with integrity are either transparent or manipulative, but not both."
    ],
    "rules_fol": [
      "honest(Raphael) ∨ reliable(Raphael)",
      "∀x (is_deceptive(x) ⊕ honest(x))",
      "has_secret(Raphael) → (is_transparent(Raphael) ⊕ is_deceptive(Raphael))",
      "∀x (has_integrity(x) → (is_transparent(x) ⊕ manipulates(x)))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Raphael is trustworthy, then he is either honest or sincere, but not both.",
      "Anyone who tells lies or makes excuses is deceptive.",
      "Anyone who shares their feelings or admits their faults is transparent."
    ],
    "distracting_rules_fol": [
      "is_trustworthy(Raphael) → (honest(Raphael) ⊕ is_sincere(Raphael))",
      "∀x ((tells_lies(x) ∨ makes_excuses(x)) → is_deceptive(x))",
      "∀x ((shares_feelings(x) ∨ admits_faults(x)) → is_transparent(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Raphael has integrity.",
          "Raphael manipulates."
        ],
        "rules": "All individuals with integrity are either transparent or manipulative, but not both.",
        "conclusion": "Raphael is not transparent."
      },
      {
        "facts": [
          "Raphael has a secret.",
          "Raphael is not transparent."
        ],
        "rules": "If Raphael has a secret, then he is either transparent or deceptive, but not both.",
        "conclusion": "Raphael is deceptive."
      },
      {
        "facts": [
          "Raphael is deceptive."
        ],
        "rules": "A person is either deceptive or truthful, but not both.",
        "conclusion": "Raphael is not honest."
      },
      {
        "facts": [
          "Raphael is not honest."
        ],
        "rules": "Raphael is either honest or reliable (or both), but his actions often contradict this statement.",
        "conclusion": "Raphael is reliable."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "has_integrity(Raphael)",
          "manipulates(Raphael)"
        ],
        "rules": "∀x (has_integrity(x) → (is_transparent(x) ⊕ manipulates(x)))",
        "conclusion": "¬is_transparent(Raphael)"
      },
      {
        "facts": [
          "has_secret(Raphael)",
          "¬is_transparent(Raphael)"
        ],
        "rules": "has_secret(Raphael) → (is_transparent(Raphael) ⊕ is_deceptive(Raphael))",
        "conclusion": "is_deceptive(Raphael)"
      },
      {
        "facts": [
          "is_deceptive(Raphael)"
        ],
        "rules": "∀x (is_deceptive(x) ⊕ honest(x))",
        "conclusion": "¬honest(Raphael)"
      },
      {
        "facts": [
          "¬honest(Raphael)"
        ],
        "rules": "honest(Raphael) ∨ reliable(Raphael)",
        "conclusion": "reliable(Raphael)"
      }
    ],
    "conclusion": "Raphael is reliable.",
    "conclusion_fol": "reliable(Raphael)",
    "answer": "True",
    "context": [
      "Raphael has integrity.",
      "Raphael manipulates.",
      "All individuals with integrity are either transparent or manipulative, but not both.",
      "Raphael has a secret.",
      "If Raphael has a secret, then he is either transparent or deceptive, but not both.",
      "A person is either deceptive or truthful, but not both.",
      "Raphael is either honest or reliable (or both), but his actions often contradict this statement."
    ],
    "context_fol": [
      "has_integrity(Raphael)",
      "manipulates(Raphael)",
      "∀x (has_integrity(x) → (is_transparent(x) ⊕ manipulates(x)))",
      "has_secret(Raphael)",
      "has_secret(Raphael) → (is_transparent(Raphael) ⊕ is_deceptive(Raphael))",
      "∀x (is_deceptive(x) ⊕ honest(x))",
      "honest(Raphael) ∨ reliable(Raphael)"
    ],
    "background_story": "Raphael was a charismatic artist known for his captivating paintings. However, beneath his charming facade, he had a habit of malingering to avoid commitments. He would often claim to be suffering from exhaustion or creative blocks to delay deadlines and escape responsibilities. As a result, his patrons and friends grew wary of his excuses, questioning the legitimacy of his ailments. Despite his talent, Raphael's reputation suffered due to his dishonest tactics. His malingering not only affected his professional relationships but also strained his personal ones, as those close to him felt deceived by his constant fabrications. Raphael's behavior became a self-fulfilling prophecy, as the stress of maintaining his facade led to genuine health issues, further complicating his already tumultuous life.",
    "name": "Raphael",
    "keyword": "malingering",
    "subject_category": "human"
  },
  {
    "facts": [
      "Zoya uses vivid colors.",
      "Zoya is expressive.",
      "Zoya prefers realism.",
      "Zoya loves jazz.",
      "Zoya enjoys experiments."
    ],
    "facts_fol": [
      "use_vivid_colors(Zoya)",
      "is_expressive(Zoya)",
      "prefer_realism(Zoya)",
      "love_jazz(Zoya)",
      "enjoy_experiments(Zoya)"
    ],
    "rules": [
      "For all artists, if they admire fauvism and use vivid colors, then they create vibrant paintings.",
      "If Zoya is expressive, then she either admires fauvism or favors abstract art, but not both.",
      "If Zoya is creative, then she either prefers realism or favors abstract art, but not both.",
      "If Zoya loves jazz, then she enjoys experiments and is creative."
    ],
    "rules_fol": [
      "∀x ((admire_fauvism(x) ∧ use_vivid_colors(x)) → create_vibrant_paintings(x))",
      "is_expressive(Zoya) → (admire_fauvism(Zoya) ⊕ favor_abstract(Zoya))",
      "is_creative(Zoya) → (prefer_realism(Zoya) ⊕ favor_abstract(Zoya))",
      "love_jazz(Zoya) → (enjoy_experiments(Zoya) ∧ is_creative(Zoya))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Zoya paints landscapes, then she captures the essence of her subjects and admires fauvism.",
      "Zoya either paints landscapes or favors abstract art.",
      "All artists inspired by masters paint with passion and are creative."
    ],
    "distracting_rules_fol": [
      "paint_landscapes(Zoya) → (capture_essence(Zoya) ∧ admire_fauvism(Zoya))",
      "paints_landscapes(Zoya) ∨ favor_abstract(Zoya)",
      "∀x (inspired_by_masters(x) → (paint_with_passion(x) ∧ is_creative(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Zoya loves jazz.",
          "Zoya enjoys experiments."
        ],
        "rules": "If Zoya loves jazz, then she enjoys experiments and is creative.",
        "conclusion": "Zoya is creative."
      },
      {
        "facts": [
          "Zoya is creative.",
          "Zoya prefers realism."
        ],
        "rules": "If Zoya is creative, then she either prefers realism or favors abstract art, but not both.",
        "conclusion": "Zoya does not favor abstract art."
      },
      {
        "facts": [
          "Zoya is expressive.",
          "Zoya does not favor abstract art."
        ],
        "rules": "If Zoya is expressive, then she either admires fauvism or favors abstract art, but not both.",
        "conclusion": "Zoya admires fauvism."
      },
      {
        "facts": [
          "Zoya admires fauvism.",
          "Zoya uses vivid colors."
        ],
        "rules": "For all artists, if they admire fauvism and use vivid colors, then they create vibrant paintings.",
        "conclusion": "Zoya creates vibrant paintings."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "love_jazz(Zoya)",
          "enjoy_experiments(Zoya)"
        ],
        "rules": "love_jazz(Zoya) → (enjoy_experiments(Zoya) ∧ is_creative(Zoya))",
        "conclusion": "is_creative(Zoya)"
      },
      {
        "facts": [
          "is_creative(Zoya)",
          "prefer_realism(Zoya)"
        ],
        "rules": "is_creative(Zoya) → (prefer_realism(Zoya) ⊕ favor_abstract(Zoya))",
        "conclusion": "¬favor_abstract(Zoya)"
      },
      {
        "facts": [
          "is_expressive(Zoya)",
          "¬favor_abstract(Zoya)"
        ],
        "rules": "is_expressive(Zoya) → (admire_fauvism(Zoya) ⊕ favor_abstract(Zoya))",
        "conclusion": "admire_fauvism(Zoya)"
      },
      {
        "facts": [
          "admire_fauvism(Zoya)",
          "use_vivid_colors(Zoya)"
        ],
        "rules": "∀x ((admire_fauvism(x) ∧ use_vivid_colors(x)) → create_vibrant_paintings(x))",
        "conclusion": "create_vibrant_paintings(Zoya)"
      }
    ],
    "conclusion": "Zoya creates vibrant paintings.",
    "conclusion_fol": "create_vibrant_paintings(Zoya)",
    "answer": "True",
    "context": [
      "Zoya loves jazz.",
      "Zoya enjoys experiments.",
      "If Zoya loves jazz, then she enjoys experiments and is creative.",
      "Zoya prefers realism.",
      "If Zoya is creative, then she either prefers realism or favors abstract art, but not both.",
      "Zoya is expressive.",
      "If Zoya is expressive, then she either admires fauvism or favors abstract art, but not both.",
      "Zoya uses vivid colors.",
      "For all artists, if they admire fauvism and use vivid colors, then they create vibrant paintings."
    ],
    "context_fol": [
      "love_jazz(Zoya)",
      "enjoy_experiments(Zoya)",
      "love_jazz(Zoya) → (enjoy_experiments(Zoya) ∧ is_creative(Zoya))",
      "prefer_realism(Zoya)",
      "is_creative(Zoya) → (prefer_realism(Zoya) ⊕ favor_abstract(Zoya))",
      "is_expressive(Zoya)",
      "is_expressive(Zoya) → (admire_fauvism(Zoya) ⊕ favor_abstract(Zoya))",
      "use_vivid_colors(Zoya)",
      "∀x ((admire_fauvism(x) ∧ use_vivid_colors(x)) → create_vibrant_paintings(x))"
    ],
    "background_story": "Zoya was a vibrant and expressive painter, often drawing inspiration from the works of Raoul Dufy, a French Fauvist. She admired how Dufy's bold, colorful depictions of everyday life captured the essence of joy and beauty. Zoya's own artwork reflected this influence, as she brought landscapes, still-life compositions, and portraits to life with vivid hues and energetic brushstrokes. Her passion for Dufy's style led her to create a series of paintings celebrating the beauty of ordinary moments, much like Dufy's scenes of leisure and pleasure. Zoya's art studio became a kaleidoscope of color, filled with half-finished canvases, paint-splattered easels, and the sound of jazz music, echoing the lively spirit of her beloved Dufy.",
    "name": "Zoya",
    "keyword": "dufy",
    "subject_category": "artist"
  },
  {
    "facts": [
      "Brendan studies ecosystems in his work to protect the wapiti population.",
      "Brendan defends animals.",
      "Brendan saves species."
    ],
    "facts_fol": [
      "studies_ecosystems(Brendan)",
      "defends_animals(Brendan)",
      "saves_species(Brendan)"
    ],
    "rules": [
      "Brendan is either a conservationist or a hunter, but not both.",
      "If Brendan either protects wildlife or preserves habitats (but not both), then he is a conservationist.",
      "Brendan either studies ecosystems or preserves habitats, but not both, in his work to protect the wapiti population.",
      "Anyone who defends animals or saves species can protect wildlife."
    ],
    "rules_fol": [
      "conservationist(Brendan) ⊕ hunter(Brendan)",
      "(protects_wildlife(Brendan) ⊕ preserves_habitats(Brendan)) → conservationist(Brendan)",
      "studies_ecosystems(Brendan) ⊕ preserves_habitats(Brendan)",
      "∀x ((defends_animals(x) ∨ saves_species(x)) → protects_wildlife(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Brendan loves nature or helps animals, then he is a conservationist.",
      "For all humans, if they love nature and support wildlife, then they preserve habitats.",
      "If Brendan cares about nature, then he protects wildlife."
    ],
    "distracting_rules_fol": [
      "(loves_nature(Brendan) ∨ helps_animals(Brendan)) → conservationist(Brendan)",
      "∀x ((loves_nature(x) ∧ supports_wildlife(x)) → preserves_habitats(x))",
      "cares_nature(Brendan) → protects_wildlife(Brendan)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Brendan defends animals.",
          "Brendan saves species."
        ],
        "rules": "Anyone who defends animals or saves species can protect wildlife.",
        "conclusion": "Brendan protects wildlife."
      },
      {
        "facts": [
          "Brendan studies ecosystems in his work to protect the wapiti population."
        ],
        "rules": "Brendan either studies ecosystems or preserves habitats, but not both, in his work to protect the wapiti population.",
        "conclusion": "Brendan does not preserve habitats."
      },
      {
        "facts": [
          "Brendan protects wildlife.",
          "Brendan does not preserve habitats."
        ],
        "rules": "If Brendan either protects wildlife or preserves habitats (but not both), then he is a conservationist.",
        "conclusion": "Brendan is a conservationist."
      },
      {
        "facts": [
          "Brendan is a conservationist."
        ],
        "rules": "Brendan is either a conservationist or a hunter, but not both.",
        "conclusion": "Brendan is not a hunter."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "defends_animals(Brendan)",
          "saves_species(Brendan)"
        ],
        "rules": "∀x ((defends_animals(x) ∨ saves_species(x)) → protects_wildlife(x))",
        "conclusion": "protects_wildlife(Brendan)"
      },
      {
        "facts": [
          "studies_ecosystems(Brendan)"
        ],
        "rules": "studies_ecosystems(Brendan) ⊕ preserves_habitats(Brendan)",
        "conclusion": "¬preserves_habitats(Brendan)"
      },
      {
        "facts": [
          "protects_wildlife(Brendan)",
          "¬preserves_habitats(Brendan)"
        ],
        "rules": "(protects_wildlife(Brendan) ⊕ preserves_habitats(Brendan)) → conservationist(Brendan)",
        "conclusion": "conservationist(Brendan)"
      },
      {
        "facts": [
          "conservationist(Brendan)"
        ],
        "rules": "conservationist(Brendan) ⊕ hunter(Brendan)",
        "conclusion": "¬hunter(Brendan)"
      }
    ],
    "conclusion": "Brendan is not a hunter.",
    "conclusion_fol": "¬hunter(Brendan)",
    "answer": "True",
    "context": [
      "Brendan defends animals.",
      "Brendan saves species.",
      "Anyone who defends animals or saves species can protect wildlife.",
      "Brendan studies ecosystems in his work to protect the wapiti population.",
      "Brendan either studies ecosystems or preserves habitats, but not both, in his work to protect the wapiti population.",
      "If Brendan either protects wildlife or preserves habitats (but not both), then he is a conservationist.",
      "Brendan is either a conservationist or a hunter, but not both."
    ],
    "context_fol": [
      "defends_animals(Brendan)",
      "saves_species(Brendan)",
      "∀x ((defends_animals(x) ∨ saves_species(x)) → protects_wildlife(x))",
      "studies_ecosystems(Brendan)",
      "studies_ecosystems(Brendan) ⊕ preserves_habitats(Brendan)",
      "(protects_wildlife(Brendan) ⊕ preserves_habitats(Brendan)) → conservationist(Brendan)",
      "conservationist(Brendan) ⊕ hunter(Brendan)"
    ],
    "background_story": "Brendan was a skilled wildlife biologist who had always been fascinated by the majestic wapiti, also known as elk. Growing up in the Rocky Mountains, he spent countless hours observing and studying these magnificent creatures. His research focused on the migration patterns and habitat preservation of the wapiti. Brendan's dedication and expertise led to the development of a conservation program that helped protect the wapiti population in the region. He worked tirelessly with local communities and government agencies to establish protected areas and educate the public about the importance of preserving the wapiti's natural habitat. Thanks to Brendan's efforts, the wapiti population began to thrive, and he became known as a leading authority on these incredible animals.",
    "name": "Brendan",
    "keyword": "wapiti",
    "subject_category": "human"
  },
  {
    "facts": [
      "Coleson is fast.",
      "Coleson is mature.",
      "Coleson does not run wild."
    ],
    "facts_fol": [
      "fast(Coleson)",
      "mature(Coleson)",
      "¬run_wild(Coleson)"
    ],
    "rules": [
      "If Coleson is strong, then he either leads a herd or roams free, but not both.",
      "If Coleson is fast, then he is strong and has a black coat.",
      "If Coleson is mature, then he either leads a herd or runs wild, but not both."
    ],
    "rules_fol": [
      "strong(Coleson) → (lead_herd(Coleson) ⊕ roam_free(Coleson))",
      "fast(Coleson) → (strong(Coleson) ∧ black_coat(Coleson))",
      "mature(Coleson) → (lead_herd(Coleson) ⊕ run_wild(Coleson))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Coleson either has a mane or is strong.",
      "Coleson either finds food or leads a herd."
    ],
    "distracting_rules_fol": [
      "has_mane(Coleson) ∨ strong(Coleson)",
      "finds_food(Coleson) ∨ lead_herd(Coleson)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Coleson is mature.",
          "Coleson does not run wild."
        ],
        "rules": "If Coleson is mature, then he either leads a herd or runs wild, but not both.",
        "conclusion": "Coleson leads a herd."
      },
      {
        "facts": [
          "Coleson is fast."
        ],
        "rules": "If Coleson is fast, then he is strong and has a black coat.",
        "conclusion": "Coleson is strong."
      },
      {
        "facts": [
          "Coleson is strong.",
          "Coleson leads a herd."
        ],
        "rules": "If Coleson is strong, then he either leads a herd or roams free, but not both.",
        "conclusion": "Coleson does not roam free."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "mature(Coleson)",
          "¬run_wild(Coleson)"
        ],
        "rules": "mature(Coleson) → (lead_herd(Coleson) ⊕ run_wild(Coleson))",
        "conclusion": "lead_herd(Coleson)"
      },
      {
        "facts": [
          "fast(Coleson)"
        ],
        "rules": "fast(Coleson) → (strong(Coleson) ∧ black_coat(Coleson))",
        "conclusion": "strong(Coleson)"
      },
      {
        "facts": [
          "strong(Coleson)",
          "lead_herd(Coleson)"
        ],
        "rules": "strong(Coleson) → (lead_herd(Coleson) ⊕ roam_free(Coleson))",
        "conclusion": "¬roam_free(Coleson)"
      }
    ],
    "conclusion": "Coleson does not roam free.",
    "conclusion_fol": "¬roam_free(Coleson)",
    "answer": "True",
    "context": [
      "Coleson is mature.",
      "Coleson does not run wild.",
      "If Coleson is mature, then he either leads a herd or runs wild, but not both.",
      "Coleson is fast.",
      "If Coleson is fast, then he is strong and has a black coat.",
      "If Coleson is strong, then he either leads a herd or roams free, but not both."
    ],
    "context_fol": [
      "mature(Coleson)",
      "¬run_wild(Coleson)",
      "mature(Coleson) → (lead_herd(Coleson) ⊕ run_wild(Coleson))",
      "fast(Coleson)",
      "fast(Coleson) → (strong(Coleson) ∧ black_coat(Coleson))",
      "strong(Coleson) → (lead_herd(Coleson) ⊕ roam_free(Coleson))"
    ],
    "background_story": "Coleson was a proud and powerful stallion, leader of a vast remuda of wild mustangs that roamed the open ranges of the American West. With a shiny black coat and a spirit as free as the wind, he guided his herd across the plains, always on the lookout for fresh grazing lands and safe havens. Coleson's strength and wisdom earned him the respect of his remuda, who followed him through treacherous mountain passes and scorching desert landscapes. As the seasons changed, Coleson led his herd to hidden oases and secret meadows, ensuring their survival in the harsh but beautiful wilderness. His legacy as a fearless and loyal leader would be remembered for generations to come, his name becoming synonymous with the wild spirit of the American mustang.",
    "name": "Coleson",
    "keyword": "remuda",
    "subject_category": "horse"
  },
  {
    "facts": [
      "Maisy volunteers regularly.",
      "Maisy starts her own business.",
      "Maisy does not know the local history.",
      "Maisy supports local initiatives."
    ],
    "facts_fol": [
      "volunteers_regularly(Maisy)",
      "start_own_business(Maisy)",
      "¬knows_history(Maisy)",
      "supports_local(Maisy)"
    ],
    "rules": [
      "If Maisy is passionate about her community, then she either leads a non-profit organization or starts her own business, but not both.",
      "Maisy either cares deeply or is passionate about her community.",
      "If Maisy lives locally, then she either cares deeply about her community or volunteers regularly, but not both.",
      "If Maisy knows the local history or supports local initiatives, then she lives locally."
    ],
    "rules_fol": [
      "passionate_about_community(Maisy) → (lead_non_profit(Maisy) ⊕ start_own_business(Maisy))",
      "cares_deeply(Maisy) ∨ passionate_about_community(Maisy)",
      "lives_locally(Maisy) → (cares_deeply(Maisy) ⊕ volunteers_regularly(Maisy))",
      "(knows_history(Maisy) ∨ supports_local(Maisy)) → lives_locally(Maisy)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If someone is visionary, then they are passionate about their community and foster collaboration.",
      "If someone helps others and loves their city, then they care deeply.",
      "For all individuals, if they love their city and work locally, then they live locally."
    ],
    "distracting_rules_fol": [
      "∀x (visionary(x) → (passionate_about_community(x) ∧ fosters_collaboration(x)))",
      "∀x ((helps_others(x) ∧ loves_city(x)) → cares_deeply(x))",
      "∀x ((loves_city(x) ∧ works_locally(x)) → lives_locally(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Maisy does not know the local history.",
          "Maisy supports local initiatives."
        ],
        "rules": "If Maisy knows the local history or supports local initiatives, then she lives locally.",
        "conclusion": "Maisy lives locally."
      },
      {
        "facts": [
          "Maisy lives locally.",
          "Maisy volunteers regularly."
        ],
        "rules": "If Maisy lives locally, then she either cares deeply about her community or volunteers regularly, but not both.",
        "conclusion": "Maisy does not care deeply."
      },
      {
        "facts": [
          "Maisy does not care deeply."
        ],
        "rules": "Maisy either cares deeply or is passionate about her community.",
        "conclusion": "Maisy is passionate about her community."
      },
      {
        "facts": [
          "Maisy is passionate about her community.",
          "Maisy starts her own business."
        ],
        "rules": "If Maisy is passionate about her community, then she either leads a non-profit organization or starts her own business, but not both.",
        "conclusion": "Maisy does not lead a non-profit organization."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬knows_history(Maisy)",
          "supports_local(Maisy)"
        ],
        "rules": "(knows_history(Maisy) ∨ supports_local(Maisy)) → lives_locally(Maisy)",
        "conclusion": "lives_locally(Maisy)"
      },
      {
        "facts": [
          "lives_locally(Maisy)",
          "volunteers_regularly(Maisy)"
        ],
        "rules": "lives_locally(Maisy) → (cares_deeply(Maisy) ⊕ volunteers_regularly(Maisy))",
        "conclusion": "¬cares_deeply(Maisy)"
      },
      {
        "facts": [
          "¬cares_deeply(Maisy)"
        ],
        "rules": "cares_deeply(Maisy) ∨ passionate_about_community(Maisy)",
        "conclusion": "passionate_about_community(Maisy)"
      },
      {
        "facts": [
          "passionate_about_community(Maisy)",
          "start_own_business(Maisy)"
        ],
        "rules": "passionate_about_community(Maisy) → (lead_non_profit(Maisy) ⊕ start_own_business(Maisy))",
        "conclusion": "¬lead_non_profit(Maisy)"
      }
    ],
    "conclusion": "Maisy does not lead a non-profit organization.",
    "conclusion_fol": "¬lead_non_profit(Maisy)",
    "answer": "True",
    "context": [
      "Maisy does not know the local history.",
      "Maisy supports local initiatives.",
      "If Maisy knows the local history or supports local initiatives, then she lives locally.",
      "Maisy volunteers regularly.",
      "If Maisy lives locally, then she either cares deeply about her community or volunteers regularly, but not both.",
      "Maisy either cares deeply or is passionate about her community.",
      "Maisy starts her own business.",
      "If Maisy is passionate about her community, then she either leads a non-profit organization or starts her own business, but not both."
    ],
    "context_fol": [
      "¬knows_history(Maisy)",
      "supports_local(Maisy)",
      "(knows_history(Maisy) ∨ supports_local(Maisy)) → lives_locally(Maisy)",
      "volunteers_regularly(Maisy)",
      "lives_locally(Maisy) → (cares_deeply(Maisy) ⊕ volunteers_regularly(Maisy))",
      "cares_deeply(Maisy) ∨ passionate_about_community(Maisy)",
      "start_own_business(Maisy)",
      "passionate_about_community(Maisy) → (lead_non_profit(Maisy) ⊕ start_own_business(Maisy))"
    ],
    "background_story": "Maisy was born and raised in Youngstown, Ohio, a city with a rich history of steel production. Growing up, she heard stories about the city's heyday and its decline. Determined to contribute to its revitalization, Maisy pursued a degree in urban planning. After college, she returned to Youngstown and joined a local non-profit focused on community development. Maisy's passion and innovative ideas quickly made her a leader in the organization. She worked tirelessly to bring new businesses and arts initiatives to the area, helping to revitalize the downtown district. Maisy's love for Youngstown and its people drove her to make a difference, earning her the title of 'Youngstown's Young Leader' in the local press.",
    "name": "Maisy",
    "keyword": "youngstown",
    "subject_category": "human"
  },
  {
    "facts": [
      "Emerson is knowledgeable.",
      "Emerson is specialized."
    ],
    "facts_fol": [
      "knowledgeable(Emerson)",
      "specialized(Emerson)"
    ],
    "rules": [
      "If Emerson is knowledgeable, then he is either influential or respected, but not both.",
      "If Emerson is an expert, then he is influential.",
      "Anyone who is specialized in their field is an expert."
    ],
    "rules_fol": [
      "knowledgeable(Emerson) → (influential(Emerson) ⊕ respected(Emerson))",
      "expert(Emerson) → influential(Emerson)",
      "∀x (specialized(x) → expert(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Emerson is published, then he is influential.",
      "If Emerson is a dedicated scholar, then he is an expert or a published author."
    ],
    "distracting_rules_fol": [
      "published(Emerson) → influential(Emerson)",
      "dedicated_scholar(Emerson) → (expert(Emerson) ∨ published_author(Emerson))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Emerson is specialized."
        ],
        "rules": "Anyone who is specialized in their field is an expert.",
        "conclusion": "Emerson is an expert."
      },
      {
        "facts": [
          "Emerson is an expert."
        ],
        "rules": "If Emerson is an expert, then he is influential.",
        "conclusion": "Emerson is influential."
      },
      {
        "facts": [
          "Emerson is knowledgeable.",
          "Emerson is influential."
        ],
        "rules": "If Emerson is knowledgeable, then he is either influential or respected, but not both.",
        "conclusion": "Emerson is respected."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "specialized(Emerson)"
        ],
        "rules": "∀x (specialized(x) → expert(x))",
        "conclusion": "expert(Emerson)"
      },
      {
        "facts": [
          "expert(Emerson)"
        ],
        "rules": "expert(Emerson) → influential(Emerson)",
        "conclusion": "influential(Emerson)"
      },
      {
        "facts": [
          "knowledgeable(Emerson)",
          "influential(Emerson)"
        ],
        "rules": "knowledgeable(Emerson) → (influential(Emerson) ⊕ respected(Emerson))",
        "conclusion": "respected(Emerson)"
      }
    ],
    "conclusion": "Emerson is respected.",
    "conclusion_fol": "respected(Emerson)",
    "answer": "False",
    "context": [
      "Emerson is specialized.",
      "Anyone who is specialized in their field is an expert.",
      "If Emerson is an expert, then he is influential.",
      "Emerson is knowledgeable.",
      "If Emerson is knowledgeable, then he is either influential or respected, but not both."
    ],
    "context_fol": [
      "specialized(Emerson)",
      "∀x (specialized(x) → expert(x))",
      "expert(Emerson) → influential(Emerson)",
      "knowledgeable(Emerson)",
      "knowledgeable(Emerson) → (influential(Emerson) ⊕ respected(Emerson))"
    ],
    "background_story": "Emerson was a brilliant and inquisitive scholar of ancient languages. His fascination with the Semitic languages, including Hebrew, Arabic, and Aramaic, led him to dedicate his career to studying their history and evolution. Born into a family of modest means, Emerson's thirst for knowledge drove him to work multiple jobs to fund his education. He eventually earned a prestigious fellowship to study in the Middle East, where he immersed himself in the cultures and dialects of the region. Emerson's groundbreaking research on the Semitic roots of many modern languages earned him international recognition, and he became a leading authority in his field. His work not only shed light on the linguistic heritage of the Semitic peoples but also fostered greater understanding and appreciation between different cultural communities.",
    "name": "Emerson",
    "keyword": "semitic",
    "subject_category": "human"
  },
  {
    "facts": [
      "Rylan sketches details.",
      "Rylan mixes media.",
      "Rylan does not add shades."
    ],
    "facts_fol": [
      "sketches_details(Rylan)",
      "mixes_media(Rylan)",
      "¬adds_shades(Rylan)"
    ],
    "rules": [
      "Rylan is either creative or emotional (or both).",
      "Rylan either paints well or is creative.",
      "A person either draws realistic or paints well, but not necessarily both.",
      "If someone uses color and sketches details, then they can draw realistic images.",
      "Any person who mixes media or adds shades can use color."
    ],
    "rules_fol": [
      "creative(Rylan) ∨ emotional(Rylan)",
      "paints_well(Rylan) ∨ creative(Rylan)",
      "∀x (draws_realistic(x) ⊕ paints_well(x))",
      "∀x ((uses_color(x) ∧ sketches_details(x)) → draws_realistic(x))",
      "∀x ((mixes_media(x) ∨ adds_shades(x)) → uses_color(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Rylan is artistic, then he is either creative or sensitive, but not both.",
      "Anyone who expresses vividly either captures the essence of their subject or paints well.",
      "If Rylan is an artist, then he either draws realistic or sculpts figures, but not both.",
      "If Rylan expresses vividly, then he either uses color or makes a masterpiece."
    ],
    "distracting_rules_fol": [
      "is_artistic(Rylan) → (creative(Rylan) ⊕ is_sensitive(Rylan))",
      "∀x (expresses_vividly(x) → (captures_essence(x) ∨ paints_well(x)))",
      "is_artist(Rylan) → (draws_realistic(Rylan) ⊕ sculpts_figures(Rylan))",
      "expresses_vividly(Rylan) → (uses_color(Rylan) ∨ makes_masterpiece(Rylan))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Rylan mixes media.",
          "Rylan does not add shades."
        ],
        "rules": "Any person who mixes media or adds shades can use color.",
        "conclusion": "Rylan uses color."
      },
      {
        "facts": [
          "Rylan uses color.",
          "Rylan sketches details."
        ],
        "rules": "If someone uses color and sketches details, then they can draw realistic images.",
        "conclusion": "Rylan draws realistic."
      },
      {
        "facts": [
          "Rylan draws realistic."
        ],
        "rules": "A person either draws realistic or paints well, but not necessarily both.",
        "conclusion": "Rylan does not paint well."
      },
      {
        "facts": [
          "Rylan does not paint well."
        ],
        "rules": "Rylan either paints well or is creative.",
        "conclusion": "Rylan is creative."
      },
      {
        "facts": [
          "Rylan is creative."
        ],
        "rules": "Rylan is either creative or emotional (or both).",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "mixes_media(Rylan)",
          "¬adds_shades(Rylan)"
        ],
        "rules": "∀x ((mixes_media(x) ∨ adds_shades(x)) → uses_color(x))",
        "conclusion": "uses_color(Rylan)"
      },
      {
        "facts": [
          "uses_color(Rylan)",
          "sketches_details(Rylan)"
        ],
        "rules": "∀x ((uses_color(x) ∧ sketches_details(x)) → draws_realistic(x))",
        "conclusion": "draws_realistic(Rylan)"
      },
      {
        "facts": [
          "draws_realistic(Rylan)"
        ],
        "rules": "∀x (draws_realistic(x) ⊕ paints_well(x))",
        "conclusion": "¬paints_well(Rylan)"
      },
      {
        "facts": [
          "¬paints_well(Rylan)"
        ],
        "rules": "paints_well(Rylan) ∨ creative(Rylan)",
        "conclusion": "creative(Rylan)"
      },
      {
        "facts": [
          "creative(Rylan)"
        ],
        "rules": "creative(Rylan) ∨ emotional(Rylan)",
        "conclusion": null
      }
    ],
    "conclusion": "Rylan is not emotional.",
    "conclusion_fol": "¬emotional(Rylan)",
    "answer": "Uncertain",
    "context": [
      "Rylan mixes media.",
      "Rylan does not add shades.",
      "Any person who mixes media or adds shades can use color.",
      "Rylan sketches details.",
      "If someone uses color and sketches details, then they can draw realistic images.",
      "A person either draws realistic or paints well, but not necessarily both.",
      "Rylan either paints well or is creative.",
      "Rylan is either creative or emotional (or both)."
    ],
    "context_fol": [
      "mixes_media(Rylan)",
      "¬adds_shades(Rylan)",
      "∀x ((mixes_media(x) ∨ adds_shades(x)) → uses_color(x))",
      "sketches_details(Rylan)",
      "∀x ((uses_color(x) ∧ sketches_details(x)) → draws_realistic(x))",
      "∀x (draws_realistic(x) ⊕ paints_well(x))",
      "paints_well(Rylan) ∨ creative(Rylan)",
      "creative(Rylan) ∨ emotional(Rylan)"
    ],
    "background_story": "Rylan was a talented young artist, known for his vivid paintings that captured the essence of the city. However, his creative process was emotionally draining. He would often spend hours, even days, perfecting a single piece, pouring all his emotions into it. The pressure to constantly produce new work, combined with the criticism he faced from art critics, began to take a toll on his mental health. Rylan felt like he was losing himself in his art, and the creative outlet that once brought him joy now felt like a burden. Despite his success, he couldn't shake off the feeling of being drained, both physically and mentally, by the demands of his craft.",
    "name": "Rylan",
    "keyword": "draining",
    "subject_category": "human"
  },
  {
    "facts": [
      "Colten fights against injustice.",
      "Colten embraces self-sufficiency."
    ],
    "facts_fol": [
      "fights_injustice(Colten)",
      "embraces_self_sufficiency(Colten)"
    ],
    "rules": [
      "For all humans, if a person follows Gandhian principles, then they advocate for social justice and live a simple life.",
      "Everyone who fights against injustice advocates for social justice.",
      "A person either embraces self-sufficiency or follows Gandhian principles, but not necessarily both."
    ],
    "rules_fol": [
      "∀x (follows_gandhian_principles(x) → (advocates_for_social_justice(x) ∧ lives_a_simple_life(x)))",
      "∀x (fights_injustice(x) → advocates_for_social_justice(x))",
      "∀x (embraces_self_sufficiency(x) ⊕ follows_gandhian_principles(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Colten either supports the environment or promotes human rights (but not both), then he advocates for social justice.",
      "If someone promotes peace and helps others, then they follow Gandhian principles."
    ],
    "distracting_rules_fol": [
      "(supports_environment(Colten) ⊕ promotes_human_rights(Colten)) → advocates_for_social_justice(Colten)",
      "∀x ((promotes_peace(x) ∧ helps_others(x)) → follows_gandhian_principles(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Colten embraces self-sufficiency."
        ],
        "rules": "A person either embraces self-sufficiency or follows Gandhian principles, but not necessarily both.",
        "conclusion": "Colten does not follow Gandhian principles."
      },
      {
        "facts": [
          "Colten fights against injustice."
        ],
        "rules": "Everyone who fights against injustice advocates for social justice.",
        "conclusion": "Colten advocates for social justice."
      },
      {
        "facts": [
          "Colten does not follow Gandhian principles.",
          "Colten advocates for social justice."
        ],
        "rules": "For all humans, if a person follows Gandhian principles, then they advocate for social justice and live a simple life.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "embraces_self_sufficiency(Colten)"
        ],
        "rules": "∀x (embraces_self_sufficiency(x) ⊕ follows_gandhian_principles(x))",
        "conclusion": "¬follows_gandhian_principles(Colten)"
      },
      {
        "facts": [
          "fights_injustice(Colten)"
        ],
        "rules": "∀x (fights_injustice(x) → advocates_for_social_justice(x))",
        "conclusion": "advocates_for_social_justice(Colten)"
      },
      {
        "facts": [
          "¬follows_gandhian_principles(Colten)",
          "advocates_for_social_justice(Colten)"
        ],
        "rules": "∀x (follows_gandhian_principles(x) → (advocates_for_social_justice(x) ∧ lives_a_simple_life(x)))",
        "conclusion": null
      }
    ],
    "conclusion": "Colten does not live a simple life.",
    "conclusion_fol": "¬lives_a_simple_life(Colten)",
    "answer": "Uncertain",
    "context": [
      "Colten embraces self-sufficiency.",
      "A person either embraces self-sufficiency or follows Gandhian principles, but not necessarily both.",
      "Colten fights against injustice.",
      "Everyone who fights against injustice advocates for social justice.",
      "For all humans, if a person follows Gandhian principles, then they advocate for social justice and live a simple life."
    ],
    "context_fol": [
      "embraces_self_sufficiency(Colten)",
      "∀x (embraces_self_sufficiency(x) ⊕ follows_gandhian_principles(x))",
      "fights_injustice(Colten)",
      "∀x (fights_injustice(x) → advocates_for_social_justice(x))",
      "∀x (follows_gandhian_principles(x) → (advocates_for_social_justice(x) ∧ lives_a_simple_life(x)))"
    ],
    "background_story": "Colten was a young social activist deeply inspired by Mahatma Gandhi's principles of non-violence and simplicity. He believed in living a life that embodied Gandhi's teachings, adopting a minimalist lifestyle and dedicating himself to community service. Colten led peaceful protests against social injustices, advocating for environmental conservation and human rights. His gandhian approach to conflict resolution earned him respect from his peers and community leaders. Colten's commitment to self-sufficiency and sustainability led him to establish a community garden, where he taught others about organic farming and the importance of living in harmony with nature. Through his actions, Colten aimed to create a ripple effect of kindness and compassion, inspiring others to embrace the gandhian way of life.",
    "name": "Colten",
    "keyword": "gandhian",
    "subject_category": "human"
  },
  {
    "facts": [
      "Sylvie likes the outdoors.",
      "Sylvie cares about wildlife.",
      "Sylvie uses her hands.",
      "Sylvie is artistic.",
      "Sylvie does not sing songs."
    ],
    "facts_fol": [
      "likes_outdoors(Sylvie)",
      "cares_wildlife(Sylvie)",
      "uses_hands(Sylvie)",
      "is_artistic(Sylvie)",
      "¬sings_songs(Sylvie)"
    ],
    "rules": [
      "All people who craft are creative.",
      "Anyone who likes the outdoors or cares about wildlife is a nature lover.",
      "If someone makes things and uses their hands, then they craft.",
      "If Sylvie is artistic, then she either sings songs or makes things, but not both."
    ],
    "rules_fol": [
      "∀x (crafts(x) → creative(x))",
      "∀x ((likes_outdoors(x) ∨ cares_wildlife(x)) → nature_lover(x))",
      "∀x ((makes_things(x) ∧ uses_hands(x)) → crafts(x))",
      "is_artistic(Sylvie) → (sings_songs(Sylvie) ⊕ makes_things(Sylvie))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Anyone who imagines is creative.",
      "Sylvie appreciates beauty or is a nature lover.",
      "If Sylvie is patient, then she is attentive and crafts things.",
      "If Sylvie is skilled, then she either makes things or writes books, but not both."
    ],
    "distracting_rules_fol": [
      "∀x (imagines(x) → creative(x))",
      "appreciates_beauty(Sylvie) ∨ nature_lover(Sylvie)",
      "patient(Sylvie) → (attentive(Sylvie) ∧ crafts(Sylvie))",
      "is_skilled(Sylvie) → (makes_things(Sylvie) ⊕ writes_books(Sylvie))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Sylvie is artistic.",
          "Sylvie does not sing songs."
        ],
        "rules": "If Sylvie is artistic, then she either sings songs or makes things, but not both.",
        "conclusion": "Sylvie makes things."
      },
      {
        "facts": [
          "Sylvie makes things.",
          "Sylvie uses her hands."
        ],
        "rules": "If someone makes things and uses their hands, then they craft.",
        "conclusion": "Sylvie crafts."
      },
      {
        "facts": [
          "Sylvie likes the outdoors.",
          "Sylvie cares about wildlife."
        ],
        "rules": "Anyone who likes the outdoors or cares about wildlife is a nature lover.",
        "conclusion": "Sylvie is a nature lover."
      },
      {
        "facts": [
          "Sylvie crafts."
        ],
        "rules": "All people who craft are creative.",
        "conclusion": "Sylvie is creative."
      },
      {
        "facts": [
          "Sylvie is creative.",
          "Sylvie is a nature lover."
        ],
        "rules": null,
        "conclusion": "Sylvie is either creative or a nature lover (or both)."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "is_artistic(Sylvie)",
          "¬sings_songs(Sylvie)"
        ],
        "rules": "is_artistic(Sylvie) → (sings_songs(Sylvie) ⊕ makes_things(Sylvie))",
        "conclusion": "makes_things(Sylvie)"
      },
      {
        "facts": [
          "makes_things(Sylvie)",
          "uses_hands(Sylvie)"
        ],
        "rules": "∀x ((makes_things(x) ∧ uses_hands(x)) → crafts(x))",
        "conclusion": "crafts(Sylvie)"
      },
      {
        "facts": [
          "likes_outdoors(Sylvie)",
          "cares_wildlife(Sylvie)"
        ],
        "rules": "∀x ((likes_outdoors(x) ∨ cares_wildlife(x)) → nature_lover(x))",
        "conclusion": "nature_lover(Sylvie)"
      },
      {
        "facts": [
          "crafts(Sylvie)"
        ],
        "rules": "∀x (crafts(x) → creative(x))",
        "conclusion": "creative(Sylvie)"
      },
      {
        "facts": [
          "creative(Sylvie)",
          "nature_lover(Sylvie)"
        ],
        "rules": null,
        "conclusion": "creative(Sylvie) ∨ nature_lover(Sylvie)"
      }
    ],
    "conclusion": "Sylvie is either creative or a nature lover (or both).",
    "conclusion_fol": "creative(Sylvie) ∨ nature_lover(Sylvie)",
    "answer": "True",
    "context": [
      "Sylvie is artistic.",
      "Sylvie does not sing songs.",
      "If Sylvie is artistic, then she either sings songs or makes things, but not both.",
      "Sylvie uses her hands.",
      "If someone makes things and uses their hands, then they craft.",
      "Sylvie likes the outdoors.",
      "Sylvie cares about wildlife.",
      "Anyone who likes the outdoors or cares about wildlife is a nature lover.",
      "All people who craft are creative."
    ],
    "context_fol": [
      "is_artistic(Sylvie)",
      "¬sings_songs(Sylvie)",
      "is_artistic(Sylvie) → (sings_songs(Sylvie) ⊕ makes_things(Sylvie))",
      "uses_hands(Sylvie)",
      "∀x ((makes_things(x) ∧ uses_hands(x)) → crafts(x))",
      "likes_outdoors(Sylvie)",
      "cares_wildlife(Sylvie)",
      "∀x ((likes_outdoors(x) ∨ cares_wildlife(x)) → nature_lover(x))",
      "∀x (crafts(x) → creative(x))"
    ],
    "background_story": "Sylvie was a gentle soul with a passion for nature and craftsmanship. She lived in a cozy little cottage on the edge of a forest, where she spent most of her days weaving and pottery. Sylvie's true masterpiece, however, was her birdnest collection. She would spend hours in the woods, carefully gathering twigs and feathers to recreate the intricate nests she found. Her home became a sanctuary for birds, with Sylvie meticulously crafting nests for them to lay their eggs in. As word of her birdnests spread, people from all over would visit Sylvie, seeking her unique creations. She would lovingly gift them a nest, along with stories of the birds that inspired her. Sylvie's birdnests became a symbol of warmth, safety, and the beauty of nature, reflecting the love and care she put into each one.",
    "name": "Sylvie",
    "keyword": "birdnest",
    "subject_category": "human"
  },
  {
    "facts": [
      "Solomon loves secrets.",
      "Solomon does not make toys.",
      "Solomon has skilled hands."
    ],
    "facts_fol": [
      "loves_secrets(Solomon)",
      "¬makes_toys(Solomon)",
      "skilled_hands(Solomon)"
    ],
    "rules": [
      "Solomon is either someone who loves secrets or a conventional person, but not both.",
      "If Solomon builds nooks, then he is a creative person.",
      "If Solomon is crafty, then he either builds nooks or makes toys, but not both.",
      "If Solomon has skilled hands, then he is crafty."
    ],
    "rules_fol": [
      "loves_secrets(Solomon) ⊕ conventional(Solomon)",
      "builds_nooks(Solomon) → creative(Solomon)",
      "is_crafty(Solomon) → (builds_nooks(Solomon) ⊕ makes_toys(Solomon))",
      "skilled_hands(Solomon) → is_crafty(Solomon)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If a person follows rules and likes order, then they are conventional.",
      "If Solomon is an artist, then he is either creative or methodical, but not both.",
      "If Solomon enjoys design and works with wood, then he builds nooks.",
      "Solomon enjoys woodwork or is crafty."
    ],
    "distracting_rules_fol": [
      "∀x ((follows_rules(x) ∧ likes_order(x)) → conventional(x))",
      "artist(Solomon) → (creative(Solomon) ⊕ methodical(Solomon))",
      "(enjoys_design(Solomon) ∧ works_wood(Solomon)) → builds_nooks(Solomon)",
      "enjoys_woodwork(Solomon) ∨ is_crafty(Solomon)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Solomon has skilled hands."
        ],
        "rules": "If Solomon has skilled hands, then he is crafty.",
        "conclusion": "Solomon is crafty."
      },
      {
        "facts": [
          "Solomon is crafty.",
          "Solomon does not make toys."
        ],
        "rules": "If Solomon is crafty, then he either builds nooks or makes toys, but not both.",
        "conclusion": "Solomon builds nooks."
      },
      {
        "facts": [
          "Solomon builds nooks."
        ],
        "rules": "If Solomon builds nooks, then he is a creative person.",
        "conclusion": "Solomon is a creative person."
      },
      {
        "facts": [
          "Solomon loves secrets."
        ],
        "rules": "Solomon is either someone who loves secrets or a conventional person, but not both.",
        "conclusion": "Solomon is not a conventional person."
      },
      {
        "facts": [
          "Solomon is a creative person.",
          "Solomon is not a conventional person."
        ],
        "rules": null,
        "conclusion": "Solomon is either a creative person or a conventional person, but not both."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "skilled_hands(Solomon)"
        ],
        "rules": "skilled_hands(Solomon) → is_crafty(Solomon)",
        "conclusion": "is_crafty(Solomon)"
      },
      {
        "facts": [
          "is_crafty(Solomon)",
          "¬makes_toys(Solomon)"
        ],
        "rules": "is_crafty(Solomon) → (builds_nooks(Solomon) ⊕ makes_toys(Solomon))",
        "conclusion": "builds_nooks(Solomon)"
      },
      {
        "facts": [
          "builds_nooks(Solomon)"
        ],
        "rules": "builds_nooks(Solomon) → creative(Solomon)",
        "conclusion": "creative(Solomon)"
      },
      {
        "facts": [
          "loves_secrets(Solomon)"
        ],
        "rules": "loves_secrets(Solomon) ⊕ conventional(Solomon)",
        "conclusion": "¬conventional(Solomon)"
      },
      {
        "facts": [
          "creative(Solomon)",
          "¬conventional(Solomon)"
        ],
        "rules": null,
        "conclusion": "creative(Solomon) ⊕ conventional(Solomon)"
      }
    ],
    "conclusion": "Solomon is either a creative person or a conventional person, but not both.",
    "conclusion_fol": "creative(Solomon) ⊕ conventional(Solomon)",
    "answer": "True",
    "context": [
      "Solomon has skilled hands.",
      "If Solomon has skilled hands, then he is crafty.",
      "Solomon does not make toys.",
      "If Solomon is crafty, then he either builds nooks or makes toys, but not both.",
      "If Solomon builds nooks, then he is a creative person.",
      "Solomon loves secrets.",
      "Solomon is either someone who loves secrets or a conventional person, but not both."
    ],
    "context_fol": [
      "skilled_hands(Solomon)",
      "skilled_hands(Solomon) → is_crafty(Solomon)",
      "¬makes_toys(Solomon)",
      "is_crafty(Solomon) → (builds_nooks(Solomon) ⊕ makes_toys(Solomon))",
      "builds_nooks(Solomon) → creative(Solomon)",
      "loves_secrets(Solomon)",
      "loves_secrets(Solomon) ⊕ conventional(Solomon)"
    ],
    "background_story": "Solomon was a eccentric old carpenter who lived in a quaint, seaside town. He was known for his whimsical creations, but most of all, for his love of building intricate cubbies. His workshop was a marvel, filled with nooks and crannies, each one telling a story. Solomon's passion for cubbies began when he was a child, hiding treasures in secret spots around his family's old mansion. As he grew older, this fascination never faded. He built cubbies in trees, in bookshelves, and even in the town's library, where children would discover hidden books and notes. Solomon's cubbies became legendary, symbolizing the magic of discovery and the joy of simple, hidden wonders.",
    "name": "Solomon",
    "keyword": "cubby",
    "subject_category": "person"
  },
  {
    "facts": [
      "Ricky is a dedicated craftsman.",
      "Ricky designs beautiful spaces.",
      "Ricky does not gain respect from his peers.",
      "Ricky does not use traditional techniques."
    ],
    "facts_fol": [
      "dedicated_craftsman(Ricky)",
      "design_beautiful_spaces(Ricky)",
      "¬gain_respect(Ricky)",
      "¬uses_traditional_techniques(Ricky)"
    ],
    "rules": [
      "If Ricky is skilled, then he can either create masterpieces or earn recognition, but not both.",
      "Every dedicated craftsman is either skilled or builds lasting structures.",
      "For Ricky, either he gains respect from his peers or earns recognition for his work, but not both.",
      "If Ricky is an experienced mason, then he either builds lasting structures or designs beautiful spaces, but not both.",
      "Ricky either uses traditional techniques or is an experienced mason, but not both."
    ],
    "rules_fol": [
      "skilled(Ricky) → (create_masterpieces(Ricky) ⊕ earn_recognition(Ricky))",
      "∀x (dedicated_craftsman(x) → (skilled(x) ∨ build_lasting_structures(x)))",
      "gain_respect(Ricky) ⊕ earn_recognition(Ricky)",
      "experienced_mason(Ricky) → (build_lasting_structures(Ricky) ⊕ design_beautiful_spaces(Ricky))",
      "uses_traditional_techniques(Ricky) ⊕ experienced_mason(Ricky)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Ricky works hard, then he pays attention to detail and is skilled.",
      "If Ricky is talented, then he can either produce pioneering work or earn recognition, but not both.",
      "If Ricky is hardworking and attentive to details, then he builds lasting structures.",
      "If someone works precisely and learns quickly, then they can become an experienced mason."
    ],
    "distracting_rules_fol": [
      "work_hard(Ricky) → (pay_attention(Ricky) ∧ skilled(Ricky))",
      "talented(Ricky) → (pioneering_work(Ricky) ⊕ earn_recognition(Ricky))",
      "hardworking(Ricky) → (attentive_to_details(Ricky) ∧ build_lasting_structures(Ricky))",
      "∀x ((works_precise(x) ∧ learns_quickly(x)) → experienced_mason(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Ricky does not use traditional techniques."
        ],
        "rules": "Ricky either uses traditional techniques or is an experienced mason, but not both.",
        "conclusion": "Ricky is an experienced mason."
      },
      {
        "facts": [
          "Ricky is an experienced mason.",
          "Ricky designs beautiful spaces."
        ],
        "rules": "If Ricky is an experienced mason, then he either builds lasting structures or designs beautiful spaces, but not both.",
        "conclusion": "Ricky does not build lasting structures."
      },
      {
        "facts": [
          "Ricky does not gain respect from his peers."
        ],
        "rules": "For Ricky, either he gains respect from his peers or earns recognition for his work, but not both.",
        "conclusion": "Ricky earns recognition."
      },
      {
        "facts": [
          "Ricky is a dedicated craftsman.",
          "Ricky does not build lasting structures."
        ],
        "rules": "Every dedicated craftsman is either skilled or builds lasting structures.",
        "conclusion": "Ricky is skilled."
      },
      {
        "facts": [
          "Ricky is skilled.",
          "Ricky earns recognition."
        ],
        "rules": "If Ricky is skilled, then he can either create masterpieces or earn recognition, but not both.",
        "conclusion": "Ricky does not create masterpieces."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬uses_traditional_techniques(Ricky)"
        ],
        "rules": "uses_traditional_techniques(Ricky) ⊕ experienced_mason(Ricky)",
        "conclusion": "experienced_mason(Ricky)"
      },
      {
        "facts": [
          "experienced_mason(Ricky)",
          "design_beautiful_spaces(Ricky)"
        ],
        "rules": "experienced_mason(Ricky) → (build_lasting_structures(Ricky) ⊕ design_beautiful_spaces(Ricky))",
        "conclusion": "¬build_lasting_structures(Ricky)"
      },
      {
        "facts": [
          "¬gain_respect(Ricky)"
        ],
        "rules": "gain_respect(Ricky) ⊕ earn_recognition(Ricky)",
        "conclusion": "earn_recognition(Ricky)"
      },
      {
        "facts": [
          "dedicated_craftsman(Ricky)",
          "¬build_lasting_structures(Ricky)"
        ],
        "rules": "∀x (dedicated_craftsman(x) → (skilled(x) ∨ build_lasting_structures(x)))",
        "conclusion": "skilled(Ricky)"
      },
      {
        "facts": [
          "skilled(Ricky)",
          "earn_recognition(Ricky)"
        ],
        "rules": "skilled(Ricky) → (create_masterpieces(Ricky) ⊕ earn_recognition(Ricky))",
        "conclusion": "¬create_masterpieces(Ricky)"
      }
    ],
    "conclusion": "Ricky does not create masterpieces.",
    "conclusion_fol": "¬create_masterpieces(Ricky)",
    "answer": "True",
    "context": [
      "Ricky does not use traditional techniques.",
      "Ricky either uses traditional techniques or is an experienced mason, but not both.",
      "Ricky designs beautiful spaces.",
      "If Ricky is an experienced mason, then he either builds lasting structures or designs beautiful spaces, but not both.",
      "Ricky does not gain respect from his peers.",
      "For Ricky, either he gains respect from his peers or earns recognition for his work, but not both.",
      "Ricky is a dedicated craftsman.",
      "Every dedicated craftsman is either skilled or builds lasting structures.",
      "If Ricky is skilled, then he can either create masterpieces or earn recognition, but not both."
    ],
    "context_fol": [
      "¬uses_traditional_techniques(Ricky)",
      "uses_traditional_techniques(Ricky) ⊕ experienced_mason(Ricky)",
      "design_beautiful_spaces(Ricky)",
      "experienced_mason(Ricky) → (build_lasting_structures(Ricky) ⊕ design_beautiful_spaces(Ricky))",
      "¬gain_respect(Ricky)",
      "gain_respect(Ricky) ⊕ earn_recognition(Ricky)",
      "dedicated_craftsman(Ricky)",
      "∀x (dedicated_craftsman(x) → (skilled(x) ∨ build_lasting_structures(x)))",
      "skilled(Ricky) → (create_masterpieces(Ricky) ⊕ earn_recognition(Ricky))"
    ],
    "background_story": "Ricky was a skilled stonemason who spent most of his life building and repairing chimneystacks in the quaint village of Ashwood. He took great pride in his work, ensuring each stack was sturdy and aesthetically pleasing. Ricky's most notable project was the restoration of the village's historic manor house chimneystack, which had been damaged in a storm. He painstakingly rebuilt the stack, using traditional techniques and materials to maintain its original charm. The villagers praised Ricky's craftsmanship, and his chimneystacks became a hallmark of the village's architectural heritage. As the years passed, Ricky's reputation as a master stonemason spread, and people came from afar to see his impressive chimneystacks and learn from his expertise.",
    "name": "Ricky",
    "keyword": "chimneystack",
    "subject_category": "human"
  },
  {
    "facts": [
      "Garrett is diligent.",
      "Garrett is an influential scientist.",
      "Garrett does not create detailed illustrations.",
      "Garrett is precise.",
      "Garrett is not methodical."
    ],
    "facts_fol": [
      "is_diligent(Garrett)",
      "influential_scientist(Garrett)",
      "¬create_detailed_illustrations(Garrett)",
      "is_precise(Garrett)",
      "¬is_methodical(Garrett)"
    ],
    "rules": [
      "If Garrett studies nature, then he creates detailed illustrations and contributes to future research.",
      "If Garrett is curious, then he either documents his findings or studies nature, but not both.",
      "If Garrett is diligent, then he documents his findings and publishes papers.",
      "All observant historical figures are curious and love learning.",
      "If Garrett is precise, then he is either methodical or observant, but not both."
    ],
    "rules_fol": [
      "study_nature(Garrett) → (create_detailed_illustrations(Garrett) ∧ contribute_to_future_research(Garrett))",
      "is_curious(Garrett) → (document_findings(Garrett) ⊕ study_nature(Garrett))",
      "is_diligent(Garrett) → (document_findings(Garrett) ∧ publish_papers(Garrett))",
      "∀x (observant(x) → (is_curious(x) ∧ love_learning(x)))",
      "is_precise(Garrett) → (is_methodical(Garrett) ⊕ observant(Garrett))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Garrett is a pioneer, then he either contributes to future research or leaves a lasting legacy, but not both.",
      "If a historical figure examines specimens and records observations, then they study nature.",
      "Any historical figure who makes notes or draws diagrams can document their findings.",
      "Every historical figure who examines specimens is either curious or classifies organisms (or both).",
      "If Garrett either examines specimens or tracks behavior (but not both), then he is observant."
    ],
    "distracting_rules_fol": [
      "is_pioneer(Garrett) → (contribute_to_future_research(Garrett) ⊕ leave_lasting_legacy(Garrett))",
      "∀x ((examines_specimens(x) ∧ records_observations(x)) → study_nature(x))",
      "∀x ((makes_notes(x) ∨ draws_diagrams(x)) → document_findings(x))",
      "∀x (examine_specimens(x) → (is_curious(x) ∨ classify_organisms(x)))",
      "(examines_specimens(Garrett) ⊕ tracks_behavior(Garrett)) → observant(Garrett)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Garrett is precise.",
          "Garrett is not methodical."
        ],
        "rules": "If Garrett is precise, then he is either methodical or observant, but not both.",
        "conclusion": "Garrett is observant."
      },
      {
        "facts": [
          "Garrett is observant."
        ],
        "rules": "All observant historical figures are curious and love learning.",
        "conclusion": "Garrett is curious."
      },
      {
        "facts": [
          "Garrett is diligent."
        ],
        "rules": "If Garrett is diligent, then he documents his findings and publishes papers.",
        "conclusion": "Garrett documents his findings."
      },
      {
        "facts": [
          "Garrett is curious.",
          "Garrett documents his findings."
        ],
        "rules": "If Garrett is curious, then he either documents his findings or studies nature, but not both.",
        "conclusion": "Garrett does not study nature."
      },
      {
        "facts": [
          "Garrett does not study nature.",
          "Garrett does not create detailed illustrations."
        ],
        "rules": "If Garrett studies nature, then he creates detailed illustrations and contributes to future research.",
        "conclusion": null
      },
      {
        "facts": [
          "Garrett is an influential scientist."
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "is_precise(Garrett)",
          "¬is_methodical(Garrett)"
        ],
        "rules": "is_precise(Garrett) → (is_methodical(Garrett) ⊕ observant(Garrett))",
        "conclusion": "observant(Garrett)"
      },
      {
        "facts": [
          "observant(Garrett)"
        ],
        "rules": "∀x (observant(x) → (is_curious(x) ∧ love_learning(x)))",
        "conclusion": "is_curious(Garrett)"
      },
      {
        "facts": [
          "is_diligent(Garrett)"
        ],
        "rules": "is_diligent(Garrett) → (document_findings(Garrett) ∧ publish_papers(Garrett))",
        "conclusion": "document_findings(Garrett)"
      },
      {
        "facts": [
          "is_curious(Garrett)",
          "document_findings(Garrett)"
        ],
        "rules": "is_curious(Garrett) → (document_findings(Garrett) ⊕ study_nature(Garrett))",
        "conclusion": "¬study_nature(Garrett)"
      },
      {
        "facts": [
          "¬study_nature(Garrett)",
          "¬create_detailed_illustrations(Garrett)"
        ],
        "rules": "study_nature(Garrett) → (create_detailed_illustrations(Garrett) ∧ contribute_to_future_research(Garrett))",
        "conclusion": null
      },
      {
        "facts": [
          "influential_scientist(Garrett)"
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "conclusion": "If Garrett is an influential scientist, then he either makes groundbreaking discoveries or contributes to future research (or both).",
    "conclusion_fol": "influential_scientist(Garrett) → (make_groundbreaking_discoveries(Garrett) ∨ contribute_to_future_research(Garrett))",
    "answer": "Uncertain",
    "context": [
      "Garrett is precise.",
      "Garrett is not methodical.",
      "If Garrett is precise, then he is either methodical or observant, but not both.",
      "All observant historical figures are curious and love learning.",
      "Garrett is diligent.",
      "If Garrett is diligent, then he documents his findings and publishes papers.",
      "If Garrett is curious, then he either documents his findings or studies nature, but not both.",
      "Garrett does not create detailed illustrations.",
      "If Garrett studies nature, then he creates detailed illustrations and contributes to future research.",
      "Garrett is an influential scientist."
    ],
    "context_fol": [
      "is_precise(Garrett)",
      "¬is_methodical(Garrett)",
      "is_precise(Garrett) → (is_methodical(Garrett) ⊕ observant(Garrett))",
      "∀x (observant(x) → (is_curious(x) ∧ love_learning(x)))",
      "is_diligent(Garrett)",
      "is_diligent(Garrett) → (document_findings(Garrett) ∧ publish_papers(Garrett))",
      "is_curious(Garrett) → (document_findings(Garrett) ⊕ study_nature(Garrett))",
      "¬create_detailed_illustrations(Garrett)",
      "study_nature(Garrett) → (create_detailed_illustrations(Garrett) ∧ contribute_to_future_research(Garrett))",
      "influential_scientist(Garrett)"
    ],
    "background_story": "Garrett, a 17th-century English naturalist, dedicated his life to the study of insects and parasites. His most notable work involved the description of Phthirius, a genus of lice that infest the feathers of birds. Garrett's meticulous observations and detailed illustrations helped lay the foundation for modern entomology. His research on Phthirius and other ectoparasites led to a deeper understanding of the complex relationships between hosts and parasites, earning him recognition among his peers. Despite the challenges of his time, Garrett persevered, driven by an insatiable curiosity about the natural world and its smallest, yet most fascinating creatures.",
    "name": "Garrett",
    "keyword": "phthirius",
    "subject_category": "historical figure"
  },
  {
    "facts": [
      "Baylor is authentic in his interactions.",
      "Baylor does not speak honestly.",
      "Baylor is prone to clumsiness."
    ],
    "facts_fol": [
      "is_authentic(Baylor)",
      "¬speaks_honestly(Baylor)",
      "is_clumsy(Baylor)"
    ],
    "rules": [
      "Baylor is either authentic in his interactions or loved by his colleagues, but not necessarily both.",
      "If Baylor trips easily and speaks honestly, then he is awkward.",
      "Baylor is either prone to clumsiness or trips easily, but not necessarily both."
    ],
    "rules_fol": [
      "is_authentic(Baylor) ⊕ loved_by_colleagues(Baylor)",
      "(trips_easily(Baylor) ∧ speaks_honestly(Baylor)) → awkward(Baylor)",
      "is_clumsy(Baylor) ⊕ trips_easily(Baylor)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Baylor is genuine and means well, then he is loved by his colleagues.",
      "If Baylor has quirks or is humble, then he is awkward.",
      "If Baylor has big feet and moves quickly, then he trips easily."
    ],
    "distracting_rules_fol": [
      "(is_genuine(Baylor) ∧ means_well(Baylor)) → loved_by_colleagues(Baylor)",
      "(has_quirks(Baylor) ∨ is_humble(Baylor)) → awkward(Baylor)",
      "(has_big_feet(Baylor) ∧ moves_quickly(Baylor)) → trips_easily(Baylor)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Baylor is prone to clumsiness."
        ],
        "rules": "Baylor is either prone to clumsiness or trips easily, but not necessarily both.",
        "conclusion": "Baylor does not trip easily."
      },
      {
        "facts": [
          "Baylor does not trip easily.",
          "Baylor does not speak honestly."
        ],
        "rules": "If Baylor trips easily and speaks honestly, then he is awkward.",
        "conclusion": null
      },
      {
        "facts": [
          "Baylor is authentic in his interactions."
        ],
        "rules": "Baylor is either authentic in his interactions or loved by his colleagues, but not necessarily both.",
        "conclusion": "Baylor is not loved by his colleagues."
      },
      {
        "facts": [
          "Baylor is not loved by his colleagues."
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "is_clumsy(Baylor)"
        ],
        "rules": "is_clumsy(Baylor) ⊕ trips_easily(Baylor)",
        "conclusion": "¬trips_easily(Baylor)"
      },
      {
        "facts": [
          "¬trips_easily(Baylor)",
          "¬speaks_honestly(Baylor)"
        ],
        "rules": "(trips_easily(Baylor) ∧ speaks_honestly(Baylor)) → awkward(Baylor)",
        "conclusion": null
      },
      {
        "facts": [
          "is_authentic(Baylor)"
        ],
        "rules": "is_authentic(Baylor) ⊕ loved_by_colleagues(Baylor)",
        "conclusion": "¬loved_by_colleagues(Baylor)"
      },
      {
        "facts": [
          "¬loved_by_colleagues(Baylor)"
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "conclusion": "If Baylor is awkward, then he is intelligent and loved by his colleagues.",
    "conclusion_fol": "awkward(Baylor) → (intelligent(Baylor) ∧ loved_by_colleagues(Baylor))",
    "answer": "Uncertain",
    "context": [
      "Baylor is prone to clumsiness.",
      "Baylor is either prone to clumsiness or trips easily, but not necessarily both.",
      "Baylor does not speak honestly.",
      "If Baylor trips easily and speaks honestly, then he is awkward.",
      "Baylor is authentic in his interactions.",
      "Baylor is either authentic in his interactions or loved by his colleagues, but not necessarily both."
    ],
    "context_fol": [
      "is_clumsy(Baylor)",
      "is_clumsy(Baylor) ⊕ trips_easily(Baylor)",
      "¬speaks_honestly(Baylor)",
      "(trips_easily(Baylor) ∧ speaks_honestly(Baylor)) → awkward(Baylor)",
      "is_authentic(Baylor)",
      "is_authentic(Baylor) ⊕ loved_by_colleagues(Baylor)"
    ],
    "background_story": "Baylor was a brilliant engineer, but his social skills didn't quite match his technical prowess. He often found himself in awkward situations, tripping over his own feet or spilling coffee on his shirt during important meetings. Despite his best efforts, Baylor just couldn't seem to navigate the complexities of small talk or understand sarcasm. However, his quirks and awkwardness made him strangely endearing to his colleagues. They admired his intelligence and appreciated his genuine, if sometimes clumsy, attempts to connect with others. Baylor's awkward nature even led to some comedic moments, like the time he accidentally walked into a glass door, earning him the nickname 'Baylor the Bumbler' among his friends.",
    "name": "Baylor",
    "keyword": "awkward",
    "subject_category": "human"
  },
  {
    "facts": [
      "Arturo does not seek justice.",
      "Arturo challenges the status quo.",
      "Arturo does not mobilize public support."
    ],
    "facts_fol": [
      "¬seek_justice(Arturo)",
      "challenges_status(Arturo)",
      "¬mobilizes_support(Arturo)"
    ],
    "rules": [
      "If Arturo fights for his people's rights, then he inspires others.",
      "If Arturo is a leader, then he either seeks justice or fights for rights, but not both.",
      "If Arturo either challenges the status quo or mobilizes public support (but not both), then he is a leader."
    ],
    "rules_fol": [
      "fight_for_rights(Arturo) → inspire_others(Arturo)",
      "is_leader(Arturo) → (seek_justice(Arturo) ⊕ fight_for_rights(Arturo))",
      "(challenges_status(Arturo) ⊕ mobilizes_support(Arturo)) → is_leader(Arturo)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Arturo has conviction or faces injustice, then he will fight for his people's rights.",
      "If Arturo has influence, then he is either a leader or pursues equality, but not both."
    ],
    "distracting_rules_fol": [
      "(has_conviction(Arturo) ∨ faces_injustice(Arturo)) → fight_for_rights(Arturo)",
      "has_influence(Arturo) → (pursue_equality(Arturo) ⊕ is_leader(Arturo))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Arturo challenges the status quo.",
          "Arturo does not mobilize public support."
        ],
        "rules": "If Arturo either challenges the status quo or mobilizes public support (but not both), then he is a leader.",
        "conclusion": "Arturo is a leader."
      },
      {
        "facts": [
          "Arturo is a leader.",
          "Arturo does not seek justice."
        ],
        "rules": "If Arturo is a leader, then he either seeks justice or fights for rights, but not both.",
        "conclusion": "Arturo fights for his people's rights."
      },
      {
        "facts": [
          "Arturo fights for his people's rights."
        ],
        "rules": "If Arturo fights for his people's rights, then he inspires others.",
        "conclusion": "Arturo does not inspire others."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "challenges_status(Arturo)",
          "¬mobilizes_support(Arturo)"
        ],
        "rules": "(challenges_status(Arturo) ⊕ mobilizes_support(Arturo)) → is_leader(Arturo)",
        "conclusion": "is_leader(Arturo)"
      },
      {
        "facts": [
          "is_leader(Arturo)",
          "¬seek_justice(Arturo)"
        ],
        "rules": "is_leader(Arturo) → (seek_justice(Arturo) ⊕ fight_for_rights(Arturo))",
        "conclusion": "fight_for_rights(Arturo)"
      },
      {
        "facts": [
          "fight_for_rights(Arturo)"
        ],
        "rules": "fight_for_rights(Arturo) → inspire_others(Arturo)",
        "conclusion": "¬inspire_others(Arturo)"
      }
    ],
    "conclusion": "Arturo does not inspire others.",
    "conclusion_fol": "¬inspire_others(Arturo)",
    "answer": "False",
    "context": [
      "Arturo challenges the status quo.",
      "Arturo does not mobilize public support.",
      "If Arturo either challenges the status quo or mobilizes public support (but not both), then he is a leader.",
      "Arturo does not seek justice.",
      "If Arturo is a leader, then he either seeks justice or fights for rights, but not both.",
      "If Arturo fights for his people's rights, then he inspires others."
    ],
    "context_fol": [
      "challenges_status(Arturo)",
      "¬mobilizes_support(Arturo)",
      "(challenges_status(Arturo) ⊕ mobilizes_support(Arturo)) → is_leader(Arturo)",
      "¬seek_justice(Arturo)",
      "is_leader(Arturo) → (seek_justice(Arturo) ⊕ fight_for_rights(Arturo))",
      "fight_for_rights(Arturo) → inspire_others(Arturo)"
    ],
    "background_story": "Arturo was a passionate and charismatic leader from a small, ethnic minority group. He had always felt a deep connection to his ancestral homeland, which had been annexed by a neighboring country decades ago. Arturo became a vocal advocate for irredentism, calling for the reunification of his people's lost territories. He traveled the world, rallying support and raising awareness about the plight of his community. Despite facing opposition and criticism, Arturo remained resolute, convinced that his people had a rightful claim to their ancestral land. His movement gained momentum, inspiring a new generation of activists to join the cause. Arturo's unwavering dedication to the irredentist movement made him a hero to his people and a symbol of resistance against injustice.",
    "name": "Arturo",
    "keyword": "irredentism",
    "subject_category": "human"
  },
  {
    "facts": [
      "Alaya seeks justice.",
      "Alaya writes an exposé.",
      "Alaya speaks out.",
      "Alaya does not inspire change."
    ],
    "facts_fol": [
      "seek_justice(Alaya)",
      "write_exposé(Alaya)",
      "speak_out(Alaya)",
      "¬inspire_change(Alaya)"
    ],
    "rules": [
      "If Alaya exposes the truth, then she either brings about reform or faces persecution, but not both.",
      "If Alaya writes an exposé, then she either brings about reform or sparks protests, but not both.",
      "A historical figure either seeks justice or exposes the truth, but not necessarily both.",
      "If Alaya defies oppression, then she will spark protest.",
      "Every historical figure who speaks out either defies oppression or inspires change."
    ],
    "rules_fol": [
      "expose_truth(Alaya) → (bring_reform(Alaya) ⊕ face_persecution(Alaya))",
      "write_exposé(Alaya) → (bring_reform(Alaya) ⊕ spark_protest(Alaya))",
      "∀x (seek_justice(x) ⊕ expose_truth(x))",
      "defy_oppression(Alaya) → spark_protest(Alaya)",
      "∀x (speak_out(x) → (defy_oppression(x) ∨ inspire_change(x)))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Alaya challenges authority, then she either brings about reform or gains recognition.",
      "If Alaya either reveals secrets or challenges authority (but not both), then she exposes the truth.",
      "Any historical figure who challenges authority or reveals injustice can spark protests.",
      "Any historical figure who challenges authority or fights injustice will defy oppression."
    ],
    "distracting_rules_fol": [
      "challenge_authority(Alaya) → (bring_reform(Alaya) ∨ gain_recognition(Alaya))",
      "(reveal_secrets(Alaya) ⊕ challenge_authority(Alaya)) → expose_truth(Alaya)",
      "∀x ((challenge_authority(x) ∨ reveal_injustice(x)) → spark_protest(x))",
      "∀x ((challenge_authority(x) ∨ fight_injustice(x)) → defy_oppression(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Alaya speaks out.",
          "Alaya does not inspire change."
        ],
        "rules": "Every historical figure who speaks out either defies oppression or inspires change.",
        "conclusion": "Alaya defies oppression."
      },
      {
        "facts": [
          "Alaya defies oppression."
        ],
        "rules": "If Alaya defies oppression, then she will spark protest.",
        "conclusion": "Alaya sparks protests."
      },
      {
        "facts": [
          "Alaya seeks justice."
        ],
        "rules": "A historical figure either seeks justice or exposes the truth, but not necessarily both.",
        "conclusion": "Alaya does not expose the truth."
      },
      {
        "facts": [
          "Alaya writes an exposé.",
          "Alaya sparks protests."
        ],
        "rules": "If Alaya writes an exposé, then she either brings about reform or sparks protests, but not both.",
        "conclusion": "Alaya does not bring about reform."
      },
      {
        "facts": [
          "Alaya does not expose the truth.",
          "Alaya does not bring about reform."
        ],
        "rules": "If Alaya exposes the truth, then she either brings about reform or faces persecution, but not both.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "speak_out(Alaya)",
          "¬inspire_change(Alaya)"
        ],
        "rules": "∀x (speak_out(x) → (defy_oppression(x) ∨ inspire_change(x)))",
        "conclusion": "defy_oppression(Alaya)"
      },
      {
        "facts": [
          "defy_oppression(Alaya)"
        ],
        "rules": "defy_oppression(Alaya) → spark_protest(Alaya)",
        "conclusion": "spark_protest(Alaya)"
      },
      {
        "facts": [
          "seek_justice(Alaya)"
        ],
        "rules": "∀x (seek_justice(x) ⊕ expose_truth(x))",
        "conclusion": "¬expose_truth(Alaya)"
      },
      {
        "facts": [
          "write_exposé(Alaya)",
          "spark_protest(Alaya)"
        ],
        "rules": "write_exposé(Alaya) → (bring_reform(Alaya) ⊕ spark_protest(Alaya))",
        "conclusion": "¬bring_reform(Alaya)"
      },
      {
        "facts": [
          "¬expose_truth(Alaya)",
          "¬bring_reform(Alaya)"
        ],
        "rules": "expose_truth(Alaya) → (bring_reform(Alaya) ⊕ face_persecution(Alaya))",
        "conclusion": null
      }
    ],
    "conclusion": "Alaya faces persecution.",
    "conclusion_fol": "face_persecution(Alaya)",
    "answer": "Uncertain",
    "context": [
      "Alaya speaks out.",
      "Alaya does not inspire change.",
      "Every historical figure who speaks out either defies oppression or inspires change.",
      "If Alaya defies oppression, then she will spark protest.",
      "Alaya seeks justice.",
      "A historical figure either seeks justice or exposes the truth, but not necessarily both.",
      "Alaya writes an exposé.",
      "If Alaya writes an exposé, then she either brings about reform or sparks protests, but not both.",
      "If Alaya exposes the truth, then she either brings about reform or faces persecution, but not both."
    ],
    "context_fol": [
      "speak_out(Alaya)",
      "¬inspire_change(Alaya)",
      "∀x (speak_out(x) → (defy_oppression(x) ∨ inspire_change(x)))",
      "defy_oppression(Alaya) → spark_protest(Alaya)",
      "seek_justice(Alaya)",
      "∀x (seek_justice(x) ⊕ expose_truth(x))",
      "write_exposé(Alaya)",
      "write_exposé(Alaya) → (bring_reform(Alaya) ⊕ spark_protest(Alaya))",
      "expose_truth(Alaya) → (bring_reform(Alaya) ⊕ face_persecution(Alaya))"
    ],
    "background_story": "Alaya was a courageous journalist in the Soviet Union during the tumultuous years following Stalin's death. As the nation began to destalinize, stripping away the cult of personality and repressive policies of the former leader, Alaya saw an opportunity to shed light on the truth. She wrote daring exposés about the atrocities committed under Stalin's regime, giving voice to the countless victims and their families. Alaya's work was not without danger, but she persevered, believing that the path to a freer, more just society lay in confronting the dark past. Her writings played a significant role in the destalinization process, helping to bring about a new era of transparency and reform in the Soviet Union.",
    "name": "Alaya",
    "keyword": "destalinize",
    "subject_category": "historical figure"
  },
  {
    "facts": [
      "Hadassah is eloquent.",
      "Hadassah sets goals.",
      "Hadassah does not join a debate.",
      "Hadassah speaks publicly."
    ],
    "facts_fol": [
      "eloquent(Hadassah)",
      "sets_goals(Hadassah)",
      "¬joins_debate(Hadassah)",
      "speaks_publicly(Hadassah)"
    ],
    "rules": [
      "If Hadassah is determined, then she is either confident or eloquent, but not both.",
      "Anyone who sets goals or faces fears is determined.",
      "If Hadassah either joins a debate or speaks publicly (but not both), then she faces her fears."
    ],
    "rules_fol": [
      "determined(Hadassah) → (confident(Hadassah) ⊕ eloquent(Hadassah))",
      "∀x ((sets_goals(x) ∨ faces_fears(x)) → determined(x))",
      "(joins_debate(Hadassah) ⊕ speaks_publicly(Hadassah)) → faces_fears(Hadassah)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Anyone who practices presentation is either determined or inspires others (or both).",
      "Hadassah takes risks or faces fears."
    ],
    "distracting_rules_fol": [
      "∀x (practices_presentation(x) → (inspires_others(x) ∨ determined(x)))",
      "takes_risks(Hadassah) ∨ faces_fears(Hadassah)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Hadassah does not join a debate.",
          "Hadassah speaks publicly."
        ],
        "rules": "If Hadassah either joins a debate or speaks publicly (but not both), then she faces her fears.",
        "conclusion": "Hadassah faces her fears."
      },
      {
        "facts": [
          "Hadassah sets goals.",
          "Hadassah faces her fears."
        ],
        "rules": "Anyone who sets goals or faces fears is determined.",
        "conclusion": "Hadassah is determined."
      },
      {
        "facts": [
          "Hadassah is determined.",
          "Hadassah is eloquent."
        ],
        "rules": "If Hadassah is determined, then she is either confident or eloquent, but not both.",
        "conclusion": "Hadassah is not confident."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬joins_debate(Hadassah)",
          "speaks_publicly(Hadassah)"
        ],
        "rules": "(joins_debate(Hadassah) ⊕ speaks_publicly(Hadassah)) → faces_fears(Hadassah)",
        "conclusion": "faces_fears(Hadassah)"
      },
      {
        "facts": [
          "sets_goals(Hadassah)",
          "faces_fears(Hadassah)"
        ],
        "rules": "∀x ((sets_goals(x) ∨ faces_fears(x)) → determined(x))",
        "conclusion": "determined(Hadassah)"
      },
      {
        "facts": [
          "determined(Hadassah)",
          "eloquent(Hadassah)"
        ],
        "rules": "determined(Hadassah) → (confident(Hadassah) ⊕ eloquent(Hadassah))",
        "conclusion": "¬confident(Hadassah)"
      }
    ],
    "conclusion": "Hadassah is not confident.",
    "conclusion_fol": "¬confident(Hadassah)",
    "answer": "True",
    "context": [
      "Hadassah does not join a debate.",
      "Hadassah speaks publicly.",
      "If Hadassah either joins a debate or speaks publicly (but not both), then she faces her fears.",
      "Hadassah sets goals.",
      "Anyone who sets goals or faces fears is determined.",
      "Hadassah is eloquent.",
      "If Hadassah is determined, then she is either confident or eloquent, but not both."
    ],
    "context_fol": [
      "¬joins_debate(Hadassah)",
      "speaks_publicly(Hadassah)",
      "(joins_debate(Hadassah) ⊕ speaks_publicly(Hadassah)) → faces_fears(Hadassah)",
      "sets_goals(Hadassah)",
      "∀x ((sets_goals(x) ∨ faces_fears(x)) → determined(x))",
      "eloquent(Hadassah)",
      "determined(Hadassah) → (confident(Hadassah) ⊕ eloquent(Hadassah))"
    ],
    "background_story": "Hadassah had always been apprehensive about public speaking. As a shy and introverted college student, she would often avoid presentations and class discussions, fearing judgment and criticism. Despite her fears, Hadassah was determined to pursue a career in law, where eloquence and confidence were essential. She began to face her anxieties head-on, joining a debate club and practicing speeches in front of friends and family. With each small victory, Hadassah's apprehension slowly gave way to a growing sense of self-assurance. She learned to channel her nervous energy into passionate arguments and persuasive presentations. Though she still felt a twinge of apprehension before each speech, Hadassah had developed the tools to manage her fears and speak with conviction, inspiring others with her courage and determination.",
    "name": "Hadassah",
    "keyword": "apprehensive",
    "subject_category": "human"
  },
  {
    "facts": [
      "Fernando examines a rock.",
      "Fernando collects samples.",
      "Fernando does not map terrain."
    ],
    "facts_fol": [
      "examine_rock(Fernando)",
      "collect_samples(Fernando)",
      "¬map_terrain(Fernando)"
    ],
    "rules": [
      "Fernando either explores caves or studies crystals, but not both.",
      "Fernando either collects samples or explores caves, but not both.",
      "If Fernando examines rocks, then he either finds minerals or contributes to research, but not both.",
      "If Fernando analyzes data or searches terrain, then he can find minerals.",
      "Every geologist either maps terrain or analyzes data, but not necessarily both."
    ],
    "rules_fol": [
      "explore_caves(Fernando) ⊕ study_crystals(Fernando)",
      "collect_samples(Fernando) ⊕ explore_caves(Fernando)",
      "examine_rock(Fernando) → (find_minerals(Fernando) ⊕ contribute_to_research(Fernando))",
      "(analyze_data(Fernando) ∨ search_terrain(Fernando)) → find_minerals(Fernando)",
      "∀x (map_terrain(x) ⊕ analyze_data(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Every geologist who investigates rocks either studies crystals or understands structures.",
      "If Fernando seeks knowledge, then he will explore caves.",
      "If Fernando identifies species, then he either classifies formations or contributes to research, but not both.",
      "If Fernando either identifies rocks or classifies gems (but not both), then he finds minerals.",
      "All expert geologists analyze data and understand chemistry."
    ],
    "distracting_rules_fol": [
      "∀x (investigate_rocks(x) → (study_crystals(x) ∨ understand_structures(x)))",
      "seek_knowledge(Fernando) → explore_caves(Fernando)",
      "identify_species(Fernando) → (classify_formation(Fernando) ⊕ contribute_to_research(Fernando))",
      "(identify_rocks(Fernando) ⊕ classify_gems(Fernando)) → find_minerals(Fernando)",
      "∀x (expert_geologist(x) → (analyze_data(x) ∧ understand_chemistry(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Fernando does not map terrain."
        ],
        "rules": "Every geologist either maps terrain or analyzes data, but not necessarily both.",
        "conclusion": "Fernando analyzes data."
      },
      {
        "facts": [
          "Fernando analyzes data."
        ],
        "rules": "If Fernando analyzes data or searches terrain, then he can find minerals.",
        "conclusion": "Fernando finds minerals."
      },
      {
        "facts": [
          "Fernando examines a rock.",
          "Fernando finds minerals."
        ],
        "rules": "If Fernando examines rocks, then he either finds minerals or contributes to research, but not both.",
        "conclusion": "Fernando does not contribute to research."
      },
      {
        "facts": [
          "Fernando collects samples."
        ],
        "rules": "Fernando either collects samples or explores caves, but not both.",
        "conclusion": "Fernando does not explore caves."
      },
      {
        "facts": [
          "Fernando does not explore caves."
        ],
        "rules": "Fernando either explores caves or studies crystals, but not both.",
        "conclusion": "Fernando studies crystals."
      },
      {
        "facts": [
          "Fernando studies crystals.",
          "Fernando does not contribute to research."
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬map_terrain(Fernando)"
        ],
        "rules": "∀x (map_terrain(x) ⊕ analyze_data(x))",
        "conclusion": "analyze_data(Fernando)"
      },
      {
        "facts": [
          "analyze_data(Fernando)"
        ],
        "rules": "(analyze_data(Fernando) ∨ search_terrain(Fernando)) → find_minerals(Fernando)",
        "conclusion": "find_minerals(Fernando)"
      },
      {
        "facts": [
          "examine_rock(Fernando)",
          "find_minerals(Fernando)"
        ],
        "rules": "examine_rock(Fernando) → (find_minerals(Fernando) ⊕ contribute_to_research(Fernando))",
        "conclusion": "¬contribute_to_research(Fernando)"
      },
      {
        "facts": [
          "collect_samples(Fernando)"
        ],
        "rules": "collect_samples(Fernando) ⊕ explore_caves(Fernando)",
        "conclusion": "¬explore_caves(Fernando)"
      },
      {
        "facts": [
          "¬explore_caves(Fernando)"
        ],
        "rules": "explore_caves(Fernando) ⊕ study_crystals(Fernando)",
        "conclusion": "study_crystals(Fernando)"
      },
      {
        "facts": [
          "study_crystals(Fernando)",
          "¬contribute_to_research(Fernando)"
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "conclusion": "Fernando makes discoveries, or he studies crystals and contributes to research.",
    "conclusion_fol": "make_discoveries(Fernando) ∨ (study_crystals(Fernando) ∧ contribute_to_research(Fernando))",
    "answer": "Uncertain",
    "context": [
      "Fernando does not map terrain.",
      "Every geologist either maps terrain or analyzes data, but not necessarily both.",
      "If Fernando analyzes data or searches terrain, then he can find minerals.",
      "Fernando examines a rock.",
      "If Fernando examines rocks, then he either finds minerals or contributes to research, but not both.",
      "Fernando collects samples.",
      "Fernando either collects samples or explores caves, but not both.",
      "Fernando either explores caves or studies crystals, but not both."
    ],
    "context_fol": [
      "¬map_terrain(Fernando)",
      "∀x (map_terrain(x) ⊕ analyze_data(x))",
      "(analyze_data(Fernando) ∨ search_terrain(Fernando)) → find_minerals(Fernando)",
      "examine_rock(Fernando)",
      "examine_rock(Fernando) → (find_minerals(Fernando) ⊕ contribute_to_research(Fernando))",
      "collect_samples(Fernando)",
      "collect_samples(Fernando) ⊕ explore_caves(Fernando)",
      "explore_caves(Fernando) ⊕ study_crystals(Fernando)"
    ],
    "background_story": "Fernando, a renowned geologist, had spent his career studying the unique properties of crystals. His fascination with the prismatoid shape, a polyhedron with two identical faces, led him to discover a new mineral species in the depths of the Amazon rainforest. The mineral, which he named 'Prismatite,' exhibited extraordinary optical properties, refracting light into a kaleidoscope of colors. Fernando's discovery sparked a new wave of research in the field of crystallography, and he became known as the leading expert on prismatoid crystals. His work took him to remote corners of the globe, from the crystal caves of Mexico to the gemstone mines of Myanmar, always in pursuit of the next great discovery.",
    "name": "Fernando",
    "keyword": "prismatoid",
    "subject_category": "geologist"
  },
  {
    "facts": [
      "Irene adapts quickly.",
      "Irene starts a business.",
      "Irene asks opinions.",
      "Irene seeks critique.",
      "Irene does not try new ideas."
    ],
    "facts_fol": [
      "adapt_quickly(Irene)",
      "starts_business(Irene)",
      "asks_opinions(Irene)",
      "seeks_critique(Irene)",
      "¬tries_new_ideas(Irene)"
    ],
    "rules": [
      "Irene either adapts quickly or learns from failure, but not both simultaneously.",
      "If someone takes risks and meets obstacles, then they face challenges.",
      "If Irene starts a business, then she either meets obstacles or gets feedback, but not both.",
      "For all people, if they ask opinions and seek critique, then they get feedback.",
      "Irene tries new ideas or takes risks."
    ],
    "rules_fol": [
      "adapt_quickly(Irene) ⊕ learn_from_failure(Irene)",
      "∀x ((takes_risks(x) ∧ meets_obstacles(x)) → face_challenges(x))",
      "starts_business(Irene) → (meets_obstacles(Irene) ⊕ gets_feedback(Irene))",
      "∀x ((asks_opinions(x) ∧ seeks_critique(x)) → gets_feedback(x))",
      "tries_new_ideas(Irene) ∨ takes_risks(Irene)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If someone is resilient, then they learn from failure and stay motivated.",
      "If someone has ambition, then they face challenges and grow stronger.",
      "If Irene is ambitious, then she meets obstacles and stays motivated.",
      "If Irene either serves customers or reads reviews (but not both), then she gets feedback.",
      "All innovative people have passion and take risks."
    ],
    "distracting_rules_fol": [
      "∀x (is_resilient(x) → (learn_from_failure(x) ∧ stays_motivated(x)))",
      "∀x (has_ambition(x) → (face_challenges(x) ∧ grow_stronger(x)))",
      "has_ambition(Irene) → (meets_obstacles(Irene) ∧ stays_motivated(Irene))",
      "(serves_customers(Irene) ⊕ reads_reviews(Irene)) → gets_feedback(Irene)",
      "∀x (innovative(x) → (has_passion(x) ∧ takes_risks(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Irene does not try new ideas."
        ],
        "rules": "Irene tries new ideas or takes risks.",
        "conclusion": "Irene takes risks."
      },
      {
        "facts": [
          "Irene asks opinions.",
          "Irene seeks critique."
        ],
        "rules": "For all people, if they ask opinions and seek critique, then they get feedback.",
        "conclusion": "Irene gets feedback."
      },
      {
        "facts": [
          "Irene starts a business.",
          "Irene gets feedback."
        ],
        "rules": "If Irene starts a business, then she either meets obstacles or gets feedback, but not both.",
        "conclusion": "Irene does not meet obstacles."
      },
      {
        "facts": [
          "Irene takes risks.",
          "Irene does not meet obstacles."
        ],
        "rules": "If someone takes risks and meets obstacles, then they face challenges.",
        "conclusion": null
      },
      {
        "facts": [
          "Irene adapts quickly."
        ],
        "rules": "Irene either adapts quickly or learns from failure, but not both simultaneously.",
        "conclusion": "Irene does not learn from failure."
      },
      {
        "facts": [
          "Irene does not learn from failure."
        ],
        "rules": null,
        "conclusion": "Irene faces challenges and learns from failure."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬tries_new_ideas(Irene)"
        ],
        "rules": "tries_new_ideas(Irene) ∨ takes_risks(Irene)",
        "conclusion": "takes_risks(Irene)"
      },
      {
        "facts": [
          "asks_opinions(Irene)",
          "seeks_critique(Irene)"
        ],
        "rules": "∀x ((asks_opinions(x) ∧ seeks_critique(x)) → gets_feedback(x))",
        "conclusion": "gets_feedback(Irene)"
      },
      {
        "facts": [
          "starts_business(Irene)",
          "gets_feedback(Irene)"
        ],
        "rules": "starts_business(Irene) → (meets_obstacles(Irene) ⊕ gets_feedback(Irene))",
        "conclusion": "¬meets_obstacles(Irene)"
      },
      {
        "facts": [
          "takes_risks(Irene)",
          "¬meets_obstacles(Irene)"
        ],
        "rules": "∀x ((takes_risks(x) ∧ meets_obstacles(x)) → face_challenges(x))",
        "conclusion": null
      },
      {
        "facts": [
          "adapt_quickly(Irene)"
        ],
        "rules": "adapt_quickly(Irene) ⊕ learn_from_failure(Irene)",
        "conclusion": "¬learn_from_failure(Irene)"
      },
      {
        "facts": [
          "¬learn_from_failure(Irene)"
        ],
        "rules": null,
        "conclusion": "face_challenges(Irene) ∧ learn_from_failure(Irene)"
      }
    ],
    "conclusion": "Irene faces challenges and learns from failure.",
    "conclusion_fol": "face_challenges(Irene) ∧ learn_from_failure(Irene)",
    "answer": "False",
    "context": [
      "Irene does not try new ideas.",
      "Irene tries new ideas or takes risks.",
      "Irene asks opinions.",
      "Irene seeks critique.",
      "For all people, if they ask opinions and seek critique, then they get feedback.",
      "Irene starts a business.",
      "If Irene starts a business, then she either meets obstacles or gets feedback, but not both.",
      "If someone takes risks and meets obstacles, then they face challenges.",
      "Irene adapts quickly.",
      "Irene either adapts quickly or learns from failure, but not both simultaneously."
    ],
    "context_fol": [
      "¬tries_new_ideas(Irene)",
      "tries_new_ideas(Irene) ∨ takes_risks(Irene)",
      "asks_opinions(Irene)",
      "seeks_critique(Irene)",
      "∀x ((asks_opinions(x) ∧ seeks_critique(x)) → gets_feedback(x))",
      "starts_business(Irene)",
      "starts_business(Irene) → (meets_obstacles(Irene) ⊕ gets_feedback(Irene))",
      "∀x ((takes_risks(x) ∧ meets_obstacles(x)) → face_challenges(x))",
      "adapt_quickly(Irene)",
      "adapt_quickly(Irene) ⊕ learn_from_failure(Irene)"
    ],
    "background_story": "Irene had always been excited about her new business venture, a gourmet food truck specializing in exotic cuisines. She invested all her savings, perfected her recipes, and launched with high hopes. However, despite her best efforts, the truck failed to attract customers. The unique dishes she offered were too experimental for the local palate, and the location she chose was not as bustling as she anticipated. As the days turned into weeks, and the weeks into months, Irene's food truck became known as a dud, with more critics than customers. Though disappointed, Irene didn't give up. She took the failure as a learning experience, regrouping and planning her next move, determined to turn her culinary dreams into a success.",
    "name": "Irene",
    "keyword": "dud",
    "subject_category": "human"
  },
  {
    "facts": [
      "Fabian enjoys exploring.",
      "Fabian loves to travel.",
      "Fabian does not read widely.",
      "Fabian does not learn languages."
    ],
    "facts_fol": [
      "enjoy_exploring(Fabian)",
      "love_to_travel(Fabian)",
      "¬read_widely(Fabian)",
      "¬learn_languages(Fabian)"
    ],
    "rules": [
      "If someone reads widely and meets new people, then they have a broadened perspective.",
      "For all people, either they try new foods or meet new people, but not necessarily both.",
      "For any person, they either learn languages or try new foods, but not necessarily both."
    ],
    "rules_fol": [
      "∀x ((read_widely(x) ∧ meet_new_people(x)) → have_broadened_perspective(x))",
      "∀x (try_new_foods(x) ⊕ meet_new_people(x))",
      "∀x (learn_languages(x) ⊕ try_new_foods(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If someone seeks knowledge and visits places, then they have a broadened perspective.",
      "Fabian either visits places or meets new people.",
      "Fabian visits places or tries new foods."
    ],
    "distracting_rules_fol": [
      "∀x ((seek_knowledge(x) ∧ visit_places(x)) → have_broadened_perspective(x))",
      "visit_places(Fabian) ∨ meet_new_people(Fabian)",
      "visit_places(Fabian) ∨ try_new_foods(Fabian)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Fabian does not learn languages."
        ],
        "rules": "For any person, they either learn languages or try new foods, but not necessarily both.",
        "conclusion": "Fabian tries new foods."
      },
      {
        "facts": [
          "Fabian tries new foods."
        ],
        "rules": "For all people, either they try new foods or meet new people, but not necessarily both.",
        "conclusion": "Fabian does not meet new people."
      },
      {
        "facts": [
          "Fabian does not read widely.",
          "Fabian does not meet new people."
        ],
        "rules": "If someone reads widely and meets new people, then they have a broadened perspective.",
        "conclusion": null
      },
      {
        "facts": [
          "Fabian loves to travel.",
          "Fabian enjoys exploring."
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬learn_languages(Fabian)"
        ],
        "rules": "∀x (learn_languages(x) ⊕ try_new_foods(x))",
        "conclusion": "try_new_foods(Fabian)"
      },
      {
        "facts": [
          "try_new_foods(Fabian)"
        ],
        "rules": "∀x (try_new_foods(x) ⊕ meet_new_people(x))",
        "conclusion": "¬meet_new_people(Fabian)"
      },
      {
        "facts": [
          "¬read_widely(Fabian)",
          "¬meet_new_people(Fabian)"
        ],
        "rules": "∀x ((read_widely(x) ∧ meet_new_people(x)) → have_broadened_perspective(x))",
        "conclusion": null
      },
      {
        "facts": [
          "love_to_travel(Fabian)",
          "enjoy_exploring(Fabian)"
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "conclusion": "If Fabian loves to travel or enjoys exploring (or both), then he has a broadened perspective.",
    "conclusion_fol": "(love_to_travel(Fabian) ∨ enjoy_exploring(Fabian)) → have_broadened_perspective(Fabian)",
    "answer": "Uncertain",
    "context": [
      "Fabian does not learn languages.",
      "For any person, they either learn languages or try new foods, but not necessarily both.",
      "For all people, either they try new foods or meet new people, but not necessarily both.",
      "Fabian does not read widely.",
      "If someone reads widely and meets new people, then they have a broadened perspective.",
      "Fabian loves to travel.",
      "Fabian enjoys exploring."
    ],
    "context_fol": [
      "¬learn_languages(Fabian)",
      "∀x (learn_languages(x) ⊕ try_new_foods(x))",
      "∀x (try_new_foods(x) ⊕ meet_new_people(x))",
      "¬read_widely(Fabian)",
      "∀x ((read_widely(x) ∧ meet_new_people(x)) → have_broadened_perspective(x))",
      "love_to_travel(Fabian)",
      "enjoy_exploring(Fabian)"
    ],
    "background_story": "Fabian was an insatiable adventurer with an unquenchable thirst to explore the unknown. As a child, he would spend hours poring over maps and dreaming of far-off lands. As soon as he was old enough, Fabian set out to see the world, backpacking through Europe, hiking in the Himalayas, and island-hopping in Southeast Asia. His curiosity and sense of wonder led him to discover hidden temples, secret waterfalls, and vibrant local cultures. Fabian's travels not only broadened his perspective but also inspired him to become a travel writer, sharing his stories and encouraging others to explore beyond their comfort zones. With each new destination, Fabian's passion for discovery only grew, fueling his next adventure and the stories that would follow.",
    "name": "Fabian",
    "keyword": "explore",
    "subject_category": "human"
  },
  {
    "facts": [
      "Ari does not defend her kingdom.",
      "Ari does not fight bravely.",
      "Ari faces adversity.",
      "Ari is wounded.",
      "Ari mobilizes forces."
    ],
    "facts_fol": [
      "¬defend_kingdom(Ari)",
      "¬fight_bravely(Ari)",
      "face_adversity(Ari)",
      "is_wounded(Ari)",
      "mobilize_forces(Ari)"
    ],
    "rules": [
      "Ari either rallies troops or leads comrades, but not necessarily both.",
      "If Ari faces adversity, then she either rallies troops or inspires others.",
      "If Ari is wounded, then she either mobilizes forces or inspires others."
    ],
    "rules_fol": [
      "rally_troops(Ari) ⊕ lead_comrades(Ari)",
      "face_adversity(Ari) → (rally_troops(Ari) ∨ inspire_others(Ari))",
      "is_wounded(Ari) → (mobilize_forces(Ari) ⊕ inspire_others(Ari))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Anyone who protects people either shows courage or leads their comrades (or both).",
      "If Ari either charges forward or gives orders (but not both), then she rallies troops.",
      "Any person who shows courage or sets an example can inspire others."
    ],
    "distracting_rules_fol": [
      "∀x (protect_people(x) → (show_courage(x) ∨ lead_comrades(x)))",
      "(charge_forward(Ari) ⊕ give_orders(Ari)) → rally_troops(Ari)",
      "∀x ((show_courage(x) ∨ set_example(x)) → inspire_others(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Ari is wounded.",
          "Ari mobilizes forces."
        ],
        "rules": "If Ari is wounded, then she either mobilizes forces or inspires others.",
        "conclusion": "Ari does not inspire others."
      },
      {
        "facts": [
          "Ari faces adversity.",
          "Ari does not inspire others."
        ],
        "rules": "If Ari faces adversity, then she either rallies troops or inspires others.",
        "conclusion": "Ari rallies troops."
      },
      {
        "facts": [
          "Ari rallies troops."
        ],
        "rules": "Ari either rallies troops or leads comrades, but not necessarily both.",
        "conclusion": "Ari does not lead her comrades."
      },
      {
        "facts": [
          "Ari does not defend her kingdom.",
          "Ari does not fight bravely.",
          "Ari does not lead her comrades."
        ],
        "rules": null,
        "conclusion": "Ari defends her kingdom and either fights bravely or leads her comrades (or both)."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "is_wounded(Ari)",
          "mobilize_forces(Ari)"
        ],
        "rules": "is_wounded(Ari) → (mobilize_forces(Ari) ⊕ inspire_others(Ari))",
        "conclusion": "¬inspire_others(Ari)"
      },
      {
        "facts": [
          "face_adversity(Ari)",
          "¬inspire_others(Ari)"
        ],
        "rules": "face_adversity(Ari) → (rally_troops(Ari) ∨ inspire_others(Ari))",
        "conclusion": "rally_troops(Ari)"
      },
      {
        "facts": [
          "rally_troops(Ari)"
        ],
        "rules": "rally_troops(Ari) ⊕ lead_comrades(Ari)",
        "conclusion": "¬lead_comrades(Ari)"
      },
      {
        "facts": [
          "¬defend_kingdom(Ari)",
          "¬fight_bravely(Ari)",
          "¬lead_comrades(Ari)"
        ],
        "rules": null,
        "conclusion": "defend_kingdom(Ari) ∧ (fight_bravely(Ari) ∨ lead_comrades(Ari))"
      }
    ],
    "conclusion": "Ari defends her kingdom and either fights bravely or leads her comrades (or both).",
    "conclusion_fol": "defend_kingdom(Ari) ∧ (fight_bravely(Ari) ∨ lead_comrades(Ari))",
    "answer": "False",
    "context": [
      "Ari is wounded.",
      "Ari mobilizes forces.",
      "If Ari is wounded, then she either mobilizes forces or inspires others.",
      "Ari faces adversity.",
      "If Ari faces adversity, then she either rallies troops or inspires others.",
      "Ari either rallies troops or leads comrades, but not necessarily both.",
      "Ari does not defend her kingdom.",
      "Ari does not fight bravely."
    ],
    "context_fol": [
      "is_wounded(Ari)",
      "mobilize_forces(Ari)",
      "is_wounded(Ari) → (mobilize_forces(Ari) ⊕ inspire_others(Ari))",
      "face_adversity(Ari)",
      "face_adversity(Ari) → (rally_troops(Ari) ∨ inspire_others(Ari))",
      "rally_troops(Ari) ⊕ lead_comrades(Ari)",
      "¬defend_kingdom(Ari)",
      "¬fight_bravely(Ari)"
    ],
    "background_story": "Ari was a young warrior from the kingdom of Eldoria, sworn to defend its people and lands against all threats. When the dark sorcerer, Malakai, invaded Eldoria, Ari stood firm alongside her comrades, refusing to yield. Despite being gravely injured in the initial battle, Ari recovered and continued to fight, inspired by her allegiance to the kingdom and its people. As Malakai's army breached the castle walls, Ari rallied the remaining defenders, leading a valiant last stand. Her bravery and unwavering dedication to Eldoria's cause earned her the respect and admiration of her peers. Even in the face of overwhelming odds, Ari remained allegiant, embodying the unshakeable loyalty and honor that defined the warriors of Eldoria.",
    "name": "Ari",
    "keyword": "allegiant",
    "subject_category": "human"
  },
  {
    "facts": [
      "Emory does not compose songs.",
      "Emory performs live.",
      "Emory helps others.",
      "Emory creates music.",
      "Emory touches hearts."
    ],
    "facts_fol": [
      "¬compose_songs(Emory)",
      "perform_live(Emory)",
      "help_others(Emory)",
      "make_music(Emory)",
      "touch_hearts(Emory)"
    ],
    "rules": [
      "If Emory visits the hospital, then he either brings joy to others or finds personal inspiration (or both).",
      "Either Emory plays for a crowd or visits the hospital, but he does not do both.",
      "If Emory either composes songs or performs live (but not both), then he plays for a crowd.",
      "If Emory helps others, then he either brings joy to others or feels fulfilled, but not both.",
      "If someone creates art and touches hearts, then they feel fulfilled."
    ],
    "rules_fol": [
      "visit_hospital(Emory) → (bring_joy_to_others(Emory) ∨ find_personal_inspiration(Emory))",
      "play_for_crowd(Emory) ⊕ visit_hospital(Emory)",
      "(compose_songs(Emory) ⊕ perform_live(Emory)) → play_for_crowd(Emory)",
      "help_others(Emory) → (bring_joy_to_others(Emory) ⊕ feel_fulfilled(Emory))",
      "∀x ((make_music(x) ∧ touch_hearts(x)) → feel_fulfilled(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Emory does volunteer work, then he either meets new friends or visits the hospital (or both).",
      "If Emory shares his talent, then he either plays for a crowd or entertains children.",
      "Emory spreads happiness or brings joy to others.",
      "If Emory either teaches music or donates his time (but not both), then he feels fulfilled."
    ],
    "distracting_rules_fol": [
      "volunteer_work(Emory) → (meet_new_friends(Emory) ∨ visit_hospital(Emory))",
      "share_talent(Emory) → (play_for_crowd(Emory) ∨ entertain_children(Emory))",
      "spread_happiness(Emory) ∨ bring_joy_to_others(Emory)",
      "(teach_music(Emory) ⊕ donate_time(Emory)) → feel_fulfilled(Emory)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Emory creates music.",
          "Emory touches hearts."
        ],
        "rules": "If someone creates art and touches hearts, then they feel fulfilled.",
        "conclusion": "Emory feels fulfilled."
      },
      {
        "facts": [
          "Emory helps others.",
          "Emory feels fulfilled."
        ],
        "rules": "If Emory helps others, then he either brings joy to others or feels fulfilled, but not both.",
        "conclusion": "Emory does not bring joy to others."
      },
      {
        "facts": [
          "Emory does not compose songs.",
          "Emory performs live."
        ],
        "rules": "If Emory either composes songs or performs live (but not both), then he plays for a crowd.",
        "conclusion": "Emory plays for a crowd."
      },
      {
        "facts": [
          "Emory plays for a crowd."
        ],
        "rules": "Either Emory plays for a crowd or visits the hospital, but he does not do both.",
        "conclusion": "Emory does not visit the hospital."
      },
      {
        "facts": [
          "Emory does not visit the hospital.",
          "Emory does not bring joy to others."
        ],
        "rules": "If Emory visits the hospital, then he either brings joy to others or finds personal inspiration (or both).",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "make_music(Emory)",
          "touch_hearts(Emory)"
        ],
        "rules": "∀x ((make_music(x) ∧ touch_hearts(x)) → feel_fulfilled(x))",
        "conclusion": "feel_fulfilled(Emory)"
      },
      {
        "facts": [
          "help_others(Emory)",
          "feel_fulfilled(Emory)"
        ],
        "rules": "help_others(Emory) → (bring_joy_to_others(Emory) ⊕ feel_fulfilled(Emory))",
        "conclusion": "¬bring_joy_to_others(Emory)"
      },
      {
        "facts": [
          "¬compose_songs(Emory)",
          "perform_live(Emory)"
        ],
        "rules": "(compose_songs(Emory) ⊕ perform_live(Emory)) → play_for_crowd(Emory)",
        "conclusion": "play_for_crowd(Emory)"
      },
      {
        "facts": [
          "play_for_crowd(Emory)"
        ],
        "rules": "play_for_crowd(Emory) ⊕ visit_hospital(Emory)",
        "conclusion": "¬visit_hospital(Emory)"
      },
      {
        "facts": [
          "¬visit_hospital(Emory)",
          "¬bring_joy_to_others(Emory)"
        ],
        "rules": "visit_hospital(Emory) → (bring_joy_to_others(Emory) ∨ find_personal_inspiration(Emory))",
        "conclusion": null
      }
    ],
    "conclusion": "Emory finds personal inspiration.",
    "conclusion_fol": "find_personal_inspiration(Emory)",
    "answer": "Uncertain",
    "context": [
      "Emory creates music.",
      "Emory touches hearts.",
      "If someone creates art and touches hearts, then they feel fulfilled.",
      "Emory helps others.",
      "If Emory helps others, then he either brings joy to others or feels fulfilled, but not both.",
      "Emory does not compose songs.",
      "Emory performs live.",
      "If Emory either composes songs or performs live (but not both), then he plays for a crowd.",
      "Either Emory plays for a crowd or visits the hospital, but he does not do both.",
      "If Emory visits the hospital, then he either brings joy to others or finds personal inspiration (or both)."
    ],
    "context_fol": [
      "make_music(Emory)",
      "touch_hearts(Emory)",
      "∀x ((make_music(x) ∧ touch_hearts(x)) → feel_fulfilled(x))",
      "help_others(Emory)",
      "help_others(Emory) → (bring_joy_to_others(Emory) ⊕ feel_fulfilled(Emory))",
      "¬compose_songs(Emory)",
      "perform_live(Emory)",
      "(compose_songs(Emory) ⊕ perform_live(Emory)) → play_for_crowd(Emory)",
      "play_for_crowd(Emory) ⊕ visit_hospital(Emory)",
      "visit_hospital(Emory) → (bring_joy_to_others(Emory) ∨ find_personal_inspiration(Emory))"
    ],
    "background_story": "Emory, a talented musician, had been struggling to find inspiration after a creative block. One day, while volunteering at a local children's hospital, he met a young girl named Lily who was battling a serious illness. Despite her challenges, Lily's smile and enthusiasm for music were infectious, and Emory found himself gladdened by her presence. He began to visit her regularly, playing his guitar and singing for her and the other patients. As he saw the joy music brought to their faces, Emory's own passion was reignited. His visits became a highlight of the week for the children, and soon Emory was composing music again, inspired by the resilience and hope of his new young friends. The experience not only revitalized his career but also filled his heart with a sense of purpose and happiness.",
    "name": "Emory",
    "keyword": "gladdened",
    "subject_category": "human"
  },
  {
    "facts": [
      "Shepard does not lead tours.",
      "Shepard does not share stories about Springfield.",
      "Shepard appreciates culture."
    ],
    "facts_fol": [
      "¬leads_tours(Shepard)",
      "¬shares_stories(Shepard)",
      "appreciates_culture(Shepard)"
    ],
    "rules": [
      "If Shepard knows local history, then he loves his hometown and inspires the community.",
      "Anyone who leads tours or shares stories about their town loves their hometown.",
      "A person either appreciates culture or knows local history, but not necessarily both."
    ],
    "rules_fol": [
      "knows_local_history(Shepard) → (loves_hometown(Shepard) ∧ inspires_community(Shepard))",
      "∀x ((leads_tours(x) ∨ shares_stories(x)) → loves_hometown(x))",
      "∀x (appreciates_culture(x) ⊕ knows_local_history(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Shepard lives locally or supports local initiatives, then he loves his hometown.",
      "Shepard enjoys tradition or knows local history."
    ],
    "distracting_rules_fol": [
      "(lives_locally(Shepard) ∨ supports_local(Shepard)) → loves_hometown(Shepard)",
      "enjoys_tradition(Shepard) ∨ knows_local_history(Shepard)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Shepard appreciates culture."
        ],
        "rules": "A person either appreciates culture or knows local history, but not necessarily both.",
        "conclusion": "Shepard does not know local history."
      },
      {
        "facts": [
          "Shepard does not lead tours.",
          "Shepard does not share stories about Springfield."
        ],
        "rules": "Anyone who leads tours or shares stories about their town loves their hometown.",
        "conclusion": null
      },
      {
        "facts": [
          "Shepard does not know local history."
        ],
        "rules": "If Shepard knows local history, then he loves his hometown and inspires the community.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "appreciates_culture(Shepard)"
        ],
        "rules": "∀x (appreciates_culture(x) ⊕ knows_local_history(x))",
        "conclusion": "¬knows_local_history(Shepard)"
      },
      {
        "facts": [
          "¬leads_tours(Shepard)",
          "¬shares_stories(Shepard)"
        ],
        "rules": "∀x ((leads_tours(x) ∨ shares_stories(x)) → loves_hometown(x))",
        "conclusion": null
      },
      {
        "facts": [
          "¬knows_local_history(Shepard)"
        ],
        "rules": "knows_local_history(Shepard) → (loves_hometown(Shepard) ∧ inspires_community(Shepard))",
        "conclusion": null
      }
    ],
    "conclusion": "Shepard does not inspire the community.",
    "conclusion_fol": "¬inspires_community(Shepard)",
    "answer": "Uncertain",
    "context": [
      "Shepard appreciates culture.",
      "A person either appreciates culture or knows local history, but not necessarily both.",
      "Shepard does not lead tours.",
      "Shepard does not share stories about Springfield.",
      "Anyone who leads tours or shares stories about their town loves their hometown.",
      "If Shepard knows local history, then he loves his hometown and inspires the community."
    ],
    "context_fol": [
      "appreciates_culture(Shepard)",
      "∀x (appreciates_culture(x) ⊕ knows_local_history(x))",
      "¬leads_tours(Shepard)",
      "¬shares_stories(Shepard)",
      "∀x ((leads_tours(x) ∨ shares_stories(x)) → loves_hometown(x))",
      "knows_local_history(Shepard) → (loves_hometown(Shepard) ∧ inspires_community(Shepard))"
    ],
    "background_story": "Shepard was a charismatic and adventurous individual who had always been drawn to the quaint charm of Springfield. Born and raised in this picturesque town, he knew every nook and cranny, from the bustling town square to the serene lake on its outskirts. As a local historian, Shepard spent his days uncovering the hidden gems of Springfield's past, from its founding fathers to the legends of the old mill. His love for the town was palpable, and he often led walking tours, regaling visitors with tales of Springfield's rich history and folklore. Shepard's passion for his hometown was contagious, inspiring a sense of community and pride among its residents. He was the embodiment of Springfield's spirit, warm, welcoming, and full of life.",
    "name": "Shepard",
    "keyword": "springfield",
    "subject_category": "human"
  },
  {
    "facts": [
      "Rayan is not experienced.",
      "Rayan is trained.",
      "Rayan is not dedicated.",
      "Rayan loves nature.",
      "Rayan has persistence."
    ],
    "facts_fol": [
      "¬experienced(Rayan)",
      "trained(Rayan)",
      "¬dedicated(Rayan)",
      "loves_nature(Rayan)",
      "has_persistence(Rayan)"
    ],
    "rules": [
      "If Rayan is either experienced or knowledgeable (but not both), then he is reliable.",
      "If Rayan is skilled, then he is either knowledgeable or trained, but not both.",
      "If Rayan is an expert, then he is either dedicated or skilled, but not both.",
      "If Rayan loves nature and has persistence, then he can be an expert."
    ],
    "rules_fol": [
      "(experienced(Rayan) ⊕ knowledgeable(Rayan)) → reliable(Rayan)",
      "skilled(Rayan) → (knowledgeable(Rayan) ⊕ trained(Rayan))",
      "expert(Rayan) → (dedicated(Rayan) ⊕ skilled(Rayan))",
      "(loves_nature(Rayan) ∧ has_persistence(Rayan)) → expert(Rayan)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Anyone who reads widely or observes closely is knowledgeable.",
      "If Rayan is observant, then he is skilled and communicates well.",
      "If Rayan is passionate, then he is an expert and observant."
    ],
    "distracting_rules_fol": [
      "∀x ((reads_widely(x) ∨ observes_closely(x)) → knowledgeable(x))",
      "observant(Rayan) → (skilled(Rayan) ∧ communicate_well(Rayan))",
      "passionate(Rayan) → (expert(Rayan) ∧ observant(Rayan))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Rayan loves nature.",
          "Rayan has persistence."
        ],
        "rules": "If Rayan loves nature and has persistence, then he can be an expert.",
        "conclusion": "Rayan is an expert."
      },
      {
        "facts": [
          "Rayan is an expert.",
          "Rayan is not dedicated."
        ],
        "rules": "If Rayan is an expert, then he is either dedicated or skilled, but not both.",
        "conclusion": "Rayan is skilled."
      },
      {
        "facts": [
          "Rayan is skilled.",
          "Rayan is trained."
        ],
        "rules": "If Rayan is skilled, then he is either knowledgeable or trained, but not both.",
        "conclusion": "Rayan is not knowledgeable."
      },
      {
        "facts": [
          "Rayan is not experienced.",
          "Rayan is not knowledgeable."
        ],
        "rules": "If Rayan is either experienced or knowledgeable (but not both), then he is reliable.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "loves_nature(Rayan)",
          "has_persistence(Rayan)"
        ],
        "rules": "(loves_nature(Rayan) ∧ has_persistence(Rayan)) → expert(Rayan)",
        "conclusion": "expert(Rayan)"
      },
      {
        "facts": [
          "expert(Rayan)",
          "¬dedicated(Rayan)"
        ],
        "rules": "expert(Rayan) → (dedicated(Rayan) ⊕ skilled(Rayan))",
        "conclusion": "skilled(Rayan)"
      },
      {
        "facts": [
          "skilled(Rayan)",
          "trained(Rayan)"
        ],
        "rules": "skilled(Rayan) → (knowledgeable(Rayan) ⊕ trained(Rayan))",
        "conclusion": "¬knowledgeable(Rayan)"
      },
      {
        "facts": [
          "¬experienced(Rayan)",
          "¬knowledgeable(Rayan)"
        ],
        "rules": "(experienced(Rayan) ⊕ knowledgeable(Rayan)) → reliable(Rayan)",
        "conclusion": null
      }
    ],
    "conclusion": "Rayan is not reliable.",
    "conclusion_fol": "¬reliable(Rayan)",
    "answer": "Uncertain",
    "context": [
      "Rayan loves nature.",
      "Rayan has persistence.",
      "If Rayan loves nature and has persistence, then he can be an expert.",
      "Rayan is not dedicated.",
      "If Rayan is an expert, then he is either dedicated or skilled, but not both.",
      "Rayan is trained.",
      "If Rayan is skilled, then he is either knowledgeable or trained, but not both.",
      "Rayan is not experienced.",
      "If Rayan is either experienced or knowledgeable (but not both), then he is reliable."
    ],
    "context_fol": [
      "loves_nature(Rayan)",
      "has_persistence(Rayan)",
      "(loves_nature(Rayan) ∧ has_persistence(Rayan)) → expert(Rayan)",
      "¬dedicated(Rayan)",
      "expert(Rayan) → (dedicated(Rayan) ⊕ skilled(Rayan))",
      "trained(Rayan)",
      "skilled(Rayan) → (knowledgeable(Rayan) ⊕ trained(Rayan))",
      "¬experienced(Rayan)",
      "(experienced(Rayan) ⊕ knowledgeable(Rayan)) → reliable(Rayan)"
    ],
    "background_story": "Rayan was a keen-eyed spotter for a prestigious birdwatching tour company. With years of experience and an encyclopedic knowledge of avian species, he could identify even the rarest birds from a distance. Rayan's exceptional vision and patience made him a favorite among tourists, who would often return year after year to join his guided expeditions. His ability to spot birds in their natural habitats, sometimes hidden deep within dense foliage, was almost legendary. One notable instance was when Rayan spotted a critically endangered species thought to be extinct, sparking a global conservation effort. His contributions to ornithology earned him recognition and respect within the scientific community, solidifying his reputation as one of the world's top bird spotters.",
    "name": "Rayan",
    "keyword": "spotter",
    "subject_category": "human"
  },
  {
    "facts": [
      "Griffin researches aquatic plants.",
      "Griffin explores ecosystems.",
      "Griffin classifies flora."
    ],
    "facts_fol": [
      "researches_aquatic_plants(Griffin)",
      "explores_ecosystems(Griffin)",
      "classifies_flora(Griffin)"
    ],
    "rules": [
      "Griffin either specializes in water lilies or studies land plants, but not both.",
      "If Griffin researches aquatic plants, then he either discovers new species or specializes in water lilies (or both).",
      "If Griffin explores ecosystems, then he either classifies flora or discovers new species, but not both."
    ],
    "rules_fol": [
      "specializes_in_water_lilies(Griffin) ⊕ studies_land_plants(Griffin)",
      "researches_aquatic_plants(Griffin) → (discovers_new_species(Griffin) ∨ specializes_in_water_lilies(Griffin))",
      "explores_ecosystems(Griffin) → (classifies_flora(Griffin) ⊕ discovers_new_species(Griffin))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Griffin travels extensively, then he specializes in water lilies and documents plant life.",
      "If a botanist travels widely and documents findings, then they can discover new species."
    ],
    "distracting_rules_fol": [
      "travels_extensively(Griffin) → (specializes_in_water_lilies(Griffin) ∧ documents_plant_life(Griffin))",
      "∀x ((travels_widely(x) ∧ documents_findings(x)) → discovers_new_species(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Griffin explores ecosystems.",
          "Griffin classifies flora."
        ],
        "rules": "If Griffin explores ecosystems, then he either classifies flora or discovers new species, but not both.",
        "conclusion": "Griffin does not discover new species."
      },
      {
        "facts": [
          "Griffin researches aquatic plants.",
          "Griffin does not discover new species."
        ],
        "rules": "If Griffin researches aquatic plants, then he either discovers new species or specializes in water lilies (or both).",
        "conclusion": "Griffin specializes in water lilies."
      },
      {
        "facts": [
          "Griffin specializes in water lilies."
        ],
        "rules": "Griffin either specializes in water lilies or studies land plants, but not both.",
        "conclusion": "Griffin studies land plants."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "explores_ecosystems(Griffin)",
          "classifies_flora(Griffin)"
        ],
        "rules": "explores_ecosystems(Griffin) → (classifies_flora(Griffin) ⊕ discovers_new_species(Griffin))",
        "conclusion": "¬discovers_new_species(Griffin)"
      },
      {
        "facts": [
          "researches_aquatic_plants(Griffin)",
          "¬discovers_new_species(Griffin)"
        ],
        "rules": "researches_aquatic_plants(Griffin) → (discovers_new_species(Griffin) ∨ specializes_in_water_lilies(Griffin))",
        "conclusion": "specializes_in_water_lilies(Griffin)"
      },
      {
        "facts": [
          "specializes_in_water_lilies(Griffin)"
        ],
        "rules": "specializes_in_water_lilies(Griffin) ⊕ studies_land_plants(Griffin)",
        "conclusion": "studies_land_plants(Griffin)"
      }
    ],
    "conclusion": "Griffin studies land plants.",
    "conclusion_fol": "studies_land_plants(Griffin)",
    "answer": "False",
    "context": [
      "Griffin explores ecosystems.",
      "Griffin classifies flora.",
      "If Griffin explores ecosystems, then he either classifies flora or discovers new species, but not both.",
      "Griffin researches aquatic plants.",
      "If Griffin researches aquatic plants, then he either discovers new species or specializes in water lilies (or both).",
      "Griffin either specializes in water lilies or studies land plants, but not both."
    ],
    "context_fol": [
      "explores_ecosystems(Griffin)",
      "classifies_flora(Griffin)",
      "explores_ecosystems(Griffin) → (classifies_flora(Griffin) ⊕ discovers_new_species(Griffin))",
      "researches_aquatic_plants(Griffin)",
      "researches_aquatic_plants(Griffin) → (discovers_new_species(Griffin) ∨ specializes_in_water_lilies(Griffin))",
      "specializes_in_water_lilies(Griffin) ⊕ studies_land_plants(Griffin)"
    ],
    "background_story": "Griffin was a renowned botanist with a passion for the Nymphaeaceae family, commonly known as water lilies. His fascination with these aquatic plants began during his childhood, spent exploring the ponds and lakes near his home. As he delved deeper into his research, Griffin became an expert on the unique characteristics and adaptations of Nymphaeaceae species. He spent years traveling the world, from the Amazon to Asia, studying and documenting various types of water lilies. Griffin's groundbreaking work on the Nymphaeaceae family led to the discovery of several new species and a deeper understanding of their ecological role in aquatic ecosystems. His dedication and love for these plants earned him the nickname 'The Water Lily Whisperer' among his peers.",
    "name": "Griffin",
    "keyword": "nymphaeaceae",
    "subject_category": "botanist"
  },
  {
    "facts": [
      "Braxton does not sing well.",
      "Braxton is creative.",
      "Braxton enjoys hiking.",
      "Braxton does not appreciate art."
    ],
    "facts_fol": [
      "¬sings_well(Braxton)",
      "creative(Braxton)",
      "enjoys_hiking(Braxton)",
      "¬appreciates_art(Braxton)"
    ],
    "rules": [
      "Either Braxton is musical or he is tone deaf, but not both.",
      "For all people, if they play the flute and compose songs, then they are musical.",
      "A person either sings well or composes songs, but not necessarily both.",
      "If Braxton loves nature, then he is creative and plays the flute.",
      "If Braxton either enjoys hiking or appreciates art (but not both), then he loves nature."
    ],
    "rules_fol": [
      "musical(Braxton) ⊕ tone_deaf(Braxton)",
      "∀x ((plays_flute(x) ∧ composes_songs(x)) → musical(x))",
      "∀x (sings_well(x) ⊕ composes_songs(x))",
      "loves_nature(Braxton) → (creative(Braxton) ∧ plays_flute(Braxton))",
      "(enjoys_hiking(Braxton) ⊕ appreciates_art(Braxton)) → loves_nature(Braxton)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Braxton is expressive, then he is musical and can harmonize.",
      "If Braxton either writes lyrics or arranges scores (but not both), then he composes songs.",
      "Braxton either makes music or plays the flute.",
      "If Braxton values serenity and finds inspiration, then he loves nature."
    ],
    "distracting_rules_fol": [
      "expressive(Braxton) → (musical(Braxton) ∧ harmonize(Braxton))",
      "(writes_lyrics(Braxton) ⊕ arranges_scores(Braxton)) → composes_songs(Braxton)",
      "makes_music(Braxton) ∨ plays_flute(Braxton)",
      "(values_serenity(Braxton) ∧ finds_inspiration(Braxton)) → loves_nature(Braxton)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Braxton enjoys hiking.",
          "Braxton does not appreciate art."
        ],
        "rules": "If Braxton either enjoys hiking or appreciates art (but not both), then he loves nature.",
        "conclusion": "Braxton loves nature."
      },
      {
        "facts": [
          "Braxton loves nature.",
          "Braxton is creative."
        ],
        "rules": "If Braxton loves nature, then he is creative and plays the flute.",
        "conclusion": "Braxton plays the flute."
      },
      {
        "facts": [
          "Braxton does not sing well."
        ],
        "rules": "A person either sings well or composes songs, but not necessarily both.",
        "conclusion": "Braxton composes songs."
      },
      {
        "facts": [
          "Braxton plays the flute.",
          "Braxton composes songs."
        ],
        "rules": "For all people, if they play the flute and compose songs, then they are musical.",
        "conclusion": "Braxton is musical."
      },
      {
        "facts": [
          "Braxton is musical."
        ],
        "rules": "Either Braxton is musical or he is tone deaf, but not both.",
        "conclusion": "Braxton is tone deaf."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "enjoys_hiking(Braxton)",
          "¬appreciates_art(Braxton)"
        ],
        "rules": "(enjoys_hiking(Braxton) ⊕ appreciates_art(Braxton)) → loves_nature(Braxton)",
        "conclusion": "loves_nature(Braxton)"
      },
      {
        "facts": [
          "loves_nature(Braxton)",
          "creative(Braxton)"
        ],
        "rules": "loves_nature(Braxton) → (creative(Braxton) ∧ plays_flute(Braxton))",
        "conclusion": "plays_flute(Braxton)"
      },
      {
        "facts": [
          "¬sings_well(Braxton)"
        ],
        "rules": "∀x (sings_well(x) ⊕ composes_songs(x))",
        "conclusion": "composes_songs(Braxton)"
      },
      {
        "facts": [
          "plays_flute(Braxton)",
          "composes_songs(Braxton)"
        ],
        "rules": "∀x ((plays_flute(x) ∧ composes_songs(x)) → musical(x))",
        "conclusion": "musical(Braxton)"
      },
      {
        "facts": [
          "musical(Braxton)"
        ],
        "rules": "musical(Braxton) ⊕ tone_deaf(Braxton)",
        "conclusion": "tone_deaf(Braxton)"
      }
    ],
    "conclusion": "Braxton is tone deaf.",
    "conclusion_fol": "tone_deaf(Braxton)",
    "answer": "False",
    "context": [
      "Braxton enjoys hiking.",
      "Braxton does not appreciate art.",
      "If Braxton either enjoys hiking or appreciates art (but not both), then he loves nature.",
      "Braxton is creative.",
      "If Braxton loves nature, then he is creative and plays the flute.",
      "Braxton does not sing well.",
      "A person either sings well or composes songs, but not necessarily both.",
      "For all people, if they play the flute and compose songs, then they are musical.",
      "Either Braxton is musical or he is tone deaf, but not both."
    ],
    "context_fol": [
      "enjoys_hiking(Braxton)",
      "¬appreciates_art(Braxton)",
      "(enjoys_hiking(Braxton) ⊕ appreciates_art(Braxton)) → loves_nature(Braxton)",
      "creative(Braxton)",
      "loves_nature(Braxton) → (creative(Braxton) ∧ plays_flute(Braxton))",
      "¬sings_well(Braxton)",
      "∀x (sings_well(x) ⊕ composes_songs(x))",
      "∀x ((plays_flute(x) ∧ composes_songs(x)) → musical(x))",
      "musical(Braxton) ⊕ tone_deaf(Braxton)"
    ],
    "background_story": "Braxton was a young musician with a passion for traditional instruments. Growing up near a serene lake, he was fascinated by the reeds that swayed in the breeze. Inspired by their gentle movement, Braxton began crafting flutes from the reeds, teaching himself to play the soothing melodies that seemed to match the rhythm of the water. His talent flourished, and soon he was known throughout the region for his soulful reed flute performances. Braxton's music had a calming effect on all who listened, much like the peaceful surroundings that first inspired him. He continued to compose, his reed flutes becoming an integral part of the local cultural heritage, a symbol of harmony between nature and art.",
    "name": "Braxton",
    "keyword": "reed",
    "subject_category": "person"
  },
  {
    "facts": [
      "Wayne nurtures children.",
      "Wayne feels empathy.",
      "Wayne protects the environment.",
      "Wayne rescues strangers.",
      "Wayne is a veteran.",
      "Wayne donates generously."
    ],
    "facts_fol": [
      "nurture_children(Wayne)",
      "feels_empathy(Wayne)",
      "protect_environment(Wayne)",
      "rescue_strangers(Wayne)",
      "is_veteran(Wayne)",
      "donates_generously(Wayne)"
    ],
    "rules": [
      "If Wayne either nurtures children or aids neighbors (but not both), then he cares for others.",
      "For all humans, if they feel empathy and act kindly, then they have compassion.",
      "Wayne either protects the environment or helps animals, but not necessarily both.",
      "Either Wayne rescues strangers or aids neighbors, but not both, indicating his specific way of contributing to the community.",
      "If Wayne is a veteran, then he either donates generously or acts kindly, but not both."
    ],
    "rules_fol": [
      "(nurture_children(Wayne) ⊕ aid_neighbors(Wayne)) → care_for_others(Wayne)",
      "∀x ((feels_empathy(x) ∧ acts_kindly(x)) → has_compassion(x))",
      "protect_environment(Wayne) ⊕ help_animals(Wayne)",
      "rescue_strangers(Wayne) ⊕ aid_neighbors(Wayne)",
      "is_veteran(Wayne) → (donates_generously(Wayne) ⊕ acts_kindly(Wayne))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Wayne faces challenges and stays resilient, then he cares for others.",
      "Anyone who loves pets has compassion.",
      "If Wayne hears cries, then he offers shelter and helps animals.",
      "If Wayne lends a hand, then he will aid his neighbors.",
      "If Wayne hears cries for help, then he either acts kindly or offers shelter."
    ],
    "distracting_rules_fol": [
      "face_challenges(Wayne) → (stay_resilient(Wayne) ∧ care_for_others(Wayne))",
      "∀x (loves_pets(x) → has_compassion(x))",
      "hear_cries(Wayne) → (offer_shelter(Wayne) ∧ help_animals(Wayne))",
      "lends_hand(Wayne) → aid_neighbors(Wayne)",
      "hears_cries(Wayne) → (acts_kindly(Wayne) ∨ offers_shelter(Wayne))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Wayne is a veteran.",
          "Wayne donates generously."
        ],
        "rules": "If Wayne is a veteran, then he either donates generously or acts kindly, but not both.",
        "conclusion": "Wayne does not act kindly."
      },
      {
        "facts": [
          "Wayne rescues strangers."
        ],
        "rules": "Either Wayne rescues strangers or aids neighbors, but not both, indicating his specific way of contributing to the community.",
        "conclusion": "Wayne does not aid his neighbors."
      },
      {
        "facts": [
          "Wayne protects the environment."
        ],
        "rules": "Wayne either protects the environment or helps animals, but not necessarily both.",
        "conclusion": "Wayne does not help animals."
      },
      {
        "facts": [
          "Wayne feels empathy.",
          "Wayne does not act kindly."
        ],
        "rules": "For all humans, if they feel empathy and act kindly, then they have compassion.",
        "conclusion": null
      },
      {
        "facts": [
          "Wayne nurtures children.",
          "Wayne does not aid his neighbors."
        ],
        "rules": "If Wayne either nurtures children or aids neighbors (but not both), then he cares for others.",
        "conclusion": "Wayne cares for others."
      },
      {
        "facts": [
          "Wayne does not help animals.",
          "Wayne cares for others."
        ],
        "rules": null,
        "conclusion": "If Wayne has compassion, then he either helps animals or cares for others (or both)."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "is_veteran(Wayne)",
          "donates_generously(Wayne)"
        ],
        "rules": "is_veteran(Wayne) → (donates_generously(Wayne) ⊕ acts_kindly(Wayne))",
        "conclusion": "¬acts_kindly(Wayne)"
      },
      {
        "facts": [
          "rescue_strangers(Wayne)"
        ],
        "rules": "rescue_strangers(Wayne) ⊕ aid_neighbors(Wayne)",
        "conclusion": "¬aid_neighbors(Wayne)"
      },
      {
        "facts": [
          "protect_environment(Wayne)"
        ],
        "rules": "protect_environment(Wayne) ⊕ help_animals(Wayne)",
        "conclusion": "¬help_animals(Wayne)"
      },
      {
        "facts": [
          "feels_empathy(Wayne)",
          "¬acts_kindly(Wayne)"
        ],
        "rules": "∀x ((feels_empathy(x) ∧ acts_kindly(x)) → has_compassion(x))",
        "conclusion": null
      },
      {
        "facts": [
          "nurture_children(Wayne)",
          "¬aid_neighbors(Wayne)"
        ],
        "rules": "(nurture_children(Wayne) ⊕ aid_neighbors(Wayne)) → care_for_others(Wayne)",
        "conclusion": "care_for_others(Wayne)"
      },
      {
        "facts": [
          "¬help_animals(Wayne)",
          "care_for_others(Wayne)"
        ],
        "rules": null,
        "conclusion": "has_compassion(Wayne) → (help_animals(Wayne) ∨ care_for_others(Wayne))"
      }
    ],
    "conclusion": "If Wayne has compassion, then he either helps animals or cares for others (or both).",
    "conclusion_fol": "has_compassion(Wayne) → (help_animals(Wayne) ∨ care_for_others(Wayne))",
    "answer": "True",
    "context": [
      "Wayne is a veteran.",
      "Wayne donates generously.",
      "If Wayne is a veteran, then he either donates generously or acts kindly, but not both.",
      "Wayne rescues strangers.",
      "Either Wayne rescues strangers or aids neighbors, but not both, indicating his specific way of contributing to the community.",
      "Wayne protects the environment.",
      "Wayne either protects the environment or helps animals, but not necessarily both.",
      "Wayne feels empathy.",
      "For all humans, if they feel empathy and act kindly, then they have compassion.",
      "Wayne nurtures children.",
      "If Wayne either nurtures children or aids neighbors (but not both), then he cares for others."
    ],
    "context_fol": [
      "is_veteran(Wayne)",
      "donates_generously(Wayne)",
      "is_veteran(Wayne) → (donates_generously(Wayne) ⊕ acts_kindly(Wayne))",
      "rescue_strangers(Wayne)",
      "rescue_strangers(Wayne) ⊕ aid_neighbors(Wayne)",
      "protect_environment(Wayne)",
      "protect_environment(Wayne) ⊕ help_animals(Wayne)",
      "feels_empathy(Wayne)",
      "∀x ((feels_empathy(x) ∧ acts_kindly(x)) → has_compassion(x))",
      "nurture_children(Wayne)",
      "(nurture_children(Wayne) ⊕ aid_neighbors(Wayne)) → care_for_others(Wayne)"
    ],
    "background_story": "Wayne was a former soldier who had seen his share of battles. Despite his tough exterior, he had a soft spot for stray animals. One day, while on a solo hike, he heard a faint whimper coming from a nearby thicket. Investigating the sound, he found a small, injured puppy. The puppy's whimper tugged at Wayne's heartstrings, and he knew he had to help. He took the puppy in, nursing it back to health. As the puppy recovered, Wayne found solace in its companionship, and the puppy's occasional whimper when it was scared or needed comfort became a reminder of the fragility and beauty of life. The experience helped Wayne heal his own emotional scars, and he eventually started a rescue center for abandoned animals, where the sound of a whimper was always met with kindness and care.",
    "name": "Wayne",
    "keyword": "whimper",
    "subject_category": "human"
  },
  {
    "facts": [
      "Rhett's case does not show improvement.",
      "Rhett's case does not require surgery.",
      "Rhett's case does not involve an oncologist.",
      "Rhett shows resilience."
    ],
    "facts_fol": [
      "¬show_improvement(Rhett)",
      "¬require_surgery(Rhett)",
      "¬involve_oncologist(Rhett)",
      "show_resilience(Rhett)"
    ],
    "rules": [
      "If a medical case either involves early detection or a positive response to treatment (but not both), then it has a better prognosis.",
      "Rhett's case either shows improvement or responds to treatment.",
      "If Rhett's case requires surgery, then he either needs palliative care or receives comprehensive care, but not both.",
      "If a medical case involves an oncologist, then it does not necessarily require palliative care, and if a case requires palliative care, then it may not necessarily involve an oncologist.",
      "Rhett's case either involves him showing resilience or early detection, but not both."
    ],
    "rules_fol": [
      "∀x ((get_early_detection(x) ⊕ respond_to_treatment(x)) → have_better_prognosis(x))",
      "show_improvement(Rhett) ∨ respond_to_treatment(Rhett)",
      "require_surgery(Rhett) → (need_palliative_care(Rhett) ⊕ receive_comprehensive_care(Rhett))",
      "∀x (involve_oncologist(x) ⊕ need_palliative_care(x))",
      "show_resilience(Rhett) ⊕ get_early_detection(Rhett)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Any medical case that is diagnosed early either results in a better prognosis or involves regular checkups.",
      "Rhett's case either shows remission or responds to treatment.",
      "If Rhett's case is diagnosed early, then he either receives comprehensive care or gets a second opinion.",
      "If Rhett's case involves chemotherapy, then it either needs palliative care or gets radiation, but not both.",
      "If a medical case shows symptoms and the patient seeks medical help, then it can involve early detection."
    ],
    "distracting_rules_fol": [
      "∀x (diagnosed_early(x) → (get_regular_checkups(x) ∨ have_better_prognosis(x)))",
      "show_remission(Rhett) ∨ respond_to_treatment(Rhett)",
      "diagnosed_early(Rhett) → (receive_comprehensive_care(Rhett) ∨ get_second_opinion(Rhett))",
      "involves_chemotherapy(Rhett) → (need_palliative_care(Rhett) ⊕ gets_radiation(Rhett))",
      "∀x ((show_symptoms(x) ∧ seek_medical_help(x)) → get_early_detection(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Rhett shows resilience."
        ],
        "rules": "Rhett's case either involves him showing resilience or early detection, but not both.",
        "conclusion": "Rhett does not get early detection."
      },
      {
        "facts": [
          "Rhett's case does not involve an oncologist."
        ],
        "rules": "If a medical case involves an oncologist, then it does not necessarily require palliative care, and if a case requires palliative care, then it may not necessarily involve an oncologist.",
        "conclusion": "Rhett needs palliative care."
      },
      {
        "facts": [
          "Rhett's case does not require surgery.",
          "Rhett needs palliative care."
        ],
        "rules": "If Rhett's case requires surgery, then he either needs palliative care or receives comprehensive care, but not both.",
        "conclusion": null
      },
      {
        "facts": [
          "Rhett's case does not show improvement."
        ],
        "rules": "Rhett's case either shows improvement or responds to treatment.",
        "conclusion": "Rhett responds to treatment."
      },
      {
        "facts": [
          "Rhett does not get early detection.",
          "Rhett responds to treatment."
        ],
        "rules": "If a medical case either involves early detection or a positive response to treatment (but not both), then it has a better prognosis.",
        "conclusion": "Rhett has a better prognosis."
      },
      {
        "facts": [
          "Rhett has a better prognosis."
        ],
        "rules": null,
        "conclusion": "If Rhett receives comprehensive care, then he has a better prognosis."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "show_resilience(Rhett)"
        ],
        "rules": "show_resilience(Rhett) ⊕ get_early_detection(Rhett)",
        "conclusion": "¬get_early_detection(Rhett)"
      },
      {
        "facts": [
          "¬involve_oncologist(Rhett)"
        ],
        "rules": "∀x (involve_oncologist(x) ⊕ need_palliative_care(x))",
        "conclusion": "need_palliative_care(Rhett)"
      },
      {
        "facts": [
          "¬require_surgery(Rhett)",
          "need_palliative_care(Rhett)"
        ],
        "rules": "require_surgery(Rhett) → (need_palliative_care(Rhett) ⊕ receive_comprehensive_care(Rhett))",
        "conclusion": null
      },
      {
        "facts": [
          "¬show_improvement(Rhett)"
        ],
        "rules": "show_improvement(Rhett) ∨ respond_to_treatment(Rhett)",
        "conclusion": "respond_to_treatment(Rhett)"
      },
      {
        "facts": [
          "¬get_early_detection(Rhett)",
          "respond_to_treatment(Rhett)"
        ],
        "rules": "∀x ((get_early_detection(x) ⊕ respond_to_treatment(x)) → have_better_prognosis(x))",
        "conclusion": "have_better_prognosis(Rhett)"
      },
      {
        "facts": [
          "have_better_prognosis(Rhett)"
        ],
        "rules": null,
        "conclusion": "receive_comprehensive_care(Rhett) → have_better_prognosis(Rhett)"
      }
    ],
    "conclusion": "If Rhett receives comprehensive care, then he has a better prognosis.",
    "conclusion_fol": "receive_comprehensive_care(Rhett) → have_better_prognosis(Rhett)",
    "answer": "True",
    "context": [
      "Rhett shows resilience.",
      "Rhett's case either involves him showing resilience or early detection, but not both.",
      "Rhett's case does not involve an oncologist.",
      "If a medical case involves an oncologist, then it does not necessarily require palliative care, and if a case requires palliative care, then it may not necessarily involve an oncologist.",
      "Rhett's case does not require surgery.",
      "If Rhett's case requires surgery, then he either needs palliative care or receives comprehensive care, but not both.",
      "Rhett's case does not show improvement.",
      "Rhett's case either shows improvement or responds to treatment.",
      "If a medical case either involves early detection or a positive response to treatment (but not both), then it has a better prognosis."
    ],
    "context_fol": [
      "show_resilience(Rhett)",
      "show_resilience(Rhett) ⊕ get_early_detection(Rhett)",
      "¬involve_oncologist(Rhett)",
      "∀x (involve_oncologist(x) ⊕ need_palliative_care(x))",
      "¬require_surgery(Rhett)",
      "require_surgery(Rhett) → (need_palliative_care(Rhett) ⊕ receive_comprehensive_care(Rhett))",
      "¬show_improvement(Rhett)",
      "show_improvement(Rhett) ∨ respond_to_treatment(Rhett)",
      "∀x ((get_early_detection(x) ⊕ respond_to_treatment(x)) → have_better_prognosis(x))"
    ],
    "background_story": "Rhett, a 55-year-old former smoker, was diagnosed with adenocarcinoma of the lung. The adenocarcinomatous tumor had developed in the smaller airways, such as alveoli, and had spread to nearby lymph nodes. Despite the challenging prognosis, Rhett underwent aggressive treatment, including surgery, chemotherapy, and radiation. His oncologist closely monitored the cancer's progression, adjusting the treatment plan as needed. Throughout his journey, Rhett's determination and resilience inspired his family and medical team. Although the road to recovery was long and arduous, Rhett remained hopeful, focusing on the positive aspects of his life and the support of his loved ones. His story highlights the importance of early detection, comprehensive care, and the human spirit's capacity to cope with adversity.",
    "name": "Rhett",
    "keyword": "adenocarcinomatous",
    "subject_category": "medical case"
  },
  {
    "facts": [
      "Kylo Ren is not driven by principle.",
      "Kylo Ren does not seek power."
    ],
    "facts_fol": [
      "¬driven_by_principle(Kylo)",
      "¬seek_power(Kylo)"
    ],
    "rules": [
      "For all fictional characters, if a character is driven by principle, then they make difficult choices and inspire loyalty.",
      "Kylo Ren either follows a code or makes difficult choices, but not both.",
      "Kylo Ren either seeks power or follows a code, but not both."
    ],
    "rules_fol": [
      "∀x (driven_by_principle(x) → (make_difficult_choices(x) ∧ inspire_loyalty(x)))",
      "follow_code(Kylo) ⊕ make_difficult_choices(Kylo)",
      "seek_power(Kylo) ⊕ follow_code(Kylo)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Kylo Ren either holds convictions or makes difficult choices.",
      "If Kylo Ren has conviction, then he leads others and follows a code."
    ],
    "distracting_rules_fol": [
      "holds_convictions(Kylo) ∨ make_difficult_choices(Kylo)",
      "has_conviction(Kylo) → (lead_others(Kylo) ∧ follow_code(Kylo))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Kylo Ren does not seek power."
        ],
        "rules": "Kylo Ren either seeks power or follows a code, but not both.",
        "conclusion": "Kylo Ren follows a code."
      },
      {
        "facts": [
          "Kylo Ren follows a code."
        ],
        "rules": "Kylo Ren either follows a code or makes difficult choices, but not both.",
        "conclusion": "Kylo Ren does not make difficult choices."
      },
      {
        "facts": [
          "Kylo Ren is not driven by principle.",
          "Kylo Ren does not make difficult choices."
        ],
        "rules": "For all fictional characters, if a character is driven by principle, then they make difficult choices and inspire loyalty.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬seek_power(Kylo)"
        ],
        "rules": "seek_power(Kylo) ⊕ follow_code(Kylo)",
        "conclusion": "follow_code(Kylo)"
      },
      {
        "facts": [
          "follow_code(Kylo)"
        ],
        "rules": "follow_code(Kylo) ⊕ make_difficult_choices(Kylo)",
        "conclusion": "¬make_difficult_choices(Kylo)"
      },
      {
        "facts": [
          "¬driven_by_principle(Kylo)",
          "¬make_difficult_choices(Kylo)"
        ],
        "rules": "∀x (driven_by_principle(x) → (make_difficult_choices(x) ∧ inspire_loyalty(x)))",
        "conclusion": null
      }
    ],
    "conclusion": "Kylo Ren inspires loyalty.",
    "conclusion_fol": "inspire_loyalty(Kylo)",
    "answer": "Uncertain",
    "context": [
      "Kylo Ren does not seek power.",
      "Kylo Ren either seeks power or follows a code, but not both.",
      "Kylo Ren either follows a code or makes difficult choices, but not both.",
      "Kylo Ren is not driven by principle.",
      "For all fictional characters, if a character is driven by principle, then they make difficult choices and inspire loyalty."
    ],
    "context_fol": [
      "¬seek_power(Kylo)",
      "seek_power(Kylo) ⊕ follow_code(Kylo)",
      "follow_code(Kylo) ⊕ make_difficult_choices(Kylo)",
      "¬driven_by_principle(Kylo)",
      "∀x (driven_by_principle(x) → (make_difficult_choices(x) ∧ inspire_loyalty(x)))"
    ],
    "background_story": "Kylo Ren, a high-ranking officer in the First Order, was driven by a strong sense of principle. He believed that the galaxy needed order and discipline, and he was willing to do whatever it took to achieve that goal. Despite his troubled past and inner conflict, Kylo remained committed to his principles, even when they put him at odds with those around him. His unwavering dedication to the First Order's cause was rooted in his desire to prove himself and bring balance to the galaxy. Kylo's adherence to his principles often led him to make difficult choices, but he saw them as necessary for the greater good. His conviction, though sometimes misguided, was unshakeable, making him a complex and formidable character in the galaxy.",
    "name": "Kylo",
    "keyword": "principle",
    "subject_category": "fictional character"
  },
  {
    "facts": [
      "Deacon invests wisely.",
      "Deacon earns a lot of money.",
      "Deacon helps others.",
      "Deacon creates opportunities."
    ],
    "facts_fol": [
      "invests_wisely(Deacon)",
      "earns_much(Deacon)",
      "help_others(Deacon)",
      "create_opportunities(Deacon)"
    ],
    "rules": [
      "If Deacon is either wealthy or generous (but not both), then he is respected.",
      "If someone invests wisely and earns much, then they are wealthy.",
      "If someone helps others, then they create opportunities and are generous."
    ],
    "rules_fol": [
      "(wealthy(Deacon) ⊕ generous(Deacon)) → respected(Deacon)",
      "∀x ((invests_wisely(x) ∧ earns_much(x)) → wealthy(x))",
      "∀x (help_others(x) → (create_opportunities(x) ∧ generous(x)))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Deacon either donates time or is wealthy.",
      "Everyone who is philanthropic either supports causes or is generous (or both)."
    ],
    "distracting_rules_fol": [
      "donates_time(Deacon) ∨ wealthy(Deacon)",
      "∀x (philanthropic(x) → (support_causes(x) ∨ generous(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Deacon helps others.",
          "Deacon creates opportunities."
        ],
        "rules": "If someone helps others, then they create opportunities and are generous.",
        "conclusion": "Deacon is generous."
      },
      {
        "facts": [
          "Deacon invests wisely.",
          "Deacon earns a lot of money."
        ],
        "rules": "If someone invests wisely and earns much, then they are wealthy.",
        "conclusion": "Deacon is wealthy."
      },
      {
        "facts": [
          "Deacon is wealthy.",
          "Deacon is generous."
        ],
        "rules": "If Deacon is either wealthy or generous (but not both), then he is respected.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "help_others(Deacon)",
          "create_opportunities(Deacon)"
        ],
        "rules": "∀x (help_others(x) → (create_opportunities(x) ∧ generous(x)))",
        "conclusion": "generous(Deacon)"
      },
      {
        "facts": [
          "invests_wisely(Deacon)",
          "earns_much(Deacon)"
        ],
        "rules": "∀x ((invests_wisely(x) ∧ earns_much(x)) → wealthy(x))",
        "conclusion": "wealthy(Deacon)"
      },
      {
        "facts": [
          "wealthy(Deacon)",
          "generous(Deacon)"
        ],
        "rules": "(wealthy(Deacon) ⊕ generous(Deacon)) → respected(Deacon)",
        "conclusion": null
      }
    ],
    "conclusion": "Deacon is not respected.",
    "conclusion_fol": "¬respected(Deacon)",
    "answer": "Uncertain",
    "context": [
      "Deacon helps others.",
      "Deacon creates opportunities.",
      "If someone helps others, then they create opportunities and are generous.",
      "Deacon invests wisely.",
      "Deacon earns a lot of money.",
      "If someone invests wisely and earns much, then they are wealthy.",
      "If Deacon is either wealthy or generous (but not both), then he is respected."
    ],
    "context_fol": [
      "help_others(Deacon)",
      "create_opportunities(Deacon)",
      "∀x (help_others(x) → (create_opportunities(x) ∧ generous(x)))",
      "invests_wisely(Deacon)",
      "earns_much(Deacon)",
      "∀x ((invests_wisely(x) ∧ earns_much(x)) → wealthy(x))",
      "(wealthy(Deacon) ⊕ generous(Deacon)) → respected(Deacon)"
    ],
    "background_story": "Deacon, a wealthy philanthropist, had made his fortune through savvy investments and entrepreneurial ventures. However, it was his benefaction that truly defined him. He believed that his wealth was a blessing to be shared, and so he dedicated his life to charitable causes. Deacon founded the 'Hope Initiative,' a foundation that provided educational scholarships, built hospitals, and supported disaster relief efforts worldwide. His generosity knew no bounds, and his selfless acts inspired countless others to follow in his footsteps. One of his most notable benefactions was the establishment of a state-of-the-art children's hospital in a impoverished region, which saved countless young lives. Deacon's legacy as a force for good continued to ripple out, touching hearts and transforming communities forever.",
    "name": "Deacon",
    "keyword": "benefaction",
    "subject_category": "human"
  },
  {
    "facts": [
      "Atreus does not experience downfall.",
      "Atreus has a tragic past.",
      "Atreus does not face divine retribution.",
      "Atreus has dark powers.",
      "Atreus is not immortal."
    ],
    "facts_fol": [
      "¬experiences_downfall(Atreus)",
      "has_tragic_past(Atreus)",
      "¬face_divine_retribution(Atreus)",
      "has_dark_powers(Atreus)",
      "¬is_immortal(Atreus)"
    ],
    "rules": [
      "For all mythologies, if a figure is cursed by the gods, then they will suffer greatly and become a cautionary tale.",
      "If a figure from mythology has a tragic past and experiences downfall, then they will become a cautionary tale.",
      "If Atreus is a figure of legend, then he is either cursed by the gods or faces divine retribution, but not both.",
      "Anyone known in myths is a figure of legend.",
      "If Atreus has dark powers, then he is either known in myths or is immortal, but not both."
    ],
    "rules_fol": [
      "∀x (cursed_by_gods(x) → (suffer_greatly(x) ∧ become_cautionary_tale(x)))",
      "∀x ((has_tragic_past(x) ∧ experiences_downfall(x)) → become_cautionary_tale(x))",
      "figure_of_legend(Atreus) → (cursed_by_gods(Atreus) ⊕ face_divine_retribution(Atreus))",
      "∀x (known_in_myths(x) → figure_of_legend(x))",
      "has_dark_powers(Atreus) → (known_in_myths(Atreus) ⊕ is_immortal(Atreus))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Atreus defies fate, then he will meet a tragic end and become a cautionary tale.",
      "Any figure in mythology who defies fate is either cursed by the gods or meets a tragic end.",
      "Anyone in mythology who has an epic story and is shaped by fate can become a figure of legend.",
      "Anyone who has an ancient story and impacts culture is known in myths."
    ],
    "distracting_rules_fol": [
      "defy_fate(Atreus) → (meet_tragic_end(Atreus) ∧ become_cautionary_tale(Atreus))",
      "∀x (defy_fate(x) → (cursed_by_gods(x) ∨ meet_tragic_end(x)))",
      "∀x ((has_epic_story(x) ∧ shaped_by_fate(x)) → figure_of_legend(x))",
      "∀x ((has_ancient_story(x) ∧ impacts_culture(x)) → known_in_myths(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Atreus has dark powers.",
          "Atreus is not immortal."
        ],
        "rules": "If Atreus has dark powers, then he is either known in myths or is immortal, but not both.",
        "conclusion": "Atreus is known in myths."
      },
      {
        "facts": [
          "Atreus is known in myths."
        ],
        "rules": "Anyone known in myths is a figure of legend.",
        "conclusion": "Atreus is a figure of legend."
      },
      {
        "facts": [
          "Atreus is a figure of legend.",
          "Atreus does not face divine retribution."
        ],
        "rules": "If Atreus is a figure of legend, then he is either cursed by the gods or faces divine retribution, but not both.",
        "conclusion": "Atreus is cursed by the gods."
      },
      {
        "facts": [
          "Atreus has a tragic past.",
          "Atreus does not experience downfall."
        ],
        "rules": "If a figure from mythology has a tragic past and experiences downfall, then they will become a cautionary tale.",
        "conclusion": null
      },
      {
        "facts": [
          "Atreus is cursed by the gods."
        ],
        "rules": "For all mythologies, if a figure is cursed by the gods, then they will suffer greatly and become a cautionary tale.",
        "conclusion": "Atreus does not suffer greatly."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "has_dark_powers(Atreus)",
          "¬is_immortal(Atreus)"
        ],
        "rules": "has_dark_powers(Atreus) → (known_in_myths(Atreus) ⊕ is_immortal(Atreus))",
        "conclusion": "known_in_myths(Atreus)"
      },
      {
        "facts": [
          "known_in_myths(Atreus)"
        ],
        "rules": "∀x (known_in_myths(x) → figure_of_legend(x))",
        "conclusion": "figure_of_legend(Atreus)"
      },
      {
        "facts": [
          "figure_of_legend(Atreus)",
          "¬face_divine_retribution(Atreus)"
        ],
        "rules": "figure_of_legend(Atreus) → (cursed_by_gods(Atreus) ⊕ face_divine_retribution(Atreus))",
        "conclusion": "cursed_by_gods(Atreus)"
      },
      {
        "facts": [
          "has_tragic_past(Atreus)",
          "¬experiences_downfall(Atreus)"
        ],
        "rules": "∀x ((has_tragic_past(x) ∧ experiences_downfall(x)) → become_cautionary_tale(x))",
        "conclusion": null
      },
      {
        "facts": [
          "cursed_by_gods(Atreus)"
        ],
        "rules": "∀x (cursed_by_gods(x) → (suffer_greatly(x) ∧ become_cautionary_tale(x)))",
        "conclusion": "¬suffer_greatly(Atreus)"
      }
    ],
    "conclusion": "Atreus does not suffer greatly.",
    "conclusion_fol": "¬suffer_greatly(Atreus)",
    "answer": "False",
    "context": [
      "Atreus has dark powers.",
      "Atreus is not immortal.",
      "If Atreus has dark powers, then he is either known in myths or is immortal, but not both.",
      "Anyone known in myths is a figure of legend.",
      "Atreus does not face divine retribution.",
      "If Atreus is a figure of legend, then he is either cursed by the gods or faces divine retribution, but not both.",
      "Atreus has a tragic past.",
      "Atreus does not experience downfall.",
      "If a figure from mythology has a tragic past and experiences downfall, then they will become a cautionary tale.",
      "For all mythologies, if a figure is cursed by the gods, then they will suffer greatly and become a cautionary tale."
    ],
    "context_fol": [
      "has_dark_powers(Atreus)",
      "¬is_immortal(Atreus)",
      "has_dark_powers(Atreus) → (known_in_myths(Atreus) ⊕ is_immortal(Atreus))",
      "∀x (known_in_myths(x) → figure_of_legend(x))",
      "¬face_divine_retribution(Atreus)",
      "figure_of_legend(Atreus) → (cursed_by_gods(Atreus) ⊕ face_divine_retribution(Atreus))",
      "has_tragic_past(Atreus)",
      "¬experiences_downfall(Atreus)",
      "∀x ((has_tragic_past(x) ∧ experiences_downfall(x)) → become_cautionary_tale(x))",
      "∀x (cursed_by_gods(x) → (suffer_greatly(x) ∧ become_cautionary_tale(x)))"
    ],
    "background_story": "Atreus, a figure from ancient Greek mythology, was said to have been cursed by the gods. His story is intertwined with the ilium, or the hip bone, in a darker tale. According to myth, Atreus was tricked into eating his own sons, and as a punishment, the gods afflicted him with a wasting disease that began in his ilium, spreading pain and suffering throughout his body. The myth of Atreus serves as a cautionary tale about the dangers of hubris and the cruelty of fate. His name became synonymous with tragic downfall, and his story has been retold and reinterpreted over the centuries as a reminder of the devastating consequences of unchecked ambition and the wrath of the gods.",
    "name": "Atreus",
    "keyword": "ilium",
    "subject_category": "mythology"
  },
  {
    "facts": [
      "Simone thinks outside the box.",
      "Simone is not inspirational.",
      "Simone embraces uncertainty."
    ],
    "facts_fol": [
      "thinks_outside(Simone)",
      "¬inspirational(Simone)",
      "embraces_uncertainty(Simone)"
    ],
    "rules": [
      "For all humans, if someone is free-spirited, then they are either creative or inspirational (or both).",
      "If Simone either travels widely or thinks outside the box (but not both), then she is free-spirited.",
      "Simone either travels widely or embraces uncertainty, but not both, as a way to express her individuality."
    ],
    "rules_fol": [
      "∀x (free_spirited(x) → (creative(x) ∨ inspirational(x)))",
      "(travels_widely(Simone) ⊕ thinks_outside(Simone)) → free_spirited(Simone)",
      "embraces_uncertainty(Simone) ⊕ travels_widely(Simone)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Simone pursues her passion, then she is free-spirited.",
      "If Simone lives authentically, then she either explores new ideas or travels widely (or both)."
    ],
    "distracting_rules_fol": [
      "pursues_passion(Simone) → free_spirited(Simone)",
      "lives_authentically(Simone) → (explores_new_ideas(Simone) ∨ travels_widely(Simone))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Simone embraces uncertainty."
        ],
        "rules": "Simone either travels widely or embraces uncertainty, but not both, as a way to express her individuality.",
        "conclusion": "Simone does not travel widely."
      },
      {
        "facts": [
          "Simone does not travel widely.",
          "Simone thinks outside the box."
        ],
        "rules": "If Simone either travels widely or thinks outside the box (but not both), then she is free-spirited.",
        "conclusion": "Simone is free-spirited."
      },
      {
        "facts": [
          "Simone is free-spirited.",
          "Simone is not inspirational."
        ],
        "rules": "For all humans, if someone is free-spirited, then they are either creative or inspirational (or both).",
        "conclusion": "Simone is not creative."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "embraces_uncertainty(Simone)"
        ],
        "rules": "embraces_uncertainty(Simone) ⊕ travels_widely(Simone)",
        "conclusion": "¬travels_widely(Simone)"
      },
      {
        "facts": [
          "¬travels_widely(Simone)",
          "thinks_outside(Simone)"
        ],
        "rules": "(travels_widely(Simone) ⊕ thinks_outside(Simone)) → free_spirited(Simone)",
        "conclusion": "free_spirited(Simone)"
      },
      {
        "facts": [
          "free_spirited(Simone)",
          "¬inspirational(Simone)"
        ],
        "rules": "∀x (free_spirited(x) → (creative(x) ∨ inspirational(x)))",
        "conclusion": "¬creative(Simone)"
      }
    ],
    "conclusion": "Simone is not creative.",
    "conclusion_fol": "¬creative(Simone)",
    "answer": "False",
    "context": [
      "Simone embraces uncertainty.",
      "Simone either travels widely or embraces uncertainty, but not both, as a way to express her individuality.",
      "Simone thinks outside the box.",
      "If Simone either travels widely or thinks outside the box (but not both), then she is free-spirited.",
      "Simone is not inspirational.",
      "For all humans, if someone is free-spirited, then they are either creative or inspirational (or both)."
    ],
    "context_fol": [
      "embraces_uncertainty(Simone)",
      "embraces_uncertainty(Simone) ⊕ travels_widely(Simone)",
      "thinks_outside(Simone)",
      "(travels_widely(Simone) ⊕ thinks_outside(Simone)) → free_spirited(Simone)",
      "¬inspirational(Simone)",
      "∀x (free_spirited(x) → (creative(x) ∨ inspirational(x)))"
    ],
    "background_story": "Simone was a free-spirited artist who lived life on her own terms. Growing up in a conservative community, she often felt stifled by the expectations placed upon her. But as she grew older, Simone began to break free from the shackles of societal norms, embracing her true self. She quit her secure but unfulfilling job to travel the world, immersing herself in different cultures and meeting people from all walks of life. With each new experience, Simone felt unchained, her creativity and passion igniting like never before. She started a blog to document her journey, which quickly gained a following. Simone's unchained spirit inspired countless others to pursue their dreams, and she became a symbol of liberation and self-expression.",
    "name": "Simone",
    "keyword": "unchained",
    "subject_category": "human"
  },
  {
    "facts": [
      "Dr. Zoe Chen is a renowned scientist.",
      "Zoe has a curious mind.",
      "Zoe does not study research."
    ],
    "facts_fol": [
      "renowned(Zoe)",
      "curious_mind(Zoe)",
      "¬study_research(Zoe)"
    ],
    "rules": [
      "For all scientists, if a scientist is renowned, then they either make breakthroughs or contribute to their field (or both).",
      "If Dr. Zoe Chen is dedicated, then she either makes breakthroughs or publishes papers, but not both.",
      "If Dr. Zoe Chen has a curious mind, then she collaborates with teams and publishes papers.",
      "All scientists who work hard are dedicated to their work.",
      "Every scientist either studies research or works hard."
    ],
    "rules_fol": [
      "∀x (renowned(x) → (make_breakthroughs(x) ∨ contribute_to_field(x)))",
      "is_dedicated(Zoe) → (make_breakthroughs(Zoe) ⊕ publish_papers(Zoe))",
      "curious_mind(Zoe) → (collaborate_teams(Zoe) ∧ publish_papers(Zoe))",
      "∀x (work_hard(x) → is_dedicated(x))",
      "∀x (study_research(x) ∨ work_hard(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Any scientist who thinks creatively or investigates deeply can make breakthroughs.",
      "If Dr. Zoe Chen reads widely and thinks critically, then she can publish papers.",
      "If Dr. Zoe Chen leads a laboratory, then she either wins awards or is dedicated, but not both.",
      "Every scientist who pursues knowledge either achieves recognition or works hard (or both)."
    ],
    "distracting_rules_fol": [
      "∀x ((think_creatively(x) ∨ investigate_deeply(x)) → make_breakthroughs(x))",
      "(reads_widely(Zoe) ∧ thinks_critically(Zoe)) → publish_papers(Zoe)",
      "lead_laboratory(Zoe) → (win_awards(Zoe) ⊕ is_dedicated(Zoe))",
      "∀x (pursue_knowledge(x) → (achieve_recognition(x) ∨ work_hard(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Zoe does not study research."
        ],
        "rules": "Every scientist either studies research or works hard.",
        "conclusion": "Zoe works hard."
      },
      {
        "facts": [
          "Zoe works hard."
        ],
        "rules": "All scientists who work hard are dedicated to their work.",
        "conclusion": "Zoe is dedicated."
      },
      {
        "facts": [
          "Zoe has a curious mind."
        ],
        "rules": "If Dr. Zoe Chen has a curious mind, then she collaborates with teams and publishes papers.",
        "conclusion": "Zoe publishes papers."
      },
      {
        "facts": [
          "Zoe is dedicated.",
          "Zoe publishes papers."
        ],
        "rules": "If Dr. Zoe Chen is dedicated, then she either makes breakthroughs or publishes papers, but not both.",
        "conclusion": "Dr. Zoe Chen does not make breakthroughs."
      },
      {
        "facts": [
          "Dr. Zoe Chen is a renowned scientist.",
          "Dr. Zoe Chen does not make breakthroughs."
        ],
        "rules": "For all scientists, if a scientist is renowned, then they either make breakthroughs or contribute to their field (or both).",
        "conclusion": "Dr. Zoe Chen contributes to her field."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬study_research(Zoe)"
        ],
        "rules": "∀x (study_research(x) ∨ work_hard(x))",
        "conclusion": "work_hard(Zoe)"
      },
      {
        "facts": [
          "work_hard(Zoe)"
        ],
        "rules": "∀x (work_hard(x) → is_dedicated(x))",
        "conclusion": "is_dedicated(Zoe)"
      },
      {
        "facts": [
          "curious_mind(Zoe)"
        ],
        "rules": "curious_mind(Zoe) → (collaborate_teams(Zoe) ∧ publish_papers(Zoe))",
        "conclusion": "publish_papers(Zoe)"
      },
      {
        "facts": [
          "is_dedicated(Zoe)",
          "publish_papers(Zoe)"
        ],
        "rules": "is_dedicated(Zoe) → (make_breakthroughs(Zoe) ⊕ publish_papers(Zoe))",
        "conclusion": "¬make_breakthroughs(Zoe)"
      },
      {
        "facts": [
          "renowned(Zoe)",
          "¬make_breakthroughs(Zoe)"
        ],
        "rules": "∀x (renowned(x) → (make_breakthroughs(x) ∨ contribute_to_field(x)))",
        "conclusion": "contribute_to_field(Zoe)"
      }
    ],
    "conclusion": "Dr. Zoe Chen contributes to her field.",
    "conclusion_fol": "contribute_to_field(Zoe)",
    "answer": "True",
    "context": [
      "Zoe does not study research.",
      "Every scientist either studies research or works hard.",
      "All scientists who work hard are dedicated to their work.",
      "Zoe has a curious mind.",
      "If Dr. Zoe Chen has a curious mind, then she collaborates with teams and publishes papers.",
      "If Dr. Zoe Chen is dedicated, then she either makes breakthroughs or publishes papers, but not both.",
      "Dr. Zoe Chen is a renowned scientist.",
      "For all scientists, if a scientist is renowned, then they either make breakthroughs or contribute to their field (or both)."
    ],
    "context_fol": [
      "¬study_research(Zoe)",
      "∀x (study_research(x) ∨ work_hard(x))",
      "∀x (work_hard(x) → is_dedicated(x))",
      "curious_mind(Zoe)",
      "curious_mind(Zoe) → (collaborate_teams(Zoe) ∧ publish_papers(Zoe))",
      "is_dedicated(Zoe) → (make_breakthroughs(Zoe) ⊕ publish_papers(Zoe))",
      "renowned(Zoe)",
      "∀x (renowned(x) → (make_breakthroughs(x) ∨ contribute_to_field(x)))"
    ],
    "background_story": "Dr. Zoe Chen was a renowned hematologist who spent her career studying the intricacies of blood cell formation. Her groundbreaking research focused on the monoblast, a precursor cell crucial in the development of monocytes, a type of white blood cell. Zoe's dedication to understanding the monoblast's role in immune response led to several pivotal discoveries, including the identification of specific genetic markers that could predict certain immune disorders. Her work paved the way for new therapeutic approaches, offering hope to patients suffering from previously untreatable conditions. Zoe's laboratory became a hub for innovative research, attracting talented scientists from around the world. Her tireless pursuit of knowledge and her contributions to the field of hematology earned her numerous accolades and a lasting legacy in the scientific community.",
    "name": "Zoe",
    "keyword": "monoblast",
    "subject_category": "scientist"
  },
  {
    "facts": [
      "Kalel is a skilled craftsman.",
      "Kalel is an innovator.",
      "Kalel is methodical."
    ],
    "facts_fol": [
      "craftsman(Kalel)",
      "is_innovator(Kalel)",
      "methodical(Kalel)"
    ],
    "rules": [
      "If Kalel is either an artist or a scientist (but not both), then he is a perfectionist.",
      "Kalel is either a skilled craftsman or a scientist, but not both.",
      "If Kalel is detail-oriented, then he is either an innovator or an artist, but not both.",
      "If Kalel is methodical, then he is detail-oriented and respects nature."
    ],
    "rules_fol": [
      "(artist(Kalel) ⊕ scientist(Kalel)) → perfectionist(Kalel)",
      "craftsman(Kalel) ⊕ scientist(Kalel)",
      "is_detail_oriented(Kalel) → (is_innovator(Kalel) ⊕ artist(Kalel))",
      "methodical(Kalel) → (is_detail_oriented(Kalel) ∧ respect_nature(Kalel))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Kalel either loves animals or is a scientist.",
      "If Kalel is creative, then he is both attentive and an artist.",
      "If someone loves precision and focuses intently, then they are detail-oriented."
    ],
    "distracting_rules_fol": [
      "loves_animals(Kalel) ∨ scientist(Kalel)",
      "creative(Kalel) → (attentive(Kalel) ∧ artist(Kalel))",
      "∀x ((loves_precision(x) ∧ focuses_intently(x)) → is_detail_oriented(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Kalel is methodical."
        ],
        "rules": "If Kalel is methodical, then he is detail-oriented and respects nature.",
        "conclusion": "Kalel is detail-oriented."
      },
      {
        "facts": [
          "Kalel is detail-oriented.",
          "Kalel is an innovator."
        ],
        "rules": "If Kalel is detail-oriented, then he is either an innovator or an artist, but not both.",
        "conclusion": "Kalel is not an artist."
      },
      {
        "facts": [
          "Kalel is a skilled craftsman."
        ],
        "rules": "Kalel is either a skilled craftsman or a scientist, but not both.",
        "conclusion": "Kalel is not a scientist."
      },
      {
        "facts": [
          "Kalel is not an artist.",
          "Kalel is not a scientist."
        ],
        "rules": "If Kalel is either an artist or a scientist (but not both), then he is a perfectionist.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "methodical(Kalel)"
        ],
        "rules": "methodical(Kalel) → (is_detail_oriented(Kalel) ∧ respect_nature(Kalel))",
        "conclusion": "is_detail_oriented(Kalel)"
      },
      {
        "facts": [
          "is_detail_oriented(Kalel)",
          "is_innovator(Kalel)"
        ],
        "rules": "is_detail_oriented(Kalel) → (is_innovator(Kalel) ⊕ artist(Kalel))",
        "conclusion": "¬artist(Kalel)"
      },
      {
        "facts": [
          "craftsman(Kalel)"
        ],
        "rules": "craftsman(Kalel) ⊕ scientist(Kalel)",
        "conclusion": "¬scientist(Kalel)"
      },
      {
        "facts": [
          "¬artist(Kalel)",
          "¬scientist(Kalel)"
        ],
        "rules": "(artist(Kalel) ⊕ scientist(Kalel)) → perfectionist(Kalel)",
        "conclusion": null
      }
    ],
    "conclusion": "Kalel is not a perfectionist.",
    "conclusion_fol": "¬perfectionist(Kalel)",
    "answer": "Uncertain",
    "context": [
      "Kalel is methodical.",
      "If Kalel is methodical, then he is detail-oriented and respects nature.",
      "Kalel is an innovator.",
      "If Kalel is detail-oriented, then he is either an innovator or an artist, but not both.",
      "Kalel is a skilled craftsman.",
      "Kalel is either a skilled craftsman or a scientist, but not both.",
      "If Kalel is either an artist or a scientist (but not both), then he is a perfectionist."
    ],
    "context_fol": [
      "methodical(Kalel)",
      "methodical(Kalel) → (is_detail_oriented(Kalel) ∧ respect_nature(Kalel))",
      "is_innovator(Kalel)",
      "is_detail_oriented(Kalel) → (is_innovator(Kalel) ⊕ artist(Kalel))",
      "craftsman(Kalel)",
      "craftsman(Kalel) ⊕ scientist(Kalel)",
      "(artist(Kalel) ⊕ scientist(Kalel)) → perfectionist(Kalel)"
    ],
    "background_story": "Kalel was a peculiar individual with a fascination for the art of preserving life. As a skilled taxidermist, he spent most of his days in his dimly lit workshop, surrounded by the silent companions he had given a second life to. With meticulous care, Kalel would pose and mount animals, aiming to capture their natural essence. His work was not just about preservation, but about storytelling. Each piece told a tale of the wild, of nature's beauty and ferocity. Kalel's craft was both an art and a science, requiring patience, precision, and a deep respect for the creatures he worked with. His studio became a museum of sorts, filled with the wonders of the natural world, frozen in time by Kalel's skilled hands.",
    "name": "Kalel",
    "keyword": "taxidermist",
    "subject_category": "human"
  },
  {
    "facts": [
      "Salma does not face challenges.",
      "Salma adapts quickly to the demands of her dance career.",
      "Salma does not set goals."
    ],
    "facts_fol": [
      "¬faces_challenges(Salma)",
      "adapts_quickly(Salma)",
      "¬sets_goals(Salma)"
    ],
    "rules": [
      "Salma either adapts quickly to the demands of her dance career or is resilient in the face of injury, but not necessarily both.",
      "If Salma faces challenges, then she either stays motivated or is persistent, but not both.",
      "If someone sets goals and finds support, then they stay motivated."
    ],
    "rules_fol": [
      "adapts_quickly(Salma) ⊕ resilient(Salma)",
      "faces_challenges(Salma) → (stays_motivated(Salma) ⊕ persistent(Salma))",
      "∀x ((sets_goals(x) ∧ finds_support(x)) → stays_motivated(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Salma either heals fast or is resilient.",
      "Everyone who overcomes obstacles is either persistent or learns from mistakes (or both).",
      "If someone has passion and learns quickly, then they stay motivated."
    ],
    "distracting_rules_fol": [
      "heals_fast(Salma) ∨ resilient(Salma)",
      "∀x (overcomes_obstacles(x) → (persistent(x) ∨ learns_from_mistakes(x)))",
      "∀x ((has_passion(x) ∧ learns_fast(x)) → stays_motivated(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Salma does not set goals."
        ],
        "rules": "If someone sets goals and finds support, then they stay motivated.",
        "conclusion": null
      },
      {
        "facts": [
          "Salma does not face challenges."
        ],
        "rules": "If Salma faces challenges, then she either stays motivated or is persistent, but not both.",
        "conclusion": null
      },
      {
        "facts": [
          "Salma adapts quickly to the demands of her dance career."
        ],
        "rules": "Salma either adapts quickly to the demands of her dance career or is resilient in the face of injury, but not necessarily both.",
        "conclusion": "Salma is not resilient."
      },
      {
        "facts": [
          "Salma is not resilient."
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬sets_goals(Salma)"
        ],
        "rules": "∀x ((sets_goals(x) ∧ finds_support(x)) → stays_motivated(x))",
        "conclusion": null
      },
      {
        "facts": [
          "¬faces_challenges(Salma)"
        ],
        "rules": "faces_challenges(Salma) → (stays_motivated(Salma) ⊕ persistent(Salma))",
        "conclusion": null
      },
      {
        "facts": [
          "adapts_quickly(Salma)"
        ],
        "rules": "adapts_quickly(Salma) ⊕ resilient(Salma)",
        "conclusion": "¬resilient(Salma)"
      },
      {
        "facts": [
          "¬resilient(Salma)"
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "conclusion": "Salma is either persistent or resilient (or both).",
    "conclusion_fol": "persistent(Salma) ∨ resilient(Salma)",
    "answer": "Uncertain",
    "context": [
      "Salma does not set goals.",
      "If someone sets goals and finds support, then they stay motivated.",
      "Salma does not face challenges.",
      "If Salma faces challenges, then she either stays motivated or is persistent, but not both.",
      "Salma adapts quickly to the demands of her dance career.",
      "Salma either adapts quickly to the demands of her dance career or is resilient in the face of injury, but not necessarily both."
    ],
    "context_fol": [
      "¬sets_goals(Salma)",
      "∀x ((sets_goals(x) ∧ finds_support(x)) → stays_motivated(x))",
      "¬faces_challenges(Salma)",
      "faces_challenges(Salma) → (stays_motivated(Salma) ⊕ persistent(Salma))",
      "adapts_quickly(Salma)",
      "adapts_quickly(Salma) ⊕ resilient(Salma)"
    ],
    "background_story": "Salma was a talented and ambitious dancer who had spent her entire life perfecting her craft. However, during a particularly grueling rehearsal, she landed injuriously from a complex jump, shattering her ankle and tearing several ligaments. The injury was so severe that it required multiple surgeries and a long, arduous recovery process. Despite the physical and emotional pain, Salma refused to give up on her passion. She used the downtime to focus on choreography and teaching, eventually opening her own dance studio where she could share her knowledge and experience with others. Though her injury had been injuriously debilitating, Salma's determination and resilience transformed a potentially career-ending setback into a new and fulfilling chapter in her life.",
    "name": "Salma",
    "keyword": "injuriously",
    "subject_category": "human"
  },
  {
    "facts": [
      "Zoya contributes to sustainability.",
      "Zoya is an ecologist.",
      "Zoya loves fish.",
      "Zoya advocates for conservation."
    ],
    "facts_fol": [
      "contribute_to_sustainability(Zoya)",
      "is_ecologist(Zoya)",
      "love_fish(Zoya)",
      "advocate_for_conservation(Zoya)"
    ],
    "rules": [
      "If Zoya is an ecologist, then she either studies marine biology or protects wildlife, but not both.",
      "If Zoya loves fish, then she cares about ocean conservation.",
      "Either Zoya advocates for conservation or protects wildlife, but not both."
    ],
    "rules_fol": [
      "is_ecologist(Zoya) → (study_marine_biology(Zoya) ⊕ protect_wildlife(Zoya))",
      "love_fish(Zoya) → care_about_ocean_conservation(Zoya)",
      "advocate_for_conservation(Zoya) ⊕ protect_wildlife(Zoya)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Zoya explores oceans and helps animals, then she studies marine biology.",
      "Anyone who researches fish or supports eco-causes cares about ocean conservation.",
      "If Zoya either rescues animals or preserves habitats (but not both), then she protects wildlife."
    ],
    "distracting_rules_fol": [
      "(explore_oceans(Zoya) ∧ help_animals(Zoya)) → study_marine_biology(Zoya)",
      "∀x ((research_fish(x) ∨ support_eco_causes(x)) → care_about_ocean_conservation(x))",
      "(rescue_animals(Zoya) ⊕ preserve_habitats(Zoya)) → protect_wildlife(Zoya)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Zoya advocates for conservation."
        ],
        "rules": "Either Zoya advocates for conservation or protects wildlife, but not both.",
        "conclusion": "Zoya does not protect wildlife."
      },
      {
        "facts": [
          "Zoya loves fish."
        ],
        "rules": "If Zoya loves fish, then she cares about ocean conservation.",
        "conclusion": "Zoya cares about ocean conservation."
      },
      {
        "facts": [
          "Zoya is an ecologist.",
          "Zoya does not protect wildlife."
        ],
        "rules": "If Zoya is an ecologist, then she either studies marine biology or protects wildlife, but not both.",
        "conclusion": "Zoya studies marine biology."
      },
      {
        "facts": [
          "Zoya studies marine biology.",
          "Zoya cares about ocean conservation.",
          "Zoya contributes to sustainability."
        ],
        "rules": null,
        "conclusion": "If Zoya studies marine biology or cares about ocean conservation (or both), then she contributes to sustainability."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "advocate_for_conservation(Zoya)"
        ],
        "rules": "advocate_for_conservation(Zoya) ⊕ protect_wildlife(Zoya)",
        "conclusion": "¬protect_wildlife(Zoya)"
      },
      {
        "facts": [
          "love_fish(Zoya)"
        ],
        "rules": "love_fish(Zoya) → care_about_ocean_conservation(Zoya)",
        "conclusion": "care_about_ocean_conservation(Zoya)"
      },
      {
        "facts": [
          "is_ecologist(Zoya)",
          "¬protect_wildlife(Zoya)"
        ],
        "rules": "is_ecologist(Zoya) → (study_marine_biology(Zoya) ⊕ protect_wildlife(Zoya))",
        "conclusion": "study_marine_biology(Zoya)"
      },
      {
        "facts": [
          "study_marine_biology(Zoya)",
          "care_about_ocean_conservation(Zoya)",
          "contribute_to_sustainability(Zoya)"
        ],
        "rules": null,
        "conclusion": "(study_marine_biology(Zoya) ∨ care_about_ocean_conservation(Zoya)) → contribute_to_sustainability(Zoya)"
      }
    ],
    "conclusion": "If Zoya studies marine biology or cares about ocean conservation (or both), then she contributes to sustainability.",
    "conclusion_fol": "(study_marine_biology(Zoya) ∨ care_about_ocean_conservation(Zoya)) → contribute_to_sustainability(Zoya)",
    "answer": "True",
    "context": [
      "Zoya advocates for conservation.",
      "Either Zoya advocates for conservation or protects wildlife, but not both.",
      "Zoya loves fish.",
      "If Zoya loves fish, then she cares about ocean conservation.",
      "Zoya is an ecologist.",
      "If Zoya is an ecologist, then she either studies marine biology or protects wildlife, but not both.",
      "Zoya contributes to sustainability."
    ],
    "context_fol": [
      "advocate_for_conservation(Zoya)",
      "advocate_for_conservation(Zoya) ⊕ protect_wildlife(Zoya)",
      "love_fish(Zoya)",
      "love_fish(Zoya) → care_about_ocean_conservation(Zoya)",
      "is_ecologist(Zoya)",
      "is_ecologist(Zoya) → (study_marine_biology(Zoya) ⊕ protect_wildlife(Zoya))",
      "contribute_to_sustainability(Zoya)"
    ],
    "background_story": "Zoya was a marine biologist with a passion for fish and the underwater world. Growing up near the ocean, she spent most of her childhood snorkeling and exploring the coral reefs. Her fascination with fish led her to study their behavior, migration patterns, and social interactions. Zoya's research focused on the conservation of endangered fish species and the impact of pollution on marine ecosystems. She spent years studying the majestic angelfish, the intelligent groupers, and the vibrant damselfish. Her groundbreaking discoveries helped establish marine protected areas, ensuring the survival of these incredible creatures. Zoya's love for fish not only advanced scientific knowledge but also inspired a new generation of ocean stewards and conservationists.",
    "name": "Zoya",
    "keyword": "fish",
    "subject_category": "human"
  },
  {
    "facts": [
      "Della is not a skilled chef.",
      "Della supports charity.",
      "Della reads widely.",
      "Della has ideas."
    ],
    "facts_fol": [
      "¬skilled_chef(Della)",
      "supports_charity(Della)",
      "reads_widely(Della)",
      "has_ideas(Della)"
    ],
    "rules": [
      "If Della is a skilled chef, then she creates delicious food and earns recognition.",
      "If Della either hosts events or writes books (but not both), then she earns recognition.",
      "Either Della supports charity or hosts events, but she does not do both.",
      "If Della reads widely and has ideas, then she writes books."
    ],
    "rules_fol": [
      "skilled_chef(Della) → (create_delicious_food(Della) ∧ earn_recognition(Della))",
      "(hosts_events(Della) ⊕ writes_books(Della)) → earn_recognition(Della)",
      "supports_charity(Della) ⊕ hosts_events(Della)",
      "(reads_widely(Della) ∧ has_ideas(Della)) → writes_books(Della)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Anyone who works hard or is creative can earn recognition.",
      "For all humans, if they plan parties and cook well, then they can host events.",
      "If Della is creative and documents recipes, then she writes books."
    ],
    "distracting_rules_fol": [
      "∀x ((works_hard(x) ∨ is_creative(x)) → earn_recognition(x))",
      "∀x ((plans_parties(x) ∧ cooks_well(x)) → hosts_events(x))",
      "(is_creative(Della) ∧ documents_recipes(Della)) → writes_books(Della)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Della reads widely.",
          "Della has ideas."
        ],
        "rules": "If Della reads widely and has ideas, then she writes books.",
        "conclusion": "Della writes books."
      },
      {
        "facts": [
          "Della supports charity."
        ],
        "rules": "Either Della supports charity or hosts events, but she does not do both.",
        "conclusion": "Della does not host events."
      },
      {
        "facts": [
          "Della does not host events.",
          "Della writes books."
        ],
        "rules": "If Della either hosts events or writes books (but not both), then she earns recognition.",
        "conclusion": "Della earns recognition."
      },
      {
        "facts": [
          "Della is not a skilled chef.",
          "Della earns recognition."
        ],
        "rules": "If Della is a skilled chef, then she creates delicious food and earns recognition.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "reads_widely(Della)",
          "has_ideas(Della)"
        ],
        "rules": "(reads_widely(Della) ∧ has_ideas(Della)) → writes_books(Della)",
        "conclusion": "writes_books(Della)"
      },
      {
        "facts": [
          "supports_charity(Della)"
        ],
        "rules": "supports_charity(Della) ⊕ hosts_events(Della)",
        "conclusion": "¬hosts_events(Della)"
      },
      {
        "facts": [
          "¬hosts_events(Della)",
          "writes_books(Della)"
        ],
        "rules": "(hosts_events(Della) ⊕ writes_books(Della)) → earn_recognition(Della)",
        "conclusion": "earn_recognition(Della)"
      },
      {
        "facts": [
          "¬skilled_chef(Della)",
          "earn_recognition(Della)"
        ],
        "rules": "skilled_chef(Della) → (create_delicious_food(Della) ∧ earn_recognition(Della))",
        "conclusion": null
      }
    ],
    "conclusion": "Della does not create delicious food.",
    "conclusion_fol": "¬create_delicious_food(Della)",
    "answer": "Uncertain",
    "context": [
      "Della reads widely.",
      "Della has ideas.",
      "If Della reads widely and has ideas, then she writes books.",
      "Della supports charity.",
      "Either Della supports charity or hosts events, but she does not do both.",
      "If Della either hosts events or writes books (but not both), then she earns recognition.",
      "Della is not a skilled chef.",
      "If Della is a skilled chef, then she creates delicious food and earns recognition."
    ],
    "context_fol": [
      "reads_widely(Della)",
      "has_ideas(Della)",
      "(reads_widely(Della) ∧ has_ideas(Della)) → writes_books(Della)",
      "supports_charity(Della)",
      "supports_charity(Della) ⊕ hosts_events(Della)",
      "(hosts_events(Della) ⊕ writes_books(Della)) → earn_recognition(Della)",
      "¬skilled_chef(Della)",
      "skilled_chef(Della) → (create_delicious_food(Della) ∧ earn_recognition(Della))"
    ],
    "background_story": "Della was a renowned chef who had spent years perfecting her craft in some of the world's top kitchens. Her big break came when she was invited to cook for a prestigious food festival, where her unique fusion of traditional and modern flavors wowed the crowd. Soon, Della's restaurant became the go-to spot for foodies and celebrities alike. She was celebrated for her innovative dishes, impeccable technique, and commitment to using only the freshest, locally-sourced ingredients. Della's accolades included numerous culinary awards and a coveted spot on a popular cooking show. Despite her fame, she remained humble and dedicated to her community, often hosting cooking classes for underprivileged kids and supporting local food banks. Della's celebrated career was a testament to her hard work, creativity, and passion for sharing the joy of good food with others.",
    "name": "Della",
    "keyword": "celebrated",
    "subject_category": "human"
  },
  {
    "facts": [
      "Tiana's patients have a successful recovery.",
      "Tiana's approach does not use personalized care.",
      "Tiana is an expert oncologist.",
      "Tiana's approach does not use targeted therapy.",
      "Tiana provides prompt intervention.",
      "Tiana studies biology.",
      "Tiana researches diseases."
    ],
    "facts_fol": [
      "successful_recovery(Tiana)",
      "¬personalized_care(Tiana)",
      "expert_oncologist(Tiana)",
      "¬targeted_therapy(Tiana)",
      "prompt_intervention(Tiana)",
      "studies_biology(Tiana)",
      "researches_diseases(Tiana)"
    ],
    "rules": [
      "Any medical approach that uses targeted therapy or personalized care can lead to effective treatment.",
      "If Tiana gives a precise prognosis, then she either provides an accurate diagnosis or prompt intervention, but not both.",
      "If Tiana is an expert oncologist, then she either gives precise prognoses or develops new methods.",
      "If a medical professional understands genetics, they may not necessarily develop new methods, and if they develop new methods, they may not necessarily understand genetics.",
      "For all medical professionals, if they study biology and research diseases, then they understand genetics."
    ],
    "rules_fol": [
      "∀x ((targeted_therapy(x) ∨ personalized_care(x)) → effective_treatment(x))",
      "precise_prognosis(Tiana) → (accurate_diagnosis(Tiana) ⊕ prompt_intervention(Tiana))",
      "expert_oncologist(Tiana) → (precise_prognosis(Tiana) ∨ develops_new_methods(Tiana))",
      "∀x (understands_genetics(x) ⊕ develops_new_methods(x))",
      "∀x ((studies_biology(x) ∧ researches_diseases(x)) → understands_genetics(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Tiana conducts research, then she either identifies biomarkers or provides effective treatment.",
      "If Tiana is a skilled doctor, then she provides accurate diagnoses and clear explanations.",
      "Tiana either makes a diagnosis or gives a precise prognosis.",
      "If Tiana either identifies biomarkers or creates vaccines (but not both), then she develops new methods.",
      "If Tiana reads research or analyzes data, then she understands genetics."
    ],
    "distracting_rules_fol": [
      "conducts_research(Tiana) → (identifies_biomarkers(Tiana) ∨ effective_treatment(Tiana))",
      "skilled_doctor(Tiana) → (accurate_diagnosis(Tiana) ∧ clear_explanation(Tiana))",
      "makes_diagnosis(Tiana) ∨ precise_prognosis(Tiana)",
      "(identifies_biomarkers(Tiana) ⊕ creates_vaccines(Tiana)) → develops_new_methods(Tiana)",
      "(reads_research(Tiana) ∨ analyzes_data(Tiana)) → understands_genetics(Tiana)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Tiana studies biology.",
          "Tiana researches diseases."
        ],
        "rules": "For all medical professionals, if they study biology and research diseases, then they understand genetics.",
        "conclusion": "Tiana understands genetics."
      },
      {
        "facts": [
          "Tiana understands genetics."
        ],
        "rules": "If a medical professional understands genetics, they may not necessarily develop new methods, and if they develop new methods, they may not necessarily understand genetics.",
        "conclusion": "Tiana does not develop new methods."
      },
      {
        "facts": [
          "Tiana is an expert oncologist.",
          "Tiana does not develop new methods."
        ],
        "rules": "If Tiana is an expert oncologist, then she either gives precise prognoses or develops new methods.",
        "conclusion": "Tiana gives a precise prognosis."
      },
      {
        "facts": [
          "Tiana gives a precise prognosis.",
          "Tiana provides prompt intervention."
        ],
        "rules": "If Tiana gives a precise prognosis, then she either provides an accurate diagnosis or prompt intervention, but not both.",
        "conclusion": "Tiana's diagnosis is not accurate."
      },
      {
        "facts": [
          "Tiana's approach does not use targeted therapy.",
          "Tiana's approach does not use personalized care."
        ],
        "rules": "Any medical approach that uses targeted therapy or personalized care can lead to effective treatment.",
        "conclusion": null
      },
      {
        "facts": [
          "Tiana's diagnosis is not accurate.",
          "Tiana's patients have a successful recovery."
        ],
        "rules": null,
        "conclusion": "If Tiana's patients receive an accurate diagnosis and effective treatment, then they will have a successful recovery."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "studies_biology(Tiana)",
          "researches_diseases(Tiana)"
        ],
        "rules": "∀x ((studies_biology(x) ∧ researches_diseases(x)) → understands_genetics(x))",
        "conclusion": "understands_genetics(Tiana)"
      },
      {
        "facts": [
          "understands_genetics(Tiana)"
        ],
        "rules": "∀x (understands_genetics(x) ⊕ develops_new_methods(x))",
        "conclusion": "¬develops_new_methods(Tiana)"
      },
      {
        "facts": [
          "expert_oncologist(Tiana)",
          "¬develops_new_methods(Tiana)"
        ],
        "rules": "expert_oncologist(Tiana) → (precise_prognosis(Tiana) ∨ develops_new_methods(Tiana))",
        "conclusion": "precise_prognosis(Tiana)"
      },
      {
        "facts": [
          "precise_prognosis(Tiana)",
          "prompt_intervention(Tiana)"
        ],
        "rules": "precise_prognosis(Tiana) → (accurate_diagnosis(Tiana) ⊕ prompt_intervention(Tiana))",
        "conclusion": "¬accurate_diagnosis(Tiana)"
      },
      {
        "facts": [
          "¬targeted_therapy(Tiana)",
          "¬personalized_care(Tiana)"
        ],
        "rules": "∀x ((targeted_therapy(x) ∨ personalized_care(x)) → effective_treatment(x))",
        "conclusion": null
      },
      {
        "facts": [
          "¬accurate_diagnosis(Tiana)",
          "successful_recovery(Tiana)"
        ],
        "rules": null,
        "conclusion": "(accurate_diagnosis(Tiana) ∧ effective_treatment(Tiana)) → successful_recovery(Tiana)"
      }
    ],
    "conclusion": "If Tiana's patients receive an accurate diagnosis and effective treatment, then they will have a successful recovery.",
    "conclusion_fol": "(accurate_diagnosis(Tiana) ∧ effective_treatment(Tiana)) → successful_recovery(Tiana)",
    "answer": "True",
    "context": [
      "Tiana studies biology.",
      "Tiana researches diseases.",
      "For all medical professionals, if they study biology and research diseases, then they understand genetics.",
      "If a medical professional understands genetics, they may not necessarily develop new methods, and if they develop new methods, they may not necessarily understand genetics.",
      "Tiana is an expert oncologist.",
      "If Tiana is an expert oncologist, then she either gives precise prognoses or develops new methods.",
      "Tiana provides prompt intervention.",
      "If Tiana gives a precise prognosis, then she either provides an accurate diagnosis or prompt intervention, but not both.",
      "Tiana's approach does not use targeted therapy.",
      "Tiana's approach does not use personalized care.",
      "Any medical approach that uses targeted therapy or personalized care can lead to effective treatment.",
      "Tiana's patients have a successful recovery."
    ],
    "context_fol": [
      "studies_biology(Tiana)",
      "researches_diseases(Tiana)",
      "∀x ((studies_biology(x) ∧ researches_diseases(x)) → understands_genetics(x))",
      "∀x (understands_genetics(x) ⊕ develops_new_methods(x))",
      "expert_oncologist(Tiana)",
      "expert_oncologist(Tiana) → (precise_prognosis(Tiana) ∨ develops_new_methods(Tiana))",
      "prompt_intervention(Tiana)",
      "precise_prognosis(Tiana) → (accurate_diagnosis(Tiana) ⊕ prompt_intervention(Tiana))",
      "¬targeted_therapy(Tiana)",
      "¬personalized_care(Tiana)",
      "∀x ((targeted_therapy(x) ∨ personalized_care(x)) → effective_treatment(x))",
      "successful_recovery(Tiana)"
    ],
    "background_story": "Tiana was a brilliant and determined oncologist who dedicated her career to understanding and combating neoplastic diseases. Her fascination with the complexities of cancer began when her mother was diagnosed with a malignant tumor. Tiana's research focused on the genetic mutations that lead to neoplastic transformations, seeking to develop more effective and targeted treatments. Her groundbreaking work in identifying specific biomarkers for early cancer detection earned her international recognition. Tiana's tireless efforts and collaborative spirit inspired a new generation of researchers, and her contributions to the field have improved the prognosis for countless patients facing neoplastic conditions. Her mother's legacy lived on through Tiana's unwavering commitment to finding a cure.",
    "name": "Tiana",
    "keyword": "neoplastic",
    "subject_category": "medical"
  },
  {
    "facts": [
      "Hottie loves dancing.",
      "Hottie is charismatic.",
      "Hottie attends parties."
    ],
    "facts_fol": [
      "loves_dancing(Hottie)",
      "is_charismatic(Hottie)",
      "attends_parties(Hottie)"
    ],
    "rules": [
      "If Hottie is confident, then she inspires others.",
      "If Hottie is charismatic, then she is either outgoing or confident, but not both.",
      "For all humans, if they love dancing and enjoy socializing, then they are outgoing.",
      "Anyone who attends parties or makes friends enjoys socializing."
    ],
    "rules_fol": [
      "is_confident(Hottie) → inspires_others(Hottie)",
      "is_charismatic(Hottie) → (is_outgoing(Hottie) ⊕ is_confident(Hottie))",
      "∀x ((loves_dancing(x) ∧ enjoys_socializing(x)) → is_outgoing(x))",
      "∀x ((attends_parties(x) ∨ makes_friends(x)) → enjoys_socializing(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Hottie has style, then she is confident and takes risks.",
      "Anyone who speaks freely or laughs often is outgoing.",
      "If Hottie either joins clubs or hosts events (but not both), then she enjoys socializing."
    ],
    "distracting_rules_fol": [
      "has_style(Hottie) → (is_confident(Hottie) ∧ takes_risks(Hottie))",
      "∀x ((speaks_freely(x) ∨ laughs_often(x)) → is_outgoing(x))",
      "(joins_clubs(Hottie) ⊕ hosts_events(Hottie)) → enjoys_socializing(Hottie)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Hottie attends parties."
        ],
        "rules": "Anyone who attends parties or makes friends enjoys socializing.",
        "conclusion": "Hottie enjoys socializing."
      },
      {
        "facts": [
          "Hottie loves dancing.",
          "Hottie enjoys socializing."
        ],
        "rules": "For all humans, if they love dancing and enjoy socializing, then they are outgoing.",
        "conclusion": "Hottie is outgoing."
      },
      {
        "facts": [
          "Hottie is charismatic.",
          "Hottie is outgoing."
        ],
        "rules": "If Hottie is charismatic, then she is either outgoing or confident, but not both.",
        "conclusion": "Hottie is not confident."
      },
      {
        "facts": [
          "Hottie is not confident."
        ],
        "rules": "If Hottie is confident, then she inspires others.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "attends_parties(Hottie)"
        ],
        "rules": "∀x ((attends_parties(x) ∨ makes_friends(x)) → enjoys_socializing(x))",
        "conclusion": "enjoys_socializing(Hottie)"
      },
      {
        "facts": [
          "loves_dancing(Hottie)",
          "enjoys_socializing(Hottie)"
        ],
        "rules": "∀x ((loves_dancing(x) ∧ enjoys_socializing(x)) → is_outgoing(x))",
        "conclusion": "is_outgoing(Hottie)"
      },
      {
        "facts": [
          "is_charismatic(Hottie)",
          "is_outgoing(Hottie)"
        ],
        "rules": "is_charismatic(Hottie) → (is_outgoing(Hottie) ⊕ is_confident(Hottie))",
        "conclusion": "¬is_confident(Hottie)"
      },
      {
        "facts": [
          "¬is_confident(Hottie)"
        ],
        "rules": "is_confident(Hottie) → inspires_others(Hottie)",
        "conclusion": null
      }
    ],
    "conclusion": "Hottie does not inspire others.",
    "conclusion_fol": "¬inspires_others(Hottie)",
    "answer": "Uncertain",
    "context": [
      "Hottie attends parties.",
      "Anyone who attends parties or makes friends enjoys socializing.",
      "Hottie loves dancing.",
      "For all humans, if they love dancing and enjoy socializing, then they are outgoing.",
      "Hottie is charismatic.",
      "If Hottie is charismatic, then she is either outgoing or confident, but not both.",
      "If Hottie is confident, then she inspires others."
    ],
    "context_fol": [
      "attends_parties(Hottie)",
      "∀x ((attends_parties(x) ∨ makes_friends(x)) → enjoys_socializing(x))",
      "loves_dancing(Hottie)",
      "∀x ((loves_dancing(x) ∧ enjoys_socializing(x)) → is_outgoing(x))",
      "is_charismatic(Hottie)",
      "is_charismatic(Hottie) → (is_outgoing(Hottie) ⊕ is_confident(Hottie))",
      "is_confident(Hottie) → inspires_others(Hottie)"
    ],
    "background_story": "Hottie, whose real name was Judith, was a fiery and charismatic individual. Born in the 1920s, she defied conventions with her bold fashion sense and unapologetic attitude. Judith, or Hottie as she was nicknamed by her friends, was a regular at the local jazz clubs, where she would dance the night away with her signature moves. Her confidence and charm caught the eye of a young artist, who immortalized her in a painting that would later become a classic of the era. Hottie's carefree spirit and zest for life inspired those around her, making her a legend in her own right. Though she lived life on her own terms, Hottie remained humble and kind, leaving behind a legacy of joy and empowerment.",
    "name": "Hottie",
    "keyword": "judith",
    "subject_category": "human"
  },
  {
    "facts": [
      "Jazmin understands nature.",
      "Jazmin has the ability to heal emotions.",
      "Jazmin sees beyond the ordinary.",
      "Jazmin listens deeply."
    ],
    "facts_fol": [
      "understand_nature(Jazmin)",
      "heal_emotions(Jazmin)",
      "sees_beyond(Jazmin)",
      "listens_deeply(Jazmin)"
    ],
    "rules": [
      "For all mystics, if a mystic is respected, then they either interpret omens or possess cosmic insight (or both).",
      "If Jazmin understands nature, then she is either a respected mystic or can read auras, but not both.",
      "If Jazmin is attuned to the universe, then she possesses cosmic insight and senses hidden patterns.",
      "Jazmin either has the ability to read auras or heal emotions, but not both.",
      "If a mystic sees beyond the ordinary and listens deeply, then they are attuned to the universe."
    ],
    "rules_fol": [
      "∀x (respected_mystic(x) → (interpret_omens(x) ∨ possess_cosmic_insight(x)))",
      "understand_nature(Jazmin) → (read_auras(Jazmin) ⊕ respected_mystic(Jazmin))",
      "attuned_to_universe(Jazmin) → (possess_cosmic_insight(Jazmin) ∧ sense_hidden_patterns(Jazmin))",
      "heal_emotions(Jazmin) ⊕ read_auras(Jazmin)",
      "∀x ((sees_beyond(x) ∧ listens_deeply(x)) → attuned_to_universe(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Jazmin guides her community, then she is a respected mystic or weaves the threads of fate (or both).",
      "If Jazmin reads the stars or hears the whispers of the universe, then she possesses cosmic insight.",
      "If Jazmin taps into her intuition, then she can hear whispers and read auras.",
      "If Jazmin either feels vibrations or sees energies (but not both), then she is attuned to the universe."
    ],
    "distracting_rules_fol": [
      "guide_community(Jazmin) → (respected_mystic(Jazmin) ∨ weave_fate(Jazmin))",
      "(reads_stars(Jazmin) ∨ hears_whispers(Jazmin)) → possess_cosmic_insight(Jazmin)",
      "tap_intuition(Jazmin) → (hear_whispers(Jazmin) ∧ read_auras(Jazmin))",
      "(feels_vibrations(Jazmin) ⊕ sees_energies(Jazmin)) → attuned_to_universe(Jazmin)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Jazmin sees beyond the ordinary.",
          "Jazmin listens deeply."
        ],
        "rules": "If a mystic sees beyond the ordinary and listens deeply, then they are attuned to the universe.",
        "conclusion": "Jazmin is attuned to the universe."
      },
      {
        "facts": [
          "Jazmin has the ability to heal emotions."
        ],
        "rules": "Jazmin either has the ability to read auras or heal emotions, but not both.",
        "conclusion": "Jazmin cannot read auras."
      },
      {
        "facts": [
          "Jazmin is attuned to the universe."
        ],
        "rules": "If Jazmin is attuned to the universe, then she possesses cosmic insight and senses hidden patterns.",
        "conclusion": "Jazmin possesses cosmic insight."
      },
      {
        "facts": [
          "Jazmin understands nature.",
          "Jazmin cannot read auras."
        ],
        "rules": "If Jazmin understands nature, then she is either a respected mystic or can read auras, but not both.",
        "conclusion": "Jazmin is a respected mystic."
      },
      {
        "facts": [
          "Jazmin is a respected mystic.",
          "Jazmin possesses cosmic insight."
        ],
        "rules": "For all mystics, if a mystic is respected, then they either interpret omens or possess cosmic insight (or both).",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "sees_beyond(Jazmin)",
          "listens_deeply(Jazmin)"
        ],
        "rules": "∀x ((sees_beyond(x) ∧ listens_deeply(x)) → attuned_to_universe(x))",
        "conclusion": "attuned_to_universe(Jazmin)"
      },
      {
        "facts": [
          "heal_emotions(Jazmin)"
        ],
        "rules": "heal_emotions(Jazmin) ⊕ read_auras(Jazmin)",
        "conclusion": "¬read_auras(Jazmin)"
      },
      {
        "facts": [
          "attuned_to_universe(Jazmin)"
        ],
        "rules": "attuned_to_universe(Jazmin) → (possess_cosmic_insight(Jazmin) ∧ sense_hidden_patterns(Jazmin))",
        "conclusion": "possess_cosmic_insight(Jazmin)"
      },
      {
        "facts": [
          "understand_nature(Jazmin)",
          "¬read_auras(Jazmin)"
        ],
        "rules": "understand_nature(Jazmin) → (read_auras(Jazmin) ⊕ respected_mystic(Jazmin))",
        "conclusion": "respected_mystic(Jazmin)"
      },
      {
        "facts": [
          "respected_mystic(Jazmin)",
          "possess_cosmic_insight(Jazmin)"
        ],
        "rules": "∀x (respected_mystic(x) → (interpret_omens(x) ∨ possess_cosmic_insight(x)))",
        "conclusion": null
      }
    ],
    "conclusion": "Jazmin interprets omens.",
    "conclusion_fol": "interpret_omens(Jazmin)",
    "answer": "Uncertain",
    "context": [
      "Jazmin sees beyond the ordinary.",
      "Jazmin listens deeply.",
      "If a mystic sees beyond the ordinary and listens deeply, then they are attuned to the universe.",
      "Jazmin has the ability to heal emotions.",
      "Jazmin either has the ability to read auras or heal emotions, but not both.",
      "If Jazmin is attuned to the universe, then she possesses cosmic insight and senses hidden patterns.",
      "Jazmin understands nature.",
      "If Jazmin understands nature, then she is either a respected mystic or can read auras, but not both.",
      "For all mystics, if a mystic is respected, then they either interpret omens or possess cosmic insight (or both)."
    ],
    "context_fol": [
      "sees_beyond(Jazmin)",
      "listens_deeply(Jazmin)",
      "∀x ((sees_beyond(x) ∧ listens_deeply(x)) → attuned_to_universe(x))",
      "heal_emotions(Jazmin)",
      "heal_emotions(Jazmin) ⊕ read_auras(Jazmin)",
      "attuned_to_universe(Jazmin) → (possess_cosmic_insight(Jazmin) ∧ sense_hidden_patterns(Jazmin))",
      "understand_nature(Jazmin)",
      "understand_nature(Jazmin) → (read_auras(Jazmin) ⊕ respected_mystic(Jazmin))",
      "∀x (respected_mystic(x) → (interpret_omens(x) ∨ possess_cosmic_insight(x)))"
    ],
    "background_story": "Jazmin was a mystical diviner from an ancient lineage of seers. With eyes that saw beyond the veil, she possessed the gift of interpreting the whispers of the universe. Her village sought her counsel for every major decision, from planting crops to forging alliances. Jazmin would retreat to her sacred grove, where she'd read the patterns of the stars, the flow of the river, and the songs of the birds. Her divinations were always shrouded in an aura of mystery, yet they held an uncanny truth. People believed that Jazmin's connection to the cosmos allowed her to weave the threads of fate, guiding her community through times of turmoil and prosperity. Her reputation as a wise and powerful diviner spread far and wide, attracting seekers of truth from distant lands.",
    "name": "Jazmin",
    "keyword": "diviner",
    "subject_category": "mystic"
  },
  {
    "facts": [
      "Kinsley invests in quality.",
      "Kinsley cuts costs."
    ],
    "facts_fol": [
      "invests_in_quality(Kinsley)",
      "cuts_costs(Kinsley)"
    ],
    "rules": [
      "If Kinsley's bakery conducts market research, then it succeeds financially.",
      "A business either offers unique products or conducts market research, but not necessarily both.",
      "Any business that hires talented staff or invests in quality can offer unique products.",
      "Kinsley's bakery either cuts costs or hires talented staff, indicating that she had to make a choice between these two approaches to manage her business effectively."
    ],
    "rules_fol": [
      "conducts_market_research(Kinsley) → succeeds_financially(Kinsley)",
      "∀x (offers_unique_products(x) ⊕ conducts_market_research(x))",
      "∀x ((hires_talented_staff(x) ∨ invests_in_quality(x)) → offers_unique_products(x))",
      "cuts_costs(Kinsley) ⊕ hires_talented_staff(Kinsley)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Any business that analyzes data or identifies trends conducts market research.",
      "If Kinsley's bakery has passion, then it builds a community and offers unique products.",
      "Every business that strives for excellence either fosters innovation or hires talented staff (or both)."
    ],
    "distracting_rules_fol": [
      "∀x ((analyzes_data(x) ∨ identifies_trends(x)) → conducts_market_research(x))",
      "has_passion(Kinsley) → (builds_community(Kinsley) ∧ offers_unique_products(Kinsley))",
      "∀x (strives_for_excellence(x) → (fosters_innovation(x) ∨ hires_talented_staff(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Kinsley cuts costs."
        ],
        "rules": "Kinsley's bakery either cuts costs or hires talented staff, indicating that she had to make a choice between these two approaches to manage her business effectively.",
        "conclusion": "Kinsley's bakery does not hire talented staff."
      },
      {
        "facts": [
          "Kinsley's bakery does not hire talented staff.",
          "Kinsley invests in quality."
        ],
        "rules": "Any business that hires talented staff or invests in quality can offer unique products.",
        "conclusion": "Kinsley's bakery offers unique products."
      },
      {
        "facts": [
          "Kinsley's bakery offers unique products."
        ],
        "rules": "A business either offers unique products or conducts market research, but not necessarily both.",
        "conclusion": "Kinsley's bakery does not conduct market research."
      },
      {
        "facts": [
          "Kinsley's bakery does not conduct market research."
        ],
        "rules": "If Kinsley's bakery conducts market research, then it succeeds financially.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "cuts_costs(Kinsley)"
        ],
        "rules": "cuts_costs(Kinsley) ⊕ hires_talented_staff(Kinsley)",
        "conclusion": "¬hires_talented_staff(Kinsley)"
      },
      {
        "facts": [
          "¬hires_talented_staff(Kinsley)",
          "invests_in_quality(Kinsley)"
        ],
        "rules": "∀x ((hires_talented_staff(x) ∨ invests_in_quality(x)) → offers_unique_products(x))",
        "conclusion": "offers_unique_products(Kinsley)"
      },
      {
        "facts": [
          "offers_unique_products(Kinsley)"
        ],
        "rules": "∀x (offers_unique_products(x) ⊕ conducts_market_research(x))",
        "conclusion": "¬conducts_market_research(Kinsley)"
      },
      {
        "facts": [
          "¬conducts_market_research(Kinsley)"
        ],
        "rules": "conducts_market_research(Kinsley) → succeeds_financially(Kinsley)",
        "conclusion": null
      }
    ],
    "conclusion": "Kinsley's bakery does not succeed financially.",
    "conclusion_fol": "¬succeeds_financially(Kinsley)",
    "answer": "Uncertain",
    "context": [
      "Kinsley cuts costs.",
      "Kinsley's bakery either cuts costs or hires talented staff, indicating that she had to make a choice between these two approaches to manage her business effectively.",
      "Kinsley invests in quality.",
      "Any business that hires talented staff or invests in quality can offer unique products.",
      "A business either offers unique products or conducts market research, but not necessarily both.",
      "If Kinsley's bakery conducts market research, then it succeeds financially."
    ],
    "context_fol": [
      "cuts_costs(Kinsley)",
      "cuts_costs(Kinsley) ⊕ hires_talented_staff(Kinsley)",
      "invests_in_quality(Kinsley)",
      "∀x ((hires_talented_staff(x) ∨ invests_in_quality(x)) → offers_unique_products(x))",
      "∀x (offers_unique_products(x) ⊕ conducts_market_research(x))",
      "conducts_market_research(Kinsley) → succeeds_financially(Kinsley)"
    ],
    "background_story": "Kinsley had always dreamed of opening her own bakery, pouring her heart and soul into perfecting recipes and designing a cozy shop. After securing a loan and finding the ideal location, she launched 'Sweet Dreams.' However, despite her best efforts, the business struggled to attract a consistent customer base. The location, once thought ideal, proved to be nonviable due to limited foot traffic and high rent. Competing bakeries in the area offered similar products at lower prices, making it difficult for Kinsley to compete. As the months went by, Kinsley faced the harsh reality that her beloved bakery was nonviable, and she was forced to close its doors. Though the experience was a setback, Kinsley learned valuable lessons about market research and adaptability, planning to apply them to her next venture.",
    "name": "Kinsley",
    "keyword": "nonviable",
    "subject_category": "business"
  },
  {
    "facts": [
      "Marley is not affectionate.",
      "Marley is loving.",
      "Marley is energetic."
    ],
    "facts_fol": [
      "¬affectionate(Marley)",
      "loving(Marley)",
      "energetic(Marley)"
    ],
    "rules": [
      "If Marley is destructive, then he is either loving or entertaining, but not both.",
      "If Marley is playful, then he is either affectionate or destructive, but not both.",
      "All energetic dogs are playful."
    ],
    "rules_fol": [
      "destructive(Marley) → (loving(Marley) ⊕ entertaining(Marley))",
      "playful(Marley) → (affectionate(Marley) ⊕ destructive(Marley))",
      "∀x (energetic(x) → playful(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Any dog that chews furniture or digs yards is destructive.",
      "Any dog that likes toys and enjoys playing fetch is playful."
    ],
    "distracting_rules_fol": [
      "∀x ((chews_furniture(x) ∨ digs_yard(x)) → destructive(x))",
      "∀x ((likes_toys(x) ∧ enjoys_fetch(x)) → playful(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Marley is energetic."
        ],
        "rules": "All energetic dogs are playful.",
        "conclusion": "Marley is playful."
      },
      {
        "facts": [
          "Marley is playful.",
          "Marley is not affectionate."
        ],
        "rules": "If Marley is playful, then he is either affectionate or destructive, but not both.",
        "conclusion": "Marley is destructive."
      },
      {
        "facts": [
          "Marley is destructive.",
          "Marley is loving."
        ],
        "rules": "If Marley is destructive, then he is either loving or entertaining, but not both.",
        "conclusion": "Marley is entertaining."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "energetic(Marley)"
        ],
        "rules": "∀x (energetic(x) → playful(x))",
        "conclusion": "playful(Marley)"
      },
      {
        "facts": [
          "playful(Marley)",
          "¬affectionate(Marley)"
        ],
        "rules": "playful(Marley) → (affectionate(Marley) ⊕ destructive(Marley))",
        "conclusion": "destructive(Marley)"
      },
      {
        "facts": [
          "destructive(Marley)",
          "loving(Marley)"
        ],
        "rules": "destructive(Marley) → (loving(Marley) ⊕ entertaining(Marley))",
        "conclusion": "entertaining(Marley)"
      }
    ],
    "conclusion": "Marley is entertaining.",
    "conclusion_fol": "entertaining(Marley)",
    "answer": "False",
    "context": [
      "Marley is energetic.",
      "All energetic dogs are playful.",
      "Marley is not affectionate.",
      "If Marley is playful, then he is either affectionate or destructive, but not both.",
      "Marley is loving.",
      "If Marley is destructive, then he is either loving or entertaining, but not both."
    ],
    "context_fol": [
      "energetic(Marley)",
      "∀x (energetic(x) → playful(x))",
      "¬affectionate(Marley)",
      "playful(Marley) → (affectionate(Marley) ⊕ destructive(Marley))",
      "loving(Marley)",
      "destructive(Marley) → (loving(Marley) ⊕ entertaining(Marley))"
    ],
    "background_story": "Marley was a rambunctious bulldog with a knack for getting into trouble. His owners, the Smiths, adored him, but their home often paid the price for his energetic antics. Marley had a peculiar talent for finding the most valuable or sentimental items and either chewing them to bits or burying them in the backyard. He once destroyed a brand new couch, chewed through a favorite pair of shoes, and even managed to dig up the neighbor's garden. Despite the chaos he caused, the Smiths couldn't help but laugh at Marley's mischievous grin and loving personality. They jokingly referred to him as their 'housewrecker,' but deep down, they knew he brought more joy than destruction into their lives.",
    "name": "Marley",
    "keyword": "housewrecker",
    "subject_category": "dog"
  },
  {
    "facts": [
      "Amoura teaches unity.",
      "Amoura writes books.",
      "Amoura pursues wisdom.",
      "Amoura does not examine reality."
    ],
    "facts_fol": [
      "teach_unity(Amoura)",
      "write_books(Amoura)",
      "pursue_wisdom(Amoura)",
      "¬examines_reality(Amoura)"
    ],
    "rules": [
      "If Amoura explores nature, then she either teaches unity or promotes global harmony.",
      "If Amoura seeks truth, then she either explores nature or writes books, but not both.",
      "Every philosopher either pursues wisdom or studies interconnectedness, but not both is not a requirement.",
      "Every philosopher either examines reality or seeks truth."
    ],
    "rules_fol": [
      "explore_nature(Amoura) → (teach_unity(Amoura) ∨ promote_global_harmony(Amoura))",
      "seek_truth(Amoura) → (explore_nature(Amoura) ⊕ write_books(Amoura))",
      "∀x (pursue_wisdom(x) ⊕ study_interconnectedness(x))",
      "∀x (examines_reality(x) ∨ seek_truth(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If a philosopher respects life and fosters compassion, then they promote global harmony.",
      "Every philosopher who investigates the cosmos either explores nature or understands balance.",
      "If Amoura either investigates causality or analyzes systems (but not both), then she studies interconnectedness.",
      "If Amoura investigates reality, then she either analyzes humanity or seeks truth, but not both."
    ],
    "distracting_rules_fol": [
      "∀x ((respects_life(x) ∧ fosters_compassion(x)) → promote_global_harmony(x))",
      "∀x (investigate_cosmos(x) → (explore_nature(x) ∨ understand_balance(x)))",
      "(investigate_causality(Amoura) ⊕ analyze_systems(Amoura)) → study_interconnectedness(Amoura)",
      "investigate_reality(Amoura) → (analyze_humanity(Amoura) ⊕ seek_truth(Amoura))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Amoura does not examine reality."
        ],
        "rules": "Every philosopher either examines reality or seeks truth.",
        "conclusion": "Amoura seeks truth."
      },
      {
        "facts": [
          "Amoura pursues wisdom."
        ],
        "rules": "Every philosopher either pursues wisdom or studies interconnectedness, but not both is not a requirement.",
        "conclusion": "Amoura does not study interconnectedness."
      },
      {
        "facts": [
          "Amoura seeks truth.",
          "Amoura writes books."
        ],
        "rules": "If Amoura seeks truth, then she either explores nature or writes books, but not both.",
        "conclusion": "Amoura does not explore nature."
      },
      {
        "facts": [
          "Amoura does not explore nature.",
          "Amoura teaches unity."
        ],
        "rules": "If Amoura explores nature, then she either teaches unity or promotes global harmony.",
        "conclusion": null
      },
      {
        "facts": [
          "Amoura does not study interconnectedness."
        ],
        "rules": null,
        "conclusion": "Amoura studies interconnectedness and promotes global harmony."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬examines_reality(Amoura)"
        ],
        "rules": "∀x (examines_reality(x) ∨ seek_truth(x))",
        "conclusion": "seek_truth(Amoura)"
      },
      {
        "facts": [
          "pursue_wisdom(Amoura)"
        ],
        "rules": "∀x (pursue_wisdom(x) ⊕ study_interconnectedness(x))",
        "conclusion": "¬study_interconnectedness(Amoura)"
      },
      {
        "facts": [
          "seek_truth(Amoura)",
          "write_books(Amoura)"
        ],
        "rules": "seek_truth(Amoura) → (explore_nature(Amoura) ⊕ write_books(Amoura))",
        "conclusion": "¬explore_nature(Amoura)"
      },
      {
        "facts": [
          "¬explore_nature(Amoura)",
          "teach_unity(Amoura)"
        ],
        "rules": "explore_nature(Amoura) → (teach_unity(Amoura) ∨ promote_global_harmony(Amoura))",
        "conclusion": null
      },
      {
        "facts": [
          "¬study_interconnectedness(Amoura)"
        ],
        "rules": null,
        "conclusion": "study_interconnectedness(Amoura) ∧ promote_global_harmony(Amoura)"
      }
    ],
    "conclusion": "Amoura studies interconnectedness and promotes global harmony.",
    "conclusion_fol": "study_interconnectedness(Amoura) ∧ promote_global_harmony(Amoura)",
    "answer": "False",
    "context": [
      "Amoura does not examine reality.",
      "Every philosopher either examines reality or seeks truth.",
      "Amoura pursues wisdom.",
      "Every philosopher either pursues wisdom or studies interconnectedness, but not both is not a requirement.",
      "Amoura writes books.",
      "If Amoura seeks truth, then she either explores nature or writes books, but not both.",
      "Amoura teaches unity.",
      "If Amoura explores nature, then she either teaches unity or promotes global harmony."
    ],
    "context_fol": [
      "¬examines_reality(Amoura)",
      "∀x (examines_reality(x) ∨ seek_truth(x))",
      "pursue_wisdom(Amoura)",
      "∀x (pursue_wisdom(x) ⊕ study_interconnectedness(x))",
      "write_books(Amoura)",
      "seek_truth(Amoura) → (explore_nature(Amoura) ⊕ write_books(Amoura))",
      "teach_unity(Amoura)",
      "explore_nature(Amoura) → (teach_unity(Amoura) ∨ promote_global_harmony(Amoura))"
    ],
    "background_story": "Amoura was a renowned philosopher who spent her life studying the intricate web of interrelations between all living beings. She believed that every action, thought, and emotion was connected and had a ripple effect on the world. Amoura's groundbreaking work, 'The Harmony of Existence,' explored the delicate balance between humans, nature, and the universe. She argued that understanding and respecting these interrelations was key to achieving global harmony and peace. Through her teachings, Amoura inspired a new generation of thinkers to consider the consequences of their actions and to strive for a deeper understanding of the interconnectedness of all things. Her philosophy continues to influence fields from ecology to social justice, reminding us that our individual lives are part of a larger, interconnected whole.",
    "name": "Amoura",
    "keyword": "interrelation",
    "subject_category": "philosopher"
  },
  {
    "facts": [
      "Dorian reads books.",
      "Dorian visits museums.",
      "Dorian shares knowledge.",
      "Dorian does not pursue his passion."
    ],
    "facts_fol": [
      "reads_books(Dorian)",
      "visits_museums(Dorian)",
      "share_knowledge(Dorian)",
      "¬pursue_passion(Dorian)"
    ],
    "rules": [
      "If Dorian studies history and excavates sites, then he becomes an archaeologist.",
      "If Dorian reads books and visits museums, then he studies history.",
      "For Dorian, either he teaches others or excavates sites, but not both at the same time.",
      "If someone shares knowledge, then they gain experience and teach others.",
      "Anyone who pursues their passion either gains experience or develops skills."
    ],
    "rules_fol": [
      "(study_history(Dorian) ∧ excavate_sites(Dorian)) → become_archaeologist(Dorian)",
      "(reads_books(Dorian) ∧ visits_museums(Dorian)) → study_history(Dorian)",
      "teach_others(Dorian) ⊕ excavate_sites(Dorian)",
      "∀x (share_knowledge(x) → (gain_experience(x) ∧ teach_others(x)))",
      "∀x (pursue_passion(x) → (gain_experience(x) ∨ develop_skills(x)))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Dorian loves the past, then he will study history.",
      "If someone loves artifacts and joins digs, then they can excavate sites.",
      "Dorian either writes articles or teaches others.",
      "Anyone who dedicates their life to a field gains experience or makes discoveries."
    ],
    "distracting_rules_fol": [
      "love_past(Dorian) → study_history(Dorian)",
      "∀x ((loves_artifacts(x) ∧ joins_digs(x)) → excavate_sites(x))",
      "writes_articles(Dorian) ∨ teach_others(Dorian)",
      "∀x (dedicate_life(x) → (gain_experience(x) ∨ make_discoveries(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Dorian does not pursue his passion."
        ],
        "rules": "Anyone who pursues their passion either gains experience or develops skills.",
        "conclusion": null
      },
      {
        "facts": [
          "Dorian shares knowledge."
        ],
        "rules": "If someone shares knowledge, then they gain experience and teach others.",
        "conclusion": "Dorian teaches others."
      },
      {
        "facts": [
          "Dorian teaches others."
        ],
        "rules": "For Dorian, either he teaches others or excavates sites, but not both at the same time.",
        "conclusion": "Dorian does not excavate sites."
      },
      {
        "facts": [
          "Dorian reads books.",
          "Dorian visits museums."
        ],
        "rules": "If Dorian reads books and visits museums, then he studies history.",
        "conclusion": "Dorian studies history."
      },
      {
        "facts": [
          "Dorian studies history.",
          "Dorian does not excavate sites."
        ],
        "rules": "If Dorian studies history and excavates sites, then he becomes an archaeologist.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬pursue_passion(Dorian)"
        ],
        "rules": "∀x (pursue_passion(x) → (gain_experience(x) ∨ develop_skills(x)))",
        "conclusion": null
      },
      {
        "facts": [
          "share_knowledge(Dorian)"
        ],
        "rules": "∀x (share_knowledge(x) → (gain_experience(x) ∧ teach_others(x)))",
        "conclusion": "teach_others(Dorian)"
      },
      {
        "facts": [
          "teach_others(Dorian)"
        ],
        "rules": "teach_others(Dorian) ⊕ excavate_sites(Dorian)",
        "conclusion": "¬excavate_sites(Dorian)"
      },
      {
        "facts": [
          "reads_books(Dorian)",
          "visits_museums(Dorian)"
        ],
        "rules": "(reads_books(Dorian) ∧ visits_museums(Dorian)) → study_history(Dorian)",
        "conclusion": "study_history(Dorian)"
      },
      {
        "facts": [
          "study_history(Dorian)",
          "¬excavate_sites(Dorian)"
        ],
        "rules": "(study_history(Dorian) ∧ excavate_sites(Dorian)) → become_archaeologist(Dorian)",
        "conclusion": null
      }
    ],
    "conclusion": "Dorian becomes an archaeologist.",
    "conclusion_fol": "become_archaeologist(Dorian)",
    "answer": "Uncertain",
    "context": [
      "Dorian does not pursue his passion.",
      "Anyone who pursues their passion either gains experience or develops skills.",
      "Dorian shares knowledge.",
      "If someone shares knowledge, then they gain experience and teach others.",
      "For Dorian, either he teaches others or excavates sites, but not both at the same time.",
      "Dorian reads books.",
      "Dorian visits museums.",
      "If Dorian reads books and visits museums, then he studies history.",
      "If Dorian studies history and excavates sites, then he becomes an archaeologist."
    ],
    "context_fol": [
      "¬pursue_passion(Dorian)",
      "∀x (pursue_passion(x) → (gain_experience(x) ∨ develop_skills(x)))",
      "share_knowledge(Dorian)",
      "∀x (share_knowledge(x) → (gain_experience(x) ∧ teach_others(x)))",
      "teach_others(Dorian) ⊕ excavate_sites(Dorian)",
      "reads_books(Dorian)",
      "visits_museums(Dorian)",
      "(reads_books(Dorian) ∧ visits_museums(Dorian)) → study_history(Dorian)",
      "(study_history(Dorian) ∧ excavate_sites(Dorian)) → become_archaeologist(Dorian)"
    ],
    "background_story": "Dorian, a historian and archaeologist, had always been fascinated by the ancient city of Smyrna, now known as Izmir. Born and raised in this vibrant Turkish city, he spent his childhood exploring its ruins and listening to tales of its rich past. As he grew older, Dorian became determined to uncover the secrets of Izmir's history, from its founding by the Greeks to its significance in the Roman Empire. He dedicated his life to excavating sites, deciphering ancient texts, and sharing his findings with the world. Dorian's love for Izmir and its history led him to establish a museum in the city, where he showcased his discoveries and taught future generations about the importance of preserving cultural heritage. His work made him a local hero, and his name became synonymous with the history and pride of Izmir.",
    "name": "Dorian",
    "keyword": "izmir",
    "subject_category": "human"
  },
  {
    "facts": [
      "Mamacita can heal others.",
      "Mamacita does not talk to animals.",
      "Mamacita respects the earth."
    ],
    "facts_fol": [
      "heal_others(Mamacita)",
      "¬talks_animals(Mamacita)",
      "respects_earth(Mamacita)"
    ],
    "rules": [
      "If Mamacita possesses mystical powers, then she can either heal others or protect innocence, but not both.",
      "If Mamacita understands nature and communicates with spirits, then she possesses mystical powers.",
      "Mamacita either talks to animals or communicates with spirits.",
      "Any mythical creature that lives in harmony or respects the earth understands nature."
    ],
    "rules_fol": [
      "possess_mystical_powers(Mamacita) → (heal_others(Mamacita) ⊕ protect_innocence(Mamacita))",
      "(understands_nature(Mamacita) ∧ communicates_spirits(Mamacita)) → possess_mystical_powers(Mamacita)",
      "talks_animals(Mamacita) ∨ communicates_spirits(Mamacita)",
      "∀x ((lives_harmony(x) ∨ respects_earth(x)) → understands_nature(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Mamacita can calm spirits, then she either possesses mystical powers or can bring balance to the world.",
      "If Mamacita either sees auras or feels energy (but not both), then she can communicate with spirits.",
      "Mamacita either senses magic or understands nature."
    ],
    "distracting_rules_fol": [
      "calm_spirits(Mamacita) → (possess_mystical_powers(Mamacita) ∨ bring_balance(Mamacita))",
      "(sees_auras(Mamacita) ⊕ feels_energy(Mamacita)) → communicates_spirits(Mamacita)",
      "senses_magic(Mamacita) ∨ understands_nature(Mamacita)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Mamacita respects the earth."
        ],
        "rules": "Any mythical creature that lives in harmony or respects the earth understands nature.",
        "conclusion": "Mamacita understands nature."
      },
      {
        "facts": [
          "Mamacita does not talk to animals."
        ],
        "rules": "Mamacita either talks to animals or communicates with spirits.",
        "conclusion": "Mamacita communicates with spirits."
      },
      {
        "facts": [
          "Mamacita understands nature.",
          "Mamacita communicates with spirits."
        ],
        "rules": "If Mamacita understands nature and communicates with spirits, then she possesses mystical powers.",
        "conclusion": "Mamacita possesses mystical powers."
      },
      {
        "facts": [
          "Mamacita possesses mystical powers.",
          "Mamacita can heal others."
        ],
        "rules": "If Mamacita possesses mystical powers, then she can either heal others or protect innocence, but not both.",
        "conclusion": "Mamacita protects innocence."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "respects_earth(Mamacita)"
        ],
        "rules": "∀x ((lives_harmony(x) ∨ respects_earth(x)) → understands_nature(x))",
        "conclusion": "understands_nature(Mamacita)"
      },
      {
        "facts": [
          "¬talks_animals(Mamacita)"
        ],
        "rules": "talks_animals(Mamacita) ∨ communicates_spirits(Mamacita)",
        "conclusion": "communicates_spirits(Mamacita)"
      },
      {
        "facts": [
          "understands_nature(Mamacita)",
          "communicates_spirits(Mamacita)"
        ],
        "rules": "(understands_nature(Mamacita) ∧ communicates_spirits(Mamacita)) → possess_mystical_powers(Mamacita)",
        "conclusion": "possess_mystical_powers(Mamacita)"
      },
      {
        "facts": [
          "possess_mystical_powers(Mamacita)",
          "heal_others(Mamacita)"
        ],
        "rules": "possess_mystical_powers(Mamacita) → (heal_others(Mamacita) ⊕ protect_innocence(Mamacita))",
        "conclusion": "protect_innocence(Mamacita)"
      }
    ],
    "conclusion": "Mamacita protects innocence.",
    "conclusion_fol": "protect_innocence(Mamacita)",
    "answer": "False",
    "context": [
      "Mamacita respects the earth.",
      "Any mythical creature that lives in harmony or respects the earth understands nature.",
      "Mamacita does not talk to animals.",
      "Mamacita either talks to animals or communicates with spirits.",
      "If Mamacita understands nature and communicates with spirits, then she possesses mystical powers.",
      "Mamacita can heal others.",
      "If Mamacita possesses mystical powers, then she can either heal others or protect innocence, but not both."
    ],
    "context_fol": [
      "respects_earth(Mamacita)",
      "∀x ((lives_harmony(x) ∨ respects_earth(x)) → understands_nature(x))",
      "¬talks_animals(Mamacita)",
      "talks_animals(Mamacita) ∨ communicates_spirits(Mamacita)",
      "(understands_nature(Mamacita) ∧ communicates_spirits(Mamacita)) → possess_mystical_powers(Mamacita)",
      "heal_others(Mamacita)",
      "possess_mystical_powers(Mamacita) → (heal_others(Mamacita) ⊕ protect_innocence(Mamacita))"
    ],
    "background_story": "In a hidden valley, Mamacita, a mystical being, possessed the rare ability to communicate with the condylions, ancient spirits of the land. With her gentle touch and soothing voice, she could calm the most troubled of condylions, bringing balance to the natural world. As a guardian of the valley, Mamacita used her unique gift to maintain harmony between the physical and spiritual realms. The condylions, in turn, shared their wisdom with her, allowing her to heal the sick and protect the innocent. Mamacita's connection to the condylions made her a revered figure, and her legacy lived on as a symbol of the transformative power of compassion and understanding.",
    "name": "Mamacita",
    "keyword": "condylion",
    "subject_category": "mythical creature"
  },
  {
    "facts": [
      "Andi develops new theories.",
      "Andi does not analyze data."
    ],
    "facts_fol": [
      "develop_new_theories(Andi)",
      "¬analyze_data(Andi)"
    ],
    "rules": [
      "For all scientists, if they conduct innovative research, then they make new discoveries.",
      "If Andi studies genetics, then she either develops new theories or conducts innovative research, but not both.",
      "Andi either analyzes data or studies genetics."
    ],
    "rules_fol": [
      "∀x (conduct_innovative_research(x) → make_new_discoveries(x))",
      "study_genetics(Andi) → (develop_new_theories(Andi) ⊕ conduct_innovative_research(Andi))",
      "analyze_data(Andi) ∨ study_genetics(Andi)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Andi is curious, then she conducts innovative research and collaborates with peers.",
      "Every scientist who investigates mutation either creates new therapies or studies genetics (or both)."
    ],
    "distracting_rules_fol": [
      "is_curious(Andi) → (conduct_innovative_research(Andi) ∧ collaborate_with_peers(Andi))",
      "∀x (investigate_mutation(x) → (create_new_therapies(x) ∨ study_genetics(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Andi does not analyze data."
        ],
        "rules": "Andi either analyzes data or studies genetics.",
        "conclusion": "Andi studies genetics."
      },
      {
        "facts": [
          "Andi studies genetics.",
          "Andi develops new theories."
        ],
        "rules": "If Andi studies genetics, then she either develops new theories or conducts innovative research, but not both.",
        "conclusion": "Andi does not conduct innovative research."
      },
      {
        "facts": [
          "Andi does not conduct innovative research."
        ],
        "rules": "For all scientists, if they conduct innovative research, then they make new discoveries.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬analyze_data(Andi)"
        ],
        "rules": "analyze_data(Andi) ∨ study_genetics(Andi)",
        "conclusion": "study_genetics(Andi)"
      },
      {
        "facts": [
          "study_genetics(Andi)",
          "develop_new_theories(Andi)"
        ],
        "rules": "study_genetics(Andi) → (develop_new_theories(Andi) ⊕ conduct_innovative_research(Andi))",
        "conclusion": "¬conduct_innovative_research(Andi)"
      },
      {
        "facts": [
          "¬conduct_innovative_research(Andi)"
        ],
        "rules": "∀x (conduct_innovative_research(x) → make_new_discoveries(x))",
        "conclusion": null
      }
    ],
    "conclusion": "Andi makes new discoveries.",
    "conclusion_fol": "make_new_discoveries(Andi)",
    "answer": "Uncertain",
    "context": [
      "Andi does not analyze data.",
      "Andi either analyzes data or studies genetics.",
      "Andi develops new theories.",
      "If Andi studies genetics, then she either develops new theories or conducts innovative research, but not both.",
      "For all scientists, if they conduct innovative research, then they make new discoveries."
    ],
    "context_fol": [
      "¬analyze_data(Andi)",
      "analyze_data(Andi) ∨ study_genetics(Andi)",
      "develop_new_theories(Andi)",
      "study_genetics(Andi) → (develop_new_theories(Andi) ⊕ conduct_innovative_research(Andi))",
      "∀x (conduct_innovative_research(x) → make_new_discoveries(x))"
    ],
    "background_story": "Andi was a brilliant geneticist fascinated by the mysteries of mutagenesis. She spent years studying the effects of genetic mutations on various organisms, from bacteria to mammals. Andi's groundbreaking research focused on inducing targeted mutations to cure genetic diseases. Her laboratory became a hub for innovative experiments, where she and her team explored the boundaries of genetic engineering. Andi's work led to significant breakthroughs, including the development of novel therapies for previously incurable conditions. Her dedication to understanding and harnessing the power of mutagenesis earned her international recognition and paved the way for new avenues in medical research, changing the lives of countless individuals and families affected by genetic disorders.",
    "name": "Andi",
    "keyword": "mutagenesis",
    "subject_category": "scientist"
  },
  {
    "facts": [
      "Kyree does not invest in new technology.",
      "Kyree manages events.",
      "Kyree does not train new teams."
    ],
    "facts_fol": [
      "¬invest_in_new_technology(Kyree)",
      "manage_events(Kyree)",
      "¬train_new_teams(Kyree)"
    ],
    "rules": [
      "If Kyree reorganizes her business or invests in new technology (or both), then she achieves success.",
      "If Kyree hires skilled staff, it does not necessarily mean she reorganizes her business, and if she reorganizes her business, it does not necessarily mean she hires skilled staff.",
      "If Kyree manages events, then she either trains new teams or hires skilled staff, but not both."
    ],
    "rules_fol": [
      "(reorganize_business(Kyree) ∨ invest_in_new_technology(Kyree)) → achieve_success(Kyree)",
      "hire_skilled_staff(Kyree) ⊕ reorganize_business(Kyree)",
      "manage_events(Kyree) → (train_new_teams(Kyree) ⊕ hire_skilled_staff(Kyree))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Anyone who streamlines their services or updates their strategy can reorganize their business.",
      "If Kyree expands her services, then she either hires skilled staff or improves her marketing, but not both."
    ],
    "distracting_rules_fol": [
      "∀x ((streamline_services(x) ∨ update_strategy(x)) → reorganize_business(x))",
      "expand_services(Kyree) → (hire_skilled_staff(Kyree) ⊕ improve_marketing(Kyree))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Kyree manages events.",
          "Kyree does not train new teams."
        ],
        "rules": "If Kyree manages events, then she either trains new teams or hires skilled staff, but not both.",
        "conclusion": "Kyree hires skilled staff."
      },
      {
        "facts": [
          "Kyree hires skilled staff."
        ],
        "rules": "If Kyree hires skilled staff, it does not necessarily mean she reorganizes her business, and if she reorganizes her business, it does not necessarily mean she hires skilled staff.",
        "conclusion": "Kyree does not reorganize her business."
      },
      {
        "facts": [
          "Kyree does not reorganize her business.",
          "Kyree does not invest in new technology."
        ],
        "rules": "If Kyree reorganizes her business or invests in new technology (or both), then she achieves success.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "manage_events(Kyree)",
          "¬train_new_teams(Kyree)"
        ],
        "rules": "manage_events(Kyree) → (train_new_teams(Kyree) ⊕ hire_skilled_staff(Kyree))",
        "conclusion": "hire_skilled_staff(Kyree)"
      },
      {
        "facts": [
          "hire_skilled_staff(Kyree)"
        ],
        "rules": "hire_skilled_staff(Kyree) ⊕ reorganize_business(Kyree)",
        "conclusion": "¬reorganize_business(Kyree)"
      },
      {
        "facts": [
          "¬reorganize_business(Kyree)",
          "¬invest_in_new_technology(Kyree)"
        ],
        "rules": "(reorganize_business(Kyree) ∨ invest_in_new_technology(Kyree)) → achieve_success(Kyree)",
        "conclusion": null
      }
    ],
    "conclusion": "Kyree does not achieve success.",
    "conclusion_fol": "¬achieve_success(Kyree)",
    "answer": "Uncertain",
    "context": [
      "Kyree manages events.",
      "Kyree does not train new teams.",
      "If Kyree manages events, then she either trains new teams or hires skilled staff, but not both.",
      "If Kyree hires skilled staff, it does not necessarily mean she reorganizes her business, and if she reorganizes her business, it does not necessarily mean she hires skilled staff.",
      "Kyree does not invest in new technology.",
      "If Kyree reorganizes her business or invests in new technology (or both), then she achieves success."
    ],
    "context_fol": [
      "manage_events(Kyree)",
      "¬train_new_teams(Kyree)",
      "manage_events(Kyree) → (train_new_teams(Kyree) ⊕ hire_skilled_staff(Kyree))",
      "hire_skilled_staff(Kyree) ⊕ reorganize_business(Kyree)",
      "¬invest_in_new_technology(Kyree)",
      "(reorganize_business(Kyree) ∨ invest_in_new_technology(Kyree)) → achieve_success(Kyree)"
    ],
    "background_story": "Kyree was a talented event planner who had a knack for turning chaos into harmony. After a particularly disastrous wedding, she realized that her own business needed a makeover. Kyree decided to reorganize her entire approach, streamlining her services and updating her marketing strategy. She invested in new software to manage client communications and timelines, and hired a team of skilled coordinators to help her execute events flawlessly. As Kyree reorganized her business, she discovered new efficiencies and opportunities for growth. Her company began to thrive, and she became known as the 'go-to' planner for high-profile events. With her reorganized approach, Kyree was able to deliver exceptional results, earning her a reputation as a master of her craft.",
    "name": "Kyree",
    "keyword": "reorganize",
    "subject_category": "human"
  },
  {
    "facts": [
      "Luis composes songs.",
      "Luis does not dedicate time to music.",
      "Luis does not rehearse regularly."
    ],
    "facts_fol": [
      "composes_songs(Luis)",
      "¬dedicates_time(Luis)",
      "¬rehearses_regularly(Luis)"
    ],
    "rules": [
      "Anyone who plays guitar or composes songs practices music.",
      "Anyone who dedicates time to an activity either performs well or improves their skills.",
      "If someone rehearses regularly, then they perform well and connect with their audience."
    ],
    "rules_fol": [
      "∀x ((plays_guitar(x) ∨ composes_songs(x)) → practices_music(x))",
      "∀x (dedicates_time(x) → (performs_well(x) ∨ improves_skills(x)))",
      "∀x (rehearses_regularly(x) → (performs_well(x) ∧ connects_with_audience(x)))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Luis pursues his passion, then he either practices music or develops his talent, but not both.",
      "If Luis either learns music theory or jams frequently (but not both), then he improves his skills.",
      "If someone puts in effort, then they either perform well or gain experience."
    ],
    "distracting_rules_fol": [
      "pursues_passion(Luis) → (practices_music(Luis) ⊕ develops_talent(Luis))",
      "(learns_theory(Luis) ⊕ jams_frequently(Luis)) → improves_skills(Luis)",
      "∀x (puts_effort(x) → (gains_experience(x) ⊕ performs_well(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Luis does not rehearse regularly."
        ],
        "rules": "If someone rehearses regularly, then they perform well and connect with their audience.",
        "conclusion": null
      },
      {
        "facts": [
          "Luis does not dedicate time to music."
        ],
        "rules": "Anyone who dedicates time to an activity either performs well or improves their skills.",
        "conclusion": null
      },
      {
        "facts": [
          "Luis composes songs."
        ],
        "rules": "Anyone who plays guitar or composes songs practices music.",
        "conclusion": "Luis practices music."
      },
      {
        "facts": [
          "Luis practices music."
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬rehearses_regularly(Luis)"
        ],
        "rules": "∀x (rehearses_regularly(x) → (performs_well(x) ∧ connects_with_audience(x)))",
        "conclusion": null
      },
      {
        "facts": [
          "¬dedicates_time(Luis)"
        ],
        "rules": "∀x (dedicates_time(x) → (performs_well(x) ∨ improves_skills(x)))",
        "conclusion": null
      },
      {
        "facts": [
          "composes_songs(Luis)"
        ],
        "rules": "∀x ((plays_guitar(x) ∨ composes_songs(x)) → practices_music(x))",
        "conclusion": "practices_music(Luis)"
      },
      {
        "facts": [
          "practices_music(Luis)"
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "conclusion": "If Luis practices music, then he improves his skills.",
    "conclusion_fol": "practices_music(Luis) → improves_skills(Luis)",
    "answer": "Uncertain",
    "context": [
      "Luis does not rehearse regularly.",
      "If someone rehearses regularly, then they perform well and connect with their audience.",
      "Luis does not dedicate time to music.",
      "Anyone who dedicates time to an activity either performs well or improves their skills.",
      "Luis composes songs.",
      "Anyone who plays guitar or composes songs practices music."
    ],
    "context_fol": [
      "¬rehearses_regularly(Luis)",
      "∀x (rehearses_regularly(x) → (performs_well(x) ∧ connects_with_audience(x)))",
      "¬dedicates_time(Luis)",
      "∀x (dedicates_time(x) → (performs_well(x) ∨ improves_skills(x)))",
      "composes_songs(Luis)",
      "∀x ((plays_guitar(x) ∨ composes_songs(x)) → practices_music(x))"
    ],
    "background_story": "Luis had always been passionate about music, spending years honing his skills as a guitarist and composer. He played in various bands, experimenting with different genres and styles. After a decade of hard work and perseverance, Luis's efforts began to culminate in a unique sound that blended traditional Latin rhythms with modern electronic elements. His big break came when he was invited to perform at a prestigious music festival, sharing the stage with international stars. The crowd's enthusiastic response to his music was the culmination of Luis's lifelong dedication, validating his sacrifices and fueling his desire to continue creating and innovating. This pivotal moment marked the beginning of Luis's rise to fame, as his distinctive sound captivated audiences worldwide.",
    "name": "Luis",
    "keyword": "culminate",
    "subject_category": "human"
  },
  {
    "facts": [
      "Eduardo explores coastal areas.",
      "Eduardo publishes research.",
      "Eduardo contributes to his field.",
      "Eduardo impacts society."
    ],
    "facts_fol": [
      "explore_coastal_areas(Eduardo)",
      "publish_research(Eduardo)",
      "contributes_to_field(Eduardo)",
      "impacts_society(Eduardo)"
    ],
    "rules": [
      "If Eduardo studies marine life, then he either makes groundbreaking discoveries or earns international recognition (or both).",
      "Eduardo either explores coastal areas or studies marine life, but his passion for pholas drives him to do both.",
      "If Eduardo publishes research, then he either makes groundbreaking discoveries or receives awards, but not both.",
      "If Eduardo contributes to his field and impacts society, then he receives awards."
    ],
    "rules_fol": [
      "study_marine_life(Eduardo) → (make_groundbreaking_discoveries(Eduardo) ∨ earn_international_recognition(Eduardo))",
      "explore_coastal_areas(Eduardo) ⊕ study_marine_life(Eduardo)",
      "publish_research(Eduardo) → (receive_awards(Eduardo) ⊕ make_groundbreaking_discoveries(Eduardo))",
      "(contributes_to_field(Eduardo) ∧ impacts_society(Eduardo)) → receive_awards(Eduardo)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Eduardo is curious, then he studies marine life and develops theories.",
      "If Eduardo conducts experiments or analyzes data, then he can make groundbreaking discoveries.",
      "Eduardo either advances knowledge or receives awards."
    ],
    "distracting_rules_fol": [
      "is_curious(Eduardo) → (study_marine_life(Eduardo) ∧ develop_theories(Eduardo))",
      "(conduct_experiments(Eduardo) ∨ analyze_data(Eduardo)) → make_groundbreaking_discoveries(Eduardo)",
      "advance_knowledge(Eduardo) ∨ receive_awards(Eduardo)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Eduardo contributes to his field.",
          "Eduardo impacts society."
        ],
        "rules": "If Eduardo contributes to his field and impacts society, then he receives awards.",
        "conclusion": "Eduardo receives awards."
      },
      {
        "facts": [
          "Eduardo publishes research.",
          "Eduardo receives awards."
        ],
        "rules": "If Eduardo publishes research, then he either makes groundbreaking discoveries or receives awards, but not both.",
        "conclusion": "Eduardo does not make groundbreaking discoveries."
      },
      {
        "facts": [
          "Eduardo explores coastal areas."
        ],
        "rules": "Eduardo either explores coastal areas or studies marine life, but his passion for pholas drives him to do both.",
        "conclusion": "Eduardo does not study marine life."
      },
      {
        "facts": [
          "Eduardo does not study marine life.",
          "Eduardo does not make groundbreaking discoveries."
        ],
        "rules": "If Eduardo studies marine life, then he either makes groundbreaking discoveries or earns international recognition (or both).",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "contributes_to_field(Eduardo)",
          "impacts_society(Eduardo)"
        ],
        "rules": "(contributes_to_field(Eduardo) ∧ impacts_society(Eduardo)) → receive_awards(Eduardo)",
        "conclusion": "receive_awards(Eduardo)"
      },
      {
        "facts": [
          "publish_research(Eduardo)",
          "receive_awards(Eduardo)"
        ],
        "rules": "publish_research(Eduardo) → (receive_awards(Eduardo) ⊕ make_groundbreaking_discoveries(Eduardo))",
        "conclusion": "¬make_groundbreaking_discoveries(Eduardo)"
      },
      {
        "facts": [
          "explore_coastal_areas(Eduardo)"
        ],
        "rules": "explore_coastal_areas(Eduardo) ⊕ study_marine_life(Eduardo)",
        "conclusion": "¬study_marine_life(Eduardo)"
      },
      {
        "facts": [
          "¬study_marine_life(Eduardo)",
          "¬make_groundbreaking_discoveries(Eduardo)"
        ],
        "rules": "study_marine_life(Eduardo) → (make_groundbreaking_discoveries(Eduardo) ∨ earn_international_recognition(Eduardo))",
        "conclusion": null
      }
    ],
    "conclusion": "Eduardo does not earn international recognition.",
    "conclusion_fol": "¬earn_international_recognition(Eduardo)",
    "answer": "Uncertain",
    "context": [
      "Eduardo contributes to his field.",
      "Eduardo impacts society.",
      "If Eduardo contributes to his field and impacts society, then he receives awards.",
      "Eduardo publishes research.",
      "If Eduardo publishes research, then he either makes groundbreaking discoveries or receives awards, but not both.",
      "Eduardo explores coastal areas.",
      "Eduardo either explores coastal areas or studies marine life, but his passion for pholas drives him to do both.",
      "If Eduardo studies marine life, then he either makes groundbreaking discoveries or earns international recognition (or both)."
    ],
    "context_fol": [
      "contributes_to_field(Eduardo)",
      "impacts_society(Eduardo)",
      "(contributes_to_field(Eduardo) ∧ impacts_society(Eduardo)) → receive_awards(Eduardo)",
      "publish_research(Eduardo)",
      "publish_research(Eduardo) → (receive_awards(Eduardo) ⊕ make_groundbreaking_discoveries(Eduardo))",
      "explore_coastal_areas(Eduardo)",
      "explore_coastal_areas(Eduardo) ⊕ study_marine_life(Eduardo)",
      "study_marine_life(Eduardo) → (make_groundbreaking_discoveries(Eduardo) ∨ earn_international_recognition(Eduardo))"
    ],
    "background_story": "Eduardo, a renowned marine biologist, spent his career studying the unique characteristics of the pholas, a type of marine bivalve mollusk. His fascination with these creatures began during a childhood visit to the beach, where he discovered a pholas boring into the rock. Eduardo's research focused on the pholas's remarkable ability to excavate complex networks of tunnels and chambers. He dedicated himself to understanding the ecological role of these mollusks in shaping coastal ecosystems. Through his groundbreaking work, Eduardo revealed the intricate relationships between pholas and their environments, earning him international recognition and accolades in the scientific community. His love for the pholas never wavered, driving him to continue exploring the mysteries of these incredible creatures.",
    "name": "Eduardo",
    "keyword": "pholas",
    "subject_category": "scientist"
  },
  {
    "facts": [
      "Dream is not ecologically valuable.",
      "Dream collects nectar.",
      "Dream sows seeds.",
      "Dream does not lay eggs."
    ],
    "facts_fol": [
      "¬ecologically_valuable(Dream)",
      "collects_nectar(Dream)",
      "sows_seeds(Dream)",
      "¬lays_eggs(Dream)"
    ],
    "rules": [
      "If Dream either pollinates or sows seeds (but not both), then she eats leaves.",
      "For Dream, either she collects nectar or eats fruit, but not both, reflecting her unique role in the forest ecosystem.",
      "Dream either disperses spores or pollinates, but not both.",
      "Dream either lays eggs or disperses spores, but not both."
    ],
    "rules_fol": [
      "(pollinates(Dream) ⊕ sows_seeds(Dream)) → eats_leaves(Dream)",
      "collects_nectar(Dream) ⊕ eats_fruit(Dream)",
      "disperses_spores(Dream) ⊕ pollinates(Dream)",
      "lays_eggs(Dream) ⊕ disperses_spores(Dream)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Dream has mandibles and lives outdoors, then she eats leaves.",
      "Dream either drinks dew or eats fruit.",
      "If Dream flies fast, then she either pollinates or makes honey, but not both.",
      "If Dream consumes plant material, then she either disperses spores or aids in plant growth."
    ],
    "distracting_rules_fol": [
      "(has_mandibles(Dream) ∧ lives_outdoors(Dream)) → eats_leaves(Dream)",
      "drinks_dew(Dream) ∨ eats_fruit(Dream)",
      "flies_fast(Dream) → (pollinates(Dream) ⊕ makes_honey(Dream))",
      "consumes_plant(Dream) → (disperses_spores(Dream) ∨ aids_growth(Dream))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Dream does not lay eggs."
        ],
        "rules": "Dream either lays eggs or disperses spores, but not both.",
        "conclusion": "Dream disperses spores."
      },
      {
        "facts": [
          "Dream disperses spores."
        ],
        "rules": "Dream either disperses spores or pollinates, but not both.",
        "conclusion": "Dream does not pollinate."
      },
      {
        "facts": [
          "Dream collects nectar."
        ],
        "rules": "For Dream, either she collects nectar or eats fruit, but not both, reflecting her unique role in the forest ecosystem.",
        "conclusion": "Dream does not eat fruit."
      },
      {
        "facts": [
          "Dream does not pollinate.",
          "Dream sows seeds."
        ],
        "rules": "If Dream either pollinates or sows seeds (but not both), then she eats leaves.",
        "conclusion": "Dream eats leaves."
      },
      {
        "facts": [
          "Dream eats leaves.",
          "Dream does not eat fruit.",
          "Dream is not ecologically valuable."
        ],
        "rules": null,
        "conclusion": "If Dream either eats leaves or eats fruit (but not both), then she is ecologically valuable."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬lays_eggs(Dream)"
        ],
        "rules": "lays_eggs(Dream) ⊕ disperses_spores(Dream)",
        "conclusion": "disperses_spores(Dream)"
      },
      {
        "facts": [
          "disperses_spores(Dream)"
        ],
        "rules": "disperses_spores(Dream) ⊕ pollinates(Dream)",
        "conclusion": "¬pollinates(Dream)"
      },
      {
        "facts": [
          "collects_nectar(Dream)"
        ],
        "rules": "collects_nectar(Dream) ⊕ eats_fruit(Dream)",
        "conclusion": "¬eats_fruit(Dream)"
      },
      {
        "facts": [
          "¬pollinates(Dream)",
          "sows_seeds(Dream)"
        ],
        "rules": "(pollinates(Dream) ⊕ sows_seeds(Dream)) → eats_leaves(Dream)",
        "conclusion": "eats_leaves(Dream)"
      },
      {
        "facts": [
          "eats_leaves(Dream)",
          "¬eats_fruit(Dream)",
          "¬ecologically_valuable(Dream)"
        ],
        "rules": null,
        "conclusion": "(eats_leaves(Dream) ⊕ eats_fruit(Dream)) → ecologically_valuable(Dream)"
      }
    ],
    "conclusion": "If Dream either eats leaves or eats fruit (but not both), then she is ecologically valuable.",
    "conclusion_fol": "(eats_leaves(Dream) ⊕ eats_fruit(Dream)) → ecologically_valuable(Dream)",
    "answer": "False",
    "context": [
      "Dream does not lay eggs.",
      "Dream either lays eggs or disperses spores, but not both.",
      "Dream either disperses spores or pollinates, but not both.",
      "Dream collects nectar.",
      "For Dream, either she collects nectar or eats fruit, but not both, reflecting her unique role in the forest ecosystem.",
      "Dream sows seeds.",
      "If Dream either pollinates or sows seeds (but not both), then she eats leaves.",
      "Dream is not ecologically valuable."
    ],
    "context_fol": [
      "¬lays_eggs(Dream)",
      "lays_eggs(Dream) ⊕ disperses_spores(Dream)",
      "disperses_spores(Dream) ⊕ pollinates(Dream)",
      "collects_nectar(Dream)",
      "collects_nectar(Dream) ⊕ eats_fruit(Dream)",
      "sows_seeds(Dream)",
      "(pollinates(Dream) ⊕ sows_seeds(Dream)) → eats_leaves(Dream)",
      "¬ecologically_valuable(Dream)"
    ],
    "background_story": "In a small, hidden corner of a lush forest, there lived a peculiar beetle named Dream. She was a carpophagous insect, with a unique appetite for consuming fruit. Dream's days were spent flitting from tree to tree, feasting on the ripest, juiciest fruits she could find. Her favorite haunt was an ancient, gnarled apple tree, whose sweet, tangy apples were the perfect treat. As she ate, Dream played a vital role in dispersing seeds, helping to propagate new fruit trees throughout the forest. Despite her small size, Dream's carpophagous nature made her a big contributor to the forest's ecosystem, and she lived a life filled with purpose and delicious fruit.",
    "name": "Dream",
    "keyword": "carpophagous",
    "subject_category": "insect"
  },
  {
    "facts": [
      "Kelsey is a mechanic.",
      "Kelsey does not collect art.",
      "Kelsey is an engineer.",
      "Kelsey repairs machines."
    ],
    "facts_fol": [
      "mechanic(Kelsey)",
      "¬collects_art(Kelsey)",
      "engineer(Kelsey)",
      "repairs_machines(Kelsey)"
    ],
    "rules": [
      "If Kelsey either restores cars or restores trucks (but not both), then she preserves history.",
      "If Kelsey is a mechanic, then she either restores trucks or fixes bikes, but not both.",
      "Kelsey either collects art or restores cars, but not both, and this distinction is what defines her unique contribution to the field of classic vehicle restoration.",
      "If Kelsey is an engineer, then she either repairs machines or fixes bikes, but not both."
    ],
    "rules_fol": [
      "(restores_cars(Kelsey) ⊕ restores_trucks(Kelsey)) → preserves_history(Kelsey)",
      "mechanic(Kelsey) → (restores_trucks(Kelsey) ⊕ fixes_bikes(Kelsey))",
      "collects_art(Kelsey) ⊕ restores_cars(Kelsey)",
      "engineer(Kelsey) → (repairs_machines(Kelsey) ⊕ fixes_bikes(Kelsey))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "All people who like vintage items and restore trucks also value details.",
      "If Kelsey likes vintage items, then she has patience and restores cars.",
      "If Kelsey likes vehicles, then she either fixes bikes or loves classics."
    ],
    "distracting_rules_fol": [
      "∀x (likes_vintage(x) → (restores_trucks(x) ∧ values_details(x)))",
      "likes_vintage(Kelsey) → (has_patience(Kelsey) ∧ restores_cars(Kelsey))",
      "likes_vehicles(Kelsey) → (fixes_bikes(Kelsey) ∨ loves_classics(Kelsey))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Kelsey is an engineer.",
          "Kelsey repairs machines."
        ],
        "rules": "If Kelsey is an engineer, then she either repairs machines or fixes bikes, but not both.",
        "conclusion": "Kelsey does not fix bikes."
      },
      {
        "facts": [
          "Kelsey does not collect art."
        ],
        "rules": "Kelsey either collects art or restores cars, but not both, and this distinction is what defines her unique contribution to the field of classic vehicle restoration.",
        "conclusion": "Kelsey restores cars."
      },
      {
        "facts": [
          "Kelsey is a mechanic.",
          "Kelsey does not fix bikes."
        ],
        "rules": "If Kelsey is a mechanic, then she either restores trucks or fixes bikes, but not both.",
        "conclusion": "Kelsey restores trucks."
      },
      {
        "facts": [
          "Kelsey restores cars.",
          "Kelsey restores trucks."
        ],
        "rules": "If Kelsey either restores cars or restores trucks (but not both), then she preserves history.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "engineer(Kelsey)",
          "repairs_machines(Kelsey)"
        ],
        "rules": "engineer(Kelsey) → (repairs_machines(Kelsey) ⊕ fixes_bikes(Kelsey))",
        "conclusion": "¬fixes_bikes(Kelsey)"
      },
      {
        "facts": [
          "¬collects_art(Kelsey)"
        ],
        "rules": "collects_art(Kelsey) ⊕ restores_cars(Kelsey)",
        "conclusion": "restores_cars(Kelsey)"
      },
      {
        "facts": [
          "mechanic(Kelsey)",
          "¬fixes_bikes(Kelsey)"
        ],
        "rules": "mechanic(Kelsey) → (restores_trucks(Kelsey) ⊕ fixes_bikes(Kelsey))",
        "conclusion": "restores_trucks(Kelsey)"
      },
      {
        "facts": [
          "restores_cars(Kelsey)",
          "restores_trucks(Kelsey)"
        ],
        "rules": "(restores_cars(Kelsey) ⊕ restores_trucks(Kelsey)) → preserves_history(Kelsey)",
        "conclusion": null
      }
    ],
    "conclusion": "Kelsey preserves history.",
    "conclusion_fol": "preserves_history(Kelsey)",
    "answer": "Uncertain",
    "context": [
      "Kelsey is an engineer.",
      "Kelsey repairs machines.",
      "If Kelsey is an engineer, then she either repairs machines or fixes bikes, but not both.",
      "Kelsey does not collect art.",
      "Kelsey either collects art or restores cars, but not both, and this distinction is what defines her unique contribution to the field of classic vehicle restoration.",
      "Kelsey is a mechanic.",
      "If Kelsey is a mechanic, then she either restores trucks or fixes bikes, but not both.",
      "If Kelsey either restores cars or restores trucks (but not both), then she preserves history."
    ],
    "context_fol": [
      "engineer(Kelsey)",
      "repairs_machines(Kelsey)",
      "engineer(Kelsey) → (repairs_machines(Kelsey) ⊕ fixes_bikes(Kelsey))",
      "¬collects_art(Kelsey)",
      "collects_art(Kelsey) ⊕ restores_cars(Kelsey)",
      "mechanic(Kelsey)",
      "mechanic(Kelsey) → (restores_trucks(Kelsey) ⊕ fixes_bikes(Kelsey))",
      "(restores_cars(Kelsey) ⊕ restores_trucks(Kelsey)) → preserves_history(Kelsey)"
    ],
    "background_story": "Kelsey was a skilled restorer of antique cars, with a passion for bringing old vehicles back to life. She had a special fondness for classic trucks, but her latest project, a 1969 Ford, proved to be her most challenging yet. The truck had been left in a field for decades, its metal body severely damaged by rust. Undeterred, Kelsey spent countless hours sanding, welding, and painting, carefully removing the rust and revealing the truck's original beauty. As she worked, she discovered that the rust had also preserved a piece of history - an old letter tucked away in the glove compartment. The letter told the story of the truck's original owner, a young farmer who had used it to deliver fresh produce to the local market. Kelsey's restoration not only saved the truck from the ravages of rust but also uncovered a forgotten piece of the past.",
    "name": "Kelsey",
    "keyword": "rust",
    "subject_category": "human"
  },
  {
    "facts": [
      "Amaris is disciplined.",
      "Amaris is focused.",
      "Amaris is healthy.",
      "Amaris does not run fast."
    ],
    "facts_fol": [
      "is_disciplined(Amaris)",
      "is_focused(Amaris)",
      "is_healthy(Amaris)",
      "¬runs_fast(Amaris)"
    ],
    "rules": [
      "If Amaris is either athletic or strategic (but not both), then she is successful.",
      "If Amaris is disciplined, then she is either focused or strategic, but not both.",
      "Amaris is either agile or athletic, but not both.",
      "If Amaris is healthy, then she is either strong or agile, but not both.",
      "Amaris either runs fast or is strong."
    ],
    "rules_fol": [
      "(athletic(Amaris) ⊕ strategic(Amaris)) → successful(Amaris)",
      "is_disciplined(Amaris) → (is_focused(Amaris) ⊕ strategic(Amaris))",
      "is_agile(Amaris) ⊕ athletic(Amaris)",
      "is_healthy(Amaris) → (is_strong(Amaris) ⊕ is_agile(Amaris))",
      "runs_fast(Amaris) ∨ is_strong(Amaris)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Anyone who thinks critically or analyzes situations is strategic.",
      "If Amaris plays football, then she either leads her team or is athletic (or both).",
      "If someone has quick reflexes and jumps high, then they are agile.",
      "If Amaris works hard or trains regularly, then she is strong."
    ],
    "distracting_rules_fol": [
      "∀x ((thinks_critically(x) ∨ analyzes_situations(x)) → strategic(x))",
      "plays_football(Amaris) → (leads_team(Amaris) ∨ athletic(Amaris))",
      "∀x ((has_reflexes(x) ∧ jumps_high(x)) → is_agile(x))",
      "(works_hard(Amaris) ∨ trains_regularly(Amaris)) → is_strong(Amaris)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Amaris does not run fast."
        ],
        "rules": "Amaris either runs fast or is strong.",
        "conclusion": "Amaris is strong."
      },
      {
        "facts": [
          "Amaris is healthy.",
          "Amaris is strong."
        ],
        "rules": "If Amaris is healthy, then she is either strong or agile, but not both.",
        "conclusion": "Amaris is not agile."
      },
      {
        "facts": [
          "Amaris is not agile."
        ],
        "rules": "Amaris is either agile or athletic, but not both.",
        "conclusion": "Amaris is athletic."
      },
      {
        "facts": [
          "Amaris is disciplined.",
          "Amaris is focused."
        ],
        "rules": "If Amaris is disciplined, then she is either focused or strategic, but not both.",
        "conclusion": "Amaris is not strategic."
      },
      {
        "facts": [
          "Amaris is athletic.",
          "Amaris is not strategic."
        ],
        "rules": "If Amaris is either athletic or strategic (but not both), then she is successful.",
        "conclusion": "Amaris is successful."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬runs_fast(Amaris)"
        ],
        "rules": "runs_fast(Amaris) ∨ is_strong(Amaris)",
        "conclusion": "is_strong(Amaris)"
      },
      {
        "facts": [
          "is_healthy(Amaris)",
          "is_strong(Amaris)"
        ],
        "rules": "is_healthy(Amaris) → (is_strong(Amaris) ⊕ is_agile(Amaris))",
        "conclusion": "¬is_agile(Amaris)"
      },
      {
        "facts": [
          "¬is_agile(Amaris)"
        ],
        "rules": "is_agile(Amaris) ⊕ athletic(Amaris)",
        "conclusion": "athletic(Amaris)"
      },
      {
        "facts": [
          "is_disciplined(Amaris)",
          "is_focused(Amaris)"
        ],
        "rules": "is_disciplined(Amaris) → (is_focused(Amaris) ⊕ strategic(Amaris))",
        "conclusion": "¬strategic(Amaris)"
      },
      {
        "facts": [
          "athletic(Amaris)",
          "¬strategic(Amaris)"
        ],
        "rules": "(athletic(Amaris) ⊕ strategic(Amaris)) → successful(Amaris)",
        "conclusion": "successful(Amaris)"
      }
    ],
    "conclusion": "Amaris is successful.",
    "conclusion_fol": "successful(Amaris)",
    "answer": "True",
    "context": [
      "Amaris does not run fast.",
      "Amaris either runs fast or is strong.",
      "Amaris is healthy.",
      "If Amaris is healthy, then she is either strong or agile, but not both.",
      "Amaris is either agile or athletic, but not both.",
      "Amaris is disciplined.",
      "Amaris is focused.",
      "If Amaris is disciplined, then she is either focused or strategic, but not both.",
      "If Amaris is either athletic or strategic (but not both), then she is successful."
    ],
    "context_fol": [
      "¬runs_fast(Amaris)",
      "runs_fast(Amaris) ∨ is_strong(Amaris)",
      "is_healthy(Amaris)",
      "is_healthy(Amaris) → (is_strong(Amaris) ⊕ is_agile(Amaris))",
      "is_agile(Amaris) ⊕ athletic(Amaris)",
      "is_disciplined(Amaris)",
      "is_focused(Amaris)",
      "is_disciplined(Amaris) → (is_focused(Amaris) ⊕ strategic(Amaris))",
      "(athletic(Amaris) ⊕ strategic(Amaris)) → successful(Amaris)"
    ],
    "background_story": "Amaris was a force to be reckoned with on the football field. As a standout linebacker, she dominated games with her lightning-quick reflexes and unyielding determination. With a fierce competitive spirit, Amaris led her college team to a championship title, earning herself the MVP award. Her impressive skills caught the attention of NFL scouts, and she soon became the first female linebacker to be drafted into the league. Amaris's athleticism and strategic mind made her a valuable asset to her team, and she quickly became a fan favorite. Off the field, she was a devoted mentor to young girls interested in football, inspiring a new generation of female athletes to pursue their dreams.",
    "name": "Amaris",
    "keyword": "linebacker",
    "subject_category": "human"
  },
  {
    "facts": [
      "Stephen researches ancient texts.",
      "Stephen does not recreate historic scenes.",
      "Stephen has a curious mind."
    ],
    "facts_fol": [
      "research_ancient_text(Stephen)",
      "¬recreate_historic_scene(Stephen)",
      "curious_mind(Stephen)"
    ],
    "rules": [
      "If Stephen studies history, then he can either become an expert or adopt the culture, but not both.",
      "If Stephen researches ancient texts, then he either becomes an expert or recreates historic scenes.",
      "If Stephen has a curious mind, then he learns languages and studies history."
    ],
    "rules_fol": [
      "study_history(Stephen) → (become_expert(Stephen) ⊕ adopt_culture(Stephen))",
      "research_ancient_text(Stephen) → (become_expert(Stephen) ∨ recreate_historic_scene(Stephen))",
      "curious_mind(Stephen) → (learn_languages(Stephen) ∧ study_history(Stephen))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Stephen either collects artifacts or analyzes data (but not both), then he becomes an expert.",
      "If Stephen appreciates his heritage, then he either collects artifacts or studies history (or both)."
    ],
    "distracting_rules_fol": [
      "(collect_artifacts(Stephen) ⊕ analyze_data(Stephen)) → become_expert(Stephen)",
      "appreciate_heritage(Stephen) → (collect_artifacts(Stephen) ∨ study_history(Stephen))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Stephen has a curious mind."
        ],
        "rules": "If Stephen has a curious mind, then he learns languages and studies history.",
        "conclusion": "Stephen studies history."
      },
      {
        "facts": [
          "Stephen researches ancient texts.",
          "Stephen does not recreate historic scenes."
        ],
        "rules": "If Stephen researches ancient texts, then he either becomes an expert or recreates historic scenes.",
        "conclusion": "Stephen becomes an expert."
      },
      {
        "facts": [
          "Stephen studies history.",
          "Stephen becomes an expert."
        ],
        "rules": "If Stephen studies history, then he can either become an expert or adopt the culture, but not both.",
        "conclusion": "Stephen does not adopt the culture."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "curious_mind(Stephen)"
        ],
        "rules": "curious_mind(Stephen) → (learn_languages(Stephen) ∧ study_history(Stephen))",
        "conclusion": "study_history(Stephen)"
      },
      {
        "facts": [
          "research_ancient_text(Stephen)",
          "¬recreate_historic_scene(Stephen)"
        ],
        "rules": "research_ancient_text(Stephen) → (become_expert(Stephen) ∨ recreate_historic_scene(Stephen))",
        "conclusion": "become_expert(Stephen)"
      },
      {
        "facts": [
          "study_history(Stephen)",
          "become_expert(Stephen)"
        ],
        "rules": "study_history(Stephen) → (become_expert(Stephen) ⊕ adopt_culture(Stephen))",
        "conclusion": "¬adopt_culture(Stephen)"
      }
    ],
    "conclusion": "Stephen does not adopt the culture.",
    "conclusion_fol": "¬adopt_culture(Stephen)",
    "answer": "True",
    "context": [
      "Stephen has a curious mind.",
      "If Stephen has a curious mind, then he learns languages and studies history.",
      "Stephen researches ancient texts.",
      "Stephen does not recreate historic scenes.",
      "If Stephen researches ancient texts, then he either becomes an expert or recreates historic scenes.",
      "If Stephen studies history, then he can either become an expert or adopt the culture, but not both."
    ],
    "context_fol": [
      "curious_mind(Stephen)",
      "curious_mind(Stephen) → (learn_languages(Stephen) ∧ study_history(Stephen))",
      "research_ancient_text(Stephen)",
      "¬recreate_historic_scene(Stephen)",
      "research_ancient_text(Stephen) → (become_expert(Stephen) ∨ recreate_historic_scene(Stephen))",
      "study_history(Stephen) → (become_expert(Stephen) ⊕ adopt_culture(Stephen))"
    ],
    "background_story": "Stephen, a history enthusiast, had always been fascinated by the mysteries of the ancient Gauls. His love for Gallic culture led him to become an expert in Gallicism, studying the language, customs, and traditions of the Gauls. He spent years researching and translating ancient texts, uncovering hidden aspects of their society. Stephen's passion project was to recreate a Gaulish village, where he could immerse visitors in the daily life of the ancient civilization. His dedication earned him the nickname 'the modern Druid' among his peers. As he delved deeper into his studies, Stephen began to see the world through the eyes of the Gauls, adopting their philosophies and way of life. His journey was a testament to the enduring allure of Gallicism and its ability to transcend time and borders.",
    "name": "Stephen",
    "keyword": "gallicism",
    "subject_category": "human"
  },
  {
    "facts": [
      "Lacey does not see beauty.",
      "Lacey walks slowly.",
      "Lacey does not have curiosity.",
      "Lacey is attentive."
    ],
    "facts_fol": [
      "¬sees_beauty(Lacey)",
      "walks_slowly(Lacey)",
      "¬has_curiosity(Lacey)",
      "is_attentive(Lacey)"
    ],
    "rules": [
      "Lacey is either appreciative of her surroundings or oblivious to them, but not both.",
      "If Lacey either notices details or sees beauty (but not both), then she is appreciative.",
      "Anyone who walks slowly or observes closely can notice details.",
      "If someone has curiosity and is attentive, then they observe closely."
    ],
    "rules_fol": [
      "appreciative(Lacey) ⊕ oblivious(Lacey)",
      "(notices_details(Lacey) ⊕ sees_beauty(Lacey)) → appreciative(Lacey)",
      "∀x ((walks_slowly(x) ∨ observes_closely(x)) → notices_details(x))",
      "∀x ((has_curiosity(x) ∧ is_attentive(x)) → observes_closely(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If someone likes art and enjoys nature, then they are appreciative.",
      "Everyone who is mindful notices details.",
      "If Lacey explores the town, then she meets people and observes closely."
    ],
    "distracting_rules_fol": [
      "∀x ((likes_art(x) ∧ enjoys_nature(x)) → appreciative(x))",
      "∀x (is_mindful(x) → notices_details(x))",
      "explores_town(Lacey) → (meets_people(Lacey) ∧ observes_closely(Lacey))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Lacey does not have curiosity.",
          "Lacey is attentive."
        ],
        "rules": "If someone has curiosity and is attentive, then they observe closely.",
        "conclusion": null
      },
      {
        "facts": [
          "Lacey walks slowly."
        ],
        "rules": "Anyone who walks slowly or observes closely can notice details.",
        "conclusion": "Lacey notices details."
      },
      {
        "facts": [
          "Lacey notices details.",
          "Lacey does not see beauty."
        ],
        "rules": "If Lacey either notices details or sees beauty (but not both), then she is appreciative.",
        "conclusion": "Lacey is appreciative of her surroundings."
      },
      {
        "facts": [
          "Lacey is appreciative of her surroundings."
        ],
        "rules": "Lacey is either appreciative of her surroundings or oblivious to them, but not both.",
        "conclusion": "Lacey is not oblivious to her surroundings."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬has_curiosity(Lacey)",
          "is_attentive(Lacey)"
        ],
        "rules": "∀x ((has_curiosity(x) ∧ is_attentive(x)) → observes_closely(x))",
        "conclusion": null
      },
      {
        "facts": [
          "walks_slowly(Lacey)"
        ],
        "rules": "∀x ((walks_slowly(x) ∨ observes_closely(x)) → notices_details(x))",
        "conclusion": "notices_details(Lacey)"
      },
      {
        "facts": [
          "notices_details(Lacey)",
          "¬sees_beauty(Lacey)"
        ],
        "rules": "(notices_details(Lacey) ⊕ sees_beauty(Lacey)) → appreciative(Lacey)",
        "conclusion": "appreciative(Lacey)"
      },
      {
        "facts": [
          "appreciative(Lacey)"
        ],
        "rules": "appreciative(Lacey) ⊕ oblivious(Lacey)",
        "conclusion": "¬oblivious(Lacey)"
      }
    ],
    "conclusion": "Lacey is not oblivious to her surroundings.",
    "conclusion_fol": "¬oblivious(Lacey)",
    "answer": "True",
    "context": [
      "Lacey does not have curiosity.",
      "Lacey is attentive.",
      "If someone has curiosity and is attentive, then they observe closely.",
      "Lacey walks slowly.",
      "Anyone who walks slowly or observes closely can notice details.",
      "Lacey does not see beauty.",
      "If Lacey either notices details or sees beauty (but not both), then she is appreciative.",
      "Lacey is either appreciative of her surroundings or oblivious to them, but not both."
    ],
    "context_fol": [
      "¬has_curiosity(Lacey)",
      "is_attentive(Lacey)",
      "∀x ((has_curiosity(x) ∧ is_attentive(x)) → observes_closely(x))",
      "walks_slowly(Lacey)",
      "∀x ((walks_slowly(x) ∨ observes_closely(x)) → notices_details(x))",
      "¬sees_beauty(Lacey)",
      "(notices_details(Lacey) ⊕ sees_beauty(Lacey)) → appreciative(Lacey)",
      "appreciative(Lacey) ⊕ oblivious(Lacey)"
    ],
    "background_story": "Lacey was an artist with a passion for capturing the essence of her surroundings. She loved to perambulate through the old town, taking in the intricate details of the historic buildings and quaint shops. With sketchbook in hand, she would stroll along the cobblestone streets, observing the way the light danced through the alleys and the sounds of the town came alive. Her daily walks inspired a series of watercolors that showcased the town's charm. As she perambulated, Lacey noticed things others often missed - a child's laughter, a street performer's skill, or the aroma of freshly baked bread. Her art became a reflection of her wanderings, inviting viewers to join her on a leisurely stroll through the picturesque town she loved.",
    "name": "Lacey",
    "keyword": "perambulate",
    "subject_category": "human"
  },
  {
    "facts": [
      "Francis is loved by his people.",
      "Francis is not respected.",
      "Francis seeks advice.",
      "Francis does not make informed decisions.",
      "Francis has vision.",
      "Francis is a benevolent ruler."
    ],
    "facts_fol": [
      "loved_by_people(Francis)",
      "¬respected(Francis)",
      "seek_advice(Francis)",
      "¬make_informed_decisions(Francis)",
      "has_vision(Francis)",
      "is_benevolent(Francis)"
    ],
    "rules": [
      "Francis either rules with wisdom or brings prosperity, but not necessarily both.",
      "If Francis is a fair king, then he is either respected or just, but not both.",
      "If Francis either seeks advice or makes informed decisions (but not both), then he rules with wisdom.",
      "Francis is either a strong leader or fair.",
      "If Francis has vision, then he is either a strong leader or a benevolent ruler, but not both."
    ],
    "rules_fol": [
      "rule_with_wisdom(Francis) ⊕ bring_prosperity(Francis)",
      "fair(Francis) → (respected(Francis) ⊕ just(Francis))",
      "(seek_advice(Francis) ⊕ make_informed_decisions(Francis)) → rule_with_wisdom(Francis)",
      "strong_leader(Francis) ∨ fair(Francis)",
      "has_vision(Francis) → (strong_leader(Francis) ⊕ is_benevolent(Francis))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If a king cares for his subjects and makes wise choices, then he brings prosperity.",
      "Any king who cares for his subjects is a just ruler.",
      "All kings who listen to counsel rule with wisdom.",
      "If a king listens well and cares deeply, then he is fair.",
      "If Francis either makes bold choices or fosters unity (but not both), then he is a strong leader."
    ],
    "distracting_rules_fol": [
      "∀x ((cares_for_subjects(x) ∧ makes_wise_choices(x)) → bring_prosperity(x))",
      "∀x (cares_for_subjects(x) → just(x))",
      "∀x (listens_to_counsel(x) → rule_with_wisdom(x))",
      "∀x ((listens_well(x) ∧ cares_deeply(x)) → fair(x))",
      "(makes_bold_choices(Francis) ⊕ fosters_unity(Francis)) → strong_leader(Francis)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Francis has vision.",
          "Francis is a benevolent ruler."
        ],
        "rules": "If Francis has vision, then he is either a strong leader or a benevolent ruler, but not both.",
        "conclusion": "Francis is not a strong leader."
      },
      {
        "facts": [
          "Francis is not a strong leader."
        ],
        "rules": "Francis is either a strong leader or fair.",
        "conclusion": "Francis is a fair king."
      },
      {
        "facts": [
          "Francis seeks advice.",
          "Francis does not make informed decisions."
        ],
        "rules": "If Francis either seeks advice or makes informed decisions (but not both), then he rules with wisdom.",
        "conclusion": "Francis rules with wisdom."
      },
      {
        "facts": [
          "Francis is a fair king.",
          "Francis is not respected."
        ],
        "rules": "If Francis is a fair king, then he is either respected or just, but not both.",
        "conclusion": "Francis is a just king."
      },
      {
        "facts": [
          "Francis rules with wisdom."
        ],
        "rules": "Francis either rules with wisdom or brings prosperity, but not necessarily both.",
        "conclusion": "Francis does not bring prosperity to Everia."
      },
      {
        "facts": [
          "Francis is a just king.",
          "Francis is loved by his people.",
          "Francis does not bring prosperity to Everia."
        ],
        "rules": null,
        "conclusion": "If Francis is a just king, then he is loved by his people and brings prosperity to Everia."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "has_vision(Francis)",
          "is_benevolent(Francis)"
        ],
        "rules": "has_vision(Francis) → (strong_leader(Francis) ⊕ is_benevolent(Francis))",
        "conclusion": "¬strong_leader(Francis)"
      },
      {
        "facts": [
          "¬strong_leader(Francis)"
        ],
        "rules": "strong_leader(Francis) ∨ fair(Francis)",
        "conclusion": "fair(Francis)"
      },
      {
        "facts": [
          "seek_advice(Francis)",
          "¬make_informed_decisions(Francis)"
        ],
        "rules": "(seek_advice(Francis) ⊕ make_informed_decisions(Francis)) → rule_with_wisdom(Francis)",
        "conclusion": "rule_with_wisdom(Francis)"
      },
      {
        "facts": [
          "fair(Francis)",
          "¬respected(Francis)"
        ],
        "rules": "fair(Francis) → (respected(Francis) ⊕ just(Francis))",
        "conclusion": "just(Francis)"
      },
      {
        "facts": [
          "rule_with_wisdom(Francis)"
        ],
        "rules": "rule_with_wisdom(Francis) ⊕ bring_prosperity(Francis)",
        "conclusion": "¬bring_prosperity(Francis)"
      },
      {
        "facts": [
          "just(Francis)",
          "loved_by_people(Francis)",
          "¬bring_prosperity(Francis)"
        ],
        "rules": null,
        "conclusion": "just(Francis) → (loved_by_people(Francis) ∧ bring_prosperity(Francis))"
      }
    ],
    "conclusion": "If Francis is a just king, then he is loved by his people and brings prosperity to Everia.",
    "conclusion_fol": "just(Francis) → (loved_by_people(Francis) ∧ bring_prosperity(Francis))",
    "answer": "False",
    "context": [
      "Francis has vision.",
      "Francis is a benevolent ruler.",
      "If Francis has vision, then he is either a strong leader or a benevolent ruler, but not both.",
      "Francis is either a strong leader or fair.",
      "Francis seeks advice.",
      "Francis does not make informed decisions.",
      "If Francis either seeks advice or makes informed decisions (but not both), then he rules with wisdom.",
      "Francis is not respected.",
      "If Francis is a fair king, then he is either respected or just, but not both.",
      "Francis either rules with wisdom or brings prosperity, but not necessarily both.",
      "Francis is loved by his people."
    ],
    "context_fol": [
      "has_vision(Francis)",
      "is_benevolent(Francis)",
      "has_vision(Francis) → (strong_leader(Francis) ⊕ is_benevolent(Francis))",
      "strong_leader(Francis) ∨ fair(Francis)",
      "seek_advice(Francis)",
      "¬make_informed_decisions(Francis)",
      "(seek_advice(Francis) ⊕ make_informed_decisions(Francis)) → rule_with_wisdom(Francis)",
      "¬respected(Francis)",
      "fair(Francis) → (respected(Francis) ⊕ just(Francis))",
      "rule_with_wisdom(Francis) ⊕ bring_prosperity(Francis)",
      "loved_by_people(Francis)"
    ],
    "background_story": "Francis, the King of Everia, was known for his fair and just rule, often seeking the counsel of the wise wizard, Edwy. Edwy's vast knowledge and magical abilities had been invaluable to Francis, helping him navigate the complexities of ruling the kingdom. Together, they implemented policies that brought peace and prosperity to Everia, earning Francis the love and respect of his people. Edwy's influence extended beyond politics, as he taught Francis the importance of compassion, humility, and wisdom. Under Francis' rule, with Edwy by his side, Everia flourished, becoming a beacon of hope and harmony in a world often plagued by conflict and darkness.",
    "name": "Francis",
    "keyword": "edwy",
    "subject_category": "king"
  },
  {
    "facts": [
      "Yamileth does not use hearing aids.",
      "Yamileth needs help.",
      "Yamileth is unwell."
    ],
    "facts_fol": [
      "¬uses_hearing_aids(Yamileth)",
      "needs_help(Yamileth)",
      "is_unwell(Yamileth)"
    ],
    "rules": [
      "For every human, they either have good hearing or have a hearing impairment, but not both.",
      "If Yamileth receives treatment for her hearing, then she either has good hearing or uses hearing aids.",
      "If Yamileth seeks medical care, then she will receive treatment.",
      "For all humans, if they feel ill and need help, then they seek medical care.",
      "Anyone who is unwell feels ill."
    ],
    "rules_fol": [
      "∀x (has_good_hearing(x) ⊕ has_hearing_impairment(x))",
      "receives_treatment(Yamileth) → (has_good_hearing(Yamileth) ∨ uses_hearing_aids(Yamileth))",
      "seeks_care(Yamileth) → receives_treatment(Yamileth)",
      "∀x ((feels_ill(x) ∧ needs_help(x)) → seeks_care(x))",
      "∀x (is_unwell(x) → feels_ill(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Anyone who hears well has good hearing.",
      "If Yamileth experiences discomfort, then she either seeks relief or receives treatment, but not both.",
      "If Yamileth feels pain or is injured, then she will seek medical care.",
      "Any person who experiences pain or has a fever is likely to feel ill."
    ],
    "distracting_rules_fol": [
      "∀x (hears_well(x) → has_good_hearing(x))",
      "experiences_discomfort(Yamileth) → (seeks_relief(Yamileth) ⊕ receives_treatment(Yamileth))",
      "(feels_pain(Yamileth) ∨ is_injured(Yamileth)) → seeks_care(Yamileth)",
      "∀x ((experiences_pain(x) ∨ has_fever(x)) → feels_ill(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Yamileth is unwell."
        ],
        "rules": "Anyone who is unwell feels ill.",
        "conclusion": "Yamileth feels ill."
      },
      {
        "facts": [
          "Yamileth feels ill.",
          "Yamileth needs help."
        ],
        "rules": "For all humans, if they feel ill and need help, then they seek medical care.",
        "conclusion": "Yamileth seeks medical care."
      },
      {
        "facts": [
          "Yamileth seeks medical care."
        ],
        "rules": "If Yamileth seeks medical care, then she will receive treatment.",
        "conclusion": "Yamileth receives treatment for her hearing."
      },
      {
        "facts": [
          "Yamileth receives treatment for her hearing.",
          "Yamileth does not use hearing aids."
        ],
        "rules": "If Yamileth receives treatment for her hearing, then she either has good hearing or uses hearing aids.",
        "conclusion": "Yamileth has good hearing."
      },
      {
        "facts": [
          "Yamileth has good hearing."
        ],
        "rules": "For every human, they either have good hearing or have a hearing impairment, but not both.",
        "conclusion": "Yamileth does not have a hearing impairment."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "is_unwell(Yamileth)"
        ],
        "rules": "∀x (is_unwell(x) → feels_ill(x))",
        "conclusion": "feels_ill(Yamileth)"
      },
      {
        "facts": [
          "feels_ill(Yamileth)",
          "needs_help(Yamileth)"
        ],
        "rules": "∀x ((feels_ill(x) ∧ needs_help(x)) → seeks_care(x))",
        "conclusion": "seeks_care(Yamileth)"
      },
      {
        "facts": [
          "seeks_care(Yamileth)"
        ],
        "rules": "seeks_care(Yamileth) → receives_treatment(Yamileth)",
        "conclusion": "receives_treatment(Yamileth)"
      },
      {
        "facts": [
          "receives_treatment(Yamileth)",
          "¬uses_hearing_aids(Yamileth)"
        ],
        "rules": "receives_treatment(Yamileth) → (has_good_hearing(Yamileth) ∨ uses_hearing_aids(Yamileth))",
        "conclusion": "has_good_hearing(Yamileth)"
      },
      {
        "facts": [
          "has_good_hearing(Yamileth)"
        ],
        "rules": "∀x (has_good_hearing(x) ⊕ has_hearing_impairment(x))",
        "conclusion": "¬has_hearing_impairment(Yamileth)"
      }
    ],
    "conclusion": "Yamileth does not have a hearing impairment.",
    "conclusion_fol": "¬has_hearing_impairment(Yamileth)",
    "answer": "True",
    "context": [
      "Yamileth is unwell.",
      "Anyone who is unwell feels ill.",
      "Yamileth needs help.",
      "For all humans, if they feel ill and need help, then they seek medical care.",
      "If Yamileth seeks medical care, then she will receive treatment.",
      "Yamileth does not use hearing aids.",
      "If Yamileth receives treatment for her hearing, then she either has good hearing or uses hearing aids.",
      "For every human, they either have good hearing or have a hearing impairment, but not both."
    ],
    "context_fol": [
      "is_unwell(Yamileth)",
      "∀x (is_unwell(x) → feels_ill(x))",
      "needs_help(Yamileth)",
      "∀x ((feels_ill(x) ∧ needs_help(x)) → seeks_care(x))",
      "seeks_care(Yamileth) → receives_treatment(Yamileth)",
      "¬uses_hearing_aids(Yamileth)",
      "receives_treatment(Yamileth) → (has_good_hearing(Yamileth) ∨ uses_hearing_aids(Yamileth))",
      "∀x (has_good_hearing(x) ⊕ has_hearing_impairment(x))"
    ],
    "background_story": "Yamileth was a brilliant and curious audiologist who spent most of her career studying the intricacies of the human ear. Her fascination with the incus, one of the smallest bones in the body, led her to develop innovative treatments for hearing disorders. Yamileth's groundbreaking research on the incus and its role in sound conduction paved the way for new surgical techniques and therapies. Her dedication to helping those with hearing impairments earned her international recognition and accolades. As a leading expert in her field, Yamileth continued to explore the complexities of the incus, driven by her passion to improve the lives of others and her unwavering commitment to the pursuit of knowledge.",
    "name": "Yamileth",
    "keyword": "incus",
    "subject_category": "human"
  },
  {
    "facts": [
      "Kori is fulfilled.",
      "Kori is reflective.",
      "Kori does not crave luxury.",
      "Kori pursues wealth."
    ],
    "facts_fol": [
      "fulfilled(Kori)",
      "is_reflective(Kori)",
      "¬craves_luxury(Kori)",
      "pursues_wealth(Kori)"
    ],
    "rules": [
      "If Kori is famous, then he is either happy or fulfilled, but not both.",
      "If Kori is rich, then he is famous.",
      "Either Kori lives simply or he is wealthy, but not both.",
      "If Kori is reflective, then he either lives simply or is materialistic, but not both.",
      "If Kori either craves luxury or pursues wealth (but not both), then he is materialistic."
    ],
    "rules_fol": [
      "famous(Kori) → (happy(Kori) ⊕ fulfilled(Kori))",
      "rich(Kori) → famous(Kori)",
      "lives_simply(Kori) ⊕ rich(Kori)",
      "is_reflective(Kori) → (lives_simply(Kori) ⊕ is_materialistic(Kori))",
      "(craves_luxury(Kori) ⊕ pursues_wealth(Kori)) → is_materialistic(Kori)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Kori either creates art or is famous.",
      "If Kori is talented, then he is either successful or rich (or both).",
      "If Kori seeks balance, then he values freedom and lives simply.",
      "If someone desires status and seeks possessions, then they are materialistic."
    ],
    "distracting_rules_fol": [
      "creates_art(Kori) ∨ famous(Kori)",
      "talented(Kori) → (successful(Kori) ∨ rich(Kori))",
      "seeks_balance(Kori) → (values_freedom(Kori) ∧ lives_simply(Kori))",
      "∀x ((desires_status(x) ∧ seeks_possessions(x)) → is_materialistic(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Kori does not crave luxury.",
          "Kori pursues wealth."
        ],
        "rules": "If Kori either craves luxury or pursues wealth (but not both), then he is materialistic.",
        "conclusion": "Kori is materialistic."
      },
      {
        "facts": [
          "Kori is reflective.",
          "Kori is materialistic."
        ],
        "rules": "If Kori is reflective, then he either lives simply or is materialistic, but not both.",
        "conclusion": "Kori does not live simply."
      },
      {
        "facts": [
          "Kori does not live simply."
        ],
        "rules": "Either Kori lives simply or he is wealthy, but not both.",
        "conclusion": "Kori is rich."
      },
      {
        "facts": [
          "Kori is rich."
        ],
        "rules": "If Kori is rich, then he is famous.",
        "conclusion": "Kori is famous."
      },
      {
        "facts": [
          "Kori is famous.",
          "Kori is fulfilled."
        ],
        "rules": "If Kori is famous, then he is either happy or fulfilled, but not both.",
        "conclusion": "Kori is happy."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬craves_luxury(Kori)",
          "pursues_wealth(Kori)"
        ],
        "rules": "(craves_luxury(Kori) ⊕ pursues_wealth(Kori)) → is_materialistic(Kori)",
        "conclusion": "is_materialistic(Kori)"
      },
      {
        "facts": [
          "is_reflective(Kori)",
          "is_materialistic(Kori)"
        ],
        "rules": "is_reflective(Kori) → (lives_simply(Kori) ⊕ is_materialistic(Kori))",
        "conclusion": "¬lives_simply(Kori)"
      },
      {
        "facts": [
          "¬lives_simply(Kori)"
        ],
        "rules": "lives_simply(Kori) ⊕ rich(Kori)",
        "conclusion": "rich(Kori)"
      },
      {
        "facts": [
          "rich(Kori)"
        ],
        "rules": "rich(Kori) → famous(Kori)",
        "conclusion": "famous(Kori)"
      },
      {
        "facts": [
          "famous(Kori)",
          "fulfilled(Kori)"
        ],
        "rules": "famous(Kori) → (happy(Kori) ⊕ fulfilled(Kori))",
        "conclusion": "happy(Kori)"
      }
    ],
    "conclusion": "Kori is happy.",
    "conclusion_fol": "happy(Kori)",
    "answer": "False",
    "context": [
      "Kori does not crave luxury.",
      "Kori pursues wealth.",
      "If Kori either craves luxury or pursues wealth (but not both), then he is materialistic.",
      "Kori is reflective.",
      "If Kori is reflective, then he either lives simply or is materialistic, but not both.",
      "Either Kori lives simply or he is wealthy, but not both.",
      "If Kori is rich, then he is famous.",
      "Kori is fulfilled.",
      "If Kori is famous, then he is either happy or fulfilled, but not both."
    ],
    "context_fol": [
      "¬craves_luxury(Kori)",
      "pursues_wealth(Kori)",
      "(craves_luxury(Kori) ⊕ pursues_wealth(Kori)) → is_materialistic(Kori)",
      "is_reflective(Kori)",
      "is_reflective(Kori) → (lives_simply(Kori) ⊕ is_materialistic(Kori))",
      "lives_simply(Kori) ⊕ rich(Kori)",
      "rich(Kori) → famous(Kori)",
      "fulfilled(Kori)",
      "famous(Kori) → (happy(Kori) ⊕ fulfilled(Kori))"
    ],
    "background_story": "Kori was a talented musician who had it all: fame, fortune, and adoring fans. However, after a grueling tour schedule and constant media scrutiny, he found himself struggling with the pressures of his high-profile life. Feeling overwhelmed and disconnected from his passion for music, Kori made the shocking decision to withdraw from the public eye. He canceled his tours, shut down his social media accounts, and retreated to a secluded cabin in the woods. There, he spent months in solitude, reflecting on his life and rekindling his love for music. Kori's withdrawal from the spotlight was seen as a mysterious and drastic move, but for him, it was a necessary step towards rediscovering his true self and creative voice.",
    "name": "Kori",
    "keyword": "withdrawal",
    "subject_category": "human"
  },
  {
    "facts": [
      "Adalynn is ambitious.",
      "Adalynn lacks passion.",
      "Adalynn has responsibilities."
    ],
    "facts_fol": [
      "is_ambitious(Adalynn)",
      "lacks_passion(Adalynn)",
      "has_responsibilities(Adalynn)"
    ],
    "rules": [
      "If Adalynn is successful, then she is financially secure and searches for a sense of purpose.",
      "Adalynn is either fulfilled or successful, but her current state of success does not guarantee fulfillment.",
      "Anyone who lacks passion in life will search for a sense of purpose.",
      "If Adalynn is ambitious, then she is either content or unfulfilled, but not both.",
      "If Adalynn has responsibilities and values happiness, then she is content."
    ],
    "rules_fol": [
      "successful(Adalynn) → (financially_secure(Adalynn) ∧ search_for_purpose(Adalynn))",
      "feels_unfulfilled(Adalynn) ⊕ successful(Adalynn)",
      "∀x (lacks_passion(x) → search_for_purpose(x))",
      "is_ambitious(Adalynn) → (is_content(Adalynn) ⊕ feels_unfulfilled(Adalynn))",
      "has_responsibilities(Adalynn) → (values_happiness(Adalynn) ∧ is_content(Adalynn))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Adalynn holds power or earns well, then she is successful.",
      "If Adalynn is a high achiever, then she is emotionally introspective and searches for purpose.",
      "If someone lacks excitement and feels empty, then they feel unfulfilled.",
      "If Adalynn either enjoys her work or loves her life (but not both), then she is content."
    ],
    "distracting_rules_fol": [
      "(holds_power(Adalynn) ∨ earns_well(Adalynn)) → successful(Adalynn)",
      "high_achiever(Adalynn) → (emotionally_introspective(Adalynn) ∧ search_for_purpose(Adalynn))",
      "∀x ((lacks_excitement(x) ∧ feels_empty(x)) → feels_unfulfilled(x))",
      "(enjoys_work(Adalynn) ⊕ loves_life(Adalynn)) → is_content(Adalynn)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Adalynn has responsibilities."
        ],
        "rules": "If Adalynn has responsibilities and values happiness, then she is content.",
        "conclusion": "Adalynn is content."
      },
      {
        "facts": [
          "Adalynn is ambitious.",
          "Adalynn is content."
        ],
        "rules": "If Adalynn is ambitious, then she is either content or unfulfilled, but not both.",
        "conclusion": "Adalynn does not feel unfulfilled."
      },
      {
        "facts": [
          "Adalynn lacks passion."
        ],
        "rules": "Anyone who lacks passion in life will search for a sense of purpose.",
        "conclusion": "Adalynn searches for a sense of purpose."
      },
      {
        "facts": [
          "Adalynn does not feel unfulfilled."
        ],
        "rules": "Adalynn is either fulfilled or successful, but her current state of success does not guarantee fulfillment.",
        "conclusion": "Adalynn is successful."
      },
      {
        "facts": [
          "Adalynn is successful.",
          "Adalynn searches for a sense of purpose."
        ],
        "rules": "If Adalynn is successful, then she is financially secure and searches for a sense of purpose.",
        "conclusion": "Adalynn is financially secure."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "has_responsibilities(Adalynn)"
        ],
        "rules": "has_responsibilities(Adalynn) → (values_happiness(Adalynn) ∧ is_content(Adalynn))",
        "conclusion": "is_content(Adalynn)"
      },
      {
        "facts": [
          "is_ambitious(Adalynn)",
          "is_content(Adalynn)"
        ],
        "rules": "is_ambitious(Adalynn) → (is_content(Adalynn) ⊕ feels_unfulfilled(Adalynn))",
        "conclusion": "¬feels_unfulfilled(Adalynn)"
      },
      {
        "facts": [
          "lacks_passion(Adalynn)"
        ],
        "rules": "∀x (lacks_passion(x) → search_for_purpose(x))",
        "conclusion": "search_for_purpose(Adalynn)"
      },
      {
        "facts": [
          "¬feels_unfulfilled(Adalynn)"
        ],
        "rules": "feels_unfulfilled(Adalynn) ⊕ successful(Adalynn)",
        "conclusion": "successful(Adalynn)"
      },
      {
        "facts": [
          "successful(Adalynn)",
          "search_for_purpose(Adalynn)"
        ],
        "rules": "successful(Adalynn) → (financially_secure(Adalynn) ∧ search_for_purpose(Adalynn))",
        "conclusion": "financially_secure(Adalynn)"
      }
    ],
    "conclusion": "Adalynn is financially secure.",
    "conclusion_fol": "financially_secure(Adalynn)",
    "answer": "True",
    "context": [
      "Adalynn has responsibilities.",
      "If Adalynn has responsibilities and values happiness, then she is content.",
      "Adalynn is ambitious.",
      "If Adalynn is ambitious, then she is either content or unfulfilled, but not both.",
      "Adalynn lacks passion.",
      "Anyone who lacks passion in life will search for a sense of purpose.",
      "Adalynn is either fulfilled or successful, but her current state of success does not guarantee fulfillment.",
      "If Adalynn is successful, then she is financially secure and searches for a sense of purpose."
    ],
    "context_fol": [
      "has_responsibilities(Adalynn)",
      "has_responsibilities(Adalynn) → (values_happiness(Adalynn) ∧ is_content(Adalynn))",
      "is_ambitious(Adalynn)",
      "is_ambitious(Adalynn) → (is_content(Adalynn) ⊕ feels_unfulfilled(Adalynn))",
      "lacks_passion(Adalynn)",
      "∀x (lacks_passion(x) → search_for_purpose(x))",
      "feels_unfulfilled(Adalynn) ⊕ successful(Adalynn)",
      "successful(Adalynn) → (financially_secure(Adalynn) ∧ search_for_purpose(Adalynn))"
    ],
    "background_story": "Adalynn was a high-powered executive who had it all: a corner office, a six-figure salary, and a sleek city apartment. However, as she went through the motions of her daily routine, she couldn't shake the feeling that something was missing. She attended meetings perfunctorily, nodded along to her colleagues' ideas, and signed documents with a flourish, all without much enthusiasm. Her days blended together in a haze of monotony, with each task performed with a sense of duty rather than passion. Despite her outward success, Adalynn felt unfulfilled, as if she was just going through the motions of life without any real purpose or excitement. She longed for something more, but for now, she continued to perform her duties perfunctorily, searching for a spark to reignite her passion.",
    "name": "Adalynn",
    "keyword": "perfunctorily",
    "subject_category": "human"
  },
  {
    "facts": [
      "Sophia is innovative.",
      "Sophia is artistic.",
      "Sophia does not take risks."
    ],
    "facts_fol": [
      "is_innovative(Sophia)",
      "is_artistic(Sophia)",
      "¬takes_risks(Sophia)"
    ],
    "rules": [
      "Sophia is either creative or hardworking (or both).",
      "If Sophia either thinks outside the box or solves problems (but not both), then she is creative.",
      "If Sophia is innovative, then she either solves problems or is artistic, but not both.",
      "Sophia either takes risks or thinks outside the box, but not both."
    ],
    "rules_fol": [
      "creative(Sophia) ∨ hardworking(Sophia)",
      "(thinks_outside(Sophia) ⊕ solves_problems(Sophia)) → creative(Sophia)",
      "is_innovative(Sophia) → (solves_problems(Sophia) ⊕ is_artistic(Sophia))",
      "takes_risks(Sophia) ⊕ thinks_outside(Sophia)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Everyone who achieves success is either creative or earns recognition (or both).",
      "If Sophia has vision or analyzes data, then she can solve problems.",
      "If Sophia either sees patterns or makes connections (but not both), then she thinks outside the box."
    ],
    "distracting_rules_fol": [
      "∀x (achieve_success(x) → (creative(x) ∨ earn_recognition(x)))",
      "(has_vision(Sophia) ∨ analyzes_data(Sophia)) → solves_problems(Sophia)",
      "(sees_patterns(Sophia) ⊕ makes_connections(Sophia)) → thinks_outside(Sophia)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Sophia does not take risks."
        ],
        "rules": "Sophia either takes risks or thinks outside the box, but not both.",
        "conclusion": "Sophia thinks outside the box."
      },
      {
        "facts": [
          "Sophia is innovative.",
          "Sophia is artistic."
        ],
        "rules": "If Sophia is innovative, then she either solves problems or is artistic, but not both.",
        "conclusion": "Sophia does not solve problems."
      },
      {
        "facts": [
          "Sophia thinks outside the box.",
          "Sophia does not solve problems."
        ],
        "rules": "If Sophia either thinks outside the box or solves problems (but not both), then she is creative.",
        "conclusion": "Sophia is creative."
      },
      {
        "facts": [
          "Sophia is creative."
        ],
        "rules": "Sophia is either creative or hardworking (or both).",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬takes_risks(Sophia)"
        ],
        "rules": "takes_risks(Sophia) ⊕ thinks_outside(Sophia)",
        "conclusion": "thinks_outside(Sophia)"
      },
      {
        "facts": [
          "is_innovative(Sophia)",
          "is_artistic(Sophia)"
        ],
        "rules": "is_innovative(Sophia) → (solves_problems(Sophia) ⊕ is_artistic(Sophia))",
        "conclusion": "¬solves_problems(Sophia)"
      },
      {
        "facts": [
          "thinks_outside(Sophia)",
          "¬solves_problems(Sophia)"
        ],
        "rules": "(thinks_outside(Sophia) ⊕ solves_problems(Sophia)) → creative(Sophia)",
        "conclusion": "creative(Sophia)"
      },
      {
        "facts": [
          "creative(Sophia)"
        ],
        "rules": "creative(Sophia) ∨ hardworking(Sophia)",
        "conclusion": null
      }
    ],
    "conclusion": "Sophia is not hardworking.",
    "conclusion_fol": "¬hardworking(Sophia)",
    "answer": "Uncertain",
    "context": [
      "Sophia does not take risks.",
      "Sophia either takes risks or thinks outside the box, but not both.",
      "Sophia is innovative.",
      "Sophia is artistic.",
      "If Sophia is innovative, then she either solves problems or is artistic, but not both.",
      "If Sophia either thinks outside the box or solves problems (but not both), then she is creative.",
      "Sophia is either creative or hardworking (or both)."
    ],
    "context_fol": [
      "¬takes_risks(Sophia)",
      "takes_risks(Sophia) ⊕ thinks_outside(Sophia)",
      "is_innovative(Sophia)",
      "is_artistic(Sophia)",
      "is_innovative(Sophia) → (solves_problems(Sophia) ⊕ is_artistic(Sophia))",
      "(thinks_outside(Sophia) ⊕ solves_problems(Sophia)) → creative(Sophia)",
      "creative(Sophia) ∨ hardworking(Sophia)"
    ],
    "background_story": "Sophia was a brilliant and ambitious young architect who worked industriously to bring her innovative designs to life. From a small studio in her hometown, she spent long hours sketching, modeling, and refining her projects. Her dedication paid off when she won a prestigious international competition with her sustainable, eco-friendly skyscraper design. This breakthrough led to commissions from around the world, and Sophia's firm quickly expanded. She continued to work industriously, always pushing the boundaries of what was possible. Sophia's relentless drive and creative genius transformed city skylines, earning her numerous awards and recognition as a leader in her field. Her story inspired countless young architects to follow in her footsteps, working industriously to create a better, more beautiful world.",
    "name": "Sophia",
    "keyword": "industriously",
    "subject_category": "human"
  },
  {
    "facts": [
      "Ryatt is a risk-taker.",
      "Ryatt does not invest wisely.",
      "Ryatt is responsible."
    ],
    "facts_fol": [
      "risk_taker(Ryatt)",
      "¬invests_wisely(Ryatt)",
      "responsible(Ryatt)"
    ],
    "rules": [
      "If Ryatt is either a planner or a spender (but not both), then he is financially stable.",
      "Ryatt is either a risk-taker or a planner, but not both, reflecting two different approaches to managing finances.",
      "If Ryatt saves money, then he either invests wisely or is a spender (or both).",
      "All responsible people save money and set goals."
    ],
    "rules_fol": [
      "(planner(Ryatt) ⊕ spender(Ryatt)) → financially_stable(Ryatt)",
      "risk_taker(Ryatt) ⊕ planner(Ryatt)",
      "saves_money(Ryatt) → (invests_wisely(Ryatt) ∨ spender(Ryatt))",
      "∀x (responsible(x) → (saves_money(x) ∧ sets_goals(x)))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Ryatt is organized, then he is either frugal or a planner, but not both.",
      "If Ryatt buys luxury items, then he is a spender.",
      "If Ryatt budgets his time, then he saves money and earns a good income."
    ],
    "distracting_rules_fol": [
      "is_organized(Ryatt) → (is_frugal(Ryatt) ⊕ planner(Ryatt))",
      "buys_luxury(Ryatt) → spender(Ryatt)",
      "budgets_time(Ryatt) → (saves_money(Ryatt) ∧ earns_well(Ryatt))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Ryatt is responsible."
        ],
        "rules": "All responsible people save money and set goals.",
        "conclusion": "Ryatt saves money."
      },
      {
        "facts": [
          "Ryatt saves money.",
          "Ryatt does not invest wisely."
        ],
        "rules": "If Ryatt saves money, then he either invests wisely or is a spender (or both).",
        "conclusion": "Ryatt is a spender."
      },
      {
        "facts": [
          "Ryatt is a risk-taker."
        ],
        "rules": "Ryatt is either a risk-taker or a planner, but not both, reflecting two different approaches to managing finances.",
        "conclusion": "Ryatt is not a planner."
      },
      {
        "facts": [
          "Ryatt is not a planner.",
          "Ryatt is a spender."
        ],
        "rules": "If Ryatt is either a planner or a spender (but not both), then he is financially stable.",
        "conclusion": "Ryatt is financially stable."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "responsible(Ryatt)"
        ],
        "rules": "∀x (responsible(x) → (saves_money(x) ∧ sets_goals(x)))",
        "conclusion": "saves_money(Ryatt)"
      },
      {
        "facts": [
          "saves_money(Ryatt)",
          "¬invests_wisely(Ryatt)"
        ],
        "rules": "saves_money(Ryatt) → (invests_wisely(Ryatt) ∨ spender(Ryatt))",
        "conclusion": "spender(Ryatt)"
      },
      {
        "facts": [
          "risk_taker(Ryatt)"
        ],
        "rules": "risk_taker(Ryatt) ⊕ planner(Ryatt)",
        "conclusion": "¬planner(Ryatt)"
      },
      {
        "facts": [
          "¬planner(Ryatt)",
          "spender(Ryatt)"
        ],
        "rules": "(planner(Ryatt) ⊕ spender(Ryatt)) → financially_stable(Ryatt)",
        "conclusion": "financially_stable(Ryatt)"
      }
    ],
    "conclusion": "Ryatt is financially stable.",
    "conclusion_fol": "financially_stable(Ryatt)",
    "answer": "True",
    "context": [
      "Ryatt is responsible.",
      "All responsible people save money and set goals.",
      "Ryatt does not invest wisely.",
      "If Ryatt saves money, then he either invests wisely or is a spender (or both).",
      "Ryatt is a risk-taker.",
      "Ryatt is either a risk-taker or a planner, but not both, reflecting two different approaches to managing finances.",
      "If Ryatt is either a planner or a spender (but not both), then he is financially stable."
    ],
    "context_fol": [
      "responsible(Ryatt)",
      "∀x (responsible(x) → (saves_money(x) ∧ sets_goals(x)))",
      "¬invests_wisely(Ryatt)",
      "saves_money(Ryatt) → (invests_wisely(Ryatt) ∨ spender(Ryatt))",
      "risk_taker(Ryatt)",
      "risk_taker(Ryatt) ⊕ planner(Ryatt)",
      "(planner(Ryatt) ⊕ spender(Ryatt)) → financially_stable(Ryatt)"
    ],
    "background_story": "Ryatt was a meticulous financial advisor who believed in the importance of regular portfolio reviews. Twice a year, semiannually, he would meet with his clients to assess their investments and make adjustments as needed. His attention to detail and commitment to his clients' financial well-being earned him a reputation as one of the most reliable advisors in the city. Every January and July, Ryatt would send out reminders to his clients, preparing them for their semiannual reviews. His consistency and thoroughness helped his clients achieve their long-term financial goals, and they appreciated the peace of mind that came with knowing their investments were being carefully managed on a regular basis.",
    "name": "Ryatt",
    "keyword": "semiannually",
    "subject_category": "person"
  },
  {
    "facts": [
      "Jade is a researcher.",
      "Dr. Jade Hernandez does not make breakthroughs.",
      "Jade attends conferences.",
      "Jade studies diseases.",
      "Jade develops vaccines."
    ],
    "facts_fol": [
      "is_researcher(Jade)",
      "¬make_breakthroughs(Jade)",
      "attend_conferences(Jade)",
      "study_diseases(Jade)",
      "develop_vaccines(Jade)"
    ],
    "rules": [
      "If Dr. Jade Hernandez is a researcher, then she either publishes papers or is dedicated, but not both.",
      "Dr. Jade Hernandez either attends conferences or publishes papers, but not both.",
      "If Dr. Jade Hernandez studies diseases, then she can either save lives or develop vaccines, but not both."
    ],
    "rules_fol": [
      "is_researcher(Jade) → (publish_papers(Jade) ⊕ dedicated(Jade))",
      "attend_conferences(Jade) ⊕ publish_papers(Jade)",
      "study_diseases(Jade) → (save_lives(Jade) ⊕ develop_vaccines(Jade))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Any scientist who works tirelessly or faces challenges is dedicated.",
      "For all scientists, if they read literature and conduct experiments, then they publish papers.",
      "All scientists who find cures will save lives."
    ],
    "distracting_rules_fol": [
      "∀x ((work_tirelessly(x) ∨ face_challenges(x)) → dedicated(x))",
      "∀x ((reads_literature(x) ∧ conducts_experiments(x)) → publish_papers(x))",
      "∀x (find_cures(x) → save_lives(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Jade studies diseases.",
          "Jade develops vaccines."
        ],
        "rules": "If Dr. Jade Hernandez studies diseases, then she can either save lives or develop vaccines, but not both.",
        "conclusion": "Dr. Jade Hernandez does not save lives."
      },
      {
        "facts": [
          "Jade attends conferences."
        ],
        "rules": "Dr. Jade Hernandez either attends conferences or publishes papers, but not both.",
        "conclusion": "Jade does not publish papers."
      },
      {
        "facts": [
          "Jade is a researcher.",
          "Jade does not publish papers."
        ],
        "rules": "If Dr. Jade Hernandez is a researcher, then she either publishes papers or is dedicated, but not both.",
        "conclusion": "Dr. Jade Hernandez is dedicated."
      },
      {
        "facts": [
          "Dr. Jade Hernandez is dedicated.",
          "Dr. Jade Hernandez does not make breakthroughs.",
          "Dr. Jade Hernandez does not save lives."
        ],
        "rules": null,
        "conclusion": "If Dr. Jade Hernandez is dedicated, then she can either make breakthroughs or save lives, but not both."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "study_diseases(Jade)",
          "develop_vaccines(Jade)"
        ],
        "rules": "study_diseases(Jade) → (save_lives(Jade) ⊕ develop_vaccines(Jade))",
        "conclusion": "¬save_lives(Jade)"
      },
      {
        "facts": [
          "attend_conferences(Jade)"
        ],
        "rules": "attend_conferences(Jade) ⊕ publish_papers(Jade)",
        "conclusion": "¬publish_papers(Jade)"
      },
      {
        "facts": [
          "is_researcher(Jade)",
          "¬publish_papers(Jade)"
        ],
        "rules": "is_researcher(Jade) → (publish_papers(Jade) ⊕ dedicated(Jade))",
        "conclusion": "dedicated(Jade)"
      },
      {
        "facts": [
          "dedicated(Jade)",
          "¬make_breakthroughs(Jade)",
          "¬save_lives(Jade)"
        ],
        "rules": null,
        "conclusion": "dedicated(Jade) → (make_breakthroughs(Jade) ⊕ save_lives(Jade))"
      }
    ],
    "conclusion": "If Dr. Jade Hernandez is dedicated, then she can either make breakthroughs or save lives, but not both.",
    "conclusion_fol": "dedicated(Jade) → (make_breakthroughs(Jade) ⊕ save_lives(Jade))",
    "answer": "False",
    "context": [
      "Jade studies diseases.",
      "Jade develops vaccines.",
      "If Dr. Jade Hernandez studies diseases, then she can either save lives or develop vaccines, but not both.",
      "Jade attends conferences.",
      "Dr. Jade Hernandez either attends conferences or publishes papers, but not both.",
      "Jade is a researcher.",
      "If Dr. Jade Hernandez is a researcher, then she either publishes papers or is dedicated, but not both.",
      "Dr. Jade Hernandez does not make breakthroughs."
    ],
    "context_fol": [
      "study_diseases(Jade)",
      "develop_vaccines(Jade)",
      "study_diseases(Jade) → (save_lives(Jade) ⊕ develop_vaccines(Jade))",
      "attend_conferences(Jade)",
      "attend_conferences(Jade) ⊕ publish_papers(Jade)",
      "is_researcher(Jade)",
      "is_researcher(Jade) → (publish_papers(Jade) ⊕ dedicated(Jade))",
      "¬make_breakthroughs(Jade)"
    ],
    "background_story": "Dr. Jade Hernandez was a renowned virologist specializing in the study of arenaviruses, a group of viruses that cause severe hemorrhagic fevers. Her work took her to remote areas of South America, where she conducted field research to understand the transmission and behavior of these deadly pathogens. Jade's dedication to her work was driven by the loss of her colleague to an arenavirus outbreak early in her career. She spent years developing a vaccine and was on the brink of a breakthrough when she made a crucial discovery about the viral replication mechanism. Jade's findings paved the way for the development of effective treatments and saved countless lives. Her tireless efforts against arenaviruses earned her international recognition and a place among the leading experts in her field.",
    "name": "Jade",
    "keyword": "arenavirus",
    "subject_category": "scientist"
  },
  {
    "facts": [
      "Munchkin does not discern trends.",
      "Munchkin is curious.",
      "Munchkin loves data."
    ],
    "facts_fol": [
      "¬discerns_trends(Munchkin)",
      "curious(Munchkin)",
      "loves_data(Munchkin)"
    ],
    "rules": [
      "If Munchkin is either analytical or intuitive (but not both), then she is perceptive.",
      "Munchkin is either curious or analytical, but not both.",
      "If Munchkin either senses patterns or discerns trends (but not both), then she is intuitive.",
      "If Munchkin loves data, then she can sense patterns."
    ],
    "rules_fol": [
      "(analytical(Munchkin) ⊕ intuitive(Munchkin)) → perceptive(Munchkin)",
      "curious(Munchkin) ⊕ analytical(Munchkin)",
      "(senses_patterns(Munchkin) ⊕ discerns_trends(Munchkin)) → intuitive(Munchkin)",
      "loves_data(Munchkin) → senses_patterns(Munchkin)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Munchkin is smart, then she is both analytical and logical.",
      "All clever cats are intuitive and agile.",
      "If Munchkin observes details, then she senses patterns and predicts outcomes."
    ],
    "distracting_rules_fol": [
      "smart(Munchkin) → (analytical(Munchkin) ∧ logical(Munchkin))",
      "∀x (clever(x) → (intuitive(x) ∧ agile(x)))",
      "observes_details(Munchkin) → (senses_patterns(Munchkin) ∧ predicts_outcomes(Munchkin))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Munchkin loves data."
        ],
        "rules": "If Munchkin loves data, then she can sense patterns.",
        "conclusion": "Munchkin senses patterns."
      },
      {
        "facts": [
          "Munchkin senses patterns.",
          "Munchkin does not discern trends."
        ],
        "rules": "If Munchkin either senses patterns or discerns trends (but not both), then she is intuitive.",
        "conclusion": "Munchkin is intuitive."
      },
      {
        "facts": [
          "Munchkin is curious."
        ],
        "rules": "Munchkin is either curious or analytical, but not both.",
        "conclusion": "Munchkin is not analytical."
      },
      {
        "facts": [
          "Munchkin is not analytical.",
          "Munchkin is intuitive."
        ],
        "rules": "If Munchkin is either analytical or intuitive (but not both), then she is perceptive.",
        "conclusion": "Munchkin is not perceptive."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "loves_data(Munchkin)"
        ],
        "rules": "loves_data(Munchkin) → senses_patterns(Munchkin)",
        "conclusion": "senses_patterns(Munchkin)"
      },
      {
        "facts": [
          "senses_patterns(Munchkin)",
          "¬discerns_trends(Munchkin)"
        ],
        "rules": "(senses_patterns(Munchkin) ⊕ discerns_trends(Munchkin)) → intuitive(Munchkin)",
        "conclusion": "intuitive(Munchkin)"
      },
      {
        "facts": [
          "curious(Munchkin)"
        ],
        "rules": "curious(Munchkin) ⊕ analytical(Munchkin)",
        "conclusion": "¬analytical(Munchkin)"
      },
      {
        "facts": [
          "¬analytical(Munchkin)",
          "intuitive(Munchkin)"
        ],
        "rules": "(analytical(Munchkin) ⊕ intuitive(Munchkin)) → perceptive(Munchkin)",
        "conclusion": "¬perceptive(Munchkin)"
      }
    ],
    "conclusion": "Munchkin is not perceptive.",
    "conclusion_fol": "¬perceptive(Munchkin)",
    "answer": "False",
    "context": [
      "Munchkin loves data.",
      "If Munchkin loves data, then she can sense patterns.",
      "Munchkin does not discern trends.",
      "If Munchkin either senses patterns or discerns trends (but not both), then she is intuitive.",
      "Munchkin is curious.",
      "Munchkin is either curious or analytical, but not both.",
      "If Munchkin is either analytical or intuitive (but not both), then she is perceptive."
    ],
    "context_fol": [
      "loves_data(Munchkin)",
      "loves_data(Munchkin) → senses_patterns(Munchkin)",
      "¬discerns_trends(Munchkin)",
      "(senses_patterns(Munchkin) ⊕ discerns_trends(Munchkin)) → intuitive(Munchkin)",
      "curious(Munchkin)",
      "curious(Munchkin) ⊕ analytical(Munchkin)",
      "(analytical(Munchkin) ⊕ intuitive(Munchkin)) → perceptive(Munchkin)"
    ],
    "background_story": "Munchkin, a peculiar cat with a penchant for numbers, lived with her owner, a renowned psephologist. As her owner analyzed election data and voter trends, Munchkin would sit beside her, watching with curious eyes. She developed an uncanny ability to sense patterns in the numbers, often pawing at significant statistics. Her owner began to notice Munchkin's knack for identifying trends and started incorporating her observations into research. Together, they made groundbreaking discoveries in the field of psephology, with Munchkin becoming an unofficial, yet integral, part of the team. Her unique feline perspective brought a new dimension to the analysis of electoral behavior, earning her the title of the world's first, and only, feline psephologist.",
    "name": "Munchkin",
    "keyword": "psephologist",
    "subject_category": "cat"
  },
  {
    "facts": [
      "Esteban does not overcome obstacles.",
      "Esteban faces challenges.",
      "Esteban does not study nature.",
      "Esteban does not create gear."
    ],
    "facts_fol": [
      "¬overcome_obstacles(Esteban)",
      "face_challenges(Esteban)",
      "¬study_nature(Esteban)",
      "¬create_gear(Esteban)"
    ],
    "rules": [
      "If Esteban braves extreme conditions, then he develops innovative solutions and pushes human boundaries.",
      "If Esteban either faces challenges or overcomes obstacles (but not both), then he braves extreme conditions.",
      "If Esteban either studies nature or creates gear (but not both), then he is able to develop innovative solutions."
    ],
    "rules_fol": [
      "brave_extreme_conditions(Esteban) → (develop_innovative_solutions(Esteban) ∧ push_human_boundaries(Esteban))",
      "(face_challenges(Esteban) ⊕ overcome_obstacles(Esteban)) → brave_extreme_conditions(Esteban)",
      "(study_nature(Esteban) ⊕ create_gear(Esteban)) → develop_innovative_solutions(Esteban)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Any human who can withstand cold or adapt quickly can brave extreme conditions.",
      "Esteban explores the world or develops innovative solutions."
    ],
    "distracting_rules_fol": [
      "∀x ((withstand_cold(x) ∨ adapt_quickly(x)) → brave_extreme_conditions(x))",
      "explore_world(Esteban) ∨ develop_innovative_solutions(Esteban)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Esteban does not study nature.",
          "Esteban does not create gear."
        ],
        "rules": "If Esteban either studies nature or creates gear (but not both), then he is able to develop innovative solutions.",
        "conclusion": null
      },
      {
        "facts": [
          "Esteban faces challenges.",
          "Esteban does not overcome obstacles."
        ],
        "rules": "If Esteban either faces challenges or overcomes obstacles (but not both), then he braves extreme conditions.",
        "conclusion": "Esteban braves extreme conditions."
      },
      {
        "facts": [
          "Esteban braves extreme conditions."
        ],
        "rules": "If Esteban braves extreme conditions, then he develops innovative solutions and pushes human boundaries.",
        "conclusion": "Esteban does not push human boundaries."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬study_nature(Esteban)",
          "¬create_gear(Esteban)"
        ],
        "rules": "(study_nature(Esteban) ⊕ create_gear(Esteban)) → develop_innovative_solutions(Esteban)",
        "conclusion": null
      },
      {
        "facts": [
          "face_challenges(Esteban)",
          "¬overcome_obstacles(Esteban)"
        ],
        "rules": "(face_challenges(Esteban) ⊕ overcome_obstacles(Esteban)) → brave_extreme_conditions(Esteban)",
        "conclusion": "brave_extreme_conditions(Esteban)"
      },
      {
        "facts": [
          "brave_extreme_conditions(Esteban)"
        ],
        "rules": "brave_extreme_conditions(Esteban) → (develop_innovative_solutions(Esteban) ∧ push_human_boundaries(Esteban))",
        "conclusion": "¬push_human_boundaries(Esteban)"
      }
    ],
    "conclusion": "Esteban does not push human boundaries.",
    "conclusion_fol": "¬push_human_boundaries(Esteban)",
    "answer": "False",
    "context": [
      "Esteban does not study nature.",
      "Esteban does not create gear.",
      "If Esteban either studies nature or creates gear (but not both), then he is able to develop innovative solutions.",
      "Esteban faces challenges.",
      "Esteban does not overcome obstacles.",
      "If Esteban either faces challenges or overcomes obstacles (but not both), then he braves extreme conditions.",
      "If Esteban braves extreme conditions, then he develops innovative solutions and pushes human boundaries."
    ],
    "context_fol": [
      "¬study_nature(Esteban)",
      "¬create_gear(Esteban)",
      "(study_nature(Esteban) ⊕ create_gear(Esteban)) → develop_innovative_solutions(Esteban)",
      "face_challenges(Esteban)",
      "¬overcome_obstacles(Esteban)",
      "(face_challenges(Esteban) ⊕ overcome_obstacles(Esteban)) → brave_extreme_conditions(Esteban)",
      "brave_extreme_conditions(Esteban) → (develop_innovative_solutions(Esteban) ∧ push_human_boundaries(Esteban))"
    ],
    "background_story": "Esteban was a renowned explorer who had spent his life navigating the harshest climates on Earth. His latest expedition took him to the frozen tundras of Antarctica, where he braved algid temperatures that would be unbearable for most. The icy landscape, with its biting winds and frozen peaks, was a challenge Esteban welcomed with open arms. He had prepared for this moment his entire life, studying the effects of extreme cold on the human body and developing innovative gear to withstand the algid conditions. As he trudged through the snow, Esteban felt alive, his spirit unbroken by the freezing temperatures. His journey was not just about reaching the pole, but about pushing the boundaries of human endurance in the face of nature's harshest elements.",
    "name": "Esteban",
    "keyword": "algid",
    "subject_category": "human"
  },
  {
    "facts": [
      "Aleah grows exotic species.",
      "Aleah plants flowers.",
      "Aleah does not nurture herbs.",
      "Aleah owns a greenhouse."
    ],
    "facts_fol": [
      "grow_exotics(Aleah)",
      "plants_flowers(Aleah)",
      "¬nurture_herbs(Aleah)",
      "owns_greenhouse(Aleah)"
    ],
    "rules": [
      "If Aleah can cultivate rare plants, then she can either attract wildlife or earn recognition, but not both.",
      "If Aleah plants flowers and tends her garden, then she attracts wildlife.",
      "If Aleah either grows exotic species or nurtures herbs (but not both), then she can cultivate rare plants.",
      "Any gardener who prunes regularly or waters daily tends to their garden.",
      "If Aleah owns a greenhouse, then she waters daily."
    ],
    "rules_fol": [
      "cultivate_rare_plants(Aleah) → (attract_wildlife(Aleah) ⊕ earn_recognition(Aleah))",
      "(plants_flowers(Aleah) ∧ tends_garden(Aleah)) → attract_wildlife(Aleah)",
      "(grow_exotics(Aleah) ⊕ nurture_herbs(Aleah)) → cultivate_rare_plants(Aleah)",
      "∀x ((prunes_regularly(x) ∨ waters_daily(x)) → tends_garden(x))",
      "owns_greenhouse(Aleah) → waters_daily(Aleah)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If a gardener creates a habitat and uses native species, then they can attract wildlife.",
      "If Aleah creates a haven, then she either cultivates rare plants or develops a unique technique.",
      "All gardeners who love nature tend to their gardens.",
      "If Aleah checks moisture or uses irrigation, then she will water daily."
    ],
    "distracting_rules_fol": [
      "∀x ((creates_habitat(x) ∧ uses_native_species(x)) → attract_wildlife(x))",
      "create_haven(Aleah) → (cultivate_rare_plants(Aleah) ∨ develop_technique(Aleah))",
      "∀x (loves_nature(x) → tends_garden(x))",
      "(checks_moisture(Aleah) ∨ uses_irrigation(Aleah)) → waters_daily(Aleah)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Aleah owns a greenhouse."
        ],
        "rules": "If Aleah owns a greenhouse, then she waters daily.",
        "conclusion": "Aleah waters daily."
      },
      {
        "facts": [
          "Aleah waters daily."
        ],
        "rules": "Any gardener who prunes regularly or waters daily tends to their garden.",
        "conclusion": "Aleah tends her garden."
      },
      {
        "facts": [
          "Aleah grows exotic species.",
          "Aleah does not nurture herbs."
        ],
        "rules": "If Aleah either grows exotic species or nurtures herbs (but not both), then she can cultivate rare plants.",
        "conclusion": "Aleah can cultivate rare plants."
      },
      {
        "facts": [
          "Aleah plants flowers.",
          "Aleah tends her garden."
        ],
        "rules": "If Aleah plants flowers and tends her garden, then she attracts wildlife.",
        "conclusion": "Aleah attracts wildlife."
      },
      {
        "facts": [
          "Aleah can cultivate rare plants.",
          "Aleah attracts wildlife."
        ],
        "rules": "If Aleah can cultivate rare plants, then she can either attract wildlife or earn recognition, but not both.",
        "conclusion": "Aleah earns recognition."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "owns_greenhouse(Aleah)"
        ],
        "rules": "owns_greenhouse(Aleah) → waters_daily(Aleah)",
        "conclusion": "waters_daily(Aleah)"
      },
      {
        "facts": [
          "waters_daily(Aleah)"
        ],
        "rules": "∀x ((prunes_regularly(x) ∨ waters_daily(x)) → tends_garden(x))",
        "conclusion": "tends_garden(Aleah)"
      },
      {
        "facts": [
          "grow_exotics(Aleah)",
          "¬nurture_herbs(Aleah)"
        ],
        "rules": "(grow_exotics(Aleah) ⊕ nurture_herbs(Aleah)) → cultivate_rare_plants(Aleah)",
        "conclusion": "cultivate_rare_plants(Aleah)"
      },
      {
        "facts": [
          "plants_flowers(Aleah)",
          "tends_garden(Aleah)"
        ],
        "rules": "(plants_flowers(Aleah) ∧ tends_garden(Aleah)) → attract_wildlife(Aleah)",
        "conclusion": "attract_wildlife(Aleah)"
      },
      {
        "facts": [
          "cultivate_rare_plants(Aleah)",
          "attract_wildlife(Aleah)"
        ],
        "rules": "cultivate_rare_plants(Aleah) → (attract_wildlife(Aleah) ⊕ earn_recognition(Aleah))",
        "conclusion": "earn_recognition(Aleah)"
      }
    ],
    "conclusion": "Aleah earns recognition.",
    "conclusion_fol": "earn_recognition(Aleah)",
    "answer": "False",
    "context": [
      "Aleah owns a greenhouse.",
      "If Aleah owns a greenhouse, then she waters daily.",
      "Any gardener who prunes regularly or waters daily tends to their garden.",
      "Aleah grows exotic species.",
      "Aleah does not nurture herbs.",
      "If Aleah either grows exotic species or nurtures herbs (but not both), then she can cultivate rare plants.",
      "Aleah plants flowers.",
      "If Aleah plants flowers and tends her garden, then she attracts wildlife.",
      "If Aleah can cultivate rare plants, then she can either attract wildlife or earn recognition, but not both."
    ],
    "context_fol": [
      "owns_greenhouse(Aleah)",
      "owns_greenhouse(Aleah) → waters_daily(Aleah)",
      "∀x ((prunes_regularly(x) ∨ waters_daily(x)) → tends_garden(x))",
      "grow_exotics(Aleah)",
      "¬nurture_herbs(Aleah)",
      "(grow_exotics(Aleah) ⊕ nurture_herbs(Aleah)) → cultivate_rare_plants(Aleah)",
      "plants_flowers(Aleah)",
      "(plants_flowers(Aleah) ∧ tends_garden(Aleah)) → attract_wildlife(Aleah)",
      "cultivate_rare_plants(Aleah) → (attract_wildlife(Aleah) ⊕ earn_recognition(Aleah))"
    ],
    "background_story": "Aleah was a passionate gardener with a specialization in cultivating rare and exotic plants. Her fascination with the apium, or wild celery, led her to create a serene and breathtaking garden filled with an array of vegetables and herbs. The apium, with its delicate white flowers and lacy foliage, was the crown jewel of her collection. Aleah spent countless hours researching and experimenting with different methods to propagate the apium, eventually developing a unique technique that allowed her to grow it in abundance. Her garden became a haven for local bees and butterflies, and the apium's sweet fragrance wafted through the air, attracting visitors from all over. Aleah's love for the apium and her dedication to gardening earned her recognition as one of the leading horticulturists in the region.",
    "name": "Aleah",
    "keyword": "apium",
    "subject_category": "gardener"
  },
  {
    "facts": [
      "Guinevere is not a master of magic.",
      "Guinevere controls elements.",
      "Guinevere does not cast shadows."
    ],
    "facts_fol": [
      "¬master_of_magic(Guinevere)",
      "controls_elements(Guinevere)",
      "¬casts_shadows(Guinevere)"
    ],
    "rules": [
      "For all mythical beings, if someone is a master of magic, then they can either cast powerful spells or manipulate reality (or both).",
      "Any mythical being that weaves illusions or bends time can manipulate reality.",
      "If Guinevere controls elements, then she either casts shadows or bends time."
    ],
    "rules_fol": [
      "∀x (master_of_magic(x) → (cast_powerful_spells(x) ∨ manipulate_reality(x)))",
      "∀x ((weaves_illusions(x) ∨ bends_time(x)) → manipulate_reality(x))",
      "controls_elements(Guinevere) → (casts_shadows(Guinevere) ∨ bends_time(Guinevere))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Guinevere either reads auras or sees portents (but not both), then she can manipulate reality.",
      "If Guinevere is mystic, then she can bend time and see the future."
    ],
    "distracting_rules_fol": [
      "(reads_auras(Guinevere) ⊕ sees_portents(Guinevere)) → manipulate_reality(Guinevere)",
      "mystic(Guinevere) → (bends_time(Guinevere) ∧ sees_future(Guinevere))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Guinevere controls elements.",
          "Guinevere does not cast shadows."
        ],
        "rules": "If Guinevere controls elements, then she either casts shadows or bends time.",
        "conclusion": "Guinevere bends time."
      },
      {
        "facts": [
          "Guinevere bends time."
        ],
        "rules": "Any mythical being that weaves illusions or bends time can manipulate reality.",
        "conclusion": "Guinevere can manipulate reality."
      },
      {
        "facts": [
          "Guinevere is not a master of magic.",
          "Guinevere can manipulate reality."
        ],
        "rules": "For all mythical beings, if someone is a master of magic, then they can either cast powerful spells or manipulate reality (or both).",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "controls_elements(Guinevere)",
          "¬casts_shadows(Guinevere)"
        ],
        "rules": "controls_elements(Guinevere) → (casts_shadows(Guinevere) ∨ bends_time(Guinevere))",
        "conclusion": "bends_time(Guinevere)"
      },
      {
        "facts": [
          "bends_time(Guinevere)"
        ],
        "rules": "∀x ((weaves_illusions(x) ∨ bends_time(x)) → manipulate_reality(x))",
        "conclusion": "manipulate_reality(Guinevere)"
      },
      {
        "facts": [
          "¬master_of_magic(Guinevere)",
          "manipulate_reality(Guinevere)"
        ],
        "rules": "∀x (master_of_magic(x) → (cast_powerful_spells(x) ∨ manipulate_reality(x)))",
        "conclusion": null
      }
    ],
    "conclusion": "Guinevere cannot cast powerful spells.",
    "conclusion_fol": "¬cast_powerful_spells(Guinevere)",
    "answer": "Uncertain",
    "context": [
      "Guinevere controls elements.",
      "Guinevere does not cast shadows.",
      "If Guinevere controls elements, then she either casts shadows or bends time.",
      "Any mythical being that weaves illusions or bends time can manipulate reality.",
      "Guinevere is not a master of magic.",
      "For all mythical beings, if someone is a master of magic, then they can either cast powerful spells or manipulate reality (or both)."
    ],
    "context_fol": [
      "controls_elements(Guinevere)",
      "¬casts_shadows(Guinevere)",
      "controls_elements(Guinevere) → (casts_shadows(Guinevere) ∨ bends_time(Guinevere))",
      "∀x ((weaves_illusions(x) ∨ bends_time(x)) → manipulate_reality(x))",
      "¬master_of_magic(Guinevere)",
      "∀x (master_of_magic(x) → (cast_powerful_spells(x) ∨ manipulate_reality(x)))"
    ],
    "background_story": "Guinevere, a mystical sorceress, delved deep into the arcane arts, specializing in the obscure Sabellian magic. This ancient, forgotten craft allowed her to manipulate the very essence of reality, bending time and space to her will. With her mastery of Sabellian incantations, Guinevere could weave powerful illusions, making it impossible for her enemies to discern reality from fantasy. Her abilities, however, came at a great personal cost, slowly erasing her sense of identity with each use. As she walked the thin line between reality and illusion, Guinevere became a legend, a phantomlike figure whispered about in awe and fear. Her ultimate goal was to unlock the secrets of the Sabellian arts, hoping to find a way to reclaim her fading sense of self.",
    "name": "Guinevere",
    "keyword": "sabellian",
    "subject_category": "mythical"
  },
  {
    "facts": [
      "Blaire is imaginative.",
      "Blaire is talented.",
      "Blaire is not dedicated.",
      "Blaire does not have passion.",
      "Blaire does not have skilled hands."
    ],
    "facts_fol": [
      "imaginitive(Blaire)",
      "talented(Blaire)",
      "¬dedicated(Blaire)",
      "¬has_passion(Blaire)",
      "¬skilled_hands(Blaire)"
    ],
    "rules": [
      "If Blaire is creative, then she is either successful or inspirational, but not both.",
      "If Blaire is imaginative, then she is inspirational and makes art.",
      "If Blaire is talented, then she is either dedicated or creative, but not both.",
      "If a person has passion and skilled hands, then they can make art."
    ],
    "rules_fol": [
      "creative(Blaire) → (successful(Blaire) ⊕ inspirational(Blaire))",
      "imaginitive(Blaire) → (inspirational(Blaire) ∧ makes_art(Blaire))",
      "talented(Blaire) → (dedicated(Blaire) ⊕ creative(Blaire))",
      "∀x ((has_passion(x) ∧ skilled_hands(x)) → makes_art(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Blaire crafts bomblets, then she is either famous or inspirational, but not both.",
      "If Blaire thinks outside the box, then she is creative and brings joy to others.",
      "If Blaire is visionary, then she is either an innovator or a maker of art, but not both."
    ],
    "distracting_rules_fol": [
      "crafts_bomblets(Blaire) → (is_famous(Blaire) ⊕ inspirational(Blaire))",
      "think_outside(Blaire) → (creative(Blaire) ∧ bring_joy(Blaire))",
      "is_visionary(Blaire) → (is_innovator(Blaire) ⊕ makes_art(Blaire))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Blaire does not have passion.",
          "Blaire does not have skilled hands."
        ],
        "rules": "If a person has passion and skilled hands, then they can make art.",
        "conclusion": null
      },
      {
        "facts": [
          "Blaire is talented.",
          "Blaire is not dedicated."
        ],
        "rules": "If Blaire is talented, then she is either dedicated or creative, but not both.",
        "conclusion": "Blaire is creative."
      },
      {
        "facts": [
          "Blaire is imaginative."
        ],
        "rules": "If Blaire is imaginative, then she is inspirational and makes art.",
        "conclusion": "Blaire is inspirational."
      },
      {
        "facts": [
          "Blaire is creative.",
          "Blaire is inspirational."
        ],
        "rules": "If Blaire is creative, then she is either successful or inspirational, but not both.",
        "conclusion": "Blaire is successful."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬has_passion(Blaire)",
          "¬skilled_hands(Blaire)"
        ],
        "rules": "∀x ((has_passion(x) ∧ skilled_hands(x)) → makes_art(x))",
        "conclusion": null
      },
      {
        "facts": [
          "talented(Blaire)",
          "¬dedicated(Blaire)"
        ],
        "rules": "talented(Blaire) → (dedicated(Blaire) ⊕ creative(Blaire))",
        "conclusion": "creative(Blaire)"
      },
      {
        "facts": [
          "imaginitive(Blaire)"
        ],
        "rules": "imaginitive(Blaire) → (inspirational(Blaire) ∧ makes_art(Blaire))",
        "conclusion": "inspirational(Blaire)"
      },
      {
        "facts": [
          "creative(Blaire)",
          "inspirational(Blaire)"
        ],
        "rules": "creative(Blaire) → (successful(Blaire) ⊕ inspirational(Blaire))",
        "conclusion": "successful(Blaire)"
      }
    ],
    "conclusion": "Blaire is successful.",
    "conclusion_fol": "successful(Blaire)",
    "answer": "False",
    "context": [
      "Blaire does not have passion.",
      "Blaire does not have skilled hands.",
      "If a person has passion and skilled hands, then they can make art.",
      "Blaire is talented.",
      "Blaire is not dedicated.",
      "If Blaire is talented, then she is either dedicated or creative, but not both.",
      "Blaire is imaginative.",
      "If Blaire is imaginative, then she is inspirational and makes art.",
      "If Blaire is creative, then she is either successful or inspirational, but not both."
    ],
    "context_fol": [
      "¬has_passion(Blaire)",
      "¬skilled_hands(Blaire)",
      "∀x ((has_passion(x) ∧ skilled_hands(x)) → makes_art(x))",
      "talented(Blaire)",
      "¬dedicated(Blaire)",
      "talented(Blaire) → (dedicated(Blaire) ⊕ creative(Blaire))",
      "imaginitive(Blaire)",
      "imaginitive(Blaire) → (inspirational(Blaire) ∧ makes_art(Blaire))",
      "creative(Blaire) → (successful(Blaire) ⊕ inspirational(Blaire))"
    ],
    "background_story": "Blaire was a quirky and charming individual with a penchant for crafting unique accessories. Her claim to fame was creating intricate, handmade bomblets - small, decorative balls filled with colorful, swirling patterns. These bomblets became a sensation at local artisan markets, with people clamoring to get their hands on one. Blaire's bomblets were more than just decorative trinkets; each one was imbued with a personal touch and a story. As her craftsmanship gained recognition, Blaire's small workshop turned into a thriving business, with her bomblets being sought after by collectors and enthusiasts worldwide. Her passion for creating these tiny, beautiful orbs brought joy to countless people, making Blaire's life a testament to the power of turning a simple idea into something extraordinary.",
    "name": "Blaire",
    "keyword": "bomblet",
    "subject_category": "person"
  },
  {
    "facts": [
      "Skye has a rare condition.",
      "Skye enjoys stargazing.",
      "Skye admires stars.",
      "Skye values shadows.",
      "Skye tells stories."
    ],
    "facts_fol": [
      "has_rare_condition(Skye)",
      "enjoy_stargazing(Skye)",
      "admire_stars(Skye)",
      "value_shadows(Skye)",
      "tell_stories(Skye)"
    ],
    "rules": [
      "For all humans, if they are sensitive to sunlight or appreciate the night, then they can find beauty in darkness.",
      "If Skye enjoys stargazing, then she is either someone who loves astronomy or appreciates the night, but not both.",
      "If Skye admires stars, then she either loves astronomy or captures moments.",
      "If Skye has a rare condition, then she is either sensitive to sunlight or values shadows, but not both.",
      "If Skye tells stories, then she does not capture moments, and if she captures moments, then she does not tell stories."
    ],
    "rules_fol": [
      "∀x ((sensitive_to_sunlight(x) ∨ appreciate_night(x)) → find_beauty_in_darkness(x))",
      "enjoy_stargazing(Skye) → (love_astronomy(Skye) ⊕ appreciate_night(Skye))",
      "admire_stars(Skye) → (love_astronomy(Skye) ∨ capture_moments(Skye))",
      "has_rare_condition(Skye) → (sensitive_to_sunlight(Skye) ⊕ value_shadows(Skye))",
      "tell_stories(Skye) ⊕ capture_moments(Skye)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Skye likes twilight or appreciates the night.",
      "If Skye takes photos, then she either studies space or loves astronomy.",
      "If Skye lives at night, then she avoids daytime and is sensitive to sunlight.",
      "Everyone who pursues their passion either shares their experiences or captures moments."
    ],
    "distracting_rules_fol": [
      "likes_twilight(Skye) ∨ appreciate_night(Skye)",
      "take_photos(Skye) → (study_space(Skye) ∨ love_astronomy(Skye))",
      "live_at_night(Skye) → (avoid_daytime(Skye) ∧ sensitive_to_sunlight(Skye))",
      "∀x (pursue_passion(x) → (share_experiences(x) ∨ capture_moments(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Skye tells stories."
        ],
        "rules": "If Skye tells stories, then she does not capture moments, and if she captures moments, then she does not tell stories.",
        "conclusion": "Skye does not capture moments."
      },
      {
        "facts": [
          "Skye has a rare condition.",
          "Skye values shadows."
        ],
        "rules": "If Skye has a rare condition, then she is either sensitive to sunlight or values shadows, but not both.",
        "conclusion": "Skye is not sensitive to sunlight."
      },
      {
        "facts": [
          "Skye admires stars.",
          "Skye does not capture moments."
        ],
        "rules": "If Skye admires stars, then she either loves astronomy or captures moments.",
        "conclusion": "Skye loves astronomy."
      },
      {
        "facts": [
          "Skye enjoys stargazing.",
          "Skye loves astronomy."
        ],
        "rules": "If Skye enjoys stargazing, then she is either someone who loves astronomy or appreciates the night, but not both.",
        "conclusion": "Skye does not appreciate the night."
      },
      {
        "facts": [
          "Skye is not sensitive to sunlight.",
          "Skye does not appreciate the night."
        ],
        "rules": "For all humans, if they are sensitive to sunlight or appreciate the night, then they can find beauty in darkness.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "tell_stories(Skye)"
        ],
        "rules": "tell_stories(Skye) ⊕ capture_moments(Skye)",
        "conclusion": "¬capture_moments(Skye)"
      },
      {
        "facts": [
          "has_rare_condition(Skye)",
          "value_shadows(Skye)"
        ],
        "rules": "has_rare_condition(Skye) → (sensitive_to_sunlight(Skye) ⊕ value_shadows(Skye))",
        "conclusion": "¬sensitive_to_sunlight(Skye)"
      },
      {
        "facts": [
          "admire_stars(Skye)",
          "¬capture_moments(Skye)"
        ],
        "rules": "admire_stars(Skye) → (love_astronomy(Skye) ∨ capture_moments(Skye))",
        "conclusion": "love_astronomy(Skye)"
      },
      {
        "facts": [
          "enjoy_stargazing(Skye)",
          "love_astronomy(Skye)"
        ],
        "rules": "enjoy_stargazing(Skye) → (love_astronomy(Skye) ⊕ appreciate_night(Skye))",
        "conclusion": "¬appreciate_night(Skye)"
      },
      {
        "facts": [
          "¬sensitive_to_sunlight(Skye)",
          "¬appreciate_night(Skye)"
        ],
        "rules": "∀x ((sensitive_to_sunlight(x) ∨ appreciate_night(x)) → find_beauty_in_darkness(x))",
        "conclusion": null
      }
    ],
    "conclusion": "Skye can find beauty in darkness.",
    "conclusion_fol": "find_beauty_in_darkness(Skye)",
    "answer": "Uncertain",
    "context": [
      "Skye tells stories.",
      "If Skye tells stories, then she does not capture moments, and if she captures moments, then she does not tell stories.",
      "Skye has a rare condition.",
      "Skye values shadows.",
      "If Skye has a rare condition, then she is either sensitive to sunlight or values shadows, but not both.",
      "Skye admires stars.",
      "If Skye admires stars, then she either loves astronomy or captures moments.",
      "Skye enjoys stargazing.",
      "If Skye enjoys stargazing, then she is either someone who loves astronomy or appreciates the night, but not both.",
      "For all humans, if they are sensitive to sunlight or appreciate the night, then they can find beauty in darkness."
    ],
    "context_fol": [
      "tell_stories(Skye)",
      "tell_stories(Skye) ⊕ capture_moments(Skye)",
      "has_rare_condition(Skye)",
      "value_shadows(Skye)",
      "has_rare_condition(Skye) → (sensitive_to_sunlight(Skye) ⊕ value_shadows(Skye))",
      "admire_stars(Skye)",
      "admire_stars(Skye) → (love_astronomy(Skye) ∨ capture_moments(Skye))",
      "enjoy_stargazing(Skye)",
      "enjoy_stargazing(Skye) → (love_astronomy(Skye) ⊕ appreciate_night(Skye))",
      "∀x ((sensitive_to_sunlight(x) ∨ appreciate_night(x)) → find_beauty_in_darkness(x))"
    ],
    "background_story": "Skye was a young woman who had always been sensitive to sunlight, forced to live a life in the shadows. She suffered from a rare genetic disorder called porphyria, which made her skin blister and burn at the slightest exposure to UV rays. Despite this challenge, Skye adapted, finding solace in the night and the beauty of the stars. She became an accomplished astrophotographer, capturing the celestial wonders that danced above. Skye's condition made her life unconventional, but it also gave her a unique perspective on the world, allowing her to see beauty in the darkness. She used her platform to raise awareness about porphyria, helping others who suffered from the condition to find hope and community.",
    "name": "Skye",
    "keyword": "porphyria",
    "subject_category": "human"
  },
  {
    "facts": [
      "India tries new recipes.",
      "India loves cooking.",
      "India is adventurous.",
      "India does not teach culinary arts.",
      "India has creativity.",
      "India does not write books."
    ],
    "facts_fol": [
      "try_new_recipes(India)",
      "love_cooking(India)",
      "adventurous(India)",
      "¬teach_culinary(India)",
      "has_creativity(India)",
      "¬write_books(India)"
    ],
    "rules": [
      "If India is adventurous, then she travels for flavors and tries new recipes.",
      "If India is passionate, then she either owns a restaurant or teaches culinary arts, but not both.",
      "If India has creativity, then she is either passionate or writes books, but not both."
    ],
    "rules_fol": [
      "adventurous(India) → (travel_for_flavors(India) ∧ try_new_recipes(India))",
      "is_passionate(India) → (own_a_restaurant(India) ⊕ teach_culinary(India))",
      "has_creativity(India) → (write_books(India) ⊕ is_passionate(India))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Anyone who enjoys food and explores cultures will travel to discover new flavors.",
      "If India either creates menus or manages kitchens (but not both), then she owns a restaurant.",
      "If India experiments with foods, then she is passionate and shares knowledge."
    ],
    "distracting_rules_fol": [
      "∀x ((enjoys_food(x) ∧ explores_cultures(x)) → travel_for_flavors(x))",
      "(create_menu(India) ⊕ manage_kitchen(India)) → own_a_restaurant(India)",
      "experiment_foods(India) → (is_passionate(India) ∧ share_knowledge(India))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "India has creativity.",
          "India does not write books."
        ],
        "rules": "If India has creativity, then she is either passionate or writes books, but not both.",
        "conclusion": "India is passionate."
      },
      {
        "facts": [
          "India is passionate.",
          "India does not teach culinary arts."
        ],
        "rules": "If India is passionate, then she either owns a restaurant or teaches culinary arts, but not both.",
        "conclusion": "India owns a restaurant."
      },
      {
        "facts": [
          "India is adventurous.",
          "India tries new recipes."
        ],
        "rules": "If India is adventurous, then she travels for flavors and tries new recipes.",
        "conclusion": "India travels to discover new flavors."
      },
      {
        "facts": [
          "India loves cooking.",
          "India travels to discover new flavors.",
          "India owns a restaurant."
        ],
        "rules": null,
        "conclusion": "India loves cooking and either travels to discover new flavors or owns a restaurant (or both)."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "has_creativity(India)",
          "¬write_books(India)"
        ],
        "rules": "has_creativity(India) → (write_books(India) ⊕ is_passionate(India))",
        "conclusion": "is_passionate(India)"
      },
      {
        "facts": [
          "is_passionate(India)",
          "¬teach_culinary(India)"
        ],
        "rules": "is_passionate(India) → (own_a_restaurant(India) ⊕ teach_culinary(India))",
        "conclusion": "own_a_restaurant(India)"
      },
      {
        "facts": [
          "adventurous(India)",
          "try_new_recipes(India)"
        ],
        "rules": "adventurous(India) → (travel_for_flavors(India) ∧ try_new_recipes(India))",
        "conclusion": "travel_for_flavors(India)"
      },
      {
        "facts": [
          "love_cooking(India)",
          "travel_for_flavors(India)",
          "own_a_restaurant(India)"
        ],
        "rules": null,
        "conclusion": "love_cooking(India) ∧ (travel_for_flavors(India) ∨ own_a_restaurant(India))"
      }
    ],
    "conclusion": "India loves cooking and either travels to discover new flavors or owns a restaurant (or both).",
    "conclusion_fol": "love_cooking(India) ∧ (travel_for_flavors(India) ∨ own_a_restaurant(India))",
    "answer": "True",
    "context": [
      "India has creativity.",
      "India does not write books.",
      "If India has creativity, then she is either passionate or writes books, but not both.",
      "India does not teach culinary arts.",
      "If India is passionate, then she either owns a restaurant or teaches culinary arts, but not both.",
      "India is adventurous.",
      "India tries new recipes.",
      "If India is adventurous, then she travels for flavors and tries new recipes.",
      "India loves cooking."
    ],
    "context_fol": [
      "has_creativity(India)",
      "¬write_books(India)",
      "has_creativity(India) → (write_books(India) ⊕ is_passionate(India))",
      "¬teach_culinary(India)",
      "is_passionate(India) → (own_a_restaurant(India) ⊕ teach_culinary(India))",
      "adventurous(India)",
      "try_new_recipes(India)",
      "adventurous(India) → (travel_for_flavors(India) ∧ try_new_recipes(India))",
      "love_cooking(India)"
    ],
    "background_story": "India was a free-spirited chef who traveled the world in search of exotic flavors. Her culinary journey took her to the vibrant streets of India, where she discovered the magic of sesame. Enchanted by the nutty aroma and versatility of sesame seeds, India began experimenting with them in her recipes. She created a signature sesame-based sauce that quickly gained popularity in her cooking classes. As her reputation grew, India opened a restaurant specializing in sesame-infused cuisine, from sesame-crusted salmon to sesame-topped naan bread. Her passion for sesame led to a cookbook and a line of artisanal sesame products, making her a leading authority on the subject. India's love affair with sesame had brought her success, but more importantly, it had connected her to the rich culinary heritage of the country that shared her name.",
    "name": "India",
    "keyword": "sesame",
    "subject_category": "human"
  },
  {
    "facts": [
      "Elyse loves botany.",
      "Elyse is caring."
    ],
    "facts_fol": [
      "loves_botany(Elyse)",
      "is_caring(Elyse)"
    ],
    "rules": [
      "If Elyse is either gentle or outdoorsy (but not both), then she is nurturing.",
      "Elyse is either someone who loves botany or is outdoorsy, but not necessarily both.",
      "For Elyse, being caring or being gentle are mutually exclusive traits that can still lead to her nurturing nature."
    ],
    "rules_fol": [
      "(gentle(Elyse) ⊕ outdoorsy(Elyse)) → nurturing(Elyse)",
      "loves_botany(Elyse) ⊕ outdoorsy(Elyse)",
      "is_caring(Elyse) ⊕ gentle(Elyse)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Elyse either hikes mountains or explores forests (but not both), then she is outdoorsy.",
      "If Elyse either soothes animals or calms children (but not both), then she is gentle."
    ],
    "distracting_rules_fol": [
      "(hikes_mountains(Elyse) ⊕ explores_forests(Elyse)) → outdoorsy(Elyse)",
      "(soothes_animals(Elyse) ⊕ calms_children(Elyse)) → gentle(Elyse)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Elyse is caring."
        ],
        "rules": "For Elyse, being caring or being gentle are mutually exclusive traits that can still lead to her nurturing nature.",
        "conclusion": "Elyse is not gentle."
      },
      {
        "facts": [
          "Elyse loves botany."
        ],
        "rules": "Elyse is either someone who loves botany or is outdoorsy, but not necessarily both.",
        "conclusion": "Elyse is not outdoorsy."
      },
      {
        "facts": [
          "Elyse is not gentle.",
          "Elyse is not outdoorsy."
        ],
        "rules": "If Elyse is either gentle or outdoorsy (but not both), then she is nurturing.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "is_caring(Elyse)"
        ],
        "rules": "is_caring(Elyse) ⊕ gentle(Elyse)",
        "conclusion": "¬gentle(Elyse)"
      },
      {
        "facts": [
          "loves_botany(Elyse)"
        ],
        "rules": "loves_botany(Elyse) ⊕ outdoorsy(Elyse)",
        "conclusion": "¬outdoorsy(Elyse)"
      },
      {
        "facts": [
          "¬gentle(Elyse)",
          "¬outdoorsy(Elyse)"
        ],
        "rules": "(gentle(Elyse) ⊕ outdoorsy(Elyse)) → nurturing(Elyse)",
        "conclusion": null
      }
    ],
    "conclusion": "Elyse is nurturing.",
    "conclusion_fol": "nurturing(Elyse)",
    "answer": "Uncertain",
    "context": [
      "Elyse is caring.",
      "For Elyse, being caring or being gentle are mutually exclusive traits that can still lead to her nurturing nature.",
      "Elyse loves botany.",
      "Elyse is either someone who loves botany or is outdoorsy, but not necessarily both.",
      "If Elyse is either gentle or outdoorsy (but not both), then she is nurturing."
    ],
    "context_fol": [
      "is_caring(Elyse)",
      "is_caring(Elyse) ⊕ gentle(Elyse)",
      "loves_botany(Elyse)",
      "loves_botany(Elyse) ⊕ outdoorsy(Elyse)",
      "(gentle(Elyse) ⊕ outdoorsy(Elyse)) → nurturing(Elyse)"
    ],
    "background_story": "Elyse was a gentle soul with a deep connection to nature. She spent most of her days tending to her garden, where she cultivated rare and exotic flowers, including the delicate woodwaxen. Her love for this fragrant, star-shaped bloom led her to become an expert in its care and propagation. As she worked, Elyse found solace in the quiet, methodical process of nurturing life. The woodwaxen, with its dainty petals and sweet fragrance, became a symbol of her own resilience and beauty. Elyse's garden, filled with woodwaxen and other wildflowers, became a haven for local pollinators and a testament to her green thumb. Her passion for botany and the natural world inspired others to appreciate the simple joys of growth and renewal.",
    "name": "Elyse",
    "keyword": "woodwaxen",
    "subject_category": "human"
  },
  {
    "facts": [
      "Nathan enjoys nature.",
      "Nathan finds serenity.",
      "Nathan sets goals.",
      "Nathan pushes his limits."
    ],
    "facts_fol": [
      "enjoy_nature(Nathan)",
      "find_serenity(Nathan)",
      "sets_goals(Nathan)",
      "pushes_limits(Nathan)"
    ],
    "rules": [
      "If Nathan explores the wilderness, then he will either discover new landmarks or experience personal growth, but not both.",
      "If Nathan seeks thrills, then he will either find serenity or explore the wilderness, but not both.",
      "If Nathan enjoys nature, then he will either take risks or seek thrills, but not both.",
      "Nathan, as an adventurer, either faces challenges or takes risks, but not necessarily both, in his pursuit of exploring the wilderness.",
      "If an adventurer sets goals and pushes limits, then they face challenges."
    ],
    "rules_fol": [
      "explore_wilderness(Nathan) → (discover_new_landmarks(Nathan) ⊕ experience_personal_growth(Nathan))",
      "seek_thrills(Nathan) → (find_serenity(Nathan) ⊕ explore_wilderness(Nathan))",
      "enjoy_nature(Nathan) → (take_risks(Nathan) ⊕ seek_thrills(Nathan))",
      "face_challenges(Nathan) ⊕ take_risks(Nathan)",
      "∀x ((sets_goals(x) ∧ pushes_limits(x)) → face_challenges(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If an adventurer loves the outdoors and has curiosity, then they will explore the wilderness.",
      "If an adventurer loves hiking and craves adventure, then they seek thrills.",
      "All adventurers who either climb mountains or cross rivers (but not both) take risks.",
      "All adventurers who pursue their passion face challenges and build resilience."
    ],
    "distracting_rules_fol": [
      "∀x ((loves_outdoors(x) ∧ has_curiosity(x)) → explore_wilderness(x))",
      "∀x ((loves_hiking(x) ∧ craves_adventure(x)) → seek_thrills(x))",
      "∀x ((climb_mountains(x) ⊕ cross_rivers(x)) → take_risks(x))",
      "∀x (pursue_passion(x) → (face_challenges(x) ∧ build_resilience(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Nathan sets goals.",
          "Nathan pushes his limits."
        ],
        "rules": "If an adventurer sets goals and pushes limits, then they face challenges.",
        "conclusion": "Nathan faces challenges."
      },
      {
        "facts": [
          "Nathan faces challenges."
        ],
        "rules": "Nathan, as an adventurer, either faces challenges or takes risks, but not necessarily both, in his pursuit of exploring the wilderness.",
        "conclusion": "Nathan does not take risks."
      },
      {
        "facts": [
          "Nathan enjoys nature.",
          "Nathan does not take risks."
        ],
        "rules": "If Nathan enjoys nature, then he will either take risks or seek thrills, but not both.",
        "conclusion": "Nathan seeks thrills."
      },
      {
        "facts": [
          "Nathan seeks thrills.",
          "Nathan finds serenity."
        ],
        "rules": "If Nathan seeks thrills, then he will either find serenity or explore the wilderness, but not both.",
        "conclusion": "Nathan does not explore the wilderness."
      },
      {
        "facts": [
          "Nathan does not explore the wilderness."
        ],
        "rules": "If Nathan explores the wilderness, then he will either discover new landmarks or experience personal growth, but not both.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "sets_goals(Nathan)",
          "pushes_limits(Nathan)"
        ],
        "rules": "∀x ((sets_goals(x) ∧ pushes_limits(x)) → face_challenges(x))",
        "conclusion": "face_challenges(Nathan)"
      },
      {
        "facts": [
          "face_challenges(Nathan)"
        ],
        "rules": "face_challenges(Nathan) ⊕ take_risks(Nathan)",
        "conclusion": "¬take_risks(Nathan)"
      },
      {
        "facts": [
          "enjoy_nature(Nathan)",
          "¬take_risks(Nathan)"
        ],
        "rules": "enjoy_nature(Nathan) → (take_risks(Nathan) ⊕ seek_thrills(Nathan))",
        "conclusion": "seek_thrills(Nathan)"
      },
      {
        "facts": [
          "seek_thrills(Nathan)",
          "find_serenity(Nathan)"
        ],
        "rules": "seek_thrills(Nathan) → (find_serenity(Nathan) ⊕ explore_wilderness(Nathan))",
        "conclusion": "¬explore_wilderness(Nathan)"
      },
      {
        "facts": [
          "¬explore_wilderness(Nathan)"
        ],
        "rules": "explore_wilderness(Nathan) → (discover_new_landmarks(Nathan) ⊕ experience_personal_growth(Nathan))",
        "conclusion": null
      }
    ],
    "conclusion": "Nathan does not experience personal growth.",
    "conclusion_fol": "¬experience_personal_growth(Nathan)",
    "answer": "Uncertain",
    "context": [
      "Nathan sets goals.",
      "Nathan pushes his limits.",
      "If an adventurer sets goals and pushes limits, then they face challenges.",
      "Nathan, as an adventurer, either faces challenges or takes risks, but not necessarily both, in his pursuit of exploring the wilderness.",
      "Nathan enjoys nature.",
      "If Nathan enjoys nature, then he will either take risks or seek thrills, but not both.",
      "Nathan finds serenity.",
      "If Nathan seeks thrills, then he will either find serenity or explore the wilderness, but not both.",
      "If Nathan explores the wilderness, then he will either discover new landmarks or experience personal growth, but not both."
    ],
    "context_fol": [
      "sets_goals(Nathan)",
      "pushes_limits(Nathan)",
      "∀x ((sets_goals(x) ∧ pushes_limits(x)) → face_challenges(x))",
      "face_challenges(Nathan) ⊕ take_risks(Nathan)",
      "enjoy_nature(Nathan)",
      "enjoy_nature(Nathan) → (take_risks(Nathan) ⊕ seek_thrills(Nathan))",
      "find_serenity(Nathan)",
      "seek_thrills(Nathan) → (find_serenity(Nathan) ⊕ explore_wilderness(Nathan))",
      "explore_wilderness(Nathan) → (discover_new_landmarks(Nathan) ⊕ experience_personal_growth(Nathan))"
    ],
    "background_story": "Nathan, an avid hiker, had always been drawn to the vast, untouched landscapes of the wilderness. His latest obsession was the Red Rock Gorge, a deep, winding canyon carved by the relentless flow of the river. Determined to explore its depths, Nathan spent weeks planning his expedition. As he descended into the gorge, the sheer walls rose up around him, a testament to the power of erosion. The hike was grueling, but Nathan pressed on, driven by a sense of discovery. Finally, he reached the gorge's inner sanctum, where a hidden waterfall cascaded into a crystal-clear pool. Nathan felt a deep connection to this natural wonder, as if the gorge had revealed a secret only he was meant to see. His journey through the gorge was a journey of self-discovery, one that left him in awe of nature's majesty.",
    "name": "Nathan",
    "keyword": "gorge",
    "subject_category": "adventurer"
  },
  {
    "facts": [
      "Elaine learns a language.",
      "Elaine does not love nature.",
      "Elaine respects her heritage.",
      "Elaine values her community."
    ],
    "facts_fol": [
      "learn_language(Elaine)",
      "¬love_nature(Elaine)",
      "respect_heritage(Elaine)",
      "value_community(Elaine)"
    ],
    "rules": [
      "If Elaine learns a language, then she can either adopt the local traditions or explore the culture, but not both.",
      "If Elaine loves nature, then she gains citizenship and knows history.",
      "If Elaine either follows customs or respects heritage (but not both), then she adopts traditions.",
      "Elaine either values her community or follows customs, but not necessarily both."
    ],
    "rules_fol": [
      "learn_language(Elaine) → (adopt_traditions(Elaine) ⊕ explore_culture(Elaine))",
      "love_nature(Elaine) → (gain_citizenship(Elaine) ∧ know_history(Elaine))",
      "(follow_customs(Elaine) ⊕ respect_heritage(Elaine)) → adopt_traditions(Elaine)",
      "value_community(Elaine) ⊕ follow_customs(Elaine)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If someone visits places and meets locals, then they explore culture.",
      "If Elaine either obtains residency or passes exams (but not both), then she gains citizenship.",
      "Elaine either embraces a new lifestyle or adopts local traditions.",
      "If Elaine lives locally or engages with the community, then she follows customs."
    ],
    "distracting_rules_fol": [
      "∀x ((visits_places(x) ∧ meets_locals(x)) → explore_culture(x))",
      "(obtain_residency(Elaine) ⊕ pass_exams(Elaine)) → gain_citizenship(Elaine)",
      "embrace_lifestyle(Elaine) ∨ adopt_traditions(Elaine)",
      "(live_locally(Elaine) ∨ engage_community(Elaine)) → follow_customs(Elaine)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Elaine values her community."
        ],
        "rules": "Elaine either values her community or follows customs, but not necessarily both.",
        "conclusion": "Elaine does not follow customs."
      },
      {
        "facts": [
          "Elaine does not follow customs.",
          "Elaine respects her heritage."
        ],
        "rules": "If Elaine either follows customs or respects heritage (but not both), then she adopts traditions.",
        "conclusion": "Elaine adopts the local traditions."
      },
      {
        "facts": [
          "Elaine does not love nature."
        ],
        "rules": "If Elaine loves nature, then she gains citizenship and knows history.",
        "conclusion": null
      },
      {
        "facts": [
          "Elaine learns a language.",
          "Elaine adopts the local traditions."
        ],
        "rules": "If Elaine learns a language, then she can either adopt the local traditions or explore the culture, but not both.",
        "conclusion": "Elaine does not explore Icelandic culture."
      },
      {
        "facts": [
          "Elaine does not explore Icelandic culture."
        ],
        "rules": null,
        "conclusion": "If Elaine explores Icelandic culture, then she can either become an expert in it or gain Icelandic citizenship, but not both."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "value_community(Elaine)"
        ],
        "rules": "value_community(Elaine) ⊕ follow_customs(Elaine)",
        "conclusion": "¬follow_customs(Elaine)"
      },
      {
        "facts": [
          "¬follow_customs(Elaine)",
          "respect_heritage(Elaine)"
        ],
        "rules": "(follow_customs(Elaine) ⊕ respect_heritage(Elaine)) → adopt_traditions(Elaine)",
        "conclusion": "adopt_traditions(Elaine)"
      },
      {
        "facts": [
          "¬love_nature(Elaine)"
        ],
        "rules": "love_nature(Elaine) → (gain_citizenship(Elaine) ∧ know_history(Elaine))",
        "conclusion": null
      },
      {
        "facts": [
          "learn_language(Elaine)",
          "adopt_traditions(Elaine)"
        ],
        "rules": "learn_language(Elaine) → (adopt_traditions(Elaine) ⊕ explore_culture(Elaine))",
        "conclusion": "¬explore_culture(Elaine)"
      },
      {
        "facts": [
          "¬explore_culture(Elaine)"
        ],
        "rules": null,
        "conclusion": "explore_culture(Elaine) → (become_expert(Elaine) ⊕ gain_citizenship(Elaine))"
      }
    ],
    "conclusion": "If Elaine explores Icelandic culture, then she can either become an expert in it or gain Icelandic citizenship, but not both.",
    "conclusion_fol": "explore_culture(Elaine) → (become_expert(Elaine) ⊕ gain_citizenship(Elaine))",
    "answer": "True",
    "context": [
      "Elaine values her community.",
      "Elaine either values her community or follows customs, but not necessarily both.",
      "Elaine respects her heritage.",
      "If Elaine either follows customs or respects heritage (but not both), then she adopts traditions.",
      "Elaine does not love nature.",
      "If Elaine loves nature, then she gains citizenship and knows history.",
      "Elaine learns a language.",
      "If Elaine learns a language, then she can either adopt the local traditions or explore the culture, but not both."
    ],
    "context_fol": [
      "value_community(Elaine)",
      "value_community(Elaine) ⊕ follow_customs(Elaine)",
      "respect_heritage(Elaine)",
      "(follow_customs(Elaine) ⊕ respect_heritage(Elaine)) → adopt_traditions(Elaine)",
      "¬love_nature(Elaine)",
      "love_nature(Elaine) → (gain_citizenship(Elaine) ∧ know_history(Elaine))",
      "learn_language(Elaine)",
      "learn_language(Elaine) → (adopt_traditions(Elaine) ⊕ explore_culture(Elaine))"
    ],
    "background_story": "Elaine, a travel enthusiast, had always been fascinated by the rugged landscapes of Iceland. She spent years saving up to embark on a solo journey to explore the country's breathtaking natural wonders. As she hiked through the glacier-carved valleys and marveled at the Northern Lights, Elaine felt an inexplicable connection to the land. She decided to stay in Iceland, learning the language and immersing herself in the local culture. Soon, she became an expert on Icelandic folklore and history, leading guided tours for visitors. Elaine's love for the country and its people only deepened with time, and she eventually became a dual citizen, proud to call Iceland her second home. Her friends back home would often joke that she had become more Icelandic than American, and Elaine wouldn't disagree.",
    "name": "Elaine",
    "keyword": "icelandic",
    "subject_category": "human"
  },
  {
    "facts": [
      "Zaria builds nests.",
      "Zaria is not vigilant.",
      "Zaria lives in a wetland.",
      "Zaria has keen eyes.",
      "Zaria avoids dangers."
    ],
    "facts_fol": [
      "builds_nest(Zaria)",
      "¬vigilant(Zaria)",
      "lives_in_wetland(Zaria)",
      "has_keen_eyes(Zaria)",
      "avoids_dangers(Zaria)"
    ],
    "rules": [
      "If Zaria either finds food or sees predators (but not both), then she is a skilled forager.",
      "If Zaria lives in a wetland, then she either sees predators or builds nests, but not both.",
      "If Zaria has keen eyes, then she either avoids dangers or finds food, but not both."
    ],
    "rules_fol": [
      "(finds_food(Zaria) ⊕ sees_predators(Zaria)) → skilled_forager(Zaria)",
      "lives_in_wetland(Zaria) → (sees_predators(Zaria) ⊕ builds_nest(Zaria))",
      "has_keen_eyes(Zaria) → (avoids_dangers(Zaria) ⊕ finds_food(Zaria))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Zaria spots prey or runs fast, then she is a skilled forager.",
      "Zaria either catches insects or sees predators.",
      "All birds with active wings have strong beaks and find food."
    ],
    "distracting_rules_fol": [
      "(spots_preys(Zaria) ∨ runs_fast(Zaria)) → skilled_forager(Zaria)",
      "catches_insects(Zaria) ∨ sees_predators(Zaria)",
      "∀x (active_wings(x) → (strong_beak(x) ∧ finds_food(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Zaria has keen eyes.",
          "Zaria avoids dangers."
        ],
        "rules": "If Zaria has keen eyes, then she either avoids dangers or finds food, but not both.",
        "conclusion": "Zaria does not find food."
      },
      {
        "facts": [
          "Zaria lives in a wetland.",
          "Zaria builds nests."
        ],
        "rules": "If Zaria lives in a wetland, then she either sees predators or builds nests, but not both.",
        "conclusion": "Zaria does not see predators."
      },
      {
        "facts": [
          "Zaria does not find food.",
          "Zaria does not see predators."
        ],
        "rules": "If Zaria either finds food or sees predators (but not both), then she is a skilled forager.",
        "conclusion": null
      },
      {
        "facts": [
          "Zaria is not vigilant."
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "has_keen_eyes(Zaria)",
          "avoids_dangers(Zaria)"
        ],
        "rules": "has_keen_eyes(Zaria) → (avoids_dangers(Zaria) ⊕ finds_food(Zaria))",
        "conclusion": "¬finds_food(Zaria)"
      },
      {
        "facts": [
          "lives_in_wetland(Zaria)",
          "builds_nest(Zaria)"
        ],
        "rules": "lives_in_wetland(Zaria) → (sees_predators(Zaria) ⊕ builds_nest(Zaria))",
        "conclusion": "¬sees_predators(Zaria)"
      },
      {
        "facts": [
          "¬finds_food(Zaria)",
          "¬sees_predators(Zaria)"
        ],
        "rules": "(finds_food(Zaria) ⊕ sees_predators(Zaria)) → skilled_forager(Zaria)",
        "conclusion": null
      },
      {
        "facts": [
          "¬vigilant(Zaria)"
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "conclusion": "Zaria is vigilant, or a skilled forager, or sharp-sighted.",
    "conclusion_fol": "vigilant(Zaria) ∨ (skilled_forager(Zaria) ∨ sharp_sighted(Zaria))",
    "answer": "Uncertain",
    "context": [
      "Zaria has keen eyes.",
      "Zaria avoids dangers.",
      "If Zaria has keen eyes, then she either avoids dangers or finds food, but not both.",
      "Zaria lives in a wetland.",
      "Zaria builds nests.",
      "If Zaria lives in a wetland, then she either sees predators or builds nests, but not both.",
      "If Zaria either finds food or sees predators (but not both), then she is a skilled forager.",
      "Zaria is not vigilant."
    ],
    "context_fol": [
      "has_keen_eyes(Zaria)",
      "avoids_dangers(Zaria)",
      "has_keen_eyes(Zaria) → (avoids_dangers(Zaria) ⊕ finds_food(Zaria))",
      "lives_in_wetland(Zaria)",
      "builds_nest(Zaria)",
      "lives_in_wetland(Zaria) → (sees_predators(Zaria) ⊕ builds_nest(Zaria))",
      "(finds_food(Zaria) ⊕ sees_predators(Zaria)) → skilled_forager(Zaria)",
      "¬vigilant(Zaria)"
    ],
    "background_story": "Zaria was a small, yet fierce peeper, a type of sandpiper known for her big eyes and sharp vision. She lived in a coastal wetland, where she spent her days scouring the mudflats for tiny crustaceans and insects to eat. Zaria's large eyes allowed her to spot even the smallest prey, making her one of the most successful foragers in her flock. But her exceptional eyesight also made her a vigilant sentinel, always on the lookout for predators lurking in the distance. With her sharp peeps, she would alert her fellow birds to any potential danger, earning her the respect and gratitude of her community. Zaria's keen eyes and quick reflexes made her a true asset to her flock, and she took pride in being a protector and provider.",
    "name": "Zaria",
    "keyword": "peeper",
    "subject_category": "bird"
  },
  {
    "facts": [
      "Anahi takes risks.",
      "Anahi speaks out."
    ],
    "facts_fol": [
      "takes_risks(Anahi)",
      "speaks_out(Anahi)"
    ],
    "rules": [
      "Anahi is either fearless or timid, but not both.",
      "Anahi is fearless because she is bold.",
      "Anyone who takes risks or speaks out is bold."
    ],
    "rules_fol": [
      "fearless(Anahi) ⊕ timid(Anahi)",
      "bold(Anahi) → fearless(Anahi)",
      "∀x ((takes_risks(x) ∨ speaks_out(x)) → bold(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Anahi dares all, then she is fearless.",
      "Anahi either acts confidently or is bold."
    ],
    "distracting_rules_fol": [
      "dares_all(Anahi) → fearless(Anahi)",
      "acts_confident(Anahi) ∨ bold(Anahi)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Anahi takes risks.",
          "Anahi speaks out."
        ],
        "rules": "Anyone who takes risks or speaks out is bold.",
        "conclusion": "Anahi is bold."
      },
      {
        "facts": [
          "Anahi is bold."
        ],
        "rules": "Anahi is fearless because she is bold.",
        "conclusion": "Anahi is fearless."
      },
      {
        "facts": [
          "Anahi is fearless."
        ],
        "rules": "Anahi is either fearless or timid, but not both.",
        "conclusion": "Anahi is not timid."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "takes_risks(Anahi)",
          "speaks_out(Anahi)"
        ],
        "rules": "∀x ((takes_risks(x) ∨ speaks_out(x)) → bold(x))",
        "conclusion": "bold(Anahi)"
      },
      {
        "facts": [
          "bold(Anahi)"
        ],
        "rules": "bold(Anahi) → fearless(Anahi)",
        "conclusion": "fearless(Anahi)"
      },
      {
        "facts": [
          "fearless(Anahi)"
        ],
        "rules": "fearless(Anahi) ⊕ timid(Anahi)",
        "conclusion": "¬timid(Anahi)"
      }
    ],
    "conclusion": "Anahi is not timid.",
    "conclusion_fol": "¬timid(Anahi)",
    "answer": "True",
    "context": [
      "Anahi takes risks.",
      "Anahi speaks out.",
      "Anyone who takes risks or speaks out is bold.",
      "Anahi is fearless because she is bold.",
      "Anahi is either fearless or timid, but not both."
    ],
    "context_fol": [
      "takes_risks(Anahi)",
      "speaks_out(Anahi)",
      "∀x ((takes_risks(x) ∨ speaks_out(x)) → bold(x))",
      "bold(Anahi) → fearless(Anahi)",
      "fearless(Anahi) ⊕ timid(Anahi)"
    ],
    "background_story": "Anahi was a mettlesome young woman from a small village, known for her fearless spirit and unyielding determination. Growing up in a community where traditions often limited women's roles, Anahi challenged every norm. She pursued her passion for mechanics, often sneaking into the local garage to learn from the town's seasoned mechanics. Her courage and tenacity eventually earned her a place as the village's first female mechanic. Anahi's mettlesome nature didn't stop there; she went on to compete in and win several regional racing competitions, proving her skills behind the wheel were unmatched. Her story inspired countless young girls in the village, showing them that with grit and perseverance, they too could break barriers and achieve their dreams.",
    "name": "Anahi",
    "keyword": "mettlesome",
    "subject_category": "human"
  },
  {
    "facts": [
      "Anaya owns a bike.",
      "Anaya is active.",
      "Anaya uses public transport.",
      "Anaya is adventurous."
    ],
    "facts_fol": [
      "own_bike(Anaya)",
      "is_active(Anaya)",
      "use_public_transport(Anaya)",
      "adventurous(Anaya)"
    ],
    "rules": [
      "For all humans, if someone is a cyclist, then they either enjoy the freedom of riding or appreciate the nature around them (or both).",
      "Anyone who rides regularly or owns a bike is a cyclist.",
      "If Anaya is active, then she either uses public transport or rides regularly, but not both.",
      "All adventurous people enjoy freedom and value independence."
    ],
    "rules_fol": [
      "∀x (cyclist(x) → (enjoy_freedom(x) ∨ appreciate_nature(x)))",
      "∀x ((ride_regularly(x) ∨ own_bike(x)) → cyclist(x))",
      "is_active(Anaya) → (use_public_transport(Anaya) ⊕ ride_regularly(Anaya))",
      "∀x (adventurous(x) → (enjoy_freedom(x) ∧ value_independence(x)))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Anaya likes the outdoors or is a cyclist.",
      "If Anaya either joins clubs or fixes bikes (but not both), then she rides regularly.",
      "If Anaya loves the outdoors, then she enjoys freedom and feels alive."
    ],
    "distracting_rules_fol": [
      "likes_outdoors(Anaya) ∨ cyclist(Anaya)",
      "(join_clubs(Anaya) ⊕ fix_bikes(Anaya)) → ride_regularly(Anaya)",
      "love_outdoors(Anaya) → (enjoy_freedom(Anaya) ∧ feel_alive(Anaya))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Anaya is adventurous."
        ],
        "rules": "All adventurous people enjoy freedom and value independence.",
        "conclusion": "Anaya enjoys the freedom of riding."
      },
      {
        "facts": [
          "Anaya is active.",
          "Anaya uses public transport."
        ],
        "rules": "If Anaya is active, then she either uses public transport or rides regularly, but not both.",
        "conclusion": "Anaya does not ride regularly."
      },
      {
        "facts": [
          "Anaya does not ride regularly.",
          "Anaya owns a bike."
        ],
        "rules": "Anyone who rides regularly or owns a bike is a cyclist.",
        "conclusion": "Anaya is a cyclist."
      },
      {
        "facts": [
          "Anaya is a cyclist.",
          "Anaya enjoys the freedom of riding."
        ],
        "rules": "For all humans, if someone is a cyclist, then they either enjoy the freedom of riding or appreciate the nature around them (or both).",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "adventurous(Anaya)"
        ],
        "rules": "∀x (adventurous(x) → (enjoy_freedom(x) ∧ value_independence(x)))",
        "conclusion": "enjoy_freedom(Anaya)"
      },
      {
        "facts": [
          "is_active(Anaya)",
          "use_public_transport(Anaya)"
        ],
        "rules": "is_active(Anaya) → (use_public_transport(Anaya) ⊕ ride_regularly(Anaya))",
        "conclusion": "¬ride_regularly(Anaya)"
      },
      {
        "facts": [
          "¬ride_regularly(Anaya)",
          "own_bike(Anaya)"
        ],
        "rules": "∀x ((ride_regularly(x) ∨ own_bike(x)) → cyclist(x))",
        "conclusion": "cyclist(Anaya)"
      },
      {
        "facts": [
          "cyclist(Anaya)",
          "enjoy_freedom(Anaya)"
        ],
        "rules": "∀x (cyclist(x) → (enjoy_freedom(x) ∨ appreciate_nature(x)))",
        "conclusion": null
      }
    ],
    "conclusion": "Anaya does not appreciate the nature around her.",
    "conclusion_fol": "¬appreciate_nature(Anaya)",
    "answer": "Uncertain",
    "context": [
      "Anaya is adventurous.",
      "All adventurous people enjoy freedom and value independence.",
      "Anaya is active.",
      "Anaya uses public transport.",
      "If Anaya is active, then she either uses public transport or rides regularly, but not both.",
      "Anaya owns a bike.",
      "Anyone who rides regularly or owns a bike is a cyclist.",
      "For all humans, if someone is a cyclist, then they either enjoy the freedom of riding or appreciate the nature around them (or both)."
    ],
    "context_fol": [
      "adventurous(Anaya)",
      "∀x (adventurous(x) → (enjoy_freedom(x) ∧ value_independence(x)))",
      "is_active(Anaya)",
      "use_public_transport(Anaya)",
      "is_active(Anaya) → (use_public_transport(Anaya) ⊕ ride_regularly(Anaya))",
      "own_bike(Anaya)",
      "∀x ((ride_regularly(x) ∨ own_bike(x)) → cyclist(x))",
      "∀x (cyclist(x) → (enjoy_freedom(x) ∨ appreciate_nature(x)))"
    ],
    "background_story": "Anaya was a free-spirited cyclist who spent most of her days exploring the city on her vintage bike, Bertha. What made Bertha stand out was her distinctive handlebar, adorned with colorful streamers and a small brass bell. Anaya had found the bike in a thrift store and spent weeks restoring it to its former glory. The handlebar became her trademark, with locals recognizing her as she rode by. Anaya loved the feeling of the wind in her hair and the sun on her face as she navigated the city's bike trails. She even started a cycling club, where members would decorate their own handlebars with unique accessories, creating a vibrant and eclectic community of bike enthusiasts.",
    "name": "Anaya",
    "keyword": "handlebar",
    "subject_category": "human"
  },
  {
    "facts": [
      "Hugh does not bring joy.",
      "Hugh is empathetic.",
      "Hugh is thoughtful.",
      "Hugh has a green thumb.",
      "Hugh listens actively.",
      "Hugh does not help others."
    ],
    "facts_fol": [
      "¬brings_joy(Hugh)",
      "empathetic(Hugh)",
      "is_thoughtful(Hugh)",
      "has_a_green_thumb(Hugh)",
      "listens_actively(Hugh)",
      "¬helps_others(Hugh)"
    ],
    "rules": [
      "If someone is nurturing, then they are empathetic and care for others.",
      "If Hugh is compassionate, then he is either nurturing or thoughtful, but not both.",
      "If Hugh either listens actively or helps others (but not both), then he is compassionate."
    ],
    "rules_fol": [
      "∀x (nurturing(x) → (empathetic(x) ∧ cares_for_others(x)))",
      "is_compassionate(Hugh) → (nurturing(Hugh) ⊕ is_thoughtful(Hugh))",
      "(listens_actively(Hugh) ⊕ helps_others(Hugh)) → is_compassionate(Hugh)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Hugh is generous, then he either cares for others or is supportive, but not both.",
      "Everyone who tends to a garden either loves nature or is nurturing (or both).",
      "If Hugh either soothes minds or comforts hearts (but not both), then he is compassionate."
    ],
    "distracting_rules_fol": [
      "is_generous(Hugh) → (cares_for_others(Hugh) ⊕ is_supportive(Hugh))",
      "∀x (tends_garden(x) → (loves_nature(x) ∨ nurturing(x)))",
      "(soothes_minds(Hugh) ⊕ comforts_hearts(Hugh)) → is_compassionate(Hugh)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Hugh listens actively.",
          "Hugh does not help others."
        ],
        "rules": "If Hugh either listens actively or helps others (but not both), then he is compassionate.",
        "conclusion": "Hugh is compassionate."
      },
      {
        "facts": [
          "Hugh is compassionate.",
          "Hugh is thoughtful."
        ],
        "rules": "If Hugh is compassionate, then he is either nurturing or thoughtful, but not both.",
        "conclusion": "Hugh is not nurturing."
      },
      {
        "facts": [
          "Hugh is not nurturing.",
          "Hugh is empathetic."
        ],
        "rules": "If someone is nurturing, then they are empathetic and care for others.",
        "conclusion": null
      },
      {
        "facts": [
          "Hugh has a green thumb.",
          "Hugh does not bring joy."
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "listens_actively(Hugh)",
          "¬helps_others(Hugh)"
        ],
        "rules": "(listens_actively(Hugh) ⊕ helps_others(Hugh)) → is_compassionate(Hugh)",
        "conclusion": "is_compassionate(Hugh)"
      },
      {
        "facts": [
          "is_compassionate(Hugh)",
          "is_thoughtful(Hugh)"
        ],
        "rules": "is_compassionate(Hugh) → (nurturing(Hugh) ⊕ is_thoughtful(Hugh))",
        "conclusion": "¬nurturing(Hugh)"
      },
      {
        "facts": [
          "¬nurturing(Hugh)",
          "empathetic(Hugh)"
        ],
        "rules": "∀x (nurturing(x) → (empathetic(x) ∧ cares_for_others(x)))",
        "conclusion": null
      },
      {
        "facts": [
          "has_a_green_thumb(Hugh)",
          "¬brings_joy(Hugh)"
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "conclusion": "If Hugh has a green thumb and cares for others, then he brings joy.",
    "conclusion_fol": "(has_a_green_thumb(Hugh) ∧ cares_for_others(Hugh)) → brings_joy(Hugh)",
    "answer": "Uncertain",
    "context": [
      "Hugh listens actively.",
      "Hugh does not help others.",
      "If Hugh either listens actively or helps others (but not both), then he is compassionate.",
      "Hugh is thoughtful.",
      "If Hugh is compassionate, then he is either nurturing or thoughtful, but not both.",
      "Hugh is empathetic.",
      "If someone is nurturing, then they are empathetic and care for others.",
      "Hugh has a green thumb.",
      "Hugh does not bring joy."
    ],
    "context_fol": [
      "listens_actively(Hugh)",
      "¬helps_others(Hugh)",
      "(listens_actively(Hugh) ⊕ helps_others(Hugh)) → is_compassionate(Hugh)",
      "is_thoughtful(Hugh)",
      "is_compassionate(Hugh) → (nurturing(Hugh) ⊕ is_thoughtful(Hugh))",
      "empathetic(Hugh)",
      "∀x (nurturing(x) → (empathetic(x) ∧ cares_for_others(x)))",
      "has_a_green_thumb(Hugh)",
      "¬brings_joy(Hugh)"
    ],
    "background_story": "Hugh was a gentle soul with a green thumb. He tended to his garden tenderly, nurturing every bloom and bud with care. His love for gardening was not just about growing plants, but about creating a serene oasis for his family to enjoy. After his wife fell ill, Hugh cared for her tenderly, cooking her favorite meals and reading to her by the window. As she recovered, he would take her on slow walks through their garden, pointing out the beauty of each flower and tree. Hugh's tender touch and loving care extended beyond his garden and family, as he volunteered at a local nursing home, bringing joy and comfort to the residents through his gardening workshops and gentle companionship.",
    "name": "Hugh",
    "keyword": "tenderly",
    "subject_category": "human"
  },
  {
    "facts": [
      "Ariya is not respected.",
      "Ariya follows the law.",
      "Ariya considers testimony.",
      "Ariya upholds justice."
    ],
    "facts_fol": [
      "¬respected(Ariya)",
      "follows_law(Ariya)",
      "considers_testimony(Ariya)",
      "upholds_justice(Ariya)"
    ],
    "rules": [
      "If Ariya is impartial, then she is either respected or influential, but not both.",
      "If a judge follows the law and weighs evidence, then they are impartial.",
      "Any judge who reviews a case or considers testimony can weigh evidence.",
      "A judge either makes rulings or reviews cases, but not necessarily both at the same time.",
      "Ariya either upholds justice or makes rulings, but these are distinct aspects of her role as a judge."
    ],
    "rules_fol": [
      "impartial(Ariya) → (respected(Ariya) ⊕ influential(Ariya))",
      "∀x ((follows_law(x) ∧ weighs_evidence(x)) → impartial(x))",
      "∀x ((reviews_case(x) ∨ considers_testimony(x)) → weighs_evidence(x))",
      "∀x (makes_rulings(x) ⊕ reviews_case(x))",
      "upholds_justice(Ariya) ⊕ makes_rulings(Ariya)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Every fair judge is impartial.",
      "If Ariya either examines facts or analyzes claims (but not both), then she weighs evidence.",
      "If Ariya either examines facts or evaluates claims (but not both), then she reviews cases.",
      "All experienced judges seek truth and make rulings."
    ],
    "distracting_rules_fol": [
      "∀x (fair(x) → impartial(x))",
      "(examines_facts(Ariya) ⊕ analyzes_claims(Ariya)) → weighs_evidence(Ariya)",
      "(examines_facts(Ariya) ⊕ evaluates_claims(Ariya)) → reviews_case(Ariya)",
      "∀x (experienced(x) → (seeks_truth(x) ∧ makes_rulings(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Ariya upholds justice."
        ],
        "rules": "Ariya either upholds justice or makes rulings, but these are distinct aspects of her role as a judge.",
        "conclusion": "Ariya does not make rulings."
      },
      {
        "facts": [
          "Ariya does not make rulings."
        ],
        "rules": "A judge either makes rulings or reviews cases, but not necessarily both at the same time.",
        "conclusion": "Ariya reviews a case."
      },
      {
        "facts": [
          "Ariya reviews a case.",
          "Ariya considers testimony."
        ],
        "rules": "Any judge who reviews a case or considers testimony can weigh evidence.",
        "conclusion": "Ariya weighs the evidence."
      },
      {
        "facts": [
          "Ariya follows the law.",
          "Ariya weighs the evidence."
        ],
        "rules": "If a judge follows the law and weighs evidence, then they are impartial.",
        "conclusion": "Ariya is impartial."
      },
      {
        "facts": [
          "Ariya is impartial.",
          "Ariya is not respected."
        ],
        "rules": "If Ariya is impartial, then she is either respected or influential, but not both.",
        "conclusion": "Ariya is influential."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "upholds_justice(Ariya)"
        ],
        "rules": "upholds_justice(Ariya) ⊕ makes_rulings(Ariya)",
        "conclusion": "¬makes_rulings(Ariya)"
      },
      {
        "facts": [
          "¬makes_rulings(Ariya)"
        ],
        "rules": "∀x (makes_rulings(x) ⊕ reviews_case(x))",
        "conclusion": "reviews_case(Ariya)"
      },
      {
        "facts": [
          "reviews_case(Ariya)",
          "considers_testimony(Ariya)"
        ],
        "rules": "∀x ((reviews_case(x) ∨ considers_testimony(x)) → weighs_evidence(x))",
        "conclusion": "weighs_evidence(Ariya)"
      },
      {
        "facts": [
          "follows_law(Ariya)",
          "weighs_evidence(Ariya)"
        ],
        "rules": "∀x ((follows_law(x) ∧ weighs_evidence(x)) → impartial(x))",
        "conclusion": "impartial(Ariya)"
      },
      {
        "facts": [
          "impartial(Ariya)",
          "¬respected(Ariya)"
        ],
        "rules": "impartial(Ariya) → (respected(Ariya) ⊕ influential(Ariya))",
        "conclusion": "influential(Ariya)"
      }
    ],
    "conclusion": "Ariya is influential.",
    "conclusion_fol": "influential(Ariya)",
    "answer": "True",
    "context": [
      "Ariya upholds justice.",
      "Ariya either upholds justice or makes rulings, but these are distinct aspects of her role as a judge.",
      "A judge either makes rulings or reviews cases, but not necessarily both at the same time.",
      "Ariya considers testimony.",
      "Any judge who reviews a case or considers testimony can weigh evidence.",
      "Ariya follows the law.",
      "If a judge follows the law and weighs evidence, then they are impartial.",
      "Ariya is not respected.",
      "If Ariya is impartial, then she is either respected or influential, but not both."
    ],
    "context_fol": [
      "upholds_justice(Ariya)",
      "upholds_justice(Ariya) ⊕ makes_rulings(Ariya)",
      "∀x (makes_rulings(x) ⊕ reviews_case(x))",
      "considers_testimony(Ariya)",
      "∀x ((reviews_case(x) ∨ considers_testimony(x)) → weighs_evidence(x))",
      "follows_law(Ariya)",
      "∀x ((follows_law(x) ∧ weighs_evidence(x)) → impartial(x))",
      "¬respected(Ariya)",
      "impartial(Ariya) → (respected(Ariya) ⊕ influential(Ariya))"
    ],
    "background_story": "Ariya was a renowned judge celebrated for her unbiased approach to justice. She had a reputation for considering every case on its merits, without being swayed by personal opinions or external pressures. Ariya's commitment to fairness and equality led her to become a leading figure in judicial reform, advocating for policies that promoted transparency and accountability. In a high-profile case that sparked national debate, Ariya's impartial verdict was widely praised for its thoroughness and lack of bias. Her dedication to upholding the principles of justice earned her the respect of her peers, the trust of the public, and a place in history as one of the most unbiased judges of her time.",
    "name": "Ariya",
    "keyword": "unbiased",
    "subject_category": "judge"
  },
  {
    "facts": [
      "Faith protects oceans.",
      "Faith loves the aquatic world.",
      "Faith explores nature.",
      "Faith teaches youth.",
      "Faith leads projects."
    ],
    "facts_fol": [
      "protect_oceans(Faith)",
      "loves_aquatic(Faith)",
      "explore_nature(Faith)",
      "teach_youth(Faith)",
      "lead_projects(Faith)"
    ],
    "rules": [
      "For all humans, if someone is dedicated to conservation, then they make a positive impact and inspire others.",
      "Anyone who studies marine life or protects oceans is dedicated to conservation.",
      "If Faith loves the aquatic world and researches ecology, then she studies marine life.",
      "If Faith explores nature, then she cares about the environment and researches ecology.",
      "If Faith either teaches youth or leads projects (but not both), then she inspires others."
    ],
    "rules_fol": [
      "∀x (dedicated_to_conservation(x) → (make_positive_impact(x) ∧ inspire_others(x)))",
      "∀x ((study_marine_life(x) ∨ protect_oceans(x)) → dedicated_to_conservation(x))",
      "(loves_aquatic(Faith) ∧ researches_ecology(Faith)) → study_marine_life(Faith)",
      "explore_nature(Faith) → (care_environment(Faith) ∧ researches_ecology(Faith))",
      "(teach_youth(Faith) ⊕ lead_projects(Faith)) → inspire_others(Faith)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Anyone who saves turtles is dedicated to conservation.",
      "If someone either examines the sea or tracks turtles (but not both), then they study marine life.",
      "Faith helps animals or researches ecology.",
      "If Faith works selflessly, then she either inspires others or leads by example, but not both."
    ],
    "distracting_rules_fol": [
      "∀x (saves_turtles(x) → dedicated_to_conservation(x))",
      "∀x ((examines_sea(x) ⊕ tracks_turtles(x)) → study_marine_life(x))",
      "helps_animals(Faith) ∨ researches_ecology(Faith)",
      "works_selflessly(Faith) → (inspire_others(Faith) ⊕ leads_by_example(Faith))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Faith teaches youth.",
          "Faith leads projects."
        ],
        "rules": "If Faith either teaches youth or leads projects (but not both), then she inspires others.",
        "conclusion": null
      },
      {
        "facts": [
          "Faith explores nature."
        ],
        "rules": "If Faith explores nature, then she cares about the environment and researches ecology.",
        "conclusion": "Faith researches ecology."
      },
      {
        "facts": [
          "Faith loves the aquatic world.",
          "Faith researches ecology."
        ],
        "rules": "If Faith loves the aquatic world and researches ecology, then she studies marine life.",
        "conclusion": "Faith studies marine life."
      },
      {
        "facts": [
          "Faith studies marine life.",
          "Faith protects oceans."
        ],
        "rules": "Anyone who studies marine life or protects oceans is dedicated to conservation.",
        "conclusion": "Faith is dedicated to conservation."
      },
      {
        "facts": [
          "Faith is dedicated to conservation."
        ],
        "rules": "For all humans, if someone is dedicated to conservation, then they make a positive impact and inspire others.",
        "conclusion": "Faith makes a positive impact."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "teach_youth(Faith)",
          "lead_projects(Faith)"
        ],
        "rules": "(teach_youth(Faith) ⊕ lead_projects(Faith)) → inspire_others(Faith)",
        "conclusion": null
      },
      {
        "facts": [
          "explore_nature(Faith)"
        ],
        "rules": "explore_nature(Faith) → (care_environment(Faith) ∧ researches_ecology(Faith))",
        "conclusion": "researches_ecology(Faith)"
      },
      {
        "facts": [
          "loves_aquatic(Faith)",
          "researches_ecology(Faith)"
        ],
        "rules": "(loves_aquatic(Faith) ∧ researches_ecology(Faith)) → study_marine_life(Faith)",
        "conclusion": "study_marine_life(Faith)"
      },
      {
        "facts": [
          "study_marine_life(Faith)",
          "protect_oceans(Faith)"
        ],
        "rules": "∀x ((study_marine_life(x) ∨ protect_oceans(x)) → dedicated_to_conservation(x))",
        "conclusion": "dedicated_to_conservation(Faith)"
      },
      {
        "facts": [
          "dedicated_to_conservation(Faith)"
        ],
        "rules": "∀x (dedicated_to_conservation(x) → (make_positive_impact(x) ∧ inspire_others(x)))",
        "conclusion": "make_positive_impact(Faith)"
      }
    ],
    "conclusion": "Faith makes a positive impact.",
    "conclusion_fol": "make_positive_impact(Faith)",
    "answer": "True",
    "context": [
      "Faith teaches youth.",
      "Faith leads projects.",
      "If Faith either teaches youth or leads projects (but not both), then she inspires others.",
      "Faith explores nature.",
      "If Faith explores nature, then she cares about the environment and researches ecology.",
      "Faith loves the aquatic world.",
      "If Faith loves the aquatic world and researches ecology, then she studies marine life.",
      "Faith protects oceans.",
      "Anyone who studies marine life or protects oceans is dedicated to conservation.",
      "For all humans, if someone is dedicated to conservation, then they make a positive impact and inspire others."
    ],
    "context_fol": [
      "teach_youth(Faith)",
      "lead_projects(Faith)",
      "(teach_youth(Faith) ⊕ lead_projects(Faith)) → inspire_others(Faith)",
      "explore_nature(Faith)",
      "explore_nature(Faith) → (care_environment(Faith) ∧ researches_ecology(Faith))",
      "loves_aquatic(Faith)",
      "(loves_aquatic(Faith) ∧ researches_ecology(Faith)) → study_marine_life(Faith)",
      "protect_oceans(Faith)",
      "∀x ((study_marine_life(x) ∨ protect_oceans(x)) → dedicated_to_conservation(x))",
      "∀x (dedicated_to_conservation(x) → (make_positive_impact(x) ∧ inspire_others(x)))"
    ],
    "background_story": "Faith was a marine biologist with a deep passion for the aquatic world. Growing up near the ocean, she spent most of her childhood exploring the tide pools and coral reefs. Her fascination with the underwater ecosystem led her to dedicate her life to studying and protecting marine life. Faith's research focused on the conservation of sea turtles and the impact of pollution on aquatic ecosystems. She spent years working with local communities to develop sustainable fishing practices and establish marine protected areas. Faith's love for the aquatic world inspired a new generation of scientists and conservationists, earning her the nickname 'The Ocean Guardian'. Her work continues to make a significant impact on the preservation of our planet's precious aquatic resources.",
    "name": "Faith",
    "keyword": "aquatic",
    "subject_category": "human"
  },
  {
    "facts": [
      "Clementine does not raise chicks.",
      "Clementine avoids hunters.",
      "Clementine has wings.",
      "Clementine navigates the skies.",
      "Clementine lays eggs."
    ],
    "facts_fol": [
      "¬raise_chicks(Clementine)",
      "avoid_hunters(Clementine)",
      "has_wings(Clementine)",
      "navigates_skies(Clementine)",
      "lays_eggs(Clementine)"
    ],
    "rules": [
      "Note: Although the background story is about a butterfly, the logic expression applies to birds. If a bird migrates long distance, then it either faces predators or finds food, but not both.",
      "If a bird crosses oceans, then it either avoids hunters or migrates long distance, but not both.",
      "If Clementine has wings and navigates skies, then she can cross oceans.",
      "If a bird either builds nests or raises chicks (but not both), then it faces predators.",
      "Clementine either lays eggs or builds nests, but not both at the same time."
    ],
    "rules_fol": [
      "migrate_long_distance(Clementine) → (face_predators(Clementine) ⊕ find_food(Clementine))",
      "cross_oceans(Clementine) → (avoid_hunters(Clementine) ⊕ migrate_long_distance(Clementine))",
      "(has_wings(Clementine) ∧ navigates_skies(Clementine)) → cross_oceans(Clementine)",
      "(build_nests(Clementine) ⊕ raise_chicks(Clementine)) → face_predators(Clementine)",
      "lays_eggs(Clementine) ⊕ build_nests(Clementine)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "All birds that follow the sun and travel in flocks migrate long distances.",
      "If Clementine rides wind and follows stars, then she can cross oceans.",
      "If a bird flies at night, then it will face predators.",
      "All birds that gather twigs and find shelter build nests."
    ],
    "distracting_rules_fol": [
      "∀x ((follows_sun(x) ∧ travels_flocks(x)) → migrate_long_distance(x))",
      "(rides_wind(Clementine) ∧ follows_stars(Clementine)) → cross_oceans(Clementine)",
      "fly_at_night(Clementine) → face_predators(Clementine)",
      "∀x ((gathers_twigs(x) ∧ finds_shelter(x)) → build_nests(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Clementine lays eggs."
        ],
        "rules": "Clementine either lays eggs or builds nests, but not both at the same time.",
        "conclusion": "Clementine does not build nests."
      },
      {
        "facts": [
          "Clementine does not build nests.",
          "Clementine does not raise chicks."
        ],
        "rules": "If a bird either builds nests or raises chicks (but not both), then it faces predators.",
        "conclusion": null
      },
      {
        "facts": [
          "Clementine has wings.",
          "Clementine navigates the skies."
        ],
        "rules": "If Clementine has wings and navigates skies, then she can cross oceans.",
        "conclusion": "Clementine crosses oceans."
      },
      {
        "facts": [
          "Clementine crosses oceans.",
          "Clementine avoids hunters."
        ],
        "rules": "If a bird crosses oceans, then it either avoids hunters or migrates long distance, but not both.",
        "conclusion": "Clementine does not migrate a long distance."
      },
      {
        "facts": [
          "Clementine does not migrate a long distance."
        ],
        "rules": "Note: Although the background story is about a butterfly, the logic expression applies to birds. If a bird migrates long distance, then it either faces predators or finds food, but not both.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "lays_eggs(Clementine)"
        ],
        "rules": "lays_eggs(Clementine) ⊕ build_nests(Clementine)",
        "conclusion": "¬build_nests(Clementine)"
      },
      {
        "facts": [
          "¬build_nests(Clementine)",
          "¬raise_chicks(Clementine)"
        ],
        "rules": "(build_nests(Clementine) ⊕ raise_chicks(Clementine)) → face_predators(Clementine)",
        "conclusion": null
      },
      {
        "facts": [
          "has_wings(Clementine)",
          "navigates_skies(Clementine)"
        ],
        "rules": "(has_wings(Clementine) ∧ navigates_skies(Clementine)) → cross_oceans(Clementine)",
        "conclusion": "cross_oceans(Clementine)"
      },
      {
        "facts": [
          "cross_oceans(Clementine)",
          "avoid_hunters(Clementine)"
        ],
        "rules": "cross_oceans(Clementine) → (avoid_hunters(Clementine) ⊕ migrate_long_distance(Clementine))",
        "conclusion": "¬migrate_long_distance(Clementine)"
      },
      {
        "facts": [
          "¬migrate_long_distance(Clementine)"
        ],
        "rules": "migrate_long_distance(Clementine) → (face_predators(Clementine) ⊕ find_food(Clementine))",
        "conclusion": null
      }
    ],
    "conclusion": "Clementine finds food.",
    "conclusion_fol": "find_food(Clementine)",
    "answer": "Uncertain",
    "context": [
      "Clementine lays eggs.",
      "Clementine either lays eggs or builds nests, but not both at the same time.",
      "Clementine does not raise chicks.",
      "If a bird either builds nests or raises chicks (but not both), then it faces predators.",
      "Clementine has wings.",
      "Clementine navigates the skies.",
      "If Clementine has wings and navigates skies, then she can cross oceans.",
      "Clementine avoids hunters.",
      "If a bird crosses oceans, then it either avoids hunters or migrates long distance, but not both.",
      "Note: Although the background story is about a butterfly, the logic expression applies to birds. If a bird migrates long distance, then it either faces predators or finds food, but not both."
    ],
    "context_fol": [
      "lays_eggs(Clementine)",
      "lays_eggs(Clementine) ⊕ build_nests(Clementine)",
      "¬raise_chicks(Clementine)",
      "(build_nests(Clementine) ⊕ raise_chicks(Clementine)) → face_predators(Clementine)",
      "has_wings(Clementine)",
      "navigates_skies(Clementine)",
      "(has_wings(Clementine) ∧ navigates_skies(Clementine)) → cross_oceans(Clementine)",
      "avoid_hunters(Clementine)",
      "cross_oceans(Clementine) → (avoid_hunters(Clementine) ⊕ migrate_long_distance(Clementine))",
      "migrate_long_distance(Clementine) → (face_predators(Clementine) ⊕ find_food(Clementine))"
    ],
    "background_story": "Clementine was a majestic monarch butterfly who made the incredible journey from Canada to Mexico each year. Her migration was a testament to her resilience and determination. Every autumn, she would join thousands of her kin, flying thousands of miles to reach their wintering grounds. Along the way, she faced numerous challenges, from treacherous storms to scarce food sources. Yet, Clementine persevered, relying on her innate navigation skills and the wisdom of her ancestors. As she soared through the skies, she marveled at the breathtaking landscapes below, from the Great Lakes to the Gulf of Mexico. Upon reaching her destination, Clementine would rest and replenish, preparing for the return journey in the spring. Her migration was a remarkable feat, a true wonder of nature.",
    "name": "Clementine",
    "keyword": "migration",
    "subject_category": "bird"
  },
  {
    "facts": [
      "Stefan seeks refuge.",
      "Stefan fights against injustice.",
      "Stefan leads a movement."
    ],
    "facts_fol": [
      "seeks_refuge(Stefan)",
      "fights_injustice(Stefan)",
      "leads_movement(Stefan)"
    ],
    "rules": [
      "If Stefan speaks out against injustice, then he will either face persecution or inspire others, but not both.",
      "If Stefan defies authority, then he will face persecution.",
      "Stefan either seeks refuge or defies authority, but not both at the same time.",
      "If Stefan fights against injustice, then he will either lead a movement or speak out against it, but not both."
    ],
    "rules_fol": [
      "speaks_out(Stefan) → (faces_persecution(Stefan) ⊕ inspires_others(Stefan))",
      "defies_authority(Stefan) → faces_persecution(Stefan)",
      "seeks_refuge(Stefan) ⊕ defies_authority(Stefan)",
      "fights_injustice(Stefan) → (leads_movement(Stefan) ⊕ speaks_out(Stefan))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Stefan challenges the regime, then he will face persecution.",
      "If Stefan challenges the status quo, then he will either take a risk or defy authority, but not both.",
      "All individuals with strong convictions who speak out will also take risks."
    ],
    "distracting_rules_fol": [
      "challenges_regime(Stefan) → faces_persecution(Stefan)",
      "challenges_status_quo(Stefan) → (takes_risk(Stefan) ⊕ defies_authority(Stefan))",
      "∀x (has_convictions(x) → (speaks_out(x) ∧ takes_risks(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Stefan fights against injustice.",
          "Stefan leads a movement."
        ],
        "rules": "If Stefan fights against injustice, then he will either lead a movement or speak out against it, but not both.",
        "conclusion": "Stefan does not speak out against injustice."
      },
      {
        "facts": [
          "Stefan seeks refuge."
        ],
        "rules": "Stefan either seeks refuge or defies authority, but not both at the same time.",
        "conclusion": "Stefan does not defy authority."
      },
      {
        "facts": [
          "Stefan does not defy authority."
        ],
        "rules": "If Stefan defies authority, then he will face persecution.",
        "conclusion": null
      },
      {
        "facts": [
          "Stefan does not speak out against injustice."
        ],
        "rules": "If Stefan speaks out against injustice, then he will either face persecution or inspire others, but not both.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "fights_injustice(Stefan)",
          "leads_movement(Stefan)"
        ],
        "rules": "fights_injustice(Stefan) → (leads_movement(Stefan) ⊕ speaks_out(Stefan))",
        "conclusion": "¬speaks_out(Stefan)"
      },
      {
        "facts": [
          "seeks_refuge(Stefan)"
        ],
        "rules": "seeks_refuge(Stefan) ⊕ defies_authority(Stefan)",
        "conclusion": "¬defies_authority(Stefan)"
      },
      {
        "facts": [
          "¬defies_authority(Stefan)"
        ],
        "rules": "defies_authority(Stefan) → faces_persecution(Stefan)",
        "conclusion": null
      },
      {
        "facts": [
          "¬speaks_out(Stefan)"
        ],
        "rules": "speaks_out(Stefan) → (faces_persecution(Stefan) ⊕ inspires_others(Stefan))",
        "conclusion": null
      }
    ],
    "conclusion": "Stefan inspires others.",
    "conclusion_fol": "inspires_others(Stefan)",
    "answer": "Uncertain",
    "context": [
      "Stefan fights against injustice.",
      "Stefan leads a movement.",
      "If Stefan fights against injustice, then he will either lead a movement or speak out against it, but not both.",
      "Stefan seeks refuge.",
      "Stefan either seeks refuge or defies authority, but not both at the same time.",
      "If Stefan defies authority, then he will face persecution.",
      "If Stefan speaks out against injustice, then he will either face persecution or inspire others, but not both."
    ],
    "context_fol": [
      "fights_injustice(Stefan)",
      "leads_movement(Stefan)",
      "fights_injustice(Stefan) → (leads_movement(Stefan) ⊕ speaks_out(Stefan))",
      "seeks_refuge(Stefan)",
      "seeks_refuge(Stefan) ⊕ defies_authority(Stefan)",
      "defies_authority(Stefan) → faces_persecution(Stefan)",
      "speaks_out(Stefan) → (faces_persecution(Stefan) ⊕ inspires_others(Stefan))"
    ],
    "background_story": "Stefan, once a prominent figure in his homeland, found himself forced into exile after speaking out against the oppressive regime. His courageous stance against injustice had made him a target, and he was given an ultimatum: leave or face imprisonment. With a heavy heart, Stefan bid farewell to his family and friends, embarking on a journey to a foreign land. Despite the challenges of adapting to a new culture and language, he continued to advocate for the freedom of his people. From afar, Stefan's voice remained a powerful symbol of resistance, inspiring others to stand up for their rights. Though separated from his homeland, his spirit remained unbroken, fueled by the hope of one day returning to a free and just society.",
    "name": "Stefan",
    "keyword": "exile",
    "subject_category": "human"
  },
  {
    "facts": [
      "Heaven helps mortals.",
      "Heaven walks among humans.",
      "Heaven is apterous.",
      "Heaven is not mortal."
    ],
    "facts_fol": [
      "help_mortals(Heaven)",
      "walk_among_humans(Heaven)",
      "is_apterous(Heaven)",
      "¬is_mortal(Heaven)"
    ],
    "rules": [
      "Heaven either possesses wings or has a special gift, but not both.",
      "If Heaven is apterous, then she either walks among humans or connects with other angels, but not both.",
      "All angels who can fly have wings.",
      "Heaven is either mortal or can fly, but not both."
    ],
    "rules_fol": [
      "possess_wings(Heaven) ⊕ have_a_special_gift(Heaven)",
      "is_apterous(Heaven) → (walk_among_humans(Heaven) ⊕ connect_with_angels(Heaven))",
      "∀x (can_fly(x) → possess_wings(x))",
      "is_mortal(Heaven) ⊕ can_fly(Heaven)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Heaven either senses emotions or reads thoughts (but not both), then she has a special gift.",
      "If Heaven understands struggles or shows compassion, then she can connect with other angels.",
      "If Heaven lives in heaven and has a halo, then she possesses wings.",
      "If Heaven either soars high or glides easily (but not both), then she is able to fly."
    ],
    "distracting_rules_fol": [
      "(sense_emotions(Heaven) ⊕ read_thoughts(Heaven)) → have_a_special_gift(Heaven)",
      "(understand_struggles(Heaven) ∨ show_compassion(Heaven)) → connect_with_angels(Heaven)",
      "(live_in_heaven(Heaven) ∧ have_halo(Heaven)) → possess_wings(Heaven)",
      "(soar_high(Heaven) ⊕ glide_easily(Heaven)) → can_fly(Heaven)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Heaven is not mortal."
        ],
        "rules": "Heaven is either mortal or can fly, but not both.",
        "conclusion": "Heaven can fly."
      },
      {
        "facts": [
          "Heaven can fly."
        ],
        "rules": "All angels who can fly have wings.",
        "conclusion": "Heaven possesses wings."
      },
      {
        "facts": [
          "Heaven is apterous.",
          "Heaven walks among humans."
        ],
        "rules": "If Heaven is apterous, then she either walks among humans or connects with other angels, but not both.",
        "conclusion": "Heaven does not connect with other angels."
      },
      {
        "facts": [
          "Heaven possesses wings."
        ],
        "rules": "Heaven either possesses wings or has a special gift, but not both.",
        "conclusion": "Heaven does not have a special gift."
      },
      {
        "facts": [
          "Heaven does not have a special gift.",
          "Heaven helps mortals.",
          "Heaven does not connect with other angels."
        ],
        "rules": null,
        "conclusion": "Heaven has a special gift and either helps mortals or connects with other angels (or both)."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬is_mortal(Heaven)"
        ],
        "rules": "is_mortal(Heaven) ⊕ can_fly(Heaven)",
        "conclusion": "can_fly(Heaven)"
      },
      {
        "facts": [
          "can_fly(Heaven)"
        ],
        "rules": "∀x (can_fly(x) → possess_wings(x))",
        "conclusion": "possess_wings(Heaven)"
      },
      {
        "facts": [
          "is_apterous(Heaven)",
          "walk_among_humans(Heaven)"
        ],
        "rules": "is_apterous(Heaven) → (walk_among_humans(Heaven) ⊕ connect_with_angels(Heaven))",
        "conclusion": "¬connect_with_angels(Heaven)"
      },
      {
        "facts": [
          "possess_wings(Heaven)"
        ],
        "rules": "possess_wings(Heaven) ⊕ have_a_special_gift(Heaven)",
        "conclusion": "¬have_a_special_gift(Heaven)"
      },
      {
        "facts": [
          "¬have_a_special_gift(Heaven)",
          "help_mortals(Heaven)",
          "¬connect_with_angels(Heaven)"
        ],
        "rules": null,
        "conclusion": "have_a_special_gift(Heaven) ∧ (help_mortals(Heaven) ∨ connect_with_angels(Heaven))"
      }
    ],
    "conclusion": "Heaven has a special gift and either helps mortals or connects with other angels (or both).",
    "conclusion_fol": "have_a_special_gift(Heaven) ∧ (help_mortals(Heaven) ∨ connect_with_angels(Heaven))",
    "answer": "False",
    "context": [
      "Heaven is not mortal.",
      "Heaven is either mortal or can fly, but not both.",
      "All angels who can fly have wings.",
      "Heaven is apterous.",
      "Heaven walks among humans.",
      "If Heaven is apterous, then she either walks among humans or connects with other angels, but not both.",
      "Heaven either possesses wings or has a special gift, but not both.",
      "Heaven helps mortals."
    ],
    "context_fol": [
      "¬is_mortal(Heaven)",
      "is_mortal(Heaven) ⊕ can_fly(Heaven)",
      "∀x (can_fly(x) → possess_wings(x))",
      "is_apterous(Heaven)",
      "walk_among_humans(Heaven)",
      "is_apterous(Heaven) → (walk_among_humans(Heaven) ⊕ connect_with_angels(Heaven))",
      "possess_wings(Heaven) ⊕ have_a_special_gift(Heaven)",
      "help_mortals(Heaven)"
    ],
    "background_story": "Heaven was a unique and mystical being, born without wings, a condition known as apterous. In a realm where angels were defined by their ability to soar through the skies, Heaven felt like an outcast. However, she discovered that her apterous nature granted her a special gift - the ability to connect with the mortal world in ways others couldn't. Heaven used her gift to help those in need, walking among humans and understanding their struggles. Her lack of wings became a blessing, allowing her to form deep and meaningful bonds with those she helped. As she worked tirelessly to assist others, Heaven's beauty and kindness earned her a special place in the hearts of both angels and mortals, proving that sometimes, it's our differences that make us truly special.",
    "name": "Heaven",
    "keyword": "apterous",
    "subject_category": "angel"
  },
  {
    "facts": [
      "Krew navigates challenges.",
      "Krew explores.",
      "Krew reads signs."
    ],
    "facts_fol": [
      "navigates_challenges(Krew)",
      "explores(Krew)",
      "reads_signs(Krew)"
    ],
    "rules": [
      "For every adventurer, they are either experienced or inexperienced, but not both.",
      "If Krew has skills or takes risks, then he is experienced.",
      "If Krew either maps terrain or navigates challenges (but not both), then he has skills.",
      "All adventurers who explore are willing to take risks.",
      "Krew either reads signs or maps terrain, but not both."
    ],
    "rules_fol": [
      "∀x (experienced(x) ⊕ inexperienced(x))",
      "(has_skills(Krew) ∨ takes_risks(Krew)) → experienced(Krew)",
      "(maps_terrain(Krew) ⊕ navigates_challenges(Krew)) → has_skills(Krew)",
      "∀x (explores(x) → takes_risks(x))",
      "reads_signs(Krew) ⊕ maps_terrain(Krew)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Krew ventures outdoors, then he is either seasoned or seeks discovery, but not both.",
      "If an adventurer learns quickly and stays focused, then they have skills.",
      "Any adventurer who seeks thrills or faces fears takes risks.",
      "Every adventurer who ventures outdoors either discovers hidden wonders or maps terrain (or both)."
    ],
    "distracting_rules_fol": [
      "ventures_outdoors(Krew) → (seeks_discovery(Krew) ⊕ experienced(Krew))",
      "∀x ((learns_fast(x) ∧ stays_focused(x)) → has_skills(x))",
      "∀x ((seeks_thrills(x) ∨ faces_fears(x)) → takes_risks(x))",
      "∀x (ventures_outdoors(x) → (discovers_hidden_wonders(x) ∨ maps_terrain(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Krew reads signs."
        ],
        "rules": "Krew either reads signs or maps terrain, but not both.",
        "conclusion": "Krew does not map terrain."
      },
      {
        "facts": [
          "Krew explores."
        ],
        "rules": "All adventurers who explore are willing to take risks.",
        "conclusion": "Krew takes risks."
      },
      {
        "facts": [
          "Krew does not map terrain.",
          "Krew navigates challenges."
        ],
        "rules": "If Krew either maps terrain or navigates challenges (but not both), then he has skills.",
        "conclusion": "Krew has skills."
      },
      {
        "facts": [
          "Krew has skills.",
          "Krew takes risks."
        ],
        "rules": "If Krew has skills or takes risks, then he is experienced.",
        "conclusion": "Krew is an experienced adventurer."
      },
      {
        "facts": [
          "Krew is an experienced adventurer."
        ],
        "rules": "For every adventurer, they are either experienced or inexperienced, but not both.",
        "conclusion": "Krew is an inexperienced adventurer."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "reads_signs(Krew)"
        ],
        "rules": "reads_signs(Krew) ⊕ maps_terrain(Krew)",
        "conclusion": "¬maps_terrain(Krew)"
      },
      {
        "facts": [
          "explores(Krew)"
        ],
        "rules": "∀x (explores(x) → takes_risks(x))",
        "conclusion": "takes_risks(Krew)"
      },
      {
        "facts": [
          "¬maps_terrain(Krew)",
          "navigates_challenges(Krew)"
        ],
        "rules": "(maps_terrain(Krew) ⊕ navigates_challenges(Krew)) → has_skills(Krew)",
        "conclusion": "has_skills(Krew)"
      },
      {
        "facts": [
          "has_skills(Krew)",
          "takes_risks(Krew)"
        ],
        "rules": "(has_skills(Krew) ∨ takes_risks(Krew)) → experienced(Krew)",
        "conclusion": "experienced(Krew)"
      },
      {
        "facts": [
          "experienced(Krew)"
        ],
        "rules": "∀x (experienced(x) ⊕ inexperienced(x))",
        "conclusion": "inexperienced(Krew)"
      }
    ],
    "conclusion": "Krew is an inexperienced adventurer.",
    "conclusion_fol": "inexperienced(Krew)",
    "answer": "False",
    "context": [
      "Krew reads signs.",
      "Krew either reads signs or maps terrain, but not both.",
      "Krew explores.",
      "All adventurers who explore are willing to take risks.",
      "Krew navigates challenges.",
      "If Krew either maps terrain or navigates challenges (but not both), then he has skills.",
      "If Krew has skills or takes risks, then he is experienced.",
      "For every adventurer, they are either experienced or inexperienced, but not both."
    ],
    "context_fol": [
      "reads_signs(Krew)",
      "reads_signs(Krew) ⊕ maps_terrain(Krew)",
      "explores(Krew)",
      "∀x (explores(x) → takes_risks(x))",
      "navigates_challenges(Krew)",
      "(maps_terrain(Krew) ⊕ navigates_challenges(Krew)) → has_skills(Krew)",
      "(has_skills(Krew) ∨ takes_risks(Krew)) → experienced(Krew)",
      "∀x (experienced(x) ⊕ inexperienced(x))"
    ],
    "background_story": "Krew was an avid explorer with a passion for uncovering the secrets of the American West. His latest obsession was the vast and mysterious canyon system that carved its way through the Arizona landscape. For weeks, Krew hiked and camped along the canyon's rim, marveling at the sheer scale and beauty of the natural wonder. One day, he stumbled upon an ancient trail that led him deep into the canyon's heart. As he descended, the walls rose up around him, casting long shadows and revealing hidden waterfalls. Krew spent hours navigating the treacherous terrain, his senses heightened by the majesty of the canyon. He discovered hidden caves, ancient petroglyphs, and a sense of awe that stayed with him long after he emerged back into the desert sunlight.",
    "name": "Krew",
    "keyword": "canyon",
    "subject_category": "adventurer"
  },
  {
    "facts": [
      "Amirah studies nocturnal birds.",
      "Amirah researches bird behaviors.",
      "Amirah is an expert researcher.",
      "Amirah collects samples.",
      "Amirah does not identify species.",
      "Amirah tracks migrations."
    ],
    "facts_fol": [
      "study_nocturnal_birds(Amirah)",
      "research_bird_behaviors(Amirah)",
      "expert_researcher(Amirah)",
      "collect_samples(Amirah)",
      "¬identify_species(Amirah)",
      "track_migrations(Amirah)"
    ],
    "rules": [
      "For all ornithologists, if someone studies nocturnal birds, then they either travel extensively or contribute to conservation (or both).",
      "If Amirah researches bird behaviors, then she either publishes papers or contributes to conservation, but not both.",
      "If Amirah either analyzes data or leads expeditions (but not both), then she publishes papers.",
      "If Amirah is an expert researcher, then she either collects samples or analyzes data, but not both.",
      "If Amirah identifies species or tracks migrations, then she can lead expeditions."
    ],
    "rules_fol": [
      "∀x (study_nocturnal_birds(x) → (travel_extensively(x) ∨ contribute_to_conservation(x)))",
      "research_bird_behaviors(Amirah) → (publish_papers(Amirah) ⊕ contribute_to_conservation(Amirah))",
      "(analyze_data(Amirah) ⊕ lead_expeditions(Amirah)) → publish_papers(Amirah)",
      "expert_researcher(Amirah) → (collect_samples(Amirah) ⊕ analyze_data(Amirah))",
      "(identify_species(Amirah) ∨ track_migrations(Amirah)) → lead_expeditions(Amirah)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Amirah specializes in raptors, then she either contributes to conservation or protects wildlife habitats, but not both.",
      "All ornithologists who make discoveries will publish papers.",
      "Any ornithologist who observes birds or records findings can analyze data.",
      "Any ornithologist who has funding or has equipment can lead expeditions."
    ],
    "distracting_rules_fol": [
      "specialize_in_raptors(Amirah) → (contribute_to_conservation(Amirah) ⊕ protect_wildlife_habitats(Amirah))",
      "∀x (makes_discoveries(x) → publish_papers(x))",
      "∀x ((observe_birds(x) ∨ record_findings(x)) → analyze_data(x))",
      "∀x ((has_funding(x) ∨ has_equipment(x)) → lead_expeditions(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Amirah does not identify species.",
          "Amirah tracks migrations."
        ],
        "rules": "If Amirah identifies species or tracks migrations, then she can lead expeditions.",
        "conclusion": "Amirah leads expeditions."
      },
      {
        "facts": [
          "Amirah is an expert researcher.",
          "Amirah collects samples."
        ],
        "rules": "If Amirah is an expert researcher, then she either collects samples or analyzes data, but not both.",
        "conclusion": "Amirah does not analyze data."
      },
      {
        "facts": [
          "Amirah does not analyze data.",
          "Amirah leads expeditions."
        ],
        "rules": "If Amirah either analyzes data or leads expeditions (but not both), then she publishes papers.",
        "conclusion": "Amirah publishes papers."
      },
      {
        "facts": [
          "Amirah researches bird behaviors.",
          "Amirah publishes papers."
        ],
        "rules": "If Amirah researches bird behaviors, then she either publishes papers or contributes to conservation, but not both.",
        "conclusion": "Amirah does not contribute to conservation."
      },
      {
        "facts": [
          "Amirah studies nocturnal birds.",
          "Amirah does not contribute to conservation."
        ],
        "rules": "For all ornithologists, if someone studies nocturnal birds, then they either travel extensively or contribute to conservation (or both).",
        "conclusion": "Amirah travels extensively."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬identify_species(Amirah)",
          "track_migrations(Amirah)"
        ],
        "rules": "(identify_species(Amirah) ∨ track_migrations(Amirah)) → lead_expeditions(Amirah)",
        "conclusion": "lead_expeditions(Amirah)"
      },
      {
        "facts": [
          "expert_researcher(Amirah)",
          "collect_samples(Amirah)"
        ],
        "rules": "expert_researcher(Amirah) → (collect_samples(Amirah) ⊕ analyze_data(Amirah))",
        "conclusion": "¬analyze_data(Amirah)"
      },
      {
        "facts": [
          "¬analyze_data(Amirah)",
          "lead_expeditions(Amirah)"
        ],
        "rules": "(analyze_data(Amirah) ⊕ lead_expeditions(Amirah)) → publish_papers(Amirah)",
        "conclusion": "publish_papers(Amirah)"
      },
      {
        "facts": [
          "research_bird_behaviors(Amirah)",
          "publish_papers(Amirah)"
        ],
        "rules": "research_bird_behaviors(Amirah) → (publish_papers(Amirah) ⊕ contribute_to_conservation(Amirah))",
        "conclusion": "¬contribute_to_conservation(Amirah)"
      },
      {
        "facts": [
          "study_nocturnal_birds(Amirah)",
          "¬contribute_to_conservation(Amirah)"
        ],
        "rules": "∀x (study_nocturnal_birds(x) → (travel_extensively(x) ∨ contribute_to_conservation(x)))",
        "conclusion": "travel_extensively(Amirah)"
      }
    ],
    "conclusion": "Amirah travels extensively.",
    "conclusion_fol": "travel_extensively(Amirah)",
    "answer": "True",
    "context": [
      "Amirah does not identify species.",
      "Amirah tracks migrations.",
      "If Amirah identifies species or tracks migrations, then she can lead expeditions.",
      "Amirah is an expert researcher.",
      "Amirah collects samples.",
      "If Amirah is an expert researcher, then she either collects samples or analyzes data, but not both.",
      "If Amirah either analyzes data or leads expeditions (but not both), then she publishes papers.",
      "Amirah researches bird behaviors.",
      "If Amirah researches bird behaviors, then she either publishes papers or contributes to conservation, but not both.",
      "Amirah studies nocturnal birds.",
      "For all ornithologists, if someone studies nocturnal birds, then they either travel extensively or contribute to conservation (or both)."
    ],
    "context_fol": [
      "¬identify_species(Amirah)",
      "track_migrations(Amirah)",
      "(identify_species(Amirah) ∨ track_migrations(Amirah)) → lead_expeditions(Amirah)",
      "expert_researcher(Amirah)",
      "collect_samples(Amirah)",
      "expert_researcher(Amirah) → (collect_samples(Amirah) ⊕ analyze_data(Amirah))",
      "(analyze_data(Amirah) ⊕ lead_expeditions(Amirah)) → publish_papers(Amirah)",
      "research_bird_behaviors(Amirah)",
      "research_bird_behaviors(Amirah) → (publish_papers(Amirah) ⊕ contribute_to_conservation(Amirah))",
      "study_nocturnal_birds(Amirah)",
      "∀x (study_nocturnal_birds(x) → (travel_extensively(x) ∨ contribute_to_conservation(x)))"
    ],
    "background_story": "Amirah was a renowned ornithologist with a passion for studying the nocturnal habits of birds, particularly those in the Burhinidae family, such as the stone-curlews and thick-knees. Her fascination with these birds began during her childhood in the deserts of North Africa, where she would often hear their haunting calls at dusk. Amirah dedicated her career to understanding the unique characteristics and adaptations of Burhinidae, traveling the world to observe them in their natural habitats. Her groundbreaking research on their nocturnal foraging behaviors and mating rituals earned her international recognition and accolades. Amirah's love for these birds inspired a new generation of ornithologists and conservationists to protect and preserve the habitats of these intriguing creatures.",
    "name": "Amirah",
    "keyword": "burhinidae",
    "subject_category": "ornithologist"
  },
  {
    "facts": [
      "Zayden faces challenges.",
      "Zayden does not find a mentor.",
      "Zayden learns quickly."
    ],
    "facts_fol": [
      "face_challenges(Zayden)",
      "¬find_mentor(Zayden)",
      "learns_quickly(Zayden)"
    ],
    "rules": [
      "If Zayden is determined, then he can either achieve success or help others, but not both.",
      "If Zayden faces challenges, then he either helps others or finds a mentor.",
      "Zayden sets goals or is determined.",
      "Either Zayden learns quickly or he sets goals, but not both simultaneously."
    ],
    "rules_fol": [
      "determined(Zayden) → (achieve_success(Zayden) ⊕ help_others(Zayden))",
      "face_challenges(Zayden) → (help_others(Zayden) ∨ find_mentor(Zayden))",
      "sets_goals(Zayden) ∨ determined(Zayden)",
      "learns_quickly(Zayden) ⊕ sets_goals(Zayden)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If someone gains knowledge and has passion, then they can help others.",
      "Zayden seeks knowledge or is determined.",
      "Anyone who pursues their passion either develops their skills or sets goals."
    ],
    "distracting_rules_fol": [
      "∀x ((gains_knowledge(x) ∧ has_passion(x)) → help_others(x))",
      "seeks_knowledge(Zayden) ∨ determined(Zayden)",
      "∀x (pursues_passion(x) → (develops_skills(x) ∨ sets_goals(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Zayden learns quickly."
        ],
        "rules": "Either Zayden learns quickly or he sets goals, but not both simultaneously.",
        "conclusion": "Zayden does not set goals."
      },
      {
        "facts": [
          "Zayden does not set goals."
        ],
        "rules": "Zayden sets goals or is determined.",
        "conclusion": "Zayden is determined."
      },
      {
        "facts": [
          "Zayden faces challenges.",
          "Zayden does not find a mentor."
        ],
        "rules": "If Zayden faces challenges, then he either helps others or finds a mentor.",
        "conclusion": "Zayden helps others."
      },
      {
        "facts": [
          "Zayden is determined.",
          "Zayden helps others."
        ],
        "rules": "If Zayden is determined, then he can either achieve success or help others, but not both.",
        "conclusion": "Zayden does not achieve success."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "learns_quickly(Zayden)"
        ],
        "rules": "learns_quickly(Zayden) ⊕ sets_goals(Zayden)",
        "conclusion": "¬sets_goals(Zayden)"
      },
      {
        "facts": [
          "¬sets_goals(Zayden)"
        ],
        "rules": "sets_goals(Zayden) ∨ determined(Zayden)",
        "conclusion": "determined(Zayden)"
      },
      {
        "facts": [
          "face_challenges(Zayden)",
          "¬find_mentor(Zayden)"
        ],
        "rules": "face_challenges(Zayden) → (help_others(Zayden) ∨ find_mentor(Zayden))",
        "conclusion": "help_others(Zayden)"
      },
      {
        "facts": [
          "determined(Zayden)",
          "help_others(Zayden)"
        ],
        "rules": "determined(Zayden) → (achieve_success(Zayden) ⊕ help_others(Zayden))",
        "conclusion": "¬achieve_success(Zayden)"
      }
    ],
    "conclusion": "Zayden does not achieve success.",
    "conclusion_fol": "¬achieve_success(Zayden)",
    "answer": "True",
    "context": [
      "Zayden learns quickly.",
      "Either Zayden learns quickly or he sets goals, but not both simultaneously.",
      "Zayden sets goals or is determined.",
      "Zayden faces challenges.",
      "Zayden does not find a mentor.",
      "If Zayden faces challenges, then he either helps others or finds a mentor.",
      "If Zayden is determined, then he can either achieve success or help others, but not both."
    ],
    "context_fol": [
      "learns_quickly(Zayden)",
      "learns_quickly(Zayden) ⊕ sets_goals(Zayden)",
      "sets_goals(Zayden) ∨ determined(Zayden)",
      "face_challenges(Zayden)",
      "¬find_mentor(Zayden)",
      "face_challenges(Zayden) → (help_others(Zayden) ∨ find_mentor(Zayden))",
      "determined(Zayden) → (achieve_success(Zayden) ⊕ help_others(Zayden))"
    ],
    "background_story": "Zayden's teenage years were a formative period that shaped his future. Growing up in a low-income household, he faced numerous challenges, but his determination to succeed drove him forward. A summer internship at a local tech firm exposed him to coding and software development, sparking a passion that would change his life. With the guidance of a mentor, Zayden spent countless hours honing his skills, eventually earning a full scholarship to a top-ranked university. This experience was formative in teaching him the value of hard work, resilience, and the impact of supportive relationships. As he navigated adulthood, Zayden carried these lessons with him, becoming a leading figure in his industry and dedicating himself to creating opportunities for underprivileged youth, ensuring they too could have formative experiences that propel them towards success.",
    "name": "Zayden",
    "keyword": "formative",
    "subject_category": "human"
  },
  {
    "facts": [
      "Emilio makes a good impression.",
      "Emilio does not have good taste.",
      "Emilio does not look refined.",
      "Emilio does not enjoy style."
    ],
    "facts_fol": [
      "makes_good_impression(Emilio)",
      "¬has_good_taste(Emilio)",
      "¬looks_refined(Emilio)",
      "¬enjoys_style(Emilio)"
    ],
    "rules": [
      "Emilio is either elegant or dresses well, but not both at the same time.",
      "If Emilio attends formal events, then he is either elegant or looks refined, but not both.",
      "Emilio enjoys style or attends formal events."
    ],
    "rules_fol": [
      "is_elegant(Emilio) ⊕ dresses_well(Emilio)",
      "attends_formal_events(Emilio) → (is_elegant(Emilio) ⊕ looks_refined(Emilio))",
      "enjoys_style(Emilio) ∨ attends_formal_events(Emilio)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Emilio chooses his outfit and matches colors, then he dresses well.",
      "If Emilio is confident, then he is elegant and respects others.",
      "Emilio wears suits or attends formal events."
    ],
    "distracting_rules_fol": [
      "(chooses_outfit(Emilio) ∧ matches_colors(Emilio)) → dresses_well(Emilio)",
      "confident(Emilio) → (is_elegant(Emilio) ∧ respects_others(Emilio))",
      "wears_suits(Emilio) ∨ attends_formal_events(Emilio)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Emilio does not enjoy style."
        ],
        "rules": "Emilio enjoys style or attends formal events.",
        "conclusion": "Emilio attends formal events."
      },
      {
        "facts": [
          "Emilio attends formal events.",
          "Emilio does not look refined."
        ],
        "rules": "If Emilio attends formal events, then he is either elegant or looks refined, but not both.",
        "conclusion": "Emilio is elegant."
      },
      {
        "facts": [
          "Emilio is elegant."
        ],
        "rules": "Emilio is either elegant or dresses well, but not both at the same time.",
        "conclusion": "Emilio does not dress well."
      },
      {
        "facts": [
          "Emilio does not dress well.",
          "Emilio does not have good taste.",
          "Emilio makes a good impression."
        ],
        "rules": null,
        "conclusion": "If Emilio dresses well or has good taste, then he makes a good impression."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬enjoys_style(Emilio)"
        ],
        "rules": "enjoys_style(Emilio) ∨ attends_formal_events(Emilio)",
        "conclusion": "attends_formal_events(Emilio)"
      },
      {
        "facts": [
          "attends_formal_events(Emilio)",
          "¬looks_refined(Emilio)"
        ],
        "rules": "attends_formal_events(Emilio) → (is_elegant(Emilio) ⊕ looks_refined(Emilio))",
        "conclusion": "is_elegant(Emilio)"
      },
      {
        "facts": [
          "is_elegant(Emilio)"
        ],
        "rules": "is_elegant(Emilio) ⊕ dresses_well(Emilio)",
        "conclusion": "¬dresses_well(Emilio)"
      },
      {
        "facts": [
          "¬dresses_well(Emilio)",
          "¬has_good_taste(Emilio)",
          "makes_good_impression(Emilio)"
        ],
        "rules": null,
        "conclusion": "(dresses_well(Emilio) ∨ has_good_taste(Emilio)) → makes_good_impression(Emilio)"
      }
    ],
    "conclusion": "If Emilio dresses well or has good taste, then he makes a good impression.",
    "conclusion_fol": "(dresses_well(Emilio) ∨ has_good_taste(Emilio)) → makes_good_impression(Emilio)",
    "answer": "True",
    "context": [
      "Emilio does not enjoy style.",
      "Emilio enjoys style or attends formal events.",
      "Emilio does not look refined.",
      "If Emilio attends formal events, then he is either elegant or looks refined, but not both.",
      "Emilio is either elegant or dresses well, but not both at the same time.",
      "Emilio does not have good taste.",
      "Emilio makes a good impression."
    ],
    "context_fol": [
      "¬enjoys_style(Emilio)",
      "enjoys_style(Emilio) ∨ attends_formal_events(Emilio)",
      "¬looks_refined(Emilio)",
      "attends_formal_events(Emilio) → (is_elegant(Emilio) ⊕ looks_refined(Emilio))",
      "is_elegant(Emilio) ⊕ dresses_well(Emilio)",
      "¬has_good_taste(Emilio)",
      "makes_good_impression(Emilio)"
    ],
    "background_story": "Emilio was a dapper gentleman who took great pride in his attire. Every morning, he would meticulously select his outfit, ensuring that every piece, from his crisp shirt to his perfectly knotted tie, was impeccably matched. His friends often joked that he was always 'togged to the nines,' a phrase that made Emilio chuckle with delight. For him, being well-dressed wasn't just about making a good impression; it was a sign of respect for himself and those around him. Whether attending a formal gala or simply running errands, Emilio's sartorial splendor made him stand out in a crowd. His love for fine clothing was more than just a quirk; it was an expression of his personality and a reflection of his joyful approach to life.",
    "name": "Emilio",
    "keyword": "togged",
    "subject_category": "human"
  },
  {
    "facts": [
      "Eliel lives in the wild.",
      "Eliel has magical powers.",
      "Eliel is a guardian.",
      "Eliel has claws.",
      "Eliel has healing abilities."
    ],
    "facts_fol": [
      "lives_wild(Eliel)",
      "has_magic(Eliel)",
      "guardian(Eliel)",
      "has_claws(Eliel)",
      "can_heal(Eliel)"
    ],
    "rules": [
      "If Eliel is connected to nature, then he is either mischievous or a guardian, but not both.",
      "If Eliel roams the forest, then he is either connected to nature or a shapeshifter, but not both.",
      "Any mythical creature that lives in the wild or has magical powers can roam the forest.",
      "If Eliel has claws, then he is either a shapeshifter or has healing abilities, but not both."
    ],
    "rules_fol": [
      "connected_to_nature(Eliel) → (mischievous(Eliel) ⊕ guardian(Eliel))",
      "roams_forest(Eliel) → (connected_to_nature(Eliel) ⊕ shapeshifter(Eliel))",
      "∀x ((lives_wild(x) ∨ has_magic(x)) → roams_forest(x))",
      "has_claws(Eliel) → (shapeshifter(Eliel) ⊕ can_heal(Eliel))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Eliel either protects the environment or is connected to nature.",
      "If Eliel has primal instinct or lives in shadows, then he roams the forest.",
      "If Eliel is ancient, then he is a wise being and a shapeshifter."
    ],
    "distracting_rules_fol": [
      "protects_environment(Eliel) ∨ connected_to_nature(Eliel)",
      "(has_primal_instinct(Eliel) ∨ lives_in_shadows(Eliel)) → roams_forest(Eliel)",
      "ancient(Eliel) → (wise_being(Eliel) ∧ shapeshifter(Eliel))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Eliel has claws.",
          "Eliel has healing abilities."
        ],
        "rules": "If Eliel has claws, then he is either a shapeshifter or has healing abilities, but not both.",
        "conclusion": "Eliel is not a shapeshifter."
      },
      {
        "facts": [
          "Eliel lives in the wild.",
          "Eliel has magical powers."
        ],
        "rules": "Any mythical creature that lives in the wild or has magical powers can roam the forest.",
        "conclusion": "Eliel roams the forest."
      },
      {
        "facts": [
          "Eliel roams the forest.",
          "Eliel is not a shapeshifter."
        ],
        "rules": "If Eliel roams the forest, then he is either connected to nature or a shapeshifter, but not both.",
        "conclusion": "Eliel is connected to nature."
      },
      {
        "facts": [
          "Eliel is connected to nature.",
          "Eliel is a guardian."
        ],
        "rules": "If Eliel is connected to nature, then he is either mischievous or a guardian, but not both.",
        "conclusion": "Eliel is mischievous."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "has_claws(Eliel)",
          "can_heal(Eliel)"
        ],
        "rules": "has_claws(Eliel) → (shapeshifter(Eliel) ⊕ can_heal(Eliel))",
        "conclusion": "¬shapeshifter(Eliel)"
      },
      {
        "facts": [
          "lives_wild(Eliel)",
          "has_magic(Eliel)"
        ],
        "rules": "∀x ((lives_wild(x) ∨ has_magic(x)) → roams_forest(x))",
        "conclusion": "roams_forest(Eliel)"
      },
      {
        "facts": [
          "roams_forest(Eliel)",
          "¬shapeshifter(Eliel)"
        ],
        "rules": "roams_forest(Eliel) → (connected_to_nature(Eliel) ⊕ shapeshifter(Eliel))",
        "conclusion": "connected_to_nature(Eliel)"
      },
      {
        "facts": [
          "connected_to_nature(Eliel)",
          "guardian(Eliel)"
        ],
        "rules": "connected_to_nature(Eliel) → (mischievous(Eliel) ⊕ guardian(Eliel))",
        "conclusion": "mischievous(Eliel)"
      }
    ],
    "conclusion": "Eliel is mischievous.",
    "conclusion_fol": "mischievous(Eliel)",
    "answer": "False",
    "context": [
      "Eliel has claws.",
      "Eliel has healing abilities.",
      "If Eliel has claws, then he is either a shapeshifter or has healing abilities, but not both.",
      "Eliel lives in the wild.",
      "Eliel has magical powers.",
      "Any mythical creature that lives in the wild or has magical powers can roam the forest.",
      "If Eliel roams the forest, then he is either connected to nature or a shapeshifter, but not both.",
      "Eliel is a guardian.",
      "If Eliel is connected to nature, then he is either mischievous or a guardian, but not both."
    ],
    "context_fol": [
      "has_claws(Eliel)",
      "can_heal(Eliel)",
      "has_claws(Eliel) → (shapeshifter(Eliel) ⊕ can_heal(Eliel))",
      "lives_wild(Eliel)",
      "has_magic(Eliel)",
      "∀x ((lives_wild(x) ∨ has_magic(x)) → roams_forest(x))",
      "roams_forest(Eliel) → (connected_to_nature(Eliel) ⊕ shapeshifter(Eliel))",
      "guardian(Eliel)",
      "connected_to_nature(Eliel) → (mischievous(Eliel) ⊕ guardian(Eliel))"
    ],
    "background_story": "Eliel was a mystical being with an unsettling apish appearance, roaming the ancient forests with an uncanny agility. His eyes gleamed with a primitive intelligence, as if holding secrets of the primordial world. Eliel's behavior was a fascinating blend of human-like curiosity and ape-like instinct, often observing travelers from the shadows. Despite his intimidating presence, he possessed a deep connection to nature, able to communicate with trees and beasts alike. The locals whispered tales of Eliel's mischievous antics, such as stealing fruits from the market and playing tricks on the villagers. However, they also revered him as a guardian of the forest, believing his apish nature held the key to unlocking the secrets of the wild.",
    "name": "Eliel",
    "keyword": "apish",
    "subject_category": "mythical creature"
  },
  {
    "facts": [
      "Mabel finds inner peace.",
      "Mabel helps others.",
      "Mabel is an ex-con.",
      "Mabel turns her life around."
    ],
    "facts_fol": [
      "find_inner_peace(Mabel)",
      "help_others(Mabel)",
      "ex_con(Mabel)",
      "turn_life_around(Mabel)"
    ],
    "rules": [
      "If Mabel is truly repentant, then she will make amends and earn redemption.",
      "If Mabel seeks forgiveness, then she will either earn redemption or find inner peace, but not both.",
      "A person either seeks forgiveness or helps others, but not necessarily both.",
      "If Mabel is an ex-con, then she is either truly repentant or turns her life around, but not both."
    ],
    "rules_fol": [
      "truly_repentant(Mabel) → (make_amends(Mabel) ∧ earn_redemption(Mabel))",
      "seek_forgiveness(Mabel) → (earn_redemption(Mabel) ⊕ find_inner_peace(Mabel))",
      "∀x (help_others(x) ⊕ seek_forgiveness(x))",
      "ex_con(Mabel) → (truly_repentant(Mabel) ⊕ turn_life_around(Mabel))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If someone learns from their mistakes and changes their behavior, then they can earn redemption.",
      "If Mabel admits her faults or shows remorse, then she will seek forgiveness.",
      "If someone regrets their past and changes their ways, then they are truly repentant."
    ],
    "distracting_rules_fol": [
      "∀x ((learn_from_mistakes(x) ∧ change_behavior(x)) → earn_redemption(x))",
      "(admit_faults(Mabel) ∨ show_remorse(Mabel)) → seek_forgiveness(Mabel)",
      "∀x ((regret_past(x) ∧ change_ways(x)) → truly_repentant(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Mabel is an ex-con.",
          "Mabel turns her life around."
        ],
        "rules": "If Mabel is an ex-con, then she is either truly repentant or turns her life around, but not both.",
        "conclusion": "Mabel is not truly repentant."
      },
      {
        "facts": [
          "Mabel helps others."
        ],
        "rules": "A person either seeks forgiveness or helps others, but not necessarily both.",
        "conclusion": "Mabel does not seek forgiveness."
      },
      {
        "facts": [
          "Mabel does not seek forgiveness.",
          "Mabel finds inner peace."
        ],
        "rules": "If Mabel seeks forgiveness, then she will either earn redemption or find inner peace, but not both.",
        "conclusion": null
      },
      {
        "facts": [
          "Mabel is not truly repentant."
        ],
        "rules": "If Mabel is truly repentant, then she will make amends and earn redemption.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "ex_con(Mabel)",
          "turn_life_around(Mabel)"
        ],
        "rules": "ex_con(Mabel) → (truly_repentant(Mabel) ⊕ turn_life_around(Mabel))",
        "conclusion": "¬truly_repentant(Mabel)"
      },
      {
        "facts": [
          "help_others(Mabel)"
        ],
        "rules": "∀x (help_others(x) ⊕ seek_forgiveness(x))",
        "conclusion": "¬seek_forgiveness(Mabel)"
      },
      {
        "facts": [
          "¬seek_forgiveness(Mabel)",
          "find_inner_peace(Mabel)"
        ],
        "rules": "seek_forgiveness(Mabel) → (earn_redemption(Mabel) ⊕ find_inner_peace(Mabel))",
        "conclusion": null
      },
      {
        "facts": [
          "¬truly_repentant(Mabel)"
        ],
        "rules": "truly_repentant(Mabel) → (make_amends(Mabel) ∧ earn_redemption(Mabel))",
        "conclusion": null
      }
    ],
    "conclusion": "Mabel makes amends.",
    "conclusion_fol": "make_amends(Mabel)",
    "answer": "Uncertain",
    "context": [
      "Mabel is an ex-con.",
      "Mabel turns her life around.",
      "If Mabel is an ex-con, then she is either truly repentant or turns her life around, but not both.",
      "Mabel helps others.",
      "A person either seeks forgiveness or helps others, but not necessarily both.",
      "Mabel finds inner peace.",
      "If Mabel seeks forgiveness, then she will either earn redemption or find inner peace, but not both.",
      "If Mabel is truly repentant, then she will make amends and earn redemption."
    ],
    "context_fol": [
      "ex_con(Mabel)",
      "turn_life_around(Mabel)",
      "ex_con(Mabel) → (truly_repentant(Mabel) ⊕ turn_life_around(Mabel))",
      "help_others(Mabel)",
      "∀x (help_others(x) ⊕ seek_forgiveness(x))",
      "find_inner_peace(Mabel)",
      "seek_forgiveness(Mabel) → (earn_redemption(Mabel) ⊕ find_inner_peace(Mabel))",
      "truly_repentant(Mabel) → (make_amends(Mabel) ∧ earn_redemption(Mabel))"
    ],
    "background_story": "Mabel had always been a bit of a rebel, living life on her own terms without much regard for others. However, after a stint in jail for her involvement in a string of burglaries, she had a profound awakening. Realizing the harm she had caused and the pain she had inflicted on her loved ones, Mabel became deeply penitent. She spent her days in jail reflecting on her past actions, seeking counseling, and educating herself. Upon release, she volunteered at a local community center, helping at-risk youth avoid the mistakes she had made. Mabel's penitence was genuine, and she worked tirelessly to make amends, eventually earning back the trust of her family and community. Her story served as a powerful testament to the possibility of redemption and personal transformation.",
    "name": "Mabel",
    "keyword": "penitent",
    "subject_category": "human"
  },
  {
    "facts": [
      "Mitchell does not face historical judgment.",
      "Mitchell does not shape public opinion.",
      "Mitchell does not make key decisions.",
      "Mitchell holds power.",
      "Mitchell leads a movement.",
      "Mitchell holds office.",
      "Mitchell drives progress."
    ],
    "facts_fol": [
      "¬face_historical_judgment(Mitchell)",
      "¬shape_public_opinion(Mitchell)",
      "¬make_key_decisions(Mitchell)",
      "hold_power(Mitchell)",
      "lead_movement(Mitchell)",
      "hold_office(Mitchell)",
      "drive_progress(Mitchell)"
    ],
    "rules": [
      "All historical figures who shape public opinion are influential.",
      "Any historical figure who makes key decisions or inspires others can leave a lasting legacy.",
      "If Mitchell holds power, then he either inspires others or pioneers change, but not both.",
      "If Mitchell leads a movement, then he either sparks reform or pioneers change, but not both.",
      "If Mitchell holds office, then he either sparks reform or drives progress, but not both."
    ],
    "rules_fol": [
      "∀x (shape_public_opinion(x) → influential(x))",
      "∀x ((make_key_decisions(x) ∨ inspire_others(x)) → leave_lasting_legacy(x))",
      "hold_power(Mitchell) → (inspire_others(Mitchell) ⊕ pioneer_change(Mitchell))",
      "lead_movement(Mitchell) → (spark_reform(Mitchell) ⊕ pioneer_change(Mitchell))",
      "hold_office(Mitchell) → (spark_reform(Mitchell) ⊕ drive_progress(Mitchell))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Any historical figure who writes persuasively or speaks authoritatively is influential.",
      "Any historical figure who impacts history will leave a lasting legacy.",
      "All historical figures who write persuasively will inspire others.",
      "If Mitchell either challenges the status quo or fosters innovation (but not both), then he pioneers change.",
      "If Mitchell writes persuasively, then he sparks reform and gains followers."
    ],
    "distracting_rules_fol": [
      "∀x ((write_persuasively(x) ∨ speak_authoritatively(x)) → influential(x))",
      "∀x (impact_history(x) → leave_lasting_legacy(x))",
      "∀x (write_persuasively(x) → inspire_others(x))",
      "(challenges_status(Mitchell) ⊕ fosters_innovation(Mitchell)) → pioneer_change(Mitchell)",
      "write_persuasively(Mitchell) → (spark_reform(Mitchell) ∧ gain_followers(Mitchell))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Mitchell holds office.",
          "Mitchell drives progress."
        ],
        "rules": "If Mitchell holds office, then he either sparks reform or drives progress, but not both.",
        "conclusion": "Mitchell does not spark reform."
      },
      {
        "facts": [
          "Mitchell leads a movement.",
          "Mitchell does not spark reform."
        ],
        "rules": "If Mitchell leads a movement, then he either sparks reform or pioneers change, but not both.",
        "conclusion": "Mitchell pioneers change."
      },
      {
        "facts": [
          "Mitchell holds power.",
          "Mitchell pioneers change."
        ],
        "rules": "If Mitchell holds power, then he either inspires others or pioneers change, but not both.",
        "conclusion": "Mitchell does not inspire others."
      },
      {
        "facts": [
          "Mitchell does not make key decisions.",
          "Mitchell does not inspire others."
        ],
        "rules": "Any historical figure who makes key decisions or inspires others can leave a lasting legacy.",
        "conclusion": null
      },
      {
        "facts": [
          "Mitchell does not shape public opinion."
        ],
        "rules": "All historical figures who shape public opinion are influential.",
        "conclusion": null
      },
      {
        "facts": [
          "Mitchell does not face historical judgment."
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "hold_office(Mitchell)",
          "drive_progress(Mitchell)"
        ],
        "rules": "hold_office(Mitchell) → (spark_reform(Mitchell) ⊕ drive_progress(Mitchell))",
        "conclusion": "¬spark_reform(Mitchell)"
      },
      {
        "facts": [
          "lead_movement(Mitchell)",
          "¬spark_reform(Mitchell)"
        ],
        "rules": "lead_movement(Mitchell) → (spark_reform(Mitchell) ⊕ pioneer_change(Mitchell))",
        "conclusion": "pioneer_change(Mitchell)"
      },
      {
        "facts": [
          "hold_power(Mitchell)",
          "pioneer_change(Mitchell)"
        ],
        "rules": "hold_power(Mitchell) → (inspire_others(Mitchell) ⊕ pioneer_change(Mitchell))",
        "conclusion": "¬inspire_others(Mitchell)"
      },
      {
        "facts": [
          "¬make_key_decisions(Mitchell)",
          "¬inspire_others(Mitchell)"
        ],
        "rules": "∀x ((make_key_decisions(x) ∨ inspire_others(x)) → leave_lasting_legacy(x))",
        "conclusion": null
      },
      {
        "facts": [
          "¬shape_public_opinion(Mitchell)"
        ],
        "rules": "∀x (shape_public_opinion(x) → influential(x))",
        "conclusion": null
      },
      {
        "facts": [
          "¬face_historical_judgment(Mitchell)"
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "conclusion": "If Mitchell is influential, then he either leaves a lasting legacy or faces historical judgment, but not both.",
    "conclusion_fol": "influential(Mitchell) → (leave_lasting_legacy(Mitchell) ⊕ face_historical_judgment(Mitchell))",
    "answer": "Uncertain",
    "context": [
      "Mitchell holds office.",
      "Mitchell drives progress.",
      "If Mitchell holds office, then he either sparks reform or drives progress, but not both.",
      "Mitchell leads a movement.",
      "If Mitchell leads a movement, then he either sparks reform or pioneers change, but not both.",
      "Mitchell holds power.",
      "If Mitchell holds power, then he either inspires others or pioneers change, but not both.",
      "Mitchell does not make key decisions.",
      "Any historical figure who makes key decisions or inspires others can leave a lasting legacy.",
      "Mitchell does not shape public opinion.",
      "All historical figures who shape public opinion are influential.",
      "Mitchell does not face historical judgment."
    ],
    "context_fol": [
      "hold_office(Mitchell)",
      "drive_progress(Mitchell)",
      "hold_office(Mitchell) → (spark_reform(Mitchell) ⊕ drive_progress(Mitchell))",
      "lead_movement(Mitchell)",
      "lead_movement(Mitchell) → (spark_reform(Mitchell) ⊕ pioneer_change(Mitchell))",
      "hold_power(Mitchell)",
      "hold_power(Mitchell) → (inspire_others(Mitchell) ⊕ pioneer_change(Mitchell))",
      "¬make_key_decisions(Mitchell)",
      "∀x ((make_key_decisions(x) ∨ inspire_others(x)) → leave_lasting_legacy(x))",
      "¬shape_public_opinion(Mitchell)",
      "∀x (shape_public_opinion(x) → influential(x))",
      "¬face_historical_judgment(Mitchell)"
    ],
    "background_story": "Mitchell, a young and ambitious journalist, found himself in the midst of a tumultuous Germany during the 1930s. As the Nazi party rose to power, Mitchell was initially skeptical of their ideology, but the promise of stability and prosperity in a post-war Germany drew him in. He began to write pieces that subtly supported the Nazi agenda, and soon he was fully entrenched in the propaganda machine. Mitchell's writings played a significant role in the nazification of German media, glorifying Hitler's regime and demonizing its opponents. As the years passed, Mitchell became a key figure in shaping the Nazi narrative, but the atrocities committed by the regime would eventually haunt him, forcing him to confront the devastating consequences of his complicity in the nazification of Germany.",
    "name": "Mitchell",
    "keyword": "nazification",
    "subject_category": "historical figure"
  },
  {
    "facts": [
      "Mariam flies solo.",
      "Mariam is an experienced pilot.",
      "Mariam trains pilots.",
      "Mariam does not soar freely.",
      "Mariam enjoys flying.",
      "Mariam performs acrobatics."
    ],
    "facts_fol": [
      "flies_solo(Mariam)",
      "experienced_pilot(Mariam)",
      "trains_pilots(Mariam)",
      "¬soars_freely(Mariam)",
      "enjoys_flying(Mariam)",
      "performs_acrobatics(Mariam)"
    ],
    "rules": [
      "If Mariam is either an experienced pilot or a flight instructor (but not both), then she is a respected aviator.",
      "If Mariam is an airline captain, then she is either a flight instructor or an aerobatic specialist, but not both.",
      "If Mariam either loves stunts or flies solo (but not both), then she is an aerobatic specialist.",
      "If Mariam trains pilots, then she is either an airline captain or soars freely.",
      "If Mariam enjoys flying, then she either performs acrobatics or loves stunts (but not both)."
    ],
    "rules_fol": [
      "(experienced_pilot(Mariam) ⊕ flight_instructor(Mariam)) → respected_aviator(Mariam)",
      "airline_captain(Mariam) → (flight_instructor(Mariam) ⊕ aerobatic_specialist(Mariam))",
      "(loves_stunts(Mariam) ⊕ flies_solo(Mariam)) → aerobatic_specialist(Mariam)",
      "trains_pilots(Mariam) → (airline_captain(Mariam) ∨ soars_freely(Mariam))",
      "enjoys_flying(Mariam) → (performs_acrobatics(Mariam) ⊕ loves_stunts(Mariam))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Mariam either teaches aeronautics or operates aircraft (but not both), then she is a flight instructor.",
      "If Mariam is a skilled aviator or precision flier, then she can be an aerobatic specialist.",
      "If Mariam either navigates planes or manages crews (but not both), then she is an airline captain.",
      "If Mariam has an adventurous spirit, then she is a skilled navigator and loves stunts."
    ],
    "distracting_rules_fol": [
      "(teaches_aeronautics(Mariam) ⊕ operates_aircraft(Mariam)) → flight_instructor(Mariam)",
      "(skilled_aviator(Mariam) ∨ precision_flier(Mariam)) → aerobatic_specialist(Mariam)",
      "(navigates_planes(Mariam) ⊕ manages_crews(Mariam)) → airline_captain(Mariam)",
      "adventurous_spirit(Mariam) → (skillednavigator(Mariam) ∧ loves_stunts(Mariam))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Mariam enjoys flying.",
          "Mariam performs acrobatics."
        ],
        "rules": "If Mariam enjoys flying, then she either performs acrobatics or loves stunts (but not both).",
        "conclusion": "Mariam does not love stunts."
      },
      {
        "facts": [
          "Mariam trains pilots.",
          "Mariam does not soar freely."
        ],
        "rules": "If Mariam trains pilots, then she is either an airline captain or soars freely.",
        "conclusion": "Mariam is an airline captain."
      },
      {
        "facts": [
          "Mariam does not love stunts.",
          "Mariam flies solo."
        ],
        "rules": "If Mariam either loves stunts or flies solo (but not both), then she is an aerobatic specialist.",
        "conclusion": "Mariam is an aerobatic specialist."
      },
      {
        "facts": [
          "Mariam is an airline captain.",
          "Mariam is an aerobatic specialist."
        ],
        "rules": "If Mariam is an airline captain, then she is either a flight instructor or an aerobatic specialist, but not both.",
        "conclusion": "Mariam is not a flight instructor."
      },
      {
        "facts": [
          "Mariam is an experienced pilot.",
          "Mariam is not a flight instructor."
        ],
        "rules": "If Mariam is either an experienced pilot or a flight instructor (but not both), then she is a respected aviator.",
        "conclusion": "Mariam is a respected aviator."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "enjoys_flying(Mariam)",
          "performs_acrobatics(Mariam)"
        ],
        "rules": "enjoys_flying(Mariam) → (performs_acrobatics(Mariam) ⊕ loves_stunts(Mariam))",
        "conclusion": "¬loves_stunts(Mariam)"
      },
      {
        "facts": [
          "trains_pilots(Mariam)",
          "¬soars_freely(Mariam)"
        ],
        "rules": "trains_pilots(Mariam) → (airline_captain(Mariam) ∨ soars_freely(Mariam))",
        "conclusion": "airline_captain(Mariam)"
      },
      {
        "facts": [
          "¬loves_stunts(Mariam)",
          "flies_solo(Mariam)"
        ],
        "rules": "(loves_stunts(Mariam) ⊕ flies_solo(Mariam)) → aerobatic_specialist(Mariam)",
        "conclusion": "aerobatic_specialist(Mariam)"
      },
      {
        "facts": [
          "airline_captain(Mariam)",
          "aerobatic_specialist(Mariam)"
        ],
        "rules": "airline_captain(Mariam) → (flight_instructor(Mariam) ⊕ aerobatic_specialist(Mariam))",
        "conclusion": "¬flight_instructor(Mariam)"
      },
      {
        "facts": [
          "experienced_pilot(Mariam)",
          "¬flight_instructor(Mariam)"
        ],
        "rules": "(experienced_pilot(Mariam) ⊕ flight_instructor(Mariam)) → respected_aviator(Mariam)",
        "conclusion": "respected_aviator(Mariam)"
      }
    ],
    "conclusion": "Mariam is a respected aviator.",
    "conclusion_fol": "respected_aviator(Mariam)",
    "answer": "True",
    "context": [
      "Mariam enjoys flying.",
      "Mariam performs acrobatics.",
      "If Mariam enjoys flying, then she either performs acrobatics or loves stunts (but not both).",
      "Mariam trains pilots.",
      "Mariam does not soar freely.",
      "If Mariam trains pilots, then she is either an airline captain or soars freely.",
      "Mariam flies solo.",
      "If Mariam either loves stunts or flies solo (but not both), then she is an aerobatic specialist.",
      "If Mariam is an airline captain, then she is either a flight instructor or an aerobatic specialist, but not both.",
      "Mariam is an experienced pilot.",
      "If Mariam is either an experienced pilot or a flight instructor (but not both), then she is a respected aviator."
    ],
    "context_fol": [
      "enjoys_flying(Mariam)",
      "performs_acrobatics(Mariam)",
      "enjoys_flying(Mariam) → (performs_acrobatics(Mariam) ⊕ loves_stunts(Mariam))",
      "trains_pilots(Mariam)",
      "¬soars_freely(Mariam)",
      "trains_pilots(Mariam) → (airline_captain(Mariam) ∨ soars_freely(Mariam))",
      "flies_solo(Mariam)",
      "(loves_stunts(Mariam) ⊕ flies_solo(Mariam)) → aerobatic_specialist(Mariam)",
      "airline_captain(Mariam) → (flight_instructor(Mariam) ⊕ aerobatic_specialist(Mariam))",
      "experienced_pilot(Mariam)",
      "(experienced_pilot(Mariam) ⊕ flight_instructor(Mariam)) → respected_aviator(Mariam)"
    ],
    "background_story": "Mariam was a young and ambitious pilot who spent most of her days at the local airfield. She had always been fascinated by airplanes and the freedom of flight. After completing her training, Mariam began working as a flight instructor at the airfield, teaching others the joy of flying. She spent countless hours in the air, soaring above the countryside and exploring new horizons. The airfield became her second home, where she formed lasting bonds with fellow pilots and airport staff. Mariam's passion for aviation inspired many, and she became a role model for young girls interested in pursuing careers in flight. As she took to the skies, Mariam felt a sense of liberation and purpose, knowing that the airfield would always be her launching pad for adventure.",
    "name": "Mariam",
    "keyword": "airfield",
    "subject_category": "human"
  },
  {
    "facts": [
      "Aria loves music.",
      "Aria creates art.",
      "Aria leads a company."
    ],
    "facts_fol": [
      "loves_music(Aria)",
      "creates_art(Aria)",
      "leads_company(Aria)"
    ],
    "rules": [
      "If Aria is a passionate dancer, then she can either perform internationally or teach traditional dance, but not both.",
      "Aria is either a passionate dancer or loves music, but not both.",
      "Aria either choreographs dance routines or teaches traditional dance, but not both.",
      "If Aria creates art and leads a company, then she can choreograph routines."
    ],
    "rules_fol": [
      "passionate_dancer(Aria) → (perform_internationally(Aria) ⊕ teach_traditional_dance(Aria))",
      "loves_music(Aria) ⊕ passionate_dancer(Aria)",
      "choreographs_routines(Aria) ⊕ teach_traditional_dance(Aria)",
      "(creates_art(Aria) ∧ leads_company(Aria)) → choreographs_routines(Aria)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Aria enjoys movement or is a passionate dancer.",
      "If Aria learns culture or shares heritage, then she can teach traditional dance.",
      "If Aria is innovative, then she understands culture and choreographs routines."
    ],
    "distracting_rules_fol": [
      "enjoys_movement(Aria) ∨ passionate_dancer(Aria)",
      "(learns_culture(Aria) ∨ shares_heritage(Aria)) → teach_traditional_dance(Aria)",
      "is_innovative(Aria) → (understands_culture(Aria) ∧ choreographs_routines(Aria))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Aria creates art.",
          "Aria leads a company."
        ],
        "rules": "If Aria creates art and leads a company, then she can choreograph routines.",
        "conclusion": "Aria choreographs dance routines."
      },
      {
        "facts": [
          "Aria choreographs dance routines."
        ],
        "rules": "Aria either choreographs dance routines or teaches traditional dance, but not both.",
        "conclusion": "Aria does not teach traditional dance."
      },
      {
        "facts": [
          "Aria loves music."
        ],
        "rules": "Aria is either a passionate dancer or loves music, but not both.",
        "conclusion": "Aria is not a passionate dancer."
      },
      {
        "facts": [
          "Aria is not a passionate dancer.",
          "Aria does not teach traditional dance."
        ],
        "rules": "If Aria is a passionate dancer, then she can either perform internationally or teach traditional dance, but not both.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "creates_art(Aria)",
          "leads_company(Aria)"
        ],
        "rules": "(creates_art(Aria) ∧ leads_company(Aria)) → choreographs_routines(Aria)",
        "conclusion": "choreographs_routines(Aria)"
      },
      {
        "facts": [
          "choreographs_routines(Aria)"
        ],
        "rules": "choreographs_routines(Aria) ⊕ teach_traditional_dance(Aria)",
        "conclusion": "¬teach_traditional_dance(Aria)"
      },
      {
        "facts": [
          "loves_music(Aria)"
        ],
        "rules": "loves_music(Aria) ⊕ passionate_dancer(Aria)",
        "conclusion": "¬passionate_dancer(Aria)"
      },
      {
        "facts": [
          "¬passionate_dancer(Aria)",
          "¬teach_traditional_dance(Aria)"
        ],
        "rules": "passionate_dancer(Aria) → (perform_internationally(Aria) ⊕ teach_traditional_dance(Aria))",
        "conclusion": null
      }
    ],
    "conclusion": "Aria performs internationally.",
    "conclusion_fol": "perform_internationally(Aria)",
    "answer": "Uncertain",
    "context": [
      "Aria creates art.",
      "Aria leads a company.",
      "If Aria creates art and leads a company, then she can choreograph routines.",
      "Aria either choreographs dance routines or teaches traditional dance, but not both.",
      "Aria loves music.",
      "Aria is either a passionate dancer or loves music, but not both.",
      "If Aria is a passionate dancer, then she can either perform internationally or teach traditional dance, but not both."
    ],
    "context_fol": [
      "creates_art(Aria)",
      "leads_company(Aria)",
      "(creates_art(Aria) ∧ leads_company(Aria)) → choreographs_routines(Aria)",
      "choreographs_routines(Aria) ⊕ teach_traditional_dance(Aria)",
      "loves_music(Aria)",
      "loves_music(Aria) ⊕ passionate_dancer(Aria)",
      "passionate_dancer(Aria) → (perform_internationally(Aria) ⊕ teach_traditional_dance(Aria))"
    ],
    "background_story": "Aria was a young and talented Israeli dancer from Tel Aviv. Born into a family of artists, she was introduced to traditional Israeli folk dances at a young age. As she grew older, Aria became fascinated with the rich cultural heritage of her homeland and decided to dedicate her life to preserving and promoting Israeli dance. She traveled the world, performing in festivals and teaching workshops, sharing the vibrant energy and beauty of Israeli dance with diverse audiences. Aria's passion project was to create a dance company that would showcase the unique blend of Middle Eastern and Western influences that characterize Israeli culture. Her company, 'Sabra,' quickly gained international recognition, celebrating the spirit and resilience of the Israeli people through movement and music.",
    "name": "Aria",
    "keyword": "israeli",
    "subject_category": "human"
  },
  {
    "facts": [
      "Jayleen is successful.",
      "Jayleen is experienced.",
      "Jayleen does not play smart."
    ],
    "facts_fol": [
      "successful(Jayleen)",
      "experienced(Jayleen)",
      "¬plays_smart(Jayleen)"
    ],
    "rules": [
      "Jayleen is either aggressive or cautious, but not both, in her poker playing style.",
      "Jayleen is either strategic or aggressive in her poker playing style, but not both.",
      "If Jayleen is experienced, then she is both strategic and adaptable.",
      "Jayleen either plays smart or is fearless."
    ],
    "rules_fol": [
      "aggressive(Jayleen) ⊕ cautious(Jayleen)",
      "is_strategic(Jayleen) ⊕ aggressive(Jayleen)",
      "experienced(Jayleen) → (is_strategic(Jayleen) ∧ adaptable(Jayleen))",
      "plays_smart(Jayleen) ∨ fearless(Jayleen)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Jayleen plans ahead, then she is cautious.",
      "If someone either bets big or bluffs often (but not both), then they are aggressive in their playing style.",
      "If Jayleen is a player, then she is either strategic or a risk-taker, but not both.",
      "If Jayleen takes risks, then she is fearless."
    ],
    "distracting_rules_fol": [
      "plans_ahead(Jayleen) → cautious(Jayleen)",
      "∀x ((bets_big(x) ⊕ bluffs_often(x)) → aggressive(x))",
      "is_player(Jayleen) → (takes_risks(Jayleen) ⊕ is_strategic(Jayleen))",
      "takes_risks(Jayleen) → fearless(Jayleen)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Jayleen does not play smart."
        ],
        "rules": "Jayleen either plays smart or is fearless.",
        "conclusion": "Jayleen is fearless."
      },
      {
        "facts": [
          "Jayleen is experienced."
        ],
        "rules": "If Jayleen is experienced, then she is both strategic and adaptable.",
        "conclusion": "Jayleen is strategic in her poker playing style."
      },
      {
        "facts": [
          "Jayleen is strategic in her poker playing style."
        ],
        "rules": "Jayleen is either strategic or aggressive in her poker playing style, but not both.",
        "conclusion": "Jayleen is not aggressive in her poker playing style."
      },
      {
        "facts": [
          "Jayleen is not aggressive in her poker playing style."
        ],
        "rules": "Jayleen is either aggressive or cautious, but not both, in her poker playing style.",
        "conclusion": "Jayleen is cautious."
      },
      {
        "facts": [
          "Jayleen is fearless.",
          "Jayleen is cautious.",
          "Jayleen is successful."
        ],
        "rules": null,
        "conclusion": "If Jayleen is either fearless or cautious (but not both), then she is successful."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬plays_smart(Jayleen)"
        ],
        "rules": "plays_smart(Jayleen) ∨ fearless(Jayleen)",
        "conclusion": "fearless(Jayleen)"
      },
      {
        "facts": [
          "experienced(Jayleen)"
        ],
        "rules": "experienced(Jayleen) → (is_strategic(Jayleen) ∧ adaptable(Jayleen))",
        "conclusion": "is_strategic(Jayleen)"
      },
      {
        "facts": [
          "is_strategic(Jayleen)"
        ],
        "rules": "is_strategic(Jayleen) ⊕ aggressive(Jayleen)",
        "conclusion": "¬aggressive(Jayleen)"
      },
      {
        "facts": [
          "¬aggressive(Jayleen)"
        ],
        "rules": "aggressive(Jayleen) ⊕ cautious(Jayleen)",
        "conclusion": "cautious(Jayleen)"
      },
      {
        "facts": [
          "fearless(Jayleen)",
          "cautious(Jayleen)",
          "successful(Jayleen)"
        ],
        "rules": null,
        "conclusion": "(fearless(Jayleen) ⊕ cautious(Jayleen)) → successful(Jayleen)"
      }
    ],
    "conclusion": "If Jayleen is either fearless or cautious (but not both), then she is successful.",
    "conclusion_fol": "(fearless(Jayleen) ⊕ cautious(Jayleen)) → successful(Jayleen)",
    "answer": "True",
    "context": [
      "Jayleen does not play smart.",
      "Jayleen either plays smart or is fearless.",
      "Jayleen is experienced.",
      "If Jayleen is experienced, then she is both strategic and adaptable.",
      "Jayleen is either strategic or aggressive in her poker playing style, but not both.",
      "Jayleen is either aggressive or cautious, but not both, in her poker playing style.",
      "Jayleen is successful."
    ],
    "context_fol": [
      "¬plays_smart(Jayleen)",
      "plays_smart(Jayleen) ∨ fearless(Jayleen)",
      "experienced(Jayleen)",
      "experienced(Jayleen) → (is_strategic(Jayleen) ∧ adaptable(Jayleen))",
      "is_strategic(Jayleen) ⊕ aggressive(Jayleen)",
      "aggressive(Jayleen) ⊕ cautious(Jayleen)",
      "successful(Jayleen)"
    ],
    "background_story": "Jayleen was a high-stakes poker player known for her fearless attitude and razor-sharp instincts in the cardroom. She had honed her skills in the smoky backrooms of Vegas, learning from the best and worst of the gaming world. Jayleen's rise to fame began when she won a major tournament, outplaying seasoned pros with her unpredictable style. Soon, she was a regular in exclusive cardrooms around the globe, from Macau to Monte Carlo. Despite her tough exterior, Jayleen had a soft spot for newcomers, often sharing her expertise with those looking to improve their game. Her reputation as a cardroom legend was solidified when she took down a record-breaking pot in a private game, earning her the nickname 'The Cardroom Queen'.",
    "name": "Jayleen",
    "keyword": "cardroom",
    "subject_category": "human"
  },
  {
    "facts": [
      "Mya is charismatic.",
      "Mya does not enjoy having fun."
    ],
    "facts_fol": [
      "is_charismatic(Mya)",
      "¬enjoys_fun(Mya)"
    ],
    "rules": [
      "Mya is either outgoing or introverted, but not both.",
      "Anyone who loves parties or is charismatic is outgoing.",
      "If Mya enjoys having fun, then she loves parties."
    ],
    "rules_fol": [
      "outgoing(Mya) ⊕ introverted(Mya)",
      "∀x ((loves_parties(x) ∨ is_charismatic(x)) → outgoing(x))",
      "enjoys_fun(Mya) → loves_parties(Mya)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Everyone who is a social butterfly is either creative or outgoing (or both).",
      "If Mya plans events, then she loves parties."
    ],
    "distracting_rules_fol": [
      "∀x (social_butterfly(x) → (creative_person(x) ∨ outgoing(x)))",
      "plans_events(Mya) → loves_parties(Mya)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Mya does not enjoy having fun."
        ],
        "rules": "If Mya enjoys having fun, then she loves parties.",
        "conclusion": null
      },
      {
        "facts": [
          "Mya is charismatic."
        ],
        "rules": "Anyone who loves parties or is charismatic is outgoing.",
        "conclusion": "Mya is outgoing."
      },
      {
        "facts": [
          "Mya is outgoing."
        ],
        "rules": "Mya is either outgoing or introverted, but not both.",
        "conclusion": "Mya is introverted."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬enjoys_fun(Mya)"
        ],
        "rules": "enjoys_fun(Mya) → loves_parties(Mya)",
        "conclusion": null
      },
      {
        "facts": [
          "is_charismatic(Mya)"
        ],
        "rules": "∀x ((loves_parties(x) ∨ is_charismatic(x)) → outgoing(x))",
        "conclusion": "outgoing(Mya)"
      },
      {
        "facts": [
          "outgoing(Mya)"
        ],
        "rules": "outgoing(Mya) ⊕ introverted(Mya)",
        "conclusion": "introverted(Mya)"
      }
    ],
    "conclusion": "Mya is introverted.",
    "conclusion_fol": "introverted(Mya)",
    "answer": "False",
    "context": [
      "Mya does not enjoy having fun.",
      "If Mya enjoys having fun, then she loves parties.",
      "Mya is charismatic.",
      "Anyone who loves parties or is charismatic is outgoing.",
      "Mya is either outgoing or introverted, but not both."
    ],
    "context_fol": [
      "¬enjoys_fun(Mya)",
      "enjoys_fun(Mya) → loves_parties(Mya)",
      "is_charismatic(Mya)",
      "∀x ((loves_parties(x) ∨ is_charismatic(x)) → outgoing(x))",
      "outgoing(Mya) ⊕ introverted(Mya)"
    ],
    "background_story": "Mya was a vibrant and charismatic event planner, renowned for her extravagant celebrations. When the town announced its 50th anniversary jubilee, Mya was chosen to lead the festivities. With her infectious enthusiasm and meticulous attention to detail, she transformed the town square into a kaleidoscope of color and sound. The jubilee weekend was a resounding success, featuring parades, fireworks, and a grand ball that drew visitors from far and wide. Mya's crowning achievement was a breathtaking display of community spirit, as residents and guests alike came together to celebrate five decades of history and heritage. The town's jubilee will forever be remembered as a testament to Mya's creativity and dedication to bringing people together in joy and celebration.",
    "name": "Mya",
    "keyword": "jubilee",
    "subject_category": "human"
  },
  {
    "facts": [
      "Darian cares about quality.",
      "Darian does not conserve resources.",
      "Darian minimizes pollution."
    ],
    "facts_fol": [
      "cares_quality(Darian)",
      "¬conserves_resources(Darian)",
      "minimizes_pollution(Darian)"
    ],
    "rules": [
      "If Darian is environmentally conscious, then he is innovative and valued by the industry.",
      "All industrial workers who reduce waste and promote sustainability are environmentally conscious.",
      "All industrial workers who care about quality reduce waste and improve efficiency.",
      "If Darian either conserves resources or minimizes pollution (but not both), then he promotes sustainability."
    ],
    "rules_fol": [
      "environmentally_conscious(Darian) → (innovative(Darian) ∧ valued_by_industry(Darian))",
      "∀x ((reduces_waste(x) ∧ promotes_sustainability(x)) → environmentally_conscious(x))",
      "∀x (cares_quality(x) → (reduces_waste(x) ∧ improves_efficiency(x)))",
      "(conserves_resources(Darian) ⊕ minimizes_pollution(Darian)) → promotes_sustainability(Darian)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Any industrial worker who respects nature is environmentally conscious.",
      "If an industrial worker either recycles materials or optimizes processes (but not both), then they reduce waste.",
      "All industrial workers who work hard and promote sustainability also respect nature."
    ],
    "distracting_rules_fol": [
      "∀x (respects_nature(x) → environmentally_conscious(x))",
      "∀x ((recycles_materials(x) ⊕ optimizes_processes(x)) → reduces_waste(x))",
      "∀x (works_hard(x) → (promotes_sustainability(x) ∧ respects_nature(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Darian does not conserve resources.",
          "Darian minimizes pollution."
        ],
        "rules": "If Darian either conserves resources or minimizes pollution (but not both), then he promotes sustainability.",
        "conclusion": "Darian promotes sustainability."
      },
      {
        "facts": [
          "Darian cares about quality."
        ],
        "rules": "All industrial workers who care about quality reduce waste and improve efficiency.",
        "conclusion": "Darian reduces waste."
      },
      {
        "facts": [
          "Darian reduces waste.",
          "Darian promotes sustainability."
        ],
        "rules": "All industrial workers who reduce waste and promote sustainability are environmentally conscious.",
        "conclusion": "Darian is environmentally conscious."
      },
      {
        "facts": [
          "Darian is environmentally conscious."
        ],
        "rules": "If Darian is environmentally conscious, then he is innovative and valued by the industry.",
        "conclusion": "Darian is innovative."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬conserves_resources(Darian)",
          "minimizes_pollution(Darian)"
        ],
        "rules": "(conserves_resources(Darian) ⊕ minimizes_pollution(Darian)) → promotes_sustainability(Darian)",
        "conclusion": "promotes_sustainability(Darian)"
      },
      {
        "facts": [
          "cares_quality(Darian)"
        ],
        "rules": "∀x (cares_quality(x) → (reduces_waste(x) ∧ improves_efficiency(x)))",
        "conclusion": "reduces_waste(Darian)"
      },
      {
        "facts": [
          "reduces_waste(Darian)",
          "promotes_sustainability(Darian)"
        ],
        "rules": "∀x ((reduces_waste(x) ∧ promotes_sustainability(x)) → environmentally_conscious(x))",
        "conclusion": "environmentally_conscious(Darian)"
      },
      {
        "facts": [
          "environmentally_conscious(Darian)"
        ],
        "rules": "environmentally_conscious(Darian) → (innovative(Darian) ∧ valued_by_industry(Darian))",
        "conclusion": "innovative(Darian)"
      }
    ],
    "conclusion": "Darian is innovative.",
    "conclusion_fol": "innovative(Darian)",
    "answer": "True",
    "context": [
      "Darian does not conserve resources.",
      "Darian minimizes pollution.",
      "If Darian either conserves resources or minimizes pollution (but not both), then he promotes sustainability.",
      "Darian cares about quality.",
      "All industrial workers who care about quality reduce waste and improve efficiency.",
      "All industrial workers who reduce waste and promote sustainability are environmentally conscious.",
      "If Darian is environmentally conscious, then he is innovative and valued by the industry."
    ],
    "context_fol": [
      "¬conserves_resources(Darian)",
      "minimizes_pollution(Darian)",
      "(conserves_resources(Darian) ⊕ minimizes_pollution(Darian)) → promotes_sustainability(Darian)",
      "cares_quality(Darian)",
      "∀x (cares_quality(x) → (reduces_waste(x) ∧ improves_efficiency(x)))",
      "∀x ((reduces_waste(x) ∧ promotes_sustainability(x)) → environmentally_conscious(x))",
      "environmentally_conscious(Darian) → (innovative(Darian) ∧ valued_by_industry(Darian))"
    ],
    "background_story": "Darian worked at a steel mill, where he was tasked with managing the slag byproduct of the smelting process. The slag, a molten mixture of metals and minerals, was a crucial part of the steel production process, but it also posed significant environmental and safety challenges. Darian took pride in his work, ensuring that the slag was handled and disposed of responsibly. He developed a system to recycle and reuse the slag, reducing the mill's waste output and creating a more sustainable operation. His innovative approach earned him recognition within the industry, and he became known as a leader in environmentally conscious steel production. Despite the harsh conditions of his job, Darian found satisfaction in knowing that his work was helping to minimize the mill's ecological footprint.",
    "name": "Darian",
    "keyword": "slag",
    "subject_category": "industrial worker"
  },
  {
    "facts": [
      "Everything is fantastical.",
      "Everything has magic.",
      "Everything shines brightly."
    ],
    "facts_fol": [
      "fantastical(Everything)",
      "has_magic(Everything)",
      "shines_brightly(Everything)"
    ],
    "rules": [
      "Everything is either an enchanted realm or an ordinary realm, but not both.",
      "If Everything is a mystical realm, then it is either enchanted or fantastical, but not both.",
      "If Everything either has magic or is dreamy (but not both), then it is mystical.",
      "Everything either shines brightly or is dreamy, but not both."
    ],
    "rules_fol": [
      "enchanted(Everything) ⊕ ordinary(Everything)",
      "mystical(Everything) → (enchanted(Everything) ⊕ fantastical(Everything))",
      "(has_magic(Everything) ⊕ is_dreamy(Everything)) → mystical(Everything)",
      "shines_brightly(Everything) ⊕ is_dreamy(Everything)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Everything is either sacred or enchanted.",
      "Any magical realm that has wonders or spreads a unique aura is mystical.",
      "If Everything glows softly, then it is dreamy."
    ],
    "distracting_rules_fol": [
      "is_sacred(Everything) ∨ enchanted(Everything)",
      "∀x ((has_wonders(x) ∨ spreads_aura(x)) → mystical(x))",
      "glows_softly(Everything) → is_dreamy(Everything)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Everything shines brightly."
        ],
        "rules": "Everything either shines brightly or is dreamy, but not both.",
        "conclusion": "Everything is not dreamy."
      },
      {
        "facts": [
          "Everything has magic.",
          "Everything is not dreamy."
        ],
        "rules": "If Everything either has magic or is dreamy (but not both), then it is mystical.",
        "conclusion": "Everything is a mystical realm."
      },
      {
        "facts": [
          "Everything is a mystical realm.",
          "Everything is fantastical."
        ],
        "rules": "If Everything is a mystical realm, then it is either enchanted or fantastical, but not both.",
        "conclusion": "Everything is not an enchanted realm."
      },
      {
        "facts": [
          "Everything is not an enchanted realm."
        ],
        "rules": "Everything is either an enchanted realm or an ordinary realm, but not both.",
        "conclusion": "Everything is an ordinary realm."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "shines_brightly(Everything)"
        ],
        "rules": "shines_brightly(Everything) ⊕ is_dreamy(Everything)",
        "conclusion": "¬is_dreamy(Everything)"
      },
      {
        "facts": [
          "has_magic(Everything)",
          "¬is_dreamy(Everything)"
        ],
        "rules": "(has_magic(Everything) ⊕ is_dreamy(Everything)) → mystical(Everything)",
        "conclusion": "mystical(Everything)"
      },
      {
        "facts": [
          "mystical(Everything)",
          "fantastical(Everything)"
        ],
        "rules": "mystical(Everything) → (enchanted(Everything) ⊕ fantastical(Everything))",
        "conclusion": "¬enchanted(Everything)"
      },
      {
        "facts": [
          "¬enchanted(Everything)"
        ],
        "rules": "enchanted(Everything) ⊕ ordinary(Everything)",
        "conclusion": "ordinary(Everything)"
      }
    ],
    "conclusion": "Everything is an ordinary realm.",
    "conclusion_fol": "ordinary(Everything)",
    "answer": "True",
    "context": [
      "Everything shines brightly.",
      "Everything either shines brightly or is dreamy, but not both.",
      "Everything has magic.",
      "If Everything either has magic or is dreamy (but not both), then it is mystical.",
      "Everything is fantastical.",
      "If Everything is a mystical realm, then it is either enchanted or fantastical, but not both.",
      "Everything is either an enchanted realm or an ordinary realm, but not both."
    ],
    "context_fol": [
      "shines_brightly(Everything)",
      "shines_brightly(Everything) ⊕ is_dreamy(Everything)",
      "has_magic(Everything)",
      "(has_magic(Everything) ⊕ is_dreamy(Everything)) → mystical(Everything)",
      "fantastical(Everything)",
      "mystical(Everything) → (enchanted(Everything) ⊕ fantastical(Everything))",
      "enchanted(Everything) ⊕ ordinary(Everything)"
    ],
    "background_story": "In the heart of the mystical forest, there existed a place known as Everything, where magic was woven into every thread of existence. This enchanted land was filled with sparkling waterfalls, shimmering crystal caves, and lush meadows that glittered like diamonds under the sunlight. Everything was a realm of wonder, where creatures danced under starry skies and flowers bloomed in every color of the rainbow. At its center was the Great Sparkling Tree, a majestic being whose branches reached for the heavens, scattering stardust and magic dust across the land. Everything was a place where dreams came alive, and its sparkling essence infused all who visited with a sense of awe and limitless possibility.",
    "name": "Everything",
    "keyword": "sparkling",
    "subject_category": "magical realm"
  },
  {
    "facts": [
      "Stanley lives in a flock.",
      "Stanley breeds in the Arctic.",
      "Stanley does not travel alone."
    ],
    "facts_fol": [
      "lives_in_flock(Stanley)",
      "breeds_arctic(Stanley)",
      "¬travels_alone(Stanley)"
    ],
    "rules": [
      "Stanley, being a Plover, either migrates or nests on the ground (or both).",
      "If Stanley lives in a flock, then he either flies south or migrates, but not both.",
      "If Stanley breeds in the Arctic, then he either flies south or travels alone."
    ],
    "rules_fol": [
      "migrates(Stanley) ∨ nest_on_ground(Stanley)",
      "lives_in_flock(Stanley) → (flies_south(Stanley) ⊕ migrates(Stanley))",
      "breeds_arctic(Stanley) → (flies_south(Stanley) ∨ travels_alone(Stanley))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Stanley either builds a nest or migrates.",
      "If Stanley has feathers and seeks warmth, then he flies south."
    ],
    "distracting_rules_fol": [
      "builds_nest(Stanley) ∨ migrates(Stanley)",
      "has_feathers(Stanley) → (seeks_warmth(Stanley) ∧ flies_south(Stanley))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Stanley breeds in the Arctic.",
          "Stanley does not travel alone."
        ],
        "rules": "If Stanley breeds in the Arctic, then he either flies south or travels alone.",
        "conclusion": "Stanley flies south."
      },
      {
        "facts": [
          "Stanley lives in a flock.",
          "Stanley flies south."
        ],
        "rules": "If Stanley lives in a flock, then he either flies south or migrates, but not both.",
        "conclusion": "Stanley does not migrate."
      },
      {
        "facts": [
          "Stanley does not migrate."
        ],
        "rules": "Stanley, being a Plover, either migrates or nests on the ground (or both).",
        "conclusion": "Stanley does not nest on the ground."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "breeds_arctic(Stanley)",
          "¬travels_alone(Stanley)"
        ],
        "rules": "breeds_arctic(Stanley) → (flies_south(Stanley) ∨ travels_alone(Stanley))",
        "conclusion": "flies_south(Stanley)"
      },
      {
        "facts": [
          "lives_in_flock(Stanley)",
          "flies_south(Stanley)"
        ],
        "rules": "lives_in_flock(Stanley) → (flies_south(Stanley) ⊕ migrates(Stanley))",
        "conclusion": "¬migrates(Stanley)"
      },
      {
        "facts": [
          "¬migrates(Stanley)"
        ],
        "rules": "migrates(Stanley) ∨ nest_on_ground(Stanley)",
        "conclusion": "¬nest_on_ground(Stanley)"
      }
    ],
    "conclusion": "Stanley does not nest on the ground.",
    "conclusion_fol": "¬nest_on_ground(Stanley)",
    "answer": "False",
    "context": [
      "Stanley breeds in the Arctic.",
      "Stanley does not travel alone.",
      "If Stanley breeds in the Arctic, then he either flies south or travels alone.",
      "Stanley lives in a flock.",
      "If Stanley lives in a flock, then he either flies south or migrates, but not both.",
      "Stanley, being a Plover, either migrates or nests on the ground (or both)."
    ],
    "context_fol": [
      "breeds_arctic(Stanley)",
      "¬travels_alone(Stanley)",
      "breeds_arctic(Stanley) → (flies_south(Stanley) ∨ travels_alone(Stanley))",
      "lives_in_flock(Stanley)",
      "lives_in_flock(Stanley) → (flies_south(Stanley) ⊕ migrates(Stanley))",
      "migrates(Stanley) ∨ nest_on_ground(Stanley)"
    ],
    "background_story": "Stanley was a Plover, specifically a member of the Charadrius genus, known for their distinctive breeding patterns. He spent his summers in the Arctic tundras, where he would meticulously build nests on the ground, camouflaging them to protect his eggs from predators. Stanley was particularly fond of the wide, open spaces and the challenge of finding the perfect spot to raise his young. As the seasons changed, he would migrate to warmer climates, often traveling in large flocks. Despite the long journeys, Stanley always returned to the same breeding grounds, a testament to the Charadrius's remarkable homing ability. His dedication to his habitat and his species' unique characteristics made him a fascinating subject for ornithologists studying the Charadrius genus.",
    "name": "Stanley",
    "keyword": "charadrius",
    "subject_category": "bird"
  },
  {
    "facts": [
      "Chicken puts others first.",
      "Chicken guards his chicks.",
      "Chicken is a parent.",
      "Chicken does not feed his offspring."
    ],
    "facts_fol": [
      "puts_others_first(Chicken)",
      "guards(Chicken)",
      "is_parent(Chicken)",
      "¬feeds_offspring(Chicken)"
    ],
    "rules": [
      "All animals that guard their offspring are protective of them.",
      "Any animal that cares for its young or puts others first is dedicated.",
      "If Chicken is a parent, then he either cares for his young or shares food with others, but not both.",
      "Chicken either feeds his offspring or shares food with others."
    ],
    "rules_fol": [
      "∀x (guards(x) → protective(x))",
      "∀x ((cares_young(x) ∨ puts_others_first(x)) → dedicated(x))",
      "is_parent(Chicken) → (cares_young(Chicken) ⊕ shares_food(Chicken))",
      "feeds_offspring(Chicken) ∨ shares_food(Chicken)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Chicken has offspring, then he is either vigilant or protective, but not both.",
      "Any animal that raises its offspring either teaches them survival skills or is dedicated to them.",
      "All animals that raise their offspring care for their young.",
      "All animals with chicks will share food."
    ],
    "distracting_rules_fol": [
      "has_offspring(Chicken) → (is_vigilant(Chicken) ⊕ protective(Chicken))",
      "∀x (raises_offspring(x) → (teaches_survival(x) ∨ dedicated(x)))",
      "∀x (raises_offspring(x) → cares_young(x))",
      "∀x (has_chicks(x) → shares_food(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Chicken does not feed his offspring."
        ],
        "rules": "Chicken either feeds his offspring or shares food with others.",
        "conclusion": "Chicken shares food with others."
      },
      {
        "facts": [
          "Chicken is a parent.",
          "Chicken shares food with others."
        ],
        "rules": "If Chicken is a parent, then he either cares for his young or shares food with others, but not both.",
        "conclusion": "Chicken does not care for his young."
      },
      {
        "facts": [
          "Chicken does not care for his young.",
          "Chicken puts others first."
        ],
        "rules": "Any animal that cares for its young or puts others first is dedicated.",
        "conclusion": "Chicken is dedicated."
      },
      {
        "facts": [
          "Chicken guards his chicks."
        ],
        "rules": "All animals that guard their offspring are protective of them.",
        "conclusion": "Chicken is protective of his chicks."
      },
      {
        "facts": [
          "Chicken is dedicated.",
          "Chicken is protective of his chicks."
        ],
        "rules": null,
        "conclusion": "Chicken is nurturing, or he is both dedicated and protective of his chicks."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬feeds_offspring(Chicken)"
        ],
        "rules": "feeds_offspring(Chicken) ∨ shares_food(Chicken)",
        "conclusion": "shares_food(Chicken)"
      },
      {
        "facts": [
          "is_parent(Chicken)",
          "shares_food(Chicken)"
        ],
        "rules": "is_parent(Chicken) → (cares_young(Chicken) ⊕ shares_food(Chicken))",
        "conclusion": "¬cares_young(Chicken)"
      },
      {
        "facts": [
          "¬cares_young(Chicken)",
          "puts_others_first(Chicken)"
        ],
        "rules": "∀x ((cares_young(x) ∨ puts_others_first(x)) → dedicated(x))",
        "conclusion": "dedicated(Chicken)"
      },
      {
        "facts": [
          "guards(Chicken)"
        ],
        "rules": "∀x (guards(x) → protective(x))",
        "conclusion": "protective(Chicken)"
      },
      {
        "facts": [
          "dedicated(Chicken)",
          "protective(Chicken)"
        ],
        "rules": null,
        "conclusion": "nurturing(Chicken) ∨ (dedicated(Chicken) ∧ protective(Chicken))"
      }
    ],
    "conclusion": "Chicken is nurturing, or he is both dedicated and protective of his chicks.",
    "conclusion_fol": "nurturing(Chicken) ∨ (dedicated(Chicken) ∧ protective(Chicken))",
    "answer": "True",
    "context": [
      "Chicken does not feed his offspring.",
      "Chicken either feeds his offspring or shares food with others.",
      "Chicken is a parent.",
      "If Chicken is a parent, then he either cares for his young or shares food with others, but not both.",
      "Chicken puts others first.",
      "Any animal that cares for its young or puts others first is dedicated.",
      "Chicken guards his chicks.",
      "All animals that guard their offspring are protective of them."
    ],
    "context_fol": [
      "¬feeds_offspring(Chicken)",
      "feeds_offspring(Chicken) ∨ shares_food(Chicken)",
      "is_parent(Chicken)",
      "is_parent(Chicken) → (cares_young(Chicken) ⊕ shares_food(Chicken))",
      "puts_others_first(Chicken)",
      "∀x ((cares_young(x) ∨ puts_others_first(x)) → dedicated(x))",
      "guards(Chicken)",
      "∀x (guards(x) → protective(x))"
    ],
    "background_story": "Chicken, a gentle and soft-spoken rooster, took his fatherly duties very seriously. After his mate's passing, he was left to care for their brood of chicks alone. Paternally, he watched over them with fierce devotion, teaching them how to forage, avoid predators, and roost safely. Chicken went to great lengths to ensure their well-being, often sacrificing his own meals to feed them and keeping them warm under his wings during chilly nights. As the chicks grew, they began to appreciate Chicken's tireless efforts, and they would often snuggle up beside him, clucking contentedly. The farmhands who cared for the coop marveled at Chicken's paternal instincts, noting that he was one of the most dedicated and loving fathers they had ever seen.",
    "name": "Chicken",
    "keyword": "paternally",
    "subject_category": "animal"
  },
  {
    "facts": [
      "Jase pursues power."
    ],
    "facts_fol": [
      "pursues_power(Jase)"
    ],
    "rules": [
      "Jase is either ruthless or empathetic, but not both.",
      "Jase is either altruistic or ruthless, but not both, reflecting the dichotomy between selfless and selfish tendencies in human nature.",
      "Jase either pursues power or is altruistic, but not both, highlighting the contrast between his self-serving ambitions and selfless tendencies."
    ],
    "rules_fol": [
      "ruthless(Jase) ⊕ empathetic(Jase)",
      "is_altruistic(Jase) ⊕ ruthless(Jase)",
      "pursues_power(Jase) ⊕ is_altruistic(Jase)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Jase shows mercy or is ruthless.",
      "If Jase either helps others or donates his time (but not both), then he is altruistic."
    ],
    "distracting_rules_fol": [
      "shows_mercy(Jase) ∨ ruthless(Jase)",
      "(helps_others(Jase) ⊕ donates_time(Jase)) → is_altruistic(Jase)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Jase pursues power."
        ],
        "rules": "Jase either pursues power or is altruistic, but not both, highlighting the contrast between his self-serving ambitions and selfless tendencies.",
        "conclusion": "Jase is not altruistic."
      },
      {
        "facts": [
          "Jase is not altruistic."
        ],
        "rules": "Jase is either altruistic or ruthless, but not both, reflecting the dichotomy between selfless and selfish tendencies in human nature.",
        "conclusion": "Jase is ruthless."
      },
      {
        "facts": [
          "Jase is ruthless."
        ],
        "rules": "Jase is either ruthless or empathetic, but not both.",
        "conclusion": "Jase is empathetic."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "pursues_power(Jase)"
        ],
        "rules": "pursues_power(Jase) ⊕ is_altruistic(Jase)",
        "conclusion": "¬is_altruistic(Jase)"
      },
      {
        "facts": [
          "¬is_altruistic(Jase)"
        ],
        "rules": "is_altruistic(Jase) ⊕ ruthless(Jase)",
        "conclusion": "ruthless(Jase)"
      },
      {
        "facts": [
          "ruthless(Jase)"
        ],
        "rules": "ruthless(Jase) ⊕ empathetic(Jase)",
        "conclusion": "empathetic(Jase)"
      }
    ],
    "conclusion": "Jase is empathetic.",
    "conclusion_fol": "empathetic(Jase)",
    "answer": "False",
    "context": [
      "Jase pursues power.",
      "Jase either pursues power or is altruistic, but not both, highlighting the contrast between his self-serving ambitions and selfless tendencies.",
      "Jase is either altruistic or ruthless, but not both, reflecting the dichotomy between selfless and selfish tendencies in human nature.",
      "Jase is either ruthless or empathetic, but not both."
    ],
    "context_fol": [
      "pursues_power(Jase)",
      "pursues_power(Jase) ⊕ is_altruistic(Jase)",
      "is_altruistic(Jase) ⊕ ruthless(Jase)",
      "ruthless(Jase) ⊕ empathetic(Jase)"
    ],
    "background_story": "Jase was a cunning and ambitious businessman who rose to the top of the corporate ladder ruthlessly. He had no qualms about stepping on others to achieve his goals, often using his charm and intelligence to manipulate those around him. Jase's cutthroat tactics earned him many enemies, but he didn't let that faze him. He was driven by a singular focus on success, no matter the cost. As the CEO of a major conglomerate, Jase made decisions that were swift and merciless, always prioritizing profits over people. His reputation was formidable, and his name was whispered in fear and respect by his competitors and colleagues alike. Despite his ruthless nature, Jase had a certain allure to him, a magnetic presence that drew people in, even as they knew they should beware.",
    "name": "Jase",
    "keyword": "ruthlessly",
    "subject_category": "human"
  },
  {
    "facts": [
      "Matteo has a goal.",
      "Matteo does not take risks."
    ],
    "facts_fol": [
      "has_goal(Matteo)",
      "¬takes_risks(Matteo)"
    ],
    "rules": [
      "Matteo is either persistent or discouraged, but not both.",
      "Matteo is either focused or persistent, but not both.",
      "If Matteo has a goal, then he is either driven or focused, but not both.",
      "Matteo is either driven or takes risks, but not both."
    ],
    "rules_fol": [
      "persistent(Matteo) ⊕ discouraged(Matteo)",
      "is_focused(Matteo) ⊕ persistent(Matteo)",
      "has_goal(Matteo) → (is_driven(Matteo) ⊕ is_focused(Matteo))",
      "takes_risks(Matteo) ⊕ is_driven(Matteo)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Anyone who has a clear vision is persistent.",
      "Everyone who works hard either seeks solutions or is focused (or both).",
      "Matteo either sets targets or is driven."
    ],
    "distracting_rules_fol": [
      "∀x (sees_vision(x) → persistent(x))",
      "∀x (works_hard(x) → (seeks_solutions(x) ∨ is_focused(x)))",
      "sets_targets(Matteo) ∨ is_driven(Matteo)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Matteo does not take risks."
        ],
        "rules": "Matteo is either driven or takes risks, but not both.",
        "conclusion": "Matteo is driven."
      },
      {
        "facts": [
          "Matteo has a goal.",
          "Matteo is driven."
        ],
        "rules": "If Matteo has a goal, then he is either driven or focused, but not both.",
        "conclusion": "Matteo is not focused."
      },
      {
        "facts": [
          "Matteo is not focused."
        ],
        "rules": "Matteo is either focused or persistent, but not both.",
        "conclusion": "Matteo is persistent."
      },
      {
        "facts": [
          "Matteo is persistent."
        ],
        "rules": "Matteo is either persistent or discouraged, but not both.",
        "conclusion": "Matteo is discouraged."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬takes_risks(Matteo)"
        ],
        "rules": "takes_risks(Matteo) ⊕ is_driven(Matteo)",
        "conclusion": "is_driven(Matteo)"
      },
      {
        "facts": [
          "has_goal(Matteo)",
          "is_driven(Matteo)"
        ],
        "rules": "has_goal(Matteo) → (is_driven(Matteo) ⊕ is_focused(Matteo))",
        "conclusion": "¬is_focused(Matteo)"
      },
      {
        "facts": [
          "¬is_focused(Matteo)"
        ],
        "rules": "is_focused(Matteo) ⊕ persistent(Matteo)",
        "conclusion": "persistent(Matteo)"
      },
      {
        "facts": [
          "persistent(Matteo)"
        ],
        "rules": "persistent(Matteo) ⊕ discouraged(Matteo)",
        "conclusion": "discouraged(Matteo)"
      }
    ],
    "conclusion": "Matteo is discouraged.",
    "conclusion_fol": "discouraged(Matteo)",
    "answer": "False",
    "context": [
      "Matteo does not take risks.",
      "Matteo is either driven or takes risks, but not both.",
      "Matteo has a goal.",
      "If Matteo has a goal, then he is either driven or focused, but not both.",
      "Matteo is either focused or persistent, but not both.",
      "Matteo is either persistent or discouraged, but not both."
    ],
    "context_fol": [
      "¬takes_risks(Matteo)",
      "takes_risks(Matteo) ⊕ is_driven(Matteo)",
      "has_goal(Matteo)",
      "has_goal(Matteo) → (is_driven(Matteo) ⊕ is_focused(Matteo))",
      "is_focused(Matteo) ⊕ persistent(Matteo)",
      "persistent(Matteo) ⊕ discouraged(Matteo)"
    ],
    "background_story": "Matteo was a brilliant and ambitious architect on the cusp of unveiling his life's masterpiece: a sustainable, eco-friendly skyscraper. However, his progress was halting due to unforeseen challenges. Funding issues, bureaucratic red tape, and personal doubts threatened to derail the project. Despite these obstacles, Matteo persevered, pouring his heart and soul into finding solutions. He spent countless nights re-designing and re-budgeting, determined to bring his vision to life. Just when it seemed like the project was on the verge of collapse, Matteo's unwavering dedication paid off, and construction finally began. Though the journey was halting and fraught with setbacks, Matteo's resolve ultimately led to the creation of a groundbreaking landmark that would change the city's skyline forever.",
    "name": "Matteo",
    "keyword": "halting",
    "subject_category": "human"
  },
  {
    "facts": [
      "Jay explores ecosystems.",
      "Jay researches plant species.",
      "Jay collects specimens.",
      "Jay has a passport.",
      "Jay reads papers.",
      "Jay does not write reports."
    ],
    "facts_fol": [
      "explore_ecosystems(Jay)",
      "research_plant_species(Jay)",
      "collect_specimens(Jay)",
      "has_passport(Jay)",
      "reads_papers(Jay)",
      "¬writes_reports(Jay)"
    ],
    "rules": [
      "If Jay studies gymnospermae and travels extensively, then he will make groundbreaking discoveries.",
      "If Jay researches plant species, then he either studies gymnospermae or explores ecosystems, but not both.",
      "If Jay collects specimens, then he either works abroad or travels extensively, but not both.",
      "If Jay speaks multiple languages and has a passport, then he works abroad.",
      "If Jay either reads papers or writes reports (but not both), then he speaks multiple languages."
    ],
    "rules_fol": [
      "(study_gymnospermae(Jay) ∧ travel_extensively(Jay)) → make_groundbreaking_discoveries(Jay)",
      "research_plant_species(Jay) → (study_gymnospermae(Jay) ⊕ explore_ecosystems(Jay))",
      "collect_specimens(Jay) → (work_abroad(Jay) ⊕ travel_extensively(Jay))",
      "(speaks_languages(Jay) ∧ has_passport(Jay)) → work_abroad(Jay)",
      "(reads_papers(Jay) ⊕ writes_reports(Jay)) → speaks_languages(Jay)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Jay likes trees, then he studies gymnospermae.",
      "If Jay loves nature and seeks knowledge, then he will travel extensively.",
      "If Jay has a grant or attends a conference, then he works abroad.",
      "If Jay meets foreigners, then he can speak multiple languages."
    ],
    "distracting_rules_fol": [
      "likes_trees(Jay) → study_gymnospermae(Jay)",
      "(loves_nature(Jay) ∧ seeks_knowledge(Jay)) → travel_extensively(Jay)",
      "(has_grant(Jay) ∨ attend_conference(Jay)) → work_abroad(Jay)",
      "meets_foreigners(Jay) → speaks_languages(Jay)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Jay reads papers.",
          "Jay does not write reports."
        ],
        "rules": "If Jay either reads papers or writes reports (but not both), then he speaks multiple languages.",
        "conclusion": "Jay speaks multiple languages."
      },
      {
        "facts": [
          "Jay speaks multiple languages.",
          "Jay has a passport."
        ],
        "rules": "If Jay speaks multiple languages and has a passport, then he works abroad.",
        "conclusion": "Jay works abroad."
      },
      {
        "facts": [
          "Jay collects specimens.",
          "Jay works abroad."
        ],
        "rules": "If Jay collects specimens, then he either works abroad or travels extensively, but not both.",
        "conclusion": "Jay does not travel extensively."
      },
      {
        "facts": [
          "Jay researches plant species.",
          "Jay explores ecosystems."
        ],
        "rules": "If Jay researches plant species, then he either studies gymnospermae or explores ecosystems, but not both.",
        "conclusion": "Jay does not study gymnospermae."
      },
      {
        "facts": [
          "Jay does not study gymnospermae.",
          "Jay does not travel extensively."
        ],
        "rules": "If Jay studies gymnospermae and travels extensively, then he will make groundbreaking discoveries.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "reads_papers(Jay)",
          "¬writes_reports(Jay)"
        ],
        "rules": "(reads_papers(Jay) ⊕ writes_reports(Jay)) → speaks_languages(Jay)",
        "conclusion": "speaks_languages(Jay)"
      },
      {
        "facts": [
          "speaks_languages(Jay)",
          "has_passport(Jay)"
        ],
        "rules": "(speaks_languages(Jay) ∧ has_passport(Jay)) → work_abroad(Jay)",
        "conclusion": "work_abroad(Jay)"
      },
      {
        "facts": [
          "collect_specimens(Jay)",
          "work_abroad(Jay)"
        ],
        "rules": "collect_specimens(Jay) → (work_abroad(Jay) ⊕ travel_extensively(Jay))",
        "conclusion": "¬travel_extensively(Jay)"
      },
      {
        "facts": [
          "research_plant_species(Jay)",
          "explore_ecosystems(Jay)"
        ],
        "rules": "research_plant_species(Jay) → (study_gymnospermae(Jay) ⊕ explore_ecosystems(Jay))",
        "conclusion": "¬study_gymnospermae(Jay)"
      },
      {
        "facts": [
          "¬study_gymnospermae(Jay)",
          "¬travel_extensively(Jay)"
        ],
        "rules": "(study_gymnospermae(Jay) ∧ travel_extensively(Jay)) → make_groundbreaking_discoveries(Jay)",
        "conclusion": null
      }
    ],
    "conclusion": "Jay does not make groundbreaking discoveries.",
    "conclusion_fol": "¬make_groundbreaking_discoveries(Jay)",
    "answer": "Uncertain",
    "context": [
      "Jay reads papers.",
      "Jay does not write reports.",
      "If Jay either reads papers or writes reports (but not both), then he speaks multiple languages.",
      "Jay has a passport.",
      "If Jay speaks multiple languages and has a passport, then he works abroad.",
      "Jay collects specimens.",
      "If Jay collects specimens, then he either works abroad or travels extensively, but not both.",
      "Jay researches plant species.",
      "Jay explores ecosystems.",
      "If Jay researches plant species, then he either studies gymnospermae or explores ecosystems, but not both.",
      "If Jay studies gymnospermae and travels extensively, then he will make groundbreaking discoveries."
    ],
    "context_fol": [
      "reads_papers(Jay)",
      "¬writes_reports(Jay)",
      "(reads_papers(Jay) ⊕ writes_reports(Jay)) → speaks_languages(Jay)",
      "has_passport(Jay)",
      "(speaks_languages(Jay) ∧ has_passport(Jay)) → work_abroad(Jay)",
      "collect_specimens(Jay)",
      "collect_specimens(Jay) → (work_abroad(Jay) ⊕ travel_extensively(Jay))",
      "research_plant_species(Jay)",
      "explore_ecosystems(Jay)",
      "research_plant_species(Jay) → (study_gymnospermae(Jay) ⊕ explore_ecosystems(Jay))",
      "(study_gymnospermae(Jay) ∧ travel_extensively(Jay)) → make_groundbreaking_discoveries(Jay)"
    ],
    "background_story": "Jay was a renowned botanist with a passion for ancient plant species. His life's work focused on the gymnospermae, a group of plants that produce seeds without flowers, including conifers, cycads, and ginkgos. Jay spent years studying the evolution and diversity of these plants, traveling to remote corners of the world to collect specimens and data. His research led to groundbreaking discoveries about the adaptability and resilience of gymnospermae, shedding new light on their role in shaping Earth's ecosystems. Jay's dedication to his field earned him international recognition, and his work continues to inspire a new generation of botanists to explore the fascinating world of seed-producing plants.",
    "name": "Jay",
    "keyword": "gymnospermae",
    "subject_category": "botanist"
  },
  {
    "facts": [
      "Bo inspires others.",
      "Bo has a vision.",
      "Bo promotes conservation.",
      "Bo educates others.",
      "Bo raises awareness.",
      "Bo makes change."
    ],
    "facts_fol": [
      "inspires_others(Bo)",
      "has_vision(Bo)",
      "promotes_conservation(Bo)",
      "educates_others(Bo)",
      "raises_awareness(Bo)",
      "makes_change(Bo)"
    ],
    "rules": [
      "Bo either leads his community or cares for the environment, but not both.",
      "If Bo is influential, then he either supports sustainability or leads his community, but not both.",
      "If Bo has a vision, then he is influential and inspires others.",
      "If someone educates others and promotes conservation, then they support sustainability.",
      "If Bo either raises awareness or makes change (but not both), then he takes action."
    ],
    "rules_fol": [
      "leads_community(Bo) ⊕ cares_for_environment(Bo)",
      "is_influential(Bo) → (supports_sustainability(Bo) ⊕ leads_community(Bo))",
      "has_vision(Bo) → (is_influential(Bo) ∧ inspires_others(Bo))",
      "∀x ((educates_others(x) ∧ promotes_conservation(x)) → supports_sustainability(x))",
      "(raises_awareness(Bo) ⊕ makes_change(Bo)) → takes_action(Bo)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Bo either protects wildlife or cares for the environment.",
      "If Bo is charismatic, then he leads his community and fosters collaboration.",
      "If Bo either fosters growth or empowers people (but not both), then he is influential.",
      "Any person who uses renewable energy or reduces waste supports sustainability.",
      "If Bo sees a need, then he will take action."
    ],
    "distracting_rules_fol": [
      "protects_wildlife(Bo) ∨ cares_for_environment(Bo)",
      "is_charismatic(Bo) → (leads_community(Bo) ∧ fosters_collaboration(Bo))",
      "(fosters_growth(Bo) ⊕ empowers_people(Bo)) → is_influential(Bo)",
      "∀x ((uses_renewable(x) ∨ reduces_waste(x)) → supports_sustainability(x))",
      "sees_need(Bo) → takes_action(Bo)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Bo raises awareness.",
          "Bo makes change."
        ],
        "rules": "If Bo either raises awareness or makes change (but not both), then he takes action.",
        "conclusion": null
      },
      {
        "facts": [
          "Bo educates others.",
          "Bo promotes conservation."
        ],
        "rules": "If someone educates others and promotes conservation, then they support sustainability.",
        "conclusion": "Bo supports sustainability."
      },
      {
        "facts": [
          "Bo has a vision.",
          "Bo inspires others."
        ],
        "rules": "If Bo has a vision, then he is influential and inspires others.",
        "conclusion": "Bo is influential."
      },
      {
        "facts": [
          "Bo is influential.",
          "Bo supports sustainability."
        ],
        "rules": "If Bo is influential, then he either supports sustainability or leads his community, but not both.",
        "conclusion": "Bo does not lead his community."
      },
      {
        "facts": [
          "Bo does not lead his community."
        ],
        "rules": "Bo either leads his community or cares for the environment, but not both.",
        "conclusion": "Bo cares for the environment."
      },
      {
        "facts": [
          "Bo cares for the environment."
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "raises_awareness(Bo)",
          "makes_change(Bo)"
        ],
        "rules": "(raises_awareness(Bo) ⊕ makes_change(Bo)) → takes_action(Bo)",
        "conclusion": null
      },
      {
        "facts": [
          "educates_others(Bo)",
          "promotes_conservation(Bo)"
        ],
        "rules": "∀x ((educates_others(x) ∧ promotes_conservation(x)) → supports_sustainability(x))",
        "conclusion": "supports_sustainability(Bo)"
      },
      {
        "facts": [
          "has_vision(Bo)",
          "inspires_others(Bo)"
        ],
        "rules": "has_vision(Bo) → (is_influential(Bo) ∧ inspires_others(Bo))",
        "conclusion": "is_influential(Bo)"
      },
      {
        "facts": [
          "is_influential(Bo)",
          "supports_sustainability(Bo)"
        ],
        "rules": "is_influential(Bo) → (supports_sustainability(Bo) ⊕ leads_community(Bo))",
        "conclusion": "¬leads_community(Bo)"
      },
      {
        "facts": [
          "¬leads_community(Bo)"
        ],
        "rules": "leads_community(Bo) ⊕ cares_for_environment(Bo)",
        "conclusion": "cares_for_environment(Bo)"
      },
      {
        "facts": [
          "cares_for_environment(Bo)"
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "conclusion": "Bo cares for the environment and takes action to protect it.",
    "conclusion_fol": "cares_for_environment(Bo) ∧ takes_action(Bo)",
    "answer": "Uncertain",
    "context": [
      "Bo raises awareness.",
      "Bo makes change.",
      "If Bo either raises awareness or makes change (but not both), then he takes action.",
      "Bo educates others.",
      "Bo promotes conservation.",
      "If someone educates others and promotes conservation, then they support sustainability.",
      "Bo has a vision.",
      "Bo inspires others.",
      "If Bo has a vision, then he is influential and inspires others.",
      "If Bo is influential, then he either supports sustainability or leads his community, but not both.",
      "Bo either leads his community or cares for the environment, but not both."
    ],
    "context_fol": [
      "raises_awareness(Bo)",
      "makes_change(Bo)",
      "(raises_awareness(Bo) ⊕ makes_change(Bo)) → takes_action(Bo)",
      "educates_others(Bo)",
      "promotes_conservation(Bo)",
      "∀x ((educates_others(x) ∧ promotes_conservation(x)) → supports_sustainability(x))",
      "has_vision(Bo)",
      "inspires_others(Bo)",
      "has_vision(Bo) → (is_influential(Bo) ∧ inspires_others(Bo))",
      "is_influential(Bo) → (supports_sustainability(Bo) ⊕ leads_community(Bo))",
      "leads_community(Bo) ⊕ cares_for_environment(Bo)"
    ],
    "background_story": "Bo was a charismatic community leader who became a catalyst for change in his small town. After witnessing the devastating effects of pollution on local wildlife, he decided to take action. Bo organized rallies, petitions, and town hall meetings, inspiring others to join him in the fight for environmental justice. His passion and perseverance sparked a chain reaction, motivating residents to demand cleaner practices from local industries. As the movement gained momentum, Bo's town underwent a remarkable transformation, with renewable energy sources being implemented and green spaces being restored. Bo's role as a catalyst brought the community together, proving that one person can ignite a wave of positive change that resonates far beyond their own neighborhood.",
    "name": "Bo",
    "keyword": "catalyst",
    "subject_category": "human"
  },
  {
    "facts": [
      "Muncie is revitalizing.",
      "Muncie does not have investors.",
      "Muncie does not attract business."
    ],
    "facts_fol": [
      "is_revitalizing(Muncie)",
      "¬has_investors(Muncie)",
      "¬attracts_business(Muncie)"
    ],
    "rules": [
      "Muncie is either renewing or thriving (or both).",
      "If Muncie is revitalizing, then it is either renewing or flourishing, but not both.",
      "Every city that prospers is flourishing.",
      "Any city that has investors or creates jobs can prosper.",
      "Every city attracts business or creates jobs."
    ],
    "rules_fol": [
      "is_renewing(Muncie) ∨ is_thriving(Muncie)",
      "is_revitalizing(Muncie) → (is_renewing(Muncie) ⊕ is_flourishing(Muncie))",
      "∀x (prosper(x) → is_flourishing(x))",
      "∀x ((has_investors(x) ∨ creates_jobs(x)) → prosper(x))",
      "∀x (attracts_business(x) ∨ creates_jobs(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Muncie is developing, then it is either stabilizing or renewing (but not both).",
      "Muncie either grows its economy or is flourishing.",
      "If Muncie has a diverse economy, then it prospers and has strong leadership.",
      "If a city invests heavily and fosters growth, then it can create jobs."
    ],
    "distracting_rules_fol": [
      "is_developing(Muncie) → (is_stabilizing(Muncie) ⊕ is_renewing(Muncie))",
      "grows_economy(Muncie) ∨ is_flourishing(Muncie)",
      "diverse_economy(Muncie) → (prosper(Muncie) ∧ strong_leadership(Muncie))",
      "∀x ((invests_heavily(x) ∧ fosters_growth(x)) → creates_jobs(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Muncie does not attract business."
        ],
        "rules": "Every city attracts business or creates jobs.",
        "conclusion": "Muncie creates jobs."
      },
      {
        "facts": [
          "Muncie does not have investors.",
          "Muncie creates jobs."
        ],
        "rules": "Any city that has investors or creates jobs can prosper.",
        "conclusion": "Muncie prospers."
      },
      {
        "facts": [
          "Muncie prospers."
        ],
        "rules": "Every city that prospers is flourishing.",
        "conclusion": "Muncie is flourishing."
      },
      {
        "facts": [
          "Muncie is revitalizing.",
          "Muncie is flourishing."
        ],
        "rules": "If Muncie is revitalizing, then it is either renewing or flourishing, but not both.",
        "conclusion": "Muncie is not renewing."
      },
      {
        "facts": [
          "Muncie is not renewing."
        ],
        "rules": "Muncie is either renewing or thriving (or both).",
        "conclusion": "Muncie is not thriving."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬attracts_business(Muncie)"
        ],
        "rules": "∀x (attracts_business(x) ∨ creates_jobs(x))",
        "conclusion": "creates_jobs(Muncie)"
      },
      {
        "facts": [
          "¬has_investors(Muncie)",
          "creates_jobs(Muncie)"
        ],
        "rules": "∀x ((has_investors(x) ∨ creates_jobs(x)) → prosper(x))",
        "conclusion": "prosper(Muncie)"
      },
      {
        "facts": [
          "prosper(Muncie)"
        ],
        "rules": "∀x (prosper(x) → is_flourishing(x))",
        "conclusion": "is_flourishing(Muncie)"
      },
      {
        "facts": [
          "is_revitalizing(Muncie)",
          "is_flourishing(Muncie)"
        ],
        "rules": "is_revitalizing(Muncie) → (is_renewing(Muncie) ⊕ is_flourishing(Muncie))",
        "conclusion": "¬is_renewing(Muncie)"
      },
      {
        "facts": [
          "¬is_renewing(Muncie)"
        ],
        "rules": "is_renewing(Muncie) ∨ is_thriving(Muncie)",
        "conclusion": "¬is_thriving(Muncie)"
      }
    ],
    "conclusion": "Muncie is not thriving.",
    "conclusion_fol": "¬is_thriving(Muncie)",
    "answer": "False",
    "context": [
      "Muncie does not attract business.",
      "Every city attracts business or creates jobs.",
      "Muncie does not have investors.",
      "Any city that has investors or creates jobs can prosper.",
      "Every city that prospers is flourishing.",
      "Muncie is revitalizing.",
      "If Muncie is revitalizing, then it is either renewing or flourishing, but not both.",
      "Muncie is either renewing or thriving (or both)."
    ],
    "context_fol": [
      "¬attracts_business(Muncie)",
      "∀x (attracts_business(x) ∨ creates_jobs(x))",
      "¬has_investors(Muncie)",
      "∀x ((has_investors(x) ∨ creates_jobs(x)) → prosper(x))",
      "∀x (prosper(x) → is_flourishing(x))",
      "is_revitalizing(Muncie)",
      "is_revitalizing(Muncie) → (is_renewing(Muncie) ⊕ is_flourishing(Muncie))",
      "is_renewing(Muncie) ∨ is_thriving(Muncie)"
    ],
    "background_story": "Muncie, once a thriving industrial city, faced a downturn in its manufacturing sector. As factories closed and jobs disappeared, the city's infrastructure began to crumble. The local government, in an effort to revitalize the area, launched an initiative to 'unmake' the old, outdated structures and rebuild from the ground up. Abandoned buildings were demolished, and new, sustainable constructions took their place. The city's riverfront, once polluted and neglected, was restored to its former beauty. As Muncie transformed, it attracted new businesses and residents, bringing with them fresh ideas and energy. The process of 'unmaking' the old Muncie paved the way for a brighter, more resilient future, turning a tale of decline into one of rebirth and renewal.",
    "name": "Muncie",
    "keyword": "unmake",
    "subject_category": "city"
  },
  {
    "facts": [
      "Sean's brother does not regain mobility.",
      "Sean does not seek medical help.",
      "Sean does not take medication.",
      "Sean has an injury."
    ],
    "facts_fol": [
      "¬regain_mobility(Sean)",
      "¬seeks_medical_help(Sean)",
      "¬takes_medication(Sean)",
      "has_injury(Sean)"
    ],
    "rules": [
      "If someone seeks medical help and follows therapy, then they can receive proper treatment.",
      "If Sean's brother either attends sessions or takes medication (but not both), then he follows therapy.",
      "Any person who has an injury or needs rehabilitation attends sessions."
    ],
    "rules_fol": [
      "∀x ((seeks_medical_help(x) ∧ follows_therapy(x)) → receive_proper_treatment(x))",
      "(attends_sessions(Sean) ⊕ takes_medication(Sean)) → follows_therapy(Sean)",
      "∀x ((has_injury(x) ∨ needs_rehab(x)) → attends_sessions(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Sean's brother experiences paralysis, then he either develops new skills or receives proper treatment.",
      "If Sean's brother faces health challenges, then he either makes progress or follows therapy.",
      "If Sean's brother seeks help, then he attends sessions."
    ],
    "distracting_rules_fol": [
      "experience_paralysis(Sean) → (develop_new_skills(Sean) ∨ receive_proper_treatment(Sean))",
      "faces_health_challenges(Sean) → (makes_progress(Sean) ∨ follows_therapy(Sean))",
      "seeks_help(Sean) → attends_sessions(Sean)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Sean has an injury."
        ],
        "rules": "Any person who has an injury or needs rehabilitation attends sessions.",
        "conclusion": "Sean attends sessions."
      },
      {
        "facts": [
          "Sean attends sessions.",
          "Sean does not take medication."
        ],
        "rules": "If Sean's brother either attends sessions or takes medication (but not both), then he follows therapy.",
        "conclusion": "Sean follows therapy."
      },
      {
        "facts": [
          "Sean does not seek medical help.",
          "Sean follows therapy."
        ],
        "rules": "If someone seeks medical help and follows therapy, then they can receive proper treatment.",
        "conclusion": null
      },
      {
        "facts": [
          "Sean's brother does not regain mobility."
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "has_injury(Sean)"
        ],
        "rules": "∀x ((has_injury(x) ∨ needs_rehab(x)) → attends_sessions(x))",
        "conclusion": "attends_sessions(Sean)"
      },
      {
        "facts": [
          "attends_sessions(Sean)",
          "¬takes_medication(Sean)"
        ],
        "rules": "(attends_sessions(Sean) ⊕ takes_medication(Sean)) → follows_therapy(Sean)",
        "conclusion": "follows_therapy(Sean)"
      },
      {
        "facts": [
          "¬seeks_medical_help(Sean)",
          "follows_therapy(Sean)"
        ],
        "rules": "∀x ((seeks_medical_help(x) ∧ follows_therapy(x)) → receive_proper_treatment(x))",
        "conclusion": null
      },
      {
        "facts": [
          "¬regain_mobility(Sean)"
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "conclusion": "If Sean's brother receives proper treatment, then he can regain mobility.",
    "conclusion_fol": "receive_proper_treatment(Sean) → regain_mobility(Sean)",
    "answer": "Uncertain",
    "context": [
      "Sean has an injury.",
      "Any person who has an injury or needs rehabilitation attends sessions.",
      "Sean does not take medication.",
      "If Sean's brother either attends sessions or takes medication (but not both), then he follows therapy.",
      "Sean does not seek medical help.",
      "If someone seeks medical help and follows therapy, then they can receive proper treatment.",
      "Sean's brother does not regain mobility."
    ],
    "context_fol": [
      "has_injury(Sean)",
      "∀x ((has_injury(x) ∨ needs_rehab(x)) → attends_sessions(x))",
      "¬takes_medication(Sean)",
      "(attends_sessions(Sean) ⊕ takes_medication(Sean)) → follows_therapy(Sean)",
      "¬seeks_medical_help(Sean)",
      "∀x ((seeks_medical_help(x) ∧ follows_therapy(x)) → receive_proper_treatment(x))",
      "¬regain_mobility(Sean)"
    ],
    "background_story": "Sean was a brilliant neuroscientist with a unique approach to understanding the human brain. His work focused on the cortically-based functions that control movement and cognition. After a devastating accident left his younger brother paralyzed, Sean dedicated his life to finding a cure. He spent years researching and developing innovative treatments that targeted the cortical areas responsible for motor control. Sean's groundbreaking work led to the creation of a revolutionary new therapy that helped patients regain mobility and independence. His cortically-based approach not only changed the lives of countless individuals but also paved the way for future breakthroughs in neuroscience and rehabilitation medicine.",
    "name": "Sean",
    "keyword": "cortically",
    "subject_category": "human"
  },
  {
    "facts": [
      "Elizabeth is not brave.",
      "Elizabeth does not anticipate danger.",
      "Elizabeth is an experienced warrior.",
      "Elizabeth is charismatic.",
      "Elizabeth is a daring leader."
    ],
    "facts_fol": [
      "¬brave(Elizabeth)",
      "¬anticipates_danger(Elizabeth)",
      "experienced_warrior(Elizabeth)",
      "charismatic(Elizabeth)",
      "daring_leader(Elizabeth)"
    ],
    "rules": [
      "Any historical figure who thinks ahead or leads troops is strategic.",
      "Every experienced warrior either thinks ahead or anticipates danger.",
      "If Elizabeth is a skilled warrior, then she is either charismatic or legendary, but not both.",
      "Elizabeth is either a daring leader or a skilled warrior, but not both."
    ],
    "rules_fol": [
      "∀x ((thinks_ahead(x) ∨ leads_troops(x)) → strategic(x))",
      "∀x (experienced_warrior(x) → (thinks_ahead(x) ∨ anticipates_danger(x)))",
      "skilled_warrior(Elizabeth) → (charismatic(Elizabeth) ⊕ legendary(Elizabeth))",
      "daring_leader(Elizabeth) ⊕ skilled_warrior(Elizabeth)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Elizabeth is either fearless or strategic.",
      "If a historical figure either predicts outcomes or makes plans (but not both), then they think ahead.",
      "Every historical figure who fights battles is either legendary or earns respect.",
      "Elizabeth is either a famous leader or a skilled warrior."
    ],
    "distracting_rules_fol": [
      "fearless(Elizabeth) ∨ strategic(Elizabeth)",
      "∀x ((predicts_outcomes(x) ⊕ makes_plans(x)) → thinks_ahead(x))",
      "∀x (fights_battles(x) → (legendary(x) ∨ earns_respect(x)))",
      "famous_leader(Elizabeth) ∨ skilled_warrior(Elizabeth)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Elizabeth is a daring leader."
        ],
        "rules": "Elizabeth is either a daring leader or a skilled warrior, but not both.",
        "conclusion": "Elizabeth is not a skilled warrior."
      },
      {
        "facts": [
          "Elizabeth is not a skilled warrior.",
          "Elizabeth is charismatic."
        ],
        "rules": "If Elizabeth is a skilled warrior, then she is either charismatic or legendary, but not both.",
        "conclusion": null
      },
      {
        "facts": [
          "Elizabeth is an experienced warrior.",
          "Elizabeth does not anticipate danger."
        ],
        "rules": "Every experienced warrior either thinks ahead or anticipates danger.",
        "conclusion": "Elizabeth thinks ahead."
      },
      {
        "facts": [
          "Elizabeth thinks ahead."
        ],
        "rules": "Any historical figure who thinks ahead or leads troops is strategic.",
        "conclusion": "Elizabeth is strategic."
      },
      {
        "facts": [
          "Elizabeth is not brave.",
          "Elizabeth is strategic."
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "daring_leader(Elizabeth)"
        ],
        "rules": "daring_leader(Elizabeth) ⊕ skilled_warrior(Elizabeth)",
        "conclusion": "¬skilled_warrior(Elizabeth)"
      },
      {
        "facts": [
          "¬skilled_warrior(Elizabeth)",
          "charismatic(Elizabeth)"
        ],
        "rules": "skilled_warrior(Elizabeth) → (charismatic(Elizabeth) ⊕ legendary(Elizabeth))",
        "conclusion": null
      },
      {
        "facts": [
          "experienced_warrior(Elizabeth)",
          "¬anticipates_danger(Elizabeth)"
        ],
        "rules": "∀x (experienced_warrior(x) → (thinks_ahead(x) ∨ anticipates_danger(x)))",
        "conclusion": "thinks_ahead(Elizabeth)"
      },
      {
        "facts": [
          "thinks_ahead(Elizabeth)"
        ],
        "rules": "∀x ((thinks_ahead(x) ∨ leads_troops(x)) → strategic(x))",
        "conclusion": "strategic(Elizabeth)"
      },
      {
        "facts": [
          "¬brave(Elizabeth)",
          "strategic(Elizabeth)"
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "conclusion": "If Elizabeth is either brave or strategic (but not both), then she is legendary.",
    "conclusion_fol": "(brave(Elizabeth) ⊕ strategic(Elizabeth)) → legendary(Elizabeth)",
    "answer": "Uncertain",
    "context": [
      "Elizabeth is a daring leader.",
      "Elizabeth is either a daring leader or a skilled warrior, but not both.",
      "Elizabeth is charismatic.",
      "If Elizabeth is a skilled warrior, then she is either charismatic or legendary, but not both.",
      "Elizabeth is an experienced warrior.",
      "Elizabeth does not anticipate danger.",
      "Every experienced warrior either thinks ahead or anticipates danger.",
      "Any historical figure who thinks ahead or leads troops is strategic.",
      "Elizabeth is not brave."
    ],
    "context_fol": [
      "daring_leader(Elizabeth)",
      "daring_leader(Elizabeth) ⊕ skilled_warrior(Elizabeth)",
      "charismatic(Elizabeth)",
      "skilled_warrior(Elizabeth) → (charismatic(Elizabeth) ⊕ legendary(Elizabeth))",
      "experienced_warrior(Elizabeth)",
      "¬anticipates_danger(Elizabeth)",
      "∀x (experienced_warrior(x) → (thinks_ahead(x) ∨ anticipates_danger(x)))",
      "∀x ((thinks_ahead(x) ∨ leads_troops(x)) → strategic(x))",
      "¬brave(Elizabeth)"
    ],
    "background_story": "Elizabeth was a courageous and skilled member of the medieval lancers, an elite group of cavalrymen known for their bravery and honor. In the 14th century, she disguised herself as a man to join the lancers, determined to fight for her kingdom and prove her worth. Elizabeth quickly earned the respect of her comrades with her exceptional horsemanship and lance-wielding skills. She participated in several battles, including the Battle of Crécy, where her bravery and strategic thinking helped turn the tide of the battle. Though her true identity was eventually discovered, Elizabeth's prowess and loyalty had already earned her a place among the lancers, and she continued to fight alongside them, becoming a legendary figure in the annals of medieval history.",
    "name": "Elizabeth",
    "keyword": "lancers",
    "subject_category": "historical figure"
  },
  {
    "facts": [
      "Chana is not meticulous.",
      "Chana thinks logically.",
      "Chana does not code securely.",
      "Chana does not make breakthroughs."
    ],
    "facts_fol": [
      "¬is_meticulous(Chana)",
      "thinks_logically(Chana)",
      "¬codes_securely(Chana)",
      "¬makes_breakthroughs(Chana)"
    ],
    "rules": [
      "If Chana is meticulous, then she either solves complex problems or creates foolproof devices, but not both.",
      "If Chana either thinks logically or codes securely (but not both), then she solves complex problems.",
      "If Chana makes breakthroughs, then she will revolutionize the cybersecurity industry."
    ],
    "rules_fol": [
      "is_meticulous(Chana) → (solves_complex_problems(Chana) ⊕ creates_foolproof_devices(Chana))",
      "(thinks_logically(Chana) ⊕ codes_securely(Chana)) → solves_complex_problems(Chana)",
      "makes_breakthroughs(Chana) → revolutionizes_industry(Chana)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Chana designs algorithms or builds secure systems, then she can create foolproof devices.",
      "Every inventor who designs algorithms either solves complex problems or builds prototypes.",
      "If Chana either develops algorithms or designs protocols (but not both), then she revolutionizes the industry."
    ],
    "distracting_rules_fol": [
      "(designs_algorithms(Chana) ∨ builds_secure_systems(Chana)) → creates_foolproof_devices(Chana)",
      "∀x (designs_algorithms(x) → (solves_complex_problems(x) ∨ builds_prototypes(x)))",
      "(develops_algorithms(Chana) ⊕ designs_protocols(Chana)) → revolutionizes_industry(Chana)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Chana does not make breakthroughs."
        ],
        "rules": "If Chana makes breakthroughs, then she will revolutionize the cybersecurity industry.",
        "conclusion": null
      },
      {
        "facts": [
          "Chana thinks logically.",
          "Chana does not code securely."
        ],
        "rules": "If Chana either thinks logically or codes securely (but not both), then she solves complex problems.",
        "conclusion": "Chana solves complex problems."
      },
      {
        "facts": [
          "Chana is not meticulous.",
          "Chana solves complex problems."
        ],
        "rules": "If Chana is meticulous, then she either solves complex problems or creates foolproof devices, but not both.",
        "conclusion": null
      },
      {
        "facts": [],
        "rules": null,
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬makes_breakthroughs(Chana)"
        ],
        "rules": "makes_breakthroughs(Chana) → revolutionizes_industry(Chana)",
        "conclusion": null
      },
      {
        "facts": [
          "thinks_logically(Chana)",
          "¬codes_securely(Chana)"
        ],
        "rules": "(thinks_logically(Chana) ⊕ codes_securely(Chana)) → solves_complex_problems(Chana)",
        "conclusion": "solves_complex_problems(Chana)"
      },
      {
        "facts": [
          "¬is_meticulous(Chana)",
          "solves_complex_problems(Chana)"
        ],
        "rules": "is_meticulous(Chana) → (solves_complex_problems(Chana) ⊕ creates_foolproof_devices(Chana))",
        "conclusion": null
      },
      {
        "facts": [],
        "rules": null,
        "conclusion": null
      }
    ],
    "conclusion": "If Chana creates foolproof devices, then she earns recognition and revolutionizes the cybersecurity industry.",
    "conclusion_fol": "creates_foolproof_devices(Chana) → (earns_recognition(Chana) ∧ revolutionizes_industry(Chana))",
    "answer": "Uncertain",
    "context": [
      "Chana does not make breakthroughs.",
      "If Chana makes breakthroughs, then she will revolutionize the cybersecurity industry.",
      "Chana thinks logically.",
      "Chana does not code securely.",
      "If Chana either thinks logically or codes securely (but not both), then she solves complex problems.",
      "Chana is not meticulous.",
      "If Chana is meticulous, then she either solves complex problems or creates foolproof devices, but not both."
    ],
    "context_fol": [
      "¬makes_breakthroughs(Chana)",
      "makes_breakthroughs(Chana) → revolutionizes_industry(Chana)",
      "thinks_logically(Chana)",
      "¬codes_securely(Chana)",
      "(thinks_logically(Chana) ⊕ codes_securely(Chana)) → solves_complex_problems(Chana)",
      "¬is_meticulous(Chana)",
      "is_meticulous(Chana) → (solves_complex_problems(Chana) ⊕ creates_foolproof_devices(Chana))"
    ],
    "background_story": "Chana was a brilliant and meticulous inventor known for creating foolproof devices. Her latest project, a secure encryption box, had garnered significant attention from government agencies and tech firms. Chana's design was deemed foolproof due to its complex algorithm and multi-layered security features, making it virtually impossible to crack. Her invention was put to the test by a team of expert hackers, who failed to breach the system despite their best efforts. Chana's foolproof encryption box revolutionized data security, earning her numerous awards and recognition in the scientific community. Her dedication to creating unbreachable systems had made her a leading figure in the field of cybersecurity.",
    "name": "Chana",
    "keyword": "foolproof",
    "subject_category": "inventor"
  },
  {
    "facts": [
      "Kyree studies algae.",
      "Kyree is an expert in his field.",
      "Kyree has a degree.",
      "Kyree gives lectures."
    ],
    "facts_fol": [
      "study_algae(Kyree)",
      "expert_in_field(Kyree)",
      "has_degree(Kyree)",
      "give_lectures(Kyree)"
    ],
    "rules": [
      "If Kyree studies algae, then he either advances scientific knowledge or develops practical solutions, but not both.",
      "A scientist either publishes research or develops solutions, but not necessarily both.",
      "If Kyree is an expert in his field, then he either teaches students or publishes research, but not both.",
      "Any scientist who has a degree or gives lectures can teach students."
    ],
    "rules_fol": [
      "study_algae(Kyree) → (advance_knowledge(Kyree) ⊕ develop_solutions(Kyree))",
      "∀x (publish_research(x) ⊕ develop_solutions(x))",
      "expert_in_field(Kyree) → (teach_students(Kyree) ⊕ publish_research(Kyree))",
      "∀x ((has_degree(x) ∨ give_lectures(x)) → teach_students(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Any scientist who finds practical applications will develop solutions.",
      "If Kyree conducts experiments, then he either publishes research or finds breakthroughs.",
      "If Kyree knows biology and leads projects, then he can teach students."
    ],
    "distracting_rules_fol": [
      "∀x (find_application(x) → develop_solutions(x))",
      "conduct_experiments(Kyree) → (publish_research(Kyree) ∨ find_breakthroughs(Kyree))",
      "(knows_biology(Kyree) ∧ leads_projects(Kyree)) → teach_students(Kyree)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Kyree has a degree.",
          "Kyree gives lectures."
        ],
        "rules": "Any scientist who has a degree or gives lectures can teach students.",
        "conclusion": "Kyree teaches students."
      },
      {
        "facts": [
          "Kyree is an expert in his field.",
          "Kyree teaches students."
        ],
        "rules": "If Kyree is an expert in his field, then he either teaches students or publishes research, but not both.",
        "conclusion": "Kyree does not publish research."
      },
      {
        "facts": [
          "Kyree does not publish research."
        ],
        "rules": "A scientist either publishes research or develops solutions, but not necessarily both.",
        "conclusion": "Kyree develops practical solutions."
      },
      {
        "facts": [
          "Kyree studies algae.",
          "Kyree develops practical solutions."
        ],
        "rules": "If Kyree studies algae, then he either advances scientific knowledge or develops practical solutions, but not both.",
        "conclusion": "Kyree advances scientific knowledge."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "has_degree(Kyree)",
          "give_lectures(Kyree)"
        ],
        "rules": "∀x ((has_degree(x) ∨ give_lectures(x)) → teach_students(x))",
        "conclusion": "teach_students(Kyree)"
      },
      {
        "facts": [
          "expert_in_field(Kyree)",
          "teach_students(Kyree)"
        ],
        "rules": "expert_in_field(Kyree) → (teach_students(Kyree) ⊕ publish_research(Kyree))",
        "conclusion": "¬publish_research(Kyree)"
      },
      {
        "facts": [
          "¬publish_research(Kyree)"
        ],
        "rules": "∀x (publish_research(x) ⊕ develop_solutions(x))",
        "conclusion": "develop_solutions(Kyree)"
      },
      {
        "facts": [
          "study_algae(Kyree)",
          "develop_solutions(Kyree)"
        ],
        "rules": "study_algae(Kyree) → (advance_knowledge(Kyree) ⊕ develop_solutions(Kyree))",
        "conclusion": "advance_knowledge(Kyree)"
      }
    ],
    "conclusion": "Kyree advances scientific knowledge.",
    "conclusion_fol": "advance_knowledge(Kyree)",
    "answer": "False",
    "context": [
      "Kyree has a degree.",
      "Kyree gives lectures.",
      "Any scientist who has a degree or gives lectures can teach students.",
      "Kyree is an expert in his field.",
      "If Kyree is an expert in his field, then he either teaches students or publishes research, but not both.",
      "A scientist either publishes research or develops solutions, but not necessarily both.",
      "Kyree studies algae.",
      "If Kyree studies algae, then he either advances scientific knowledge or develops practical solutions, but not both."
    ],
    "context_fol": [
      "has_degree(Kyree)",
      "give_lectures(Kyree)",
      "∀x ((has_degree(x) ∨ give_lectures(x)) → teach_students(x))",
      "expert_in_field(Kyree)",
      "expert_in_field(Kyree) → (teach_students(Kyree) ⊕ publish_research(Kyree))",
      "∀x (publish_research(x) ⊕ develop_solutions(x))",
      "study_algae(Kyree)",
      "study_algae(Kyree) → (advance_knowledge(Kyree) ⊕ develop_solutions(Kyree))"
    ],
    "background_story": "Kyree was a renowned botanist who spent most of his career studying the unique properties of Nitella, a genus of algae found in freshwater environments. His fascination with Nitella began during his graduate studies, where he discovered its remarkable ability to thrive in extreme conditions. Kyree's groundbreaking research on Nitella's cellular structure and its potential applications in biotechnology earned him international recognition. He became a leading expert in his field, publishing numerous papers and lecturing at conferences worldwide. Kyree's dedication to unlocking the secrets of Nitella not only advanced scientific knowledge but also paved the way for innovative solutions in water purification and sustainability.",
    "name": "Kyree",
    "keyword": "nitella",
    "subject_category": "scientist"
  },
  {
    "facts": [
      "Fiona makes informed decisions.",
      "Fiona trusts her gut.",
      "Fiona does not explore her interests.",
      "Fiona does not pursue her hobbies."
    ],
    "facts_fol": [
      "make_informed_decisions(Fiona)",
      "trust_gut(Fiona)",
      "¬explore_interests(Fiona)",
      "¬pursue_hobbies(Fiona)"
    ],
    "rules": [
      "Fiona either follows her intuition or takes the time to self-reflect, but not necessarily both.",
      "If someone trusts their gut, then they follow their intuition.",
      "If Fiona either explores her interests or pursues her hobbies (but not both), then she discovers her passions."
    ],
    "rules_fol": [
      "follow_intuition(Fiona) ⊕ self_reflect(Fiona)",
      "∀x (trust_gut(x) → follow_intuition(x))",
      "(explore_interests(Fiona) ⊕ pursue_hobbies(Fiona)) → discover_passions(Fiona)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Anyone who feels uncertain either self-reflects or seeks guidance.",
      "Anyone who feels uncertain either follows their intuition or re-evaluates their goals.",
      "If Fiona seeks truth, then she will discover her passions."
    ],
    "distracting_rules_fol": [
      "∀x (feel_uncertain(x) → (self_reflect(x) ∨ seek_guidance(x)))",
      "∀x (feel_uncertain(x) → (follow_intuition(x) ∨ re_evaluate_goals(x)))",
      "seek_truth(Fiona) → discover_passions(Fiona)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Fiona does not explore her interests.",
          "Fiona does not pursue her hobbies."
        ],
        "rules": "If Fiona either explores her interests or pursues her hobbies (but not both), then she discovers her passions.",
        "conclusion": null
      },
      {
        "facts": [
          "Fiona trusts her gut."
        ],
        "rules": "If someone trusts their gut, then they follow their intuition.",
        "conclusion": "Fiona follows her intuition."
      },
      {
        "facts": [
          "Fiona follows her intuition."
        ],
        "rules": "Fiona either follows her intuition or takes the time to self-reflect, but not necessarily both.",
        "conclusion": "Fiona does not self-reflect."
      },
      {
        "facts": [
          "Fiona does not self-reflect.",
          "Fiona makes informed decisions."
        ],
        "rules": null,
        "conclusion": "If Fiona self-reflects, then she discovers her passions and makes informed decisions."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬explore_interests(Fiona)",
          "¬pursue_hobbies(Fiona)"
        ],
        "rules": "(explore_interests(Fiona) ⊕ pursue_hobbies(Fiona)) → discover_passions(Fiona)",
        "conclusion": null
      },
      {
        "facts": [
          "trust_gut(Fiona)"
        ],
        "rules": "∀x (trust_gut(x) → follow_intuition(x))",
        "conclusion": "follow_intuition(Fiona)"
      },
      {
        "facts": [
          "follow_intuition(Fiona)"
        ],
        "rules": "follow_intuition(Fiona) ⊕ self_reflect(Fiona)",
        "conclusion": "¬self_reflect(Fiona)"
      },
      {
        "facts": [
          "¬self_reflect(Fiona)",
          "make_informed_decisions(Fiona)"
        ],
        "rules": null,
        "conclusion": "self_reflect(Fiona) → (discover_passions(Fiona) ∧ make_informed_decisions(Fiona))"
      }
    ],
    "conclusion": "If Fiona self-reflects, then she discovers her passions and makes informed decisions.",
    "conclusion_fol": "self_reflect(Fiona) → (discover_passions(Fiona) ∧ make_informed_decisions(Fiona))",
    "answer": "True",
    "context": [
      "Fiona does not explore her interests.",
      "Fiona does not pursue her hobbies.",
      "If Fiona either explores her interests or pursues her hobbies (but not both), then she discovers her passions.",
      "Fiona trusts her gut.",
      "If someone trusts their gut, then they follow their intuition.",
      "Fiona either follows her intuition or takes the time to self-reflect, but not necessarily both.",
      "Fiona makes informed decisions."
    ],
    "context_fol": [
      "¬explore_interests(Fiona)",
      "¬pursue_hobbies(Fiona)",
      "(explore_interests(Fiona) ⊕ pursue_hobbies(Fiona)) → discover_passions(Fiona)",
      "trust_gut(Fiona)",
      "∀x (trust_gut(x) → follow_intuition(x))",
      "follow_intuition(Fiona) ⊕ self_reflect(Fiona)",
      "make_informed_decisions(Fiona)"
    ],
    "background_story": "Fiona woke up one morning feeling utterly confused. She had just graduated from college and was expected to start her dream job, but as she lay in bed, she couldn't shake off the feeling that she was meant to do something else. She had always been driven and focused, but now, her mind was a jumble of conflicting desires and uncertainties. As she navigated her way through the day, Fiona found herself questioning every decision she had made so far. She felt lost and disconnected from her own aspirations. Despite her outward confidence, Fiona was confused about her future, and the fear of making the wrong choice paralyzed her. She knew she needed to take a step back, reflect on her passions, and rediscover what truly made her happy.",
    "name": "Fiona",
    "keyword": "confused",
    "subject_category": "human"
  },
  {
    "facts": [
      "Sariyah analyzes spores.",
      "Sariyah collects samples as part of her research."
    ],
    "facts_fol": [
      "analyzes_spores(Sariyah)",
      "collects_samples(Sariyah)"
    ],
    "rules": [
      "Sariyah either specializes in Rosellinia or studies other fungi, but not both.",
      "Sariyah either explores ecosystems or specializes in Rosellinia, but not both.",
      "If Sariyah either examines soil or analyzes spores (but not both), then she explores ecosystems.",
      "A mycologist either collects samples or examines soil, but not necessarily both, as part of their research."
    ],
    "rules_fol": [
      "specializes_in_Rosellinia(Sariyah) ⊕ studies_other_fungi(Sariyah)",
      "explores_ecosystems(Sariyah) ⊕ specializes_in_Rosellinia(Sariyah)",
      "(examines_soil(Sariyah) ⊕ analyzes_spores(Sariyah)) → explores_ecosystems(Sariyah)",
      "∀x (collects_samples(x) ⊕ examines_soil(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Sariyah researches symbiosis or investigates fungal relations, then she specializes in Rosellinia.",
      "If Sariyah researches fungi, then she explores ecosystems.",
      "Any mycologist who identifies fungi or researches habitats examines soil."
    ],
    "distracting_rules_fol": [
      "(researches_symbiosis(Sariyah) ∨ investigates_fungal_relations(Sariyah)) → specializes_in_Rosellinia(Sariyah)",
      "researches_fungi(Sariyah) → explores_ecosystems(Sariyah)",
      "∀x ((identifies_fungi(x) ∨ researches_habitats(x)) → examines_soil(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Sariyah collects samples as part of her research."
        ],
        "rules": "A mycologist either collects samples or examines soil, but not necessarily both, as part of their research.",
        "conclusion": "Sariyah does not examine soil."
      },
      {
        "facts": [
          "Sariyah does not examine soil.",
          "Sariyah analyzes spores."
        ],
        "rules": "If Sariyah either examines soil or analyzes spores (but not both), then she explores ecosystems.",
        "conclusion": "Sariyah explores ecosystems."
      },
      {
        "facts": [
          "Sariyah explores ecosystems."
        ],
        "rules": "Sariyah either explores ecosystems or specializes in Rosellinia, but not both.",
        "conclusion": "Sariyah does not specialize in Rosellinia."
      },
      {
        "facts": [
          "Sariyah does not specialize in Rosellinia."
        ],
        "rules": "Sariyah either specializes in Rosellinia or studies other fungi, but not both.",
        "conclusion": "Sariyah studies other fungi."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "collects_samples(Sariyah)"
        ],
        "rules": "∀x (collects_samples(x) ⊕ examines_soil(x))",
        "conclusion": "¬examines_soil(Sariyah)"
      },
      {
        "facts": [
          "¬examines_soil(Sariyah)",
          "analyzes_spores(Sariyah)"
        ],
        "rules": "(examines_soil(Sariyah) ⊕ analyzes_spores(Sariyah)) → explores_ecosystems(Sariyah)",
        "conclusion": "explores_ecosystems(Sariyah)"
      },
      {
        "facts": [
          "explores_ecosystems(Sariyah)"
        ],
        "rules": "explores_ecosystems(Sariyah) ⊕ specializes_in_Rosellinia(Sariyah)",
        "conclusion": "¬specializes_in_Rosellinia(Sariyah)"
      },
      {
        "facts": [
          "¬specializes_in_Rosellinia(Sariyah)"
        ],
        "rules": "specializes_in_Rosellinia(Sariyah) ⊕ studies_other_fungi(Sariyah)",
        "conclusion": "studies_other_fungi(Sariyah)"
      }
    ],
    "conclusion": "Sariyah studies other fungi.",
    "conclusion_fol": "studies_other_fungi(Sariyah)",
    "answer": "True",
    "context": [
      "Sariyah collects samples as part of her research.",
      "A mycologist either collects samples or examines soil, but not necessarily both, as part of their research.",
      "Sariyah analyzes spores.",
      "If Sariyah either examines soil or analyzes spores (but not both), then she explores ecosystems.",
      "Sariyah either explores ecosystems or specializes in Rosellinia, but not both.",
      "Sariyah either specializes in Rosellinia or studies other fungi, but not both."
    ],
    "context_fol": [
      "collects_samples(Sariyah)",
      "∀x (collects_samples(x) ⊕ examines_soil(x))",
      "analyzes_spores(Sariyah)",
      "(examines_soil(Sariyah) ⊕ analyzes_spores(Sariyah)) → explores_ecosystems(Sariyah)",
      "explores_ecosystems(Sariyah) ⊕ specializes_in_Rosellinia(Sariyah)",
      "specializes_in_Rosellinia(Sariyah) ⊕ studies_other_fungi(Sariyah)"
    ],
    "background_story": "Sariyah was a renowned mycologist specializing in the study of fungi, particularly the genus Rosellinia. Her fascination with these fungi began during her graduate studies, where she spent countless hours in the lab and in the field researching their unique characteristics. Rosellinia, with its ability to form symbiotic relationships with various plant species, captivated Sariyah's imagination. She dedicated her career to understanding the intricacies of these interactions, traveling to remote locations to collect and study specimens. Sariyah's groundbreaking research on Rosellinia led to significant breakthroughs in the field of mycology, earning her international recognition and respect among her peers. Her work continues to inspire a new generation of scientists to explore the mysteries of the fungal kingdom.",
    "name": "Sariyah",
    "keyword": "rosellinia",
    "subject_category": "mycologist"
  },
  {
    "facts": [
      "Araceli follows her passion.",
      "Araceli takes risks.",
      "Araceli does not explore her creativity."
    ],
    "facts_fol": [
      "follows_passion(Araceli)",
      "takes_risks(Araceli)",
      "¬explores_creativity(Araceli)"
    ],
    "rules": [
      "If Araceli follows her passion, then she will either find happiness or achieve fulfillment, but not both.",
      "Anyone who takes risks or pursues their dreams can achieve fulfillment.",
      "Araceli tries new things or pursues her dreams.",
      "Araceli explores her creativity or tries new things."
    ],
    "rules_fol": [
      "follows_passion(Araceli) → (finds_happiness(Araceli) ⊕ achieves_fulfillment(Araceli))",
      "∀x ((takes_risks(x) ∨ pursues_dreams(x)) → achieves_fulfillment(x))",
      "tries_new_things(Araceli) ∨ pursues_dreams(Araceli)",
      "explores_creativity(Araceli) ∨ tries_new_things(Araceli)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Araceli embraces art, then she will either achieve fulfillment or gain recognition, but not both.",
      "Everyone explores interests or pursues dreams.",
      "Anyone who steps outside their comfort zone tries new things."
    ],
    "distracting_rules_fol": [
      "embraces_art(Araceli) → (achieves_fulfillment(Araceli) ⊕ gains_recognition(Araceli))",
      "∀x (explores_interests(x) ∨ pursues_dreams(x))",
      "∀x (steps_outside(x) → tries_new_things(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Araceli does not explore her creativity."
        ],
        "rules": "Araceli explores her creativity or tries new things.",
        "conclusion": "Araceli tries new things."
      },
      {
        "facts": [
          "Araceli tries new things."
        ],
        "rules": "Araceli tries new things or pursues her dreams.",
        "conclusion": null
      },
      {
        "facts": [
          "Araceli takes risks."
        ],
        "rules": "Anyone who takes risks or pursues their dreams can achieve fulfillment.",
        "conclusion": "Araceli achieves fulfillment."
      },
      {
        "facts": [
          "Araceli follows her passion.",
          "Araceli achieves fulfillment."
        ],
        "rules": "If Araceli follows her passion, then she will either find happiness or achieve fulfillment, but not both.",
        "conclusion": "Araceli finds happiness."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬explores_creativity(Araceli)"
        ],
        "rules": "explores_creativity(Araceli) ∨ tries_new_things(Araceli)",
        "conclusion": "tries_new_things(Araceli)"
      },
      {
        "facts": [
          "tries_new_things(Araceli)"
        ],
        "rules": "tries_new_things(Araceli) ∨ pursues_dreams(Araceli)",
        "conclusion": null
      },
      {
        "facts": [
          "takes_risks(Araceli)"
        ],
        "rules": "∀x ((takes_risks(x) ∨ pursues_dreams(x)) → achieves_fulfillment(x))",
        "conclusion": "achieves_fulfillment(Araceli)"
      },
      {
        "facts": [
          "follows_passion(Araceli)",
          "achieves_fulfillment(Araceli)"
        ],
        "rules": "follows_passion(Araceli) → (finds_happiness(Araceli) ⊕ achieves_fulfillment(Araceli))",
        "conclusion": "finds_happiness(Araceli)"
      }
    ],
    "conclusion": "Araceli finds happiness.",
    "conclusion_fol": "finds_happiness(Araceli)",
    "answer": "False",
    "context": [
      "Araceli does not explore her creativity.",
      "Araceli explores her creativity or tries new things.",
      "Araceli tries new things or pursues her dreams.",
      "Araceli takes risks.",
      "Anyone who takes risks or pursues their dreams can achieve fulfillment.",
      "Araceli follows her passion.",
      "If Araceli follows her passion, then she will either find happiness or achieve fulfillment, but not both."
    ],
    "context_fol": [
      "¬explores_creativity(Araceli)",
      "explores_creativity(Araceli) ∨ tries_new_things(Araceli)",
      "tries_new_things(Araceli) ∨ pursues_dreams(Araceli)",
      "takes_risks(Araceli)",
      "∀x ((takes_risks(x) ∨ pursues_dreams(x)) → achieves_fulfillment(x))",
      "follows_passion(Araceli)",
      "follows_passion(Araceli) → (finds_happiness(Araceli) ⊕ achieves_fulfillment(Araceli))"
    ],
    "background_story": "Araceli had always dreamed of becoming a professional artist, but she was hesitant to pursue her passion. Fear of failure and uncertainty about her talent held her back. Despite her parents' encouragement, she opted for a more stable career in accounting. Years went by, and Araceli found herself unfulfilled, feeling like a part of her was dormant. One day, on a whim, she signed up for a painting class. As she dipped her brush into the vibrant colors, her hesitation began to fade. With each stroke, she felt her confidence grow. Araceli eventually quit her job to focus on her art, and though the journey was scary, she finally found the courage to turn her dream into a reality, learning that sometimes, taking a leap of faith is the only way to truly find oneself.",
    "name": "Araceli",
    "keyword": "hesitant",
    "subject_category": "human"
  },
  {
    "facts": [
      "Dominick thinks critically.",
      "Dominick solves puzzles.",
      "Dominick is systematic.",
      "Dominick is meticulous.",
      "Dominick is not detailed."
    ],
    "facts_fol": [
      "thinks_critically(Dominick)",
      "solves_puzzles(Dominick)",
      "is_systematic(Dominick)",
      "is_meticulous(Dominick)",
      "¬is_detailed(Dominick)"
    ],
    "rules": [
      "Dominick is either logical or intuitive, but not both.",
      "Everyone who is analytical is either methodical or logical (or both).",
      "If someone solves puzzles and thinks critically, then they are analytical.",
      "If Dominick is systematic, then he is either precise or methodical, but not both.",
      "If Dominick is meticulous, then he is either precise or detailed, but not both."
    ],
    "rules_fol": [
      "logical(Dominick) ⊕ intuitive(Dominick)",
      "∀x (analytical(x) → (methodical(x) ∨ logical(x)))",
      "∀x ((solves_puzzles(x) ∧ thinks_critically(x)) → analytical(x))",
      "is_systematic(Dominick) → (is_precise(Dominick) ⊕ methodical(Dominick))",
      "is_meticulous(Dominick) → (is_precise(Dominick) ⊕ is_detailed(Dominick))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Dominick either sees patterns or makes connections (but not both), then he is logical.",
      "All rational individuals are analytical.",
      "If Dominick either breaks codes or cracks riddles (but not both), then he is methodical.",
      "Dominick thinks clearly or is precise."
    ],
    "distracting_rules_fol": [
      "(sees_patterns(Dominick) ⊕ makes_connections(Dominick)) → logical(Dominick)",
      "∀x (rational(x) → analytical(x))",
      "(breaks_codes(Dominick) ⊕ cracks_riddles(Dominick)) → methodical(Dominick)",
      "thinks_clearly(Dominick) ∨ is_precise(Dominick)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Dominick is meticulous.",
          "Dominick is not detailed."
        ],
        "rules": "If Dominick is meticulous, then he is either precise or detailed, but not both.",
        "conclusion": "Dominick is precise."
      },
      {
        "facts": [
          "Dominick is systematic.",
          "Dominick is precise."
        ],
        "rules": "If Dominick is systematic, then he is either precise or methodical, but not both.",
        "conclusion": "Dominick is not methodical."
      },
      {
        "facts": [
          "Dominick solves puzzles.",
          "Dominick thinks critically."
        ],
        "rules": "If someone solves puzzles and thinks critically, then they are analytical.",
        "conclusion": "Dominick is analytical."
      },
      {
        "facts": [
          "Dominick is analytical.",
          "Dominick is not methodical."
        ],
        "rules": "Everyone who is analytical is either methodical or logical (or both).",
        "conclusion": "Dominick is logical."
      },
      {
        "facts": [
          "Dominick is logical."
        ],
        "rules": "Dominick is either logical or intuitive, but not both.",
        "conclusion": "Dominick is not intuitive."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "is_meticulous(Dominick)",
          "¬is_detailed(Dominick)"
        ],
        "rules": "is_meticulous(Dominick) → (is_precise(Dominick) ⊕ is_detailed(Dominick))",
        "conclusion": "is_precise(Dominick)"
      },
      {
        "facts": [
          "is_systematic(Dominick)",
          "is_precise(Dominick)"
        ],
        "rules": "is_systematic(Dominick) → (is_precise(Dominick) ⊕ methodical(Dominick))",
        "conclusion": "¬methodical(Dominick)"
      },
      {
        "facts": [
          "solves_puzzles(Dominick)",
          "thinks_critically(Dominick)"
        ],
        "rules": "∀x ((solves_puzzles(x) ∧ thinks_critically(x)) → analytical(x))",
        "conclusion": "analytical(Dominick)"
      },
      {
        "facts": [
          "analytical(Dominick)",
          "¬methodical(Dominick)"
        ],
        "rules": "∀x (analytical(x) → (methodical(x) ∨ logical(x)))",
        "conclusion": "logical(Dominick)"
      },
      {
        "facts": [
          "logical(Dominick)"
        ],
        "rules": "logical(Dominick) ⊕ intuitive(Dominick)",
        "conclusion": "¬intuitive(Dominick)"
      }
    ],
    "conclusion": "Dominick is not intuitive.",
    "conclusion_fol": "¬intuitive(Dominick)",
    "answer": "True",
    "context": [
      "Dominick is meticulous.",
      "Dominick is not detailed.",
      "If Dominick is meticulous, then he is either precise or detailed, but not both.",
      "Dominick is systematic.",
      "If Dominick is systematic, then he is either precise or methodical, but not both.",
      "Dominick solves puzzles.",
      "Dominick thinks critically.",
      "If someone solves puzzles and thinks critically, then they are analytical.",
      "Everyone who is analytical is either methodical or logical (or both).",
      "Dominick is either logical or intuitive, but not both."
    ],
    "context_fol": [
      "is_meticulous(Dominick)",
      "¬is_detailed(Dominick)",
      "is_meticulous(Dominick) → (is_precise(Dominick) ⊕ is_detailed(Dominick))",
      "is_systematic(Dominick)",
      "is_systematic(Dominick) → (is_precise(Dominick) ⊕ methodical(Dominick))",
      "solves_puzzles(Dominick)",
      "thinks_critically(Dominick)",
      "∀x ((solves_puzzles(x) ∧ thinks_critically(x)) → analytical(x))",
      "∀x (analytical(x) → (methodical(x) ∨ logical(x)))",
      "logical(Dominick) ⊕ intuitive(Dominick)"
    ],
    "background_story": "Dominick was a brilliant mathematician renowned for his exceptional logicality. As a child, he was fascinated by puzzles and brain teasers, which honed his analytical mind. He pursued a career in cryptography, where his ability to think logically and methodically helped him crack even the most complex codes. Dominick's colleagues admired his systematic approach to problem-solving, often seeking his input on seemingly insurmountable challenges. His logical mindset also made him an avid chess player, able to anticipate multiple moves ahead. With his razor-sharp mind, Dominick made groundbreaking contributions to his field, earning him numerous accolades and a reputation as one of the most logical thinkers of his generation.",
    "name": "Dominick",
    "keyword": "logicality",
    "subject_category": "human"
  },
  {
    "facts": [
      "Joy does not enjoy local cuisine.",
      "Joy is open-minded.",
      "Joy seeks new experiences.",
      "Joy does not honor her heritage."
    ],
    "facts_fol": [
      "¬enjoy_local_cuisine(Joy)",
      "is_open_minded(Joy)",
      "seek_new_experiences(Joy)",
      "¬honors_Heritage(Joy)"
    ],
    "rules": [
      "If Joy is open-minded, then she either respects traditions or appreciates multiculturalism, but not both.",
      "For Joy, valuing diversity and seeking new experiences are distinct characteristics, where she may exhibit one or the other, but not necessarily both simultaneously.",
      "Joy either honors her heritage or respects traditions."
    ],
    "rules_fol": [
      "is_open_minded(Joy) → (respect_traditions(Joy) ⊕ appreciate_multiculturalism(Joy))",
      "seek_new_experiences(Joy) ⊕ value_diversity(Joy)",
      "honors_Heritage(Joy) ∨ respect_traditions(Joy)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Everyone likes food or appreciates multiculturalism.",
      "Anyone who likes variety values diversity.",
      "If Joy loves cooking, then she respects traditions and creates innovations."
    ],
    "distracting_rules_fol": [
      "∀x (likes_food(x) ∨ appreciate_multiculturalism(x))",
      "∀x (likes_variety(x) → value_diversity(x))",
      "love_cooking(Joy) → (respect_traditions(Joy) ∧ create_innovations(Joy))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Joy does not honor her heritage."
        ],
        "rules": "Joy either honors her heritage or respects traditions.",
        "conclusion": "Joy respects traditions."
      },
      {
        "facts": [
          "Joy seeks new experiences."
        ],
        "rules": "For Joy, valuing diversity and seeking new experiences are distinct characteristics, where she may exhibit one or the other, but not necessarily both simultaneously.",
        "conclusion": "Joy does not value diversity."
      },
      {
        "facts": [
          "Joy is open-minded.",
          "Joy respects traditions."
        ],
        "rules": "If Joy is open-minded, then she either respects traditions or appreciates multiculturalism, but not both.",
        "conclusion": "Joy does not appreciate multiculturalism."
      },
      {
        "facts": [
          "Joy does not appreciate multiculturalism.",
          "Joy does not enjoy local cuisine.",
          "Joy does not value diversity."
        ],
        "rules": null,
        "conclusion": "If Joy appreciates multiculturalism or enjoys local cuisine (or both), then she values diversity."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬honors_Heritage(Joy)"
        ],
        "rules": "honors_Heritage(Joy) ∨ respect_traditions(Joy)",
        "conclusion": "respect_traditions(Joy)"
      },
      {
        "facts": [
          "seek_new_experiences(Joy)"
        ],
        "rules": "seek_new_experiences(Joy) ⊕ value_diversity(Joy)",
        "conclusion": "¬value_diversity(Joy)"
      },
      {
        "facts": [
          "is_open_minded(Joy)",
          "respect_traditions(Joy)"
        ],
        "rules": "is_open_minded(Joy) → (respect_traditions(Joy) ⊕ appreciate_multiculturalism(Joy))",
        "conclusion": "¬appreciate_multiculturalism(Joy)"
      },
      {
        "facts": [
          "¬appreciate_multiculturalism(Joy)",
          "¬enjoy_local_cuisine(Joy)",
          "¬value_diversity(Joy)"
        ],
        "rules": null,
        "conclusion": "(appreciate_multiculturalism(Joy) ∨ enjoy_local_cuisine(Joy)) → value_diversity(Joy)"
      }
    ],
    "conclusion": "If Joy appreciates multiculturalism or enjoys local cuisine (or both), then she values diversity.",
    "conclusion_fol": "(appreciate_multiculturalism(Joy) ∨ enjoy_local_cuisine(Joy)) → value_diversity(Joy)",
    "answer": "True",
    "context": [
      "Joy does not honor her heritage.",
      "Joy either honors her heritage or respects traditions.",
      "Joy seeks new experiences.",
      "For Joy, valuing diversity and seeking new experiences are distinct characteristics, where she may exhibit one or the other, but not necessarily both simultaneously.",
      "Joy is open-minded.",
      "If Joy is open-minded, then she either respects traditions or appreciates multiculturalism, but not both.",
      "Joy does not enjoy local cuisine."
    ],
    "context_fol": [
      "¬honors_Heritage(Joy)",
      "honors_Heritage(Joy) ∨ respect_traditions(Joy)",
      "seek_new_experiences(Joy)",
      "seek_new_experiences(Joy) ⊕ value_diversity(Joy)",
      "is_open_minded(Joy)",
      "is_open_minded(Joy) → (respect_traditions(Joy) ⊕ appreciate_multiculturalism(Joy))",
      "¬enjoy_local_cuisine(Joy)"
    ],
    "background_story": "Joy was a proud Singaporean who embodied the multicultural spirit of her homeland. Born and raised in a HDB flat in Tiong Bahru, she grew up speaking English, Mandarin, and Hokkien. Joy loved exploring the diverse neighborhoods of Singapore, from the colorful streets of Little India to the bustling hawker centers of Chinatown. She was especially fond of trying all sorts of local cuisine, from chili crab to laksa, and could often be found at the weekend markets, sampling the latest street food trends. As a talented young chef, Joy opened her own restaurant in Katong, serving innovative fusion dishes that blended traditional Singaporean flavors with modern twists. Her restaurant quickly became a favorite among locals and tourists alike, and Joy was hailed as a rising star of the Singaporean food scene.",
    "name": "Joy",
    "keyword": "singaporean",
    "subject_category": "human"
  },
  {
    "facts": [
      "Laurel makes mistakes.",
      "Laurel is persistent."
    ],
    "facts_fol": [
      "makes_mistakes(Laurel)",
      "persistent(Laurel)"
    ],
    "rules": [
      "If Laurel is clumsy, then she can either make accidental discoveries or achieve intentional innovations, but not both.",
      "Laurel either makes mistakes or has accidental discoveries, but not both.",
      "If Laurel is persistent, then she is both creative and clumsy."
    ],
    "rules_fol": [
      "clumsy(Laurel) → (accidental_discoveries(Laurel) ⊕ intentional_innovations(Laurel))",
      "makes_mistakes(Laurel) ⊕ accidental_discoveries(Laurel)",
      "persistent(Laurel) → (creative(Laurel) ∧ clumsy(Laurel))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Anyone who tries hard and experiments frequently can make accidental discoveries.",
      "If Laurel is experimental, then she either produces pioneering work or is clumsy (or both)."
    ],
    "distracting_rules_fol": [
      "∀x ((tries_hard(x) ∧ experiments_frequently(x)) → accidental_discoveries(x))",
      "experimental(Laurel) → (pioneering_work(Laurel) ∨ clumsy(Laurel))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Laurel is persistent."
        ],
        "rules": "If Laurel is persistent, then she is both creative and clumsy.",
        "conclusion": "Laurel is clumsy."
      },
      {
        "facts": [
          "Laurel makes mistakes."
        ],
        "rules": "Laurel either makes mistakes or has accidental discoveries, but not both.",
        "conclusion": "Laurel does not make accidental discoveries."
      },
      {
        "facts": [
          "Laurel is clumsy.",
          "Laurel does not make accidental discoveries."
        ],
        "rules": "If Laurel is clumsy, then she can either make accidental discoveries or achieve intentional innovations, but not both.",
        "conclusion": "Laurel achieves intentional innovations."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "persistent(Laurel)"
        ],
        "rules": "persistent(Laurel) → (creative(Laurel) ∧ clumsy(Laurel))",
        "conclusion": "clumsy(Laurel)"
      },
      {
        "facts": [
          "makes_mistakes(Laurel)"
        ],
        "rules": "makes_mistakes(Laurel) ⊕ accidental_discoveries(Laurel)",
        "conclusion": "¬accidental_discoveries(Laurel)"
      },
      {
        "facts": [
          "clumsy(Laurel)",
          "¬accidental_discoveries(Laurel)"
        ],
        "rules": "clumsy(Laurel) → (accidental_discoveries(Laurel) ⊕ intentional_innovations(Laurel))",
        "conclusion": "intentional_innovations(Laurel)"
      }
    ],
    "conclusion": "Laurel achieves intentional innovations.",
    "conclusion_fol": "intentional_innovations(Laurel)",
    "answer": "True",
    "context": [
      "Laurel is persistent.",
      "If Laurel is persistent, then she is both creative and clumsy.",
      "Laurel makes mistakes.",
      "Laurel either makes mistakes or has accidental discoveries, but not both.",
      "If Laurel is clumsy, then she can either make accidental discoveries or achieve intentional innovations, but not both."
    ],
    "context_fol": [
      "persistent(Laurel)",
      "persistent(Laurel) → (creative(Laurel) ∧ clumsy(Laurel))",
      "makes_mistakes(Laurel)",
      "makes_mistakes(Laurel) ⊕ accidental_discoveries(Laurel)",
      "clumsy(Laurel) → (accidental_discoveries(Laurel) ⊕ intentional_innovations(Laurel))"
    ],
    "background_story": "Laurel was a brilliant but accident-prone inventor. Her friends and family affectionately called her a 'stumbler' due to her tendency to trip over her own feet or spill coffee on her latest prototype. Despite her clumsiness, Laurel's mind was a treasure trove of innovative ideas. She would often stumble upon groundbreaking solutions while trying to fix her own mistakes. One day, while attempting to create a robotic arm, Laurel accidentally programmed it to adapt to new situations. This 'mistake' led to a revolutionary breakthrough in artificial intelligence, earning her international recognition and accolades. Laurel's story proves that even the most hapless stumbler can achieve greatness with determination and a willingness to learn from their mistakes.",
    "name": "Laurel",
    "keyword": "stumbler",
    "subject_category": "human"
  },
  {
    "facts": [
      "Chance is a craftsman.",
      "Chance is an artist.",
      "Chance is not creative."
    ],
    "facts_fol": [
      "craftsman(Chance)",
      "artist(Chance)",
      "¬creative(Chance)"
    ],
    "rules": [
      "For every human, they are either skilled or unskilled, but not both.",
      "If Chance is a craftsman, then he is either skilled or talented, but not both.",
      "If Chance is an artist, then he is either creative or talented, but not both."
    ],
    "rules_fol": [
      "∀x (skilled(x) ⊕ unskilled(x))",
      "craftsman(Chance) → (skilled(Chance) ⊕ talented(Chance))",
      "artist(Chance) → (creative(Chance) ⊕ talented(Chance))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Chance either makes jewels or engraves metal (but not both), then he is skilled.",
      "If Chance is dedicated, then he is either talented or innovative."
    ],
    "distracting_rules_fol": [
      "(makes_jewels(Chance) ⊕ engraves_metal(Chance)) → skilled(Chance)",
      "dedicated(Chance) → (talented(Chance) ∨ innovative(Chance))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Chance is an artist.",
          "Chance is not creative."
        ],
        "rules": "If Chance is an artist, then he is either creative or talented, but not both.",
        "conclusion": "Chance is talented."
      },
      {
        "facts": [
          "Chance is a craftsman.",
          "Chance is talented."
        ],
        "rules": "If Chance is a craftsman, then he is either skilled or talented, but not both.",
        "conclusion": "Chance is not skilled."
      },
      {
        "facts": [
          "Chance is not skilled."
        ],
        "rules": "For every human, they are either skilled or unskilled, but not both.",
        "conclusion": "Chance is unskilled."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "artist(Chance)",
          "¬creative(Chance)"
        ],
        "rules": "artist(Chance) → (creative(Chance) ⊕ talented(Chance))",
        "conclusion": "talented(Chance)"
      },
      {
        "facts": [
          "craftsman(Chance)",
          "talented(Chance)"
        ],
        "rules": "craftsman(Chance) → (skilled(Chance) ⊕ talented(Chance))",
        "conclusion": "¬skilled(Chance)"
      },
      {
        "facts": [
          "¬skilled(Chance)"
        ],
        "rules": "∀x (skilled(x) ⊕ unskilled(x))",
        "conclusion": "unskilled(Chance)"
      }
    ],
    "conclusion": "Chance is unskilled.",
    "conclusion_fol": "unskilled(Chance)",
    "answer": "True",
    "context": [
      "Chance is an artist.",
      "Chance is not creative.",
      "If Chance is an artist, then he is either creative or talented, but not both.",
      "Chance is a craftsman.",
      "If Chance is a craftsman, then he is either skilled or talented, but not both.",
      "For every human, they are either skilled or unskilled, but not both."
    ],
    "context_fol": [
      "artist(Chance)",
      "¬creative(Chance)",
      "artist(Chance) → (creative(Chance) ⊕ talented(Chance))",
      "craftsman(Chance)",
      "craftsman(Chance) → (skilled(Chance) ⊕ talented(Chance))",
      "∀x (skilled(x) ⊕ unskilled(x))"
    ],
    "background_story": "Chance was a young apprentice to the royal silversmith, tasked with crafting exquisite pieces for the kingdom's nobility. His masterpiece was a goblet adorned with intricate engravings and gems, meant for the king's coronation ceremony. As Chance worked tirelessly to perfect the goblet, he infused it with his hopes and dreams. When the king raised the goblet in a toast, Chance felt an overwhelming sense of pride. The goblet became a symbol of his skill and dedication, earning him a permanent place in the royal court as the official silversmith. Chance's creation was not only a work of art but a reminder that even the humblest of beginnings can lead to greatness with hard work and a bit of chance.",
    "name": "Chance",
    "keyword": "goblet",
    "subject_category": "human"
  },
  {
    "facts": [
      "Teresa is not flexible.",
      "Teresa is a scientist.",
      "Teresa is an engineer."
    ],
    "facts_fol": [
      "¬flexible(Teresa)",
      "is_scientist(Teresa)",
      "is_engineer(Teresa)"
    ],
    "rules": [
      "For every human, they are either precise in their work or imprecise, but not both.",
      "If Teresa is a researcher, then she is either precise or flexible, but not both.",
      "Teresa is either a researcher or an innovator, but not both.",
      "If Teresa is a scientist, then she is either an engineer or an innovator, but not both."
    ],
    "rules_fol": [
      "∀x (precise(x) ⊕ imprecise(x))",
      "researcher(Teresa) → (precise(Teresa) ⊕ flexible(Teresa))",
      "is_innovator(Teresa) ⊕ researcher(Teresa)",
      "is_scientist(Teresa) → (is_engineer(Teresa) ⊕ is_innovator(Teresa))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Teresa uses models or makes estimates, then she can be precise.",
      "If Teresa is an expert, then she is either a researcher or a pioneer, but not both.",
      "If Teresa thinks creatively, then she is an innovator."
    ],
    "distracting_rules_fol": [
      "(uses_models(Teresa) ∨ makes_estimates(Teresa)) → precise(Teresa)",
      "expert(Teresa) → (researcher(Teresa) ⊕ pioneer(Teresa))",
      "thinks_creatively(Teresa) → is_innovator(Teresa)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Teresa is a scientist.",
          "Teresa is an engineer."
        ],
        "rules": "If Teresa is a scientist, then she is either an engineer or an innovator, but not both.",
        "conclusion": "Teresa is not an innovator."
      },
      {
        "facts": [
          "Teresa is not an innovator."
        ],
        "rules": "Teresa is either a researcher or an innovator, but not both.",
        "conclusion": "Teresa is a researcher."
      },
      {
        "facts": [
          "Teresa is a researcher.",
          "Teresa is not flexible."
        ],
        "rules": "If Teresa is a researcher, then she is either precise or flexible, but not both.",
        "conclusion": "Teresa is precise in her calculations."
      },
      {
        "facts": [
          "Teresa is precise in her calculations."
        ],
        "rules": "For every human, they are either precise in their work or imprecise, but not both.",
        "conclusion": "Teresa is imprecise in her calculations."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "is_scientist(Teresa)",
          "is_engineer(Teresa)"
        ],
        "rules": "is_scientist(Teresa) → (is_engineer(Teresa) ⊕ is_innovator(Teresa))",
        "conclusion": "¬is_innovator(Teresa)"
      },
      {
        "facts": [
          "¬is_innovator(Teresa)"
        ],
        "rules": "is_innovator(Teresa) ⊕ researcher(Teresa)",
        "conclusion": "researcher(Teresa)"
      },
      {
        "facts": [
          "researcher(Teresa)",
          "¬flexible(Teresa)"
        ],
        "rules": "researcher(Teresa) → (precise(Teresa) ⊕ flexible(Teresa))",
        "conclusion": "precise(Teresa)"
      },
      {
        "facts": [
          "precise(Teresa)"
        ],
        "rules": "∀x (precise(x) ⊕ imprecise(x))",
        "conclusion": "imprecise(Teresa)"
      }
    ],
    "conclusion": "Teresa is imprecise in her calculations.",
    "conclusion_fol": "imprecise(Teresa)",
    "answer": "False",
    "context": [
      "Teresa is a scientist.",
      "Teresa is an engineer.",
      "If Teresa is a scientist, then she is either an engineer or an innovator, but not both.",
      "Teresa is either a researcher or an innovator, but not both.",
      "Teresa is not flexible.",
      "If Teresa is a researcher, then she is either precise or flexible, but not both.",
      "For every human, they are either precise in their work or imprecise, but not both."
    ],
    "context_fol": [
      "is_scientist(Teresa)",
      "is_engineer(Teresa)",
      "is_scientist(Teresa) → (is_engineer(Teresa) ⊕ is_innovator(Teresa))",
      "is_innovator(Teresa) ⊕ researcher(Teresa)",
      "¬flexible(Teresa)",
      "researcher(Teresa) → (precise(Teresa) ⊕ flexible(Teresa))",
      "∀x (precise(x) ⊕ imprecise(x))"
    ],
    "background_story": "Teresa was a brilliant physicist known for her groundbreaking work in quantum mechanics. Her research focused on making approximate calculations more precise, which could revolutionize fields from medicine to space exploration. Teresa's colleagues admired her unique approach to complex problems, often finding creative solutions where others saw only roadblocks. Although she never sought to be in the spotlight, her approximate models became the foundation for numerous innovations, earning her the respect and gratitude of the scientific community. Teresa's humility and dedication to her craft made her a beloved figure, and her work continued to inspire new generations of scientists to strive for precision and excellence.",
    "name": "Teresa",
    "keyword": "approximate",
    "subject_category": "human"
  },
  {
    "facts": [
      "Jianna reads books.",
      "Jianna visits museums.",
      "Jianna conducts interviews.",
      "Jianna analyzes data."
    ],
    "facts_fol": [
      "reads_books(Jianna)",
      "visits_museums(Jianna)",
      "conducts_interviews(Jianna)",
      "analyzes_data(Jianna)"
    ],
    "rules": [
      "If Jianna is a historian, then she either publishes research or teaches others, but not both.",
      "Jianna is either a historian or collects artifacts, but not both.",
      "Jianna either studies history or collects artifacts, but not both.",
      "If Jianna reads books and visits museums, then she studies history.",
      "If Jianna conducts interviews and analyzes data, then she publishes research."
    ],
    "rules_fol": [
      "is_historian(Jianna) → (publish_research(Jianna) ⊕ teach_others(Jianna))",
      "collects_artifacts(Jianna) ⊕ is_historian(Jianna)",
      "studies_history(Jianna) ⊕ collects_artifacts(Jianna)",
      "(reads_books(Jianna) ∧ visits_museums(Jianna)) → studies_history(Jianna)",
      "(conducts_interviews(Jianna) ∧ analyzes_data(Jianna)) → publish_research(Jianna)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Jianna either writes papers or gives lectures (but not both), then she is a historian.",
      "Jianna either writes papers or collects artifacts.",
      "For all humans, if they examine documents and explore archives, then they study history.",
      "If someone writes papers and attends conferences, then they publish research."
    ],
    "distracting_rules_fol": [
      "(writes_papers(Jianna) ⊕ gives_lectures(Jianna)) → is_historian(Jianna)",
      "writes_papers(Jianna) ∨ collects_artifacts(Jianna)",
      "∀x ((examines_documents(x) ∧ explores_archives(x)) → studies_history(x))",
      "∀x ((writes_papers(x) ∧ attends_conferences(x)) → publish_research(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Jianna conducts interviews.",
          "Jianna analyzes data."
        ],
        "rules": "If Jianna conducts interviews and analyzes data, then she publishes research.",
        "conclusion": "Jianna publishes research."
      },
      {
        "facts": [
          "Jianna reads books.",
          "Jianna visits museums."
        ],
        "rules": "If Jianna reads books and visits museums, then she studies history.",
        "conclusion": "Jianna studies history."
      },
      {
        "facts": [
          "Jianna studies history."
        ],
        "rules": "Jianna either studies history or collects artifacts, but not both.",
        "conclusion": "Jianna does not collect artifacts."
      },
      {
        "facts": [
          "Jianna does not collect artifacts."
        ],
        "rules": "Jianna is either a historian or collects artifacts, but not both.",
        "conclusion": "Jianna is a historian."
      },
      {
        "facts": [
          "Jianna is a historian.",
          "Jianna publishes research."
        ],
        "rules": "If Jianna is a historian, then she either publishes research or teaches others, but not both.",
        "conclusion": "Jianna teaches others."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "conducts_interviews(Jianna)",
          "analyzes_data(Jianna)"
        ],
        "rules": "(conducts_interviews(Jianna) ∧ analyzes_data(Jianna)) → publish_research(Jianna)",
        "conclusion": "publish_research(Jianna)"
      },
      {
        "facts": [
          "reads_books(Jianna)",
          "visits_museums(Jianna)"
        ],
        "rules": "(reads_books(Jianna) ∧ visits_museums(Jianna)) → studies_history(Jianna)",
        "conclusion": "studies_history(Jianna)"
      },
      {
        "facts": [
          "studies_history(Jianna)"
        ],
        "rules": "studies_history(Jianna) ⊕ collects_artifacts(Jianna)",
        "conclusion": "¬collects_artifacts(Jianna)"
      },
      {
        "facts": [
          "¬collects_artifacts(Jianna)"
        ],
        "rules": "collects_artifacts(Jianna) ⊕ is_historian(Jianna)",
        "conclusion": "is_historian(Jianna)"
      },
      {
        "facts": [
          "is_historian(Jianna)",
          "publish_research(Jianna)"
        ],
        "rules": "is_historian(Jianna) → (publish_research(Jianna) ⊕ teach_others(Jianna))",
        "conclusion": "teach_others(Jianna)"
      }
    ],
    "conclusion": "Jianna teaches others.",
    "conclusion_fol": "teach_others(Jianna)",
    "answer": "False",
    "context": [
      "Jianna conducts interviews.",
      "Jianna analyzes data.",
      "If Jianna conducts interviews and analyzes data, then she publishes research.",
      "Jianna reads books.",
      "Jianna visits museums.",
      "If Jianna reads books and visits museums, then she studies history.",
      "Jianna either studies history or collects artifacts, but not both.",
      "Jianna is either a historian or collects artifacts, but not both.",
      "If Jianna is a historian, then she either publishes research or teaches others, but not both."
    ],
    "context_fol": [
      "conducts_interviews(Jianna)",
      "analyzes_data(Jianna)",
      "(conducts_interviews(Jianna) ∧ analyzes_data(Jianna)) → publish_research(Jianna)",
      "reads_books(Jianna)",
      "visits_museums(Jianna)",
      "(reads_books(Jianna) ∧ visits_museums(Jianna)) → studies_history(Jianna)",
      "studies_history(Jianna) ⊕ collects_artifacts(Jianna)",
      "collects_artifacts(Jianna) ⊕ is_historian(Jianna)",
      "is_historian(Jianna) → (publish_research(Jianna) ⊕ teach_others(Jianna))"
    ],
    "background_story": "Jianna was a brilliant and ambitious historian, specializing in the Napoleonic Wars. Her fascination with the era led her to extensively research the Battle of Marengo, a pivotal victory for Napoleon in 1800. Jianna's studies took her to the small town of Marengo in northwest Italy, where she immersed herself in local archives and interviewed descendants of soldiers who fought in the battle. Her meticulous research and insightful analysis earned her international recognition, and she became known as the leading expert on the Battle of Marengo. Jianna's work not only shed new light on this significant historical event but also inspired a new generation of historians to explore the intricacies of Napoleon's military campaigns.",
    "name": "Jianna",
    "keyword": "marengo",
    "subject_category": "human"
  },
  {
    "facts": [
      "Emberlynn sings softly.",
      "Emberlynn respects the ocean.",
      "Emberlynn cares for the sea."
    ],
    "facts_fol": [
      "sings_softly(Emberlynn)",
      "respects_ocean(Emberlynn)",
      "cares_for_sea(Emberlynn)"
    ],
    "rules": [
      "If Emberlynn can communicate with alga or can heal coral, then she maintains ocean harmony.",
      "If Emberlynn has magic and loves nature, then she can communicate with alga.",
      "If Emberlynn sings softly or tends gardens, then she has magic.",
      "If a mermaid respects the ocean and cares for the sea, then she loves nature."
    ],
    "rules_fol": [
      "(can_communicate_with_alga(Emberlynn) ∨ can_heal_coral(Emberlynn)) → maintains_ocean_harmony(Emberlynn)",
      "(has_magic(Emberlynn) ∧ loves_nature(Emberlynn)) → can_communicate_with_alga(Emberlynn)",
      "(sings_softly(Emberlynn) ∨ tends_gardens(Emberlynn)) → has_magic(Emberlynn)",
      "∀x ((respects_ocean(x) ∧ cares_for_sea(x)) → loves_nature(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Emberlynn understands seaweed and speaks gently, then she can communicate with alga.",
      "If Emberlynn lives in harmony, then she either understands the ecosystem or has magic (or both).",
      "If Emberlynn lives in harmony, then she either loves nature or is gentle, but not both."
    ],
    "distracting_rules_fol": [
      "(understands_seaweed(Emberlynn) ∧ speaks_gently(Emberlynn)) → can_communicate_with_alga(Emberlynn)",
      "lives_in_harmony(Emberlynn) → (understands_ecosystem(Emberlynn) ∨ has_magic(Emberlynn))",
      "lives_in_harmony(Emberlynn) → (loves_nature(Emberlynn) ⊕ is_gentle(Emberlynn))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Emberlynn respects the ocean.",
          "Emberlynn cares for the sea."
        ],
        "rules": "If a mermaid respects the ocean and cares for the sea, then she loves nature.",
        "conclusion": "Emberlynn loves nature."
      },
      {
        "facts": [
          "Emberlynn sings softly."
        ],
        "rules": "If Emberlynn sings softly or tends gardens, then she has magic.",
        "conclusion": "Emberlynn has magic."
      },
      {
        "facts": [
          "Emberlynn has magic.",
          "Emberlynn loves nature."
        ],
        "rules": "If Emberlynn has magic and loves nature, then she can communicate with alga.",
        "conclusion": "Emberlynn can communicate with alga."
      },
      {
        "facts": [
          "Emberlynn can communicate with alga."
        ],
        "rules": "If Emberlynn can communicate with alga or can heal coral, then she maintains ocean harmony.",
        "conclusion": "Emberlynn does not maintain ocean harmony."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "respects_ocean(Emberlynn)",
          "cares_for_sea(Emberlynn)"
        ],
        "rules": "∀x ((respects_ocean(x) ∧ cares_for_sea(x)) → loves_nature(x))",
        "conclusion": "loves_nature(Emberlynn)"
      },
      {
        "facts": [
          "sings_softly(Emberlynn)"
        ],
        "rules": "(sings_softly(Emberlynn) ∨ tends_gardens(Emberlynn)) → has_magic(Emberlynn)",
        "conclusion": "has_magic(Emberlynn)"
      },
      {
        "facts": [
          "has_magic(Emberlynn)",
          "loves_nature(Emberlynn)"
        ],
        "rules": "(has_magic(Emberlynn) ∧ loves_nature(Emberlynn)) → can_communicate_with_alga(Emberlynn)",
        "conclusion": "can_communicate_with_alga(Emberlynn)"
      },
      {
        "facts": [
          "can_communicate_with_alga(Emberlynn)"
        ],
        "rules": "(can_communicate_with_alga(Emberlynn) ∨ can_heal_coral(Emberlynn)) → maintains_ocean_harmony(Emberlynn)",
        "conclusion": "¬maintains_ocean_harmony(Emberlynn)"
      }
    ],
    "conclusion": "Emberlynn does not maintain ocean harmony.",
    "conclusion_fol": "¬maintains_ocean_harmony(Emberlynn)",
    "answer": "False",
    "context": [
      "Emberlynn respects the ocean.",
      "Emberlynn cares for the sea.",
      "If a mermaid respects the ocean and cares for the sea, then she loves nature.",
      "Emberlynn sings softly.",
      "If Emberlynn sings softly or tends gardens, then she has magic.",
      "If Emberlynn has magic and loves nature, then she can communicate with alga.",
      "If Emberlynn can communicate with alga or can heal coral, then she maintains ocean harmony."
    ],
    "context_fol": [
      "respects_ocean(Emberlynn)",
      "cares_for_sea(Emberlynn)",
      "∀x ((respects_ocean(x) ∧ cares_for_sea(x)) → loves_nature(x))",
      "sings_softly(Emberlynn)",
      "(sings_softly(Emberlynn) ∨ tends_gardens(Emberlynn)) → has_magic(Emberlynn)",
      "(has_magic(Emberlynn) ∧ loves_nature(Emberlynn)) → can_communicate_with_alga(Emberlynn)",
      "(can_communicate_with_alga(Emberlynn) ∨ can_heal_coral(Emberlynn)) → maintains_ocean_harmony(Emberlynn)"
    ],
    "background_story": "In the depths of the ocean, Emberlynn was a mermaid with a special gift. She could communicate with the alga that swayed gently in the currents, using their whispers to heal the sick coral reefs. With her long, flowing hair the color of seaweed, Emberlynn would swim through the kelp forests, singing a soft melody that encouraged the alga to grow strong and vibrant. As she tended to the underwater gardens, the alga would wrap themselves around her, forming a protective cloak that glowed with a soft, ethereal light. Emberlynn's connection to the alga allowed her to sense the delicate balance of the ocean's ecosystem, and she worked tirelessly to maintain harmony beneath the waves.",
    "name": "Emberlynn",
    "keyword": "alga",
    "subject_category": "mermaid"
  },
  {
    "facts": [
      "Avery loses balance.",
      "Avery takes steps.",
      "Avery does not use her imagination."
    ],
    "facts_fol": [
      "loses_balance(Avery)",
      "takes_steps(Avery)",
      "¬uses_imagination(Avery)"
    ],
    "rules": [
      "Avery either plays independently or gets back up after a fall, but not necessarily both at the same time.",
      "If a toddler takes steps and loses balance, then they fall down.",
      "Every toddler who makes their own fun plays independently.",
      "Every toddler either uses their imagination or makes their own fun."
    ],
    "rules_fol": [
      "plays_independently(Avery) ⊕ gets_back_up(Avery)",
      "∀x ((takes_steps(x) ∧ loses_balance(x)) → falls_down(x))",
      "∀x (makes_own_fun(x) → plays_independently(x))",
      "∀x (uses_imagination(x) ∨ makes_own_fun(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Every toddler either learns fast or gets back up.",
      "If a toddler runs fast and has weak legs, then they will fall down.",
      "Avery either explores her environment or plays independently.",
      "Any toddler who explores their surroundings or plays with toys can make their own fun."
    ],
    "distracting_rules_fol": [
      "∀x (learns_fast(x) ∨ gets_back_up(x))",
      "∀x ((runs_fast(x) ∧ has_weak_legs(x)) → falls_down(x))",
      "explores_environment(Avery) ∨ plays_independently(Avery)",
      "∀x ((explores_surroundings(x) ∨ plays_with_toys(x)) → makes_own_fun(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Avery does not use her imagination."
        ],
        "rules": "Every toddler either uses their imagination or makes their own fun.",
        "conclusion": "Avery makes her own fun."
      },
      {
        "facts": [
          "Avery makes her own fun."
        ],
        "rules": "Every toddler who makes their own fun plays independently.",
        "conclusion": "Avery plays independently."
      },
      {
        "facts": [
          "Avery takes steps.",
          "Avery loses balance."
        ],
        "rules": "If a toddler takes steps and loses balance, then they fall down.",
        "conclusion": "Avery falls down."
      },
      {
        "facts": [
          "Avery plays independently."
        ],
        "rules": "Avery either plays independently or gets back up after a fall, but not necessarily both at the same time.",
        "conclusion": "Avery does not get back up."
      },
      {
        "facts": [
          "Avery falls down.",
          "Avery does not get back up."
        ],
        "rules": null,
        "conclusion": "If Avery falls down, then she gets back up."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬uses_imagination(Avery)"
        ],
        "rules": "∀x (uses_imagination(x) ∨ makes_own_fun(x))",
        "conclusion": "makes_own_fun(Avery)"
      },
      {
        "facts": [
          "makes_own_fun(Avery)"
        ],
        "rules": "∀x (makes_own_fun(x) → plays_independently(x))",
        "conclusion": "plays_independently(Avery)"
      },
      {
        "facts": [
          "takes_steps(Avery)",
          "loses_balance(Avery)"
        ],
        "rules": "∀x ((takes_steps(x) ∧ loses_balance(x)) → falls_down(x))",
        "conclusion": "falls_down(Avery)"
      },
      {
        "facts": [
          "plays_independently(Avery)"
        ],
        "rules": "plays_independently(Avery) ⊕ gets_back_up(Avery)",
        "conclusion": "¬gets_back_up(Avery)"
      },
      {
        "facts": [
          "falls_down(Avery)",
          "¬gets_back_up(Avery)"
        ],
        "rules": null,
        "conclusion": "falls_down(Avery) → gets_back_up(Avery)"
      }
    ],
    "conclusion": "If Avery falls down, then she gets back up.",
    "conclusion_fol": "falls_down(Avery) → gets_back_up(Avery)",
    "answer": "False",
    "context": [
      "Avery does not use her imagination.",
      "Every toddler either uses their imagination or makes their own fun.",
      "Every toddler who makes their own fun plays independently.",
      "Avery takes steps.",
      "Avery loses balance.",
      "If a toddler takes steps and loses balance, then they fall down.",
      "Avery either plays independently or gets back up after a fall, but not necessarily both at the same time."
    ],
    "context_fol": [
      "¬uses_imagination(Avery)",
      "∀x (uses_imagination(x) ∨ makes_own_fun(x))",
      "∀x (makes_own_fun(x) → plays_independently(x))",
      "takes_steps(Avery)",
      "loses_balance(Avery)",
      "∀x ((takes_steps(x) ∧ loses_balance(x)) → falls_down(x))",
      "plays_independently(Avery) ⊕ gets_back_up(Avery)"
    ],
    "background_story": "Avery was a delightful two-year-old twaddler, taking tentative steps into the world around her. With her chubby little legs and unsteady gait, she would toddle from one fascinating thing to the next, exploring every nook and cranny. Her vocabulary was limited, but her giggles and coos could light up a room. Avery loved nothing more than playing with playdough, making squishy shapes with her tiny hands. As she twaddled around the playroom, she would babble excitedly, trying to communicate with anyone who would listen. Despite the occasional tumble, Avery's determination to walk and talk like the big kids kept her going, and her adorable twaddling gait captured the hearts of everyone around her.",
    "name": "Avery",
    "keyword": "twaddler",
    "subject_category": "toddler"
  },
  {
    "facts": [
      "Ace knows water parameters.",
      "Ace does not experiment with hybrids.",
      "Ace is not a skilled horticulturist.",
      "Ace does not control lighting.",
      "Ace does not breed fish.",
      "Ace prunes plants."
    ],
    "facts_fol": [
      "knows_water_parameters(Ace)",
      "¬experiment_with_hybrids(Ace)",
      "¬skilled_horticulturist(Ace)",
      "¬controls_lighting(Ace)",
      "¬breeds_fish(Ace)",
      "prunes_plants(Ace)"
    ],
    "rules": [
      "If an aquarist knows water parameters and understands plant nutrition, then they are an experienced aquarist.",
      "If Ace is a skilled horticulturist, then he grows rare plants and experiments with hybrids.",
      "Every aquarist who cultivates exotic plants either understands plant nutrition or controls lighting (or both).",
      "If Ace either breeds fish or prunes plants (but not both), then he cultivates exotic plants."
    ],
    "rules_fol": [
      "∀x ((knows_water_parameters(x) ∧ understands_plant_nutrition(x)) → experienced_aquarist(x))",
      "skilled_horticulturist(Ace) → (grow_rare_plants(Ace) ∧ experiment_with_hybrids(Ace))",
      "∀x (cultivates_exotics(x) → (understands_plant_nutrition(x) ∨ controls_lighting(x)))",
      "(breeds_fish(Ace) ⊕ prunes_plants(Ace)) → cultivates_exotics(Ace)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Ace collects seeds, then he is either an experienced aquarist or develops new species (or both).",
      "If Ace collects seeds, then he either creates hybrids or grows rare plants, but not both.",
      "All aquarists either monitor their ecosystem or understand plant nutrition.",
      "If Ace either collects seaweed or raises corals (but not both), then he cultivates exotic plants."
    ],
    "distracting_rules_fol": [
      "collects_seeds(Ace) → (experienced_aquarist(Ace) ∨ develops_new_species(Ace))",
      "collects_seeds(Ace) → (creates_hybrids(Ace) ⊕ grow_rare_plants(Ace))",
      "∀x (monitors_ecosystem(x) ∨ understands_plant_nutrition(x))",
      "(collects_seaweed(Ace) ⊕ raises_corals(Ace)) → cultivates_exotics(Ace)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Ace does not breed fish.",
          "Ace prunes plants."
        ],
        "rules": "If Ace either breeds fish or prunes plants (but not both), then he cultivates exotic plants.",
        "conclusion": "Ace cultivates exotic plants."
      },
      {
        "facts": [
          "Ace cultivates exotic plants.",
          "Ace does not control lighting."
        ],
        "rules": "Every aquarist who cultivates exotic plants either understands plant nutrition or controls lighting (or both).",
        "conclusion": "Ace understands plant nutrition."
      },
      {
        "facts": [
          "Ace is not a skilled horticulturist.",
          "Ace does not experiment with hybrids."
        ],
        "rules": "If Ace is a skilled horticulturist, then he grows rare plants and experiments with hybrids.",
        "conclusion": null
      },
      {
        "facts": [
          "Ace knows water parameters.",
          "Ace understands plant nutrition."
        ],
        "rules": "If an aquarist knows water parameters and understands plant nutrition, then they are an experienced aquarist.",
        "conclusion": "Ace is an experienced aquarist."
      },
      {
        "facts": [
          "Ace is an experienced aquarist."
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬breeds_fish(Ace)",
          "prunes_plants(Ace)"
        ],
        "rules": "(breeds_fish(Ace) ⊕ prunes_plants(Ace)) → cultivates_exotics(Ace)",
        "conclusion": "cultivates_exotics(Ace)"
      },
      {
        "facts": [
          "cultivates_exotics(Ace)",
          "¬controls_lighting(Ace)"
        ],
        "rules": "∀x (cultivates_exotics(x) → (understands_plant_nutrition(x) ∨ controls_lighting(x)))",
        "conclusion": "understands_plant_nutrition(Ace)"
      },
      {
        "facts": [
          "¬skilled_horticulturist(Ace)",
          "¬experiment_with_hybrids(Ace)"
        ],
        "rules": "skilled_horticulturist(Ace) → (grow_rare_plants(Ace) ∧ experiment_with_hybrids(Ace))",
        "conclusion": null
      },
      {
        "facts": [
          "knows_water_parameters(Ace)",
          "understands_plant_nutrition(Ace)"
        ],
        "rules": "∀x ((knows_water_parameters(x) ∧ understands_plant_nutrition(x)) → experienced_aquarist(x))",
        "conclusion": "experienced_aquarist(Ace)"
      },
      {
        "facts": [
          "experienced_aquarist(Ace)"
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "conclusion": "If Ace is an experienced aquarist, then he either grows rare plants or contributes to conservation (or both).",
    "conclusion_fol": "experienced_aquarist(Ace) → (grow_rare_plants(Ace) ∨ contribute_to_conservation(Ace))",
    "answer": "Uncertain",
    "context": [
      "Ace does not breed fish.",
      "Ace prunes plants.",
      "If Ace either breeds fish or prunes plants (but not both), then he cultivates exotic plants.",
      "Ace does not control lighting.",
      "Every aquarist who cultivates exotic plants either understands plant nutrition or controls lighting (or both).",
      "Ace is not a skilled horticulturist.",
      "Ace does not experiment with hybrids.",
      "If Ace is a skilled horticulturist, then he grows rare plants and experiments with hybrids.",
      "Ace knows water parameters.",
      "If an aquarist knows water parameters and understands plant nutrition, then they are an experienced aquarist."
    ],
    "context_fol": [
      "¬breeds_fish(Ace)",
      "prunes_plants(Ace)",
      "(breeds_fish(Ace) ⊕ prunes_plants(Ace)) → cultivates_exotics(Ace)",
      "¬controls_lighting(Ace)",
      "∀x (cultivates_exotics(x) → (understands_plant_nutrition(x) ∨ controls_lighting(x)))",
      "¬skilled_horticulturist(Ace)",
      "¬experiment_with_hybrids(Ace)",
      "skilled_horticulturist(Ace) → (grow_rare_plants(Ace) ∧ experiment_with_hybrids(Ace))",
      "knows_water_parameters(Ace)",
      "∀x ((knows_water_parameters(x) ∧ understands_plant_nutrition(x)) → experienced_aquarist(x))"
    ],
    "background_story": "Ace was a renowned aquarist with a passion for rare and exotic aquatic plants. Among his most prized possessions was a collection of Eriocaulon species, which he meticulously cultivated in his state-of-the-art greenhouse. Ace spent years perfecting the art of growing these delicate plants, experimenting with different lighting, water parameters, and nutrient regimes. His dedication paid off when he successfully propagated several new Eriocaulon hybrids, earning him international recognition within the aquatic plant community. Ace's work not only contributed to the conservation of these unique species but also inspired a new generation of aquarists to explore the fascinating world of Eriocaulon. His greenhouse became a pilgrimage site for enthusiasts, where they could marvel at the beauty and diversity of these extraordinary plants.",
    "name": "Ace",
    "keyword": "eriocaulon",
    "subject_category": "aquarist"
  },
  {
    "facts": [
      "Anaya is not a skilled journalist.",
      "Anaya drives traffic to her publication's website.",
      "Anaya does not think creatively.",
      "Anaya is innovative.",
      "Anaya has vision."
    ],
    "facts_fol": [
      "¬skilled_journalist(Anaya)",
      "drive_traffic(Anaya)",
      "¬think_creatively(Anaya)",
      "is_innovative(Anaya)",
      "has_vision(Anaya)"
    ],
    "rules": [
      "If Anaya is a skilled journalist, then she can write engaging headlines and attract a large audience.",
      "Anyone who crafts compelling content either drives traffic to a website or attracts a large audience.",
      "Anyone who thinks creatively or tells good stories can craft compelling content.",
      "If Anaya is innovative, then she either tells good stories or has vision, but not both."
    ],
    "rules_fol": [
      "skilled_journalist(Anaya) → (write_engaging_headlines(Anaya) ∧ attract_large_audience(Anaya))",
      "∀x (craft_compelling_content(x) → (drive_traffic(x) ∨ attract_large_audience(x)))",
      "∀x ((think_creatively(x) ∨ tell_good_stories(x)) → craft_compelling_content(x))",
      "is_innovative(Anaya) → (tell_good_stories(Anaya) ⊕ has_vision(Anaya))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Anaya builds a following or attracts a large audience.",
      "If Anaya produces news, then she either gains recognition or crafts compelling content.",
      "If someone reads widely and observes life, then they can tell good stories."
    ],
    "distracting_rules_fol": [
      "builds_following(Anaya) ∨ attract_large_audience(Anaya)",
      "produce_news(Anaya) → (gain_recognition(Anaya) ∨ craft_compelling_content(Anaya))",
      "∀x ((reads_widely(x) ∧ observes_life(x)) → tell_good_stories(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Anaya is innovative.",
          "Anaya has vision."
        ],
        "rules": "If Anaya is innovative, then she either tells good stories or has vision, but not both.",
        "conclusion": "Anaya does not tell good stories."
      },
      {
        "facts": [
          "Anaya does not think creatively.",
          "Anaya does not tell good stories."
        ],
        "rules": "Anyone who thinks creatively or tells good stories can craft compelling content.",
        "conclusion": null
      },
      {
        "facts": [
          "Anaya drives traffic to her publication's website."
        ],
        "rules": "Anyone who crafts compelling content either drives traffic to a website or attracts a large audience.",
        "conclusion": null
      },
      {
        "facts": [
          "Anaya is not a skilled journalist."
        ],
        "rules": "If Anaya is a skilled journalist, then she can write engaging headlines and attract a large audience.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "is_innovative(Anaya)",
          "has_vision(Anaya)"
        ],
        "rules": "is_innovative(Anaya) → (tell_good_stories(Anaya) ⊕ has_vision(Anaya))",
        "conclusion": "¬tell_good_stories(Anaya)"
      },
      {
        "facts": [
          "¬think_creatively(Anaya)",
          "¬tell_good_stories(Anaya)"
        ],
        "rules": "∀x ((think_creatively(x) ∨ tell_good_stories(x)) → craft_compelling_content(x))",
        "conclusion": null
      },
      {
        "facts": [
          "drive_traffic(Anaya)"
        ],
        "rules": "∀x (craft_compelling_content(x) → (drive_traffic(x) ∨ attract_large_audience(x)))",
        "conclusion": null
      },
      {
        "facts": [
          "¬skilled_journalist(Anaya)"
        ],
        "rules": "skilled_journalist(Anaya) → (write_engaging_headlines(Anaya) ∧ attract_large_audience(Anaya))",
        "conclusion": null
      }
    ],
    "conclusion": "Anaya cannot write engaging headlines.",
    "conclusion_fol": "¬write_engaging_headlines(Anaya)",
    "answer": "Uncertain",
    "context": [
      "Anaya is innovative.",
      "Anaya has vision.",
      "If Anaya is innovative, then she either tells good stories or has vision, but not both.",
      "Anaya does not think creatively.",
      "Anyone who thinks creatively or tells good stories can craft compelling content.",
      "Anaya drives traffic to her publication's website.",
      "Anyone who crafts compelling content either drives traffic to a website or attracts a large audience.",
      "Anaya is not a skilled journalist.",
      "If Anaya is a skilled journalist, then she can write engaging headlines and attract a large audience."
    ],
    "context_fol": [
      "is_innovative(Anaya)",
      "has_vision(Anaya)",
      "is_innovative(Anaya) → (tell_good_stories(Anaya) ⊕ has_vision(Anaya))",
      "¬think_creatively(Anaya)",
      "∀x ((think_creatively(x) ∨ tell_good_stories(x)) → craft_compelling_content(x))",
      "drive_traffic(Anaya)",
      "∀x (craft_compelling_content(x) → (drive_traffic(x) ∨ attract_large_audience(x)))",
      "¬skilled_journalist(Anaya)",
      "skilled_journalist(Anaya) → (write_engaging_headlines(Anaya) ∧ attract_large_audience(Anaya))"
    ],
    "background_story": "Anaya was a brilliant and ambitious journalist with a knack for crafting headlines that grabbed attention. Her ability to distill complex stories into catchy, click-worthy titles made her a rising star in the competitive world of online news. With a keen sense of what made news go viral, Anaya's headlines often trended on social media, driving traffic to her publication's website. Her editors praised her for her creative twist on traditional journalism, and readers loved her for making even the most mundane stories sound exciting. Anaya's talent for writing headlines that sparked curiosity and debate earned her a reputation as one of the most innovative young journalists in the industry.",
    "name": "Anaya",
    "keyword": "headlinese",
    "subject_category": "human"
  },
  {
    "facts": [
      "Hattie seeks challenge.",
      "Hattie loves nature.",
      "Hattie does not travel alone.",
      "Hattie does not value independence."
    ],
    "facts_fol": [
      "seeks_challenge(Hattie)",
      "loves_nature(Hattie)",
      "¬travels_alone(Hattie)",
      "¬values_independence(Hattie)"
    ],
    "rules": [
      "Hattie is either determined or resilient (or both).",
      "Hattie is either adventurous or determined, but not necessarily both.",
      "If Hattie takes risks, then she is adventurous and craves freedom.",
      "If Hattie seeks challenge and loves nature, then she takes risks.",
      "If Hattie travels alone, then she values independence and craves freedom."
    ],
    "rules_fol": [
      "determined(Hattie) ∨ resilient(Hattie)",
      "is_adventurous(Hattie) ⊕ determined(Hattie)",
      "takes_risks(Hattie) → (is_adventurous(Hattie) ∧ craves_freedom(Hattie))",
      "(seeks_challenge(Hattie) ∧ loves_nature(Hattie)) → takes_risks(Hattie)",
      "travels_alone(Hattie) → (values_independence(Hattie) ∧ craves_freedom(Hattie))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Hattie is either strong-willed or determined.",
      "All fearless individuals are strong-willed and adventurous.",
      "If Hattie faces obstacles, then she is either brave or takes risks, but not both.",
      "Any person who rejects conformity or embraces uncertainty craves freedom."
    ],
    "distracting_rules_fol": [
      "strong_willed(Hattie) ∨ determined(Hattie)",
      "∀x (fearless(x) → (strong_willed(x) ∧ is_adventurous(x)))",
      "faces_obstacles(Hattie) → (is_brave(Hattie) ⊕ takes_risks(Hattie))",
      "∀x ((rejects_conformity(x) ∨ embraces_uncertainty(x)) → craves_freedom(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Hattie does not travel alone.",
          "Hattie does not value independence."
        ],
        "rules": "If Hattie travels alone, then she values independence and craves freedom.",
        "conclusion": null
      },
      {
        "facts": [
          "Hattie seeks challenge.",
          "Hattie loves nature."
        ],
        "rules": "If Hattie seeks challenge and loves nature, then she takes risks.",
        "conclusion": "Hattie takes risks."
      },
      {
        "facts": [
          "Hattie takes risks."
        ],
        "rules": "If Hattie takes risks, then she is adventurous and craves freedom.",
        "conclusion": "Hattie is adventurous."
      },
      {
        "facts": [
          "Hattie is adventurous."
        ],
        "rules": "Hattie is either adventurous or determined, but not necessarily both.",
        "conclusion": "Hattie is not determined."
      },
      {
        "facts": [
          "Hattie is not determined."
        ],
        "rules": "Hattie is either determined or resilient (or both).",
        "conclusion": "Hattie is resilient."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬travels_alone(Hattie)",
          "¬values_independence(Hattie)"
        ],
        "rules": "travels_alone(Hattie) → (values_independence(Hattie) ∧ craves_freedom(Hattie))",
        "conclusion": null
      },
      {
        "facts": [
          "seeks_challenge(Hattie)",
          "loves_nature(Hattie)"
        ],
        "rules": "(seeks_challenge(Hattie) ∧ loves_nature(Hattie)) → takes_risks(Hattie)",
        "conclusion": "takes_risks(Hattie)"
      },
      {
        "facts": [
          "takes_risks(Hattie)"
        ],
        "rules": "takes_risks(Hattie) → (is_adventurous(Hattie) ∧ craves_freedom(Hattie))",
        "conclusion": "is_adventurous(Hattie)"
      },
      {
        "facts": [
          "is_adventurous(Hattie)"
        ],
        "rules": "is_adventurous(Hattie) ⊕ determined(Hattie)",
        "conclusion": "¬determined(Hattie)"
      },
      {
        "facts": [
          "¬determined(Hattie)"
        ],
        "rules": "determined(Hattie) ∨ resilient(Hattie)",
        "conclusion": "resilient(Hattie)"
      }
    ],
    "conclusion": "Hattie is resilient.",
    "conclusion_fol": "resilient(Hattie)",
    "answer": "True",
    "context": [
      "Hattie does not travel alone.",
      "Hattie does not value independence.",
      "If Hattie travels alone, then she values independence and craves freedom.",
      "Hattie seeks challenge.",
      "Hattie loves nature.",
      "If Hattie seeks challenge and loves nature, then she takes risks.",
      "If Hattie takes risks, then she is adventurous and craves freedom.",
      "Hattie is either adventurous or determined, but not necessarily both.",
      "Hattie is either determined or resilient (or both)."
    ],
    "context_fol": [
      "¬travels_alone(Hattie)",
      "¬values_independence(Hattie)",
      "travels_alone(Hattie) → (values_independence(Hattie) ∧ craves_freedom(Hattie))",
      "seeks_challenge(Hattie)",
      "loves_nature(Hattie)",
      "(seeks_challenge(Hattie) ∧ loves_nature(Hattie)) → takes_risks(Hattie)",
      "takes_risks(Hattie) → (is_adventurous(Hattie) ∧ craves_freedom(Hattie))",
      "is_adventurous(Hattie) ⊕ determined(Hattie)",
      "determined(Hattie) ∨ resilient(Hattie)"
    ],
    "background_story": "Hattie had been traveling for days, her journey a testament to her unyielding spirit. With each step, she appeared more haggardly, her face worn from the relentless sun and her clothes tattered from the unforgiving terrain. Despite her exhausted appearance, a spark in her eyes betrayed a deep inner strength. She had set out to reach the distant mountains, driven by a promise she made to her late grandmother. The trek was arduous, with steep cliffs and raging rivers, but Hattie pressed on, her determination fueling her weary body. As she finally reached the mountain peak, the breathtaking view revitalized her, and for a moment, her haggardly appearance seemed a small price to pay for the sense of accomplishment and peace she felt.",
    "name": "Hattie",
    "keyword": "haggardly",
    "subject_category": "human"
  },
  {
    "facts": [
      "Judson does not develop solar technology.",
      "Judson studies aerodynamics.",
      "Judson optimizes blades."
    ],
    "facts_fol": [
      "¬develops_solar(Judson)",
      "studies_aerodynamics(Judson)",
      "optimizes_blades(Judson)"
    ],
    "rules": [
      "Judson either specializes in renewable energy or specializes in fossil fuels, but not both.",
      "All engineers who either design turbines or develop solar technology (but not both) specialize in renewable energy.",
      "All engineers who study aerodynamics and optimize blades can design turbines."
    ],
    "rules_fol": [
      "specializes_in_renewable_energy(Judson) ⊕ specializes_in_fossil_fuels(Judson)",
      "∀x ((designs_turbines(x) ⊕ develops_solar(x)) → specializes_in_renewable_energy(x))",
      "∀x ((studies_aerodynamics(x) ∧ optimizes_blades(x)) → designs_turbines(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Judson either works on hydropower or specializes in renewable energy.",
      "If Judson improves efficiency or enhances performance, then he can design turbines."
    ],
    "distracting_rules_fol": [
      "works_on_hydropower(Judson) ∨ specializes_in_renewable_energy(Judson)",
      "(improves_efficiency(Judson) ∨ enhances_performance(Judson)) → designs_turbines(Judson)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Judson studies aerodynamics.",
          "Judson optimizes blades."
        ],
        "rules": "All engineers who study aerodynamics and optimize blades can design turbines.",
        "conclusion": "Judson designs turbines."
      },
      {
        "facts": [
          "Judson designs turbines.",
          "Judson does not develop solar technology."
        ],
        "rules": "All engineers who either design turbines or develop solar technology (but not both) specialize in renewable energy.",
        "conclusion": "Judson specializes in renewable energy."
      },
      {
        "facts": [
          "Judson specializes in renewable energy."
        ],
        "rules": "Judson either specializes in renewable energy or specializes in fossil fuels, but not both.",
        "conclusion": "Judson does not specialize in fossil fuels."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "studies_aerodynamics(Judson)",
          "optimizes_blades(Judson)"
        ],
        "rules": "∀x ((studies_aerodynamics(x) ∧ optimizes_blades(x)) → designs_turbines(x))",
        "conclusion": "designs_turbines(Judson)"
      },
      {
        "facts": [
          "designs_turbines(Judson)",
          "¬develops_solar(Judson)"
        ],
        "rules": "∀x ((designs_turbines(x) ⊕ develops_solar(x)) → specializes_in_renewable_energy(x))",
        "conclusion": "specializes_in_renewable_energy(Judson)"
      },
      {
        "facts": [
          "specializes_in_renewable_energy(Judson)"
        ],
        "rules": "specializes_in_renewable_energy(Judson) ⊕ specializes_in_fossil_fuels(Judson)",
        "conclusion": "¬specializes_in_fossil_fuels(Judson)"
      }
    ],
    "conclusion": "Judson does not specialize in fossil fuels.",
    "conclusion_fol": "¬specializes_in_fossil_fuels(Judson)",
    "answer": "True",
    "context": [
      "Judson studies aerodynamics.",
      "Judson optimizes blades.",
      "All engineers who study aerodynamics and optimize blades can design turbines.",
      "Judson does not develop solar technology.",
      "All engineers who either design turbines or develop solar technology (but not both) specialize in renewable energy.",
      "Judson either specializes in renewable energy or specializes in fossil fuels, but not both."
    ],
    "context_fol": [
      "studies_aerodynamics(Judson)",
      "optimizes_blades(Judson)",
      "∀x ((studies_aerodynamics(x) ∧ optimizes_blades(x)) → designs_turbines(x))",
      "¬develops_solar(Judson)",
      "∀x ((designs_turbines(x) ⊕ develops_solar(x)) → specializes_in_renewable_energy(x))",
      "specializes_in_renewable_energy(Judson) ⊕ specializes_in_fossil_fuels(Judson)"
    ],
    "background_story": "Judson was a brilliant mechanical engineer with a passion for renewable energy. He spent most of his career designing and optimizing wind turbines for a leading energy company. Judson's groundbreaking work on turbine blade aerodynamics significantly increased energy output while reducing noise pollution. His innovative designs were implemented in wind farms worldwide, making him a pioneer in the field of sustainable energy. Judson's dedication to improving turbine technology earned him numerous awards and recognition from the scientific community. He continued to push the boundaries of what was possible, driven by his vision of a future powered entirely by clean energy.",
    "name": "Judson",
    "keyword": "turbine",
    "subject_category": "engineer"
  },
  {
    "facts": [
      "Samir is not a dedicated musician.",
      "Samir builds a fanbase.",
      "Samir plays guitar.",
      "Samir writes songs."
    ],
    "facts_fol": [
      "¬dedicated_musician(Samir)",
      "build_fanbase(Samir)",
      "plays_guitar(Samir)",
      "writes_songs(Samir)"
    ],
    "rules": [
      "If Samir is a dedicated musician, then he creates original music and gains recognition.",
      "If Samir pursues his passion, then he either gains recognition or builds a fanbase, but not both.",
      "For all humans, if they play guitar and write songs, then they pursue their passion."
    ],
    "rules_fol": [
      "dedicated_musician(Samir) → (create_original_music(Samir) ∧ gain_recognition(Samir))",
      "pursue_passion(Samir) → (gain_recognition(Samir) ⊕ build_fanbase(Samir))",
      "∀x ((plays_guitar(x) ∧ writes_songs(x)) → pursue_passion(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If someone makes great music and performs live, then they gain recognition.",
      "If Samir has talent and works hard, then he will pursue his passion."
    ],
    "distracting_rules_fol": [
      "∀x ((makes_hits(x) ∧ performs_live(x)) → gain_recognition(x))",
      "has_talent(Samir) → (pursue_passion(Samir) ∧ work_hard(Samir))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Samir plays guitar.",
          "Samir writes songs."
        ],
        "rules": "For all humans, if they play guitar and write songs, then they pursue their passion.",
        "conclusion": "Samir pursues his passion."
      },
      {
        "facts": [
          "Samir pursues his passion.",
          "Samir builds a fanbase."
        ],
        "rules": "If Samir pursues his passion, then he either gains recognition or builds a fanbase, but not both.",
        "conclusion": "Samir does not gain recognition."
      },
      {
        "facts": [
          "Samir is not a dedicated musician.",
          "Samir does not gain recognition."
        ],
        "rules": "If Samir is a dedicated musician, then he creates original music and gains recognition.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "plays_guitar(Samir)",
          "writes_songs(Samir)"
        ],
        "rules": "∀x ((plays_guitar(x) ∧ writes_songs(x)) → pursue_passion(x))",
        "conclusion": "pursue_passion(Samir)"
      },
      {
        "facts": [
          "pursue_passion(Samir)",
          "build_fanbase(Samir)"
        ],
        "rules": "pursue_passion(Samir) → (gain_recognition(Samir) ⊕ build_fanbase(Samir))",
        "conclusion": "¬gain_recognition(Samir)"
      },
      {
        "facts": [
          "¬dedicated_musician(Samir)",
          "¬gain_recognition(Samir)"
        ],
        "rules": "dedicated_musician(Samir) → (create_original_music(Samir) ∧ gain_recognition(Samir))",
        "conclusion": null
      }
    ],
    "conclusion": "Samir does not create original music.",
    "conclusion_fol": "¬create_original_music(Samir)",
    "answer": "Uncertain",
    "context": [
      "Samir plays guitar.",
      "Samir writes songs.",
      "For all humans, if they play guitar and write songs, then they pursue their passion.",
      "Samir builds a fanbase.",
      "If Samir pursues his passion, then he either gains recognition or builds a fanbase, but not both.",
      "Samir is not a dedicated musician.",
      "If Samir is a dedicated musician, then he creates original music and gains recognition."
    ],
    "context_fol": [
      "plays_guitar(Samir)",
      "writes_songs(Samir)",
      "∀x ((plays_guitar(x) ∧ writes_songs(x)) → pursue_passion(x))",
      "build_fanbase(Samir)",
      "pursue_passion(Samir) → (gain_recognition(Samir) ⊕ build_fanbase(Samir))",
      "¬dedicated_musician(Samir)",
      "dedicated_musician(Samir) → (create_original_music(Samir) ∧ gain_recognition(Samir))"
    ],
    "background_story": "Samir was a struggling musician in Liverpool when he stumbled upon the works of Paul McCartney. Inspired by the Beatles' legend, Samir dedicated himself to mastering the guitar and writing his own music. He spent countless hours practicing, pouring his heart into every melody and lyric. Soon, Samir's unique sound, which blended McCartney's influence with his own cultural heritage, began to gain traction locally. Before long, he was invited to perform at festivals and venues across the UK. Samir's big break came when he was discovered by a renowned music producer who had worked with McCartney himself. With the producer's guidance, Samir's music reached a global audience, earning him a loyal following and critical acclaim. Samir never forgot the inspiration McCartney's music had given him, often covering Beatles songs in his sets as a tribute to his idol.",
    "name": "Samir",
    "keyword": "mccartney",
    "subject_category": "human"
  },
  {
    "facts": [
      "Julianna is highly prized for her goldbeating work.",
      "Julianna creates art.",
      "Julianna is precise.",
      "Julianna has patience."
    ],
    "facts_fol": [
      "highly_prized(Julianna)",
      "creates_art(Julianna)",
      "is_precise(Julianna)",
      "has_patience(Julianna)"
    ],
    "rules": [
      "If Julianna is a skilled craftsman, then she is either highly prized for her goldbeating work or widely renowned for her expertise, but not both.",
      "If Julianna either makes jewelry or crafts decorations (but not both), then she is a skilled craftsman.",
      "Julianna either works with metal or makes jewelry, but not both, reflecting her specialized craft.",
      "If Julianna creates art, then she crafts decorations.",
      "If Julianna is precise, then she has patience and works with metal."
    ],
    "rules_fol": [
      "skilled_craftsman(Julianna) → (highly_prized(Julianna) ⊕ widely_renowned(Julianna))",
      "(makes_jewelry(Julianna) ⊕ crafts_decorations(Julianna)) → skilled_craftsman(Julianna)",
      "works_with_metal(Julianna) ⊕ makes_jewelry(Julianna)",
      "creates_art(Julianna) → crafts_decorations(Julianna)",
      "is_precise(Julianna) → (has_patience(Julianna) ∧ works_with_metal(Julianna))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Anyone who learns quickly or works diligently can become a skilled craftsman.",
      "If Julianna learns quickly, then she makes jewelry and is attentive to detail.",
      "If Julianna learns quickly, then she has good hand skills and crafts decorations.",
      "If Julianna is diligent, then she works with metal and learns quickly."
    ],
    "distracting_rules_fol": [
      "∀x ((learns_fast(x) ∨ works_hard(x)) → skilled_craftsman(x))",
      "learns_quickly(Julianna) → (makes_jewelry(Julianna) ∧ attentive_to_detail(Julianna))",
      "learns_quickly(Julianna) → (has_good_hand(Julianna) ∧ crafts_decorations(Julianna))",
      "is_diligent(Julianna) → (learns_quickly(Julianna) ∧ works_with_metal(Julianna))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Julianna is precise.",
          "Julianna has patience."
        ],
        "rules": "If Julianna is precise, then she has patience and works with metal.",
        "conclusion": "Julianna works with metal."
      },
      {
        "facts": [
          "Julianna creates art."
        ],
        "rules": "If Julianna creates art, then she crafts decorations.",
        "conclusion": "Julianna crafts decorations."
      },
      {
        "facts": [
          "Julianna works with metal."
        ],
        "rules": "Julianna either works with metal or makes jewelry, but not both, reflecting her specialized craft.",
        "conclusion": "Julianna does not make jewelry."
      },
      {
        "facts": [
          "Julianna does not make jewelry.",
          "Julianna crafts decorations."
        ],
        "rules": "If Julianna either makes jewelry or crafts decorations (but not both), then she is a skilled craftsman.",
        "conclusion": "Julianna is a skilled craftsman."
      },
      {
        "facts": [
          "Julianna is a skilled craftsman.",
          "Julianna is highly prized for her goldbeating work."
        ],
        "rules": "If Julianna is a skilled craftsman, then she is either highly prized for her goldbeating work or widely renowned for her expertise, but not both.",
        "conclusion": "Julianna is not widely renowned for her expertise."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "is_precise(Julianna)",
          "has_patience(Julianna)"
        ],
        "rules": "is_precise(Julianna) → (has_patience(Julianna) ∧ works_with_metal(Julianna))",
        "conclusion": "works_with_metal(Julianna)"
      },
      {
        "facts": [
          "creates_art(Julianna)"
        ],
        "rules": "creates_art(Julianna) → crafts_decorations(Julianna)",
        "conclusion": "crafts_decorations(Julianna)"
      },
      {
        "facts": [
          "works_with_metal(Julianna)"
        ],
        "rules": "works_with_metal(Julianna) ⊕ makes_jewelry(Julianna)",
        "conclusion": "¬makes_jewelry(Julianna)"
      },
      {
        "facts": [
          "¬makes_jewelry(Julianna)",
          "crafts_decorations(Julianna)"
        ],
        "rules": "(makes_jewelry(Julianna) ⊕ crafts_decorations(Julianna)) → skilled_craftsman(Julianna)",
        "conclusion": "skilled_craftsman(Julianna)"
      },
      {
        "facts": [
          "skilled_craftsman(Julianna)",
          "highly_prized(Julianna)"
        ],
        "rules": "skilled_craftsman(Julianna) → (highly_prized(Julianna) ⊕ widely_renowned(Julianna))",
        "conclusion": "¬widely_renowned(Julianna)"
      }
    ],
    "conclusion": "Julianna is not widely renowned for her expertise.",
    "conclusion_fol": "¬widely_renowned(Julianna)",
    "answer": "True",
    "context": [
      "Julianna is precise.",
      "Julianna has patience.",
      "If Julianna is precise, then she has patience and works with metal.",
      "Julianna creates art.",
      "If Julianna creates art, then she crafts decorations.",
      "Julianna either works with metal or makes jewelry, but not both, reflecting her specialized craft.",
      "If Julianna either makes jewelry or crafts decorations (but not both), then she is a skilled craftsman.",
      "Julianna is highly prized for her goldbeating work.",
      "If Julianna is a skilled craftsman, then she is either highly prized for her goldbeating work or widely renowned for her expertise, but not both."
    ],
    "context_fol": [
      "is_precise(Julianna)",
      "has_patience(Julianna)",
      "is_precise(Julianna) → (has_patience(Julianna) ∧ works_with_metal(Julianna))",
      "creates_art(Julianna)",
      "creates_art(Julianna) → crafts_decorations(Julianna)",
      "works_with_metal(Julianna) ⊕ makes_jewelry(Julianna)",
      "(makes_jewelry(Julianna) ⊕ crafts_decorations(Julianna)) → skilled_craftsman(Julianna)",
      "highly_prized(Julianna)",
      "skilled_craftsman(Julianna) → (highly_prized(Julianna) ⊕ widely_renowned(Julianna))"
    ],
    "background_story": "Julianna was a skilled artisan from a long line of goldbeaters, craftsmen who hammered gold into thin sheets for use in gilding and other decorative applications. In her small workshop, she spent hours pounding and shaping the precious metal, creating intricate leaves and designs. Her work was highly prized by local jewelers and bookbinders, who sought her out for the finest gold leaf. Julianna took great pride in her craft, carefully passing down the techniques and traditions of her family to her apprentices. As a master goldbeater, she was renowned for her attention to detail and her ability to coax the most exquisite textures from the gold. Julianna's dedication to her craft earned her a reputation as one of the finest goldbeaters in the land.",
    "name": "Julianna",
    "keyword": "goldbeater",
    "subject_category": "human"
  },
  {
    "facts": [
      "Simon values tradition.",
      "Simon challenges the status quo.",
      "Simon does not seek change.",
      "Simon advocates for equality.",
      "Simon defends rights.",
      "Simon does not empower others."
    ],
    "facts_fol": [
      "values_tradition(Simon)",
      "challenges_status(Simon)",
      "¬seeks_change(Simon)",
      "advocates_equality(Simon)",
      "defends_rights(Simon)",
      "¬empowers_others(Simon)"
    ],
    "rules": [
      "If someone supports order and values tradition, then they are conservative.",
      "Everyone who challenges the status quo either fights against injustice or is a revolutionary (or both).",
      "Simon either seeks change or supports order.",
      "If Simon advocates for equality, then he either promotes freedom or fights against injustice, but not both.",
      "If Simon either defends rights or empowers others (but not both), then he promotes freedom."
    ],
    "rules_fol": [
      "∀x ((supports_order(x) ∧ values_tradition(x)) → conservative(x))",
      "∀x (challenges_status(x) → (fights_injustice(x) ∨ revolutionary(x)))",
      "seeks_change(Simon) ∨ supports_order(Simon)",
      "advocates_equality(Simon) → (promotes_freedom(Simon) ⊕ fights_injustice(Simon))",
      "(defends_rights(Simon) ⊕ empowers_others(Simon)) → promotes_freedom(Simon)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Simon holds strong beliefs, then he either takes risks or is conservative.",
      "If Simon either questions authority or rejects conformity (but not both), then he is a revolutionary.",
      "All people who respect the law support social order.",
      "If Simon questions authority, then he either supports protest or fights against injustice (or both).",
      "If Simon thinks critically, then he promotes freedom and values justice."
    ],
    "distracting_rules_fol": [
      "holds_strong_beliefs(Simon) → (takes_risks(Simon) ∨ conservative(Simon))",
      "(questions_authority(Simon) ⊕ rejects_conformity(Simon)) → revolutionary(Simon)",
      "∀x (respects_law(x) → supports_order(x))",
      "questions_authority(Simon) → (supports_protest(Simon) ∨ fights_injustice(Simon))",
      "thinks_critically(Simon) → (promotes_freedom(Simon) ∧ values_justice(Simon))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Simon defends rights.",
          "Simon does not empower others."
        ],
        "rules": "If Simon either defends rights or empowers others (but not both), then he promotes freedom.",
        "conclusion": "Simon promotes freedom."
      },
      {
        "facts": [
          "Simon advocates for equality.",
          "Simon promotes freedom."
        ],
        "rules": "If Simon advocates for equality, then he either promotes freedom or fights against injustice, but not both.",
        "conclusion": "Simon does not fight against injustice."
      },
      {
        "facts": [
          "Simon does not seek change."
        ],
        "rules": "Simon either seeks change or supports order.",
        "conclusion": "Simon supports order."
      },
      {
        "facts": [
          "Simon challenges the status quo.",
          "Simon does not fight against injustice."
        ],
        "rules": "Everyone who challenges the status quo either fights against injustice or is a revolutionary (or both).",
        "conclusion": "Simon is a revolutionary."
      },
      {
        "facts": [
          "Simon supports order.",
          "Simon values tradition."
        ],
        "rules": "If someone supports order and values tradition, then they are conservative.",
        "conclusion": "Simon is a conservative."
      },
      {
        "facts": [
          "Simon is a revolutionary.",
          "Simon is a conservative."
        ],
        "rules": null,
        "conclusion": "Simon is either a revolutionary or a conservative, but not both."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "defends_rights(Simon)",
          "¬empowers_others(Simon)"
        ],
        "rules": "(defends_rights(Simon) ⊕ empowers_others(Simon)) → promotes_freedom(Simon)",
        "conclusion": "promotes_freedom(Simon)"
      },
      {
        "facts": [
          "advocates_equality(Simon)",
          "promotes_freedom(Simon)"
        ],
        "rules": "advocates_equality(Simon) → (promotes_freedom(Simon) ⊕ fights_injustice(Simon))",
        "conclusion": "¬fights_injustice(Simon)"
      },
      {
        "facts": [
          "¬seeks_change(Simon)"
        ],
        "rules": "seeks_change(Simon) ∨ supports_order(Simon)",
        "conclusion": "supports_order(Simon)"
      },
      {
        "facts": [
          "challenges_status(Simon)",
          "¬fights_injustice(Simon)"
        ],
        "rules": "∀x (challenges_status(x) → (fights_injustice(x) ∨ revolutionary(x)))",
        "conclusion": "revolutionary(Simon)"
      },
      {
        "facts": [
          "supports_order(Simon)",
          "values_tradition(Simon)"
        ],
        "rules": "∀x ((supports_order(x) ∧ values_tradition(x)) → conservative(x))",
        "conclusion": "conservative(Simon)"
      },
      {
        "facts": [
          "revolutionary(Simon)",
          "conservative(Simon)"
        ],
        "rules": null,
        "conclusion": "revolutionary(Simon) ⊕ conservative(Simon)"
      }
    ],
    "conclusion": "Simon is either a revolutionary or a conservative, but not both.",
    "conclusion_fol": "revolutionary(Simon) ⊕ conservative(Simon)",
    "answer": "False",
    "context": [
      "Simon defends rights.",
      "Simon does not empower others.",
      "If Simon either defends rights or empowers others (but not both), then he promotes freedom.",
      "Simon advocates for equality.",
      "If Simon advocates for equality, then he either promotes freedom or fights against injustice, but not both.",
      "Simon does not seek change.",
      "Simon either seeks change or supports order.",
      "Simon challenges the status quo.",
      "Everyone who challenges the status quo either fights against injustice or is a revolutionary (or both).",
      "Simon values tradition.",
      "If someone supports order and values tradition, then they are conservative."
    ],
    "context_fol": [
      "defends_rights(Simon)",
      "¬empowers_others(Simon)",
      "(defends_rights(Simon) ⊕ empowers_others(Simon)) → promotes_freedom(Simon)",
      "advocates_equality(Simon)",
      "advocates_equality(Simon) → (promotes_freedom(Simon) ⊕ fights_injustice(Simon))",
      "¬seeks_change(Simon)",
      "seeks_change(Simon) ∨ supports_order(Simon)",
      "challenges_status(Simon)",
      "∀x (challenges_status(x) → (fights_injustice(x) ∨ revolutionary(x)))",
      "values_tradition(Simon)",
      "∀x ((supports_order(x) ∧ values_tradition(x)) → conservative(x))"
    ],
    "background_story": "Simon was a young, fiery intellectual who became deeply invested in the ideals of Trotskyism during his university days. He saw in Leon Trotsky's writings a vision of true socialism, untainted by the authoritarianism that had corrupted the Soviet Union. Simon joined a small but passionate group of like-minded individuals who advocated for workers' rights, international socialism, and the overthrow of capitalist systems. He spent countless nights debating, writing, and organizing, inspired by the belief that a global revolution could bring about a more just and equal world. Despite facing criticism and skepticism from many, Simon remained committed to his principles, seeing himself as part of a lineage of revolutionaries who dared to challenge the status quo and fight for a better future.",
    "name": "Simon",
    "keyword": "trotskyism",
    "subject_category": "human"
  },
  {
    "facts": [
      "Camille is not experienced.",
      "Camille uses sonar.",
      "Camille studies oceans.",
      "Camille does not map the seafloor."
    ],
    "facts_fol": [
      "¬experienced(Camille)",
      "uses_sonar(Camille)",
      "studies_oceans(Camille)",
      "¬maps_seafloor(Camille)"
    ],
    "rules": [
      "For all oceanographers, if someone is experienced, then they are either an accurate mapper or an influential researcher (or both).",
      "Any oceanographer who uses sonar or charts depths is an accurate mapper.",
      "If Camille studies oceans, then she either maps the seafloor or charts depths, but not both."
    ],
    "rules_fol": [
      "∀x (experienced(x) → (accurate_mapper(x) ∨ influential_researcher(x)))",
      "∀x ((uses_sonar(x) ∨ charts_depths(x)) → accurate_mapper(x))",
      "studies_oceans(Camille) → (maps_seafloor(Camille) ⊕ charts_depths(Camille))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Camille is a skilled diver, then she publishes papers and is an accurate mapper.",
      "All oceanographers who explore the sea and use submersibles can chart depths."
    ],
    "distracting_rules_fol": [
      "skilled_diver(Camille) → (publishes_papers(Camille) ∧ accurate_mapper(Camille))",
      "∀x ((explores_sea(x) ∧ uses_submersibles(x)) → charts_depths(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Camille studies oceans.",
          "Camille does not map the seafloor."
        ],
        "rules": "If Camille studies oceans, then she either maps the seafloor or charts depths, but not both.",
        "conclusion": "Camille charts depths."
      },
      {
        "facts": [
          "Camille uses sonar.",
          "Camille charts depths."
        ],
        "rules": "Any oceanographer who uses sonar or charts depths is an accurate mapper.",
        "conclusion": "Camille is an accurate mapper."
      },
      {
        "facts": [
          "Camille is not experienced.",
          "Camille is an accurate mapper."
        ],
        "rules": "For all oceanographers, if someone is experienced, then they are either an accurate mapper or an influential researcher (or both).",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "studies_oceans(Camille)",
          "¬maps_seafloor(Camille)"
        ],
        "rules": "studies_oceans(Camille) → (maps_seafloor(Camille) ⊕ charts_depths(Camille))",
        "conclusion": "charts_depths(Camille)"
      },
      {
        "facts": [
          "uses_sonar(Camille)",
          "charts_depths(Camille)"
        ],
        "rules": "∀x ((uses_sonar(x) ∨ charts_depths(x)) → accurate_mapper(x))",
        "conclusion": "accurate_mapper(Camille)"
      },
      {
        "facts": [
          "¬experienced(Camille)",
          "accurate_mapper(Camille)"
        ],
        "rules": "∀x (experienced(x) → (accurate_mapper(x) ∨ influential_researcher(x)))",
        "conclusion": null
      }
    ],
    "conclusion": "Camille is an influential researcher.",
    "conclusion_fol": "influential_researcher(Camille)",
    "answer": "Uncertain",
    "context": [
      "Camille studies oceans.",
      "Camille does not map the seafloor.",
      "If Camille studies oceans, then she either maps the seafloor or charts depths, but not both.",
      "Camille uses sonar.",
      "Any oceanographer who uses sonar or charts depths is an accurate mapper.",
      "Camille is not experienced.",
      "For all oceanographers, if someone is experienced, then they are either an accurate mapper or an influential researcher (or both)."
    ],
    "context_fol": [
      "studies_oceans(Camille)",
      "¬maps_seafloor(Camille)",
      "studies_oceans(Camille) → (maps_seafloor(Camille) ⊕ charts_depths(Camille))",
      "uses_sonar(Camille)",
      "∀x ((uses_sonar(x) ∨ charts_depths(x)) → accurate_mapper(x))",
      "¬experienced(Camille)",
      "∀x (experienced(x) → (accurate_mapper(x) ∨ influential_researcher(x)))"
    ],
    "background_story": "Camille was a renowned oceanographer with a passion for mapping the world's oceans. Her specialty was bathymetric surveying, using advanced sonar and submersible technologies to chart the depths of the sea floor. Camille spent years aboard research vessels, meticulously gathering data on the topography of the ocean floor. Her work helped discover new species, underwater mountains, and even shipwrecks hidden for centuries. Camille's bathymetric maps were instrumental in informing marine conservation efforts and guiding sustainable fishing practices. Her groundbreaking research earned her numerous awards and recognition within the scientific community, cementing her reputation as a leading expert in the field of oceanic cartography.",
    "name": "Camille",
    "keyword": "bathymetric",
    "subject_category": "oceanographer"
  },
  {
    "facts": [
      "Ander does not lead successful missions.",
      "Ander is a skilled pilot.",
      "Ander is a space traveler.",
      "Ander thinks critically."
    ],
    "facts_fol": [
      "¬lead_successful_missions(Ander)",
      "skilled_pilot(Ander)",
      "space_traveler(Ander)",
      "think_critically(Ander)"
    ],
    "rules": [
      "For all astronauts, if an astronaut is experienced, then they either lead successful missions or make groundbreaking discoveries (or both).",
      "All skilled pilot astronauts can handle pressure and are experienced.",
      "If Ander is a space traveler, then he can either handle pressure or remain calm, but not both.",
      "Ander either thinks critically or remains calm, but not both, when navigating the Lunar Explorer through the perigee."
    ],
    "rules_fol": [
      "∀x (experienced(x) → (lead_successful_missions(x) ∨ make_groundbreaking_discoveries(x)))",
      "∀x (skilled_pilot(x) → (handle_pressure(x) ∧ experienced(x)))",
      "space_traveler(Ander) → (handle_pressure(Ander) ⊕ remain_calm(Ander))",
      "think_critically(Ander) ⊕ remain_calm(Ander)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Any astronaut who trains extensively or has expert knowledge is experienced.",
      "All astronauts who can fly solo can handle pressure.",
      "All astronauts who are focused remain calm."
    ],
    "distracting_rules_fol": [
      "∀x ((train_extensively(x) ∨ have_expert_knowledge(x)) → experienced(x))",
      "∀x (fly_solo(x) → handle_pressure(x))",
      "∀x (focused(x) → remain_calm(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Ander thinks critically."
        ],
        "rules": "Ander either thinks critically or remains calm, but not both, when navigating the Lunar Explorer through the perigee.",
        "conclusion": "Ander does not remain calm."
      },
      {
        "facts": [
          "Ander is a space traveler.",
          "Ander does not remain calm."
        ],
        "rules": "If Ander is a space traveler, then he can either handle pressure or remain calm, but not both.",
        "conclusion": "Ander can handle pressure."
      },
      {
        "facts": [
          "Ander is a skilled pilot.",
          "Ander can handle pressure."
        ],
        "rules": "All skilled pilot astronauts can handle pressure and are experienced.",
        "conclusion": "Ander is an experienced astronaut."
      },
      {
        "facts": [
          "Ander is an experienced astronaut.",
          "Ander does not lead successful missions."
        ],
        "rules": "For all astronauts, if an astronaut is experienced, then they either lead successful missions or make groundbreaking discoveries (or both).",
        "conclusion": "Ander makes groundbreaking discoveries."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "think_critically(Ander)"
        ],
        "rules": "think_critically(Ander) ⊕ remain_calm(Ander)",
        "conclusion": "¬remain_calm(Ander)"
      },
      {
        "facts": [
          "space_traveler(Ander)",
          "¬remain_calm(Ander)"
        ],
        "rules": "space_traveler(Ander) → (handle_pressure(Ander) ⊕ remain_calm(Ander))",
        "conclusion": "handle_pressure(Ander)"
      },
      {
        "facts": [
          "skilled_pilot(Ander)",
          "handle_pressure(Ander)"
        ],
        "rules": "∀x (skilled_pilot(x) → (handle_pressure(x) ∧ experienced(x)))",
        "conclusion": "experienced(Ander)"
      },
      {
        "facts": [
          "experienced(Ander)",
          "¬lead_successful_missions(Ander)"
        ],
        "rules": "∀x (experienced(x) → (lead_successful_missions(x) ∨ make_groundbreaking_discoveries(x)))",
        "conclusion": "make_groundbreaking_discoveries(Ander)"
      }
    ],
    "conclusion": "Ander makes groundbreaking discoveries.",
    "conclusion_fol": "make_groundbreaking_discoveries(Ander)",
    "answer": "True",
    "context": [
      "Ander thinks critically.",
      "Ander either thinks critically or remains calm, but not both, when navigating the Lunar Explorer through the perigee.",
      "Ander is a space traveler.",
      "If Ander is a space traveler, then he can either handle pressure or remain calm, but not both.",
      "Ander is a skilled pilot.",
      "All skilled pilot astronauts can handle pressure and are experienced.",
      "Ander does not lead successful missions.",
      "For all astronauts, if an astronaut is experienced, then they either lead successful missions or make groundbreaking discoveries (or both)."
    ],
    "context_fol": [
      "think_critically(Ander)",
      "think_critically(Ander) ⊕ remain_calm(Ander)",
      "space_traveler(Ander)",
      "space_traveler(Ander) → (handle_pressure(Ander) ⊕ remain_calm(Ander))",
      "skilled_pilot(Ander)",
      "∀x (skilled_pilot(x) → (handle_pressure(x) ∧ experienced(x)))",
      "¬lead_successful_missions(Ander)",
      "∀x (experienced(x) → (lead_successful_missions(x) ∨ make_groundbreaking_discoveries(x)))"
    ],
    "background_story": "Ander was a renowned astronaut who had spent his career studying the mysteries of the Earth's orbit. His fascination with the perigee, the point at which the Moon is closest to the Earth, led him to dedicate his latest mission to observing this phenomenon up close. As commander of the spacecraft Lunar Explorer, Ander navigated his crew through the challenges of space travel to reach the perigee. There, they conducted groundbreaking research, gathering unprecedented data on the gravitational forces at play. Ander's team made historic discoveries about the Moon's influence on Earth's tides and ocean currents. The success of their mission earned Ander and his crew international acclaim, and their findings paved the way for future space explorations.",
    "name": "Ander",
    "keyword": "perigee",
    "subject_category": "astronaut"
  },
  {
    "facts": [
      "Kate does not research ocean ecology.",
      "Kate does not classify species.",
      "Kate analyzes seawater.",
      "Kate tracks marine life.",
      "Kate does not understand ecosystems."
    ],
    "facts_fol": [
      "¬research_ocean_ecology(Kate)",
      "¬classify_species(Kate)",
      "analyzes_seawater(Kate)",
      "tracks_marine_life(Kate)",
      "¬understands_ecosystems(Kate)"
    ],
    "rules": [
      "A marine biologist either explores the deep sea or makes significant discoveries, but not necessarily both.",
      "If Kate examines plankton, then she studies arrow worms.",
      "If Kate investigates microorganisms, then she either examines plankton or analyzes seawater, but not both.",
      "A marine biologist either classifies species or explores the deep sea, but not necessarily both.",
      "Every marine biologist who tracks marine life either investigates microorganisms or understands ecosystems."
    ],
    "rules_fol": [
      "∀x (explore_deep_sea(x) ⊕ make_significant_discoveries(x))",
      "examines_plankton(Kate) → study_arrow_worms(Kate)",
      "investigates_microorganisms(Kate) → (examines_plankton(Kate) ⊕ analyzes_seawater(Kate))",
      "∀x (classify_species(x) ⊕ explore_deep_sea(x))",
      "∀x (tracks_marine_life(x) → (investigates_microorganisms(x) ∨ understands_ecosystems(x)))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Kate investigates microhabitats, then she will make significant discoveries.",
      "If Kate loves the ocean and investigates creatures, then she studies arrow worms.",
      "If Kate investigates tides or monitors sea life, then she examines plankton.",
      "If Kate loves the ocean, then she explores the deep sea.",
      "If Kate observes marine life and collects samples, then she investigates microorganisms."
    ],
    "distracting_rules_fol": [
      "investigate_microhabitat(Kate) → make_significant_discoveries(Kate)",
      "(loves_ocean(Kate) ∧ investigates_creatures(Kate)) → study_arrow_worms(Kate)",
      "(investigates_tides(Kate) ∨ monitors_sea_life(Kate)) → examines_plankton(Kate)",
      "loves_ocean(Kate) → explore_deep_sea(Kate)",
      "(observes_marine_life(Kate) ∧ collects_samples(Kate)) → investigates_microorganisms(Kate)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Kate tracks marine life.",
          "Kate does not understand ecosystems."
        ],
        "rules": "Every marine biologist who tracks marine life either investigates microorganisms or understands ecosystems.",
        "conclusion": "Kate investigates microorganisms."
      },
      {
        "facts": [
          "Kate does not classify species."
        ],
        "rules": "A marine biologist either classifies species or explores the deep sea, but not necessarily both.",
        "conclusion": "Kate explores the deep sea."
      },
      {
        "facts": [
          "Kate investigates microorganisms.",
          "Kate analyzes seawater."
        ],
        "rules": "If Kate investigates microorganisms, then she either examines plankton or analyzes seawater, but not both.",
        "conclusion": "Kate does not examine plankton."
      },
      {
        "facts": [
          "Kate does not examine plankton."
        ],
        "rules": "If Kate examines plankton, then she studies arrow worms.",
        "conclusion": null
      },
      {
        "facts": [
          "Kate explores the deep sea."
        ],
        "rules": "A marine biologist either explores the deep sea or makes significant discoveries, but not necessarily both.",
        "conclusion": "Kate does not make significant discoveries."
      },
      {
        "facts": [
          "Kate does not research ocean ecology.",
          "Kate does not make significant discoveries."
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "tracks_marine_life(Kate)",
          "¬understands_ecosystems(Kate)"
        ],
        "rules": "∀x (tracks_marine_life(x) → (investigates_microorganisms(x) ∨ understands_ecosystems(x)))",
        "conclusion": "investigates_microorganisms(Kate)"
      },
      {
        "facts": [
          "¬classify_species(Kate)"
        ],
        "rules": "∀x (classify_species(x) ⊕ explore_deep_sea(x))",
        "conclusion": "explore_deep_sea(Kate)"
      },
      {
        "facts": [
          "investigates_microorganisms(Kate)",
          "analyzes_seawater(Kate)"
        ],
        "rules": "investigates_microorganisms(Kate) → (examines_plankton(Kate) ⊕ analyzes_seawater(Kate))",
        "conclusion": "¬examines_plankton(Kate)"
      },
      {
        "facts": [
          "¬examines_plankton(Kate)"
        ],
        "rules": "examines_plankton(Kate) → study_arrow_worms(Kate)",
        "conclusion": null
      },
      {
        "facts": [
          "explore_deep_sea(Kate)"
        ],
        "rules": "∀x (explore_deep_sea(x) ⊕ make_significant_discoveries(x))",
        "conclusion": "¬make_significant_discoveries(Kate)"
      },
      {
        "facts": [
          "¬research_ocean_ecology(Kate)",
          "¬make_significant_discoveries(Kate)"
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "conclusion": "If Kate studies arrow worms or researches ocean ecology (or both), then she makes significant discoveries.",
    "conclusion_fol": "(study_arrow_worms(Kate) ∨ research_ocean_ecology(Kate)) → make_significant_discoveries(Kate)",
    "answer": "Uncertain",
    "context": [
      "Kate tracks marine life.",
      "Kate does not understand ecosystems.",
      "Every marine biologist who tracks marine life either investigates microorganisms or understands ecosystems.",
      "Kate does not classify species.",
      "A marine biologist either classifies species or explores the deep sea, but not necessarily both.",
      "Kate analyzes seawater.",
      "If Kate investigates microorganisms, then she either examines plankton or analyzes seawater, but not both.",
      "If Kate examines plankton, then she studies arrow worms.",
      "A marine biologist either explores the deep sea or makes significant discoveries, but not necessarily both.",
      "Kate does not research ocean ecology."
    ],
    "context_fol": [
      "tracks_marine_life(Kate)",
      "¬understands_ecosystems(Kate)",
      "∀x (tracks_marine_life(x) → (investigates_microorganisms(x) ∨ understands_ecosystems(x)))",
      "¬classify_species(Kate)",
      "∀x (classify_species(x) ⊕ explore_deep_sea(x))",
      "analyzes_seawater(Kate)",
      "investigates_microorganisms(Kate) → (examines_plankton(Kate) ⊕ analyzes_seawater(Kate))",
      "examines_plankton(Kate) → study_arrow_worms(Kate)",
      "∀x (explore_deep_sea(x) ⊕ make_significant_discoveries(x))",
      "¬research_ocean_ecology(Kate)"
    ],
    "background_story": "Kate was a renowned marine biologist with a fascination for the ocean's smallest creatures. Her specialty was the study of chaetognathans, also known as arrow worms, which are among the most ancient and primitive animals on the planet. Kate spent years researching these enigmatic creatures, uncovering their unique characteristics and behaviors. Her groundbreaking work took her to the deepest parts of the ocean, where she discovered new species of chaetognathans and shed light on their importance in the marine food chain. Kate's passion for these tiny, yet significant, organisms earned her the nickname 'Chaetognathan Kate' among her peers, and her research continues to inspire a new generation of marine biologists to explore the uncharted depths of the ocean.",
    "name": "Kate",
    "keyword": "chaetognathan",
    "subject_category": "marine biologist"
  },
  {
    "facts": [
      "Bunny is curious.",
      "Bunny is well-nourished.",
      "Bunny is not strong.",
      "Bunny eats well.",
      "Bunny runs free."
    ],
    "facts_fol": [
      "curious(Bunny)",
      "well_nourished(Bunny)",
      "¬strong(Bunny)",
      "eats_well(Bunny)",
      "runs_free(Bunny)"
    ],
    "rules": [
      "If Bunny is healthy, then she is either adventurous or affectionate (or both).",
      "If Bunny is curious, then she is either strong or healthy (or both).",
      "If Bunny is well-nourished, then she is either playful or affectionate, but not both.",
      "Any rabbit that gets exercise or eats well is playful.",
      "Every rabbit either runs free or gets exercise."
    ],
    "rules_fol": [
      "healthy(Bunny) → (adventurous(Bunny) ∨ affectionate(Bunny))",
      "curious(Bunny) → (strong(Bunny) ∨ healthy(Bunny))",
      "well_nourished(Bunny) → (playful(Bunny) ⊕ affectionate(Bunny))",
      "∀x ((gets_exercise(x) ∨ eats_well(x)) → playful(x))",
      "∀x (runs_free(x) ∨ gets_exercise(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "All rabbits that get care and eat nutritious food are healthy.",
      "All rabbits that like snuggles and enjoy cuddles are affectionate.",
      "Bunny either likes carrots or is playful.",
      "For all rabbits, if they hop daily and explore outdoors, then they get exercise."
    ],
    "distracting_rules_fol": [
      "∀x ((gets_care(x) ∧ eats_nutritious(x)) → healthy(x))",
      "∀x ((likes_snuggles(x) ∧ enjoys_cuddles(x)) → affectionate(x))",
      "likes_carrots(Bunny) ∨ playful(Bunny)",
      "∀x ((hops_daily(x) ∧ explores_outdoors(x)) → gets_exercise(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Bunny runs free."
        ],
        "rules": "Every rabbit either runs free or gets exercise.",
        "conclusion": null
      },
      {
        "facts": [
          "Bunny eats well."
        ],
        "rules": "Any rabbit that gets exercise or eats well is playful.",
        "conclusion": "Bunny is playful."
      },
      {
        "facts": [
          "Bunny is well-nourished.",
          "Bunny is playful."
        ],
        "rules": "If Bunny is well-nourished, then she is either playful or affectionate, but not both.",
        "conclusion": "Bunny is not affectionate."
      },
      {
        "facts": [
          "Bunny is curious.",
          "Bunny is not strong."
        ],
        "rules": "If Bunny is curious, then she is either strong or healthy (or both).",
        "conclusion": "Bunny is healthy."
      },
      {
        "facts": [
          "Bunny is healthy.",
          "Bunny is not affectionate."
        ],
        "rules": "If Bunny is healthy, then she is either adventurous or affectionate (or both).",
        "conclusion": "Bunny is not adventurous."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "runs_free(Bunny)"
        ],
        "rules": "∀x (runs_free(x) ∨ gets_exercise(x))",
        "conclusion": null
      },
      {
        "facts": [
          "eats_well(Bunny)"
        ],
        "rules": "∀x ((gets_exercise(x) ∨ eats_well(x)) → playful(x))",
        "conclusion": "playful(Bunny)"
      },
      {
        "facts": [
          "well_nourished(Bunny)",
          "playful(Bunny)"
        ],
        "rules": "well_nourished(Bunny) → (playful(Bunny) ⊕ affectionate(Bunny))",
        "conclusion": "¬affectionate(Bunny)"
      },
      {
        "facts": [
          "curious(Bunny)",
          "¬strong(Bunny)"
        ],
        "rules": "curious(Bunny) → (strong(Bunny) ∨ healthy(Bunny))",
        "conclusion": "healthy(Bunny)"
      },
      {
        "facts": [
          "healthy(Bunny)",
          "¬affectionate(Bunny)"
        ],
        "rules": "healthy(Bunny) → (adventurous(Bunny) ∨ affectionate(Bunny))",
        "conclusion": "¬adventurous(Bunny)"
      }
    ],
    "conclusion": "Bunny is not adventurous.",
    "conclusion_fol": "¬adventurous(Bunny)",
    "answer": "False",
    "context": [
      "Bunny runs free.",
      "Every rabbit either runs free or gets exercise.",
      "Bunny eats well.",
      "Any rabbit that gets exercise or eats well is playful.",
      "Bunny is well-nourished.",
      "If Bunny is well-nourished, then she is either playful or affectionate, but not both.",
      "Bunny is curious.",
      "Bunny is not strong.",
      "If Bunny is curious, then she is either strong or healthy (or both).",
      "If Bunny is healthy, then she is either adventurous or affectionate (or both)."
    ],
    "context_fol": [
      "runs_free(Bunny)",
      "∀x (runs_free(x) ∨ gets_exercise(x))",
      "eats_well(Bunny)",
      "∀x ((gets_exercise(x) ∨ eats_well(x)) → playful(x))",
      "well_nourished(Bunny)",
      "well_nourished(Bunny) → (playful(Bunny) ⊕ affectionate(Bunny))",
      "curious(Bunny)",
      "¬strong(Bunny)",
      "curious(Bunny) → (strong(Bunny) ∨ healthy(Bunny))",
      "healthy(Bunny) → (adventurous(Bunny) ∨ affectionate(Bunny))"
    ],
    "background_story": "Bunny was a rare and special rabbit, born with a unique allantoid placenta, a characteristic shared by only a few mammals. This special trait allowed her to receive extra nutrients and care from her mother, making her one of the healthiest and strongest in the litter. As she grew, Bunny became known for her adventurous spirit and fearless nature. She would often explore the outer edges of her enclosure, discovering hidden corners and secret paths. Despite her bold personality, Bunny had a soft spot for snuggles and would always return to her cozy burrow for cuddles and treats. Her allantoid beginnings had given her a remarkable start in life, and she lived each day to the fullest, hopping from one exciting experience to the next.",
    "name": "Bunny",
    "keyword": "allantoid",
    "subject_category": "rabbit"
  },
  {
    "facts": [
      "Angelo is a performer.",
      "Angelo loves music.",
      "Angelo is a musician.",
      "Angelo does not compose music."
    ],
    "facts_fol": [
      "is_performer(Angelo)",
      "loves_music(Angelo)",
      "is_musician(Angelo)",
      "¬compose_music(Angelo)"
    ],
    "rules": [
      "For all humans, if someone is a successful pianist, then they either practice diligently or perform with passion (or both).",
      "If Angelo is a performer, then he either rehearses frequently or practices diligently, but not both.",
      "Angelo either loves music or is a successful pianist, but being one does not guarantee the other.",
      "If Angelo is a musician, then he either composes music or rehearses frequently, but not both."
    ],
    "rules_fol": [
      "∀x (successful_pianist(x) → (practice_diligently(x) ∨ perform_with_passion(x)))",
      "is_performer(Angelo) → (rehearse_frequently(Angelo) ⊕ practice_diligently(Angelo))",
      "loves_music(Angelo) ⊕ successful_pianist(Angelo)",
      "is_musician(Angelo) → (compose_music(Angelo) ⊕ rehearse_frequently(Angelo))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Anyone who perfects their craft practices diligently.",
      "If Angelo pursues a career, then he either develops his skills or is a successful pianist (or both).",
      "If Angelo sets goals or seeks feedback, then he rehearses frequently."
    ],
    "distracting_rules_fol": [
      "∀x (perfects_craft(x) → practice_diligently(x))",
      "pursue_career(Angelo) → (develop_skill(Angelo) ∨ successful_pianist(Angelo))",
      "(sets_goals(Angelo) ∨ seeks_feedback(Angelo)) → rehearse_frequently(Angelo)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Angelo is a musician.",
          "Angelo does not compose music."
        ],
        "rules": "If Angelo is a musician, then he either composes music or rehearses frequently, but not both.",
        "conclusion": "Angelo rehearses frequently."
      },
      {
        "facts": [
          "Angelo loves music."
        ],
        "rules": "Angelo either loves music or is a successful pianist, but being one does not guarantee the other.",
        "conclusion": "Angelo is not a successful pianist."
      },
      {
        "facts": [
          "Angelo is a performer.",
          "Angelo rehearses frequently."
        ],
        "rules": "If Angelo is a performer, then he either rehearses frequently or practices diligently, but not both.",
        "conclusion": "Angelo does not practice diligently."
      },
      {
        "facts": [
          "Angelo is not a successful pianist.",
          "Angelo does not practice diligently."
        ],
        "rules": "For all humans, if someone is a successful pianist, then they either practice diligently or perform with passion (or both).",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "is_musician(Angelo)",
          "¬compose_music(Angelo)"
        ],
        "rules": "is_musician(Angelo) → (compose_music(Angelo) ⊕ rehearse_frequently(Angelo))",
        "conclusion": "rehearse_frequently(Angelo)"
      },
      {
        "facts": [
          "loves_music(Angelo)"
        ],
        "rules": "loves_music(Angelo) ⊕ successful_pianist(Angelo)",
        "conclusion": "¬successful_pianist(Angelo)"
      },
      {
        "facts": [
          "is_performer(Angelo)",
          "rehearse_frequently(Angelo)"
        ],
        "rules": "is_performer(Angelo) → (rehearse_frequently(Angelo) ⊕ practice_diligently(Angelo))",
        "conclusion": "¬practice_diligently(Angelo)"
      },
      {
        "facts": [
          "¬successful_pianist(Angelo)",
          "¬practice_diligently(Angelo)"
        ],
        "rules": "∀x (successful_pianist(x) → (practice_diligently(x) ∨ perform_with_passion(x)))",
        "conclusion": null
      }
    ],
    "conclusion": "Angelo performs with passion.",
    "conclusion_fol": "perform_with_passion(Angelo)",
    "answer": "Uncertain",
    "context": [
      "Angelo is a musician.",
      "Angelo does not compose music.",
      "If Angelo is a musician, then he either composes music or rehearses frequently, but not both.",
      "Angelo loves music.",
      "Angelo either loves music or is a successful pianist, but being one does not guarantee the other.",
      "Angelo is a performer.",
      "If Angelo is a performer, then he either rehearses frequently or practices diligently, but not both.",
      "For all humans, if someone is a successful pianist, then they either practice diligently or perform with passion (or both)."
    ],
    "context_fol": [
      "is_musician(Angelo)",
      "¬compose_music(Angelo)",
      "is_musician(Angelo) → (compose_music(Angelo) ⊕ rehearse_frequently(Angelo))",
      "loves_music(Angelo)",
      "loves_music(Angelo) ⊕ successful_pianist(Angelo)",
      "is_performer(Angelo)",
      "is_performer(Angelo) → (rehearse_frequently(Angelo) ⊕ practice_diligently(Angelo))",
      "∀x (successful_pianist(x) → (practice_diligently(x) ∨ perform_with_passion(x)))"
    ],
    "background_story": "Angelo was a passionate pianist with a dream to perform on the world's most prestigious stages. Growing up, he spent hours practicing, perfecting his craft under the patient guidance of his mentor. Angelo's perseverance paid off when he was accepted into a renowned music conservatory. His performances were always punctuated by precision and power, showcasing his profound understanding of music. Soon, he was playing to packed auditoriums, his piano pieces praised for their purity and passion. Angelo's journey to success was not without its challenges, but his persistence and love for piano kept him pushing forward, making him a celebrated figure in the music world.",
    "name": "Angelo",
    "keyword": "p",
    "subject_category": "human"
  },
  {
    "facts": [
      "Sugar calms troubled minds.",
      "Sugar does not have a kind heart.",
      "Sugar does not have a strong bond."
    ],
    "facts_fol": [
      "calm_troubled_minds(Sugar)",
      "¬has_kind_heart(Sugar)",
      "¬strong_bond(Sugar)"
    ],
    "rules": [
      "If Sugar is gentle, then she either calms troubled minds or senses healing plants (or both).",
      "All horses that have a kind heart and love nature are gentle.",
      "If Sugar has a strong bond to Grey Wolf, then she loves nature and respects her elders."
    ],
    "rules_fol": [
      "gentle(Sugar) → (calm_troubled_minds(Sugar) ∨ sense_healing_plants(Sugar))",
      "∀x ((has_kind_heart(x) ∧ loves_nature(x)) → gentle(x))",
      "strong_bond(Sugar) → (loves_nature(Sugar) ∧ respects_elders(Sugar))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "All horses that soothe people are gentle.",
      "If Sugar is loyal, then she is both intelligent and loves nature."
    ],
    "distracting_rules_fol": [
      "∀x (soothes_people(x) → gentle(x))",
      "is_loyal(Sugar) → (intelligent(Sugar) ∧ loves_nature(Sugar))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Sugar does not have a strong bond."
        ],
        "rules": "If Sugar has a strong bond to Grey Wolf, then she loves nature and respects her elders.",
        "conclusion": null
      },
      {
        "facts": [
          "Sugar does not have a kind heart."
        ],
        "rules": "All horses that have a kind heart and love nature are gentle.",
        "conclusion": null
      },
      {
        "facts": [
          "Sugar calms troubled minds."
        ],
        "rules": "If Sugar is gentle, then she either calms troubled minds or senses healing plants (or both).",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬strong_bond(Sugar)"
        ],
        "rules": "strong_bond(Sugar) → (loves_nature(Sugar) ∧ respects_elders(Sugar))",
        "conclusion": null
      },
      {
        "facts": [
          "¬has_kind_heart(Sugar)"
        ],
        "rules": "∀x ((has_kind_heart(x) ∧ loves_nature(x)) → gentle(x))",
        "conclusion": null
      },
      {
        "facts": [
          "calm_troubled_minds(Sugar)"
        ],
        "rules": "gentle(Sugar) → (calm_troubled_minds(Sugar) ∨ sense_healing_plants(Sugar))",
        "conclusion": null
      }
    ],
    "conclusion": "Sugar does not sense healing plants.",
    "conclusion_fol": "¬sense_healing_plants(Sugar)",
    "answer": "Uncertain",
    "context": [
      "Sugar does not have a strong bond.",
      "If Sugar has a strong bond to Grey Wolf, then she loves nature and respects her elders.",
      "Sugar does not have a kind heart.",
      "All horses that have a kind heart and love nature are gentle.",
      "Sugar calms troubled minds.",
      "If Sugar is gentle, then she either calms troubled minds or senses healing plants (or both)."
    ],
    "context_fol": [
      "¬strong_bond(Sugar)",
      "strong_bond(Sugar) → (loves_nature(Sugar) ∧ respects_elders(Sugar))",
      "¬has_kind_heart(Sugar)",
      "∀x ((has_kind_heart(x) ∧ loves_nature(x)) → gentle(x))",
      "calm_troubled_minds(Sugar)",
      "gentle(Sugar) → (calm_troubled_minds(Sugar) ∨ sense_healing_plants(Sugar))"
    ],
    "background_story": "Sugar was a magnificent Appaloosa horse living on a reservation near Lake Superior. She was named by her Ojibwa owner, Grey Wolf, who recognized the horse's gentle spirit and spotted coat reminiscent of the sugar maple trees that bloomed in the area. Grey Wolf, an elder and respected healer among his people, believed Sugar possessed a special gift – the ability to sense and calm troubled minds. Together, they would ride through the woods, Grey Wolf sharing stories of their ancestors and the ancient ways of the Ojibwa. Sugar's presence seemed to embody the Ojibwa values of respect, kindness, and harmony with nature. As they explored the forest, Sugar would often stop at spots where Grey Wolf would collect medicinal herbs, as if guiding him to the healing plants. Their bond was a beautiful expression of the interconnectedness of all living beings, a core principle of Ojibwa teachings.",
    "name": "Sugar",
    "keyword": "ojibwa",
    "subject_category": "horse"
  },
  {
    "facts": [
      "Zayd is good-humored.",
      "Zayd is a social butterfly.",
      "Zayd is confident.",
      "Zayd is lively."
    ],
    "facts_fol": [
      "good_humored(Zayd)",
      "social_butterfly(Zayd)",
      "confident(Zayd)",
      "lively(Zayd)"
    ],
    "rules": [
      "Zayd is either charismatic or humble (or both).",
      "If Zayd is outgoing, then he is likable and charismatic.",
      "If Zayd is confident, then he is good-humored and likable.",
      "Everyone who is a social butterfly is either entertaining or outgoing (or both).",
      "For Zayd, being lively and being entertaining are mutually exclusive, but not exhaustive, characteristics."
    ],
    "rules_fol": [
      "charismatic(Zayd) ∨ humble(Zayd)",
      "outgoing(Zayd) → (likable(Zayd) ∧ charismatic(Zayd))",
      "confident(Zayd) → (good_humored(Zayd) ∧ likable(Zayd))",
      "∀x (social_butterfly(x) → (entertaining(x) ∨ outgoing(x)))",
      "lively(Zayd) ⊕ entertaining(Zayd)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Zayd speaks well or tells jokes, then he is charismatic.",
      "Zayd is either friendly or likable.",
      "If Zayd speaks fluently, then he is either outgoing or makes friends easily.",
      "If Zayd is a public speaker, then he is either witty or entertaining, but not both."
    ],
    "distracting_rules_fol": [
      "(speaks_well(Zayd) ∨ tells_jokes(Zayd)) → charismatic(Zayd)",
      "friendly(Zayd) ∨ likable(Zayd)",
      "speaks_fluently(Zayd) → (outgoing(Zayd) ∨ makes_friends(Zayd))",
      "public_speaker(Zayd) → (witty(Zayd) ⊕ entertaining(Zayd))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Zayd is lively."
        ],
        "rules": "For Zayd, being lively and being entertaining are mutually exclusive, but not exhaustive, characteristics.",
        "conclusion": "Zayd is not entertaining."
      },
      {
        "facts": [
          "Zayd is a social butterfly.",
          "Zayd is not entertaining."
        ],
        "rules": "Everyone who is a social butterfly is either entertaining or outgoing (or both).",
        "conclusion": "Zayd is outgoing."
      },
      {
        "facts": [
          "Zayd is confident.",
          "Zayd is good-humored."
        ],
        "rules": "If Zayd is confident, then he is good-humored and likable.",
        "conclusion": "Zayd is likable."
      },
      {
        "facts": [
          "Zayd is outgoing.",
          "Zayd is likable."
        ],
        "rules": "If Zayd is outgoing, then he is likable and charismatic.",
        "conclusion": "Zayd is charismatic."
      },
      {
        "facts": [
          "Zayd is charismatic."
        ],
        "rules": "Zayd is either charismatic or humble (or both).",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "lively(Zayd)"
        ],
        "rules": "lively(Zayd) ⊕ entertaining(Zayd)",
        "conclusion": "¬entertaining(Zayd)"
      },
      {
        "facts": [
          "social_butterfly(Zayd)",
          "¬entertaining(Zayd)"
        ],
        "rules": "∀x (social_butterfly(x) → (entertaining(x) ∨ outgoing(x)))",
        "conclusion": "outgoing(Zayd)"
      },
      {
        "facts": [
          "confident(Zayd)",
          "good_humored(Zayd)"
        ],
        "rules": "confident(Zayd) → (good_humored(Zayd) ∧ likable(Zayd))",
        "conclusion": "likable(Zayd)"
      },
      {
        "facts": [
          "outgoing(Zayd)",
          "likable(Zayd)"
        ],
        "rules": "outgoing(Zayd) → (likable(Zayd) ∧ charismatic(Zayd))",
        "conclusion": "charismatic(Zayd)"
      },
      {
        "facts": [
          "charismatic(Zayd)"
        ],
        "rules": "charismatic(Zayd) ∨ humble(Zayd)",
        "conclusion": null
      }
    ],
    "conclusion": "Zayd is humble.",
    "conclusion_fol": "humble(Zayd)",
    "answer": "Uncertain",
    "context": [
      "Zayd is lively.",
      "For Zayd, being lively and being entertaining are mutually exclusive, but not exhaustive, characteristics.",
      "Zayd is a social butterfly.",
      "Everyone who is a social butterfly is either entertaining or outgoing (or both).",
      "Zayd is confident.",
      "Zayd is good-humored.",
      "If Zayd is confident, then he is good-humored and likable.",
      "If Zayd is outgoing, then he is likable and charismatic.",
      "Zayd is either charismatic or humble (or both)."
    ],
    "context_fol": [
      "lively(Zayd)",
      "lively(Zayd) ⊕ entertaining(Zayd)",
      "social_butterfly(Zayd)",
      "∀x (social_butterfly(x) → (entertaining(x) ∨ outgoing(x)))",
      "confident(Zayd)",
      "good_humored(Zayd)",
      "confident(Zayd) → (good_humored(Zayd) ∧ likable(Zayd))",
      "outgoing(Zayd) → (likable(Zayd) ∧ charismatic(Zayd))",
      "charismatic(Zayd) ∨ humble(Zayd)"
    ],
    "background_story": "Zayd was a charismatic socialite known for his fatuously confident demeanor. He had a way with words, often speaking with an air of superiority that was both captivating and off-putting. Despite his tendency to exaggerate his accomplishments, Zayd had a certain charm that drew people to him. However, his fatuous behavior often landed him in trouble, as he would promise more than he could deliver. One day, Zayd boasted about his cooking skills, claiming he could prepare a gourmet meal for a dinner party. Although the meal was a disaster, Zayd's guests were amused by his hapless attempts and good-naturedly teased him about his fatuous claims. From then on, Zayd learned to balance his confidence with a dose of humility, becoming a more well-rounded and endearing personality.",
    "name": "Zayd",
    "keyword": "fatuously",
    "subject_category": "human"
  },
  {
    "facts": [
      "Bruce researches ecosystems.",
      "Bruce is a botanist.",
      "Bruce explores wetlands."
    ],
    "facts_fol": [
      "research_ecosystems(Bruce)",
      "is_botanist(Bruce)",
      "explore_wetlands(Bruce)"
    ],
    "rules": [
      "If Bruce studies desert flora, then he develops expertise and contributes to conservation.",
      "Anyone who researches ecosystems or protects wildlife can contribute to conservation.",
      "If Bruce is a botanist, then he either studies desert flora or explores wetlands, but not both."
    ],
    "rules_fol": [
      "study_desert_flora(Bruce) → (develop_expertise(Bruce) ∧ contribute_to_conservation(Bruce))",
      "∀x ((research_ecosystems(x) ∨ protect_wildlife(x)) → contribute_to_conservation(x))",
      "is_botanist(Bruce) → (study_desert_flora(Bruce) ⊕ explore_wetlands(Bruce))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Bruce either plants trees or contributes to conservation.",
      "If Bruce lives in the outback, then he will study desert flora."
    ],
    "distracting_rules_fol": [
      "plants_trees(Bruce) ∨ contribute_to_conservation(Bruce)",
      "lives_outback(Bruce) → study_desert_flora(Bruce)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Bruce is a botanist.",
          "Bruce explores wetlands."
        ],
        "rules": "If Bruce is a botanist, then he either studies desert flora or explores wetlands, but not both.",
        "conclusion": "Bruce does not study desert flora."
      },
      {
        "facts": [
          "Bruce researches ecosystems."
        ],
        "rules": "Anyone who researches ecosystems or protects wildlife can contribute to conservation.",
        "conclusion": "Bruce contributes to conservation."
      },
      {
        "facts": [
          "Bruce does not study desert flora.",
          "Bruce contributes to conservation."
        ],
        "rules": "If Bruce studies desert flora, then he develops expertise and contributes to conservation.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "is_botanist(Bruce)",
          "explore_wetlands(Bruce)"
        ],
        "rules": "is_botanist(Bruce) → (study_desert_flora(Bruce) ⊕ explore_wetlands(Bruce))",
        "conclusion": "¬study_desert_flora(Bruce)"
      },
      {
        "facts": [
          "research_ecosystems(Bruce)"
        ],
        "rules": "∀x ((research_ecosystems(x) ∨ protect_wildlife(x)) → contribute_to_conservation(x))",
        "conclusion": "contribute_to_conservation(Bruce)"
      },
      {
        "facts": [
          "¬study_desert_flora(Bruce)",
          "contribute_to_conservation(Bruce)"
        ],
        "rules": "study_desert_flora(Bruce) → (develop_expertise(Bruce) ∧ contribute_to_conservation(Bruce))",
        "conclusion": null
      }
    ],
    "conclusion": "Bruce develops expertise.",
    "conclusion_fol": "develop_expertise(Bruce)",
    "answer": "Uncertain",
    "context": [
      "Bruce is a botanist.",
      "Bruce explores wetlands.",
      "If Bruce is a botanist, then he either studies desert flora or explores wetlands, but not both.",
      "Bruce researches ecosystems.",
      "Anyone who researches ecosystems or protects wildlife can contribute to conservation.",
      "If Bruce studies desert flora, then he develops expertise and contributes to conservation."
    ],
    "context_fol": [
      "is_botanist(Bruce)",
      "explore_wetlands(Bruce)",
      "is_botanist(Bruce) → (study_desert_flora(Bruce) ⊕ explore_wetlands(Bruce))",
      "research_ecosystems(Bruce)",
      "∀x ((research_ecosystems(x) ∨ protect_wildlife(x)) → contribute_to_conservation(x))",
      "study_desert_flora(Bruce) → (develop_expertise(Bruce) ∧ contribute_to_conservation(Bruce))"
    ],
    "background_story": "Bruce was a renowned botanist who spent most of his career studying the unique flora of arid deserts. Growing up in a small town on the outskirts of the Australian Outback, he developed a fascination with the harsh, dry landscapes that seemed to stretch on forever. Bruce's research took him to some of the driest places on Earth, from the Sahara to the Mojave Desert. He dedicated his life to understanding how plants adapted to survive in these extreme conditions, often going months without seeing a drop of rain. His groundbreaking work led to the discovery of several new species and a deeper understanding of the importance of conservation in these fragile ecosystems. Despite the challenges, Bruce found a strange beauty in the arid landscapes, and his work continues to inspire a new generation of scientists and explorers.",
    "name": "Bruce",
    "keyword": "arid",
    "subject_category": "human"
  },
  {
    "facts": [
      "Shiloh does not live in a coral reef.",
      "Shiloh makes friends with other fish.",
      "Shiloh is small in size."
    ],
    "facts_fol": [
      "¬lives_in_coral_reef(Shiloh)",
      "makes_friends(Shiloh)",
      "small_size(Shiloh)"
    ],
    "rules": [
      "For all fish, if a fish lives in a coral reef, then it plays an ecological role and has unique characteristics.",
      "If Shiloh is curious, then he has unique characteristics and eats algae.",
      "Shiloh is either curious or makes friends with other fish, but not necessarily both.",
      "If Shiloh is small, then he eats algae."
    ],
    "rules_fol": [
      "∀x (lives_in_coral_reef(x) → (plays_ecological_role(x) ∧ has_unique_characteristics(x)))",
      "is_curious(Shiloh) → (has_unique_characteristics(Shiloh) ∧ eats_algae(Shiloh))",
      "makes_friends(Shiloh) ⊕ is_curious(Shiloh)",
      "small_size(Shiloh) → eats_algae(Shiloh)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "All fish that have strong fins and are intelligent have unique characteristics.",
      "Shiloh either explores his environment or is curious.",
      "Shiloh either finds food or eats algae."
    ],
    "distracting_rules_fol": [
      "∀x ((has_strong_fins(x) ∧ is_intelligent(x)) → has_unique_characteristics(x))",
      "explores_environment(Shiloh) ∨ is_curious(Shiloh)",
      "finds_food(Shiloh) ∨ eats_algae(Shiloh)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Shiloh is small in size."
        ],
        "rules": "If Shiloh is small, then he eats algae.",
        "conclusion": "Shiloh eats algae."
      },
      {
        "facts": [
          "Shiloh makes friends with other fish."
        ],
        "rules": "Shiloh is either curious or makes friends with other fish, but not necessarily both.",
        "conclusion": "Shiloh is not curious."
      },
      {
        "facts": [
          "Shiloh is not curious.",
          "Shiloh eats algae."
        ],
        "rules": "If Shiloh is curious, then he has unique characteristics and eats algae.",
        "conclusion": null
      },
      {
        "facts": [
          "Shiloh does not live in a coral reef."
        ],
        "rules": "For all fish, if a fish lives in a coral reef, then it plays an ecological role and has unique characteristics.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "small_size(Shiloh)"
        ],
        "rules": "small_size(Shiloh) → eats_algae(Shiloh)",
        "conclusion": "eats_algae(Shiloh)"
      },
      {
        "facts": [
          "makes_friends(Shiloh)"
        ],
        "rules": "makes_friends(Shiloh) ⊕ is_curious(Shiloh)",
        "conclusion": "¬is_curious(Shiloh)"
      },
      {
        "facts": [
          "¬is_curious(Shiloh)",
          "eats_algae(Shiloh)"
        ],
        "rules": "is_curious(Shiloh) → (has_unique_characteristics(Shiloh) ∧ eats_algae(Shiloh))",
        "conclusion": null
      },
      {
        "facts": [
          "¬lives_in_coral_reef(Shiloh)"
        ],
        "rules": "∀x (lives_in_coral_reef(x) → (plays_ecological_role(x) ∧ has_unique_characteristics(x)))",
        "conclusion": null
      }
    ],
    "conclusion": "Shiloh does not play an ecological role.",
    "conclusion_fol": "¬plays_ecological_role(Shiloh)",
    "answer": "Uncertain",
    "context": [
      "Shiloh is small in size.",
      "If Shiloh is small, then he eats algae.",
      "Shiloh makes friends with other fish.",
      "Shiloh is either curious or makes friends with other fish, but not necessarily both.",
      "If Shiloh is curious, then he has unique characteristics and eats algae.",
      "Shiloh does not live in a coral reef.",
      "For all fish, if a fish lives in a coral reef, then it plays an ecological role and has unique characteristics."
    ],
    "context_fol": [
      "small_size(Shiloh)",
      "small_size(Shiloh) → eats_algae(Shiloh)",
      "makes_friends(Shiloh)",
      "makes_friends(Shiloh) ⊕ is_curious(Shiloh)",
      "is_curious(Shiloh) → (has_unique_characteristics(Shiloh) ∧ eats_algae(Shiloh))",
      "¬lives_in_coral_reef(Shiloh)",
      "∀x (lives_in_coral_reef(x) → (plays_ecological_role(x) ∧ has_unique_characteristics(x)))"
    ],
    "background_story": "Shiloh was a fascinating triggerfish, belonging to the plectognathi group, characterized by their unique mouth structure. Living in the vibrant coral reefs of the Caribbean, Shiloh spent his days exploring the underwater world, using his powerful beak-like mouth to eat algae and small invertebrates. Despite his small size, Shiloh had a big personality, often interacting with divers who visited the reef. His species was known for its intelligence and curiosity, and Shiloh was no exception, frequently investigating new objects and making friends with other reef inhabitants. As a plectognath, Shiloh played a vital role in maintaining the balance of the reef ecosystem, and his presence was cherished by all who encountered him.",
    "name": "Shiloh",
    "keyword": "plectognathi",
    "subject_category": "fish"
  },
  {
    "facts": [
      "Wrenley raises eagles.",
      "Wrenley is a skilled falconer.",
      "Wrenley does not participate in competitions.",
      "Wrenley learns falconry."
    ],
    "facts_fol": [
      "raises_eagles(Wrenley)",
      "skilled_falconer(Wrenley)",
      "¬participate_competitions(Wrenley)",
      "learns_falconry(Wrenley)"
    ],
    "rules": [
      "If Wrenley handles birds, then she can either train gyrfalcons or raise eagles, but not both.",
      "Wrenley either studies wildlife or handles birds, but not both.",
      "Wrenley either learns falconry or studies wildlife, but not both."
    ],
    "rules_fol": [
      "handles_birds(Wrenley) → (train_gyrfalcons(Wrenley) ⊕ raises_eagles(Wrenley))",
      "studies_wildlife(Wrenley) ⊕ handles_birds(Wrenley)",
      "learns_falconry(Wrenley) ⊕ studies_wildlife(Wrenley)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Wrenley either flies hawks or trains gyrfalcons.",
      "Any person who understands avian behavior or has patience can handle birds.",
      "If Wrenley lives outdoors, then she studies wildlife and respects nature."
    ],
    "distracting_rules_fol": [
      "flies_hawks(Wrenley) ∨ train_gyrfalcons(Wrenley)",
      "∀x ((understands_avian(x) ∨ has_patience(x)) → handles_birds(x))",
      "lives_outdoors(Wrenley) → (studies_wildlife(Wrenley) ∧ respects_nature(Wrenley))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Wrenley learns falconry."
        ],
        "rules": "Wrenley either learns falconry or studies wildlife, but not both.",
        "conclusion": "Wrenley does not study wildlife."
      },
      {
        "facts": [
          "Wrenley does not study wildlife."
        ],
        "rules": "Wrenley either studies wildlife or handles birds, but not both.",
        "conclusion": "Wrenley handles birds."
      },
      {
        "facts": [
          "Wrenley handles birds.",
          "Wrenley raises eagles."
        ],
        "rules": "If Wrenley handles birds, then she can either train gyrfalcons or raise eagles, but not both.",
        "conclusion": "Wrenley does not train gyrfalcons."
      },
      {
        "facts": [
          "Wrenley is a skilled falconer.",
          "Wrenley does not train gyrfalcons.",
          "Wrenley does not participate in competitions."
        ],
        "rules": null,
        "conclusion": "If Wrenley is a skilled falconer, then she can either train gyrfalcons or participate in competitions, but not both."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "learns_falconry(Wrenley)"
        ],
        "rules": "learns_falconry(Wrenley) ⊕ studies_wildlife(Wrenley)",
        "conclusion": "¬studies_wildlife(Wrenley)"
      },
      {
        "facts": [
          "¬studies_wildlife(Wrenley)"
        ],
        "rules": "studies_wildlife(Wrenley) ⊕ handles_birds(Wrenley)",
        "conclusion": "handles_birds(Wrenley)"
      },
      {
        "facts": [
          "handles_birds(Wrenley)",
          "raises_eagles(Wrenley)"
        ],
        "rules": "handles_birds(Wrenley) → (train_gyrfalcons(Wrenley) ⊕ raises_eagles(Wrenley))",
        "conclusion": "¬train_gyrfalcons(Wrenley)"
      },
      {
        "facts": [
          "skilled_falconer(Wrenley)",
          "¬train_gyrfalcons(Wrenley)",
          "¬participate_competitions(Wrenley)"
        ],
        "rules": null,
        "conclusion": "skilled_falconer(Wrenley) → (train_gyrfalcons(Wrenley) ⊕ participate_competitions(Wrenley))"
      }
    ],
    "conclusion": "If Wrenley is a skilled falconer, then she can either train gyrfalcons or participate in competitions, but not both.",
    "conclusion_fol": "skilled_falconer(Wrenley) → (train_gyrfalcons(Wrenley) ⊕ participate_competitions(Wrenley))",
    "answer": "False",
    "context": [
      "Wrenley learns falconry.",
      "Wrenley either learns falconry or studies wildlife, but not both.",
      "Wrenley either studies wildlife or handles birds, but not both.",
      "Wrenley raises eagles.",
      "If Wrenley handles birds, then she can either train gyrfalcons or raise eagles, but not both.",
      "Wrenley is a skilled falconer.",
      "Wrenley does not participate in competitions."
    ],
    "context_fol": [
      "learns_falconry(Wrenley)",
      "learns_falconry(Wrenley) ⊕ studies_wildlife(Wrenley)",
      "studies_wildlife(Wrenley) ⊕ handles_birds(Wrenley)",
      "raises_eagles(Wrenley)",
      "handles_birds(Wrenley) → (train_gyrfalcons(Wrenley) ⊕ raises_eagles(Wrenley))",
      "skilled_falconer(Wrenley)",
      "¬participate_competitions(Wrenley)"
    ],
    "background_story": "Wrenley was a renowned falconer living in the rugged landscapes of the north. She was particularly known for her exceptional skill in handling the majestic gyrfalcon, the largest and most powerful of all falcon species. Wrenley's fascination with gyrfalcons began when she was a child, watching these birds soar overhead, their wingspans stretching up to six feet. She spent years studying and learning the ancient art of falconry, eventually earning the respect of her peers for her ability to train and fly these formidable birds. Wrenley's most prized gyrfalcon, named Arktos, was a symbol of her dedication and prowess, known for its speed and agility in flight. Together, Wrenley and Arktos participated in numerous competitions, showcasing the unique bond between a skilled falconer and her loyal gyrfalcon.",
    "name": "Wrenley",
    "keyword": "gyrfalcon",
    "subject_category": "human"
  },
  {
    "facts": [
      "Declan is a loving parent.",
      "Declan provides support.",
      "Declan does not set boundaries."
    ],
    "facts_fol": [
      "loving_parent(Declan)",
      "provide_support(Declan)",
      "¬sets_boundaries(Declan)"
    ],
    "rules": [
      "For all humans, if someone is a loving parent, then they either show affection or make their kids feel safe (or both).",
      "For Declan, either he gives comfort or shows affection, but not necessarily both.",
      "For Declan, either he offers guidance or gives comfort, but not necessarily both.",
      "If Declan is nurturing, then he either provides support or offers guidance, but not both.",
      "Declan is either a nurturing person or someone who sets boundaries, but he doesn't necessarily exhibit both characteristics."
    ],
    "rules_fol": [
      "∀x (loving_parent(x) → (show_affection(x) ∨ make_kids_feel_safe(x)))",
      "give_comfort(Declan) ⊕ show_affection(Declan)",
      "offer_guidance(Declan) ⊕ give_comfort(Declan)",
      "is_nurturing(Declan) → (provide_support(Declan) ⊕ offer_guidance(Declan))",
      "sets_boundaries(Declan) ⊕ is_nurturing(Declan)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Everyone who cares for children either builds trust with them or shows affection (or both).",
      "If someone cares deeply, then they give comfort.",
      "If someone cares deeply, then they offer guidance and listen actively.",
      "If someone cares deeply and listens actively, then they are nurturing."
    ],
    "distracting_rules_fol": [
      "∀x (care_for_children(x) → (build_trust(x) ∨ show_affection(x)))",
      "∀x (care_deeply(x) → give_comfort(x))",
      "∀x (care_deeply(x) → (offer_guidance(x) ∧ listen_actively(x)))",
      "∀x ((cares_deeply(x) ∧ listens_actively(x)) → is_nurturing(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Declan does not set boundaries."
        ],
        "rules": "Declan is either a nurturing person or someone who sets boundaries, but he doesn't necessarily exhibit both characteristics.",
        "conclusion": "Declan is nurturing."
      },
      {
        "facts": [
          "Declan is nurturing.",
          "Declan provides support."
        ],
        "rules": "If Declan is nurturing, then he either provides support or offers guidance, but not both.",
        "conclusion": "Declan does not offer guidance."
      },
      {
        "facts": [
          "Declan does not offer guidance."
        ],
        "rules": "For Declan, either he offers guidance or gives comfort, but not necessarily both.",
        "conclusion": "Declan gives comfort."
      },
      {
        "facts": [
          "Declan gives comfort."
        ],
        "rules": "For Declan, either he gives comfort or shows affection, but not necessarily both.",
        "conclusion": "Declan does not show affection."
      },
      {
        "facts": [
          "Declan is a loving parent.",
          "Declan does not show affection."
        ],
        "rules": "For all humans, if someone is a loving parent, then they either show affection or make their kids feel safe (or both).",
        "conclusion": "Declan does not make his kids feel safe."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬sets_boundaries(Declan)"
        ],
        "rules": "sets_boundaries(Declan) ⊕ is_nurturing(Declan)",
        "conclusion": "is_nurturing(Declan)"
      },
      {
        "facts": [
          "is_nurturing(Declan)",
          "provide_support(Declan)"
        ],
        "rules": "is_nurturing(Declan) → (provide_support(Declan) ⊕ offer_guidance(Declan))",
        "conclusion": "¬offer_guidance(Declan)"
      },
      {
        "facts": [
          "¬offer_guidance(Declan)"
        ],
        "rules": "offer_guidance(Declan) ⊕ give_comfort(Declan)",
        "conclusion": "give_comfort(Declan)"
      },
      {
        "facts": [
          "give_comfort(Declan)"
        ],
        "rules": "give_comfort(Declan) ⊕ show_affection(Declan)",
        "conclusion": "¬show_affection(Declan)"
      },
      {
        "facts": [
          "loving_parent(Declan)",
          "¬show_affection(Declan)"
        ],
        "rules": "∀x (loving_parent(x) → (show_affection(x) ∨ make_kids_feel_safe(x)))",
        "conclusion": "¬make_kids_feel_safe(Declan)"
      }
    ],
    "conclusion": "Declan does not make his kids feel safe.",
    "conclusion_fol": "¬make_kids_feel_safe(Declan)",
    "answer": "False",
    "context": [
      "Declan does not set boundaries.",
      "Declan is either a nurturing person or someone who sets boundaries, but he doesn't necessarily exhibit both characteristics.",
      "Declan provides support.",
      "If Declan is nurturing, then he either provides support or offers guidance, but not both.",
      "For Declan, either he offers guidance or gives comfort, but not necessarily both.",
      "For Declan, either he gives comfort or shows affection, but not necessarily both.",
      "Declan is a loving parent.",
      "For all humans, if someone is a loving parent, then they either show affection or make their kids feel safe (or both)."
    ],
    "context_fol": [
      "¬sets_boundaries(Declan)",
      "sets_boundaries(Declan) ⊕ is_nurturing(Declan)",
      "provide_support(Declan)",
      "is_nurturing(Declan) → (provide_support(Declan) ⊕ offer_guidance(Declan))",
      "offer_guidance(Declan) ⊕ give_comfort(Declan)",
      "give_comfort(Declan) ⊕ show_affection(Declan)",
      "loving_parent(Declan)",
      "∀x (loving_parent(x) → (show_affection(x) ∨ make_kids_feel_safe(x)))"
    ],
    "background_story": "Declan was a gentle soul with a warm and loving heart. As a father, he had a special way with his children, often showing affection through soft, comforting gestures. His youngest daughter, Emily, adored it when Declan would nuzzle her gently on the cheek, making her feel safe and loved. Every night, before bed, Declan would tuck Emily in, giving her a soft nuzzle on the forehead, whispering 'I love you' in her ear. This simple gesture became a bedtime ritual, one that Emily cherished deeply. As she grew older, she'd nuzzle her own children the same way, passing on the love and warmth that Declan had shown her.",
    "name": "Declan",
    "keyword": "nuzzle",
    "subject_category": "human"
  },
  {
    "facts": [
      "Asher is not passionate.",
      "Asher is hardworking.",
      "Asher does not make masterpieces.",
      "Asher cooks innovatively."
    ],
    "facts_fol": [
      "¬passionate(Asher)",
      "hardworking(Asher)",
      "¬makes_masterpieces(Asher)",
      "cooks_innovatively(Asher)"
    ],
    "rules": [
      "If Asher is either creative or passionate (but not both), then he is successful.",
      "If Asher is hardworking, then he is either creative or talented, but not both.",
      "If Asher either makes masterpieces or cooks innovatively (but not both), then he is talented."
    ],
    "rules_fol": [
      "(creative(Asher) ⊕ passionate(Asher)) → successful(Asher)",
      "hardworking(Asher) → (creative(Asher) ⊕ talented(Asher))",
      "(makes_masterpieces(Asher) ⊕ cooks_innovatively(Asher)) → talented(Asher)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Asher either thinks outside the box or tries new things (but not both), then he is creative.",
      "If Asher is dedicated, then he is either skilled or talented, but not both."
    ],
    "distracting_rules_fol": [
      "(thinks_outside(Asher) ⊕ tries_new(Asher)) → creative(Asher)",
      "dedicated(Asher) → (skilled(Asher) ⊕ talented(Asher))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Asher does not make masterpieces.",
          "Asher cooks innovatively."
        ],
        "rules": "If Asher either makes masterpieces or cooks innovatively (but not both), then he is talented.",
        "conclusion": "Asher is talented."
      },
      {
        "facts": [
          "Asher is hardworking.",
          "Asher is talented."
        ],
        "rules": "If Asher is hardworking, then he is either creative or talented, but not both.",
        "conclusion": "Asher is not creative."
      },
      {
        "facts": [
          "Asher is not creative.",
          "Asher is not passionate."
        ],
        "rules": "If Asher is either creative or passionate (but not both), then he is successful.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬makes_masterpieces(Asher)",
          "cooks_innovatively(Asher)"
        ],
        "rules": "(makes_masterpieces(Asher) ⊕ cooks_innovatively(Asher)) → talented(Asher)",
        "conclusion": "talented(Asher)"
      },
      {
        "facts": [
          "hardworking(Asher)",
          "talented(Asher)"
        ],
        "rules": "hardworking(Asher) → (creative(Asher) ⊕ talented(Asher))",
        "conclusion": "¬creative(Asher)"
      },
      {
        "facts": [
          "¬creative(Asher)",
          "¬passionate(Asher)"
        ],
        "rules": "(creative(Asher) ⊕ passionate(Asher)) → successful(Asher)",
        "conclusion": null
      }
    ],
    "conclusion": "Asher is successful.",
    "conclusion_fol": "successful(Asher)",
    "answer": "Uncertain",
    "context": [
      "Asher does not make masterpieces.",
      "Asher cooks innovatively.",
      "If Asher either makes masterpieces or cooks innovatively (but not both), then he is talented.",
      "Asher is hardworking.",
      "If Asher is hardworking, then he is either creative or talented, but not both.",
      "Asher is not passionate.",
      "If Asher is either creative or passionate (but not both), then he is successful."
    ],
    "context_fol": [
      "¬makes_masterpieces(Asher)",
      "cooks_innovatively(Asher)",
      "(makes_masterpieces(Asher) ⊕ cooks_innovatively(Asher)) → talented(Asher)",
      "hardworking(Asher)",
      "hardworking(Asher) → (creative(Asher) ⊕ talented(Asher))",
      "¬passionate(Asher)",
      "(creative(Asher) ⊕ passionate(Asher)) → successful(Asher)"
    ],
    "background_story": "Asher was a free-spirited food truck owner with a passion for crafting the perfect cheeseburger. His menu item, 'Asher's Blazing Burger,' quickly gained a cult following in the city. The secret to his success lay in the combination of a juicy beef patty, crispy bacon, melted cheddar cheese, and a special sauce, all sandwiched between a toasted brioche bun. Asher's food truck became a staple at local festivals and events, with people lining up for hours to taste his cheesy, meaty masterpiece. As his business grew, so did his creativity, leading to innovative variations like the 'Mac 'n Cheese Burger' and the 'Korean BBQ Burger.' Asher's love for the humble cheeseburger had turned into a culinary empire, bringing joy and satisfaction to countless foodies across the city.",
    "name": "Asher",
    "keyword": "cheeseburger",
    "subject_category": "human"
  },
  {
    "facts": [
      "Heaven does not love poetry.",
      "Heaven watches musicals."
    ],
    "facts_fol": [
      "¬love_poetry(Heaven)",
      "watch_musicals(Heaven)"
    ],
    "rules": [
      "For all humans, if they enjoy comedies, then they laugh frequently.",
      "For Heaven, either she reads romance novels or she enjoys comedies, but not both.",
      "If Heaven either loves poetry or watches musicals (but not both), then she reads romance novels."
    ],
    "rules_fol": [
      "∀x (enjoy_comedies(x) → laugh_frequently(x))",
      "read_romance(Heaven) ⊕ enjoy_comedies(Heaven)",
      "(love_poetry(Heaven) ⊕ watch_musicals(Heaven)) → read_romance(Heaven)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Heaven smiles often, then she enjoys comedies.",
      "If Heaven appreciates drama, then she reads romance novels and values emotions."
    ],
    "distracting_rules_fol": [
      "smile_often(Heaven) → enjoy_comedies(Heaven)",
      "appreciate_drama(Heaven) → (read_romance(Heaven) ∧ value_emotions(Heaven))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Heaven does not love poetry.",
          "Heaven watches musicals."
        ],
        "rules": "If Heaven either loves poetry or watches musicals (but not both), then she reads romance novels.",
        "conclusion": "Heaven reads romance novels."
      },
      {
        "facts": [
          "Heaven reads romance novels."
        ],
        "rules": "For Heaven, either she reads romance novels or she enjoys comedies, but not both.",
        "conclusion": "Heaven does not enjoy comedies."
      },
      {
        "facts": [
          "Heaven does not enjoy comedies."
        ],
        "rules": "For all humans, if they enjoy comedies, then they laugh frequently.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬love_poetry(Heaven)",
          "watch_musicals(Heaven)"
        ],
        "rules": "(love_poetry(Heaven) ⊕ watch_musicals(Heaven)) → read_romance(Heaven)",
        "conclusion": "read_romance(Heaven)"
      },
      {
        "facts": [
          "read_romance(Heaven)"
        ],
        "rules": "read_romance(Heaven) ⊕ enjoy_comedies(Heaven)",
        "conclusion": "¬enjoy_comedies(Heaven)"
      },
      {
        "facts": [
          "¬enjoy_comedies(Heaven)"
        ],
        "rules": "∀x (enjoy_comedies(x) → laugh_frequently(x))",
        "conclusion": null
      }
    ],
    "conclusion": "Heaven does not laugh frequently.",
    "conclusion_fol": "¬laugh_frequently(Heaven)",
    "answer": "Uncertain",
    "context": [
      "Heaven does not love poetry.",
      "Heaven watches musicals.",
      "If Heaven either loves poetry or watches musicals (but not both), then she reads romance novels.",
      "For Heaven, either she reads romance novels or she enjoys comedies, but not both.",
      "For all humans, if they enjoy comedies, then they laugh frequently."
    ],
    "context_fol": [
      "¬love_poetry(Heaven)",
      "watch_musicals(Heaven)",
      "(love_poetry(Heaven) ⊕ watch_musicals(Heaven)) → read_romance(Heaven)",
      "read_romance(Heaven) ⊕ enjoy_comedies(Heaven)",
      "∀x (enjoy_comedies(x) → laugh_frequently(x))"
    ],
    "background_story": "Heaven was the class clown, always ready with a witty remark or a sarcastic snicker to lighten the mood. Her sharp tongue and quick wit could cut down even the most boring lesson, making her the most popular girl in school. But Heaven's snicker was not just a defense mechanism; it was also a way to hide her own vulnerabilities. Despite her tough exterior, she had a soft spot for romantic comedies and was a secret fan of sappy love songs. One day, while watching a cheesy rom-com, Heaven let out a snicker so loud that it caught the attention of her crush, Jake. To her surprise, he joined in, and they spent the rest of the movie laughing and snickering together, marking the beginning of a beautiful friendship.",
    "name": "Heaven",
    "keyword": "snicker",
    "subject_category": "human"
  },
  {
    "facts": [
      "Bailey does not thrive in shade.",
      "Bailey has a strong stem.",
      "Bailey retains water."
    ],
    "facts_fol": [
      "¬thrives_in_shade(Bailey)",
      "strong_stem(Bailey)",
      "retain_water(Bailey)"
    ],
    "rules": [
      "If Bailey has efficient photosynthesis, then it either exhibits rapid growth or has strong air purification capabilities, but not both.",
      "Bailey either produces vibrant flowers or exhibits rapid growth, but not both.",
      "Bailey either has deep roots or produces vibrant flowers, but not both.",
      "Either Bailey thrives in shade or it has efficient photosynthesis, but not both.",
      "If Bailey has a strong stem, then it has deep roots and retains water."
    ],
    "rules_fol": [
      "efficient_photosynthesis(Bailey) → (rapid_growth(Bailey) ⊕ air_purification(Bailey))",
      "produces_vibrant_flowers(Bailey) ⊕ rapid_growth(Bailey)",
      "has_deep_roots(Bailey) ⊕ produces_vibrant_flowers(Bailey)",
      "thrives_in_shade(Bailey) ⊕ efficient_photosynthesis(Bailey)",
      "strong_stem(Bailey) → (has_deep_roots(Bailey) ∧ retain_water(Bailey))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Any plant that gets enough light or has nutrient-rich soil can exhibit rapid growth.",
      "If Bailey is a tropical plant, then it produces vibrant flowers.",
      "All tropical plants that are adaptable have efficient photosynthesis.",
      "If Bailey absorbs nutrients, then it either has deep roots or develops extensive leaves."
    ],
    "distracting_rules_fol": [
      "∀x ((gets_enough_light(x) ∨ has_nutrient_rich_soil(x)) → rapid_growth(x))",
      "is_tropical(Bailey) → produces_vibrant_flowers(Bailey)",
      "∀x (tropical(x) → (adaptable(x) ∧ efficient_photosynthesis(x)))",
      "absorbs_nutrients(Bailey) → (has_deep_roots(Bailey) ∨ develops_extensive_leaves(Bailey))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Bailey has a strong stem.",
          "Bailey retains water."
        ],
        "rules": "If Bailey has a strong stem, then it has deep roots and retains water.",
        "conclusion": "Bailey has deep roots."
      },
      {
        "facts": [
          "Bailey does not thrive in shade."
        ],
        "rules": "Either Bailey thrives in shade or it has efficient photosynthesis, but not both.",
        "conclusion": "Bailey has efficient photosynthesis."
      },
      {
        "facts": [
          "Bailey has deep roots."
        ],
        "rules": "Bailey either has deep roots or produces vibrant flowers, but not both.",
        "conclusion": "Bailey does not produce vibrant flowers."
      },
      {
        "facts": [
          "Bailey does not produce vibrant flowers."
        ],
        "rules": "Bailey either produces vibrant flowers or exhibits rapid growth, but not both.",
        "conclusion": "Bailey exhibits rapid growth."
      },
      {
        "facts": [
          "Bailey has efficient photosynthesis.",
          "Bailey exhibits rapid growth."
        ],
        "rules": "If Bailey has efficient photosynthesis, then it either exhibits rapid growth or has strong air purification capabilities, but not both.",
        "conclusion": "Bailey has strong air purification capabilities."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "strong_stem(Bailey)",
          "retain_water(Bailey)"
        ],
        "rules": "strong_stem(Bailey) → (has_deep_roots(Bailey) ∧ retain_water(Bailey))",
        "conclusion": "has_deep_roots(Bailey)"
      },
      {
        "facts": [
          "¬thrives_in_shade(Bailey)"
        ],
        "rules": "thrives_in_shade(Bailey) ⊕ efficient_photosynthesis(Bailey)",
        "conclusion": "efficient_photosynthesis(Bailey)"
      },
      {
        "facts": [
          "has_deep_roots(Bailey)"
        ],
        "rules": "has_deep_roots(Bailey) ⊕ produces_vibrant_flowers(Bailey)",
        "conclusion": "¬produces_vibrant_flowers(Bailey)"
      },
      {
        "facts": [
          "¬produces_vibrant_flowers(Bailey)"
        ],
        "rules": "produces_vibrant_flowers(Bailey) ⊕ rapid_growth(Bailey)",
        "conclusion": "rapid_growth(Bailey)"
      },
      {
        "facts": [
          "efficient_photosynthesis(Bailey)",
          "rapid_growth(Bailey)"
        ],
        "rules": "efficient_photosynthesis(Bailey) → (rapid_growth(Bailey) ⊕ air_purification(Bailey))",
        "conclusion": "air_purification(Bailey)"
      }
    ],
    "conclusion": "Bailey has strong air purification capabilities.",
    "conclusion_fol": "air_purification(Bailey)",
    "answer": "False",
    "context": [
      "Bailey has a strong stem.",
      "Bailey retains water.",
      "If Bailey has a strong stem, then it has deep roots and retains water.",
      "Bailey does not thrive in shade.",
      "Either Bailey thrives in shade or it has efficient photosynthesis, but not both.",
      "Bailey either has deep roots or produces vibrant flowers, but not both.",
      "Bailey either produces vibrant flowers or exhibits rapid growth, but not both.",
      "If Bailey has efficient photosynthesis, then it either exhibits rapid growth or has strong air purification capabilities, but not both."
    ],
    "context_fol": [
      "strong_stem(Bailey)",
      "retain_water(Bailey)",
      "strong_stem(Bailey) → (has_deep_roots(Bailey) ∧ retain_water(Bailey))",
      "¬thrives_in_shade(Bailey)",
      "thrives_in_shade(Bailey) ⊕ efficient_photosynthesis(Bailey)",
      "has_deep_roots(Bailey) ⊕ produces_vibrant_flowers(Bailey)",
      "produces_vibrant_flowers(Bailey) ⊕ rapid_growth(Bailey)",
      "efficient_photosynthesis(Bailey) → (rapid_growth(Bailey) ⊕ air_purification(Bailey))"
    ],
    "background_story": "Bailey was a rare and extraordinary species of plant discovered deep in the Amazon rainforest. This unusual plant had evolved to thrive in the dappled light of the forest floor, where most plants would struggle to survive. Bailey's secret to success lay in its exceptionally efficient photosynthetic process, allowing it to harness even the faintest sunlight and convert it into energy at an incredible rate. As a result, Bailey grew at an astonishing pace, its leaves a vibrant green and its flowers a kaleidoscope of colors. Scientists were amazed by Bailey's ability to purify the air and produce oxygen at a rate far surpassing that of ordinary plants, earning it the nickname 'the lungs of the forest'. Bailey's remarkable photosynthetic abilities made it a wonder of the botanical world.",
    "name": "Bailey",
    "keyword": "photosynthetic",
    "subject_category": "plant"
  },
  {
    "facts": [
      "Catalina works in a restaurant.",
      "Catalina does not eat out.",
      "Catalina enjoys cooking.",
      "Catalina does not order takeout."
    ],
    "facts_fol": [
      "works_in_restaurant(Catalina)",
      "¬eats_out(Catalina)",
      "enjoys_cooking(Catalina)",
      "¬orders_takeout(Catalina)"
    ],
    "rules": [
      "Catalina eats out or reads her own blog.",
      "Catalina either cooks at home or cares about food reviews, but not both.",
      "If a person enjoys cooking and buys groceries, then they cook at home.",
      "Catalina either orders takeout or buys groceries."
    ],
    "rules_fol": [
      "eats_out(Catalina) ∨ reads_Catalinas_blog(Catalina)",
      "cooks_at_home(Catalina) ⊕ cares_about_food_reviews(Catalina)",
      "∀x ((enjoys_cooking(x) ∧ buys_groceries(x)) → cooks_at_home(x))",
      "orders_takeout(Catalina) ∨ buys_groceries(Catalina)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If a chef follows food trends and values honest opinions, then they read Catalina's blog.",
      "Everyone who follows food trends either appreciates culinary art or cares about food reviews.",
      "If Catalina likes recipes and owns appliances, then she cooks at home.",
      "If Catalina either plans meals or makes lists (but not both), then she buys groceries."
    ],
    "distracting_rules_fol": [
      "(follows_food_trends(Catalina) ∧ values_honest_opinions(Catalina)) → reads_Catalinas_blog(Catalina)",
      "∀x (follows_food_trends(x) → (appreciates_culinary_art(x) ∨ cares_about_food_reviews(x)))",
      "(likes_recipes(Catalina) ∧ owns_appliances(Catalina)) → cooks_at_home(Catalina)",
      "(plans_meals(Catalina) ⊕ makes_lists(Catalina)) → buys_groceries(Catalina)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Catalina does not order takeout."
        ],
        "rules": "Catalina either orders takeout or buys groceries.",
        "conclusion": "Catalina buys groceries."
      },
      {
        "facts": [
          "Catalina enjoys cooking.",
          "Catalina buys groceries."
        ],
        "rules": "If a person enjoys cooking and buys groceries, then they cook at home.",
        "conclusion": "Catalina cooks at home."
      },
      {
        "facts": [
          "Catalina cooks at home."
        ],
        "rules": "Catalina either cooks at home or cares about food reviews, but not both.",
        "conclusion": "Catalina does not care about food reviews."
      },
      {
        "facts": [
          "Catalina does not eat out."
        ],
        "rules": "Catalina eats out or reads her own blog.",
        "conclusion": "Catalina reads Catalina's blog."
      },
      {
        "facts": [
          "Catalina reads Catalina's blog.",
          "Catalina works in a restaurant.",
          "Catalina does not care about food reviews."
        ],
        "rules": null,
        "conclusion": "If a chef reads Catalina's blog or works in a restaurant, then they care about food reviews."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬orders_takeout(Catalina)"
        ],
        "rules": "orders_takeout(Catalina) ∨ buys_groceries(Catalina)",
        "conclusion": "buys_groceries(Catalina)"
      },
      {
        "facts": [
          "enjoys_cooking(Catalina)",
          "buys_groceries(Catalina)"
        ],
        "rules": "∀x ((enjoys_cooking(x) ∧ buys_groceries(x)) → cooks_at_home(x))",
        "conclusion": "cooks_at_home(Catalina)"
      },
      {
        "facts": [
          "cooks_at_home(Catalina)"
        ],
        "rules": "cooks_at_home(Catalina) ⊕ cares_about_food_reviews(Catalina)",
        "conclusion": "¬cares_about_food_reviews(Catalina)"
      },
      {
        "facts": [
          "¬eats_out(Catalina)"
        ],
        "rules": "eats_out(Catalina) ∨ reads_Catalinas_blog(Catalina)",
        "conclusion": "reads_Catalinas_blog(Catalina)"
      },
      {
        "facts": [
          "reads_Catalinas_blog(Catalina)",
          "works_in_restaurant(Catalina)",
          "¬cares_about_food_reviews(Catalina)"
        ],
        "rules": null,
        "conclusion": "(reads_Catalinas_blog(Catalina) ∨ works_in_restaurant(Catalina)) → cares_about_food_reviews(Catalina)"
      }
    ],
    "conclusion": "If a chef reads Catalina's blog or works in a restaurant, then they care about food reviews.",
    "conclusion_fol": "(reads_Catalinas_blog(Catalina) ∨ works_in_restaurant(Catalina)) → cares_about_food_reviews(Catalina)",
    "answer": "False",
    "context": [
      "Catalina does not order takeout.",
      "Catalina either orders takeout or buys groceries.",
      "Catalina enjoys cooking.",
      "If a person enjoys cooking and buys groceries, then they cook at home.",
      "Catalina either cooks at home or cares about food reviews, but not both.",
      "Catalina does not eat out.",
      "Catalina eats out or reads her own blog.",
      "Catalina works in a restaurant."
    ],
    "context_fol": [
      "¬orders_takeout(Catalina)",
      "orders_takeout(Catalina) ∨ buys_groceries(Catalina)",
      "enjoys_cooking(Catalina)",
      "∀x ((enjoys_cooking(x) ∧ buys_groceries(x)) → cooks_at_home(x))",
      "cooks_at_home(Catalina) ⊕ cares_about_food_reviews(Catalina)",
      "¬eats_out(Catalina)",
      "eats_out(Catalina) ∨ reads_Catalinas_blog(Catalina)",
      "works_in_restaurant(Catalina)"
    ],
    "background_story": "Catalina was a mordacious food critic, known for her biting reviews that could make or break a restaurant. Her sharp tongue and quick wit could savage even the most confident of chefs, leaving them questioning their life choices. Despite her fearsome reputation, Catalina had a soft spot for innovative cuisine and was always on the lookout for the next big thing. Her blog, 'The Mordacious Morsel', was a must-read for foodies and restaurateurs alike, with her scathing critiques and rare praise highly anticipated each week. With a single sentence, Catalina could destroy a restaurant's reputation or catapult it to stardom, earning her the respect and fear of the culinary world.",
    "name": "Catalina",
    "keyword": "mordacious",
    "subject_category": "person"
  },
  {
    "facts": [
      "Pedro is an investigative journalist.",
      "Pedro writes a blog.",
      "Pedro is a whistleblower."
    ],
    "facts_fol": [
      "investigative_journalist(Pedro)",
      "writes_blog(Pedro)",
      "is_whistleblower(Pedro)"
    ],
    "rules": [
      "For all people, if someone is an investigative journalist, then they expose the truth and face risks.",
      "Anyone who has sources or seeks justice can expose the truth.",
      "A person either writes a blog or seeks justice, but not necessarily both.",
      "A person is either a whistleblower or has sources, but not necessarily both."
    ],
    "rules_fol": [
      "∀x (investigative_journalist(x) → (expose_truth(x) ∧ face_risks(x)))",
      "∀x ((has_sources(x) ∨ seeks_justice(x)) → expose_truth(x))",
      "∀x (writes_blog(x) ⊕ seeks_justice(x))",
      "∀x (is_whistleblower(x) ⊕ has_sources(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Pedro seeks transparency, then he exposes the truth and challenges authority.",
      "Anyone who fights corruption seeks justice.",
      "Anyone who uncovers corruption either gathers evidence or has sources."
    ],
    "distracting_rules_fol": [
      "seek_transparency(Pedro) → (expose_truth(Pedro) ∧ challenge_authority(Pedro))",
      "∀x (fights_corruption(x) → seeks_justice(x))",
      "∀x (uncover_corruption(x) → (gather_evidence(x) ∨ has_sources(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Pedro is a whistleblower."
        ],
        "rules": "A person is either a whistleblower or has sources, but not necessarily both.",
        "conclusion": "Pedro does not have sources."
      },
      {
        "facts": [
          "Pedro writes a blog."
        ],
        "rules": "A person either writes a blog or seeks justice, but not necessarily both.",
        "conclusion": "Pedro does not seek justice."
      },
      {
        "facts": [
          "Pedro does not have sources.",
          "Pedro does not seek justice."
        ],
        "rules": "Anyone who has sources or seeks justice can expose the truth.",
        "conclusion": null
      },
      {
        "facts": [
          "Pedro is an investigative journalist."
        ],
        "rules": "For all people, if someone is an investigative journalist, then they expose the truth and face risks.",
        "conclusion": "Pedro faces risks."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "is_whistleblower(Pedro)"
        ],
        "rules": "∀x (is_whistleblower(x) ⊕ has_sources(x))",
        "conclusion": "¬has_sources(Pedro)"
      },
      {
        "facts": [
          "writes_blog(Pedro)"
        ],
        "rules": "∀x (writes_blog(x) ⊕ seeks_justice(x))",
        "conclusion": "¬seeks_justice(Pedro)"
      },
      {
        "facts": [
          "¬has_sources(Pedro)",
          "¬seeks_justice(Pedro)"
        ],
        "rules": "∀x ((has_sources(x) ∨ seeks_justice(x)) → expose_truth(x))",
        "conclusion": null
      },
      {
        "facts": [
          "investigative_journalist(Pedro)"
        ],
        "rules": "∀x (investigative_journalist(x) → (expose_truth(x) ∧ face_risks(x)))",
        "conclusion": "face_risks(Pedro)"
      }
    ],
    "conclusion": "Pedro faces risks.",
    "conclusion_fol": "face_risks(Pedro)",
    "answer": "True",
    "context": [
      "Pedro is a whistleblower.",
      "A person is either a whistleblower or has sources, but not necessarily both.",
      "Pedro writes a blog.",
      "A person either writes a blog or seeks justice, but not necessarily both.",
      "Anyone who has sources or seeks justice can expose the truth.",
      "Pedro is an investigative journalist.",
      "For all people, if someone is an investigative journalist, then they expose the truth and face risks."
    ],
    "context_fol": [
      "is_whistleblower(Pedro)",
      "∀x (is_whistleblower(x) ⊕ has_sources(x))",
      "writes_blog(Pedro)",
      "∀x (writes_blog(x) ⊕ seeks_justice(x))",
      "∀x ((has_sources(x) ∨ seeks_justice(x)) → expose_truth(x))",
      "investigative_journalist(Pedro)",
      "∀x (investigative_journalist(x) → (expose_truth(x) ∧ face_risks(x)))"
    ],
    "background_story": "Pedro was a brilliant yet troubled journalist known for his ability to uncover sensitive information. His knack for getting scoops earned him the nickname 'the leaker' among his peers. Pedro had a network of confidential sources within the government and corporate world, who would often feed him classified documents and tips. He used this information to expose corruption and bring about justice, but his methods were often questionable. Pedro's blog became a go-to source for whistleblowers and those seeking to reveal the truth, but it also made him a target for powerful individuals and organizations seeking to silence him. Despite the risks, Pedro continued to leak sensitive information, believing that the public's right to know outweighed the personal costs.",
    "name": "Pedro",
    "keyword": "leaker",
    "subject_category": "person"
  },
  {
    "facts": [
      "Roberto studies rocks.",
      "Roberto does not love the outdoors.",
      "Roberto enjoys adventure.",
      "Roberto climbs hills."
    ],
    "facts_fol": [
      "studies_rocks(Roberto)",
      "¬loves_outdoors(Roberto)",
      "enjoys_adventure(Roberto)",
      "climb_hills(Roberto)"
    ],
    "rules": [
      "For all humans, if someone is a geologist, then they either explore nature or make new discoveries (or both).",
      "Roberto either hikes mountains or explores nature.",
      "If Roberto studies rocks and loves the outdoors, then he is a geologist.",
      "If Roberto enjoys adventure, then he either hikes mountains or climbs hills."
    ],
    "rules_fol": [
      "∀x (geologist(x) → (explore_nature(x) ∨ make_new_discoveries(x)))",
      "hike_mountains(Roberto) ∨ explore_nature(Roberto)",
      "(studies_rocks(Roberto) ∧ loves_outdoors(Roberto)) → geologist(Roberto)",
      "enjoys_adventure(Roberto) → (hike_mountains(Roberto) ⊕ climb_hills(Roberto))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Roberto learns science or explores nature.",
      "If Roberto either maps terrain or collects samples (but not both), then he is a geologist.",
      "If Roberto appreciates landscapes, then he either hikes mountains or collects minerals."
    ],
    "distracting_rules_fol": [
      "learns_science(Roberto) ∨ explore_nature(Roberto)",
      "(maps_terrain(Roberto) ⊕ collects_samples(Roberto)) → geologist(Roberto)",
      "appreciate_landscapes(Roberto) → (hike_mountains(Roberto) ∨ collect_minerals(Roberto))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Roberto enjoys adventure.",
          "Roberto climbs hills."
        ],
        "rules": "If Roberto enjoys adventure, then he either hikes mountains or climbs hills.",
        "conclusion": "Roberto does not hike mountains."
      },
      {
        "facts": [
          "Roberto studies rocks.",
          "Roberto does not love the outdoors."
        ],
        "rules": "If Roberto studies rocks and loves the outdoors, then he is a geologist.",
        "conclusion": null
      },
      {
        "facts": [
          "Roberto does not hike mountains."
        ],
        "rules": "Roberto either hikes mountains or explores nature.",
        "conclusion": "Roberto explores nature."
      },
      {
        "facts": [
          "Roberto explores nature."
        ],
        "rules": "For all humans, if someone is a geologist, then they either explore nature or make new discoveries (or both).",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "enjoys_adventure(Roberto)",
          "climb_hills(Roberto)"
        ],
        "rules": "enjoys_adventure(Roberto) → (hike_mountains(Roberto) ⊕ climb_hills(Roberto))",
        "conclusion": "¬hike_mountains(Roberto)"
      },
      {
        "facts": [
          "studies_rocks(Roberto)",
          "¬loves_outdoors(Roberto)"
        ],
        "rules": "(studies_rocks(Roberto) ∧ loves_outdoors(Roberto)) → geologist(Roberto)",
        "conclusion": null
      },
      {
        "facts": [
          "¬hike_mountains(Roberto)"
        ],
        "rules": "hike_mountains(Roberto) ∨ explore_nature(Roberto)",
        "conclusion": "explore_nature(Roberto)"
      },
      {
        "facts": [
          "explore_nature(Roberto)"
        ],
        "rules": "∀x (geologist(x) → (explore_nature(x) ∨ make_new_discoveries(x)))",
        "conclusion": null
      }
    ],
    "conclusion": "Roberto does not make new discoveries.",
    "conclusion_fol": "¬make_new_discoveries(Roberto)",
    "answer": "Uncertain",
    "context": [
      "Roberto enjoys adventure.",
      "Roberto climbs hills.",
      "If Roberto enjoys adventure, then he either hikes mountains or climbs hills.",
      "Roberto studies rocks.",
      "Roberto does not love the outdoors.",
      "If Roberto studies rocks and loves the outdoors, then he is a geologist.",
      "Roberto either hikes mountains or explores nature.",
      "For all humans, if someone is a geologist, then they either explore nature or make new discoveries (or both)."
    ],
    "context_fol": [
      "enjoys_adventure(Roberto)",
      "climb_hills(Roberto)",
      "enjoys_adventure(Roberto) → (hike_mountains(Roberto) ⊕ climb_hills(Roberto))",
      "studies_rocks(Roberto)",
      "¬loves_outdoors(Roberto)",
      "(studies_rocks(Roberto) ∧ loves_outdoors(Roberto)) → geologist(Roberto)",
      "hike_mountains(Roberto) ∨ explore_nature(Roberto)",
      "∀x (geologist(x) → (explore_nature(x) ∨ make_new_discoveries(x)))"
    ],
    "background_story": "Roberto, an avid hiker, had always been drawn to the rugged beauty of the Cairngorms National Park in Scotland. As a geologist, he was fascinated by the ancient rocks and unique landforms that shaped this wilderness. Every year, Roberto would return to the Cairngorms, exploring its vast expanses and marveling at the diversity of flora and fauna. One fateful expedition led him to discover a rare mineral deposit, hidden deep within the mountains. Roberto's findings sparked a new wave of scientific interest in the area, earning him recognition within the geological community. Though his travels took him to distant lands, Roberto's heart remained tied to the Cairngorms, a place where his passion for nature and discovery knew no bounds.",
    "name": "Roberto",
    "keyword": "cairngorm",
    "subject_category": "human"
  },
  {
    "facts": [
      "Ember is not adventurous.",
      "Ember takes risks."
    ],
    "facts_fol": [
      "¬adventurous(Ember)",
      "takes_risks(Ember)"
    ],
    "rules": [
      "For all miners, if a miner is experienced, then they are knowledgeable and respected.",
      "Ember is either a skilled digger or experienced.",
      "If Ember is adventurous, then she is respected and finds rare gems.",
      "Ember is either a skilled digger or someone who takes risks, but not both."
    ],
    "rules_fol": [
      "∀x (experienced(x) → (knowledgeable(x) ∧ respected(x)))",
      "skilled_digger(Ember) ∨ experienced(Ember)",
      "adventurous(Ember) → (respected(Ember) ∧ finds_rare_gems(Ember))",
      "takes_risks(Ember) ⊕ skilled_digger(Ember)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "All fearless miners are experienced and determined.",
      "Every dedicated miner is either respected or an expert prospector (or both).",
      "If Ember is an expert miner, then she is either a skilled digger or a seasoned professional, but not both."
    ],
    "distracting_rules_fol": [
      "∀x (fearless(x) → (experienced(x) ∧ determined(x)))",
      "∀x (dedicated_miner(x) → (respected(x) ∨ expert_prospector(x)))",
      "expert_miner(Ember) → (skilled_digger(Ember) ⊕ seasoned_pro(Ember))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Ember takes risks."
        ],
        "rules": "Ember is either a skilled digger or someone who takes risks, but not both.",
        "conclusion": "Ember is not a skilled digger."
      },
      {
        "facts": [
          "Ember is not adventurous."
        ],
        "rules": "If Ember is adventurous, then she is respected and finds rare gems.",
        "conclusion": null
      },
      {
        "facts": [
          "Ember is not a skilled digger."
        ],
        "rules": "Ember is either a skilled digger or experienced.",
        "conclusion": "Ember is experienced."
      },
      {
        "facts": [
          "Ember is experienced."
        ],
        "rules": "For all miners, if a miner is experienced, then they are knowledgeable and respected.",
        "conclusion": "Ember is knowledgeable."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "takes_risks(Ember)"
        ],
        "rules": "takes_risks(Ember) ⊕ skilled_digger(Ember)",
        "conclusion": "¬skilled_digger(Ember)"
      },
      {
        "facts": [
          "¬adventurous(Ember)"
        ],
        "rules": "adventurous(Ember) → (respected(Ember) ∧ finds_rare_gems(Ember))",
        "conclusion": null
      },
      {
        "facts": [
          "¬skilled_digger(Ember)"
        ],
        "rules": "skilled_digger(Ember) ∨ experienced(Ember)",
        "conclusion": "experienced(Ember)"
      },
      {
        "facts": [
          "experienced(Ember)"
        ],
        "rules": "∀x (experienced(x) → (knowledgeable(x) ∧ respected(x)))",
        "conclusion": "knowledgeable(Ember)"
      }
    ],
    "conclusion": "Ember is knowledgeable.",
    "conclusion_fol": "knowledgeable(Ember)",
    "answer": "True",
    "context": [
      "Ember takes risks.",
      "Ember is either a skilled digger or someone who takes risks, but not both.",
      "Ember is not adventurous.",
      "If Ember is adventurous, then she is respected and finds rare gems.",
      "Ember is either a skilled digger or experienced.",
      "For all miners, if a miner is experienced, then they are knowledgeable and respected."
    ],
    "context_fol": [
      "takes_risks(Ember)",
      "takes_risks(Ember) ⊕ skilled_digger(Ember)",
      "¬adventurous(Ember)",
      "adventurous(Ember) → (respected(Ember) ∧ finds_rare_gems(Ember))",
      "skilled_digger(Ember) ∨ experienced(Ember)",
      "∀x (experienced(x) → (knowledgeable(x) ∧ respected(x)))"
    ],
    "background_story": "Ember was a skilled miner who spent most of her life digging for precious gems and minerals. She had a particular fascination with chrysotile, a type of asbestos that was highly valued for its fire-resistant properties. Ember's obsession with chrysotile led her to explore the depths of abandoned mines, searching for hidden veins of the mineral. Her knowledge and expertise eventually earned her a reputation as one of the leading chrysotile hunters in the industry. Despite the dangers associated with mining, Ember's passion for chrysotile drove her to continue her quest, always seeking the next big discovery. Her nickname 'Chrysotile Queen' was whispered in awe by fellow miners, who respected her bravery and dedication to uncovering the secrets of the earth.",
    "name": "Ember",
    "keyword": "chrysotile",
    "subject_category": "miner"
  },
  {
    "facts": [
      "Tinsley restores historic landmarks.",
      "Tinsley creates innovative spaces."
    ],
    "facts_fol": [
      "restore_historic_landmarks(Tinsley)",
      "creates_innovative_spaces(Tinsley)"
    ],
    "rules": [
      "If Tinsley admires Pugin, then he either designs Gothic buildings or restores historic landmarks, but not both.",
      "Tinsley either studies history or admires Pugin.",
      "Tinsley either creates innovative spaces or studies history, but not both."
    ],
    "rules_fol": [
      "admire_Pugin(Tinsley) → (design_gothic_buildings(Tinsley) ⊕ restore_historic_landmarks(Tinsley))",
      "study_history(Tinsley) ∨ admire_Pugin(Tinsley)",
      "creates_innovative_spaces(Tinsley) ⊕ study_history(Tinsley)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Tinsley values tradition, then he either focuses on details or admires Pugin (or both).",
      "All architects who respect tradition study history."
    ],
    "distracting_rules_fol": [
      "value_tradition(Tinsley) → (focus_on_details(Tinsley) ∨ admire_Pugin(Tinsley))",
      "∀x (respects_tradition(x) → study_history(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Tinsley creates innovative spaces."
        ],
        "rules": "Tinsley either creates innovative spaces or studies history, but not both.",
        "conclusion": "Tinsley does not study history."
      },
      {
        "facts": [
          "Tinsley does not study history."
        ],
        "rules": "Tinsley either studies history or admires Pugin.",
        "conclusion": "Tinsley admires Pugin."
      },
      {
        "facts": [
          "Tinsley admires Pugin.",
          "Tinsley restores historic landmarks."
        ],
        "rules": "If Tinsley admires Pugin, then he either designs Gothic buildings or restores historic landmarks, but not both.",
        "conclusion": "Tinsley designs Gothic buildings."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "creates_innovative_spaces(Tinsley)"
        ],
        "rules": "creates_innovative_spaces(Tinsley) ⊕ study_history(Tinsley)",
        "conclusion": "¬study_history(Tinsley)"
      },
      {
        "facts": [
          "¬study_history(Tinsley)"
        ],
        "rules": "study_history(Tinsley) ∨ admire_Pugin(Tinsley)",
        "conclusion": "admire_Pugin(Tinsley)"
      },
      {
        "facts": [
          "admire_Pugin(Tinsley)",
          "restore_historic_landmarks(Tinsley)"
        ],
        "rules": "admire_Pugin(Tinsley) → (design_gothic_buildings(Tinsley) ⊕ restore_historic_landmarks(Tinsley))",
        "conclusion": "design_gothic_buildings(Tinsley)"
      }
    ],
    "conclusion": "Tinsley designs Gothic buildings.",
    "conclusion_fol": "design_gothic_buildings(Tinsley)",
    "answer": "False",
    "context": [
      "Tinsley creates innovative spaces.",
      "Tinsley either creates innovative spaces or studies history, but not both.",
      "Tinsley either studies history or admires Pugin.",
      "Tinsley restores historic landmarks.",
      "If Tinsley admires Pugin, then he either designs Gothic buildings or restores historic landmarks, but not both."
    ],
    "context_fol": [
      "creates_innovative_spaces(Tinsley)",
      "creates_innovative_spaces(Tinsley) ⊕ study_history(Tinsley)",
      "study_history(Tinsley) ∨ admire_Pugin(Tinsley)",
      "restore_historic_landmarks(Tinsley)",
      "admire_Pugin(Tinsley) → (design_gothic_buildings(Tinsley) ⊕ restore_historic_landmarks(Tinsley))"
    ],
    "background_story": "Tinsley was a brilliant and eccentric architect who idolized the works of Augustus Pugin, a renowned Gothic Revival architect. Inspired by Pugin's attention to detail and commitment to historical accuracy, Tinsley dedicated his career to restoring and designing buildings in the Pugin style. His most notable project was the restoration of a 19th-century cathedral, where he meticulously recreated the intricate stone carvings, stained glass windows, and ornate woodwork that Pugin was famous for. Tinsley's passion for Pugin's aesthetic was not limited to his professional work; he even decorated his own home with Pugin-inspired furnishings and decor. Through his work, Tinsley aimed to keep Pugin's legacy alive, introducing the beauty of Gothic Revival architecture to a new generation.",
    "name": "Tinsley",
    "keyword": "pugin",
    "subject_category": "architect"
  },
  {
    "facts": [
      "Andi identifies rare species.",
      "Andi explores forests.",
      "Andi does not discover new species."
    ],
    "facts_fol": [
      "identifies_rare_species(Andi)",
      "explores_forests(Andi)",
      "¬discovers_new_species(Andi)"
    ],
    "rules": [
      "Andi either specializes in Betulaceae or studies other plant families, but not both.",
      "If Andi researches trees, then she is either an expert in medical plants or specializes in Betulaceae.",
      "A botanist either identifies rare species or is an expert in medical plants, but not necessarily both.",
      "Every botanist who explores forests either discovers new species or researches trees."
    ],
    "rules_fol": [
      "specializes_in_Betulaceae(Andi) ⊕ studies_other_plant_families(Andi)",
      "researches_trees(Andi) → (experts_in_medical_plants(Andi) ∨ specializes_in_Betulaceae(Andi))",
      "∀x (identifies_rare_species(x) ⊕ experts_in_medical_plants(x))",
      "∀x (explores_forests(x) → (discovers_new_species(x) ∨ researches_trees(x)))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Andi is a dedicated botanist, then she either specializes in Betulaceae or focuses on grasses, but not both.",
      "If Andi understands ecosystems and classifies plant samples, then she is an expert in medical plants.",
      "All botanists who either examine bark or analyze leaves (but not both) research trees."
    ],
    "distracting_rules_fol": [
      "is_dedicated(Andi) → (specializes_in_Betulaceae(Andi) ⊕ focuses_on_grasses(Andi))",
      "understands_ecosystems(Andi) → (classifies_plant_samples(Andi) ∧ experts_in_medical_plants(Andi))",
      "∀x ((examines_bark(x) ⊕ analyzes_leaves(x)) → researches_trees(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Andi explores forests.",
          "Andi does not discover new species."
        ],
        "rules": "Every botanist who explores forests either discovers new species or researches trees.",
        "conclusion": "Andi researches trees."
      },
      {
        "facts": [
          "Andi identifies rare species."
        ],
        "rules": "A botanist either identifies rare species or is an expert in medical plants, but not necessarily both.",
        "conclusion": "Andi is not an expert in medical plants."
      },
      {
        "facts": [
          "Andi researches trees.",
          "Andi is not an expert in medical plants."
        ],
        "rules": "If Andi researches trees, then she is either an expert in medical plants or specializes in Betulaceae.",
        "conclusion": "Andi specializes in Betulaceae."
      },
      {
        "facts": [
          "Andi specializes in Betulaceae."
        ],
        "rules": "Andi either specializes in Betulaceae or studies other plant families, but not both.",
        "conclusion": "Andi does not study other plant families."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "explores_forests(Andi)",
          "¬discovers_new_species(Andi)"
        ],
        "rules": "∀x (explores_forests(x) → (discovers_new_species(x) ∨ researches_trees(x)))",
        "conclusion": "researches_trees(Andi)"
      },
      {
        "facts": [
          "identifies_rare_species(Andi)"
        ],
        "rules": "∀x (identifies_rare_species(x) ⊕ experts_in_medical_plants(x))",
        "conclusion": "¬experts_in_medical_plants(Andi)"
      },
      {
        "facts": [
          "researches_trees(Andi)",
          "¬experts_in_medical_plants(Andi)"
        ],
        "rules": "researches_trees(Andi) → (experts_in_medical_plants(Andi) ∨ specializes_in_Betulaceae(Andi))",
        "conclusion": "specializes_in_Betulaceae(Andi)"
      },
      {
        "facts": [
          "specializes_in_Betulaceae(Andi)"
        ],
        "rules": "specializes_in_Betulaceae(Andi) ⊕ studies_other_plant_families(Andi)",
        "conclusion": "¬studies_other_plant_families(Andi)"
      }
    ],
    "conclusion": "Andi does not study other plant families.",
    "conclusion_fol": "¬studies_other_plant_families(Andi)",
    "answer": "True",
    "context": [
      "Andi explores forests.",
      "Andi does not discover new species.",
      "Every botanist who explores forests either discovers new species or researches trees.",
      "Andi identifies rare species.",
      "A botanist either identifies rare species or is an expert in medical plants, but not necessarily both.",
      "If Andi researches trees, then she is either an expert in medical plants or specializes in Betulaceae.",
      "Andi either specializes in Betulaceae or studies other plant families, but not both."
    ],
    "context_fol": [
      "explores_forests(Andi)",
      "¬discovers_new_species(Andi)",
      "∀x (explores_forests(x) → (discovers_new_species(x) ∨ researches_trees(x)))",
      "identifies_rare_species(Andi)",
      "∀x (identifies_rare_species(x) ⊕ experts_in_medical_plants(x))",
      "researches_trees(Andi) → (experts_in_medical_plants(Andi) ∨ specializes_in_Betulaceae(Andi))",
      "specializes_in_Betulaceae(Andi) ⊕ studies_other_plant_families(Andi)"
    ],
    "background_story": "Andi was a renowned botanist with a passion for the Betulaceae family, which includes birch, alder, and hazel trees. Growing up near a dense forest, Andi spent countless hours exploring and learning about the diverse plant species. Her fascination with the Betulaceae family led her to pursue a career in botany, where she made significant contributions to the field. Andi's research focused on the medicinal properties of birch trees, particularly their bark, which contains betulin, a compound with anti-inflammatory properties. Her work took her to remote parts of the world, from the birch forests of Siberia to the hazel groves of Europe. Andi's dedication to the study and conservation of Betulaceae has earned her international recognition, and her findings have opened new avenues for the development of natural remedies.",
    "name": "Andi",
    "keyword": "betulaceae",
    "subject_category": "botanist"
  },
  {
    "facts": [
      "Phillip innovates techniques.",
      "Phillip perfects his craft.",
      "Phillip does not make beautiful pieces."
    ],
    "facts_fol": [
      "innovates_techniques(Phillip)",
      "perfects_craft(Phillip)",
      "¬makes_beautiful_pieces(Phillip)"
    ],
    "rules": [
      "For all artisans, if someone is skilled, then they are either creative or traditional in their work (or both).",
      "If an artisan innovates techniques and values heritage, then they are creative.",
      "If Phillip perfects his craft, then he either makes beautiful pieces or values heritage."
    ],
    "rules_fol": [
      "∀x (skilled(x) → (creative(x) ∨ traditional(x)))",
      "∀x ((innovates_techniques(x) ∧ values_heritage(x)) → creative(x))",
      "perfects_craft(Phillip) → (makes_beautiful_pieces(Phillip) ∨ values_heritage(Phillip))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Phillip is an experienced artisan, then he is either creative or meticulous in his work with copal, but not both.",
      "If Phillip is passionate, then he respects custom and values heritage."
    ],
    "distracting_rules_fol": [
      "experienced(Phillip) → (creative(Phillip) ⊕ meticulous(Phillip))",
      "passionate(Phillip) → (respects_custom(Phillip) ∧ values_heritage(Phillip))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Phillip perfects his craft.",
          "Phillip does not make beautiful pieces."
        ],
        "rules": "If Phillip perfects his craft, then he either makes beautiful pieces or values heritage.",
        "conclusion": "Phillip values heritage."
      },
      {
        "facts": [
          "Phillip innovates techniques.",
          "Phillip values heritage."
        ],
        "rules": "If an artisan innovates techniques and values heritage, then they are creative.",
        "conclusion": "Phillip is creative in his work with copal."
      },
      {
        "facts": [
          "Phillip is creative in his work with copal."
        ],
        "rules": "For all artisans, if someone is skilled, then they are either creative or traditional in their work (or both).",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "perfects_craft(Phillip)",
          "¬makes_beautiful_pieces(Phillip)"
        ],
        "rules": "perfects_craft(Phillip) → (makes_beautiful_pieces(Phillip) ∨ values_heritage(Phillip))",
        "conclusion": "values_heritage(Phillip)"
      },
      {
        "facts": [
          "innovates_techniques(Phillip)",
          "values_heritage(Phillip)"
        ],
        "rules": "∀x ((innovates_techniques(x) ∧ values_heritage(x)) → creative(x))",
        "conclusion": "creative(Phillip)"
      },
      {
        "facts": [
          "creative(Phillip)"
        ],
        "rules": "∀x (skilled(x) → (creative(x) ∨ traditional(x)))",
        "conclusion": null
      }
    ],
    "conclusion": "Phillip is traditional in his work with copal.",
    "conclusion_fol": "traditional(Phillip)",
    "answer": "Uncertain",
    "context": [
      "Phillip perfects his craft.",
      "Phillip does not make beautiful pieces.",
      "If Phillip perfects his craft, then he either makes beautiful pieces or values heritage.",
      "Phillip innovates techniques.",
      "If an artisan innovates techniques and values heritage, then they are creative.",
      "For all artisans, if someone is skilled, then they are either creative or traditional in their work (or both)."
    ],
    "context_fol": [
      "perfects_craft(Phillip)",
      "¬makes_beautiful_pieces(Phillip)",
      "perfects_craft(Phillip) → (makes_beautiful_pieces(Phillip) ∨ values_heritage(Phillip))",
      "innovates_techniques(Phillip)",
      "∀x ((innovates_techniques(x) ∧ values_heritage(x)) → creative(x))",
      "∀x (skilled(x) → (creative(x) ∨ traditional(x)))"
    ],
    "background_story": "Phillip was a skilled artisan known for his exquisite work with copal, a type of resin used in traditional crafts. Born in a small village in Mexico, he learned the art of working with copal from his grandfather, a master craftsman. Phillip spent years perfecting his technique, experimenting with different methods to extract and shape the resin into beautiful, intricate pieces. His work ranged from decorative figurines to functional items like bowls and jewelry. The villagers admired Phillip's dedication to preserving their cultural heritage through his craft. As his reputation grew, people from nearby towns would visit him to commission custom pieces, seeking to own a part of the tradition and beauty that copal embodied through Phillip's skilled hands.",
    "name": "Phillip",
    "keyword": "copal",
    "subject_category": "artisan"
  },
  {
    "facts": [
      "Mustafa is respected.",
      "Mustafa is not a seasoned diplomat.",
      "Mustafa is a leader.",
      "Mustafa does not mediate conflict.",
      "Mustafa is not experienced.",
      "Mustafa gives counsel."
    ],
    "facts_fol": [
      "respected(Mustafa)",
      "¬seasoned_diplomat(Mustafa)",
      "leader(Mustafa)",
      "¬mediate_conflict(Mustafa)",
      "¬experienced(Mustafa)",
      "give_counsel(Mustafa)"
    ],
    "rules": [
      "All seasoned diplomats build trust and offer advice.",
      "If Mustafa is a leader, then he either brokers peace or mediates conflict (but not both).",
      "If someone is experienced, then they build trust and give counsel."
    ],
    "rules_fol": [
      "∀x (seasoned_diplomat(x) → (build_trust(x) ∧ offer_advice(x)))",
      "leader(Mustafa) → (broker_peace(Mustafa) ⊕ mediate_conflict(Mustafa))",
      "∀x (experienced(x) → (build_trust(x) ∧ give_counsel(x)))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Mustafa knows history, then he speaks languages and offers advice.",
      "If Mustafa is knowledgeable and solves problems, then he brokers peace.",
      "If Mustafa either listens actively or shows empathy (but not both), then he builds trust."
    ],
    "distracting_rules_fol": [
      "know_history(Mustafa) → (speak_languages(Mustafa) ∧ offer_advice(Mustafa))",
      "knowledgeable(Mustafa) → (solve_problems(Mustafa) ∧ broker_peace(Mustafa))",
      "(listen_actively(Mustafa) ⊕ show_empathy(Mustafa)) → build_trust(Mustafa)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Mustafa is not experienced.",
          "Mustafa gives counsel."
        ],
        "rules": "If someone is experienced, then they build trust and give counsel.",
        "conclusion": null
      },
      {
        "facts": [
          "Mustafa is a leader.",
          "Mustafa does not mediate conflict."
        ],
        "rules": "If Mustafa is a leader, then he either brokers peace or mediates conflict (but not both).",
        "conclusion": "Mustafa brokers peace."
      },
      {
        "facts": [
          "Mustafa is not a seasoned diplomat."
        ],
        "rules": "All seasoned diplomats build trust and offer advice.",
        "conclusion": null
      },
      {
        "facts": [
          "Mustafa is respected.",
          "Mustafa brokers peace."
        ],
        "rules": null,
        "conclusion": "Mustafa is respected and either brokers peace or offers advice (or both)."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬experienced(Mustafa)",
          "give_counsel(Mustafa)"
        ],
        "rules": "∀x (experienced(x) → (build_trust(x) ∧ give_counsel(x)))",
        "conclusion": null
      },
      {
        "facts": [
          "leader(Mustafa)",
          "¬mediate_conflict(Mustafa)"
        ],
        "rules": "leader(Mustafa) → (broker_peace(Mustafa) ⊕ mediate_conflict(Mustafa))",
        "conclusion": "broker_peace(Mustafa)"
      },
      {
        "facts": [
          "¬seasoned_diplomat(Mustafa)"
        ],
        "rules": "∀x (seasoned_diplomat(x) → (build_trust(x) ∧ offer_advice(x)))",
        "conclusion": null
      },
      {
        "facts": [
          "respected(Mustafa)",
          "broker_peace(Mustafa)"
        ],
        "rules": null,
        "conclusion": "respected(Mustafa) ∧ (broker_peace(Mustafa) ∨ offer_advice(Mustafa))"
      }
    ],
    "conclusion": "Mustafa is respected and either brokers peace or offers advice (or both).",
    "conclusion_fol": "respected(Mustafa) ∧ (broker_peace(Mustafa) ∨ offer_advice(Mustafa))",
    "answer": "True",
    "context": [
      "Mustafa is not experienced.",
      "Mustafa gives counsel.",
      "If someone is experienced, then they build trust and give counsel.",
      "Mustafa is a leader.",
      "Mustafa does not mediate conflict.",
      "If Mustafa is a leader, then he either brokers peace or mediates conflict (but not both).",
      "Mustafa is not a seasoned diplomat.",
      "All seasoned diplomats build trust and offer advice.",
      "Mustafa is respected."
    ],
    "context_fol": [
      "¬experienced(Mustafa)",
      "give_counsel(Mustafa)",
      "∀x (experienced(x) → (build_trust(x) ∧ give_counsel(x)))",
      "leader(Mustafa)",
      "¬mediate_conflict(Mustafa)",
      "leader(Mustafa) → (broker_peace(Mustafa) ⊕ mediate_conflict(Mustafa))",
      "¬seasoned_diplomat(Mustafa)",
      "∀x (seasoned_diplomat(x) → (build_trust(x) ∧ offer_advice(x)))",
      "respected(Mustafa)"
    ],
    "background_story": "Mustafa was a wise and seasoned diplomat who had spent decades serving as an adviser to world leaders. His extensive knowledge of international relations and his ability to navigate complex geopolitical situations made him a trusted counselor. Leaders from around the globe would seek his advice on matters ranging from economic policy to conflict resolution. Mustafa's calm and measured approach helped to diffuse tensions and find mutually beneficial solutions. He was particularly known for his role in brokering a historic peace treaty between two nations that had been at odds for centuries. Mustafa's integrity, insight, and dedication to peace earned him numerous accolades and a reputation as one of the most respected advisers of his time.",
    "name": "Mustafa",
    "keyword": "adviser",
    "subject_category": "human"
  },
  {
    "facts": [
      "Chandler uses abstract techniques.",
      "Chandler is an artist.",
      "Chandler does not make music."
    ],
    "facts_fol": [
      "uses_abstract(Chandler)",
      "artist(Chandler)",
      "¬makes_music(Chandler)"
    ],
    "rules": [
      "For every human, they are either color blind or see full color, but not both.",
      "If Chandler is an artist, then he is either color blind or paints realism, but not both.",
      "If Chandler creates art, then he either uses abstract techniques or paints realism, but not both.",
      "Chandler either makes music or creates art."
    ],
    "rules_fol": [
      "∀x (color_blind(x) ⊕ sees_full_color(x))",
      "artist(Chandler) → (color_blind(Chandler) ⊕ paints_realism(Chandler))",
      "creates_art(Chandler) → (uses_abstract(Chandler) ⊕ paints_realism(Chandler))",
      "makes_music(Chandler) ∨ creates_art(Chandler)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Chandler has vision, then he is either color blind or sees vibrant colors, but not both.",
      "If Chandler uses vibrant hues or explores textures, then he can paint realism.",
      "If someone has imagination and sketches daily, then they create art."
    ],
    "distracting_rules_fol": [
      "has_vision(Chandler) → (color_blind(Chandler) ⊕ sees_vibrant(Chandler))",
      "(uses_vibrant_hues(Chandler) ∨ explores_textures(Chandler)) → paints_realism(Chandler)",
      "∀x ((has_imagination(x) ∧ sketches_daily(x)) → creates_art(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Chandler does not make music."
        ],
        "rules": "Chandler either makes music or creates art.",
        "conclusion": "Chandler creates art."
      },
      {
        "facts": [
          "Chandler creates art.",
          "Chandler uses abstract techniques."
        ],
        "rules": "If Chandler creates art, then he either uses abstract techniques or paints realism, but not both.",
        "conclusion": "Chandler does not paint realism."
      },
      {
        "facts": [
          "Chandler is an artist.",
          "Chandler does not paint realism."
        ],
        "rules": "If Chandler is an artist, then he is either color blind or paints realism, but not both.",
        "conclusion": "Chandler is color blind."
      },
      {
        "facts": [
          "Chandler is color blind."
        ],
        "rules": "For every human, they are either color blind or see full color, but not both.",
        "conclusion": "Chandler does not see full color."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬makes_music(Chandler)"
        ],
        "rules": "makes_music(Chandler) ∨ creates_art(Chandler)",
        "conclusion": "creates_art(Chandler)"
      },
      {
        "facts": [
          "creates_art(Chandler)",
          "uses_abstract(Chandler)"
        ],
        "rules": "creates_art(Chandler) → (uses_abstract(Chandler) ⊕ paints_realism(Chandler))",
        "conclusion": "¬paints_realism(Chandler)"
      },
      {
        "facts": [
          "artist(Chandler)",
          "¬paints_realism(Chandler)"
        ],
        "rules": "artist(Chandler) → (color_blind(Chandler) ⊕ paints_realism(Chandler))",
        "conclusion": "color_blind(Chandler)"
      },
      {
        "facts": [
          "color_blind(Chandler)"
        ],
        "rules": "∀x (color_blind(x) ⊕ sees_full_color(x))",
        "conclusion": "¬sees_full_color(Chandler)"
      }
    ],
    "conclusion": "Chandler does not see full color.",
    "conclusion_fol": "¬sees_full_color(Chandler)",
    "answer": "True",
    "context": [
      "Chandler does not make music.",
      "Chandler either makes music or creates art.",
      "Chandler uses abstract techniques.",
      "If Chandler creates art, then he either uses abstract techniques or paints realism, but not both.",
      "Chandler is an artist.",
      "If Chandler is an artist, then he is either color blind or paints realism, but not both.",
      "For every human, they are either color blind or see full color, but not both."
    ],
    "context_fol": [
      "¬makes_music(Chandler)",
      "makes_music(Chandler) ∨ creates_art(Chandler)",
      "uses_abstract(Chandler)",
      "creates_art(Chandler) → (uses_abstract(Chandler) ⊕ paints_realism(Chandler))",
      "artist(Chandler)",
      "artist(Chandler) → (color_blind(Chandler) ⊕ paints_realism(Chandler))",
      "∀x (color_blind(x) ⊕ sees_full_color(x))"
    ],
    "background_story": "Chandler was a talented artist known for his unique perspective on color. Born with dichromacy, a form of color blindness, he saw the world in shades of yellow and blue, but lacked sensitivity to red light. This condition influenced his art, as he focused on creating striking contrasts and textures. Chandler's paintings were highly acclaimed for their emotional depth and innovative use of hue. He often joked that his dichromacy was not a limitation, but a liberating force that allowed him to perceive the world in a distinct way. Through his art, Chandler showed that even perceived weaknesses can become strengths, and that different ways of seeing can lead to extraordinary creativity.",
    "name": "Chandler",
    "keyword": "dichromacy",
    "subject_category": "human"
  },
  {
    "facts": [
      "Raina leads a project.",
      "Raina is a volunteer.",
      "Raina promotes sustainability."
    ],
    "facts_fol": [
      "leads_project(Raina)",
      "is_volunteer(Raina)",
      "promotes_sustainability(Raina)"
    ],
    "rules": [
      "Raina either cares for the environment or values her community (or both).",
      "If Raina leads a project, then she either fosters unity or cares for the environment.",
      "If Raina is a volunteer, then she either fosters unity or promotes sustainability, but not both."
    ],
    "rules_fol": [
      "cares_for_environment(Raina) ∨ values_community(Raina)",
      "leads_project(Raina) → (fosters_unity(Raina) ∨ cares_for_environment(Raina))",
      "is_volunteer(Raina) → (fosters_unity(Raina) ⊕ promotes_sustainability(Raina))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Anyone who reduces waste or conserves water cares for the environment.",
      "Anyone who builds trust fosters unity among people."
    ],
    "distracting_rules_fol": [
      "∀x ((reduces_waste(x) ∨ conserves_water(x)) → cares_for_environment(x))",
      "∀x (builds_trust(x) → fosters_unity(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Raina is a volunteer.",
          "Raina promotes sustainability."
        ],
        "rules": "If Raina is a volunteer, then she either fosters unity or promotes sustainability, but not both.",
        "conclusion": "Raina does not foster unity."
      },
      {
        "facts": [
          "Raina leads a project.",
          "Raina does not foster unity."
        ],
        "rules": "If Raina leads a project, then she either fosters unity or cares for the environment.",
        "conclusion": "Raina cares for the environment."
      },
      {
        "facts": [
          "Raina cares for the environment."
        ],
        "rules": "Raina either cares for the environment or values her community (or both).",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "is_volunteer(Raina)",
          "promotes_sustainability(Raina)"
        ],
        "rules": "is_volunteer(Raina) → (fosters_unity(Raina) ⊕ promotes_sustainability(Raina))",
        "conclusion": "¬fosters_unity(Raina)"
      },
      {
        "facts": [
          "leads_project(Raina)",
          "¬fosters_unity(Raina)"
        ],
        "rules": "leads_project(Raina) → (fosters_unity(Raina) ∨ cares_for_environment(Raina))",
        "conclusion": "cares_for_environment(Raina)"
      },
      {
        "facts": [
          "cares_for_environment(Raina)"
        ],
        "rules": "cares_for_environment(Raina) ∨ values_community(Raina)",
        "conclusion": null
      }
    ],
    "conclusion": "Raina values her community.",
    "conclusion_fol": "values_community(Raina)",
    "answer": "Uncertain",
    "context": [
      "Raina is a volunteer.",
      "Raina promotes sustainability.",
      "If Raina is a volunteer, then she either fosters unity or promotes sustainability, but not both.",
      "Raina leads a project.",
      "If Raina leads a project, then she either fosters unity or cares for the environment.",
      "Raina either cares for the environment or values her community (or both)."
    ],
    "context_fol": [
      "is_volunteer(Raina)",
      "promotes_sustainability(Raina)",
      "is_volunteer(Raina) → (fosters_unity(Raina) ⊕ promotes_sustainability(Raina))",
      "leads_project(Raina)",
      "leads_project(Raina) → (fosters_unity(Raina) ∨ cares_for_environment(Raina))",
      "cares_for_environment(Raina) ∨ values_community(Raina)"
    ],
    "background_story": "Raina was a brilliant environmental scientist who believed in the power of collaboration. She led a community project to restore a polluted lake, bringing together local residents, businesses, and government agencies. Raina's cooperative spirit helped to build trust among the diverse stakeholders, facilitating open communication and creative problem-solving. Through her efforts, the community came together to implement sustainable solutions, such as wastewater treatment and habitat restoration. As a result, the lake began to flourish, and the surrounding ecosystem was revitalized. Raina's cooperative approach not only achieved remarkable environmental outcomes but also fostered a sense of unity and social responsibility among the community members, demonstrating the potential for collective action to drive positive change.",
    "name": "Raina",
    "keyword": "cooperative",
    "subject_category": "human"
  },
  {
    "facts": [
      "Violeta does not support local art.",
      "Violeta masters the craft of weaving.",
      "Violeta does not teach others."
    ],
    "facts_fol": [
      "¬supports_local_art(Violeta)",
      "masters_craft(Violeta)",
      "¬teach_others(Violeta)"
    ],
    "rules": [
      "For all humans, if they learn traditional weaving, then they can create beautiful fabrics.",
      "Violeta either preserves culture or learns traditional weaving, but not both.",
      "If someone shares skills and honors their heritage, then they preserve culture.",
      "For any person, either they support local art or share skills, but not necessarily both.",
      "If Violeta masters the craft of weaving, then she either honors her heritage or teaches others."
    ],
    "rules_fol": [
      "∀x (learn_traditional_weaving(x) → create_beautifulFabrics(x))",
      "preserve_culture(Violeta) ⊕ learn_traditional_weaving(Violeta)",
      "∀x ((shares_skills(x) ∧ honors_Heritage(x)) → preserve_culture(x))",
      "∀x (supports_local_art(x) ⊕ shares_skills(x))",
      "masters_craft(Violeta) → (honors_Heritage(Violeta) ∨ teach_others(Violeta))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Violeta is an apprentice weaver, then she learns traditional weaving.",
      "Anyone who respects history preserves their culture.",
      "If Violeta respects her ancestors, then she values her community and shares her skills.",
      "Anyone who loves their community either honors their heritage or keeps traditions."
    ],
    "distracting_rules_fol": [
      "apprentice_weaver(Violeta) → learn_traditional_weaving(Violeta)",
      "∀x (respect_history(x) → preserve_culture(x))",
      "respect_ancestors(Violeta) → (value_community(Violeta) ∧ shares_skills(Violeta))",
      "∀x (loves_community(x) → (honors_Heritage(x) ∨ keeps_traditions(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Violeta masters the craft of weaving.",
          "Violeta does not teach others."
        ],
        "rules": "If Violeta masters the craft of weaving, then she either honors her heritage or teaches others.",
        "conclusion": "Violeta honors her heritage."
      },
      {
        "facts": [
          "Violeta does not support local art."
        ],
        "rules": "For any person, either they support local art or share skills, but not necessarily both.",
        "conclusion": "Violeta shares skills."
      },
      {
        "facts": [
          "Violeta shares skills.",
          "Violeta honors her heritage."
        ],
        "rules": "If someone shares skills and honors their heritage, then they preserve culture.",
        "conclusion": "Violeta preserves culture."
      },
      {
        "facts": [
          "Violeta preserves culture."
        ],
        "rules": "Violeta either preserves culture or learns traditional weaving, but not both.",
        "conclusion": "Violeta does not learn traditional weaving."
      },
      {
        "facts": [
          "Violeta does not learn traditional weaving."
        ],
        "rules": "For all humans, if they learn traditional weaving, then they can create beautiful fabrics.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "masters_craft(Violeta)",
          "¬teach_others(Violeta)"
        ],
        "rules": "masters_craft(Violeta) → (honors_Heritage(Violeta) ∨ teach_others(Violeta))",
        "conclusion": "honors_Heritage(Violeta)"
      },
      {
        "facts": [
          "¬supports_local_art(Violeta)"
        ],
        "rules": "∀x (supports_local_art(x) ⊕ shares_skills(x))",
        "conclusion": "shares_skills(Violeta)"
      },
      {
        "facts": [
          "shares_skills(Violeta)",
          "honors_Heritage(Violeta)"
        ],
        "rules": "∀x ((shares_skills(x) ∧ honors_Heritage(x)) → preserve_culture(x))",
        "conclusion": "preserve_culture(Violeta)"
      },
      {
        "facts": [
          "preserve_culture(Violeta)"
        ],
        "rules": "preserve_culture(Violeta) ⊕ learn_traditional_weaving(Violeta)",
        "conclusion": "¬learn_traditional_weaving(Violeta)"
      },
      {
        "facts": [
          "¬learn_traditional_weaving(Violeta)"
        ],
        "rules": "∀x (learn_traditional_weaving(x) → create_beautifulFabrics(x))",
        "conclusion": null
      }
    ],
    "conclusion": "Violeta cannot create beautiful fabrics.",
    "conclusion_fol": "¬create_beautifulFabrics(Violeta)",
    "answer": "Uncertain",
    "context": [
      "Violeta masters the craft of weaving.",
      "Violeta does not teach others.",
      "If Violeta masters the craft of weaving, then she either honors her heritage or teaches others.",
      "Violeta does not support local art.",
      "For any person, either they support local art or share skills, but not necessarily both.",
      "If someone shares skills and honors their heritage, then they preserve culture.",
      "Violeta either preserves culture or learns traditional weaving, but not both.",
      "For all humans, if they learn traditional weaving, then they can create beautiful fabrics."
    ],
    "context_fol": [
      "masters_craft(Violeta)",
      "¬teach_others(Violeta)",
      "masters_craft(Violeta) → (honors_Heritage(Violeta) ∨ teach_others(Violeta))",
      "¬supports_local_art(Violeta)",
      "∀x (supports_local_art(x) ⊕ shares_skills(x))",
      "∀x ((shares_skills(x) ∧ honors_Heritage(x)) → preserve_culture(x))",
      "preserve_culture(Violeta) ⊕ learn_traditional_weaving(Violeta)",
      "∀x (learn_traditional_weaving(x) → create_beautifulFabrics(x))"
    ],
    "background_story": "Violeta was a talented weaver from Ulster, a province in Northern Ireland known for its rich textile heritage. Growing up in a small village surrounded by rolling hills and lush green landscapes, she learned the traditional craft of weaving from her grandmother. Violeta's fingers moved deftly as she worked the loom, creating beautiful fabrics that told stories of Ulster's history and mythology. Her passion for preserving the region's cultural traditions led her to establish a weaving cooperative, where local artisans could share their skills and create stunning pieces inspired by Ulster's natural beauty. Violeta's dedication to her craft and community helped keep the spirit of Ulster alive, as her woven creations found their way into homes and hearts around the world.",
    "name": "Violeta",
    "keyword": "ulster",
    "subject_category": "human"
  },
  {
    "facts": [
      "Charming is a horse with a strong build.",
      "Charming does not run fast.",
      "Charming does not have a gentle nature.",
      "Charming has a black coat.",
      "Charming is not spirited."
    ],
    "facts_fol": [
      "strong_build(Charming)",
      "¬run_fast(Charming)",
      "¬gentle_nature(Charming)",
      "black_coat(Charming)",
      "¬spirited(Charming)"
    ],
    "rules": [
      "If Charming is well-bred, then he can either excel in racing or thrive in parades, but not both.",
      "If a horse has a strong build, then it can either thrive in parades or jump high, but not both.",
      "Charming either runs fast or jumps high.",
      "Every horse with a majestic appearance is either well-bred or has a gentle nature (or both).",
      "If Charming has a black coat, then he either has a majestic appearance or is spirited, but not both."
    ],
    "rules_fol": [
      "well_bred(Charming) → (excel_in_racing(Charming) ⊕ thrive_in_parades(Charming))",
      "strong_build(Charming) → (thrive_in_parades(Charming) ⊕ jump_high(Charming))",
      "run_fast(Charming) ∨ jump_high(Charming)",
      "∀x (majestic_appearance(x) → (well_bred(x) ∨ gentle_nature(x)))",
      "black_coat(Charming) → (majestic_appearance(Charming) ⊕ spirited(Charming))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If a horse is trained well, then it can either perform tricks or thrive in parades, but not both.",
      "If Charming has a muscular body, then he can jump high.",
      "Any horse with a noble lineage or proper training is well-bred.",
      "All horses with a regal bearing have a majestic appearance."
    ],
    "distracting_rules_fol": [
      "trained_well(Charming) → (perform_tricks(Charming) ⊕ thrive_in_parades(Charming))",
      "muscular_body(Charming) → jump_high(Charming)",
      "∀x ((has_noble_lineage(x) ∨ receives_proper_training(x)) → well_bred(x))",
      "∀x (regal_bearing(x) → majestic_appearance(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Charming has a black coat.",
          "Charming is not spirited."
        ],
        "rules": "If Charming has a black coat, then he either has a majestic appearance or is spirited, but not both.",
        "conclusion": "Charming has a majestic appearance."
      },
      {
        "facts": [
          "Charming has a majestic appearance.",
          "Charming does not have a gentle nature."
        ],
        "rules": "Every horse with a majestic appearance is either well-bred or has a gentle nature (or both).",
        "conclusion": "Charming is well-bred."
      },
      {
        "facts": [
          "Charming does not run fast."
        ],
        "rules": "Charming either runs fast or jumps high.",
        "conclusion": "Charming can jump high."
      },
      {
        "facts": [
          "Charming is a horse with a strong build.",
          "Charming can jump high."
        ],
        "rules": "If a horse has a strong build, then it can either thrive in parades or jump high, but not both.",
        "conclusion": "Charming does not thrive in parades."
      },
      {
        "facts": [
          "Charming is well-bred.",
          "Charming does not thrive in parades."
        ],
        "rules": "If Charming is well-bred, then he can either excel in racing or thrive in parades, but not both.",
        "conclusion": "Charming excels in racing."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "black_coat(Charming)",
          "¬spirited(Charming)"
        ],
        "rules": "black_coat(Charming) → (majestic_appearance(Charming) ⊕ spirited(Charming))",
        "conclusion": "majestic_appearance(Charming)"
      },
      {
        "facts": [
          "majestic_appearance(Charming)",
          "¬gentle_nature(Charming)"
        ],
        "rules": "∀x (majestic_appearance(x) → (well_bred(x) ∨ gentle_nature(x)))",
        "conclusion": "well_bred(Charming)"
      },
      {
        "facts": [
          "¬run_fast(Charming)"
        ],
        "rules": "run_fast(Charming) ∨ jump_high(Charming)",
        "conclusion": "jump_high(Charming)"
      },
      {
        "facts": [
          "strong_build(Charming)",
          "jump_high(Charming)"
        ],
        "rules": "strong_build(Charming) → (thrive_in_parades(Charming) ⊕ jump_high(Charming))",
        "conclusion": "¬thrive_in_parades(Charming)"
      },
      {
        "facts": [
          "well_bred(Charming)",
          "¬thrive_in_parades(Charming)"
        ],
        "rules": "well_bred(Charming) → (excel_in_racing(Charming) ⊕ thrive_in_parades(Charming))",
        "conclusion": "excel_in_racing(Charming)"
      }
    ],
    "conclusion": "Charming excels in racing.",
    "conclusion_fol": "excel_in_racing(Charming)",
    "answer": "True",
    "context": [
      "Charming has a black coat.",
      "Charming is not spirited.",
      "If Charming has a black coat, then he either has a majestic appearance or is spirited, but not both.",
      "Charming does not have a gentle nature.",
      "Every horse with a majestic appearance is either well-bred or has a gentle nature (or both).",
      "Charming does not run fast.",
      "Charming either runs fast or jumps high.",
      "Charming is a horse with a strong build.",
      "If a horse has a strong build, then it can either thrive in parades or jump high, but not both.",
      "If Charming is well-bred, then he can either excel in racing or thrive in parades, but not both."
    ],
    "context_fol": [
      "black_coat(Charming)",
      "¬spirited(Charming)",
      "black_coat(Charming) → (majestic_appearance(Charming) ⊕ spirited(Charming))",
      "¬gentle_nature(Charming)",
      "∀x (majestic_appearance(x) → (well_bred(x) ∨ gentle_nature(x)))",
      "¬run_fast(Charming)",
      "run_fast(Charming) ∨ jump_high(Charming)",
      "strong_build(Charming)",
      "strong_build(Charming) → (thrive_in_parades(Charming) ⊕ jump_high(Charming))",
      "well_bred(Charming) → (excel_in_racing(Charming) ⊕ thrive_in_parades(Charming))"
    ],
    "background_story": "Charming, a majestic black stallion, was bred on the rolling hills of Moline, Illinois. Raised on a farm overlooking the Mississippi River, he grew strong and agile, with a spirit as free as the open plains. As he matured, Charming became a local favorite, known for his striking appearance and gentle disposition. He spent his days galloping through the countryside, his mane flowing in the wind. Charming's most notable trait, however, was his charming personality - hence his name - which made him a beloved companion to all who met him. Whether he was racing across the fields or standing proudly in a parade, Charming embodied the beauty and charm of the Moline landscape.",
    "name": "Charming",
    "keyword": "moline",
    "subject_category": "horse"
  },
  {
    "facts": [
      "Dr. Ford is a dedicated researcher.",
      "Dr. Ford advances theory.",
      "Dr. Ford explores the cosmos."
    ],
    "facts_fol": [
      "dedicated_researcher(Ford)",
      "advance_theory(Ford)",
      "explore_cosmos(Ford)"
    ],
    "rules": [
      "If Dr. Ford is a dedicated researcher, then he makes groundbreaking discoveries and receives recognition.",
      "If Dr. Ford studies meteorites, then he either advances theory or makes groundbreaking discoveries, but not both.",
      "Dr. Ford either explores the cosmos or studies meteorites, but not both."
    ],
    "rules_fol": [
      "dedicated_researcher(Ford) → (make_groundbreaking_discoveries(Ford) ∧ receive_recognition(Ford))",
      "study_meteorites(Ford) → (advance_theory(Ford) ⊕ make_groundbreaking_discoveries(Ford))",
      "explore_cosmos(Ford) ⊕ study_meteorites(Ford)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Dr. Ford analyzes data, then he either makes groundbreaking discoveries or challenges paradigms.",
      "If Dr. Ford has a curious mind, then he studies meteorites and seeks to understand the universe."
    ],
    "distracting_rules_fol": [
      "analyze_data(Ford) → (make_groundbreaking_discoveries(Ford) ∨ challenge_paradigms(Ford))",
      "curious_mind(Ford) → (study_meteorites(Ford) ∧ understand_universe(Ford))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Dr. Ford explores the cosmos."
        ],
        "rules": "Dr. Ford either explores the cosmos or studies meteorites, but not both.",
        "conclusion": "Ford does not study meteorites."
      },
      {
        "facts": [
          "Ford does not study meteorites.",
          "Dr. Ford advances theory."
        ],
        "rules": "If Dr. Ford studies meteorites, then he either advances theory or makes groundbreaking discoveries, but not both.",
        "conclusion": null
      },
      {
        "facts": [
          "Dr. Ford is a dedicated researcher."
        ],
        "rules": "If Dr. Ford is a dedicated researcher, then he makes groundbreaking discoveries and receives recognition.",
        "conclusion": "Dr. Ford receives recognition."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "explore_cosmos(Ford)"
        ],
        "rules": "explore_cosmos(Ford) ⊕ study_meteorites(Ford)",
        "conclusion": "¬study_meteorites(Ford)"
      },
      {
        "facts": [
          "¬study_meteorites(Ford)",
          "advance_theory(Ford)"
        ],
        "rules": "study_meteorites(Ford) → (advance_theory(Ford) ⊕ make_groundbreaking_discoveries(Ford))",
        "conclusion": null
      },
      {
        "facts": [
          "dedicated_researcher(Ford)"
        ],
        "rules": "dedicated_researcher(Ford) → (make_groundbreaking_discoveries(Ford) ∧ receive_recognition(Ford))",
        "conclusion": "receive_recognition(Ford)"
      }
    ],
    "conclusion": "Dr. Ford receives recognition.",
    "conclusion_fol": "receive_recognition(Ford)",
    "answer": "True",
    "context": [
      "Dr. Ford explores the cosmos.",
      "Dr. Ford either explores the cosmos or studies meteorites, but not both.",
      "Dr. Ford advances theory.",
      "If Dr. Ford studies meteorites, then he either advances theory or makes groundbreaking discoveries, but not both.",
      "Dr. Ford is a dedicated researcher.",
      "If Dr. Ford is a dedicated researcher, then he makes groundbreaking discoveries and receives recognition."
    ],
    "context_fol": [
      "explore_cosmos(Ford)",
      "explore_cosmos(Ford) ⊕ study_meteorites(Ford)",
      "advance_theory(Ford)",
      "study_meteorites(Ford) → (advance_theory(Ford) ⊕ make_groundbreaking_discoveries(Ford))",
      "dedicated_researcher(Ford)",
      "dedicated_researcher(Ford) → (make_groundbreaking_discoveries(Ford) ∧ receive_recognition(Ford))"
    ],
    "background_story": "Dr. Ford was a renowned astronomer who spent his career studying the formation of celestial bodies. His fascination with carbonaceous meteorites led him to a groundbreaking discovery. While analyzing a rare meteorite fragment, Ford found evidence of ancient organic compounds, suggesting that the building blocks of life on Earth may have originated from space. His research on carbonaceous chondrites, a type of meteorite rich in carbon, revealed clues about the early solar system's chemistry. Ford's work challenged existing theories and opened new avenues for the search for extraterrestrial life. His dedication to understanding the carbonaceous makeup of the cosmos earned him the prestigious Galaxy Award, cementing his legacy in the field of astrobiology.",
    "name": "Ford",
    "keyword": "carbonaceous",
    "subject_category": "astronomer"
  },
  {
    "facts": [
      "Valentina is a socialite.",
      "Valentina is not intelligent.",
      "Valentina is clever.",
      "Valentina is outgoing.",
      "Valentina is generous."
    ],
    "facts_fol": [
      "socialite(Valentina)",
      "¬intelligent(Valentina)",
      "clever(Valentina)",
      "outgoing(Valentina)",
      "generous(Valentina)"
    ],
    "rules": [
      "If Valentina is a socialite, then she is either intelligent or charismatic, but not both.",
      "If Valentina is clever, then she is quick-witted.",
      "If Valentina is outgoing, then she is either well-liked or generous, but not both."
    ],
    "rules_fol": [
      "socialite(Valentina) → (intelligent(Valentina) ⊕ charismatic(Valentina))",
      "clever(Valentina) → quick_witted(Valentina)",
      "outgoing(Valentina) → (well_liked(Valentina) ⊕ generous(Valentina))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Valentina speaks fluently and thinks fast, then she is charismatic.",
      "For all humans, if they think fast and speak in a humorous way, then they are quick-witted.",
      "If someone has humor and is knowledgeable, then they are well-liked."
    ],
    "distracting_rules_fol": [
      "(speaks_fluently(Valentina) ∧ thinks_fast(Valentina)) → charismatic(Valentina)",
      "∀x ((thinks_fast(x) ∧ speaks_fun(x)) → quick_witted(x))",
      "∀x ((has_humor(x) ∧ is_knowledgeable(x)) → well_liked(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Valentina is outgoing.",
          "Valentina is generous."
        ],
        "rules": "If Valentina is outgoing, then she is either well-liked or generous, but not both.",
        "conclusion": "Valentina is not well-liked."
      },
      {
        "facts": [
          "Valentina is clever."
        ],
        "rules": "If Valentina is clever, then she is quick-witted.",
        "conclusion": "Valentina is quick-witted."
      },
      {
        "facts": [
          "Valentina is a socialite.",
          "Valentina is not intelligent."
        ],
        "rules": "If Valentina is a socialite, then she is either intelligent or charismatic, but not both.",
        "conclusion": "Valentina is charismatic."
      },
      {
        "facts": [
          "Valentina is charismatic.",
          "Valentina is quick-witted.",
          "Valentina is not well-liked."
        ],
        "rules": null,
        "conclusion": "If Valentina is charismatic, then she is quick-witted and well-liked."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "outgoing(Valentina)",
          "generous(Valentina)"
        ],
        "rules": "outgoing(Valentina) → (well_liked(Valentina) ⊕ generous(Valentina))",
        "conclusion": "¬well_liked(Valentina)"
      },
      {
        "facts": [
          "clever(Valentina)"
        ],
        "rules": "clever(Valentina) → quick_witted(Valentina)",
        "conclusion": "quick_witted(Valentina)"
      },
      {
        "facts": [
          "socialite(Valentina)",
          "¬intelligent(Valentina)"
        ],
        "rules": "socialite(Valentina) → (intelligent(Valentina) ⊕ charismatic(Valentina))",
        "conclusion": "charismatic(Valentina)"
      },
      {
        "facts": [
          "charismatic(Valentina)",
          "quick_witted(Valentina)",
          "¬well_liked(Valentina)"
        ],
        "rules": null,
        "conclusion": "charismatic(Valentina) → (quick_witted(Valentina) ∧ well_liked(Valentina))"
      }
    ],
    "conclusion": "If Valentina is charismatic, then she is quick-witted and well-liked.",
    "conclusion_fol": "charismatic(Valentina) → (quick_witted(Valentina) ∧ well_liked(Valentina))",
    "answer": "False",
    "context": [
      "Valentina is outgoing.",
      "Valentina is generous.",
      "If Valentina is outgoing, then she is either well-liked or generous, but not both.",
      "Valentina is clever.",
      "If Valentina is clever, then she is quick-witted.",
      "Valentina is a socialite.",
      "Valentina is not intelligent.",
      "If Valentina is a socialite, then she is either intelligent or charismatic, but not both."
    ],
    "context_fol": [
      "outgoing(Valentina)",
      "generous(Valentina)",
      "outgoing(Valentina) → (well_liked(Valentina) ⊕ generous(Valentina))",
      "clever(Valentina)",
      "clever(Valentina) → quick_witted(Valentina)",
      "socialite(Valentina)",
      "¬intelligent(Valentina)",
      "socialite(Valentina) → (intelligent(Valentina) ⊕ charismatic(Valentina))"
    ],
    "background_story": "Valentina was a charismatic socialite known for her sharp tongue and quick wit. At high-society gatherings, she would effortlessly charm the crowd with her clever banter and humorous anecdotes. Her ability to think on her feet and respond wittily to even the most awkward situations made her a favorite among her peers. One evening, at a particularly dull dinner party, Valentina turned a potentially disastrous conversation about politics into a hilarious game of clever wordplay, leaving the guests in stitches. Her wittiness was not just a party trick; it was a shield that protected her from the cruelties of the world, and a sword that cut through the noise, revealing her intelligence and kindness.",
    "name": "Valentina",
    "keyword": "wittily",
    "subject_category": "human"
  },
  {
    "facts": [
      "Ensley does not volunteer locally.",
      "Ensley cares about nature.",
      "Ensley knows the history of Massachusetts."
    ],
    "facts_fol": [
      "¬volunteer_locally(Ensley)",
      "care_about_nature(Ensley)",
      "knows_history(Ensley)"
    ],
    "rules": [
      "If Ensley loves Massachusetts and works in conservation, then she makes a difference.",
      "If Ensley cares about nature, then she either works in conservation or volunteers locally, but not both.",
      "A person either knows the history of their state or has a strong affection for it, but these are not necessarily related."
    ],
    "rules_fol": [
      "(love_Massachusetts(Ensley) ∧ work_in_conservation(Ensley)) → make_a_difference(Ensley)",
      "care_about_nature(Ensley) → (work_in_conservation(Ensley) ⊕ volunteer_locally(Ensley))",
      "∀x (knows_history(x) ⊕ love_Massachusetts(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Ensley protects the environment, then she works in conservation.",
      "If Ensley protects the environment, then she either loves Massachusetts or supports her community."
    ],
    "distracting_rules_fol": [
      "protect_environment(Ensley) → work_in_conservation(Ensley)",
      "protect_environment(Ensley) → (love_Massachusetts(Ensley) ∨ support_community(Ensley))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Ensley knows the history of Massachusetts."
        ],
        "rules": "A person either knows the history of their state or has a strong affection for it, but these are not necessarily related.",
        "conclusion": "Ensley does not love Massachusetts."
      },
      {
        "facts": [
          "Ensley cares about nature.",
          "Ensley does not volunteer locally."
        ],
        "rules": "If Ensley cares about nature, then she either works in conservation or volunteers locally, but not both.",
        "conclusion": "Ensley works in conservation."
      },
      {
        "facts": [
          "Ensley does not love Massachusetts.",
          "Ensley works in conservation."
        ],
        "rules": "If Ensley loves Massachusetts and works in conservation, then she makes a difference.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "knows_history(Ensley)"
        ],
        "rules": "∀x (knows_history(x) ⊕ love_Massachusetts(x))",
        "conclusion": "¬love_Massachusetts(Ensley)"
      },
      {
        "facts": [
          "care_about_nature(Ensley)",
          "¬volunteer_locally(Ensley)"
        ],
        "rules": "care_about_nature(Ensley) → (work_in_conservation(Ensley) ⊕ volunteer_locally(Ensley))",
        "conclusion": "work_in_conservation(Ensley)"
      },
      {
        "facts": [
          "¬love_Massachusetts(Ensley)",
          "work_in_conservation(Ensley)"
        ],
        "rules": "(love_Massachusetts(Ensley) ∧ work_in_conservation(Ensley)) → make_a_difference(Ensley)",
        "conclusion": null
      }
    ],
    "conclusion": "Ensley makes a difference.",
    "conclusion_fol": "make_a_difference(Ensley)",
    "answer": "Uncertain",
    "context": [
      "Ensley knows the history of Massachusetts.",
      "A person either knows the history of their state or has a strong affection for it, but these are not necessarily related.",
      "Ensley cares about nature.",
      "Ensley does not volunteer locally.",
      "If Ensley cares about nature, then she either works in conservation or volunteers locally, but not both.",
      "If Ensley loves Massachusetts and works in conservation, then she makes a difference."
    ],
    "context_fol": [
      "knows_history(Ensley)",
      "∀x (knows_history(x) ⊕ love_Massachusetts(x))",
      "care_about_nature(Ensley)",
      "¬volunteer_locally(Ensley)",
      "care_about_nature(Ensley) → (work_in_conservation(Ensley) ⊕ volunteer_locally(Ensley))",
      "(love_Massachusetts(Ensley) ∧ work_in_conservation(Ensley)) → make_a_difference(Ensley)"
    ],
    "background_story": "Ensley was a bright and ambitious young woman from Massachusetts. Growing up in the historic town of Salem, she developed a deep love for the state's rich history and culture. Ensley spent her summers exploring the Freedom Trail in Boston, visiting the famous Fenway Park, and enjoying the beautiful beaches of Cape Cod. After graduating from Harvard University, she decided to stay in Massachusetts and pursue a career in environmental conservation. Ensley worked tirelessly to protect the state's natural resources, from the mountains of Berkshire to the coastlines of Plymouth. Her dedication to preserving the beauty of Massachusetts earned her recognition and respect from the community, and she became a leading voice in the state's conservation efforts.",
    "name": "Ensley",
    "keyword": "massachusetts",
    "subject_category": "human"
  },
  {
    "facts": [
      "Bristol is a food critic.",
      "Bristol discovers new restaurants."
    ],
    "facts_fol": [
      "food_critic(Bristol)",
      "discover_restaurants(Bristol)"
    ],
    "rules": [
      "For all humans, if someone is an adventurous eater, then they either enjoy spicy food or appreciate complex flavors (or both).",
      "If Bristol is a food critic, then he is either an adventurous eater or likes exotic cuisine, but not both.",
      "If Bristol travels widely or tries new dishes, then he likes exotic cuisine.",
      "If Bristol explores cultures or discovers new restaurants, then he travels widely."
    ],
    "rules_fol": [
      "∀x (adventurous_eater(x) → (enjoy_spicy_food(x) ∨ appreciate_complex_flavors(x)))",
      "food_critic(Bristol) → (adventurous_eater(Bristol) ⊕ likes_exotic(Bristol))",
      "(travels_widely(Bristol) ∨ tries_new_dishes(Bristol)) → likes_exotic(Bristol)",
      "(explore_cultures(Bristol) ∨ discover_restaurants(Bristol)) → travels_widely(Bristol)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Anyone who seeks flavor and takes risks is an adventurous eater.",
      "Anyone who craves curry likes exotic food.",
      "If Bristol is open-minded, then he meets new people and travels widely."
    ],
    "distracting_rules_fol": [
      "∀x ((seeks_flavor(x) ∧ takes_risks(x)) → adventurous_eater(x))",
      "∀x (craves_curry(x) → likes_exotic(x))",
      "open_minded(Bristol) → (meets_new_people(Bristol) ∧ travels_widely(Bristol))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Bristol discovers new restaurants."
        ],
        "rules": "If Bristol explores cultures or discovers new restaurants, then he travels widely.",
        "conclusion": "Bristol travels widely."
      },
      {
        "facts": [
          "Bristol travels widely."
        ],
        "rules": "If Bristol travels widely or tries new dishes, then he likes exotic cuisine.",
        "conclusion": "Bristol likes exotic cuisine."
      },
      {
        "facts": [
          "Bristol is a food critic.",
          "Bristol likes exotic cuisine."
        ],
        "rules": "If Bristol is a food critic, then he is either an adventurous eater or likes exotic cuisine, but not both.",
        "conclusion": "Bristol is not an adventurous eater."
      },
      {
        "facts": [
          "Bristol is not an adventurous eater."
        ],
        "rules": "For all humans, if someone is an adventurous eater, then they either enjoy spicy food or appreciate complex flavors (or both).",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "discover_restaurants(Bristol)"
        ],
        "rules": "(explore_cultures(Bristol) ∨ discover_restaurants(Bristol)) → travels_widely(Bristol)",
        "conclusion": "travels_widely(Bristol)"
      },
      {
        "facts": [
          "travels_widely(Bristol)"
        ],
        "rules": "(travels_widely(Bristol) ∨ tries_new_dishes(Bristol)) → likes_exotic(Bristol)",
        "conclusion": "likes_exotic(Bristol)"
      },
      {
        "facts": [
          "food_critic(Bristol)",
          "likes_exotic(Bristol)"
        ],
        "rules": "food_critic(Bristol) → (adventurous_eater(Bristol) ⊕ likes_exotic(Bristol))",
        "conclusion": "¬adventurous_eater(Bristol)"
      },
      {
        "facts": [
          "¬adventurous_eater(Bristol)"
        ],
        "rules": "∀x (adventurous_eater(x) → (enjoy_spicy_food(x) ∨ appreciate_complex_flavors(x)))",
        "conclusion": null
      }
    ],
    "conclusion": "Bristol does not appreciate complex flavors.",
    "conclusion_fol": "¬appreciate_complex_flavors(Bristol)",
    "answer": "Uncertain",
    "context": [
      "Bristol discovers new restaurants.",
      "If Bristol explores cultures or discovers new restaurants, then he travels widely.",
      "If Bristol travels widely or tries new dishes, then he likes exotic cuisine.",
      "Bristol is a food critic.",
      "If Bristol is a food critic, then he is either an adventurous eater or likes exotic cuisine, but not both.",
      "For all humans, if someone is an adventurous eater, then they either enjoy spicy food or appreciate complex flavors (or both)."
    ],
    "context_fol": [
      "discover_restaurants(Bristol)",
      "(explore_cultures(Bristol) ∨ discover_restaurants(Bristol)) → travels_widely(Bristol)",
      "(travels_widely(Bristol) ∨ tries_new_dishes(Bristol)) → likes_exotic(Bristol)",
      "food_critic(Bristol)",
      "food_critic(Bristol) → (adventurous_eater(Bristol) ⊕ likes_exotic(Bristol))",
      "∀x (adventurous_eater(x) → (enjoy_spicy_food(x) ∨ appreciate_complex_flavors(x)))"
    ],
    "background_story": "Bristol, a food critic known for his scathing reviews, had a penchant for trying the spiciest dishes in town. One fateful evening, he sampled a notoriously hot curry at a new Indian restaurant. The dish, named 'Inferno's Breath,' lived up to its reputation, leaving Bristol with a burning sensation in his chest. As the night wore on, the discomfort turned into full-blown indigestion. Despite his suffering, Bristol couldn't help but admire the chef's skill in crafting such a potent culinary experience. He wrote a glowing review, warning readers about the dish's intense heat but praising its complex flavors. Bristol's indigestion became a legendary tale among foodies, symbolizing his dedication to honest criticism, even at the cost of his own digestive comfort.",
    "name": "Bristol",
    "keyword": "indigestion",
    "subject_category": "human"
  },
  {
    "facts": [
      "Serena examines moths.",
      "Serena explores habitats.",
      "Serena does not understand ecosystems.",
      "Serena documents her findings."
    ],
    "facts_fol": [
      "examines_moths(Serena)",
      "explores_habitats(Serena)",
      "¬understands_ecosystems(Serena)",
      "documents_findings(Serena)"
    ],
    "rules": [
      "Every entomologist either studies butterflies or researches insects (or both).",
      "If Serena observes beetles and examines moths, then she studies butterflies.",
      "If Serena likes bugs, then she observes beetles.",
      "Any entomologist who explores habitats or collects samples likes bugs.",
      "All entomologists who understand ecosystems collect samples and document their findings."
    ],
    "rules_fol": [
      "∀x (study_butterflies(x) ∨ research_insects(x))",
      "(observes_beetles(Serena) ∧ examines_moths(Serena)) → study_butterflies(Serena)",
      "likes_bugs(Serena) → observes_beetles(Serena)",
      "∀x ((explores_habitats(x) ∨ collects_samples(x)) → likes_bugs(x))",
      "∀x (understands_ecosystems(x) → (collects_samples(x) ∧ documents_findings(x)))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Serena specializes in lepidoptera, then she either investigates wasps or studies butterflies, but not both.",
      "If Serena investigates lepidoptera, then she either observes beetles or analyzes hymenoptera.",
      "Every entomologist who investigates species either publishes papers or likes bugs (or both).",
      "If Serena identifies species and tracks behaviors, then she collects samples."
    ],
    "distracting_rules_fol": [
      "specializes_in_lepidoptera(Serena) → (investigates_wasps(Serena) ⊕ study_butterflies(Serena))",
      "investigates_lepidoptera(Serena) → (observes_beetles(Serena) ∨ analyzes_hymenoptera(Serena))",
      "∀x (investigates_species(x) → (publishes_papers(x) ∨ likes_bugs(x)))",
      "(identifies_species(Serena) ∧ tracks_behaviors(Serena)) → collects_samples(Serena)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Serena does not understand ecosystems.",
          "Serena documents her findings."
        ],
        "rules": "All entomologists who understand ecosystems collect samples and document their findings.",
        "conclusion": null
      },
      {
        "facts": [
          "Serena explores habitats."
        ],
        "rules": "Any entomologist who explores habitats or collects samples likes bugs.",
        "conclusion": "Serena likes bugs."
      },
      {
        "facts": [
          "Serena likes bugs."
        ],
        "rules": "If Serena likes bugs, then she observes beetles.",
        "conclusion": "Serena observes beetles."
      },
      {
        "facts": [
          "Serena observes beetles.",
          "Serena examines moths."
        ],
        "rules": "If Serena observes beetles and examines moths, then she studies butterflies.",
        "conclusion": "Serena studies butterflies."
      },
      {
        "facts": [
          "Serena studies butterflies."
        ],
        "rules": "Every entomologist either studies butterflies or researches insects (or both).",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬understands_ecosystems(Serena)",
          "documents_findings(Serena)"
        ],
        "rules": "∀x (understands_ecosystems(x) → (collects_samples(x) ∧ documents_findings(x)))",
        "conclusion": null
      },
      {
        "facts": [
          "explores_habitats(Serena)"
        ],
        "rules": "∀x ((explores_habitats(x) ∨ collects_samples(x)) → likes_bugs(x))",
        "conclusion": "likes_bugs(Serena)"
      },
      {
        "facts": [
          "likes_bugs(Serena)"
        ],
        "rules": "likes_bugs(Serena) → observes_beetles(Serena)",
        "conclusion": "observes_beetles(Serena)"
      },
      {
        "facts": [
          "observes_beetles(Serena)",
          "examines_moths(Serena)"
        ],
        "rules": "(observes_beetles(Serena) ∧ examines_moths(Serena)) → study_butterflies(Serena)",
        "conclusion": "study_butterflies(Serena)"
      },
      {
        "facts": [
          "study_butterflies(Serena)"
        ],
        "rules": "∀x (study_butterflies(x) ∨ research_insects(x))",
        "conclusion": null
      }
    ],
    "conclusion": "Serena researches insects.",
    "conclusion_fol": "research_insects(Serena)",
    "answer": "Uncertain",
    "context": [
      "Serena does not understand ecosystems.",
      "Serena documents her findings.",
      "All entomologists who understand ecosystems collect samples and document their findings.",
      "Serena explores habitats.",
      "Any entomologist who explores habitats or collects samples likes bugs.",
      "If Serena likes bugs, then she observes beetles.",
      "Serena examines moths.",
      "If Serena observes beetles and examines moths, then she studies butterflies.",
      "Every entomologist either studies butterflies or researches insects (or both)."
    ],
    "context_fol": [
      "¬understands_ecosystems(Serena)",
      "documents_findings(Serena)",
      "∀x (understands_ecosystems(x) → (collects_samples(x) ∧ documents_findings(x)))",
      "explores_habitats(Serena)",
      "∀x ((explores_habitats(x) ∨ collects_samples(x)) → likes_bugs(x))",
      "likes_bugs(Serena) → observes_beetles(Serena)",
      "examines_moths(Serena)",
      "(observes_beetles(Serena) ∧ examines_moths(Serena)) → study_butterflies(Serena)",
      "∀x (study_butterflies(x) ∨ research_insects(x))"
    ],
    "background_story": "Serena was a renowned entomologist with a fascination for stick insects. Her particular interest lay in the genus Leptoglossus, a group of leaf-footed bugs known for their unique appearance and behaviors. Serena spent years studying these insects in their natural habitats, from the lush rainforests of South America to the arid deserts of North America. Her groundbreaking research on the mating habits of Leptoglossus aphidiformis earned her international recognition. Serena's dedication to her work was as unwavering as the camouflage abilities of her beloved subjects. She continued to unravel the secrets of Leptoglossus, inspiring a new generation of entomologists to explore the fascinating world of insects.",
    "name": "Serena",
    "keyword": "leptoglossus",
    "subject_category": "entomologist"
  },
  {
    "facts": [
      "Remington lives outdoors.",
      "Remington is not agile.",
      "Remington is a cricket."
    ],
    "facts_fol": [
      "lives_outdoors(Remington)",
      "¬is_agile(Remington)",
      "is_cricket(Remington)"
    ],
    "rules": [
      "Remington, as a cricket, can fly or makes sound (or both).",
      "If Remington has wings, then he either can fly or can jump, but not both.",
      "If Remington is light, then he can jump.",
      "If Remington lives outdoors, then he is either light or agile.",
      "If Remington is a cricket, then he has wings."
    ],
    "rules_fol": [
      "can_fly(Remington) ∨ makes_sound(Remington)",
      "has_wings(Remington) → (can_jump(Remington) ⊕ can_fly(Remington))",
      "is_light(Remington) → can_jump(Remington)",
      "lives_outdoors(Remington) → (is_light(Remington) ∨ is_agile(Remington))",
      "is_cricket(Remington) → has_wings(Remington)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Remington has antennae or can fly.",
      "If Remington either has legs or is fast (but not both), then he can jump.",
      "Any insect that is small and hollow is light.",
      "If Remington lives under a tree, then he either has antennae or has wings."
    ],
    "distracting_rules_fol": [
      "has_antennae(Remington) ∨ can_fly(Remington)",
      "(has_legs(Remington) ⊕ is_fast(Remington)) → can_jump(Remington)",
      "∀x ((has_small_size(x) ∧ is_hollow(x)) → is_light(x))",
      "lives_under_tree(Remington) → (has_antennae(Remington) ∨ has_wings(Remington))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Remington is a cricket."
        ],
        "rules": "If Remington is a cricket, then he has wings.",
        "conclusion": "Remington has wings."
      },
      {
        "facts": [
          "Remington lives outdoors.",
          "Remington is not agile."
        ],
        "rules": "If Remington lives outdoors, then he is either light or agile.",
        "conclusion": "Remington is light."
      },
      {
        "facts": [
          "Remington is light."
        ],
        "rules": "If Remington is light, then he can jump.",
        "conclusion": "Remington can jump."
      },
      {
        "facts": [
          "Remington has wings.",
          "Remington can jump."
        ],
        "rules": "If Remington has wings, then he either can fly or can jump, but not both.",
        "conclusion": "Remington cannot fly."
      },
      {
        "facts": [
          "Remington cannot fly."
        ],
        "rules": "Remington, as a cricket, can fly or makes sound (or both).",
        "conclusion": "Remington does not make sound."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "is_cricket(Remington)"
        ],
        "rules": "is_cricket(Remington) → has_wings(Remington)",
        "conclusion": "has_wings(Remington)"
      },
      {
        "facts": [
          "lives_outdoors(Remington)",
          "¬is_agile(Remington)"
        ],
        "rules": "lives_outdoors(Remington) → (is_light(Remington) ∨ is_agile(Remington))",
        "conclusion": "is_light(Remington)"
      },
      {
        "facts": [
          "is_light(Remington)"
        ],
        "rules": "is_light(Remington) → can_jump(Remington)",
        "conclusion": "can_jump(Remington)"
      },
      {
        "facts": [
          "has_wings(Remington)",
          "can_jump(Remington)"
        ],
        "rules": "has_wings(Remington) → (can_jump(Remington) ⊕ can_fly(Remington))",
        "conclusion": "¬can_fly(Remington)"
      },
      {
        "facts": [
          "¬can_fly(Remington)"
        ],
        "rules": "can_fly(Remington) ∨ makes_sound(Remington)",
        "conclusion": "¬makes_sound(Remington)"
      }
    ],
    "conclusion": "Remington does not make sound.",
    "conclusion_fol": "¬makes_sound(Remington)",
    "answer": "False",
    "context": [
      "Remington is a cricket.",
      "If Remington is a cricket, then he has wings.",
      "Remington lives outdoors.",
      "Remington is not agile.",
      "If Remington lives outdoors, then he is either light or agile.",
      "If Remington is light, then he can jump.",
      "If Remington has wings, then he either can fly or can jump, but not both.",
      "Remington, as a cricket, can fly or makes sound (or both)."
    ],
    "context_fol": [
      "is_cricket(Remington)",
      "is_cricket(Remington) → has_wings(Remington)",
      "lives_outdoors(Remington)",
      "¬is_agile(Remington)",
      "lives_outdoors(Remington) → (is_light(Remington) ∨ is_agile(Remington))",
      "is_light(Remington) → can_jump(Remington)",
      "has_wings(Remington) → (can_jump(Remington) ⊕ can_fly(Remington))",
      "can_fly(Remington) ∨ makes_sound(Remington)"
    ],
    "background_story": "In the scorching summer nights, Remington, a member of the gryllidae family, otherwise known as a cricket, would serenade the neighborhood with his melodious chirping. His home was a small, cozy nook beneath an old oak tree, where he would spend his evenings singing to attract a mate. Remington's song was unlike any other cricket's; it was a unique blend of trills and chirps that seemed almost musical. As the seasons changed, Remington became a local legend, with people gathering around the oak tree to listen to his enchanting performances. His love song echoed through the night, a reminder of the simple joys in life and the beauty of nature's symphony.",
    "name": "Remington",
    "keyword": "gryllidae",
    "subject_category": "insect"
  },
  {
    "facts": [
      "Neo is inspired by nature.",
      "Neo is an artist.",
      "Neo eases pain.",
      "Neo is a musician.",
      "Neo does not record albums."
    ],
    "facts_fol": [
      "inspired_by_nature(Neo)",
      "is_artist(Neo)",
      "ease_pain(Neo)",
      "is_musician(Neo)",
      "¬record_album(Neo)"
    ],
    "rules": [
      "If Neo is inspired by nature, then he can either create soothing music or spread positive messages, but not both.",
      "Either Neo fosters a calm atmosphere or he spreads positive messages, but not both.",
      "If Neo is an artist, then he either fosters a calm atmosphere or brings joy, but not both.",
      "If Neo performs live, then he either eases pain or brings joy, but not both.",
      "If Neo is a musician, then he either performs live or records albums, but not both."
    ],
    "rules_fol": [
      "inspired_by_nature(Neo) → (create_soothing_music(Neo) ⊕ spread_positive_messages(Neo))",
      "foster_calm_atmosphere(Neo) ⊕ spread_positive_messages(Neo)",
      "is_artist(Neo) → (foster_calm_atmosphere(Neo) ⊕ bring_joy(Neo))",
      "perform_live(Neo) → (ease_pain(Neo) ⊕ bring_joy(Neo))",
      "is_musician(Neo) → (perform_live(Neo) ⊕ record_album(Neo))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Neo either writes poetry or sings harmonies (but not both), then he spreads positive messages.",
      "If someone plays gently and sings softly, then they foster a calm atmosphere.",
      "If someone composes songs and plays an instrument, then they can bring joy.",
      "Everyone who writes songs either performs live or composes lyrics."
    ],
    "distracting_rules_fol": [
      "(write_poetry(Neo) ⊕ sing_harmonies(Neo)) → spread_positive_messages(Neo)",
      "∀x ((plays_gently(x) ∧ sings_softly(x)) → foster_calm_atmosphere(x))",
      "∀x ((compose_songs(x) ∧ play_instrument(x)) → bring_joy(x))",
      "∀x (write_songs(x) → (perform_live(x) ∨ compose_lyrics(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Neo is a musician.",
          "Neo does not record albums."
        ],
        "rules": "If Neo is a musician, then he either performs live or records albums, but not both.",
        "conclusion": "Neo performs live."
      },
      {
        "facts": [
          "Neo performs live.",
          "Neo eases pain."
        ],
        "rules": "If Neo performs live, then he either eases pain or brings joy, but not both.",
        "conclusion": "Neo does not bring joy."
      },
      {
        "facts": [
          "Neo is an artist.",
          "Neo does not bring joy."
        ],
        "rules": "If Neo is an artist, then he either fosters a calm atmosphere or brings joy, but not both.",
        "conclusion": "Neo fosters a calm atmosphere."
      },
      {
        "facts": [
          "Neo fosters a calm atmosphere."
        ],
        "rules": "Either Neo fosters a calm atmosphere or he spreads positive messages, but not both.",
        "conclusion": "Neo does not spread positive messages."
      },
      {
        "facts": [
          "Neo is inspired by nature.",
          "Neo does not spread positive messages."
        ],
        "rules": "If Neo is inspired by nature, then he can either create soothing music or spread positive messages, but not both.",
        "conclusion": "Neo creates soothing music."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "is_musician(Neo)",
          "¬record_album(Neo)"
        ],
        "rules": "is_musician(Neo) → (perform_live(Neo) ⊕ record_album(Neo))",
        "conclusion": "perform_live(Neo)"
      },
      {
        "facts": [
          "perform_live(Neo)",
          "ease_pain(Neo)"
        ],
        "rules": "perform_live(Neo) → (ease_pain(Neo) ⊕ bring_joy(Neo))",
        "conclusion": "¬bring_joy(Neo)"
      },
      {
        "facts": [
          "is_artist(Neo)",
          "¬bring_joy(Neo)"
        ],
        "rules": "is_artist(Neo) → (foster_calm_atmosphere(Neo) ⊕ bring_joy(Neo))",
        "conclusion": "foster_calm_atmosphere(Neo)"
      },
      {
        "facts": [
          "foster_calm_atmosphere(Neo)"
        ],
        "rules": "foster_calm_atmosphere(Neo) ⊕ spread_positive_messages(Neo)",
        "conclusion": "¬spread_positive_messages(Neo)"
      },
      {
        "facts": [
          "inspired_by_nature(Neo)",
          "¬spread_positive_messages(Neo)"
        ],
        "rules": "inspired_by_nature(Neo) → (create_soothing_music(Neo) ⊕ spread_positive_messages(Neo))",
        "conclusion": "create_soothing_music(Neo)"
      }
    ],
    "conclusion": "Neo creates soothing music.",
    "conclusion_fol": "create_soothing_music(Neo)",
    "answer": "True",
    "context": [
      "Neo is a musician.",
      "Neo does not record albums.",
      "If Neo is a musician, then he either performs live or records albums, but not both.",
      "Neo eases pain.",
      "If Neo performs live, then he either eases pain or brings joy, but not both.",
      "Neo is an artist.",
      "If Neo is an artist, then he either fosters a calm atmosphere or brings joy, but not both.",
      "Either Neo fosters a calm atmosphere or he spreads positive messages, but not both.",
      "Neo is inspired by nature.",
      "If Neo is inspired by nature, then he can either create soothing music or spread positive messages, but not both."
    ],
    "context_fol": [
      "is_musician(Neo)",
      "¬record_album(Neo)",
      "is_musician(Neo) → (perform_live(Neo) ⊕ record_album(Neo))",
      "ease_pain(Neo)",
      "perform_live(Neo) → (ease_pain(Neo) ⊕ bring_joy(Neo))",
      "is_artist(Neo)",
      "is_artist(Neo) → (foster_calm_atmosphere(Neo) ⊕ bring_joy(Neo))",
      "foster_calm_atmosphere(Neo) ⊕ spread_positive_messages(Neo)",
      "inspired_by_nature(Neo)",
      "inspired_by_nature(Neo) → (create_soothing_music(Neo) ⊕ spread_positive_messages(Neo))"
    ],
    "background_story": "Neo, a young musician, found inspiration in the gentle coos of the turtledove that visited his backyard. The bird's soothing melodies mirrored the peacefulness he sought to convey through his music. As he composed his debut album, Neo wove the turtledove's song into his lyrics, symbolizing love, peace, and freedom. His music quickly gained popularity, with fans drawn to the calming essence of his sound. Neo's concerts became a haven for those seeking solace, with the turtledove's gentle coos often playing softly in the background. He became known as the 'Turtledove Troubadour,' spreading messages of hope and serenity through his enchanting music, just like the bird that had first sparked his creativity.",
    "name": "Neo",
    "keyword": "turtledove",
    "subject_category": "human"
  },
  {
    "facts": [
      "Finley is an analyst.",
      "Finley is intuitive.",
      "Finley considers alternatives."
    ],
    "facts_fol": [
      "is_analyst(Finley)",
      "is_intuitive(Finley)",
      "considers_alternatives(Finley)"
    ],
    "rules": [
      "If Finley is methodical, then he can either make accurate predictions or solve complex cases, but not both.",
      "Finley is either methodical or thinks creatively, but not both.",
      "If Finley is an analyst, then he is either intuitive or thinks creatively, but not both.",
      "If Finley examines evidence or considers alternatives, then he can make accurate predictions."
    ],
    "rules_fol": [
      "methodical(Finley) → (make_accurate_predictions(Finley) ⊕ solve_complex_cases(Finley))",
      "think_creatively(Finley) ⊕ methodical(Finley)",
      "is_analyst(Finley) → (is_intuitive(Finley) ⊕ think_creatively(Finley))",
      "(examines_evidence(Finley) ∨ considers_alternatives(Finley)) → make_accurate_predictions(Finley)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Finley is diligent, then he is either insightful or methodical, but not both.",
      "If Finley is an investigator, then he is either a creative thinker or a logical reasoner, but not both.",
      "Finley gathers information or makes accurate predictions."
    ],
    "distracting_rules_fol": [
      "is_diligent(Finley) → (is_insightful(Finley) ⊕ methodical(Finley))",
      "is_investigator(Finley) → (think_creatively(Finley) ⊕ is_logical(Finley))",
      "gathers_info(Finley) ∨ make_accurate_predictions(Finley)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Finley considers alternatives."
        ],
        "rules": "If Finley examines evidence or considers alternatives, then he can make accurate predictions.",
        "conclusion": "Finley makes accurate predictions."
      },
      {
        "facts": [
          "Finley is an analyst.",
          "Finley is intuitive."
        ],
        "rules": "If Finley is an analyst, then he is either intuitive or thinks creatively, but not both.",
        "conclusion": "Finley does not think creatively."
      },
      {
        "facts": [
          "Finley does not think creatively."
        ],
        "rules": "Finley is either methodical or thinks creatively, but not both.",
        "conclusion": "Finley is methodical."
      },
      {
        "facts": [
          "Finley is methodical.",
          "Finley makes accurate predictions."
        ],
        "rules": "If Finley is methodical, then he can either make accurate predictions or solve complex cases, but not both.",
        "conclusion": "Finley does not solve complex cases."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "considers_alternatives(Finley)"
        ],
        "rules": "(examines_evidence(Finley) ∨ considers_alternatives(Finley)) → make_accurate_predictions(Finley)",
        "conclusion": "make_accurate_predictions(Finley)"
      },
      {
        "facts": [
          "is_analyst(Finley)",
          "is_intuitive(Finley)"
        ],
        "rules": "is_analyst(Finley) → (is_intuitive(Finley) ⊕ think_creatively(Finley))",
        "conclusion": "¬think_creatively(Finley)"
      },
      {
        "facts": [
          "¬think_creatively(Finley)"
        ],
        "rules": "think_creatively(Finley) ⊕ methodical(Finley)",
        "conclusion": "methodical(Finley)"
      },
      {
        "facts": [
          "methodical(Finley)",
          "make_accurate_predictions(Finley)"
        ],
        "rules": "methodical(Finley) → (make_accurate_predictions(Finley) ⊕ solve_complex_cases(Finley))",
        "conclusion": "¬solve_complex_cases(Finley)"
      }
    ],
    "conclusion": "Finley does not solve complex cases.",
    "conclusion_fol": "¬solve_complex_cases(Finley)",
    "answer": "True",
    "context": [
      "Finley considers alternatives.",
      "If Finley examines evidence or considers alternatives, then he can make accurate predictions.",
      "Finley is an analyst.",
      "Finley is intuitive.",
      "If Finley is an analyst, then he is either intuitive or thinks creatively, but not both.",
      "Finley is either methodical or thinks creatively, but not both.",
      "If Finley is methodical, then he can either make accurate predictions or solve complex cases, but not both."
    ],
    "context_fol": [
      "considers_alternatives(Finley)",
      "(examines_evidence(Finley) ∨ considers_alternatives(Finley)) → make_accurate_predictions(Finley)",
      "is_analyst(Finley)",
      "is_intuitive(Finley)",
      "is_analyst(Finley) → (is_intuitive(Finley) ⊕ think_creatively(Finley))",
      "think_creatively(Finley) ⊕ methodical(Finley)",
      "methodical(Finley) → (make_accurate_predictions(Finley) ⊕ solve_complex_cases(Finley))"
    ],
    "background_story": "Finley was a detective known for his meticulous approach to solving mysteries. He never jumped to conclusions, always considering every possibility. When asked if he thought the infamous jewel thief would strike again, Finley would say 'probably', but only after analyzing all the evidence. His cautious demeanor often led to breakthroughs, as he would probably find a crucial clue that others might have overlooked. One case in particular had him stumped, but Finley was probably right in assuming that the key to cracking it lay in an overlooked detail. And indeed, after weeks of investigation, he found the tiny thread that unraveled the entire mystery. Finley's probable hunches and methodical mind made him one of the most respected detectives in the city.",
    "name": "Finley",
    "keyword": "probably",
    "subject_category": "human"
  },
  {
    "facts": [
      "Maeve loves nature.",
      "Maeve lives in a rural area.",
      "Maeve does not keep pets."
    ],
    "facts_fol": [
      "loves_nature(Maeve)",
      "lives_rurally(Maeve)",
      "¬keeps_pets(Maeve)"
    ],
    "rules": [
      "For all people, if they have a green thumb, then they can grow beautiful gardens.",
      "Anyone who can nurture plants has a green thumb.",
      "Maeve tends a garden or nurtures plants.",
      "If Maeve loves nature, then she either tends a garden or raises animals, but not both.",
      "If Maeve lives in a rural area, then she either keeps pets or raises animals (or both)."
    ],
    "rules_fol": [
      "∀x (has_green_thumb(x) → grows_beautiful_gardens(x))",
      "∀x (nurture_plants(x) → has_green_thumb(x))",
      "tends_garden(Maeve) ∨ nurture_plants(Maeve)",
      "loves_nature(Maeve) → (tends_garden(Maeve) ⊕ raises_animals(Maeve))",
      "lives_rurally(Maeve) → (keeps_pets(Maeve) ∨ raises_animals(Maeve))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Maeve cares for flowers, then she has a green thumb.",
      "If a person either prunes trees or waters flowers (but not both), then they can nurture plants.",
      "If a person enjoys flowers and cares for soil, then they tend a garden.",
      "If Maeve cares for creatures, then she will raise animals."
    ],
    "distracting_rules_fol": [
      "cares_flowers(Maeve) → has_green_thumb(Maeve)",
      "∀x ((prunes_trees(x) ⊕ waters_flowers(x)) → nurture_plants(x))",
      "∀x ((enjoys_flowers(x) ∧ cares_for_soil(x)) → tends_garden(x))",
      "cares_for_creatures(Maeve) → raises_animals(Maeve)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Maeve lives in a rural area.",
          "Maeve does not keep pets."
        ],
        "rules": "If Maeve lives in a rural area, then she either keeps pets or raises animals (or both).",
        "conclusion": "Maeve raises animals."
      },
      {
        "facts": [
          "Maeve loves nature.",
          "Maeve raises animals."
        ],
        "rules": "If Maeve loves nature, then she either tends a garden or raises animals, but not both.",
        "conclusion": "Maeve does not tend a garden."
      },
      {
        "facts": [
          "Maeve does not tend a garden."
        ],
        "rules": "Maeve tends a garden or nurtures plants.",
        "conclusion": "Maeve can nurture plants."
      },
      {
        "facts": [
          "Maeve can nurture plants."
        ],
        "rules": "Anyone who can nurture plants has a green thumb.",
        "conclusion": "Maeve has a green thumb."
      },
      {
        "facts": [
          "Maeve has a green thumb."
        ],
        "rules": "For all people, if they have a green thumb, then they can grow beautiful gardens.",
        "conclusion": "Maeve grows beautiful gardens."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "lives_rurally(Maeve)",
          "¬keeps_pets(Maeve)"
        ],
        "rules": "lives_rurally(Maeve) → (keeps_pets(Maeve) ∨ raises_animals(Maeve))",
        "conclusion": "raises_animals(Maeve)"
      },
      {
        "facts": [
          "loves_nature(Maeve)",
          "raises_animals(Maeve)"
        ],
        "rules": "loves_nature(Maeve) → (tends_garden(Maeve) ⊕ raises_animals(Maeve))",
        "conclusion": "¬tends_garden(Maeve)"
      },
      {
        "facts": [
          "¬tends_garden(Maeve)"
        ],
        "rules": "tends_garden(Maeve) ∨ nurture_plants(Maeve)",
        "conclusion": "nurture_plants(Maeve)"
      },
      {
        "facts": [
          "nurture_plants(Maeve)"
        ],
        "rules": "∀x (nurture_plants(x) → has_green_thumb(x))",
        "conclusion": "has_green_thumb(Maeve)"
      },
      {
        "facts": [
          "has_green_thumb(Maeve)"
        ],
        "rules": "∀x (has_green_thumb(x) → grows_beautiful_gardens(x))",
        "conclusion": "grows_beautiful_gardens(Maeve)"
      }
    ],
    "conclusion": "Maeve grows beautiful gardens.",
    "conclusion_fol": "grows_beautiful_gardens(Maeve)",
    "answer": "True",
    "context": [
      "Maeve lives in a rural area.",
      "Maeve does not keep pets.",
      "If Maeve lives in a rural area, then she either keeps pets or raises animals (or both).",
      "Maeve loves nature.",
      "If Maeve loves nature, then she either tends a garden or raises animals, but not both.",
      "Maeve tends a garden or nurtures plants.",
      "Anyone who can nurture plants has a green thumb.",
      "For all people, if they have a green thumb, then they can grow beautiful gardens."
    ],
    "context_fol": [
      "lives_rurally(Maeve)",
      "¬keeps_pets(Maeve)",
      "lives_rurally(Maeve) → (keeps_pets(Maeve) ∨ raises_animals(Maeve))",
      "loves_nature(Maeve)",
      "loves_nature(Maeve) → (tends_garden(Maeve) ⊕ raises_animals(Maeve))",
      "tends_garden(Maeve) ∨ nurture_plants(Maeve)",
      "∀x (nurture_plants(x) → has_green_thumb(x))",
      "∀x (has_green_thumb(x) → grows_beautiful_gardens(x))"
    ],
    "background_story": "Maeve was a gentle soul with a heart full of kindness. She lived a simple life in a small village, surrounded by nature's beauty. Despite her small stature, Maeve had a giant spirit and was often referred to as a 'mite' of a woman, meaning she was tiny but full of energy and determination. She spent her days tending to her garden, where she coaxed even the smallest of plants to grow and thrive. Maeve's green thumb was legendary, and people would come from all around to seek her advice on how to nurture their own gardens. Her motto was 'even the smallest creature can make a big impact,' and she lived by those words, spreading joy and positivity wherever she went.",
    "name": "Maeve",
    "keyword": "mite",
    "subject_category": "person"
  },
  {
    "facts": [
      "Cassandra faces challenges.",
      "Cassandra does not live in rural areas.",
      "Cassandra does not give advice.",
      "Cassandra does not do volunteer work.",
      "Cassandra mentors others."
    ],
    "facts_fol": [
      "faces_challenges(Cassandra)",
      "¬lives_rurally(Cassandra)",
      "¬give_advice(Cassandra)",
      "¬volunteer_work(Cassandra)",
      "mentor_others(Cassandra)"
    ],
    "rules": [
      "If Cassandra experiences disasters and studies engineering, then she can design safe structures.",
      "If someone lives in vulnerable areas and faces challenges, then they can experience disasters.",
      "Cassandra either helps others or studies engineering, but not necessarily both.",
      "If Cassandra either donates her time or gives advice (but not both), then she helps others.",
      "If someone either does volunteer work or mentors others (but not both), then they donate their time."
    ],
    "rules_fol": [
      "(experience_disasters(Cassandra) ∧ study_engineering(Cassandra)) → design_safe_structures(Cassandra)",
      "∀x ((lives_rurally(x) ∧ faces_challenges(x)) → experience_disasters(x))",
      "help_others(Cassandra) ⊕ study_engineering(Cassandra)",
      "(donate_time(Cassandra) ⊕ give_advice(Cassandra)) → help_others(Cassandra)",
      "∀x ((volunteer_work(x) ⊕ mentor_others(x)) → donate_time(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Cassandra either builds homes or experiences disasters.",
      "Cassandra either builds homes or studies engineering.",
      "If Cassandra is a specialist, then she either helps others or teaches others, but not both.",
      "If Cassandra cares deeply, then she donates her time and shares her knowledge."
    ],
    "distracting_rules_fol": [
      "builds_homes(Cassandra) ∨ experience_disasters(Cassandra)",
      "builds_homes(Cassandra) ∨ study_engineering(Cassandra)",
      "is_specialist(Cassandra) → (help_others(Cassandra) ⊕ teach_others(Cassandra))",
      "care_deeply(Cassandra) → (donate_time(Cassandra) ∧ share_knowledge(Cassandra))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Cassandra does not do volunteer work.",
          "Cassandra mentors others."
        ],
        "rules": "If someone either does volunteer work or mentors others (but not both), then they donate their time.",
        "conclusion": "Cassandra donates her time."
      },
      {
        "facts": [
          "Cassandra donates her time.",
          "Cassandra does not give advice."
        ],
        "rules": "If Cassandra either donates her time or gives advice (but not both), then she helps others.",
        "conclusion": "Cassandra helps others."
      },
      {
        "facts": [
          "Cassandra helps others."
        ],
        "rules": "Cassandra either helps others or studies engineering, but not necessarily both.",
        "conclusion": "Cassandra does not study engineering."
      },
      {
        "facts": [
          "Cassandra does not live in rural areas.",
          "Cassandra faces challenges."
        ],
        "rules": "If someone lives in vulnerable areas and faces challenges, then they can experience disasters.",
        "conclusion": null
      },
      {
        "facts": [
          "Cassandra does not study engineering."
        ],
        "rules": "If Cassandra experiences disasters and studies engineering, then she can design safe structures.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬volunteer_work(Cassandra)",
          "mentor_others(Cassandra)"
        ],
        "rules": "∀x ((volunteer_work(x) ⊕ mentor_others(x)) → donate_time(x))",
        "conclusion": "donate_time(Cassandra)"
      },
      {
        "facts": [
          "donate_time(Cassandra)",
          "¬give_advice(Cassandra)"
        ],
        "rules": "(donate_time(Cassandra) ⊕ give_advice(Cassandra)) → help_others(Cassandra)",
        "conclusion": "help_others(Cassandra)"
      },
      {
        "facts": [
          "help_others(Cassandra)"
        ],
        "rules": "help_others(Cassandra) ⊕ study_engineering(Cassandra)",
        "conclusion": "¬study_engineering(Cassandra)"
      },
      {
        "facts": [
          "¬lives_rurally(Cassandra)",
          "faces_challenges(Cassandra)"
        ],
        "rules": "∀x ((lives_rurally(x) ∧ faces_challenges(x)) → experience_disasters(x))",
        "conclusion": null
      },
      {
        "facts": [
          "¬study_engineering(Cassandra)"
        ],
        "rules": "(experience_disasters(Cassandra) ∧ study_engineering(Cassandra)) → design_safe_structures(Cassandra)",
        "conclusion": null
      }
    ],
    "conclusion": "Cassandra cannot design safe structures.",
    "conclusion_fol": "¬design_safe_structures(Cassandra)",
    "answer": "Uncertain",
    "context": [
      "Cassandra does not do volunteer work.",
      "Cassandra mentors others.",
      "If someone either does volunteer work or mentors others (but not both), then they donate their time.",
      "Cassandra does not give advice.",
      "If Cassandra either donates her time or gives advice (but not both), then she helps others.",
      "Cassandra either helps others or studies engineering, but not necessarily both.",
      "Cassandra does not live in rural areas.",
      "Cassandra faces challenges.",
      "If someone lives in vulnerable areas and faces challenges, then they can experience disasters.",
      "If Cassandra experiences disasters and studies engineering, then she can design safe structures."
    ],
    "context_fol": [
      "¬volunteer_work(Cassandra)",
      "mentor_others(Cassandra)",
      "∀x ((volunteer_work(x) ⊕ mentor_others(x)) → donate_time(x))",
      "¬give_advice(Cassandra)",
      "(donate_time(Cassandra) ⊕ give_advice(Cassandra)) → help_others(Cassandra)",
      "help_others(Cassandra) ⊕ study_engineering(Cassandra)",
      "¬lives_rurally(Cassandra)",
      "faces_challenges(Cassandra)",
      "∀x ((lives_rurally(x) ∧ faces_challenges(x)) → experience_disasters(x))",
      "(experience_disasters(Cassandra) ∧ study_engineering(Cassandra)) → design_safe_structures(Cassandra)"
    ],
    "background_story": "Cassandra was a brilliant engineer known for her innovative designs in structural integrity. She specialized in creating noncollapsible frameworks for emergency shelters and disaster relief housing. Cassandra's passion for her work stemmed from her childhood experiences living in areas prone to natural disasters. Witnessing the devastation and loss of life due to collapsing structures, she dedicated her career to ensuring that such tragedies could be mitigated. Her noncollapsible designs have been implemented globally, saving countless lives during hurricanes, earthquakes, and floods. Cassandra's work is a testament to the impact of dedication and expertise in making the world a safer place.",
    "name": "Cassandra",
    "keyword": "noncollapsible",
    "subject_category": "human"
  },
  {
    "facts": [
      "Ozzy is precise.",
      "Ozzy does not solve puzzles.",
      "Ozzy does not code securely."
    ],
    "facts_fol": [
      "is_precise(Ozzy)",
      "¬solves_puzzles(Ozzy)",
      "¬codes_securely(Ozzy)"
    ],
    "rules": [
      "If Ozzy is mathematical, then he is either innovative or influential, but not both.",
      "Ozzy either solves puzzles or has a mathematical mind.",
      "If Ozzy is a cryptographer, then he is either influential or an expert, but not both.",
      "If Ozzy is precise, then he is not necessarily an expert, and if Ozzy is an expert, then he is not necessarily precise.",
      "Ozzy either codes securely or is a cryptographer."
    ],
    "rules_fol": [
      "mathematical(Ozzy) → (innovative(Ozzy) ⊕ influential(Ozzy))",
      "solves_puzzles(Ozzy) ∨ mathematical(Ozzy)",
      "cryptographer(Ozzy) → (influential(Ozzy) ⊕ expert(Ozzy))",
      "is_precise(Ozzy) ⊕ expert(Ozzy)",
      "codes_securely(Ozzy) ∨ cryptographer(Ozzy)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If someone loves numbers and excels at calculations, then they are mathematical.",
      "If Ozzy is logical, then he is either influential or creative, but not both.",
      "If Ozzy develops algorithms, then he is either an expert or advances his field.",
      "If Ozzy has an analytical mind, then he is either a cryptographer or develops algorithms."
    ],
    "distracting_rules_fol": [
      "∀x ((loves_numbers(x) ∧ excels_calculations(x)) → mathematical(x))",
      "logical(Ozzy) → (influential(Ozzy) ⊕ creative(Ozzy))",
      "develops_algorithms(Ozzy) → (expert(Ozzy) ∨ advances_field(Ozzy))",
      "analytical_mind(Ozzy) → (cryptographer(Ozzy) ∨ develops_algorithms(Ozzy))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Ozzy does not code securely."
        ],
        "rules": "Ozzy either codes securely or is a cryptographer.",
        "conclusion": "Ozzy is a cryptographer."
      },
      {
        "facts": [
          "Ozzy is precise."
        ],
        "rules": "If Ozzy is precise, then he is not necessarily an expert, and if Ozzy is an expert, then he is not necessarily precise.",
        "conclusion": "Ozzy is not an expert."
      },
      {
        "facts": [
          "Ozzy is a cryptographer.",
          "Ozzy is not an expert."
        ],
        "rules": "If Ozzy is a cryptographer, then he is either influential or an expert, but not both.",
        "conclusion": "Ozzy is influential."
      },
      {
        "facts": [
          "Ozzy does not solve puzzles."
        ],
        "rules": "Ozzy either solves puzzles or has a mathematical mind.",
        "conclusion": "Ozzy is mathematical."
      },
      {
        "facts": [
          "Ozzy is mathematical.",
          "Ozzy is influential."
        ],
        "rules": "If Ozzy is mathematical, then he is either innovative or influential, but not both.",
        "conclusion": "Ozzy is innovative."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬codes_securely(Ozzy)"
        ],
        "rules": "codes_securely(Ozzy) ∨ cryptographer(Ozzy)",
        "conclusion": "cryptographer(Ozzy)"
      },
      {
        "facts": [
          "is_precise(Ozzy)"
        ],
        "rules": "is_precise(Ozzy) ⊕ expert(Ozzy)",
        "conclusion": "¬expert(Ozzy)"
      },
      {
        "facts": [
          "cryptographer(Ozzy)",
          "¬expert(Ozzy)"
        ],
        "rules": "cryptographer(Ozzy) → (influential(Ozzy) ⊕ expert(Ozzy))",
        "conclusion": "influential(Ozzy)"
      },
      {
        "facts": [
          "¬solves_puzzles(Ozzy)"
        ],
        "rules": "solves_puzzles(Ozzy) ∨ mathematical(Ozzy)",
        "conclusion": "mathematical(Ozzy)"
      },
      {
        "facts": [
          "mathematical(Ozzy)",
          "influential(Ozzy)"
        ],
        "rules": "mathematical(Ozzy) → (innovative(Ozzy) ⊕ influential(Ozzy))",
        "conclusion": "innovative(Ozzy)"
      }
    ],
    "conclusion": "Ozzy is innovative.",
    "conclusion_fol": "innovative(Ozzy)",
    "answer": "False",
    "context": [
      "Ozzy does not code securely.",
      "Ozzy either codes securely or is a cryptographer.",
      "Ozzy is precise.",
      "If Ozzy is precise, then he is not necessarily an expert, and if Ozzy is an expert, then he is not necessarily precise.",
      "If Ozzy is a cryptographer, then he is either influential or an expert, but not both.",
      "Ozzy does not solve puzzles.",
      "Ozzy either solves puzzles or has a mathematical mind.",
      "If Ozzy is mathematical, then he is either innovative or influential, but not both."
    ],
    "context_fol": [
      "¬codes_securely(Ozzy)",
      "codes_securely(Ozzy) ∨ cryptographer(Ozzy)",
      "is_precise(Ozzy)",
      "is_precise(Ozzy) ⊕ expert(Ozzy)",
      "cryptographer(Ozzy) → (influential(Ozzy) ⊕ expert(Ozzy))",
      "¬solves_puzzles(Ozzy)",
      "solves_puzzles(Ozzy) ∨ mathematical(Ozzy)",
      "mathematical(Ozzy) → (innovative(Ozzy) ⊕ influential(Ozzy))"
    ],
    "background_story": "Ozzy was a child prodigy with an insatiable passion for mathematics. From a young age, he spent hours poring over advanced textbooks and solving complex equations. As he grew older, Ozzy's fascination with numbers only deepened, leading him to compete in international math competitions. His unique approach to problem-solving earned him numerous awards and recognition from the academic community. Ozzy's love for mathematics eventually led him to pursue a career in cryptography, where he used his exceptional skills to develop unbreakable codes and algorithms. His work had a profound impact on the field of cybersecurity, making him a respected figure among his peers and a role model for aspiring mathematicians.",
    "name": "Ozzy",
    "keyword": "mathematics",
    "subject_category": "human"
  },
  {
    "facts": [
      "Kevin is a good dentist.",
      "Kevin fixes teeth.",
      "Kevin cares for patients.",
      "Kevin works with precision.",
      "Kevin is an experienced professional.",
      "Kevin enhances oral health.",
      "Kevin is a dedicated professional.",
      "Kevin solves complex problems."
    ],
    "facts_fol": [
      "good_dentist(Kevin)",
      "fix_teeth(Kevin)",
      "care_patient(Kevin)",
      "work_precise(Kevin)",
      "experienced_professional(Kevin)",
      "enhance_oral_health(Kevin)",
      "dedicated_professional(Kevin)",
      "solve_complex_problems(Kevin)"
    ],
    "rules": [
      "If Kevin is a skilled dentist, then he either fixes teeth or improves mastic function, but not both.",
      "If Kevin cares for patients, then he is a skilled dentist and uses advanced techniques.",
      "If Kevin helps people, then he uses advanced techniques and works with precision.",
      "If Kevin is an experienced professional, then he either enhances oral health or restores smiles, but not both.",
      "If Kevin is a dedicated professional who solves complex problems, then he helps people."
    ],
    "rules_fol": [
      "skilled_dentist(Kevin) → (fix_teeth(Kevin) ⊕ improve_mastic_function(Kevin))",
      "care_patient(Kevin) → (skilled_dentist(Kevin) ∧ use_advanced_techniques(Kevin))",
      "help_people(Kevin) → (use_advanced_techniques(Kevin) ∧ work_precise(Kevin))",
      "experienced_professional(Kevin) → (enhance_oral_health(Kevin) ⊕ restore_smiles(Kevin))",
      "dedicated_professional(Kevin) → (solve_complex_problems(Kevin) ∧ help_people(Kevin))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Kevin studies medicine, then he either improves mastic function or creates prosthetics (or both).",
      "If Kevin masters prosthesis, then he is a skilled dentist.",
      "For all humans, if they either create prosthetics or design implants (but not both), then they use advanced techniques.",
      "Anyone who fixes gums will restore smiles.",
      "If Kevin is a medical specialist, then he either helps people or conducts research, but not both."
    ],
    "distracting_rules_fol": [
      "study_medicine(Kevin) → (improve_mastic_function(Kevin) ∨ create_prosthetics(Kevin))",
      "master_prosthesis(Kevin) → skilled_dentist(Kevin)",
      "∀x ((create_prosthetics(x) ⊕ design_implants(x)) → use_advanced_techniques(x))",
      "∀x (fix_gums(x) → restore_smiles(x))",
      "medical_specialist(Kevin) → (help_people(Kevin) ⊕ conduct_research(Kevin))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Kevin is a dedicated professional.",
          "Kevin solves complex problems."
        ],
        "rules": "If Kevin is a dedicated professional who solves complex problems, then he helps people.",
        "conclusion": "Kevin helps people."
      },
      {
        "facts": [
          "Kevin is an experienced professional.",
          "Kevin enhances oral health."
        ],
        "rules": "If Kevin is an experienced professional, then he either enhances oral health or restores smiles, but not both.",
        "conclusion": "Kevin does not restore smiles."
      },
      {
        "facts": [
          "Kevin helps people.",
          "Kevin works with precision."
        ],
        "rules": "If Kevin helps people, then he uses advanced techniques and works with precision.",
        "conclusion": "Kevin uses advanced techniques."
      },
      {
        "facts": [
          "Kevin cares for patients.",
          "Kevin uses advanced techniques."
        ],
        "rules": "If Kevin cares for patients, then he is a skilled dentist and uses advanced techniques.",
        "conclusion": "Kevin is a skilled dentist."
      },
      {
        "facts": [
          "Kevin is a skilled dentist.",
          "Kevin fixes teeth."
        ],
        "rules": "If Kevin is a skilled dentist, then he either fixes teeth or improves mastic function, but not both.",
        "conclusion": "Kevin does not improve mastic function."
      },
      {
        "facts": [
          "Kevin is a good dentist.",
          "Kevin does not restore smiles.",
          "Kevin does not improve mastic function."
        ],
        "rules": null,
        "conclusion": "If Kevin is a good dentist, then he either restores smiles or improves mastic function (or both)."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "dedicated_professional(Kevin)",
          "solve_complex_problems(Kevin)"
        ],
        "rules": "dedicated_professional(Kevin) → (solve_complex_problems(Kevin) ∧ help_people(Kevin))",
        "conclusion": "help_people(Kevin)"
      },
      {
        "facts": [
          "experienced_professional(Kevin)",
          "enhance_oral_health(Kevin)"
        ],
        "rules": "experienced_professional(Kevin) → (enhance_oral_health(Kevin) ⊕ restore_smiles(Kevin))",
        "conclusion": "¬restore_smiles(Kevin)"
      },
      {
        "facts": [
          "help_people(Kevin)",
          "work_precise(Kevin)"
        ],
        "rules": "help_people(Kevin) → (use_advanced_techniques(Kevin) ∧ work_precise(Kevin))",
        "conclusion": "use_advanced_techniques(Kevin)"
      },
      {
        "facts": [
          "care_patient(Kevin)",
          "use_advanced_techniques(Kevin)"
        ],
        "rules": "care_patient(Kevin) → (skilled_dentist(Kevin) ∧ use_advanced_techniques(Kevin))",
        "conclusion": "skilled_dentist(Kevin)"
      },
      {
        "facts": [
          "skilled_dentist(Kevin)",
          "fix_teeth(Kevin)"
        ],
        "rules": "skilled_dentist(Kevin) → (fix_teeth(Kevin) ⊕ improve_mastic_function(Kevin))",
        "conclusion": "¬improve_mastic_function(Kevin)"
      },
      {
        "facts": [
          "good_dentist(Kevin)",
          "¬restore_smiles(Kevin)",
          "¬improve_mastic_function(Kevin)"
        ],
        "rules": null,
        "conclusion": "good_dentist(Kevin) → (restore_smiles(Kevin) ∨ improve_mastic_function(Kevin))"
      }
    ],
    "conclusion": "If Kevin is a good dentist, then he either restores smiles or improves mastic function (or both).",
    "conclusion_fol": "good_dentist(Kevin) → (restore_smiles(Kevin) ∨ improve_mastic_function(Kevin))",
    "answer": "False",
    "context": [
      "Kevin is a dedicated professional.",
      "Kevin solves complex problems.",
      "If Kevin is a dedicated professional who solves complex problems, then he helps people.",
      "Kevin is an experienced professional.",
      "Kevin enhances oral health.",
      "If Kevin is an experienced professional, then he either enhances oral health or restores smiles, but not both.",
      "Kevin works with precision.",
      "If Kevin helps people, then he uses advanced techniques and works with precision.",
      "Kevin cares for patients.",
      "If Kevin cares for patients, then he is a skilled dentist and uses advanced techniques.",
      "Kevin fixes teeth.",
      "If Kevin is a skilled dentist, then he either fixes teeth or improves mastic function, but not both.",
      "Kevin is a good dentist."
    ],
    "context_fol": [
      "dedicated_professional(Kevin)",
      "solve_complex_problems(Kevin)",
      "dedicated_professional(Kevin) → (solve_complex_problems(Kevin) ∧ help_people(Kevin))",
      "experienced_professional(Kevin)",
      "enhance_oral_health(Kevin)",
      "experienced_professional(Kevin) → (enhance_oral_health(Kevin) ⊕ restore_smiles(Kevin))",
      "work_precise(Kevin)",
      "help_people(Kevin) → (use_advanced_techniques(Kevin) ∧ work_precise(Kevin))",
      "care_patient(Kevin)",
      "care_patient(Kevin) → (skilled_dentist(Kevin) ∧ use_advanced_techniques(Kevin))",
      "fix_teeth(Kevin)",
      "skilled_dentist(Kevin) → (fix_teeth(Kevin) ⊕ improve_mastic_function(Kevin))",
      "good_dentist(Kevin)"
    ],
    "background_story": "Kevin was a skilled dentist with a passion for restoring smiles. He spent years perfecting his craft, particularly in the art of mastic rehabilitation. Kevin's patients adored him for his gentle touch and meticulous attention to detail. One day, a young patient named Sarah came to him with a rare condition that made it difficult for her to chew. Kevin took on the challenge, using his expertise in mastic function to create a customized prosthetic that allowed Sarah to eat and speak with ease. Her newfound ability to masticate food properly transformed her life, and she credited Kevin for giving her a second chance. Kevin's dedication to his work and his patients earned him a reputation as one of the top dentists in the field of mastic restoration.",
    "name": "Kevin",
    "keyword": "mastic",
    "subject_category": "human"
  },
  {
    "facts": [
      "Autumn is not resourceful.",
      "Autumn is not creative.",
      "Autumn clutters space.",
      "Autumn is clumsy.",
      "Autumn experiments frequently."
    ],
    "facts_fol": [
      "¬resourceful(Autumn)",
      "¬creative(Autumn)",
      "clutters_space(Autumn)",
      "is_clumsy(Autumn)",
      "experiments_frequently(Autumn)"
    ],
    "rules": [
      "If Autumn either clutters space or spills things (but not both), then she is messy.",
      "If Autumn is clumsy, then she either spills things or makes mistakes (but not both).",
      "Anyone who acts rashly or experiments frequently can make mistakes."
    ],
    "rules_fol": [
      "(clutters_space(Autumn) ⊕ spills_things(Autumn)) → messy(Autumn)",
      "is_clumsy(Autumn) → (spills_things(Autumn) ⊕ makes_mistakes(Autumn))",
      "∀x ((acts_rashly(x) ∨ experiments_frequently(x)) → makes_mistakes(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Autumn either plays with glue or uses tape frequently (but not both), then she is messy.",
      "If Autumn plays roughly, then she will spill things.",
      "If someone either trips often or drops objects (but not both), then they make mistakes."
    ],
    "distracting_rules_fol": [
      "(plays_with_glue(Autumn) ⊕ uses_tape_frequently(Autumn)) → messy(Autumn)",
      "plays_roughly(Autumn) → spills_things(Autumn)",
      "∀x ((trips_often(x) ⊕ drops_objects(x)) → makes_mistakes(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Autumn experiments frequently."
        ],
        "rules": "Anyone who acts rashly or experiments frequently can make mistakes.",
        "conclusion": "Autumn makes mistakes."
      },
      {
        "facts": [
          "Autumn is clumsy.",
          "Autumn makes mistakes."
        ],
        "rules": "If Autumn is clumsy, then she either spills things or makes mistakes (but not both).",
        "conclusion": "Autumn does not spill things."
      },
      {
        "facts": [
          "Autumn clutters space.",
          "Autumn does not spill things."
        ],
        "rules": "If Autumn either clutters space or spills things (but not both), then she is messy.",
        "conclusion": "Autumn is messy."
      },
      {
        "facts": [
          "Autumn is not creative.",
          "Autumn is messy.",
          "Autumn is not resourceful."
        ],
        "rules": null,
        "conclusion": "If Autumn is either creative or messy (but not both), then she is resourceful."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "experiments_frequently(Autumn)"
        ],
        "rules": "∀x ((acts_rashly(x) ∨ experiments_frequently(x)) → makes_mistakes(x))",
        "conclusion": "makes_mistakes(Autumn)"
      },
      {
        "facts": [
          "is_clumsy(Autumn)",
          "makes_mistakes(Autumn)"
        ],
        "rules": "is_clumsy(Autumn) → (spills_things(Autumn) ⊕ makes_mistakes(Autumn))",
        "conclusion": "¬spills_things(Autumn)"
      },
      {
        "facts": [
          "clutters_space(Autumn)",
          "¬spills_things(Autumn)"
        ],
        "rules": "(clutters_space(Autumn) ⊕ spills_things(Autumn)) → messy(Autumn)",
        "conclusion": "messy(Autumn)"
      },
      {
        "facts": [
          "¬creative(Autumn)",
          "messy(Autumn)",
          "¬resourceful(Autumn)"
        ],
        "rules": null,
        "conclusion": "(creative(Autumn) ⊕ messy(Autumn)) → resourceful(Autumn)"
      }
    ],
    "conclusion": "If Autumn is either creative or messy (but not both), then she is resourceful.",
    "conclusion_fol": "(creative(Autumn) ⊕ messy(Autumn)) → resourceful(Autumn)",
    "answer": "False",
    "context": [
      "Autumn experiments frequently.",
      "Anyone who acts rashly or experiments frequently can make mistakes.",
      "Autumn is clumsy.",
      "If Autumn is clumsy, then she either spills things or makes mistakes (but not both).",
      "Autumn clutters space.",
      "If Autumn either clutters space or spills things (but not both), then she is messy.",
      "Autumn is not creative.",
      "Autumn is not resourceful."
    ],
    "context_fol": [
      "experiments_frequently(Autumn)",
      "∀x ((acts_rashly(x) ∨ experiments_frequently(x)) → makes_mistakes(x))",
      "is_clumsy(Autumn)",
      "is_clumsy(Autumn) → (spills_things(Autumn) ⊕ makes_mistakes(Autumn))",
      "clutters_space(Autumn)",
      "(clutters_space(Autumn) ⊕ spills_things(Autumn)) → messy(Autumn)",
      "¬creative(Autumn)",
      "¬resourceful(Autumn)"
    ],
    "background_story": "Autumn was a quirky and creative child who loved arts and crafts. One day, while working on a project, she accidentally got her favorite scarf gummed up with a sticky mixture of glue, tape, and leftover adhesive from her scrapbook. The mess was a disaster, with strings of glue sticking her hair, clothes, and even the furniture together. Despite the chaos, Autumn couldn't help but laugh at the absurdity of the situation. With the help of her patient mother, she slowly untangled the mess, learning a valuable lesson about the importance of cleaning up as she went. The incident became a funny family story, symbolizing Autumn's carefree and artistic spirit, even in the face of a gummed-up mess.",
    "name": "Autumn",
    "keyword": "gummed",
    "subject_category": "human"
  },
  {
    "facts": [
      "Addilyn does not overcome obstacles.",
      "Addilyn battles inner demons.",
      "Addilyn does not think outside the box.",
      "Addilyn sees beyond the ordinary."
    ],
    "facts_fol": [
      "¬overcome_obstacles(Addilyn)",
      "battles_demons(Addilyn)",
      "¬thinks_outside(Addilyn)",
      "sees_beyond(Addilyn)"
    ],
    "rules": [
      "For all humans, if someone is a struggling artist, then they either produce debased work or show glimpses of brilliance (or both).",
      "If Addilyn faces adversity, she may not necessarily show glimpses of brilliance, and vice versa.",
      "Every creative person either overcomes obstacles or faces adversity (or both).",
      "If Addilyn battles inner demons, then she is a struggling artist.",
      "If Addilyn either thinks outside the box or sees beyond the ordinary (but not both), then she is a creative person."
    ],
    "rules_fol": [
      "∀x (struggling_artist(x) → (produce_debased_work(x) ∨ show_glimpses_of_brilliance(x)))",
      "faces_adversity(Addilyn) ⊕ show_glimpses_of_brilliance(Addilyn)",
      "∀x (creative_person(x) → (overcome_obstacles(x) ∨ faces_adversity(x)))",
      "battles_demons(Addilyn) → struggling_artist(Addilyn)",
      "(thinks_outside(Addilyn) ⊕ sees_beyond(Addilyn)) → creative_person(Addilyn)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "All talented individuals who work hard will show glimpses of brilliance.",
      "If Addilyn has talent, then she faces adversity and seeks redemption.",
      "If Addilyn experiences hardship, then she either finds inspiration or is a struggling artist, but not both.",
      "Anyone who expresses emotion through their work is a creative person."
    ],
    "distracting_rules_fol": [
      "∀x (has_talent(x) → (work_hard(x) ∧ show_glimpses_of_brilliance(x)))",
      "has_talent(Addilyn) → (faces_adversity(Addilyn) ∧ seeks_redemption(Addilyn))",
      "experiences_hardship(Addilyn) → (finds_inspiration(Addilyn) ⊕ struggling_artist(Addilyn))",
      "∀x (expresses_emotion(x) → creative_person(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Addilyn does not think outside the box.",
          "Addilyn sees beyond the ordinary."
        ],
        "rules": "If Addilyn either thinks outside the box or sees beyond the ordinary (but not both), then she is a creative person.",
        "conclusion": "Addilyn is a creative person."
      },
      {
        "facts": [
          "Addilyn battles inner demons."
        ],
        "rules": "If Addilyn battles inner demons, then she is a struggling artist.",
        "conclusion": "Addilyn is a struggling artist."
      },
      {
        "facts": [
          "Addilyn is a creative person.",
          "Addilyn does not overcome obstacles."
        ],
        "rules": "Every creative person either overcomes obstacles or faces adversity (or both).",
        "conclusion": "Addilyn faces adversity."
      },
      {
        "facts": [
          "Addilyn faces adversity."
        ],
        "rules": "If Addilyn faces adversity, she may not necessarily show glimpses of brilliance, and vice versa.",
        "conclusion": "Addilyn does not show glimpses of brilliance."
      },
      {
        "facts": [
          "Addilyn is a struggling artist.",
          "Addilyn does not show glimpses of brilliance."
        ],
        "rules": "For all humans, if someone is a struggling artist, then they either produce debased work or show glimpses of brilliance (or both).",
        "conclusion": "Addilyn does not produce debased work."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬thinks_outside(Addilyn)",
          "sees_beyond(Addilyn)"
        ],
        "rules": "(thinks_outside(Addilyn) ⊕ sees_beyond(Addilyn)) → creative_person(Addilyn)",
        "conclusion": "creative_person(Addilyn)"
      },
      {
        "facts": [
          "battles_demons(Addilyn)"
        ],
        "rules": "battles_demons(Addilyn) → struggling_artist(Addilyn)",
        "conclusion": "struggling_artist(Addilyn)"
      },
      {
        "facts": [
          "creative_person(Addilyn)",
          "¬overcome_obstacles(Addilyn)"
        ],
        "rules": "∀x (creative_person(x) → (overcome_obstacles(x) ∨ faces_adversity(x)))",
        "conclusion": "faces_adversity(Addilyn)"
      },
      {
        "facts": [
          "faces_adversity(Addilyn)"
        ],
        "rules": "faces_adversity(Addilyn) ⊕ show_glimpses_of_brilliance(Addilyn)",
        "conclusion": "¬show_glimpses_of_brilliance(Addilyn)"
      },
      {
        "facts": [
          "struggling_artist(Addilyn)",
          "¬show_glimpses_of_brilliance(Addilyn)"
        ],
        "rules": "∀x (struggling_artist(x) → (produce_debased_work(x) ∨ show_glimpses_of_brilliance(x)))",
        "conclusion": "¬produce_debased_work(Addilyn)"
      }
    ],
    "conclusion": "Addilyn does not produce debased work.",
    "conclusion_fol": "¬produce_debased_work(Addilyn)",
    "answer": "False",
    "context": [
      "Addilyn does not think outside the box.",
      "Addilyn sees beyond the ordinary.",
      "If Addilyn either thinks outside the box or sees beyond the ordinary (but not both), then she is a creative person.",
      "Addilyn battles inner demons.",
      "If Addilyn battles inner demons, then she is a struggling artist.",
      "Addilyn does not overcome obstacles.",
      "Every creative person either overcomes obstacles or faces adversity (or both).",
      "If Addilyn faces adversity, she may not necessarily show glimpses of brilliance, and vice versa.",
      "For all humans, if someone is a struggling artist, then they either produce debased work or show glimpses of brilliance (or both)."
    ],
    "context_fol": [
      "¬thinks_outside(Addilyn)",
      "sees_beyond(Addilyn)",
      "(thinks_outside(Addilyn) ⊕ sees_beyond(Addilyn)) → creative_person(Addilyn)",
      "battles_demons(Addilyn)",
      "battles_demons(Addilyn) → struggling_artist(Addilyn)",
      "¬overcome_obstacles(Addilyn)",
      "∀x (creative_person(x) → (overcome_obstacles(x) ∨ faces_adversity(x)))",
      "faces_adversity(Addilyn) ⊕ show_glimpses_of_brilliance(Addilyn)",
      "∀x (struggling_artist(x) → (produce_debased_work(x) ∨ show_glimpses_of_brilliance(x)))"
    ],
    "background_story": "Addilyn was once a renowned artist, celebrated for her thought-provoking sculptures that challenged societal norms. However, a series of poor life choices and a crippling addiction led her down a path of self-destruction. Her work, which was once a reflection of her genius, became debased and lost its former depth. As her addiction worsened, Addilyn found herself creating pieces that were mere shadows of her former work, lacking the passion and conviction that once defined her. Despite her downfall, there were glimpses of her former brilliance, and those who knew her held onto the hope that she would one day reclaim her former glory and rise above the debased state she had sunk to.",
    "name": "Addilyn",
    "keyword": "debased",
    "subject_category": "human"
  },
  {
    "facts": [
      "Khari is creative.",
      "Khari builds communities.",
      "Khari founds a nonprofit."
    ],
    "facts_fol": [
      "creative(Khari)",
      "build_communities(Khari)",
      "founds_nonprofit(Khari)"
    ],
    "rules": [
      "If Khari is visionary, then he either improves lives or inspires others, but not both.",
      "If Khari is creative, then he inspires others and builds communities.",
      "Khari either designs homes or is visionary.",
      "A person either founds a nonprofit or designs homes, but not necessarily both."
    ],
    "rules_fol": [
      "visionary(Khari) → (improve_lives(Khari) ⊕ inspire_others(Khari))",
      "creative(Khari) → (inspire_others(Khari) ∧ build_communities(Khari))",
      "designs_homes(Khari) ∨ visionary(Khari)",
      "∀x (founds_nonprofit(x) ⊕ designs_homes(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "All individuals who lead by example inspire others and drive innovation.",
      "Khari either leads projects or is visionary.",
      "Khari either builds houses or designs homes."
    ],
    "distracting_rules_fol": [
      "∀x (lead_by_example(x) → (inspire_others(x) ∧ drive_innovation(x)))",
      "leads_projects(Khari) ∨ visionary(Khari)",
      "builds_houses(Khari) ∨ designs_homes(Khari)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Khari founds a nonprofit."
        ],
        "rules": "A person either founds a nonprofit or designs homes, but not necessarily both.",
        "conclusion": "Khari does not design homes."
      },
      {
        "facts": [
          "Khari does not design homes."
        ],
        "rules": "Khari either designs homes or is visionary.",
        "conclusion": "Khari is visionary."
      },
      {
        "facts": [
          "Khari is creative.",
          "Khari builds communities."
        ],
        "rules": "If Khari is creative, then he inspires others and builds communities.",
        "conclusion": "Khari inspires others."
      },
      {
        "facts": [
          "Khari is visionary.",
          "Khari inspires others."
        ],
        "rules": "If Khari is visionary, then he either improves lives or inspires others, but not both.",
        "conclusion": "Khari does not improve lives."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "founds_nonprofit(Khari)"
        ],
        "rules": "∀x (founds_nonprofit(x) ⊕ designs_homes(x))",
        "conclusion": "¬designs_homes(Khari)"
      },
      {
        "facts": [
          "¬designs_homes(Khari)"
        ],
        "rules": "designs_homes(Khari) ∨ visionary(Khari)",
        "conclusion": "visionary(Khari)"
      },
      {
        "facts": [
          "creative(Khari)",
          "build_communities(Khari)"
        ],
        "rules": "creative(Khari) → (inspire_others(Khari) ∧ build_communities(Khari))",
        "conclusion": "inspire_others(Khari)"
      },
      {
        "facts": [
          "visionary(Khari)",
          "inspire_others(Khari)"
        ],
        "rules": "visionary(Khari) → (improve_lives(Khari) ⊕ inspire_others(Khari))",
        "conclusion": "¬improve_lives(Khari)"
      }
    ],
    "conclusion": "Khari does not improve lives.",
    "conclusion_fol": "¬improve_lives(Khari)",
    "answer": "True",
    "context": [
      "Khari founds a nonprofit.",
      "A person either founds a nonprofit or designs homes, but not necessarily both.",
      "Khari either designs homes or is visionary.",
      "Khari is creative.",
      "Khari builds communities.",
      "If Khari is creative, then he inspires others and builds communities.",
      "If Khari is visionary, then he either improves lives or inspires others, but not both."
    ],
    "context_fol": [
      "founds_nonprofit(Khari)",
      "∀x (founds_nonprofit(x) ⊕ designs_homes(x))",
      "designs_homes(Khari) ∨ visionary(Khari)",
      "creative(Khari)",
      "build_communities(Khari)",
      "creative(Khari) → (inspire_others(Khari) ∧ build_communities(Khari))",
      "visionary(Khari) → (improve_lives(Khari) ⊕ inspire_others(Khari))"
    ],
    "background_story": "Khari was a visionary architect with a passion for building sustainable communities. Growing up in a neighborhood plagued by poverty and neglect, he saw firsthand the impact that well-designed buildings could have on people's lives. After completing his degree, Khari founded a non-profit organization focused on constructing eco-friendly, affordable housing. His team worked tirelessly to design and build homes that not only provided shelter but also served as community hubs, fostering connection and growth among residents. Khari's dedication to building more than just structures earned him numerous awards and recognition. His legacy continued to inspire a new generation of architects and community leaders, transforming urban landscapes and improving the lives of countless individuals and families.",
    "name": "Khari",
    "keyword": "building",
    "subject_category": "human"
  },
  {
    "facts": [
      "Aspen is persistent.",
      "Aspen is determined.",
      "Aspen does not seek opportunities.",
      "Aspen does not set goals.",
      "Aspen meets deadlines."
    ],
    "facts_fol": [
      "persistent(Aspen)",
      "is_determined(Aspen)",
      "¬seek_opportunities(Aspen)",
      "¬sets_goals(Aspen)",
      "meets_deadlines(Aspen)"
    ],
    "rules": [
      "For all humans, if a person is persistent, then they will find motivation and produce quality work.",
      "If Aspen faces challenges, then she learns quickly and produces quality work.",
      "If Aspen is determined, then she either takes risks or faces challenges, but not both.",
      "If Aspen is ambitious, then she either takes risks or seeks opportunities, but not both.",
      "If Aspen either sets goals or meets deadlines (but not both), then she is ambitious."
    ],
    "rules_fol": [
      "∀x (persistent(x) → (find_motivation(x) ∧ produce_quality_work(x)))",
      "face_challenges(Aspen) → (learn_fast(Aspen) ∧ produce_quality_work(Aspen))",
      "is_determined(Aspen) → (take_risks(Aspen) ⊕ face_challenges(Aspen))",
      "is_ambitious(Aspen) → (take_risks(Aspen) ⊕ seek_opportunities(Aspen))",
      "(sets_goals(Aspen) ⊕ meets_deadlines(Aspen)) → is_ambitious(Aspen)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Aspen either writes creatively or produces quality work.",
      "If Aspen either overcomes fears or embraces change (but not both), then she faces challenges.",
      "Anyone who feels stuck either takes risks or grows creatively (or both).",
      "Everyone who has passion either creates content or is ambitious (or both)."
    ],
    "distracting_rules_fol": [
      "writes_creatively(Aspen) ∨ produce_quality_work(Aspen)",
      "(overcome_fears(Aspen) ⊕ embraces_change(Aspen)) → face_challenges(Aspen)",
      "∀x (feel_stuck(x) → (take_risks(x) ∨ grow_creatively(x)))",
      "∀x (has_passion(x) → (create_content(x) ∨ is_ambitious(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Aspen does not set goals.",
          "Aspen meets deadlines."
        ],
        "rules": "If Aspen either sets goals or meets deadlines (but not both), then she is ambitious.",
        "conclusion": "Aspen is ambitious."
      },
      {
        "facts": [
          "Aspen is ambitious.",
          "Aspen does not seek opportunities."
        ],
        "rules": "If Aspen is ambitious, then she either takes risks or seeks opportunities, but not both.",
        "conclusion": "Aspen takes risks."
      },
      {
        "facts": [
          "Aspen is determined.",
          "Aspen takes risks."
        ],
        "rules": "If Aspen is determined, then she either takes risks or faces challenges, but not both.",
        "conclusion": "Aspen does not face challenges."
      },
      {
        "facts": [
          "Aspen does not face challenges."
        ],
        "rules": "If Aspen faces challenges, then she learns quickly and produces quality work.",
        "conclusion": null
      },
      {
        "facts": [
          "Aspen is persistent."
        ],
        "rules": "For all humans, if a person is persistent, then they will find motivation and produce quality work.",
        "conclusion": "Aspen finds motivation."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬sets_goals(Aspen)",
          "meets_deadlines(Aspen)"
        ],
        "rules": "(sets_goals(Aspen) ⊕ meets_deadlines(Aspen)) → is_ambitious(Aspen)",
        "conclusion": "is_ambitious(Aspen)"
      },
      {
        "facts": [
          "is_ambitious(Aspen)",
          "¬seek_opportunities(Aspen)"
        ],
        "rules": "is_ambitious(Aspen) → (take_risks(Aspen) ⊕ seek_opportunities(Aspen))",
        "conclusion": "take_risks(Aspen)"
      },
      {
        "facts": [
          "is_determined(Aspen)",
          "take_risks(Aspen)"
        ],
        "rules": "is_determined(Aspen) → (take_risks(Aspen) ⊕ face_challenges(Aspen))",
        "conclusion": "¬face_challenges(Aspen)"
      },
      {
        "facts": [
          "¬face_challenges(Aspen)"
        ],
        "rules": "face_challenges(Aspen) → (learn_fast(Aspen) ∧ produce_quality_work(Aspen))",
        "conclusion": null
      },
      {
        "facts": [
          "persistent(Aspen)"
        ],
        "rules": "∀x (persistent(x) → (find_motivation(x) ∧ produce_quality_work(x)))",
        "conclusion": "find_motivation(Aspen)"
      }
    ],
    "conclusion": "Aspen finds motivation.",
    "conclusion_fol": "find_motivation(Aspen)",
    "answer": "True",
    "context": [
      "Aspen does not set goals.",
      "Aspen meets deadlines.",
      "If Aspen either sets goals or meets deadlines (but not both), then she is ambitious.",
      "Aspen does not seek opportunities.",
      "If Aspen is ambitious, then she either takes risks or seeks opportunities, but not both.",
      "Aspen is determined.",
      "If Aspen is determined, then she either takes risks or faces challenges, but not both.",
      "If Aspen faces challenges, then she learns quickly and produces quality work.",
      "Aspen is persistent.",
      "For all humans, if a person is persistent, then they will find motivation and produce quality work."
    ],
    "context_fol": [
      "¬sets_goals(Aspen)",
      "meets_deadlines(Aspen)",
      "(sets_goals(Aspen) ⊕ meets_deadlines(Aspen)) → is_ambitious(Aspen)",
      "¬seek_opportunities(Aspen)",
      "is_ambitious(Aspen) → (take_risks(Aspen) ⊕ seek_opportunities(Aspen))",
      "is_determined(Aspen)",
      "is_determined(Aspen) → (take_risks(Aspen) ⊕ face_challenges(Aspen))",
      "face_challenges(Aspen) → (learn_fast(Aspen) ∧ produce_quality_work(Aspen))",
      "persistent(Aspen)",
      "∀x (persistent(x) → (find_motivation(x) ∧ produce_quality_work(x)))"
    ],
    "background_story": "Aspen, a talented writer, felt stuck in her small hometown. She had always dreamed of publishing a novel, but after graduating from college, she found herself back in her childhood bedroom, struggling to find inspiration. The familiar surroundings and lack of opportunities made her feel like she was going nowhere. Despite her frustration, Aspen continued to write, pouring her emotions into her stories. One day, she stumbled upon an online writing community, where she connected with fellow authors and found the motivation she needed. With renewed determination, Aspen started working on a new manuscript, and soon, her words began to flow again. She realized that being stuck had given her a unique perspective, and her writing was now more authentic and relatable than ever.",
    "name": "Aspen",
    "keyword": "stuck",
    "subject_category": "human"
  },
  {
    "facts": [
      "Lila is inspired.",
      "Lila seeks feedback.",
      "Lila does not learn quickly.",
      "Lila shares her knowledge."
    ],
    "facts_fol": [
      "inspired(Lila)",
      "seeks_feedback(Lila)",
      "¬learns_quickly(Lila)",
      "shares_knowledge(Lila)"
    ],
    "rules": [
      "If Lila is inspired, then she is either creative or famous, but not both.",
      "Lila is either a humble artist or famous, but not both.",
      "If Lila is talented, then she is either a humble artist or modest, but not both.",
      "If Lila either seeks feedback or learns quickly (but not both), then she is talented.",
      "If Lila shares her knowledge, then she is modest."
    ],
    "rules_fol": [
      "inspired(Lila) → (creative(Lila) ⊕ famous(Lila))",
      "humble_artist(Lila) ⊕ famous(Lila)",
      "talented(Lila) → (humble_artist(Lila) ⊕ modest(Lila))",
      "(seeks_feedback(Lila) ⊕ learns_quickly(Lila)) → talented(Lila)",
      "shares_knowledge(Lila) → modest(Lila)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Anyone who produces a masterpiece or gains recognition can become famous.",
      "If Lila values simplicity and pursues her passion, then she is a humble artist.",
      "If Lila either paints beauty or captures light (but not both), then she is talented.",
      "Lila pursues her passion or is modest."
    ],
    "distracting_rules_fol": [
      "∀x ((produces_masterpiece(x) ∨ gains_recognition(x)) → famous(x))",
      "(values_simplicity(Lila) ∧ pursues_passion(Lila)) → humble_artist(Lila)",
      "(paints_beauty(Lila) ⊕ captures_light(Lila)) → talented(Lila)",
      "pursues_passion(Lila) ∨ modest(Lila)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Lila shares her knowledge."
        ],
        "rules": "If Lila shares her knowledge, then she is modest.",
        "conclusion": "Lila is modest."
      },
      {
        "facts": [
          "Lila seeks feedback.",
          "Lila does not learn quickly."
        ],
        "rules": "If Lila either seeks feedback or learns quickly (but not both), then she is talented.",
        "conclusion": "Lila is talented."
      },
      {
        "facts": [
          "Lila is talented.",
          "Lila is modest."
        ],
        "rules": "If Lila is talented, then she is either a humble artist or modest, but not both.",
        "conclusion": "Lila is not a humble artist."
      },
      {
        "facts": [
          "Lila is not a humble artist."
        ],
        "rules": "Lila is either a humble artist or famous, but not both.",
        "conclusion": "Lila is famous."
      },
      {
        "facts": [
          "Lila is inspired.",
          "Lila is famous."
        ],
        "rules": "If Lila is inspired, then she is either creative or famous, but not both.",
        "conclusion": "Lila is not creative."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "shares_knowledge(Lila)"
        ],
        "rules": "shares_knowledge(Lila) → modest(Lila)",
        "conclusion": "modest(Lila)"
      },
      {
        "facts": [
          "seeks_feedback(Lila)",
          "¬learns_quickly(Lila)"
        ],
        "rules": "(seeks_feedback(Lila) ⊕ learns_quickly(Lila)) → talented(Lila)",
        "conclusion": "talented(Lila)"
      },
      {
        "facts": [
          "talented(Lila)",
          "modest(Lila)"
        ],
        "rules": "talented(Lila) → (humble_artist(Lila) ⊕ modest(Lila))",
        "conclusion": "¬humble_artist(Lila)"
      },
      {
        "facts": [
          "¬humble_artist(Lila)"
        ],
        "rules": "humble_artist(Lila) ⊕ famous(Lila)",
        "conclusion": "famous(Lila)"
      },
      {
        "facts": [
          "inspired(Lila)",
          "famous(Lila)"
        ],
        "rules": "inspired(Lila) → (creative(Lila) ⊕ famous(Lila))",
        "conclusion": "¬creative(Lila)"
      }
    ],
    "conclusion": "Lila is not creative.",
    "conclusion_fol": "¬creative(Lila)",
    "answer": "True",
    "context": [
      "Lila shares her knowledge.",
      "If Lila shares her knowledge, then she is modest.",
      "Lila seeks feedback.",
      "Lila does not learn quickly.",
      "If Lila either seeks feedback or learns quickly (but not both), then she is talented.",
      "If Lila is talented, then she is either a humble artist or modest, but not both.",
      "Lila is either a humble artist or famous, but not both.",
      "Lila is inspired.",
      "If Lila is inspired, then she is either creative or famous, but not both."
    ],
    "context_fol": [
      "shares_knowledge(Lila)",
      "shares_knowledge(Lila) → modest(Lila)",
      "seeks_feedback(Lila)",
      "¬learns_quickly(Lila)",
      "(seeks_feedback(Lila) ⊕ learns_quickly(Lila)) → talented(Lila)",
      "talented(Lila) → (humble_artist(Lila) ⊕ modest(Lila))",
      "humble_artist(Lila) ⊕ famous(Lila)",
      "inspired(Lila)",
      "inspired(Lila) → (creative(Lila) ⊕ famous(Lila))"
    ],
    "background_story": "Lila was a free-spirited artist who spent most of her days exploring the outdoors for inspiration. On one of her hikes, she stumbled upon a hidden glimmer of light peeking through the trees, which she later learned was called a 'gilmer' - a rare, fleeting phenomenon where sunlight filters through water droplets in the air. Captivated by its beauty, Lila became obsessed with capturing the essence of the gilmer in her art. She spent months perfecting a technique that would reflect the gilmer's ethereal glow, eventually creating a stunning series of paintings that gained international recognition. Lila's work not only showcased her talent but also introduced the world to the enchanting beauty of the gilmer, making her a celebrated figure in the art world.",
    "name": "Lila",
    "keyword": "gilmer",
    "subject_category": "human"
  },
  {
    "facts": [
      "Asaiah is wise.",
      "Asaiah does not have insight.",
      "Asaiah shares life experiences.",
      "Asaiah practices yoga.",
      "Asaiah does not seek knowledge."
    ],
    "facts_fol": [
      "wise(Asaiah)",
      "¬has_insight(Asaiah)",
      "share_life_experiences(Asaiah)",
      "practices_yoga(Asaiah)",
      "¬seeks_knowledge(Asaiah)"
    ],
    "rules": [
      "If Asaiah is an elder, then he either offers counsel or teaches meditation, but not both.",
      "A person is either an elder or has insight, but not necessarily both.",
      "If Asaiah practices yoga or studies spirituality, then he can teach meditation.",
      "If Asaiah seeks knowledge, then he either finds inner peace or studies spirituality (or both)."
    ],
    "rules_fol": [
      "is_elder(Asaiah) → (offer_counsel(Asaiah) ⊕ teach_meditation(Asaiah))",
      "∀x (has_insight(x) ⊕ is_elder(x))",
      "(practices_yoga(Asaiah) ∨ studies_spirituality(Asaiah)) → teach_meditation(Asaiah)",
      "seeks_knowledge(Asaiah) → (finds_inner_peace(Asaiah) ∨ studies_spirituality(Asaiah))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Asaiah offers counsel because he listens actively.",
      "If Asaiah has knowledge or shows compassion, then he is an elder.",
      "If Asaiah reads ancient texts and guides others, then he can teach meditation.",
      "Any person who reads ancient texts or seeks truth can study spirituality."
    ],
    "distracting_rules_fol": [
      "listens_actively(Asaiah) → offer_counsel(Asaiah)",
      "(has_knowledge(Asaiah) ∨ shows_compassion(Asaiah)) → is_elder(Asaiah)",
      "(reads_ancient_texts(Asaiah) ∧ guides_others(Asaiah)) → teach_meditation(Asaiah)",
      "∀x ((reads_ancient_text(x) ∨ seeks_truth(x)) → studies_spirituality(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Asaiah does not seek knowledge."
        ],
        "rules": "If Asaiah seeks knowledge, then he either finds inner peace or studies spirituality (or both).",
        "conclusion": null
      },
      {
        "facts": [
          "Asaiah practices yoga."
        ],
        "rules": "If Asaiah practices yoga or studies spirituality, then he can teach meditation.",
        "conclusion": "Asaiah teaches meditation."
      },
      {
        "facts": [
          "Asaiah does not have insight."
        ],
        "rules": "A person is either an elder or has insight, but not necessarily both.",
        "conclusion": "Asaiah is an elder."
      },
      {
        "facts": [
          "Asaiah is an elder.",
          "Asaiah teaches meditation."
        ],
        "rules": "If Asaiah is an elder, then he either offers counsel or teaches meditation, but not both.",
        "conclusion": "Asaiah does not offer counsel."
      },
      {
        "facts": [
          "Asaiah is wise.",
          "Asaiah does not offer counsel.",
          "Asaiah shares life experiences."
        ],
        "rules": null,
        "conclusion": "Asaiah is wise and either offers counsel or shares life experiences (or both)."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬seeks_knowledge(Asaiah)"
        ],
        "rules": "seeks_knowledge(Asaiah) → (finds_inner_peace(Asaiah) ∨ studies_spirituality(Asaiah))",
        "conclusion": null
      },
      {
        "facts": [
          "practices_yoga(Asaiah)"
        ],
        "rules": "(practices_yoga(Asaiah) ∨ studies_spirituality(Asaiah)) → teach_meditation(Asaiah)",
        "conclusion": "teach_meditation(Asaiah)"
      },
      {
        "facts": [
          "¬has_insight(Asaiah)"
        ],
        "rules": "∀x (has_insight(x) ⊕ is_elder(x))",
        "conclusion": "is_elder(Asaiah)"
      },
      {
        "facts": [
          "is_elder(Asaiah)",
          "teach_meditation(Asaiah)"
        ],
        "rules": "is_elder(Asaiah) → (offer_counsel(Asaiah) ⊕ teach_meditation(Asaiah))",
        "conclusion": "¬offer_counsel(Asaiah)"
      },
      {
        "facts": [
          "wise(Asaiah)",
          "¬offer_counsel(Asaiah)",
          "share_life_experiences(Asaiah)"
        ],
        "rules": null,
        "conclusion": "wise(Asaiah) ∧ (offer_counsel(Asaiah) ∨ share_life_experiences(Asaiah))"
      }
    ],
    "conclusion": "Asaiah is wise and either offers counsel or shares life experiences (or both).",
    "conclusion_fol": "wise(Asaiah) ∧ (offer_counsel(Asaiah) ∨ share_life_experiences(Asaiah))",
    "answer": "True",
    "context": [
      "Asaiah does not seek knowledge.",
      "If Asaiah seeks knowledge, then he either finds inner peace or studies spirituality (or both).",
      "Asaiah practices yoga.",
      "If Asaiah practices yoga or studies spirituality, then he can teach meditation.",
      "Asaiah does not have insight.",
      "A person is either an elder or has insight, but not necessarily both.",
      "If Asaiah is an elder, then he either offers counsel or teaches meditation, but not both.",
      "Asaiah is wise.",
      "Asaiah shares life experiences."
    ],
    "context_fol": [
      "¬seeks_knowledge(Asaiah)",
      "seeks_knowledge(Asaiah) → (finds_inner_peace(Asaiah) ∨ studies_spirituality(Asaiah))",
      "practices_yoga(Asaiah)",
      "(practices_yoga(Asaiah) ∨ studies_spirituality(Asaiah)) → teach_meditation(Asaiah)",
      "¬has_insight(Asaiah)",
      "∀x (has_insight(x) ⊕ is_elder(x))",
      "is_elder(Asaiah) → (offer_counsel(Asaiah) ⊕ teach_meditation(Asaiah))",
      "wise(Asaiah)",
      "share_life_experiences(Asaiah)"
    ],
    "background_story": "Asaiah was a revered elder in his community, known for his sage advice and profound wisdom. With a lifetime of experiences and studies, he had gained a deep understanding of the world and its complexities. People from all walks of life would seek him out for counsel on matters of the heart, spirit, and mind. Asaiah's words were always laced with compassion, insight, and a hint of mysticism, earned from his years of meditation and contemplation. He would often share parables and stories from ancient texts, making the wisdom accessible and relatable to all who sought his guidance. Asaiah's sage nature had a calming effect on those around him, and his presence seemed to bring peace and clarity to even the most troubled of minds.",
    "name": "Asaiah",
    "keyword": "sage",
    "subject_category": "human"
  },
  {
    "facts": [
      "Neo seeks wisdom.",
      "Neo does not defeat monsters.",
      "Neo shows bravery.",
      "Neo has heart.",
      "Neo takes risks."
    ],
    "facts_fol": [
      "seek_wisdom(Neo)",
      "¬defeat_monsters(Neo)",
      "show_bravery(Neo)",
      "has_heart(Neo)",
      "takes_risks(Neo)"
    ],
    "rules": [
      "If Neo completes a hecatomb, then he gains divine power and becomes legendary.",
      "If Neo either defeats monsters or fulfills a prophecy (but not both), then he completes a hecatomb.",
      "If Neo possesses courage, then he fulfills a prophecy and seeks wisdom.",
      "All mythical heroes who face challenges and show bravery possess courage.",
      "Any mythical hero who has heart and takes risks will face challenges."
    ],
    "rules_fol": [
      "complete_hecatomb(Neo) → (gain_divine_power(Neo) ∧ become_legendary(Neo))",
      "(defeat_monsters(Neo) ⊕ fulfill_prophecy(Neo)) → complete_hecatomb(Neo)",
      "possess_courage(Neo) → (fulfill_prophecy(Neo) ∧ seek_wisdom(Neo))",
      "∀x ((face_challenges(x) ∧ show_bravery(x)) → possess_courage(x))",
      "∀x ((has_heart(x) ∧ takes_risks(x)) → face_challenges(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Neo has honor, then he completes a hecatomb and earns respect.",
      "Any mythical hero who hears oracles or sees visions can fulfill a prophecy.",
      "Any mythical hero who respects the gods and serves others possesses courage.",
      "If Neo embarks on a quest, then he either wields magic or faces challenges, but not both."
    ],
    "distracting_rules_fol": [
      "has_honor(Neo) → (complete_hecatomb(Neo) ∧ earn_respect(Neo))",
      "∀x ((hears_oracles(x) ∨ sees_visions(x)) → fulfill_prophecy(x))",
      "∀x ((respects_gods(x) ∧ serves_others(x)) → possess_courage(x))",
      "embark_quest(Neo) → (wield_magic(Neo) ⊕ face_challenges(Neo))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Neo has heart.",
          "Neo takes risks."
        ],
        "rules": "Any mythical hero who has heart and takes risks will face challenges.",
        "conclusion": "Neo faces challenges."
      },
      {
        "facts": [
          "Neo faces challenges.",
          "Neo shows bravery."
        ],
        "rules": "All mythical heroes who face challenges and show bravery possess courage.",
        "conclusion": "Neo possesses courage."
      },
      {
        "facts": [
          "Neo possesses courage.",
          "Neo seeks wisdom."
        ],
        "rules": "If Neo possesses courage, then he fulfills a prophecy and seeks wisdom.",
        "conclusion": "Neo fulfills a prophecy."
      },
      {
        "facts": [
          "Neo does not defeat monsters.",
          "Neo fulfills a prophecy."
        ],
        "rules": "If Neo either defeats monsters or fulfills a prophecy (but not both), then he completes a hecatomb.",
        "conclusion": "Neo completes a hecatomb."
      },
      {
        "facts": [
          "Neo completes a hecatomb."
        ],
        "rules": "If Neo completes a hecatomb, then he gains divine power and becomes legendary.",
        "conclusion": "Neo becomes legendary."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "has_heart(Neo)",
          "takes_risks(Neo)"
        ],
        "rules": "∀x ((has_heart(x) ∧ takes_risks(x)) → face_challenges(x))",
        "conclusion": "face_challenges(Neo)"
      },
      {
        "facts": [
          "face_challenges(Neo)",
          "show_bravery(Neo)"
        ],
        "rules": "∀x ((face_challenges(x) ∧ show_bravery(x)) → possess_courage(x))",
        "conclusion": "possess_courage(Neo)"
      },
      {
        "facts": [
          "possess_courage(Neo)",
          "seek_wisdom(Neo)"
        ],
        "rules": "possess_courage(Neo) → (fulfill_prophecy(Neo) ∧ seek_wisdom(Neo))",
        "conclusion": "fulfill_prophecy(Neo)"
      },
      {
        "facts": [
          "¬defeat_monsters(Neo)",
          "fulfill_prophecy(Neo)"
        ],
        "rules": "(defeat_monsters(Neo) ⊕ fulfill_prophecy(Neo)) → complete_hecatomb(Neo)",
        "conclusion": "complete_hecatomb(Neo)"
      },
      {
        "facts": [
          "complete_hecatomb(Neo)"
        ],
        "rules": "complete_hecatomb(Neo) → (gain_divine_power(Neo) ∧ become_legendary(Neo))",
        "conclusion": "become_legendary(Neo)"
      }
    ],
    "conclusion": "Neo becomes legendary.",
    "conclusion_fol": "become_legendary(Neo)",
    "answer": "True",
    "context": [
      "Neo has heart.",
      "Neo takes risks.",
      "Any mythical hero who has heart and takes risks will face challenges.",
      "Neo shows bravery.",
      "All mythical heroes who face challenges and show bravery possess courage.",
      "Neo seeks wisdom.",
      "If Neo possesses courage, then he fulfills a prophecy and seeks wisdom.",
      "Neo does not defeat monsters.",
      "If Neo either defeats monsters or fulfills a prophecy (but not both), then he completes a hecatomb.",
      "If Neo completes a hecatomb, then he gains divine power and becomes legendary."
    ],
    "context_fol": [
      "has_heart(Neo)",
      "takes_risks(Neo)",
      "∀x ((has_heart(x) ∧ takes_risks(x)) → face_challenges(x))",
      "show_bravery(Neo)",
      "∀x ((face_challenges(x) ∧ show_bravery(x)) → possess_courage(x))",
      "seek_wisdom(Neo)",
      "possess_courage(Neo) → (fulfill_prophecy(Neo) ∧ seek_wisdom(Neo))",
      "¬defeat_monsters(Neo)",
      "(defeat_monsters(Neo) ⊕ fulfill_prophecy(Neo)) → complete_hecatomb(Neo)",
      "complete_hecatomb(Neo) → (gain_divine_power(Neo) ∧ become_legendary(Neo))"
    ],
    "background_story": "Neo, a demigod from ancient Greece, was destined for greatness. However, his journey was marked by a hecatomb of epic proportions. A massive sacrifice of 100 beasts was demanded by the gods to atone for a great transgression. Neo, with his unyielding courage, took it upon himself to fulfill the hecatomb, facing countless challenges and fending off fierce creatures. As he completed the sacrifice, the gods bestowed upon him unimaginable power and wisdom. With his newfound abilities, Neo went on to defeat formidable monsters and bring peace to the war-torn lands. Though the hecatomb was a gruesome task, it forged Neo into a legendary hero, revered for his bravery and selflessness.",
    "name": "Neo",
    "keyword": "hecatomb",
    "subject_category": "mythical hero"
  },
  {
    "facts": [
      "Sweetheart calms humans."
    ],
    "facts_fol": [
      "calms_humans(Sweetheart)"
    ],
    "rules": [
      "Sweetheart is either a therapy horse or a racing horse, but not both.",
      "Sweetheart is either gentle or a therapy horse, but not both.",
      "All horses that calm humans are gentle."
    ],
    "rules_fol": [
      "therapy_horse(Sweetheart) ⊕ racing_horse(Sweetheart)",
      "is_gentle(Sweetheart) ⊕ therapy_horse(Sweetheart)",
      "∀x (calms_humans(x) → is_gentle(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Sweetheart is a therapy horse because she soothes her riders.",
      "If Sweetheart senses emotions, then she is either gentle or soothes her riders."
    ],
    "distracting_rules_fol": [
      "soothes_riders(Sweetheart) → therapy_horse(Sweetheart)",
      "senses_emotions(Sweetheart) → (is_gentle(Sweetheart) ∨ soothes_riders(Sweetheart))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Sweetheart calms humans."
        ],
        "rules": "All horses that calm humans are gentle.",
        "conclusion": "Sweetheart is gentle."
      },
      {
        "facts": [
          "Sweetheart is gentle."
        ],
        "rules": "Sweetheart is either gentle or a therapy horse, but not both.",
        "conclusion": "Sweetheart is not a therapy horse."
      },
      {
        "facts": [
          "Sweetheart is not a therapy horse."
        ],
        "rules": "Sweetheart is either a therapy horse or a racing horse, but not both.",
        "conclusion": "Sweetheart is not a racing horse."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "calms_humans(Sweetheart)"
        ],
        "rules": "∀x (calms_humans(x) → is_gentle(x))",
        "conclusion": "is_gentle(Sweetheart)"
      },
      {
        "facts": [
          "is_gentle(Sweetheart)"
        ],
        "rules": "is_gentle(Sweetheart) ⊕ therapy_horse(Sweetheart)",
        "conclusion": "¬therapy_horse(Sweetheart)"
      },
      {
        "facts": [
          "¬therapy_horse(Sweetheart)"
        ],
        "rules": "therapy_horse(Sweetheart) ⊕ racing_horse(Sweetheart)",
        "conclusion": "¬racing_horse(Sweetheart)"
      }
    ],
    "conclusion": "Sweetheart is not a racing horse.",
    "conclusion_fol": "¬racing_horse(Sweetheart)",
    "answer": "False",
    "context": [
      "Sweetheart calms humans.",
      "All horses that calm humans are gentle.",
      "Sweetheart is either gentle or a therapy horse, but not both.",
      "Sweetheart is either a therapy horse or a racing horse, but not both."
    ],
    "context_fol": [
      "calms_humans(Sweetheart)",
      "∀x (calms_humans(x) → is_gentle(x))",
      "is_gentle(Sweetheart) ⊕ therapy_horse(Sweetheart)",
      "therapy_horse(Sweetheart) ⊕ racing_horse(Sweetheart)"
    ],
    "background_story": "Sweetheart was a gentle giant, a majestic mare with a coat as soft as silk. She had a unique gift - the ability to sense when someone was feeling anxious or stressed. With a nuzzle or a soft whinny, she could calm even the most frazzled nerves. Her owners, a family with a small farm, would often take troubled children on rides with Sweetheart, and the mare's comfortableness would rub off on them. As they sat in the saddle, feeling her warm breath and gentle movements, they would begin to relax, letting go of their worries. Sweetheart's calm demeanor and soothing presence made her a beloved therapy horse, bringing comfort and peace to all who rode her.",
    "name": "Sweetheart",
    "keyword": "comfortableness",
    "subject_category": "horse"
  },
  {
    "facts": [
      "Alonzo cooks.",
      "Alonzo is a culinary expert.",
      "Alonzo is a pastry specialist."
    ],
    "facts_fol": [
      "cook(Alonzo)",
      "culinary_expert(Alonzo)",
      "pastry_specialist(Alonzo)"
    ],
    "rules": [
      "For every human, they are either a baker or a non-baker, but not both.",
      "If Alonzo cooks, then he is either a baker or a chef, but not both.",
      "Alonzo is either a food artist or a chef, but not both.",
      "If Alonzo is a culinary expert, then he is either a food artist or a pastry specialist, but not both."
    ],
    "rules_fol": [
      "∀x (baker(x) ⊕ non_baker(x))",
      "cook(Alonzo) → (baker(Alonzo) ⊕ chef(Alonzo))",
      "food_artist(Alonzo) ⊕ chef(Alonzo)",
      "culinary_expert(Alonzo) → (food_artist(Alonzo) ⊕ pastry_specialist(Alonzo))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Alonzo owns a shop, then he is either a baker or an artist, but not both.",
      "If Alonzo is a master craftsman, then he is either a chef or a restaurant owner, but not both.",
      "If Alonzo is creative, then he is a food artist."
    ],
    "distracting_rules_fol": [
      "owns_shop(Alonzo) → (baker(Alonzo) ⊕ is_artist(Alonzo))",
      "master_craftsman(Alonzo) → (chef(Alonzo) ⊕ restaurant_owner(Alonzo))",
      "creative(Alonzo) → food_artist(Alonzo)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Alonzo is a culinary expert.",
          "Alonzo is a pastry specialist."
        ],
        "rules": "If Alonzo is a culinary expert, then he is either a food artist or a pastry specialist, but not both.",
        "conclusion": "Alonzo is not a food artist."
      },
      {
        "facts": [
          "Alonzo is not a food artist."
        ],
        "rules": "Alonzo is either a food artist or a chef, but not both.",
        "conclusion": "Alonzo is a chef."
      },
      {
        "facts": [
          "Alonzo cooks.",
          "Alonzo is a chef."
        ],
        "rules": "If Alonzo cooks, then he is either a baker or a chef, but not both.",
        "conclusion": "Alonzo is not a baker."
      },
      {
        "facts": [
          "Alonzo is not a baker."
        ],
        "rules": "For every human, they are either a baker or a non-baker, but not both.",
        "conclusion": "Alonzo is not a baker."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "culinary_expert(Alonzo)",
          "pastry_specialist(Alonzo)"
        ],
        "rules": "culinary_expert(Alonzo) → (food_artist(Alonzo) ⊕ pastry_specialist(Alonzo))",
        "conclusion": "¬food_artist(Alonzo)"
      },
      {
        "facts": [
          "¬food_artist(Alonzo)"
        ],
        "rules": "food_artist(Alonzo) ⊕ chef(Alonzo)",
        "conclusion": "chef(Alonzo)"
      },
      {
        "facts": [
          "cook(Alonzo)",
          "chef(Alonzo)"
        ],
        "rules": "cook(Alonzo) → (baker(Alonzo) ⊕ chef(Alonzo))",
        "conclusion": "¬baker(Alonzo)"
      },
      {
        "facts": [
          "¬baker(Alonzo)"
        ],
        "rules": "∀x (baker(x) ⊕ non_baker(x))",
        "conclusion": "non_baker(Alonzo)"
      }
    ],
    "conclusion": "Alonzo is not a baker.",
    "conclusion_fol": "non_baker(Alonzo)",
    "answer": "True",
    "context": [
      "Alonzo is a culinary expert.",
      "Alonzo is a pastry specialist.",
      "If Alonzo is a culinary expert, then he is either a food artist or a pastry specialist, but not both.",
      "Alonzo is either a food artist or a chef, but not both.",
      "Alonzo cooks.",
      "If Alonzo cooks, then he is either a baker or a chef, but not both.",
      "For every human, they are either a baker or a non-baker, but not both."
    ],
    "context_fol": [
      "culinary_expert(Alonzo)",
      "pastry_specialist(Alonzo)",
      "culinary_expert(Alonzo) → (food_artist(Alonzo) ⊕ pastry_specialist(Alonzo))",
      "food_artist(Alonzo) ⊕ chef(Alonzo)",
      "cook(Alonzo)",
      "cook(Alonzo) → (baker(Alonzo) ⊕ chef(Alonzo))",
      "∀x (baker(x) ⊕ non_baker(x))"
    ],
    "background_story": "Alonzo was a passionate baker who spent most of his childhood watching his grandmother prepare traditional desserts in their family's old bakery. As he grew older, his fascination with the art of baking only deepened. Alonzo perfected his craft, experimenting with innovative recipes and techniques. His specialty was a mouthwatering sourdough bread that he baked to perfection in a wood-fired oven. The aroma of freshly baked goods wafting from his bakery became a staple of the community, drawing in customers from all over. Alonzo's baked creations were not just delicious; they were made with love, carrying the warmth and hospitality of his grandmother's kitchen. His bakery became a gathering place, where friends and family would come together to enjoy the fruits of Alonzo's labor.",
    "name": "Alonzo",
    "keyword": "baked",
    "subject_category": "human"
  },
  {
    "facts": [
      "Sweetheart has mystical powers.",
      "Sweetheart radiates joy.",
      "Sweetheart is majestic.",
      "Sweetheart glows with an aurora."
    ],
    "facts_fol": [
      "has_mystical_powers(Sweetheart)",
      "radiates_joy(Sweetheart)",
      "is_majestic(Sweetheart)",
      "glows_aurora(Sweetheart)"
    ],
    "rules": [
      "If Sweetheart has mystical powers, then she can either heal wounds or bring harmony, but not both.",
      "Sweetheart either spreads love or heals wounds, but not both.",
      "If Sweetheart either emits light or radiates joy (but not both), then she spreads love.",
      "If Sweetheart is majestic, then she either emits light or glows with an aurora, but not both."
    ],
    "rules_fol": [
      "has_mystical_powers(Sweetheart) → (heal_wounds(Sweetheart) ⊕ bring_harmony(Sweetheart))",
      "spread_love(Sweetheart) ⊕ heal_wounds(Sweetheart)",
      "(emits_light(Sweetheart) ⊕ radiates_joy(Sweetheart)) → spread_love(Sweetheart)",
      "is_majestic(Sweetheart) → (emits_light(Sweetheart) ⊕ glows_aurora(Sweetheart))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Sweetheart possesses a heart, then she possesses wisdom and can heal wounds.",
      "Sweetheart either soothes souls or spreads love.",
      "If Sweetheart has a horn, then she has a pure heart and emits light."
    ],
    "distracting_rules_fol": [
      "拥有心灵(Sweetheart) → (拥有智慧(Sweetheart) ∧ heal_wounds(Sweetheart))",
      "soothes_souls(Sweetheart) ∨ spread_love(Sweetheart)",
      "has_horn(Sweetheart) → (pure_heart(Sweetheart) ∧ emits_light(Sweetheart))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Sweetheart is majestic.",
          "Sweetheart glows with an aurora."
        ],
        "rules": "If Sweetheart is majestic, then she either emits light or glows with an aurora, but not both.",
        "conclusion": "Sweetheart does not emit light."
      },
      {
        "facts": [
          "Sweetheart does not emit light.",
          "Sweetheart radiates joy."
        ],
        "rules": "If Sweetheart either emits light or radiates joy (but not both), then she spreads love.",
        "conclusion": "Sweetheart spreads love."
      },
      {
        "facts": [
          "Sweetheart spreads love."
        ],
        "rules": "Sweetheart either spreads love or heals wounds, but not both.",
        "conclusion": "Sweetheart cannot heal wounds."
      },
      {
        "facts": [
          "Sweetheart has mystical powers.",
          "Sweetheart cannot heal wounds."
        ],
        "rules": "If Sweetheart has mystical powers, then she can either heal wounds or bring harmony, but not both.",
        "conclusion": "Sweetheart cannot bring harmony."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "is_majestic(Sweetheart)",
          "glows_aurora(Sweetheart)"
        ],
        "rules": "is_majestic(Sweetheart) → (emits_light(Sweetheart) ⊕ glows_aurora(Sweetheart))",
        "conclusion": "¬emits_light(Sweetheart)"
      },
      {
        "facts": [
          "¬emits_light(Sweetheart)",
          "radiates_joy(Sweetheart)"
        ],
        "rules": "(emits_light(Sweetheart) ⊕ radiates_joy(Sweetheart)) → spread_love(Sweetheart)",
        "conclusion": "spread_love(Sweetheart)"
      },
      {
        "facts": [
          "spread_love(Sweetheart)"
        ],
        "rules": "spread_love(Sweetheart) ⊕ heal_wounds(Sweetheart)",
        "conclusion": "¬heal_wounds(Sweetheart)"
      },
      {
        "facts": [
          "has_mystical_powers(Sweetheart)",
          "¬heal_wounds(Sweetheart)"
        ],
        "rules": "has_mystical_powers(Sweetheart) → (heal_wounds(Sweetheart) ⊕ bring_harmony(Sweetheart))",
        "conclusion": "¬bring_harmony(Sweetheart)"
      }
    ],
    "conclusion": "Sweetheart cannot bring harmony.",
    "conclusion_fol": "¬bring_harmony(Sweetheart)",
    "answer": "False",
    "context": [
      "Sweetheart is majestic.",
      "Sweetheart glows with an aurora.",
      "If Sweetheart is majestic, then she either emits light or glows with an aurora, but not both.",
      "Sweetheart radiates joy.",
      "If Sweetheart either emits light or radiates joy (but not both), then she spreads love.",
      "Sweetheart either spreads love or heals wounds, but not both.",
      "Sweetheart has mystical powers.",
      "If Sweetheart has mystical powers, then she can either heal wounds or bring harmony, but not both."
    ],
    "context_fol": [
      "is_majestic(Sweetheart)",
      "glows_aurora(Sweetheart)",
      "is_majestic(Sweetheart) → (emits_light(Sweetheart) ⊕ glows_aurora(Sweetheart))",
      "radiates_joy(Sweetheart)",
      "(emits_light(Sweetheart) ⊕ radiates_joy(Sweetheart)) → spread_love(Sweetheart)",
      "spread_love(Sweetheart) ⊕ heal_wounds(Sweetheart)",
      "has_mystical_powers(Sweetheart)",
      "has_mystical_powers(Sweetheart) → (heal_wounds(Sweetheart) ⊕ bring_harmony(Sweetheart))"
    ],
    "background_story": "In ancient mythology, Sweetheart was a mystical unicorn with a coat as white as snow and a horn that shimmered with a soft, ethereal light. According to legend, Sweetheart possessed the power of the letter Lamedh, the twelfth letter of the mystical alphabet. This letter was said to hold the essence of balance, harmony, and heart. With a touch of her horn, Sweetheart could heal the deepest wounds, bringing peace and tranquility to those around her. Her gentle spirit and compassionate heart earned her the love and devotion of all who knew her. As a symbol of Lamedh's transformative power, Sweetheart roamed the land, spreading love, light, and harmony wherever she went.",
    "name": "Sweetheart",
    "keyword": "lamedh",
    "subject_category": "mythical creature"
  },
  {
    "facts": [
      "Nico is hardworking.",
      "Nico is persistent.",
      "Nico does not solve problems.",
      "Nico thinks critically."
    ],
    "facts_fol": [
      "hardworking(Nico)",
      "persistent(Nico)",
      "¬solves_problems(Nico)",
      "thinks_critically(Nico)"
    ],
    "rules": [
      "Nico is either dedicated or intelligent, but not necessarily both.",
      "All persistent individuals are hardworking and dedicated.",
      "Nico is either resourceful or compassionate, but not both.",
      "If Nico either solves problems or thinks critically (but not both), then he is resourceful."
    ],
    "rules_fol": [
      "is_dedicated(Nico) ⊕ intelligent(Nico)",
      "∀x (persistent(x) → (hardworking(x) ∧ is_dedicated(x)))",
      "is_resourceful(Nico) ⊕ compassionate(Nico)",
      "(solves_problems(Nico) ⊕ thinks_critically(Nico)) → is_resourceful(Nico)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Anyone who learns quickly or analyzes data well is intelligent.",
      "Nico either cares deeply or is dedicated.",
      "If Nico either helps others or cares deeply (but not both), then he is compassionate.",
      "If someone seeks knowledge and helps others, then they are resourceful."
    ],
    "distracting_rules_fol": [
      "∀x ((learns_fast(x) ∨ analyzes_data(x)) → intelligent(x))",
      "cares_deeply(Nico) ∨ is_dedicated(Nico)",
      "(helps_others(Nico) ⊕ cares_deeply(Nico)) → compassionate(Nico)",
      "∀x ((seeks_knowledge(x) ∧ helps_others(x)) → is_resourceful(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Nico does not solve problems.",
          "Nico thinks critically."
        ],
        "rules": "If Nico either solves problems or thinks critically (but not both), then he is resourceful.",
        "conclusion": "Nico is resourceful."
      },
      {
        "facts": [
          "Nico is resourceful."
        ],
        "rules": "Nico is either resourceful or compassionate, but not both.",
        "conclusion": "Nico is not compassionate."
      },
      {
        "facts": [
          "Nico is persistent.",
          "Nico is hardworking."
        ],
        "rules": "All persistent individuals are hardworking and dedicated.",
        "conclusion": "Nico is dedicated."
      },
      {
        "facts": [
          "Nico is dedicated."
        ],
        "rules": "Nico is either dedicated or intelligent, but not necessarily both.",
        "conclusion": "Nico is not intelligent."
      },
      {
        "facts": [
          "Nico is not intelligent.",
          "Nico is not compassionate."
        ],
        "rules": null,
        "conclusion": "Nico is either intelligent or compassionate (or both)."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬solves_problems(Nico)",
          "thinks_critically(Nico)"
        ],
        "rules": "(solves_problems(Nico) ⊕ thinks_critically(Nico)) → is_resourceful(Nico)",
        "conclusion": "is_resourceful(Nico)"
      },
      {
        "facts": [
          "is_resourceful(Nico)"
        ],
        "rules": "is_resourceful(Nico) ⊕ compassionate(Nico)",
        "conclusion": "¬compassionate(Nico)"
      },
      {
        "facts": [
          "persistent(Nico)",
          "hardworking(Nico)"
        ],
        "rules": "∀x (persistent(x) → (hardworking(x) ∧ is_dedicated(x)))",
        "conclusion": "is_dedicated(Nico)"
      },
      {
        "facts": [
          "is_dedicated(Nico)"
        ],
        "rules": "is_dedicated(Nico) ⊕ intelligent(Nico)",
        "conclusion": "¬intelligent(Nico)"
      },
      {
        "facts": [
          "¬intelligent(Nico)",
          "¬compassionate(Nico)"
        ],
        "rules": null,
        "conclusion": "intelligent(Nico) ∨ compassionate(Nico)"
      }
    ],
    "conclusion": "Nico is either intelligent or compassionate (or both).",
    "conclusion_fol": "intelligent(Nico) ∨ compassionate(Nico)",
    "answer": "False",
    "context": [
      "Nico does not solve problems.",
      "Nico thinks critically.",
      "If Nico either solves problems or thinks critically (but not both), then he is resourceful.",
      "Nico is either resourceful or compassionate, but not both.",
      "Nico is persistent.",
      "Nico is hardworking.",
      "All persistent individuals are hardworking and dedicated.",
      "Nico is either dedicated or intelligent, but not necessarily both."
    ],
    "context_fol": [
      "¬solves_problems(Nico)",
      "thinks_critically(Nico)",
      "(solves_problems(Nico) ⊕ thinks_critically(Nico)) → is_resourceful(Nico)",
      "is_resourceful(Nico) ⊕ compassionate(Nico)",
      "persistent(Nico)",
      "hardworking(Nico)",
      "∀x (persistent(x) → (hardworking(x) ∧ is_dedicated(x)))",
      "is_dedicated(Nico) ⊕ intelligent(Nico)"
    ],
    "background_story": "Nico was a dedicated hematologist who spent his career studying the intricacies of blood composition. His specific area of interest was platelets, the tiny cells responsible for blood clotting. After years of research, Nico made a groundbreaking discovery about the role of platelets in wound healing. His findings led to the development of new treatments for patients with bleeding disorders. Nico's work saved countless lives and improved the quality of life for many more. Despite his success, he remained humble and continued to work tirelessly, driven by his passion for understanding the complexities of the human body. Nico's contributions to the field of hematology earned him international recognition, and he became known as a pioneer in platelet research.",
    "name": "Nico",
    "keyword": "platelet",
    "subject_category": "human"
  },
  {
    "facts": [
      "Alora does not heal wounds.",
      "Alora has gills.",
      "Alora swims freely."
    ],
    "facts_fol": [
      "¬heals_wounds(Alora)",
      "has_gills(Alora)",
      "swims_freely(Alora)"
    ],
    "rules": [
      "If Alora has medusoid powers and lives in the ocean, then she is a guardian.",
      "If Alora glows ethereally or controls currents, then she has medusoid powers.",
      "Alora either heals wounds or glows ethereally.",
      "If a mythical creature has gills and swims freely, then it lives in the ocean."
    ],
    "rules_fol": [
      "(has_medusoid_powers(Alora) ∧ lives_in_the_ocean(Alora)) → is_a_guardian(Alora)",
      "(glows_ethereally(Alora) ∨ controls_currents(Alora)) → has_medusoid_powers(Alora)",
      "heals_wounds(Alora) ∨ glows_ethereally(Alora)",
      "∀x ((has_gills(x) ∧ swims_freely(x)) → lives_in_the_ocean(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Alora stings preys or bioluminesces, then she has medusoid powers.",
      "Alora either shines brightly or glows ethereally.",
      "If Alora is an aquatic mythical creature, then she lives in the ocean."
    ],
    "distracting_rules_fol": [
      "(stings_preys(Alora) ∨ bioluminesces(Alora)) → has_medusoid_powers(Alora)",
      "shines_brightly(Alora) ∨ glows_ethereally(Alora)",
      "is_aquatic(Alora) → lives_in_the_ocean(Alora)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Alora has gills.",
          "Alora swims freely."
        ],
        "rules": "If a mythical creature has gills and swims freely, then it lives in the ocean.",
        "conclusion": "Alora lives in the ocean."
      },
      {
        "facts": [
          "Alora does not heal wounds."
        ],
        "rules": "Alora either heals wounds or glows ethereally.",
        "conclusion": "Alora glows ethereally."
      },
      {
        "facts": [
          "Alora glows ethereally."
        ],
        "rules": "If Alora glows ethereally or controls currents, then she has medusoid powers.",
        "conclusion": "Alora has medusoid powers."
      },
      {
        "facts": [
          "Alora has medusoid powers.",
          "Alora lives in the ocean."
        ],
        "rules": "If Alora has medusoid powers and lives in the ocean, then she is a guardian.",
        "conclusion": "Alora is not a guardian."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "has_gills(Alora)",
          "swims_freely(Alora)"
        ],
        "rules": "∀x ((has_gills(x) ∧ swims_freely(x)) → lives_in_the_ocean(x))",
        "conclusion": "lives_in_the_ocean(Alora)"
      },
      {
        "facts": [
          "¬heals_wounds(Alora)"
        ],
        "rules": "heals_wounds(Alora) ∨ glows_ethereally(Alora)",
        "conclusion": "glows_ethereally(Alora)"
      },
      {
        "facts": [
          "glows_ethereally(Alora)"
        ],
        "rules": "(glows_ethereally(Alora) ∨ controls_currents(Alora)) → has_medusoid_powers(Alora)",
        "conclusion": "has_medusoid_powers(Alora)"
      },
      {
        "facts": [
          "has_medusoid_powers(Alora)",
          "lives_in_the_ocean(Alora)"
        ],
        "rules": "(has_medusoid_powers(Alora) ∧ lives_in_the_ocean(Alora)) → is_a_guardian(Alora)",
        "conclusion": "¬is_a_guardian(Alora)"
      }
    ],
    "conclusion": "Alora is not a guardian.",
    "conclusion_fol": "¬is_a_guardian(Alora)",
    "answer": "False",
    "context": [
      "Alora has gills.",
      "Alora swims freely.",
      "If a mythical creature has gills and swims freely, then it lives in the ocean.",
      "Alora does not heal wounds.",
      "Alora either heals wounds or glows ethereally.",
      "If Alora glows ethereally or controls currents, then she has medusoid powers.",
      "If Alora has medusoid powers and lives in the ocean, then she is a guardian."
    ],
    "context_fol": [
      "has_gills(Alora)",
      "swims_freely(Alora)",
      "∀x ((has_gills(x) ∧ swims_freely(x)) → lives_in_the_ocean(x))",
      "¬heals_wounds(Alora)",
      "heals_wounds(Alora) ∨ glows_ethereally(Alora)",
      "(glows_ethereally(Alora) ∨ controls_currents(Alora)) → has_medusoid_powers(Alora)",
      "(has_medusoid_powers(Alora) ∧ lives_in_the_ocean(Alora)) → is_a_guardian(Alora)"
    ],
    "background_story": "In the depths of the mystical ocean, there lived Alora, a medusoid being with a mesmerizing, jellyfish-like appearance. Her translucent body glowed with an ethereal light, and her long, flowing tentacles rippled like the seaweed in the currents. Alora was a gentle guardian of the sea, using her stinging tentacles to protect the delicate balance of the marine ecosystem. With her medusoid powers, she could control the currents and communicate with other sea creatures. The merfolk revered Alora as a wise and benevolent entity, often seeking her counsel on matters of the ocean's harmony. Her mystical presence was a reminder of the magic that lay just beneath the waves, and her legacy lived on as a symbol of the ocean's mysterious and wondrous depths.",
    "name": "Alora",
    "keyword": "medusoid",
    "subject_category": "mythical creature"
  },
  {
    "facts": [
      "Sweetness lives outdoors.",
      "Sweetness is not aware."
    ],
    "facts_fol": [
      "lives_outdoors(Sweetness)",
      "¬is_aware(Sweetness)"
    ],
    "rules": [
      "For all animals, if they are vigilant, then they stay safe.",
      "If Sweetness lives outdoors, then she is vigilant and has keen senses.",
      "Sweetness is either aware or has keen senses."
    ],
    "rules_fol": [
      "∀x (is_vigilant(x) → stays_safe(x))",
      "lives_outdoors(Sweetness) → (is_vigilant(Sweetness) ∧ has_keen_senses(Sweetness))",
      "is_aware(Sweetness) ∨ has_keen_senses(Sweetness)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Sweetness either sees danger or is vigilant.",
      "Every animal that lives in the wild either has keen senses or reacts quickly."
    ],
    "distracting_rules_fol": [
      "sees_danger(Sweetness) ∨ is_vigilant(Sweetness)",
      "∀x (lives_in_wild(x) → (has_keen_senses(x) ∨ reacts_quickly(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Sweetness is not aware."
        ],
        "rules": "Sweetness is either aware or has keen senses.",
        "conclusion": "Sweetness has keen senses."
      },
      {
        "facts": [
          "Sweetness lives outdoors.",
          "Sweetness has keen senses."
        ],
        "rules": "If Sweetness lives outdoors, then she is vigilant and has keen senses.",
        "conclusion": "Sweetness is vigilant."
      },
      {
        "facts": [
          "Sweetness is vigilant."
        ],
        "rules": "For all animals, if they are vigilant, then they stay safe.",
        "conclusion": "Sweetness stays safe."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬is_aware(Sweetness)"
        ],
        "rules": "is_aware(Sweetness) ∨ has_keen_senses(Sweetness)",
        "conclusion": "has_keen_senses(Sweetness)"
      },
      {
        "facts": [
          "lives_outdoors(Sweetness)",
          "has_keen_senses(Sweetness)"
        ],
        "rules": "lives_outdoors(Sweetness) → (is_vigilant(Sweetness) ∧ has_keen_senses(Sweetness))",
        "conclusion": "is_vigilant(Sweetness)"
      },
      {
        "facts": [
          "is_vigilant(Sweetness)"
        ],
        "rules": "∀x (is_vigilant(x) → stays_safe(x))",
        "conclusion": "stays_safe(Sweetness)"
      }
    ],
    "conclusion": "Sweetness stays safe.",
    "conclusion_fol": "stays_safe(Sweetness)",
    "answer": "True",
    "context": [
      "Sweetness is not aware.",
      "Sweetness is either aware or has keen senses.",
      "Sweetness lives outdoors.",
      "If Sweetness lives outdoors, then she is vigilant and has keen senses.",
      "For all animals, if they are vigilant, then they stay safe."
    ],
    "context_fol": [
      "¬is_aware(Sweetness)",
      "is_aware(Sweetness) ∨ has_keen_senses(Sweetness)",
      "lives_outdoors(Sweetness)",
      "lives_outdoors(Sweetness) → (is_vigilant(Sweetness) ∧ has_keen_senses(Sweetness))",
      "∀x (is_vigilant(x) → stays_safe(x))"
    ],
    "background_story": "Sweetness, a vigilant and agile meerkat, lived in the sun-kissed savannas of Africa. She was renowned among her colony for her exceptional alertness, always on the lookout for potential threats. With her keen senses and quick reflexes, Sweetness could spot a hawk soaring overhead or a snake slithering through the grass from a distance. Her sharp eyes and ears allowed her to detect even the slightest movements, warning her colony of impending danger. Thanks to Sweetness's unwavering vigilance, her family remained safe, and she earned the respect and admiration of all. Her alertness was a gift, protecting and preserving the harmony of the meerkat community.",
    "name": "Sweetness",
    "keyword": "alertness",
    "subject_category": "animal"
  },
  {
    "facts": [
      "Mustafa seeks guidance.",
      "Mustafa does not listen deeply.",
      "Mustafa walks mindfully.",
      "Mustafa does not emit serenity."
    ],
    "facts_fol": [
      "seek_guidance(Mustafa)",
      "¬listen_deeply(Mustafa)",
      "walk_mindfully(Mustafa)",
      "¬emit_serenity(Mustafa)"
    ],
    "rules": [
      "Mustafa either radiates calm or possesses wisdom, but not necessarily both.",
      "Anyone who listens deeply or speaks gently can exude compassion.",
      "For Mustafa, either he walks mindfully or speaks gently, but not both at the same time.",
      "Mustafa either emits serenity or radiates calm, but these qualities are not necessarily intertwined in his presence."
    ],
    "rules_fol": [
      "radiate_calm(Mustafa) ⊕ possess_wisdom(Mustafa)",
      "∀x ((listen_deeply(x) ∨ speak_gently(x)) → exude_compassion(x))",
      "walk_mindfully(Mustafa) ⊕ speak_gently(Mustafa)",
      "emit_serenity(Mustafa) ⊕ radiate_calm(Mustafa)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Mustafa understands the cosmos, then he possesses wisdom.",
      "All humans who care deeply will exude compassion.",
      "Everyone who shows empathy either speaks gently or offers solace.",
      "If Mustafa meditates, then he radiates calm."
    ],
    "distracting_rules_fol": [
      "understand_cosmos(Mustafa) → possess_wisdom(Mustafa)",
      "∀x (care_deeply(x) → exude_compassion(x))",
      "∀x (show_empathy(x) → (speak_gently(x) ∨ offer_solace(x)))",
      "meditate(Mustafa) → radiate_calm(Mustafa)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Mustafa does not emit serenity."
        ],
        "rules": "Mustafa either emits serenity or radiates calm, but these qualities are not necessarily intertwined in his presence.",
        "conclusion": "Mustafa radiates calm."
      },
      {
        "facts": [
          "Mustafa walks mindfully."
        ],
        "rules": "For Mustafa, either he walks mindfully or speaks gently, but not both at the same time.",
        "conclusion": "Mustafa does not speak gently."
      },
      {
        "facts": [
          "Mustafa does not listen deeply.",
          "Mustafa does not speak gently."
        ],
        "rules": "Anyone who listens deeply or speaks gently can exude compassion.",
        "conclusion": null
      },
      {
        "facts": [
          "Mustafa radiates calm."
        ],
        "rules": "Mustafa either radiates calm or possesses wisdom, but not necessarily both.",
        "conclusion": "Mustafa does not possess wisdom."
      },
      {
        "facts": [
          "Mustafa seeks guidance.",
          "Mustafa does not possess wisdom."
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬emit_serenity(Mustafa)"
        ],
        "rules": "emit_serenity(Mustafa) ⊕ radiate_calm(Mustafa)",
        "conclusion": "radiate_calm(Mustafa)"
      },
      {
        "facts": [
          "walk_mindfully(Mustafa)"
        ],
        "rules": "walk_mindfully(Mustafa) ⊕ speak_gently(Mustafa)",
        "conclusion": "¬speak_gently(Mustafa)"
      },
      {
        "facts": [
          "¬listen_deeply(Mustafa)",
          "¬speak_gently(Mustafa)"
        ],
        "rules": "∀x ((listen_deeply(x) ∨ speak_gently(x)) → exude_compassion(x))",
        "conclusion": null
      },
      {
        "facts": [
          "radiate_calm(Mustafa)"
        ],
        "rules": "radiate_calm(Mustafa) ⊕ possess_wisdom(Mustafa)",
        "conclusion": "¬possess_wisdom(Mustafa)"
      },
      {
        "facts": [
          "seek_guidance(Mustafa)",
          "¬possess_wisdom(Mustafa)"
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "conclusion": "Mustafa seeks guidance and either possesses wisdom or exudes compassion (or both).",
    "conclusion_fol": "seek_guidance(Mustafa) ∧ (possess_wisdom(Mustafa) ∨ exude_compassion(Mustafa))",
    "answer": "Uncertain",
    "context": [
      "Mustafa does not emit serenity.",
      "Mustafa either emits serenity or radiates calm, but these qualities are not necessarily intertwined in his presence.",
      "Mustafa walks mindfully.",
      "For Mustafa, either he walks mindfully or speaks gently, but not both at the same time.",
      "Mustafa does not listen deeply.",
      "Anyone who listens deeply or speaks gently can exude compassion.",
      "Mustafa either radiates calm or possesses wisdom, but not necessarily both.",
      "Mustafa seeks guidance."
    ],
    "context_fol": [
      "¬emit_serenity(Mustafa)",
      "emit_serenity(Mustafa) ⊕ radiate_calm(Mustafa)",
      "walk_mindfully(Mustafa)",
      "walk_mindfully(Mustafa) ⊕ speak_gently(Mustafa)",
      "¬listen_deeply(Mustafa)",
      "∀x ((listen_deeply(x) ∨ speak_gently(x)) → exude_compassion(x))",
      "radiate_calm(Mustafa) ⊕ possess_wisdom(Mustafa)",
      "seek_guidance(Mustafa)"
    ],
    "background_story": "Mustafa was a mystic who lived in the ancient city of Marrakech. His presence was often accompanied by an aura of the numinous, a profound and mysterious energy that inspired awe in those around him. People would seek him out for guidance, drawn by whispers of his deep understanding of the cosmos and the human soul. Mustafa's eyes seemed to hold the wisdom of the ages, and his words were laced with a quiet power that could soothe the troubled mind and ignite the heart. As he walked through the bustling souks, the scent of incense and rose petals would follow him, as if the very essence of the divine had descended upon the earthly realm. Those who met Mustafa couldn't help but feel the presence of something greater than themselves, a reminder of the magic that lay just beyond the veil of the mundane.",
    "name": "Mustafa",
    "keyword": "numinous",
    "subject_category": "human"
  },
  {
    "facts": [
      "Cannon is active.",
      "Cannon is playful.",
      "Cannon is affectionate.",
      "Cannon does not explore spaces.",
      "Cannon climbs high.",
      "Cannon wins awards.",
      "Cannon purrs loudly."
    ],
    "facts_fol": [
      "is_active(Cannon)",
      "is_playful(Cannon)",
      "is_affectionate(Cannon)",
      "¬explores_spaces(Cannon)",
      "climbs_high(Cannon)",
      "wins_awards(Cannon)",
      "purrs_loudly(Cannon)"
    ],
    "rules": [
      "If Cannon is playful, then he is either Abyssinian or affectionate, but not both.",
      "If Cannon either explores spaces or chases toys (but not both), then he is curious.",
      "If Cannon climbs high, then he either cuddles his owner or chases toys.",
      "If Cannon wins awards, then he either purrs loudly or cuddles his owner."
    ],
    "rules_fol": [
      "is_playful(Cannon) → (is_Abyssinian(Cannon) ⊕ is_affectionate(Cannon))",
      "(explores_spaces(Cannon) ⊕ chases_toys(Cannon)) → is_curious(Cannon)",
      "climbs_high(Cannon) → (cuddles_owner(Cannon) ∨ chases_toys(Cannon))",
      "wins_awards(Cannon) → (purrs_loudly(Cannon) ⊕ cuddles_owner(Cannon))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Cannon either has a ticked coat or loves climbing (but not both), then he is an Abyssinian.",
      "If Cannon has a ticked coat, then he is either agile or curious, but not both.",
      "If Cannon sees a laser and runs fast, then he chases toys.",
      "Every cat that has a soft spot either cuddles its owner or seeks attention."
    ],
    "distracting_rules_fol": [
      "(has_ticked_coat(Cannon) ⊕ loves_climbing(Cannon)) → is_Abyssinian(Cannon)",
      "has_ticked_coat(Cannon) → (is_agile(Cannon) ⊕ is_curious(Cannon))",
      "(sees_laser(Cannon) ∧ runs_fast(Cannon)) → chases_toys(Cannon)",
      "∀x (has_soft_spot(x) → (cuddles_owner(x) ∨ seeks_attention(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Cannon wins awards.",
          "Cannon purrs loudly."
        ],
        "rules": "If Cannon wins awards, then he either purrs loudly or cuddles his owner.",
        "conclusion": "Cannon does not cuddle his owner."
      },
      {
        "facts": [
          "Cannon climbs high.",
          "Cannon does not cuddle his owner."
        ],
        "rules": "If Cannon climbs high, then he either cuddles his owner or chases toys.",
        "conclusion": "Cannon chases toys."
      },
      {
        "facts": [
          "Cannon does not explore spaces.",
          "Cannon chases toys."
        ],
        "rules": "If Cannon either explores spaces or chases toys (but not both), then he is curious.",
        "conclusion": "Cannon is curious."
      },
      {
        "facts": [
          "Cannon is playful.",
          "Cannon is affectionate."
        ],
        "rules": "If Cannon is playful, then he is either Abyssinian or affectionate, but not both.",
        "conclusion": "Cannon is not an Abyssinian."
      },
      {
        "facts": [
          "Cannon is not an Abyssinian.",
          "Cannon is curious.",
          "Cannon is active."
        ],
        "rules": null,
        "conclusion": "If Cannon is an Abyssinian, then he is either curious or active (or both)."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "wins_awards(Cannon)",
          "purrs_loudly(Cannon)"
        ],
        "rules": "wins_awards(Cannon) → (purrs_loudly(Cannon) ⊕ cuddles_owner(Cannon))",
        "conclusion": "¬cuddles_owner(Cannon)"
      },
      {
        "facts": [
          "climbs_high(Cannon)",
          "¬cuddles_owner(Cannon)"
        ],
        "rules": "climbs_high(Cannon) → (cuddles_owner(Cannon) ∨ chases_toys(Cannon))",
        "conclusion": "chases_toys(Cannon)"
      },
      {
        "facts": [
          "¬explores_spaces(Cannon)",
          "chases_toys(Cannon)"
        ],
        "rules": "(explores_spaces(Cannon) ⊕ chases_toys(Cannon)) → is_curious(Cannon)",
        "conclusion": "is_curious(Cannon)"
      },
      {
        "facts": [
          "is_playful(Cannon)",
          "is_affectionate(Cannon)"
        ],
        "rules": "is_playful(Cannon) → (is_Abyssinian(Cannon) ⊕ is_affectionate(Cannon))",
        "conclusion": "¬is_Abyssinian(Cannon)"
      },
      {
        "facts": [
          "¬is_Abyssinian(Cannon)",
          "is_curious(Cannon)",
          "is_active(Cannon)"
        ],
        "rules": null,
        "conclusion": "is_Abyssinian(Cannon) → (is_curious(Cannon) ∨ is_active(Cannon))"
      }
    ],
    "conclusion": "If Cannon is an Abyssinian, then he is either curious or active (or both).",
    "conclusion_fol": "is_Abyssinian(Cannon) → (is_curious(Cannon) ∨ is_active(Cannon))",
    "answer": "True",
    "context": [
      "Cannon wins awards.",
      "Cannon purrs loudly.",
      "If Cannon wins awards, then he either purrs loudly or cuddles his owner.",
      "Cannon climbs high.",
      "If Cannon climbs high, then he either cuddles his owner or chases toys.",
      "Cannon does not explore spaces.",
      "If Cannon either explores spaces or chases toys (but not both), then he is curious.",
      "Cannon is playful.",
      "Cannon is affectionate.",
      "If Cannon is playful, then he is either Abyssinian or affectionate, but not both.",
      "Cannon is active."
    ],
    "context_fol": [
      "wins_awards(Cannon)",
      "purrs_loudly(Cannon)",
      "wins_awards(Cannon) → (purrs_loudly(Cannon) ⊕ cuddles_owner(Cannon))",
      "climbs_high(Cannon)",
      "climbs_high(Cannon) → (cuddles_owner(Cannon) ∨ chases_toys(Cannon))",
      "¬explores_spaces(Cannon)",
      "(explores_spaces(Cannon) ⊕ chases_toys(Cannon)) → is_curious(Cannon)",
      "is_playful(Cannon)",
      "is_affectionate(Cannon)",
      "is_playful(Cannon) → (is_Abyssinian(Cannon) ⊕ is_affectionate(Cannon))",
      "is_active(Cannon)"
    ],
    "background_story": "Cannon was a stunning Abyssinian cat, known for his distinctive ticked coat and playful personality. His owner, a veteran breeder, had named him after his energetic and adventurous spirit. Cannon loved to explore every nook and cranny of the house, chasing after toys and climbing up high shelves. Despite his mischievous ways, he had a soft spot for cuddling and would often curl up in his owner's lap for hours. Cannon's Abyssinian heritage made him naturally curious and active, always on the go and investigating his surroundings. As he grew older, he became a beloved show cat, winning numerous awards for his striking appearance and charming demeanor. Cannon's unique blend of energy and affection made him a joy to be around, and his Abyssinian roots only added to his charm.",
    "name": "Cannon",
    "keyword": "abyssinian",
    "subject_category": "cat"
  },
  {
    "facts": [
      "Miley designs new architectures.",
      "Miley is good at math."
    ],
    "facts_fol": [
      "design_new_architectures(Miley)",
      "good_at_math(Miley)"
    ],
    "rules": [
      "For all computer scientists, if a computer scientist is skilled, then they either develop innovative algorithms or handle large datasets (or both).",
      "All computer scientists who code efficiently are skilled.",
      "Every computer scientist either designs new architectures or handles large datasets, but not necessarily both.",
      "If Miley is good at math, then she can code efficiently."
    ],
    "rules_fol": [
      "∀x (skilled(x) → (develop_innovative_algorithms(x) ∨ handle_large_datasets(x)))",
      "∀x (code_efficiently(x) → skilled(x))",
      "∀x (design_new_architectures(x) ⊕ handle_large_datasets(x))",
      "good_at_math(Miley) → code_efficiently(Miley)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "All computer scientists who work hard and solve problems are skilled.",
      "Any computer scientist who works with zettabits can handle large datasets.",
      "If a computer scientist understands data and writes clean code, then they can code efficiently."
    ],
    "distracting_rules_fol": [
      "∀x (work_hard(x) → (solve_problems(x) ∧ skilled(x)))",
      "∀x (work_with_zettabits(x) → handle_large_datasets(x))",
      "∀x ((understands_data(x) ∧ writes_clean_code(x)) → code_efficiently(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Miley is good at math."
        ],
        "rules": "If Miley is good at math, then she can code efficiently.",
        "conclusion": "Miley codes efficiently."
      },
      {
        "facts": [
          "Miley designs new architectures."
        ],
        "rules": "Every computer scientist either designs new architectures or handles large datasets, but not necessarily both.",
        "conclusion": "Miley does not handle large datasets."
      },
      {
        "facts": [
          "Miley codes efficiently."
        ],
        "rules": "All computer scientists who code efficiently are skilled.",
        "conclusion": "Miley is a skilled computer scientist."
      },
      {
        "facts": [
          "Miley is a skilled computer scientist.",
          "Miley does not handle large datasets."
        ],
        "rules": "For all computer scientists, if a computer scientist is skilled, then they either develop innovative algorithms or handle large datasets (or both).",
        "conclusion": "Miley develops innovative algorithms."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "good_at_math(Miley)"
        ],
        "rules": "good_at_math(Miley) → code_efficiently(Miley)",
        "conclusion": "code_efficiently(Miley)"
      },
      {
        "facts": [
          "design_new_architectures(Miley)"
        ],
        "rules": "∀x (design_new_architectures(x) ⊕ handle_large_datasets(x))",
        "conclusion": "¬handle_large_datasets(Miley)"
      },
      {
        "facts": [
          "code_efficiently(Miley)"
        ],
        "rules": "∀x (code_efficiently(x) → skilled(x))",
        "conclusion": "skilled(Miley)"
      },
      {
        "facts": [
          "skilled(Miley)",
          "¬handle_large_datasets(Miley)"
        ],
        "rules": "∀x (skilled(x) → (develop_innovative_algorithms(x) ∨ handle_large_datasets(x)))",
        "conclusion": "develop_innovative_algorithms(Miley)"
      }
    ],
    "conclusion": "Miley develops innovative algorithms.",
    "conclusion_fol": "develop_innovative_algorithms(Miley)",
    "answer": "True",
    "context": [
      "Miley is good at math.",
      "If Miley is good at math, then she can code efficiently.",
      "Miley designs new architectures.",
      "Every computer scientist either designs new architectures or handles large datasets, but not necessarily both.",
      "All computer scientists who code efficiently are skilled.",
      "For all computer scientists, if a computer scientist is skilled, then they either develop innovative algorithms or handle large datasets (or both)."
    ],
    "context_fol": [
      "good_at_math(Miley)",
      "good_at_math(Miley) → code_efficiently(Miley)",
      "design_new_architectures(Miley)",
      "∀x (design_new_architectures(x) ⊕ handle_large_datasets(x))",
      "∀x (code_efficiently(x) → skilled(x))",
      "∀x (skilled(x) → (develop_innovative_algorithms(x) ∨ handle_large_datasets(x)))"
    ],
    "background_story": "Miley was a brilliant data analyst working for a top tech firm. Her latest project involved developing a system to manage and process vast amounts of data, measured in zettabits. A zettabit is a unit of information equal to 10^21 bits, and Miley's task was to create an algorithm that could handle such enormous quantities efficiently. She spent months researching and coding, finally succeeding in designing a revolutionary new architecture. Miley's breakthrough enabled her company to store and analyze unprecedented amounts of data, opening doors to new discoveries in fields like artificial intelligence and genomics. Her work with zettabits not only earned her recognition in the tech world but also paved the way for future innovations in data science.",
    "name": "Miley",
    "keyword": "zettabit",
    "subject_category": "computer scientist"
  },
  {
    "facts": [
      "Nadia examines fungi.",
      "Nadia does not identify compounds."
    ],
    "facts_fol": [
      "examines_fungi(Nadia)",
      "¬identifies_compounds(Nadia)"
    ],
    "rules": [
      "Nadia either specializes in Xylariaceae or studies other fungi, but not both.",
      "If Nadia examines fungi, then she either researches ascomycota or specializes in Xylariaceae, but not both.",
      "Nadia either discovers new species or researches ascomycota, but not both.",
      "Nadia either identifies compounds or discovers new species, but not both."
    ],
    "rules_fol": [
      "specializes_in_Xylariaceae(Nadia) ⊕ studies_other_fungi(Nadia)",
      "examines_fungi(Nadia) → (researches_ascomycota(Nadia) ⊕ specializes_in_Xylariaceae(Nadia))",
      "discovers_new_species(Nadia) ⊕ researches_ascomycota(Nadia)",
      "identifies_compounds(Nadia) ⊕ discovers_new_species(Nadia)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Nadia explores the rainforest and investigates plant material, then she specializes in Xylariaceae.",
      "If Nadia investigates mold or analyzes spores, then she researches ascomycota.",
      "Every mycologist either classifies fungi or discovers new species."
    ],
    "distracting_rules_fol": [
      "(explores_rainforest(Nadia) ∧ investigates_plant_material(Nadia)) → specializes_in_Xylariaceae(Nadia)",
      "(investigates_mold(Nadia) ∨ analyzes_spores(Nadia)) → researches_ascomycota(Nadia)",
      "∀x (classifies_fungi(x) ∨ discovers_new_species(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Nadia does not identify compounds."
        ],
        "rules": "Nadia either identifies compounds or discovers new species, but not both.",
        "conclusion": "Nadia discovers new species."
      },
      {
        "facts": [
          "Nadia discovers new species."
        ],
        "rules": "Nadia either discovers new species or researches ascomycota, but not both.",
        "conclusion": "Nadia does not research ascomycota."
      },
      {
        "facts": [
          "Nadia examines fungi.",
          "Nadia does not research ascomycota."
        ],
        "rules": "If Nadia examines fungi, then she either researches ascomycota or specializes in Xylariaceae, but not both.",
        "conclusion": "Nadia specializes in Xylariaceae."
      },
      {
        "facts": [
          "Nadia specializes in Xylariaceae."
        ],
        "rules": "Nadia either specializes in Xylariaceae or studies other fungi, but not both.",
        "conclusion": "Nadia studies other fungi."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬identifies_compounds(Nadia)"
        ],
        "rules": "identifies_compounds(Nadia) ⊕ discovers_new_species(Nadia)",
        "conclusion": "discovers_new_species(Nadia)"
      },
      {
        "facts": [
          "discovers_new_species(Nadia)"
        ],
        "rules": "discovers_new_species(Nadia) ⊕ researches_ascomycota(Nadia)",
        "conclusion": "¬researches_ascomycota(Nadia)"
      },
      {
        "facts": [
          "examines_fungi(Nadia)",
          "¬researches_ascomycota(Nadia)"
        ],
        "rules": "examines_fungi(Nadia) → (researches_ascomycota(Nadia) ⊕ specializes_in_Xylariaceae(Nadia))",
        "conclusion": "specializes_in_Xylariaceae(Nadia)"
      },
      {
        "facts": [
          "specializes_in_Xylariaceae(Nadia)"
        ],
        "rules": "specializes_in_Xylariaceae(Nadia) ⊕ studies_other_fungi(Nadia)",
        "conclusion": "studies_other_fungi(Nadia)"
      }
    ],
    "conclusion": "Nadia studies other fungi.",
    "conclusion_fol": "studies_other_fungi(Nadia)",
    "answer": "False",
    "context": [
      "Nadia does not identify compounds.",
      "Nadia either identifies compounds or discovers new species, but not both.",
      "Nadia either discovers new species or researches ascomycota, but not both.",
      "Nadia examines fungi.",
      "If Nadia examines fungi, then she either researches ascomycota or specializes in Xylariaceae, but not both.",
      "Nadia either specializes in Xylariaceae or studies other fungi, but not both."
    ],
    "context_fol": [
      "¬identifies_compounds(Nadia)",
      "identifies_compounds(Nadia) ⊕ discovers_new_species(Nadia)",
      "discovers_new_species(Nadia) ⊕ researches_ascomycota(Nadia)",
      "examines_fungi(Nadia)",
      "examines_fungi(Nadia) → (researches_ascomycota(Nadia) ⊕ specializes_in_Xylariaceae(Nadia))",
      "specializes_in_Xylariaceae(Nadia) ⊕ studies_other_fungi(Nadia)"
    ],
    "background_story": "Nadia was a brilliant mycologist with a passion for the Xylariaceae family of fungi. She spent most of her career studying the unique characteristics of these organisms, which are commonly found in decaying wood and other plant material. Nadia's research focused on the potential medicinal properties of Xylariaceae, and she made several groundbreaking discoveries that shed new light on their ability to produce compounds with antibacterial and antifungal properties. Her work took her to the depths of the Amazon rainforest, where she discovered new species of Xylariaceae that had never been seen before. Nadia's dedication to her field earned her the nickname 'The Xylariaceae Whisperer' among her peers, and her findings have paved the way for new avenues of research in the field of mycology.",
    "name": "Nadia",
    "keyword": "xylariaceae",
    "subject_category": "mycologist"
  },
  {
    "facts": [
      "Hayley tends to her land.",
      "Hayley cares for animals.",
      "Hayley raises free-range chickens.",
      "Hayley sells eggs."
    ],
    "facts_fol": [
      "tend_to_land(Hayley)",
      "care_for_animals(Hayley)",
      "raise_free_range_chickens(Hayley)",
      "sell_eggs(Hayley)"
    ],
    "rules": [
      "If Hayley cares for animals, then she either tends to her land or produces high-quality eggs.",
      "All farmers who own chickens collect eggs daily.",
      "All farmers who sell eggs own chickens."
    ],
    "rules_fol": [
      "care_for_animals(Hayley) → (tend_to_land(Hayley) ∨ produce_high_quality_eggs(Hayley))",
      "∀x (own_chickens(x) → collect_eggs_daily(x))",
      "∀x (sell_eggs(x) → own_chickens(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If a farmer feeds their chickens organic food and provides them with shelter, then they produce high-quality eggs.",
      "If Hayley either feeds chickens or cleans the coop (but not both), then she collects eggs daily.",
      "If Hayley lives rurally, then she enjoys nature and owns chickens."
    ],
    "distracting_rules_fol": [
      "∀x ((feed_organic(x) ∧ provide_shelter(x)) → produce_high_quality_eggs(x))",
      "(feed_chickens(Hayley) ⊕ clean_coop(Hayley)) → collect_eggs_daily(Hayley)",
      "live_rurally(Hayley) → (enjoy_nature(Hayley) ∧ own_chickens(Hayley))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Hayley sells eggs."
        ],
        "rules": "All farmers who sell eggs own chickens.",
        "conclusion": "Hayley owns chickens."
      },
      {
        "facts": [
          "Hayley owns chickens."
        ],
        "rules": "All farmers who own chickens collect eggs daily.",
        "conclusion": "Hayley collects eggs daily."
      },
      {
        "facts": [
          "Hayley cares for animals.",
          "Hayley tends to her land."
        ],
        "rules": "If Hayley cares for animals, then she either tends to her land or produces high-quality eggs.",
        "conclusion": null
      },
      {
        "facts": [
          "Hayley raises free-range chickens.",
          "Hayley collects eggs daily."
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "sell_eggs(Hayley)"
        ],
        "rules": "∀x (sell_eggs(x) → own_chickens(x))",
        "conclusion": "own_chickens(Hayley)"
      },
      {
        "facts": [
          "own_chickens(Hayley)"
        ],
        "rules": "∀x (own_chickens(x) → collect_eggs_daily(x))",
        "conclusion": "collect_eggs_daily(Hayley)"
      },
      {
        "facts": [
          "care_for_animals(Hayley)",
          "tend_to_land(Hayley)"
        ],
        "rules": "care_for_animals(Hayley) → (tend_to_land(Hayley) ∨ produce_high_quality_eggs(Hayley))",
        "conclusion": null
      },
      {
        "facts": [
          "raise_free_range_chickens(Hayley)",
          "collect_eggs_daily(Hayley)"
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "conclusion": "If Hayley raises free-range chickens and collects eggs daily, then she produces high-quality eggs.",
    "conclusion_fol": "(raise_free_range_chickens(Hayley) ∧ collect_eggs_daily(Hayley)) → produce_high_quality_eggs(Hayley)",
    "answer": "Uncertain",
    "context": [
      "Hayley sells eggs.",
      "All farmers who sell eggs own chickens.",
      "All farmers who own chickens collect eggs daily.",
      "Hayley cares for animals.",
      "Hayley tends to her land.",
      "If Hayley cares for animals, then she either tends to her land or produces high-quality eggs.",
      "Hayley raises free-range chickens."
    ],
    "context_fol": [
      "sell_eggs(Hayley)",
      "∀x (sell_eggs(x) → own_chickens(x))",
      "∀x (own_chickens(x) → collect_eggs_daily(x))",
      "care_for_animals(Hayley)",
      "tend_to_land(Hayley)",
      "care_for_animals(Hayley) → (tend_to_land(Hayley) ∨ produce_high_quality_eggs(Hayley))",
      "raise_free_range_chickens(Hayley)"
    ],
    "background_story": "Hayley was a young farmer who lived on a small farm surrounded by rolling hills and green pastures. Every morning, she'd wake up to the sound of her chickens clucking in the coop. She loved nothing more than collecting eggs from the nesting boxes and listening to the chickens' soft cluck as they went about their day. Hayley's farm was famous for its free-range chickens and delicious eggs, which she sold at the local market. As she worked, the sound of the chickens' cluck was a constant companion, a soothing background noise that brought her joy and peace. Hayley's connection to nature and her feathered friends made her farm a haven, where the gentle cluck of the chickens was music to her ears.",
    "name": "Hayley",
    "keyword": "cluck",
    "subject_category": "farmer"
  },
  {
    "facts": [
      "Orion has magic.",
      "Orion fosters growth.",
      "Orion gives gold.",
      "Orion does not bring wealth.",
      "Orion wields power."
    ],
    "facts_fol": [
      "has_magic(Orion)",
      "fosters_growth(Orion)",
      "gives_gold(Orion)",
      "¬brings_wealth(Orion)",
      "wields_power(Orion)"
    ],
    "rules": [
      "Orion is either magical or cursed, but not both.",
      "If Orion spreads prosperity or helps others, then he is blessed.",
      "If Orion either shares riches or fosters growth (but not both), then he spreads prosperity.",
      "If Orion either gives gold or brings wealth (but not both), then he helps others.",
      "Orion either wields power or shares riches, but not both."
    ],
    "rules_fol": [
      "has_magic(Orion) ⊕ cursed(Orion)",
      "(spreads_prosperity(Orion) ∨ helps_others(Orion)) → blessed(Orion)",
      "(shares_riches(Orion) ⊕ fosters_growth(Orion)) → spreads_prosperity(Orion)",
      "(gives_gold(Orion) ⊕ brings_wealth(Orion)) → helps_others(Orion)",
      "wields_power(Orion) ⊕ shares_riches(Orion)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Orion either suffers loss or faces darkness (but not both), then he is cursed.",
      "If Orion either heals wounds or grants wishes (but not both), then he is blessed.",
      "If Orion has a divine gift, then he either spreads prosperity or brings good fortune, but not both.",
      "If a mythical figure has a kind heart and acts with kindness, then they help others.",
      "If Orion travels far, then he earns respect and shares his riches."
    ],
    "distracting_rules_fol": [
      "(suffers_loss(Orion) ⊕ faces_darkness(Orion)) → cursed(Orion)",
      "(heals_wounds(Orion) ⊕ grants_wishes(Orion)) → blessed(Orion)",
      "has_divine_gift(Orion) → (spreads_prosperity(Orion) ⊕ brings_good_fortune(Orion))",
      "∀x ((has_heart(x) ∧ acts_kindly(x)) → helps_others(x))",
      "travels_far(Orion) → (earns_respect(Orion) ∧ shares_riches(Orion))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Orion wields power."
        ],
        "rules": "Orion either wields power or shares riches, but not both.",
        "conclusion": "Orion does not share riches."
      },
      {
        "facts": [
          "Orion gives gold.",
          "Orion does not bring wealth."
        ],
        "rules": "If Orion either gives gold or brings wealth (but not both), then he helps others.",
        "conclusion": "Orion helps others."
      },
      {
        "facts": [
          "Orion does not share riches.",
          "Orion fosters growth."
        ],
        "rules": "If Orion either shares riches or fosters growth (but not both), then he spreads prosperity.",
        "conclusion": "Orion spreads prosperity."
      },
      {
        "facts": [
          "Orion spreads prosperity.",
          "Orion helps others."
        ],
        "rules": "If Orion spreads prosperity or helps others, then he is blessed.",
        "conclusion": "Orion is blessed."
      },
      {
        "facts": [
          "Orion has magic."
        ],
        "rules": "Orion is either magical or cursed, but not both.",
        "conclusion": "Orion is not cursed."
      },
      {
        "facts": [
          "Orion is blessed.",
          "Orion is not cursed."
        ],
        "rules": null,
        "conclusion": "Orion is either blessed or cursed, but not both."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "wields_power(Orion)"
        ],
        "rules": "wields_power(Orion) ⊕ shares_riches(Orion)",
        "conclusion": "¬shares_riches(Orion)"
      },
      {
        "facts": [
          "gives_gold(Orion)",
          "¬brings_wealth(Orion)"
        ],
        "rules": "(gives_gold(Orion) ⊕ brings_wealth(Orion)) → helps_others(Orion)",
        "conclusion": "helps_others(Orion)"
      },
      {
        "facts": [
          "¬shares_riches(Orion)",
          "fosters_growth(Orion)"
        ],
        "rules": "(shares_riches(Orion) ⊕ fosters_growth(Orion)) → spreads_prosperity(Orion)",
        "conclusion": "spreads_prosperity(Orion)"
      },
      {
        "facts": [
          "spreads_prosperity(Orion)",
          "helps_others(Orion)"
        ],
        "rules": "(spreads_prosperity(Orion) ∨ helps_others(Orion)) → blessed(Orion)",
        "conclusion": "blessed(Orion)"
      },
      {
        "facts": [
          "has_magic(Orion)"
        ],
        "rules": "has_magic(Orion) ⊕ cursed(Orion)",
        "conclusion": "¬cursed(Orion)"
      },
      {
        "facts": [
          "blessed(Orion)",
          "¬cursed(Orion)"
        ],
        "rules": null,
        "conclusion": "blessed(Orion) ⊕ cursed(Orion)"
      }
    ],
    "conclusion": "Orion is either blessed or cursed, but not both.",
    "conclusion_fol": "blessed(Orion) ⊕ cursed(Orion)",
    "answer": "True",
    "context": [
      "Orion wields power.",
      "Orion either wields power or shares riches, but not both.",
      "Orion gives gold.",
      "Orion does not bring wealth.",
      "If Orion either gives gold or brings wealth (but not both), then he helps others.",
      "Orion fosters growth.",
      "If Orion either shares riches or fosters growth (but not both), then he spreads prosperity.",
      "If Orion spreads prosperity or helps others, then he is blessed.",
      "Orion has magic.",
      "Orion is either magical or cursed, but not both."
    ],
    "context_fol": [
      "wields_power(Orion)",
      "wields_power(Orion) ⊕ shares_riches(Orion)",
      "gives_gold(Orion)",
      "¬brings_wealth(Orion)",
      "(gives_gold(Orion) ⊕ brings_wealth(Orion)) → helps_others(Orion)",
      "fosters_growth(Orion)",
      "(shares_riches(Orion) ⊕ fosters_growth(Orion)) → spreads_prosperity(Orion)",
      "(spreads_prosperity(Orion) ∨ helps_others(Orion)) → blessed(Orion)",
      "has_magic(Orion)",
      "has_magic(Orion) ⊕ cursed(Orion)"
    ],
    "background_story": "Orion, a demigod from ancient mythology, was bestowed with the gift of Midas by the gods. Everything he touched turned to gold, but unlike the legendary King Midas, Orion's touch was not a curse. Instead, he used his power to bring prosperity to the lands he traveled. Villages flourished under his presence, as he turned barren fields into golden harvests and filled empty coffers with gold coins. Orion's journey was marked by kindness and generosity, earning him the love and admiration of the people. His path was paved with gold, not just literally, but also in the hearts of those he helped, making him a hero of unparalleled wealth and wisdom.",
    "name": "Orion",
    "keyword": "midas",
    "subject_category": "mythical figure"
  },
  {
    "facts": [
      "Kaitlyn collects stamps.",
      "Kaitlyn travels abroad.",
      "Kaitlyn does not fear change.",
      "Kaitlyn does not have low income.",
      "Kaitlyn is clueless about money."
    ],
    "facts_fol": [
      "collects_stamps(Kaitlyn)",
      "travels_abroad(Kaitlyn)",
      "¬fears_change(Kaitlyn)",
      "¬has_low_income(Kaitlyn)",
      "is_clueless(Kaitlyn)"
    ],
    "rules": [
      "If Kaitlyn travels abroad, then she is either interested in numismatics or collects stamps, but not both.",
      "Anyone who hates coins or avoids money is uninterested in numismatics.",
      "If Kaitlyn fears change, then she hates coins.",
      "If Kaitlyn lacks financial knowledge, then she either avoids money or has low income.",
      "Anyone who is clueless about money matters lacks financial knowledge."
    ],
    "rules_fol": [
      "travels_abroad(Kaitlyn) → (interested_in_numismatics(Kaitlyn) ⊕ collects_stamps(Kaitlyn))",
      "∀x ((hates_coins(x) ∨ avoids_money(x)) → uninterested_in_numismatics(x))",
      "fears_change(Kaitlyn) → hates_coins(Kaitlyn)",
      "lacks_financial_knowledge(Kaitlyn) → (avoids_money(Kaitlyn) ∨ has_low_income(Kaitlyn))",
      "∀x (is_clueless(x) → lacks_financial_knowledge(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Anyone who studies currencies or collects coins is interested in numismatics.",
      "If someone either ignores currencies or dislikes coins (but not both), then they are uninterested in numismatics.",
      "If Kaitlyn studies currencies, then she either enjoys collecting or hates coins.",
      "If a person prefers barter and uses commodities, then they avoid money.",
      "If Kaitlyn makes impulse purchases, then she either lacks financial knowledge or is frugal."
    ],
    "distracting_rules_fol": [
      "∀x ((studies_currencies(x) ∨ collects_coins(x)) → interested_in_numismatics(x))",
      "∀x ((ignores_currencies(x) ⊕ dislikes_coins(x)) → uninterested_in_numismatics(x))",
      "studies_currencies(Kaitlyn) → (enjoys_collecting(Kaitlyn) ∨ hates_coins(Kaitlyn))",
      "∀x ((prefers_barter(x) ∧ uses_commodities(x)) → avoids_money(x))",
      "makes_impulse_purchases(Kaitlyn) → (lacks_financial_knowledge(Kaitlyn) ⊕ is_frugal(Kaitlyn))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Kaitlyn is clueless about money."
        ],
        "rules": "Anyone who is clueless about money matters lacks financial knowledge.",
        "conclusion": "Kaitlyn lacks financial knowledge."
      },
      {
        "facts": [
          "Kaitlyn lacks financial knowledge.",
          "Kaitlyn does not have low income."
        ],
        "rules": "If Kaitlyn lacks financial knowledge, then she either avoids money or has low income.",
        "conclusion": "Kaitlyn avoids money."
      },
      {
        "facts": [
          "Kaitlyn does not fear change."
        ],
        "rules": "If Kaitlyn fears change, then she hates coins.",
        "conclusion": null
      },
      {
        "facts": [
          "Kaitlyn avoids money."
        ],
        "rules": "Anyone who hates coins or avoids money is uninterested in numismatics.",
        "conclusion": "Kaitlyn is uninterested in numismatics."
      },
      {
        "facts": [
          "Kaitlyn travels abroad.",
          "Kaitlyn collects stamps."
        ],
        "rules": "If Kaitlyn travels abroad, then she is either interested in numismatics or collects stamps, but not both.",
        "conclusion": "Kaitlyn is not interested in numismatics."
      },
      {
        "facts": [
          "Kaitlyn is not interested in numismatics.",
          "Kaitlyn is uninterested in numismatics."
        ],
        "rules": null,
        "conclusion": "Kaitlyn is either interested in numismatics or uninterested in numismatics, but not both."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "is_clueless(Kaitlyn)"
        ],
        "rules": "∀x (is_clueless(x) → lacks_financial_knowledge(x))",
        "conclusion": "lacks_financial_knowledge(Kaitlyn)"
      },
      {
        "facts": [
          "lacks_financial_knowledge(Kaitlyn)",
          "¬has_low_income(Kaitlyn)"
        ],
        "rules": "lacks_financial_knowledge(Kaitlyn) → (avoids_money(Kaitlyn) ∨ has_low_income(Kaitlyn))",
        "conclusion": "avoids_money(Kaitlyn)"
      },
      {
        "facts": [
          "¬fears_change(Kaitlyn)"
        ],
        "rules": "fears_change(Kaitlyn) → hates_coins(Kaitlyn)",
        "conclusion": null
      },
      {
        "facts": [
          "avoids_money(Kaitlyn)"
        ],
        "rules": "∀x ((hates_coins(x) ∨ avoids_money(x)) → uninterested_in_numismatics(x))",
        "conclusion": "uninterested_in_numismatics(Kaitlyn)"
      },
      {
        "facts": [
          "travels_abroad(Kaitlyn)",
          "collects_stamps(Kaitlyn)"
        ],
        "rules": "travels_abroad(Kaitlyn) → (interested_in_numismatics(Kaitlyn) ⊕ collects_stamps(Kaitlyn))",
        "conclusion": "¬interested_in_numismatics(Kaitlyn)"
      },
      {
        "facts": [
          "¬interested_in_numismatics(Kaitlyn)",
          "uninterested_in_numismatics(Kaitlyn)"
        ],
        "rules": null,
        "conclusion": "interested_in_numismatics(Kaitlyn) ⊕ uninterested_in_numismatics(Kaitlyn)"
      }
    ],
    "conclusion": "Kaitlyn is either interested in numismatics or uninterested in numismatics, but not both.",
    "conclusion_fol": "interested_in_numismatics(Kaitlyn) ⊕ uninterested_in_numismatics(Kaitlyn)",
    "answer": "True",
    "context": [
      "Kaitlyn is clueless about money.",
      "Anyone who is clueless about money matters lacks financial knowledge.",
      "Kaitlyn does not have low income.",
      "If Kaitlyn lacks financial knowledge, then she either avoids money or has low income.",
      "Kaitlyn does not fear change.",
      "If Kaitlyn fears change, then she hates coins.",
      "Anyone who hates coins or avoids money is uninterested in numismatics.",
      "Kaitlyn travels abroad.",
      "Kaitlyn collects stamps.",
      "If Kaitlyn travels abroad, then she is either interested in numismatics or collects stamps, but not both."
    ],
    "context_fol": [
      "is_clueless(Kaitlyn)",
      "∀x (is_clueless(x) → lacks_financial_knowledge(x))",
      "¬has_low_income(Kaitlyn)",
      "lacks_financial_knowledge(Kaitlyn) → (avoids_money(Kaitlyn) ∨ has_low_income(Kaitlyn))",
      "¬fears_change(Kaitlyn)",
      "fears_change(Kaitlyn) → hates_coins(Kaitlyn)",
      "∀x ((hates_coins(x) ∨ avoids_money(x)) → uninterested_in_numismatics(x))",
      "travels_abroad(Kaitlyn)",
      "collects_stamps(Kaitlyn)",
      "travels_abroad(Kaitlyn) → (interested_in_numismatics(Kaitlyn) ⊕ collects_stamps(Kaitlyn))"
    ],
    "background_story": "Kaitlyn was a young adventurer who had always been fascinated by different cultures and currencies. During her travels to Macau, she became intrigued by the pataca, the local currency. She spent hours learning about its history and exchange rates, even collecting pataca notes and coins as souvenirs. Kaitlyn's friends and family back home would often receive postcards and small gifts purchased with patacas, sparking their interest in the unique currency. As she delved deeper into the world of numismatics, Kaitlyn started a blog to share her knowledge and passion for currencies like the pataca, inspiring others to explore the fascinating world of money and its role in shaping global cultures.",
    "name": "Kaitlyn",
    "keyword": "pataca",
    "subject_category": "human"
  },
  {
    "facts": [
      "Jairo does not sport beards.",
      "Jairo owns a business.",
      "Jairo does not tell good stories.",
      "Jairo dresses fancy.",
      "Jairo styles hair."
    ],
    "facts_fol": [
      "¬sports_beards(Jairo)",
      "owns_business(Jairo)",
      "¬tells_good_stories(Jairo)",
      "dresses_fancy(Jairo)",
      "styles_hair(Jairo)"
    ],
    "rules": [
      "If Jairo has a distinctive appearance and is charismatic, then he is well-liked.",
      "If someone either wears hats or sports beards (but not both), then they have a distinctive appearance.",
      "If Jairo owns a business, then he is either charismatic or a good storyteller, but not both.",
      "If Jairo dresses fancy or grooms well, then he wears hats.",
      "Jairo styles hair or grooms well."
    ],
    "rules_fol": [
      "(has_a_distinctive_appearance(Jairo) ∧ is_charismatic(Jairo)) → is_well_liked(Jairo)",
      "∀x ((wears_hats(x) ⊕ sports_beards(x)) → has_a_distinctive_appearance(x))",
      "owns_business(Jairo) → (tells_good_stories(Jairo) ⊕ is_charismatic(Jairo))",
      "(dresses_fancy(Jairo) ∨ grooms_well(Jairo)) → wears_hats(Jairo)",
      "styles_hair(Jairo) ∨ grooms_well(Jairo)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Anyone who wears unique clothes or has unusual hair has a distinctive appearance.",
      "If Jairo either speaks fluently or moves gracefully (but not both), then he is charismatic.",
      "If Jairo styles his mustachio, then he either wears hats or wears scarves.",
      "If Jairo values his appearance, then he grooms well and enjoys music."
    ],
    "distracting_rules_fol": [
      "∀x ((wears_unique_clothes(x) ∨ has_unusual_hair(x)) → has_a_distinctive_appearance(x))",
      "(speaks_fluently(Jairo) ⊕ moves_gracefully(Jairo)) → is_charismatic(Jairo)",
      "styles_mustachio(Jairo) → (wears_hats(Jairo) ∨ wears_scarves(Jairo))",
      "values_appearance(Jairo) → (grooms_well(Jairo) ∧ enjoys_music(Jairo))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Jairo styles hair."
        ],
        "rules": "Jairo styles hair or grooms well.",
        "conclusion": null
      },
      {
        "facts": [
          "Jairo dresses fancy."
        ],
        "rules": "If Jairo dresses fancy or grooms well, then he wears hats.",
        "conclusion": "Jairo wears hats."
      },
      {
        "facts": [
          "Jairo owns a business.",
          "Jairo does not tell good stories."
        ],
        "rules": "If Jairo owns a business, then he is either charismatic or a good storyteller, but not both.",
        "conclusion": "Jairo is charismatic."
      },
      {
        "facts": [
          "Jairo wears hats.",
          "Jairo does not sport beards."
        ],
        "rules": "If someone either wears hats or sports beards (but not both), then they have a distinctive appearance.",
        "conclusion": "Jairo has a distinctive appearance."
      },
      {
        "facts": [
          "Jairo has a distinctive appearance.",
          "Jairo is charismatic."
        ],
        "rules": "If Jairo has a distinctive appearance and is charismatic, then he is well-liked.",
        "conclusion": "Jairo is not well-liked."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "styles_hair(Jairo)"
        ],
        "rules": "styles_hair(Jairo) ∨ grooms_well(Jairo)",
        "conclusion": null
      },
      {
        "facts": [
          "dresses_fancy(Jairo)"
        ],
        "rules": "(dresses_fancy(Jairo) ∨ grooms_well(Jairo)) → wears_hats(Jairo)",
        "conclusion": "wears_hats(Jairo)"
      },
      {
        "facts": [
          "owns_business(Jairo)",
          "¬tells_good_stories(Jairo)"
        ],
        "rules": "owns_business(Jairo) → (tells_good_stories(Jairo) ⊕ is_charismatic(Jairo))",
        "conclusion": "is_charismatic(Jairo)"
      },
      {
        "facts": [
          "wears_hats(Jairo)",
          "¬sports_beards(Jairo)"
        ],
        "rules": "∀x ((wears_hats(x) ⊕ sports_beards(x)) → has_a_distinctive_appearance(x))",
        "conclusion": "has_a_distinctive_appearance(Jairo)"
      },
      {
        "facts": [
          "has_a_distinctive_appearance(Jairo)",
          "is_charismatic(Jairo)"
        ],
        "rules": "(has_a_distinctive_appearance(Jairo) ∧ is_charismatic(Jairo)) → is_well_liked(Jairo)",
        "conclusion": "¬is_well_liked(Jairo)"
      }
    ],
    "conclusion": "Jairo is not well-liked.",
    "conclusion_fol": "¬is_well_liked(Jairo)",
    "answer": "False",
    "context": [
      "Jairo styles hair.",
      "Jairo styles hair or grooms well.",
      "Jairo dresses fancy.",
      "If Jairo dresses fancy or grooms well, then he wears hats.",
      "Jairo owns a business.",
      "Jairo does not tell good stories.",
      "If Jairo owns a business, then he is either charismatic or a good storyteller, but not both.",
      "Jairo does not sport beards.",
      "If someone either wears hats or sports beards (but not both), then they have a distinctive appearance.",
      "If Jairo has a distinctive appearance and is charismatic, then he is well-liked."
    ],
    "context_fol": [
      "styles_hair(Jairo)",
      "styles_hair(Jairo) ∨ grooms_well(Jairo)",
      "dresses_fancy(Jairo)",
      "(dresses_fancy(Jairo) ∨ grooms_well(Jairo)) → wears_hats(Jairo)",
      "owns_business(Jairo)",
      "¬tells_good_stories(Jairo)",
      "owns_business(Jairo) → (tells_good_stories(Jairo) ⊕ is_charismatic(Jairo))",
      "¬sports_beards(Jairo)",
      "∀x ((wears_hats(x) ⊕ sports_beards(x)) → has_a_distinctive_appearance(x))",
      "(has_a_distinctive_appearance(Jairo) ∧ is_charismatic(Jairo)) → is_well_liked(Jairo)"
    ],
    "background_story": "Jairo was a charismatic figure in the small town of Santa Maria, known for his extravagant mustachio that rivaled those of the most iconic villains in silent films. His mustachio, which he waxed and curled at the tips, had become a trademark of sorts, making him instantly recognizable. Jairo was the owner of the local barbershop, where he not only cut hair but also spun tales of adventure and romance. His mustachio seemed to have a life of its own, twitching with excitement as he recounted stories of his travels. Despite his flamboyant appearance, Jairo had a heart of gold, always ready to lend a listening ear or a helping hand. The townsfolk adored him, and his mustachio became a symbol of the town's vibrant spirit and Jairo's unforgettable personality.",
    "name": "Jairo",
    "keyword": "mustachio",
    "subject_category": "human"
  },
  {
    "facts": [
      "Samara is perceptive.",
      "Samara is contemplative.",
      "Samara is able to appreciate life."
    ],
    "facts_fol": [
      "perceptive(Samara)",
      "is_contemplative(Samara)",
      "appreciates_life(Samara)"
    ],
    "rules": [
      "If Samara is either creative or perceptive (but not both), then she is inspired.",
      "Anyone who sees beauty or thinks deeply is creative.",
      "Samara is either reflective or able to see beauty, but not necessarily both at the same time.",
      "If Samara is contemplative, then she is either reflective or able to appreciate life, but not both."
    ],
    "rules_fol": [
      "(creative(Samara) ⊕ perceptive(Samara)) → inspired(Samara)",
      "∀x ((sees_beauty(x) ∨ thinks_deeply(x)) → creative(x))",
      "is_reflective(Samara) ⊕ sees_beauty(Samara)",
      "is_contemplative(Samara) → (is_reflective(Samara) ⊕ appreciates_life(Samara))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Samara either makes art or writes poetry (but not both), then she is creative.",
      "If someone loves nature and values moments, then they see beauty.",
      "Anyone who values silence or loves nature is reflective."
    ],
    "distracting_rules_fol": [
      "(makes_art(Samara) ⊕ writes_poetry(Samara)) → creative(Samara)",
      "∀x ((loves_nature(x) ∧ values_moments(x)) → sees_beauty(x))",
      "∀x ((values_silence(x) ∨ loves_nature(x)) → is_reflective(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Samara is contemplative.",
          "Samara is able to appreciate life."
        ],
        "rules": "If Samara is contemplative, then she is either reflective or able to appreciate life, but not both.",
        "conclusion": "Samara is not reflective."
      },
      {
        "facts": [
          "Samara is not reflective."
        ],
        "rules": "Samara is either reflective or able to see beauty, but not necessarily both at the same time.",
        "conclusion": "Samara sees beauty."
      },
      {
        "facts": [
          "Samara sees beauty."
        ],
        "rules": "Anyone who sees beauty or thinks deeply is creative.",
        "conclusion": "Samara is creative."
      },
      {
        "facts": [
          "Samara is creative.",
          "Samara is perceptive."
        ],
        "rules": "If Samara is either creative or perceptive (but not both), then she is inspired.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "is_contemplative(Samara)",
          "appreciates_life(Samara)"
        ],
        "rules": "is_contemplative(Samara) → (is_reflective(Samara) ⊕ appreciates_life(Samara))",
        "conclusion": "¬is_reflective(Samara)"
      },
      {
        "facts": [
          "¬is_reflective(Samara)"
        ],
        "rules": "is_reflective(Samara) ⊕ sees_beauty(Samara)",
        "conclusion": "sees_beauty(Samara)"
      },
      {
        "facts": [
          "sees_beauty(Samara)"
        ],
        "rules": "∀x ((sees_beauty(x) ∨ thinks_deeply(x)) → creative(x))",
        "conclusion": "creative(Samara)"
      },
      {
        "facts": [
          "creative(Samara)",
          "perceptive(Samara)"
        ],
        "rules": "(creative(Samara) ⊕ perceptive(Samara)) → inspired(Samara)",
        "conclusion": null
      }
    ],
    "conclusion": "Samara is inspired.",
    "conclusion_fol": "inspired(Samara)",
    "answer": "Uncertain",
    "context": [
      "Samara is contemplative.",
      "Samara is able to appreciate life.",
      "If Samara is contemplative, then she is either reflective or able to appreciate life, but not both.",
      "Samara is either reflective or able to see beauty, but not necessarily both at the same time.",
      "Anyone who sees beauty or thinks deeply is creative.",
      "Samara is perceptive.",
      "If Samara is either creative or perceptive (but not both), then she is inspired."
    ],
    "context_fol": [
      "is_contemplative(Samara)",
      "appreciates_life(Samara)",
      "is_contemplative(Samara) → (is_reflective(Samara) ⊕ appreciates_life(Samara))",
      "is_reflective(Samara) ⊕ sees_beauty(Samara)",
      "∀x ((sees_beauty(x) ∨ thinks_deeply(x)) → creative(x))",
      "perceptive(Samara)",
      "(creative(Samara) ⊕ perceptive(Samara)) → inspired(Samara)"
    ],
    "background_story": "Samara was a free-spirited artist, known for her captivating photographs that told stories of fleeting moments. During a trip to Japan, she stumbled upon a serene garden, where she met an old man playing a traditional flute. The melancholic melody momentarily transported her to a different era. Entranced, Samara captured the scene, and the resulting photograph became her most famous piece. The image, titled 'Ephemeral Harmony,' conveyed the essence of a moment that was momentarily perfect, yet irretrievable. Samara's work reminded viewers to appreciate the beauty in transient moments, for it is in these brief instances that life's true essence is revealed.",
    "name": "Samara",
    "keyword": "momentarily",
    "subject_category": "human"
  },
  {
    "facts": [
      "Cassidy is dedicated to conservation.",
      "Cassidy documents rare species.",
      "Cassidy saves species.",
      "Cassidy explores oceans.",
      "Cassidy examines ecosystems."
    ],
    "facts_fol": [
      "dedicated_to_conservation(Cassidy)",
      "documents_rare_species(Cassidy)",
      "saves_species(Cassidy)",
      "explores_oceans(Cassidy)",
      "examines_ecosystems(Cassidy)"
    ],
    "rules": [
      "If Cassidy is dedicated to conservation, then she makes groundbreaking discoveries and inspires others.",
      "If Cassidy studies snipefish, then she either protects habitats or makes groundbreaking discoveries.",
      "If Cassidy researches marine life, then she either studies snipefish or documents rare species.",
      "Any marine biologist who saves species will protect habitats.",
      "If a marine biologist explores oceans and examines ecosystems, then they research marine life."
    ],
    "rules_fol": [
      "dedicated_to_conservation(Cassidy) → (makes_groundbreaking_discoveries(Cassidy) ∧ inspires_others(Cassidy))",
      "studies_snipefish(Cassidy) → (protects_habitats(Cassidy) ∨ makes_groundbreaking_discoveries(Cassidy))",
      "researches_marine_life(Cassidy) → (studies_snipefish(Cassidy) ⊕ documents_rare_species(Cassidy))",
      "∀x (saves_species(x) → protects_habitats(x))",
      "∀x ((explores_oceans(x) ∧ examines_ecosystems(x)) → researches_marine_life(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Cassidy either explores the sea or makes groundbreaking discoveries.",
      "If Cassidy loves fish, then she studies snipefish.",
      "Every marine biologist either preserves marine life or protects habitats.",
      "All marine biologists who either monitor water quality or track sea turtles (but not both) research marine life."
    ],
    "distracting_rules_fol": [
      "explores_sea(Cassidy) ∨ makes_groundbreaking_discoveries(Cassidy)",
      "loves_fish(Cassidy) → studies_snipefish(Cassidy)",
      "∀x (preserves_marine_life(x) ∨ protects_habitats(x))",
      "∀x ((monitors_water_quality(x) ⊕ tracks_sea_turtles(x)) → researches_marine_life(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Cassidy explores oceans.",
          "Cassidy examines ecosystems."
        ],
        "rules": "If a marine biologist explores oceans and examines ecosystems, then they research marine life.",
        "conclusion": "Cassidy researches marine life."
      },
      {
        "facts": [
          "Cassidy saves species."
        ],
        "rules": "Any marine biologist who saves species will protect habitats.",
        "conclusion": "Cassidy protects habitats."
      },
      {
        "facts": [
          "Cassidy researches marine life.",
          "Cassidy documents rare species."
        ],
        "rules": "If Cassidy researches marine life, then she either studies snipefish or documents rare species.",
        "conclusion": "Cassidy does not study snipefish."
      },
      {
        "facts": [
          "Cassidy does not study snipefish.",
          "Cassidy protects habitats."
        ],
        "rules": "If Cassidy studies snipefish, then she either protects habitats or makes groundbreaking discoveries.",
        "conclusion": null
      },
      {
        "facts": [
          "Cassidy is dedicated to conservation."
        ],
        "rules": "If Cassidy is dedicated to conservation, then she makes groundbreaking discoveries and inspires others.",
        "conclusion": "Cassidy does not inspire others."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "explores_oceans(Cassidy)",
          "examines_ecosystems(Cassidy)"
        ],
        "rules": "∀x ((explores_oceans(x) ∧ examines_ecosystems(x)) → researches_marine_life(x))",
        "conclusion": "researches_marine_life(Cassidy)"
      },
      {
        "facts": [
          "saves_species(Cassidy)"
        ],
        "rules": "∀x (saves_species(x) → protects_habitats(x))",
        "conclusion": "protects_habitats(Cassidy)"
      },
      {
        "facts": [
          "researches_marine_life(Cassidy)",
          "documents_rare_species(Cassidy)"
        ],
        "rules": "researches_marine_life(Cassidy) → (studies_snipefish(Cassidy) ⊕ documents_rare_species(Cassidy))",
        "conclusion": "¬studies_snipefish(Cassidy)"
      },
      {
        "facts": [
          "¬studies_snipefish(Cassidy)",
          "protects_habitats(Cassidy)"
        ],
        "rules": "studies_snipefish(Cassidy) → (protects_habitats(Cassidy) ∨ makes_groundbreaking_discoveries(Cassidy))",
        "conclusion": null
      },
      {
        "facts": [
          "dedicated_to_conservation(Cassidy)"
        ],
        "rules": "dedicated_to_conservation(Cassidy) → (makes_groundbreaking_discoveries(Cassidy) ∧ inspires_others(Cassidy))",
        "conclusion": "¬inspires_others(Cassidy)"
      }
    ],
    "conclusion": "Cassidy does not inspire others.",
    "conclusion_fol": "¬inspires_others(Cassidy)",
    "answer": "False",
    "context": [
      "Cassidy explores oceans.",
      "Cassidy examines ecosystems.",
      "If a marine biologist explores oceans and examines ecosystems, then they research marine life.",
      "Cassidy saves species.",
      "Any marine biologist who saves species will protect habitats.",
      "Cassidy documents rare species.",
      "If Cassidy researches marine life, then she either studies snipefish or documents rare species.",
      "If Cassidy studies snipefish, then she either protects habitats or makes groundbreaking discoveries.",
      "Cassidy is dedicated to conservation.",
      "If Cassidy is dedicated to conservation, then she makes groundbreaking discoveries and inspires others."
    ],
    "context_fol": [
      "explores_oceans(Cassidy)",
      "examines_ecosystems(Cassidy)",
      "∀x ((explores_oceans(x) ∧ examines_ecosystems(x)) → researches_marine_life(x))",
      "saves_species(Cassidy)",
      "∀x (saves_species(x) → protects_habitats(x))",
      "documents_rare_species(Cassidy)",
      "researches_marine_life(Cassidy) → (studies_snipefish(Cassidy) ⊕ documents_rare_species(Cassidy))",
      "studies_snipefish(Cassidy) → (protects_habitats(Cassidy) ∨ makes_groundbreaking_discoveries(Cassidy))",
      "dedicated_to_conservation(Cassidy)",
      "dedicated_to_conservation(Cassidy) → (makes_groundbreaking_discoveries(Cassidy) ∧ inspires_others(Cassidy))"
    ],
    "background_story": "Cassidy was a renowned marine biologist with a fascination for the elusive snipefish. Her research focused on the unique characteristics and habitats of these mysterious creatures. Cassidy spent years studying the snipefish in their natural environment, from the coral reefs of the Caribbean to the kelp forests of the Pacific. Her groundbreaking discoveries shed new light on the importance of snipefish in maintaining the balance of marine ecosystems. Cassidy's dedication to conservation led to the establishment of protected areas for snipefish habitats, ensuring the long-term survival of these incredible fish. Her work inspired a new generation of marine biologists and earned her the nickname 'The Snipefish Whisperer' among her peers.",
    "name": "Cassidy",
    "keyword": "snipefish",
    "subject_category": "marine biologist"
  },
  {
    "facts": [
      "Holly is adventurous.",
      "Holly is spontaneous."
    ],
    "facts_fol": [
      "is_adventurous(Holly)",
      "is_spontaneous(Holly)"
    ],
    "rules": [
      "Holly is either creative or uninspired, but not both.",
      "All expressive people are creative.",
      "Holly is imaginative or expressive.",
      "If Holly is adventurous, then she is either spontaneous or imaginative, but not both."
    ],
    "rules_fol": [
      "creative(Holly) ⊕ uninspired(Holly)",
      "∀x (expressive(x) → creative(x))",
      "is_imaginative(Holly) ∨ expressive(Holly)",
      "is_adventurous(Holly) → (is_spontaneous(Holly) ⊕ is_imaginative(Holly))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Holly is open-minded and loves learning, then she is creative.",
      "If Holly either loves color or plays music (but not both), then she is expressive.",
      "If someone sees beauty and thinks freely, then they are imaginative."
    ],
    "distracting_rules_fol": [
      "open_minded(Holly) → (love_learning(Holly) ∧ creative(Holly))",
      "(loves_color(Holly) ⊕ plays_music(Holly)) → expressive(Holly)",
      "∀x ((sees_beauty(x) ∧ thinks_freely(x)) → is_imaginative(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Holly is adventurous.",
          "Holly is spontaneous."
        ],
        "rules": "If Holly is adventurous, then she is either spontaneous or imaginative, but not both.",
        "conclusion": "Holly is not imaginative."
      },
      {
        "facts": [
          "Holly is not imaginative."
        ],
        "rules": "Holly is imaginative or expressive.",
        "conclusion": "Holly is expressive."
      },
      {
        "facts": [
          "Holly is expressive."
        ],
        "rules": "All expressive people are creative.",
        "conclusion": "Holly is creative."
      },
      {
        "facts": [
          "Holly is creative."
        ],
        "rules": "Holly is either creative or uninspired, but not both.",
        "conclusion": "Holly is uninspired."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "is_adventurous(Holly)",
          "is_spontaneous(Holly)"
        ],
        "rules": "is_adventurous(Holly) → (is_spontaneous(Holly) ⊕ is_imaginative(Holly))",
        "conclusion": "¬is_imaginative(Holly)"
      },
      {
        "facts": [
          "¬is_imaginative(Holly)"
        ],
        "rules": "is_imaginative(Holly) ∨ expressive(Holly)",
        "conclusion": "expressive(Holly)"
      },
      {
        "facts": [
          "expressive(Holly)"
        ],
        "rules": "∀x (expressive(x) → creative(x))",
        "conclusion": "creative(Holly)"
      },
      {
        "facts": [
          "creative(Holly)"
        ],
        "rules": "creative(Holly) ⊕ uninspired(Holly)",
        "conclusion": "uninspired(Holly)"
      }
    ],
    "conclusion": "Holly is uninspired.",
    "conclusion_fol": "uninspired(Holly)",
    "answer": "False",
    "context": [
      "Holly is adventurous.",
      "Holly is spontaneous.",
      "If Holly is adventurous, then she is either spontaneous or imaginative, but not both.",
      "Holly is imaginative or expressive.",
      "All expressive people are creative.",
      "Holly is either creative or uninspired, but not both."
    ],
    "context_fol": [
      "is_adventurous(Holly)",
      "is_spontaneous(Holly)",
      "is_adventurous(Holly) → (is_spontaneous(Holly) ⊕ is_imaginative(Holly))",
      "is_imaginative(Holly) ∨ expressive(Holly)",
      "∀x (expressive(x) → creative(x))",
      "creative(Holly) ⊕ uninspired(Holly)"
    ],
    "background_story": "Holly, a free-spirited artist, found her muse in Naples, Italy. She had always been drawn to the city's vibrant culture and breathtaking landscapes. After a chance visit, she decided to leave her mundane life behind and relocate to this coastal gem. In Naples, Holly's creativity flourished as she immersed herself in the local art scene. She spent her days painting the colorful streets, sipping espresso in quaint cafes, and learning the secrets of Neapolitan cuisine. As she absorbed the city's energy, her art gained recognition, and soon she was exhibiting her work in local galleries. Holly's love affair with Naples not only inspired her art but also changed her outlook on life, teaching her to embrace la dolce vita - the sweet life.",
    "name": "Holly",
    "keyword": "naples",
    "subject_category": "human"
  },
  {
    "facts": [
      "Andrew is vigilant.",
      "Andrew is not skeptical.",
      "Andrew does not read hidden meanings.",
      "Andrew does not hear voices.",
      "Andrew is mistrustful."
    ],
    "facts_fol": [
      "is_vigilant(Andrew)",
      "¬skeptical(Andrew)",
      "¬reads_hidden_meanings(Andrew)",
      "¬hears_voice(Andrew)",
      "is_mistrustful(Andrew)"
    ],
    "rules": [
      "If Andrew is either paranoid or skeptical (but not both), then he becomes isolated.",
      "If Andrew either sees conspiracies or distrusts others (but not both), then he is paranoid.",
      "If Andrew either interprets omens or reads hidden meanings (but not both), then he sees conspiracies.",
      "If Andrew is vigilant, then he either interprets omens or hears voices, but not both.",
      "Andrew is either mistrustful or distrusts others, but not both, which contributes to his fragile mental state."
    ],
    "rules_fol": [
      "(paranoid(Andrew) ⊕ skeptical(Andrew)) → isolated(Andrew)",
      "(sees_conspiracies(Andrew) ⊕ distrusts_others(Andrew)) → paranoid(Andrew)",
      "(interprets_omens(Andrew) ⊕ reads_hidden_meanings(Andrew)) → sees_conspiracies(Andrew)",
      "is_vigilant(Andrew) → (interprets_omens(Andrew) ⊕ hears_voice(Andrew))",
      "is_mistrustful(Andrew) ⊕ distrusts_others(Andrew)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Andrew lacks trust, then he is either paranoid or anxious, but not both.",
      "Andrew fears the unknown or sees conspiracies.",
      "If Andrew is anxious, then he either interprets omens or seeks patterns (but not both).",
      "If someone lacks trust, then they distrust others and fear betrayal."
    ],
    "distracting_rules_fol": [
      "lacks_trust(Andrew) → (paranoid(Andrew) ⊕ is_anxious(Andrew))",
      "fears_unknown(Andrew) ∨ sees_conspiracies(Andrew)",
      "is_anxious(Andrew) → (interprets_omens(Andrew) ⊕ seeks_patterns(Andrew))",
      "∀x (lacks_trust(x) → (distrusts_others(x) ∧ fears_betrayal(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Andrew is mistrustful."
        ],
        "rules": "Andrew is either mistrustful or distrusts others, but not both, which contributes to his fragile mental state.",
        "conclusion": "Andrew does not distrust others."
      },
      {
        "facts": [
          "Andrew is vigilant.",
          "Andrew does not hear voices."
        ],
        "rules": "If Andrew is vigilant, then he either interprets omens or hears voices, but not both.",
        "conclusion": "Andrew interprets omens."
      },
      {
        "facts": [
          "Andrew interprets omens.",
          "Andrew does not read hidden meanings."
        ],
        "rules": "If Andrew either interprets omens or reads hidden meanings (but not both), then he sees conspiracies.",
        "conclusion": "Andrew sees conspiracies."
      },
      {
        "facts": [
          "Andrew sees conspiracies.",
          "Andrew does not distrust others."
        ],
        "rules": "If Andrew either sees conspiracies or distrusts others (but not both), then he is paranoid.",
        "conclusion": "Andrew is paranoid."
      },
      {
        "facts": [
          "Andrew is paranoid.",
          "Andrew is not skeptical."
        ],
        "rules": "If Andrew is either paranoid or skeptical (but not both), then he becomes isolated.",
        "conclusion": "Andrew becomes isolated."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "is_mistrustful(Andrew)"
        ],
        "rules": "is_mistrustful(Andrew) ⊕ distrusts_others(Andrew)",
        "conclusion": "¬distrusts_others(Andrew)"
      },
      {
        "facts": [
          "is_vigilant(Andrew)",
          "¬hears_voice(Andrew)"
        ],
        "rules": "is_vigilant(Andrew) → (interprets_omens(Andrew) ⊕ hears_voice(Andrew))",
        "conclusion": "interprets_omens(Andrew)"
      },
      {
        "facts": [
          "interprets_omens(Andrew)",
          "¬reads_hidden_meanings(Andrew)"
        ],
        "rules": "(interprets_omens(Andrew) ⊕ reads_hidden_meanings(Andrew)) → sees_conspiracies(Andrew)",
        "conclusion": "sees_conspiracies(Andrew)"
      },
      {
        "facts": [
          "sees_conspiracies(Andrew)",
          "¬distrusts_others(Andrew)"
        ],
        "rules": "(sees_conspiracies(Andrew) ⊕ distrusts_others(Andrew)) → paranoid(Andrew)",
        "conclusion": "paranoid(Andrew)"
      },
      {
        "facts": [
          "paranoid(Andrew)",
          "¬skeptical(Andrew)"
        ],
        "rules": "(paranoid(Andrew) ⊕ skeptical(Andrew)) → isolated(Andrew)",
        "conclusion": "isolated(Andrew)"
      }
    ],
    "conclusion": "Andrew becomes isolated.",
    "conclusion_fol": "isolated(Andrew)",
    "answer": "True",
    "context": [
      "Andrew is mistrustful.",
      "Andrew is either mistrustful or distrusts others, but not both, which contributes to his fragile mental state.",
      "Andrew is vigilant.",
      "Andrew does not hear voices.",
      "If Andrew is vigilant, then he either interprets omens or hears voices, but not both.",
      "Andrew does not read hidden meanings.",
      "If Andrew either interprets omens or reads hidden meanings (but not both), then he sees conspiracies.",
      "If Andrew either sees conspiracies or distrusts others (but not both), then he is paranoid.",
      "Andrew is not skeptical.",
      "If Andrew is either paranoid or skeptical (but not both), then he becomes isolated."
    ],
    "context_fol": [
      "is_mistrustful(Andrew)",
      "is_mistrustful(Andrew) ⊕ distrusts_others(Andrew)",
      "is_vigilant(Andrew)",
      "¬hears_voice(Andrew)",
      "is_vigilant(Andrew) → (interprets_omens(Andrew) ⊕ hears_voice(Andrew))",
      "¬reads_hidden_meanings(Andrew)",
      "(interprets_omens(Andrew) ⊕ reads_hidden_meanings(Andrew)) → sees_conspiracies(Andrew)",
      "(sees_conspiracies(Andrew) ⊕ distrusts_others(Andrew)) → paranoid(Andrew)",
      "¬skeptical(Andrew)",
      "(paranoid(Andrew) ⊕ skeptical(Andrew)) → isolated(Andrew)"
    ],
    "background_story": "Andrew was a man consumed by paranoias. He saw conspiracies in every glance, every whisper, and every coincidence. His days were filled with the exhausting effort of deciphering hidden messages and codes, convinced that the world was against him. Despite his intelligence and charisma, Andrew's paranoias isolated him, making it difficult for him to form lasting relationships or hold down a job. His obsession with uncovering the 'truth' led him down rabbit holes of conspiracy theories, further entrenching his beliefs. As time passed, Andrew's grip on reality began to slip, leaving those who cared for him worried about his well-being and desperate to help him find a way out of the labyrinth of his own mind.",
    "name": "Andrew",
    "keyword": "paranthias",
    "subject_category": "human"
  },
  {
    "facts": [
      "Chloe is curious.",
      "Chloe values diversity."
    ],
    "facts_fol": [
      "curious(Chloe)",
      "values_diversity(Chloe)"
    ],
    "rules": [
      "Chloe is either tolerant or faithful (or both).",
      "If Chloe is open-minded, then she is either tolerant or empathic, but not both.",
      "If Chloe is curious, then she respects others and is open-minded.",
      "Chloe either values diversity or is empathic, but not both."
    ],
    "rules_fol": [
      "tolerant(Chloe) ∨ faithful(Chloe)",
      "open_minded(Chloe) → (tolerant(Chloe) ⊕ empathic(Chloe))",
      "curious(Chloe) → (respects_others(Chloe) ∧ open_minded(Chloe))",
      "values_diversity(Chloe) ⊕ empathic(Chloe)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Chloe either cares deeply or is tolerant.",
      "Anyone who seeks truth is open-minded.",
      "All active listeners are empathic and help others."
    ],
    "distracting_rules_fol": [
      "cares_deeply(Chloe) ∨ tolerant(Chloe)",
      "∀x (seeks_truth(x) → open_minded(x))",
      "∀x (active_listener(x) → (empathic(x) ∧ helps_others(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Chloe values diversity."
        ],
        "rules": "Chloe either values diversity or is empathic, but not both.",
        "conclusion": "Chloe is not empathic."
      },
      {
        "facts": [
          "Chloe is curious."
        ],
        "rules": "If Chloe is curious, then she respects others and is open-minded.",
        "conclusion": "Chloe is open-minded."
      },
      {
        "facts": [
          "Chloe is open-minded.",
          "Chloe is not empathic."
        ],
        "rules": "If Chloe is open-minded, then she is either tolerant or empathic, but not both.",
        "conclusion": "Chloe is tolerant."
      },
      {
        "facts": [
          "Chloe is tolerant."
        ],
        "rules": "Chloe is either tolerant or faithful (or both).",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "values_diversity(Chloe)"
        ],
        "rules": "values_diversity(Chloe) ⊕ empathic(Chloe)",
        "conclusion": "¬empathic(Chloe)"
      },
      {
        "facts": [
          "curious(Chloe)"
        ],
        "rules": "curious(Chloe) → (respects_others(Chloe) ∧ open_minded(Chloe))",
        "conclusion": "open_minded(Chloe)"
      },
      {
        "facts": [
          "open_minded(Chloe)",
          "¬empathic(Chloe)"
        ],
        "rules": "open_minded(Chloe) → (tolerant(Chloe) ⊕ empathic(Chloe))",
        "conclusion": "tolerant(Chloe)"
      },
      {
        "facts": [
          "tolerant(Chloe)"
        ],
        "rules": "tolerant(Chloe) ∨ faithful(Chloe)",
        "conclusion": null
      }
    ],
    "conclusion": "Chloe is faithful.",
    "conclusion_fol": "faithful(Chloe)",
    "answer": "Uncertain",
    "context": [
      "Chloe values diversity.",
      "Chloe either values diversity or is empathic, but not both.",
      "Chloe is curious.",
      "If Chloe is curious, then she respects others and is open-minded.",
      "If Chloe is open-minded, then she is either tolerant or empathic, but not both.",
      "Chloe is either tolerant or faithful (or both)."
    ],
    "context_fol": [
      "values_diversity(Chloe)",
      "values_diversity(Chloe) ⊕ empathic(Chloe)",
      "curious(Chloe)",
      "curious(Chloe) → (respects_others(Chloe) ∧ open_minded(Chloe))",
      "open_minded(Chloe) → (tolerant(Chloe) ⊕ empathic(Chloe))",
      "tolerant(Chloe) ∨ faithful(Chloe)"
    ],
    "background_story": "Chloe, a theology student, found herself at the forefront of a heated debate about denominationalism within her community. Growing up in a multi-denominational family, she had always been fascinated by the diverse interpretations of faith. As she delved deeper into her studies, Chloe became increasingly concerned about the divisions within the church, where denominational lines often seemed to create more barriers than bridges. She began to organize ecumenical events, bringing together leaders and members from various denominations to discuss their differences and commonalities. Through her efforts, Chloe helped foster a sense of unity and understanding, encouraging her community to focus on the shared values of compassion, love, and service that transcended denominational boundaries.",
    "name": "Chloe",
    "keyword": "denominationalism",
    "subject_category": "human"
  },
  {
    "facts": [
      "Weston is feared by many.",
      "Weston has a notorious reputation.",
      "Weston strikes fear.",
      "Weston is not elusive.",
      "Weston is infamous.",
      "Weston has supernatural powers."
    ],
    "facts_fol": [
      "feared_by_many(Weston)",
      "has_notorious_reputation(Weston)",
      "strikes_fear(Weston)",
      "¬is_elusive(Weston)",
      "is_infamous(Weston)",
      "has_supernatural_powers(Weston)"
    ],
    "rules": [
      "Weston either rides at night or commits daring heists, but not both.",
      "If Weston travels stealthily or strikes fear, then he can ride at night.",
      "If Weston is elusive, then he travels stealthily and leads a gang.",
      "If Weston is infamous, then he is either a gang leader or has supernatural powers, but not both."
    ],
    "rules_fol": [
      "rides_at_night(Weston) ⊕ commits_daring_heists(Weston)",
      "(travels_stealthy(Weston) ∨ strikes_fear(Weston)) → rides_at_night(Weston)",
      "is_elusive(Weston) → (travels_stealthy(Weston) ∧ leads_gang(Weston))",
      "is_infamous(Weston) → (leads_gang(Weston) ⊕ has_supernatural_powers(Weston))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Weston either pulls off robberies or commits daring heists.",
      "If Weston lives freely, then he rides at night and defies authority.",
      "All legendary figures who move secretly travel stealthily.",
      "Weston either robs banks or leads a gang."
    ],
    "distracting_rules_fol": [
      "pulls_off_robberies(Weston) ∨ commits_daring_heists(Weston)",
      "lives_freely(Weston) → (rides_at_night(Weston) ∧ defies_authority(Weston))",
      "∀x (moves_secretly(x) → travels_stealthy(x))",
      "robs_banks(Weston) ∨ leads_gang(Weston)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Weston is infamous.",
          "Weston has supernatural powers."
        ],
        "rules": "If Weston is infamous, then he is either a gang leader or has supernatural powers, but not both.",
        "conclusion": "Weston does not lead a gang."
      },
      {
        "facts": [
          "Weston is not elusive.",
          "Weston does not lead a gang."
        ],
        "rules": "If Weston is elusive, then he travels stealthily and leads a gang.",
        "conclusion": null
      },
      {
        "facts": [
          "Weston strikes fear."
        ],
        "rules": "If Weston travels stealthily or strikes fear, then he can ride at night.",
        "conclusion": "Weston rides at night."
      },
      {
        "facts": [
          "Weston rides at night."
        ],
        "rules": "Weston either rides at night or commits daring heists, but not both.",
        "conclusion": "Weston does not commit daring heists."
      },
      {
        "facts": [
          "Weston is feared by many.",
          "Weston has a notorious reputation.",
          "Weston does not commit daring heists."
        ],
        "rules": null,
        "conclusion": "Weston is feared by many and either has a notorious reputation or commits daring heists (or both)."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "is_infamous(Weston)",
          "has_supernatural_powers(Weston)"
        ],
        "rules": "is_infamous(Weston) → (leads_gang(Weston) ⊕ has_supernatural_powers(Weston))",
        "conclusion": "¬leads_gang(Weston)"
      },
      {
        "facts": [
          "¬is_elusive(Weston)",
          "¬leads_gang(Weston)"
        ],
        "rules": "is_elusive(Weston) → (travels_stealthy(Weston) ∧ leads_gang(Weston))",
        "conclusion": null
      },
      {
        "facts": [
          "strikes_fear(Weston)"
        ],
        "rules": "(travels_stealthy(Weston) ∨ strikes_fear(Weston)) → rides_at_night(Weston)",
        "conclusion": "rides_at_night(Weston)"
      },
      {
        "facts": [
          "rides_at_night(Weston)"
        ],
        "rules": "rides_at_night(Weston) ⊕ commits_daring_heists(Weston)",
        "conclusion": "¬commits_daring_heists(Weston)"
      },
      {
        "facts": [
          "feared_by_many(Weston)",
          "has_notorious_reputation(Weston)",
          "¬commits_daring_heists(Weston)"
        ],
        "rules": null,
        "conclusion": "feared_by_many(Weston) ∧ (has_notorious_reputation(Weston) ∨ commits_daring_heists(Weston))"
      }
    ],
    "conclusion": "Weston is feared by many and either has a notorious reputation or commits daring heists (or both).",
    "conclusion_fol": "feared_by_many(Weston) ∧ (has_notorious_reputation(Weston) ∨ commits_daring_heists(Weston))",
    "answer": "True",
    "context": [
      "Weston is infamous.",
      "Weston has supernatural powers.",
      "If Weston is infamous, then he is either a gang leader or has supernatural powers, but not both.",
      "Weston is not elusive.",
      "If Weston is elusive, then he travels stealthily and leads a gang.",
      "Weston strikes fear.",
      "If Weston travels stealthily or strikes fear, then he can ride at night.",
      "Weston either rides at night or commits daring heists, but not both.",
      "Weston is feared by many.",
      "Weston has a notorious reputation."
    ],
    "context_fol": [
      "is_infamous(Weston)",
      "has_supernatural_powers(Weston)",
      "is_infamous(Weston) → (leads_gang(Weston) ⊕ has_supernatural_powers(Weston))",
      "¬is_elusive(Weston)",
      "is_elusive(Weston) → (travels_stealthy(Weston) ∧ leads_gang(Weston))",
      "strikes_fear(Weston)",
      "(travels_stealthy(Weston) ∨ strikes_fear(Weston)) → rides_at_night(Weston)",
      "rides_at_night(Weston) ⊕ commits_daring_heists(Weston)",
      "feared_by_many(Weston)",
      "has_notorious_reputation(Weston)"
    ],
    "background_story": "Weston was a notorious outlaw who rode the dusty trails of the Wild West, leaving a trail of terrorization in his wake. His gang, known as the 'Midnight Riders,' would sweep into towns under the cover of darkness, plundering banks and saloons, and striking fear into the hearts of the locals. Weston's reputation was built on his ruthless tactics and his ability to evade capture, earning him a spot on the most-wanted list. His exploits became the stuff of legend, with some claiming he had supernatural powers that allowed him to disappear into thin air. The people of the West lived in constant fear of Weston's terrorization, whispering stories of his brutality around campfires and in hushed tones.",
    "name": "Weston",
    "keyword": "terrorization",
    "subject_category": "legendary figure"
  },
  {
    "facts": [
      "Ensley does not know plants."
    ],
    "facts_fol": [
      "¬knows_plants(Ensley)"
    ],
    "rules": [
      "Either Ensley specializes in Asteridae or she studies other plants, but not both.",
      "If Ensley loves flowers, then she specializes in Asteridae.",
      "Every botanist either knows plants or loves flowers."
    ],
    "rules_fol": [
      "specializes_in_Asteridae(Ensley) ⊕ studies_other_plants(Ensley)",
      "loves_flowers(Ensley) → specializes_in_Asteridae(Ensley)",
      "∀x (knows_plants(x) ∨ loves_flowers(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Ensley conducts research, then she travels expertly and specializes in Asteridae.",
      "Every botanist either admires nature or loves flowers."
    ],
    "distracting_rules_fol": [
      "conducts_research(Ensley) → (travel_expertly(Ensley) ∧ specializes_in_Asteridae(Ensley))",
      "∀x (admires_nature(x) ∨ loves_flowers(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Ensley does not know plants."
        ],
        "rules": "Every botanist either knows plants or loves flowers.",
        "conclusion": "Ensley loves flowers."
      },
      {
        "facts": [
          "Ensley loves flowers."
        ],
        "rules": "If Ensley loves flowers, then she specializes in Asteridae.",
        "conclusion": "Ensley specializes in Asteridae."
      },
      {
        "facts": [
          "Ensley specializes in Asteridae."
        ],
        "rules": "Either Ensley specializes in Asteridae or she studies other plants, but not both.",
        "conclusion": "Ensley does not study other plants."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬knows_plants(Ensley)"
        ],
        "rules": "∀x (knows_plants(x) ∨ loves_flowers(x))",
        "conclusion": "loves_flowers(Ensley)"
      },
      {
        "facts": [
          "loves_flowers(Ensley)"
        ],
        "rules": "loves_flowers(Ensley) → specializes_in_Asteridae(Ensley)",
        "conclusion": "specializes_in_Asteridae(Ensley)"
      },
      {
        "facts": [
          "specializes_in_Asteridae(Ensley)"
        ],
        "rules": "specializes_in_Asteridae(Ensley) ⊕ studies_other_plants(Ensley)",
        "conclusion": "¬studies_other_plants(Ensley)"
      }
    ],
    "conclusion": "Ensley does not study other plants.",
    "conclusion_fol": "¬studies_other_plants(Ensley)",
    "answer": "True",
    "context": [
      "Ensley does not know plants.",
      "Every botanist either knows plants or loves flowers.",
      "If Ensley loves flowers, then she specializes in Asteridae.",
      "Either Ensley specializes in Asteridae or she studies other plants, but not both."
    ],
    "context_fol": [
      "¬knows_plants(Ensley)",
      "∀x (knows_plants(x) ∨ loves_flowers(x))",
      "loves_flowers(Ensley) → specializes_in_Asteridae(Ensley)",
      "specializes_in_Asteridae(Ensley) ⊕ studies_other_plants(Ensley)"
    ],
    "background_story": "Ensley was a renowned botanist with a passion for the Asteridae family of flowering plants. She spent most of her career studying the diverse species within this group, from sunflowers to daisies. Ensley's fascination with Asteridae began in her childhood, watching her mother tend to their garden filled with vibrant asters and cosmos. As she delved deeper into her research, she discovered new species and developed groundbreaking theories on the evolution of these plants. Ensley's work took her to remote corners of the globe, from the sun-kissed fields of Europe to the lush forests of South America. Her contributions to the field of botany earned her numerous accolades, but it was her love for the Asteridae family that remained her driving force, inspiring future generations of botanists to explore the wonders of these beautiful flowers.",
    "name": "Ensley",
    "keyword": "asteridae",
    "subject_category": "botanist"
  },
  {
    "facts": [
      "Edith collects data.",
      "Edith learns languages.",
      "Edith reads history.",
      "Edith explores cultures.",
      "Edith loves linguistics.",
      "Edith understands symbols."
    ],
    "facts_fol": [
      "collect_data(Edith)",
      "learn_languages(Edith)",
      "reads_history(Edith)",
      "explore_cultures(Edith)",
      "loves_linguistics(Edith)",
      "understands_symbols(Edith)"
    ],
    "rules": [
      "If Edith studies onomastics and researches name origins, then she becomes a scholar.",
      "If Edith explores cultures, then she either learns languages or studies onomastics, but not both.",
      "If Edith analyzes etymology, then she either researches name origins or collects data, but not both.",
      "If someone reads history and examines meanings, then they can analyze etymology.",
      "If someone loves linguistics and understands symbols, then they can examine meanings."
    ],
    "rules_fol": [
      "(study_onomastics(Edith) ∧ research_name_origins(Edith)) → become_scholar(Edith)",
      "explore_cultures(Edith) → (learn_languages(Edith) ⊕ study_onomastics(Edith))",
      "analyze_etymology(Edith) → (research_name_origins(Edith) ⊕ collect_data(Edith))",
      "∀x ((reads_history(x) ∧ examines_meanings(x)) → analyze_etymology(x))",
      "∀x ((loves_linguistics(x) ∧ understands_symbols(x)) → examines_meanings(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Everyone who investigates names either studies onomastics or uncovers hidden meanings.",
      "If Edith either deciphers scripts or translates texts (but not both), then she researches name origins.",
      "If Edith deciphers names, then she analyzes etymology.",
      "If Edith either decodes symbols or interprets texts (but not both), then she examines meanings."
    ],
    "distracting_rules_fol": [
      "∀x (investigate_names(x) → (study_onomastics(x) ∨ uncover_hidden_meanings(x)))",
      "(decipher_scripts(Edith) ⊕ translate_texts(Edith)) → research_name_origins(Edith)",
      "deciphers_names(Edith) → analyze_etymology(Edith)",
      "(decodes_symbols(Edith) ⊕ interprets_texts(Edith)) → examines_meanings(Edith)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Edith loves linguistics.",
          "Edith understands symbols."
        ],
        "rules": "If someone loves linguistics and understands symbols, then they can examine meanings.",
        "conclusion": "Edith examines meanings."
      },
      {
        "facts": [
          "Edith reads history.",
          "Edith examines meanings."
        ],
        "rules": "If someone reads history and examines meanings, then they can analyze etymology.",
        "conclusion": "Edith analyzes etymology."
      },
      {
        "facts": [
          "Edith analyzes etymology.",
          "Edith collects data."
        ],
        "rules": "If Edith analyzes etymology, then she either researches name origins or collects data, but not both.",
        "conclusion": "Edith does not research name origins."
      },
      {
        "facts": [
          "Edith explores cultures.",
          "Edith learns languages."
        ],
        "rules": "If Edith explores cultures, then she either learns languages or studies onomastics, but not both.",
        "conclusion": "Edith does not study onomastics."
      },
      {
        "facts": [
          "Edith does not study onomastics.",
          "Edith does not research name origins."
        ],
        "rules": "If Edith studies onomastics and researches name origins, then she becomes a scholar.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "loves_linguistics(Edith)",
          "understands_symbols(Edith)"
        ],
        "rules": "∀x ((loves_linguistics(x) ∧ understands_symbols(x)) → examines_meanings(x))",
        "conclusion": "examines_meanings(Edith)"
      },
      {
        "facts": [
          "reads_history(Edith)",
          "examines_meanings(Edith)"
        ],
        "rules": "∀x ((reads_history(x) ∧ examines_meanings(x)) → analyze_etymology(x))",
        "conclusion": "analyze_etymology(Edith)"
      },
      {
        "facts": [
          "analyze_etymology(Edith)",
          "collect_data(Edith)"
        ],
        "rules": "analyze_etymology(Edith) → (research_name_origins(Edith) ⊕ collect_data(Edith))",
        "conclusion": "¬research_name_origins(Edith)"
      },
      {
        "facts": [
          "explore_cultures(Edith)",
          "learn_languages(Edith)"
        ],
        "rules": "explore_cultures(Edith) → (learn_languages(Edith) ⊕ study_onomastics(Edith))",
        "conclusion": "¬study_onomastics(Edith)"
      },
      {
        "facts": [
          "¬study_onomastics(Edith)",
          "¬research_name_origins(Edith)"
        ],
        "rules": "(study_onomastics(Edith) ∧ research_name_origins(Edith)) → become_scholar(Edith)",
        "conclusion": null
      }
    ],
    "conclusion": "Edith does not become a scholar.",
    "conclusion_fol": "¬become_scholar(Edith)",
    "answer": "Uncertain",
    "context": [
      "Edith loves linguistics.",
      "Edith understands symbols.",
      "If someone loves linguistics and understands symbols, then they can examine meanings.",
      "Edith reads history.",
      "If someone reads history and examines meanings, then they can analyze etymology.",
      "Edith collects data.",
      "If Edith analyzes etymology, then she either researches name origins or collects data, but not both.",
      "Edith explores cultures.",
      "Edith learns languages.",
      "If Edith explores cultures, then she either learns languages or studies onomastics, but not both.",
      "If Edith studies onomastics and researches name origins, then she becomes a scholar."
    ],
    "context_fol": [
      "loves_linguistics(Edith)",
      "understands_symbols(Edith)",
      "∀x ((loves_linguistics(x) ∧ understands_symbols(x)) → examines_meanings(x))",
      "reads_history(Edith)",
      "∀x ((reads_history(x) ∧ examines_meanings(x)) → analyze_etymology(x))",
      "collect_data(Edith)",
      "analyze_etymology(Edith) → (research_name_origins(Edith) ⊕ collect_data(Edith))",
      "explore_cultures(Edith)",
      "learn_languages(Edith)",
      "explore_cultures(Edith) → (learn_languages(Edith) ⊕ study_onomastics(Edith))",
      "(study_onomastics(Edith) ∧ research_name_origins(Edith)) → become_scholar(Edith)"
    ],
    "background_story": "Edith was a renowned onomastic scholar, specializing in the study of names and their origins. Her fascination with etymology began as a child, when she discovered the rich history behind her own name, Edith, which meant 'prosperous in war'. She spent years researching and cataloging names from cultures around the world, uncovering hidden meanings and connections. Edith's work took her to distant lands, from the dusty archives of European monasteries to the vibrant markets of Africa, where she learned about the significance of names in different societies. Her groundbreaking book, 'The Power of Names', explored the onomastic traditions of various cultures, shedding light on the profound impact of names on identity and community.",
    "name": "Edith",
    "keyword": "onomastic",
    "subject_category": "human"
  },
  {
    "facts": [
      "Laylani is detail-oriented."
    ],
    "facts_fol": [
      "detail_oriented(Laylani)"
    ],
    "rules": [
      "Laylani is either organized or disorganized, but not both.",
      "All meticulous individuals are organized.",
      "If someone is detail-oriented, then they communicate well and are meticulous."
    ],
    "rules_fol": [
      "organized(Laylani) ⊕ disorganized(Laylani)",
      "∀x (meticulous(x) → organized(x))",
      "∀x (detail_oriented(x) → (communicate_well(x) ∧ meticulous(x)))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If someone plans ahead and manages their time, then they are organized.",
      "If someone plans ahead and tracks progress, then they are meticulous."
    ],
    "distracting_rules_fol": [
      "∀x ((plansAhead(x) ∧ managesTime(x)) → organized(x))",
      "∀x ((plans_ahead(x) ∧ tracks_progress(x)) → meticulous(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Laylani is detail-oriented."
        ],
        "rules": "If someone is detail-oriented, then they communicate well and are meticulous.",
        "conclusion": "Laylani is meticulous."
      },
      {
        "facts": [
          "Laylani is meticulous."
        ],
        "rules": "All meticulous individuals are organized.",
        "conclusion": "Laylani is organized."
      },
      {
        "facts": [
          "Laylani is organized."
        ],
        "rules": "Laylani is either organized or disorganized, but not both.",
        "conclusion": "Laylani is disorganized."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "detail_oriented(Laylani)"
        ],
        "rules": "∀x (detail_oriented(x) → (communicate_well(x) ∧ meticulous(x)))",
        "conclusion": "meticulous(Laylani)"
      },
      {
        "facts": [
          "meticulous(Laylani)"
        ],
        "rules": "∀x (meticulous(x) → organized(x))",
        "conclusion": "organized(Laylani)"
      },
      {
        "facts": [
          "organized(Laylani)"
        ],
        "rules": "organized(Laylani) ⊕ disorganized(Laylani)",
        "conclusion": "disorganized(Laylani)"
      }
    ],
    "conclusion": "Laylani is disorganized.",
    "conclusion_fol": "disorganized(Laylani)",
    "answer": "False",
    "context": [
      "Laylani is detail-oriented.",
      "If someone is detail-oriented, then they communicate well and are meticulous.",
      "All meticulous individuals are organized.",
      "Laylani is either organized or disorganized, but not both."
    ],
    "context_fol": [
      "detail_oriented(Laylani)",
      "∀x (detail_oriented(x) → (communicate_well(x) ∧ meticulous(x)))",
      "∀x (meticulous(x) → organized(x))",
      "organized(Laylani) ⊕ disorganized(Laylani)"
    ],
    "background_story": "Laylani was a highly organized and detail-oriented individual who excelled in her role as an office administrator. She managed the day-to-day operations of a busy non-profit organization with ease, ensuring that all tasks were completed efficiently and effectively. Laylani's ability to work administratively, handling everything from budgeting to scheduling, allowed the organization's directors to focus on their mission. Her exceptional communication skills and warm demeanor made her a beloved figure among staff and clients alike. Under her administrative guidance, the organization flourished, expanding its reach and impact in the community. Laylani's dedication and administrative prowess were recognized with a special award for outstanding service, solidifying her position as a vital component of the team.",
    "name": "Laylani",
    "keyword": "administratively",
    "subject_category": "human"
  },
  {
    "facts": [
      "Itzayana is not a successful artist.",
      "Itzayana is a creative person.",
      "Itzayana does not seek challenge.",
      "Itzayana nurtures talent."
    ],
    "facts_fol": [
      "¬successful_artist(Itzayana)",
      "creative_person(Itzayana)",
      "¬seeks_challenge(Itzayana)",
      "nurtures_talent(Itzayana)"
    ],
    "rules": [
      "If Itzayana is a successful artist, then she is either inspired by her community or supports local talent (or both).",
      "If Itzayana is a creative person, then she is either inspired by her community or driven by passion, but not both.",
      "If Itzayana either seeks challenge or values freedom (but not both), then she is driven by passion.",
      "Itzayana either pursues a social cause or values freedom, but not both, and these two aspects of her personality do not necessarily overlap.",
      "Itzayana either nurtures talent or pursues a social cause, but not both."
    ],
    "rules_fol": [
      "successful_artist(Itzayana) → (inspired_by_community(Itzayana) ∨ supports_local_talent(Itzayana))",
      "creative_person(Itzayana) → (inspired_by_community(Itzayana) ⊕ driven_by_passion(Itzayana))",
      "(seeks_challenge(Itzayana) ⊕ values_freedom(Itzayana)) → driven_by_passion(Itzayana)",
      "pursues_social_cause(Itzayana) ⊕ values_freedom(Itzayana)",
      "nurtures_talent(Itzayana) ⊕ pursues_social_cause(Itzayana)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Itzayana lives in Brooklyn or engages with its culture, then she is inspired by the community.",
      "If Itzayana either follows her vision or sets goals (but not both), then she is driven by passion.",
      "All expressive individuals are open-minded and value freedom.",
      "Itzayana helps others or pursues a social cause."
    ],
    "distracting_rules_fol": [
      "(lives_in_brooklyn(Itzayana) ∨ engages_with_culture(Itzayana)) → inspired_by_community(Itzayana)",
      "(follows_vision(Itzayana) ⊕ sets_goals(Itzayana)) → driven_by_passion(Itzayana)",
      "∀x (expressive(x) → (open_minded(x) ∧ values_freedom(x)))",
      "helps_others(Itzayana) ∨ pursues_social_cause(Itzayana)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Itzayana nurtures talent."
        ],
        "rules": "Itzayana either nurtures talent or pursues a social cause, but not both.",
        "conclusion": "Itzayana does not pursue a social cause."
      },
      {
        "facts": [
          "Itzayana does not pursue a social cause."
        ],
        "rules": "Itzayana either pursues a social cause or values freedom, but not both, and these two aspects of her personality do not necessarily overlap.",
        "conclusion": "Itzayana values freedom."
      },
      {
        "facts": [
          "Itzayana does not seek challenge.",
          "Itzayana values freedom."
        ],
        "rules": "If Itzayana either seeks challenge or values freedom (but not both), then she is driven by passion.",
        "conclusion": "Itzayana is driven by passion."
      },
      {
        "facts": [
          "Itzayana is a creative person.",
          "Itzayana is driven by passion."
        ],
        "rules": "If Itzayana is a creative person, then she is either inspired by her community or driven by passion, but not both.",
        "conclusion": "Itzayana is not inspired by her community."
      },
      {
        "facts": [
          "Itzayana is not a successful artist.",
          "Itzayana is not inspired by her community."
        ],
        "rules": "If Itzayana is a successful artist, then she is either inspired by her community or supports local talent (or both).",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "nurtures_talent(Itzayana)"
        ],
        "rules": "nurtures_talent(Itzayana) ⊕ pursues_social_cause(Itzayana)",
        "conclusion": "¬pursues_social_cause(Itzayana)"
      },
      {
        "facts": [
          "¬pursues_social_cause(Itzayana)"
        ],
        "rules": "pursues_social_cause(Itzayana) ⊕ values_freedom(Itzayana)",
        "conclusion": "values_freedom(Itzayana)"
      },
      {
        "facts": [
          "¬seeks_challenge(Itzayana)",
          "values_freedom(Itzayana)"
        ],
        "rules": "(seeks_challenge(Itzayana) ⊕ values_freedom(Itzayana)) → driven_by_passion(Itzayana)",
        "conclusion": "driven_by_passion(Itzayana)"
      },
      {
        "facts": [
          "creative_person(Itzayana)",
          "driven_by_passion(Itzayana)"
        ],
        "rules": "creative_person(Itzayana) → (inspired_by_community(Itzayana) ⊕ driven_by_passion(Itzayana))",
        "conclusion": "¬inspired_by_community(Itzayana)"
      },
      {
        "facts": [
          "¬successful_artist(Itzayana)",
          "¬inspired_by_community(Itzayana)"
        ],
        "rules": "successful_artist(Itzayana) → (inspired_by_community(Itzayana) ∨ supports_local_talent(Itzayana))",
        "conclusion": null
      }
    ],
    "conclusion": "Itzayana does not support local talent.",
    "conclusion_fol": "¬supports_local_talent(Itzayana)",
    "answer": "Uncertain",
    "context": [
      "Itzayana nurtures talent.",
      "Itzayana either nurtures talent or pursues a social cause, but not both.",
      "Itzayana either pursues a social cause or values freedom, but not both, and these two aspects of her personality do not necessarily overlap.",
      "Itzayana does not seek challenge.",
      "If Itzayana either seeks challenge or values freedom (but not both), then she is driven by passion.",
      "Itzayana is a creative person.",
      "If Itzayana is a creative person, then she is either inspired by her community or driven by passion, but not both.",
      "Itzayana is not a successful artist.",
      "If Itzayana is a successful artist, then she is either inspired by her community or supports local talent (or both)."
    ],
    "context_fol": [
      "nurtures_talent(Itzayana)",
      "nurtures_talent(Itzayana) ⊕ pursues_social_cause(Itzayana)",
      "pursues_social_cause(Itzayana) ⊕ values_freedom(Itzayana)",
      "¬seeks_challenge(Itzayana)",
      "(seeks_challenge(Itzayana) ⊕ values_freedom(Itzayana)) → driven_by_passion(Itzayana)",
      "creative_person(Itzayana)",
      "creative_person(Itzayana) → (inspired_by_community(Itzayana) ⊕ driven_by_passion(Itzayana))",
      "¬successful_artist(Itzayana)",
      "successful_artist(Itzayana) → (inspired_by_community(Itzayana) ∨ supports_local_talent(Itzayana))"
    ],
    "background_story": "Itzayana was a vibrant artist who found her muse in the eclectic streets of Brooklyn. Born and raised in the borough, she drew inspiration from its diverse cultures, historic brownstones, and lively neighborhoods. Her paintings, a fusion of abstract and realism, reflected the ever-changing landscape of Brooklyn. Itzayana's studio in Bushwick became a hub for local artists, where she hosted workshops and exhibitions showcasing the community's talent. As her art gained recognition, she remained committed to her Brooklyn roots, using her platform to promote social justice and support emerging artists. Itzayana's love for Brooklyn was not just about the place, but about the people and the stories that made it a melting pot of creativity and resilience.",
    "name": "Itzayana",
    "keyword": "brooklyn",
    "subject_category": "human"
  },
  {
    "facts": [
      "Amias creates acclaimed work.",
      "Amias pursues his dreams.",
      "Amias does not tell stories."
    ],
    "facts_fol": [
      "create_acclaimed_work(Amias)",
      "pursue_dreams(Amias)",
      "¬tell_stories(Amias)"
    ],
    "rules": [
      "If Amias is a talented filmmaker, then he creates acclaimed work and achieves recognition.",
      "Amias is either passionate or a talented filmmaker, but not both.",
      "Everyone who pursues their dreams either tells stories or is passionate (or both)."
    ],
    "rules_fol": [
      "talented_filmmaker(Amias) → (create_acclaimed_work(Amias) ∧ achieve_recognition(Amias))",
      "is_passionate(Amias) ⊕ talented_filmmaker(Amias)",
      "∀x (pursue_dreams(x) → (tell_stories(x) ∨ is_passionate(x)))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Amias either makes blockbuster films or directs independent films (but not both), then he is a talented filmmaker.",
      "All dedicated people are passionate and work hard."
    ],
    "distracting_rules_fol": [
      "(makes_blockbusters(Amias) ⊕ directs_indies(Amias)) → talented_filmmaker(Amias)",
      "∀x (dedicated(x) → (is_passionate(x) ∧ work_hard(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Amias pursues his dreams.",
          "Amias does not tell stories."
        ],
        "rules": "Everyone who pursues their dreams either tells stories or is passionate (or both).",
        "conclusion": "Amias is passionate."
      },
      {
        "facts": [
          "Amias is passionate."
        ],
        "rules": "Amias is either passionate or a talented filmmaker, but not both.",
        "conclusion": "Amias is not a talented filmmaker."
      },
      {
        "facts": [
          "Amias is not a talented filmmaker.",
          "Amias creates acclaimed work."
        ],
        "rules": "If Amias is a talented filmmaker, then he creates acclaimed work and achieves recognition.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "pursue_dreams(Amias)",
          "¬tell_stories(Amias)"
        ],
        "rules": "∀x (pursue_dreams(x) → (tell_stories(x) ∨ is_passionate(x)))",
        "conclusion": "is_passionate(Amias)"
      },
      {
        "facts": [
          "is_passionate(Amias)"
        ],
        "rules": "is_passionate(Amias) ⊕ talented_filmmaker(Amias)",
        "conclusion": "¬talented_filmmaker(Amias)"
      },
      {
        "facts": [
          "¬talented_filmmaker(Amias)",
          "create_acclaimed_work(Amias)"
        ],
        "rules": "talented_filmmaker(Amias) → (create_acclaimed_work(Amias) ∧ achieve_recognition(Amias))",
        "conclusion": null
      }
    ],
    "conclusion": "Amias does not achieve recognition.",
    "conclusion_fol": "¬achieve_recognition(Amias)",
    "answer": "Uncertain",
    "context": [
      "Amias pursues his dreams.",
      "Amias does not tell stories.",
      "Everyone who pursues their dreams either tells stories or is passionate (or both).",
      "Amias is either passionate or a talented filmmaker, but not both.",
      "Amias creates acclaimed work.",
      "If Amias is a talented filmmaker, then he creates acclaimed work and achieves recognition."
    ],
    "context_fol": [
      "pursue_dreams(Amias)",
      "¬tell_stories(Amias)",
      "∀x (pursue_dreams(x) → (tell_stories(x) ∨ is_passionate(x)))",
      "is_passionate(Amias) ⊕ talented_filmmaker(Amias)",
      "create_acclaimed_work(Amias)",
      "talented_filmmaker(Amias) → (create_acclaimed_work(Amias) ∧ achieve_recognition(Amias))"
    ],
    "background_story": "Amias was a budding filmmaker with a passion for storytelling. After years of working on short films and documentaries, he finally got the chance to premiere his debut feature film at a prestigious film festival. The movie, a drama about social justice, had been a labor of love for Amias, who wrote, directed, and produced it. The night of the premiere was electric, with critics and audiences alike praising the film's powerful narrative and stunning cinematography. As Amias walked the red carpet, he was met with applause and admiration, his dream of bringing his vision to the big screen finally realized. The premiere marked the beginning of Amias' successful career in Hollywood, with his film going on to win several awards and earn critical acclaim.",
    "name": "Amias",
    "keyword": "premiere",
    "subject_category": "person"
  },
  {
    "facts": [
      "Noah gains experience.",
      "Noah is confident.",
      "Noah learns quickly.",
      "Noah does not manage his time.",
      "Noah does not plan ahead.",
      "Noah does not prioritize tasks."
    ],
    "facts_fol": [
      "gain_experience(Noah)",
      "confident(Noah)",
      "learn_quickly(Noah)",
      "¬manages_time(Noah)",
      "¬plans_ahead(Noah)",
      "¬prioritizes_tasks(Noah)"
    ],
    "rules": [
      "If Noah is well-prepared, then he can either secure a good job or receive valuable feedback, but not both.",
      "Anyone who studies hard or gains experience is well-prepared.",
      "If Noah is confident, then he receives valuable feedback and learns quickly.",
      "If someone sets goals and manages time, then they study hard.",
      "Anyone who plans ahead or prioritizes tasks sets goals."
    ],
    "rules_fol": [
      "well_prepared(Noah) → (secure_job(Noah) ⊕ receive_valuable_feedback(Noah))",
      "∀x ((study_hard(x) ∨ gain_experience(x)) → well_prepared(x))",
      "confident(Noah) → (receive_valuable_feedback(Noah) ∧ learn_quickly(Noah))",
      "∀x ((sets_goals(x) ∧ manages_time(x)) → study_hard(x))",
      "∀x ((plans_ahead(x) ∨ prioritizes_tasks(x)) → sets_goals(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Anyone who thinks critically or organizes their thoughts is well-prepared.",
      "If someone seeks knowledge and applies skills, then they can receive valuable feedback.",
      "Anyone who sets high standards or has strong motivation will study hard.",
      "Noah works diligently or sets goals."
    ],
    "distracting_rules_fol": [
      "∀x ((thinks_critically(x) ∨ organizes_thoughts(x)) → well_prepared(x))",
      "∀x ((seeks_knowledge(x) ∧ applies_skills(x)) → receive_valuable_feedback(x))",
      "∀x ((sets_high_standards(x) ∨ has_strong_motivation(x)) → study_hard(x))",
      "works_diligent(Noah) ∨ sets_goals(Noah)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Noah does not plan ahead.",
          "Noah does not prioritize tasks."
        ],
        "rules": "Anyone who plans ahead or prioritizes tasks sets goals.",
        "conclusion": null
      },
      {
        "facts": [
          "Noah does not manage his time."
        ],
        "rules": "If someone sets goals and manages time, then they study hard.",
        "conclusion": null
      },
      {
        "facts": [
          "Noah is confident.",
          "Noah learns quickly."
        ],
        "rules": "If Noah is confident, then he receives valuable feedback and learns quickly.",
        "conclusion": "Noah receives valuable feedback."
      },
      {
        "facts": [
          "Noah gains experience."
        ],
        "rules": "Anyone who studies hard or gains experience is well-prepared.",
        "conclusion": "Noah is well-prepared."
      },
      {
        "facts": [
          "Noah is well-prepared.",
          "Noah receives valuable feedback."
        ],
        "rules": "If Noah is well-prepared, then he can either secure a good job or receive valuable feedback, but not both.",
        "conclusion": "Noah does not secure a good job."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬plans_ahead(Noah)",
          "¬prioritizes_tasks(Noah)"
        ],
        "rules": "∀x ((plans_ahead(x) ∨ prioritizes_tasks(x)) → sets_goals(x))",
        "conclusion": null
      },
      {
        "facts": [
          "¬manages_time(Noah)"
        ],
        "rules": "∀x ((sets_goals(x) ∧ manages_time(x)) → study_hard(x))",
        "conclusion": null
      },
      {
        "facts": [
          "confident(Noah)",
          "learn_quickly(Noah)"
        ],
        "rules": "confident(Noah) → (receive_valuable_feedback(Noah) ∧ learn_quickly(Noah))",
        "conclusion": "receive_valuable_feedback(Noah)"
      },
      {
        "facts": [
          "gain_experience(Noah)"
        ],
        "rules": "∀x ((study_hard(x) ∨ gain_experience(x)) → well_prepared(x))",
        "conclusion": "well_prepared(Noah)"
      },
      {
        "facts": [
          "well_prepared(Noah)",
          "receive_valuable_feedback(Noah)"
        ],
        "rules": "well_prepared(Noah) → (secure_job(Noah) ⊕ receive_valuable_feedback(Noah))",
        "conclusion": "¬secure_job(Noah)"
      }
    ],
    "conclusion": "Noah does not secure a good job.",
    "conclusion_fol": "¬secure_job(Noah)",
    "answer": "True",
    "context": [
      "Noah does not plan ahead.",
      "Noah does not prioritize tasks.",
      "Anyone who plans ahead or prioritizes tasks sets goals.",
      "Noah does not manage his time.",
      "If someone sets goals and manages time, then they study hard.",
      "Noah is confident.",
      "Noah learns quickly.",
      "If Noah is confident, then he receives valuable feedback and learns quickly.",
      "Noah gains experience.",
      "Anyone who studies hard or gains experience is well-prepared.",
      "If Noah is well-prepared, then he can either secure a good job or receive valuable feedback, but not both."
    ],
    "context_fol": [
      "¬plans_ahead(Noah)",
      "¬prioritizes_tasks(Noah)",
      "∀x ((plans_ahead(x) ∨ prioritizes_tasks(x)) → sets_goals(x))",
      "¬manages_time(Noah)",
      "∀x ((sets_goals(x) ∧ manages_time(x)) → study_hard(x))",
      "confident(Noah)",
      "learn_quickly(Noah)",
      "confident(Noah) → (receive_valuable_feedback(Noah) ∧ learn_quickly(Noah))",
      "gain_experience(Noah)",
      "∀x ((study_hard(x) ∨ gain_experience(x)) → well_prepared(x))",
      "well_prepared(Noah) → (secure_job(Noah) ⊕ receive_valuable_feedback(Noah))"
    ],
    "background_story": "Noah, a diligent student, was about to graduate from business school. As part of his final assessment, he had to undergo a comprehensive evaluation to gauge his skills and knowledge. The assessor, a seasoned professional, put Noah through a series of tests, simulations, and interviews. Noah, being a diligent and hardworking individual, had thoroughly prepared himself for this moment. He confidently showcased his understanding of financial analysis, marketing strategies, and leadership skills. The assessor was impressed by Noah's composure, clarity of thought, and ability to think on his feet. After the evaluation, Noah received a glowing review, highlighting his strengths and areas for improvement. This assessment not only helped him secure a top job offer but also gave him valuable feedback to further refine his skills.",
    "name": "Noah",
    "keyword": "assessee",
    "subject_category": "human"
  },
  {
    "facts": [
      "Heath appreciates complexity.",
      "Heath loves reading.",
      "Heath learns quickly.",
      "Heath likes puzzles."
    ],
    "facts_fol": [
      "appreciates_complexity(Heath)",
      "loves_reading(Heath)",
      "learns_fast(Heath)",
      "likes_puzzles(Heath)"
    ],
    "rules": [
      "If Heath studies language, then he either understands nuances or appreciates complexity, but not both.",
      "If Heath loves reading, then he either studies language or enjoys etymology.",
      "If Heath learns quickly, then he either enjoys etymology or likes puzzles."
    ],
    "rules_fol": [
      "studies_language(Heath) → (understands_nuances(Heath) ⊕ appreciates_complexity(Heath))",
      "loves_reading(Heath) → (studies_language(Heath) ∨ enjoys_etymology(Heath))",
      "learns_fast(Heath) → (enjoys_etymology(Heath) ⊕ likes_puzzles(Heath))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Heath analyzes meaning or examines context, then he studies language.",
      "If someone explores meaning and collects words, then they enjoy etymology."
    ],
    "distracting_rules_fol": [
      "(analyzes_meaning(Heath) ∨ examines_context(Heath)) → studies_language(Heath)",
      "∀x ((explores_meaning(x) ∧ collects_words(x)) → enjoys_etymology(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Heath learns quickly.",
          "Heath likes puzzles."
        ],
        "rules": "If Heath learns quickly, then he either enjoys etymology or likes puzzles.",
        "conclusion": "Heath does not enjoy etymology."
      },
      {
        "facts": [
          "Heath loves reading.",
          "Heath does not enjoy etymology."
        ],
        "rules": "If Heath loves reading, then he either studies language or enjoys etymology.",
        "conclusion": "Heath studies language."
      },
      {
        "facts": [
          "Heath studies language.",
          "Heath appreciates complexity."
        ],
        "rules": "If Heath studies language, then he either understands nuances or appreciates complexity, but not both.",
        "conclusion": "Heath understands the nuances of language."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "learns_fast(Heath)",
          "likes_puzzles(Heath)"
        ],
        "rules": "learns_fast(Heath) → (enjoys_etymology(Heath) ⊕ likes_puzzles(Heath))",
        "conclusion": "¬enjoys_etymology(Heath)"
      },
      {
        "facts": [
          "loves_reading(Heath)",
          "¬enjoys_etymology(Heath)"
        ],
        "rules": "loves_reading(Heath) → (studies_language(Heath) ∨ enjoys_etymology(Heath))",
        "conclusion": "studies_language(Heath)"
      },
      {
        "facts": [
          "studies_language(Heath)",
          "appreciates_complexity(Heath)"
        ],
        "rules": "studies_language(Heath) → (understands_nuances(Heath) ⊕ appreciates_complexity(Heath))",
        "conclusion": "understands_nuances(Heath)"
      }
    ],
    "conclusion": "Heath understands the nuances of language.",
    "conclusion_fol": "understands_nuances(Heath)",
    "answer": "False",
    "context": [
      "Heath learns quickly.",
      "Heath likes puzzles.",
      "If Heath learns quickly, then he either enjoys etymology or likes puzzles.",
      "Heath loves reading.",
      "If Heath loves reading, then he either studies language or enjoys etymology.",
      "Heath appreciates complexity.",
      "If Heath studies language, then he either understands nuances or appreciates complexity, but not both."
    ],
    "context_fol": [
      "learns_fast(Heath)",
      "likes_puzzles(Heath)",
      "learns_fast(Heath) → (enjoys_etymology(Heath) ⊕ likes_puzzles(Heath))",
      "loves_reading(Heath)",
      "loves_reading(Heath) → (studies_language(Heath) ∨ enjoys_etymology(Heath))",
      "appreciates_complexity(Heath)",
      "studies_language(Heath) → (understands_nuances(Heath) ⊕ appreciates_complexity(Heath))"
    ],
    "background_story": "Heath was a linguist with a fascination for words that had multiple meanings, known as polysemous words. His name, Heath, itself was a polysemy, referring both to a type of landscape and a surname. Heath's research focused on how context shaped the interpretation of such words. He spent years studying the evolution of language, from the heathlands of England to the digital landscapes of the internet. His work revealed the complexities and nuances of human communication, where a single word could convey vastly different ideas. Heath's own life was a testament to the multifaceted nature of polysemous words, as he navigated the various meanings of his name and the world around him.",
    "name": "Heath",
    "keyword": "polysemous",
    "subject_category": "human"
  },
  {
    "facts": [
      "Colton is not a private sector employee.",
      "Colton serves the community.",
      "Colton does not fund projects.",
      "Colton understands needs.",
      "Colton builds consensus."
    ],
    "facts_fol": [
      "¬private_sector_employee(Colton)",
      "serves_community(Colton)",
      "¬funds_projects(Colton)",
      "understands_needs(Colton)",
      "builds_consensus(Colton)"
    ],
    "rules": [
      "If Colton either holds office or serves the community (but not both), then he is a public servant.",
      "If someone leads initiatives and makes policies, then they can hold office.",
      "Colton either funds projects or makes policies, but not both.",
      "If someone understands needs and builds consensus, then they can lead initiatives."
    ],
    "rules_fol": [
      "(holds_office(Colton) ⊕ serves_community(Colton)) → public_servant(Colton)",
      "∀x ((leads_initiatives(x) ∧ makes_policies(x)) → holds_office(x))",
      "funds_projects(Colton) ⊕ makes_policies(Colton)",
      "∀x ((understands_needs(x) ∧ builds_consensus(x)) → leads_initiatives(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Colton either works in the private sector or is a public servant.",
      "If Colton helps others, then he holds office and gains respect.",
      "If Colton has vision, then he makes policies and gains trust.",
      "If Colton is elected, then he either leads initiatives or has influence, but not both."
    ],
    "distracting_rules_fol": [
      "works_private(Colton) ∨ public_servant(Colton)",
      "help_others(Colton) → (holds_office(Colton) ∧ gain_respect(Colton))",
      "has_vision(Colton) → (makes_policies(Colton) ∧ gains_trust(Colton))",
      "is_elected(Colton) → (leads_initiatives(Colton) ⊕ has_influence(Colton))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Colton understands needs.",
          "Colton builds consensus."
        ],
        "rules": "If someone understands needs and builds consensus, then they can lead initiatives.",
        "conclusion": "Colton leads initiatives."
      },
      {
        "facts": [
          "Colton does not fund projects."
        ],
        "rules": "Colton either funds projects or makes policies, but not both.",
        "conclusion": "Colton makes policies."
      },
      {
        "facts": [
          "Colton leads initiatives.",
          "Colton makes policies."
        ],
        "rules": "If someone leads initiatives and makes policies, then they can hold office.",
        "conclusion": "Colton holds office."
      },
      {
        "facts": [
          "Colton holds office.",
          "Colton serves the community."
        ],
        "rules": "If Colton either holds office or serves the community (but not both), then he is a public servant.",
        "conclusion": null
      },
      {
        "facts": [
          "Colton is not a private sector employee."
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "understands_needs(Colton)",
          "builds_consensus(Colton)"
        ],
        "rules": "∀x ((understands_needs(x) ∧ builds_consensus(x)) → leads_initiatives(x))",
        "conclusion": "leads_initiatives(Colton)"
      },
      {
        "facts": [
          "¬funds_projects(Colton)"
        ],
        "rules": "funds_projects(Colton) ⊕ makes_policies(Colton)",
        "conclusion": "makes_policies(Colton)"
      },
      {
        "facts": [
          "leads_initiatives(Colton)",
          "makes_policies(Colton)"
        ],
        "rules": "∀x ((leads_initiatives(x) ∧ makes_policies(x)) → holds_office(x))",
        "conclusion": "holds_office(Colton)"
      },
      {
        "facts": [
          "holds_office(Colton)",
          "serves_community(Colton)"
        ],
        "rules": "(holds_office(Colton) ⊕ serves_community(Colton)) → public_servant(Colton)",
        "conclusion": null
      },
      {
        "facts": [
          "¬private_sector_employee(Colton)"
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "conclusion": "Colton is either a public servant or a private sector employee, but not both.",
    "conclusion_fol": "public_servant(Colton) ⊕ private_sector_employee(Colton)",
    "answer": "Uncertain",
    "context": [
      "Colton understands needs.",
      "Colton builds consensus.",
      "If someone understands needs and builds consensus, then they can lead initiatives.",
      "Colton does not fund projects.",
      "Colton either funds projects or makes policies, but not both.",
      "If someone leads initiatives and makes policies, then they can hold office.",
      "Colton serves the community.",
      "If Colton either holds office or serves the community (but not both), then he is a public servant.",
      "Colton is not a private sector employee."
    ],
    "context_fol": [
      "understands_needs(Colton)",
      "builds_consensus(Colton)",
      "∀x ((understands_needs(x) ∧ builds_consensus(x)) → leads_initiatives(x))",
      "¬funds_projects(Colton)",
      "funds_projects(Colton) ⊕ makes_policies(Colton)",
      "∀x ((leads_initiatives(x) ∧ makes_policies(x)) → holds_office(x))",
      "serves_community(Colton)",
      "(holds_office(Colton) ⊕ serves_community(Colton)) → public_servant(Colton)",
      "¬private_sector_employee(Colton)"
    ],
    "background_story": "Colton was a dedicated public servant who spent his career working governmentally to improve the lives of his community. He started as a city councilor, advocating for policies that supported local businesses and education. His commitment and integrity earned him a reputation as a fair and effective leader. Colton's work eventually led to his appointment as a state senator, where he championed bills focused on environmental protection, healthcare, and economic development. Through his governmentally funded initiatives, Colton was able to secure grants for infrastructure projects, creating jobs and stimulating growth in underserved areas. His tireless efforts to serve the public interest made him a respected figure in government, known for his ability to work across party lines to achieve common goals.",
    "name": "Colton",
    "keyword": "governmentally",
    "subject_category": "human"
  },
  {
    "facts": [
      "Selena is not diligent in her craft.",
      "Selena is not creative.",
      "Selena is patient."
    ],
    "facts_fol": [
      "¬is_diligent(Selena)",
      "¬creative(Selena)",
      "patient(Selena)"
    ],
    "rules": [
      "If Selena is a craftsman, then she is either appreciative of art or talented, but not both.",
      "A person is either diligent in their work or talented, but not necessarily both.",
      "If Selena is patient, then she is a skilled craftsman and attentive to detail."
    ],
    "rules_fol": [
      "craftsman(Selena) → (appreciative(Selena) ⊕ talented(Selena))",
      "∀x (is_diligent(x) ⊕ talented(x))",
      "patient(Selena) → (craftsman(Selena) ∧ attentive(Selena))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Selena is skilled, then she is inspired and appreciative.",
      "If Selena is inspired, then she is talented and has skilled hands.",
      "If Selena is an artist, then she is either a craftsman or skilled, but not both."
    ],
    "distracting_rules_fol": [
      "skilled(Selena) → (inspired(Selena) ∧ appreciative(Selena))",
      "inspired(Selena) → (talented(Selena) ∧ skilled_hands(Selena))",
      "artist(Selena) → (craftsman(Selena) ⊕ skilled(Selena))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Selena is patient."
        ],
        "rules": "If Selena is patient, then she is a skilled craftsman and attentive to detail.",
        "conclusion": "Selena is a craftsman."
      },
      {
        "facts": [
          "Selena is not diligent in her craft."
        ],
        "rules": "A person is either diligent in their work or talented, but not necessarily both.",
        "conclusion": "Selena is talented."
      },
      {
        "facts": [
          "Selena is a craftsman.",
          "Selena is talented."
        ],
        "rules": "If Selena is a craftsman, then she is either appreciative of art or talented, but not both.",
        "conclusion": "Selena is not appreciative of art."
      },
      {
        "facts": [
          "Selena is not creative.",
          "Selena is not appreciative of art."
        ],
        "rules": null,
        "conclusion": "Selena is either creative or appreciative of art (or both)."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "patient(Selena)"
        ],
        "rules": "patient(Selena) → (craftsman(Selena) ∧ attentive(Selena))",
        "conclusion": "craftsman(Selena)"
      },
      {
        "facts": [
          "¬is_diligent(Selena)"
        ],
        "rules": "∀x (is_diligent(x) ⊕ talented(x))",
        "conclusion": "talented(Selena)"
      },
      {
        "facts": [
          "craftsman(Selena)",
          "talented(Selena)"
        ],
        "rules": "craftsman(Selena) → (appreciative(Selena) ⊕ talented(Selena))",
        "conclusion": "¬appreciative(Selena)"
      },
      {
        "facts": [
          "¬creative(Selena)",
          "¬appreciative(Selena)"
        ],
        "rules": null,
        "conclusion": "creative(Selena) ∨ appreciative(Selena)"
      }
    ],
    "conclusion": "Selena is either creative or appreciative of art (or both).",
    "conclusion_fol": "creative(Selena) ∨ appreciative(Selena)",
    "answer": "False",
    "context": [
      "Selena is patient.",
      "If Selena is patient, then she is a skilled craftsman and attentive to detail.",
      "Selena is not diligent in her craft.",
      "A person is either diligent in their work or talented, but not necessarily both.",
      "If Selena is a craftsman, then she is either appreciative of art or talented, but not both.",
      "Selena is not creative."
    ],
    "context_fol": [
      "patient(Selena)",
      "patient(Selena) → (craftsman(Selena) ∧ attentive(Selena))",
      "¬is_diligent(Selena)",
      "∀x (is_diligent(x) ⊕ talented(x))",
      "craftsman(Selena) → (appreciative(Selena) ⊕ talented(Selena))",
      "¬creative(Selena)"
    ],
    "background_story": "Selena was a skilled artisan known for her exquisite work with needlewood, a rare and delicate craft. Growing up in a small village surrounded by ancient forests, she developed a deep appreciation for the intricate patterns found in nature. Selena spent years perfecting her technique, using needlewood to create beautiful, lace-like designs that seemed to come alive in her hands. Her creations were highly sought after by collectors and connoisseurs, who admired not only their beauty but also the patience and dedication that went into each piece. As her reputation grew, Selena became known as the Needlewood Whisperer, and people would travel from far and wide to commission her unique and enchanting works of art.",
    "name": "Selena",
    "keyword": "needlewood",
    "subject_category": "person"
  },
  {
    "facts": [
      "Addilyn is a good cook.",
      "Addilyn enjoys meals.",
      "Addilyn teaches others how to cook.",
      "Addilyn prepares meals.",
      "Addilyn sets tables."
    ],
    "facts_fol": [
      "good_cook(Addilyn)",
      "enjoy_meals(Addilyn)",
      "teach_others(Addilyn)",
      "prep_meals(Addilyn)",
      "set_tables(Addilyn)"
    ],
    "rules": [
      "Addilyn either enjoys meals or shares family recipes, but it's possible she does one without doing the other.",
      "If Addilyn loves the kitchen, then she either hosts supper parties or teaches others how to cook (but not both).",
      "If Addilyn prepares meals and sets tables, then she loves the kitchen."
    ],
    "rules_fol": [
      "enjoy_meals(Addilyn) ⊕ share_family_recipes(Addilyn)",
      "love_kitchen(Addilyn) → (teach_others(Addilyn) ⊕ host_supper_parties(Addilyn))",
      "(prep_meals(Addilyn) ∧ set_tables(Addilyn)) → love_kitchen(Addilyn)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Addilyn either makes traditional dishes or creates new recipes (but not both), then she shares family recipes.",
      "If Addilyn either makes delicious food or tries new recipes (but not both), then she hosts supper parties.",
      "If someone enjoys baking and makes delicious food, then they love the kitchen."
    ],
    "distracting_rules_fol": [
      "(make_traditional_dishes(Addilyn) ⊕ create_new_recipes(Addilyn)) → share_family_recipes(Addilyn)",
      "(makes_delicious_food(Addilyn) ⊕ tries_new_recipes(Addilyn)) → host_supper_parties(Addilyn)",
      "∀x ((enjoy_baking(x) ∧ make_delicious_food(x)) → love_kitchen(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Addilyn prepares meals.",
          "Addilyn sets tables."
        ],
        "rules": "If Addilyn prepares meals and sets tables, then she loves the kitchen.",
        "conclusion": "Addilyn loves the kitchen."
      },
      {
        "facts": [
          "Addilyn loves the kitchen.",
          "Addilyn teaches others how to cook."
        ],
        "rules": "If Addilyn loves the kitchen, then she either hosts supper parties or teaches others how to cook (but not both).",
        "conclusion": "Addilyn does not host supper parties."
      },
      {
        "facts": [
          "Addilyn enjoys meals."
        ],
        "rules": "Addilyn either enjoys meals or shares family recipes, but it's possible she does one without doing the other.",
        "conclusion": "Addilyn does not share family recipes."
      },
      {
        "facts": [
          "Addilyn is a good cook.",
          "Addilyn does not host supper parties.",
          "Addilyn does not share family recipes."
        ],
        "rules": null,
        "conclusion": "If Addilyn is a good cook, then she either hosts supper parties or shares family recipes (or both)."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "prep_meals(Addilyn)",
          "set_tables(Addilyn)"
        ],
        "rules": "(prep_meals(Addilyn) ∧ set_tables(Addilyn)) → love_kitchen(Addilyn)",
        "conclusion": "love_kitchen(Addilyn)"
      },
      {
        "facts": [
          "love_kitchen(Addilyn)",
          "teach_others(Addilyn)"
        ],
        "rules": "love_kitchen(Addilyn) → (teach_others(Addilyn) ⊕ host_supper_parties(Addilyn))",
        "conclusion": "¬host_supper_parties(Addilyn)"
      },
      {
        "facts": [
          "enjoy_meals(Addilyn)"
        ],
        "rules": "enjoy_meals(Addilyn) ⊕ share_family_recipes(Addilyn)",
        "conclusion": "¬share_family_recipes(Addilyn)"
      },
      {
        "facts": [
          "good_cook(Addilyn)",
          "¬host_supper_parties(Addilyn)",
          "¬share_family_recipes(Addilyn)"
        ],
        "rules": null,
        "conclusion": "good_cook(Addilyn) → (host_supper_parties(Addilyn) ∨ share_family_recipes(Addilyn))"
      }
    ],
    "conclusion": "If Addilyn is a good cook, then she either hosts supper parties or shares family recipes (or both).",
    "conclusion_fol": "good_cook(Addilyn) → (host_supper_parties(Addilyn) ∨ share_family_recipes(Addilyn))",
    "answer": "False",
    "context": [
      "Addilyn prepares meals.",
      "Addilyn sets tables.",
      "If Addilyn prepares meals and sets tables, then she loves the kitchen.",
      "Addilyn teaches others how to cook.",
      "If Addilyn loves the kitchen, then she either hosts supper parties or teaches others how to cook (but not both).",
      "Addilyn enjoys meals.",
      "Addilyn either enjoys meals or shares family recipes, but it's possible she does one without doing the other.",
      "Addilyn is a good cook."
    ],
    "context_fol": [
      "prep_meals(Addilyn)",
      "set_tables(Addilyn)",
      "(prep_meals(Addilyn) ∧ set_tables(Addilyn)) → love_kitchen(Addilyn)",
      "teach_others(Addilyn)",
      "love_kitchen(Addilyn) → (teach_others(Addilyn) ⊕ host_supper_parties(Addilyn))",
      "enjoy_meals(Addilyn)",
      "enjoy_meals(Addilyn) ⊕ share_family_recipes(Addilyn)",
      "good_cook(Addilyn)"
    ],
    "background_story": "Addilyn was a young girl who loved helping her mother in the kitchen. Every evening, she would eagerly assist with preparing supper, learning the secrets of traditional family recipes. As the aromas of roasted vegetables and freshly baked bread filled the air, Addilyn's excitement grew. She took pride in setting the table, making sure everything was perfect for the family gathering. Supper time was special, a moment when everyone put aside their busy lives to share stories and laughter together. Addilyn's favorite part was hearing her father's tales of adventure, which always seemed to come alive over a warm, comforting meal. As she grew older, Addilyn became known for her own culinary skills, hosting supper parties for friends and family, spreading joy and creating memories around the dinner table.",
    "name": "Addilyn",
    "keyword": "supper",
    "subject_category": "human"
  },
  {
    "facts": [
      "Devon is not influential.",
      "Devon does not speak out.",
      "Devon challenges the status quo.",
      "Devon stands up for what is right.",
      "Devon does not support workers' rights."
    ],
    "facts_fol": [
      "¬influential(Devon)",
      "¬speaks_out(Devon)",
      "challenges_status_quo(Devon)",
      "stands_up(Devon)",
      "¬supports_rights(Devon)"
    ],
    "rules": [
      "If Devon takes risks or speaks out, then he is fearless.",
      "If Devon is a leader, then he either takes risks or challenges the status quo, but not both.",
      "Anyone who inspires others or fights against injustice is a leader.",
      "Anyone who stands up for what is right or supports workers' rights fights against injustice."
    ],
    "rules_fol": [
      "(takes_risks(Devon) ∨ speaks_out(Devon)) → fearless(Devon)",
      "is_leader(Devon) → (takes_risks(Devon) ⊕ challenges_status_quo(Devon))",
      "∀x ((inspires_others(x) ∨ fights_injustice(x)) → is_leader(x))",
      "∀x ((stands_up(x) ∨ supports_rights(x)) → fights_injustice(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Devon has conviction and acts boldly, then he is fearless.",
      "If someone either joins a protest or defies authority (but not both), then they take risks.",
      "Devon either empowers others or is a leader.",
      "Anyone who organizes a movement either fights against injustice or advocates for change."
    ],
    "distracting_rules_fol": [
      "(has_conviction(Devon) ∧ acts_boldly(Devon)) → fearless(Devon)",
      "∀x ((joins_protest(x) ⊕ defies_authority(x)) → takes_risks(x))",
      "empowers_others(Devon) ∨ is_leader(Devon)",
      "∀x (organizes_movement(x) → (fights_injustice(x) ∨ advocates_change(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Devon stands up for what is right.",
          "Devon does not support workers' rights."
        ],
        "rules": "Anyone who stands up for what is right or supports workers' rights fights against injustice.",
        "conclusion": "Devon fights against injustice."
      },
      {
        "facts": [
          "Devon fights against injustice."
        ],
        "rules": "Anyone who inspires others or fights against injustice is a leader.",
        "conclusion": "Devon is a leader."
      },
      {
        "facts": [
          "Devon is a leader.",
          "Devon challenges the status quo."
        ],
        "rules": "If Devon is a leader, then he either takes risks or challenges the status quo, but not both.",
        "conclusion": "Devon does not take risks."
      },
      {
        "facts": [
          "Devon does not take risks.",
          "Devon does not speak out."
        ],
        "rules": "If Devon takes risks or speaks out, then he is fearless.",
        "conclusion": null
      },
      {
        "facts": [
          "Devon is not influential."
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "stands_up(Devon)",
          "¬supports_rights(Devon)"
        ],
        "rules": "∀x ((stands_up(x) ∨ supports_rights(x)) → fights_injustice(x))",
        "conclusion": "fights_injustice(Devon)"
      },
      {
        "facts": [
          "fights_injustice(Devon)"
        ],
        "rules": "∀x ((inspires_others(x) ∨ fights_injustice(x)) → is_leader(x))",
        "conclusion": "is_leader(Devon)"
      },
      {
        "facts": [
          "is_leader(Devon)",
          "challenges_status_quo(Devon)"
        ],
        "rules": "is_leader(Devon) → (takes_risks(Devon) ⊕ challenges_status_quo(Devon))",
        "conclusion": "¬takes_risks(Devon)"
      },
      {
        "facts": [
          "¬takes_risks(Devon)",
          "¬speaks_out(Devon)"
        ],
        "rules": "(takes_risks(Devon) ∨ speaks_out(Devon)) → fearless(Devon)",
        "conclusion": null
      },
      {
        "facts": [
          "¬influential(Devon)"
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "conclusion": "If Devon is either fearless or passionate (but not both), then he is influential.",
    "conclusion_fol": "(fearless(Devon) ⊕ passionate(Devon)) → influential(Devon)",
    "answer": "Uncertain",
    "context": [
      "Devon stands up for what is right.",
      "Devon does not support workers' rights.",
      "Anyone who stands up for what is right or supports workers' rights fights against injustice.",
      "Anyone who inspires others or fights against injustice is a leader.",
      "Devon challenges the status quo.",
      "If Devon is a leader, then he either takes risks or challenges the status quo, but not both.",
      "Devon does not speak out.",
      "If Devon takes risks or speaks out, then he is fearless.",
      "Devon is not influential."
    ],
    "context_fol": [
      "stands_up(Devon)",
      "¬supports_rights(Devon)",
      "∀x ((stands_up(x) ∨ supports_rights(x)) → fights_injustice(x))",
      "∀x ((inspires_others(x) ∨ fights_injustice(x)) → is_leader(x))",
      "challenges_status_quo(Devon)",
      "is_leader(Devon) → (takes_risks(Devon) ⊕ challenges_status_quo(Devon))",
      "¬speaks_out(Devon)",
      "(takes_risks(Devon) ∨ speaks_out(Devon)) → fearless(Devon)",
      "¬influential(Devon)"
    ],
    "background_story": "Devon was a passionate and fearless labor leader in the early 20th century. Working in the coal mines of Pennsylvania, he witnessed firsthand the harsh conditions and meager wages that miners endured. Determined to bring about change, Devon organized a strike, rallying his fellow workers to stand together for better pay, safer working conditions, and fair treatment. The strike, which lasted for months, drew national attention and sparked a wave of similar movements across the country. Devon's courage and conviction in the face of opposition inspired a generation of workers to fight for their rights. Though the road to victory was long and arduous, Devon's leadership and the collective action of the miners ultimately led to significant reforms, improving the lives of thousands of workers and their families.",
    "name": "Devon",
    "keyword": "strike",
    "subject_category": "human"
  },
  {
    "facts": [
      "Cali has high status.",
      "Cali is not altruistic.",
      "Cali is self-made."
    ],
    "facts_fol": [
      "high_status(Cali)",
      "¬is_altruistic(Cali)",
      "self_made(Cali)"
    ],
    "rules": [
      "Cali is either privileged or socially responsible (or both).",
      "Anyone who is born rich or well connected is privileged.",
      "If Cali is influential, then she is either born rich or has high status, but not both.",
      "A person is either altruistic or well-connected, but not necessarily both.",
      "Cali is either self-made or influential, but not both."
    ],
    "rules_fol": [
      "privileged(Cali) ∨ socially_responsible(Cali)",
      "∀x ((born_rich(x) ∨ well_connected(x)) → privileged(x))",
      "influential(Cali) → (born_rich(Cali) ⊕ high_status(Cali))",
      "∀x (is_altruistic(x) ⊕ well_connected(x))",
      "self_made(Cali) ⊕ influential(Cali)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Anyone who has wealth or has influence is privileged.",
      "If Cali inherits wealth, then she is born rich.",
      "If Cali attends elite schools, then she either holds public office or is well connected.",
      "Anyone who has power or is respected can be influential."
    ],
    "distracting_rules_fol": [
      "∀x ((has_wealth(x) ∨ has_influence(x)) → privileged(x))",
      "inherits_wealth(Cali) → born_rich(Cali)",
      "attends_elite_schools(Cali) → (holds_public_office(Cali) ∨ well_connected(Cali))",
      "∀x ((has_power(x) ∨ is_respected(x)) → influential(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Cali is self-made."
        ],
        "rules": "Cali is either self-made or influential, but not both.",
        "conclusion": "Cali is not influential."
      },
      {
        "facts": [
          "Cali is not altruistic."
        ],
        "rules": "A person is either altruistic or well-connected, but not necessarily both.",
        "conclusion": "Cali is well connected."
      },
      {
        "facts": [
          "Cali is not influential.",
          "Cali has high status."
        ],
        "rules": "If Cali is influential, then she is either born rich or has high status, but not both.",
        "conclusion": null
      },
      {
        "facts": [
          "Cali is well connected."
        ],
        "rules": "Anyone who is born rich or well connected is privileged.",
        "conclusion": "Cali is privileged."
      },
      {
        "facts": [
          "Cali is privileged."
        ],
        "rules": "Cali is either privileged or socially responsible (or both).",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "self_made(Cali)"
        ],
        "rules": "self_made(Cali) ⊕ influential(Cali)",
        "conclusion": "¬influential(Cali)"
      },
      {
        "facts": [
          "¬is_altruistic(Cali)"
        ],
        "rules": "∀x (is_altruistic(x) ⊕ well_connected(x))",
        "conclusion": "well_connected(Cali)"
      },
      {
        "facts": [
          "¬influential(Cali)",
          "high_status(Cali)"
        ],
        "rules": "influential(Cali) → (born_rich(Cali) ⊕ high_status(Cali))",
        "conclusion": null
      },
      {
        "facts": [
          "well_connected(Cali)"
        ],
        "rules": "∀x ((born_rich(x) ∨ well_connected(x)) → privileged(x))",
        "conclusion": "privileged(Cali)"
      },
      {
        "facts": [
          "privileged(Cali)"
        ],
        "rules": "privileged(Cali) ∨ socially_responsible(Cali)",
        "conclusion": null
      }
    ],
    "conclusion": "Cali is not socially responsible.",
    "conclusion_fol": "¬socially_responsible(Cali)",
    "answer": "Uncertain",
    "context": [
      "Cali is self-made.",
      "Cali is either self-made or influential, but not both.",
      "Cali is not altruistic.",
      "A person is either altruistic or well-connected, but not necessarily both.",
      "Cali has high status.",
      "If Cali is influential, then she is either born rich or has high status, but not both.",
      "Anyone who is born rich or well connected is privileged.",
      "Cali is either privileged or socially responsible (or both)."
    ],
    "context_fol": [
      "self_made(Cali)",
      "self_made(Cali) ⊕ influential(Cali)",
      "¬is_altruistic(Cali)",
      "∀x (is_altruistic(x) ⊕ well_connected(x))",
      "high_status(Cali)",
      "influential(Cali) → (born_rich(Cali) ⊕ high_status(Cali))",
      "∀x ((born_rich(x) ∨ well_connected(x)) → privileged(x))",
      "privileged(Cali) ∨ socially_responsible(Cali)"
    ],
    "background_story": "Cali was born into a life of luxury, the daughter of a wealthy tech mogul. From a young age, she was aware of the privilege that came with her family's name and fortune. She attended the best private schools, traveled the world, and had every opportunity at her fingertips. However, as she grew older, Cali began to realize the weight of her privilege and the responsibilities that came with it. She used her platform to advocate for social justice, supporting causes that aimed to bridge the gap between the haves and have-nots. Cali's journey was one of self-discovery, as she navigated the complexities of her privileged upbringing and worked to make a positive impact on the world around her.",
    "name": "Cali",
    "keyword": "privilege",
    "subject_category": "human"
  },
  {
    "facts": [
      "Zoey is fearless.",
      "Zoey faces challenges.",
      "Zoey seeks opportunity."
    ],
    "facts_fol": [
      "fearless(Zoey)",
      "faces_challenges(Zoey)",
      "seeks_opportunity(Zoey)"
    ],
    "rules": [
      "Zoey is either adventurous or cautious, but not both.",
      "Zoey is either bold or adventurous.",
      "If Zoey is a pioneer, then she is either fearless or bold, but not both.",
      "Zoey either takes risks or is a pioneer.",
      "If Zoey faces challenges, then she either seeks opportunity or takes risks, but not both."
    ],
    "rules_fol": [
      "adventurous(Zoey) ⊕ cautious(Zoey)",
      "bold(Zoey) ∨ adventurous(Zoey)",
      "pioneer(Zoey) → (fearless(Zoey) ⊕ bold(Zoey))",
      "takes_risks(Zoey) ∨ pioneer(Zoey)",
      "faces_challenges(Zoey) → (seeks_opportunity(Zoey) ⊕ takes_risks(Zoey))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Everyone who explores is adventurous.",
      "If Zoey either makes plans or sees visions (but not both), then she is bold.",
      "If someone values freedom and embraces hardship, then they can be a pioneer.",
      "If Zoey either travels alone or explores uncharted territory (but not both), then she takes risks."
    ],
    "distracting_rules_fol": [
      "∀x (explores(x) → adventurous(x))",
      "(makes_plans(Zoey) ⊕ sees_visions(Zoey)) → bold(Zoey)",
      "∀x ((values_freedom(x) ∧ embraces_hardship(x)) → pioneer(x))",
      "(travels_alone(Zoey) ⊕ explores_uncharted(Zoey)) → takes_risks(Zoey)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Zoey faces challenges.",
          "Zoey seeks opportunity."
        ],
        "rules": "If Zoey faces challenges, then she either seeks opportunity or takes risks, but not both.",
        "conclusion": "Zoey does not take risks."
      },
      {
        "facts": [
          "Zoey does not take risks."
        ],
        "rules": "Zoey either takes risks or is a pioneer.",
        "conclusion": "Zoey is a pioneer."
      },
      {
        "facts": [
          "Zoey is a pioneer.",
          "Zoey is fearless."
        ],
        "rules": "If Zoey is a pioneer, then she is either fearless or bold, but not both.",
        "conclusion": "Zoey is not bold."
      },
      {
        "facts": [
          "Zoey is not bold."
        ],
        "rules": "Zoey is either bold or adventurous.",
        "conclusion": "Zoey is adventurous."
      },
      {
        "facts": [
          "Zoey is adventurous."
        ],
        "rules": "Zoey is either adventurous or cautious, but not both.",
        "conclusion": "Zoey is not cautious."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "faces_challenges(Zoey)",
          "seeks_opportunity(Zoey)"
        ],
        "rules": "faces_challenges(Zoey) → (seeks_opportunity(Zoey) ⊕ takes_risks(Zoey))",
        "conclusion": "¬takes_risks(Zoey)"
      },
      {
        "facts": [
          "¬takes_risks(Zoey)"
        ],
        "rules": "takes_risks(Zoey) ∨ pioneer(Zoey)",
        "conclusion": "pioneer(Zoey)"
      },
      {
        "facts": [
          "pioneer(Zoey)",
          "fearless(Zoey)"
        ],
        "rules": "pioneer(Zoey) → (fearless(Zoey) ⊕ bold(Zoey))",
        "conclusion": "¬bold(Zoey)"
      },
      {
        "facts": [
          "¬bold(Zoey)"
        ],
        "rules": "bold(Zoey) ∨ adventurous(Zoey)",
        "conclusion": "adventurous(Zoey)"
      },
      {
        "facts": [
          "adventurous(Zoey)"
        ],
        "rules": "adventurous(Zoey) ⊕ cautious(Zoey)",
        "conclusion": "¬cautious(Zoey)"
      }
    ],
    "conclusion": "Zoey is not cautious.",
    "conclusion_fol": "¬cautious(Zoey)",
    "answer": "True",
    "context": [
      "Zoey faces challenges.",
      "Zoey seeks opportunity.",
      "If Zoey faces challenges, then she either seeks opportunity or takes risks, but not both.",
      "Zoey either takes risks or is a pioneer.",
      "Zoey is fearless.",
      "If Zoey is a pioneer, then she is either fearless or bold, but not both.",
      "Zoey is either bold or adventurous.",
      "Zoey is either adventurous or cautious, but not both."
    ],
    "context_fol": [
      "faces_challenges(Zoey)",
      "seeks_opportunity(Zoey)",
      "faces_challenges(Zoey) → (seeks_opportunity(Zoey) ⊕ takes_risks(Zoey))",
      "takes_risks(Zoey) ∨ pioneer(Zoey)",
      "fearless(Zoey)",
      "pioneer(Zoey) → (fearless(Zoey) ⊕ bold(Zoey))",
      "bold(Zoey) ∨ adventurous(Zoey)",
      "adventurous(Zoey) ⊕ cautious(Zoey)"
    ],
    "background_story": "Zoey was a pioneering settler who embarked on a journey to the American West in the late 1800s. With a spirit of adventure and a desire for a new life, she left behind the comforts of the East Coast to stake her claim on the open frontier. Zoey faced countless challenges as she traveled across the vast, untamed landscape, from raging rivers to treacherous mountain passes. Upon arriving in the Oregon Territory, she established a thriving homestead, clearing land, planting crops, and raising livestock. Her determination and resilience earned her the respect of the local community, and she became a leader among the settlers. Zoey's courage and perseverance paved the way for future generations, leaving a lasting legacy as a true pioneer and settler of the American West.",
    "name": "Zoey",
    "keyword": "settler",
    "subject_category": "human"
  },
  {
    "facts": [
      "Rosa does not study trigonometry.",
      "Rosa publishes papers.",
      "Rosa explains things clearly.",
      "Rosa is not passionate.",
      "Rosa does not inspire her colleagues."
    ],
    "facts_fol": [
      "¬studies_trig(Rosa)",
      "publishes_papers(Rosa)",
      "explains_clearly(Rosa)",
      "¬passionate(Rosa)",
      "¬inspires_colleagues(Rosa)"
    ],
    "rules": [
      "All mathematicians who study trigonometry and publish papers are dedicated researchers.",
      "A mathematician either teaches well or earns recognition, but not necessarily both.",
      "Any mathematician who explains clearly or has patience can teach well.",
      "If Rosa is passionate, then she makes notable discoveries and inspires her colleagues."
    ],
    "rules_fol": [
      "∀x ((studies_trig(x) ∧ publishes_papers(x)) → dedicated_researcher(x))",
      "∀x (teaches_well(x) ⊕ earns_recognition(x))",
      "∀x ((explains_clearly(x) ∨ has_patience(x)) → teaches_well(x))",
      "passionate(Rosa) → (makes_notable_discoveries(Rosa) ∧ inspires_colleagues(Rosa))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Every mathematician who conducts innovative work either advances mathematical knowledge or is a dedicated researcher.",
      "Rosa either solves problems or earns recognition.",
      "If Rosa solves complex problems, then she either teaches well or writes popular books, but not both.",
      "If Rosa focuses on the cotangent function, then she either develops new methods or makes notable discoveries."
    ],
    "distracting_rules_fol": [
      "∀x (conducts_innovative_work(x) → (advances_mathematical_knowledge(x) ∨ dedicated_researcher(x)))",
      "solves_problems(Rosa) ∨ earns_recognition(Rosa)",
      "solves_complex_problems(Rosa) → (teaches_well(Rosa) ⊕ writes_popular_books(Rosa))",
      "focuses_on_cotangent(Rosa) → (develops_new_methods(Rosa) ∨ makes_notable_discoveries(Rosa))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Rosa is not passionate.",
          "Rosa does not inspire her colleagues."
        ],
        "rules": "If Rosa is passionate, then she makes notable discoveries and inspires her colleagues.",
        "conclusion": null
      },
      {
        "facts": [
          "Rosa explains things clearly."
        ],
        "rules": "Any mathematician who explains clearly or has patience can teach well.",
        "conclusion": "Rosa teaches well."
      },
      {
        "facts": [
          "Rosa teaches well."
        ],
        "rules": "A mathematician either teaches well or earns recognition, but not necessarily both.",
        "conclusion": "Rosa does not earn recognition."
      },
      {
        "facts": [
          "Rosa does not study trigonometry.",
          "Rosa publishes papers."
        ],
        "rules": "All mathematicians who study trigonometry and publish papers are dedicated researchers.",
        "conclusion": null
      },
      {
        "facts": [
          "Rosa does not earn recognition."
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬passionate(Rosa)",
          "¬inspires_colleagues(Rosa)"
        ],
        "rules": "passionate(Rosa) → (makes_notable_discoveries(Rosa) ∧ inspires_colleagues(Rosa))",
        "conclusion": null
      },
      {
        "facts": [
          "explains_clearly(Rosa)"
        ],
        "rules": "∀x ((explains_clearly(x) ∨ has_patience(x)) → teaches_well(x))",
        "conclusion": "teaches_well(Rosa)"
      },
      {
        "facts": [
          "teaches_well(Rosa)"
        ],
        "rules": "∀x (teaches_well(x) ⊕ earns_recognition(x))",
        "conclusion": "¬earns_recognition(Rosa)"
      },
      {
        "facts": [
          "¬studies_trig(Rosa)",
          "publishes_papers(Rosa)"
        ],
        "rules": "∀x ((studies_trig(x) ∧ publishes_papers(x)) → dedicated_researcher(x))",
        "conclusion": null
      },
      {
        "facts": [
          "¬earns_recognition(Rosa)"
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "conclusion": "If Rosa is a dedicated researcher, then she makes notable discoveries and earns recognition.",
    "conclusion_fol": "dedicated_researcher(Rosa) → (makes_notable_discoveries(Rosa) ∧ earns_recognition(Rosa))",
    "answer": "Uncertain",
    "context": [
      "Rosa is not passionate.",
      "Rosa does not inspire her colleagues.",
      "If Rosa is passionate, then she makes notable discoveries and inspires her colleagues.",
      "Rosa explains things clearly.",
      "Any mathematician who explains clearly or has patience can teach well.",
      "A mathematician either teaches well or earns recognition, but not necessarily both.",
      "Rosa does not study trigonometry.",
      "Rosa publishes papers.",
      "All mathematicians who study trigonometry and publish papers are dedicated researchers."
    ],
    "context_fol": [
      "¬passionate(Rosa)",
      "¬inspires_colleagues(Rosa)",
      "passionate(Rosa) → (makes_notable_discoveries(Rosa) ∧ inspires_colleagues(Rosa))",
      "explains_clearly(Rosa)",
      "∀x ((explains_clearly(x) ∨ has_patience(x)) → teaches_well(x))",
      "∀x (teaches_well(x) ⊕ earns_recognition(x))",
      "¬studies_trig(Rosa)",
      "publishes_papers(Rosa)",
      "∀x ((studies_trig(x) ∧ publishes_papers(x)) → dedicated_researcher(x))"
    ],
    "background_story": "Rosa was a brilliant mathematician with a passion for trigonometry. She spent most of her career studying the properties of the cotangent function, fascinated by its unique characteristics and applications. Rosa's groundbreaking research on the cotangent function led to several important discoveries, including a novel method for calculating cotangent values for large angles. Her work had significant implications for fields such as physics, engineering, and computer science. Despite her intense focus on mathematics, Rosa was known for her ability to explain complex concepts in simple terms, making her a beloved teacher and mentor. Her contributions to the field of mathematics earned her numerous awards and recognition, cementing her reputation as a leading expert on the cotangent function.",
    "name": "Rosa",
    "keyword": "cotangent",
    "subject_category": "mathematician"
  },
  {
    "facts": [
      "Allen does not anticipate dangers.",
      "Allen plans an expedition.",
      "Allen is experienced.",
      "Allen makes good decisions."
    ],
    "facts_fol": [
      "¬anticipates_dangers(Allen)",
      "plans_expedition(Allen)",
      "experienced(Allen)",
      "makes_good_decisions(Allen)"
    ],
    "rules": [
      "If Allen is prepared, then he either avoids risks or has successful trips, but not both.",
      "Anyone who plans an expedition is either prepared or anticipates dangers (or both).",
      "If Allen is experienced, then he makes good decisions and has successful trips."
    ],
    "rules_fol": [
      "is_prepared(Allen) → (avoids_risks(Allen) ⊕ has_successful_trips(Allen))",
      "∀x (plans_expedition(x) → (is_prepared(x) ∨ anticipates_dangers(x)))",
      "experienced(Allen) → (makes_good_decisions(Allen) ∧ has_successful_trips(Allen))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If someone checks their gear and forecasts the weather, then they are prepared.",
      "If Allen either packs well or navigates easily (but not both), then he has successful trips."
    ],
    "distracting_rules_fol": [
      "∀x ((checks_gear(x) ∧ forecasts_weather(x)) → is_prepared(x))",
      "(packs_well(Allen) ⊕ navigates_easily(Allen)) → has_successful_trips(Allen)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Allen is experienced.",
          "Allen makes good decisions."
        ],
        "rules": "If Allen is experienced, then he makes good decisions and has successful trips.",
        "conclusion": "Allen has successful trips."
      },
      {
        "facts": [
          "Allen plans an expedition.",
          "Allen does not anticipate dangers."
        ],
        "rules": "Anyone who plans an expedition is either prepared or anticipates dangers (or both).",
        "conclusion": "Allen is prepared."
      },
      {
        "facts": [
          "Allen is prepared.",
          "Allen has successful trips."
        ],
        "rules": "If Allen is prepared, then he either avoids risks or has successful trips, but not both.",
        "conclusion": "Allen avoids risks."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "experienced(Allen)",
          "makes_good_decisions(Allen)"
        ],
        "rules": "experienced(Allen) → (makes_good_decisions(Allen) ∧ has_successful_trips(Allen))",
        "conclusion": "has_successful_trips(Allen)"
      },
      {
        "facts": [
          "plans_expedition(Allen)",
          "¬anticipates_dangers(Allen)"
        ],
        "rules": "∀x (plans_expedition(x) → (is_prepared(x) ∨ anticipates_dangers(x)))",
        "conclusion": "is_prepared(Allen)"
      },
      {
        "facts": [
          "is_prepared(Allen)",
          "has_successful_trips(Allen)"
        ],
        "rules": "is_prepared(Allen) → (avoids_risks(Allen) ⊕ has_successful_trips(Allen))",
        "conclusion": "avoids_risks(Allen)"
      }
    ],
    "conclusion": "Allen avoids risks.",
    "conclusion_fol": "avoids_risks(Allen)",
    "answer": "False",
    "context": [
      "Allen is experienced.",
      "Allen makes good decisions.",
      "If Allen is experienced, then he makes good decisions and has successful trips.",
      "Allen plans an expedition.",
      "Allen does not anticipate dangers.",
      "Anyone who plans an expedition is either prepared or anticipates dangers (or both).",
      "If Allen is prepared, then he either avoids risks or has successful trips, but not both."
    ],
    "context_fol": [
      "experienced(Allen)",
      "makes_good_decisions(Allen)",
      "experienced(Allen) → (makes_good_decisions(Allen) ∧ has_successful_trips(Allen))",
      "plans_expedition(Allen)",
      "¬anticipates_dangers(Allen)",
      "∀x (plans_expedition(x) → (is_prepared(x) ∨ anticipates_dangers(x)))",
      "is_prepared(Allen) → (avoids_risks(Allen) ⊕ has_successful_trips(Allen))"
    ],
    "background_story": "Allen was a seasoned hiker and outdoorsman who always emphasized the importance of precaution. Before every expedition, he would meticulously check his gear, forecast the weather, and research the trail conditions. His friends often joked that he was overly cautious, but Allen's attention to detail had saved them from potential disasters more than once. On one fateful trip, Allen's precautionary measures alerted him to a possible avalanche risk, prompting him to alter their route. His decision proved lifesaving as a sudden snowslide blocked the original path just hours later. Allen's mantra, 'better safe than sorry,' had become a guiding principle for his adventure-seeking group, earning him respect and gratitude from his fellow explorers.",
    "name": "Allen",
    "keyword": "precaution",
    "subject_category": "human"
  },
  {
    "facts": [
      "Sugar has an owner.",
      "Sugar does not trust humans."
    ],
    "facts_fol": [
      "has_owners(Sugar)",
      "¬trusts_humans(Sugar)"
    ],
    "rules": [
      "If Sugar has an owner, then she is either strong-willed or gentle.",
      "If Sugar loves people, then she is gentle.",
      "Sugar either trusts humans or loves people."
    ],
    "rules_fol": [
      "has_owners(Sugar) → (strong_willed(Sugar) ⊕ is_gentle(Sugar))",
      "loves_people(Sugar) → is_gentle(Sugar)",
      "trusts_humans(Sugar) ∨ loves_people(Sugar)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Sugar either overcomes obstacles or faces fears (but not both), then she is strong-willed.",
      "If Sugar has a caregiver, then she is either gentle or has an adaptable nature.",
      "If Sugar forms bonds with others, then she either loves people or adores children."
    ],
    "distracting_rules_fol": [
      "(overcomes_obstacles(Sugar) ⊕ faces_fears(Sugar)) → strong_willed(Sugar)",
      "has_caregiver(Sugar) → (is_gentle(Sugar) ∨ adaptable_nature(Sugar))",
      "forms_bonds(Sugar) → (loves_people(Sugar) ∨ adores_children(Sugar))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Sugar does not trust humans."
        ],
        "rules": "Sugar either trusts humans or loves people.",
        "conclusion": "Sugar loves people."
      },
      {
        "facts": [
          "Sugar loves people."
        ],
        "rules": "If Sugar loves people, then she is gentle.",
        "conclusion": "Sugar is gentle."
      },
      {
        "facts": [
          "Sugar has an owner.",
          "Sugar is gentle."
        ],
        "rules": "If Sugar has an owner, then she is either strong-willed or gentle.",
        "conclusion": "Sugar is not strong-willed."
      },
      {
        "facts": [
          "Sugar is not strong-willed."
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬trusts_humans(Sugar)"
        ],
        "rules": "trusts_humans(Sugar) ∨ loves_people(Sugar)",
        "conclusion": "loves_people(Sugar)"
      },
      {
        "facts": [
          "loves_people(Sugar)"
        ],
        "rules": "loves_people(Sugar) → is_gentle(Sugar)",
        "conclusion": "is_gentle(Sugar)"
      },
      {
        "facts": [
          "has_owners(Sugar)",
          "is_gentle(Sugar)"
        ],
        "rules": "has_owners(Sugar) → (strong_willed(Sugar) ⊕ is_gentle(Sugar))",
        "conclusion": "¬strong_willed(Sugar)"
      },
      {
        "facts": [
          "¬strong_willed(Sugar)"
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "conclusion": "Sugar is strong-willed, or she is physically challenged and inspirational.",
    "conclusion_fol": "strong_willed(Sugar) ∨ (physically_challenged(Sugar) ∧ inspirational(Sugar))",
    "answer": "Uncertain",
    "context": [
      "Sugar does not trust humans.",
      "Sugar either trusts humans or loves people.",
      "If Sugar loves people, then she is gentle.",
      "Sugar has an owner.",
      "If Sugar has an owner, then she is either strong-willed or gentle."
    ],
    "context_fol": [
      "¬trusts_humans(Sugar)",
      "trusts_humans(Sugar) ∨ loves_people(Sugar)",
      "loves_people(Sugar) → is_gentle(Sugar)",
      "has_owners(Sugar)",
      "has_owners(Sugar) → (strong_willed(Sugar) ⊕ is_gentle(Sugar))"
    ],
    "background_story": "Sugar was a majestic chestnut mare who lived on a rolling farm. Despite being born with equine palsy, which affected her coordination and balance, Sugar's spirit remained unbroken. With the help of her dedicated owner, a young girl named Lily, Sugar learned to adapt and overcome her physical limitations. Through patient training and gentle exercises, Sugar developed unique ways to navigate the farm, earning the admiration of all who met her. Her palsy never defined her, as Sugar's strength lay in her gentle soul and the deep bond she shared with Lily. Together, they proved that with love, care, and determination, even the greatest challenges can be met with courage and grace.",
    "name": "Sugar",
    "keyword": "palsy",
    "subject_category": "horse"
  },
  {
    "facts": [
      "Clayton is an expert entomologist.",
      "Clayton conducts fieldwork.",
      "Clayton documents his findings."
    ],
    "facts_fol": [
      "expert_entomologist(Clayton)",
      "conducts_fieldwork(Clayton)",
      "documents_findings(Clayton)"
    ],
    "rules": [
      "Either Clayton specializes in Megaloptera or he studies other insects, but not both.",
      "If Clayton is an expert entomologist, then he specializes in Megaloptera and publishes research.",
      "Every entomologist either collects samples or publishes research.",
      "If Clayton conducts fieldwork, then he either collects samples or documents findings, but not both."
    ],
    "rules_fol": [
      "specializes_in_Megaloptera(Clayton) ⊕ studies_other_insects(Clayton)",
      "expert_entomologist(Clayton) → (specializes_in_Megaloptera(Clayton) ∧ publish_research(Clayton))",
      "∀x (collects_samples(x) ∨ publish_research(x))",
      "conducts_fieldwork(Clayton) → (collects_samples(Clayton) ⊕ documents_findings(Clayton))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Clayton examines insects, then he either understands ecosystems or specializes in Megaloptera.",
      "For all entomologists, if they read widely and experiment regularly, then they publish research.",
      "If Clayton either examines specimens or identifies species (but not both), then he collects samples."
    ],
    "distracting_rules_fol": [
      "examines_insects(Clayton) → (understands_ecosystems(Clayton) ∨ specializes_in_Megaloptera(Clayton))",
      "∀x ((reads_widely(x) ∧ experiments_regularly(x)) → publish_research(x))",
      "(examines_specimens(Clayton) ⊕ identifies_species(Clayton)) → collects_samples(Clayton)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Clayton conducts fieldwork.",
          "Clayton documents his findings."
        ],
        "rules": "If Clayton conducts fieldwork, then he either collects samples or documents findings, but not both.",
        "conclusion": "Clayton does not collect samples."
      },
      {
        "facts": [
          "Clayton does not collect samples."
        ],
        "rules": "Every entomologist either collects samples or publishes research.",
        "conclusion": "Clayton publishes research."
      },
      {
        "facts": [
          "Clayton is an expert entomologist.",
          "Clayton publishes research."
        ],
        "rules": "If Clayton is an expert entomologist, then he specializes in Megaloptera and publishes research.",
        "conclusion": "Clayton specializes in Megaloptera."
      },
      {
        "facts": [
          "Clayton specializes in Megaloptera."
        ],
        "rules": "Either Clayton specializes in Megaloptera or he studies other insects, but not both.",
        "conclusion": "Clayton studies other insects."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "conducts_fieldwork(Clayton)",
          "documents_findings(Clayton)"
        ],
        "rules": "conducts_fieldwork(Clayton) → (collects_samples(Clayton) ⊕ documents_findings(Clayton))",
        "conclusion": "¬collects_samples(Clayton)"
      },
      {
        "facts": [
          "¬collects_samples(Clayton)"
        ],
        "rules": "∀x (collects_samples(x) ∨ publish_research(x))",
        "conclusion": "publish_research(Clayton)"
      },
      {
        "facts": [
          "expert_entomologist(Clayton)",
          "publish_research(Clayton)"
        ],
        "rules": "expert_entomologist(Clayton) → (specializes_in_Megaloptera(Clayton) ∧ publish_research(Clayton))",
        "conclusion": "specializes_in_Megaloptera(Clayton)"
      },
      {
        "facts": [
          "specializes_in_Megaloptera(Clayton)"
        ],
        "rules": "specializes_in_Megaloptera(Clayton) ⊕ studies_other_insects(Clayton)",
        "conclusion": "studies_other_insects(Clayton)"
      }
    ],
    "conclusion": "Clayton studies other insects.",
    "conclusion_fol": "studies_other_insects(Clayton)",
    "answer": "False",
    "context": [
      "Clayton conducts fieldwork.",
      "Clayton documents his findings.",
      "If Clayton conducts fieldwork, then he either collects samples or documents findings, but not both.",
      "Every entomologist either collects samples or publishes research.",
      "Clayton is an expert entomologist.",
      "If Clayton is an expert entomologist, then he specializes in Megaloptera and publishes research.",
      "Either Clayton specializes in Megaloptera or he studies other insects, but not both."
    ],
    "context_fol": [
      "conducts_fieldwork(Clayton)",
      "documents_findings(Clayton)",
      "conducts_fieldwork(Clayton) → (collects_samples(Clayton) ⊕ documents_findings(Clayton))",
      "∀x (collects_samples(x) ∨ publish_research(x))",
      "expert_entomologist(Clayton)",
      "expert_entomologist(Clayton) → (specializes_in_Megaloptera(Clayton) ∧ publish_research(Clayton))",
      "specializes_in_Megaloptera(Clayton) ⊕ studies_other_insects(Clayton)"
    ],
    "background_story": "Clayton was a renowned entomologist with a fascination for the ancient order of Megaloptera, also known as alderflies and dobsonflies. His lifelong passion for these insects led him to spend years studying their behavior, habitats, and evolution. Clayton's groundbreaking research on the Megaloptera order shed new light on their unique characteristics and importance in aquatic ecosystems. He spent countless hours in the field, from the shallow streams of North America to the dense rainforests of South America, documenting and collecting specimens. Clayton's dedication to the study of Megaloptera earned him international recognition, and his work continues to inspire a new generation of entomologists to explore the intriguing world of these often-overlooked insects.",
    "name": "Clayton",
    "keyword": "megaloptera",
    "subject_category": "entomologist"
  },
  {
    "facts": [
      "Emiliano is moderate.",
      "Emiliano does not hold moderate views."
    ],
    "facts_fol": [
      "moderate(Emiliano)",
      "¬holds_moderate_views(Emiliano)"
    ],
    "rules": [
      "Emiliano is either peaceful or radicalized, but not both.",
      "If Emiliano is an extremist, then he is either moderate or peaceful, but not both.",
      "Emiliano either holds moderate views or is an extremist."
    ],
    "rules_fol": [
      "peaceful(Emiliano) ⊕ radicalized(Emiliano)",
      "extremist(Emiliano) → (moderate(Emiliano) ⊕ peaceful(Emiliano))",
      "holds_moderate_views(Emiliano) ∨ extremist(Emiliano)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Emiliano is influenced by an ideology, then he either holds strong beliefs or is peaceful.",
      "If Emiliano either rejects authority or seeks confrontation (but not both), then he is an extremist."
    ],
    "distracting_rules_fol": [
      "influenced_ideology(Emiliano) → (holds_strong_beliefs(Emiliano) ∨ peaceful(Emiliano))",
      "(rejects_authority(Emiliano) ⊕ seeks_confrontation(Emiliano)) → extremist(Emiliano)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Emiliano does not hold moderate views."
        ],
        "rules": "Emiliano either holds moderate views or is an extremist.",
        "conclusion": "Emiliano is an extremist."
      },
      {
        "facts": [
          "Emiliano is an extremist.",
          "Emiliano is moderate."
        ],
        "rules": "If Emiliano is an extremist, then he is either moderate or peaceful, but not both.",
        "conclusion": "Emiliano is not peaceful."
      },
      {
        "facts": [
          "Emiliano is not peaceful."
        ],
        "rules": "Emiliano is either peaceful or radicalized, but not both.",
        "conclusion": "Emiliano is not radicalized."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬holds_moderate_views(Emiliano)"
        ],
        "rules": "holds_moderate_views(Emiliano) ∨ extremist(Emiliano)",
        "conclusion": "extremist(Emiliano)"
      },
      {
        "facts": [
          "extremist(Emiliano)",
          "moderate(Emiliano)"
        ],
        "rules": "extremist(Emiliano) → (moderate(Emiliano) ⊕ peaceful(Emiliano))",
        "conclusion": "¬peaceful(Emiliano)"
      },
      {
        "facts": [
          "¬peaceful(Emiliano)"
        ],
        "rules": "peaceful(Emiliano) ⊕ radicalized(Emiliano)",
        "conclusion": "¬radicalized(Emiliano)"
      }
    ],
    "conclusion": "Emiliano is not radicalized.",
    "conclusion_fol": "¬radicalized(Emiliano)",
    "answer": "False",
    "context": [
      "Emiliano does not hold moderate views.",
      "Emiliano either holds moderate views or is an extremist.",
      "Emiliano is moderate.",
      "If Emiliano is an extremist, then he is either moderate or peaceful, but not both.",
      "Emiliano is either peaceful or radicalized, but not both."
    ],
    "context_fol": [
      "¬holds_moderate_views(Emiliano)",
      "holds_moderate_views(Emiliano) ∨ extremist(Emiliano)",
      "moderate(Emiliano)",
      "extremist(Emiliano) → (moderate(Emiliano) ⊕ peaceful(Emiliano))",
      "peaceful(Emiliano) ⊕ radicalized(Emiliano)"
    ],
    "background_story": "Emiliano, once a peaceful and devout individual, found himself increasingly radicalized by extremist ideologies. He became obsessed with the notion of a holy war, believing it was his duty to fight for what he saw as a righteous cause. As he delved deeper into the world of jihadism, Emiliano's actions became more and more erratic, causing concern among his friends and family. Despite their efforts to intervene, he eventually disappeared, leaving behind only a cryptic message hinting at his involvement with a militant group. His loved ones were left to grapple with the shocking transformation of the man they once knew, wondering what had driven him to such extremes and if he could ever find his way back to a path of peace.",
    "name": "Emiliano",
    "keyword": "jihadist",
    "subject_category": "human"
  },
  {
    "facts": [
      "Elsie climbs trees.",
      "Elsie stores acorns.",
      "Elsie remembers locations.",
      "Elsie lives in the forest.",
      "Elsie does not gather nuts."
    ],
    "facts_fol": [
      "climbs_trees(Elsie)",
      "stores_acorns(Elsie)",
      "remembers_locations(Elsie)",
      "lives_in_forest(Elsie)",
      "¬gathers_nuts(Elsie)"
    ],
    "rules": [
      "If Elsie is resourceful, then she can either thrive in winter or influence others, but not both.",
      "If Elsie either finds food or climbs trees (but not both), then she is resourceful.",
      "If a squirrel stores acorns and remembers locations, then it can thrive in winter.",
      "Elsie either digs burrows or finds food, but not both.",
      "If Elsie lives in the forest, then she either digs burrows or gathers nuts, but not both."
    ],
    "rules_fol": [
      "resourceful(Elsie) → (thrive_in_winter(Elsie) ⊕ influence_others(Elsie))",
      "(finds_food(Elsie) ⊕ climbs_trees(Elsie)) → resourceful(Elsie)",
      "∀x ((stores_acorns(x) ∧ remembers_locations(x)) → thrive_in_winter(x))",
      "digs_burrows(Elsie) ⊕ finds_food(Elsie)",
      "lives_in_forest(Elsie) → (digs_burrows(Elsie) ⊕ gathers_nuts(Elsie))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Elsie is adaptable, then she is either social or resourceful, but not both.",
      "If Elsie either hides acorns or anticipates seasons (but not both), then she is able to thrive in winter.",
      "Any squirrel that has a keen smell and runs fast can find food.",
      "If Elsie has sharp teeth, then she either digs burrows or has a bushy tail, but not both."
    ],
    "distracting_rules_fol": [
      "adaptable(Elsie) → (social(Elsie) ⊕ resourceful(Elsie))",
      "(hides_acorns(Elsie) ⊕ anticipates_seasons(Elsie)) → thrive_in_winter(Elsie)",
      "∀x ((has_keen_smell(x) ∧ runs_fast(x)) → finds_food(x))",
      "has_sharp_teeth(Elsie) → (digs_burrows(Elsie) ⊕ has_bushy_tail(Elsie))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Elsie lives in the forest.",
          "Elsie does not gather nuts."
        ],
        "rules": "If Elsie lives in the forest, then she either digs burrows or gathers nuts, but not both.",
        "conclusion": "Elsie digs burrows."
      },
      {
        "facts": [
          "Elsie digs burrows."
        ],
        "rules": "Elsie either digs burrows or finds food, but not both.",
        "conclusion": "Elsie does not find food."
      },
      {
        "facts": [
          "Elsie stores acorns.",
          "Elsie remembers locations."
        ],
        "rules": "If a squirrel stores acorns and remembers locations, then it can thrive in winter.",
        "conclusion": "Elsie thrives in winter."
      },
      {
        "facts": [
          "Elsie does not find food.",
          "Elsie climbs trees."
        ],
        "rules": "If Elsie either finds food or climbs trees (but not both), then she is resourceful.",
        "conclusion": "Elsie is resourceful."
      },
      {
        "facts": [
          "Elsie is resourceful.",
          "Elsie thrives in winter."
        ],
        "rules": "If Elsie is resourceful, then she can either thrive in winter or influence others, but not both.",
        "conclusion": "Elsie influences others."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "lives_in_forest(Elsie)",
          "¬gathers_nuts(Elsie)"
        ],
        "rules": "lives_in_forest(Elsie) → (digs_burrows(Elsie) ⊕ gathers_nuts(Elsie))",
        "conclusion": "digs_burrows(Elsie)"
      },
      {
        "facts": [
          "digs_burrows(Elsie)"
        ],
        "rules": "digs_burrows(Elsie) ⊕ finds_food(Elsie)",
        "conclusion": "¬finds_food(Elsie)"
      },
      {
        "facts": [
          "stores_acorns(Elsie)",
          "remembers_locations(Elsie)"
        ],
        "rules": "∀x ((stores_acorns(x) ∧ remembers_locations(x)) → thrive_in_winter(x))",
        "conclusion": "thrive_in_winter(Elsie)"
      },
      {
        "facts": [
          "¬finds_food(Elsie)",
          "climbs_trees(Elsie)"
        ],
        "rules": "(finds_food(Elsie) ⊕ climbs_trees(Elsie)) → resourceful(Elsie)",
        "conclusion": "resourceful(Elsie)"
      },
      {
        "facts": [
          "resourceful(Elsie)",
          "thrive_in_winter(Elsie)"
        ],
        "rules": "resourceful(Elsie) → (thrive_in_winter(Elsie) ⊕ influence_others(Elsie))",
        "conclusion": "influence_others(Elsie)"
      }
    ],
    "conclusion": "Elsie influences others.",
    "conclusion_fol": "influence_others(Elsie)",
    "answer": "False",
    "context": [
      "Elsie lives in the forest.",
      "Elsie does not gather nuts.",
      "If Elsie lives in the forest, then she either digs burrows or gathers nuts, but not both.",
      "Elsie either digs burrows or finds food, but not both.",
      "Elsie stores acorns.",
      "Elsie remembers locations.",
      "If a squirrel stores acorns and remembers locations, then it can thrive in winter.",
      "Elsie climbs trees.",
      "If Elsie either finds food or climbs trees (but not both), then she is resourceful.",
      "If Elsie is resourceful, then she can either thrive in winter or influence others, but not both."
    ],
    "context_fol": [
      "lives_in_forest(Elsie)",
      "¬gathers_nuts(Elsie)",
      "lives_in_forest(Elsie) → (digs_burrows(Elsie) ⊕ gathers_nuts(Elsie))",
      "digs_burrows(Elsie) ⊕ finds_food(Elsie)",
      "stores_acorns(Elsie)",
      "remembers_locations(Elsie)",
      "∀x ((stores_acorns(x) ∧ remembers_locations(x)) → thrive_in_winter(x))",
      "climbs_trees(Elsie)",
      "(finds_food(Elsie) ⊕ climbs_trees(Elsie)) → resourceful(Elsie)",
      "resourceful(Elsie) → (thrive_in_winter(Elsie) ⊕ influence_others(Elsie))"
    ],
    "background_story": "Elsie was a bushy-tailed squirrel who lived in a lush forest filled with ancient oak trees. Her life revolved around collecting and storing acorns for the winter. With a keen sense of smell and agile limbs, Elsie would scamper up trees, carefully selecting the plumpest and healthiest acorns. She had a special talent for remembering where each acorn was hidden, often retrieving them even under a thick blanket of snow. As the seasons changed, Elsie's stash became the envy of the forest, with other squirrels seeking her advice on where to find the best acorns. Her love for acorns was not just about survival; it was a passion that connected her to the natural world and the beauty of the forest she called home.",
    "name": "Elsie",
    "keyword": "acorn",
    "subject_category": "squirrel"
  },
  {
    "facts": [
      "Callahan does not analyze data.",
      "Callahan researches plants.",
      "Callahan does not publish his findings."
    ],
    "facts_fol": [
      "¬analyze_data(Callahan)",
      "research_plants(Callahan)",
      "¬publish_findings(Callahan)"
    ],
    "rules": [
      "For all botanists, if they study lichen, then they understand ecosystems.",
      "Callahan either explores nature or studies lichen, but not both.",
      "Every botanist who collects samples either analyzes data or explores nature (or both).",
      "Every botanist who researches plants either publishes their findings or collects samples (or both)."
    ],
    "rules_fol": [
      "∀x (study_lichen(x) → understand_ecosystems(x))",
      "explore_nature(Callahan) ⊕ study_lichen(Callahan)",
      "∀x (collect_samples(x) → (analyze_data(x) ∨ explore_nature(x)))",
      "∀x (research_plants(x) → (publish_findings(x) ∨ collect_samples(x)))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Callahan investigates fungi, then he studies lichen.",
      "Every botanist who investigates species either explores nature or discovers new types.",
      "If Callahan either examines specimens or identifies species (but not both), then he collects samples."
    ],
    "distracting_rules_fol": [
      "investigate_fungi(Callahan) → study_lichen(Callahan)",
      "∀x (investigate_species(x) → (explore_nature(x) ∨ discover_new_types(x)))",
      "(examine_specimens(Callahan) ⊕ identify_species(Callahan)) → collect_samples(Callahan)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Callahan researches plants.",
          "Callahan does not publish his findings."
        ],
        "rules": "Every botanist who researches plants either publishes their findings or collects samples (or both).",
        "conclusion": "Callahan collects samples."
      },
      {
        "facts": [
          "Callahan collects samples.",
          "Callahan does not analyze data."
        ],
        "rules": "Every botanist who collects samples either analyzes data or explores nature (or both).",
        "conclusion": "Callahan explores nature."
      },
      {
        "facts": [
          "Callahan explores nature."
        ],
        "rules": "Callahan either explores nature or studies lichen, but not both.",
        "conclusion": "Callahan does not study lichen."
      },
      {
        "facts": [
          "Callahan does not study lichen."
        ],
        "rules": "For all botanists, if they study lichen, then they understand ecosystems.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "research_plants(Callahan)",
          "¬publish_findings(Callahan)"
        ],
        "rules": "∀x (research_plants(x) → (publish_findings(x) ∨ collect_samples(x)))",
        "conclusion": "collect_samples(Callahan)"
      },
      {
        "facts": [
          "collect_samples(Callahan)",
          "¬analyze_data(Callahan)"
        ],
        "rules": "∀x (collect_samples(x) → (analyze_data(x) ∨ explore_nature(x)))",
        "conclusion": "explore_nature(Callahan)"
      },
      {
        "facts": [
          "explore_nature(Callahan)"
        ],
        "rules": "explore_nature(Callahan) ⊕ study_lichen(Callahan)",
        "conclusion": "¬study_lichen(Callahan)"
      },
      {
        "facts": [
          "¬study_lichen(Callahan)"
        ],
        "rules": "∀x (study_lichen(x) → understand_ecosystems(x))",
        "conclusion": null
      }
    ],
    "conclusion": "Callahan does not understand ecosystems.",
    "conclusion_fol": "¬understand_ecosystems(Callahan)",
    "answer": "Uncertain",
    "context": [
      "Callahan researches plants.",
      "Callahan does not publish his findings.",
      "Every botanist who researches plants either publishes their findings or collects samples (or both).",
      "Callahan does not analyze data.",
      "Every botanist who collects samples either analyzes data or explores nature (or both).",
      "Callahan either explores nature or studies lichen, but not both.",
      "For all botanists, if they study lichen, then they understand ecosystems."
    ],
    "context_fol": [
      "research_plants(Callahan)",
      "¬publish_findings(Callahan)",
      "∀x (research_plants(x) → (publish_findings(x) ∨ collect_samples(x)))",
      "¬analyze_data(Callahan)",
      "∀x (collect_samples(x) → (analyze_data(x) ∨ explore_nature(x)))",
      "explore_nature(Callahan) ⊕ study_lichen(Callahan)",
      "∀x (study_lichen(x) → understand_ecosystems(x))"
    ],
    "background_story": "Callahan was a renowned botanist with a passion for understanding the symbiotic relationships in nature. His fascination with lichen, a unique blend of fungi and algae, led him to dedicate his career to studying these organisms. Callahan spent years in the harsh, beautiful landscapes of the Arctic, meticulously collecting and analyzing lichen samples. His groundbreaking research revealed the crucial role lichen plays in indicating environmental health and facilitating the growth of other species. Callahan's work took him to remote corners of the globe, from the misty forests of Ireland to the sun-baked deserts of Australia, always in pursuit of a deeper understanding of the intricate world of lichen and its significance in the ecosystem.",
    "name": "Callahan",
    "keyword": "lichen",
    "subject_category": "botanist"
  },
  {
    "facts": [
      "Boy is an experienced artisan.",
      "Boy is innovative."
    ],
    "facts_fol": [
      "experienced(Boy)",
      "innovative(Boy)"
    ],
    "rules": [
      "For every artisan, they are either skilled or unskilled, but not both.",
      "All meticulous artisans are skilled.",
      "Boy is either creative or meticulous, but not both, which contributes to his exceptional work as an engraver.",
      "If Boy is an experienced artisan, then he is either innovative or creative, but not both."
    ],
    "rules_fol": [
      "∀x (skilled(x) ⊕ unskilled(x))",
      "∀x (meticulous(x) → skilled(x))",
      "creative(Boy) ⊕ meticulous(Boy)",
      "experienced(Boy) → (innovative(Boy) ⊕ creative(Boy))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "All dedicated artisans are either skilled or talented.",
      "All artisans who are attentive to detail are meticulous in their work.",
      "Every attentive artisan is either creative or pays attention to details in their work."
    ],
    "distracting_rules_fol": [
      "∀x (dedicated(x) → (skilled(x) ∨ talented(x)))",
      "∀x (attentive(x) → meticulous(x))",
      "∀x (attentive(x) → (detailed(x) ∨ creative(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Boy is an experienced artisan.",
          "Boy is innovative."
        ],
        "rules": "If Boy is an experienced artisan, then he is either innovative or creative, but not both.",
        "conclusion": "The boy is not creative."
      },
      {
        "facts": [
          "The boy is not creative."
        ],
        "rules": "Boy is either creative or meticulous, but not both, which contributes to his exceptional work as an engraver.",
        "conclusion": "Boy is meticulous."
      },
      {
        "facts": [
          "Boy is meticulous."
        ],
        "rules": "All meticulous artisans are skilled.",
        "conclusion": "Boy is a skilled engraver."
      },
      {
        "facts": [
          "Boy is a skilled engraver."
        ],
        "rules": "For every artisan, they are either skilled or unskilled, but not both.",
        "conclusion": "Boy is an unskilled engraver."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "experienced(Boy)",
          "innovative(Boy)"
        ],
        "rules": "experienced(Boy) → (innovative(Boy) ⊕ creative(Boy))",
        "conclusion": "¬creative(Boy)"
      },
      {
        "facts": [
          "¬creative(Boy)"
        ],
        "rules": "creative(Boy) ⊕ meticulous(Boy)",
        "conclusion": "meticulous(Boy)"
      },
      {
        "facts": [
          "meticulous(Boy)"
        ],
        "rules": "∀x (meticulous(x) → skilled(x))",
        "conclusion": "skilled(Boy)"
      },
      {
        "facts": [
          "skilled(Boy)"
        ],
        "rules": "∀x (skilled(x) ⊕ unskilled(x))",
        "conclusion": "unskilled(Boy)"
      }
    ],
    "conclusion": "Boy is an unskilled engraver.",
    "conclusion_fol": "unskilled(Boy)",
    "answer": "False",
    "context": [
      "Boy is an experienced artisan.",
      "Boy is innovative.",
      "If Boy is an experienced artisan, then he is either innovative or creative, but not both.",
      "Boy is either creative or meticulous, but not both, which contributes to his exceptional work as an engraver.",
      "All meticulous artisans are skilled.",
      "For every artisan, they are either skilled or unskilled, but not both."
    ],
    "context_fol": [
      "experienced(Boy)",
      "innovative(Boy)",
      "experienced(Boy) → (innovative(Boy) ⊕ creative(Boy))",
      "creative(Boy) ⊕ meticulous(Boy)",
      "∀x (meticulous(x) → skilled(x))",
      "∀x (skilled(x) ⊕ unskilled(x))"
    ],
    "background_story": "Boy was a young and talented engraver from a small village nestled in the mountains. He learned the art of engraving from his father, who had learned it from his father before him. With meticulous attention to detail and a steady hand, Boy could engrave intricate designs onto metal, wood, and even stone. His workshop was filled with the smell of wood and metal as he worked tirelessly to create beautiful pieces. From engraving initials on pocket watches to crafting intricate patterns on ceremonial swords, Boy's work was highly sought after. His dedication to his craft and his ability to bring designs to life earned him the respect and admiration of his community, making him one of the most renowned engravers of his time.",
    "name": "Boy",
    "keyword": "engraver",
    "subject_category": "artisan"
  },
  {
    "facts": [
      "Fabian does not build trust."
    ],
    "facts_fol": [
      "¬builds_trust(Fabian)"
    ],
    "rules": [
      "Fabian is either empathetic or a good communicator (or both).",
      "Fabian is either able to resolve conflicts or is empathetic, but not necessarily both.",
      "Fabian either builds trust or resolves conflicts."
    ],
    "rules_fol": [
      "empathetic(Fabian) ∨ good_communicator(Fabian)",
      "resolves_conflicts(Fabian) ⊕ empathetic(Fabian)",
      "builds_trust(Fabian) ∨ resolves_conflicts(Fabian)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Fabian is either a good listener or empathetic (or both).",
      "All active listeners who are fair-minded are able to resolve conflicts."
    ],
    "distracting_rules_fol": [
      "listens_actively(Fabian) ∨ empathetic(Fabian)",
      "∀x (active_listener(x) → (fair_minded(x) ∧ resolves_conflicts(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Fabian does not build trust."
        ],
        "rules": "Fabian either builds trust or resolves conflicts.",
        "conclusion": "Fabian is able to resolve conflicts."
      },
      {
        "facts": [
          "Fabian is able to resolve conflicts."
        ],
        "rules": "Fabian is either able to resolve conflicts or is empathetic, but not necessarily both.",
        "conclusion": "Fabian is not empathetic."
      },
      {
        "facts": [
          "Fabian is not empathetic."
        ],
        "rules": "Fabian is either empathetic or a good communicator (or both).",
        "conclusion": "Fabian is a good communicator."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬builds_trust(Fabian)"
        ],
        "rules": "builds_trust(Fabian) ∨ resolves_conflicts(Fabian)",
        "conclusion": "resolves_conflicts(Fabian)"
      },
      {
        "facts": [
          "resolves_conflicts(Fabian)"
        ],
        "rules": "resolves_conflicts(Fabian) ⊕ empathetic(Fabian)",
        "conclusion": "¬empathetic(Fabian)"
      },
      {
        "facts": [
          "¬empathetic(Fabian)"
        ],
        "rules": "empathetic(Fabian) ∨ good_communicator(Fabian)",
        "conclusion": "good_communicator(Fabian)"
      }
    ],
    "conclusion": "Fabian is a good communicator.",
    "conclusion_fol": "good_communicator(Fabian)",
    "answer": "True",
    "context": [
      "Fabian does not build trust.",
      "Fabian either builds trust or resolves conflicts.",
      "Fabian is either able to resolve conflicts or is empathetic, but not necessarily both.",
      "Fabian is either empathetic or a good communicator (or both)."
    ],
    "context_fol": [
      "¬builds_trust(Fabian)",
      "builds_trust(Fabian) ∨ resolves_conflicts(Fabian)",
      "resolves_conflicts(Fabian) ⊕ empathetic(Fabian)",
      "empathetic(Fabian) ∨ good_communicator(Fabian)"
    ],
    "background_story": "Fabian was a charismatic and empathetic individual with a gift for understanding people. As a mediator and conflict resolution specialist, he used his exceptional interpersonal skills to bring harmony to even the most discordant groups. With a keen sense of emotional intelligence, Fabian could effortlessly navigate complex social dynamics, identifying and addressing the underlying issues that often led to conflict. His warm and non-judgmental approach put everyone at ease, allowing him to build trust and foster open communication. Whether in the workplace, community, or personal relationships, Fabian's interpersonal skills made him a sought-after advisor and a beloved friend, known for his ability to heal rifts and strengthen bonds between people.",
    "name": "Fabian",
    "keyword": "interpersonal",
    "subject_category": "human"
  },
  {
    "facts": [
      "Maxine is creative.",
      "Maxine uses traditional techniques.",
      "Maxine works with metals.",
      "Maxine is innovative."
    ],
    "facts_fol": [
      "is_creative(Maxine)",
      "uses_traditional_techniques(Maxine)",
      "works_with_metals(Maxine)",
      "is_innovative(Maxine)"
    ],
    "rules": [
      "If Maxine is detailed in her etchings, then she creates masterpieces.",
      "If Maxine is an experienced artist, then she is either creative or detailed in her work, but not both.",
      "If Maxine uses traditional techniques, then she is either experienced or has a unique style, but not both.",
      "If Maxine works with metals, then she is either innovative or has a unique style, but not both."
    ],
    "rules_fol": [
      "is_detailed(Maxine) → creates_masterpieces(Maxine)",
      "is_experienced(Maxine) → (is_creative(Maxine) ⊕ is_detailed(Maxine))",
      "uses_traditional_techniques(Maxine) → (has_unique_style(Maxine) ⊕ is_experienced(Maxine))",
      "works_with_metals(Maxine) → (has_unique_style(Maxine) ⊕ is_innovative(Maxine))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Any artist who works precisely or has good technique is detailed in their work.",
      "Every artist who produces etchings is either experienced or has technical skill.",
      "Every artist either makes art or has a unique style."
    ],
    "distracting_rules_fol": [
      "∀x ((works_precisely(x) ∨ has_good_technique(x)) → is_detailed(x))",
      "∀x (produces_etchings(x) → (is_experienced(x) ∨ has_technical_skill(x)))",
      "∀x (makes_art(x) ∨ has_unique_style(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Maxine works with metals.",
          "Maxine is innovative."
        ],
        "rules": "If Maxine works with metals, then she is either innovative or has a unique style, but not both.",
        "conclusion": "Maxine does not have a unique style."
      },
      {
        "facts": [
          "Maxine uses traditional techniques.",
          "Maxine does not have a unique style."
        ],
        "rules": "If Maxine uses traditional techniques, then she is either experienced or has a unique style, but not both.",
        "conclusion": "Maxine is an experienced artist."
      },
      {
        "facts": [
          "Maxine is an experienced artist.",
          "Maxine is creative."
        ],
        "rules": "If Maxine is an experienced artist, then she is either creative or detailed in her work, but not both.",
        "conclusion": "Maxine is not detailed in her etchings."
      },
      {
        "facts": [
          "Maxine is not detailed in her etchings."
        ],
        "rules": "If Maxine is detailed in her etchings, then she creates masterpieces.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "works_with_metals(Maxine)",
          "is_innovative(Maxine)"
        ],
        "rules": "works_with_metals(Maxine) → (has_unique_style(Maxine) ⊕ is_innovative(Maxine))",
        "conclusion": "¬has_unique_style(Maxine)"
      },
      {
        "facts": [
          "uses_traditional_techniques(Maxine)",
          "¬has_unique_style(Maxine)"
        ],
        "rules": "uses_traditional_techniques(Maxine) → (has_unique_style(Maxine) ⊕ is_experienced(Maxine))",
        "conclusion": "is_experienced(Maxine)"
      },
      {
        "facts": [
          "is_experienced(Maxine)",
          "is_creative(Maxine)"
        ],
        "rules": "is_experienced(Maxine) → (is_creative(Maxine) ⊕ is_detailed(Maxine))",
        "conclusion": "¬is_detailed(Maxine)"
      },
      {
        "facts": [
          "¬is_detailed(Maxine)"
        ],
        "rules": "is_detailed(Maxine) → creates_masterpieces(Maxine)",
        "conclusion": null
      }
    ],
    "conclusion": "Maxine does not create masterpieces.",
    "conclusion_fol": "¬creates_masterpieces(Maxine)",
    "answer": "Uncertain",
    "context": [
      "Maxine works with metals.",
      "Maxine is innovative.",
      "If Maxine works with metals, then she is either innovative or has a unique style, but not both.",
      "Maxine uses traditional techniques.",
      "If Maxine uses traditional techniques, then she is either experienced or has a unique style, but not both.",
      "Maxine is creative.",
      "If Maxine is an experienced artist, then she is either creative or detailed in her work, but not both.",
      "If Maxine is detailed in her etchings, then she creates masterpieces."
    ],
    "context_fol": [
      "works_with_metals(Maxine)",
      "is_innovative(Maxine)",
      "works_with_metals(Maxine) → (has_unique_style(Maxine) ⊕ is_innovative(Maxine))",
      "uses_traditional_techniques(Maxine)",
      "uses_traditional_techniques(Maxine) → (has_unique_style(Maxine) ⊕ is_experienced(Maxine))",
      "is_creative(Maxine)",
      "is_experienced(Maxine) → (is_creative(Maxine) ⊕ is_detailed(Maxine))",
      "is_detailed(Maxine) → creates_masterpieces(Maxine)"
    ],
    "background_story": "Maxine was a skilled printmaker with a passion for etching. She spent most of her days in her cozy studio, surrounded by copper plates, inks, and papers. With meticulous care, Maxine would etch intricate designs onto the metal, watching as her visions took shape. Her favorite subject was the natural world, and she loved to capture the delicate patterns of leaves and flowers. As she worked, the smell of acid and ink filled the air, and the sound of scratching tools on metal created a soothing melody. Maxine's etchings were highly sought after, not only for their technical precision but also for the sense of wonder they evoked. Each piece was a testament to her patience and dedication to her craft, as if the very metal itself had been transformed by her touch.",
    "name": "Maxine",
    "keyword": "etch",
    "subject_category": "artist"
  },
  {
    "facts": [
      "Kristian does not seek adventure.",
      "Kristian does not face challenges."
    ],
    "facts_fol": [
      "¬seeks_adventure(Kristian)",
      "¬face_challenges(Kristian)"
    ],
    "rules": [
      "If Kristian is a fearless explorer, then he either leads successful expeditions or makes groundbreaking discoveries (or both).",
      "Kristian either seeks adventure or is a fearless explorer.",
      "A person either makes groundbreaking discoveries or inspires others, but not necessarily both.",
      "Kristian either faces challenges or inspires others, but not necessarily both."
    ],
    "rules_fol": [
      "fearless_explorer(Kristian) → (lead_successful_expeditions(Kristian) ∨ make_groundbreaking_discoveries(Kristian))",
      "seeks_adventure(Kristian) ∨ fearless_explorer(Kristian)",
      "∀x (inspire_others(x) ⊕ make_groundbreaking_discoveries(x))",
      "face_challenges(Kristian) ⊕ inspire_others(Kristian)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Kristian either charts new territory or uncovers secrets (but not both), then he is a fearless explorer.",
      "Anyone who thinks critically or takes risks can make groundbreaking discoveries.",
      "Anyone who shares knowledge inspires others."
    ],
    "distracting_rules_fol": [
      "(charts_territory(Kristian) ⊕ uncovers_secrets(Kristian)) → fearless_explorer(Kristian)",
      "∀x ((thinks_critically(x) ∨ takes_risks(x)) → make_groundbreaking_discoveries(x))",
      "∀x (share_knowledge(x) → inspire_others(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Kristian does not face challenges."
        ],
        "rules": "Kristian either faces challenges or inspires others, but not necessarily both.",
        "conclusion": "Kristian inspires others."
      },
      {
        "facts": [
          "Kristian inspires others."
        ],
        "rules": "A person either makes groundbreaking discoveries or inspires others, but not necessarily both.",
        "conclusion": "Kristian does not make groundbreaking discoveries."
      },
      {
        "facts": [
          "Kristian does not seek adventure."
        ],
        "rules": "Kristian either seeks adventure or is a fearless explorer.",
        "conclusion": "Kristian is a fearless explorer."
      },
      {
        "facts": [
          "Kristian is a fearless explorer.",
          "Kristian does not make groundbreaking discoveries."
        ],
        "rules": "If Kristian is a fearless explorer, then he either leads successful expeditions or makes groundbreaking discoveries (or both).",
        "conclusion": "Kristian leads successful expeditions."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬face_challenges(Kristian)"
        ],
        "rules": "face_challenges(Kristian) ⊕ inspire_others(Kristian)",
        "conclusion": "inspire_others(Kristian)"
      },
      {
        "facts": [
          "inspire_others(Kristian)"
        ],
        "rules": "∀x (inspire_others(x) ⊕ make_groundbreaking_discoveries(x))",
        "conclusion": "¬make_groundbreaking_discoveries(Kristian)"
      },
      {
        "facts": [
          "¬seeks_adventure(Kristian)"
        ],
        "rules": "seeks_adventure(Kristian) ∨ fearless_explorer(Kristian)",
        "conclusion": "fearless_explorer(Kristian)"
      },
      {
        "facts": [
          "fearless_explorer(Kristian)",
          "¬make_groundbreaking_discoveries(Kristian)"
        ],
        "rules": "fearless_explorer(Kristian) → (lead_successful_expeditions(Kristian) ∨ make_groundbreaking_discoveries(Kristian))",
        "conclusion": "lead_successful_expeditions(Kristian)"
      }
    ],
    "conclusion": "Kristian leads successful expeditions.",
    "conclusion_fol": "lead_successful_expeditions(Kristian)",
    "answer": "True",
    "context": [
      "Kristian does not face challenges.",
      "Kristian either faces challenges or inspires others, but not necessarily both.",
      "A person either makes groundbreaking discoveries or inspires others, but not necessarily both.",
      "Kristian does not seek adventure.",
      "Kristian either seeks adventure or is a fearless explorer.",
      "If Kristian is a fearless explorer, then he either leads successful expeditions or makes groundbreaking discoveries (or both)."
    ],
    "context_fol": [
      "¬face_challenges(Kristian)",
      "face_challenges(Kristian) ⊕ inspire_others(Kristian)",
      "∀x (inspire_others(x) ⊕ make_groundbreaking_discoveries(x))",
      "¬seeks_adventure(Kristian)",
      "seeks_adventure(Kristian) ∨ fearless_explorer(Kristian)",
      "fearless_explorer(Kristian) → (lead_successful_expeditions(Kristian) ∨ make_groundbreaking_discoveries(Kristian))"
    ],
    "background_story": "Kristian was a renowned explorer with a passion for the unknown. He led numerous expeditionary teams into the depths of the Amazon rainforest, the Himalayan mountains, and the scorching Sahara desert. His fearless attitude and exceptional leadership skills earned him the respect of his peers and the admiration of the public. Kristian's most notable expedition was to a remote island in the Pacific, where he discovered a previously unknown species of plant with extraordinary medicinal properties. His findings sparked a new wave of research and opened up new avenues for medical breakthroughs. Kristian's expeditionary spirit and thirst for discovery continue to inspire generations of adventurers and scientists alike.",
    "name": "Kristian",
    "keyword": "expeditionary",
    "subject_category": "human"
  },
  {
    "facts": [
      "Luv has a keen sense.",
      "Luv is venomous.",
      "Luv is not camouflaged.",
      "Luv does not rest by day."
    ],
    "facts_fol": [
      "has_keen_sense(Luv)",
      "venomous(Luv)",
      "¬is_camouflaged(Luv)",
      "¬rests_by_day(Luv)"
    ],
    "rules": [
      "Luv either has fangs or is deadly.",
      "Luv is either silent in her movements or has fangs, but not necessarily both.",
      "All snakes that hunt at night are silent and have a keen sense.",
      "Luv is either camouflaged or aggressive, but not necessarily both.",
      "Luv either rests by day or hunts at night, but not both."
    ],
    "rules_fol": [
      "has_fangs(Luv) ∨ deadly(Luv)",
      "is_silent(Luv) ⊕ has_fangs(Luv)",
      "∀x (hunts_at_night(x) → (is_silent(x) ∧ has_keen_sense(x)))",
      "is_camouflaged(Luv) ⊕ aggressive(Luv)",
      "rests_by_day(Luv) ⊕ hunts_at_night(Luv)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Luv is poisonous, then she is deadly.",
      "All snakes with sharp teeth have fangs.",
      "If Luv moves slowly and strikes quickly, then she is silent.",
      "Luv either coils fast or is aggressive (or both).",
      "All snakes that are nocturnal and have sharp eyes hunt at night."
    ],
    "distracting_rules_fol": [
      "poisonous(Luv) → deadly(Luv)",
      "∀x (sharp_teeth(x) → has_fangs(x))",
      "(moves_slowly(Luv) ∧ strikes_quickly(Luv)) → is_silent(Luv)",
      "coils_fast(Luv) ∨ aggressive(Luv)",
      "∀x ((is_nocturnal(x) ∧ has_sharp_eyes(x)) → hunts_at_night(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Luv does not rest by day."
        ],
        "rules": "Luv either rests by day or hunts at night, but not both.",
        "conclusion": "Luv hunts at night."
      },
      {
        "facts": [
          "Luv is not camouflaged."
        ],
        "rules": "Luv is either camouflaged or aggressive, but not necessarily both.",
        "conclusion": "Luv is aggressive."
      },
      {
        "facts": [
          "Luv hunts at night.",
          "Luv has a keen sense."
        ],
        "rules": "All snakes that hunt at night are silent and have a keen sense.",
        "conclusion": "Luv is silent in her movements."
      },
      {
        "facts": [
          "Luv is silent in her movements."
        ],
        "rules": "Luv is either silent in her movements or has fangs, but not necessarily both.",
        "conclusion": "Luv does not have fangs."
      },
      {
        "facts": [
          "Luv does not have fangs."
        ],
        "rules": "Luv either has fangs or is deadly.",
        "conclusion": "Luv is deadly."
      },
      {
        "facts": [
          "Luv is venomous.",
          "Luv is deadly.",
          "Luv is aggressive."
        ],
        "rules": null,
        "conclusion": "If Luv is venomous, then she is either deadly or aggressive (or both)."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬rests_by_day(Luv)"
        ],
        "rules": "rests_by_day(Luv) ⊕ hunts_at_night(Luv)",
        "conclusion": "hunts_at_night(Luv)"
      },
      {
        "facts": [
          "¬is_camouflaged(Luv)"
        ],
        "rules": "is_camouflaged(Luv) ⊕ aggressive(Luv)",
        "conclusion": "aggressive(Luv)"
      },
      {
        "facts": [
          "hunts_at_night(Luv)",
          "has_keen_sense(Luv)"
        ],
        "rules": "∀x (hunts_at_night(x) → (is_silent(x) ∧ has_keen_sense(x)))",
        "conclusion": "is_silent(Luv)"
      },
      {
        "facts": [
          "is_silent(Luv)"
        ],
        "rules": "is_silent(Luv) ⊕ has_fangs(Luv)",
        "conclusion": "¬has_fangs(Luv)"
      },
      {
        "facts": [
          "¬has_fangs(Luv)"
        ],
        "rules": "has_fangs(Luv) ∨ deadly(Luv)",
        "conclusion": "deadly(Luv)"
      },
      {
        "facts": [
          "venomous(Luv)",
          "deadly(Luv)",
          "aggressive(Luv)"
        ],
        "rules": null,
        "conclusion": "venomous(Luv) → (deadly(Luv) ∨ aggressive(Luv))"
      }
    ],
    "conclusion": "If Luv is venomous, then she is either deadly or aggressive (or both).",
    "conclusion_fol": "venomous(Luv) → (deadly(Luv) ∨ aggressive(Luv))",
    "answer": "True",
    "context": [
      "Luv does not rest by day.",
      "Luv either rests by day or hunts at night, but not both.",
      "Luv is not camouflaged.",
      "Luv is either camouflaged or aggressive, but not necessarily both.",
      "Luv has a keen sense.",
      "All snakes that hunt at night are silent and have a keen sense.",
      "Luv is either silent in her movements or has fangs, but not necessarily both.",
      "Luv either has fangs or is deadly.",
      "Luv is venomous."
    ],
    "context_fol": [
      "¬rests_by_day(Luv)",
      "rests_by_day(Luv) ⊕ hunts_at_night(Luv)",
      "¬is_camouflaged(Luv)",
      "is_camouflaged(Luv) ⊕ aggressive(Luv)",
      "has_keen_sense(Luv)",
      "∀x (hunts_at_night(x) → (is_silent(x) ∧ has_keen_sense(x)))",
      "is_silent(Luv) ⊕ has_fangs(Luv)",
      "has_fangs(Luv) ∨ deadly(Luv)",
      "venomous(Luv)"
    ],
    "background_story": "In the heart of the dense jungle, there lived a venomous snake named Luv. Despite her endearing name, Luv was a deadly creature, feared by all who crossed her path. Her species was known for its potent neurotoxin, capable of killing its prey within minutes. Luv was a master hunter, striking with lightning speed and precision. Her domain was a place of dark legend, where even the bravest of adventurers dared not tread. Locals whispered tales of her deadly encounters, how she could blend into the shadows and strike without warning. Luv's reputation was one of stealth, power, and lethal efficiency, earning her the respect and fear of all who knew of her existence.",
    "name": "Luv",
    "keyword": "deadly",
    "subject_category": "snake"
  },
  {
    "facts": [
      "Amias is resilient.",
      "Amias has acne.",
      "Amias feels emotional."
    ],
    "facts_fol": [
      "resilient(Amias)",
      "has_acne(Amias)",
      "feels_emotional(Amias)"
    ],
    "rules": [
      "Amias is either confident or creative (or both).",
      "If Amias faces challenges, then he is either resilient or confident, but not both.",
      "If a person has acne and feels emotional, then they face challenges."
    ],
    "rules_fol": [
      "confident(Amias) ∨ creative(Amias)",
      "faces_challenges(Amias) → (resilient(Amias) ⊕ confident(Amias))",
      "∀x ((has_acne(x) ∧ feels_emotional(x)) → faces_challenges(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Anyone who self-accepts or expresses themselves freely is confident.",
      "If Amias either overcomes obstacles or meets adversity (but not both), then he faces challenges."
    ],
    "distracting_rules_fol": [
      "∀x ((self_accepts(x) ∨ expresses_freely(x)) → confident(x))",
      "(overcomes_obstacles(Amias) ⊕ meets_adversity(Amias)) → faces_challenges(Amias)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Amias has acne.",
          "Amias feels emotional."
        ],
        "rules": "If a person has acne and feels emotional, then they face challenges.",
        "conclusion": "Amias faces challenges."
      },
      {
        "facts": [
          "Amias faces challenges.",
          "Amias is resilient."
        ],
        "rules": "If Amias faces challenges, then he is either resilient or confident, but not both.",
        "conclusion": "Amias is not confident."
      },
      {
        "facts": [
          "Amias is not confident."
        ],
        "rules": "Amias is either confident or creative (or both).",
        "conclusion": "Amias is creative."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "has_acne(Amias)",
          "feels_emotional(Amias)"
        ],
        "rules": "∀x ((has_acne(x) ∧ feels_emotional(x)) → faces_challenges(x))",
        "conclusion": "faces_challenges(Amias)"
      },
      {
        "facts": [
          "faces_challenges(Amias)",
          "resilient(Amias)"
        ],
        "rules": "faces_challenges(Amias) → (resilient(Amias) ⊕ confident(Amias))",
        "conclusion": "¬confident(Amias)"
      },
      {
        "facts": [
          "¬confident(Amias)"
        ],
        "rules": "confident(Amias) ∨ creative(Amias)",
        "conclusion": "creative(Amias)"
      }
    ],
    "conclusion": "Amias is creative.",
    "conclusion_fol": "creative(Amias)",
    "answer": "True",
    "context": [
      "Amias has acne.",
      "Amias feels emotional.",
      "If a person has acne and feels emotional, then they face challenges.",
      "Amias is resilient.",
      "If Amias faces challenges, then he is either resilient or confident, but not both.",
      "Amias is either confident or creative (or both)."
    ],
    "context_fol": [
      "has_acne(Amias)",
      "feels_emotional(Amias)",
      "∀x ((has_acne(x) ∧ feels_emotional(x)) → faces_challenges(x))",
      "resilient(Amias)",
      "faces_challenges(Amias) → (resilient(Amias) ⊕ confident(Amias))",
      "confident(Amias) ∨ creative(Amias)"
    ],
    "background_story": "Amias, a talented young artist, struggled with a skin condition that left him with acneiform eruptions across his face and back. Despite the physical discomfort and emotional distress it caused, Amias found solace in his art. He began to explore the relationship between skin and identity, using his own experiences as inspiration. His paintings, though abstract, conveyed the turmoil and sensitivity he felt. As Amias's art gained recognition, he became an advocate for skin positivity and self-acceptance. Through his journey, he learned to embrace his unique skin and found that it fueled his creativity, turning what was once a source of insecurity into a powerful catalyst for his work.",
    "name": "Amias",
    "keyword": "acneiform",
    "subject_category": "person"
  },
  {
    "facts": [
      "Amoura does not think before acting.",
      "Amoura is optimistic.",
      "Amoura is empathic."
    ],
    "facts_fol": [
      "¬thinks_before_acting(Amoura)",
      "is_optimistic(Amoura)",
      "is_empathic(Amoura)"
    ],
    "rules": [
      "Amoura is either tactful or inconsiderate in her timing, but not both.",
      "If Amoura either considers others or thinks before acting (but not both), then she is tactful.",
      "Amoura is either selfless or considers others, but not necessarily both, when it comes to her interactions with those around her.",
      "If Amoura is optimistic, then she is either selfless or empathic, but not both."
    ],
    "rules_fol": [
      "tactful(Amoura) ⊕ inconsiderate(Amoura)",
      "(considers_others(Amoura) ⊕ thinks_before_acting(Amoura)) → tactful(Amoura)",
      "is_selfless(Amoura) ⊕ considers_others(Amoura)",
      "is_optimistic(Amoura) → (is_selfless(Amoura) ⊕ is_empathic(Amoura))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Amoura acts spontaneously, then she is either rash or tactful, but not both.",
      "All people with empathy consider others and value relationships.",
      "If Amoura is spontaneous, then she is either selfless or thoughtful, but not both."
    ],
    "distracting_rules_fol": [
      "acts_spontaneously(Amoura) → (is_rash(Amoura) ⊕ tactful(Amoura))",
      "∀x (has_empathy(x) → (considers_others(x) ∧ values_relationships(x)))",
      "is_spontaneous(Amoura) → (is_selfless(Amoura) ⊕ is_thoughtful(Amoura))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Amoura is optimistic.",
          "Amoura is empathic."
        ],
        "rules": "If Amoura is optimistic, then she is either selfless or empathic, but not both.",
        "conclusion": "Amoura is not selfless."
      },
      {
        "facts": [
          "Amoura is not selfless."
        ],
        "rules": "Amoura is either selfless or considers others, but not necessarily both, when it comes to her interactions with those around her.",
        "conclusion": "Amoura considers others."
      },
      {
        "facts": [
          "Amoura considers others.",
          "Amoura does not think before acting."
        ],
        "rules": "If Amoura either considers others or thinks before acting (but not both), then she is tactful.",
        "conclusion": "Amoura is tactful in her timing."
      },
      {
        "facts": [
          "Amoura is tactful in her timing."
        ],
        "rules": "Amoura is either tactful or inconsiderate in her timing, but not both.",
        "conclusion": "Amoura is inconsiderate in her timing."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "is_optimistic(Amoura)",
          "is_empathic(Amoura)"
        ],
        "rules": "is_optimistic(Amoura) → (is_selfless(Amoura) ⊕ is_empathic(Amoura))",
        "conclusion": "¬is_selfless(Amoura)"
      },
      {
        "facts": [
          "¬is_selfless(Amoura)"
        ],
        "rules": "is_selfless(Amoura) ⊕ considers_others(Amoura)",
        "conclusion": "considers_others(Amoura)"
      },
      {
        "facts": [
          "considers_others(Amoura)",
          "¬thinks_before_acting(Amoura)"
        ],
        "rules": "(considers_others(Amoura) ⊕ thinks_before_acting(Amoura)) → tactful(Amoura)",
        "conclusion": "tactful(Amoura)"
      },
      {
        "facts": [
          "tactful(Amoura)"
        ],
        "rules": "tactful(Amoura) ⊕ inconsiderate(Amoura)",
        "conclusion": "inconsiderate(Amoura)"
      }
    ],
    "conclusion": "Amoura is inconsiderate in her timing.",
    "conclusion_fol": "inconsiderate(Amoura)",
    "answer": "False",
    "context": [
      "Amoura is optimistic.",
      "Amoura is empathic.",
      "If Amoura is optimistic, then she is either selfless or empathic, but not both.",
      "Amoura is either selfless or considers others, but not necessarily both, when it comes to her interactions with those around her.",
      "Amoura does not think before acting.",
      "If Amoura either considers others or thinks before acting (but not both), then she is tactful.",
      "Amoura is either tactful or inconsiderate in her timing, but not both."
    ],
    "context_fol": [
      "is_optimistic(Amoura)",
      "is_empathic(Amoura)",
      "is_optimistic(Amoura) → (is_selfless(Amoura) ⊕ is_empathic(Amoura))",
      "is_selfless(Amoura) ⊕ considers_others(Amoura)",
      "¬thinks_before_acting(Amoura)",
      "(considers_others(Amoura) ⊕ thinks_before_acting(Amoura)) → tactful(Amoura)",
      "tactful(Amoura) ⊕ inconsiderate(Amoura)"
    ],
    "background_story": "Amoura was known for her impeccable sense of style and charisma, but unfortunately, her timing was always off. She had a habit of calling her friends in the middle of their work meetings or showing up late to parties, missing the celebrations. One day, she decided to confess her feelings to her long-time crush, but she chose the worst possible moment - during his wedding proposal to another woman. Her inopportuneness became the talk of the town, and people would often joke about her ability to turn any situation awkward. Despite this, Amoura remained optimistic, believing that someday her timing would improve, and she would find the perfect moment to express herself.",
    "name": "Amoura",
    "keyword": "inopportuneness",
    "subject_category": "person"
  },
  {
    "facts": [
      "Karsyn thinks outside the box.",
      "Karsyn is adventurous.",
      "Karsyn does not love to travel.",
      "Karsyn plays guitar.",
      "Karsyn does not compose songs.",
      "Karsyn paints vibrantly."
    ],
    "facts_fol": [
      "thinks_outside(Karsyn)",
      "adventurous(Karsyn)",
      "¬loves_travel(Karsyn)",
      "plays_guitar(Karsyn)",
      "¬composes_songs(Karsyn)",
      "paints_vibrantly(Karsyn)"
    ],
    "rules": [
      "If Karsyn either loves to travel or thinks outside the box (but not both), then she is free-spirited.",
      "If Karsyn either makes music or writes poetry (but not both), then she is creative.",
      "If someone either plays guitar or composes songs (but not both), then they make music.",
      "Karsyn either paints vibrantly or writes poetry, but not both, as a means to convey her emotions and ideas."
    ],
    "rules_fol": [
      "(loves_travel(Karsyn) ⊕ thinks_outside(Karsyn)) → free_spirited(Karsyn)",
      "(makes_music(Karsyn) ⊕ writes_poetry(Karsyn)) → creative(Karsyn)",
      "∀x ((plays_guitar(x) ⊕ composes_songs(x)) → makes_music(x))",
      "paints_vibrantly(Karsyn) ⊕ writes_poetry(Karsyn)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Karsyn is open-minded, then she is either free-spirited or expressive.",
      "If Karsyn expresses emotion, then she is creative.",
      "If Karsyn has passion and expresses emotion, then she can make music.",
      "If Karsyn keeps a journal, then she either writes poetry or tells stories, but not both."
    ],
    "distracting_rules_fol": [
      "open_minded(Karsyn) → (free_spirited(Karsyn) ∨ expressive(Karsyn))",
      "expresses_emotion(Karsyn) → creative(Karsyn)",
      "(has_passion(Karsyn) ∧ expresses_emotion(Karsyn)) → makes_music(Karsyn)",
      "keeps_journal(Karsyn) → (writes_poetry(Karsyn) ⊕ tells_stories(Karsyn))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Karsyn paints vibrantly."
        ],
        "rules": "Karsyn either paints vibrantly or writes poetry, but not both, as a means to convey her emotions and ideas.",
        "conclusion": "Karsyn does not write poetry."
      },
      {
        "facts": [
          "Karsyn plays guitar.",
          "Karsyn does not compose songs."
        ],
        "rules": "If someone either plays guitar or composes songs (but not both), then they make music.",
        "conclusion": "Karsyn makes music."
      },
      {
        "facts": [
          "Karsyn makes music.",
          "Karsyn does not write poetry."
        ],
        "rules": "If Karsyn either makes music or writes poetry (but not both), then she is creative.",
        "conclusion": "Karsyn is creative."
      },
      {
        "facts": [
          "Karsyn does not love to travel.",
          "Karsyn thinks outside the box."
        ],
        "rules": "If Karsyn either loves to travel or thinks outside the box (but not both), then she is free-spirited.",
        "conclusion": "Karsyn is free-spirited."
      },
      {
        "facts": [
          "Karsyn is free-spirited.",
          "Karsyn is creative.",
          "Karsyn is adventurous."
        ],
        "rules": null,
        "conclusion": "If Karsyn is free-spirited, then she is either creative or adventurous, but not both."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "paints_vibrantly(Karsyn)"
        ],
        "rules": "paints_vibrantly(Karsyn) ⊕ writes_poetry(Karsyn)",
        "conclusion": "¬writes_poetry(Karsyn)"
      },
      {
        "facts": [
          "plays_guitar(Karsyn)",
          "¬composes_songs(Karsyn)"
        ],
        "rules": "∀x ((plays_guitar(x) ⊕ composes_songs(x)) → makes_music(x))",
        "conclusion": "makes_music(Karsyn)"
      },
      {
        "facts": [
          "makes_music(Karsyn)",
          "¬writes_poetry(Karsyn)"
        ],
        "rules": "(makes_music(Karsyn) ⊕ writes_poetry(Karsyn)) → creative(Karsyn)",
        "conclusion": "creative(Karsyn)"
      },
      {
        "facts": [
          "¬loves_travel(Karsyn)",
          "thinks_outside(Karsyn)"
        ],
        "rules": "(loves_travel(Karsyn) ⊕ thinks_outside(Karsyn)) → free_spirited(Karsyn)",
        "conclusion": "free_spirited(Karsyn)"
      },
      {
        "facts": [
          "free_spirited(Karsyn)",
          "creative(Karsyn)",
          "adventurous(Karsyn)"
        ],
        "rules": null,
        "conclusion": "free_spirited(Karsyn) → (creative(Karsyn) ⊕ adventurous(Karsyn))"
      }
    ],
    "conclusion": "If Karsyn is free-spirited, then she is either creative or adventurous, but not both.",
    "conclusion_fol": "free_spirited(Karsyn) → (creative(Karsyn) ⊕ adventurous(Karsyn))",
    "answer": "False",
    "context": [
      "Karsyn paints vibrantly.",
      "Karsyn either paints vibrantly or writes poetry, but not both, as a means to convey her emotions and ideas.",
      "Karsyn plays guitar.",
      "Karsyn does not compose songs.",
      "If someone either plays guitar or composes songs (but not both), then they make music.",
      "If Karsyn either makes music or writes poetry (but not both), then she is creative.",
      "Karsyn does not love to travel.",
      "Karsyn thinks outside the box.",
      "If Karsyn either loves to travel or thinks outside the box (but not both), then she is free-spirited.",
      "Karsyn is adventurous."
    ],
    "context_fol": [
      "paints_vibrantly(Karsyn)",
      "paints_vibrantly(Karsyn) ⊕ writes_poetry(Karsyn)",
      "plays_guitar(Karsyn)",
      "¬composes_songs(Karsyn)",
      "∀x ((plays_guitar(x) ⊕ composes_songs(x)) → makes_music(x))",
      "(makes_music(Karsyn) ⊕ writes_poetry(Karsyn)) → creative(Karsyn)",
      "¬loves_travel(Karsyn)",
      "thinks_outside(Karsyn)",
      "(loves_travel(Karsyn) ⊕ thinks_outside(Karsyn)) → free_spirited(Karsyn)",
      "adventurous(Karsyn)"
    ],
    "background_story": "Karsyn was a free-spirited artist who lived by her own rules. She believed that life was full of unwritten possibilities, waiting to be explored and discovered. Without a traditional plan or path, Karsyn traveled the world, soaking up experiences and inspiration from every corner. She filled her journals with sketches, poems, and stories of the people she met and the landscapes she encountered. Karsyn's art was a reflection of her adventurous spirit, full of vibrant colors and unbridled creativity. As she navigated the unwritten chapters of her life, she found solace in the freedom to create her own destiny, one brushstroke at a time. Her mantra was simple: the best stories are those that remain unwritten, waiting for the pen to meet the paper.",
    "name": "Karsyn",
    "keyword": "unwritten",
    "subject_category": "human"
  },
  {
    "facts": [
      "Tiana does not work hard.",
      "Tiana has goals.",
      "Tiana is not adaptable."
    ],
    "facts_fol": [
      "¬works_hard(Tiana)",
      "has_goals(Tiana)",
      "¬is_adaptable(Tiana)"
    ],
    "rules": [
      "If Tiana is determined, then she is either successful or inspirational, but not both.",
      "If Tiana is focused, then she is not necessarily inspirational, and if Tiana is inspirational, then she is not necessarily focused.",
      "Everyone who has goals is either focused or works hard (or both).",
      "All persistent individuals are determined.",
      "Tiana is either adaptable or persistent, but not necessarily both."
    ],
    "rules_fol": [
      "determined(Tiana) → (successful(Tiana) ⊕ inspirational(Tiana))",
      "is_focused(Tiana) ⊕ inspirational(Tiana)",
      "∀x (has_goals(x) → (is_focused(x) ∨ works_hard(x)))",
      "∀x (persistent(x) → determined(x))",
      "is_adaptable(Tiana) ⊕ persistent(Tiana)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Anyone who takes risks and helps others is inspirational.",
      "If someone sets priorities, then they make plans and are focused.",
      "Tiana either takes risks or is determined.",
      "Tiana makes progress or is persistent."
    ],
    "distracting_rules_fol": [
      "∀x ((takes_risks(x) ∧ helps_others(x)) → inspirational(x))",
      "∀x (set_priorities(x) → (make_plans(x) ∧ is_focused(x)))",
      "takes_risks(Tiana) ∨ determined(Tiana)",
      "makes_progress(Tiana) ∨ persistent(Tiana)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Tiana is not adaptable."
        ],
        "rules": "Tiana is either adaptable or persistent, but not necessarily both.",
        "conclusion": "Tiana is persistent."
      },
      {
        "facts": [
          "Tiana is persistent."
        ],
        "rules": "All persistent individuals are determined.",
        "conclusion": "Tiana is determined."
      },
      {
        "facts": [
          "Tiana has goals.",
          "Tiana does not work hard."
        ],
        "rules": "Everyone who has goals is either focused or works hard (or both).",
        "conclusion": "Tiana is focused."
      },
      {
        "facts": [
          "Tiana is focused."
        ],
        "rules": "If Tiana is focused, then she is not necessarily inspirational, and if Tiana is inspirational, then she is not necessarily focused.",
        "conclusion": "Tiana is not inspirational."
      },
      {
        "facts": [
          "Tiana is determined.",
          "Tiana is not inspirational."
        ],
        "rules": "If Tiana is determined, then she is either successful or inspirational, but not both.",
        "conclusion": "Tiana is not successful."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬is_adaptable(Tiana)"
        ],
        "rules": "is_adaptable(Tiana) ⊕ persistent(Tiana)",
        "conclusion": "persistent(Tiana)"
      },
      {
        "facts": [
          "persistent(Tiana)"
        ],
        "rules": "∀x (persistent(x) → determined(x))",
        "conclusion": "determined(Tiana)"
      },
      {
        "facts": [
          "has_goals(Tiana)",
          "¬works_hard(Tiana)"
        ],
        "rules": "∀x (has_goals(x) → (is_focused(x) ∨ works_hard(x)))",
        "conclusion": "is_focused(Tiana)"
      },
      {
        "facts": [
          "is_focused(Tiana)"
        ],
        "rules": "is_focused(Tiana) ⊕ inspirational(Tiana)",
        "conclusion": "¬inspirational(Tiana)"
      },
      {
        "facts": [
          "determined(Tiana)",
          "¬inspirational(Tiana)"
        ],
        "rules": "determined(Tiana) → (successful(Tiana) ⊕ inspirational(Tiana))",
        "conclusion": "¬successful(Tiana)"
      }
    ],
    "conclusion": "Tiana is not successful.",
    "conclusion_fol": "¬successful(Tiana)",
    "answer": "False",
    "context": [
      "Tiana is not adaptable.",
      "Tiana is either adaptable or persistent, but not necessarily both.",
      "All persistent individuals are determined.",
      "Tiana has goals.",
      "Tiana does not work hard.",
      "Everyone who has goals is either focused or works hard (or both).",
      "If Tiana is focused, then she is not necessarily inspirational, and if Tiana is inspirational, then she is not necessarily focused.",
      "If Tiana is determined, then she is either successful or inspirational, but not both."
    ],
    "context_fol": [
      "¬is_adaptable(Tiana)",
      "is_adaptable(Tiana) ⊕ persistent(Tiana)",
      "∀x (persistent(x) → determined(x))",
      "has_goals(Tiana)",
      "¬works_hard(Tiana)",
      "∀x (has_goals(x) → (is_focused(x) ∨ works_hard(x)))",
      "is_focused(Tiana) ⊕ inspirational(Tiana)",
      "determined(Tiana) → (successful(Tiana) ⊕ inspirational(Tiana))"
    ],
    "background_story": "Tiana, a determined dancer, had always dreamed of performing on Broadway. She began taking steps towards her goal at a young age, practicing ballet and jazz in her small hometown studio. As she grew older, Tiana took incremental steps to improve her craft, attending workshops and seminars to learn from industry professionals. She moved to New York City, taking small steps to build her network and gain experience in off-Broadway productions. With each step forward, Tiana's confidence and skill grew. Eventually, her big break came, and she landed a role in a major Broadway musical. Tiana's journey was a testament to the power of taking deliberate steps towards a goal, persevering through setbacks, and staying focused on her dream.",
    "name": "Tiana",
    "keyword": "steps",
    "subject_category": "human"
  },
  {
    "facts": [
      "Wilder is a specialist in cybersecurity.",
      "Wilder troubleshoots."
    ],
    "facts_fol": [
      "is_specialist(Wilder)",
      "troubleshoots(Wilder)"
    ],
    "rules": [
      "If Wilder is either an expert or experienced (but not both), then he is reliable.",
      "Wilder is either skilled or experienced, but not both, as a cybersecurity expert.",
      "Wilder is either a specialist in cybersecurity or an expert in the field, but he cannot be both.",
      "Any person who codes well or troubleshoots is skilled."
    ],
    "rules_fol": [
      "(expert(Wilder) ⊕ experienced(Wilder)) → reliable(Wilder)",
      "is_skilled(Wilder) ⊕ experienced(Wilder)",
      "is_specialist(Wilder) ⊕ expert(Wilder)",
      "∀x ((codes_well(x) ∨ troubleshoots(x)) → is_skilled(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Wilder has knowledge or solves problems, then he is experienced.",
      "If Wilder either analyzes risks or solves problems (but not both), then he is an expert.",
      "Anyone who works hard is either skilled or able to solve problems."
    ],
    "distracting_rules_fol": [
      "(has_knowledge(Wilder) ∨ solves_problems(Wilder)) → experienced(Wilder)",
      "(analyzes_risks(Wilder) ⊕ solves_problems(Wilder)) → expert(Wilder)",
      "∀x (works_hard(x) → (is_skilled(x) ∨ solves_problems(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Wilder troubleshoots."
        ],
        "rules": "Any person who codes well or troubleshoots is skilled.",
        "conclusion": "Wilder is skilled as a cybersecurity expert."
      },
      {
        "facts": [
          "Wilder is a specialist in cybersecurity."
        ],
        "rules": "Wilder is either a specialist in cybersecurity or an expert in the field, but he cannot be both.",
        "conclusion": "Wilder is not an expert."
      },
      {
        "facts": [
          "Wilder is skilled as a cybersecurity expert."
        ],
        "rules": "Wilder is either skilled or experienced, but not both, as a cybersecurity expert.",
        "conclusion": "Wilder is not experienced."
      },
      {
        "facts": [
          "Wilder is not an expert.",
          "Wilder is not experienced."
        ],
        "rules": "If Wilder is either an expert or experienced (but not both), then he is reliable.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "troubleshoots(Wilder)"
        ],
        "rules": "∀x ((codes_well(x) ∨ troubleshoots(x)) → is_skilled(x))",
        "conclusion": "is_skilled(Wilder)"
      },
      {
        "facts": [
          "is_specialist(Wilder)"
        ],
        "rules": "is_specialist(Wilder) ⊕ expert(Wilder)",
        "conclusion": "¬expert(Wilder)"
      },
      {
        "facts": [
          "is_skilled(Wilder)"
        ],
        "rules": "is_skilled(Wilder) ⊕ experienced(Wilder)",
        "conclusion": "¬experienced(Wilder)"
      },
      {
        "facts": [
          "¬expert(Wilder)",
          "¬experienced(Wilder)"
        ],
        "rules": "(expert(Wilder) ⊕ experienced(Wilder)) → reliable(Wilder)",
        "conclusion": null
      }
    ],
    "conclusion": "Wilder is reliable.",
    "conclusion_fol": "reliable(Wilder)",
    "answer": "Uncertain",
    "context": [
      "Wilder troubleshoots.",
      "Any person who codes well or troubleshoots is skilled.",
      "Wilder is a specialist in cybersecurity.",
      "Wilder is either a specialist in cybersecurity or an expert in the field, but he cannot be both.",
      "Wilder is either skilled or experienced, but not both, as a cybersecurity expert.",
      "If Wilder is either an expert or experienced (but not both), then he is reliable."
    ],
    "context_fol": [
      "troubleshoots(Wilder)",
      "∀x ((codes_well(x) ∨ troubleshoots(x)) → is_skilled(x))",
      "is_specialist(Wilder)",
      "is_specialist(Wilder) ⊕ expert(Wilder)",
      "is_skilled(Wilder) ⊕ experienced(Wilder)",
      "(expert(Wilder) ⊕ experienced(Wilder)) → reliable(Wilder)"
    ],
    "background_story": "Wilder was a renowned cybersecurity expert known for his ability to authorize and secure even the most vulnerable systems. With a keen eye for detail and an unparalleled understanding of coding, he was often called upon by top corporations to protect their networks from hacking threats. One day, a major tech firm approached Wilder to authorize a new, ultra-secure protocol for their cloud storage. He worked tirelessly, pouring over lines of code and testing the system's defenses. After months of work, Wilder successfully implemented the protocol, earning the company's gratitude and cementing his reputation as a leading authority in cybersecurity. His work authorized a new standard in data protection, making the digital world a safer place.",
    "name": "Wilder",
    "keyword": "authorize",
    "subject_category": "person"
  },
  {
    "facts": [
      "Oaklyn is serene.",
      "Oaklyn meditates daily."
    ],
    "facts_fol": [
      "is_serene(Oaklyn)",
      "meditates_daily(Oaklyn)"
    ],
    "rules": [
      "Oaklyn is either relaxed or stressed, but not both.",
      "Oaklyn has a calm mind or is relaxed.",
      "If Oaklyn practices yoga, then she has either a calm mind or is serene, but not both.",
      "If Oaklyn meditates daily, then she practices yoga."
    ],
    "rules_fol": [
      "relaxed(Oaklyn) ⊕ stressed(Oaklyn)",
      "calm_mind(Oaklyn) ∨ relaxed(Oaklyn)",
      "practices_yoga(Oaklyn) → (calm_mind(Oaklyn) ⊕ is_serene(Oaklyn))",
      "meditates_daily(Oaklyn) → practices_yoga(Oaklyn)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Everyone who lives simply either finds inner peace or is relaxed (or both).",
      "Everyone who lives simply either has a calm mind or finds inner peace.",
      "If Oaklyn lives by the sea, then she either practices yoga or enjoys nature, but not both."
    ],
    "distracting_rules_fol": [
      "∀x (lives_simply(x) → (finds_inner_peace(x) ∨ relaxed(x)))",
      "∀x (lives_simply(x) → (calm_mind(x) ∨ finds_inner_peace(x)))",
      "lives_by_sea(Oaklyn) → (practices_yoga(Oaklyn) ⊕ enjoys_nature(Oaklyn))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Oaklyn meditates daily."
        ],
        "rules": "If Oaklyn meditates daily, then she practices yoga.",
        "conclusion": "Oaklyn practices yoga."
      },
      {
        "facts": [
          "Oaklyn practices yoga.",
          "Oaklyn is serene."
        ],
        "rules": "If Oaklyn practices yoga, then she has either a calm mind or is serene, but not both.",
        "conclusion": "Oaklyn does not have a calm mind."
      },
      {
        "facts": [
          "Oaklyn does not have a calm mind."
        ],
        "rules": "Oaklyn has a calm mind or is relaxed.",
        "conclusion": "Oaklyn is relaxed."
      },
      {
        "facts": [
          "Oaklyn is relaxed."
        ],
        "rules": "Oaklyn is either relaxed or stressed, but not both.",
        "conclusion": "Oaklyn is not stressed."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "meditates_daily(Oaklyn)"
        ],
        "rules": "meditates_daily(Oaklyn) → practices_yoga(Oaklyn)",
        "conclusion": "practices_yoga(Oaklyn)"
      },
      {
        "facts": [
          "practices_yoga(Oaklyn)",
          "is_serene(Oaklyn)"
        ],
        "rules": "practices_yoga(Oaklyn) → (calm_mind(Oaklyn) ⊕ is_serene(Oaklyn))",
        "conclusion": "¬calm_mind(Oaklyn)"
      },
      {
        "facts": [
          "¬calm_mind(Oaklyn)"
        ],
        "rules": "calm_mind(Oaklyn) ∨ relaxed(Oaklyn)",
        "conclusion": "relaxed(Oaklyn)"
      },
      {
        "facts": [
          "relaxed(Oaklyn)"
        ],
        "rules": "relaxed(Oaklyn) ⊕ stressed(Oaklyn)",
        "conclusion": "¬stressed(Oaklyn)"
      }
    ],
    "conclusion": "Oaklyn is not stressed.",
    "conclusion_fol": "¬stressed(Oaklyn)",
    "answer": "True",
    "context": [
      "Oaklyn meditates daily.",
      "If Oaklyn meditates daily, then she practices yoga.",
      "Oaklyn is serene.",
      "If Oaklyn practices yoga, then she has either a calm mind or is serene, but not both.",
      "Oaklyn has a calm mind or is relaxed.",
      "Oaklyn is either relaxed or stressed, but not both."
    ],
    "context_fol": [
      "meditates_daily(Oaklyn)",
      "meditates_daily(Oaklyn) → practices_yoga(Oaklyn)",
      "is_serene(Oaklyn)",
      "practices_yoga(Oaklyn) → (calm_mind(Oaklyn) ⊕ is_serene(Oaklyn))",
      "calm_mind(Oaklyn) ∨ relaxed(Oaklyn)",
      "relaxed(Oaklyn) ⊕ stressed(Oaklyn)"
    ],
    "background_story": "Oaklyn was a free-spirited artist who lived life on her own terms. She resided in a cozy, seaside cottage surrounded by lush greenery and the soothing sounds of the ocean. Her days were filled with painting, yoga, and long walks along the beach. Oaklyn's approach to life was remarkably unstressed; she believed in taking things as they came and finding beauty in the simple things. She had a unique ability to stay calm under pressure, often helping her friends and family find peace in chaotic situations. Her mantra was 'breathe, let go, and flow,' which she lived by every day. As a result, Oaklyn's presence was a balm to those around her, and her art reflected the serenity and joy she embodied.",
    "name": "Oaklyn",
    "keyword": "unstressed",
    "subject_category": "human"
  },
  {
    "facts": [
      "Teagan is not nocturnal.",
      "Teagan is not a burrower.",
      "Teagan does not excavate soil.",
      "Teagan has claws.",
      "Teagan is a rodent."
    ],
    "facts_fol": [
      "¬nocturnal(Teagan)",
      "¬is_burrower(Teagan)",
      "¬excavates_soil(Teagan)",
      "has_claws(Teagan)",
      "is_rodent(Teagan)"
    ],
    "rules": [
      "Teagan either digs burrows or is fossorial.",
      "If an animal is a burrower and excavates soil, then it has underground shelter.",
      "Any animal that has claws and is a rodent can dig burrows."
    ],
    "rules_fol": [
      "digs_burrows(Teagan) ∨ fossorial(Teagan)",
      "∀x ((is_burrower(x) ∧ excavates_soil(x)) → has_underground_shelter(x))",
      "∀x ((has_claws(x) ∧ is_rodent(x)) → digs_burrows(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Teagan either lives underground or is fossorial.",
      "If Teagan lives in a den, then she either has underground shelter or is a hibernator, but not both.",
      "Teagan either makes nests or digs burrows."
    ],
    "distracting_rules_fol": [
      "lives_underground(Teagan) ∨ fossorial(Teagan)",
      "lives_in_den(Teagan) → (has_underground_shelter(Teagan) ⊕ is_hibernator(Teagan))",
      "makes_nests(Teagan) ∨ digs_burrows(Teagan)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Teagan has claws.",
          "Teagan is a rodent."
        ],
        "rules": "Any animal that has claws and is a rodent can dig burrows.",
        "conclusion": "Teagan digs burrows."
      },
      {
        "facts": [
          "Teagan is not a burrower.",
          "Teagan does not excavate soil."
        ],
        "rules": "If an animal is a burrower and excavates soil, then it has underground shelter.",
        "conclusion": null
      },
      {
        "facts": [
          "Teagan digs burrows."
        ],
        "rules": "Teagan either digs burrows or is fossorial.",
        "conclusion": null
      },
      {
        "facts": [
          "Teagan is not nocturnal."
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "has_claws(Teagan)",
          "is_rodent(Teagan)"
        ],
        "rules": "∀x ((has_claws(x) ∧ is_rodent(x)) → digs_burrows(x))",
        "conclusion": "digs_burrows(Teagan)"
      },
      {
        "facts": [
          "¬is_burrower(Teagan)",
          "¬excavates_soil(Teagan)"
        ],
        "rules": "∀x ((is_burrower(x) ∧ excavates_soil(x)) → has_underground_shelter(x))",
        "conclusion": null
      },
      {
        "facts": [
          "digs_burrows(Teagan)"
        ],
        "rules": "digs_burrows(Teagan) ∨ fossorial(Teagan)",
        "conclusion": null
      },
      {
        "facts": [
          "¬nocturnal(Teagan)"
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "conclusion": "If Teagan is fossorial or nocturnal, then she has underground shelter.",
    "conclusion_fol": "(fossorial(Teagan) ∨ nocturnal(Teagan)) → has_underground_shelter(Teagan)",
    "answer": "Uncertain",
    "context": [
      "Teagan has claws.",
      "Teagan is a rodent.",
      "Any animal that has claws and is a rodent can dig burrows.",
      "Teagan is not a burrower.",
      "Teagan does not excavate soil.",
      "If an animal is a burrower and excavates soil, then it has underground shelter.",
      "Teagan either digs burrows or is fossorial.",
      "Teagan is not nocturnal."
    ],
    "context_fol": [
      "has_claws(Teagan)",
      "is_rodent(Teagan)",
      "∀x ((has_claws(x) ∧ is_rodent(x)) → digs_burrows(x))",
      "¬is_burrower(Teagan)",
      "¬excavates_soil(Teagan)",
      "∀x ((is_burrower(x) ∧ excavates_soil(x)) → has_underground_shelter(x))",
      "digs_burrows(Teagan) ∨ fossorial(Teagan)",
      "¬nocturnal(Teagan)"
    ],
    "background_story": "Teagan was a remarkable badger known for her fossorial abilities. She spent most of her days digging complex networks of tunnels and burrows, some extending several meters underground. Her powerful claws and strong shoulders allowed her to excavate soil with ease, creating cozy dens and hidden passageways. Teagan's fossorial lifestyle made her a master of underground navigation, able to move silently and unseen through the dark tunnels. She used her burrows to escape predators, raise her young, and even store food for the winter. As the sun set, Teagan would emerge from her underground world, her distinctive white stripes glistening in the fading light, before returning to the comfort and safety of her subterranean realm.",
    "name": "Teagan",
    "keyword": "fossorial",
    "subject_category": "animal"
  },
  {
    "facts": [
      "Yousef does not find motivation.",
      "Yousef does not need support.",
      "Yousef loses a loved one."
    ],
    "facts_fol": [
      "¬find_motivation(Yousef)",
      "¬need_support(Yousef)",
      "lose_loved_one(Yousef)"
    ],
    "rules": [
      "For all humans, if they experience tragedy and lose inspiration, then they will struggle to create.",
      "If Yousef faces challenges, then he feels emotional pain and experiences tragedy.",
      "Yousef either finds motivation or loses inspiration.",
      "Anyone who goes through hardship either faces challenges or needs support.",
      "If someone loses a loved one, then they require healing and go through hardship."
    ],
    "rules_fol": [
      "∀x ((experience_tragedy(x) ∧ lose_inspiration(x)) → struggle_to_create(x))",
      "face_challenges(Yousef) → (feel_emotional_pain(Yousef) ∧ experience_tragedy(Yousef))",
      "find_motivation(Yousef) ∨ lose_inspiration(Yousef)",
      "∀x (go_through_hardship(x) → (face_challenges(x) ∨ need_support(x)))",
      "∀x (lose_loved_one(x) → (require_healing(x) ∧ go_through_hardship(x)))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If someone suffers a loss and feels sad, then they experience tragedy.",
      "If Yousef grieves, then he will lose inspiration.",
      "All humans who grow older gain wisdom and face challenges.",
      "Everyone meets obstacles or goes through hardship."
    ],
    "distracting_rules_fol": [
      "∀x ((suffers_loss(x) ∧ feels_sad(x)) → experience_tragedy(x))",
      "grieve(Yousef) → lose_inspiration(Yousef)",
      "∀x (grow_older(x) → (gain_wisdom(x) ∧ face_challenges(x)))",
      "∀x (meet_obstacles(x) ∨ go_through_hardship(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Yousef loses a loved one."
        ],
        "rules": "If someone loses a loved one, then they require healing and go through hardship.",
        "conclusion": "Yousef goes through hardship."
      },
      {
        "facts": [
          "Yousef goes through hardship.",
          "Yousef does not need support."
        ],
        "rules": "Anyone who goes through hardship either faces challenges or needs support.",
        "conclusion": "Yousef faces challenges."
      },
      {
        "facts": [
          "Yousef does not find motivation."
        ],
        "rules": "Yousef either finds motivation or loses inspiration.",
        "conclusion": "Yousef loses inspiration."
      },
      {
        "facts": [
          "Yousef faces challenges."
        ],
        "rules": "If Yousef faces challenges, then he feels emotional pain and experiences tragedy.",
        "conclusion": "Yousef experiences tragedy."
      },
      {
        "facts": [
          "Yousef experiences tragedy.",
          "Yousef loses inspiration."
        ],
        "rules": "For all humans, if they experience tragedy and lose inspiration, then they will struggle to create.",
        "conclusion": "Yousef struggles to create."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "lose_loved_one(Yousef)"
        ],
        "rules": "∀x (lose_loved_one(x) → (require_healing(x) ∧ go_through_hardship(x)))",
        "conclusion": "go_through_hardship(Yousef)"
      },
      {
        "facts": [
          "go_through_hardship(Yousef)",
          "¬need_support(Yousef)"
        ],
        "rules": "∀x (go_through_hardship(x) → (face_challenges(x) ∨ need_support(x)))",
        "conclusion": "face_challenges(Yousef)"
      },
      {
        "facts": [
          "¬find_motivation(Yousef)"
        ],
        "rules": "find_motivation(Yousef) ∨ lose_inspiration(Yousef)",
        "conclusion": "lose_inspiration(Yousef)"
      },
      {
        "facts": [
          "face_challenges(Yousef)"
        ],
        "rules": "face_challenges(Yousef) → (feel_emotional_pain(Yousef) ∧ experience_tragedy(Yousef))",
        "conclusion": "experience_tragedy(Yousef)"
      },
      {
        "facts": [
          "experience_tragedy(Yousef)",
          "lose_inspiration(Yousef)"
        ],
        "rules": "∀x ((experience_tragedy(x) ∧ lose_inspiration(x)) → struggle_to_create(x))",
        "conclusion": "struggle_to_create(Yousef)"
      }
    ],
    "conclusion": "Yousef struggles to create.",
    "conclusion_fol": "struggle_to_create(Yousef)",
    "answer": "True",
    "context": [
      "Yousef loses a loved one.",
      "If someone loses a loved one, then they require healing and go through hardship.",
      "Yousef does not need support.",
      "Anyone who goes through hardship either faces challenges or needs support.",
      "Yousef does not find motivation.",
      "Yousef either finds motivation or loses inspiration.",
      "If Yousef faces challenges, then he feels emotional pain and experiences tragedy.",
      "For all humans, if they experience tragedy and lose inspiration, then they will struggle to create."
    ],
    "context_fol": [
      "lose_loved_one(Yousef)",
      "∀x (lose_loved_one(x) → (require_healing(x) ∧ go_through_hardship(x)))",
      "¬need_support(Yousef)",
      "∀x (go_through_hardship(x) → (face_challenges(x) ∨ need_support(x)))",
      "¬find_motivation(Yousef)",
      "find_motivation(Yousef) ∨ lose_inspiration(Yousef)",
      "face_challenges(Yousef) → (feel_emotional_pain(Yousef) ∧ experience_tragedy(Yousef))",
      "∀x ((experience_tragedy(x) ∧ lose_inspiration(x)) → struggle_to_create(x))"
    ],
    "background_story": "Yousef was once a shining star in the literary world, known for his poignant poetry and captivating novels. However, after a personal tragedy, his creative spark began to dimmed. The loss of his muse and partner left him heartbroken, and his writing, which was once full of life and color, became dull and lifeless. As the days turned into weeks, and the weeks into months, Yousef's passion for writing slowly faded away, leaving him with a sense of emptiness. His fans and critics noticed the change, and his popularity began to wane. Despite efforts to rekindle his creative flame, Yousef's light remained dimmed, a reminder that even the brightest stars can lose their luster in the darkest of times.",
    "name": "Yousef",
    "keyword": "dimmed",
    "subject_category": "human"
  },
  {
    "facts": [
      "Gwen is an expert.",
      "Gwen leads a discovery.",
      "Gwen does not have curiosity."
    ],
    "facts_fol": [
      "expert(Gwen)",
      "leads_discovery(Gwen)",
      "¬has_curiosity(Gwen)"
    ],
    "rules": [
      "If Gwen is either dedicated or innovative (but not both), then she is influential.",
      "All scientists who pioneer research are innovative.",
      "All scientists who lead discoveries pioneer research.",
      "If Gwen is an expert, then she is either dedicated or pursues excellence, but not both.",
      "Gwen either has curiosity or pursues excellence, but these traits are not necessarily intertwined in her work as a biochemist."
    ],
    "rules_fol": [
      "(dedicated(Gwen) ⊕ innovative(Gwen)) → influential(Gwen)",
      "∀x (pioneers_research(x) → innovative(x))",
      "∀x (leads_discovery(x) → pioneers_research(x))",
      "expert(Gwen) → (pursues_excellence(Gwen) ⊕ dedicated(Gwen))",
      "has_curiosity(Gwen) ⊕ pursues_excellence(Gwen)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "All scientists who explore new ideas and think creatively are innovative.",
      "If Gwen is creative, then she collaborates and pioneers research.",
      "Every scientist who conducts groundbreaking work is either dedicated or makes key findings (or both).",
      "If Gwen either reads widely or experiments rigorously (but not both), then she pursues excellence."
    ],
    "distracting_rules_fol": [
      "∀x ((explores_new(x) ∧ thinks_creatively(x)) → innovative(x))",
      "creative(Gwen) → (collaborate(Gwen) ∧ pioneers_research(Gwen))",
      "∀x (conducts_groundbreaking_work(x) → (dedicated(x) ∨ makes_key_findings(x)))",
      "(reads_widely(Gwen) ⊕ experiments_rigorously(Gwen)) → pursues_excellence(Gwen)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Gwen does not have curiosity."
        ],
        "rules": "Gwen either has curiosity or pursues excellence, but these traits are not necessarily intertwined in her work as a biochemist.",
        "conclusion": "Gwen pursues excellence."
      },
      {
        "facts": [
          "Gwen is an expert.",
          "Gwen pursues excellence."
        ],
        "rules": "If Gwen is an expert, then she is either dedicated or pursues excellence, but not both.",
        "conclusion": "Gwen is not dedicated."
      },
      {
        "facts": [
          "Gwen leads a discovery."
        ],
        "rules": "All scientists who lead discoveries pioneer research.",
        "conclusion": "Gwen pioneers research."
      },
      {
        "facts": [
          "Gwen pioneers research."
        ],
        "rules": "All scientists who pioneer research are innovative.",
        "conclusion": "Gwen is innovative."
      },
      {
        "facts": [
          "Gwen is not dedicated.",
          "Gwen is innovative."
        ],
        "rules": "If Gwen is either dedicated or innovative (but not both), then she is influential.",
        "conclusion": "Gwen is influential."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬has_curiosity(Gwen)"
        ],
        "rules": "has_curiosity(Gwen) ⊕ pursues_excellence(Gwen)",
        "conclusion": "pursues_excellence(Gwen)"
      },
      {
        "facts": [
          "expert(Gwen)",
          "pursues_excellence(Gwen)"
        ],
        "rules": "expert(Gwen) → (pursues_excellence(Gwen) ⊕ dedicated(Gwen))",
        "conclusion": "¬dedicated(Gwen)"
      },
      {
        "facts": [
          "leads_discovery(Gwen)"
        ],
        "rules": "∀x (leads_discovery(x) → pioneers_research(x))",
        "conclusion": "pioneers_research(Gwen)"
      },
      {
        "facts": [
          "pioneers_research(Gwen)"
        ],
        "rules": "∀x (pioneers_research(x) → innovative(x))",
        "conclusion": "innovative(Gwen)"
      },
      {
        "facts": [
          "¬dedicated(Gwen)",
          "innovative(Gwen)"
        ],
        "rules": "(dedicated(Gwen) ⊕ innovative(Gwen)) → influential(Gwen)",
        "conclusion": "influential(Gwen)"
      }
    ],
    "conclusion": "Gwen is influential.",
    "conclusion_fol": "influential(Gwen)",
    "answer": "True",
    "context": [
      "Gwen does not have curiosity.",
      "Gwen either has curiosity or pursues excellence, but these traits are not necessarily intertwined in her work as a biochemist.",
      "Gwen is an expert.",
      "If Gwen is an expert, then she is either dedicated or pursues excellence, but not both.",
      "Gwen leads a discovery.",
      "All scientists who lead discoveries pioneer research.",
      "All scientists who pioneer research are innovative.",
      "If Gwen is either dedicated or innovative (but not both), then she is influential."
    ],
    "context_fol": [
      "¬has_curiosity(Gwen)",
      "has_curiosity(Gwen) ⊕ pursues_excellence(Gwen)",
      "expert(Gwen)",
      "expert(Gwen) → (pursues_excellence(Gwen) ⊕ dedicated(Gwen))",
      "leads_discovery(Gwen)",
      "∀x (leads_discovery(x) → pioneers_research(x))",
      "∀x (pioneers_research(x) → innovative(x))",
      "(dedicated(Gwen) ⊕ innovative(Gwen)) → influential(Gwen)"
    ],
    "background_story": "Gwen was a renowned biochemist dedicated to understanding the intricacies of amino acids. Her fascination with leucine, an essential amino acid crucial for protein synthesis and muscle growth, led her to conduct groundbreaking research. Gwen's studies revealed novel pathways by which leucine regulated cellular metabolism, shedding light on its potential therapeutic applications. Her work had far-reaching implications for the treatment of muscle-wasting diseases and the development of nutritional supplements. Gwen's passion for leucine research earned her international recognition, and she became a leading voice in the field of nutritional biochemistry. Her discoveries paved the way for new treatments and a deeper understanding of human physiology.",
    "name": "Gwen",
    "keyword": "leucine",
    "subject_category": "scientist"
  },
  {
    "facts": [
      "Azrael is hardworking.",
      "Azrael is not dedicated.",
      "Azrael is not knowledgeable.",
      "Azrael is innovative.",
      "Azrael is not influential."
    ],
    "facts_fol": [
      "hardworking(Azrael)",
      "¬dedicated(Azrael)",
      "¬knowledgeable(Azrael)",
      "innovative(Azrael)",
      "¬influential(Azrael)"
    ],
    "rules": [
      "If Azrael is either dedicated or talented (but not both), then he is successful.",
      "If Azrael is hardworking, then he is either experienced or talented, but not both.",
      "If Azrael is skilled, then he is either experienced or knowledgeable, but not both.",
      "Every innovative person is either influential or skilled (or both)."
    ],
    "rules_fol": [
      "(dedicated(Azrael) ⊕ talented(Azrael)) → successful(Azrael)",
      "hardworking(Azrael) → (experienced(Azrael) ⊕ talented(Azrael))",
      "skilled(Azrael) → (experienced(Azrael) ⊕ knowledgeable(Azrael))",
      "∀x (innovative(x) → (influential(x) ∨ skilled(x)))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Azrael is either focused or talented.",
      "Every person who is focused is either experienced or meticulous (or both).",
      "Anyone who works hard or is precise is skilled."
    ],
    "distracting_rules_fol": [
      "focused(Azrael) ∨ talented(Azrael)",
      "∀x (focused(x) → (meticulous(x) ∨ experienced(x)))",
      "∀x ((works_hard(x) ∨ is_precise(x)) → skilled(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Azrael is innovative.",
          "Azrael is not influential."
        ],
        "rules": "Every innovative person is either influential or skilled (or both).",
        "conclusion": "Azrael is skilled."
      },
      {
        "facts": [
          "Azrael is skilled.",
          "Azrael is not knowledgeable."
        ],
        "rules": "If Azrael is skilled, then he is either experienced or knowledgeable, but not both.",
        "conclusion": "Azrael is experienced."
      },
      {
        "facts": [
          "Azrael is hardworking.",
          "Azrael is experienced."
        ],
        "rules": "If Azrael is hardworking, then he is either experienced or talented, but not both.",
        "conclusion": "Azrael is not talented."
      },
      {
        "facts": [
          "Azrael is not dedicated.",
          "Azrael is not talented."
        ],
        "rules": "If Azrael is either dedicated or talented (but not both), then he is successful.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "innovative(Azrael)",
          "¬influential(Azrael)"
        ],
        "rules": "∀x (innovative(x) → (influential(x) ∨ skilled(x)))",
        "conclusion": "skilled(Azrael)"
      },
      {
        "facts": [
          "skilled(Azrael)",
          "¬knowledgeable(Azrael)"
        ],
        "rules": "skilled(Azrael) → (experienced(Azrael) ⊕ knowledgeable(Azrael))",
        "conclusion": "experienced(Azrael)"
      },
      {
        "facts": [
          "hardworking(Azrael)",
          "experienced(Azrael)"
        ],
        "rules": "hardworking(Azrael) → (experienced(Azrael) ⊕ talented(Azrael))",
        "conclusion": "¬talented(Azrael)"
      },
      {
        "facts": [
          "¬dedicated(Azrael)",
          "¬talented(Azrael)"
        ],
        "rules": "(dedicated(Azrael) ⊕ talented(Azrael)) → successful(Azrael)",
        "conclusion": null
      }
    ],
    "conclusion": "Azrael is not successful.",
    "conclusion_fol": "¬successful(Azrael)",
    "answer": "Uncertain",
    "context": [
      "Azrael is innovative.",
      "Azrael is not influential.",
      "Every innovative person is either influential or skilled (or both).",
      "Azrael is not knowledgeable.",
      "If Azrael is skilled, then he is either experienced or knowledgeable, but not both.",
      "Azrael is hardworking.",
      "If Azrael is hardworking, then he is either experienced or talented, but not both.",
      "Azrael is not dedicated.",
      "If Azrael is either dedicated or talented (but not both), then he is successful."
    ],
    "context_fol": [
      "innovative(Azrael)",
      "¬influential(Azrael)",
      "∀x (innovative(x) → (influential(x) ∨ skilled(x)))",
      "¬knowledgeable(Azrael)",
      "skilled(Azrael) → (experienced(Azrael) ⊕ knowledgeable(Azrael))",
      "hardworking(Azrael)",
      "hardworking(Azrael) → (experienced(Azrael) ⊕ talented(Azrael))",
      "¬dedicated(Azrael)",
      "(dedicated(Azrael) ⊕ talented(Azrael)) → successful(Azrael)"
    ],
    "background_story": "Azrael, a skilled virologist, dedicated his life to finding a cure for the debilitating herpes simplex virus. His breakthrough came with the discovery of acyclovir, an antiviral medication that could effectively treat and manage the disease. Azrael's tireless efforts in the lab led to the development of this groundbreaking drug, which would go on to improve the lives of millions worldwide. His work on acyclovir not only earned him international recognition but also paved the way for further research into antiviral therapies. Azrael's legacy continues to inspire a new generation of scientists, and his discovery remains a cornerstone in the fight against viral diseases.",
    "name": "Azrael",
    "keyword": "acyclovir",
    "subject_category": "person"
  },
  {
    "facts": [
      "Sylas is not a dedicated researcher.",
      "Sylas does not seek knowledge.",
      "Sylas studies plants.",
      "Sylas loves nature.",
      "Sylas explores habitats.",
      "Sylas does not classify flora."
    ],
    "facts_fol": [
      "¬dedicated_researcher(Sylas)",
      "¬seeks_knowledge(Sylas)",
      "studies_plants(Sylas)",
      "loves_nature(Sylas)",
      "explores_habitats(Sylas)",
      "¬classifies_flora(Sylas)"
    ],
    "rules": [
      "If Sylas loves nature and seeks knowledge, then he is a passionate explorer.",
      "If Sylas studies plants and discovers species, then he is a renowned expert.",
      "If Sylas either explores habitats or classifies flora (but not both), then he discovers species."
    ],
    "rules_fol": [
      "(loves_nature(Sylas) ∧ seeks_knowledge(Sylas)) → passionate_explorer(Sylas)",
      "(studies_plants(Sylas) ∧ discovers_species(Sylas)) → renowned_expert(Sylas)",
      "(explores_habitats(Sylas) ⊕ classifies_flora(Sylas)) → discovers_species(Sylas)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Sylas has a curious mind, then he is a passionate explorer and travels frequently.",
      "If Sylas pursues innovation, then he either makes breakthroughs or is a renowned expert (or both).",
      "If Sylas has a curious mind, then he discovers species and publishes papers."
    ],
    "distracting_rules_fol": [
      "curious_mind(Sylas) → (passionate_explorer(Sylas) ∧ travel_frequently(Sylas))",
      "pursues_innovation(Sylas) → (makes_breakthroughs(Sylas) ∨ renowned_expert(Sylas))",
      "curious_mind(Sylas) → (discovers_species(Sylas) ∧ publishes_papers(Sylas))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Sylas explores habitats.",
          "Sylas does not classify flora."
        ],
        "rules": "If Sylas either explores habitats or classifies flora (but not both), then he discovers species.",
        "conclusion": "Sylas discovers species."
      },
      {
        "facts": [
          "Sylas studies plants.",
          "Sylas discovers species."
        ],
        "rules": "If Sylas studies plants and discovers species, then he is a renowned expert.",
        "conclusion": "Sylas is a renowned expert."
      },
      {
        "facts": [
          "Sylas loves nature.",
          "Sylas does not seek knowledge."
        ],
        "rules": "If Sylas loves nature and seeks knowledge, then he is a passionate explorer.",
        "conclusion": null
      },
      {
        "facts": [
          "Sylas is not a dedicated researcher.",
          "Sylas is a renowned expert."
        ],
        "rules": null,
        "conclusion": "If Sylas is either a dedicated researcher or a passionate explorer (but not both), then he is a renowned expert."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "explores_habitats(Sylas)",
          "¬classifies_flora(Sylas)"
        ],
        "rules": "(explores_habitats(Sylas) ⊕ classifies_flora(Sylas)) → discovers_species(Sylas)",
        "conclusion": "discovers_species(Sylas)"
      },
      {
        "facts": [
          "studies_plants(Sylas)",
          "discovers_species(Sylas)"
        ],
        "rules": "(studies_plants(Sylas) ∧ discovers_species(Sylas)) → renowned_expert(Sylas)",
        "conclusion": "renowned_expert(Sylas)"
      },
      {
        "facts": [
          "loves_nature(Sylas)",
          "¬seeks_knowledge(Sylas)"
        ],
        "rules": "(loves_nature(Sylas) ∧ seeks_knowledge(Sylas)) → passionate_explorer(Sylas)",
        "conclusion": null
      },
      {
        "facts": [
          "¬dedicated_researcher(Sylas)",
          "renowned_expert(Sylas)"
        ],
        "rules": null,
        "conclusion": "(dedicated_researcher(Sylas) ⊕ passionate_explorer(Sylas)) → renowned_expert(Sylas)"
      }
    ],
    "conclusion": "If Sylas is either a dedicated researcher or a passionate explorer (but not both), then he is a renowned expert.",
    "conclusion_fol": "(dedicated_researcher(Sylas) ⊕ passionate_explorer(Sylas)) → renowned_expert(Sylas)",
    "answer": "True",
    "context": [
      "Sylas explores habitats.",
      "Sylas does not classify flora.",
      "If Sylas either explores habitats or classifies flora (but not both), then he discovers species.",
      "Sylas studies plants.",
      "If Sylas studies plants and discovers species, then he is a renowned expert.",
      "Sylas loves nature.",
      "Sylas does not seek knowledge.",
      "If Sylas loves nature and seeks knowledge, then he is a passionate explorer.",
      "Sylas is not a dedicated researcher."
    ],
    "context_fol": [
      "explores_habitats(Sylas)",
      "¬classifies_flora(Sylas)",
      "(explores_habitats(Sylas) ⊕ classifies_flora(Sylas)) → discovers_species(Sylas)",
      "studies_plants(Sylas)",
      "(studies_plants(Sylas) ∧ discovers_species(Sylas)) → renowned_expert(Sylas)",
      "loves_nature(Sylas)",
      "¬seeks_knowledge(Sylas)",
      "(loves_nature(Sylas) ∧ seeks_knowledge(Sylas)) → passionate_explorer(Sylas)",
      "¬dedicated_researcher(Sylas)"
    ],
    "background_story": "Sylas was a botanist with a passion for rare and exotic plant species. His life's work focused on the genus Vaccinium, which includes blueberries, cranberries, and bilberries. Growing up in the rolling hills of Scotland, Sylas spent countless hours exploring the moors and bogs, discovering hidden patches of Vaccinium plants. He became particularly fascinated with the potential health benefits of these fruits and dedicated himself to studying their unique properties. Sylas's research took him to remote corners of the world, from the forests of North America to the tundras of Siberia, in pursuit of new Vaccinium species. His discoveries led to breakthroughs in nutrition and medicine, earning him international recognition and admiration from his peers.",
    "name": "Sylas",
    "keyword": "vaccinium",
    "subject_category": "human"
  },
  {
    "facts": [
      "Judson is not innovative.",
      "Judson pursues research.",
      "Judson does not make breakthroughs."
    ],
    "facts_fol": [
      "¬innovative(Judson)",
      "pursues_research(Judson)",
      "¬makes_breakthroughs(Judson)"
    ],
    "rules": [
      "Judson has a curious mind or is a neuroscientist.",
      "Judson seeks knowledge or has a curious mind.",
      "Judson is either disciplined or seeks knowledge, but not necessarily both.",
      "Anyone who pursues research either makes breakthroughs or is disciplined (or both)."
    ],
    "rules_fol": [
      "curious_mind(Judson) ∨ neuroscientist(Judson)",
      "seeks_knowledge(Judson) ∨ curious_mind(Judson)",
      "is_disciplined(Judson) ⊕ seeks_knowledge(Judson)",
      "∀x (pursues_research(x) → (makes_breakthroughs(x) ∨ is_disciplined(x)))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Judson studies the brain or understands human behavior, then he can be a neuroscientist.",
      "If Judson is an expert, then he is either creative or has a curious mind, but not both.",
      "If Judson either reads widely or asks questions (but not both), then he seeks knowledge.",
      "If Judson either sets goals or works hard (but not both), then he is disciplined."
    ],
    "distracting_rules_fol": [
      "(studies_brain(Judson) ∨ understands_behavior(Judson)) → neuroscientist(Judson)",
      "expert(Judson) → (creative(Judson) ⊕ curious_mind(Judson))",
      "(reads_widely(Judson) ⊕ asks_questions(Judson)) → seeks_knowledge(Judson)",
      "(sets_goals(Judson) ⊕ works_hard(Judson)) → is_disciplined(Judson)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Judson pursues research.",
          "Judson does not make breakthroughs."
        ],
        "rules": "Anyone who pursues research either makes breakthroughs or is disciplined (or both).",
        "conclusion": "Judson is disciplined."
      },
      {
        "facts": [
          "Judson is disciplined."
        ],
        "rules": "Judson is either disciplined or seeks knowledge, but not necessarily both.",
        "conclusion": "Judson does not seek knowledge."
      },
      {
        "facts": [
          "Judson does not seek knowledge."
        ],
        "rules": "Judson seeks knowledge or has a curious mind.",
        "conclusion": "Judson has a curious mind."
      },
      {
        "facts": [
          "Judson has a curious mind."
        ],
        "rules": "Judson has a curious mind or is a neuroscientist.",
        "conclusion": null
      },
      {
        "facts": [
          "Judson is not innovative."
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "pursues_research(Judson)",
          "¬makes_breakthroughs(Judson)"
        ],
        "rules": "∀x (pursues_research(x) → (makes_breakthroughs(x) ∨ is_disciplined(x)))",
        "conclusion": "is_disciplined(Judson)"
      },
      {
        "facts": [
          "is_disciplined(Judson)"
        ],
        "rules": "is_disciplined(Judson) ⊕ seeks_knowledge(Judson)",
        "conclusion": "¬seeks_knowledge(Judson)"
      },
      {
        "facts": [
          "¬seeks_knowledge(Judson)"
        ],
        "rules": "seeks_knowledge(Judson) ∨ curious_mind(Judson)",
        "conclusion": "curious_mind(Judson)"
      },
      {
        "facts": [
          "curious_mind(Judson)"
        ],
        "rules": "curious_mind(Judson) ∨ neuroscientist(Judson)",
        "conclusion": null
      },
      {
        "facts": [
          "¬innovative(Judson)"
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "conclusion": "If Judson is a neuroscientist, then he is either intelligent or innovative (or both).",
    "conclusion_fol": "neuroscientist(Judson) → (intelligent(Judson) ∨ innovative(Judson))",
    "answer": "Uncertain",
    "context": [
      "Judson pursues research.",
      "Judson does not make breakthroughs.",
      "Anyone who pursues research either makes breakthroughs or is disciplined (or both).",
      "Judson is either disciplined or seeks knowledge, but not necessarily both.",
      "Judson seeks knowledge or has a curious mind.",
      "Judson has a curious mind or is a neuroscientist.",
      "Judson is not innovative."
    ],
    "context_fol": [
      "pursues_research(Judson)",
      "¬makes_breakthroughs(Judson)",
      "∀x (pursues_research(x) → (makes_breakthroughs(x) ∨ is_disciplined(x)))",
      "is_disciplined(Judson) ⊕ seeks_knowledge(Judson)",
      "seeks_knowledge(Judson) ∨ curious_mind(Judson)",
      "curious_mind(Judson) ∨ neuroscientist(Judson)",
      "¬innovative(Judson)"
    ],
    "background_story": "Judson was a brilliant neuroscientist fascinated by the neencephalon, the part of the brain responsible for higher-order thinking. His groundbreaking research on the neencephalon's role in cognitive development led to a deeper understanding of human intelligence. Judson's work focused on how the neencephalon integrates sensory information to facilitate complex decision-making. His findings opened new avenues for treating neurological disorders and improving cognitive function. Judson's dedication to unlocking the secrets of the neencephalon earned him international recognition, and his work continues to inspire a new generation of neuroscientists. Through his research, Judson aimed to enhance human potential by harnessing the full power of the neencephalon.",
    "name": "Judson",
    "keyword": "neencephalon",
    "subject_category": "human"
  },
  {
    "facts": [
      "Flame plays the guitar.",
      "Flame produces albums.",
      "Flame writes lyrics."
    ],
    "facts_fol": [
      "play_guitar(Flame)",
      "produce_albums(Flame)",
      "write_lyrics(Flame)"
    ],
    "rules": [
      "For all musicians, if a musician is innovative, then they either create unique sounds or experiment with instruments (or both).",
      "Flame either plays the guitar or is an innovative musician, but being one does not necessarily mean he is the other.",
      "If Flame is a lead singer, then he either composes songs or experiments with instruments, but not both.",
      "If Flame performs live, then he is either a lead singer or produces albums, but not both.",
      "If Flame writes lyrics or makes beats, then he can perform live."
    ],
    "rules_fol": [
      "∀x (innovative(x) → (create_unique_sounds(x) ∨ experiment_with_instruments(x)))",
      "play_guitar(Flame) ⊕ innovative(Flame)",
      "lead_singer(Flame) → (compose_songs(Flame) ⊕ experiment_with_instruments(Flame))",
      "perform_live(Flame) → (lead_singer(Flame) ⊕ produce_albums(Flame))",
      "(write_lyrics(Flame) ∨ make_beats(Flame)) → perform_live(Flame)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "All passionate musicians who improvise are innovative.",
      "If Flame is passionate, then he crafts his own instruments and experiments with them.",
      "Any musician who has charisma or has powerful vocals can be a lead singer.",
      "All musicians who tour often perform live."
    ],
    "distracting_rules_fol": [
      "∀x (passionate(x) → (improvises(x) ∧ innovative(x)))",
      "passionate(Flame) → (craft_instruments(Flame) ∧ experiment_with_instruments(Flame))",
      "∀x ((has_charisma(x) ∨ has_powerful_vocals(x)) → lead_singer(x))",
      "∀x (tour_often(x) → perform_live(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Flame writes lyrics."
        ],
        "rules": "If Flame writes lyrics or makes beats, then he can perform live.",
        "conclusion": "Flame performs live."
      },
      {
        "facts": [
          "Flame performs live.",
          "Flame produces albums."
        ],
        "rules": "If Flame performs live, then he is either a lead singer or produces albums, but not both.",
        "conclusion": "Flame is not a lead singer."
      },
      {
        "facts": [
          "Flame is not a lead singer."
        ],
        "rules": "If Flame is a lead singer, then he either composes songs or experiments with instruments, but not both.",
        "conclusion": null
      },
      {
        "facts": [
          "Flame plays the guitar."
        ],
        "rules": "Flame either plays the guitar or is an innovative musician, but being one does not necessarily mean he is the other.",
        "conclusion": "Flame is not an innovative musician."
      },
      {
        "facts": [
          "Flame is not an innovative musician."
        ],
        "rules": "For all musicians, if a musician is innovative, then they either create unique sounds or experiment with instruments (or both).",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "write_lyrics(Flame)"
        ],
        "rules": "(write_lyrics(Flame) ∨ make_beats(Flame)) → perform_live(Flame)",
        "conclusion": "perform_live(Flame)"
      },
      {
        "facts": [
          "perform_live(Flame)",
          "produce_albums(Flame)"
        ],
        "rules": "perform_live(Flame) → (lead_singer(Flame) ⊕ produce_albums(Flame))",
        "conclusion": "¬lead_singer(Flame)"
      },
      {
        "facts": [
          "¬lead_singer(Flame)"
        ],
        "rules": "lead_singer(Flame) → (compose_songs(Flame) ⊕ experiment_with_instruments(Flame))",
        "conclusion": null
      },
      {
        "facts": [
          "play_guitar(Flame)"
        ],
        "rules": "play_guitar(Flame) ⊕ innovative(Flame)",
        "conclusion": "¬innovative(Flame)"
      },
      {
        "facts": [
          "¬innovative(Flame)"
        ],
        "rules": "∀x (innovative(x) → (create_unique_sounds(x) ∨ experiment_with_instruments(x)))",
        "conclusion": null
      }
    ],
    "conclusion": "Flame does not create unique sounds.",
    "conclusion_fol": "¬create_unique_sounds(Flame)",
    "answer": "Uncertain",
    "context": [
      "Flame writes lyrics.",
      "If Flame writes lyrics or makes beats, then he can perform live.",
      "Flame produces albums.",
      "If Flame performs live, then he is either a lead singer or produces albums, but not both.",
      "If Flame is a lead singer, then he either composes songs or experiments with instruments, but not both.",
      "Flame plays the guitar.",
      "Flame either plays the guitar or is an innovative musician, but being one does not necessarily mean he is the other.",
      "For all musicians, if a musician is innovative, then they either create unique sounds or experiment with instruments (or both)."
    ],
    "context_fol": [
      "write_lyrics(Flame)",
      "(write_lyrics(Flame) ∨ make_beats(Flame)) → perform_live(Flame)",
      "produce_albums(Flame)",
      "perform_live(Flame) → (lead_singer(Flame) ⊕ produce_albums(Flame))",
      "lead_singer(Flame) → (compose_songs(Flame) ⊕ experiment_with_instruments(Flame))",
      "play_guitar(Flame)",
      "play_guitar(Flame) ⊕ innovative(Flame)",
      "∀x (innovative(x) → (create_unique_sounds(x) ∨ experiment_with_instruments(x)))"
    ],
    "background_story": "Flame was the lead singer of the eclectic rock band, 'Electric Storm'. Known for their high-energy performances, the band's sound was a unique blend of indie rock and folk, with Flame's powerful voice at its core. But what set them apart were their custom-made shakers - intricate, handmade instruments that added a distinct percussive element to their music. Flame, an avid craftsman, designed and built these shakers himself, using materials ranging from seeds to metal washers. As the band's popularity grew, so did the legend of Flame's shakers, with fans and critics alike praising the innovative sound they brought to the band's live shows. With Flame at the helm, 'Electric Storm' became a sensation, shaking up the music scene with their infectious energy and distinctive sound.",
    "name": "Flame",
    "keyword": "shakers",
    "subject_category": "musician"
  },
  {
    "facts": [
      "Snookums runs wildly.",
      "Snookums gains fame.",
      "Snookums eats a toxic plant.",
      "Snookums shows aggressive behavior."
    ],
    "facts_fol": [
      "run_wildly(Snookums)",
      "gain_fame(Snookums)",
      "eat_toxic_plant(Snookums)",
      "show_aggressive_behavior(Snookums)"
    ],
    "rules": [
      "If Snookums ingests locoweed, then she will either behave erratically or become legendary, but not both.",
      "If Snookums runs wildly, then she will either become legendary or gain fame, but not both.",
      "If a horse eats a toxic plant, then it will either ingest locoweed or show aggressive behavior, but not both."
    ],
    "rules_fol": [
      "ingest_locoweed(Snookums) → (behave_erratically(Snookums) ⊕ become_legendary(Snookums))",
      "run_wildly(Snookums) → (become_legendary(Snookums) ⊕ gain_fame(Snookums))",
      "eat_toxic_plant(Snookums) → (ingest_locoweed(Snookums) ⊕ show_aggressive_behavior(Snookums))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Snookums has a unique story, then she becomes legendary.",
      "If a horse grazes freely and encounters toxic plants, then it can ingest locoweed."
    ],
    "distracting_rules_fol": [
      "has_unique_story(Snookums) → become_legendary(Snookums)",
      "∀x ((graze_freely(x) ∧ encounter_toxic_plants(x)) → ingest_locoweed(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Snookums eats a toxic plant.",
          "Snookums shows aggressive behavior."
        ],
        "rules": "If a horse eats a toxic plant, then it will either ingest locoweed or show aggressive behavior, but not both.",
        "conclusion": "Snookums does not ingest locoweed."
      },
      {
        "facts": [
          "Snookums runs wildly.",
          "Snookums gains fame."
        ],
        "rules": "If Snookums runs wildly, then she will either become legendary or gain fame, but not both.",
        "conclusion": "Snookums does not become legendary."
      },
      {
        "facts": [
          "Snookums does not ingest locoweed.",
          "Snookums does not become legendary."
        ],
        "rules": "If Snookums ingests locoweed, then she will either behave erratically or become legendary, but not both.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "eat_toxic_plant(Snookums)",
          "show_aggressive_behavior(Snookums)"
        ],
        "rules": "eat_toxic_plant(Snookums) → (ingest_locoweed(Snookums) ⊕ show_aggressive_behavior(Snookums))",
        "conclusion": "¬ingest_locoweed(Snookums)"
      },
      {
        "facts": [
          "run_wildly(Snookums)",
          "gain_fame(Snookums)"
        ],
        "rules": "run_wildly(Snookums) → (become_legendary(Snookums) ⊕ gain_fame(Snookums))",
        "conclusion": "¬become_legendary(Snookums)"
      },
      {
        "facts": [
          "¬ingest_locoweed(Snookums)",
          "¬become_legendary(Snookums)"
        ],
        "rules": "ingest_locoweed(Snookums) → (behave_erratically(Snookums) ⊕ become_legendary(Snookums))",
        "conclusion": null
      }
    ],
    "conclusion": "Snookums behaves erratically.",
    "conclusion_fol": "behave_erratically(Snookums)",
    "answer": "Uncertain",
    "context": [
      "Snookums eats a toxic plant.",
      "Snookums shows aggressive behavior.",
      "If a horse eats a toxic plant, then it will either ingest locoweed or show aggressive behavior, but not both.",
      "Snookums runs wildly.",
      "Snookums gains fame.",
      "If Snookums runs wildly, then she will either become legendary or gain fame, but not both.",
      "If Snookums ingests locoweed, then she will either behave erratically or become legendary, but not both."
    ],
    "context_fol": [
      "eat_toxic_plant(Snookums)",
      "show_aggressive_behavior(Snookums)",
      "eat_toxic_plant(Snookums) → (ingest_locoweed(Snookums) ⊕ show_aggressive_behavior(Snookums))",
      "run_wildly(Snookums)",
      "gain_fame(Snookums)",
      "run_wildly(Snookums) → (become_legendary(Snookums) ⊕ gain_fame(Snookums))",
      "ingest_locoweed(Snookums) → (behave_erratically(Snookums) ⊕ become_legendary(Snookums))"
    ],
    "background_story": "Snookums, a wild mustang, roamed the open ranges of the American West. She was known for her striking appearance and unpredictable behavior. One day, while grazing, Snookums ingested a toxic plant known as locoweed. The plant's effects were immediate and bizarre, causing Snookums to act erratically. She would run wildly, ignoring her usual cautious nature, and seem disoriented. The locals, familiar with the effects of locoweed, carefully rounded up Snookums and nursed her back to health. After a few days, the toxin was flushed from her system, and Snookums returned to her normal self. Though the experience was harrowing, it left Snookums with a legendary status among the ranchers, who told tales of the 'locoweed mare' that had once run wild under the influence of the mysterious plant.",
    "name": "Snookums",
    "keyword": "locoweed",
    "subject_category": "horse"
  },
  {
    "facts": [
      "Kehlani studies rare plants.",
      "Kehlani does not document species."
    ],
    "facts_fol": [
      "study_rare_plants(Kehlani)",
      "¬document_species(Kehlani)"
    ],
    "rules": [
      "If Kehlani either studies rare plants or focuses on common plants (but not both), then she is influential.",
      "Kehlani either explores tropical regions or focuses on common plants, but not both.",
      "Kehlani either documents species or explores tropical regions, but not both."
    ],
    "rules_fol": [
      "(study_rare_plants(Kehlani) ⊕ focus_on_common_plants(Kehlani)) → influential(Kehlani)",
      "explore_tropical(Kehlani) ⊕ focus_on_common_plants(Kehlani)",
      "document_species(Kehlani) ⊕ explore_tropical(Kehlani)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Kehlani is dedicated, then she either researches unique plants or focuses on common plants, but not both.",
      "If Kehlani researches ancient plants or collects unique species, then she explores tropical regions."
    ],
    "distracting_rules_fol": [
      "is_dedicated(Kehlani) → (research_unique(Kehlani) ⊕ focus_on_common_plants(Kehlani))",
      "(research_ancient(Kehlani) ∨ collect_unique(Kehlani)) → explore_tropical(Kehlani)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Kehlani does not document species."
        ],
        "rules": "Kehlani either documents species or explores tropical regions, but not both.",
        "conclusion": "Kehlani explores tropical regions."
      },
      {
        "facts": [
          "Kehlani explores tropical regions."
        ],
        "rules": "Kehlani either explores tropical regions or focuses on common plants, but not both.",
        "conclusion": "Kehlani does not focus on common plants."
      },
      {
        "facts": [
          "Kehlani studies rare plants.",
          "Kehlani does not focus on common plants."
        ],
        "rules": "If Kehlani either studies rare plants or focuses on common plants (but not both), then she is influential.",
        "conclusion": "Kehlani is not influential."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬document_species(Kehlani)"
        ],
        "rules": "document_species(Kehlani) ⊕ explore_tropical(Kehlani)",
        "conclusion": "explore_tropical(Kehlani)"
      },
      {
        "facts": [
          "explore_tropical(Kehlani)"
        ],
        "rules": "explore_tropical(Kehlani) ⊕ focus_on_common_plants(Kehlani)",
        "conclusion": "¬focus_on_common_plants(Kehlani)"
      },
      {
        "facts": [
          "study_rare_plants(Kehlani)",
          "¬focus_on_common_plants(Kehlani)"
        ],
        "rules": "(study_rare_plants(Kehlani) ⊕ focus_on_common_plants(Kehlani)) → influential(Kehlani)",
        "conclusion": "¬influential(Kehlani)"
      }
    ],
    "conclusion": "Kehlani is not influential.",
    "conclusion_fol": "¬influential(Kehlani)",
    "answer": "False",
    "context": [
      "Kehlani does not document species.",
      "Kehlani either documents species or explores tropical regions, but not both.",
      "Kehlani either explores tropical regions or focuses on common plants, but not both.",
      "Kehlani studies rare plants.",
      "If Kehlani either studies rare plants or focuses on common plants (but not both), then she is influential."
    ],
    "context_fol": [
      "¬document_species(Kehlani)",
      "document_species(Kehlani) ⊕ explore_tropical(Kehlani)",
      "explore_tropical(Kehlani) ⊕ focus_on_common_plants(Kehlani)",
      "study_rare_plants(Kehlani)",
      "(study_rare_plants(Kehlani) ⊕ focus_on_common_plants(Kehlani)) → influential(Kehlani)"
    ],
    "background_story": "Kehlani was a renowned botanist with a passion for rare and ancient plant species. Her fascination with the Hornworts, specifically those belonging to the class Anthocerotopsida, led her to dedicate her career to studying these enigmatic organisms. Kehlani spent years in the tropical rainforests, meticulously collecting and documenting various Anthocerotopsida species. Her groundbreaking research revealed unique characteristics of these plants, shedding light on their evolutionary history and ecological significance. Kehlani's work not only advanced the field of botany but also contributed to conservation efforts, ensuring the preservation of these primitive yet resilient plants for future generations.",
    "name": "Kehlani",
    "keyword": "anthoceropsida",
    "subject_category": "botanist"
  },
  {
    "facts": [
      "Orion honored his ancestors.",
      "Orion records lives.",
      "Orion did not explore myths.",
      "Orion documents the past.",
      "Orion does not uncover stories."
    ],
    "facts_fol": [
      "honored_ancestors(Orion)",
      "record_lives(Orion)",
      "¬explored_myths(Orion)",
      "documents_past(Orion)",
      "¬uncover_stories(Orion)"
    ],
    "rules": [
      "Orion either explored myths or studied history, but not both.",
      "If Orion preserves legends, then he is respected and records lives.",
      "Any historical figure who documents the past or uncovers stories can preserve legends."
    ],
    "rules_fol": [
      "explored_myths(Orion) ⊕ studied_history(Orion)",
      "preserve_legends(Orion) → (respected(Orion) ∧ record_lives(Orion))",
      "∀x ((documents_past(x) ∨ uncover_stories(x)) → preserve_legends(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "All historical figures who examined tombstones either studied the history of the deceased or revealed secrets about the past.",
      "If Orion is a venerated historical figure, then he is either respected or revered, but not both.",
      "If a historical figure either transcribes tales or collects artifacts (but not both), then they preserve legends."
    ],
    "distracting_rules_fol": [
      "∀x (examined_tombstones(x) → (studied_history(x) ∨ revealed_secrets(x)))",
      "venerated(Orion) → (respected(Orion) ⊕ revered(Orion))",
      "∀x ((transcribes_tales(x) ⊕ collects_artifacts(x)) → preserve_legends(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Orion documents the past.",
          "Orion does not uncover stories."
        ],
        "rules": "Any historical figure who documents the past or uncovers stories can preserve legends.",
        "conclusion": "Orion preserves legends."
      },
      {
        "facts": [
          "Orion preserves legends.",
          "Orion records lives."
        ],
        "rules": "If Orion preserves legends, then he is respected and records lives.",
        "conclusion": "Orion was respected."
      },
      {
        "facts": [
          "Orion did not explore myths."
        ],
        "rules": "Orion either explored myths or studied history, but not both.",
        "conclusion": "Orion studied the history of the deceased."
      },
      {
        "facts": [
          "Orion was respected.",
          "Orion studied the history of the deceased.",
          "Orion honored his ancestors."
        ],
        "rules": null,
        "conclusion": "Orion was respected, studied the history of the deceased and honored their graves."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "documents_past(Orion)",
          "¬uncover_stories(Orion)"
        ],
        "rules": "∀x ((documents_past(x) ∨ uncover_stories(x)) → preserve_legends(x))",
        "conclusion": "preserve_legends(Orion)"
      },
      {
        "facts": [
          "preserve_legends(Orion)",
          "record_lives(Orion)"
        ],
        "rules": "preserve_legends(Orion) → (respected(Orion) ∧ record_lives(Orion))",
        "conclusion": "respected(Orion)"
      },
      {
        "facts": [
          "¬explored_myths(Orion)"
        ],
        "rules": "explored_myths(Orion) ⊕ studied_history(Orion)",
        "conclusion": "studied_history(Orion)"
      },
      {
        "facts": [
          "respected(Orion)",
          "studied_history(Orion)",
          "honored_ancestors(Orion)"
        ],
        "rules": null,
        "conclusion": "respected(Orion) ∧ (studied_history(Orion) ∧ honored_ancestors(Orion))"
      }
    ],
    "conclusion": "Orion was respected, studied the history of the deceased and honored their graves.",
    "conclusion_fol": "respected(Orion) ∧ (studied_history(Orion) ∧ honored_ancestors(Orion))",
    "answer": "True",
    "context": [
      "Orion documents the past.",
      "Orion does not uncover stories.",
      "Any historical figure who documents the past or uncovers stories can preserve legends.",
      "Orion records lives.",
      "If Orion preserves legends, then he is respected and records lives.",
      "Orion did not explore myths.",
      "Orion either explored myths or studied history, but not both.",
      "Orion honored his ancestors."
    ],
    "context_fol": [
      "documents_past(Orion)",
      "¬uncover_stories(Orion)",
      "∀x ((documents_past(x) ∨ uncover_stories(x)) → preserve_legends(x))",
      "record_lives(Orion)",
      "preserve_legends(Orion) → (respected(Orion) ∧ record_lives(Orion))",
      "¬explored_myths(Orion)",
      "explored_myths(Orion) ⊕ studied_history(Orion)",
      "honored_ancestors(Orion)"
    ],
    "background_story": "Orion was a mysterious and revered figure in ancient times, known for his fascination with the afterlife and the secrets of the graves. As a young man, he would often sneak into the local cemetery at night, pouring over the inscriptions and symbols etched into the tombstones. His obsession with the dead led him to become a skilled grave digger and undertaker, earning the respect and fear of the community. Orion's true passion, however, lay in uncovering the stories of those buried beneath his feet. He spent years researching and documenting the lives of the deceased, creating a vast archive of histories and legends. His work became a testament to the enduring power of memory and the importance of honoring the graves of those who came before.",
    "name": "Orion",
    "keyword": "graves",
    "subject_category": "historical figure"
  },
  {
    "facts": [
      "Andi works with endangered species.",
      "Andi specializes in wildlife.",
      "Andi protects ecosystems.",
      "Andi examines cells.",
      "Andi analyzes data.",
      "Andi does not develop innovative techniques."
    ],
    "facts_fol": [
      "work_with_endangered_species(Andi)",
      "specialize_in_wildlife(Andi)",
      "protect_ecosystems(Andi)",
      "examines_cells(Andi)",
      "analyze_data(Andi)",
      "¬develop_innovative_techniques(Andi)"
    ],
    "rules": [
      "If Andi specializes in wildlife, then she either contributes to conservation or protects ecosystems, but not both.",
      "If a biologist examines cells and understands genetics, then they can study reproductive biology.",
      "If Andi analyzes data, then she either understands genetics or develops innovative techniques."
    ],
    "rules_fol": [
      "specialize_in_wildlife(Andi) → (contribute_to_conservation(Andi) ⊕ protect_ecosystems(Andi))",
      "∀x ((examines_cells(x) ∧ understands_genetics(x)) → study_reproductive_biology(x))",
      "analyze_data(Andi) → (understands_genetics(Andi) ∨ develop_innovative_techniques(Andi))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Andi either preserves habitats or saves species (but not both), then she contributes to conservation.",
      "If Andi loves animals and is curious, then she studies reproductive biology.",
      "All biologists who read research and conduct experiments understand genetics."
    ],
    "distracting_rules_fol": [
      "(preserves_habitats(Andi) ⊕ saves_species(Andi)) → contribute_to_conservation(Andi)",
      "(loves_animals(Andi) ∧ is_curious(Andi)) → study_reproductive_biology(Andi)",
      "∀x ((reads_research(x) ∧ conducts_experiments(x)) → understands_genetics(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Andi analyzes data.",
          "Andi does not develop innovative techniques."
        ],
        "rules": "If Andi analyzes data, then she either understands genetics or develops innovative techniques.",
        "conclusion": "Andi understands genetics."
      },
      {
        "facts": [
          "Andi examines cells.",
          "Andi understands genetics."
        ],
        "rules": "If a biologist examines cells and understands genetics, then they can study reproductive biology.",
        "conclusion": "Andi studies reproductive biology."
      },
      {
        "facts": [
          "Andi specializes in wildlife.",
          "Andi protects ecosystems."
        ],
        "rules": "If Andi specializes in wildlife, then she either contributes to conservation or protects ecosystems, but not both.",
        "conclusion": "Andi does not contribute to conservation."
      },
      {
        "facts": [
          "Andi studies reproductive biology.",
          "Andi works with endangered species.",
          "Andi does not contribute to conservation."
        ],
        "rules": null,
        "conclusion": "If Andi studies reproductive biology and works with endangered species, then she contributes to conservation."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "analyze_data(Andi)",
          "¬develop_innovative_techniques(Andi)"
        ],
        "rules": "analyze_data(Andi) → (understands_genetics(Andi) ∨ develop_innovative_techniques(Andi))",
        "conclusion": "understands_genetics(Andi)"
      },
      {
        "facts": [
          "examines_cells(Andi)",
          "understands_genetics(Andi)"
        ],
        "rules": "∀x ((examines_cells(x) ∧ understands_genetics(x)) → study_reproductive_biology(x))",
        "conclusion": "study_reproductive_biology(Andi)"
      },
      {
        "facts": [
          "specialize_in_wildlife(Andi)",
          "protect_ecosystems(Andi)"
        ],
        "rules": "specialize_in_wildlife(Andi) → (contribute_to_conservation(Andi) ⊕ protect_ecosystems(Andi))",
        "conclusion": "¬contribute_to_conservation(Andi)"
      },
      {
        "facts": [
          "study_reproductive_biology(Andi)",
          "work_with_endangered_species(Andi)",
          "¬contribute_to_conservation(Andi)"
        ],
        "rules": null,
        "conclusion": "(study_reproductive_biology(Andi) ∧ work_with_endangered_species(Andi)) → contribute_to_conservation(Andi)"
      }
    ],
    "conclusion": "If Andi studies reproductive biology and works with endangered species, then she contributes to conservation.",
    "conclusion_fol": "(study_reproductive_biology(Andi) ∧ work_with_endangered_species(Andi)) → contribute_to_conservation(Andi)",
    "answer": "False",
    "context": [
      "Andi analyzes data.",
      "Andi does not develop innovative techniques.",
      "If Andi analyzes data, then she either understands genetics or develops innovative techniques.",
      "Andi examines cells.",
      "If a biologist examines cells and understands genetics, then they can study reproductive biology.",
      "Andi specializes in wildlife.",
      "Andi protects ecosystems.",
      "If Andi specializes in wildlife, then she either contributes to conservation or protects ecosystems, but not both.",
      "Andi works with endangered species."
    ],
    "context_fol": [
      "analyze_data(Andi)",
      "¬develop_innovative_techniques(Andi)",
      "analyze_data(Andi) → (understands_genetics(Andi) ∨ develop_innovative_techniques(Andi))",
      "examines_cells(Andi)",
      "∀x ((examines_cells(x) ∧ understands_genetics(x)) → study_reproductive_biology(x))",
      "specialize_in_wildlife(Andi)",
      "protect_ecosystems(Andi)",
      "specialize_in_wildlife(Andi) → (contribute_to_conservation(Andi) ⊕ protect_ecosystems(Andi))",
      "work_with_endangered_species(Andi)"
    ],
    "background_story": "Andi was a renowned biologist specializing in the reproduction of endangered species. Her groundbreaking work in the field of reproductive biology led to the development of innovative techniques for breeding rare animals in captivity. Andi's most notable achievement was the successful reproduction of the critically endangered Sumatran tiger. Through her tireless efforts, she established a thriving breeding program, significantly increasing the population of these majestic creatures. Andi's dedication to preserving biodiversity and her expertise as a reproducer have made her a leading figure in conservation efforts worldwide, inspiring a new generation of scientists to follow in her footsteps.",
    "name": "Andi",
    "keyword": "reproducer",
    "subject_category": "biologist"
  },
  {
    "facts": [
      "Laylah is a visionary designer.",
      "Laylah is ecologically conscious in the fashion world."
    ],
    "facts_fol": [
      "has_vision(Laylah)",
      "ecologically_conscious(Laylah)"
    ],
    "rules": [
      "If Laylah is creative, then she is either successful or influential, but not both.",
      "Laylah is either a visionary designer or a creative one, but not necessarily both.",
      "Laylah is either ecologically conscious or influential, but not both, in the fashion world."
    ],
    "rules_fol": [
      "creative(Laylah) → (successful(Laylah) ⊕ influential(Laylah))",
      "has_vision(Laylah) ⊕ creative(Laylah)",
      "ecologically_conscious(Laylah) ⊕ influential(Laylah)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "All fashion designers who make art are creative.",
      "If Laylah is attentive, then she is a perfectionist and influential."
    ],
    "distracting_rules_fol": [
      "∀x (makes_art(x) → creative(x))",
      "attentive(Laylah) → (perfectionist(Laylah) ∧ influential(Laylah))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Laylah is ecologically conscious in the fashion world."
        ],
        "rules": "Laylah is either ecologically conscious or influential, but not both, in the fashion world.",
        "conclusion": "Laylah is not influential."
      },
      {
        "facts": [
          "Laylah is a visionary designer."
        ],
        "rules": "Laylah is either a visionary designer or a creative one, but not necessarily both.",
        "conclusion": "Laylah is not creative."
      },
      {
        "facts": [
          "Laylah is not creative.",
          "Laylah is not influential."
        ],
        "rules": "If Laylah is creative, then she is either successful or influential, but not both.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "ecologically_conscious(Laylah)"
        ],
        "rules": "ecologically_conscious(Laylah) ⊕ influential(Laylah)",
        "conclusion": "¬influential(Laylah)"
      },
      {
        "facts": [
          "has_vision(Laylah)"
        ],
        "rules": "has_vision(Laylah) ⊕ creative(Laylah)",
        "conclusion": "¬creative(Laylah)"
      },
      {
        "facts": [
          "¬creative(Laylah)",
          "¬influential(Laylah)"
        ],
        "rules": "creative(Laylah) → (successful(Laylah) ⊕ influential(Laylah))",
        "conclusion": null
      }
    ],
    "conclusion": "Laylah is successful.",
    "conclusion_fol": "successful(Laylah)",
    "answer": "Uncertain",
    "context": [
      "Laylah is ecologically conscious in the fashion world.",
      "Laylah is either ecologically conscious or influential, but not both, in the fashion world.",
      "Laylah is a visionary designer.",
      "Laylah is either a visionary designer or a creative one, but not necessarily both.",
      "If Laylah is creative, then she is either successful or influential, but not both."
    ],
    "context_fol": [
      "ecologically_conscious(Laylah)",
      "ecologically_conscious(Laylah) ⊕ influential(Laylah)",
      "has_vision(Laylah)",
      "has_vision(Laylah) ⊕ creative(Laylah)",
      "creative(Laylah) → (successful(Laylah) ⊕ influential(Laylah))"
    ],
    "background_story": "Laylah was a budding fashion designer with a unique fascination for the Tineoidea superfamily, a group of moths known for their striking, iridescent colors and intricate patterns. Inspired by the natural beauty of these creatures, Laylah created a clothing line that reflected the same level of elegance and sophistication. Her designs featured flowing silhouettes, shimmering fabrics, and meticulous embroidery that mimicked the moths' delicate wings. Laylah's collection, dubbed 'Moonlit Wings,' quickly gained attention in the fashion world for its ethereal quality and attention to detail. As her brand grew, Laylah continued to draw inspiration from the natural world, using her platform to raise awareness about the importance of conservation and sustainability in the fashion industry.",
    "name": "Laylah",
    "keyword": "tineoidea",
    "subject_category": "fashion designer"
  },
  {
    "facts": [
      "Arthur is arrogant in his dealings with people.",
      "Arthur offends others.",
      "Arthur gains admiration from others."
    ],
    "facts_fol": [
      "is_arrogant(Arthur)",
      "offend_others(Arthur)",
      "gain_admiration(Arthur)"
    ],
    "rules": [
      "If Arthur is either rude or tactless (but not both), then he is unpopular.",
      "Arthur is either arrogant or tactless, but not both, in his dealings with people.",
      "Everyone who offends others either loses respect or is rude (or both).",
      "Either Arthur gains admiration from others or he loses their respect, but he cannot experience both simultaneously."
    ],
    "rules_fol": [
      "(rude(Arthur) ⊕ tactless(Arthur)) → unpopular(Arthur)",
      "is_arrogant(Arthur) ⊕ tactless(Arthur)",
      "∀x (offend_others(x) → (lose_respect(x) ∨ rude(x)))",
      "gain_admiration(Arthur) ⊕ lose_respect(Arthur)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Anyone who lacks empathy is tactless.",
      "If Arthur is disrespectful, then he is either rude or inconsiderate, but not both.",
      "If someone lacks empathy, then they lose respect and damage their reputation."
    ],
    "distracting_rules_fol": [
      "∀x (lacks_empathy(x) → tactless(x))",
      "is_disrespectful(Arthur) → (rude(Arthur) ⊕ is_inconsiderate(Arthur))",
      "∀x (lack_empathy(x) → (lose_respect(x) ∧ damage_reputation(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Arthur gains admiration from others."
        ],
        "rules": "Either Arthur gains admiration from others or he loses their respect, but he cannot experience both simultaneously.",
        "conclusion": "Arthur does not lose respect."
      },
      {
        "facts": [
          "Arthur offends others.",
          "Arthur does not lose respect."
        ],
        "rules": "Everyone who offends others either loses respect or is rude (or both).",
        "conclusion": "Arthur is rude."
      },
      {
        "facts": [
          "Arthur is arrogant in his dealings with people."
        ],
        "rules": "Arthur is either arrogant or tactless, but not both, in his dealings with people.",
        "conclusion": "Arthur is not tactless."
      },
      {
        "facts": [
          "Arthur is rude.",
          "Arthur is not tactless."
        ],
        "rules": "If Arthur is either rude or tactless (but not both), then he is unpopular.",
        "conclusion": "Arthur is unpopular."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "gain_admiration(Arthur)"
        ],
        "rules": "gain_admiration(Arthur) ⊕ lose_respect(Arthur)",
        "conclusion": "¬lose_respect(Arthur)"
      },
      {
        "facts": [
          "offend_others(Arthur)",
          "¬lose_respect(Arthur)"
        ],
        "rules": "∀x (offend_others(x) → (lose_respect(x) ∨ rude(x)))",
        "conclusion": "rude(Arthur)"
      },
      {
        "facts": [
          "is_arrogant(Arthur)"
        ],
        "rules": "is_arrogant(Arthur) ⊕ tactless(Arthur)",
        "conclusion": "¬tactless(Arthur)"
      },
      {
        "facts": [
          "rude(Arthur)",
          "¬tactless(Arthur)"
        ],
        "rules": "(rude(Arthur) ⊕ tactless(Arthur)) → unpopular(Arthur)",
        "conclusion": "unpopular(Arthur)"
      }
    ],
    "conclusion": "Arthur is unpopular.",
    "conclusion_fol": "unpopular(Arthur)",
    "answer": "True",
    "context": [
      "Arthur gains admiration from others.",
      "Either Arthur gains admiration from others or he loses their respect, but he cannot experience both simultaneously.",
      "Arthur offends others.",
      "Everyone who offends others either loses respect or is rude (or both).",
      "Arthur is arrogant in his dealings with people.",
      "Arthur is either arrogant or tactless, but not both, in his dealings with people.",
      "If Arthur is either rude or tactless (but not both), then he is unpopular."
    ],
    "context_fol": [
      "gain_admiration(Arthur)",
      "gain_admiration(Arthur) ⊕ lose_respect(Arthur)",
      "offend_others(Arthur)",
      "∀x (offend_others(x) → (lose_respect(x) ∨ rude(x)))",
      "is_arrogant(Arthur)",
      "is_arrogant(Arthur) ⊕ tactless(Arthur)",
      "(rude(Arthur) ⊕ tactless(Arthur)) → unpopular(Arthur)"
    ],
    "background_story": "Arthur was a wealthy businessman known for his ruthless tactics and abrupt demeanor. His impoliteness was notorious, often leaving a trail of offended colleagues and acquaintances in his wake. He would frequently interrupt others, dismiss their ideas, and belittle their opinions. At a high-profile charity gala, Arthur publicly humiliated a young entrepreneur, mocking her innovative idea and reducing her to tears. The incident sparked outrage, and soon his impoliteness became the subject of heated discussions on social media. As a result, Arthur's reputation began to suffer, and his business partners started to distance themselves from him. His lack of tact and empathy ultimately led to his downfall, a cautionary tale of how impoliteness can have severe consequences.",
    "name": "Arthur",
    "keyword": "impoliteness",
    "subject_category": "human"
  },
  {
    "facts": [
      "Titus serves others.",
      "Titus fosters community.",
      "Titus is empathetic.",
      "Titus is revered.",
      "Titus uplifts spirits.",
      "Titus is generous.",
      "Titus is not humble."
    ],
    "facts_fol": [
      "serves_others(Titus)",
      "fosters_community(Titus)",
      "is_empathetic(Titus)",
      "is_revered(Titus)",
      "uplifts_spirits(Titus)",
      "is_generous(Titus)",
      "¬is_humble(Titus)"
    ],
    "rules": [
      "If someone offers blessings, then they inspire gratitude and serve others.",
      "If Titus is empathetic, then he is either compassionate or provides support, but not both.",
      "If Titus is revered, then he either uplifts spirits or offers blessings, but not both.",
      "If Titus is generous, then he is either humble or provides support, but not both."
    ],
    "rules_fol": [
      "∀x (offers_blessings(x) → (inspires_gratitude(x) ∧ serves_others(x)))",
      "is_empathetic(Titus) → (is_compassionate(Titus) ⊕ provides_support(Titus))",
      "is_revered(Titus) → (uplifts_spirits(Titus) ⊕ offers_blessings(Titus))",
      "is_generous(Titus) → (is_humble(Titus) ⊕ provides_support(Titus))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Titus lives simply, then he inspires gratitude and heals hearts.",
      "Anyone who cares deeply for others is compassionate.",
      "Anyone who leads prayer or gives guidance can offer blessings.",
      "Everyone who cares deeply about others either brings them comfort or provides support."
    ],
    "distracting_rules_fol": [
      "lives_simply(Titus) → (inspires_gratitude(Titus) ∧ heals_hearts(Titus))",
      "∀x (cares_deeply(x) → is_compassionate(x))",
      "∀x ((leads_prayer(x) ∨ gives_guidance(x)) → offers_blessings(x))",
      "∀x (cares_deeply(x) → (brings_comfort(x) ∨ provides_support(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Titus is generous.",
          "Titus is not humble."
        ],
        "rules": "If Titus is generous, then he is either humble or provides support, but not both.",
        "conclusion": "Titus provides support."
      },
      {
        "facts": [
          "Titus is revered.",
          "Titus uplifts spirits."
        ],
        "rules": "If Titus is revered, then he either uplifts spirits or offers blessings, but not both.",
        "conclusion": "Titus does not offer blessings."
      },
      {
        "facts": [
          "Titus is empathetic.",
          "Titus provides support."
        ],
        "rules": "If Titus is empathetic, then he is either compassionate or provides support, but not both.",
        "conclusion": "Titus is not compassionate."
      },
      {
        "facts": [
          "Titus does not offer blessings.",
          "Titus serves others."
        ],
        "rules": "If someone offers blessings, then they inspire gratitude and serve others.",
        "conclusion": null
      },
      {
        "facts": [
          "Titus is not compassionate.",
          "Titus fosters community."
        ],
        "rules": null,
        "conclusion": "If Titus is compassionate, then he either inspires gratitude or fosters community, but not both."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "is_generous(Titus)",
          "¬is_humble(Titus)"
        ],
        "rules": "is_generous(Titus) → (is_humble(Titus) ⊕ provides_support(Titus))",
        "conclusion": "provides_support(Titus)"
      },
      {
        "facts": [
          "is_revered(Titus)",
          "uplifts_spirits(Titus)"
        ],
        "rules": "is_revered(Titus) → (uplifts_spirits(Titus) ⊕ offers_blessings(Titus))",
        "conclusion": "¬offers_blessings(Titus)"
      },
      {
        "facts": [
          "is_empathetic(Titus)",
          "provides_support(Titus)"
        ],
        "rules": "is_empathetic(Titus) → (is_compassionate(Titus) ⊕ provides_support(Titus))",
        "conclusion": "¬is_compassionate(Titus)"
      },
      {
        "facts": [
          "¬offers_blessings(Titus)",
          "serves_others(Titus)"
        ],
        "rules": "∀x (offers_blessings(x) → (inspires_gratitude(x) ∧ serves_others(x)))",
        "conclusion": null
      },
      {
        "facts": [
          "¬is_compassionate(Titus)",
          "fosters_community(Titus)"
        ],
        "rules": null,
        "conclusion": "is_compassionate(Titus) → (inspires_gratitude(Titus) ⊕ fosters_community(Titus))"
      }
    ],
    "conclusion": "If Titus is compassionate, then he either inspires gratitude or fosters community, but not both.",
    "conclusion_fol": "is_compassionate(Titus) → (inspires_gratitude(Titus) ⊕ fosters_community(Titus))",
    "answer": "True",
    "context": [
      "Titus is generous.",
      "Titus is not humble.",
      "If Titus is generous, then he is either humble or provides support, but not both.",
      "Titus is revered.",
      "Titus uplifts spirits.",
      "If Titus is revered, then he either uplifts spirits or offers blessings, but not both.",
      "Titus is empathetic.",
      "If Titus is empathetic, then he is either compassionate or provides support, but not both.",
      "Titus serves others.",
      "If someone offers blessings, then they inspire gratitude and serve others.",
      "Titus fosters community."
    ],
    "context_fol": [
      "is_generous(Titus)",
      "¬is_humble(Titus)",
      "is_generous(Titus) → (is_humble(Titus) ⊕ provides_support(Titus))",
      "is_revered(Titus)",
      "uplifts_spirits(Titus)",
      "is_revered(Titus) → (uplifts_spirits(Titus) ⊕ offers_blessings(Titus))",
      "is_empathetic(Titus)",
      "is_empathetic(Titus) → (is_compassionate(Titus) ⊕ provides_support(Titus))",
      "serves_others(Titus)",
      "∀x (offers_blessings(x) → (inspires_gratitude(x) ∧ serves_others(x)))",
      "fosters_community(Titus)"
    ],
    "background_story": "Titus was a humble priest in a small village, known for his kindness and generosity. Every morning, he would offer a benison, a blessing, to the villagers as they began their day. His words of encouragement and comfort brought solace to those who were struggling. One harsh winter, a severe storm hit the village, leaving many without food or shelter. Titus opened the church doors, providing warmth and sustenance to all in need. His selfless acts and daily benisons reminded the villagers of the importance of gratitude and community. As the village prospered once more, the people came to regard Titus' benisons as a cherished tradition, a reminder of the power of faith and compassion to bring people together.",
    "name": "Titus",
    "keyword": "benison",
    "subject_category": "human"
  },
  {
    "facts": [
      "Brady does not donate his time to help others.",
      "Brady does not write songs.",
      "Brady plays instruments."
    ],
    "facts_fol": [
      "¬donates_time(Brady)",
      "¬writes_songs(Brady)",
      "plays_instruments(Brady)"
    ],
    "rules": [
      "Brady either creates art or pursues his passion.",
      "If Brady saves money, then he lives frugally.",
      "For Brady, either he donates his time to help others or he saves money, but not both.",
      "If someone either writes songs or plays instruments (but not both), then they create art."
    ],
    "rules_fol": [
      "creates_art(Brady) ∨ pursue_passion(Brady)",
      "saves_money(Brady) → live_frugally(Brady)",
      "donates_time(Brady) ⊕ saves_money(Brady)",
      "∀x ((writes_songs(x) ⊕ plays_instruments(x)) → creates_art(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Brady has talent, then he either builds a community or pursues his passion, but not both.",
      "If Brady values simplicity, then he either lives frugally or supports his community.",
      "Anyone who spends wisely or earns extra can save money.",
      "Brady expresses himself or creates art."
    ],
    "distracting_rules_fol": [
      "has_talent(Brady) → (builds_community(Brady) ⊕ pursue_passion(Brady))",
      "values_simplicity(Brady) → (live_frugally(Brady) ∨ supports_community(Brady))",
      "∀x ((spends_wisely(x) ∨ earns_extra(x)) → saves_money(x))",
      "expresses_himself(Brady) ∨ creates_art(Brady)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Brady does not write songs.",
          "Brady plays instruments."
        ],
        "rules": "If someone either writes songs or plays instruments (but not both), then they create art.",
        "conclusion": "Brady creates art."
      },
      {
        "facts": [
          "Brady does not donate his time to help others."
        ],
        "rules": "For Brady, either he donates his time to help others or he saves money, but not both.",
        "conclusion": "Brady saves money."
      },
      {
        "facts": [
          "Brady saves money."
        ],
        "rules": "If Brady saves money, then he lives frugally.",
        "conclusion": "Brady lives frugally."
      },
      {
        "facts": [
          "Brady creates art."
        ],
        "rules": "Brady either creates art or pursues his passion.",
        "conclusion": null
      },
      {
        "facts": [
          "Brady lives frugally."
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬writes_songs(Brady)",
          "plays_instruments(Brady)"
        ],
        "rules": "∀x ((writes_songs(x) ⊕ plays_instruments(x)) → creates_art(x))",
        "conclusion": "creates_art(Brady)"
      },
      {
        "facts": [
          "¬donates_time(Brady)"
        ],
        "rules": "donates_time(Brady) ⊕ saves_money(Brady)",
        "conclusion": "saves_money(Brady)"
      },
      {
        "facts": [
          "saves_money(Brady)"
        ],
        "rules": "saves_money(Brady) → live_frugally(Brady)",
        "conclusion": "live_frugally(Brady)"
      },
      {
        "facts": [
          "creates_art(Brady)"
        ],
        "rules": "creates_art(Brady) ∨ pursue_passion(Brady)",
        "conclusion": null
      },
      {
        "facts": [
          "live_frugally(Brady)"
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "conclusion": "If Brady lives frugally, then he can pursue his passion for music and make a positive impact on his community.",
    "conclusion_fol": "live_frugally(Brady) → (pursue_passion(Brady) ∧ make_positive_impact(Brady))",
    "answer": "Uncertain",
    "context": [
      "Brady does not write songs.",
      "Brady plays instruments.",
      "If someone either writes songs or plays instruments (but not both), then they create art.",
      "Brady does not donate his time to help others.",
      "For Brady, either he donates his time to help others or he saves money, but not both.",
      "If Brady saves money, then he lives frugally.",
      "Brady either creates art or pursues his passion."
    ],
    "context_fol": [
      "¬writes_songs(Brady)",
      "plays_instruments(Brady)",
      "∀x ((writes_songs(x) ⊕ plays_instruments(x)) → creates_art(x))",
      "¬donates_time(Brady)",
      "donates_time(Brady) ⊕ saves_money(Brady)",
      "saves_money(Brady) → live_frugally(Brady)",
      "creates_art(Brady) ∨ pursue_passion(Brady)"
    ],
    "background_story": "Brady was a young musician who lived life frugally, prioritizing his art over material possessions. He resided in a small studio apartment, where he spent most of his time composing music and repairing his own instruments. Brady's frugal nature allowed him to save money, which he used to fund his music tours and support local charities. He would often perform on the streets, using his talents to bring joy to those around him. Despite his simple lifestyle, Brady's music was rich and soulful, inspiring a community of like-minded individuals who appreciated his authenticity and generosity. His frugal approach to life enabled him to stay true to his artistic vision, creating a legacy that would outlast him.",
    "name": "Brady",
    "keyword": "fugally",
    "subject_category": "human"
  },
  {
    "facts": [
      "Warren explores ideas.",
      "Warren is curious.",
      "Warren is imaginative.",
      "Warren writes stories."
    ],
    "facts_fol": [
      "explores_ideas(Warren)",
      "is_curious(Warren)",
      "is_imaginative(Warren)",
      "writes_stories(Warren)"
    ],
    "rules": [
      "Warren is either a multitasker or a specialist, but not both.",
      "Warren has hobbies or is a multitasker.",
      "If Warren is curious, then he either has hobbies or is creative, but not both.",
      "Everyone who explores ideas either makes art or is creative (or both).",
      "If Warren is imaginative, then he either writes stories or makes art, but not both."
    ],
    "rules_fol": [
      "multitasker(Warren) ⊕ specialist(Warren)",
      "has_hobbies(Warren) ∨ multitasker(Warren)",
      "is_curious(Warren) → (has_hobbies(Warren) ⊕ is_creative(Warren))",
      "∀x (explores_ideas(x) → (makes_art(x) ∨ is_creative(x)))",
      "is_imaginative(Warren) → (writes_stories(Warren) ⊕ makes_art(Warren))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Warren tries new things, then he either learns quickly or is a multitasker (or both).",
      "For all humans, if they try new things and enjoy various activities, then they have hobbies.",
      "If Warren tries new things, then he either enjoys learning or is creative (or both).",
      "If Warren either plays music or crafts objects (but not both), then he makes art."
    ],
    "distracting_rules_fol": [
      "tries_new_things(Warren) → (learns_quickly(Warren) ∨ multitasker(Warren))",
      "∀x ((tries_new(x) ∧ enjoys_activities(x)) → has_hobbies(x))",
      "tries_new_things(Warren) → (enjoys_learning(Warren) ∨ is_creative(Warren))",
      "(plays_music(Warren) ⊕ crafts_objects(Warren)) → makes_art(Warren)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Warren is imaginative.",
          "Warren writes stories."
        ],
        "rules": "If Warren is imaginative, then he either writes stories or makes art, but not both.",
        "conclusion": "Warren does not make art."
      },
      {
        "facts": [
          "Warren explores ideas.",
          "Warren does not make art."
        ],
        "rules": "Everyone who explores ideas either makes art or is creative (or both).",
        "conclusion": "Warren is creative."
      },
      {
        "facts": [
          "Warren is curious.",
          "Warren is creative."
        ],
        "rules": "If Warren is curious, then he either has hobbies or is creative, but not both.",
        "conclusion": "Warren does not have hobbies."
      },
      {
        "facts": [
          "Warren does not have hobbies."
        ],
        "rules": "Warren has hobbies or is a multitasker.",
        "conclusion": "Warren is a multitasker."
      },
      {
        "facts": [
          "Warren is a multitasker."
        ],
        "rules": "Warren is either a multitasker or a specialist, but not both.",
        "conclusion": "Warren is not a specialist."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "is_imaginative(Warren)",
          "writes_stories(Warren)"
        ],
        "rules": "is_imaginative(Warren) → (writes_stories(Warren) ⊕ makes_art(Warren))",
        "conclusion": "¬makes_art(Warren)"
      },
      {
        "facts": [
          "explores_ideas(Warren)",
          "¬makes_art(Warren)"
        ],
        "rules": "∀x (explores_ideas(x) → (makes_art(x) ∨ is_creative(x)))",
        "conclusion": "is_creative(Warren)"
      },
      {
        "facts": [
          "is_curious(Warren)",
          "is_creative(Warren)"
        ],
        "rules": "is_curious(Warren) → (has_hobbies(Warren) ⊕ is_creative(Warren))",
        "conclusion": "¬has_hobbies(Warren)"
      },
      {
        "facts": [
          "¬has_hobbies(Warren)"
        ],
        "rules": "has_hobbies(Warren) ∨ multitasker(Warren)",
        "conclusion": "multitasker(Warren)"
      },
      {
        "facts": [
          "multitasker(Warren)"
        ],
        "rules": "multitasker(Warren) ⊕ specialist(Warren)",
        "conclusion": "¬specialist(Warren)"
      }
    ],
    "conclusion": "Warren is not a specialist.",
    "conclusion_fol": "¬specialist(Warren)",
    "answer": "True",
    "context": [
      "Warren is imaginative.",
      "Warren writes stories.",
      "If Warren is imaginative, then he either writes stories or makes art, but not both.",
      "Warren explores ideas.",
      "Everyone who explores ideas either makes art or is creative (or both).",
      "Warren is curious.",
      "If Warren is curious, then he either has hobbies or is creative, but not both.",
      "Warren has hobbies or is a multitasker.",
      "Warren is either a multitasker or a specialist, but not both."
    ],
    "context_fol": [
      "is_imaginative(Warren)",
      "writes_stories(Warren)",
      "is_imaginative(Warren) → (writes_stories(Warren) ⊕ makes_art(Warren))",
      "explores_ideas(Warren)",
      "∀x (explores_ideas(x) → (makes_art(x) ∨ is_creative(x)))",
      "is_curious(Warren)",
      "is_curious(Warren) → (has_hobbies(Warren) ⊕ is_creative(Warren))",
      "has_hobbies(Warren) ∨ multitasker(Warren)",
      "multitasker(Warren) ⊕ specialist(Warren)"
    ],
    "background_story": "Warren was a man of many interests and talents. Throughout his life, he dabbled in various hobbies and pursuits, never content to focus on just one. He dabbled in painting, filling his garage with half-finished canvases and eclectic art supplies. He dabbled in music, teaching himself to play the guitar and occasionally performing at local open mic nights. Warren even dabbled in cooking, experimenting with exotic recipes and ingredients in his kitchen. While he never became a master of any one thing, his diverse explorations made him a fascinating and well-rounded individual. His friends and family admired his curiosity and enthusiasm, and his home was always filled with the latest project he was dabbling in, whether it was woodworking, writing, or gardening.",
    "name": "Warren",
    "keyword": "dabbled",
    "subject_category": "human"
  },
  {
    "facts": [
      "Gabriella does not deliver results.",
      "Gabriella sets goals.",
      "Gabriella does not play tennis.",
      "Gabriella sets priorities.",
      "Gabriella does not track progress."
    ],
    "facts_fol": [
      "¬deliver_results(Gabriella)",
      "set_goals(Gabriella)",
      "¬plays_tennis(Gabriella)",
      "set_priorities(Gabriella)",
      "¬track_progress(Gabriella)"
    ],
    "rules": [
      "For all humans, if someone is mentally tough, then they can perform under pressure and achieve greatness.",
      "Anyone who faces challenges either delivers results or is mentally tough (or both).",
      "If Gabriella sets goals, then she faces challenges and stays focused.",
      "Gabriella either plays tennis or achieves greatness.",
      "If Gabriella either sets priorities or tracks progress (but not both), then she stays focused."
    ],
    "rules_fol": [
      "∀x (mentally_tough(x) → (perform_under_pressure(x) ∧ achieve_greatness(x)))",
      "∀x (face_challenges(x) → (deliver_results(x) ∨ mentally_tough(x)))",
      "set_goals(Gabriella) → (face_challenges(Gabriella) ∧ stay_focused(Gabriella))",
      "plays_tennis(Gabriella) ∨ achieve_greatness(Gabriella)",
      "(set_priorities(Gabriella) ⊕ track_progress(Gabriella)) → stay_focused(Gabriella)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Gabriella either handles stress or is mentally tough.",
      "If someone is disciplined, then they build confidence and face challenges.",
      "Gabriella either wins matches or achieves greatness.",
      "Everyone who pursues excellence either stays focused or builds confidence."
    ],
    "distracting_rules_fol": [
      "handles_stress(Gabriella) ∨ mentally_tough(Gabriella)",
      "∀x (is_disciplined(x) → (build_confidence(x) ∧ face_challenges(x)))",
      "wins_matches(Gabriella) ∨ achieve_greatness(Gabriella)",
      "∀x (pursue_excellence(x) → (stay_focused(x) ∨ build_confidence(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Gabriella sets priorities.",
          "Gabriella does not track progress."
        ],
        "rules": "If Gabriella either sets priorities or tracks progress (but not both), then she stays focused.",
        "conclusion": "Gabriella stays focused."
      },
      {
        "facts": [
          "Gabriella does not play tennis."
        ],
        "rules": "Gabriella either plays tennis or achieves greatness.",
        "conclusion": "Gabriella achieves greatness."
      },
      {
        "facts": [
          "Gabriella sets goals.",
          "Gabriella stays focused."
        ],
        "rules": "If Gabriella sets goals, then she faces challenges and stays focused.",
        "conclusion": "Gabriella faces challenges."
      },
      {
        "facts": [
          "Gabriella faces challenges.",
          "Gabriella does not deliver results."
        ],
        "rules": "Anyone who faces challenges either delivers results or is mentally tough (or both).",
        "conclusion": "Gabriella is mentally tough."
      },
      {
        "facts": [
          "Gabriella is mentally tough.",
          "Gabriella achieves greatness."
        ],
        "rules": "For all humans, if someone is mentally tough, then they can perform under pressure and achieve greatness.",
        "conclusion": "Gabriella can perform under pressure."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "set_priorities(Gabriella)",
          "¬track_progress(Gabriella)"
        ],
        "rules": "(set_priorities(Gabriella) ⊕ track_progress(Gabriella)) → stay_focused(Gabriella)",
        "conclusion": "stay_focused(Gabriella)"
      },
      {
        "facts": [
          "¬plays_tennis(Gabriella)"
        ],
        "rules": "plays_tennis(Gabriella) ∨ achieve_greatness(Gabriella)",
        "conclusion": "achieve_greatness(Gabriella)"
      },
      {
        "facts": [
          "set_goals(Gabriella)",
          "stay_focused(Gabriella)"
        ],
        "rules": "set_goals(Gabriella) → (face_challenges(Gabriella) ∧ stay_focused(Gabriella))",
        "conclusion": "face_challenges(Gabriella)"
      },
      {
        "facts": [
          "face_challenges(Gabriella)",
          "¬deliver_results(Gabriella)"
        ],
        "rules": "∀x (face_challenges(x) → (deliver_results(x) ∨ mentally_tough(x)))",
        "conclusion": "mentally_tough(Gabriella)"
      },
      {
        "facts": [
          "mentally_tough(Gabriella)",
          "achieve_greatness(Gabriella)"
        ],
        "rules": "∀x (mentally_tough(x) → (perform_under_pressure(x) ∧ achieve_greatness(x)))",
        "conclusion": "perform_under_pressure(Gabriella)"
      }
    ],
    "conclusion": "Gabriella can perform under pressure.",
    "conclusion_fol": "perform_under_pressure(Gabriella)",
    "answer": "True",
    "context": [
      "Gabriella sets priorities.",
      "Gabriella does not track progress.",
      "If Gabriella either sets priorities or tracks progress (but not both), then she stays focused.",
      "Gabriella does not play tennis.",
      "Gabriella either plays tennis or achieves greatness.",
      "Gabriella sets goals.",
      "If Gabriella sets goals, then she faces challenges and stays focused.",
      "Gabriella does not deliver results.",
      "Anyone who faces challenges either delivers results or is mentally tough (or both).",
      "For all humans, if someone is mentally tough, then they can perform under pressure and achieve greatness."
    ],
    "context_fol": [
      "set_priorities(Gabriella)",
      "¬track_progress(Gabriella)",
      "(set_priorities(Gabriella) ⊕ track_progress(Gabriella)) → stay_focused(Gabriella)",
      "¬plays_tennis(Gabriella)",
      "plays_tennis(Gabriella) ∨ achieve_greatness(Gabriella)",
      "set_goals(Gabriella)",
      "set_goals(Gabriella) → (face_challenges(Gabriella) ∧ stay_focused(Gabriella))",
      "¬deliver_results(Gabriella)",
      "∀x (face_challenges(x) → (deliver_results(x) ∨ mentally_tough(x)))",
      "∀x (mentally_tough(x) → (perform_under_pressure(x) ∧ achieve_greatness(x)))"
    ],
    "background_story": "Gabriella was a rising star in the world of professional tennis. With her powerful serve and agile footwork, she dominated the court, leaving opponents struggling to keep up. However, it was her mental toughness that truly set her apart. In high-pressure matches, Gabriella had a knack for delivering the clincher - the one shot that would seal the win and leave her opponents reeling. Her most memorable moment came in the finals of a Grand Slam tournament, where she faced off against the reigning champion. Down by a set and trailing in the second, Gabriella rallied, hitting a series of precise winners that left the crowd gasping. The final shot, a blazing ace down the line, was the clincher that won her the championship, cementing her status as a tennis legend.",
    "name": "Gabriella",
    "keyword": "clincher",
    "subject_category": "human"
  },
  {
    "facts": [
      "Lottie is healthy.",
      "Lottie has a disability."
    ],
    "facts_fol": [
      "is_healthy(Lottie)",
      "has_disability(Lottie)"
    ],
    "rules": [
      "For every human, they either have epilepsy or do not have epilepsy, but not both.",
      "Lottie is either able-bodied or has epilepsy, but not both.",
      "If Lottie is healthy, then she is either able-bodied or has a disability, but not both."
    ],
    "rules_fol": [
      "∀x (has_epilepsy(x) ⊕ does_not_have_epilepsy(x))",
      "is_able_bodied(Lottie) ⊕ has_epilepsy(Lottie)",
      "is_healthy(Lottie) → (is_able_bodied(Lottie) ⊕ has_disability(Lottie))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Lottie faces challenges, then she needs support and has epilepsy.",
      "Any person who runs daily or plays sports is able-bodied."
    ],
    "distracting_rules_fol": [
      "faces_challenges(Lottie) → (needs_support(Lottie) ∧ has_epilepsy(Lottie))",
      "∀x ((runs_daily(x) ∨ plays_sports(x)) → is_able_bodied(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Lottie is healthy.",
          "Lottie has a disability."
        ],
        "rules": "If Lottie is healthy, then she is either able-bodied or has a disability, but not both.",
        "conclusion": "Lottie is not able-bodied."
      },
      {
        "facts": [
          "Lottie is not able-bodied."
        ],
        "rules": "Lottie is either able-bodied or has epilepsy, but not both.",
        "conclusion": "Lottie has epilepsy."
      },
      {
        "facts": [
          "Lottie has epilepsy."
        ],
        "rules": "For every human, they either have epilepsy or do not have epilepsy, but not both.",
        "conclusion": "Lottie does not have epilepsy."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "is_healthy(Lottie)",
          "has_disability(Lottie)"
        ],
        "rules": "is_healthy(Lottie) → (is_able_bodied(Lottie) ⊕ has_disability(Lottie))",
        "conclusion": "¬is_able_bodied(Lottie)"
      },
      {
        "facts": [
          "¬is_able_bodied(Lottie)"
        ],
        "rules": "is_able_bodied(Lottie) ⊕ has_epilepsy(Lottie)",
        "conclusion": "has_epilepsy(Lottie)"
      },
      {
        "facts": [
          "has_epilepsy(Lottie)"
        ],
        "rules": "∀x (has_epilepsy(x) ⊕ does_not_have_epilepsy(x))",
        "conclusion": "does_not_have_epilepsy(Lottie)"
      }
    ],
    "conclusion": "Lottie does not have epilepsy.",
    "conclusion_fol": "does_not_have_epilepsy(Lottie)",
    "answer": "False",
    "context": [
      "Lottie is healthy.",
      "Lottie has a disability.",
      "If Lottie is healthy, then she is either able-bodied or has a disability, but not both.",
      "Lottie is either able-bodied or has epilepsy, but not both.",
      "For every human, they either have epilepsy or do not have epilepsy, but not both."
    ],
    "context_fol": [
      "is_healthy(Lottie)",
      "has_disability(Lottie)",
      "is_healthy(Lottie) → (is_able_bodied(Lottie) ⊕ has_disability(Lottie))",
      "is_able_bodied(Lottie) ⊕ has_epilepsy(Lottie)",
      "∀x (has_epilepsy(x) ⊕ does_not_have_epilepsy(x))"
    ],
    "background_story": "Lottie was a bright and ambitious young girl who lived with epilepsy. Despite the challenges it posed, she never let her condition define her. With the support of her family and medication, Lottie learned to manage her seizures and live a fulfilling life. She became an advocate for epilepsy awareness, sharing her story to help reduce stigma and promote understanding. Lottie's resilience and determination inspired those around her, and she went on to pursue her passion for art, using her talents to raise funds for epilepsy research. Through her journey, Lottie proved that with the right support and mindset, anyone can thrive and make a difference, regardless of their health conditions.",
    "name": "Lottie",
    "keyword": "epilepsy",
    "subject_category": "human"
  },
  {
    "facts": [
      "Yamileth is not talented.",
      "Yamileth is expressive.",
      "Yamileth is charismatic.",
      "Yamileth paints."
    ],
    "facts_fol": [
      "¬talented(Yamileth)",
      "expressive(Yamileth)",
      "charismatic(Yamileth)",
      "paints(Yamileth)"
    ],
    "rules": [
      "All expressive individuals are creative.",
      "If Yamileth is a visionary, then she is either charismatic or influential, but not both.",
      "If Yamileth is an artist, then she is either a visionary or talented, but not both.",
      "Everyone who paints is an artist."
    ],
    "rules_fol": [
      "∀x (expressive(x) → creative(x))",
      "visionary(Yamileth) → (charismatic(Yamileth) ⊕ influential(Yamileth))",
      "artist(Yamileth) → (visionary(Yamileth) ⊕ talented(Yamileth))",
      "∀x (paints(x) → artist(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Yamileth either thinks deeply or is creative.",
      "Yamileth either thinks deeply or is influential.",
      "Anyone who sees beyond the ordinary or thinks deeply is a visionary.",
      "Anyone who crafts beauty is an artist."
    ],
    "distracting_rules_fol": [
      "thinks_deeply(Yamileth) ∨ creative(Yamileth)",
      "thinks_deeply(Yamileth) ∨ influential(Yamileth)",
      "∀x ((sees_beyond(x) ∨ thinks_deeply(x)) → visionary(x))",
      "∀x (crafts_beauty(x) → artist(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Yamileth paints."
        ],
        "rules": "Everyone who paints is an artist.",
        "conclusion": "Yamileth is an artist."
      },
      {
        "facts": [
          "Yamileth is an artist.",
          "Yamileth is not talented."
        ],
        "rules": "If Yamileth is an artist, then she is either a visionary or talented, but not both.",
        "conclusion": "Yamileth is a visionary."
      },
      {
        "facts": [
          "Yamileth is a visionary.",
          "Yamileth is charismatic."
        ],
        "rules": "If Yamileth is a visionary, then she is either charismatic or influential, but not both.",
        "conclusion": "Yamileth is not influential."
      },
      {
        "facts": [
          "Yamileth is expressive."
        ],
        "rules": "All expressive individuals are creative.",
        "conclusion": "Yamileth is creative."
      },
      {
        "facts": [
          "Yamileth is creative.",
          "Yamileth is not influential."
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "paints(Yamileth)"
        ],
        "rules": "∀x (paints(x) → artist(x))",
        "conclusion": "artist(Yamileth)"
      },
      {
        "facts": [
          "artist(Yamileth)",
          "¬talented(Yamileth)"
        ],
        "rules": "artist(Yamileth) → (visionary(Yamileth) ⊕ talented(Yamileth))",
        "conclusion": "visionary(Yamileth)"
      },
      {
        "facts": [
          "visionary(Yamileth)",
          "charismatic(Yamileth)"
        ],
        "rules": "visionary(Yamileth) → (charismatic(Yamileth) ⊕ influential(Yamileth))",
        "conclusion": "¬influential(Yamileth)"
      },
      {
        "facts": [
          "expressive(Yamileth)"
        ],
        "rules": "∀x (expressive(x) → creative(x))",
        "conclusion": "creative(Yamileth)"
      },
      {
        "facts": [
          "creative(Yamileth)",
          "¬influential(Yamileth)"
        ],
        "rules": null,
        "conclusion": null
      }
    ],
    "conclusion": "If Yamileth is either creative or provocative (but not both), then she is influential.",
    "conclusion_fol": "(creative(Yamileth) ⊕ provocative(Yamileth)) → influential(Yamileth)",
    "answer": "Uncertain",
    "context": [
      "Yamileth paints.",
      "Everyone who paints is an artist.",
      "Yamileth is not talented.",
      "If Yamileth is an artist, then she is either a visionary or talented, but not both.",
      "Yamileth is charismatic.",
      "If Yamileth is a visionary, then she is either charismatic or influential, but not both.",
      "Yamileth is expressive.",
      "All expressive individuals are creative."
    ],
    "context_fol": [
      "paints(Yamileth)",
      "∀x (paints(x) → artist(x))",
      "¬talented(Yamileth)",
      "artist(Yamileth) → (visionary(Yamileth) ⊕ talented(Yamileth))",
      "charismatic(Yamileth)",
      "visionary(Yamileth) → (charismatic(Yamileth) ⊕ influential(Yamileth))",
      "expressive(Yamileth)",
      "∀x (expressive(x) → creative(x))"
    ],
    "background_story": "Yamileth was a talented and provocative artist known for her unflinching explorations of the human form. Her latest series, 'Beneath the Flesh,' delved into the intricacies of the body, laying bare the vulnerabilities and strengths of human flesh. Through her work, Yamileth aimed to challenge societal norms and ignite conversations about identity, mortality, and the beauty of imperfection. Her pieces, often featuring bold, expressive figures, seemed to pulse with life, as if the flesh itself was alive and breathing. Critics praised her fearless approach, and collectors clamored for her work, drawn to the raw emotion and unbridled energy that seemed to emanate from every brushstroke.",
    "name": "Yamileth",
    "keyword": "flesh",
    "subject_category": "human"
  },
  {
    "facts": [
      "Dimples' ascent offers a breathtaking view.",
      "Dimples' ascent of Demavend is a high-altitude adventure.",
      "Dimples' ascent of Demavend does not involve a scenic route."
    ],
    "facts_fol": [
      "breathtaking_view(Dimples)",
      "high_altitude(Dimples)",
      "¬scenic_route(Dimples)"
    ],
    "rules": [
      "Every adventure is challenging or rewarding (or both).",
      "Conquering Demavend is either exhilarating or challenging, but not necessarily both.",
      "Any adventure that involves a thrilling climb and offers a breathtaking view is exhilarating.",
      "Every high-altitude adventure either involves a scenic route or a thrilling climb (or both)."
    ],
    "rules_fol": [
      "∀x (challenging(x) ∨ rewarding(x))",
      "exhilarating(Dimples) ⊕ challenging(Dimples)",
      "∀x ((thrilling_climb(x) ∧ breathtaking_view(x)) → exhilarating(x))",
      "∀x (high_altitude(x) → (scenic_route(x) ∨ thrilling_climb(x)))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If conquering Demavend has difficult terrain, then it is either challenging or a fulfilling experience (but not both).",
      "If conquering Demavend is a risky venture, then it is physically demanding and exhilarating.",
      "If Dimples' ascent of Demavend is a solo expedition, then it involves either stunning landscapes or a thrilling climb (or both)."
    ],
    "distracting_rules_fol": [
      "difficult_terrain(Dimples) → (challenging(Dimples) ⊕ fulfilling_experience(Dimples))",
      "risky_venture(Dimples) → (physically_demanding(Dimples) ∧ exhilarating(Dimples))",
      "solo_expedition(Dimples) → (stunning_landscapes(Dimples) ∨ thrilling_climb(Dimples))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Dimples' ascent of Demavend is a high-altitude adventure.",
          "Dimples' ascent of Demavend does not involve a scenic route."
        ],
        "rules": "Every high-altitude adventure either involves a scenic route or a thrilling climb (or both).",
        "conclusion": "Dimples' ascent of Demavend involves a thrilling climb."
      },
      {
        "facts": [
          "Dimples' ascent of Demavend involves a thrilling climb.",
          "Dimples' ascent offers a breathtaking view."
        ],
        "rules": "Any adventure that involves a thrilling climb and offers a breathtaking view is exhilarating.",
        "conclusion": "Dimples is exhilarating."
      },
      {
        "facts": [
          "Dimples is exhilarating."
        ],
        "rules": "Conquering Demavend is either exhilarating or challenging, but not necessarily both.",
        "conclusion": "Conquering Dimples is not challenging."
      },
      {
        "facts": [
          "Conquering Dimples is not challenging."
        ],
        "rules": "Every adventure is challenging or rewarding (or both).",
        "conclusion": "Conquering Demavend is rewarding."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "high_altitude(Dimples)",
          "¬scenic_route(Dimples)"
        ],
        "rules": "∀x (high_altitude(x) → (scenic_route(x) ∨ thrilling_climb(x)))",
        "conclusion": "thrilling_climb(Dimples)"
      },
      {
        "facts": [
          "thrilling_climb(Dimples)",
          "breathtaking_view(Dimples)"
        ],
        "rules": "∀x ((thrilling_climb(x) ∧ breathtaking_view(x)) → exhilarating(x))",
        "conclusion": "exhilarating(Dimples)"
      },
      {
        "facts": [
          "exhilarating(Dimples)"
        ],
        "rules": "exhilarating(Dimples) ⊕ challenging(Dimples)",
        "conclusion": "¬challenging(Dimples)"
      },
      {
        "facts": [
          "¬challenging(Dimples)"
        ],
        "rules": "∀x (challenging(x) ∨ rewarding(x))",
        "conclusion": "rewarding(Dimples)"
      }
    ],
    "conclusion": "Conquering Demavend is rewarding.",
    "conclusion_fol": "rewarding(Dimples)",
    "answer": "True",
    "context": [
      "Dimples' ascent of Demavend is a high-altitude adventure.",
      "Dimples' ascent of Demavend does not involve a scenic route.",
      "Every high-altitude adventure either involves a scenic route or a thrilling climb (or both).",
      "Dimples' ascent offers a breathtaking view.",
      "Any adventure that involves a thrilling climb and offers a breathtaking view is exhilarating.",
      "Conquering Demavend is either exhilarating or challenging, but not necessarily both.",
      "Every adventure is challenging or rewarding (or both)."
    ],
    "context_fol": [
      "high_altitude(Dimples)",
      "¬scenic_route(Dimples)",
      "∀x (high_altitude(x) → (scenic_route(x) ∨ thrilling_climb(x)))",
      "breathtaking_view(Dimples)",
      "∀x ((thrilling_climb(x) ∧ breathtaking_view(x)) → exhilarating(x))",
      "exhilarating(Dimples) ⊕ challenging(Dimples)",
      "∀x (challenging(x) ∨ rewarding(x))"
    ],
    "background_story": "Dimples, a seasoned mountaineer, had always been fascinated by the majestic Demavend, the highest peak in Iran. She spent years training and planning her ascent, studying the mountain's unpredictable weather patterns and treacherous terrain. Finally, the day arrived when Dimples embarked on her solo expedition to conquer Demavend. The climb was grueling, with steep rock faces and icy slopes, but Dimples persevered, driven by her determination to reach the summit. As she stood atop Demavend, the breathtaking view of the Alborz range took her breath away. The sense of accomplishment and the stunning beauty of the mountain solidified Dimples' love for adventure and her respect for the power of nature.",
    "name": "Dimples",
    "keyword": "demavend",
    "subject_category": "adventure"
  },
  {
    "facts": [
      "Elle is resilient.",
      "Elle faces adversity.",
      "Elle is talented."
    ],
    "facts_fol": [
      "is_resilient(Elle)",
      "faces_adversity(Elle)",
      "has_talent(Elle)"
    ],
    "rules": [
      "For all humans, if they are physically challenged or mentally strong (or both), then they can achieve greatness.",
      "Elle is either resilient or mentally strong, but not both, and this exclusivity drives her unique approach to overcoming challenges.",
      "If Elle faces adversity, then she is either talented or physically challenged, but not both."
    ],
    "rules_fol": [
      "∀x ((physically_challenged(x) ∨ mentally_strong(x)) → achieve_greatness(x))",
      "is_resilient(Elle) ⊕ mentally_strong(Elle)",
      "faces_adversity(Elle) → (has_talent(Elle) ⊕ physically_challenged(Elle))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Anyone who copes well with difficulties is mentally strong.",
      "If Elle overcomes obstacles, then she is either physically challenged or emotionally tough, but not both."
    ],
    "distracting_rules_fol": [
      "∀x (copes_well(x) → mentally_strong(x))",
      "overcomes_obstacles(Elle) → (physically_challenged(Elle) ⊕ emotionally_tough(Elle))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Elle faces adversity.",
          "Elle is talented."
        ],
        "rules": "If Elle faces adversity, then she is either talented or physically challenged, but not both.",
        "conclusion": "Elle is not physically challenged."
      },
      {
        "facts": [
          "Elle is resilient."
        ],
        "rules": "Elle is either resilient or mentally strong, but not both, and this exclusivity drives her unique approach to overcoming challenges.",
        "conclusion": "Elle is not mentally strong."
      },
      {
        "facts": [
          "Elle is not physically challenged.",
          "Elle is not mentally strong."
        ],
        "rules": "For all humans, if they are physically challenged or mentally strong (or both), then they can achieve greatness.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "faces_adversity(Elle)",
          "has_talent(Elle)"
        ],
        "rules": "faces_adversity(Elle) → (has_talent(Elle) ⊕ physically_challenged(Elle))",
        "conclusion": "¬physically_challenged(Elle)"
      },
      {
        "facts": [
          "is_resilient(Elle)"
        ],
        "rules": "is_resilient(Elle) ⊕ mentally_strong(Elle)",
        "conclusion": "¬mentally_strong(Elle)"
      },
      {
        "facts": [
          "¬physically_challenged(Elle)",
          "¬mentally_strong(Elle)"
        ],
        "rules": "∀x ((physically_challenged(x) ∨ mentally_strong(x)) → achieve_greatness(x))",
        "conclusion": null
      }
    ],
    "conclusion": "Elle does not achieve greatness.",
    "conclusion_fol": "¬achieve_greatness(Elle)",
    "answer": "Uncertain",
    "context": [
      "Elle faces adversity.",
      "Elle is talented.",
      "If Elle faces adversity, then she is either talented or physically challenged, but not both.",
      "Elle is resilient.",
      "Elle is either resilient or mentally strong, but not both, and this exclusivity drives her unique approach to overcoming challenges.",
      "For all humans, if they are physically challenged or mentally strong (or both), then they can achieve greatness."
    ],
    "context_fol": [
      "faces_adversity(Elle)",
      "has_talent(Elle)",
      "faces_adversity(Elle) → (has_talent(Elle) ⊕ physically_challenged(Elle))",
      "is_resilient(Elle)",
      "is_resilient(Elle) ⊕ mentally_strong(Elle)",
      "∀x ((physically_challenged(x) ∨ mentally_strong(x)) → achieve_greatness(x))"
    ],
    "background_story": "Elle was a talented young dancer whose career was tragically cut short when she lost her left limb in a devastating accident. The injury could have shattered her dreams, but Elle's spirit remained unbroken. With the help of her family and a team of dedicated physical therapists, she learned to adapt, undergoing rigorous rehabilitation to regain her strength and mobility. Elle discovered a new passion for adaptive sports, particularly swimming, where she found freedom in the water, unencumbered by the limitations of her physical limb. Her determination inspired countless others, and Elle went on to compete in the Paralympics, winning medals and proving that with courage and resilience, one can overcome even the most daunting challenges.",
    "name": "Elle",
    "keyword": "limb",
    "subject_category": "human"
  },
  {
    "facts": [
      "Tootsie does not react easily.",
      "Tootsie is stable."
    ],
    "facts_fol": [
      "¬reacts_easily(Tootsie)",
      "is_stable(Tootsie)"
    ],
    "rules": [
      "For all chemical compounds, if a compound is versatile and has many applications, then it is valuable.",
      "Butanone is versatile if it reacts easily.",
      "Butanone is either stable or has many applications, but not necessarily both."
    ],
    "rules_fol": [
      "∀x ((is_versatile(x) ∧ has_many_applications(x)) → is_valuable(x))",
      "reacts_easily(Tootsie) → is_versatile(Tootsie)",
      "is_stable(Tootsie) ⊕ has_many_applications(Tootsie)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If butanone dissolves fast, then it is versatile and forms polymers.",
      "If butanone is soluble or reactive, then it has many applications."
    ],
    "distracting_rules_fol": [
      "dissolves_fast(Tootsie) → (is_versatile(Tootsie) ∧ forms_polymers(Tootsie))",
      "(is_soluble(Tootsie) ∨ is_reactive(Tootsie)) → has_many_applications(Tootsie)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Tootsie is stable."
        ],
        "rules": "Butanone is either stable or has many applications, but not necessarily both.",
        "conclusion": "Tootsie does not have many applications."
      },
      {
        "facts": [
          "Tootsie does not react easily."
        ],
        "rules": "Butanone is versatile if it reacts easily.",
        "conclusion": null
      },
      {
        "facts": [
          "Tootsie does not have many applications."
        ],
        "rules": "For all chemical compounds, if a compound is versatile and has many applications, then it is valuable.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "is_stable(Tootsie)"
        ],
        "rules": "is_stable(Tootsie) ⊕ has_many_applications(Tootsie)",
        "conclusion": "¬has_many_applications(Tootsie)"
      },
      {
        "facts": [
          "¬reacts_easily(Tootsie)"
        ],
        "rules": "reacts_easily(Tootsie) → is_versatile(Tootsie)",
        "conclusion": null
      },
      {
        "facts": [
          "¬has_many_applications(Tootsie)"
        ],
        "rules": "∀x ((is_versatile(x) ∧ has_many_applications(x)) → is_valuable(x))",
        "conclusion": null
      }
    ],
    "conclusion": "Tootsie is not valuable.",
    "conclusion_fol": "¬is_valuable(Tootsie)",
    "answer": "Uncertain",
    "context": [
      "Tootsie is stable.",
      "Butanone is either stable or has many applications, but not necessarily both.",
      "Tootsie does not react easily.",
      "Butanone is versatile if it reacts easily.",
      "For all chemical compounds, if a compound is versatile and has many applications, then it is valuable."
    ],
    "context_fol": [
      "is_stable(Tootsie)",
      "is_stable(Tootsie) ⊕ has_many_applications(Tootsie)",
      "¬reacts_easily(Tootsie)",
      "reacts_easily(Tootsie) → is_versatile(Tootsie)",
      "∀x ((is_versatile(x) ∧ has_many_applications(x)) → is_valuable(x))"
    ],
    "background_story": "Tootsie was a brilliant chemist known for her groundbreaking work with organic compounds. Her fascination with butanone, a versatile solvent and intermediate in the production of various chemicals, led to several innovative discoveries. Tootsie's research on the properties and applications of butanone opened new avenues in the field of materials science. She developed novel methods for synthesizing butanone-based polymers, which found applications in adhesives, coatings, and pharmaceuticals. Tootsie's dedication to understanding the intricacies of butanone chemistry earned her recognition in the scientific community, and her work paved the way for future generations of researchers to explore the potential of this seemingly simple, yet remarkable compound.",
    "name": "Tootsie",
    "keyword": "butanone",
    "subject_category": "chemical compound"
  },
  {
    "facts": [
      "Alejandro is not determined.",
      "Alejandro stays positive.",
      "Alejandro does not adapt quickly.",
      "Alejandro has a chronic illness.",
      "Alejandro seeks support."
    ],
    "facts_fol": [
      "¬determined(Alejandro)",
      "stays_positive(Alejandro)",
      "¬adapts_quickly(Alejandro)",
      "has_chronic_illness(Alejandro)",
      "seeks_support(Alejandro)"
    ],
    "rules": [
      "If Alejandro faces adversity, then he is either resilient or stays positive, but not both.",
      "Alejandro either adapts quickly or is proactive.",
      "If Alejandro has a chronic illness, then he either faces adversity or seeks support, but not both."
    ],
    "rules_fol": [
      "faces_adversity(Alejandro) → (resilient(Alejandro) ⊕ stays_positive(Alejandro))",
      "adapts_quickly(Alejandro) ∨ proactive(Alejandro)",
      "has_chronic_illness(Alejandro) → (faces_adversity(Alejandro) ⊕ seeks_support(Alejandro))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Anyone who fights their condition either inspires others or is resilient (or both).",
      "For all humans, if they set goals and take action, then they are proactive.",
      "If Alejandro experiences setbacks, then he faces adversity and finds new passions."
    ],
    "distracting_rules_fol": [
      "∀x (fights_condition(x) → (inspires_others(x) ∨ resilient(x)))",
      "∀x ((sets_goals(x) ∧ takes_action(x)) → proactive(x))",
      "experiences_setbacks(Alejandro) → (faces_adversity(Alejandro) ∧ finds_new_passions(Alejandro))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Alejandro has a chronic illness.",
          "Alejandro seeks support."
        ],
        "rules": "If Alejandro has a chronic illness, then he either faces adversity or seeks support, but not both.",
        "conclusion": "Alejandro does not face adversity."
      },
      {
        "facts": [
          "Alejandro does not adapt quickly."
        ],
        "rules": "Alejandro either adapts quickly or is proactive.",
        "conclusion": "Alejandro is proactive."
      },
      {
        "facts": [
          "Alejandro does not face adversity.",
          "Alejandro stays positive."
        ],
        "rules": "If Alejandro faces adversity, then he is either resilient or stays positive, but not both.",
        "conclusion": null
      },
      {
        "facts": [
          "Alejandro is proactive.",
          "Alejandro is not determined."
        ],
        "rules": null,
        "conclusion": "Alejandro is resilient, or proactive, or determined."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "has_chronic_illness(Alejandro)",
          "seeks_support(Alejandro)"
        ],
        "rules": "has_chronic_illness(Alejandro) → (faces_adversity(Alejandro) ⊕ seeks_support(Alejandro))",
        "conclusion": "¬faces_adversity(Alejandro)"
      },
      {
        "facts": [
          "¬adapts_quickly(Alejandro)"
        ],
        "rules": "adapts_quickly(Alejandro) ∨ proactive(Alejandro)",
        "conclusion": "proactive(Alejandro)"
      },
      {
        "facts": [
          "¬faces_adversity(Alejandro)",
          "stays_positive(Alejandro)"
        ],
        "rules": "faces_adversity(Alejandro) → (resilient(Alejandro) ⊕ stays_positive(Alejandro))",
        "conclusion": null
      },
      {
        "facts": [
          "proactive(Alejandro)",
          "¬determined(Alejandro)"
        ],
        "rules": null,
        "conclusion": "resilient(Alejandro) ∨ (proactive(Alejandro) ∨ determined(Alejandro))"
      }
    ],
    "conclusion": "Alejandro is resilient, or proactive, or determined.",
    "conclusion_fol": "resilient(Alejandro) ∨ (proactive(Alejandro) ∨ determined(Alejandro))",
    "answer": "True",
    "context": [
      "Alejandro has a chronic illness.",
      "Alejandro seeks support.",
      "If Alejandro has a chronic illness, then he either faces adversity or seeks support, but not both.",
      "Alejandro does not adapt quickly.",
      "Alejandro either adapts quickly or is proactive.",
      "Alejandro stays positive.",
      "If Alejandro faces adversity, then he is either resilient or stays positive, but not both.",
      "Alejandro is not determined."
    ],
    "context_fol": [
      "has_chronic_illness(Alejandro)",
      "seeks_support(Alejandro)",
      "has_chronic_illness(Alejandro) → (faces_adversity(Alejandro) ⊕ seeks_support(Alejandro))",
      "¬adapts_quickly(Alejandro)",
      "adapts_quickly(Alejandro) ∨ proactive(Alejandro)",
      "stays_positive(Alejandro)",
      "faces_adversity(Alejandro) → (resilient(Alejandro) ⊕ stays_positive(Alejandro))",
      "¬determined(Alejandro)"
    ],
    "background_story": "Alejandro was a vibrant and active young man who loved playing soccer and hiking. However, his life took a dramatic turn when he was diagnosed with ankylosing spondylitis, a chronic inflammatory disease that affects the spine. Despite the challenges, Alejandro refused to let the condition define him. He learned to manage his symptoms through a combination of medication, physical therapy, and lifestyle changes. With the support of his loved ones, Alejandro adapted his hobbies to accommodate his new limitations, discovering a passion for swimming and yoga. He became an advocate for awareness about spondylitis, sharing his story to inspire others to stay positive and proactive in the face of chronic illness. Alejandro's resilience and determination serve as a testament to the human spirit's capacity to overcome adversity.",
    "name": "Alejandro",
    "keyword": "spondylitis",
    "subject_category": "human"
  },
  {
    "facts": [
      "Alana learns quickly.",
      "Alana takes risks.",
      "Alana does not think creatively."
    ],
    "facts_fol": [
      "learns_quickly(Alana)",
      "takes_risks(Alana)",
      "¬thinks_creatively(Alana)"
    ],
    "rules": [
      "Every person either makes mistakes or discovers something new (or both).",
      "If Alana is curious, then she either makes mistakes or learns quickly, but not both.",
      "Everyone who takes risks either thinks creatively or is curious (or both)."
    ],
    "rules_fol": [
      "∀x (makes_mistakes(x) ∨ discovers_something_new(x))",
      "is_curious(Alana) → (makes_mistakes(Alana) ⊕ learns_quickly(Alana))",
      "∀x (takes_risks(x) → (thinks_creatively(x) ∨ is_curious(x)))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Everyone finds solutions or makes mistakes.",
      "Everyone who explores ideas either finds solutions or is curious (or both)."
    ],
    "distracting_rules_fol": [
      "∀x (finds_solutions(x) ∨ makes_mistakes(x))",
      "∀x (explores_ideas(x) → (finds_solutions(x) ∨ is_curious(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Alana takes risks.",
          "Alana does not think creatively."
        ],
        "rules": "Everyone who takes risks either thinks creatively or is curious (or both).",
        "conclusion": "Alana is curious."
      },
      {
        "facts": [
          "Alana is curious.",
          "Alana learns quickly."
        ],
        "rules": "If Alana is curious, then she either makes mistakes or learns quickly, but not both.",
        "conclusion": "Alana does not make mistakes."
      },
      {
        "facts": [
          "Alana does not make mistakes."
        ],
        "rules": "Every person either makes mistakes or discovers something new (or both).",
        "conclusion": "Alana discovers something new."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "takes_risks(Alana)",
          "¬thinks_creatively(Alana)"
        ],
        "rules": "∀x (takes_risks(x) → (thinks_creatively(x) ∨ is_curious(x)))",
        "conclusion": "is_curious(Alana)"
      },
      {
        "facts": [
          "is_curious(Alana)",
          "learns_quickly(Alana)"
        ],
        "rules": "is_curious(Alana) → (makes_mistakes(Alana) ⊕ learns_quickly(Alana))",
        "conclusion": "¬makes_mistakes(Alana)"
      },
      {
        "facts": [
          "¬makes_mistakes(Alana)"
        ],
        "rules": "∀x (makes_mistakes(x) ∨ discovers_something_new(x))",
        "conclusion": "discovers_something_new(Alana)"
      }
    ],
    "conclusion": "Alana discovers something new.",
    "conclusion_fol": "discovers_something_new(Alana)",
    "answer": "True",
    "context": [
      "Alana takes risks.",
      "Alana does not think creatively.",
      "Everyone who takes risks either thinks creatively or is curious (or both).",
      "Alana learns quickly.",
      "If Alana is curious, then she either makes mistakes or learns quickly, but not both.",
      "Every person either makes mistakes or discovers something new (or both)."
    ],
    "context_fol": [
      "takes_risks(Alana)",
      "¬thinks_creatively(Alana)",
      "∀x (takes_risks(x) → (thinks_creatively(x) ∨ is_curious(x)))",
      "learns_quickly(Alana)",
      "is_curious(Alana) → (makes_mistakes(Alana) ⊕ learns_quickly(Alana))",
      "∀x (makes_mistakes(x) ∨ discovers_something_new(x))"
    ],
    "background_story": "Alana was a brilliant but slightly accident-prone chemist. One fateful day, while working on a groundbreaking project, she caused a massive spillage of a rare and volatile chemical. The lab was evacuated, and Alana was devastated by her carelessness. However, as she worked to clean up the spillage, she noticed something peculiar - the chemical had reacted with another substance in a unique way, creating a potentially revolutionary new compound. Alana's accidental discovery led to a breakthrough in her field, earning her accolades and recognition. Though the initial spillage was a setback, it ultimately paved the way for her most significant achievement, teaching her that even mistakes can sometimes lead to extraordinary outcomes.",
    "name": "Alana",
    "keyword": "spillage",
    "subject_category": "human"
  },
  {
    "facts": [
      "Capri is not a rockstar.",
      "Capri plays the guitar.",
      "Capri composes lyrics."
    ],
    "facts_fol": [
      "¬is_rockstar(Capri)",
      "plays_guitar(Capri)",
      "composes_lyrics(Capri)"
    ],
    "rules": [
      "If Capri is a rockstar or performs live (or both), then she has loud vocals.",
      "A person either writes songs or performs live, but not necessarily both.",
      "If someone plays an instrument and composes lyrics, then they can write songs."
    ],
    "rules_fol": [
      "(is_rockstar(Capri) ∨ performs_live(Capri)) → has_loud_vocals(Capri)",
      "∀x (writes_songs(x) ⊕ performs_live(x))",
      "∀x ((plays_guitar(x) ∧ composes_lyrics(x)) → writes_songs(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Capri either sings or performs live.",
      "If Capri has creative energy or expresses emotion, then she can write songs."
    ],
    "distracting_rules_fol": [
      "sings_possibly(Capri) ∨ performs_live(Capri)",
      "(has_creativenergy(Capri) ∨ expresses_emotion(Capri)) → writes_songs(Capri)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Capri plays the guitar.",
          "Capri composes lyrics."
        ],
        "rules": "If someone plays an instrument and composes lyrics, then they can write songs.",
        "conclusion": "Capri writes songs."
      },
      {
        "facts": [
          "Capri writes songs."
        ],
        "rules": "A person either writes songs or performs live, but not necessarily both.",
        "conclusion": "Capri does not perform live."
      },
      {
        "facts": [
          "Capri is not a rockstar.",
          "Capri does not perform live."
        ],
        "rules": "If Capri is a rockstar or performs live (or both), then she has loud vocals.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "plays_guitar(Capri)",
          "composes_lyrics(Capri)"
        ],
        "rules": "∀x ((plays_guitar(x) ∧ composes_lyrics(x)) → writes_songs(x))",
        "conclusion": "writes_songs(Capri)"
      },
      {
        "facts": [
          "writes_songs(Capri)"
        ],
        "rules": "∀x (writes_songs(x) ⊕ performs_live(x))",
        "conclusion": "¬performs_live(Capri)"
      },
      {
        "facts": [
          "¬is_rockstar(Capri)",
          "¬performs_live(Capri)"
        ],
        "rules": "(is_rockstar(Capri) ∨ performs_live(Capri)) → has_loud_vocals(Capri)",
        "conclusion": null
      }
    ],
    "conclusion": "Capri does not have loud vocals.",
    "conclusion_fol": "¬has_loud_vocals(Capri)",
    "answer": "Uncertain",
    "context": [
      "Capri plays the guitar.",
      "Capri composes lyrics.",
      "If someone plays an instrument and composes lyrics, then they can write songs.",
      "A person either writes songs or performs live, but not necessarily both.",
      "Capri is not a rockstar.",
      "If Capri is a rockstar or performs live (or both), then she has loud vocals."
    ],
    "context_fol": [
      "plays_guitar(Capri)",
      "composes_lyrics(Capri)",
      "∀x ((plays_guitar(x) ∧ composes_lyrics(x)) → writes_songs(x))",
      "∀x (writes_songs(x) ⊕ performs_live(x))",
      "¬is_rockstar(Capri)",
      "(is_rockstar(Capri) ∨ performs_live(Capri)) → has_loud_vocals(Capri)"
    ],
    "background_story": "Capri was the lead singer of a popular rock band known for their high-energy performances. She had a voice that could shatter glass, and her screaming vocals were a hallmark of the band's sound. Offstage, Capri was soft-spoken and reserved, but when she stepped into the spotlight, she transformed into a force of nature. Her screaming lyrics echoed through stadiums and arenas, captivating audiences and leaving them breathless. Despite the strain on her vocal cords, Capri couldn't resist the rush of adrenaline that came with belting out her signature screams. She was a true rockstar, and her screaming vocals had become an integral part of her identity and the band's success.",
    "name": "Capri",
    "keyword": "screaming",
    "subject_category": "human"
  },
  {
    "facts": [
      "Monkey lives sustainably.",
      "Monkey has self-control.",
      "Monkey considers others.",
      "Monkey is disciplined.",
      "Monkey is frugal."
    ],
    "facts_fol": [
      "live_sustainably(Monkey)",
      "has_self(Monkey)",
      "considers_others(Monkey)",
      "is_disciplined(Monkey)",
      "is_frugal(Monkey)"
    ],
    "rules": [
      "If Monkey is modest, then he earns respect and promotes harmony.",
      "If Monkey shares food, then he earns respect and lives sustainably.",
      "If Monkey has self-control and considers others, then he will share food.",
      "Monkey lives simply or is modest.",
      "If Monkey is disciplined, then he either lives simply or is frugal, but not both."
    ],
    "rules_fol": [
      "modest(Monkey) → (earn_respect(Monkey) ∧ promote_harmony(Monkey))",
      "share_food(Monkey) → (earn_respect(Monkey) ∧ live_sustainably(Monkey))",
      "(has_self(Monkey) ∧ considers_others(Monkey)) → share_food(Monkey)",
      "lives_simply(Monkey) ∨ modest(Monkey)",
      "is_disciplined(Monkey) → (lives_simply(Monkey) ⊕ is_frugal(Monkey))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Monkey takes turns and cares for his community, then he earns respect.",
      "If Monkey cares for others, then he will share his food.",
      "If Monkey takes only what he needs, then he is modest.",
      "If Monkey thinks ahead, then he cares about nature and lives simply."
    ],
    "distracting_rules_fol": [
      "(takes_turns(Monkey) ∧ cares_community(Monkey)) → earn_respect(Monkey)",
      "cares(Monkey) → share_food(Monkey)",
      "takes_only_needed(Monkey) → modest(Monkey)",
      "thinks_ahead(Monkey) → (cares_nature(Monkey) ∧ lives_simply(Monkey))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Monkey is disciplined.",
          "Monkey is frugal."
        ],
        "rules": "If Monkey is disciplined, then he either lives simply or is frugal, but not both.",
        "conclusion": "Monkey does not live simply."
      },
      {
        "facts": [
          "Monkey does not live simply."
        ],
        "rules": "Monkey lives simply or is modest.",
        "conclusion": "Monkey is modest."
      },
      {
        "facts": [
          "Monkey has self-control.",
          "Monkey considers others."
        ],
        "rules": "If Monkey has self-control and considers others, then he will share food.",
        "conclusion": "Monkey shares food."
      },
      {
        "facts": [
          "Monkey shares food.",
          "Monkey lives sustainably."
        ],
        "rules": "If Monkey shares food, then he earns respect and lives sustainably.",
        "conclusion": "Monkey earns respect."
      },
      {
        "facts": [
          "Monkey is modest.",
          "Monkey earns respect."
        ],
        "rules": "If Monkey is modest, then he earns respect and promotes harmony.",
        "conclusion": "Monkey promotes harmony."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "is_disciplined(Monkey)",
          "is_frugal(Monkey)"
        ],
        "rules": "is_disciplined(Monkey) → (lives_simply(Monkey) ⊕ is_frugal(Monkey))",
        "conclusion": "¬lives_simply(Monkey)"
      },
      {
        "facts": [
          "¬lives_simply(Monkey)"
        ],
        "rules": "lives_simply(Monkey) ∨ modest(Monkey)",
        "conclusion": "modest(Monkey)"
      },
      {
        "facts": [
          "has_self(Monkey)",
          "considers_others(Monkey)"
        ],
        "rules": "(has_self(Monkey) ∧ considers_others(Monkey)) → share_food(Monkey)",
        "conclusion": "share_food(Monkey)"
      },
      {
        "facts": [
          "share_food(Monkey)",
          "live_sustainably(Monkey)"
        ],
        "rules": "share_food(Monkey) → (earn_respect(Monkey) ∧ live_sustainably(Monkey))",
        "conclusion": "earn_respect(Monkey)"
      },
      {
        "facts": [
          "modest(Monkey)",
          "earn_respect(Monkey)"
        ],
        "rules": "modest(Monkey) → (earn_respect(Monkey) ∧ promote_harmony(Monkey))",
        "conclusion": "promote_harmony(Monkey)"
      }
    ],
    "conclusion": "Monkey promotes harmony.",
    "conclusion_fol": "promote_harmony(Monkey)",
    "answer": "True",
    "context": [
      "Monkey is disciplined.",
      "Monkey is frugal.",
      "If Monkey is disciplined, then he either lives simply or is frugal, but not both.",
      "Monkey lives simply or is modest.",
      "Monkey has self-control.",
      "Monkey considers others.",
      "If Monkey has self-control and considers others, then he will share food.",
      "Monkey lives sustainably.",
      "If Monkey shares food, then he earns respect and lives sustainably.",
      "If Monkey is modest, then he earns respect and promotes harmony."
    ],
    "context_fol": [
      "is_disciplined(Monkey)",
      "is_frugal(Monkey)",
      "is_disciplined(Monkey) → (lives_simply(Monkey) ⊕ is_frugal(Monkey))",
      "lives_simply(Monkey) ∨ modest(Monkey)",
      "has_self(Monkey)",
      "considers_others(Monkey)",
      "(has_self(Monkey) ∧ considers_others(Monkey)) → share_food(Monkey)",
      "live_sustainably(Monkey)",
      "share_food(Monkey) → (earn_respect(Monkey) ∧ live_sustainably(Monkey))",
      "modest(Monkey) → (earn_respect(Monkey) ∧ promote_harmony(Monkey))"
    ],
    "background_story": "Monkey, a clever and resourceful capuchin, lived in a lush jungle with a vast array of fruits and berries. However, Monkey was different from the others; he had a modest approach to life. While his troop would gorge on the abundant food, Monkey would only take a modicum of what he needed, always leaving some for the other creatures. His self-control and consideration earned him respect and admiration from the jungle community. Monkey's modest ways also inspired others to adopt a more balanced lifestyle, ensuring the jungle's resources were preserved for generations to come. With his simple yet profound philosophy, Monkey became a symbol of moderation and harmony in the jungle.",
    "name": "Monkey",
    "keyword": "modicum",
    "subject_category": "animal"
  },
  {
    "facts": [
      "Jesus does not produce albums.",
      "Jesus is passionate.",
      "Jesus is dedicated.",
      "Jesus supports his community."
    ],
    "facts_fol": [
      "¬produce_albums(Jesus)",
      "passionate(Jesus)",
      "is_dedicated(Jesus)",
      "supports_community(Jesus)"
    ],
    "rules": [
      "If Jesus is inspired, then he can either create music or mentor others, but not both.",
      "Jesus either produces albums or mentors others, but not both.",
      "If Jesus is passionate, then he is inspired and helps others.",
      "If Jesus is dedicated, then he either empowers people or helps others, but not both.",
      "Jesus either supports his community or empowers people, but not both."
    ],
    "rules_fol": [
      "inspired(Jesus) → (create_music(Jesus) ⊕ mentor_others(Jesus))",
      "produce_albums(Jesus) ⊕ mentor_others(Jesus)",
      "passionate(Jesus) → (inspired(Jesus) ∧ help_others(Jesus))",
      "is_dedicated(Jesus) → (empowers_people(Jesus) ⊕ help_others(Jesus))",
      "supports_community(Jesus) ⊕ empowers_people(Jesus)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Anyone who has a vision or shares knowledge can mentor others.",
      "Everyone has ideas or is inspired.",
      "If Jesus has a vision, then he works hard and helps others.",
      "Anyone who leads by example empowers people."
    ],
    "distracting_rules_fol": [
      "∀x ((has_vision(x) ∨ shares_knowledge(x)) → mentor_others(x))",
      "∀x (has_ideas(x) ∨ inspired(x))",
      "has_vision(Jesus) → (work_hard(Jesus) ∧ help_others(Jesus))",
      "∀x (leads_by_example(x) → empowers_people(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Jesus supports his community."
        ],
        "rules": "Jesus either supports his community or empowers people, but not both.",
        "conclusion": "Jesus does not empower people."
      },
      {
        "facts": [
          "Jesus is dedicated.",
          "Jesus does not empower people."
        ],
        "rules": "If Jesus is dedicated, then he either empowers people or helps others, but not both.",
        "conclusion": "Jesus helps others."
      },
      {
        "facts": [
          "Jesus is passionate.",
          "Jesus helps others."
        ],
        "rules": "If Jesus is passionate, then he is inspired and helps others.",
        "conclusion": "Jesus is inspired."
      },
      {
        "facts": [
          "Jesus does not produce albums."
        ],
        "rules": "Jesus either produces albums or mentors others, but not both.",
        "conclusion": "Jesus mentors others."
      },
      {
        "facts": [
          "Jesus is inspired.",
          "Jesus mentors others."
        ],
        "rules": "If Jesus is inspired, then he can either create music or mentor others, but not both.",
        "conclusion": "Jesus creates music."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "supports_community(Jesus)"
        ],
        "rules": "supports_community(Jesus) ⊕ empowers_people(Jesus)",
        "conclusion": "¬empowers_people(Jesus)"
      },
      {
        "facts": [
          "is_dedicated(Jesus)",
          "¬empowers_people(Jesus)"
        ],
        "rules": "is_dedicated(Jesus) → (empowers_people(Jesus) ⊕ help_others(Jesus))",
        "conclusion": "help_others(Jesus)"
      },
      {
        "facts": [
          "passionate(Jesus)",
          "help_others(Jesus)"
        ],
        "rules": "passionate(Jesus) → (inspired(Jesus) ∧ help_others(Jesus))",
        "conclusion": "inspired(Jesus)"
      },
      {
        "facts": [
          "¬produce_albums(Jesus)"
        ],
        "rules": "produce_albums(Jesus) ⊕ mentor_others(Jesus)",
        "conclusion": "mentor_others(Jesus)"
      },
      {
        "facts": [
          "inspired(Jesus)",
          "mentor_others(Jesus)"
        ],
        "rules": "inspired(Jesus) → (create_music(Jesus) ⊕ mentor_others(Jesus))",
        "conclusion": "create_music(Jesus)"
      }
    ],
    "conclusion": "Jesus creates music.",
    "conclusion_fol": "create_music(Jesus)",
    "answer": "False",
    "context": [
      "Jesus supports his community.",
      "Jesus either supports his community or empowers people, but not both.",
      "Jesus is dedicated.",
      "If Jesus is dedicated, then he either empowers people or helps others, but not both.",
      "Jesus is passionate.",
      "If Jesus is passionate, then he is inspired and helps others.",
      "Jesus does not produce albums.",
      "Jesus either produces albums or mentors others, but not both.",
      "If Jesus is inspired, then he can either create music or mentor others, but not both."
    ],
    "context_fol": [
      "supports_community(Jesus)",
      "supports_community(Jesus) ⊕ empowers_people(Jesus)",
      "is_dedicated(Jesus)",
      "is_dedicated(Jesus) → (empowers_people(Jesus) ⊕ help_others(Jesus))",
      "passionate(Jesus)",
      "passionate(Jesus) → (inspired(Jesus) ∧ help_others(Jesus))",
      "¬produce_albums(Jesus)",
      "produce_albums(Jesus) ⊕ mentor_others(Jesus)",
      "inspired(Jesus) → (create_music(Jesus) ⊕ mentor_others(Jesus))"
    ],
    "background_story": "Jesus, a skilled music producer, had always been fascinated by the work of Beyoncé. He spent countless hours studying her albums, from the harmonies to the beats. Inspired by her dedication to empowerment and self-love, Jesus decided to create music that would uplift and inspire his community. He started a local music program, where he taught young artists how to produce and write their own songs. Jesus's program flourished, and soon his students were performing at local events, spreading messages of hope and unity. Jesus's admiration for Beyoncé had sparked a movement, proving that with hard work and passion, one person could make a significant impact. His students affectionately nicknamed him 'Bey Jesus,' a testament to the positive influence he had on their lives.",
    "name": "Jesus",
    "keyword": "bey",
    "subject_category": "human"
  },
  {
    "facts": [
      "Stefan is emotional.",
      "Stefan is not reserved in his relationships.",
      "Stefan is not adventurous.",
      "Stefan is free.",
      "Stefan is not bold."
    ],
    "facts_fol": [
      "emotional(Stefan)",
      "¬reserved(Stefan)",
      "¬adventurous(Stefan)",
      "is_free(Stefan)",
      "¬is_bold(Stefan)"
    ],
    "rules": [
      "Stefan is either romantic or practical when it comes to relationships, but not both.",
      "If Stefan is impulsive, then he is either romantic or cautious in relationships, but not both.",
      "If Stefan is emotional, then he is either cautious or reserved in his relationships, but not both.",
      "Anyone who is spontaneous is either adventurous or impulsive (or both).",
      "If Stefan is free, then he is either bold or spontaneous, but not both."
    ],
    "rules_fol": [
      "romantic(Stefan) ⊕ practical(Stefan)",
      "impulsive(Stefan) → (romantic(Stefan) ⊕ cautious(Stefan))",
      "emotional(Stefan) → (cautious(Stefan) ⊕ reserved(Stefan))",
      "∀x (spontaneous(x) → (adventurous(x) ∨ impulsive(x)))",
      "is_free(Stefan) → (is_bold(Stefan) ⊕ spontaneous(Stefan))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Stefan gets married, then he is either rational or romantic, but not both.",
      "If Stefan acts rashly, then he is either an optimist or cautious, but not both.",
      "Anyone who acts quickly or follows their heart is impulsive.",
      "Stefan either acts quickly or is spontaneous."
    ],
    "distracting_rules_fol": [
      "gets_married(Stefan) → (is_rational(Stefan) ⊕ romantic(Stefan))",
      "acts_rashly(Stefan) → (is_optimist(Stefan) ⊕ cautious(Stefan))",
      "∀x ((acts_quick(x) ∨ follows_heart(x)) → impulsive(x))",
      "acts_quick(Stefan) ∨ spontaneous(Stefan)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Stefan is free.",
          "Stefan is not bold."
        ],
        "rules": "If Stefan is free, then he is either bold or spontaneous, but not both.",
        "conclusion": "Stefan is spontaneous."
      },
      {
        "facts": [
          "Stefan is spontaneous.",
          "Stefan is not adventurous."
        ],
        "rules": "Anyone who is spontaneous is either adventurous or impulsive (or both).",
        "conclusion": "Stefan is impulsive."
      },
      {
        "facts": [
          "Stefan is emotional.",
          "Stefan is not reserved in his relationships."
        ],
        "rules": "If Stefan is emotional, then he is either cautious or reserved in his relationships, but not both.",
        "conclusion": "Stefan is cautious in relationships."
      },
      {
        "facts": [
          "Stefan is impulsive.",
          "Stefan is cautious in relationships."
        ],
        "rules": "If Stefan is impulsive, then he is either romantic or cautious in relationships, but not both.",
        "conclusion": "Stefan is not romantic when it comes to relationships."
      },
      {
        "facts": [
          "Stefan is not romantic when it comes to relationships."
        ],
        "rules": "Stefan is either romantic or practical when it comes to relationships, but not both.",
        "conclusion": "Stefan is practical when it comes to relationships."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "is_free(Stefan)",
          "¬is_bold(Stefan)"
        ],
        "rules": "is_free(Stefan) → (is_bold(Stefan) ⊕ spontaneous(Stefan))",
        "conclusion": "spontaneous(Stefan)"
      },
      {
        "facts": [
          "spontaneous(Stefan)",
          "¬adventurous(Stefan)"
        ],
        "rules": "∀x (spontaneous(x) → (adventurous(x) ∨ impulsive(x)))",
        "conclusion": "impulsive(Stefan)"
      },
      {
        "facts": [
          "emotional(Stefan)",
          "¬reserved(Stefan)"
        ],
        "rules": "emotional(Stefan) → (cautious(Stefan) ⊕ reserved(Stefan))",
        "conclusion": "cautious(Stefan)"
      },
      {
        "facts": [
          "impulsive(Stefan)",
          "cautious(Stefan)"
        ],
        "rules": "impulsive(Stefan) → (romantic(Stefan) ⊕ cautious(Stefan))",
        "conclusion": "¬romantic(Stefan)"
      },
      {
        "facts": [
          "¬romantic(Stefan)"
        ],
        "rules": "romantic(Stefan) ⊕ practical(Stefan)",
        "conclusion": "practical(Stefan)"
      }
    ],
    "conclusion": "Stefan is practical when it comes to relationships.",
    "conclusion_fol": "practical(Stefan)",
    "answer": "True",
    "context": [
      "Stefan is free.",
      "Stefan is not bold.",
      "If Stefan is free, then he is either bold or spontaneous, but not both.",
      "Stefan is not adventurous.",
      "Anyone who is spontaneous is either adventurous or impulsive (or both).",
      "Stefan is emotional.",
      "Stefan is not reserved in his relationships.",
      "If Stefan is emotional, then he is either cautious or reserved in his relationships, but not both.",
      "If Stefan is impulsive, then he is either romantic or cautious in relationships, but not both.",
      "Stefan is either romantic or practical when it comes to relationships, but not both."
    ],
    "context_fol": [
      "is_free(Stefan)",
      "¬is_bold(Stefan)",
      "is_free(Stefan) → (is_bold(Stefan) ⊕ spontaneous(Stefan))",
      "¬adventurous(Stefan)",
      "∀x (spontaneous(x) → (adventurous(x) ∨ impulsive(x)))",
      "emotional(Stefan)",
      "¬reserved(Stefan)",
      "emotional(Stefan) → (cautious(Stefan) ⊕ reserved(Stefan))",
      "impulsive(Stefan) → (romantic(Stefan) ⊕ cautious(Stefan))",
      "romantic(Stefan) ⊕ practical(Stefan)"
    ],
    "background_story": "Stefan, a charming and successful businessman, had always been swept off his feet by the idea of romance. In a whirlwind affair, he met and married the beautiful but fiery Isabella. The wedding was a lavish affair, with friends and family gathered from all over. However, it didn't take long for Stefan to realize he had made a grave mistake. Isabella's high maintenance lifestyle and constant need for drama clashed sharply with his laid-back nature. Despite his best efforts, their relationship crumbled under the weight of misunderstandings and unmet expectations. Stefan's friends and family had warned him about the mismatch, but he had been too blinded by love to listen. Now, he was left to navigate the complicated and painful process of divorce, wishing he had taken the time to truly know Isabella before saying 'I do'.",
    "name": "Stefan",
    "keyword": "mismarry",
    "subject_category": "human"
  },
  {
    "facts": [
      "Lane builds a professional network.",
      "Lane sets goals.",
      "Lane does not mitigate risks.",
      "Lane does not create value."
    ],
    "facts_fol": [
      "builds_network(Lane)",
      "sets_goals(Lane)",
      "¬mitigates_risks(Lane)",
      "¬creates_value(Lane)"
    ],
    "rules": [
      "If Lane effectively manages his margins, then he can either navigate economic downturns or capitalize on new opportunities, but not both.",
      "Every businessman who makes investments either manages their margin or analyses markets.",
      "A businessman either builds a professional network or analyses markets, but these activities are not mutually exclusive.",
      "If Lane sets goals, then he can either mitigate risks or capitalize on opportunities, but not both.",
      "Every businessman either creates value or makes investments."
    ],
    "rules_fol": [
      "manages_margin(Lane) → (navigates_downturns(Lane) ⊕ capitalizes_opportunities(Lane))",
      "∀x (makes_investments(x) → (manages_margin(x) ∨ analyses_markets(x)))",
      "∀x (builds_network(x) ⊕ analyses_markets(x))",
      "sets_goals(Lane) → (mitigates_risks(Lane) ⊕ capitalizes_opportunities(Lane))",
      "∀x (creates_value(x) ∨ makes_investments(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Every businessman who tracks expenses effectively manages their margin.",
      "If Lane either tracks trends or reads financials (but not both), then he is able to analyse markets.",
      "Lane either sees trends or capitalizes on opportunities.",
      "If Lane owns a business, then he either hires experts or makes investments, but not both."
    ],
    "distracting_rules_fol": [
      "∀x (tracks_expenses(x) → manages_margin(x))",
      "(tracks_trends(Lane) ⊕ reads_financials(Lane)) → analyses_markets(Lane)",
      "sees_trends(Lane) ∨ capitalizes_opportunities(Lane)",
      "owns_business(Lane) → (hires_experts(Lane) ⊕ makes_investments(Lane))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Lane does not create value."
        ],
        "rules": "Every businessman either creates value or makes investments.",
        "conclusion": "Lane makes investments."
      },
      {
        "facts": [
          "Lane sets goals.",
          "Lane does not mitigate risks."
        ],
        "rules": "If Lane sets goals, then he can either mitigate risks or capitalize on opportunities, but not both.",
        "conclusion": "Lane capitalizes on new opportunities."
      },
      {
        "facts": [
          "Lane builds a professional network."
        ],
        "rules": "A businessman either builds a professional network or analyses markets, but these activities are not mutually exclusive.",
        "conclusion": "Lane does not analyse the markets."
      },
      {
        "facts": [
          "Lane makes investments.",
          "Lane does not analyse the markets."
        ],
        "rules": "Every businessman who makes investments either manages their margin or analyses markets.",
        "conclusion": "Lane effectively manages his margins."
      },
      {
        "facts": [
          "Lane effectively manages his margins.",
          "Lane capitalizes on new opportunities."
        ],
        "rules": "If Lane effectively manages his margins, then he can either navigate economic downturns or capitalize on new opportunities, but not both.",
        "conclusion": "Lane does not navigate economic downturns."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬creates_value(Lane)"
        ],
        "rules": "∀x (creates_value(x) ∨ makes_investments(x))",
        "conclusion": "makes_investments(Lane)"
      },
      {
        "facts": [
          "sets_goals(Lane)",
          "¬mitigates_risks(Lane)"
        ],
        "rules": "sets_goals(Lane) → (mitigates_risks(Lane) ⊕ capitalizes_opportunities(Lane))",
        "conclusion": "capitalizes_opportunities(Lane)"
      },
      {
        "facts": [
          "builds_network(Lane)"
        ],
        "rules": "∀x (builds_network(x) ⊕ analyses_markets(x))",
        "conclusion": "¬analyses_markets(Lane)"
      },
      {
        "facts": [
          "makes_investments(Lane)",
          "¬analyses_markets(Lane)"
        ],
        "rules": "∀x (makes_investments(x) → (manages_margin(x) ∨ analyses_markets(x)))",
        "conclusion": "manages_margin(Lane)"
      },
      {
        "facts": [
          "manages_margin(Lane)",
          "capitalizes_opportunities(Lane)"
        ],
        "rules": "manages_margin(Lane) → (navigates_downturns(Lane) ⊕ capitalizes_opportunities(Lane))",
        "conclusion": "¬navigates_downturns(Lane)"
      }
    ],
    "conclusion": "Lane does not navigate economic downturns.",
    "conclusion_fol": "¬navigates_downturns(Lane)",
    "answer": "True",
    "context": [
      "Lane does not create value.",
      "Every businessman either creates value or makes investments.",
      "Lane sets goals.",
      "Lane does not mitigate risks.",
      "If Lane sets goals, then he can either mitigate risks or capitalize on opportunities, but not both.",
      "Lane builds a professional network.",
      "A businessman either builds a professional network or analyses markets, but these activities are not mutually exclusive.",
      "Every businessman who makes investments either manages their margin or analyses markets.",
      "If Lane effectively manages his margins, then he can either navigate economic downturns or capitalize on new opportunities, but not both."
    ],
    "context_fol": [
      "¬creates_value(Lane)",
      "∀x (creates_value(x) ∨ makes_investments(x))",
      "sets_goals(Lane)",
      "¬mitigates_risks(Lane)",
      "sets_goals(Lane) → (mitigates_risks(Lane) ⊕ capitalizes_opportunities(Lane))",
      "builds_network(Lane)",
      "∀x (builds_network(x) ⊕ analyses_markets(x))",
      "∀x (makes_investments(x) → (manages_margin(x) ∨ analyses_markets(x)))",
      "manages_margin(Lane) → (navigates_downturns(Lane) ⊕ capitalizes_opportunities(Lane))"
    ],
    "background_story": "Lane was a shrewd entrepreneur who made his fortune by understanding the importance of margin in business. He started his career as a small trader, buying and selling goods in local markets. Lane soon realized that the key to success lay not in selling at the highest price, but in maintaining a healthy margin between cost and sale. He applied this principle to his subsequent ventures, from real estate to tech startups. By carefully managing his margins, Lane was able to navigate economic downturns and capitalize on opportunities, expanding his business empire exponentially. Today, he is a respected figure in the financial world, known for his insightful analyses and ability to spot profitable margins in even the most competitive markets.",
    "name": "Lane",
    "keyword": "margin",
    "subject_category": "businessman"
  },
  {
    "facts": [
      "Zander is not powerful.",
      "Zander has claws.",
      "Zander is not feared.",
      "Zander has scales.",
      "Zander flies fast."
    ],
    "facts_fol": [
      "¬powerful(Zander)",
      "has_claws(Zander)",
      "¬feared(Zander)",
      "has_scales(Zander)",
      "flies_fast(Zander)"
    ],
    "rules": [
      "If Zander is feared, then he is legendary.",
      "All mythical creatures that burn things are destructive.",
      "Zander either roars loudly or sets things ablaze, but not both.",
      "If Zander has claws, then he either breathes fire or roars loudly, but not both.",
      "If Zander has scales, then he either breathes fire or flies fast, but not both."
    ],
    "rules_fol": [
      "feared(Zander) → legendary(Zander)",
      "∀x (burns(x) → destructive(x))",
      "roars_loud(Zander) ⊕ burns(Zander)",
      "has_claws(Zander) → (breathes_fire(Zander) ⊕ roars_loud(Zander))",
      "has_scales(Zander) → (breathes_fire(Zander) ⊕ flies_fast(Zander))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Zander is either majestic or legendary.",
      "All mythical creatures that either wreak havoc or cause chaos (but not both) are destructive.",
      "If Zander lives in a volcano, then he either destroys villages or burns things, but not both.",
      "If Zander is a monstrous creature, then he either stomps hard or roars loudly, but not both.",
      "If Zander is fierce, then he either has sharp teeth or breathes fire."
    ],
    "distracting_rules_fol": [
      "is_majestic(Zander) ∨ legendary(Zander)",
      "∀x ((wreaks_havoc(x) ⊕ causes_chaos(x)) → destructive(x))",
      "lives_in_volcano(Zander) → (destroys_villages(Zander) ⊕ burns(Zander))",
      "is_monstrous(Zander) → (stomps_hard(Zander) ⊕ roars_loud(Zander))",
      "is_fierce(Zander) → (has_sharp_teeth(Zander) ∨ breathes_fire(Zander))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Zander has scales.",
          "Zander flies fast."
        ],
        "rules": "If Zander has scales, then he either breathes fire or flies fast, but not both.",
        "conclusion": "Zander does not breathe fire."
      },
      {
        "facts": [
          "Zander has claws.",
          "Zander does not breathe fire."
        ],
        "rules": "If Zander has claws, then he either breathes fire or roars loudly, but not both.",
        "conclusion": "Zander roars loudly."
      },
      {
        "facts": [
          "Zander roars loudly."
        ],
        "rules": "Zander either roars loudly or sets things ablaze, but not both.",
        "conclusion": "Zander does not burn things."
      },
      {
        "facts": [
          "Zander does not burn things."
        ],
        "rules": "All mythical creatures that burn things are destructive.",
        "conclusion": null
      },
      {
        "facts": [
          "Zander is not feared."
        ],
        "rules": "If Zander is feared, then he is legendary.",
        "conclusion": null
      },
      {
        "facts": [
          "Zander is not powerful."
        ],
        "rules": null,
        "conclusion": "If Zander is powerful, then he is either destructive or legendary, but not both."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "has_scales(Zander)",
          "flies_fast(Zander)"
        ],
        "rules": "has_scales(Zander) → (breathes_fire(Zander) ⊕ flies_fast(Zander))",
        "conclusion": "¬breathes_fire(Zander)"
      },
      {
        "facts": [
          "has_claws(Zander)",
          "¬breathes_fire(Zander)"
        ],
        "rules": "has_claws(Zander) → (breathes_fire(Zander) ⊕ roars_loud(Zander))",
        "conclusion": "roars_loud(Zander)"
      },
      {
        "facts": [
          "roars_loud(Zander)"
        ],
        "rules": "roars_loud(Zander) ⊕ burns(Zander)",
        "conclusion": "¬burns(Zander)"
      },
      {
        "facts": [
          "¬burns(Zander)"
        ],
        "rules": "∀x (burns(x) → destructive(x))",
        "conclusion": null
      },
      {
        "facts": [
          "¬feared(Zander)"
        ],
        "rules": "feared(Zander) → legendary(Zander)",
        "conclusion": null
      },
      {
        "facts": [
          "¬powerful(Zander)"
        ],
        "rules": null,
        "conclusion": "powerful(Zander) → (destructive(Zander) ⊕ legendary(Zander))"
      }
    ],
    "conclusion": "If Zander is powerful, then he is either destructive or legendary, but not both.",
    "conclusion_fol": "powerful(Zander) → (destructive(Zander) ⊕ legendary(Zander))",
    "answer": "True",
    "context": [
      "Zander has scales.",
      "Zander flies fast.",
      "If Zander has scales, then he either breathes fire or flies fast, but not both.",
      "Zander has claws.",
      "If Zander has claws, then he either breathes fire or roars loudly, but not both.",
      "Zander either roars loudly or sets things ablaze, but not both.",
      "All mythical creatures that burn things are destructive.",
      "Zander is not feared.",
      "If Zander is feared, then he is legendary.",
      "Zander is not powerful."
    ],
    "context_fol": [
      "has_scales(Zander)",
      "flies_fast(Zander)",
      "has_scales(Zander) → (breathes_fire(Zander) ⊕ flies_fast(Zander))",
      "has_claws(Zander)",
      "has_claws(Zander) → (breathes_fire(Zander) ⊕ roars_loud(Zander))",
      "roars_loud(Zander) ⊕ burns(Zander)",
      "∀x (burns(x) → destructive(x))",
      "¬feared(Zander)",
      "feared(Zander) → legendary(Zander)",
      "¬powerful(Zander)"
    ],
    "background_story": "In ancient lore, Zander was a fearsome dragon known for his destructive rampage across the land. Born from a volcanic eruption, he was forged in fire and chaos. As he grew, so did his insatiable hunger for destruction. Zander's path of devastation left villages in ruins and cities scorched. His roar could be heard for miles, striking fear into the hearts of all who heard it. With scales as black as coal and eyes that glowed like embers, Zander seemed unstoppable. His rampage continued unchecked until a brave warrior, armed with a magical sword, faced the beast. Though the warrior ultimately defeated Zander, the legend of his destructive power lived on, a cautionary tale of the terror that unchecked fury can unleash.",
    "name": "Zander",
    "keyword": "rampage",
    "subject_category": "mythical creature"
  },
  {
    "facts": [
      "Lovely is passionate.",
      "Lovely is not innovative.",
      "Lovely is attentive.",
      "Lovely is dedicated.",
      "Lovely learns quickly."
    ],
    "facts_fol": [
      "is_passionate(Lovely)",
      "¬is_innovative(Lovely)",
      "attentive(Lovely)",
      "dedicated(Lovely)",
      "learn_quickly(Lovely)"
    ],
    "rules": [
      "If Lovely is creative, then she is either successful or influential, but not both.",
      "Lovely is either passionate or successful, but not necessarily both.",
      "If Lovely is artistic, then she is either creative or innovative, but not both.",
      "If Lovely is skilled, then she is both attentive and artistic.",
      "If Lovely is dedicated, then she learns quickly and is skilled."
    ],
    "rules_fol": [
      "creative(Lovely) → (successful(Lovely) ⊕ influential(Lovely))",
      "is_passionate(Lovely) ⊕ successful(Lovely)",
      "is_artistic(Lovely) → (creative(Lovely) ⊕ is_innovative(Lovely))",
      "skilled(Lovely) → (attentive(Lovely) ∧ is_artistic(Lovely))",
      "dedicated(Lovely) → (learn_quickly(Lovely) ∧ skilled(Lovely))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If someone works hard and thinks outside the box, then they can be successful.",
      "If Lovely thinks freely, then she is creative.",
      "If someone loves color and enjoys experimenting, then they are artistic.",
      "If Lovely either works with precision or thinks outside the box (but not both), then she is skilled."
    ],
    "distracting_rules_fol": [
      "∀x ((works_hard(x) ∧ thinks_outside(x)) → successful(x))",
      "thinks_free(Lovely) → creative(Lovely)",
      "∀x ((loves_color(x) ∧ enjoys_experimenting(x)) → is_artistic(x))",
      "(works_precise(Lovely) ⊕ thinks_outside(Lovely)) → skilled(Lovely)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Lovely is dedicated.",
          "Lovely learns quickly."
        ],
        "rules": "If Lovely is dedicated, then she learns quickly and is skilled.",
        "conclusion": "Lovely is skilled."
      },
      {
        "facts": [
          "Lovely is skilled.",
          "Lovely is attentive."
        ],
        "rules": "If Lovely is skilled, then she is both attentive and artistic.",
        "conclusion": "Lovely is artistic."
      },
      {
        "facts": [
          "Lovely is artistic.",
          "Lovely is not innovative."
        ],
        "rules": "If Lovely is artistic, then she is either creative or innovative, but not both.",
        "conclusion": "Lovely is creative."
      },
      {
        "facts": [
          "Lovely is passionate."
        ],
        "rules": "Lovely is either passionate or successful, but not necessarily both.",
        "conclusion": "Lovely is not successful."
      },
      {
        "facts": [
          "Lovely is creative.",
          "Lovely is not successful."
        ],
        "rules": "If Lovely is creative, then she is either successful or influential, but not both.",
        "conclusion": "Lovely is influential."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "dedicated(Lovely)",
          "learn_quickly(Lovely)"
        ],
        "rules": "dedicated(Lovely) → (learn_quickly(Lovely) ∧ skilled(Lovely))",
        "conclusion": "skilled(Lovely)"
      },
      {
        "facts": [
          "skilled(Lovely)",
          "attentive(Lovely)"
        ],
        "rules": "skilled(Lovely) → (attentive(Lovely) ∧ is_artistic(Lovely))",
        "conclusion": "is_artistic(Lovely)"
      },
      {
        "facts": [
          "is_artistic(Lovely)",
          "¬is_innovative(Lovely)"
        ],
        "rules": "is_artistic(Lovely) → (creative(Lovely) ⊕ is_innovative(Lovely))",
        "conclusion": "creative(Lovely)"
      },
      {
        "facts": [
          "is_passionate(Lovely)"
        ],
        "rules": "is_passionate(Lovely) ⊕ successful(Lovely)",
        "conclusion": "¬successful(Lovely)"
      },
      {
        "facts": [
          "creative(Lovely)",
          "¬successful(Lovely)"
        ],
        "rules": "creative(Lovely) → (successful(Lovely) ⊕ influential(Lovely))",
        "conclusion": "influential(Lovely)"
      }
    ],
    "conclusion": "Lovely is influential.",
    "conclusion_fol": "influential(Lovely)",
    "answer": "True",
    "context": [
      "Lovely is dedicated.",
      "Lovely learns quickly.",
      "If Lovely is dedicated, then she learns quickly and is skilled.",
      "Lovely is attentive.",
      "If Lovely is skilled, then she is both attentive and artistic.",
      "Lovely is not innovative.",
      "If Lovely is artistic, then she is either creative or innovative, but not both.",
      "Lovely is passionate.",
      "Lovely is either passionate or successful, but not necessarily both.",
      "If Lovely is creative, then she is either successful or influential, but not both."
    ],
    "context_fol": [
      "dedicated(Lovely)",
      "learn_quickly(Lovely)",
      "dedicated(Lovely) → (learn_quickly(Lovely) ∧ skilled(Lovely))",
      "attentive(Lovely)",
      "skilled(Lovely) → (attentive(Lovely) ∧ is_artistic(Lovely))",
      "¬is_innovative(Lovely)",
      "is_artistic(Lovely) → (creative(Lovely) ⊕ is_innovative(Lovely))",
      "is_passionate(Lovely)",
      "is_passionate(Lovely) ⊕ successful(Lovely)",
      "creative(Lovely) → (successful(Lovely) ⊕ influential(Lovely))"
    ],
    "background_story": "Lovely was a skilled textile artist known for her vibrant and unique hand-dyed fabrics. Growing up in a family of traditional dyers, she learned the art of natural dyeing from a young age. With a keen eye for color and a passion for experimentation, Lovely developed a distinctive style that blended ancient techniques with modern flair. Her small studio quickly gained a loyal following among fashion designers and craftspeople seeking one-of-a-kind materials. Lovely's dedication to her craft and commitment to sustainable practices earned her the reputation as one of the finest natural dyers in the region. As her business grew, so did her creativity, inspiring a new generation of artisans to explore the art of natural dyeing.",
    "name": "Lovely",
    "keyword": "dyer",
    "subject_category": "human"
  },
  {
    "facts": [
      "Cuddly plays drums.",
      "Cuddly enjoys the parade.",
      "Cuddly collects candy."
    ],
    "facts_fol": [
      "play_drums(Cuddly)",
      "enjoy_parade(Cuddly)",
      "collect_candy(Cuddly)"
    ],
    "rules": [
      "If Cuddly loves carnival, then he either leads the parade or dances to the music, but not both.",
      "Cuddly either wears a costume or dances to music.",
      "If Cuddly either plays drums or hands out sweets (but not both), then he loves carnival.",
      "Cuddly either enjoys the parade or wears a costume, but not both.",
      "Cuddly either collects candy or hands out sweets, but not both."
    ],
    "rules_fol": [
      "love_carnival(Cuddly) → (lead_parade(Cuddly) ⊕ dance_to_music(Cuddly))",
      "wear_costume(Cuddly) ∨ dance_to_music(Cuddly)",
      "(play_drums(Cuddly) ⊕ hand_out_sweets(Cuddly)) → love_carnival(Cuddly)",
      "enjoy_parade(Cuddly) ⊕ wear_costume(Cuddly)",
      "collect_candy(Cuddly) ⊕ hand_out_sweets(Cuddly)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Cuddly enjoys rhythms, then he either dances to music or sways to the beat.",
      "If Cuddly has fun, then he makes friends and loves carnival.",
      "If Cuddly joins a party or gets dressed, then he will wear a costume.",
      "If Cuddly either makes balloons or gives treats (but not both), then he hands out sweets."
    ],
    "distracting_rules_fol": [
      "enjoy_rhythms(Cuddly) → (dance_to_music(Cuddly) ∨ sway_to_beat(Cuddly))",
      "have_fun(Cuddly) → (make_friends(Cuddly) ∧ love_carnival(Cuddly))",
      "(join_party(Cuddly) ∨ get_dressed(Cuddly)) → wear_costume(Cuddly)",
      "(make_balloon(Cuddly) ⊕ give_treats(Cuddly)) → hand_out_sweets(Cuddly)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Cuddly collects candy."
        ],
        "rules": "Cuddly either collects candy or hands out sweets, but not both.",
        "conclusion": "Cuddly does not hand out sweets."
      },
      {
        "facts": [
          "Cuddly enjoys the parade."
        ],
        "rules": "Cuddly either enjoys the parade or wears a costume, but not both.",
        "conclusion": "Cuddly does not wear a costume."
      },
      {
        "facts": [
          "Cuddly plays drums.",
          "Cuddly does not hand out sweets."
        ],
        "rules": "If Cuddly either plays drums or hands out sweets (but not both), then he loves carnival.",
        "conclusion": "Cuddly loves carnival."
      },
      {
        "facts": [
          "Cuddly does not wear a costume."
        ],
        "rules": "Cuddly either wears a costume or dances to music.",
        "conclusion": "Cuddly dances to the music."
      },
      {
        "facts": [
          "Cuddly loves carnival.",
          "Cuddly dances to the music."
        ],
        "rules": "If Cuddly loves carnival, then he either leads the parade or dances to the music, but not both.",
        "conclusion": "Cuddly leads the parade."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "collect_candy(Cuddly)"
        ],
        "rules": "collect_candy(Cuddly) ⊕ hand_out_sweets(Cuddly)",
        "conclusion": "¬hand_out_sweets(Cuddly)"
      },
      {
        "facts": [
          "enjoy_parade(Cuddly)"
        ],
        "rules": "enjoy_parade(Cuddly) ⊕ wear_costume(Cuddly)",
        "conclusion": "¬wear_costume(Cuddly)"
      },
      {
        "facts": [
          "play_drums(Cuddly)",
          "¬hand_out_sweets(Cuddly)"
        ],
        "rules": "(play_drums(Cuddly) ⊕ hand_out_sweets(Cuddly)) → love_carnival(Cuddly)",
        "conclusion": "love_carnival(Cuddly)"
      },
      {
        "facts": [
          "¬wear_costume(Cuddly)"
        ],
        "rules": "wear_costume(Cuddly) ∨ dance_to_music(Cuddly)",
        "conclusion": "dance_to_music(Cuddly)"
      },
      {
        "facts": [
          "love_carnival(Cuddly)",
          "dance_to_music(Cuddly)"
        ],
        "rules": "love_carnival(Cuddly) → (lead_parade(Cuddly) ⊕ dance_to_music(Cuddly))",
        "conclusion": "lead_parade(Cuddly)"
      }
    ],
    "conclusion": "Cuddly leads the parade.",
    "conclusion_fol": "lead_parade(Cuddly)",
    "answer": "False",
    "context": [
      "Cuddly collects candy.",
      "Cuddly either collects candy or hands out sweets, but not both.",
      "Cuddly enjoys the parade.",
      "Cuddly either enjoys the parade or wears a costume, but not both.",
      "Cuddly plays drums.",
      "If Cuddly either plays drums or hands out sweets (but not both), then he loves carnival.",
      "Cuddly either wears a costume or dances to music.",
      "If Cuddly loves carnival, then he either leads the parade or dances to the music, but not both."
    ],
    "context_fol": [
      "collect_candy(Cuddly)",
      "collect_candy(Cuddly) ⊕ hand_out_sweets(Cuddly)",
      "enjoy_parade(Cuddly)",
      "enjoy_parade(Cuddly) ⊕ wear_costume(Cuddly)",
      "play_drums(Cuddly)",
      "(play_drums(Cuddly) ⊕ hand_out_sweets(Cuddly)) → love_carnival(Cuddly)",
      "wear_costume(Cuddly) ∨ dance_to_music(Cuddly)",
      "love_carnival(Cuddly) → (lead_parade(Cuddly) ⊕ dance_to_music(Cuddly))"
    ],
    "background_story": "In the quaint town of Basel, Switzerland, a lovable bear named Cuddly lived for one thing: Fastnacht. Every year, as the carnival season approached, Cuddly would prepare for the grand parade, donning a colorful costume and mask. With his infectious enthusiasm, he'd lead the procession through the streets, distributing sweets and joy to the crowds. Cuddly's love for Fastnacht was contagious, and soon the whole town would come together to celebrate with him. His favorite part was the Guggemusik, where he'd dance to the lively rhythms, his paws tapping out the beat. As the night drew to a close, Cuddly would snuggle up in his cozy little cave, already dreaming of the next Fastnacht celebration.",
    "name": "Cuddly",
    "keyword": "fastnacht",
    "subject_category": "bear"
  },
  {
    "facts": [
      "August does not love plants.",
      "August is a gardener.",
      "August is knowledgeable.",
      "August finds peace.",
      "August is creative."
    ],
    "facts_fol": [
      "¬loves_plants(August)",
      "is_gardener(August)",
      "knowledgeable(August)",
      "finds_peace(August)",
      "is_creative(August)"
    ],
    "rules": [
      "If August is a gardener, then he either loves plants or appreciates nature, but not both.",
      "August enjoys life or is passionate.",
      "If someone finds peace, then they enjoy life and are creative."
    ],
    "rules_fol": [
      "is_gardener(August) → (loves_plants(August) ⊕ appreciate_nature(August))",
      "enjoys_life(August) ∨ passionate(August)",
      "∀x (finds_peace(x) → (enjoys_life(x) ∧ is_creative(x)))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Anyone who studies ecology or respects the environment appreciates nature.",
      "All dedicated individuals are passionate.",
      "Anyone who has hobbies or feels grateful can enjoy life."
    ],
    "distracting_rules_fol": [
      "∀x ((studies_ecology(x) ∨ respects_environment(x)) → appreciate_nature(x))",
      "∀x (dedicated(x) → passionate(x))",
      "∀x ((has_hobbies(x) ∨ feels_grateful(x)) → enjoys_life(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "August finds peace.",
          "August is creative."
        ],
        "rules": "If someone finds peace, then they enjoy life and are creative.",
        "conclusion": "August enjoys life."
      },
      {
        "facts": [
          "August enjoys life."
        ],
        "rules": "August enjoys life or is passionate.",
        "conclusion": null
      },
      {
        "facts": [
          "August is a gardener.",
          "August does not love plants."
        ],
        "rules": "If August is a gardener, then he either loves plants or appreciates nature, but not both.",
        "conclusion": "August appreciates nature."
      },
      {
        "facts": [
          "August appreciates nature.",
          "August is knowledgeable."
        ],
        "rules": null,
        "conclusion": "August appreciates nature, or he is both knowledgeable and passionate."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "finds_peace(August)",
          "is_creative(August)"
        ],
        "rules": "∀x (finds_peace(x) → (enjoys_life(x) ∧ is_creative(x)))",
        "conclusion": "enjoys_life(August)"
      },
      {
        "facts": [
          "enjoys_life(August)"
        ],
        "rules": "enjoys_life(August) ∨ passionate(August)",
        "conclusion": null
      },
      {
        "facts": [
          "is_gardener(August)",
          "¬loves_plants(August)"
        ],
        "rules": "is_gardener(August) → (loves_plants(August) ⊕ appreciate_nature(August))",
        "conclusion": "appreciate_nature(August)"
      },
      {
        "facts": [
          "appreciate_nature(August)",
          "knowledgeable(August)"
        ],
        "rules": null,
        "conclusion": "appreciate_nature(August) ∨ (knowledgeable(August) ∧ passionate(August))"
      }
    ],
    "conclusion": "August appreciates nature, or he is both knowledgeable and passionate.",
    "conclusion_fol": "appreciate_nature(August) ∨ (knowledgeable(August) ∧ passionate(August))",
    "answer": "True",
    "context": [
      "August finds peace.",
      "August is creative.",
      "If someone finds peace, then they enjoy life and are creative.",
      "August enjoys life or is passionate.",
      "August is a gardener.",
      "August does not love plants.",
      "If August is a gardener, then he either loves plants or appreciates nature, but not both.",
      "August is knowledgeable."
    ],
    "context_fol": [
      "finds_peace(August)",
      "is_creative(August)",
      "∀x (finds_peace(x) → (enjoys_life(x) ∧ is_creative(x)))",
      "enjoys_life(August) ∨ passionate(August)",
      "is_gardener(August)",
      "¬loves_plants(August)",
      "is_gardener(August) → (loves_plants(August) ⊕ appreciate_nature(August))",
      "knowledgeable(August)"
    ],
    "background_story": "August was a gentle soul with a passion for botany. He spent most of his days tending to his garden, where he cultivated a variety of rare and exotic plants. Among his favorites was the convolvulus, with its delicate, trumpet-shaped flowers that bloomed in shades of blue and white. August found solace in the intricate, swirling patterns of the convolvulus's leaves and the way its vines seemed to dance up trellises. As he worked, he'd often get lost in thought, pondering the mysteries of nature and the beauty of the convolvulus. His love for this plant inspired him to become a renowned horticulturist, and his garden, filled with convolvulus and other wonders, became a haven for those seeking peace and tranquility.",
    "name": "August",
    "keyword": "convolvulus",
    "subject_category": "human"
  },
  {
    "facts": [
      "McSteamy loves nature.",
      "McSteamy studies orchids.",
      "McSteamy creates greenhouses.",
      "McSteamy tends to his orchids."
    ],
    "facts_fol": [
      "love_nature(McSteamy)",
      "study_orchids(McSteamy)",
      "create_greenhouses(McSteamy)",
      "tend_flowers(McSteamy)"
    ],
    "rules": [
      "McSteamy either nurtures gardens or becomes an expert horticulturist, but not both.",
      "If McSteamy grows orchids, then he either nurtures gardens or designs landscapes, but not both.",
      "If McSteamy loves nature, then he creates greenhouses and grows orchids.",
      "McSteamy either tends to his orchids or designs landscapes, but not both."
    ],
    "rules_fol": [
      "nurture_gardens(McSteamy) ⊕ become_expert_horticulturist(McSteamy)",
      "grow_orchids(McSteamy) → (nurture_gardens(McSteamy) ⊕ design_landscapes(McSteamy))",
      "love_nature(McSteamy) → (create_greenhouses(McSteamy) ∧ grow_orchids(McSteamy))",
      "tend_flowers(McSteamy) ⊕ design_landscapes(McSteamy)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If McSteamy joins a botanical club, then he is either an expert horticulturist or raises exotic species, but not both.",
      "If McSteamy appreciates beauty, then he shares knowledge and nurtures gardens.",
      "If McSteamy experiments with soils or cares for plants, then he can grow orchids.",
      "If McSteamy prunes trees, then he either cultivates bonsai or designs landscapes, but not both."
    ],
    "distracting_rules_fol": [
      "join_botanical_club(McSteamy) → (become_expert_horticulturist(McSteamy) ⊕ raise_exotic_species(McSteamy))",
      "appreciate_beauty(McSteamy) → (share_knowledge(McSteamy) ∧ nurture_gardens(McSteamy))",
      "(experiment_soils(McSteamy) ∨ care_plants(McSteamy)) → grow_orchids(McSteamy)",
      "prune_trees(McSteamy) → (cultivate_bonsai(McSteamy) ⊕ design_landscapes(McSteamy))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "McSteamy tends to his orchids."
        ],
        "rules": "McSteamy either tends to his orchids or designs landscapes, but not both.",
        "conclusion": "McSteamy does not design landscapes."
      },
      {
        "facts": [
          "McSteamy loves nature.",
          "McSteamy creates greenhouses."
        ],
        "rules": "If McSteamy loves nature, then he creates greenhouses and grows orchids.",
        "conclusion": "McSteamy grows orchids."
      },
      {
        "facts": [
          "McSteamy grows orchids.",
          "McSteamy does not design landscapes."
        ],
        "rules": "If McSteamy grows orchids, then he either nurtures gardens or designs landscapes, but not both.",
        "conclusion": "McSteamy nurtures gardens."
      },
      {
        "facts": [
          "McSteamy nurtures gardens."
        ],
        "rules": "McSteamy either nurtures gardens or becomes an expert horticulturist, but not both.",
        "conclusion": "McSteamy does not become an expert horticulturist."
      },
      {
        "facts": [
          "McSteamy studies orchids.",
          "McSteamy does not become an expert horticulturist."
        ],
        "rules": null,
        "conclusion": "If McSteamy collects rare plants or studies orchids (or both), then he becomes an expert horticulturist."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "tend_flowers(McSteamy)"
        ],
        "rules": "tend_flowers(McSteamy) ⊕ design_landscapes(McSteamy)",
        "conclusion": "¬design_landscapes(McSteamy)"
      },
      {
        "facts": [
          "love_nature(McSteamy)",
          "create_greenhouses(McSteamy)"
        ],
        "rules": "love_nature(McSteamy) → (create_greenhouses(McSteamy) ∧ grow_orchids(McSteamy))",
        "conclusion": "grow_orchids(McSteamy)"
      },
      {
        "facts": [
          "grow_orchids(McSteamy)",
          "¬design_landscapes(McSteamy)"
        ],
        "rules": "grow_orchids(McSteamy) → (nurture_gardens(McSteamy) ⊕ design_landscapes(McSteamy))",
        "conclusion": "nurture_gardens(McSteamy)"
      },
      {
        "facts": [
          "nurture_gardens(McSteamy)"
        ],
        "rules": "nurture_gardens(McSteamy) ⊕ become_expert_horticulturist(McSteamy)",
        "conclusion": "¬become_expert_horticulturist(McSteamy)"
      },
      {
        "facts": [
          "study_orchids(McSteamy)",
          "¬become_expert_horticulturist(McSteamy)"
        ],
        "rules": null,
        "conclusion": "(collect_rare_plants(McSteamy) ∨ study_orchids(McSteamy)) → become_expert_horticulturist(McSteamy)"
      }
    ],
    "conclusion": "If McSteamy collects rare plants or studies orchids (or both), then he becomes an expert horticulturist.",
    "conclusion_fol": "(collect_rare_plants(McSteamy) ∨ study_orchids(McSteamy)) → become_expert_horticulturist(McSteamy)",
    "answer": "False",
    "context": [
      "McSteamy tends to his orchids.",
      "McSteamy either tends to his orchids or designs landscapes, but not both.",
      "McSteamy loves nature.",
      "McSteamy creates greenhouses.",
      "If McSteamy loves nature, then he creates greenhouses and grows orchids.",
      "If McSteamy grows orchids, then he either nurtures gardens or designs landscapes, but not both.",
      "McSteamy either nurtures gardens or becomes an expert horticulturist, but not both.",
      "McSteamy studies orchids."
    ],
    "context_fol": [
      "tend_flowers(McSteamy)",
      "tend_flowers(McSteamy) ⊕ design_landscapes(McSteamy)",
      "love_nature(McSteamy)",
      "create_greenhouses(McSteamy)",
      "love_nature(McSteamy) → (create_greenhouses(McSteamy) ∧ grow_orchids(McSteamy))",
      "grow_orchids(McSteamy) → (nurture_gardens(McSteamy) ⊕ design_landscapes(McSteamy))",
      "nurture_gardens(McSteamy) ⊕ become_expert_horticulturist(McSteamy)",
      "study_orchids(McSteamy)"
    ],
    "background_story": "McSteamy, a quirky and charming horticulturist, had a passion for rare and unusual plants. Among his extensive collection, one species held a special place in his heart: the puttyroot. This orchid, with its unique, waxy leaves and ability to thrive in unexpected environments, fascinated McSteamy. He spent years studying and cultivating puttyroot, experimenting with different soils and lighting conditions to coax the best blooms. His greenhouses became a haven for these delicate flowers, and McSteamy's expertise earned him the respect of botanical communities worldwide. As he tenderly cared for his puttyroot orchids, McSteamy found solace in their gentle beauty, reflecting on the simple joys of nurturing life and watching it flourish under his care.",
    "name": "McSteamy",
    "keyword": "puttyroot",
    "subject_category": "plant enthusiast"
  },
  {
    "facts": [
      "Bo does not write clearly."
    ],
    "facts_fol": [
      "¬writes_clearly(Bo)"
    ],
    "rules": [
      "Bo is either poetic or prosaic, but not both.",
      "Bo is either rhetorical or poetic, but not both.",
      "Bo either writes clearly or is rhetorical."
    ],
    "rules_fol": [
      "poetic(Bo) ⊕ prosaic(Bo)",
      "is_rhetorical(Bo) ⊕ poetic(Bo)",
      "writes_clearly(Bo) ∨ is_rhetorical(Bo)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Bo expresses emotion, then he is either poetic or loves nature (or both).",
      "If a person uses metaphor and employs allusion, then they are rhetorical."
    ],
    "distracting_rules_fol": [
      "expresses_emotion(Bo) → (poetic(Bo) ∨ loves_nature(Bo))",
      "∀x ((uses_metaphor(x) ∧ employs_allusion(x)) → is_rhetorical(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Bo does not write clearly."
        ],
        "rules": "Bo either writes clearly or is rhetorical.",
        "conclusion": "Bo is rhetorical."
      },
      {
        "facts": [
          "Bo is rhetorical."
        ],
        "rules": "Bo is either rhetorical or poetic, but not both.",
        "conclusion": "Bo is not poetic."
      },
      {
        "facts": [
          "Bo is not poetic."
        ],
        "rules": "Bo is either poetic or prosaic, but not both.",
        "conclusion": "Bo is prosaic."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬writes_clearly(Bo)"
        ],
        "rules": "writes_clearly(Bo) ∨ is_rhetorical(Bo)",
        "conclusion": "is_rhetorical(Bo)"
      },
      {
        "facts": [
          "is_rhetorical(Bo)"
        ],
        "rules": "is_rhetorical(Bo) ⊕ poetic(Bo)",
        "conclusion": "¬poetic(Bo)"
      },
      {
        "facts": [
          "¬poetic(Bo)"
        ],
        "rules": "poetic(Bo) ⊕ prosaic(Bo)",
        "conclusion": "prosaic(Bo)"
      }
    ],
    "conclusion": "Bo is prosaic.",
    "conclusion_fol": "prosaic(Bo)",
    "answer": "True",
    "context": [
      "Bo does not write clearly.",
      "Bo either writes clearly or is rhetorical.",
      "Bo is either rhetorical or poetic, but not both.",
      "Bo is either poetic or prosaic, but not both."
    ],
    "context_fol": [
      "¬writes_clearly(Bo)",
      "writes_clearly(Bo) ∨ is_rhetorical(Bo)",
      "is_rhetorical(Bo) ⊕ poetic(Bo)",
      "poetic(Bo) ⊕ prosaic(Bo)"
    ],
    "background_story": "Bo was a poet known for his limpid writing style, which seemed to capture the essence of the human experience with clarity and simplicity. His words were like a still mountain lake, reflecting the beauty and complexity of life without a single ripple of obscurity. Bo's poetry often explored the depths of nature, where he found solace and inspiration. His limpid prose allowed readers to see the world through his eyes, to feel the gentle rustle of leaves and the warmth of a summer breeze. As his fame grew, so did his humility, and Bo remained true to his art, always striving to craft verses that were as transparent and beautiful as a mountain stream.",
    "name": "Bo",
    "keyword": "limpid",
    "subject_category": "human"
  },
  {
    "facts": [
      "Cuddles is a domestic cat.",
      "Cuddles plays gently.",
      "Cuddles has soft fur.",
      "Cuddles is playful."
    ],
    "facts_fol": [
      "is_domestic(Cuddles)",
      "plays_gentle(Cuddles)",
      "has_soft_fur(Cuddles)",
      "is_playful(Cuddles)"
    ],
    "rules": [
      "For all cats, if they are affectionate or loyal, then they make good companions.",
      "If Cuddles is a domestic cat, then she is either affectionate or plays gently, but not both.",
      "If Cuddles has soft fur, then she is either loyal or playful, but not both."
    ],
    "rules_fol": [
      "∀x ((affectionate(x) ∨ loyal(x)) → makes_good_companions(x))",
      "is_domestic(Cuddles) → (affectionate(Cuddles) ⊕ plays_gentle(Cuddles))",
      "has_soft_fur(Cuddles) → (loyal(Cuddles) ⊕ is_playful(Cuddles))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "All cats that purr contentedly either follow their owners or are affectionate (or both).",
      "If Cuddles is gentle, then she is either curious or loyal, but not both."
    ],
    "distracting_rules_fol": [
      "∀x (purr_contentedly(x) → (follow_owners(x) ∨ affectionate(x)))",
      "is_gentle(Cuddles) → (is_curious(Cuddles) ⊕ loyal(Cuddles))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Cuddles has soft fur.",
          "Cuddles is playful."
        ],
        "rules": "If Cuddles has soft fur, then she is either loyal or playful, but not both.",
        "conclusion": "Cuddles is not loyal."
      },
      {
        "facts": [
          "Cuddles is a domestic cat.",
          "Cuddles plays gently."
        ],
        "rules": "If Cuddles is a domestic cat, then she is either affectionate or plays gently, but not both.",
        "conclusion": "Cuddles is not affectionate."
      },
      {
        "facts": [
          "Cuddles is not affectionate.",
          "Cuddles is not loyal."
        ],
        "rules": "For all cats, if they are affectionate or loyal, then they make good companions.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "has_soft_fur(Cuddles)",
          "is_playful(Cuddles)"
        ],
        "rules": "has_soft_fur(Cuddles) → (loyal(Cuddles) ⊕ is_playful(Cuddles))",
        "conclusion": "¬loyal(Cuddles)"
      },
      {
        "facts": [
          "is_domestic(Cuddles)",
          "plays_gentle(Cuddles)"
        ],
        "rules": "is_domestic(Cuddles) → (affectionate(Cuddles) ⊕ plays_gentle(Cuddles))",
        "conclusion": "¬affectionate(Cuddles)"
      },
      {
        "facts": [
          "¬affectionate(Cuddles)",
          "¬loyal(Cuddles)"
        ],
        "rules": "∀x ((affectionate(x) ∨ loyal(x)) → makes_good_companions(x))",
        "conclusion": null
      }
    ],
    "conclusion": "Cuddles makes a good companion.",
    "conclusion_fol": "makes_good_companions(Cuddles)",
    "answer": "Uncertain",
    "context": [
      "Cuddles has soft fur.",
      "Cuddles is playful.",
      "If Cuddles has soft fur, then she is either loyal or playful, but not both.",
      "Cuddles is a domestic cat.",
      "Cuddles plays gently.",
      "If Cuddles is a domestic cat, then she is either affectionate or plays gently, but not both.",
      "For all cats, if they are affectionate or loyal, then they make good companions."
    ],
    "context_fol": [
      "has_soft_fur(Cuddles)",
      "is_playful(Cuddles)",
      "has_soft_fur(Cuddles) → (loyal(Cuddles) ⊕ is_playful(Cuddles))",
      "is_domestic(Cuddles)",
      "plays_gentle(Cuddles)",
      "is_domestic(Cuddles) → (affectionate(Cuddles) ⊕ plays_gentle(Cuddles))",
      "∀x ((affectionate(x) ∨ loyal(x)) → makes_good_companions(x))"
    ],
    "background_story": "Cuddles, a stunning Kazak cat, was born in the rolling hills of the countryside. Her thick, silky coat and piercing green eyes made her a sight to behold. But what truly set Cuddles apart was her affectionate nature, earning her the name that suited her perfectly. She loved nothing more than to snuggle up in her owner's lap, purring contentedly as they stroked her soft fur. Despite her independent Kazak spirit, Cuddles had a gentle soul and a deep love for her human family. She would follow them everywhere, always eager to provide comfort and companionship. As the sun set over the hills, Cuddles could be found curled up by the fireplace, a symbol of warmth and loyalty in the heart of her home.",
    "name": "Cuddles",
    "keyword": "kazak",
    "subject_category": "cat"
  },
  {
    "facts": [
      "Samuel is innovative.",
      "Samuel does not feel alive.",
      "Samuel does not write poetry."
    ],
    "facts_fol": [
      "is_innovative(Samuel)",
      "¬feels_alive(Samuel)",
      "¬writes_poetry(Samuel)"
    ],
    "rules": [
      "If Samuel is nocturnal, then he is either creative or innovative.",
      "Samuel thinks deeply or is introspective.",
      "For Samuel, either he sees wisdom or thinks deeply, but not both at the same time.",
      "Samuel either feels alive or sees wisdom.",
      "Samuel either writes poetry or is nocturnal."
    ],
    "rules_fol": [
      "is_nocturnal(Samuel) → (creative(Samuel) ⊕ is_innovative(Samuel))",
      "thinks_deeply(Samuel) ∨ introspective(Samuel)",
      "sees_wisdom(Samuel) ⊕ thinks_deeply(Samuel)",
      "feels_alive(Samuel) ∨ sees_wisdom(Samuel)",
      "writes_poetry(Samuel) ∨ is_nocturnal(Samuel)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Everyone either imagines freely or is creative.",
      "If a person contemplates, then they seek truth and are introspective.",
      "If Samuel likes the night, then he reads a lot and thinks deeply.",
      "If Samuel contemplates, then he will see wisdom.",
      "If Samuel stays up late, then he either has profound insights or is nocturnal (or both)."
    ],
    "distracting_rules_fol": [
      "∀x (imagines_freely(x) ∨ creative(x))",
      "∀x (contemplate(x) → (seek_truth(x) ∧ introspective(x)))",
      "likes_night(Samuel) → (reads_much(Samuel) ∧ thinks_deeply(Samuel))",
      "contemplates(Samuel) → sees_wisdom(Samuel)",
      "stays_up_late(Samuel) → (has_profound_insights(Samuel) ∨ is_nocturnal(Samuel))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Samuel does not write poetry."
        ],
        "rules": "Samuel either writes poetry or is nocturnal.",
        "conclusion": "Samuel is nocturnal."
      },
      {
        "facts": [
          "Samuel does not feel alive."
        ],
        "rules": "Samuel either feels alive or sees wisdom.",
        "conclusion": "Samuel sees wisdom."
      },
      {
        "facts": [
          "Samuel sees wisdom."
        ],
        "rules": "For Samuel, either he sees wisdom or thinks deeply, but not both at the same time.",
        "conclusion": "Samuel does not think deeply."
      },
      {
        "facts": [
          "Samuel does not think deeply."
        ],
        "rules": "Samuel thinks deeply or is introspective.",
        "conclusion": "Samuel is introspective."
      },
      {
        "facts": [
          "Samuel is nocturnal.",
          "Samuel is innovative."
        ],
        "rules": "If Samuel is nocturnal, then he is either creative or innovative.",
        "conclusion": "Samuel is not creative."
      },
      {
        "facts": [
          "Samuel is not creative.",
          "Samuel is introspective."
        ],
        "rules": null,
        "conclusion": "Samuel is either creative or introspective (or both)."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬writes_poetry(Samuel)"
        ],
        "rules": "writes_poetry(Samuel) ∨ is_nocturnal(Samuel)",
        "conclusion": "is_nocturnal(Samuel)"
      },
      {
        "facts": [
          "¬feels_alive(Samuel)"
        ],
        "rules": "feels_alive(Samuel) ∨ sees_wisdom(Samuel)",
        "conclusion": "sees_wisdom(Samuel)"
      },
      {
        "facts": [
          "sees_wisdom(Samuel)"
        ],
        "rules": "sees_wisdom(Samuel) ⊕ thinks_deeply(Samuel)",
        "conclusion": "¬thinks_deeply(Samuel)"
      },
      {
        "facts": [
          "¬thinks_deeply(Samuel)"
        ],
        "rules": "thinks_deeply(Samuel) ∨ introspective(Samuel)",
        "conclusion": "introspective(Samuel)"
      },
      {
        "facts": [
          "is_nocturnal(Samuel)",
          "is_innovative(Samuel)"
        ],
        "rules": "is_nocturnal(Samuel) → (creative(Samuel) ⊕ is_innovative(Samuel))",
        "conclusion": "¬creative(Samuel)"
      },
      {
        "facts": [
          "¬creative(Samuel)",
          "introspective(Samuel)"
        ],
        "rules": null,
        "conclusion": "creative(Samuel) ∨ introspective(Samuel)"
      }
    ],
    "conclusion": "Samuel is either creative or introspective (or both).",
    "conclusion_fol": "creative(Samuel) ∨ introspective(Samuel)",
    "answer": "True",
    "context": [
      "Samuel does not write poetry.",
      "Samuel either writes poetry or is nocturnal.",
      "Samuel does not feel alive.",
      "Samuel either feels alive or sees wisdom.",
      "For Samuel, either he sees wisdom or thinks deeply, but not both at the same time.",
      "Samuel thinks deeply or is introspective.",
      "Samuel is innovative.",
      "If Samuel is nocturnal, then he is either creative or innovative."
    ],
    "context_fol": [
      "¬writes_poetry(Samuel)",
      "writes_poetry(Samuel) ∨ is_nocturnal(Samuel)",
      "¬feels_alive(Samuel)",
      "feels_alive(Samuel) ∨ sees_wisdom(Samuel)",
      "sees_wisdom(Samuel) ⊕ thinks_deeply(Samuel)",
      "thinks_deeply(Samuel) ∨ introspective(Samuel)",
      "is_innovative(Samuel)",
      "is_nocturnal(Samuel) → (creative(Samuel) ⊕ is_innovative(Samuel))"
    ],
    "background_story": "Samuel was a philosopher and a poet who found his inspiration in the still of the night. He was a nocturnal soul, often staying awake until the first light of dawn to ponder life's mysteries and write about the human condition. His friends and family would often joke that he was most alive when the rest of the world was asleep. Samuel's nocturnal habits allowed him to tap into a deep sense of creativity and introspection, leading to profound insights and beautiful works of literature. He believed that being awake during the night allowed him to see the world from a unique perspective, unfiltered by the distractions of the day. In his wakeful nights, Samuel found solace, wisdom, and the spark that ignited his passion for life.",
    "name": "Samuel",
    "keyword": "awake",
    "subject_category": "human"
  },
  {
    "facts": [
      "Estelle explores ecosystems.",
      "Estelle observes bugs.",
      "Estelle analyzes wasps."
    ],
    "facts_fol": [
      "explores_ecosystems(Estelle)",
      "observes_bugs(Estelle)",
      "analyzes_wasps(Estelle)"
    ],
    "rules": [
      "If Estelle either studies termites or studies beetles (but not both), then she is respected.",
      "If Estelle examines insects and explores ecosystems, then she studies termites.",
      "All entomologists who observe bugs examine insects.",
      "Estelle either analyzes wasps or studies beetles, but not both, which contributes to her reputation as a leading expert in her field."
    ],
    "rules_fol": [
      "(study_termites(Estelle) ⊕ study_beetles(Estelle)) → respected(Estelle)",
      "(examines_insects(Estelle) ∧ explores_ecosystems(Estelle)) → study_termites(Estelle)",
      "∀x (observes_bugs(x) → examines_insects(x))",
      "analyzes_wasps(Estelle) ⊕ study_beetles(Estelle)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Estelle investigates colonies or researches social structures, then she studies termites.",
      "Every entomologist who researches social structures either examines insects or discovers new species.",
      "Estelle either researches ants or studies beetles."
    ],
    "distracting_rules_fol": [
      "(investigates_colonies(Estelle) ∨ researches_social_structures(Estelle)) → study_termites(Estelle)",
      "∀x (researches_social_structures(x) → (examines_insects(x) ∨ discovers_new_species(x)))",
      "research_ants(Estelle) ∨ study_beetles(Estelle)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Estelle analyzes wasps."
        ],
        "rules": "Estelle either analyzes wasps or studies beetles, but not both, which contributes to her reputation as a leading expert in her field.",
        "conclusion": "Estelle does not study beetles."
      },
      {
        "facts": [
          "Estelle observes bugs."
        ],
        "rules": "All entomologists who observe bugs examine insects.",
        "conclusion": "Estelle examines insects."
      },
      {
        "facts": [
          "Estelle examines insects.",
          "Estelle explores ecosystems."
        ],
        "rules": "If Estelle examines insects and explores ecosystems, then she studies termites.",
        "conclusion": "Estelle studies termites."
      },
      {
        "facts": [
          "Estelle studies termites.",
          "Estelle does not study beetles."
        ],
        "rules": "If Estelle either studies termites or studies beetles (but not both), then she is respected.",
        "conclusion": "Estelle is not respected."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "analyzes_wasps(Estelle)"
        ],
        "rules": "analyzes_wasps(Estelle) ⊕ study_beetles(Estelle)",
        "conclusion": "¬study_beetles(Estelle)"
      },
      {
        "facts": [
          "observes_bugs(Estelle)"
        ],
        "rules": "∀x (observes_bugs(x) → examines_insects(x))",
        "conclusion": "examines_insects(Estelle)"
      },
      {
        "facts": [
          "examines_insects(Estelle)",
          "explores_ecosystems(Estelle)"
        ],
        "rules": "(examines_insects(Estelle) ∧ explores_ecosystems(Estelle)) → study_termites(Estelle)",
        "conclusion": "study_termites(Estelle)"
      },
      {
        "facts": [
          "study_termites(Estelle)",
          "¬study_beetles(Estelle)"
        ],
        "rules": "(study_termites(Estelle) ⊕ study_beetles(Estelle)) → respected(Estelle)",
        "conclusion": "¬respected(Estelle)"
      }
    ],
    "conclusion": "Estelle is not respected.",
    "conclusion_fol": "¬respected(Estelle)",
    "answer": "False",
    "context": [
      "Estelle analyzes wasps.",
      "Estelle either analyzes wasps or studies beetles, but not both, which contributes to her reputation as a leading expert in her field.",
      "Estelle observes bugs.",
      "All entomologists who observe bugs examine insects.",
      "Estelle explores ecosystems.",
      "If Estelle examines insects and explores ecosystems, then she studies termites.",
      "If Estelle either studies termites or studies beetles (but not both), then she is respected."
    ],
    "context_fol": [
      "analyzes_wasps(Estelle)",
      "analyzes_wasps(Estelle) ⊕ study_beetles(Estelle)",
      "observes_bugs(Estelle)",
      "∀x (observes_bugs(x) → examines_insects(x))",
      "explores_ecosystems(Estelle)",
      "(examines_insects(Estelle) ∧ explores_ecosystems(Estelle)) → study_termites(Estelle)",
      "(study_termites(Estelle) ⊕ study_beetles(Estelle)) → respected(Estelle)"
    ],
    "background_story": "Estelle was a renowned entomologist with a fascination for the social structures of insects. Her particular area of expertise was the Kalotermes, a genus of termites known for their unique nesting behaviors. Estelle spent years studying these insects in their natural habitats, from the sun-baked deserts to the lush forests. Her groundbreaking research on the Kalotermes revealed previously unknown aspects of their communication and colony organization. Estelle's work not only expanded the scientific community's understanding of these fascinating creatures but also led to innovative applications in bio-inspired engineering and ecology. Her dedication to the study of Kalotermes earned her the nickname 'Termite Whisperer' among her peers, a testament to her passion and expertise in the field.",
    "name": "Estelle",
    "keyword": "kalotermes",
    "subject_category": "entomologist"
  },
  {
    "facts": [
      "Bronson does not analyze structures.",
      "Bronson does not study geometry.",
      "Bronson is an expert in topology.",
      "Bronson does not create algorithms."
    ],
    "facts_fol": [
      "¬analyze_structures(Bronson)",
      "¬study_geometry(Bronson)",
      "expert_in_topology(Bronson)",
      "¬create_algorithms(Bronson)"
    ],
    "rules": [
      "If Bronson studies geometry or researches polyhedra (or both), then he makes innovative discoveries.",
      "Bronson either explores cosmic patterns or researches polyhedra, but not necessarily both.",
      "If Bronson either analyzes structures or models symmetries (but not both), then he explores cosmic patterns.",
      "If Bronson is an expert in topology, then he either models symmetries or creates algorithms, but not both."
    ],
    "rules_fol": [
      "(study_geometry(Bronson) ∨ research_polyhedra(Bronson)) → make_innovative_discoveries(Bronson)",
      "explore_cosmic_patterns(Bronson) ⊕ research_polyhedra(Bronson)",
      "(analyze_structures(Bronson) ⊕ model_symmetries(Bronson)) → explore_cosmic_patterns(Bronson)",
      "expert_in_topology(Bronson) → (model_symmetries(Bronson) ⊕ create_algorithms(Bronson))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Bronson either investigates shapes or researches polyhedra.",
      "If Bronson sees beauty in numbers and loves shapes, then he explores cosmic patterns.",
      "If a mathematician understands shapes and visualizes forms, then they can model symmetries."
    ],
    "distracting_rules_fol": [
      "investigate_shapes(Bronson) ∨ research_polyhedra(Bronson)",
      "(sees_beauty(Bronson) ∧ loves_shapes(Bronson)) → explore_cosmic_patterns(Bronson)",
      "∀x ((understand_shapes(x) ∧ visualize_forms(x)) → model_symmetries(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Bronson is an expert in topology.",
          "Bronson does not create algorithms."
        ],
        "rules": "If Bronson is an expert in topology, then he either models symmetries or creates algorithms, but not both.",
        "conclusion": "Bronson models symmetries."
      },
      {
        "facts": [
          "Bronson does not analyze structures.",
          "Bronson models symmetries."
        ],
        "rules": "If Bronson either analyzes structures or models symmetries (but not both), then he explores cosmic patterns.",
        "conclusion": "Bronson explores cosmic patterns."
      },
      {
        "facts": [
          "Bronson explores cosmic patterns."
        ],
        "rules": "Bronson either explores cosmic patterns or researches polyhedra, but not necessarily both.",
        "conclusion": "Bronson does not research polyhedra."
      },
      {
        "facts": [
          "Bronson does not study geometry.",
          "Bronson does not research polyhedra."
        ],
        "rules": "If Bronson studies geometry or researches polyhedra (or both), then he makes innovative discoveries.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "expert_in_topology(Bronson)",
          "¬create_algorithms(Bronson)"
        ],
        "rules": "expert_in_topology(Bronson) → (model_symmetries(Bronson) ⊕ create_algorithms(Bronson))",
        "conclusion": "model_symmetries(Bronson)"
      },
      {
        "facts": [
          "¬analyze_structures(Bronson)",
          "model_symmetries(Bronson)"
        ],
        "rules": "(analyze_structures(Bronson) ⊕ model_symmetries(Bronson)) → explore_cosmic_patterns(Bronson)",
        "conclusion": "explore_cosmic_patterns(Bronson)"
      },
      {
        "facts": [
          "explore_cosmic_patterns(Bronson)"
        ],
        "rules": "explore_cosmic_patterns(Bronson) ⊕ research_polyhedra(Bronson)",
        "conclusion": "¬research_polyhedra(Bronson)"
      },
      {
        "facts": [
          "¬study_geometry(Bronson)",
          "¬research_polyhedra(Bronson)"
        ],
        "rules": "(study_geometry(Bronson) ∨ research_polyhedra(Bronson)) → make_innovative_discoveries(Bronson)",
        "conclusion": null
      }
    ],
    "conclusion": "Bronson makes innovative discoveries.",
    "conclusion_fol": "make_innovative_discoveries(Bronson)",
    "answer": "Uncertain",
    "context": [
      "Bronson is an expert in topology.",
      "Bronson does not create algorithms.",
      "If Bronson is an expert in topology, then he either models symmetries or creates algorithms, but not both.",
      "Bronson does not analyze structures.",
      "If Bronson either analyzes structures or models symmetries (but not both), then he explores cosmic patterns.",
      "Bronson either explores cosmic patterns or researches polyhedra, but not necessarily both.",
      "Bronson does not study geometry.",
      "If Bronson studies geometry or researches polyhedra (or both), then he makes innovative discoveries."
    ],
    "context_fol": [
      "expert_in_topology(Bronson)",
      "¬create_algorithms(Bronson)",
      "expert_in_topology(Bronson) → (model_symmetries(Bronson) ⊕ create_algorithms(Bronson))",
      "¬analyze_structures(Bronson)",
      "(analyze_structures(Bronson) ⊕ model_symmetries(Bronson)) → explore_cosmic_patterns(Bronson)",
      "explore_cosmic_patterns(Bronson) ⊕ research_polyhedra(Bronson)",
      "¬study_geometry(Bronson)",
      "(study_geometry(Bronson) ∨ research_polyhedra(Bronson)) → make_innovative_discoveries(Bronson)"
    ],
    "background_story": "Bronson was a brilliant and eccentric mathematician who spent his life studying the intricacies of geometry. His obsession was the decahedron, a ten-faced polyhedron that he believed held the key to unlocking the secrets of the universe. Bronson's colleagues often joked that he was born with a decahedron in his hand, so innate was his understanding of its properties. He spent years constructing elaborate models of decahedra, from intricate paper cutouts to massive wooden sculptures. Bronson's magnum opus, 'Decahedron: The Harmony of Ten', was a seminal work that explored the decahedron's role in everything from crystal structures to cosmic geometry. Though his work was often misunderstood in his lifetime, Bronson's pioneering research on the decahedron paved the way for breakthroughs in fields from materials science to astrophysics.",
    "name": "Bronson",
    "keyword": "decahedron",
    "subject_category": "mathematician"
  },
  {
    "facts": [
      "Talia flies at night.",
      "Talia has large ears.",
      "Talia navigates in the dark."
    ],
    "facts_fol": [
      "fly_at_night(Talia)",
      "have_large_ears(Talia)",
      "navigate_dark(Talia)"
    ],
    "rules": [
      "For all bats, if a bat uses echolocation and has large ears, then it hunts effectively.",
      "All bats that fly at night find insects and use echolocation.",
      "Talia either navigates in the dark or finds insects."
    ],
    "rules_fol": [
      "∀x ((use_echolocation(x) ∧ have_large_ears(x)) → hunt_effectively(x))",
      "∀x (fly_at_night(x) → (find_insects(x) ∧ use_echolocation(x)))",
      "navigate_dark(Talia) ∨ find_insects(Talia)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Talia lives in caves, then she either uses echolocation or possesses a specialized nose.",
      "If Talia either emits sounds or tracks preys (but not both), then she is able to find insects."
    ],
    "distracting_rules_fol": [
      "live_in_caves(Talia) → (use_echolocation(Talia) ∨ possess_specialized_nose(Talia))",
      "(emit_sounds(Talia) ⊕ track_preys(Talia)) → find_insects(Talia)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Talia navigates in the dark."
        ],
        "rules": "Talia either navigates in the dark or finds insects.",
        "conclusion": null
      },
      {
        "facts": [
          "Talia flies at night."
        ],
        "rules": "All bats that fly at night find insects and use echolocation.",
        "conclusion": "Talia uses echolocation."
      },
      {
        "facts": [
          "Talia uses echolocation.",
          "Talia has large ears."
        ],
        "rules": "For all bats, if a bat uses echolocation and has large ears, then it hunts effectively.",
        "conclusion": "Talia does not hunt effectively."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "navigate_dark(Talia)"
        ],
        "rules": "navigate_dark(Talia) ∨ find_insects(Talia)",
        "conclusion": null
      },
      {
        "facts": [
          "fly_at_night(Talia)"
        ],
        "rules": "∀x (fly_at_night(x) → (find_insects(x) ∧ use_echolocation(x)))",
        "conclusion": "use_echolocation(Talia)"
      },
      {
        "facts": [
          "use_echolocation(Talia)",
          "have_large_ears(Talia)"
        ],
        "rules": "∀x ((use_echolocation(x) ∧ have_large_ears(x)) → hunt_effectively(x))",
        "conclusion": "¬hunt_effectively(Talia)"
      }
    ],
    "conclusion": "Talia does not hunt effectively.",
    "conclusion_fol": "¬hunt_effectively(Talia)",
    "answer": "False",
    "context": [
      "Talia navigates in the dark.",
      "Talia either navigates in the dark or finds insects.",
      "Talia flies at night.",
      "All bats that fly at night find insects and use echolocation.",
      "Talia has large ears.",
      "For all bats, if a bat uses echolocation and has large ears, then it hunts effectively."
    ],
    "context_fol": [
      "navigate_dark(Talia)",
      "navigate_dark(Talia) ∨ find_insects(Talia)",
      "fly_at_night(Talia)",
      "∀x (fly_at_night(x) → (find_insects(x) ∧ use_echolocation(x)))",
      "have_large_ears(Talia)",
      "∀x ((use_echolocation(x) ∧ have_large_ears(x)) → hunt_effectively(x))"
    ],
    "background_story": "Talia was a rare and fascinating Rhinonicteris, a species of horseshoe bat known for their distinctive nose leaves. Living in the depths of a lush Australian cave system, Talia spent her nights flitting through the dark, using echolocation to navigate and hunt. Her large ears and specialized nose allowed her to pinpoint the faint sounds of insects, making her a skilled hunter. Despite her small size, Talia was a vital part of her colony, playing a crucial role in controlling the local insect population. Her unique appearance and intriguing behaviors made her a subject of interest for local researchers, who sought to learn more about the elusive Rhinonicteris and their importance in the ecosystem.",
    "name": "Talia",
    "keyword": "rhinonicteris",
    "subject_category": "bat"
  },
  {
    "facts": [
      "Maximo reads books.",
      "Maximo does not make calls.",
      "Maximo likes talking.",
      "Maximo has pals."
    ],
    "facts_fol": [
      "reads_books(Maximo)",
      "¬makes_calls(Maximo)",
      "likes_talking(Maximo)",
      "has_pals(Maximo)"
    ],
    "rules": [
      "If Maximo enjoys writing, then he either connects people or spreads happiness, but not both.",
      "Maximo either sends mail or enjoys writing.",
      "For all people, either they read books or they send mail, but it's not necessary that they do both.",
      "If Maximo either shares stories or makes calls (but not both), then he connects people.",
      "For all humans, if they like talking and have pals, then they share stories."
    ],
    "rules_fol": [
      "enjoys_writing(Maximo) → (connects_people(Maximo) ⊕ spreads_happiness(Maximo))",
      "sends_mail(Maximo) ∨ enjoys_writing(Maximo)",
      "∀x (reads_books(x) ⊕ sends_mail(x))",
      "(shares_stories(Maximo) ⊕ makes_calls(Maximo)) → connects_people(Maximo)",
      "∀x ((likes_talking(x) ∧ has_pals(x)) → shares_stories(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Maximo either writes letters or enjoys writing.",
      "All postal workers send mail.",
      "All people who care deeply about others connect them and help them.",
      "If someone cares deeply, then they listen well and share stories."
    ],
    "distracting_rules_fol": [
      "writes_letters(Maximo) ∨ enjoys_writing(Maximo)",
      "∀x (works_postal(x) → sends_mail(x))",
      "∀x (cares_deeply(x) → (connects_people(x) ∧ helps_others(x)))",
      "∀x (cares_deeply(x) → (listens_well(x) ∧ shares_stories(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Maximo likes talking.",
          "Maximo has pals."
        ],
        "rules": "For all humans, if they like talking and have pals, then they share stories.",
        "conclusion": "Maximo shares stories."
      },
      {
        "facts": [
          "Maximo shares stories.",
          "Maximo does not make calls."
        ],
        "rules": "If Maximo either shares stories or makes calls (but not both), then he connects people.",
        "conclusion": "Maximo connects people through his writing."
      },
      {
        "facts": [
          "Maximo reads books."
        ],
        "rules": "For all people, either they read books or they send mail, but it's not necessary that they do both.",
        "conclusion": "Maximo does not send mail."
      },
      {
        "facts": [
          "Maximo does not send mail."
        ],
        "rules": "Maximo either sends mail or enjoys writing.",
        "conclusion": "Maximo enjoys writing."
      },
      {
        "facts": [
          "Maximo enjoys writing.",
          "Maximo connects people through his writing."
        ],
        "rules": "If Maximo enjoys writing, then he either connects people or spreads happiness, but not both.",
        "conclusion": "Maximo spreads happiness through his writing."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "likes_talking(Maximo)",
          "has_pals(Maximo)"
        ],
        "rules": "∀x ((likes_talking(x) ∧ has_pals(x)) → shares_stories(x))",
        "conclusion": "shares_stories(Maximo)"
      },
      {
        "facts": [
          "shares_stories(Maximo)",
          "¬makes_calls(Maximo)"
        ],
        "rules": "(shares_stories(Maximo) ⊕ makes_calls(Maximo)) → connects_people(Maximo)",
        "conclusion": "connects_people(Maximo)"
      },
      {
        "facts": [
          "reads_books(Maximo)"
        ],
        "rules": "∀x (reads_books(x) ⊕ sends_mail(x))",
        "conclusion": "¬sends_mail(Maximo)"
      },
      {
        "facts": [
          "¬sends_mail(Maximo)"
        ],
        "rules": "sends_mail(Maximo) ∨ enjoys_writing(Maximo)",
        "conclusion": "enjoys_writing(Maximo)"
      },
      {
        "facts": [
          "enjoys_writing(Maximo)",
          "connects_people(Maximo)"
        ],
        "rules": "enjoys_writing(Maximo) → (connects_people(Maximo) ⊕ spreads_happiness(Maximo))",
        "conclusion": "spreads_happiness(Maximo)"
      }
    ],
    "conclusion": "Maximo spreads happiness through his writing.",
    "conclusion_fol": "spreads_happiness(Maximo)",
    "answer": "False",
    "context": [
      "Maximo likes talking.",
      "Maximo has pals.",
      "For all humans, if they like talking and have pals, then they share stories.",
      "Maximo does not make calls.",
      "If Maximo either shares stories or makes calls (but not both), then he connects people.",
      "Maximo reads books.",
      "For all people, either they read books or they send mail, but it's not necessary that they do both.",
      "Maximo either sends mail or enjoys writing.",
      "If Maximo enjoys writing, then he either connects people or spreads happiness, but not both."
    ],
    "context_fol": [
      "likes_talking(Maximo)",
      "has_pals(Maximo)",
      "∀x ((likes_talking(x) ∧ has_pals(x)) → shares_stories(x))",
      "¬makes_calls(Maximo)",
      "(shares_stories(Maximo) ⊕ makes_calls(Maximo)) → connects_people(Maximo)",
      "reads_books(Maximo)",
      "∀x (reads_books(x) ⊕ sends_mail(x))",
      "sends_mail(Maximo) ∨ enjoys_writing(Maximo)",
      "enjoys_writing(Maximo) → (connects_people(Maximo) ⊕ spreads_happiness(Maximo))"
    ],
    "background_story": "Maximo had always been fascinated by the art of letter writing and the joy of receiving mail. As a young boy, he would spend hours scribbling stories and sending them to his pen pals around the world. Years later, Maximo became the town's beloved postmaster, taking great pride in ensuring every piece of mail reached its destination. He knew each resident by name and story, often going the extra mile to deliver a smile along with the daily mail. Maximo's passion for mail was not just about delivering letters, but about connecting people and spreading happiness. His small postal office became a community hub, where locals would gather to share news and stories over the mail that Maximo so diligently delivered.",
    "name": "Maximo",
    "keyword": "mail",
    "subject_category": "human"
  },
  {
    "facts": [
      "Rylee is creative.",
      "Rylee flirts playfully.",
      "Rylee does not have good manners."
    ],
    "facts_fol": [
      "creative(Rylee)",
      "flirts_play(Rylee)",
      "¬has_manner(Rylee)"
    ],
    "rules": [
      "Rylee is either outgoing or reserved, but not both.",
      "Anyone who is charming is either outgoing or confident (or both).",
      "Rylee is either introspective or confident, but not necessarily both.",
      "If Rylee is creative, then she is both emotional and introspective.",
      "If Rylee either flirts playfully or has good manners (but not both), then she is charming."
    ],
    "rules_fol": [
      "outgoing(Rylee) ⊕ reserved(Rylee)",
      "∀x (charming(x) → (outgoing(x) ∨ confident(x)))",
      "isintrospective(Rylee) ⊕ confident(Rylee)",
      "creative(Rylee) → (emotional(Rylee) ∧ isintrospective(Rylee))",
      "(flirts_play(Rylee) ⊕ has_manner(Rylee)) → charming(Rylee)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Everyone who socializes is either outgoing or introverted.",
      "Rylee has style or is confident.",
      "For all humans, if they keep a journal and enjoy solitude, then they are introspective.",
      "Everyone who has flair is either charming or mysterious (or both)."
    ],
    "distracting_rules_fol": [
      "∀x (socializes(x) → (outgoing(x) ∨ introverted(x)))",
      "has_style(Rylee) ∨ confident(Rylee)",
      "∀x ((keeps_journal(x) ∧ enjoys_solitude(x)) → isintrospective(x))",
      "∀x (has_flair(x) → (charming(x) ∨ mysterious(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Rylee flirts playfully.",
          "Rylee does not have good manners."
        ],
        "rules": "If Rylee either flirts playfully or has good manners (but not both), then she is charming.",
        "conclusion": "Rylee is charming."
      },
      {
        "facts": [
          "Rylee is creative."
        ],
        "rules": "If Rylee is creative, then she is both emotional and introspective.",
        "conclusion": "Rylee is introspective."
      },
      {
        "facts": [
          "Rylee is introspective."
        ],
        "rules": "Rylee is either introspective or confident, but not necessarily both.",
        "conclusion": "Rylee is not confident."
      },
      {
        "facts": [
          "Rylee is charming.",
          "Rylee is not confident."
        ],
        "rules": "Anyone who is charming is either outgoing or confident (or both).",
        "conclusion": "Rylee is outgoing."
      },
      {
        "facts": [
          "Rylee is outgoing."
        ],
        "rules": "Rylee is either outgoing or reserved, but not both.",
        "conclusion": "Rylee is reserved."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "flirts_play(Rylee)",
          "¬has_manner(Rylee)"
        ],
        "rules": "(flirts_play(Rylee) ⊕ has_manner(Rylee)) → charming(Rylee)",
        "conclusion": "charming(Rylee)"
      },
      {
        "facts": [
          "creative(Rylee)"
        ],
        "rules": "creative(Rylee) → (emotional(Rylee) ∧ isintrospective(Rylee))",
        "conclusion": "isintrospective(Rylee)"
      },
      {
        "facts": [
          "isintrospective(Rylee)"
        ],
        "rules": "isintrospective(Rylee) ⊕ confident(Rylee)",
        "conclusion": "¬confident(Rylee)"
      },
      {
        "facts": [
          "charming(Rylee)",
          "¬confident(Rylee)"
        ],
        "rules": "∀x (charming(x) → (outgoing(x) ∨ confident(x)))",
        "conclusion": "outgoing(Rylee)"
      },
      {
        "facts": [
          "outgoing(Rylee)"
        ],
        "rules": "outgoing(Rylee) ⊕ reserved(Rylee)",
        "conclusion": "reserved(Rylee)"
      }
    ],
    "conclusion": "Rylee is reserved.",
    "conclusion_fol": "reserved(Rylee)",
    "answer": "False",
    "context": [
      "Rylee flirts playfully.",
      "Rylee does not have good manners.",
      "If Rylee either flirts playfully or has good manners (but not both), then she is charming.",
      "Rylee is creative.",
      "If Rylee is creative, then she is both emotional and introspective.",
      "Rylee is either introspective or confident, but not necessarily both.",
      "Anyone who is charming is either outgoing or confident (or both).",
      "Rylee is either outgoing or reserved, but not both."
    ],
    "context_fol": [
      "flirts_play(Rylee)",
      "¬has_manner(Rylee)",
      "(flirts_play(Rylee) ⊕ has_manner(Rylee)) → charming(Rylee)",
      "creative(Rylee)",
      "creative(Rylee) → (emotional(Rylee) ∧ isintrospective(Rylee))",
      "isintrospective(Rylee) ⊕ confident(Rylee)",
      "∀x (charming(x) → (outgoing(x) ∨ confident(x)))",
      "outgoing(Rylee) ⊕ reserved(Rylee)"
    ],
    "background_story": "Rylee was a free-spirited artist with a penchant for coyness. She had a way of playfully teasing those around her, never revealing too much about her true feelings. With a hint of a smile and a flick of her hair, Rylee could leave a trail of intrigued admirers in her wake. Her coyness was a shield, protecting her from getting too close to others, yet it also made her irresistibly charming. As she worked on her latest art project, a mysterious portrait series, Rylee's coyness inspired her to create pieces that were both alluring and elusive. Her art, like her personality, was a delicate balance of revelation and concealment, leaving viewers wondering what secrets lay beneath her enigmatic smile.",
    "name": "Rylee",
    "keyword": "coyness",
    "subject_category": "human"
  },
  {
    "facts": [
      "Dulce plays piano."
    ],
    "facts_fol": [
      "plays_piano(Dulce)"
    ],
    "rules": [
      "Dulce is either a classical musician or an avant-garde musician, but not both.",
      "Dulce is either a jazz artist or a classical musician, but not both.",
      "Dulce is either an orchestral musician or a jazz artist, but not both.",
      "All musicians who write symphonies are orchestral musicians.",
      "If Dulce plays piano or conducts ensembles, then she can write symphonies."
    ],
    "rules_fol": [
      "classical_musician(Dulce) ⊕ avant_garde_musician(Dulce)",
      "jazz_artist(Dulce) ⊕ classical_musician(Dulce)",
      "is_orchestral(Dulce) ⊕ jazz_artist(Dulce)",
      "∀x (writes_symphonies(x) → is_orchestral(x))",
      "(plays_piano(Dulce) ∨ conducts_ensembles(Dulce)) → writes_symphonies(Dulce)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Dulce trains formally, then she is a classical musician.",
      "If Dulce improvises frequently or experiments with rhythm, then she is a jazz artist.",
      "If Dulce either composes scores or arranges pieces (but not both), then she is an orchestral musician.",
      "If Dulce composes music or creates scores, then she can write symphonies."
    ],
    "distracting_rules_fol": [
      "trains_formally(Dulce) → classical_musician(Dulce)",
      "(improvises_frequently(Dulce) ∨ experiments_rhythm(Dulce)) → jazz_artist(Dulce)",
      "(composes_scores(Dulce) ⊕ arranges_pieces(Dulce)) → is_orchestral(Dulce)",
      "(composes_music(Dulce) ∨ creates_scores(Dulce)) → writes_symphonies(Dulce)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Dulce plays piano."
        ],
        "rules": "If Dulce plays piano or conducts ensembles, then she can write symphonies.",
        "conclusion": "Dulce writes symphonies."
      },
      {
        "facts": [
          "Dulce writes symphonies."
        ],
        "rules": "All musicians who write symphonies are orchestral musicians.",
        "conclusion": "Dulce is an orchestral musician."
      },
      {
        "facts": [
          "Dulce is an orchestral musician."
        ],
        "rules": "Dulce is either an orchestral musician or a jazz artist, but not both.",
        "conclusion": "Dulce is not a jazz artist."
      },
      {
        "facts": [
          "Dulce is not a jazz artist."
        ],
        "rules": "Dulce is either a jazz artist or a classical musician, but not both.",
        "conclusion": "Dulce is a classical musician."
      },
      {
        "facts": [
          "Dulce is a classical musician."
        ],
        "rules": "Dulce is either a classical musician or an avant-garde musician, but not both.",
        "conclusion": "Dulce is not an avant-garde musician."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "plays_piano(Dulce)"
        ],
        "rules": "(plays_piano(Dulce) ∨ conducts_ensembles(Dulce)) → writes_symphonies(Dulce)",
        "conclusion": "writes_symphonies(Dulce)"
      },
      {
        "facts": [
          "writes_symphonies(Dulce)"
        ],
        "rules": "∀x (writes_symphonies(x) → is_orchestral(x))",
        "conclusion": "is_orchestral(Dulce)"
      },
      {
        "facts": [
          "is_orchestral(Dulce)"
        ],
        "rules": "is_orchestral(Dulce) ⊕ jazz_artist(Dulce)",
        "conclusion": "¬jazz_artist(Dulce)"
      },
      {
        "facts": [
          "¬jazz_artist(Dulce)"
        ],
        "rules": "jazz_artist(Dulce) ⊕ classical_musician(Dulce)",
        "conclusion": "classical_musician(Dulce)"
      },
      {
        "facts": [
          "classical_musician(Dulce)"
        ],
        "rules": "classical_musician(Dulce) ⊕ avant_garde_musician(Dulce)",
        "conclusion": "¬avant_garde_musician(Dulce)"
      }
    ],
    "conclusion": "Dulce is not an avant-garde musician.",
    "conclusion_fol": "¬avant_garde_musician(Dulce)",
    "answer": "True",
    "context": [
      "Dulce plays piano.",
      "If Dulce plays piano or conducts ensembles, then she can write symphonies.",
      "All musicians who write symphonies are orchestral musicians.",
      "Dulce is either an orchestral musician or a jazz artist, but not both.",
      "Dulce is either a jazz artist or a classical musician, but not both.",
      "Dulce is either a classical musician or an avant-garde musician, but not both."
    ],
    "context_fol": [
      "plays_piano(Dulce)",
      "(plays_piano(Dulce) ∨ conducts_ensembles(Dulce)) → writes_symphonies(Dulce)",
      "∀x (writes_symphonies(x) → is_orchestral(x))",
      "is_orchestral(Dulce) ⊕ jazz_artist(Dulce)",
      "jazz_artist(Dulce) ⊕ classical_musician(Dulce)",
      "classical_musician(Dulce) ⊕ avant_garde_musician(Dulce)"
    ],
    "background_story": "Dulce was a visionary composer known for her bold experimentation with polytonality. Born into a family of musicians, she was classically trained but soon became fascinated with the avant-garde. Dulce's music often featured multiple keys and melodies played simultaneously, creating a rich, complex sound that was both dissonant and beautiful. Her piece, 'Echoes in Harmony,' premiered to critical acclaim, with critics praising its innovative use of polytonality to evoke the chaos and beauty of modern life. Dulce's compositions were not just a reflection of her technical skill, but a window into her unique perspective on the world, where discord and harmony coexisted in a celebration of sound.",
    "name": "Dulce",
    "keyword": "polytonality",
    "subject_category": "musician"
  },
  {
    "facts": [
      "Randy is not experienced.",
      "Randy does not design experiments.",
      "Randy motivates his students.",
      "Randy engages students."
    ],
    "facts_fol": [
      "¬experienced(Randy)",
      "¬designs_experiments(Randy)",
      "motivate(Randy)",
      "engages_students(Randy)"
    ],
    "rules": [
      "All teachers who motivate their students are successful in their roles.",
      "If Randy either uses technology or designs experiments (but not both), then he is innovative.",
      "Randy either creates lessons or uses technology, indicating that his teaching methods may involve one or the other, but not necessarily both simultaneously.",
      "Randy either engages students or creates lessons, but not necessarily both at the same time."
    ],
    "rules_fol": [
      "∀x (motivate(x) → effective(x))",
      "(uses_technology(Randy) ⊕ designs_experiments(Randy)) → innovative(Randy)",
      "creates_lessons(Randy) ⊕ uses_technology(Randy)",
      "engages_students(Randy) ⊕ creates_lessons(Randy)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If a teacher plans lessons and helps pupils, then they are effective.",
      "Every teacher who develops curriculum either enhances student outcomes or is innovative (or both).",
      "If a teacher teaches online and makes videos, then they use technology.",
      "If Randy is an instructor, then he either creates lessons or makes presentations, but not both."
    ],
    "distracting_rules_fol": [
      "∀x ((plans_lessons(x) ∧ helps_pupils(x)) → effective(x))",
      "∀x (develops_curriculum(x) → (enhances_outcomes(x) ∨ innovative(x)))",
      "∀x ((teaches_online(x) ∧ makes_videos(x)) → uses_technology(x))",
      "is_instructor(Randy) → (creates_lessons(Randy) ⊕ makes_presentations(Randy))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Randy engages students."
        ],
        "rules": "Randy either engages students or creates lessons, but not necessarily both at the same time.",
        "conclusion": "Randy does not create lessons."
      },
      {
        "facts": [
          "Randy does not create lessons."
        ],
        "rules": "Randy either creates lessons or uses technology, indicating that his teaching methods may involve one or the other, but not necessarily both simultaneously.",
        "conclusion": "Randy uses technology."
      },
      {
        "facts": [
          "Randy uses technology.",
          "Randy does not design experiments."
        ],
        "rules": "If Randy either uses technology or designs experiments (but not both), then he is innovative.",
        "conclusion": "Randy is innovative."
      },
      {
        "facts": [
          "Randy motivates his students."
        ],
        "rules": "All teachers who motivate their students are successful in their roles.",
        "conclusion": "Randy is effective."
      },
      {
        "facts": [
          "Randy is innovative.",
          "Randy is not experienced.",
          "Randy is effective."
        ],
        "rules": null,
        "conclusion": "If Randy is either innovative or experienced (but not both), then he is effective."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "engages_students(Randy)"
        ],
        "rules": "engages_students(Randy) ⊕ creates_lessons(Randy)",
        "conclusion": "¬creates_lessons(Randy)"
      },
      {
        "facts": [
          "¬creates_lessons(Randy)"
        ],
        "rules": "creates_lessons(Randy) ⊕ uses_technology(Randy)",
        "conclusion": "uses_technology(Randy)"
      },
      {
        "facts": [
          "uses_technology(Randy)",
          "¬designs_experiments(Randy)"
        ],
        "rules": "(uses_technology(Randy) ⊕ designs_experiments(Randy)) → innovative(Randy)",
        "conclusion": "innovative(Randy)"
      },
      {
        "facts": [
          "motivate(Randy)"
        ],
        "rules": "∀x (motivate(x) → effective(x))",
        "conclusion": "effective(Randy)"
      },
      {
        "facts": [
          "innovative(Randy)",
          "¬experienced(Randy)",
          "effective(Randy)"
        ],
        "rules": null,
        "conclusion": "(innovative(Randy) ⊕ experienced(Randy)) → effective(Randy)"
      }
    ],
    "conclusion": "If Randy is either innovative or experienced (but not both), then he is effective.",
    "conclusion_fol": "(innovative(Randy) ⊕ experienced(Randy)) → effective(Randy)",
    "answer": "True",
    "context": [
      "Randy engages students.",
      "Randy either engages students or creates lessons, but not necessarily both at the same time.",
      "Randy either creates lessons or uses technology, indicating that his teaching methods may involve one or the other, but not necessarily both simultaneously.",
      "Randy does not design experiments.",
      "If Randy either uses technology or designs experiments (but not both), then he is innovative.",
      "Randy motivates his students.",
      "All teachers who motivate their students are successful in their roles.",
      "Randy is not experienced."
    ],
    "context_fol": [
      "engages_students(Randy)",
      "engages_students(Randy) ⊕ creates_lessons(Randy)",
      "creates_lessons(Randy) ⊕ uses_technology(Randy)",
      "¬designs_experiments(Randy)",
      "(uses_technology(Randy) ⊕ designs_experiments(Randy)) → innovative(Randy)",
      "motivate(Randy)",
      "∀x (motivate(x) → effective(x))",
      "¬experienced(Randy)"
    ],
    "background_story": "Randy was a dedicated high school educator who believed in making learning fun and engaging. As the head of the science department, he was tasked with developing a new curricular program that would meet the evolving needs of his students. Randy spent countless hours researching and collaborating with his peers to create an innovative curriculum that incorporated hands-on experiments, real-world applications, and cutting-edge technology. His efforts paid off, as student interest and achievement in science skyrocketed. Randy's curricular design was soon adopted by schools across the district, earning him recognition as a leader in education. His passion for teaching and commitment to providing a well-rounded education made him a beloved figure among students, parents, and colleagues alike.",
    "name": "Randy",
    "keyword": "curricular",
    "subject_category": "teacher"
  },
  {
    "facts": [
      "Alexia understands circuits.",
      "Alexia is curious."
    ],
    "facts_fol": [
      "understands_circuits(Alexia)",
      "is_curious(Alexia)"
    ],
    "rules": [
      "Alexia is either a skilled engineer or a novice engineer, but not both.",
      "If Alexia excels in math and understands circuits, then she is a skilled engineer.",
      "Alexia either learns quickly or excels in math.",
      "Alexia is either curious or learns quickly, but not both."
    ],
    "rules_fol": [
      "skilled_engineer(Alexia) ⊕ novice_engineer(Alexia)",
      "(excels_math(Alexia) ∧ understands_circuits(Alexia)) → skilled_engineer(Alexia)",
      "learns_fast(Alexia) ∨ excels_math(Alexia)",
      "is_curious(Alexia) ⊕ learns_fast(Alexia)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Alexia designs well, then she is a skilled engineer.",
      "If Alexia likes gadgets, then she excels in math and solves problems.",
      "If Alexia is eager, then she will learn quickly."
    ],
    "distracting_rules_fol": [
      "designs_well(Alexia) → skilled_engineer(Alexia)",
      "likes_gadgets(Alexia) → (excels_math(Alexia) ∧ solves_problems(Alexia))",
      "is_eager(Alexia) → learns_fast(Alexia)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Alexia is curious."
        ],
        "rules": "Alexia is either curious or learns quickly, but not both.",
        "conclusion": "Alexia does not learn quickly."
      },
      {
        "facts": [
          "Alexia does not learn quickly."
        ],
        "rules": "Alexia either learns quickly or excels in math.",
        "conclusion": "Alexia excels in math."
      },
      {
        "facts": [
          "Alexia excels in math.",
          "Alexia understands circuits."
        ],
        "rules": "If Alexia excels in math and understands circuits, then she is a skilled engineer.",
        "conclusion": "Alexia is a skilled engineer."
      },
      {
        "facts": [
          "Alexia is a skilled engineer."
        ],
        "rules": "Alexia is either a skilled engineer or a novice engineer, but not both.",
        "conclusion": "Alexia is a novice engineer."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "is_curious(Alexia)"
        ],
        "rules": "is_curious(Alexia) ⊕ learns_fast(Alexia)",
        "conclusion": "¬learns_fast(Alexia)"
      },
      {
        "facts": [
          "¬learns_fast(Alexia)"
        ],
        "rules": "learns_fast(Alexia) ∨ excels_math(Alexia)",
        "conclusion": "excels_math(Alexia)"
      },
      {
        "facts": [
          "excels_math(Alexia)",
          "understands_circuits(Alexia)"
        ],
        "rules": "(excels_math(Alexia) ∧ understands_circuits(Alexia)) → skilled_engineer(Alexia)",
        "conclusion": "skilled_engineer(Alexia)"
      },
      {
        "facts": [
          "skilled_engineer(Alexia)"
        ],
        "rules": "skilled_engineer(Alexia) ⊕ novice_engineer(Alexia)",
        "conclusion": "novice_engineer(Alexia)"
      }
    ],
    "conclusion": "Alexia is a novice engineer.",
    "conclusion_fol": "novice_engineer(Alexia)",
    "answer": "False",
    "context": [
      "Alexia is curious.",
      "Alexia is either curious or learns quickly, but not both.",
      "Alexia either learns quickly or excels in math.",
      "Alexia understands circuits.",
      "If Alexia excels in math and understands circuits, then she is a skilled engineer.",
      "Alexia is either a skilled engineer or a novice engineer, but not both."
    ],
    "context_fol": [
      "is_curious(Alexia)",
      "is_curious(Alexia) ⊕ learns_fast(Alexia)",
      "learns_fast(Alexia) ∨ excels_math(Alexia)",
      "understands_circuits(Alexia)",
      "(excels_math(Alexia) ∧ understands_circuits(Alexia)) → skilled_engineer(Alexia)",
      "skilled_engineer(Alexia) ⊕ novice_engineer(Alexia)"
    ],
    "background_story": "Alexia was an electrical engineering prodigy with a passion for wiring and circuitry. As a child, she would spend hours taking apart and reassembling gadgets to understand their inner workings. Her fascination with the flow of electricity led her to pursue a career in electronics. After completing her degree, Alexia landed a job at a prestigious tech firm, where she quickly made a name for herself as a skilled wiring expert. Her meticulous attention to detail and innovative approach to circuit design earned her the respect of her peers. Alexia's most notable project involved designing the wiring system for a state-of-the-art smart home, which showcased her exceptional talent and solidified her position as a leading expert in her field.",
    "name": "Alexia",
    "keyword": "wiring",
    "subject_category": "human"
  },
  {
    "facts": [
      "Reese is a gardener.",
      "Reese does not explore nature.",
      "Reese does not love plants.",
      "Reese conserves.",
      "Reese keeps bees."
    ],
    "facts_fol": [
      "gardener(Reese)",
      "¬explore_nature(Reese)",
      "¬love_plants(Reese)",
      "conserves(Reese)",
      "keeps_bees(Reese)"
    ],
    "rules": [
      "If Reese is a botanist, then she either studies rare plants or creates innovative remedies (or both).",
      "If Reese is a gardener, then she is either an ecologist or a botanist, but not both.",
      "If Reese explores nature, then she loves plants and creates innovative remedies.",
      "If Reese conserves, then she is either a farmer or an ecologist, but not both.",
      "Reese either keeps bees or is a farmer, but not both."
    ],
    "rules_fol": [
      "botanist(Reese) → (study_rare_plants(Reese) ∨ create_innovative_remedies(Reese))",
      "gardener(Reese) → (ecologist(Reese) ⊕ botanist(Reese))",
      "explore_nature(Reese) → (love_plants(Reese) ∧ create_innovative_remedies(Reese))",
      "conserves(Reese) → (farmer(Reese) ⊕ ecologist(Reese))",
      "keeps_bees(Reese) ⊕ farmer(Reese)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Reese is a scientist, then she is either a collector of seeds or a botanist, but not both.",
      "If Reese is a scientist, then she either teaches others or creates innovative remedies, but not both.",
      "If Reese cares about the environment, then she respects wildlife and is an ecologist.",
      "If Reese nurtures, then she is either a farmer or a researcher, but not both."
    ],
    "distracting_rules_fol": [
      "scientist(Reese) → (collects_seeds(Reese) ⊕ botanist(Reese))",
      "is_scientist(Reese) → (teach_others(Reese) ⊕ create_innovative_remedies(Reese))",
      "care_environment(Reese) → (respect_wildlife(Reese) ∧ ecologist(Reese))",
      "nurtures(Reese) → (farmer(Reese) ⊕ researcher(Reese))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Reese keeps bees."
        ],
        "rules": "Reese either keeps bees or is a farmer, but not both.",
        "conclusion": "Reese is not a farmer."
      },
      {
        "facts": [
          "Reese conserves.",
          "Reese is not a farmer."
        ],
        "rules": "If Reese conserves, then she is either a farmer or an ecologist, but not both.",
        "conclusion": "Reese is an ecologist."
      },
      {
        "facts": [
          "Reese does not explore nature.",
          "Reese does not love plants."
        ],
        "rules": "If Reese explores nature, then she loves plants and creates innovative remedies.",
        "conclusion": null
      },
      {
        "facts": [
          "Reese is a gardener.",
          "Reese is an ecologist."
        ],
        "rules": "If Reese is a gardener, then she is either an ecologist or a botanist, but not both.",
        "conclusion": "Reese is not a botanist."
      },
      {
        "facts": [
          "Reese is not a botanist."
        ],
        "rules": "If Reese is a botanist, then she either studies rare plants or creates innovative remedies (or both).",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "keeps_bees(Reese)"
        ],
        "rules": "keeps_bees(Reese) ⊕ farmer(Reese)",
        "conclusion": "¬farmer(Reese)"
      },
      {
        "facts": [
          "conserves(Reese)",
          "¬farmer(Reese)"
        ],
        "rules": "conserves(Reese) → (farmer(Reese) ⊕ ecologist(Reese))",
        "conclusion": "ecologist(Reese)"
      },
      {
        "facts": [
          "¬explore_nature(Reese)",
          "¬love_plants(Reese)"
        ],
        "rules": "explore_nature(Reese) → (love_plants(Reese) ∧ create_innovative_remedies(Reese))",
        "conclusion": null
      },
      {
        "facts": [
          "gardener(Reese)",
          "ecologist(Reese)"
        ],
        "rules": "gardener(Reese) → (ecologist(Reese) ⊕ botanist(Reese))",
        "conclusion": "¬botanist(Reese)"
      },
      {
        "facts": [
          "¬botanist(Reese)"
        ],
        "rules": "botanist(Reese) → (study_rare_plants(Reese) ∨ create_innovative_remedies(Reese))",
        "conclusion": null
      }
    ],
    "conclusion": "Reese does not study rare plants.",
    "conclusion_fol": "¬study_rare_plants(Reese)",
    "answer": "Uncertain",
    "context": [
      "Reese keeps bees.",
      "Reese either keeps bees or is a farmer, but not both.",
      "Reese conserves.",
      "If Reese conserves, then she is either a farmer or an ecologist, but not both.",
      "Reese does not explore nature.",
      "Reese does not love plants.",
      "If Reese explores nature, then she loves plants and creates innovative remedies.",
      "Reese is a gardener.",
      "If Reese is a gardener, then she is either an ecologist or a botanist, but not both.",
      "If Reese is a botanist, then she either studies rare plants or creates innovative remedies (or both)."
    ],
    "context_fol": [
      "keeps_bees(Reese)",
      "keeps_bees(Reese) ⊕ farmer(Reese)",
      "conserves(Reese)",
      "conserves(Reese) → (farmer(Reese) ⊕ ecologist(Reese))",
      "¬explore_nature(Reese)",
      "¬love_plants(Reese)",
      "explore_nature(Reese) → (love_plants(Reese) ∧ create_innovative_remedies(Reese))",
      "gardener(Reese)",
      "gardener(Reese) → (ecologist(Reese) ⊕ botanist(Reese))",
      "botanist(Reese) → (study_rare_plants(Reese) ∨ create_innovative_remedies(Reese))"
    ],
    "background_story": "Reese was a talented and eccentric botanist with a passion for rare herbs. Her obsession with foeniculum, or fennel, led her to travel the world in search of its various species. From the sweet, anise-flavored bulbs of Florence to the wild, crunchy stalks of the Indian countryside, Reese studied and cultivated them all. She believed that the unique properties of foeniculum held the key to creating innovative, plant-based remedies. Reese's greenhouse, filled with rows of towering fennel plants, became a haven for local bees and a symbol of her dedication to the natural world. As news of her groundbreaking research spread, Reese became known as the 'Fennel Whisperer,' attracting visitors from around the globe who sought her expertise on the versatile and enchanting foeniculum.",
    "name": "Reese",
    "keyword": "foeniculum",
    "subject_category": "human"
  },
  {
    "facts": [
      "Paula creates movements.",
      "Paula teaches others."
    ],
    "facts_fol": [
      "creates_movements(Paula)",
      "teaches_others(Paula)"
    ],
    "rules": [
      "Paula is either a dancer or a choreographer, but the story shows she can be both, however, the expression implies a choice between two states, so a better interpretation would be: Paula is either focused on dancing or focused on choreographing, but not both at the same time.",
      "If Paula either performs routines or creates movements (but not both), then she is a dancer.",
      "Paula either teaches others or performs routines, but not both, in her journey as a dancer."
    ],
    "rules_fol": [
      "dancer(Paula) ⊕ choreographer(Paula)",
      "(performs_routines(Paula) ⊕ creates_movements(Paula)) → dancer(Paula)",
      "teaches_others(Paula) ⊕ performs_routines(Paula)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Paula loves music, then she is either a dancer or enjoys theater.",
      "If Paula loves music, then she either makes choreos or performs routines, but not both."
    ],
    "distracting_rules_fol": [
      "loves_music(Paula) → (dancer(Paula) ∨ enjoys_theater(Paula))",
      "loves_music(Paula) → (makes_choreos(Paula) ⊕ performs_routines(Paula))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Paula teaches others."
        ],
        "rules": "Paula either teaches others or performs routines, but not both, in her journey as a dancer.",
        "conclusion": "Paula does not perform routines."
      },
      {
        "facts": [
          "Paula does not perform routines.",
          "Paula creates movements."
        ],
        "rules": "If Paula either performs routines or creates movements (but not both), then she is a dancer.",
        "conclusion": "Paula is focused on dancing."
      },
      {
        "facts": [
          "Paula is focused on dancing."
        ],
        "rules": "Paula is either a dancer or a choreographer, but the story shows she can be both, however, the expression implies a choice between two states, so a better interpretation would be: Paula is either focused on dancing or focused on choreographing, but not both at the same time.",
        "conclusion": "Paula is focused on choreographing."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "teaches_others(Paula)"
        ],
        "rules": "teaches_others(Paula) ⊕ performs_routines(Paula)",
        "conclusion": "¬performs_routines(Paula)"
      },
      {
        "facts": [
          "¬performs_routines(Paula)",
          "creates_movements(Paula)"
        ],
        "rules": "(performs_routines(Paula) ⊕ creates_movements(Paula)) → dancer(Paula)",
        "conclusion": "dancer(Paula)"
      },
      {
        "facts": [
          "dancer(Paula)"
        ],
        "rules": "dancer(Paula) ⊕ choreographer(Paula)",
        "conclusion": "choreographer(Paula)"
      }
    ],
    "conclusion": "Paula is focused on choreographing.",
    "conclusion_fol": "choreographer(Paula)",
    "answer": "False",
    "context": [
      "Paula teaches others.",
      "Paula either teaches others or performs routines, but not both, in her journey as a dancer.",
      "Paula creates movements.",
      "If Paula either performs routines or creates movements (but not both), then she is a dancer.",
      "Paula is either a dancer or a choreographer, but the story shows she can be both, however, the expression implies a choice between two states, so a better interpretation would be: Paula is either focused on dancing or focused on choreographing, but not both at the same time."
    ],
    "context_fol": [
      "teaches_others(Paula)",
      "teaches_others(Paula) ⊕ performs_routines(Paula)",
      "creates_movements(Paula)",
      "(performs_routines(Paula) ⊕ creates_movements(Paula)) → dancer(Paula)",
      "dancer(Paula) ⊕ choreographer(Paula)"
    ],
    "background_story": "Paula had always dreamed of becoming a professional dancer. She spent years training, perfecting her technique, and performing in local productions. However, her progress was impeded when she suffered a severe ankle injury during a particularly demanding rehearsal. The road to recovery was long and arduous, with months of physical therapy and setbacks that threatened to derail her career. Despite the challenges, Paula refused to give up. She adapted her training, focusing on upper body strength and choreography. Though her injury impeded her ability to perform certain moves, Paula discovered a new passion for teaching and choreographing, ultimately finding a new path to success in the dance world.",
    "name": "Paula",
    "keyword": "impeded",
    "subject_category": "human"
  },
  {
    "facts": [
      "Dearestone embodies circularity.",
      "Dearestone does not support rebirth.",
      "Dearestone nourishes life in Aethoria.",
      "Dearestone does not hold wisdom.",
      "Dearestone fosters harmony."
    ],
    "facts_fol": [
      "embodies_circularity(Dearestone)",
      "¬supports_rebirth(Dearestone)",
      "nourish_life(Dearestone)",
      "¬holds_wisdom(Dearestone)",
      "fosters_harmony(Dearestone)"
    ],
    "rules": [
      "Aethoria either nourishes life through Dearestone or promotes balance, but not necessarily both.",
      "If Dearestone is sacred, then it either has magic or supports rebirth.",
      "Any fantasy realm that holds wisdom or fosters harmony is sacred."
    ],
    "rules_fol": [
      "nourish_life(Dearestone) ⊕ promote_balance(Dearestone)",
      "is_sacred(Dearestone) → (has_magic(Dearestone) ∨ supports_rebirth(Dearestone))",
      "∀x ((holds_wisdom(x) ∨ fosters_harmony(x)) → is_sacred(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Any fantasy realm that cultivates growth and respects cycles can promote balance.",
      "All ancient fantasy realms inspire wonder and have magic.",
      "Dearestone either heals souls or is sacred."
    ],
    "distracting_rules_fol": [
      "∀x ((cultivates_growth(x) ∧ respects_cycles(x)) → promote_balance(x))",
      "∀x (is_ancient(x) → (inspire_wonder(x) ∧ has_magic(x)))",
      "heals_souls(Dearestone) ∨ is_sacred(Dearestone)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Dearestone does not hold wisdom.",
          "Dearestone fosters harmony."
        ],
        "rules": "Any fantasy realm that holds wisdom or fosters harmony is sacred.",
        "conclusion": "Dearestone is sacred."
      },
      {
        "facts": [
          "Dearestone is sacred.",
          "Dearestone does not support rebirth."
        ],
        "rules": "If Dearestone is sacred, then it either has magic or supports rebirth.",
        "conclusion": "Dearestone has magic."
      },
      {
        "facts": [
          "Dearestone nourishes life in Aethoria."
        ],
        "rules": "Aethoria either nourishes life through Dearestone or promotes balance, but not necessarily both.",
        "conclusion": "Dearestone does not promote balance."
      },
      {
        "facts": [
          "Dearestone has magic.",
          "Dearestone does not promote balance.",
          "Dearestone embodies circularity."
        ],
        "rules": null,
        "conclusion": "Aethoria has magic and either promotes balance through Dearestone or embodies circularity as seen in Dearestone's life cycle (or both)."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬holds_wisdom(Dearestone)",
          "fosters_harmony(Dearestone)"
        ],
        "rules": "∀x ((holds_wisdom(x) ∨ fosters_harmony(x)) → is_sacred(x))",
        "conclusion": "is_sacred(Dearestone)"
      },
      {
        "facts": [
          "is_sacred(Dearestone)",
          "¬supports_rebirth(Dearestone)"
        ],
        "rules": "is_sacred(Dearestone) → (has_magic(Dearestone) ∨ supports_rebirth(Dearestone))",
        "conclusion": "has_magic(Dearestone)"
      },
      {
        "facts": [
          "nourish_life(Dearestone)"
        ],
        "rules": "nourish_life(Dearestone) ⊕ promote_balance(Dearestone)",
        "conclusion": "¬promote_balance(Dearestone)"
      },
      {
        "facts": [
          "has_magic(Dearestone)",
          "¬promote_balance(Dearestone)",
          "embodies_circularity(Dearestone)"
        ],
        "rules": null,
        "conclusion": "has_magic(Dearestone) ∧ (promote_balance(Dearestone) ∨ embodies_circularity(Dearestone))"
      }
    ],
    "conclusion": "Aethoria has magic and either promotes balance through Dearestone or embodies circularity as seen in Dearestone's life cycle (or both).",
    "conclusion_fol": "has_magic(Dearestone) ∧ (promote_balance(Dearestone) ∨ embodies_circularity(Dearestone))",
    "answer": "True",
    "context": [
      "Dearestone does not hold wisdom.",
      "Dearestone fosters harmony.",
      "Any fantasy realm that holds wisdom or fosters harmony is sacred.",
      "Dearestone does not support rebirth.",
      "If Dearestone is sacred, then it either has magic or supports rebirth.",
      "Dearestone nourishes life in Aethoria.",
      "Aethoria either nourishes life through Dearestone or promotes balance, but not necessarily both.",
      "Dearestone embodies circularity."
    ],
    "context_fol": [
      "¬holds_wisdom(Dearestone)",
      "fosters_harmony(Dearestone)",
      "∀x ((holds_wisdom(x) ∨ fosters_harmony(x)) → is_sacred(x))",
      "¬supports_rebirth(Dearestone)",
      "is_sacred(Dearestone) → (has_magic(Dearestone) ∨ supports_rebirth(Dearestone))",
      "nourish_life(Dearestone)",
      "nourish_life(Dearestone) ⊕ promote_balance(Dearestone)",
      "embodies_circularity(Dearestone)"
    ],
    "background_story": "In the mystical realm of Aethoria, Dearestone was a ancient, sentient forest, embodying the concept of circularity. Its trees grew in a perfect circle, with each one connected to the others through an intricate network of roots. Dearestone's cycle of life and death was a marvel, where trees would wither and fall, only to nourish the soil for new saplings to sprout. The forest's creatures lived in harmony with this cycle, understanding that every ending marked a new beginning. Dearestone's wisdom was sought by the realm's inhabitants, who would come to meditate within its circular heart, seeking balance and renewal. As the seasons passed, Dearestone remained a constant reminder of the beauty and necessity of circularity, where life, death, and rebirth were intertwined.",
    "name": "Dearestone",
    "keyword": "circularity",
    "subject_category": "fantasy realm"
  },
  {
    "facts": [
      "Orion is visible.",
      "Orion is ethereal.",
      "Orion is shadowy.",
      "Orion is a starry mythical creature.",
      "Orion is a divine mythical creature.",
      "Orion is radiant."
    ],
    "facts_fol": [
      "visible(Orion)",
      "ethereal(Orion)",
      "shadowy(Orion)",
      "starry(Orion)",
      "divine(Orion)",
      "radiant(Orion)"
    ],
    "rules": [
      "If Orion is either visible or invisible (but not both), then he is mysterious.",
      "If Orion is ethereal, then he is either luminous or invisible, but not both.",
      "If Orion is a cosmic mythical creature, then he is either luminous or shadowy, but not both.",
      "Every mythical creature that is starry is either glowing or cosmic (or both).",
      "If Orion is a divine mythical creature, then he is either glowing or radiant, but not both."
    ],
    "rules_fol": [
      "(visible(Orion) ⊕ invisible(Orion)) → mysterious(Orion)",
      "ethereal(Orion) → (luminous(Orion) ⊕ invisible(Orion))",
      "cosmic(Orion) → (luminous(Orion) ⊕ shadowy(Orion))",
      "∀x (starry(x) → (glowing(x) ∨ cosmic(x)))",
      "divine(Orion) → (glowing(Orion) ⊕ radiant(Orion))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Orion is nocturnal, then he is either invisible or translucent, but not both.",
      "Any mythical creature that has an aura and emits light is luminous.",
      "Orion is cosmic because he is a heavenly mythical creature.",
      "If Orion is a heavenly mythical creature, then he is either glowing or fiery."
    ],
    "distracting_rules_fol": [
      "nocturnal(Orion) → (invisible(Orion) ⊕ translucent(Orion))",
      "∀x ((has_aura(x) ∧ emits_light(x)) → luminous(x))",
      "heavenly(Orion) → cosmic(Orion)",
      "heavenly(Orion) → (glowing(Orion) ⊕ fiery(Orion))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Orion is a divine mythical creature.",
          "Orion is radiant."
        ],
        "rules": "If Orion is a divine mythical creature, then he is either glowing or radiant, but not both.",
        "conclusion": "Orion is not glowing."
      },
      {
        "facts": [
          "Orion is a starry mythical creature.",
          "Orion is not glowing."
        ],
        "rules": "Every mythical creature that is starry is either glowing or cosmic (or both).",
        "conclusion": "Orion is a cosmic mythical creature."
      },
      {
        "facts": [
          "Orion is a cosmic mythical creature.",
          "Orion is shadowy."
        ],
        "rules": "If Orion is a cosmic mythical creature, then he is either luminous or shadowy, but not both.",
        "conclusion": "Orion is not luminous."
      },
      {
        "facts": [
          "Orion is ethereal.",
          "Orion is not luminous."
        ],
        "rules": "If Orion is ethereal, then he is either luminous or invisible, but not both.",
        "conclusion": "Orion is invisible."
      },
      {
        "facts": [
          "Orion is visible.",
          "Orion is invisible."
        ],
        "rules": "If Orion is either visible or invisible (but not both), then he is mysterious.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "divine(Orion)",
          "radiant(Orion)"
        ],
        "rules": "divine(Orion) → (glowing(Orion) ⊕ radiant(Orion))",
        "conclusion": "¬glowing(Orion)"
      },
      {
        "facts": [
          "starry(Orion)",
          "¬glowing(Orion)"
        ],
        "rules": "∀x (starry(x) → (glowing(x) ∨ cosmic(x)))",
        "conclusion": "cosmic(Orion)"
      },
      {
        "facts": [
          "cosmic(Orion)",
          "shadowy(Orion)"
        ],
        "rules": "cosmic(Orion) → (luminous(Orion) ⊕ shadowy(Orion))",
        "conclusion": "¬luminous(Orion)"
      },
      {
        "facts": [
          "ethereal(Orion)",
          "¬luminous(Orion)"
        ],
        "rules": "ethereal(Orion) → (luminous(Orion) ⊕ invisible(Orion))",
        "conclusion": "invisible(Orion)"
      },
      {
        "facts": [
          "visible(Orion)",
          "invisible(Orion)"
        ],
        "rules": "(visible(Orion) ⊕ invisible(Orion)) → mysterious(Orion)",
        "conclusion": null
      }
    ],
    "conclusion": "Orion is not mysterious.",
    "conclusion_fol": "¬mysterious(Orion)",
    "answer": "Uncertain",
    "context": [
      "Orion is a divine mythical creature.",
      "Orion is radiant.",
      "If Orion is a divine mythical creature, then he is either glowing or radiant, but not both.",
      "Orion is a starry mythical creature.",
      "Every mythical creature that is starry is either glowing or cosmic (or both).",
      "Orion is shadowy.",
      "If Orion is a cosmic mythical creature, then he is either luminous or shadowy, but not both.",
      "Orion is ethereal.",
      "If Orion is ethereal, then he is either luminous or invisible, but not both.",
      "Orion is visible.",
      "If Orion is either visible or invisible (but not both), then he is mysterious."
    ],
    "context_fol": [
      "divine(Orion)",
      "radiant(Orion)",
      "divine(Orion) → (glowing(Orion) ⊕ radiant(Orion))",
      "starry(Orion)",
      "∀x (starry(x) → (glowing(x) ∨ cosmic(x)))",
      "shadowy(Orion)",
      "cosmic(Orion) → (luminous(Orion) ⊕ shadowy(Orion))",
      "ethereal(Orion)",
      "ethereal(Orion) → (luminous(Orion) ⊕ invisible(Orion))",
      "visible(Orion)",
      "(visible(Orion) ⊕ invisible(Orion)) → mysterious(Orion)"
    ],
    "background_story": "Orion, the celestial hunter, was a figure of myth and legend. His presence was as fleeting as a shooting star, leaving behind only whispers of his existence. It was said that on certain nights, when the moon was new and the sky was at its darkest, Orion would manifest, his form insubstantially woven from the very fabric of the stars. His footsteps would echo through the forests, a gentle rustling of leaves, yet his physical presence would remain elusive. Those who claimed to have seen him spoke of an otherworldly beauty, a being of pure energy and light. Orion's insubstantial nature made him a mystery, a creature of wonder and awe, forever dancing on the edge of reality.",
    "name": "Orion",
    "keyword": "insubstantially",
    "subject_category": "mythical creature"
  },
  {
    "facts": [
      "Elisabeth fixes wood.",
      "Elisabeth matches colors.",
      "Elisabeth has skilled hands."
    ],
    "facts_fol": [
      "fixes_wood(Elisabeth)",
      "matches_colors(Elisabeth)",
      "skilled_hands(Elisabeth)"
    ],
    "rules": [
      "Elisabeth is either creative or unartistic, but not both.",
      "If Elisabeth either designs patterns or makes crafts (but not both), then she is creative.",
      "Elisabeth either restores furniture or designs patterns, but not both.",
      "If someone fixes wood and matches colors, then they can restore furniture.",
      "If Elisabeth has skilled hands, then she makes crafts and loves details."
    ],
    "rules_fol": [
      "creative(Elisabeth) ⊕ unartistic(Elisabeth)",
      "(designs_patterns(Elisabeth) ⊕ makes_crafts(Elisabeth)) → creative(Elisabeth)",
      "restores_furniture(Elisabeth) ⊕ designs_patterns(Elisabeth)",
      "∀x ((fixes_wood(x) ∧ matches_colors(x)) → restores_furniture(x))",
      "skilled_hands(Elisabeth) → (makes_crafts(Elisabeth) ∧ loves_details(Elisabeth))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Anyone who thinks outside the box or sees beauty in things can be creative.",
      "If someone either creates textiles or draws motifs (but not both), then they design patterns.",
      "If Elisabeth either makes decor or builds cabinets (but not both), then she restores furniture.",
      "If Elisabeth enjoys manual work, then she makes crafts."
    ],
    "distracting_rules_fol": [
      "∀x ((thinks_outside(x) ∨ sees_beauty(x)) → creative(x))",
      "∀x ((creates_textiles(x) ⊕ draws_motifs(x)) → designs_patterns(x))",
      "(makes_decor(Elisabeth) ⊕ builds_cabinets(Elisabeth)) → restores_furniture(Elisabeth)",
      "enjoys_manual_work(Elisabeth) → makes_crafts(Elisabeth)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Elisabeth has skilled hands."
        ],
        "rules": "If Elisabeth has skilled hands, then she makes crafts and loves details.",
        "conclusion": "Elisabeth makes crafts."
      },
      {
        "facts": [
          "Elisabeth fixes wood.",
          "Elisabeth matches colors."
        ],
        "rules": "If someone fixes wood and matches colors, then they can restore furniture.",
        "conclusion": "Elisabeth restores furniture."
      },
      {
        "facts": [
          "Elisabeth restores furniture."
        ],
        "rules": "Elisabeth either restores furniture or designs patterns, but not both.",
        "conclusion": "Elisabeth does not design patterns."
      },
      {
        "facts": [
          "Elisabeth does not design patterns.",
          "Elisabeth makes crafts."
        ],
        "rules": "If Elisabeth either designs patterns or makes crafts (but not both), then she is creative.",
        "conclusion": "Elisabeth is creative."
      },
      {
        "facts": [
          "Elisabeth is creative."
        ],
        "rules": "Elisabeth is either creative or unartistic, but not both.",
        "conclusion": "Elisabeth is unartistic."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "skilled_hands(Elisabeth)"
        ],
        "rules": "skilled_hands(Elisabeth) → (makes_crafts(Elisabeth) ∧ loves_details(Elisabeth))",
        "conclusion": "makes_crafts(Elisabeth)"
      },
      {
        "facts": [
          "fixes_wood(Elisabeth)",
          "matches_colors(Elisabeth)"
        ],
        "rules": "∀x ((fixes_wood(x) ∧ matches_colors(x)) → restores_furniture(x))",
        "conclusion": "restores_furniture(Elisabeth)"
      },
      {
        "facts": [
          "restores_furniture(Elisabeth)"
        ],
        "rules": "restores_furniture(Elisabeth) ⊕ designs_patterns(Elisabeth)",
        "conclusion": "¬designs_patterns(Elisabeth)"
      },
      {
        "facts": [
          "¬designs_patterns(Elisabeth)",
          "makes_crafts(Elisabeth)"
        ],
        "rules": "(designs_patterns(Elisabeth) ⊕ makes_crafts(Elisabeth)) → creative(Elisabeth)",
        "conclusion": "creative(Elisabeth)"
      },
      {
        "facts": [
          "creative(Elisabeth)"
        ],
        "rules": "creative(Elisabeth) ⊕ unartistic(Elisabeth)",
        "conclusion": "unartistic(Elisabeth)"
      }
    ],
    "conclusion": "Elisabeth is unartistic.",
    "conclusion_fol": "unartistic(Elisabeth)",
    "answer": "False",
    "context": [
      "Elisabeth has skilled hands.",
      "If Elisabeth has skilled hands, then she makes crafts and loves details.",
      "Elisabeth fixes wood.",
      "Elisabeth matches colors.",
      "If someone fixes wood and matches colors, then they can restore furniture.",
      "Elisabeth either restores furniture or designs patterns, but not both.",
      "If Elisabeth either designs patterns or makes crafts (but not both), then she is creative.",
      "Elisabeth is either creative or unartistic, but not both."
    ],
    "context_fol": [
      "skilled_hands(Elisabeth)",
      "skilled_hands(Elisabeth) → (makes_crafts(Elisabeth) ∧ loves_details(Elisabeth))",
      "fixes_wood(Elisabeth)",
      "matches_colors(Elisabeth)",
      "∀x ((fixes_wood(x) ∧ matches_colors(x)) → restores_furniture(x))",
      "restores_furniture(Elisabeth) ⊕ designs_patterns(Elisabeth)",
      "(designs_patterns(Elisabeth) ⊕ makes_crafts(Elisabeth)) → creative(Elisabeth)",
      "creative(Elisabeth) ⊕ unartistic(Elisabeth)"
    ],
    "background_story": "Elisabeth was a skilled artisan with a passion for transforming spaces. As a professional wallpaperer, she took pride in her meticulous work, ensuring every seam was perfectly aligned and every bubble smoothed out. With years of experience, Elisabeth developed a keen eye for pattern and design, often helping clients choose the perfect paper to match their unique style. Her workshop was a treasure trove of vintage and modern papers, and she loved nothing more than sharing her knowledge with customers. From historic mansions to cozy apartments, Elisabeth's wallpapering skills brought warmth and character to every room she touched, earning her a reputation as one of the most sought-after wallpaperers in the city.",
    "name": "Elisabeth",
    "keyword": "wallpaperer",
    "subject_category": "human"
  },
  {
    "facts": [
      "Elise does not enjoy art.",
      "Elise feels the music.",
      "Elise does not express passion."
    ],
    "facts_fol": [
      "¬enjoys_art(Elise)",
      "feels_music(Elise)",
      "¬expresses_passion(Elise)"
    ],
    "rules": [
      "If Elise loves dance, then she can either teach others or perform professionally, but not both.",
      "Elise enjoys art or performs professionally.",
      "If Elise moves to the rhythm, then she loves dance.",
      "Anyone who feels the music either expresses passion or moves to the rhythm (or both)."
    ],
    "rules_fol": [
      "loves_dance(Elise) → (teach_others(Elise) ⊕ perform_professionally(Elise))",
      "enjoys_art(Elise) ∨ perform_professionally(Elise)",
      "moves_rhythm(Elise) → loves_dance(Elise)",
      "∀x (feels_music(x) → (expresses_passion(x) ∨ moves_rhythm(x)))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Elise either choreographs routines or directs shows (but not both), then she performs professionally.",
      "Elise either plays an instrument or loves dance.",
      "If Elise has soul, then she moves to the rhythm."
    ],
    "distracting_rules_fol": [
      "(choreographs_routines(Elise) ⊕ directs_shows(Elise)) → perform_professionally(Elise)",
      "plays_instrument(Elise) ∨ loves_dance(Elise)",
      "has_soul(Elise) → moves_rhythm(Elise)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Elise feels the music.",
          "Elise does not express passion."
        ],
        "rules": "Anyone who feels the music either expresses passion or moves to the rhythm (or both).",
        "conclusion": "Elise moves to the rhythm."
      },
      {
        "facts": [
          "Elise moves to the rhythm."
        ],
        "rules": "If Elise moves to the rhythm, then she loves dance.",
        "conclusion": "Elise loves dance."
      },
      {
        "facts": [
          "Elise does not enjoy art."
        ],
        "rules": "Elise enjoys art or performs professionally.",
        "conclusion": "Elise performs dance professionally."
      },
      {
        "facts": [
          "Elise loves dance.",
          "Elise performs dance professionally."
        ],
        "rules": "If Elise loves dance, then she can either teach others or perform professionally, but not both.",
        "conclusion": "Elise teaches others how to dance."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "feels_music(Elise)",
          "¬expresses_passion(Elise)"
        ],
        "rules": "∀x (feels_music(x) → (expresses_passion(x) ∨ moves_rhythm(x)))",
        "conclusion": "moves_rhythm(Elise)"
      },
      {
        "facts": [
          "moves_rhythm(Elise)"
        ],
        "rules": "moves_rhythm(Elise) → loves_dance(Elise)",
        "conclusion": "loves_dance(Elise)"
      },
      {
        "facts": [
          "¬enjoys_art(Elise)"
        ],
        "rules": "enjoys_art(Elise) ∨ perform_professionally(Elise)",
        "conclusion": "perform_professionally(Elise)"
      },
      {
        "facts": [
          "loves_dance(Elise)",
          "perform_professionally(Elise)"
        ],
        "rules": "loves_dance(Elise) → (teach_others(Elise) ⊕ perform_professionally(Elise))",
        "conclusion": "teach_others(Elise)"
      }
    ],
    "conclusion": "Elise teaches others how to dance.",
    "conclusion_fol": "teach_others(Elise)",
    "answer": "False",
    "context": [
      "Elise feels the music.",
      "Elise does not express passion.",
      "Anyone who feels the music either expresses passion or moves to the rhythm (or both).",
      "If Elise moves to the rhythm, then she loves dance.",
      "Elise does not enjoy art.",
      "Elise enjoys art or performs professionally.",
      "If Elise loves dance, then she can either teach others or perform professionally, but not both."
    ],
    "context_fol": [
      "feels_music(Elise)",
      "¬expresses_passion(Elise)",
      "∀x (feels_music(x) → (expresses_passion(x) ∨ moves_rhythm(x)))",
      "moves_rhythm(Elise) → loves_dance(Elise)",
      "¬enjoys_art(Elise)",
      "enjoys_art(Elise) ∨ perform_professionally(Elise)",
      "loves_dance(Elise) → (teach_others(Elise) ⊕ perform_professionally(Elise))"
    ],
    "background_story": "Elise, a free-spirited dancer, fell in love with the vibrant rhythms of Cuba during a chance visit to Havana. Enchanted by the island's rich cultural heritage, she decided to leave her mundane life in Paris behind and move to Cuba. There, she immersed herself in the local dance scene, mastering the intricate steps of salsa and rumba. As she delved deeper into the Cuban way of life, Elise discovered a sense of community and passion she had never known before. She soon opened her own dance studio, where she taught visitors from around the world the beautiful dances of Cuba. Elise's love affair with the island and its people led her to become an integral part of the Cuban community, spreading joy and the spirit of Cuban culture to all who met her.",
    "name": "Elise",
    "keyword": "cuba",
    "subject_category": "human"
  },
  {
    "facts": [
      "Dr. Emmeline is a researcher.",
      "Dr. Emmeline works in a lab.",
      "Dr. Emmeline creates vaccines.",
      "Dr. Emmeline does not conduct experiments."
    ],
    "facts_fol": [
      "is_researcher(Emmeline)",
      "work_in_lab(Emmeline)",
      "create_vaccines(Emmeline)",
      "¬conduct_experiments(Emmeline)"
    ],
    "rules": [
      "For all scientists, if they study infectious diseases or develop diagnostic tools, then they advance medical knowledge.",
      "If Dr. Emmeline is a researcher, then she either analyzes data or studies infectious diseases, but not both.",
      "If Dr. Emmeline works in a lab, then she either creates vaccines or develops diagnostic tools, but not both.",
      "Every scientist either conducts experiments or analyzes data."
    ],
    "rules_fol": [
      "∀x ((study_infectious_diseases(x) ∨ develop_diagnostic_tools(x)) → advance_medical_knowledge(x))",
      "is_researcher(Emmeline) → (analyze_data(Emmeline) ⊕ study_infectious_diseases(Emmeline))",
      "work_in_lab(Emmeline) → (create_vaccines(Emmeline) ⊕ develop_diagnostic_tools(Emmeline))",
      "∀x (conduct_experiments(x) ∨ analyze_data(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Any scientist who examines pathogens or investigates outbreaks studies infectious diseases.",
      "Any scientist who investigates viruses or understands the immune system can develop diagnostic tools.",
      "All scientists who examine samples analyze data."
    ],
    "distracting_rules_fol": [
      "∀x ((examine_pathogens(x) ∨ investigate_outbreaks(x)) → study_infectious_diseases(x))",
      "∀x ((investigate_viruses(x) ∨ understand_immune_system(x)) → develop_diagnostic_tools(x))",
      "∀x (examine_samples(x) → analyze_data(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Dr. Emmeline does not conduct experiments."
        ],
        "rules": "Every scientist either conducts experiments or analyzes data.",
        "conclusion": "Dr. Emmeline analyzes data."
      },
      {
        "facts": [
          "Dr. Emmeline works in a lab.",
          "Dr. Emmeline creates vaccines."
        ],
        "rules": "If Dr. Emmeline works in a lab, then she either creates vaccines or develops diagnostic tools, but not both.",
        "conclusion": "Dr. Emmeline does not develop diagnostic tools."
      },
      {
        "facts": [
          "Dr. Emmeline is a researcher.",
          "Dr. Emmeline analyzes data."
        ],
        "rules": "If Dr. Emmeline is a researcher, then she either analyzes data or studies infectious diseases, but not both.",
        "conclusion": "Dr. Emmeline does not study infectious diseases."
      },
      {
        "facts": [
          "Dr. Emmeline does not study infectious diseases.",
          "Dr. Emmeline does not develop diagnostic tools."
        ],
        "rules": "For all scientists, if they study infectious diseases or develop diagnostic tools, then they advance medical knowledge.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬conduct_experiments(Emmeline)"
        ],
        "rules": "∀x (conduct_experiments(x) ∨ analyze_data(x))",
        "conclusion": "analyze_data(Emmeline)"
      },
      {
        "facts": [
          "work_in_lab(Emmeline)",
          "create_vaccines(Emmeline)"
        ],
        "rules": "work_in_lab(Emmeline) → (create_vaccines(Emmeline) ⊕ develop_diagnostic_tools(Emmeline))",
        "conclusion": "¬develop_diagnostic_tools(Emmeline)"
      },
      {
        "facts": [
          "is_researcher(Emmeline)",
          "analyze_data(Emmeline)"
        ],
        "rules": "is_researcher(Emmeline) → (analyze_data(Emmeline) ⊕ study_infectious_diseases(Emmeline))",
        "conclusion": "¬study_infectious_diseases(Emmeline)"
      },
      {
        "facts": [
          "¬study_infectious_diseases(Emmeline)",
          "¬develop_diagnostic_tools(Emmeline)"
        ],
        "rules": "∀x ((study_infectious_diseases(x) ∨ develop_diagnostic_tools(x)) → advance_medical_knowledge(x))",
        "conclusion": null
      }
    ],
    "conclusion": "Dr. Emmeline does not advance medical knowledge.",
    "conclusion_fol": "¬advance_medical_knowledge(Emmeline)",
    "answer": "Uncertain",
    "context": [
      "Dr. Emmeline does not conduct experiments.",
      "Every scientist either conducts experiments or analyzes data.",
      "Dr. Emmeline works in a lab.",
      "Dr. Emmeline creates vaccines.",
      "If Dr. Emmeline works in a lab, then she either creates vaccines or develops diagnostic tools, but not both.",
      "Dr. Emmeline is a researcher.",
      "If Dr. Emmeline is a researcher, then she either analyzes data or studies infectious diseases, but not both.",
      "For all scientists, if they study infectious diseases or develop diagnostic tools, then they advance medical knowledge."
    ],
    "context_fol": [
      "¬conduct_experiments(Emmeline)",
      "∀x (conduct_experiments(x) ∨ analyze_data(x))",
      "work_in_lab(Emmeline)",
      "create_vaccines(Emmeline)",
      "work_in_lab(Emmeline) → (create_vaccines(Emmeline) ⊕ develop_diagnostic_tools(Emmeline))",
      "is_researcher(Emmeline)",
      "is_researcher(Emmeline) → (analyze_data(Emmeline) ⊕ study_infectious_diseases(Emmeline))",
      "∀x ((study_infectious_diseases(x) ∨ develop_diagnostic_tools(x)) → advance_medical_knowledge(x))"
    ],
    "background_story": "Dr. Emmeline was a renowned immunologist specializing in serologic research. Her work focused on developing diagnostic tests for infectious diseases, using serologic techniques to identify and analyze antibodies in patient samples. Emmeline's groundbreaking research led to the creation of a rapid diagnostic kit for a previously hard-to-detect virus, saving countless lives worldwide. Her laboratory became a hub for collaborative research, attracting scientists from various disciplines. Emmeline's dedication to serologic science not only advanced the field but also inspired a new generation of researchers to explore the complexities of the immune system. Her contributions earned her numerous awards and recognition, solidifying her position as a leading expert in serology.",
    "name": "Emmeline",
    "keyword": "serologic",
    "subject_category": "scientist"
  },
  {
    "facts": [
      "Duncan is a leader of clans.",
      "Duncan respects nature.",
      "Duncan honors his ancestors."
    ],
    "facts_fol": [
      "lead_clans(Duncan)",
      "respect_nature(Duncan)",
      "honor_ancestors(Duncan)"
    ],
    "rules": [
      "For all characters, if a character masters the Fennic arts and protects their homeland, then they will be a hero.",
      "If Duncan wields magic, then he is either a leader of clans or protects his homeland, but not both.",
      "If Duncan respects nature, then he has a vision and wields magic.",
      "Duncan either honors his ancestors or masters the Fennic arts."
    ],
    "rules_fol": [
      "∀x ((master_fennic_arts(x) ∧ protect_homeland(x)) → be_a_hero(x))",
      "wield_magic(Duncan) → (lead_clans(Duncan) ⊕ protect_homeland(Duncan))",
      "respect_nature(Duncan) → (have_vision(Duncan) ∧ wield_magic(Duncan))",
      "honor_ancestors(Duncan) ∨ master_fennic_arts(Duncan)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Any fictional character who defends their territory or upholds their tradition will protect their homeland.",
      "If Duncan communes with trees, then he can wield magic.",
      "If Duncan can commune with trees or control storms, then he can master the Fennic arts."
    ],
    "distracting_rules_fol": [
      "∀x ((defend_territory(x) ∨ uphold_tradition(x)) → protect_homeland(x))",
      "commune_with_trees(Duncan) → wield_magic(Duncan)",
      "(commune_trees(Duncan) ∨ control_storms(Duncan)) → master_fennic_arts(Duncan)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Duncan honors his ancestors."
        ],
        "rules": "Duncan either honors his ancestors or masters the Fennic arts.",
        "conclusion": null
      },
      {
        "facts": [
          "Duncan respects nature."
        ],
        "rules": "If Duncan respects nature, then he has a vision and wields magic.",
        "conclusion": "Duncan wields magic."
      },
      {
        "facts": [
          "Duncan wields magic.",
          "Duncan is a leader of clans."
        ],
        "rules": "If Duncan wields magic, then he is either a leader of clans or protects his homeland, but not both.",
        "conclusion": "Duncan does not protect his homeland."
      },
      {
        "facts": [
          "Duncan does not protect his homeland."
        ],
        "rules": "For all characters, if a character masters the Fennic arts and protects their homeland, then they will be a hero.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "honor_ancestors(Duncan)"
        ],
        "rules": "honor_ancestors(Duncan) ∨ master_fennic_arts(Duncan)",
        "conclusion": null
      },
      {
        "facts": [
          "respect_nature(Duncan)"
        ],
        "rules": "respect_nature(Duncan) → (have_vision(Duncan) ∧ wield_magic(Duncan))",
        "conclusion": "wield_magic(Duncan)"
      },
      {
        "facts": [
          "wield_magic(Duncan)",
          "lead_clans(Duncan)"
        ],
        "rules": "wield_magic(Duncan) → (lead_clans(Duncan) ⊕ protect_homeland(Duncan))",
        "conclusion": "¬protect_homeland(Duncan)"
      },
      {
        "facts": [
          "¬protect_homeland(Duncan)"
        ],
        "rules": "∀x ((master_fennic_arts(x) ∧ protect_homeland(x)) → be_a_hero(x))",
        "conclusion": null
      }
    ],
    "conclusion": "Duncan is a hero.",
    "conclusion_fol": "be_a_hero(Duncan)",
    "answer": "Uncertain",
    "context": [
      "Duncan honors his ancestors.",
      "Duncan either honors his ancestors or masters the Fennic arts.",
      "Duncan respects nature.",
      "If Duncan respects nature, then he has a vision and wields magic.",
      "Duncan is a leader of clans.",
      "If Duncan wields magic, then he is either a leader of clans or protects his homeland, but not both.",
      "For all characters, if a character masters the Fennic arts and protects their homeland, then they will be a hero."
    ],
    "context_fol": [
      "honor_ancestors(Duncan)",
      "honor_ancestors(Duncan) ∨ master_fennic_arts(Duncan)",
      "respect_nature(Duncan)",
      "respect_nature(Duncan) → (have_vision(Duncan) ∧ wield_magic(Duncan))",
      "lead_clans(Duncan)",
      "wield_magic(Duncan) → (lead_clans(Duncan) ⊕ protect_homeland(Duncan))",
      "∀x ((master_fennic_arts(x) ∧ protect_homeland(x)) → be_a_hero(x))"
    ],
    "background_story": "Duncan, a skilled Fennic warrior, hailed from the mystical realm of Tenoria, where the ancient magic of the forest flowed through every living being. With his unparalleled mastery of the Fennic arts, Duncan could communicate with the trees, summon the fury of the storms, and wield the essence of the land as a weapon. His quest began when dark forces threatened to desecrate the sacred groves, aiming to exploit the Fennic energies for their own malicious purposes. With his trusty staff, imbued with the power of the ancients, Duncan embarked on a perilous journey to unite the fragmented Fennic clans and defend their homeland against the looming darkness. His name became synonymous with bravery and the unwavering dedication to preserving the delicate balance of nature.",
    "name": "Duncan",
    "keyword": "fennic",
    "subject_category": "fictional character"
  },
  {
    "facts": [
      "Ila examines rocks.",
      "Ila uncovers artifacts.",
      "Ila does not research prehistory.",
      "Ila writes papers."
    ],
    "facts_fol": [
      "examines_rocks(Ila)",
      "uncover_artifacts(Ila)",
      "¬research_prehistory(Ila)",
      "write_papers(Ila)"
    ],
    "rules": [
      "If Ila excavates fossils, then she either analyzes bones or studies raptors.",
      "If Ila examines rocks and uncovers artifacts, then she analyzes bones.",
      "Every paleontologist who researches prehistory either classifies species or excavates fossils.",
      "Ila either writes papers or classifies species, but not necessarily both."
    ],
    "rules_fol": [
      "excavate_fossils(Ila) → (analyze_bones(Ila) ∨ study_raptors(Ila))",
      "(examines_rocks(Ila) ∧ uncover_artifacts(Ila)) → analyze_bones(Ila)",
      "∀x (research_prehistory(x) → (classify_species(x) ∨ excavate_fossils(x)))",
      "write_papers(Ila) ⊕ classify_species(Ila)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Ila either explores deserts or studies raptors.",
      "Every paleontologist who investigates sites either reconstructs models or analyzes bones.",
      "If Ila either collects samples or dates rocks (but not both), then she excavates fossils.",
      "Any paleontologist who examines fossils or identifies remains can classify species."
    ],
    "distracting_rules_fol": [
      "explores_deserts(Ila) ∨ study_raptors(Ila)",
      "∀x (investigate_sites(x) → (reconstruct_models(x) ∨ analyze_bones(x)))",
      "(collect_samples(Ila) ⊕ date_rocks(Ila)) → excavate_fossils(Ila)",
      "∀x ((examine_fossils(x) ∨ identify_remains(x)) → classify_species(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Ila writes papers."
        ],
        "rules": "Ila either writes papers or classifies species, but not necessarily both.",
        "conclusion": "Ila does not classify species."
      },
      {
        "facts": [
          "Ila does not research prehistory.",
          "Ila does not classify species."
        ],
        "rules": "Every paleontologist who researches prehistory either classifies species or excavates fossils.",
        "conclusion": null
      },
      {
        "facts": [
          "Ila examines rocks.",
          "Ila uncovers artifacts."
        ],
        "rules": "If Ila examines rocks and uncovers artifacts, then she analyzes bones.",
        "conclusion": "Ila analyzes bones."
      },
      {
        "facts": [
          "Ila analyzes bones."
        ],
        "rules": "If Ila excavates fossils, then she either analyzes bones or studies raptors.",
        "conclusion": null
      },
      {
        "facts": [],
        "rules": null,
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "write_papers(Ila)"
        ],
        "rules": "write_papers(Ila) ⊕ classify_species(Ila)",
        "conclusion": "¬classify_species(Ila)"
      },
      {
        "facts": [
          "¬research_prehistory(Ila)",
          "¬classify_species(Ila)"
        ],
        "rules": "∀x (research_prehistory(x) → (classify_species(x) ∨ excavate_fossils(x)))",
        "conclusion": null
      },
      {
        "facts": [
          "examines_rocks(Ila)",
          "uncover_artifacts(Ila)"
        ],
        "rules": "(examines_rocks(Ila) ∧ uncover_artifacts(Ila)) → analyze_bones(Ila)",
        "conclusion": "analyze_bones(Ila)"
      },
      {
        "facts": [
          "analyze_bones(Ila)"
        ],
        "rules": "excavate_fossils(Ila) → (analyze_bones(Ila) ∨ study_raptors(Ila))",
        "conclusion": null
      },
      {
        "facts": [],
        "rules": null,
        "conclusion": null
      }
    ],
    "conclusion": "Ila either studies raptors or contributes to conservation (or both).",
    "conclusion_fol": "study_raptors(Ila) ∨ contribute_to_conservation(Ila)",
    "answer": "Uncertain",
    "context": [
      "Ila writes papers.",
      "Ila either writes papers or classifies species, but not necessarily both.",
      "Ila does not research prehistory.",
      "Every paleontologist who researches prehistory either classifies species or excavates fossils.",
      "Ila examines rocks.",
      "Ila uncovers artifacts.",
      "If Ila examines rocks and uncovers artifacts, then she analyzes bones.",
      "If Ila excavates fossils, then she either analyzes bones or studies raptors."
    ],
    "context_fol": [
      "write_papers(Ila)",
      "write_papers(Ila) ⊕ classify_species(Ila)",
      "¬research_prehistory(Ila)",
      "∀x (research_prehistory(x) → (classify_species(x) ∨ excavate_fossils(x)))",
      "examines_rocks(Ila)",
      "uncover_artifacts(Ila)",
      "(examines_rocks(Ila) ∧ uncover_artifacts(Ila)) → analyze_bones(Ila)",
      "excavate_fossils(Ila) → (analyze_bones(Ila) ∨ study_raptors(Ila))"
    ],
    "background_story": "Ila was a renowned paleontologist with a passion for studying raptors. She spent years excavating fossils in the Gobi Desert, uncovering crucial evidence about the behavior and evolution of these feathered predators. Ila's groundbreaking research on Velociraptor and Oviraptor revealed new insights into their intelligence, pack hunting, and adaptability. Her findings challenged conventional wisdom and sparked a new wave of interest in raptor biology. Ila's love for raptors was not limited to the ancient world; she also worked with conservationists to protect modern bird species, such as hawks and eagles, that are the direct descendants of these prehistoric hunters.",
    "name": "Ila",
    "keyword": "raptores",
    "subject_category": "paleontologist"
  },
  {
    "facts": [
      "Ahmed inspires others.",
      "Ahmed reads the audience.",
      "Ahmed plays good music.",
      "Ahmed takes risks.",
      "Ahmed does not speak well."
    ],
    "facts_fol": [
      "inspire_others(Ahmed)",
      "reads_audience(Ahmed)",
      "plays_good_music(Ahmed)",
      "takes_risks(Ahmed)",
      "¬speaks_well(Ahmed)"
    ],
    "rules": [
      "If Ahmed is charismatic, then he is either a successful performer or an influential leader, but not both.",
      "If Ahmed is confident, then he is an influential leader and inspires others.",
      "Anyone who has stage presence or connects with the crowd is charismatic.",
      "If someone reads the audience and plays good music, then they can connect with the crowd.",
      "Anyone who takes risks or speaks well is confident."
    ],
    "rules_fol": [
      "charismatic(Ahmed) → (successful_performer(Ahmed) ⊕ influential_leader(Ahmed))",
      "confident(Ahmed) → (influential_leader(Ahmed) ∧ inspire_others(Ahmed))",
      "∀x ((has_stage_presence(x) ∨ connects_with_crowd(x)) → charismatic(x))",
      "∀x ((reads_audience(x) ∧ plays_good_music(x)) → connects_with_crowd(x))",
      "∀x ((takes_risks(x) ∨ speaks_well(x)) → confident(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Ahmed makes decisions and builds teams, then he is an influential leader.",
      "If Ahmed is a popular DJ, then he is either charismatic or a famous artist, but not both.",
      "Anyone who performs live either builds energy or connects with the crowd.",
      "Ahmed enjoys parties or is confident."
    ],
    "distracting_rules_fol": [
      "(makes_decisions(Ahmed) ∧ builds_teams(Ahmed)) → influential_leader(Ahmed)",
      "popular_dj(Ahmed) → (charismatic(Ahmed) ⊕ famous_artist(Ahmed))",
      "∀x (performs_live(x) → (builds_energy(x) ∨ connects_with_crowd(x)))",
      "enjoys_parties(Ahmed) ∨ confident(Ahmed)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Ahmed takes risks.",
          "Ahmed does not speak well."
        ],
        "rules": "Anyone who takes risks or speaks well is confident.",
        "conclusion": "Ahmed is confident."
      },
      {
        "facts": [
          "Ahmed reads the audience.",
          "Ahmed plays good music."
        ],
        "rules": "If someone reads the audience and plays good music, then they can connect with the crowd.",
        "conclusion": "Ahmed connects with the crowd."
      },
      {
        "facts": [
          "Ahmed connects with the crowd."
        ],
        "rules": "Anyone who has stage presence or connects with the crowd is charismatic.",
        "conclusion": "Ahmed is charismatic."
      },
      {
        "facts": [
          "Ahmed is confident.",
          "Ahmed inspires others."
        ],
        "rules": "If Ahmed is confident, then he is an influential leader and inspires others.",
        "conclusion": "Ahmed is an influential leader."
      },
      {
        "facts": [
          "Ahmed is charismatic.",
          "Ahmed is an influential leader."
        ],
        "rules": "If Ahmed is charismatic, then he is either a successful performer or an influential leader, but not both.",
        "conclusion": "Ahmed is not a successful performer."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "takes_risks(Ahmed)",
          "¬speaks_well(Ahmed)"
        ],
        "rules": "∀x ((takes_risks(x) ∨ speaks_well(x)) → confident(x))",
        "conclusion": "confident(Ahmed)"
      },
      {
        "facts": [
          "reads_audience(Ahmed)",
          "plays_good_music(Ahmed)"
        ],
        "rules": "∀x ((reads_audience(x) ∧ plays_good_music(x)) → connects_with_crowd(x))",
        "conclusion": "connects_with_crowd(Ahmed)"
      },
      {
        "facts": [
          "connects_with_crowd(Ahmed)"
        ],
        "rules": "∀x ((has_stage_presence(x) ∨ connects_with_crowd(x)) → charismatic(x))",
        "conclusion": "charismatic(Ahmed)"
      },
      {
        "facts": [
          "confident(Ahmed)",
          "inspire_others(Ahmed)"
        ],
        "rules": "confident(Ahmed) → (influential_leader(Ahmed) ∧ inspire_others(Ahmed))",
        "conclusion": "influential_leader(Ahmed)"
      },
      {
        "facts": [
          "charismatic(Ahmed)",
          "influential_leader(Ahmed)"
        ],
        "rules": "charismatic(Ahmed) → (successful_performer(Ahmed) ⊕ influential_leader(Ahmed))",
        "conclusion": "¬successful_performer(Ahmed)"
      }
    ],
    "conclusion": "Ahmed is not a successful performer.",
    "conclusion_fol": "¬successful_performer(Ahmed)",
    "answer": "True",
    "context": [
      "Ahmed takes risks.",
      "Ahmed does not speak well.",
      "Anyone who takes risks or speaks well is confident.",
      "Ahmed reads the audience.",
      "Ahmed plays good music.",
      "If someone reads the audience and plays good music, then they can connect with the crowd.",
      "Anyone who has stage presence or connects with the crowd is charismatic.",
      "Ahmed inspires others.",
      "If Ahmed is confident, then he is an influential leader and inspires others.",
      "If Ahmed is charismatic, then he is either a successful performer or an influential leader, but not both."
    ],
    "context_fol": [
      "takes_risks(Ahmed)",
      "¬speaks_well(Ahmed)",
      "∀x ((takes_risks(x) ∨ speaks_well(x)) → confident(x))",
      "reads_audience(Ahmed)",
      "plays_good_music(Ahmed)",
      "∀x ((reads_audience(x) ∧ plays_good_music(x)) → connects_with_crowd(x))",
      "∀x ((has_stage_presence(x) ∨ connects_with_crowd(x)) → charismatic(x))",
      "inspire_others(Ahmed)",
      "confident(Ahmed) → (influential_leader(Ahmed) ∧ inspire_others(Ahmed))",
      "charismatic(Ahmed) → (successful_performer(Ahmed) ⊕ influential_leader(Ahmed))"
    ],
    "background_story": "Ahmed was the king of the nightlife scene. Every weekend, he could be found at the hottest clubs in town, spinning tracks as DJ Ace. His charisma and infectious energy drew crowds from all over, and his sets were always the most anticipated events of the month. Ahmed's love for clubbing started in college, where he began mixing tracks in his dorm room. Soon, he was playing at local parties and eventually landed his first gig at a prestigious club. Years later, Ahmed's name was synonymous with clubbing, and his nights were filled with the thrill of the dance floor, the rush of performing, and the joy of bringing people together through music.",
    "name": "Ahmed",
    "keyword": "clubbing",
    "subject_category": "human"
  },
  {
    "facts": [
      "Aarav is not efficient.",
      "Aarav is not organized.",
      "Aarav prioritizes tasks.",
      "Aarav sets goals.",
      "Aarav does not track progress."
    ],
    "facts_fol": [
      "¬efficient(Aarav)",
      "¬organized(Aarav)",
      "prioritizes_tasks(Aarav)",
      "sets_goals(Aarav)",
      "¬tracks_progress(Aarav)"
    ],
    "rules": [
      "Aarav either manages his time or is productive.",
      "All individuals who prioritize tasks either manage their time or meet deadlines.",
      "If Aarav either sets goals or tracks progress (but not both), then he meets deadlines."
    ],
    "rules_fol": [
      "manages_time(Aarav) ∨ productive(Aarav)",
      "∀x (prioritizes_tasks(x) → (manages_time(x) ⊕ meets_deadlines(x)))",
      "(sets_goals(Aarav) ⊕ tracks_progress(Aarav)) → meets_deadlines(Aarav)"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "If Aarav either plans ahead or stays focused (but not both), then he is productive.",
      "Anyone who creates a schedule or avoids procrastination can manage their time.",
      "If Aarav focuses, then he will meet deadlines."
    ],
    "distracting_rules_fol": [
      "(plans_ahead(Aarav) ⊕ stays_focused(Aarav)) → productive(Aarav)",
      "∀x ((creates_schedule(x) ∨ avoids_procrast(x)) → manages_time(x))",
      "focuses(Aarav) → meets_deadlines(Aarav)"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Aarav sets goals.",
          "Aarav does not track progress."
        ],
        "rules": "If Aarav either sets goals or tracks progress (but not both), then he meets deadlines.",
        "conclusion": "Aarav meets deadlines."
      },
      {
        "facts": [
          "Aarav prioritizes tasks.",
          "Aarav meets deadlines."
        ],
        "rules": "All individuals who prioritize tasks either manage their time or meet deadlines.",
        "conclusion": "Aarav does not manage his time."
      },
      {
        "facts": [
          "Aarav does not manage his time."
        ],
        "rules": "Aarav either manages his time or is productive.",
        "conclusion": "Aarav is productive."
      },
      {
        "facts": [
          "Aarav is not organized.",
          "Aarav is not efficient.",
          "Aarav is productive."
        ],
        "rules": null,
        "conclusion": "If Aarav is either organized or efficient (but not both), then he is productive."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "sets_goals(Aarav)",
          "¬tracks_progress(Aarav)"
        ],
        "rules": "(sets_goals(Aarav) ⊕ tracks_progress(Aarav)) → meets_deadlines(Aarav)",
        "conclusion": "meets_deadlines(Aarav)"
      },
      {
        "facts": [
          "prioritizes_tasks(Aarav)",
          "meets_deadlines(Aarav)"
        ],
        "rules": "∀x (prioritizes_tasks(x) → (manages_time(x) ⊕ meets_deadlines(x)))",
        "conclusion": "¬manages_time(Aarav)"
      },
      {
        "facts": [
          "¬manages_time(Aarav)"
        ],
        "rules": "manages_time(Aarav) ∨ productive(Aarav)",
        "conclusion": "productive(Aarav)"
      },
      {
        "facts": [
          "¬organized(Aarav)",
          "¬efficient(Aarav)",
          "productive(Aarav)"
        ],
        "rules": null,
        "conclusion": "(organized(Aarav) ⊕ efficient(Aarav)) → productive(Aarav)"
      }
    ],
    "conclusion": "If Aarav is either organized or efficient (but not both), then he is productive.",
    "conclusion_fol": "(organized(Aarav) ⊕ efficient(Aarav)) → productive(Aarav)",
    "answer": "True",
    "context": [
      "Aarav sets goals.",
      "Aarav does not track progress.",
      "If Aarav either sets goals or tracks progress (but not both), then he meets deadlines.",
      "Aarav prioritizes tasks.",
      "All individuals who prioritize tasks either manage their time or meet deadlines.",
      "Aarav either manages his time or is productive.",
      "Aarav is not organized.",
      "Aarav is not efficient."
    ],
    "context_fol": [
      "sets_goals(Aarav)",
      "¬tracks_progress(Aarav)",
      "(sets_goals(Aarav) ⊕ tracks_progress(Aarav)) → meets_deadlines(Aarav)",
      "prioritizes_tasks(Aarav)",
      "∀x (prioritizes_tasks(x) → (manages_time(x) ⊕ meets_deadlines(x)))",
      "manages_time(Aarav) ∨ productive(Aarav)",
      "¬organized(Aarav)",
      "¬efficient(Aarav)"
    ],
    "background_story": "Aarav was a well-intentioned but somewhat disorganized young man. Despite his best efforts, he often found himself struggling with simple tasks due to his inefficient methods. His daily routine was a testament to this, as he would spend hours on mundane chores that others could complete in minutes. Aarav's workspace was cluttered, and his digital files were a jumbled mess. He would frequently misplace important documents and spend valuable time searching for them. His friends and family tried to offer him tips on how to streamline his workflow, but old habits died hard for Aarav. As a result, he often felt frustrated and overwhelmed, wishing he could find a way to become more efficient and make the most of his time.",
    "name": "Aarav",
    "keyword": "inefficient",
    "subject_category": "human"
  },
  {
    "facts": [
      "Drew uses medicine.",
      "Drew experiences pain.",
      "Drew does not feel weak.",
      "Drew gets hurt.",
      "Drew does not need rehabilitation."
    ],
    "facts_fol": [
      "uses_medicine(Drew)",
      "experiences_pain(Drew)",
      "¬feels_weak(Drew)",
      "gets_hurt(Drew)",
      "¬needs_rehab(Drew)"
    ],
    "rules": [
      "If Drew is injured, then he will either seek medical attention or adjust his lifestyle, but not both.",
      "If Drew experiences pain, then he will either use medicine or seek medical attention, but not both.",
      "If Drew either has swelling or feels weak (but not both), then he is injured.",
      "Anyone who gets hurt either has swelling or needs rehabilitation."
    ],
    "rules_fol": [
      "injured(Drew) → (seek_medical_attention(Drew) ⊕ adjust_lifestyle(Drew))",
      "experiences_pain(Drew) → (uses_medicine(Drew) ⊕ seek_medical_attention(Drew))",
      "(has_swelling(Drew) ⊕ feels_weak(Drew)) → injured(Drew)",
      "∀x (gets_hurt(x) → (has_swelling(x) ∨ needs_rehab(x)))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "For all humans, if they have symptoms and seek a diagnosis, then they will seek medical attention.",
      "If Drew either has numbness or feels stiffness (but not both), then he is injured.",
      "Everyone who overexerts themselves either gets fatigued or has swelling."
    ],
    "distracting_rules_fol": [
      "∀x ((has_symptoms(x) ∧ seeks_diagnosis(x)) → seek_medical_attention(x))",
      "(has_numbness(Drew) ⊕ feels_stiff(Drew)) → injured(Drew)",
      "∀x (overexerts(x) → (gets_fatigued(x) ∨ has_swelling(x)))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Drew gets hurt.",
          "Drew does not need rehabilitation."
        ],
        "rules": "Anyone who gets hurt either has swelling or needs rehabilitation.",
        "conclusion": "Drew has swelling."
      },
      {
        "facts": [
          "Drew has swelling.",
          "Drew does not feel weak."
        ],
        "rules": "If Drew either has swelling or feels weak (but not both), then he is injured.",
        "conclusion": "Drew is injured."
      },
      {
        "facts": [
          "Drew experiences pain.",
          "Drew uses medicine."
        ],
        "rules": "If Drew experiences pain, then he will either use medicine or seek medical attention, but not both.",
        "conclusion": "Drew does not seek medical attention."
      },
      {
        "facts": [
          "Drew is injured.",
          "Drew does not seek medical attention."
        ],
        "rules": "If Drew is injured, then he will either seek medical attention or adjust his lifestyle, but not both.",
        "conclusion": "Drew does not adjust his lifestyle."
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "gets_hurt(Drew)",
          "¬needs_rehab(Drew)"
        ],
        "rules": "∀x (gets_hurt(x) → (has_swelling(x) ∨ needs_rehab(x)))",
        "conclusion": "has_swelling(Drew)"
      },
      {
        "facts": [
          "has_swelling(Drew)",
          "¬feels_weak(Drew)"
        ],
        "rules": "(has_swelling(Drew) ⊕ feels_weak(Drew)) → injured(Drew)",
        "conclusion": "injured(Drew)"
      },
      {
        "facts": [
          "experiences_pain(Drew)",
          "uses_medicine(Drew)"
        ],
        "rules": "experiences_pain(Drew) → (uses_medicine(Drew) ⊕ seek_medical_attention(Drew))",
        "conclusion": "¬seek_medical_attention(Drew)"
      },
      {
        "facts": [
          "injured(Drew)",
          "¬seek_medical_attention(Drew)"
        ],
        "rules": "injured(Drew) → (seek_medical_attention(Drew) ⊕ adjust_lifestyle(Drew))",
        "conclusion": "¬adjust_lifestyle(Drew)"
      }
    ],
    "conclusion": "Drew does not adjust his lifestyle.",
    "conclusion_fol": "¬adjust_lifestyle(Drew)",
    "answer": "False",
    "context": [
      "Drew gets hurt.",
      "Drew does not need rehabilitation.",
      "Anyone who gets hurt either has swelling or needs rehabilitation.",
      "Drew does not feel weak.",
      "If Drew either has swelling or feels weak (but not both), then he is injured.",
      "Drew experiences pain.",
      "Drew uses medicine.",
      "If Drew experiences pain, then he will either use medicine or seek medical attention, but not both.",
      "If Drew is injured, then he will either seek medical attention or adjust his lifestyle, but not both."
    ],
    "context_fol": [
      "gets_hurt(Drew)",
      "¬needs_rehab(Drew)",
      "∀x (gets_hurt(x) → (has_swelling(x) ∨ needs_rehab(x)))",
      "¬feels_weak(Drew)",
      "(has_swelling(Drew) ⊕ feels_weak(Drew)) → injured(Drew)",
      "experiences_pain(Drew)",
      "uses_medicine(Drew)",
      "experiences_pain(Drew) → (uses_medicine(Drew) ⊕ seek_medical_attention(Drew))",
      "injured(Drew) → (seek_medical_attention(Drew) ⊕ adjust_lifestyle(Drew))"
    ],
    "background_story": "Drew, a 35-year-old marathon runner, had always pushed his body to the limit. However, after completing his fifth marathon, he started experiencing severe pain and numbness in his lower back and legs. Initially, he brushed it off as a minor injury, but as the symptoms persisted, he sought medical attention. The diagnosis was radiculitis, a condition where the nerves in the spine become inflamed, causing pain and discomfort. Drew was devastated, feeling as though his active lifestyle was being taken away from him. With the help of physical therapy and medication, he slowly began to recover. Although he had to adjust his training regimen, Drew remained determined to return to running, learning to listen to his body and prioritize his health above his passion for the sport.",
    "name": "Drew",
    "keyword": "radiculitis",
    "subject_category": "human"
  },
  {
    "facts": [
      "Bria does not take risks."
    ],
    "facts_fol": [
      "¬take_risks(Bria)"
    ],
    "rules": [
      "If Bria works hard, then she achieves success.",
      "For Bria, either she has faith or she works hard, but it's not necessarily both.",
      "For anyone, either they take risks or they have faith, but not necessarily both."
    ],
    "rules_fol": [
      "work_hard(Bria) → achieve_success(Bria)",
      "have_faith(Bria) ⊕ work_hard(Bria)",
      "∀x (take_risks(x) ⊕ have_faith(x))"
    ],
    "distracting_facts": [],
    "distracting_facts_fol": [],
    "distracting_rules": [
      "Everyone who pursues their passion either works hard or helps others (or both).",
      "Anyone who trusts the universe or believes in themselves has faith."
    ],
    "distracting_rules_fol": [
      "∀x (pursue_passion(x) → (work_hard(x) ∨ help_others(x)))",
      "∀x ((trust_universe(x) ∨ believe_self(x)) → have_faith(x))"
    ],
    "reasoning_chains": [
      {
        "facts": [
          "Bria does not take risks."
        ],
        "rules": "For anyone, either they take risks or they have faith, but not necessarily both.",
        "conclusion": "Bria has faith."
      },
      {
        "facts": [
          "Bria has faith."
        ],
        "rules": "For Bria, either she has faith or she works hard, but it's not necessarily both.",
        "conclusion": "Bria does not work hard."
      },
      {
        "facts": [
          "Bria does not work hard."
        ],
        "rules": "If Bria works hard, then she achieves success.",
        "conclusion": null
      }
    ],
    "reasoning_chains_fol": [
      {
        "facts": [
          "¬take_risks(Bria)"
        ],
        "rules": "∀x (take_risks(x) ⊕ have_faith(x))",
        "conclusion": "have_faith(Bria)"
      },
      {
        "facts": [
          "have_faith(Bria)"
        ],
        "rules": "have_faith(Bria) ⊕ work_hard(Bria)",
        "conclusion": "¬work_hard(Bria)"
      },
      {
        "facts": [
          "¬work_hard(Bria)"
        ],
        "rules": "work_hard(Bria) → achieve_success(Bria)",
        "conclusion": null
      }
    ],
    "conclusion": "Bria achieves success.",
    "conclusion_fol": "achieve_success(Bria)",
    "answer": "Uncertain",
    "context": [
      "Bria does not take risks.",
      "For anyone, either they take risks or they have faith, but not necessarily both.",
      "For Bria, either she has faith or she works hard, but it's not necessarily both.",
      "If Bria works hard, then she achieves success."
    ],
    "context_fol": [
      "¬take_risks(Bria)",
      "∀x (take_risks(x) ⊕ have_faith(x))",
      "have_faith(Bria) ⊕ work_hard(Bria)",
      "work_hard(Bria) → achieve_success(Bria)"
    ],
    "background_story": "Bria's life was a testament to the power of providence. Growing up in a low-income household, she often wondered if she was destined for more. One day, while volunteering at a local soup kitchen, Bria met a stranger who would change her life. The stranger, a successful businesswoman, was so impressed by Bria's kindness and work ethic that she offered to mentor her. Under her guidance, Bria discovered her passion for social entrepreneurship and eventually secured a full scholarship to a prestigious university. As Bria navigated her newfound opportunities, she began to see the world as a place where providence and hard work intersected. She founded a non-profit organization that provided educational resources to underprivileged children, believing that everyone deserved a chance to thrive. Bria's journey was a reminder that sometimes, all it takes is a little bit of faith and a lot of heart to find one's true purpose.",
    "name": "Bria",
    "keyword": "providence",
    "subject_category": "human"
  }
]